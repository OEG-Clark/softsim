{"home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.demo.parse_args": [[45, 101], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "  ", "\"\"\"\n  Parse input arguments\n  \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a Fast R-CNN network'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "dest", "=", "'dataset'", ",", "\n", "help", "=", "'training dataset'", ",", "\n", "default", "=", "'pascal_voc'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "\n", "default", "=", "'cfgs/vgg16.yml'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "dest", "=", "'net'", ",", "\n", "help", "=", "'vgg16, res50, res101, res152'", ",", "\n", "default", "=", "'res101'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "dest", "=", "'set_cfgs'", ",", "\n", "help", "=", "'set config keys'", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "parser", ".", "add_argument", "(", "'--load_dir'", ",", "dest", "=", "'load_dir'", ",", "\n", "help", "=", "'directory to load models'", ",", "\n", "default", "=", "\"/srv/share/jyang375/models\"", ")", "\n", "parser", ".", "add_argument", "(", "'--image_dir'", ",", "dest", "=", "'image_dir'", ",", "\n", "help", "=", "'directory to load images for demo'", ",", "\n", "default", "=", "\"images\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "dest", "=", "'cuda'", ",", "\n", "help", "=", "'whether use CUDA'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--mGPUs'", ",", "dest", "=", "'mGPUs'", ",", "\n", "help", "=", "'whether use multiple GPUs'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--cag'", ",", "dest", "=", "'class_agnostic'", ",", "\n", "help", "=", "'whether perform class_agnostic bbox regression'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--parallel_type'", ",", "dest", "=", "'parallel_type'", ",", "\n", "help", "=", "'which part of model to parallel, 0: all, 1: model before roi pooling'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checksession'", ",", "dest", "=", "'checksession'", ",", "\n", "help", "=", "'checksession to load model'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checkepoch'", ",", "dest", "=", "'checkepoch'", ",", "\n", "help", "=", "'checkepoch to load network'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "dest", "=", "'checkpoint'", ",", "\n", "help", "=", "'checkpoint to load network'", ",", "\n", "default", "=", "10021", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--bs'", ",", "dest", "=", "'batch_size'", ",", "\n", "help", "=", "'batch_size'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--vis'", ",", "dest", "=", "'vis'", ",", "\n", "help", "=", "'visualization mode'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--webcam_num'", ",", "dest", "=", "'webcam_num'", ",", "\n", "help", "=", "'webcam ID number'", ",", "\n", "default", "=", "-", "1", ",", "type", "=", "int", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.demo._get_image_blob": [[106, 139], ["cv2.resize.astype", "numpy.min", "numpy.max", "model.utils.blob.im_list_to_blob", "cv2.resize", "im_scale_factors.append", "processed_ims.append", "numpy.array", "float", "float", "numpy.round", "float", "float"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.blob.im_list_to_blob"], ["def", "_get_image_blob", "(", "im", ")", ":", "\n", "  ", "\"\"\"Converts an image into a network input.\n  Arguments:\n    im (ndarray): a color image in BGR order\n  Returns:\n    blob (ndarray): a data blob holding an image pyramid\n    im_scale_factors (list): list of image scales (relative to im) used\n      in the image pyramid\n  \"\"\"", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "\n", "processed_ims", "=", "[", "]", "\n", "im_scale_factors", "=", "[", "]", "\n", "\n", "for", "target_size", "in", "cfg", ".", "TEST", ".", "SCALES", ":", "\n", "    ", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# Prevent the biggest axis from being more than MAX_SIZE", "\n", "if", "np", ".", "round", "(", "im_scale", "*", "im_size_max", ")", ">", "cfg", ".", "TEST", ".", "MAX_SIZE", ":", "\n", "      ", "im_scale", "=", "float", "(", "cfg", ".", "TEST", ".", "MAX_SIZE", ")", "/", "float", "(", "im_size_max", ")", "\n", "", "im", "=", "cv2", ".", "resize", "(", "im_orig", ",", "None", ",", "None", ",", "fx", "=", "im_scale", ",", "fy", "=", "im_scale", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "im_scale_factors", ".", "append", "(", "im_scale", ")", "\n", "processed_ims", ".", "append", "(", "im", ")", "\n", "\n", "# Create a blob to hold the input images", "\n", "", "blob", "=", "im_list_to_blob", "(", "processed_ims", ")", "\n", "\n", "return", "blob", ",", "np", ".", "array", "(", "im_scale_factors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.test_net.parse_args": [[47, 125], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a Fast R-CNN network'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "dest", "=", "'dataset'", ",", "\n", "help", "=", "'training dataset'", ",", "\n", "default", "=", "'uav'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "\n", "default", "=", "'cfgs/vgg16.yml'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "dest", "=", "'net'", ",", "\n", "help", "=", "'vgg16, res50, res101, res152'", ",", "\n", "default", "=", "'res101'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "dest", "=", "'set_cfgs'", ",", "\n", "help", "=", "'set config keys'", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "dest", "=", "'save_dir'", ",", "\n", "help", "=", "'directory to save models'", ",", "default", "=", "\"models\"", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "dest", "=", "'cuda'", ",", "\n", "help", "=", "'whether use CUDA'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--ls'", ",", "dest", "=", "'large_scale'", ",", "\n", "help", "=", "'whether use large imag scale'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--mGPUs'", ",", "dest", "=", "'mGPUs'", ",", "\n", "help", "=", "'whether use multiple GPUs'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--cag'", ",", "dest", "=", "'class_agnostic'", ",", "\n", "help", "=", "'whether perform class_agnostic bbox regression'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--parallel_type'", ",", "dest", "=", "'parallel_type'", ",", "\n", "help", "=", "'which part of model to parallel, 0: all, 1: model before roi pooling'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checksession'", ",", "dest", "=", "'checksession'", ",", "\n", "help", "=", "'checksession to load model'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checkepoch'", ",", "dest", "=", "'checkepoch'", ",", "\n", "help", "=", "'checkepoch to load network'", ",", "\n", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "dest", "=", "'checkpoint'", ",", "\n", "help", "=", "'checkpoint to load network'", ",", "\n", "default", "=", "3960", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--vis'", ",", "dest", "=", "'vis'", ",", "\n", "help", "=", "'visualization mode'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_dir'", ",", "dest", "=", "'model_dir'", ",", "\n", "help", "=", "'directory to save models'", ",", "default", "=", "\"models\"", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma_altitude'", ",", "dest", "=", "'gamma_altitude'", ",", "\n", "help", "=", "'the gamma is used to control the relative weight of the adversarial loss of altitude'", ",", "\n", "type", "=", "float", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma_angle'", ",", "dest", "=", "'gamma_angle'", ",", "\n", "help", "=", "'the gamma is used to control the relative weight of the adversarial loss of viewing angle'", ",", "\n", "type", "=", "float", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma_weather'", ",", "dest", "=", "'gamma_weather'", ",", "\n", "help", "=", "'the gamma is used to control the relative weight of the adversarial loss of weather'", ",", "\n", "type", "=", "float", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--use_restarting'", ",", "dest", "=", "'use_restarting'", ",", "\n", "help", "=", "'where to use restarting'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--is_baseline_method'", ",", "dest", "=", "'is_baseline_method'", ",", "\n", "help", "=", "'whether to evaluate the baseline method'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--ovthresh'", ",", "dest", "=", "'ovthresh'", ",", "\n", "help", "=", "'the IoU threshold for evaluation'", ",", "\n", "default", "=", "0.7", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--overall_eval'", ",", "dest", "=", "'overall_eval'", ",", "\n", "help", "=", "'display the evaluation results regularly'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_name'", ",", "dest", "=", "'checkpoint_name'", ",", "\n", "help", "=", "'checkpoint name'", ",", "default", "=", "\"faster_rcnn_final.pth\"", ",", "\n", "type", "=", "str", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None._init_paths.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.sampler.__init__": [[215, 224], ["int", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().view().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_size", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "num_data", "=", "train_size", "\n", "self", ".", "num_per_batch", "=", "int", "(", "train_size", "/", "batch_size", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "range", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ")", ".", "view", "(", "1", ",", "batch_size", ")", ".", "long", "(", ")", "\n", "self", ".", "leftover_flag", "=", "False", "\n", "if", "train_size", "%", "batch_size", ":", "\n", "            ", "self", ".", "leftover", "=", "torch", ".", "arange", "(", "self", ".", "num_per_batch", "*", "batch_size", ",", "train_size", ")", ".", "long", "(", ")", "\n", "self", ".", "leftover_flag", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.sampler.__iter__": [[225, 235], ["trainval_net_monitor.sampler.rand_num.view", "iter", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "torch.randperm().view", "rand_num.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "rand_num", "=", "torch", ".", "randperm", "(", "self", ".", "num_per_batch", ")", ".", "view", "(", "-", "1", ",", "1", ")", "*", "self", ".", "batch_size", "\n", "self", ".", "rand_num", "=", "rand_num", ".", "expand", "(", "self", ".", "num_per_batch", ",", "self", ".", "batch_size", ")", "+", "self", ".", "range", "\n", "\n", "self", ".", "rand_num_view", "=", "self", ".", "rand_num", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "leftover_flag", ":", "\n", "            ", "self", ".", "rand_num_view", "=", "torch", ".", "cat", "(", "(", "self", ".", "rand_num_view", ",", "self", ".", "leftover", ")", ",", "0", ")", "\n", "\n", "", "return", "iter", "(", "self", ".", "rand_num_view", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.sampler.__len__": [[236, 238], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_data", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.str2bool": [[40, 47], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.parse_args": [[48, 190], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a Fast R-CNN network'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "dest", "=", "'dataset'", ",", "\n", "help", "=", "'training dataset'", ",", "\n", "default", "=", "'uav'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "dest", "=", "'net'", ",", "\n", "help", "=", "'vgg16, res101'", ",", "\n", "default", "=", "'res101'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "dest", "=", "'start_epoch'", ",", "\n", "help", "=", "'starting epoch'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "dest", "=", "'max_epochs'", ",", "\n", "help", "=", "'number of epochs to train'", ",", "\n", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--disp_interval'", ",", "dest", "=", "'disp_interval'", ",", "\n", "help", "=", "'number of iterations to display'", ",", "\n", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_interval'", ",", "dest", "=", "'checkpoint_interval'", ",", "\n", "help", "=", "'number of iterations to display'", ",", "\n", "default", "=", "3251", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_dir'", ",", "dest", "=", "'model_dir'", ",", "\n", "help", "=", "'directory to save models'", ",", "default", "=", "\"models\"", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--nw'", ",", "dest", "=", "'num_workers'", ",", "\n", "help", "=", "'number of worker to load data'", ",", "\n", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "dest", "=", "'cuda'", ",", "\n", "help", "=", "'whether use CUDA'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--ls'", ",", "dest", "=", "'large_scale'", ",", "\n", "help", "=", "'whether use large imag scale'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--mGPUs'", ",", "dest", "=", "'mGPUs'", ",", "\n", "help", "=", "'whether use multiple GPUs'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--bs'", ",", "dest", "=", "'batch_size'", ",", "\n", "help", "=", "'batch_size'", ",", "\n", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--cag'", ",", "dest", "=", "'class_agnostic'", ",", "\n", "help", "=", "'whether perform class_agnostic bbox regression'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma_altitude'", ",", "dest", "=", "'gamma_altitude'", ",", "\n", "help", "=", "'the gamma is used to control the relative weight of the adversarial loss of altitude'", ",", "\n", "type", "=", "float", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma_angle'", ",", "dest", "=", "'gamma_angle'", ",", "\n", "help", "=", "'the gamma is used to control the relative weight of the adversarial loss of viewing angle'", ",", "\n", "type", "=", "float", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma_weather'", ",", "dest", "=", "'gamma_weather'", ",", "\n", "help", "=", "'the gamma is used to control the relative weight of the adversarial loss of weather'", ",", "\n", "type", "=", "float", ",", "required", "=", "True", ")", "\n", "# config optimization", "\n", "parser", ".", "add_argument", "(", "'--o'", ",", "dest", "=", "'optimizer'", ",", "\n", "help", "=", "'training optimizer'", ",", "\n", "default", "=", "\"adam\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "dest", "=", "'lr'", ",", "\n", "help", "=", "'starting learning rate'", ",", "\n", "default", "=", "0.008", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "dest", "=", "'lr_decay_step'", ",", "\n", "help", "=", "'step to do learning rate decay, unit is epoch'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_gamma'", ",", "dest", "=", "'lr_decay_gamma'", ",", "\n", "help", "=", "'learning rate decay ratio'", ",", "\n", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "\n", "# set training session", "\n", "parser", ".", "add_argument", "(", "'--s'", ",", "dest", "=", "'session'", ",", "\n", "help", "=", "'training session'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "\n", "# resume trained model", "\n", "parser", ".", "add_argument", "(", "'--r'", ",", "dest", "=", "'resume'", ",", "\n", "help", "=", "'resume checkpoint or not'", ",", "\n", "default", "=", "False", ",", "type", "=", "str2bool", ")", "\n", "parser", ".", "add_argument", "(", "'--checksession'", ",", "dest", "=", "'checksession'", ",", "\n", "help", "=", "'checksession to load model'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checkepoch'", ",", "dest", "=", "'checkepoch'", ",", "\n", "help", "=", "'checkepoch to load model'", ",", "\n", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "dest", "=", "'checkpoint'", ",", "\n", "help", "=", "'checkpoint to load model'", ",", "\n", "default", "=", "3960", ",", "type", "=", "int", ")", "\n", "# log and diaplay", "\n", "parser", ".", "add_argument", "(", "'--use_tfb'", ",", "dest", "=", "'use_tfboard'", ",", "\n", "help", "=", "'whether use tensorboard'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_minibatches'", ",", "dest", "=", "'n_minibatches'", ",", "\n", "help", "=", "'number of minibatches'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--n_minibatches_eval'", ",", "dest", "=", "'n_minibatches_eval'", ",", "\n", "help", "=", "'number of minibatches for evaluation'", ",", "\n", "default", "=", "16", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--use_restarting'", ",", "dest", "=", "'use_restarting'", ",", "\n", "help", "=", "'where to use restarting'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--restarting_iters'", ",", "dest", "=", "'restarting_iters'", ",", "\n", "help", "=", "'number of steps for restarting'", ",", "\n", "default", "=", "325", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--retraining_steps'", ",", "dest", "=", "'retraining_steps'", ",", "\n", "help", "=", "'number of steps for retraining'", ",", "\n", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--initialize_steps'", ",", "dest", "=", "'initialize_steps'", ",", "\n", "help", "=", "'number of steps for retraining'", ",", "\n", "default", "=", "300", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--monitor_discriminator'", ",", "dest", "=", "'monitor_discriminator'", ",", "\n", "help", "=", "'whether to monitor the accuracy of the discriminator'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_adversarial_loss'", ",", "dest", "=", "'use_adversarial_loss'", ",", "\n", "help", "=", "'whether to use adversarial training'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_iters'", ",", "dest", "=", "'save_iters'", ",", "\n", "help", "=", "'number of iterations for saving the model'", ",", "\n", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--summary_dir'", ",", "dest", "=", "'summary_dir'", ",", "\n", "help", "=", "'the directory of the summary txt files'", ",", "default", "=", "'summaries'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--angle_thresh'", ",", "dest", "=", "'angle_thresh'", ",", "\n", "help", "=", "'the threshold of the discriminator monitor'", ",", "default", "=", "0.9", ",", "\n", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--altitude_thresh'", ",", "dest", "=", "'altitude_thresh'", ",", "\n", "help", "=", "'the threshold of the discriminator monitor'", ",", "default", "=", "0.9", ",", "\n", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--weather_thresh'", ",", "dest", "=", "'weather_thresh'", ",", "\n", "help", "=", "'the threshold of the discriminator monitor'", ",", "default", "=", "0.9", ",", "\n", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_display'", ",", "dest", "=", "'eval_display'", ",", "\n", "help", "=", "'display the evaluation results regularly'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "dest", "=", "'niter'", ",", "\n", "help", "=", "'number of iteration as starting'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--ema-beta'", ",", "dest", "=", "'ema_beta'", ",", "\n", "help", "=", "'beta for EMA'", ",", "\n", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.exponential_decay": [[191, 193], ["math.pow"], "function", ["None"], ["", "def", "exponential_decay", "(", "gamma0", ",", "alpha", ",", "x", ")", ":", "\n", "    ", "return", "gamma0", "-", "gamma0", "*", "math", ".", "pow", "(", "1", "-", "alpha", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.polynomial_decay": [[194, 196], ["math.pow"], "function", ["None"], ["", "def", "polynomial_decay", "(", "gamma0", ",", "beta", ",", "x", ",", "x_t", ")", ":", "\n", "    ", "return", "gamma0", "-", "gamma0", "*", "math", ".", "pow", "(", "1", "-", "x", "/", "x_t", ",", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.update_network_parameters": [[197, 204], ["torch.no_grad", "torch.no_grad", "zip"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_network_parameters", "(", "m", ",", "current_params", ",", "past_params", ")", ":", "\n", "    ", "\"\"\"\n    Exponential moving average\n    \"\"\"", "\n", "for", "param_c", ",", "param_p", "in", "zip", "(", "current_params", ",", "past_params", ")", ":", "\n", "        ", "param_c", ".", "data", "=", "param_p", ".", "data", "*", "m", "+", "param_c", ".", "data", "*", "(", "1.", "-", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.None.trainval_net_monitor.get_adv_current_parameters": [[205, 212], ["torch.ParameterList", "model.named_parameters", "any", "nn.ParameterList.append"], "function", ["None"], ["", "", "def", "get_adv_current_parameters", "(", "model", ")", ":", "\n", "    ", "current_adv_params", "=", "nn", ".", "ParameterList", "(", ")", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "value", ".", "requires_grad", "and", "any", "(", "name", "in", "key", "for", "name", "in", "[", "'RCNN_weather'", ",", "'RCNN_altitude'", ",", "'RCNN_angle'", ",", "\n", "'RCNN_weather_score'", ",", "'RCNN_altitude_score'", ",", "'RCNN_angle_score'", "]", ")", ":", "\n", "            ", "current_adv_params", ".", "append", "(", "value", ")", "\n", "", "", "return", "current_adv_params", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.lib.setup.custom_build_ext.build_extensions": [[111, 114], ["setup.customize_compiler_for_nvcc", "Cython.Distutils.build_ext.build_extensions"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.lib.setup.customize_compiler_for_nvcc", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.lib.setup.custom_build_ext.build_extensions"], ["    ", "def", "build_extensions", "(", "self", ")", ":", "\n", "        ", "customize_compiler_for_nvcc", "(", "self", ".", "compiler", ")", "\n", "build_ext", ".", "build_extensions", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.lib.setup.find_in_path": [[18, 26], ["path.split", "os.path.join", "os.path.exists", "os.path.abspath"], "function", ["None"], ["def", "find_in_path", "(", "name", ",", "path", ")", ":", "\n", "    ", "\"Find a file in a search path\"", "\n", "# adapted fom http://code.activestate.com/recipes/52224-find-a-file-given-a-search-path/", "\n", "for", "dir", "in", "path", ".", "split", "(", "os", ".", "pathsep", ")", ":", "\n", "        ", "binpath", "=", "pjoin", "(", "dir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "binpath", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "abspath", "(", "binpath", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.lib.setup.customize_compiler_for_nvcc": [[70, 107], ["setup..src_extensions.append", "print", "setup..set_executable", "os.path.splitext"], "function", ["None"], ["", "def", "customize_compiler_for_nvcc", "(", "self", ")", ":", "\n", "    ", "\"\"\"inject deep into distutils to customize how the dispatch\n    to gcc/nvcc works.\n\n    If you subclass UnixCCompiler, it's not trivial to get your subclass\n    injected in, and still have the right customizations (i.e.\n    distutils.sysconfig.customize_compiler) run on it. So instead of going\n    the OO route, I have this. Note, it's kindof like a wierd functional\n    subclassing going on.\"\"\"", "\n", "\n", "# tell the compiler it can processes .cu", "\n", "self", ".", "src_extensions", ".", "append", "(", "'.cu'", ")", "\n", "\n", "# save references to the default compiler_so and _comple methods", "\n", "default_compiler_so", "=", "self", ".", "compiler_so", "\n", "super", "=", "self", ".", "_compile", "\n", "\n", "# now redefine the _compile method. This gets executed for each", "\n", "# object but distutils doesn't have the ability to change compilers", "\n", "# based on source extension: we add it.", "\n", "def", "_compile", "(", "obj", ",", "src", ",", "ext", ",", "cc_args", ",", "extra_postargs", ",", "pp_opts", ")", ":", "\n", "        ", "print", "(", "extra_postargs", ")", "\n", "if", "os", ".", "path", ".", "splitext", "(", "src", ")", "[", "1", "]", "==", "'.cu'", ":", "\n", "# use the cuda for .cu files", "\n", "            ", "self", ".", "set_executable", "(", "'compiler_so'", ",", "CUDA", "[", "'nvcc'", "]", ")", "\n", "# use only a subset of the extra_postargs, which are 1-1 translated", "\n", "# from the extra_compile_args in the Extension class", "\n", "postargs", "=", "extra_postargs", "[", "'nvcc'", "]", "\n", "", "else", ":", "\n", "            ", "postargs", "=", "extra_postargs", "[", "'gcc'", "]", "\n", "\n", "", "super", "(", "obj", ",", "src", ",", "ext", ",", "cc_args", ",", "postargs", ",", "pp_opts", ")", "\n", "# reset the default compiler_so, which we might have changed for cuda", "\n", "self", ".", "compiler_so", "=", "default_compiler_so", "\n", "\n", "# inject our redefined _compile method into the class", "\n", "", "self", ".", "_compile", "=", "_compile", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.roibatchLoader.roibatchLoader.__init__": [[23, 55], ["len", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "int", "range", "numpy.ceil", "min", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "roidb", ",", "ratio_list", ",", "ratio_index", ",", "batch_size", ",", "num_classes", ",", "training", "=", "True", ",", "normalize", "=", "None", ")", ":", "\n", "    ", "self", ".", "_roidb", "=", "roidb", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "# we make the height of image consistent to trim_height, trim_width", "\n", "self", ".", "trim_height", "=", "cfg", ".", "TRAIN", ".", "TRIM_HEIGHT", "\n", "self", ".", "trim_width", "=", "cfg", ".", "TRAIN", ".", "TRIM_WIDTH", "\n", "self", ".", "max_num_box", "=", "cfg", ".", "MAX_NUM_GT_BOXES", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "ratio_list", "=", "ratio_list", "\n", "self", ".", "ratio_index", "=", "ratio_index", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data_size", "=", "len", "(", "self", ".", "ratio_list", ")", "\n", "\n", "# given the ratio_list, we want to make the ratio same for each batch.", "\n", "self", ".", "ratio_list_batch", "=", "torch", ".", "Tensor", "(", "self", ".", "data_size", ")", ".", "zero_", "(", ")", "\n", "num_batch", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "ratio_index", ")", "/", "batch_size", ")", ")", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "        ", "left_idx", "=", "i", "*", "batch_size", "\n", "right_idx", "=", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", "-", "1", ",", "self", ".", "data_size", "-", "1", ")", "\n", "\n", "if", "ratio_list", "[", "right_idx", "]", "<", "1", ":", "\n", "# for ratio < 1, we preserve the leftmost in each batch.", "\n", "            ", "target_ratio", "=", "ratio_list", "[", "left_idx", "]", "\n", "", "elif", "ratio_list", "[", "left_idx", "]", ">", "1", ":", "\n", "# for ratio > 1, we preserve the rightmost in each batch.", "\n", "            ", "target_ratio", "=", "ratio_list", "[", "right_idx", "]", "\n", "", "else", ":", "\n", "# for ratio cross 1, we make it to be 1.", "\n", "            ", "target_ratio", "=", "1", "\n", "\n", "", "self", ".", "ratio_list_batch", "[", "left_idx", ":", "(", "right_idx", "+", "1", ")", "]", "=", "target_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.roibatchLoader.roibatchLoader.__getitem__": [[57, 218], ["roi_data_layer.minibatch.get_minibatch", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "data.permute().contiguous().view.permute().contiguous().view.size", "data.permute().contiguous().view.permute().contiguous().view.size", "numpy.random.shuffle", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_.permute().contiguous", "torch.FloatTensor().zero_.permute().contiguous", "im_info.view.view.view", "meta_data.view.view.view", "data.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "im_info.view.view.view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "meta_data.view.view.view", "int", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_.size", "torch.FloatTensor().zero_.size", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "min", "int", "int", "int", "gt_boxes[].clamp_", "gt_boxes[].clamp_", "int", "int", "int", "gt_boxes[].clamp_", "gt_boxes[].clamp_", "numpy.floor", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_.size", "torch.FloatTensor().zero_.size", "min", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "gt_boxes[].clamp_", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.size", "torch.FloatTensor.size", "torch.FloatTensor().zero_.permute", "torch.FloatTensor().zero_.permute", "data.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.floor", "float", "float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "numpy.ceil", "float", "float", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.size", "torch.FloatTensor.size", "max", "min", "int", "max", "min", "int", "int", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "data.permute().contiguous().view.permute().contiguous().view.permute", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.ceil", "int", "range", "range", "range", "range", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.minibatch.get_minibatch"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "if", "self", ".", "training", ":", "\n", "        ", "index_ratio", "=", "int", "(", "self", ".", "ratio_index", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "        ", "index_ratio", "=", "index", "\n", "\n", "# get the anchor index for current sample index", "\n", "# here we set the anchor index to the last one", "\n", "# sample in this group", "\n", "", "minibatch_db", "=", "[", "self", ".", "_roidb", "[", "index_ratio", "]", "]", "\n", "blobs", "=", "get_minibatch", "(", "minibatch_db", ",", "self", ".", "_num_classes", ")", "\n", "data", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "'data'", "]", ")", "\n", "im_info", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "'im_info'", "]", ")", "\n", "meta_data", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "'meta_data'", "]", ")", "\n", "\n", "# we need to random shuffle the bounding box.", "\n", "data_height", ",", "data_width", "=", "data", ".", "size", "(", "1", ")", ",", "data", ".", "size", "(", "2", ")", "\n", "if", "self", ".", "training", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "blobs", "[", "'gt_boxes'", "]", ")", "\n", "gt_boxes", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "'gt_boxes'", "]", ")", "\n", "\n", "########################################################", "\n", "# padding the input image to fixed size for each group #", "\n", "########################################################", "\n", "\n", "# NOTE1: need to cope with the case where a group cover both conditions. (done)", "\n", "# NOTE2: need to consider the situation for the tail samples. (no worry)", "\n", "# NOTE3: need to implement a parallel data loader. (no worry)", "\n", "# get the index range", "\n", "\n", "# if the image need to crop, crop to the target size.", "\n", "ratio", "=", "self", ".", "ratio_list_batch", "[", "index", "]", "\n", "\n", "if", "self", ".", "_roidb", "[", "index_ratio", "]", "[", "'need_crop'", "]", ":", "\n", "            ", "if", "ratio", "<", "1", ":", "\n", "# this means that data_width << data_height, we need to crop the", "\n", "# data_height", "\n", "                ", "min_y", "=", "int", "(", "torch", ".", "min", "(", "gt_boxes", "[", ":", ",", "1", "]", ")", ")", "\n", "max_y", "=", "int", "(", "torch", ".", "max", "(", "gt_boxes", "[", ":", ",", "3", "]", ")", ")", "\n", "trim_size", "=", "int", "(", "np", ".", "floor", "(", "data_width", "/", "ratio", ")", ")", "\n", "if", "trim_size", ">", "data_height", ":", "\n", "                    ", "trim_size", "=", "data_height", "\n", "", "box_region", "=", "max_y", "-", "min_y", "+", "1", "\n", "if", "min_y", "==", "0", ":", "\n", "                    ", "y_s", "=", "0", "\n", "", "else", ":", "\n", "                    ", "if", "(", "box_region", "-", "trim_size", ")", "<", "0", ":", "\n", "                        ", "y_s_min", "=", "max", "(", "max_y", "-", "trim_size", ",", "0", ")", "\n", "y_s_max", "=", "min", "(", "min_y", ",", "data_height", "-", "trim_size", ")", "\n", "if", "y_s_min", "==", "y_s_max", ":", "\n", "                            ", "y_s", "=", "y_s_min", "\n", "", "else", ":", "\n", "                            ", "y_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "y_s_min", ",", "y_s_max", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "y_s_add", "=", "int", "(", "(", "box_region", "-", "trim_size", ")", "/", "2", ")", "\n", "if", "y_s_add", "==", "0", ":", "\n", "                            ", "y_s", "=", "min_y", "\n", "", "else", ":", "\n", "                            ", "y_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "min_y", ",", "min_y", "+", "y_s_add", ")", ")", "\n", "# crop the image", "\n", "", "", "", "data", "=", "data", "[", ":", ",", "y_s", ":", "(", "y_s", "+", "trim_size", ")", ",", ":", ",", ":", "]", "\n", "\n", "# shift y coordiante of gt_boxes", "\n", "gt_boxes", "[", ":", ",", "1", "]", "=", "gt_boxes", "[", ":", ",", "1", "]", "-", "float", "(", "y_s", ")", "\n", "gt_boxes", "[", ":", ",", "3", "]", "=", "gt_boxes", "[", ":", ",", "3", "]", "-", "float", "(", "y_s", ")", "\n", "\n", "# update gt bounding box according the trip", "\n", "gt_boxes", "[", ":", ",", "1", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "gt_boxes", "[", ":", ",", "3", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "# this means that data_width >> data_height, we need to crop the", "\n", "# data_width", "\n", "                ", "min_x", "=", "int", "(", "torch", ".", "min", "(", "gt_boxes", "[", ":", ",", "0", "]", ")", ")", "\n", "max_x", "=", "int", "(", "torch", ".", "max", "(", "gt_boxes", "[", ":", ",", "2", "]", ")", ")", "\n", "trim_size", "=", "int", "(", "np", ".", "ceil", "(", "data_height", "*", "ratio", ")", ")", "\n", "if", "trim_size", ">", "data_width", ":", "\n", "                    ", "trim_size", "=", "data_width", "\n", "", "box_region", "=", "max_x", "-", "min_x", "+", "1", "\n", "if", "min_x", "==", "0", ":", "\n", "                    ", "x_s", "=", "0", "\n", "", "else", ":", "\n", "                    ", "if", "(", "box_region", "-", "trim_size", ")", "<", "0", ":", "\n", "                        ", "x_s_min", "=", "max", "(", "max_x", "-", "trim_size", ",", "0", ")", "\n", "x_s_max", "=", "min", "(", "min_x", ",", "data_width", "-", "trim_size", ")", "\n", "if", "x_s_min", "==", "x_s_max", ":", "\n", "                            ", "x_s", "=", "x_s_min", "\n", "", "else", ":", "\n", "                            ", "x_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "x_s_min", ",", "x_s_max", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "x_s_add", "=", "int", "(", "(", "box_region", "-", "trim_size", ")", "/", "2", ")", "\n", "if", "x_s_add", "==", "0", ":", "\n", "                            ", "x_s", "=", "min_x", "\n", "", "else", ":", "\n", "                            ", "x_s", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "min_x", ",", "min_x", "+", "x_s_add", ")", ")", "\n", "# crop the image", "\n", "", "", "", "data", "=", "data", "[", ":", ",", ":", ",", "x_s", ":", "(", "x_s", "+", "trim_size", ")", ",", ":", "]", "\n", "\n", "# shift x coordiante of gt_boxes", "\n", "gt_boxes", "[", ":", ",", "0", "]", "=", "gt_boxes", "[", ":", ",", "0", "]", "-", "float", "(", "x_s", ")", "\n", "gt_boxes", "[", ":", ",", "2", "]", "=", "gt_boxes", "[", ":", ",", "2", "]", "-", "float", "(", "x_s", ")", "\n", "# update gt bounding box according the trip", "\n", "gt_boxes", "[", ":", ",", "0", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "gt_boxes", "[", ":", ",", "2", "]", ".", "clamp_", "(", "0", ",", "trim_size", "-", "1", ")", "\n", "\n", "# based on the ratio, padding the image.", "\n", "", "", "if", "ratio", "<", "1", ":", "\n", "# this means that data_width < data_height", "\n", "            ", "trim_size", "=", "int", "(", "np", ".", "floor", "(", "data_width", "/", "ratio", ")", ")", "\n", "\n", "padding_data", "=", "torch", ".", "FloatTensor", "(", "int", "(", "np", ".", "ceil", "(", "data_width", "/", "ratio", ")", ")", ",", "data_width", ",", "3", ")", ".", "zero_", "(", ")", "\n", "\n", "padding_data", "[", ":", "data_height", ",", ":", ",", ":", "]", "=", "data", "[", "0", "]", "\n", "# update im_info", "\n", "im_info", "[", "0", ",", "0", "]", "=", "padding_data", ".", "size", "(", "0", ")", "\n", "# print(\"height %d %d \\n\" %(index, anchor_idx))", "\n", "", "elif", "ratio", ">", "1", ":", "\n", "# this means that data_width > data_height", "\n", "# if the image need to crop.", "\n", "            ", "padding_data", "=", "torch", ".", "FloatTensor", "(", "data_height", ",", "int", "(", "np", ".", "ceil", "(", "data_height", "*", "ratio", ")", ")", ",", "3", ")", ".", "zero_", "(", ")", "\n", "padding_data", "[", ":", ",", ":", "data_width", ",", ":", "]", "=", "data", "[", "0", "]", "\n", "im_info", "[", "0", ",", "1", "]", "=", "padding_data", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "trim_size", "=", "min", "(", "data_height", ",", "data_width", ")", "\n", "padding_data", "=", "torch", ".", "FloatTensor", "(", "trim_size", ",", "trim_size", ",", "3", ")", ".", "zero_", "(", ")", "\n", "padding_data", "=", "data", "[", "0", "]", "[", ":", "trim_size", ",", ":", "trim_size", ",", ":", "]", "\n", "# gt_boxes.clamp_(0, trim_size)", "\n", "gt_boxes", "[", ":", ",", ":", "4", "]", ".", "clamp_", "(", "0", ",", "trim_size", ")", "\n", "im_info", "[", "0", ",", "0", "]", "=", "trim_size", "\n", "im_info", "[", "0", ",", "1", "]", "=", "trim_size", "\n", "\n", "\n", "# check the bounding box:", "\n", "", "not_keep", "=", "(", "gt_boxes", "[", ":", ",", "0", "]", "==", "gt_boxes", "[", ":", ",", "2", "]", ")", "|", "(", "gt_boxes", "[", ":", ",", "1", "]", "==", "gt_boxes", "[", ":", ",", "3", "]", ")", "\n", "keep", "=", "torch", ".", "nonzero", "(", "not_keep", "==", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "gt_boxes_padding", "=", "torch", ".", "FloatTensor", "(", "self", ".", "max_num_box", ",", "gt_boxes", ".", "size", "(", "1", ")", ")", ".", "zero_", "(", ")", "\n", "if", "keep", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "gt_boxes", "=", "gt_boxes", "[", "keep", "]", "\n", "num_boxes", "=", "min", "(", "gt_boxes", ".", "size", "(", "0", ")", ",", "self", ".", "max_num_box", ")", "\n", "gt_boxes_padding", "[", ":", "num_boxes", ",", ":", "]", "=", "gt_boxes", "[", ":", "num_boxes", "]", "\n", "", "else", ":", "\n", "            ", "num_boxes", "=", "0", "\n", "\n", "# permute trim_data to adapt to downstream processing", "\n", "", "padding_data", "=", "padding_data", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "im_info", "=", "im_info", ".", "view", "(", "3", ")", "\n", "meta_data", "=", "meta_data", ".", "view", "(", "3", ")", "\n", "\n", "return", "padding_data", ",", "im_info", ",", "meta_data", ",", "gt_boxes_padding", ",", "num_boxes", "\n", "", "else", ":", "\n", "        ", "data", "=", "data", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "3", ",", "data_height", ",", "data_width", ")", "\n", "im_info", "=", "im_info", ".", "view", "(", "3", ")", "\n", "\n", "gt_boxes", "=", "torch", ".", "FloatTensor", "(", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "num_boxes", "=", "0", "\n", "meta_data", "=", "meta_data", ".", "view", "(", "3", ")", "\n", "\n", "return", "data", ",", "im_info", ",", "meta_data", ",", "gt_boxes", ",", "num_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.roibatchLoader.roibatchLoader.__len__": [[219, 221], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_roidb", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.minibatch.get_minibatch": [[21, 55], ["len", "numpy.randint", "minibatch._get_image_blob", "numpy.empty", "numpy.array", "numpy.array", "len", "len", "len", "numpy.where", "numpy.where", "len", "numpy.all", "[].toarray"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.minibatch._get_image_blob"], ["def", "get_minibatch", "(", "roidb", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Given a roidb, construct a minibatch sampled from it.\"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "# Sample random scales to use for each image in this batch", "\n", "random_scale_inds", "=", "npr", ".", "randint", "(", "0", ",", "high", "=", "len", "(", "cfg", ".", "TRAIN", ".", "SCALES", ")", ",", "\n", "size", "=", "num_images", ")", "\n", "assert", "(", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "%", "num_images", "==", "0", ")", ",", "'num_images ({}) must divide BATCH_SIZE ({})'", ".", "format", "(", "num_images", ",", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ")", "\n", "\n", "# Get the input image blob, formatted for caffe", "\n", "im_blob", ",", "im_scales", "=", "_get_image_blob", "(", "roidb", ",", "random_scale_inds", ")", "\n", "\n", "blobs", "=", "{", "'data'", ":", "im_blob", "}", "\n", "\n", "assert", "len", "(", "im_scales", ")", "==", "1", ",", "\"Single batch only\"", "\n", "assert", "len", "(", "roidb", ")", "==", "1", ",", "\"Single batch only\"", "\n", "\n", "# gt boxes: (x1, y1, x2, y2, cls)", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_ALL_GT", ":", "\n", "# Include all ground truth boxes", "\n", "        ", "gt_inds", "=", "np", ".", "where", "(", "roidb", "[", "0", "]", "[", "'gt_classes'", "]", "!=", "0", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# For the COCO ground truth boxes, exclude the ones that are ''iscrowd''", "\n", "        ", "gt_inds", "=", "np", ".", "where", "(", "(", "roidb", "[", "0", "]", "[", "'gt_classes'", "]", "!=", "0", ")", "&", "np", ".", "all", "(", "roidb", "[", "0", "]", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", ">", "-", "1.0", ",", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "", "gt_boxes", "=", "np", ".", "empty", "(", "(", "len", "(", "gt_inds", ")", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_boxes", "[", ":", ",", "0", ":", "4", "]", "=", "roidb", "[", "0", "]", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "*", "im_scales", "[", "0", "]", "\n", "gt_boxes", "[", ":", ",", "4", "]", "=", "roidb", "[", "0", "]", "[", "'gt_classes'", "]", "[", "gt_inds", "]", "\n", "blobs", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "blobs", "[", "'im_info'", "]", "=", "np", ".", "array", "(", "[", "[", "im_blob", ".", "shape", "[", "1", "]", ",", "im_blob", ".", "shape", "[", "2", "]", ",", "im_scales", "[", "0", "]", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blobs", "[", "'meta_data'", "]", "=", "np", ".", "array", "(", "[", "[", "roidb", "[", "0", "]", "[", "'weather'", "]", ",", "roidb", "[", "0", "]", "[", "'altitude'", "]", ",", "roidb", "[", "0", "]", "[", "'angle'", "]", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "blobs", "[", "'img_id'", "]", "=", "roidb", "[", "0", "]", "[", "'img_id'", "]", "\n", "\n", "return", "blobs", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.minibatch._get_image_blob": [[57, 88], ["len", "range", "model.utils.blob.im_list_to_blob", "scipy.misc.imread", "model.utils.blob.prep_im_for_blob", "im_scales.append", "processed_ims.append", "len", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.blob.im_list_to_blob", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.blob.prep_im_for_blob"], ["", "def", "_get_image_blob", "(", "roidb", ",", "scale_inds", ")", ":", "\n", "    ", "\"\"\"Builds an input blob from the images in the roidb at the specified\n    scales.\n    \"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "\n", "processed_ims", "=", "[", "]", "\n", "im_scales", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "# im = cv2.imread(roidb[i]['image'])", "\n", "        ", "im", "=", "imread", "(", "roidb", "[", "i", "]", "[", "'image'", "]", ")", "\n", "\n", "if", "len", "(", "im", ".", "shape", ")", "==", "2", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "im", "=", "np", ".", "concatenate", "(", "(", "im", ",", "im", ",", "im", ")", ",", "axis", "=", "2", ")", "\n", "# flip the channel, since the original one using cv2", "\n", "# rgb -> bgr", "\n", "", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "if", "roidb", "[", "i", "]", "[", "'flipped'", "]", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "target_size", "=", "cfg", ".", "TRAIN", ".", "SCALES", "[", "scale_inds", "[", "i", "]", "]", "\n", "im", ",", "im_scale", "=", "prep_im_for_blob", "(", "im", ",", "cfg", ".", "PIXEL_MEANS", ",", "target_size", ",", "\n", "cfg", ".", "TRAIN", ".", "MAX_SIZE", ")", "\n", "im_scales", ".", "append", "(", "im_scale", ")", "\n", "processed_ims", ".", "append", "(", "im", ")", "\n", "\n", "# Create a blob to hold the input images", "\n", "", "blob", "=", "im_list_to_blob", "(", "processed_ims", ")", "\n", "\n", "return", "blob", ",", "im_scales", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.roidb.prepare_roidb": [[13, 48], ["range", "imdb.name.startswith", "len", "imdb.image_id_at", "imdb.image_path_at", "[].toarray", "[].toarray.max", "[].toarray.argmax", "all", "all", "imdb.name.startswith", "numpy.where", "numpy.where", "PIL.Image.open", "range", "imdb.image_path_at"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_id_at", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_at", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_at"], ["def", "prepare_roidb", "(", "imdb", ")", ":", "\n", "  ", "\"\"\"Enrich the imdb's roidb by adding some derived quantities that\n  are useful for training. This function precomputes the maximum\n  overlap, taken over ground-truth boxes, between each ROI and\n  each ground-truth box. The class with maximum overlap is also\n  recorded.\n  \"\"\"", "\n", "\n", "roidb", "=", "imdb", ".", "roidb", "\n", "if", "not", "(", "imdb", ".", "name", ".", "startswith", "(", "'coco'", ")", ")", ":", "\n", "    ", "sizes", "=", "[", "PIL", ".", "Image", ".", "open", "(", "imdb", ".", "image_path_at", "(", "i", ")", ")", ".", "size", "\n", "for", "i", "in", "range", "(", "imdb", ".", "num_images", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "imdb", ".", "image_index", ")", ")", ":", "\n", "# print(roidb[i].keys())", "\n", "    ", "roidb", "[", "i", "]", "[", "'img_id'", "]", "=", "imdb", ".", "image_id_at", "(", "i", ")", "\n", "roidb", "[", "i", "]", "[", "'image'", "]", "=", "imdb", ".", "image_path_at", "(", "i", ")", "\n", "if", "not", "(", "imdb", ".", "name", ".", "startswith", "(", "'coco'", ")", ")", ":", "\n", "      ", "roidb", "[", "i", "]", "[", "'width'", "]", "=", "sizes", "[", "i", "]", "[", "0", "]", "\n", "roidb", "[", "i", "]", "[", "'height'", "]", "=", "sizes", "[", "i", "]", "[", "1", "]", "\n", "# need gt_overlaps as a dense array for argmax", "\n", "", "gt_overlaps", "=", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", "\n", "# max overlap with gt over classes (columns)", "\n", "max_overlaps", "=", "gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "# gt class that had the max overlap", "\n", "max_classes", "=", "gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "roidb", "[", "i", "]", "[", "'max_classes'", "]", "=", "max_classes", "# ??", "\n", "roidb", "[", "i", "]", "[", "'max_overlaps'", "]", "=", "max_overlaps", "# ??", "\n", "# sanity checks", "\n", "# max overlap of 0 => class should be zero (background)", "\n", "zero_inds", "=", "np", ".", "where", "(", "max_overlaps", "==", "0", ")", "[", "0", "]", "\n", "assert", "all", "(", "max_classes", "[", "zero_inds", "]", "==", "0", ")", "\n", "# max overlap > 0 => class should not be zero (must be a fg class)", "\n", "nonzero_inds", "=", "np", ".", "where", "(", "max_overlaps", ">", "0", ")", "[", "0", "]", "\n", "assert", "all", "(", "max_classes", "[", "nonzero_inds", "]", "!=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.roidb.rank_roidb_ratio": [[50, 75], ["range", "numpy.array", "numpy.argsort", "len", "np.array.append", "float"], "function", ["None"], ["", "", "def", "rank_roidb_ratio", "(", "roidb", ")", ":", "\n", "# rank roidb based on the ratio between width and height.", "\n", "    ", "ratio_large", "=", "2", "# largest ratio to preserve.", "\n", "ratio_small", "=", "0.5", "# smallest ratio to preserve.    ", "\n", "\n", "ratio_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "roidb", ")", ")", ":", "\n", "      ", "width", "=", "roidb", "[", "i", "]", "[", "'width'", "]", "\n", "height", "=", "roidb", "[", "i", "]", "[", "'height'", "]", "\n", "ratio", "=", "width", "/", "float", "(", "height", ")", "\n", "\n", "if", "ratio", ">", "ratio_large", ":", "\n", "        ", "roidb", "[", "i", "]", "[", "'need_crop'", "]", "=", "1", "\n", "ratio", "=", "ratio_large", "\n", "", "elif", "ratio", "<", "ratio_small", ":", "\n", "        ", "roidb", "[", "i", "]", "[", "'need_crop'", "]", "=", "1", "\n", "ratio", "=", "ratio_small", "\n", "", "else", ":", "\n", "        ", "roidb", "[", "i", "]", "[", "'need_crop'", "]", "=", "0", "\n", "\n", "", "ratio_list", ".", "append", "(", "ratio", ")", "\n", "\n", "", "ratio_list", "=", "np", ".", "array", "(", "ratio_list", ")", "\n", "ratio_index", "=", "np", ".", "argsort", "(", "ratio_list", ")", "\n", "return", "ratio_list", "[", "ratio_index", "]", ",", "ratio_index", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.roidb.filter_roidb": [[76, 88], ["print", "print", "len", "len", "len", "len"], "function", ["None"], ["", "def", "filter_roidb", "(", "roidb", ")", ":", "\n", "# filter the image without bounding box.", "\n", "    ", "print", "(", "'before filtering, there are %d images...'", "%", "(", "len", "(", "roidb", ")", ")", ")", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "roidb", ")", ":", "\n", "      ", "if", "len", "(", "roidb", "[", "i", "]", "[", "'boxes'", "]", ")", "==", "0", ":", "\n", "        ", "del", "roidb", "[", "i", "]", "\n", "i", "-=", "1", "\n", "", "i", "+=", "1", "\n", "\n", "", "print", "(", "'after filtering, there are %d images...'", "%", "(", "len", "(", "roidb", ")", ")", ")", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.roidb.combined_roidb": [[89, 141], ["roidb.rank_roidb_ratio", "print", "roidb.prepare_roidb", "print", "datasets.factory.get_imdb", "print", "datasets.factory.get_imdb.set_proposal_method", "print", "roidb.combined_roidb.get_training_roidb"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.roidb.rank_roidb_ratio", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_data_layer.roidb.prepare_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.factory.get_imdb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.set_proposal_method"], ["", "def", "combined_roidb", "(", "imdb_names", ",", "training", "=", "True", ")", ":", "\n", "  ", "\"\"\"\n  Combine multiple roidbs\n  \"\"\"", "\n", "\n", "def", "get_training_roidb", "(", "imdb", ")", ":", "\n", "    ", "\"\"\"Returns a roidb (Region of Interest database) for use in training.\"\"\"", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_FLIPPED", ":", "\n", "      ", "print", "(", "'Appending horizontally-flipped training examples...'", ")", "\n", "imdb", ".", "append_flipped_images", "(", ")", "\n", "print", "(", "'done'", ")", "\n", "", "print", "(", "'Preparing training data...'", ")", "\n", "\n", "prepare_roidb", "(", "imdb", ")", "\n", "#ratio_index = rank_roidb_ratio(imdb)", "\n", "print", "(", "'done'", ")", "\n", "\n", "return", "imdb", ".", "roidb", "\n", "\n", "", "def", "get_roidb", "(", "imdb_name", ")", ":", "\n", "    ", "imdb", "=", "get_imdb", "(", "imdb_name", ")", "\n", "print", "(", "'Loaded dataset `{:s}` for training'", ".", "format", "(", "imdb", ".", "name", ")", ")", "\n", "imdb", ".", "set_proposal_method", "(", "cfg", ".", "TRAIN", ".", "PROPOSAL_METHOD", ")", "\n", "# print('#####',imdb.roidb[102]['angle'])", "\n", "# for i in range(len(imdb.roidb)):", "\n", "#   if imdb.roidb[i]['angle'] == 3:", "\n", "#     print(\"######\", i)", "\n", "print", "(", "'Set proposal method: {:s}'", ".", "format", "(", "cfg", ".", "TRAIN", ".", "PROPOSAL_METHOD", ")", ")", "\n", "roidb", "=", "get_training_roidb", "(", "imdb", ")", "\n", "return", "roidb", "\n", "\n", "", "roidbs", "=", "[", "get_roidb", "(", "s", ")", "for", "s", "in", "imdb_names", ".", "split", "(", "'+'", ")", "]", "\n", "roidb", "=", "roidbs", "[", "0", "]", "\n", "\n", "\n", "if", "len", "(", "roidbs", ")", ">", "1", ":", "\n", "    ", "for", "r", "in", "roidbs", "[", "1", ":", "]", ":", "\n", "      ", "roidb", ".", "extend", "(", "r", ")", "\n", "", "tmp", "=", "get_imdb", "(", "imdb_names", ".", "split", "(", "'+'", ")", "[", "1", "]", ")", "\n", "imdb", "=", "datasets", ".", "imdb", ".", "imdb", "(", "imdb_names", ",", "tmp", ".", "classes", ")", "\n", "", "else", ":", "\n", "    ", "imdb", "=", "get_imdb", "(", "imdb_names", ")", "\n", "\n", "", "if", "training", ":", "\n", "# roi db \uc548 box\ub4e4 \uc88c\ud45c\uac00 \uc5c6\ub294 \uc560\ub4e4\uc740 \uc0ad\uc81c\ud568.", "\n", "    ", "roidb", "=", "filter_roidb", "(", "roidb", ")", "\n", "\n", "# ratio_list : \uac00\ub85c, \uc138\ub85c \ube44\uc728\uc774 \ub2f4\uae34 \ub9ac\uc2a4\ud2b8", "\n", "# ratio_index : \ube44\uc728\uc744 \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc18c\ud305\ud588\uc744 \ub54c\uc758 \uc778\ub371\uc2a4 (ratio\uac00 \uc791\uc740\uc560\ub4e4 \uc21c\uc73c\ub85c \uc815\ub82c)", "\n", "", "ratio_list", ",", "ratio_index", "=", "rank_roidb_ratio", "(", "roidb", ")", "\n", "\n", "return", "imdb", ",", "roidb", ",", "ratio_list", ",", "ratio_index", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.ds_utils.unique_boxes": [[13, 19], ["numpy.array", "numpy.round().dot", "numpy.unique", "numpy.sort", "numpy.round"], "function", ["None"], ["def", "unique_boxes", "(", "boxes", ",", "scale", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Return indices of unique boxes.\"\"\"", "\n", "v", "=", "np", ".", "array", "(", "[", "1", ",", "1e3", ",", "1e6", ",", "1e9", "]", ")", "\n", "hashes", "=", "np", ".", "round", "(", "boxes", "*", "scale", ")", ".", "dot", "(", "v", ")", "\n", "_", ",", "index", "=", "np", ".", "unique", "(", "hashes", ",", "return_index", "=", "True", ")", "\n", "return", "np", ".", "sort", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.ds_utils.xywh_to_xyxy": [[21, 24], ["numpy.hstack"], "function", ["None"], ["", "def", "xywh_to_xyxy", "(", "boxes", ")", ":", "\n", "  ", "\"\"\"Convert [x y w h] box format to [x1 y1 x2 y2] format.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "boxes", "[", ":", ",", "0", ":", "2", "]", ",", "boxes", "[", ":", ",", "0", ":", "2", "]", "+", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.ds_utils.xyxy_to_xywh": [[26, 29], ["numpy.hstack"], "function", ["None"], ["", "def", "xyxy_to_xywh", "(", "boxes", ")", ":", "\n", "  ", "\"\"\"Convert [x1 y1 x2 y2] box format to [x y w h] format.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "boxes", "[", ":", ",", "0", ":", "2", "]", ",", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "boxes", "[", ":", ",", "0", ":", "2", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.ds_utils.validate_boxes": [[31, 43], ["None"], "function", ["None"], ["", "def", "validate_boxes", "(", "boxes", ",", "width", "=", "0", ",", "height", "=", "0", ")", ":", "\n", "  ", "\"\"\"Check that a set of boxes are valid.\"\"\"", "\n", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "assert", "(", "x1", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "y1", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "x2", ">=", "x1", ")", ".", "all", "(", ")", "\n", "assert", "(", "y2", ">=", "y1", ")", ".", "all", "(", ")", "\n", "assert", "(", "x2", "<", "width", ")", ".", "all", "(", ")", "\n", "assert", "(", "y2", "<", "height", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.ds_utils.filter_small_boxes": [[45, 50], ["numpy.where"], "function", ["None"], ["", "def", "filter_small_boxes", "(", "boxes", ",", "min_size", ")", ":", "\n", "  ", "w", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "\n", "h", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "\n", "keep", "=", "np", ".", "where", "(", "(", "w", ">=", "min_size", ")", "&", "(", "h", ">", "min_size", ")", ")", "[", "0", "]", "\n", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc.__init__": [[28, 62], ["datasets.imdb.imdb.__init__", "os.path.join", "dict", "pascal_voc_rbg.pascal_voc._load_image_set_index", "str", "os.path.exists", "os.path.exists", "pascal_voc_rbg.pascal_voc._get_default_path", "list", "uuid.uuid4", "zip", "list", "range"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_image_set_index", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_default_path"], ["  ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "    ", "imdb", ".", "__init__", "(", "self", ",", "'voc_'", "+", "year", "+", "'_'", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "self", ".", "_get_default_path", "(", ")", "if", "devkit_path", "is", "None", "else", "devkit_path", "\n", "\n", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'VOC'", "+", "self", ".", "_year", ")", "\n", "self", ".", "_classes", "=", "(", "'__background__'", ",", "# always index 0", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "\n", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "\n", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "'.jpg'", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "'comp4'", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "'cleanup'", ":", "True", ",", "\n", "'use_salt'", ":", "True", ",", "\n", "'use_diff'", ":", "False", ",", "\n", "'matlab_eval'", ":", "False", ",", "\n", "'rpn_file'", ":", "None", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_devkit_path", ")", ",", "'VOCdevkit path does not exist: {}'", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "self", ".", "_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc.image_path_at": [[63, 68], ["pascal_voc_rbg.pascal_voc.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc.image_path_from_index": [[69, 78], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'JPEGImages'", ",", "\n", "index", "+", "self", ".", "_image_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc._load_image_set_index": [[79, 93], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Load the indexes listed in this dataset's image set file.\n    \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_set_file", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "      ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc._get_default_path": [[94, 99], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the default path where PASCAL VOC is expected to be installed.\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'VOCdevkit'", "+", "self", ".", "_year", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc.gt_roidb": [[100, 123], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc_rbg.pascal_voc._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "      ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "try", ":", "\n", "          ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "except", ":", "\n", "          ", "roidb", "=", "pickle", ".", "load", "(", "fid", ",", "encoding", "=", "'bytes'", ")", "\n", "", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc.rpn_roidb": [[124, 133], ["pascal_voc_rbg.pascal_voc.gt_roidb", "pascal_voc_rbg.pascal_voc._load_rpn_roidb", "datasets.imdb.imdb.merge_roidbs", "pascal_voc_rbg.pascal_voc._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.gt_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_rpn_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "    ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "'test'", ":", "\n", "      ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "      ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc._load_rpn_roidb": [[134, 142], ["print", "os.path.exists", "pascal_voc_rbg.pascal_voc.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "    ", "filename", "=", "self", ".", "config", "[", "'rpn_file'", "]", "\n", "print", "(", "'loading {}'", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "'rpn data not found at: {}'", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc._load_pascal_annotation": [[143, 188], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "float", "float", "float", "float", "obj.find().text.lower().strip", "int", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Load image and bounding boxes info from XML file in the PASCAL VOC\n    format.\n    \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'Annotations'", ",", "index", "+", "'.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "if", "not", "self", ".", "config", "[", "'use_diff'", "]", ":", "\n", "# Exclude the samples labeled as difficult", "\n", "      ", "non_diff_objs", "=", "[", "\n", "obj", "for", "obj", "in", "objs", "if", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "==", "0", "]", "\n", "# if len(non_diff_objs) != len(objs):", "\n", "#     print 'Removed {} difficult objects'.format(", "\n", "#         len(objs) - len(non_diff_objs))", "\n", "objs", "=", "non_diff_objs", "\n", "", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "-", "1", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc._get_comp_id": [[189, 193], ["None"], "methods", ["None"], ["", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "    ", "comp_id", "=", "(", "self", ".", "_comp_id", "+", "'_'", "+", "self", ".", "_salt", "if", "self", ".", "config", "[", "'use_salt'", "]", "\n", "else", "self", ".", "_comp_id", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc._get_voc_results_file_template": [[194, 204], ["os.path.join", "pascal_voc_rbg.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "    ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "'_det_'", "+", "self", ".", "_image_set", "+", "'_{:s}.txt'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'results'", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'Main'", ",", "\n", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc._write_voc_results_file": [[205, 222], ["enumerate", "print", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template().format", "open", "enumerate", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template", "range", "f.write"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "    ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "print", "(", "'Writing {} VOC results file'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "        ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "          ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "            ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "index", ",", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "dets", "[", "k", ",", "3", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc._do_python_eval": [[223, 267], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "'VOC07 metric? '", "+", "(", "'Yes'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "      ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "'Results:'", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "      ", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "ap", ")", ")", ")", "\n", "", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "print", "(", "'Results computed with the **unofficial** Python eval code.'", ")", "\n", "print", "(", "'Results should be very close to the official MATLAB eval code.'", ")", "\n", "print", "(", "'Recompute with `./tools/reval.py --matlab ...` for your paper.'", ")", "\n", "print", "(", "'-- Thanks, The Management'", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc._do_matlab_eval": [[268, 282], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "pascal_voc_rbg.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "print", "(", "'-----------------------------------------------------'", ")", "\n", "print", "(", "'Computing results with the official MATLAB eval code.'", ")", "\n", "print", "(", "'-----------------------------------------------------'", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'lib'", ",", "'datasets'", ",", "\n", "'VOCdevkit-matlab-wrapper'", ")", "\n", "cmd", "=", "'cd {} && '", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "'{:s} -nodisplay -nodesktop '", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "'voc_eval(\\'{:s}\\',\\'{:s}\\',\\'{:s}\\',\\'{:s}\\'); quit;\"'", ".", "format", "(", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "\n", "self", ".", "_image_set", ",", "output_dir", ")", "\n", "print", "(", "(", "'Running:\\n{}'", ".", "format", "(", "cmd", ")", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc.evaluate_detections": [[283, 295], ["pdb.set_trace", "pascal_voc_rbg.pascal_voc._write_voc_results_file", "pascal_voc_rbg.pascal_voc._do_python_eval", "pascal_voc_rbg.pascal_voc._do_matlab_eval", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template().format", "os.remove", "pascal_voc_rbg.pascal_voc._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._do_python_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._do_matlab_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "    ", "pdb", ".", "set_trace", "(", ")", "\n", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "'matlab_eval'", "]", ":", "\n", "      ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "      ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "          ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc_rbg.pascal_voc.competition_mode": [[296, 303], ["None"], "methods", ["None"], ["", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "    ", "if", "on", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "False", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "False", "\n", "", "else", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "True", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco.__init__": [[28, 67], ["datasets.imdb.imdb.__init__", "os.join", "os.join", "pycocotools.coco.COCO", "coco.coco._COCO.loadCats", "tuple", "dict", "dict", "coco.coco._load_image_set_index", "coco.coco.set_proposal_method", "coco.coco.competition_mode", "coco.coco._get_ann_file", "coco.coco._COCO.getCatIds", "list", "list", "zip", "zip", "list", "coco.coco._COCO.getCatIds", "range"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadCats", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_image_set_index", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.set_proposal_method", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.competition_mode", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._get_ann_file", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.getCatIds", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.getCatIds"], ["  ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ")", ":", "\n", "    ", "imdb", ".", "__init__", "(", "self", ",", "'coco_'", "+", "year", "+", "'_'", "+", "image_set", ")", "\n", "# COCO specific config options", "\n", "self", ".", "config", "=", "{", "'use_salt'", ":", "True", ",", "\n", "'cleanup'", ":", "True", "}", "\n", "# name, paths", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'coco'", ")", "\n", "# load COCO API, classes, class <-> id mappings", "\n", "self", ".", "_COCO", "=", "COCO", "(", "self", ".", "_get_ann_file", "(", ")", ")", "\n", "cats", "=", "self", ".", "_COCO", ".", "loadCats", "(", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", "\n", "self", ".", "_classes", "=", "tuple", "(", "[", "'__background__'", "]", "+", "[", "c", "[", "'name'", "]", "for", "c", "in", "cats", "]", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", ")", "\n", "self", ".", "_class_to_coco_cat_id", "=", "dict", "(", "list", "(", "zip", "(", "[", "c", "[", "'name'", "]", "for", "c", "in", "cats", "]", ",", "\n", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", ")", ")", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "set_proposal_method", "(", "'gt'", ")", "\n", "self", ".", "competition_mode", "(", "False", ")", "\n", "\n", "# Some image sets are \"views\" (i.e. subsets) into others.", "\n", "# For example, minival2014 is a random 5000 image subset of val2014.", "\n", "# This mapping tells us where the view's images and proposals come from.", "\n", "self", ".", "_view_map", "=", "{", "\n", "'minival2014'", ":", "'val2014'", ",", "# 5k val2014 subset", "\n", "'valminusminival2014'", ":", "'val2014'", ",", "# val2014 \\setminus minival2014", "\n", "'test-dev2015'", ":", "'test2015'", ",", "\n", "'valminuscapval2014'", ":", "'val2014'", ",", "\n", "'capval2014'", ":", "'val2014'", ",", "\n", "'captest2014'", ":", "'val2014'", "\n", "}", "\n", "coco_name", "=", "image_set", "+", "year", "# e.g., \"val2014\"", "\n", "self", ".", "_data_name", "=", "(", "self", ".", "_view_map", "[", "coco_name", "]", "\n", "if", "coco_name", "in", "self", ".", "_view_map", "\n", "else", "coco_name", ")", "\n", "# Dataset splits that have ground-truth annotations (test splits", "\n", "# do not have gt annotations)", "\n", "self", ".", "_gt_splits", "=", "(", "'train'", ",", "'val'", ",", "'minival'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._get_ann_file": [[68, 73], ["os.join", "os.join", "coco.coco._image_set.find"], "methods", ["None"], ["", "def", "_get_ann_file", "(", "self", ")", ":", "\n", "    ", "prefix", "=", "'instances'", "if", "self", ".", "_image_set", ".", "find", "(", "'test'", ")", "==", "-", "1", "else", "'image_info'", "\n", "return", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "'annotations'", ",", "\n", "prefix", "+", "'_'", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "'.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._load_image_set_index": [[74, 80], ["coco.coco._COCO.getImgIds"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.getImgIds"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Load image ids.\n    \"\"\"", "\n", "image_ids", "=", "self", ".", "_COCO", ".", "getImgIds", "(", ")", "\n", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._get_widths": [[190, 192], ["None"], "methods", ["None"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "    ", "return", "[", "r", "[", "'width'", "]", "for", "r", "in", "self", ".", "roidb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco.image_path_at": [[86, 91], ["coco.coco.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco.image_id_at": [[92, 97], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "_image_index", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco.image_path_from_index": [[98, 111], ["os.join", "os.join", "os.exists", "os.exists", "str().zfill", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "# Example image path for index=119993:", "\n", "#   images/train2014/COCO_train2014_000000119993.jpg", "\n", "file_name", "=", "(", "'COCO_'", "+", "self", ".", "_data_name", "+", "'_'", "+", "\n", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "'.jpg'", ")", "\n", "image_path", "=", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "'images'", ",", "\n", "self", ".", "_data_name", ",", "file_name", ")", "\n", "assert", "osp", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco.gt_roidb": [[112, 131], ["os.join", "os.join", "os.exists", "os.exists", "print", "print", "coco.coco._load_coco_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._load_coco_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "      ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_coco_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "_image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._load_coco_annotation": [[132, 189], ["coco.coco._COCO.getAnnIds", "coco.coco._COCO.loadAnns", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "enumerate", "datasets.validate_boxes", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "coco.coco._COCO.loadImgs", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "valid_objs.append", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.ds_utils.validate_boxes", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadImgs"], ["", "def", "_load_coco_annotation", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Loads COCO bounding-box instance annotations. Crowd instances are\n    handled by marking their overlaps (with all categories) to -1. This\n    overlap value means that crowd \"instances\" are excluded from training.\n    \"\"\"", "\n", "im_ann", "=", "self", ".", "_COCO", ".", "loadImgs", "(", "index", ")", "[", "0", "]", "\n", "width", "=", "im_ann", "[", "'width'", "]", "\n", "height", "=", "im_ann", "[", "'height'", "]", "\n", "\n", "annIds", "=", "self", ".", "_COCO", ".", "getAnnIds", "(", "imgIds", "=", "index", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "_COCO", ".", "loadAnns", "(", "annIds", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "      ", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "0", "]", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "1", "]", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "2", "]", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "3", "]", "-", "1", ")", ")", ")", ")", "\n", "if", "obj", "[", "'area'", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "        ", "obj", "[", "'clean_bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "", "", "objs", "=", "valid_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Lookup table to map from COCO category ids to our internal class", "\n", "# indices", "\n", "coco_cat_id_to_class_ind", "=", "dict", "(", "[", "(", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", ",", "\n", "self", ".", "_class_to_ind", "[", "cls", "]", ")", "\n", "for", "cls", "in", "self", ".", "_classes", "[", "1", ":", "]", "]", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "cls", "=", "coco_cat_id_to_class_ind", "[", "obj", "[", "'category_id'", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "'clean_bbox'", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "seg_areas", "[", "ix", "]", "=", "obj", "[", "'area'", "]", "\n", "if", "obj", "[", "'iscrowd'", "]", ":", "\n", "# Set overlap to -1 for all classes for crowd objects", "\n", "# so they will be excluded during training", "\n", "        ", "overlaps", "[", "ix", ",", ":", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "        ", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "", "ds_utils", ".", "validate_boxes", "(", "boxes", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "return", "{", "'width'", ":", "width", ",", "\n", "'height'", ":", "height", ",", "\n", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco.append_flipped_images": [[193, 213], ["coco.coco._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "coco.coco.roidb.append"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "    ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "      ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "'width'", ":", "widths", "[", "i", "]", ",", "\n", "'height'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'height'", "]", ",", "\n", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", ",", "\n", "'gt_overlaps'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ",", "\n", "'flipped'", ":", "True", ",", "\n", "'seg_areas'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'seg_areas'", "]", "}", "\n", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._get_box_file": [[214, 220], ["os.join", "os.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "_get_box_file", "(", "self", ",", "index", ")", ":", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "    ", "file_name", "=", "(", "'COCO_'", "+", "self", ".", "_data_name", "+", "\n", "'_'", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "'.mat'", ")", "\n", "return", "osp", ".", "join", "(", "file_name", "[", ":", "14", "]", ",", "file_name", "[", ":", "22", "]", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._print_detection_eval_metrics": [[221, 253], ["coco.coco._print_detection_eval_metrics._get_thr_ind"], "methods", ["None"], ["", "def", "_print_detection_eval_metrics", "(", "self", ",", "coco_eval", ")", ":", "\n", "    ", "IoU_lo_thresh", "=", "0.5", "\n", "IoU_hi_thresh", "=", "0.95", "\n", "\n", "def", "_get_thr_ind", "(", "coco_eval", ",", "thr", ")", ":", "\n", "      ", "ind", "=", "np", ".", "where", "(", "(", "coco_eval", ".", "params", ".", "iouThrs", ">", "thr", "-", "1e-5", ")", "&", "\n", "(", "coco_eval", ".", "params", ".", "iouThrs", "<", "thr", "+", "1e-5", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "iou_thr", "=", "coco_eval", ".", "params", ".", "iouThrs", "[", "ind", "]", "\n", "assert", "np", ".", "isclose", "(", "iou_thr", ",", "thr", ")", "\n", "return", "ind", "\n", "\n", "", "ind_lo", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_lo_thresh", ")", "\n", "ind_hi", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_hi_thresh", ")", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "# area range index 0: all area ranges", "\n", "# max dets index 2: 100 per image", "\n", "precision", "=", "coco_eval", ".", "eval", "[", "'precision'", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", ":", ",", "0", ",", "2", "]", "\n", "ap_default", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "(", "'~~~~ Mean and per-category AP @ IoU=[{:.2f},{:.2f}] '", "\n", "'~~~~'", ")", ".", "format", "(", "IoU_lo_thresh", ",", "IoU_hi_thresh", ")", ")", "\n", "print", "(", "'{:.1f}'", ".", "format", "(", "100", "*", "ap_default", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "# minus 1 because of __background__", "\n", "", "precision", "=", "coco_eval", ".", "eval", "[", "'precision'", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", "cls_ind", "-", "1", ",", "0", ",", "2", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "'{:.1f}'", ".", "format", "(", "100", "*", "ap", ")", ")", "\n", "\n", "", "print", "(", "'~~~~ Summary metrics ~~~~'", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._do_detection_eval": [[254, 266], ["coco.coco._COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "coco.coco._print_detection_eval_metrics", "os.join", "os.join", "print", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadRes", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.evaluate", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.accumulate", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._print_detection_eval_metrics"], ["", "def", "_do_detection_eval", "(", "self", ",", "res_file", ",", "output_dir", ")", ":", "\n", "    ", "ann_type", "=", "'bbox'", "\n", "coco_dt", "=", "self", ".", "_COCO", ".", "loadRes", "(", "res_file", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "_COCO", ",", "coco_dt", ")", "\n", "coco_eval", ".", "params", ".", "useSegm", "=", "(", "ann_type", "==", "'segm'", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "self", ".", "_print_detection_eval_metrics", "(", "coco_eval", ")", "\n", "eval_file", "=", "osp", ".", "join", "(", "output_dir", ",", "'detection_results.pkl'", ")", "\n", "with", "open", "(", "eval_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "coco_eval", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'Wrote COCO eval results to: {}'", ".", "format", "(", "eval_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._coco_results_one_category": [[267, 284], ["enumerate", "boxes[].astype", "results.extend", "range"], "methods", ["None"], ["", "def", "_coco_results_one_category", "(", "self", ",", "boxes", ",", "cat_id", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "      ", "dets", "=", "boxes", "[", "im_ind", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "dets", "==", "[", "]", ":", "\n", "        ", "continue", "\n", "", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "xs", "=", "dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "dets", "[", ":", ",", "2", "]", "-", "xs", "+", "1", "\n", "hs", "=", "dets", "[", ":", ",", "3", "]", "-", "ys", "+", "1", "\n", "results", ".", "extend", "(", "\n", "[", "{", "'image_id'", ":", "index", ",", "\n", "'category_id'", ":", "cat_id", ",", "\n", "'bbox'", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "'score'", ":", "scores", "[", "k", "]", "}", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._write_coco_results_file": [[285, 302], ["enumerate", "print", "print", "results.extend", "open", "json.dump", "coco.coco._coco_results_one_category"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._coco_results_one_category"], ["", "def", "_write_coco_results_file", "(", "self", ",", "all_boxes", ",", "res_file", ")", ":", "\n", "# [{\"image_id\": 42,", "\n", "#   \"category_id\": 18,", "\n", "#   \"bbox\": [258.15,41.29,348.26,243.78],", "\n", "#   \"score\": 0.236}, ...]", "\n", "    ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "print", "(", "'Collecting {} results ({:d}/{:d})'", ".", "format", "(", "cls", ",", "cls_ind", ",", "\n", "self", ".", "num_classes", "-", "1", ")", ")", "\n", "coco_cat_id", "=", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", "\n", "results", ".", "extend", "(", "self", ".", "_coco_results_one_category", "(", "all_boxes", "[", "cls_ind", "]", ",", "\n", "coco_cat_id", ")", ")", "\n", "", "print", "(", "'Writing results json to {}'", ".", "format", "(", "res_file", ")", ")", "\n", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "fid", ":", "\n", "      ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco.evaluate_detections": [[303, 318], ["os.join", "os.join", "coco.coco._write_coco_results_file", "coco.coco._image_set.find", "coco.coco._do_detection_eval", "os.remove", "os.remove", "os.remove", "os.remove", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._write_coco_results_file", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco._do_detection_eval"], ["", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "    ", "res_file", "=", "osp", ".", "join", "(", "output_dir", ",", "(", "'detections_'", "+", "\n", "self", ".", "_image_set", "+", "\n", "self", ".", "_year", "+", "\n", "'_results'", ")", ")", "\n", "if", "self", ".", "config", "[", "'use_salt'", "]", ":", "\n", "      ", "res_file", "+=", "'_{}'", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "'.json'", "\n", "self", ".", "_write_coco_results_file", "(", "all_boxes", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets", "\n", "if", "self", ".", "_image_set", ".", "find", "(", "'test'", ")", "==", "-", "1", ":", "\n", "      ", "self", ".", "_do_detection_eval", "(", "res_file", ",", "output_dir", ")", "\n", "# Optionally cleanup results json file", "\n", "", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "      ", "os", ".", "remove", "(", "res_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.coco.coco.competition_mode": [[319, 326], ["None"], "methods", ["None"], ["", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "    ", "if", "on", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "False", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "False", "\n", "", "else", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "True", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.parse_rec": [[16, 34], ["xml.parse", "ET.parse.findall", "int", "obj.find", "objects.append", "obj.find", "obj.find", "int", "int", "int", "int", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["def", "parse_rec", "(", "filename", ")", ":", "\n", "    ", "\"\"\" Parse a PASCAL VOC xml file \"\"\"", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objects", "=", "[", "]", "\n", "for", "obj", "in", "tree", ".", "findall", "(", "'object'", ")", ":", "\n", "        ", "obj_struct", "=", "{", "}", "\n", "obj_struct", "[", "'name'", "]", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "obj_struct", "[", "'pose'", "]", "=", "obj", ".", "find", "(", "'pose'", ")", ".", "text", "\n", "# obj_struct['truncated'] = int(obj.find('truncated').text)", "\n", "obj_struct", "[", "'difficult'", "]", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "obj_struct", "[", "'bbox'", "]", "=", "[", "int", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "]", "\n", "objects", ".", "append", "(", "obj_struct", ")", "\n", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.voc_ap": [[36, 69], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "# print(ap)", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.voc_eval": [[71, 214], ["os.path.join", "detpath.format", "numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "numpy.cumsum", "numpy.cumsum", "voc_eval.voc_ap", "voc_eval.voc_ap", "os.path.isdir", "os.mkdir", "open", "f.readlines", "x.strip", "os.path.isfile", "enumerate", "print", "open", "f.readlines", "x.strip().split", "numpy.array", "numpy.array().astype", "numpy.argsort", "numpy.sort", "range", "float", "numpy.maximum", "voc_eval.parse_rec", "open", "pickle.dump", "open", "float", "len", "sum", "BB[].astype", "R[].astype", "annopath.format", "print", "pickle.load", "x.strip", "float", "numpy.array", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "numpy.finfo", "pickle.load", "len"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.voc_ap", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.voc_ap", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.parse_rec"], ["", "def", "voc_eval", "(", "detpath", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "classname", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"rec, prec, ap = voc_eval(detpath,\n                                annopath,\n                                imagesetfile,\n                                classname,\n                                [ovthresh],\n                                [use_07_metric])\n\n    Top level function that does the PASCAL VOC evaluation.\n\n    detpath: Path to detections\n        detpath.format(classname) should produce the detection results file.\n    annopath: Path to annotations\n        annopath.format(imagename) should be the xml annotations file.\n    imagesetfile: Text file containing the list of images, one image per line.\n    classname: Category name (duh)\n    cachedir: Directory for caching the annotations\n    [ovthresh]: Overlap threshold (default = 0.5)\n    [use_07_metric]: Whether to use VOC07's 11 point AP computation\n        (default False)\n    \"\"\"", "\n", "# assumes detections are in detpath.format(classname)", "\n", "# assumes annotations are in annopath.format(imagename)", "\n", "# assumes imagesetfile is a text file with each line an image name", "\n", "# cachedir caches the annotations in a pickle file", "\n", "\n", "# first load gt", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cachedir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "cachedir", ")", "\n", "", "cachefile", "=", "os", ".", "path", ".", "join", "(", "cachedir", ",", "'%s_annots.pkl'", "%", "imagesetfile", ")", "\n", "# read list of images", "\n", "with", "open", "(", "imagesetfile", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "imagenames", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "lines", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cachefile", ")", ":", "\n", "# load annotations", "\n", "        ", "recs", "=", "{", "}", "\n", "for", "i", ",", "imagename", "in", "enumerate", "(", "imagenames", ")", ":", "\n", "            ", "recs", "[", "imagename", "]", "=", "parse_rec", "(", "annopath", ".", "format", "(", "imagename", ")", ")", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'Reading annotation for {:d}/{:d}'", ".", "format", "(", "\n", "i", "+", "1", ",", "len", "(", "imagenames", ")", ")", ")", "\n", "# save", "\n", "", "", "print", "(", "'Saving cached annotations to {:s}'", ".", "format", "(", "cachefile", ")", ")", "\n", "with", "open", "(", "cachefile", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "recs", ",", "f", ")", "\n", "", "", "else", ":", "\n", "# load", "\n", "        ", "with", "open", "(", "cachefile", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "recs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "except", ":", "\n", "                ", "recs", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "\n", "\n", "# read dets", "\n", "", "", "", "detfile", "=", "detpath", ".", "format", "(", "classname", ")", "\n", "with", "open", "(", "detfile", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "BB", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "\n", "# extract gt objects for this class", "\n", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "imagename", "in", "imagenames", ":", "\n", "        ", "if", "imagename", "not", "in", "image_ids", ":", "\n", "            ", "continue", "\n", "", "R", "=", "[", "obj", "for", "obj", "in", "recs", "[", "imagename", "]", "if", "obj", "[", "'name'", "]", "==", "'car'", "]", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x", "[", "'bbox'", "]", "for", "x", "in", "R", "]", ")", "\n", "difficult", "=", "np", ".", "array", "(", "[", "x", "[", "'difficult'", "]", "for", "x", "in", "R", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "R", ")", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "imagename", "]", "=", "{", "'bbox'", ":", "bbox", ",", "\n", "'difficult'", ":", "difficult", ",", "\n", "'det'", ":", "det", "}", "\n", "\n", "", "if", "BB", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# sort by confidence", "\n", "        ", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "            ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "'bbox'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "                ", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", "+", "1.", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "                ", "if", "not", "R", "[", "'difficult'", "]", "[", "jmax", "]", ":", "\n", "                    ", "if", "not", "R", "[", "'det'", "]", "[", "jmax", "]", ":", "\n", "                        ", "tp", "[", "d", "]", "=", "1.", "\n", "R", "[", "'det'", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap_use_07_metric", "=", "voc_ap", "(", "rec", ",", "prec", ",", "True", ")", "\n", "ap_no_use_07_metric", "=", "voc_ap", "(", "rec", ",", "prec", ",", "False", ")", "\n", "return", "rec", ",", "prec", ",", "ap_use_07_metric", ",", "ap_no_use_07_metric", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg.__init__": [[30, 100], ["datasets.imdb.imdb.__init__", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "open", "f.readlines", "open", "f.readlines", "open", "f.readlines", "os.path.join", "os.path.join", "vg.vg._load_image_set_index", "os.path.join", "vg.vg._classes.append", "os.path.join", "vg.vg._attributes.append", "os.path.join", "vg.vg._relations.append", "open", "pickle.load", "open", "pickle.load", "open", "pickle.dump", "open", "pickle.dump", "n.lower().strip", "n.lower().strip", "n.lower().strip", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "object.split", "att.split", "rel.split", "n.lower", "n.lower", "n.lower"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "version", ",", "image_set", ",", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "'vg_'", "+", "version", "+", "'_'", "+", "image_set", ")", "\n", "self", ".", "_version", "=", "version", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'genome'", ")", "\n", "self", ".", "_img_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'vg'", ")", "\n", "# VG specific config options", "\n", "self", ".", "config", "=", "{", "'cleanup'", ":", "False", "}", "\n", "\n", "# Load classes", "\n", "self", ".", "_classes", "=", "[", "'__background__'", "]", "\n", "self", ".", "_class_to_ind", "=", "{", "}", "\n", "self", ".", "_class_to_ind", "[", "self", ".", "_classes", "[", "0", "]", "]", "=", "0", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_version", ",", "'objects_vocab.txt'", ")", ")", "as", "f", ":", "\n", "          ", "count", "=", "1", "\n", "for", "object", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "names", "=", "[", "n", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "n", "in", "object", ".", "split", "(", "','", ")", "]", "\n", "self", ".", "_classes", ".", "append", "(", "names", "[", "0", "]", ")", "\n", "for", "n", "in", "names", ":", "\n", "              ", "self", ".", "_class_to_ind", "[", "n", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n", "# Load attributes", "\n", "", "", "self", ".", "_attributes", "=", "[", "'__no_attribute__'", "]", "\n", "self", ".", "_attribute_to_ind", "=", "{", "}", "\n", "self", ".", "_attribute_to_ind", "[", "self", ".", "_attributes", "[", "0", "]", "]", "=", "0", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_version", ",", "'attributes_vocab.txt'", ")", ")", "as", "f", ":", "\n", "          ", "count", "=", "1", "\n", "for", "att", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "names", "=", "[", "n", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "n", "in", "att", ".", "split", "(", "','", ")", "]", "\n", "self", ".", "_attributes", ".", "append", "(", "names", "[", "0", "]", ")", "\n", "for", "n", "in", "names", ":", "\n", "              ", "self", ".", "_attribute_to_ind", "[", "n", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n", "# Load relations", "\n", "", "", "self", ".", "_relations", "=", "[", "'__no_relation__'", "]", "\n", "self", ".", "_relation_to_ind", "=", "{", "}", "\n", "self", ".", "_relation_to_ind", "[", "self", ".", "_relations", "[", "0", "]", "]", "=", "0", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_version", ",", "'relations_vocab.txt'", ")", ")", "as", "f", ":", "\n", "          ", "count", "=", "1", "\n", "for", "rel", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "names", "=", "[", "n", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "n", "in", "rel", ".", "split", "(", "','", ")", "]", "\n", "self", ".", "_relations", ".", "append", "(", "names", "[", "0", "]", ")", "\n", "for", "n", "in", "names", ":", "\n", "              ", "self", ".", "_relation_to_ind", "[", "n", "]", "=", "count", "\n", "", "count", "+=", "1", "\n", "\n", "\n", "", "", "self", ".", "_image_ext", "=", "'.jpg'", "\n", "load_index_from_file", "=", "False", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"vg_image_index_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", ")", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"vg_image_index_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", ")", ",", "'rb'", ")", "as", "fp", ":", "\n", "                ", "self", ".", "_image_index", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "load_index_from_file", "=", "True", "\n", "\n", "", "load_id_from_file", "=", "False", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"vg_id_to_dir_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", ")", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"vg_id_to_dir_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", ")", ",", "'rb'", ")", "as", "fp", ":", "\n", "                ", "self", ".", "_id_to_dir", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "load_id_from_file", "=", "True", "\n", "\n", "", "if", "not", "load_index_from_file", "or", "not", "load_id_from_file", ":", "\n", "            ", "self", ".", "_image_index", ",", "self", ".", "_id_to_dir", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"vg_image_index_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "_image_index", ",", "fp", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "\"vg_id_to_dir_{}.p\"", ".", "format", "(", "self", ".", "_image_set", ")", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "_id_to_dir", ",", "fp", ")", "\n", "\n", "", "", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg.image_path_at": [[102, 107], ["vg.vg.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg.image_id_at": [[108, 113], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "# return self._image_index[i]", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg.image_path_from_index": [[115, 125], ["os.path.join", "os.path.exists", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "folder", "=", "self", ".", "_id_to_dir", "[", "index", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_img_path", ",", "folder", ",", "\n", "str", "(", "index", ")", "+", "self", ".", "_image_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._image_split_path": [[126, 137], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_image_split_path", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_image_set", "==", "\"minitrain\"", ":", "\n", "          ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'train.txt'", ")", "\n", "", "if", "self", ".", "_image_set", "==", "\"smalltrain\"", ":", "\n", "          ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'train.txt'", ")", "\n", "", "if", "self", ".", "_image_set", "==", "\"minival\"", ":", "\n", "          ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'val.txt'", ")", "\n", "", "if", "self", ".", "_image_set", "==", "\"smallval\"", ":", "\n", "          ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'val.txt'", ")", "\n", "", "else", ":", "\n", "          ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._load_image_set_index": [[138, 175], ["vg.vg._image_split_path", "os.path.exists", "open", "f.readlines", "line.split", "int", "vg.vg._annotation_path", "os.path.exists", "xml.parse", "xml.parse.findall", "[].split", "obj.find().text.lower().strip", "image_index.append", "obj.find().text.lower", "im_file.split", "ann_file.split", "obj.find"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._image_split_path", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._annotation_path"], ["", "", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "training_split_file", "=", "self", ".", "_image_split_path", "(", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "training_split_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "training_split_file", ")", "\n", "with", "open", "(", "training_split_file", ")", "as", "f", ":", "\n", "          ", "metadata", "=", "f", ".", "readlines", "(", ")", "\n", "if", "self", ".", "_image_set", "==", "\"minitrain\"", ":", "\n", "            ", "metadata", "=", "metadata", "[", ":", "1000", "]", "\n", "", "elif", "self", ".", "_image_set", "==", "\"smalltrain\"", ":", "\n", "            ", "metadata", "=", "metadata", "[", ":", "20000", "]", "\n", "", "elif", "self", ".", "_image_set", "==", "\"minival\"", ":", "\n", "            ", "metadata", "=", "metadata", "[", ":", "100", "]", "\n", "", "elif", "self", ".", "_image_set", "==", "\"smallval\"", ":", "\n", "            ", "metadata", "=", "metadata", "[", ":", "2000", "]", "\n", "\n", "", "", "image_index", "=", "[", "]", "\n", "id_to_dir", "=", "{", "}", "\n", "for", "line", "in", "metadata", ":", "\n", "          ", "im_file", ",", "ann_file", "=", "line", ".", "split", "(", ")", "\n", "image_id", "=", "int", "(", "ann_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "filename", "=", "self", ".", "_annotation_path", "(", "image_id", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "# Some images have no bboxes after object filtering, so there", "\n", "# is no xml annotation for these.", "\n", "              ", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "for", "obj", "in", "tree", ".", "findall", "(", "'object'", ")", ":", "\n", "                  ", "obj_name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "obj_name", "in", "self", ".", "_class_to_ind", ":", "\n", "# We have to actually load and check these to make sure they have", "\n", "# at least one object actually in vocab", "\n", "                      ", "image_index", ".", "append", "(", "image_id", ")", "\n", "id_to_dir", "[", "image_id", "]", "=", "im_file", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "break", "\n", "", "", "", "", "return", "image_index", ",", "id_to_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg.gt_roidb": [[176, 197], ["os.path.join", "os.path.exists", "gzip.open", "pickle.dump", "gzip.open.close", "print", "gzip.open", "pickle.load", "gzip.open.close", "print", "vg.vg._load_vg_annotation"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._load_vg_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "fid", "=", "gzip", ".", "open", "(", "cache_file", ",", "'rb'", ")", "\n", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "fid", ".", "close", "(", ")", "\n", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_vg_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "image_index", "]", "\n", "fid", "=", "gzip", ".", "open", "(", "cache_file", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "fid", ".", "close", "(", ")", "\n", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._get_size": [[198, 200], ["PIL.Image.open", "vg.vg.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "_get_size", "(", "self", ",", "index", ")", ":", "\n", "      ", "return", "PIL", ".", "Image", ".", "open", "(", "self", ".", "image_path_from_index", "(", "index", ")", ")", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._annotation_path": [[201, 203], ["os.path.join", "str"], "methods", ["None"], ["", "def", "_annotation_path", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'xml'", ",", "str", "(", "index", ")", "+", "'.xml'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._load_vg_annotation": [[204, 291], ["vg.vg._get_size", "vg.vg._annotation_path", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "xml.parse.findall", "len", "set", "numpy.array", "obj.find().text.lower().strip", "list", "obj.find", "max", "max", "min", "min", "obj.findall", "rel.find", "pred.lower().strip.lower().strip.lower().strip", "obj.find().text.lower", "float", "float", "float", "float", "print", "att.text.lower().strip.text.lower().strip.text.lower().strip", "pred.lower().strip.lower().strip.lower", "triple.append", "triple.append", "triple.append", "numpy.array.add", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find", "att.text.lower().strip.text.lower().strip.text.lower", "tuple", "obj.find", "rel.find", "rel.find"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._get_size", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._annotation_path"], ["", "def", "_load_vg_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "width", ",", "height", "=", "self", ".", "_get_size", "(", "index", ")", "\n", "filename", "=", "self", ".", "_annotation_path", "(", "index", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# Max of 16 attributes are observed in the data", "\n", "gt_attributes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "16", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "obj_dict", "=", "{", "}", "\n", "ix", "=", "0", "\n", "for", "obj", "in", "objs", ":", "\n", "            ", "obj_name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "obj_name", "in", "self", ".", "_class_to_ind", ":", "\n", "                ", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "x1", "=", "max", "(", "0", ",", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ")", "\n", "y1", "=", "max", "(", "0", ",", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ")", "\n", "x2", "=", "min", "(", "width", "-", "1", ",", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ")", "\n", "y2", "=", "min", "(", "height", "-", "1", ",", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", ")", "\n", "# If bboxes are not positive, just give whole image coords (there are a few examples)", "\n", "if", "x2", "<", "x1", "or", "y2", "<", "y1", ":", "\n", "                    ", "print", "(", "'Failed bbox in %s, object %s'", "%", "(", "filename", ",", "obj_name", ")", ")", "\n", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "width", "-", "1", "\n", "y2", "=", "width", "-", "1", "\n", "", "cls", "=", "self", ".", "_class_to_ind", "[", "obj_name", "]", "\n", "obj_dict", "[", "obj", ".", "find", "(", "'object_id'", ")", ".", "text", "]", "=", "ix", "\n", "atts", "=", "obj", ".", "findall", "(", "'attribute'", ")", "\n", "n", "=", "0", "\n", "for", "att", "in", "atts", ":", "\n", "                    ", "att", "=", "att", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "att", "in", "self", ".", "_attribute_to_ind", ":", "\n", "                        ", "gt_attributes", "[", "ix", ",", "n", "]", "=", "self", ".", "_attribute_to_ind", "[", "att", "]", "\n", "n", "+=", "1", "\n", "", "if", "n", ">=", "16", ":", "\n", "                        ", "break", "\n", "", "", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "ix", "+=", "1", "\n", "# clip gt_classes and gt_relations", "\n", "", "", "gt_classes", "=", "gt_classes", "[", ":", "ix", "]", "\n", "gt_attributes", "=", "gt_attributes", "[", ":", "ix", ",", ":", "]", "\n", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "gt_attributes", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "gt_attributes", ")", "\n", "\n", "rels", "=", "tree", ".", "findall", "(", "'relation'", ")", "\n", "num_rels", "=", "len", "(", "rels", ")", "\n", "gt_relations", "=", "set", "(", ")", "# Avoid duplicates", "\n", "for", "rel", "in", "rels", ":", "\n", "            ", "pred", "=", "rel", ".", "find", "(", "'predicate'", ")", ".", "text", "\n", "if", "pred", ":", "# One is empty", "\n", "                ", "pred", "=", "pred", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "pred", "in", "self", ".", "_relation_to_ind", ":", "\n", "                    ", "try", ":", "\n", "                        ", "triple", "=", "[", "]", "\n", "triple", ".", "append", "(", "obj_dict", "[", "rel", ".", "find", "(", "'subject_id'", ")", ".", "text", "]", ")", "\n", "triple", ".", "append", "(", "self", ".", "_relation_to_ind", "[", "pred", "]", ")", "\n", "triple", ".", "append", "(", "obj_dict", "[", "rel", ".", "find", "(", "'object_id'", ")", ".", "text", "]", ")", "\n", "gt_relations", ".", "add", "(", "tuple", "(", "triple", ")", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "# Object not in dictionary", "\n", "", "", "", "", "gt_relations", "=", "np", ".", "array", "(", "list", "(", "gt_relations", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "{", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_attributes'", ":", "gt_attributes", ",", "\n", "'gt_relations'", ":", "gt_relations", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'width'", ":", "width", ",", "\n", "'height'", ":", "height", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg.evaluate_detections": [[292, 301], ["vg.vg._write_voc_results_file", "vg.vg._do_python_eval", "vg.vg._get_vg_results_file_template().format", "os.remove", "vg.vg._get_vg_results_file_template"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._do_python_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._get_vg_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "self", ".", "classes", ",", "all_boxes", ",", "output_dir", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "'__background__'", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg.evaluate_attributes": [[302, 311], ["vg.vg._write_voc_results_file", "vg.vg._do_python_eval", "vg.vg._get_vg_results_file_template().format", "os.remove", "vg.vg._get_vg_results_file_template"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._do_python_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._get_vg_results_file_template"], ["", "", "", "def", "evaluate_attributes", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "self", ".", "attributes", ",", "all_boxes", ",", "output_dir", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ",", "eval_attributes", "=", "True", ")", "\n", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_attributes", ":", "\n", "                ", "if", "cls", "==", "'__no_attribute__'", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._get_vg_results_file_template": [[312, 316], ["os.path.join"], "methods", ["None"], ["", "", "", "def", "_get_vg_results_file_template", "(", "self", ",", "output_dir", ")", ":", "\n", "        ", "filename", "=", "'detections_'", "+", "self", ".", "_image_set", "+", "'_{:s}.txt'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._write_voc_results_file": [[317, 334], ["enumerate", "print", "vg.vg._get_vg_results_file_template().format", "open", "enumerate", "vg.vg._get_vg_results_file_template", "xrange", "f.write", "str"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._get_vg_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "classes", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "'__background__'", ":", "\n", "                ", "continue", "\n", "", "print", "(", "'Writing \"{}\" vg results file'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "str", "(", "index", ")", ",", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "dets", "[", "k", ",", "3", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._do_python_eval": [[336, 402], ["print", "vg.vg.gt_roidb", "enumerate", "numpy.array", "numpy.mean", "os.path.join", "numpy.array", "numpy.array.sum", "print", "print", "print", "print", "print", "zip", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "vg.vg._get_vg_results_file_template().format", "vg_eval.vg_eval.vg_eval", "print", "open", "enumerate", "print", "numpy.nan_to_num", "float", "numpy.nan_to_num.write", "numpy.mean", "numpy.average", "numpy.mean", "vg.vg._get_vg_results_file_template", "open", "pickle.dump", "os.path.join", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.gt_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg_eval.vg_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg.vg._get_vg_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", ",", "pickle", "=", "True", ",", "eval_attributes", "=", "False", ")", ":", "\n", "# We re-use parts of the pascal voc python code for visual genome", "\n", "        ", "aps", "=", "[", "]", "\n", "nposs", "=", "[", "]", "\n", "thresh", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "False", "\n", "print", "(", "'VOC07 metric? '", "+", "(", "'Yes'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "# Load ground truth", "\n", "", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "if", "eval_attributes", ":", "\n", "            ", "classes", "=", "self", ".", "_attributes", "\n", "", "else", ":", "\n", "            ", "classes", "=", "self", ".", "_classes", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "'__background__'", "or", "cls", "==", "'__no_attribute__'", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_vg_results_file_template", "(", "output_dir", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", ",", "scores", ",", "npos", "=", "vg_eval", "(", "\n", "filename", ",", "gt_roidb", ",", "self", ".", "image_index", ",", "i", ",", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "eval_attributes", "=", "eval_attributes", ")", "\n", "\n", "# Determine per class detection thresholds that maximise f score", "\n", "if", "npos", ">", "1", ":", "\n", "                ", "f", "=", "np", ".", "nan_to_num", "(", "(", "prec", "*", "rec", ")", "/", "(", "prec", "+", "rec", ")", ")", "\n", "thresh", "+=", "[", "scores", "[", "np", ".", "argmax", "(", "f", ")", "]", "]", "\n", "", "else", ":", "\n", "                ", "thresh", "+=", "[", "0", "]", "\n", "", "aps", "+=", "[", "ap", "]", "\n", "nposs", "+=", "[", "float", "(", "npos", ")", "]", "\n", "print", "(", "'AP for {} = {:.4f} (npos={:,})'", ".", "format", "(", "cls", ",", "ap", ",", "npos", ")", ")", "\n", "if", "pickle", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", ",", "\n", "'scores'", ":", "scores", ",", "'npos'", ":", "npos", "}", ",", "f", ")", "\n", "\n", "# Set thresh to mean for classes with poor results", "\n", "", "", "", "thresh", "=", "np", ".", "array", "(", "thresh", ")", "\n", "avg_thresh", "=", "np", ".", "mean", "(", "thresh", "[", "thresh", "!=", "0", "]", ")", "\n", "thresh", "[", "thresh", "==", "0", "]", "=", "avg_thresh", "\n", "if", "eval_attributes", ":", "\n", "            ", "filename", "=", "'attribute_thresholds_'", "+", "self", ".", "_image_set", "+", "'.txt'", "\n", "", "else", ":", "\n", "            ", "filename", "=", "'object_thresholds_'", "+", "self", ".", "_image_set", "+", "'.txt'", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "with", "open", "(", "path", ",", "'wt'", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "cls", "in", "enumerate", "(", "classes", "[", "1", ":", "]", ")", ":", "\n", "                ", "f", ".", "write", "(", "'{:s} {:.3f}\\n'", ".", "format", "(", "cls", ",", "thresh", "[", "i", "]", ")", ")", "\n", "\n", "", "", "weights", "=", "np", ".", "array", "(", "nposs", ")", "\n", "weights", "/=", "weights", ".", "sum", "(", ")", "\n", "print", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "'Weighted Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "average", "(", "aps", ",", "weights", "=", "weights", ")", ")", ")", "\n", "print", "(", "'Mean Detection Threshold = {:.3f}'", ".", "format", "(", "avg_thresh", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "'Results:'", ")", "\n", "for", "ap", ",", "npos", "in", "zip", "(", "aps", ",", "nposs", ")", ":", "\n", "            ", "print", "(", "'{:.3f}\\t{:.3f}'", ".", "format", "(", "ap", ",", "npos", ")", ")", "\n", "", "print", "(", "'{:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "print", "(", "'Results computed with the **unofficial** PASCAL VOC Python eval code.'", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.vg_eval.vg_eval": [[13, 124], ["zip", "numpy.array", "numpy.array", "numpy.argsort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "voc_eval.voc_ap", "numpy.zeros().astype", "open", "f.readlines", "len", "x.strip().split", "numpy.sort", "BB[].astype", "R[].astype", "float", "numpy.maximum", "sum", "float", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "numpy.zeros", "str", "x.strip", "float", "numpy.finfo", "numpy.where", "numpy.where", "numpy.any", "item[].toarray"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.voc_ap"], ["def", "vg_eval", "(", "detpath", ",", "\n", "gt_roidb", ",", "\n", "image_index", ",", "\n", "classindex", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "False", ",", "\n", "eval_attributes", "=", "False", ")", ":", "\n", "    ", "\"\"\"rec, prec, ap, sorted_scores, npos = voc_eval(\n                                detpath, \n                                gt_roidb,\n                                image_index,\n                                classindex,\n                                [ovthresh],\n                                [use_07_metric])\n\n    Top level function that does the Visual Genome evaluation.\n\n    detpath: Path to detections\n    gt_roidb: List of ground truth structs.\n    image_index: List of image ids.\n    classindex: Category index\n    [ovthresh]: Overlap threshold (default = 0.5)\n    [use_07_metric]: Whether to use VOC07's 11 point AP computation\n        (default False)\n    \"\"\"", "\n", "# extract gt objects for this class", "\n", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "item", ",", "imagename", "in", "zip", "(", "gt_roidb", ",", "image_index", ")", ":", "\n", "        ", "if", "eval_attributes", ":", "\n", "            ", "bbox", "=", "item", "[", "'boxes'", "]", "[", "np", ".", "where", "(", "np", ".", "any", "(", "item", "[", "'gt_attributes'", "]", ".", "toarray", "(", ")", "==", "classindex", ",", "axis", "=", "1", ")", ")", "[", "0", "]", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "bbox", "=", "item", "[", "'boxes'", "]", "[", "np", ".", "where", "(", "item", "[", "'gt_classes'", "]", "==", "classindex", ")", "[", "0", "]", ",", ":", "]", "\n", "", "difficult", "=", "np", ".", "zeros", "(", "(", "bbox", ".", "shape", "[", "0", "]", ",", ")", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "det", "=", "[", "False", "]", "*", "bbox", ".", "shape", "[", "0", "]", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "str", "(", "imagename", ")", "]", "=", "{", "'bbox'", ":", "bbox", ",", "\n", "'difficult'", ":", "difficult", ",", "\n", "'det'", ":", "det", "}", "\n", "", "if", "npos", "==", "0", ":", "\n", "# No ground truth examples", "\n", "        ", "return", "0", ",", "0", ",", "0", ",", "0", ",", "npos", "\n", "\n", "# read dets", "\n", "", "with", "open", "(", "detpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "len", "(", "lines", ")", "==", "0", ":", "\n", "# No detection examples", "\n", "        ", "return", "0", ",", "0", ",", "0", ",", "0", ",", "npos", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "BB", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "# sort by confidence", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "-", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "        ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "'bbox'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "            ", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", "+", "1.", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "            ", "if", "not", "R", "[", "'difficult'", "]", "[", "jmax", "]", ":", "\n", "                ", "if", "not", "R", "[", "'det'", "]", "[", "jmax", "]", ":", "\n", "                    ", "tp", "[", "d", "]", "=", "1.", "\n", "R", "[", "'det'", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", ",", "sorted_scores", ",", "npos", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.__init__": [[25, 38], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "classes", "=", "None", ")", ":", "\n", "    ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_num_classes", "=", "0", "\n", "if", "not", "classes", ":", "\n", "      ", "self", ".", "_classes", "=", "[", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "_classes", "=", "classes", "\n", "", "self", ".", "_image_index", "=", "[", "]", "\n", "self", ".", "_obj_proposer", "=", "'gt'", "\n", "self", ".", "_roidb", "=", "None", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "default_roidb", "\n", "# Use this dict for storing dataset specific config options", "\n", "self", ".", "config", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.name": [[39, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.num_classes": [[43, 46], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.classes": [[47, 50], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.image_index": [[51, 54], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_index", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.roidb_handler": [[59, 62], ["None"], "methods", ["None"], ["", "@", "roidb_handler", ".", "setter", "\n", "def", "roidb_handler", "(", "self", ",", "val", ")", ":", "\n", "    ", "self", ".", "_roidb_handler", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.set_proposal_method": [[63, 66], ["eval"], "methods", ["None"], ["", "def", "set_proposal_method", "(", "self", ",", "method", ")", ":", "\n", "    ", "method", "=", "eval", "(", "'self.'", "+", "method", "+", "'_roidb'", ")", "\n", "self", ".", "roidb_handler", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.roidb": [[67, 78], ["imdb.imdb.roidb_handler"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.roidb_handler"], ["", "@", "property", "\n", "def", "roidb", "(", "self", ")", ":", "\n", "# A roidb is a list of dictionaries, each with the following keys:", "\n", "#   boxes", "\n", "#   gt_overlaps", "\n", "#   gt_classes", "\n", "#   flipped", "\n", "    ", "if", "self", ".", "_roidb", "is", "not", "None", ":", "\n", "      ", "return", "self", ".", "_roidb", "\n", "", "self", ".", "_roidb", "=", "self", ".", "roidb_handler", "(", ")", "\n", "return", "self", ".", "_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.cache_path": [[79, 85], ["os.abspath", "os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "cache_path", "(", "self", ")", ":", "\n", "    ", "cache_path", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'cache'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "cache_path", ")", "\n", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.num_images": [[86, 89], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_images", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "image_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.image_path_at": [[90, 92], ["None"], "methods", ["None"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.image_id_at": [[93, 95], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.default_roidb": [[96, 98], ["None"], "methods", ["None"], ["", "def", "default_roidb", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.evaluate_detections": [[99, 109], ["None"], "methods", ["None"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    all_boxes is a list of length number-of-classes.\n    Each list element is a list of length number-of-images.\n    Each of those list elements is either an empty list []\n    or a numpy array of detection.\n\n    all_boxes[class][image] = [] or np.array of shape #dets x 5\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb._get_widths": [[110, 113], ["range", "PIL.Image.open", "imdb.imdb.image_path_at"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_at"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "    ", "return", "[", "PIL", ".", "Image", ".", "open", "(", "self", ".", "image_path_at", "(", "i", ")", ")", ".", "size", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_images", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.append_flipped_images": [[114, 133], ["imdb.imdb._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "imdb.imdb.roidb.append"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "    ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "      ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "'boxes'", ":", "boxes", ",", "\n", "'weather'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'weather'", "]", ",", "\n", "'altitude'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'altitude'", "]", ",", "\n", "'angle'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'angle'", "]", ",", "\n", "'gt_overlaps'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ",", "\n", "'gt_classes'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", ",", "\n", "'flipped'", ":", "True", "}", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.evaluate_recall": [[134, 223], ["numpy.zeros", "range", "numpy.sort", "numpy.zeros_like", "enumerate", "numpy.zeros_like.mean", "[].toarray().max", "len", "model.utils.cython_bbox.bbox_overlaps", "numpy.zeros", "range", "numpy.hstack", "numpy.arange", "numpy.where", "numpy.where", "boxes.astype", "gt_boxes.astype", "model.utils.cython_bbox.bbox_overlaps.argmax", "model.utils.cython_bbox.bbox_overlaps.max", "model.utils.cython_bbox.bbox_overlaps.max.argmax", "model.utils.cython_bbox.bbox_overlaps.max.max", "float", "[].toarray", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_overlaps"], ["", "def", "evaluate_recall", "(", "self", ",", "candidate_boxes", "=", "None", ",", "thresholds", "=", "None", ",", "\n", "area", "=", "'all'", ",", "limit", "=", "None", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics.\n\n    Returns:\n        results: dictionary of results with keys\n            'ar': average recall\n            'recalls': vector recalls at each IoU overlap threshold\n            'thresholds': vector of IoU overlap thresholds\n            'gt_overlaps': vector of all ground-truth overlaps\n    \"\"\"", "\n", "# Record max overlap value for each gt box", "\n", "# Return vector of overlap values", "\n", "areas", "=", "{", "'all'", ":", "0", ",", "'small'", ":", "1", ",", "'medium'", ":", "2", ",", "'large'", ":", "3", ",", "\n", "'96-128'", ":", "4", ",", "'128-256'", ":", "5", ",", "'256-512'", ":", "6", ",", "'512-inf'", ":", "7", "}", "\n", "area_ranges", "=", "[", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "# all", "\n", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "# small", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "# medium", "\n", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", ",", "# large", "\n", "[", "96", "**", "2", ",", "128", "**", "2", "]", ",", "# 96-128", "\n", "[", "128", "**", "2", ",", "256", "**", "2", "]", ",", "# 128-256", "\n", "[", "256", "**", "2", ",", "512", "**", "2", "]", ",", "# 256-512", "\n", "[", "512", "**", "2", ",", "1e5", "**", "2", "]", ",", "# 512-inf", "\n", "]", "\n", "assert", "area", "in", "areas", ",", "'unknown area range: {}'", ".", "format", "(", "area", ")", "\n", "area_range", "=", "area_ranges", "[", "areas", "[", "area", "]", "]", "\n", "gt_overlaps", "=", "np", ".", "zeros", "(", "0", ")", "\n", "num_pos", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_images", ")", ":", "\n", "# Checking for max_overlaps == 1 avoids including crowd annotations", "\n", "# (...pretty hacking :/)", "\n", "      ", "max_gt_overlaps", "=", "self", ".", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", ".", "max", "(", "axis", "=", "1", ")", "\n", "gt_inds", "=", "np", ".", "where", "(", "(", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", ">", "0", ")", "&", "\n", "(", "max_gt_overlaps", "==", "1", ")", ")", "[", "0", "]", "\n", "gt_boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "\n", "gt_areas", "=", "self", ".", "roidb", "[", "i", "]", "[", "'seg_areas'", "]", "[", "gt_inds", "]", "\n", "valid_gt_inds", "=", "np", ".", "where", "(", "(", "gt_areas", ">=", "area_range", "[", "0", "]", ")", "&", "\n", "(", "gt_areas", "<=", "area_range", "[", "1", "]", ")", ")", "[", "0", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "valid_gt_inds", ",", ":", "]", "\n", "num_pos", "+=", "len", "(", "valid_gt_inds", ")", "\n", "\n", "if", "candidate_boxes", "is", "None", ":", "\n", "# If candidate_boxes is not supplied, the default is to use the", "\n", "# non-ground-truth boxes from this roidb", "\n", "        ", "non_gt_inds", "=", "np", ".", "where", "(", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "0", ")", "[", "0", "]", "\n", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", "[", "non_gt_inds", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "boxes", "=", "candidate_boxes", "[", "i", "]", "\n", "", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "continue", "\n", "", "if", "limit", "is", "not", "None", "and", "boxes", ".", "shape", "[", "0", "]", ">", "limit", ":", "\n", "        ", "boxes", "=", "boxes", "[", ":", "limit", ",", ":", "]", "\n", "\n", "", "overlaps", "=", "bbox_overlaps", "(", "boxes", ".", "astype", "(", "np", ".", "float", ")", ",", "\n", "gt_boxes", ".", "astype", "(", "np", ".", "float", ")", ")", "\n", "\n", "_gt_overlaps", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "j", "in", "range", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "# find which proposal box maximally covers each gt box", "\n", "        ", "argmax_overlaps", "=", "overlaps", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "# and get the iou amount of coverage for each gt box", "\n", "max_overlaps", "=", "overlaps", ".", "max", "(", "axis", "=", "0", ")", "\n", "# find which gt box is 'best' covered (i.e. 'best' = most iou)", "\n", "gt_ind", "=", "max_overlaps", ".", "argmax", "(", ")", "\n", "gt_ovr", "=", "max_overlaps", ".", "max", "(", ")", "\n", "assert", "(", "gt_ovr", ">=", "0", ")", "\n", "# find the proposal box that covers the best covered gt box", "\n", "box_ind", "=", "argmax_overlaps", "[", "gt_ind", "]", "\n", "# record the iou coverage of this gt box", "\n", "_gt_overlaps", "[", "j", "]", "=", "overlaps", "[", "box_ind", ",", "gt_ind", "]", "\n", "assert", "(", "_gt_overlaps", "[", "j", "]", "==", "gt_ovr", ")", "\n", "# mark the proposal box and the gt box as used", "\n", "overlaps", "[", "box_ind", ",", ":", "]", "=", "-", "1", "\n", "overlaps", "[", ":", ",", "gt_ind", "]", "=", "-", "1", "\n", "# append recorded iou coverage level", "\n", "", "gt_overlaps", "=", "np", ".", "hstack", "(", "(", "gt_overlaps", ",", "_gt_overlaps", ")", ")", "\n", "\n", "", "gt_overlaps", "=", "np", ".", "sort", "(", "gt_overlaps", ")", "\n", "if", "thresholds", "is", "None", ":", "\n", "      ", "step", "=", "0.05", "\n", "thresholds", "=", "np", ".", "arange", "(", "0.5", ",", "0.95", "+", "1e-5", ",", "step", ")", "\n", "", "recalls", "=", "np", ".", "zeros_like", "(", "thresholds", ")", "\n", "# compute recall for each iou threshold", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "      ", "recalls", "[", "i", "]", "=", "(", "gt_overlaps", ">=", "t", ")", ".", "sum", "(", ")", "/", "float", "(", "num_pos", ")", "\n", "# ar = 2 * np.trapz(recalls, thresholds)", "\n", "", "ar", "=", "recalls", ".", "mean", "(", ")", "\n", "return", "{", "'ar'", ":", "ar", ",", "'recalls'", ":", "recalls", ",", "'thresholds'", ":", "thresholds", ",", "\n", "'gt_overlaps'", ":", "gt_overlaps", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.create_roidb_from_box_list": [[224, 252], ["range", "len", "numpy.zeros", "scipy.sparse.csr_matrix", "roidb.append", "model.utils.cython_bbox.bbox_overlaps", "model.utils.cython_bbox.bbox_overlaps.argmax", "model.utils.cython_bbox.bbox_overlaps.max", "boxes.astype", "gt_boxes.astype", "numpy.where", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_overlaps"], ["", "def", "create_roidb_from_box_list", "(", "self", ",", "box_list", ",", "gt_roidb", ")", ":", "\n", "    ", "assert", "len", "(", "box_list", ")", "==", "self", ".", "num_images", ",", "'Number of boxes must match number of ground-truth images'", "\n", "roidb", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_images", ")", ":", "\n", "      ", "boxes", "=", "box_list", "[", "i", "]", "\n", "num_boxes", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "gt_roidb", "is", "not", "None", "and", "gt_roidb", "[", "i", "]", "[", "'boxes'", "]", ".", "size", ">", "0", ":", "\n", "        ", "gt_boxes", "=", "gt_roidb", "[", "i", "]", "[", "'boxes'", "]", "\n", "gt_classes", "=", "gt_roidb", "[", "i", "]", "[", "'gt_classes'", "]", "\n", "gt_overlaps", "=", "bbox_overlaps", "(", "boxes", ".", "astype", "(", "np", ".", "float", ")", ",", "\n", "gt_boxes", ".", "astype", "(", "np", ".", "float", ")", ")", "\n", "argmaxes", "=", "gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "maxes", "=", "gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "I", "=", "np", ".", "where", "(", "maxes", ">", "0", ")", "[", "0", "]", "\n", "overlaps", "[", "I", ",", "gt_classes", "[", "argmaxes", "[", "I", "]", "]", "]", "=", "maxes", "[", "I", "]", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "roidb", ".", "append", "(", "{", "\n", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "np", ".", "zeros", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "np", ".", "zeros", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "}", ")", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.merge_roidbs": [[253, 265], ["range", "len", "len", "len", "numpy.vstack", "numpy.hstack", "scipy.sparse.vstack", "numpy.hstack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "merge_roidbs", "(", "a", ",", "b", ")", ":", "\n", "    ", "assert", "len", "(", "a", ")", "==", "len", "(", "b", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "      ", "a", "[", "i", "]", "[", "'boxes'", "]", "=", "np", ".", "vstack", "(", "(", "a", "[", "i", "]", "[", "'boxes'", "]", ",", "b", "[", "i", "]", "[", "'boxes'", "]", ")", ")", "\n", "a", "[", "i", "]", "[", "'gt_classes'", "]", "=", "np", ".", "hstack", "(", "(", "a", "[", "i", "]", "[", "'gt_classes'", "]", ",", "\n", "b", "[", "i", "]", "[", "'gt_classes'", "]", ")", ")", "\n", "a", "[", "i", "]", "[", "'gt_overlaps'", "]", "=", "scipy", ".", "sparse", ".", "vstack", "(", "[", "a", "[", "i", "]", "[", "'gt_overlaps'", "]", ",", "\n", "b", "[", "i", "]", "[", "'gt_overlaps'", "]", "]", ")", "\n", "a", "[", "i", "]", "[", "'seg_areas'", "]", "=", "np", ".", "hstack", "(", "(", "a", "[", "i", "]", "[", "'seg_areas'", "]", ",", "\n", "b", "[", "i", "]", "[", "'seg_areas'", "]", ")", ")", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.competition_mode": [[266, 269], ["None"], "methods", ["None"], ["", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "    ", "\"\"\"Turn competition mode on or off.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imagenet.imagenet.__init__": [[27, 74], ["datasets.imdb.imdb.__init__", "datasets.imdb.imdb.__init__", "scipy.loadmat", "scipy.loadmat", "scipy.loadmat", "scipy.loadmat", "xrange", "xrange", "dict", "dict", "dict", "dict", "range", "imagenet.imagenet._load_image_set_index", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join", "zip", "zip", "zip", "zip", "xrange", "xrange", "xrange", "xrange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_image_set_index"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "devkit_path", ",", "data_path", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "image_set", ")", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "devkit_path", "\n", "self", ".", "_data_path", "=", "data_path", "\n", "synsets_image", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'data'", ",", "'meta_det.mat'", ")", ")", "\n", "synsets_video", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'data'", ",", "'meta_vid.mat'", ")", ")", "\n", "self", ".", "_classes_image", "=", "(", "'__background__'", ",", ")", "\n", "self", ".", "_wnid_image", "=", "(", "0", ",", ")", "\n", "\n", "self", ".", "_classes", "=", "(", "'__background__'", ",", ")", "\n", "self", ".", "_wnid", "=", "(", "0", ",", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "200", ")", ":", "\n", "            ", "self", ".", "_classes_image", "=", "self", ".", "_classes_image", "+", "(", "synsets_image", "[", "'synsets'", "]", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", ",", ")", "\n", "self", ".", "_wnid_image", "=", "self", ".", "_wnid_image", "+", "(", "synsets_image", "[", "'synsets'", "]", "[", "0", "]", "[", "i", "]", "[", "1", "]", "[", "0", "]", ",", ")", "\n", "\n", "", "for", "i", "in", "xrange", "(", "30", ")", ":", "\n", "            ", "self", ".", "_classes", "=", "self", ".", "_classes", "+", "(", "synsets_video", "[", "'synsets'", "]", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", ",", ")", "\n", "self", ".", "_wnid", "=", "self", ".", "_wnid", "+", "(", "synsets_video", "[", "'synsets'", "]", "[", "0", "]", "[", "i", "]", "[", "1", "]", "[", "0", "]", ",", ")", "\n", "\n", "", "self", ".", "_wnid_to_ind_image", "=", "dict", "(", "zip", "(", "self", ".", "_wnid_image", ",", "xrange", "(", "201", ")", ")", ")", "\n", "self", ".", "_class_to_ind_image", "=", "dict", "(", "zip", "(", "self", ".", "_classes_image", ",", "xrange", "(", "201", ")", ")", ")", "\n", "\n", "self", ".", "_wnid_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "_wnid", ",", "xrange", "(", "31", ")", ")", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "_classes", ",", "xrange", "(", "31", ")", ")", ")", "\n", "\n", "#check for valid intersection between video and image classes", "\n", "self", ".", "_valid_image_flag", "=", "[", "0", "]", "*", "201", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "201", ")", ":", "\n", "            ", "if", "self", ".", "_wnid_image", "[", "i", "]", "in", "self", ".", "_wnid_to_ind", ":", "\n", "                ", "self", ".", "_valid_image_flag", "[", "i", "]", "=", "1", "\n", "\n", "", "", "self", ".", "_image_ext", "=", "[", "'.JPEG'", "]", "\n", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "\n", "# Specific config options", "\n", "self", ".", "config", "=", "{", "'cleanup'", ":", "True", ",", "\n", "'use_salt'", ":", "True", ",", "\n", "'top_k'", ":", "2000", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_devkit_path", ")", ",", "'Devkit path does not exist: {}'", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "self", ".", "_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imagenet.imagenet.image_path_at": [[75, 80], ["imagenet.imagenet.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imagenet.imagenet.image_path_from_index": [[81, 88], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'Data'", ",", "self", ".", "_image_set", ",", "index", "+", "self", ".", "_image_ext", "[", "0", "]", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "'path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imagenet.imagenet._load_image_set_index": [[89, 150], ["os.path.join", "os.path.exists", "range", "range", "os.path.join", "open", "open.close", "os.path.join", "open", "open.read().split", "open.close", "print", "os.path.join", "len", "numpy.random.permutation", "open.write", "open", "open", "image_index.append", "os.path.join", "len", "numpy.random.permutation", "x.strip", "open.read", "image_index.append", "x.strip", "line.split.split.split", "os.popen().read().split", "open", "image_index.append", "open.readlines", "str", "open.readlines", "tmp_list.append", "x.strip", "os.popen().read", "str", "open.readlines", "os.popen"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._data_path + /ImageSets/val.txt", "\n", "\n", "if", "self", ".", "_image_set", "==", "'train'", ":", "\n", "            ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'trainr.txt'", ")", "\n", "image_index", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ":", "\n", "                ", "f", "=", "open", "(", "image_set_file", ",", "'r'", ")", "\n", "data", "=", "f", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "for", "lines", "in", "data", ":", "\n", "                    ", "if", "lines", "!=", "''", ":", "\n", "                        ", "image_index", ".", "append", "(", "lines", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "return", "image_index", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "200", ")", ":", "\n", "                ", "print", "(", "i", ")", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'DET'", ",", "'train_'", "+", "str", "(", "i", ")", "+", "'.txt'", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "                    ", "tmp_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "vtmp_index", "=", "[", "]", "\n", "for", "line", "in", "tmp_index", ":", "\n", "                        ", "line", "=", "line", ".", "split", "(", "' '", ")", "\n", "image_list", "=", "os", ".", "popen", "(", "'ls '", "+", "self", ".", "_data_path", "+", "'/Data/DET/train/'", "+", "line", "[", "0", "]", "+", "'/*.JPEG'", ")", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "tmp_list", "=", "[", "]", "\n", "for", "imgs", "in", "image_list", ":", "\n", "                            ", "tmp_list", ".", "append", "(", "imgs", "[", ":", "-", "5", "]", ")", "\n", "", "vtmp_index", "=", "vtmp_index", "+", "tmp_list", "\n", "\n", "", "", "num_lines", "=", "len", "(", "vtmp_index", ")", "\n", "ids", "=", "np", ".", "random", ".", "permutation", "(", "num_lines", ")", "\n", "count", "=", "0", "\n", "while", "count", "<", "2000", ":", "\n", "                    ", "image_index", ".", "append", "(", "vtmp_index", "[", "ids", "[", "count", "%", "num_lines", "]", "]", ")", "\n", "count", "=", "count", "+", "1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "201", ")", ":", "\n", "                ", "if", "self", ".", "_valid_image_flag", "[", "i", "]", "==", "1", ":", "\n", "                    ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'train_pos_'", "+", "str", "(", "i", ")", "+", "'.txt'", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "                        ", "tmp_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "num_lines", "=", "len", "(", "tmp_index", ")", "\n", "ids", "=", "np", ".", "random", ".", "permutation", "(", "num_lines", ")", "\n", "count", "=", "0", "\n", "while", "count", "<", "2000", ":", "\n", "                        ", "image_index", ".", "append", "(", "tmp_index", "[", "ids", "[", "count", "%", "num_lines", "]", "]", ")", "\n", "count", "=", "count", "+", "1", "\n", "", "", "", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'trainr.txt'", ")", "\n", "f", "=", "open", "(", "image_set_file", ",", "'w'", ")", "\n", "for", "lines", "in", "image_index", ":", "\n", "                ", "f", ".", "write", "(", "lines", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'val.txt'", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "                ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imagenet.imagenet.gt_roidb": [[151, 170], ["os.path.join", "os.path.exists", "print", "print", "imagenet.imagenet._load_imagenet_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imagenet.imagenet._load_imagenet_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_imagenet_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imagenet.imagenet._load_imagenet_annotation": [[172, 210], ["os.path.join", "xml.parseString.getElementsByTagName", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "open", "xml.parseString", "float", "float", "float", "float", "f.read", "imagenet.imagenet._load_imagenet_annotation.get_data_from_tag"], "methods", ["None"], ["", "def", "_load_imagenet_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from txt files of imagenet.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'Annotations'", ",", "self", ".", "_image_set", ",", "index", "+", "'.xml'", ")", "\n", "\n", "# print 'Loading: {}'.format(filename)", "\n", "def", "get_data_from_tag", "(", "node", ",", "tag", ")", ":", "\n", "            ", "return", "node", ".", "getElementsByTagName", "(", "tag", ")", "[", "0", "]", ".", "childNodes", "[", "0", "]", ".", "data", "\n", "\n", "", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "data", "=", "minidom", ".", "parseString", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "objs", "=", "data", ".", "getElementsByTagName", "(", "'object'", ")", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "x1", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "'xmin'", ")", ")", "\n", "y1", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "'ymin'", ")", ")", "\n", "x2", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "'xmax'", ")", ")", "\n", "y2", "=", "float", "(", "get_data_from_tag", "(", "obj", ",", "'ymax'", ")", ")", "\n", "cls", "=", "self", ".", "_wnid_to_ind", "[", "\n", "str", "(", "get_data_from_tag", "(", "obj", ",", "\"name\"", ")", ")", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.factory.get_imdb": [[76, 82], ["KeyError"], "function", ["None"], ["", "", "def", "get_imdb", "(", "name", ")", ":", "\n", "  ", "\"\"\"Get an imdb (image database) by name.\"\"\"", "\n", "if", "name", "not", "in", "__sets", ":", "\n", "    ", "raise", "KeyError", "(", "'Unknown dataset: {}'", ".", "format", "(", "name", ")", ")", "\n", "# print(__sets[name]().roidb)", "\n", "", "return", "__sets", "[", "name", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.factory.list_imdbs": [[84, 87], ["list", "__sets.keys"], "function", ["None"], ["", "def", "list_imdbs", "(", ")", ":", "\n", "  ", "\"\"\"List all registered imdbs.\"\"\"", "\n", "return", "list", "(", "__sets", ".", "keys", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.__init__": [[44, 86], ["imdb.imdb.imdb.__init__", "os.path.join", "dict", "uav.uav._load_image_set_index", "str", "os.path.exists", "os.path.exists", "uav.uav._get_default_path", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_image_set_index", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_default_path"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "'uav_'", "+", "year", "+", "'_'", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "self", ".", "_get_default_path", "(", ")", "if", "devkit_path", "is", "None", "else", "devkit_path", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'UAV'", "+", "self", ".", "_year", ")", "\n", "self", ".", "_classes", "=", "(", "'__background__'", ",", "'car'", ")", "\n", "self", ".", "_weathers", "=", "(", "'daylight'", ",", "'night'", ")", "\n", "self", ".", "_altitudes", "=", "(", "'low-alt'", ",", "'medium-alt'", ",", "'high-alt'", ")", "\n", "self", ".", "_angles", "=", "(", "'side-view'", ",", "'front-view'", ",", "'bird-view'", ")", "\n", "# self._angles = ('front-side-view', 'front-view', 'side-view', 'bird-view')", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "self", ".", "_weather_to_ind", "=", "{", "'daylight'", ":", "0", ",", "'night'", ":", "1", "}", "\n", "self", ".", "_altitude_to_ind", "=", "{", "'low-alt'", ":", "0", ",", "'medium-alt'", ":", "1", ",", "'high-alt'", ":", "2", "}", "\n", "# self._angle_to_ind = {'front-view': 0, 'side-view': 1, 'bird-view': 2}", "\n", "#self._angle_to_ind = {'front-side-view': 0, 'front-view': 0, 'side-view': 0, 'bird-view': 1}", "\n", "#self._angle_to_ind = {'front-side-view':0, 'front-view':1, 'side-view':2, 'bird-view':3}", "\n", "self", ".", "_angle_to_ind", "=", "{", "'front-side-view'", ":", "0", ",", "'front-view'", ":", "1", ",", "'side-view'", ":", "0", ",", "'bird-view'", ":", "2", "}", "\n", "self", ".", "_image_ext", "=", "'.jpg'", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "selective_search_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "'comp4'", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "'cleanup'", ":", "True", ",", "\n", "'use_salt'", ":", "True", ",", "\n", "'use_diff'", ":", "False", ",", "\n", "'matlab_eval'", ":", "False", ",", "\n", "'rpn_file'", ":", "None", ",", "\n", "'min_size'", ":", "4", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_devkit_path", ")", ",", "'VOCdevkit path does not exist: {}'", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "self", ".", "_data_path", ")", "\n", "self", ".", "_gamma_altitude", "=", "None", "\n", "self", ".", "_gamma_angle", "=", "None", "\n", "self", ".", "_gamma_weather", "=", "None", "\n", "self", ".", "_epoch", "=", "None", "\n", "self", ".", "_ckpt", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.set_gamma_altitude": [[87, 89], ["None"], "methods", ["None"], ["", "def", "set_gamma_altitude", "(", "self", ",", "gamma", ")", ":", "\n", "        ", "self", ".", "_gamma_altitude", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.set_gamma_angle": [[90, 92], ["None"], "methods", ["None"], ["", "def", "set_gamma_angle", "(", "self", ",", "gamma", ")", ":", "\n", "        ", "self", ".", "_gamma_angle", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.set_gamma_weather": [[93, 95], ["None"], "methods", ["None"], ["", "def", "set_gamma_weather", "(", "self", ",", "gamma", ")", ":", "\n", "        ", "self", ".", "_gamma_weather", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.set_epoch": [[96, 98], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "_epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.set_ckpt": [[99, 101], ["None"], "methods", ["None"], ["", "def", "set_ckpt", "(", "self", ",", "ckpt", ")", ":", "\n", "        ", "self", ".", "_ckpt", "=", "ckpt", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.image_path_at": [[102, 107], ["uav.uav.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.image_id_at": [[108, 113], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "_image_index", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.image_path_from_index": [[114, 123], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'JPEGImages'", ",", "\n", "index", "+", "self", ".", "_image_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._load_image_set_index": [[124, 137], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'Layout'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_set_file", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._get_default_path": [[138, 143], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the default path where PASCAL VOC is expected to be installed.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "'data'", ",", "'VOCdevkit2007'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.gt_roidb": [[144, 165], ["os.path.join", "os.path.exists", "print", "print", "uav.uav._load_pascal_annotation", "open", "cPickle.dump", "open", "cPickle.load"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "cPickle", ".", "load", "(", "fid", ",", "encoding", "=", "\"latin1\"", ")", "\n", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "            ", "cPickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "-", "1", ")", "\n", "#cPickle.dump(gt_roidb, fid)", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.selective_search_roidb": [[166, 193], ["os.path.join", "os.path.exists", "print", "print", "uav.uav.gt_roidb", "uav.uav._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "uav.uav._load_selective_search_roidb", "open", "cPickle.dump", "open", "cPickle.load"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.gt_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_selective_search_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_selective_search_roidb"], ["", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "\n", "self", ".", "name", "+", "'_selective_search_roidb.pkl'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "cPickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "'{} ss roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "self", ".", "_image_set", "!=", "'test'", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "            ", "cPickle", ".", "dump", "(", "roidb", ",", "fid", ",", "cPickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote ss roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.rpn_roidb": [[194, 203], ["uav.uav.gt_roidb", "uav.uav._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "uav.uav._load_rpn_roidb"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.gt_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_rpn_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_image_set", "!=", "'test'", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._load_rpn_roidb": [[204, 212], ["print", "os.path.exists", "uav.uav.create_roidb_from_box_list", "open", "cPickle.load"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "'rpn_file'", "]", "\n", "print", "(", "'loading {}'", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "'rpn data not found at: {}'", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "cPickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._load_selective_search_roidb": [[213, 231], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "uav.uav.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.ds_utils.filter_small_boxes"], ["", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\n", "'selective_search_data'", ",", "\n", "self", ".", "name", "+", "'.mat'", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "'Selective search data not found at: {}'", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "'boxes'", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "'min_size'", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._load_pascal_annotation": [[232, 287], ["os.path.join", "xml.parse", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "print", "xml.parse.find().text.lower().strip", "xml.parse.find().text.lower().strip", "len", "len", "print", "float", "float", "float", "float", "xml.parse.find().text.lower().strip", "obj.find().text.lower().strip", "xml.parse.find().text.lower", "xml.parse.find().text.lower", "int", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "xml.parse.find().text.lower", "len", "len", "obj.find().text.lower", "obj.find", "xml.parse.find", "xml.parse.find", "xml.parse.find", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'Annotations'", ",", "index", "+", "'.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "try", ":", "\n", "            ", "weather", "=", "self", ".", "_weather_to_ind", "[", "tree", ".", "find", "(", "'weather'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "", "except", ":", "\n", "            ", "print", "(", "index", ")", "\n", "", "altitude", "=", "self", ".", "_altitude_to_ind", "[", "tree", ".", "find", "(", "'altitude'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "angle", "=", "self", ".", "_angle_to_ind", "[", "tree", ".", "find", "(", "'angle'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "\n", "if", "not", "self", ".", "config", "[", "'use_diff'", "]", ":", "\n", "# Exclude the samples labeled as difficult", "\n", "            ", "non_diff_objs", "=", "[", "\n", "obj", "for", "obj", "in", "objs", "if", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "==", "0", "]", "\n", "if", "len", "(", "non_diff_objs", ")", "!=", "len", "(", "objs", ")", ":", "\n", "                ", "print", "(", "'Removed {} difficult objects'", ".", "format", "(", "\n", "len", "(", "objs", ")", "-", "len", "(", "non_diff_objs", ")", ")", ")", "\n", "", "objs", "=", "non_diff_objs", "\n", "", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "-", "1", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "'boxes'", ":", "boxes", ",", "\n", "'weather'", ":", "weather", ",", "\n", "'altitude'", ":", "altitude", ",", "\n", "'angle'", ":", "angle", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._get_comp_id": [[288, 292], ["None"], "methods", ["None"], ["", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "self", ".", "_comp_id", "+", "'_'", "+", "self", ".", "_salt", "if", "self", ".", "config", "[", "'use_salt'", "]", "\n", "else", "self", ".", "_comp_id", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._get_voc_results_file_template": [[293, 297], ["os.path.join", "uav.uav._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ",", "path", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "'_det_'", "+", "self", ".", "_image_set", "+", "'_{:s}.txt'", "\n", "return", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._write_voc_results_file": [[298, 315], ["enumerate", "print", "uav.uav._get_voc_results_file_template().format", "open", "enumerate", "uav.uav._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "path", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "'__background__'", ":", "\n", "                ", "continue", "\n", "", "print", "(", "'Writing {} VOC results file'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", "path", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "index", ",", "dets", "[", "k", ",", "4", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "dets", "[", "k", ",", "3", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._write_voc_results_file_attributes": [[316, 341], ["enumerate", "print", "uav.uav._get_voc_results_file_template().format", "open", "enumerate", "uav.uav._get_voc_results_file_template", "xrange", "f.write", "int", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "", "", "", "", "def", "_write_voc_results_file_attributes", "(", "self", ",", "path", ",", "all_boxes", ",", "attr_name", ")", ":", "\n", "        ", "if", "attr_name", "==", "'weather'", ":", "\n", "            ", "attr_ind", "=", "5", "\n", "attributes", "=", "self", ".", "_weathers", "\n", "", "elif", "attr_name", "==", "'altitude'", ":", "\n", "            ", "attr_ind", "=", "6", "\n", "attributes", "=", "self", ".", "_altitudes", "\n", "", "else", ":", "\n", "            ", "attr_ind", "=", "7", "\n", "attributes", "=", "self", ".", "_angles", "\n", "\n", "", "for", "ind", ",", "attr", "in", "enumerate", "(", "attributes", ")", ":", "\n", "            ", "print", "(", "'Writing {} VOC results file'", ".", "format", "(", "attr", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", "path", ")", ".", "format", "(", "attr", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "1", "]", "[", "im_ind", "]", "\n", "#print('{} = {}'.format(int(np.sum(dets[:, attr_ind])), ind * dets.shape[0]))", "\n", "if", "dets", "==", "[", "]", "or", "int", "(", "np", ".", "sum", "(", "dets", "[", ":", ",", "attr_ind", "]", ")", ")", "!=", "ind", "*", "dets", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "continue", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "index", ",", "dets", "[", "k", ",", "4", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "dets", "[", "k", ",", "3", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._do_python_eval": [[342, 377], ["os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.mkdir", "open", "eval_classes.append", "eval_classes.append", "eval_classes.append", "os.path.join", "enumerate", "uav.uav._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "f.write", "f.write", "uav.uav._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "path", ",", "output_dir", "=", "'output'", ",", "ovthresh", "=", "0.5", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'UAV'", "+", "self", ".", "_year", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'UAV'", "+", "self", ".", "_year", ",", "\n", "'ImageSets'", ",", "\n", "'Layout'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "filename", "=", "'_det_'", "+", "self", ".", "_image_set", "+", "'_ap.txt'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", ",", "'wt'", ")", "as", "f", ":", "\n", "            ", "eval_classes", "=", "[", "self", ".", "_classes", "]", "\n", "# if self._gamma_altitude > 1e-10:", "\n", "eval_classes", ".", "append", "(", "self", ".", "_altitudes", ")", "\n", "# if self._gamma_angle > 1e-10:", "\n", "eval_classes", ".", "append", "(", "self", ".", "_angles", ")", "\n", "# if self._gamma_weather > 1e-10:", "\n", "eval_classes", ".", "append", "(", "self", ".", "_weathers", ")", "\n", "\n", "for", "classes", "in", "eval_classes", ":", "\n", "                ", "for", "i", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "                    ", "if", "cls", "==", "'__background__'", ":", "\n", "                        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", "path", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap_use_07_metric", ",", "ap_no_use_07_metric", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "ovthresh", ")", "\n", "f", ".", "write", "(", "'AP (07_metric) for {} = {:.4f}\\n'", ".", "format", "(", "cls", ",", "ap_use_07_metric", ")", ")", "\n", "f", ".", "write", "(", "'AP for {} = {:.4f}\\n'", ".", "format", "(", "cls", ",", "ap_no_use_07_metric", ")", ")", "\n", "# print('~~~~~~~~')", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._do_python_eval_baseline": [[391, 419], ["os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.mkdir", "open", "os.path.join", "enumerate", "uav.uav._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "f.write", "f.write", "uav.uav._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "", "", "", "def", "_do_python_eval_baseline", "(", "self", ",", "path", ",", "output_dir", "=", "'output'", ",", "ovthresh", "=", "0.5", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'UAV'", "+", "self", ".", "_year", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'UAV'", "+", "self", ".", "_year", ",", "\n", "'ImageSets'", ",", "\n", "'Layout'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "filename", "=", "'_det_'", "+", "self", ".", "_image_set", "+", "'_ap.txt'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", ",", "'wt'", ")", "as", "f", ":", "\n", "            ", "eval_classes", "=", "[", "self", ".", "_classes", ",", "self", ".", "_altitudes", ",", "self", ".", "_angles", ",", "self", ".", "_weathers", "]", "\n", "for", "classes", "in", "eval_classes", ":", "\n", "                ", "for", "i", ",", "cls", "in", "enumerate", "(", "classes", ")", ":", "\n", "                    ", "if", "cls", "==", "'__background__'", ":", "\n", "                        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", "path", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap_use_07_metric", ",", "ap_no_use_07_metric", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "ovthresh", ")", "\n", "f", ".", "write", "(", "'AP (07_metric) for {} = {:.4f}\\n'", ".", "format", "(", "cls", ",", "ap_use_07_metric", ")", ")", "\n", "f", ".", "write", "(", "'AP for {} = {:.4f}\\n'", ".", "format", "(", "cls", ",", "ap_no_use_07_metric", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.evaluate_detections": [[420, 435], ["uav.uav._write_voc_results_file", "uav.uav._write_voc_results_file_attributes", "uav.uav._write_voc_results_file_attributes", "uav.uav._write_voc_results_file_attributes", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "uav.uav._do_python_eval", "uav.uav._do_python_eval_baseline", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._write_voc_results_file_attributes", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._write_voc_results_file_attributes", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._write_voc_results_file_attributes", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._do_python_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav._do_python_eval_baseline"], ["", "", "", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ",", "nuisance_type", ",", "baseline_method", "=", "False", ",", "ovthresh", "=", "0.5", ",", "memo", "=", "None", ")", ":", "\n", "        ", "if", "memo", "and", "memo", "!=", "'faster_rcnn_final.pth'", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "'data/results'", ",", "'UAV'", "+", "self", ".", "_year", ",", "nuisance_type", ",", "'altitude={}_angle={}_weather={}({})'", ".", "format", "(", "str", "(", "self", ".", "_gamma_altitude", ")", ",", "str", "(", "self", ".", "_gamma_angle", ")", ",", "str", "(", "self", ".", "_gamma_weather", ")", ",", "str", "(", "memo", ")", ")", ",", "str", "(", "self", ".", "_epoch", ")", ",", "str", "(", "self", ".", "_ckpt", ")", ")", "\n", "", "else", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "'data/results'", ",", "'UAV'", "+", "self", ".", "_year", ",", "nuisance_type", ",", "'altitude={}_angle={}_weather={}'", ".", "format", "(", "str", "(", "self", ".", "_gamma_altitude", ")", ",", "str", "(", "self", ".", "_gamma_angle", ")", ",", "str", "(", "self", ".", "_gamma_weather", ")", ")", ",", "str", "(", "self", ".", "_epoch", ")", ",", "str", "(", "self", ".", "_ckpt", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "self", ".", "_write_voc_results_file", "(", "path", ",", "all_boxes", ")", "\n", "self", ".", "_write_voc_results_file_attributes", "(", "path", ",", "all_boxes", ",", "attr_name", "=", "'weather'", ")", "\n", "self", ".", "_write_voc_results_file_attributes", "(", "path", ",", "all_boxes", ",", "attr_name", "=", "'altitude'", ")", "\n", "self", ".", "_write_voc_results_file_attributes", "(", "path", ",", "all_boxes", ",", "attr_name", "=", "'angle'", ")", "\n", "if", "not", "baseline_method", ":", "\n", "            ", "self", ".", "_do_python_eval", "(", "path", ",", "output_dir", ",", "ovthresh", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_do_python_eval_baseline", "(", "path", ",", "output_dir", ",", "ovthresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.uav.uav.competition_mode": [[436, 443], ["None"], "methods", ["None"], ["", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "'use_salt'", "]", "=", "False", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "'use_salt'", "]", "=", "True", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "True", "", "", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.__init__": [[41, 75], ["imdb.imdb.imdb.__init__", "os.path.join", "dict", "pascal_voc.pascal_voc._load_image_set_index", "str", "os.path.exists", "os.path.exists", "pascal_voc.pascal_voc._get_default_path", "zip", "uuid.uuid4", "xrange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_image_set_index", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_default_path"], ["    ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "devkit_path", "=", "None", ")", ":", "\n", "        ", "imdb", ".", "__init__", "(", "self", ",", "'voc_'", "+", "year", "+", "'_'", "+", "image_set", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "self", ".", "_get_default_path", "(", ")", "if", "devkit_path", "is", "None", "else", "devkit_path", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'VOC'", "+", "self", ".", "_year", ")", "\n", "self", ".", "_classes", "=", "(", "'__background__'", ",", "# always index 0", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "\n", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "\n", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "zip", "(", "self", ".", "classes", ",", "xrange", "(", "self", ".", "num_classes", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "'.jpg'", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "# self._roidb_handler = self.selective_search_roidb", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "'comp4'", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "'cleanup'", ":", "True", ",", "\n", "'use_salt'", ":", "True", ",", "\n", "'use_diff'", ":", "False", ",", "\n", "'matlab_eval'", ":", "False", ",", "\n", "'rpn_file'", ":", "None", ",", "\n", "'min_size'", ":", "2", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_devkit_path", ")", ",", "'VOCdevkit path does not exist: {}'", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "self", ".", "_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_at": [[76, 81], ["pascal_voc.pascal_voc.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_id_at": [[82, 87], ["None"], "methods", ["None"], ["", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        Return the absolute path to image i in the image sequence.\n        \"\"\"", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.image_path_from_index": [[88, 97], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Construct an image path from the image's \"index\" identifier.\n        \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'JPEGImages'", ",", "\n", "index", "+", "self", ".", "_image_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_image_set_index": [[98, 111], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the indexes listed in this dataset's image set file.\n        \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_set_file", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "            ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_default_path": [[112, 117], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the default path where PASCAL VOC is expected to be installed.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'VOCdevkit'", "+", "self", ".", "_year", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.gt_roidb": [[118, 138], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc.pascal_voc._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of ground-truth regions of interest.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.selective_search_roidb": [[139, 166], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc.pascal_voc.gt_roidb", "pascal_voc.pascal_voc._load_selective_search_roidb", "imdb.imdb.imdb.merge_roidbs", "pascal_voc.pascal_voc._load_selective_search_roidb", "open", "pickle.dump", "open", "pickle.load", "int"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.gt_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_selective_search_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_selective_search_roidb"], ["", "def", "selective_search_roidb", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the database of selective search regions of interest.\n        Ground-truth ROIs are also included.\n\n        This function loads/saves from/to a cache file to speed up future calls.\n        \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "\n", "self", ".", "name", "+", "'_selective_search_roidb.pkl'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "                ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "'{} ss roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "'test'", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "ss_roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "ss_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_selective_search_roidb", "(", "None", ")", "\n", "", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "            ", "pickle", ".", "dump", "(", "roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote ss roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.rpn_roidb": [[167, 176], ["pascal_voc.pascal_voc.gt_roidb", "pascal_voc.pascal_voc._load_rpn_roidb", "imdb.imdb.imdb.merge_roidbs", "pascal_voc.pascal_voc._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.gt_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_rpn_roidb", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "        ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "'test'", ":", "\n", "            ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "            ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_rpn_roidb": [[177, 185], ["print", "os.path.exists", "pascal_voc.pascal_voc.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "self", ".", "config", "[", "'rpn_file'", "]", "\n", "print", "(", "'loading {}'", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "'rpn data not found at: {}'", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_selective_search_roidb": [[186, 204], ["os.path.abspath", "os.path.exists", "[].ravel", "xrange", "pascal_voc.pascal_voc.create_roidb_from_box_list", "os.path.join", "ds_utils.unique_boxes", "ds_utils.filter_small_boxes", "box_list.append", "scipy.loadmat", "scipy.loadmat"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.imdb.imdb.create_roidb_from_box_list", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.ds_utils.unique_boxes", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.ds_utils.filter_small_boxes"], ["", "def", "_load_selective_search_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "\n", "'selective_search_data'", ",", "\n", "self", ".", "name", "+", "'.mat'", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "'Selective search data not found at: {}'", ".", "format", "(", "filename", ")", "\n", "raw_data", "=", "sio", ".", "loadmat", "(", "filename", ")", "[", "'boxes'", "]", ".", "ravel", "(", ")", "\n", "\n", "box_list", "=", "[", "]", "\n", "for", "i", "in", "xrange", "(", "raw_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "boxes", "=", "raw_data", "[", "i", "]", "[", ":", ",", "(", "1", ",", "0", ",", "3", ",", "2", ")", "]", "-", "1", "\n", "keep", "=", "ds_utils", ".", "unique_boxes", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "keep", "=", "ds_utils", ".", "filter_small_boxes", "(", "boxes", ",", "self", ".", "config", "[", "'min_size'", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", ",", ":", "]", "\n", "box_list", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._load_pascal_annotation": [[205, 257], ["os.path.join", "xml.parse", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "obj.find", "float", "float", "float", "float", "int", "obj.find().text.lower().strip", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Load image and bounding boxes info from XML file in the PASCAL VOC\n        format.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'Annotations'", ",", "index", "+", "'.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "# if not self.config['use_diff']:", "\n", "#     # Exclude the samples labeled as difficult", "\n", "#     non_diff_objs = [", "\n", "#         obj for obj in objs if int(obj.find('difficult').text) == 0]", "\n", "#     # if len(non_diff_objs) != len(objs):", "\n", "#     #     print 'Removed {} difficult objects'.format(", "\n", "#     #         len(objs) - len(non_diff_objs))", "\n", "#     objs = non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ishards", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "            ", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "-", "1", "\n", "\n", "diffc", "=", "obj", ".", "find", "(", "'difficult'", ")", "\n", "difficult", "=", "0", "if", "diffc", "==", "None", "else", "int", "(", "diffc", ".", "text", ")", "\n", "ishards", "[", "ix", "]", "=", "difficult", "\n", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_ishard'", ":", "ishards", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_comp_id": [[258, 262], ["None"], "methods", ["None"], ["", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "        ", "comp_id", "=", "(", "self", ".", "_comp_id", "+", "'_'", "+", "self", ".", "_salt", "if", "self", ".", "config", "[", "'use_salt'", "]", "\n", "else", "self", ".", "_comp_id", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template": [[263, 271], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "pascal_voc.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "        ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "'_det_'", "+", "self", ".", "_image_set", "+", "'_{:s}.txt'", "\n", "filedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'results'", ",", "'VOC'", "+", "self", ".", "_year", ",", "'Main'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "filedir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "filedir", ",", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._write_voc_results_file": [[272, 289], ["enumerate", "print", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "open", "enumerate", "pascal_voc.pascal_voc._get_voc_results_file_template", "xrange", "f.write"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "        ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "if", "cls", "==", "'__background__'", ":", "\n", "                ", "continue", "\n", "", "print", "(", "'Writing {} VOC results file'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "                ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "                    ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "xrange", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "index", ",", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "dets", "[", "k", ",", "3", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._do_python_eval": [[290, 334], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "voc_eval.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "pascal_voc.pascal_voc._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "", "", "", "", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "        ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "print", "(", "'VOC07 metric? '", "+", "(", "'Yes'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "            ", "if", "cls", "==", "'__background__'", ":", "\n", "                ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "'Results:'", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "            ", "print", "(", "'{:.3f}'", ".", "format", "(", "ap", ")", ")", "\n", "", "print", "(", "'{:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "print", "(", "'Results computed with the **unofficial** Python eval code.'", ")", "\n", "print", "(", "'Results should be very close to the official MATLAB eval code.'", ")", "\n", "print", "(", "'Recompute with `./tools/reval.py --matlab ...` for your paper.'", ")", "\n", "print", "(", "'-- Thanks, The Management'", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._do_matlab_eval": [[335, 349], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "pascal_voc.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "        ", "print", "(", "'-----------------------------------------------------'", ")", "\n", "print", "(", "'Computing results with the official MATLAB eval code.'", ")", "\n", "print", "(", "'-----------------------------------------------------'", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'lib'", ",", "'datasets'", ",", "\n", "'VOCdevkit-matlab-wrapper'", ")", "\n", "cmd", "=", "'cd {} && '", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "'{:s} -nodisplay -nodesktop '", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "'voc_eval(\\'{:s}\\',\\'{:s}\\',\\'{:s}\\',\\'{:s}\\'); quit;\"'", ".", "format", "(", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "\n", "self", ".", "_image_set", ",", "output_dir", ")", "\n", "print", "(", "'Running:\\n{}'", ".", "format", "(", "cmd", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.evaluate_detections": [[350, 361], ["pascal_voc.pascal_voc._write_voc_results_file", "pascal_voc.pascal_voc._do_python_eval", "pascal_voc.pascal_voc._do_matlab_eval", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "os.remove", "pascal_voc.pascal_voc._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._do_python_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._do_matlab_eval", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "        ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "'matlab_eval'", "]", ":", "\n", "            ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "            ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "                ", "if", "cls", "==", "'__background__'", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.datasets.pascal_voc.pascal_voc.competition_mode": [[362, 369], ["None"], "methods", ["None"], ["", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "if", "on", ":", "\n", "            ", "self", ".", "config", "[", "'use_salt'", "]", "=", "False", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", "[", "'use_salt'", "]", "=", "True", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.tools.mcg_munge.munge": [[16, 34], ["os.listdir", "os.path.splitext", "os.path.join", "os.path.join", "os.path.join", "print", "os.rename", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "munge", "(", "src_dir", ")", ":", "\n", "# stored as: ./MCG-COCO-val2014-boxes/COCO_val2014_000000193401.mat", "\n", "# want:      ./MCG/mat/COCO_val2014_0/COCO_val2014_000000141/COCO_val2014_000000141334.mat", "\n", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "src_dir", ")", "\n", "for", "fn", "in", "files", ":", "\n", "        ", "base", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "fn", ")", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "first", "=", "base", "[", ":", "14", "]", "\n", "second", "=", "base", "[", ":", "22", "]", "\n", "dst_dir", "=", "os", ".", "path", ".", "join", "(", "'MCG'", ",", "'mat'", ",", "first", ",", "second", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dst_dir", ")", "\n", "", "src", "=", "os", ".", "path", ".", "join", "(", "src_dir", ",", "fn", ")", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "dst_dir", ",", "fn", ")", "\n", "print", "(", "'MV: {} -> {}'", ".", "format", "(", "src", ",", "dst", ")", ")", "\n", "os", ".", "rename", "(", "src", ",", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.__init__": [[68, 89], ["print", "time.time", "json.load", "print", "coco.COCO.createIndex", "open", "time.time"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.createIndex"], ["", "def", "_get_ann_file", "(", "self", ")", ":", "\n", "    ", "prefix", "=", "'instances'", "if", "self", ".", "_image_set", ".", "find", "(", "'test'", ")", "==", "-", "1", "else", "'image_info'", "\n", "return", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "'annotations'", ",", "\n", "prefix", "+", "'_'", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "'.json'", ")", "\n", "\n", "", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Load image ids.\n    \"\"\"", "\n", "image_ids", "=", "self", ".", "_COCO", ".", "getImgIds", "(", ")", "\n", "return", "image_ids", "\n", "\n", "", "def", "_get_widths", "(", "self", ")", ":", "\n", "    ", "anns", "=", "self", ".", "_COCO", ".", "loadImgs", "(", "self", ".", "_image_index", ")", "\n", "widths", "=", "[", "ann", "[", "'width'", "]", "for", "ann", "in", "anns", "]", "\n", "return", "widths", "\n", "\n", "", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.createIndex": [[90, 127], ["print", "print"], "methods", ["None"], ["return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n", "", "def", "image_id_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "_image_index", "[", "i", "]", "\n", "\n", "", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "# Example image path for index=119993:", "\n", "#   images/train2014/COCO_train2014_000000119993.jpg", "\n", "file_name", "=", "(", "'COCO_'", "+", "self", ".", "_data_name", "+", "'_'", "+", "\n", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "'.jpg'", ")", "\n", "image_path", "=", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "'images'", ",", "\n", "self", ".", "_data_name", ",", "file_name", ")", "\n", "assert", "osp", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n", "", "def", "gt_roidb", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "      ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_coco_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "_image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.info": [[128, 135], ["coco.COCO.dataset[].items", "print"], "methods", ["None"], ["      ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n", "", "def", "_load_coco_annotation", "(", "self", ",", "index", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.getAnnIds": [[136, 164], ["len", "len", "len", "type", "type", "list", "len", "itertools.chain.from_iterable", "len", "len"], "methods", ["None"], ["\n", "im_ann", "=", "self", ".", "_COCO", ".", "loadImgs", "(", "index", ")", "[", "0", "]", "\n", "width", "=", "im_ann", "[", "'width'", "]", "\n", "height", "=", "im_ann", "[", "'height'", "]", "\n", "\n", "annIds", "=", "self", ".", "_COCO", ".", "getAnnIds", "(", "imgIds", "=", "index", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "_COCO", ".", "loadAnns", "(", "annIds", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "      ", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "0", "]", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "1", "]", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "2", "]", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "3", "]", "-", "1", ")", ")", ")", ")", "\n", "if", "obj", "[", "'area'", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "        ", "obj", "[", "'clean_bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "", "", "objs", "=", "valid_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Lookup table to map from COCO category ids to our internal class", "\n", "# indices", "\n", "coco_cat_id_to_class_ind", "=", "dict", "(", "[", "(", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", ",", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.getCatIds": [[165, 186], ["len", "len", "len", "type", "type", "type", "len", "len", "len"], "methods", ["None"], ["self", ".", "_class_to_ind", "[", "cls", "]", ")", "\n", "for", "cls", "in", "self", ".", "_classes", "[", "1", ":", "]", "]", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "cls", "=", "coco_cat_id_to_class_ind", "[", "obj", "[", "'category_id'", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "'clean_bbox'", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "seg_areas", "[", "ix", "]", "=", "obj", "[", "'area'", "]", "\n", "if", "obj", "[", "'iscrowd'", "]", ":", "\n", "# Set overlap to -1 for all classes for crowd objects", "\n", "# so they will be excluded during training", "\n", "        ", "overlaps", "[", "ix", ",", ":", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "        ", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "", "ds_utils", ".", "validate_boxes", "(", "boxes", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "return", "{", "'width'", ":", "width", ",", "\n", "'height'", ":", "height", ",", "\n", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.getImgIds": [[187, 207], ["list", "len", "len", "coco.COCO.imgs.keys", "set", "enumerate", "type", "type", "set", "set", "len"], "methods", ["None"], ["'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n", "", "def", "_get_widths", "(", "self", ")", ":", "\n", "    ", "return", "[", "r", "[", "'width'", "]", "for", "r", "in", "self", ".", "roidb", "]", "\n", "\n", "", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "    ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "      ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "'width'", ":", "widths", "[", "i", "]", ",", "\n", "'height'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'height'", "]", ",", "\n", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", ",", "\n", "'gt_overlaps'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadAnns": [[208, 218], ["type", "type"], "methods", ["None"], ["'flipped'", ":", "True", ",", "\n", "'seg_areas'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'seg_areas'", "]", "}", "\n", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n", "", "def", "_get_box_file", "(", "self", ",", "index", ")", ":", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "    ", "file_name", "=", "(", "'COCO_'", "+", "self", ".", "_data_name", "+", "\n", "'_'", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "'.mat'", ")", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadCats": [[219, 229], ["type", "type"], "methods", ["None"], ["return", "osp", ".", "join", "(", "file_name", "[", ":", "14", "]", ",", "file_name", "[", ":", "22", "]", ",", "file_name", ")", "\n", "\n", "", "def", "_print_detection_eval_metrics", "(", "self", ",", "coco_eval", ")", ":", "\n", "    ", "IoU_lo_thresh", "=", "0.5", "\n", "IoU_hi_thresh", "=", "0.95", "\n", "\n", "def", "_get_thr_ind", "(", "coco_eval", ",", "thr", ")", ":", "\n", "      ", "ind", "=", "np", ".", "where", "(", "(", "coco_eval", ".", "params", ".", "iouThrs", ">", "thr", "-", "1e-5", ")", "&", "\n", "(", "coco_eval", ".", "params", ".", "iouThrs", "<", "thr", "+", "1e-5", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "iou_thr", "=", "coco_eval", ".", "params", ".", "iouThrs", "[", "ind", "]", "\n", "assert", "np", ".", "isclose", "(", "iou_thr", ",", "thr", ")", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadImgs": [[230, 240], ["type", "type"], "methods", ["None"], ["return", "ind", "\n", "\n", "", "ind_lo", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_lo_thresh", ")", "\n", "ind_hi", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_hi_thresh", ")", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "# area range index 0: all area ranges", "\n", "# max dets index 2: 100 per image", "\n", "precision", "=", "coco_eval", ".", "eval", "[", "'precision'", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", ":", ",", "0", ",", "2", "]", "\n", "ap_default", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "(", "'~~~~ Mean and per-category AP @ IoU=[{:.2f},{:.2f}] '", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.showAnns": [[241, 286], ["len", "matplotlib.gca", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "numpy.random.random().tolist", "type", "mask.decode", "numpy.ones", "range", "matplotlib.gca.imshow", "print", "numpy.array().reshape", "polygons.append", "color.append", "type", "mask.frPyObjects", "numpy.dstack", "numpy.random.random", "matplotlib.patches.Polygon", "numpy.array", "numpy.random.random().tolist", "numpy.array", "len", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer.reshape"], ["'~~~~'", ")", ".", "format", "(", "IoU_lo_thresh", ",", "IoU_hi_thresh", ")", ")", "\n", "print", "(", "'{:.1f}'", ".", "format", "(", "100", "*", "ap_default", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "# minus 1 because of __background__", "\n", "", "precision", "=", "coco_eval", ".", "eval", "[", "'precision'", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", "cls_ind", "-", "1", ",", "0", ",", "2", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "'{:.1f}'", ".", "format", "(", "100", "*", "ap", ")", ")", "\n", "\n", "", "print", "(", "'~~~~ Summary metrics ~~~~'", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n", "", "def", "_do_detection_eval", "(", "self", ",", "res_file", ",", "output_dir", ")", ":", "\n", "    ", "ann_type", "=", "'bbox'", "\n", "coco_dt", "=", "self", ".", "_COCO", ".", "loadRes", "(", "res_file", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "_COCO", ",", "coco_dt", ")", "\n", "coco_eval", ".", "params", ".", "useSegm", "=", "(", "ann_type", "==", "'segm'", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "self", ".", "_print_detection_eval_metrics", "(", "coco_eval", ")", "\n", "eval_file", "=", "osp", ".", "join", "(", "output_dir", ",", "'detection_results.pkl'", ")", "\n", "with", "open", "(", "eval_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "coco_eval", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'Wrote COCO eval results to: {}'", ".", "format", "(", "eval_file", ")", ")", "\n", "\n", "", "def", "_coco_results_one_category", "(", "self", ",", "boxes", ",", "cat_id", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "      ", "dets", "=", "boxes", "[", "im_ind", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "dets", "==", "[", "]", ":", "\n", "        ", "continue", "\n", "", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "xs", "=", "dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "dets", "[", ":", ",", "2", "]", "-", "xs", "+", "1", "\n", "hs", "=", "dets", "[", ":", ",", "3", "]", "-", "ys", "+", "1", "\n", "results", ".", "extend", "(", "\n", "[", "{", "'image_id'", ":", "index", ",", "\n", "'category_id'", ":", "cat_id", ",", "\n", "'bbox'", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "'score'", ":", "scores", "[", "k", "]", "}", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "", "return", "results", "\n", "\n", "", "def", "_write_coco_results_file", "(", "self", ",", "all_boxes", ",", "res_file", ")", ":", "\n", "# [{\"image_id\": 42,", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadRes": [[287, 334], ["coco.COCO", "print", "time.time", "json.load", "print", "coco.COCO.createIndex", "open", "type", "set", "enumerate", "set", "set", "set", "set", "copy.deepcopy", "enumerate", "coco.COCO.getImgIds", "copy.deepcopy", "enumerate", "time.time", "mask.area", "mask.toBbox"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.createIndex", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.getImgIds"], ["#   \"category_id\": 18,", "\n", "#   \"bbox\": [258.15,41.29,348.26,243.78],", "\n", "#   \"score\": 0.236}, ...]", "\n", "    ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "print", "(", "'Collecting {} results ({:d}/{:d})'", ".", "format", "(", "cls", ",", "cls_ind", ",", "\n", "self", ".", "num_classes", "-", "1", ")", ")", "\n", "coco_cat_id", "=", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", "\n", "results", ".", "extend", "(", "self", ".", "_coco_results_one_category", "(", "all_boxes", "[", "cls_ind", "]", ",", "\n", "coco_cat_id", ")", ")", "\n", "", "print", "(", "'Writing results json to {}'", ".", "format", "(", "res_file", ")", ")", "\n", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "fid", ":", "\n", "      ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n", "", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "    ", "res_file", "=", "osp", ".", "join", "(", "output_dir", ",", "(", "'detections_'", "+", "\n", "self", ".", "_image_set", "+", "\n", "self", ".", "_year", "+", "\n", "'_results'", ")", ")", "\n", "if", "self", ".", "config", "[", "'use_salt'", "]", ":", "\n", "      ", "res_file", "+=", "'_{}'", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "'.json'", "\n", "self", ".", "_write_coco_results_file", "(", "all_boxes", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets", "\n", "if", "self", ".", "_image_set", ".", "find", "(", "'test'", ")", "==", "-", "1", ":", "\n", "      ", "self", ".", "_do_detection_eval", "(", "res_file", ",", "output_dir", ")", "\n", "# Optionally cleanup results json file", "\n", "", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "      ", "os", ".", "remove", "(", "res_file", ")", "\n", "\n", "", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "    ", "if", "on", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "False", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "False", "\n", "", "else", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "True", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.download": [[335, 358], ["len", "enumerate", "print", "len", "coco.COCO.imgs.values", "coco.COCO.loadImgs", "os.path.exists", "os.makedirs", "time.time", "os.path.join", "print", "os.path.exists", "urllib.urlretrieve", "time.time"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadImgs"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.__init__": [[67, 88], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "cocoeval.Params", "sorted", "sorted", "cocoGt.getImgIds", "cocoGt.getCatIds"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.getImgIds", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.getCatIds"], ["    ", "def", "__init__", "(", "self", ",", "cocoGt", "=", "None", ",", "cocoDt", "=", "None", ")", ":", "\n", "        ", "'''\n        Initialize CocoEval using coco APIs for gt and dt\n        :param cocoGt: coco object with ground truth annotations\n        :param cocoDt: coco object with detection results\n        :return: None\n        '''", "\n", "self", ".", "cocoGt", "=", "cocoGt", "# ground truth COCO API", "\n", "self", ".", "cocoDt", "=", "cocoDt", "# detections COCO API", "\n", "self", ".", "params", "=", "{", "}", "# evaluation parameters", "\n", "self", ".", "evalImgs", "=", "defaultdict", "(", "list", ")", "# per-image per-category evaluation results [KxAxI] elements", "\n", "self", ".", "eval", "=", "{", "}", "# accumulated evaluation results", "\n", "self", ".", "_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "self", ".", "params", "=", "Params", "(", ")", "# parameters", "\n", "self", ".", "_paramsEval", "=", "{", "}", "# parameters for evaluation", "\n", "self", ".", "stats", "=", "[", "]", "# result summarization", "\n", "self", ".", "ious", "=", "{", "}", "# ious between all gts and dts", "\n", "if", "not", "cocoGt", "is", "None", ":", "\n", "            ", "self", ".", "params", ".", "imgIds", "=", "sorted", "(", "cocoGt", ".", "getImgIds", "(", ")", ")", "\n", "self", ".", "params", ".", "catIds", "=", "sorted", "(", "cocoGt", ".", "getCatIds", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval._prepare": [[90, 136], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "cocoeval.COCOeval.cocoGt.loadAnns", "cocoeval.COCOeval.cocoDt.loadAnns", "cocoeval.COCOeval.cocoGt.loadAnns", "cocoeval.COCOeval.cocoDt.loadAnns", "cocoeval.COCOeval._prepare._toMask"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.coco.COCO.loadAnns"], ["", "", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "'''\n        Prepare ._gts and ._dts for evaluation based on params\n        :return: None\n        '''", "\n", "#", "\n", "def", "_toMask", "(", "objs", ",", "coco", ")", ":", "\n", "# modify segmentation by reference", "\n", "            ", "for", "obj", "in", "objs", ":", "\n", "                ", "t", "=", "coco", ".", "imgs", "[", "obj", "[", "'image_id'", "]", "]", "\n", "if", "type", "(", "obj", "[", "'segmentation'", "]", ")", "==", "list", ":", "\n", "                    ", "if", "type", "(", "obj", "[", "'segmentation'", "]", "[", "0", "]", ")", "==", "dict", ":", "\n", "                        ", "print", "(", "'debug'", ")", "\n", "", "obj", "[", "'segmentation'", "]", "=", "mask", ".", "frPyObjects", "(", "obj", "[", "'segmentation'", "]", ",", "t", "[", "'height'", "]", ",", "t", "[", "'width'", "]", ")", "\n", "if", "len", "(", "obj", "[", "'segmentation'", "]", ")", "==", "1", ":", "\n", "                        ", "obj", "[", "'segmentation'", "]", "=", "obj", "[", "'segmentation'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "# an object can have multiple polygon regions", "\n", "# merge them into one RLE mask", "\n", "                        ", "obj", "[", "'segmentation'", "]", "=", "mask", ".", "merge", "(", "obj", "[", "'segmentation'", "]", ")", "\n", "", "", "elif", "type", "(", "obj", "[", "'segmentation'", "]", ")", "==", "dict", "and", "type", "(", "obj", "[", "'segmentation'", "]", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "                    ", "obj", "[", "'segmentation'", "]", "=", "mask", ".", "frPyObjects", "(", "[", "obj", "[", "'segmentation'", "]", "]", ",", "t", "[", "'height'", "]", ",", "t", "[", "'width'", "]", ")", "[", "0", "]", "\n", "", "elif", "type", "(", "obj", "[", "'segmentation'", "]", ")", "==", "dict", "and", "type", "(", "obj", "[", "'segmentation'", "]", "[", "'counts'", "]", ")", "in", "string_types", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'segmentation format not supported.'", ")", "\n", "", "", "", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gts", "=", "self", ".", "cocoGt", ".", "loadAnns", "(", "self", ".", "cocoGt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ",", "catIds", "=", "p", ".", "catIds", ")", ")", "\n", "dts", "=", "self", ".", "cocoDt", ".", "loadAnns", "(", "self", ".", "cocoDt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ",", "catIds", "=", "p", ".", "catIds", ")", ")", "\n", "", "else", ":", "\n", "            ", "gts", "=", "self", ".", "cocoGt", ".", "loadAnns", "(", "self", ".", "cocoGt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ")", ")", "\n", "dts", "=", "self", ".", "cocoDt", ".", "loadAnns", "(", "self", ".", "cocoDt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ")", ")", "\n", "\n", "", "if", "p", ".", "useSegm", ":", "\n", "            ", "_toMask", "(", "gts", ",", "self", ".", "cocoGt", ")", "\n", "_toMask", "(", "dts", ",", "self", ".", "cocoDt", ")", "\n", "", "self", ".", "_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "for", "gt", "in", "gts", ":", "\n", "            ", "self", ".", "_gts", "[", "gt", "[", "'image_id'", "]", ",", "gt", "[", "'category_id'", "]", "]", ".", "append", "(", "gt", ")", "\n", "", "for", "dt", "in", "dts", ":", "\n", "            ", "self", ".", "_dts", "[", "dt", "[", "'image_id'", "]", ",", "dt", "[", "'category_id'", "]", "]", ".", "append", "(", "dt", ")", "\n", "", "self", ".", "evalImgs", "=", "defaultdict", "(", "list", ")", "# per-image per-category evaluation results", "\n", "self", ".", "eval", "=", "{", "}", "# accumulated evaluation results", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.evaluate": [[137, 170], ["time.time", "print", "list", "sorted", "cocoeval.COCOeval._prepare", "copy.deepcopy", "time.time", "print", "numpy.unique", "list", "cocoeval.COCOeval.computeIoU"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval._prepare", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.computeIoU"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "'''\n        Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n        :return: None\n        '''", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Running per image evaluation...      '", ")", "\n", "p", "=", "self", ".", "params", "\n", "p", ".", "imgIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "imgIds", ")", ")", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "p", ".", "catIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "catIds", ")", ")", "\n", "", "p", ".", "maxDets", "=", "sorted", "(", "p", ".", "maxDets", ")", "\n", "self", ".", "params", "=", "p", "\n", "\n", "self", ".", "_prepare", "(", ")", "\n", "# loop through images, area range, max detection number", "\n", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "else", "[", "-", "1", "]", "\n", "\n", "computeIoU", "=", "self", ".", "computeIoU", "\n", "self", ".", "ious", "=", "{", "(", "imgId", ",", "catId", ")", ":", "computeIoU", "(", "imgId", ",", "catId", ")", "for", "imgId", "in", "p", ".", "imgIds", "\n", "for", "catId", "in", "catIds", "}", "\n", "\n", "evaluateImg", "=", "self", ".", "evaluateImg", "\n", "maxDet", "=", "p", ".", "maxDets", "[", "-", "1", "]", "\n", "self", ".", "evalImgs", "=", "[", "evaluateImg", "(", "imgId", ",", "catId", ",", "areaRng", ",", "maxDet", ")", "\n", "for", "catId", "in", "catIds", "\n", "for", "areaRng", "in", "p", ".", "areaRng", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "]", "\n", "self", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'DONE (t=%0.2fs).'", "%", "(", "toc", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.computeIoU": [[171, 196], ["sorted", "mask.iou", "len", "int", "len", "len"], "methods", ["None"], ["", "def", "computeIoU", "(", "self", ",", "imgId", ",", "catId", ")", ":", "\n", "        ", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gt", "=", "self", ".", "_gts", "[", "imgId", ",", "catId", "]", "\n", "dt", "=", "self", ".", "_dts", "[", "imgId", ",", "catId", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_gts", "[", "imgId", ",", "cId", "]", "]", "\n", "dt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_dts", "[", "imgId", ",", "cId", "]", "]", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "", "dt", "=", "sorted", "(", "dt", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "'score'", "]", ")", "\n", "if", "len", "(", "dt", ")", ">", "p", ".", "maxDets", "[", "-", "1", "]", ":", "\n", "            ", "dt", "=", "dt", "[", "0", ":", "p", ".", "maxDets", "[", "-", "1", "]", "]", "\n", "\n", "", "if", "p", ".", "useSegm", ":", "\n", "            ", "g", "=", "[", "g", "[", "'segmentation'", "]", "for", "g", "in", "gt", "]", "\n", "d", "=", "[", "d", "[", "'segmentation'", "]", "for", "d", "in", "dt", "]", "\n", "", "else", ":", "\n", "            ", "g", "=", "[", "g", "[", "'bbox'", "]", "for", "g", "in", "gt", "]", "\n", "d", "=", "[", "d", "[", "'bbox'", "]", "for", "d", "in", "dt", "]", "\n", "\n", "# compute iou between each dt and gt region", "\n", "", "iscrowd", "=", "[", "int", "(", "o", "[", "'iscrowd'", "]", ")", "for", "o", "in", "gt", "]", "\n", "ious", "=", "mask", ".", "iou", "(", "d", ",", "g", ",", "iscrowd", ")", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.evaluateImg": [[197, 280], ["len", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array().reshape", "numpy.logical_or", "sorted", "int", "enumerate", "numpy.logical_and", "len", "len", "sorted", "len", "enumerate", "numpy.array", "len", "numpy.repeat", "enumerate", "min", "enumerate", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer.reshape"], ["", "def", "evaluateImg", "(", "self", ",", "imgId", ",", "catId", ",", "aRng", ",", "maxDet", ")", ":", "\n", "        ", "'''\n        perform evaluation for single category and image\n        :return: dict (single image results)\n        '''", "\n", "#", "\n", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gt", "=", "self", ".", "_gts", "[", "imgId", ",", "catId", "]", "\n", "dt", "=", "self", ".", "_dts", "[", "imgId", ",", "catId", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_gts", "[", "imgId", ",", "cId", "]", "]", "\n", "dt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_dts", "[", "imgId", ",", "cId", "]", "]", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "for", "g", "in", "gt", ":", "\n", "            ", "if", "'ignore'", "not", "in", "g", ":", "\n", "                ", "g", "[", "'ignore'", "]", "=", "0", "\n", "", "if", "g", "[", "'iscrowd'", "]", "==", "1", "or", "g", "[", "'ignore'", "]", "or", "(", "g", "[", "'area'", "]", "<", "aRng", "[", "0", "]", "or", "g", "[", "'area'", "]", ">", "aRng", "[", "1", "]", ")", ":", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "0", "\n", "\n", "# sort dt highest score first, sort gt ignore last", "\n", "# gt = sorted(gt, key=lambda x: x['_ignore'])", "\n", "", "", "gtind", "=", "[", "ind", "for", "(", "ind", ",", "g", ")", "in", "sorted", "(", "enumerate", "(", "gt", ")", ",", "key", "=", "lambda", "ind_g", ":", "ind_g", "[", "1", "]", "[", "'_ignore'", "]", ")", "]", "\n", "\n", "gt", "=", "[", "gt", "[", "ind", "]", "for", "ind", "in", "gtind", "]", "\n", "dt", "=", "sorted", "(", "dt", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "'score'", "]", ")", "[", "0", ":", "maxDet", "]", "\n", "iscrowd", "=", "[", "int", "(", "o", "[", "'iscrowd'", "]", ")", "for", "o", "in", "gt", "]", "\n", "# load computed ious", "\n", "N_iou", "=", "len", "(", "self", ".", "ious", "[", "imgId", ",", "catId", "]", ")", "\n", "ious", "=", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "[", "0", ":", "maxDet", ",", "np", ".", "array", "(", "gtind", ")", "]", "if", "N_iou", ">", "0", "else", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "\n", "\n", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "G", "=", "len", "(", "gt", ")", "\n", "D", "=", "len", "(", "dt", ")", "\n", "gtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "G", ")", ")", "\n", "dtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "gtIg", "=", "np", ".", "array", "(", "[", "g", "[", "'_ignore'", "]", "for", "g", "in", "gt", "]", ")", "\n", "dtIg", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "if", "not", "len", "(", "ious", ")", "==", "0", ":", "\n", "            ", "for", "tind", ",", "t", "in", "enumerate", "(", "p", ".", "iouThrs", ")", ":", "\n", "                ", "for", "dind", ",", "d", "in", "enumerate", "(", "dt", ")", ":", "\n", "# information about best match so far (m=-1 -> unmatched)", "\n", "                    ", "iou", "=", "min", "(", "[", "t", ",", "1", "-", "1e-10", "]", ")", "\n", "m", "=", "-", "1", "\n", "for", "gind", ",", "g", "in", "enumerate", "(", "gt", ")", ":", "\n", "# if this gt already matched, and not a crowd, continue", "\n", "                        ", "if", "gtm", "[", "tind", ",", "gind", "]", ">", "0", "and", "not", "iscrowd", "[", "gind", "]", ":", "\n", "                            ", "continue", "\n", "# if dt matched to reg gt, and on ignore gt, stop", "\n", "", "if", "m", ">", "-", "1", "and", "gtIg", "[", "m", "]", "==", "0", "and", "gtIg", "[", "gind", "]", "==", "1", ":", "\n", "                            ", "break", "\n", "# continue to next gt unless better match made", "\n", "", "if", "ious", "[", "dind", ",", "gind", "]", "<", "iou", ":", "\n", "                            ", "continue", "\n", "# match successful and best so far, store appropriately", "\n", "", "iou", "=", "ious", "[", "dind", ",", "gind", "]", "\n", "m", "=", "gind", "\n", "# if match made store id of match for both dt and gt", "\n", "", "if", "m", "==", "-", "1", ":", "\n", "                        ", "continue", "\n", "", "dtIg", "[", "tind", ",", "dind", "]", "=", "gtIg", "[", "m", "]", "\n", "dtm", "[", "tind", ",", "dind", "]", "=", "gt", "[", "m", "]", "[", "'id'", "]", "\n", "gtm", "[", "tind", ",", "m", "]", "=", "d", "[", "'id'", "]", "\n", "# set unmatched detections outside of area range to ignore", "\n", "", "", "", "a", "=", "np", ".", "array", "(", "[", "d", "[", "'area'", "]", "<", "aRng", "[", "0", "]", "or", "d", "[", "'area'", "]", ">", "aRng", "[", "1", "]", "for", "d", "in", "dt", "]", ")", ".", "reshape", "(", "(", "1", ",", "len", "(", "dt", ")", ")", ")", "\n", "dtIg", "=", "np", ".", "logical_or", "(", "dtIg", ",", "np", ".", "logical_and", "(", "dtm", "==", "0", ",", "np", ".", "repeat", "(", "a", ",", "T", ",", "0", ")", ")", ")", "\n", "# store results for given image and category", "\n", "return", "{", "\n", "'image_id'", ":", "imgId", ",", "\n", "'category_id'", ":", "catId", ",", "\n", "'aRng'", ":", "aRng", ",", "\n", "'maxDet'", ":", "maxDet", ",", "\n", "'dtIds'", ":", "[", "d", "[", "'id'", "]", "for", "d", "in", "dt", "]", ",", "\n", "'gtIds'", ":", "[", "g", "[", "'id'", "]", "for", "g", "in", "gt", "]", ",", "\n", "'dtMatches'", ":", "dtm", ",", "\n", "'gtMatches'", ":", "gtm", ",", "\n", "'dtScores'", ":", "[", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "\n", "'gtIgnore'", ":", "gtIg", ",", "\n", "'dtIgnore'", ":", "dtIg", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.accumulate": [[282, 383], ["print", "time.time", "len", "len", "len", "len", "set", "set", "set", "set", "len", "len", "enumerate", "time.time", "print", "print", "len", "numpy.ones", "numpy.ones", "map", "enumerate", "datetime.datetime.now().strftime", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "map", "filter", "numpy.concatenate", "numpy.argsort", "numpy.concatenate", "len", "numpy.logical_and", "numpy.logical_and", "numpy.cumsum().astype", "numpy.cumsum().astype", "enumerate", "datetime.datetime.now", "len", "numpy.concatenate", "numpy.concatenate", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "zip", "numpy.array", "numpy.array", "len", "numpy.zeros", "pr.tolist.tolist.tolist", "q.tolist.tolist.tolist", "range", "numpy.searchsorted", "numpy.array", "tuple", "numpy.cumsum", "numpy.cumsum", "enumerate", "numpy.spacing"], "methods", ["None"], ["", "def", "accumulate", "(", "self", ",", "p", "=", "None", ")", ":", "\n", "        ", "'''\n        Accumulate per image evaluation results and store the result in self.eval\n        :param p: input params for evaluation\n        :return: None\n        '''", "\n", "print", "(", "'Accumulating evaluation results...   '", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "self", ".", "evalImgs", ":", "\n", "            ", "print", "(", "'Please run evaluate() first'", ")", "\n", "# allows input customized parameters", "\n", "", "if", "p", "is", "None", ":", "\n", "            ", "p", "=", "self", ".", "params", "\n", "", "p", ".", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "==", "1", "else", "[", "-", "1", "]", "\n", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "R", "=", "len", "(", "p", ".", "recThrs", ")", "\n", "K", "=", "len", "(", "p", ".", "catIds", ")", "if", "p", ".", "useCats", "else", "1", "\n", "A", "=", "len", "(", "p", ".", "areaRng", ")", "\n", "M", "=", "len", "(", "p", ".", "maxDets", ")", "\n", "precision", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", "A", ",", "M", ")", ")", "# -1 for the precision of absent categories", "\n", "recall", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "K", ",", "A", ",", "M", ")", ")", "\n", "\n", "# create dictionary for future indexing", "\n", "_pe", "=", "self", ".", "_paramsEval", "\n", "catIds", "=", "_pe", ".", "catIds", "if", "_pe", ".", "useCats", "else", "[", "-", "1", "]", "\n", "setK", "=", "set", "(", "catIds", ")", "\n", "setA", "=", "set", "(", "map", "(", "tuple", ",", "_pe", ".", "areaRng", ")", ")", "\n", "setM", "=", "set", "(", "_pe", ".", "maxDets", ")", "\n", "setI", "=", "set", "(", "_pe", ".", "imgIds", ")", "\n", "# get inds to evaluate", "\n", "k_list", "=", "[", "n", "for", "n", ",", "k", "in", "enumerate", "(", "p", ".", "catIds", ")", "if", "k", "in", "setK", "]", "\n", "m_list", "=", "[", "m", "for", "n", ",", "m", "in", "enumerate", "(", "p", ".", "maxDets", ")", "if", "m", "in", "setM", "]", "\n", "a_list", "=", "[", "n", "for", "n", ",", "a", "in", "enumerate", "(", "map", "(", "lambda", "x", ":", "tuple", "(", "x", ")", ",", "p", ".", "areaRng", ")", ")", "if", "a", "in", "setA", "]", "\n", "i_list", "=", "[", "n", "for", "n", ",", "i", "in", "enumerate", "(", "p", ".", "imgIds", ")", "if", "i", "in", "setI", "]", "\n", "# K0 = len(_pe.catIds)", "\n", "I0", "=", "len", "(", "_pe", ".", "imgIds", ")", "\n", "A0", "=", "len", "(", "_pe", ".", "areaRng", ")", "\n", "# retrieve E at each category, area range, and max number of detections", "\n", "for", "k", ",", "k0", "in", "enumerate", "(", "k_list", ")", ":", "\n", "            ", "Nk", "=", "k0", "*", "A0", "*", "I0", "\n", "for", "a", ",", "a0", "in", "enumerate", "(", "a_list", ")", ":", "\n", "                ", "Na", "=", "a0", "*", "I0", "\n", "for", "m", ",", "maxDet", "in", "enumerate", "(", "m_list", ")", ":", "\n", "                    ", "E", "=", "[", "self", ".", "evalImgs", "[", "Nk", "+", "Na", "+", "i", "]", "for", "i", "in", "i_list", "]", "\n", "E", "=", "filter", "(", "None", ",", "E", ")", "\n", "if", "len", "(", "E", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "dtScores", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtScores'", "]", "[", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ")", "\n", "\n", "# different sorting method generates slightly different results.", "\n", "# mergesort is used to be consistent as Matlab implementation.", "\n", "inds", "=", "np", ".", "argsort", "(", "-", "dtScores", ",", "kind", "=", "'mergesort'", ")", "\n", "\n", "dtm", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtMatches'", "]", "[", ":", ",", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "dtIg", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtIgnore'", "]", "[", ":", ",", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "gtIg", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'gtIgnore'", "]", "for", "e", "in", "E", "]", ")", "\n", "npig", "=", "len", "(", "[", "ig", "for", "ig", "in", "gtIg", "if", "ig", "==", "0", "]", ")", "\n", "if", "npig", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "tps", "=", "np", ".", "logical_and", "(", "dtm", ",", "np", ".", "logical_not", "(", "dtIg", ")", ")", "\n", "fps", "=", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "dtm", ")", ",", "np", ".", "logical_not", "(", "dtIg", ")", ")", "\n", "\n", "tp_sum", "=", "np", ".", "cumsum", "(", "tps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "fp_sum", "=", "np", ".", "cumsum", "(", "fps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "for", "t", ",", "(", "tp", ",", "fp", ")", "in", "enumerate", "(", "zip", "(", "tp_sum", ",", "fp_sum", ")", ")", ":", "\n", "                        ", "tp", "=", "np", ".", "array", "(", "tp", ")", "\n", "fp", "=", "np", ".", "array", "(", "fp", ")", "\n", "nd", "=", "len", "(", "tp", ")", "\n", "rc", "=", "tp", "/", "npig", "\n", "pr", "=", "tp", "/", "(", "fp", "+", "tp", "+", "np", ".", "spacing", "(", "1", ")", ")", "\n", "q", "=", "np", ".", "zeros", "(", "(", "R", ",", ")", ")", "\n", "\n", "if", "nd", ":", "\n", "                            ", "recall", "[", "t", ",", "k", ",", "a", ",", "m", "]", "=", "rc", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                            ", "recall", "[", "t", ",", "k", ",", "a", ",", "m", "]", "=", "0", "\n", "\n", "# numpy is slow without cython optimization for accessing elements", "\n", "# use python array gets significant speed improvement", "\n", "", "pr", "=", "pr", ".", "tolist", "(", ")", ";", "q", "=", "q", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nd", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                            ", "if", "pr", "[", "i", "]", ">", "pr", "[", "i", "-", "1", "]", ":", "\n", "                                ", "pr", "[", "i", "-", "1", "]", "=", "pr", "[", "i", "]", "\n", "\n", "", "", "inds", "=", "np", ".", "searchsorted", "(", "rc", ",", "p", ".", "recThrs", ")", "\n", "try", ":", "\n", "                            ", "for", "ri", ",", "pi", "in", "enumerate", "(", "inds", ")", ":", "\n", "                                ", "q", "[", "ri", "]", "=", "pr", "[", "pi", "]", "\n", "", "", "except", ":", "\n", "                            ", "pass", "\n", "", "precision", "[", "t", ",", ":", ",", "k", ",", "a", ",", "m", "]", "=", "np", ".", "array", "(", "q", ")", "\n", "", "", "", "", "self", ".", "eval", "=", "{", "\n", "'params'", ":", "p", ",", "\n", "'counts'", ":", "[", "T", ",", "R", ",", "K", ",", "A", ",", "M", "]", ",", "\n", "'date'", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ")", ",", "\n", "'precision'", ":", "precision", ",", "\n", "'recall'", ":", "recall", ",", "\n", "}", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'DONE (t=%0.2fs).'", "%", "(", "toc", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.summarize": [[384, 435], ["numpy.zeros", "cocoeval.COCOeval.summarize._summarize"], "methods", ["None"], ["", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "'''\n        Compute and display summary metrics for evaluation results.\n        Note this functin can *only* be applied on the default parameter setting\n        '''", "\n", "def", "_summarize", "(", "ap", "=", "1", ",", "iouThr", "=", "None", ",", "areaRng", "=", "'all'", ",", "maxDets", "=", "100", ")", ":", "\n", "            ", "p", "=", "self", ".", "params", "\n", "iStr", "=", "' {:<18} {} @[ IoU={:<9} | area={:>6} | maxDets={:>3} ] = {}'", "\n", "titleStr", "=", "'Average Precision'", "if", "ap", "==", "1", "else", "'Average Recall'", "\n", "typeStr", "=", "'(AP)'", "if", "ap", "==", "1", "else", "'(AR)'", "\n", "iouStr", "=", "'%0.2f:%0.2f'", "%", "(", "p", ".", "iouThrs", "[", "0", "]", ",", "p", ".", "iouThrs", "[", "-", "1", "]", ")", "if", "iouThr", "is", "None", "else", "'%0.2f'", "%", "(", "iouThr", ")", "\n", "areaStr", "=", "areaRng", "\n", "maxDetsStr", "=", "'%d'", "%", "(", "maxDets", ")", "\n", "\n", "aind", "=", "[", "i", "for", "i", ",", "aRng", "in", "enumerate", "(", "[", "'all'", ",", "'small'", ",", "'medium'", ",", "'large'", "]", ")", "if", "aRng", "==", "areaRng", "]", "\n", "mind", "=", "[", "i", "for", "i", ",", "mDet", "in", "enumerate", "(", "[", "1", ",", "10", ",", "100", "]", ")", "if", "mDet", "==", "maxDets", "]", "\n", "if", "ap", "==", "1", ":", "\n", "# dimension of precision: [TxRxKxAxM]", "\n", "                ", "s", "=", "self", ".", "eval", "[", "'precision'", "]", "\n", "# IoU", "\n", "if", "iouThr", "is", "not", "None", ":", "\n", "                    ", "t", "=", "np", ".", "where", "(", "iouThr", "==", "p", ".", "iouThrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "t", "]", "\n", "# areaRng", "\n", "", "s", "=", "s", "[", ":", ",", ":", ",", ":", ",", "aind", ",", "mind", "]", "\n", "", "else", ":", "\n", "# dimension of recall: [TxKxAxM]", "\n", "                ", "s", "=", "self", ".", "eval", "[", "'recall'", "]", "\n", "s", "=", "s", "[", ":", ",", ":", ",", "aind", ",", "mind", "]", "\n", "", "if", "len", "(", "s", "[", "s", ">", "-", "1", "]", ")", "==", "0", ":", "\n", "                ", "mean_s", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "mean_s", "=", "np", ".", "mean", "(", "s", "[", "s", ">", "-", "1", "]", ")", "\n", "", "print", "(", "iStr", ".", "format", "(", "titleStr", ",", "typeStr", ",", "iouStr", ",", "areaStr", ",", "maxDetsStr", ",", "'%.3f'", "%", "(", "float", "(", "mean_s", ")", ")", ")", ")", "\n", "return", "mean_s", "\n", "\n", "", "if", "not", "self", ".", "eval", ":", "\n", "            ", "raise", "Exception", "(", "'Please run accumulate() first'", ")", "\n", "", "self", ".", "stats", "=", "np", ".", "zeros", "(", "(", "12", ",", ")", ")", "\n", "self", ".", "stats", "[", "0", "]", "=", "_summarize", "(", "1", ")", "\n", "self", ".", "stats", "[", "1", "]", "=", "_summarize", "(", "1", ",", "iouThr", "=", ".5", ")", "\n", "self", ".", "stats", "[", "2", "]", "=", "_summarize", "(", "1", ",", "iouThr", "=", ".75", ")", "\n", "self", ".", "stats", "[", "3", "]", "=", "_summarize", "(", "1", ",", "areaRng", "=", "'small'", ")", "\n", "self", ".", "stats", "[", "4", "]", "=", "_summarize", "(", "1", ",", "areaRng", "=", "'medium'", ")", "\n", "self", ".", "stats", "[", "5", "]", "=", "_summarize", "(", "1", ",", "areaRng", "=", "'large'", ")", "\n", "self", ".", "stats", "[", "6", "]", "=", "_summarize", "(", "0", ",", "maxDets", "=", "1", ")", "\n", "self", ".", "stats", "[", "7", "]", "=", "_summarize", "(", "0", ",", "maxDets", "=", "10", ")", "\n", "self", ".", "stats", "[", "8", "]", "=", "_summarize", "(", "0", ",", "maxDets", "=", "100", ")", "\n", "self", ".", "stats", "[", "9", "]", "=", "_summarize", "(", "0", ",", "areaRng", "=", "'small'", ")", "\n", "self", ".", "stats", "[", "10", "]", "=", "_summarize", "(", "0", ",", "areaRng", "=", "'medium'", ")", "\n", "self", ".", "stats", "[", "11", "]", "=", "_summarize", "(", "0", ",", "areaRng", "=", "'large'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.__str__": [[436, 438], ["cocoeval.COCOeval.summarize"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.COCOeval.summarize"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "self", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.pycocotools.cocoeval.Params.__init__": [[443, 453], ["numpy.linspace", "numpy.linspace", "numpy.round", "numpy.round"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "imgIds", "=", "[", "]", "\n", "self", ".", "catIds", "=", "[", "]", "\n", "# np.arange causes trouble.  the data point on arange is slightly larger than the true value", "\n", "self", ".", "iouThrs", "=", "np", ".", "linspace", "(", ".5", ",", "0.95", ",", "np", ".", "round", "(", "(", "0.95", "-", ".5", ")", "/", ".05", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "recThrs", "=", "np", ".", "linspace", "(", ".0", ",", "1.00", ",", "np", ".", "round", "(", "(", "1.00", "-", ".0", ")", "/", ".01", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "maxDets", "=", "[", "1", ",", "10", ",", "100", "]", "\n", "self", ".", "areaRng", "=", "[", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", "]", "\n", "self", ".", "useSegm", "=", "0", "\n", "self", ".", "useCats", "=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.config.get_output_dir": [[305, 319], ["os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "get_output_dir", "(", "imdb", ",", "weights_filename", ")", ":", "\n", "  ", "\"\"\"Return the directory where experimental artifacts are placed.\n  If the directory does not exist, it is created.\n\n  A canonical path is built using the name from an imdb and a network\n  (if not None).\n  \"\"\"", "\n", "outdir", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "__C", ".", "ROOT_DIR", ",", "'output'", ",", "__C", ".", "EXP_DIR", ",", "imdb", ".", "name", ")", ")", "\n", "if", "weights_filename", "is", "None", ":", "\n", "    ", "weights_filename", "=", "'default'", "\n", "", "outdir", "=", "osp", ".", "join", "(", "outdir", ",", "weights_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.config.get_output_tb_dir": [[321, 335], ["os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "get_output_tb_dir", "(", "imdb", ",", "weights_filename", ")", ":", "\n", "  ", "\"\"\"Return the directory where tensorflow summaries are placed.\n  If the directory does not exist, it is created.\n\n  A canonical path is built using the name from an imdb and a network\n  (if not None).\n  \"\"\"", "\n", "outdir", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "__C", ".", "ROOT_DIR", ",", "'tensorboard'", ",", "__C", ".", "EXP_DIR", ",", "imdb", ".", "name", ")", ")", "\n", "if", "weights_filename", "is", "None", ":", "\n", "    ", "weights_filename", "=", "'default'", "\n", "", "outdir", "=", "osp", ".", "join", "(", "outdir", ",", "weights_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.config._merge_a_into_b": [[337, 368], ["a.items", "type", "type", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.config._merge_a_into_b"], ["", "def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "  ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n  options in b whenever they are also specified in a.\n  \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "edict", ":", "\n", "    ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "    ", "if", "k", "not", "in", "b", ":", "\n", "      ", "raise", "KeyError", "(", "'{} is not a valid config key'", ".", "format", "(", "k", ")", ")", "\n", "\n", "# the types must match, too", "\n", "", "old_type", "=", "type", "(", "b", "[", "k", "]", ")", "\n", "if", "old_type", "is", "not", "type", "(", "v", ")", ":", "\n", "      ", "if", "isinstance", "(", "b", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "v", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "b", "[", "k", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "(", "'Type mismatch ({} vs. {}) '", "\n", "'for config key: {}'", ")", ".", "format", "(", "type", "(", "b", "[", "k", "]", ")", ",", "\n", "type", "(", "v", ")", ",", "k", ")", ")", "\n", "\n", "# recursively merge dicts", "\n", "", "", "if", "type", "(", "v", ")", "is", "edict", ":", "\n", "      ", "try", ":", "\n", "        ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "(", "'Error under config key: {}'", ".", "format", "(", "k", ")", ")", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "      ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.config.cfg_from_file": [[370, 377], ["config._merge_a_into_b", "open", "easydict.EasyDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.config._merge_a_into_b"], ["", "", "", "def", "cfg_from_file", "(", "filename", ")", ":", "\n", "  ", "\"\"\"Load a config file and merge it into the default options.\"\"\"", "\n", "import", "yaml", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "yaml_cfg", "=", "edict", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "_merge_a_into_b", "(", "yaml_cfg", ",", "__C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.config.cfg_from_list": [[379, 400], ["zip", "k.split", "len", "literal_eval", "type", "type", "type", "type"], "function", ["None"], ["", "def", "cfg_from_list", "(", "cfg_list", ")", ":", "\n", "  ", "\"\"\"Set config keys via list (e.g., from command line).\"\"\"", "\n", "from", "ast", "import", "literal_eval", "\n", "assert", "len", "(", "cfg_list", ")", "%", "2", "==", "0", "\n", "for", "k", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "    ", "key_list", "=", "k", ".", "split", "(", "'.'", ")", "\n", "d", "=", "__C", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "      ", "assert", "subkey", "in", "d", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "assert", "subkey", "in", "d", "\n", "try", ":", "\n", "      ", "value", "=", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "# handle the case when v is a string literal", "\n", "      ", "value", "=", "v", "\n", "", "assert", "type", "(", "value", ")", "==", "type", "(", "d", "[", "subkey", "]", ")", ",", "'type {} does not match original type {}'", ".", "format", "(", "\n", "type", "(", "value", ")", ",", "type", "(", "d", "[", "subkey", "]", ")", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils.save_net": [[13, 18], ["h5py.File", "net.state_dict().items", "h5py.File.create_dataset", "net.state_dict", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["def", "save_net", "(", "fname", ",", "net", ")", ":", "\n", "    ", "import", "h5py", "\n", "h5f", "=", "h5py", ".", "File", "(", "fname", ",", "mode", "=", "'w'", ")", "\n", "for", "k", ",", "v", "in", "net", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "h5f", ".", "create_dataset", "(", "k", ",", "data", "=", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils.load_net": [[19, 25], ["h5py.File", "net.state_dict().items", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "v.copy_", "net.state_dict", "numpy.asarray"], "function", ["None"], ["", "", "def", "load_net", "(", "fname", ",", "net", ")", ":", "\n", "    ", "import", "h5py", "\n", "h5f", "=", "h5py", ".", "File", "(", "fname", ",", "mode", "=", "'r'", ")", "\n", "for", "k", ",", "v", "in", "net", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "param", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "h5f", "[", "k", "]", ")", ")", "\n", "v", ".", "copy_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils.weights_normal_init": [[26, 36], ["isinstance", "model.modules", "net_utils.weights_normal_init", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.normal_"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils.weights_normal_init"], ["", "", "def", "weights_normal_init", "(", "model", ",", "dev", "=", "0.01", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "list", ")", ":", "\n", "        ", "for", "m", "in", "model", ":", "\n", "            ", "weights_normal_init", "(", "m", ",", "dev", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "dev", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "dev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils.clip_gradient": [[38, 50], ["model.parameters", "torch.sqrt().item", "torch.sqrt().item", "torch.sqrt().item", "model.parameters", "max", "p.grad.data.norm", "torch.sqrt", "torch.sqrt", "torch.sqrt", "p.grad.mul_"], "function", ["None"], ["", "", "", "", "def", "clip_gradient", "(", "model", ",", "clip_norm", ")", ":", "\n", "    ", "\"\"\"Computes a gradient clipping coefficient based on gradient norm.\"\"\"", "\n", "totalnorm", "=", "0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "modulenorm", "=", "p", ".", "grad", ".", "data", ".", "norm", "(", ")", "\n", "totalnorm", "+=", "modulenorm", "**", "2", "\n", "", "", "totalnorm", "=", "torch", ".", "sqrt", "(", "totalnorm", ")", ".", "item", "(", ")", "\n", "norm", "=", "(", "clip_norm", "/", "max", "(", "totalnorm", ",", "clip_norm", ")", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "p", ".", "grad", ".", "mul_", "(", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils.vis_detections": [[51, 61], ["range", "numpy.minimum", "tuple", "cv2.rectangle", "cv2.putText", "int", "numpy.round"], "function", ["None"], ["", "", "", "def", "vis_detections", "(", "im", ",", "class_name", ",", "dets", ",", "thresh", "=", "0.8", ")", ":", "\n", "    ", "\"\"\"Visual debugging of detections.\"\"\"", "\n", "for", "i", "in", "range", "(", "np", ".", "minimum", "(", "10", ",", "dets", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "        ", "bbox", "=", "tuple", "(", "int", "(", "np", ".", "round", "(", "x", ")", ")", "for", "x", "in", "dets", "[", "i", ",", ":", "4", "]", ")", "\n", "score", "=", "dets", "[", "i", ",", "-", "1", "]", "\n", "if", "score", ">", "thresh", ":", "\n", "            ", "cv2", ".", "rectangle", "(", "im", ",", "bbox", "[", "0", ":", "2", "]", ",", "bbox", "[", "2", ":", "4", "]", ",", "(", "0", ",", "204", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "putText", "(", "im", ",", "'%s: %.3f'", "%", "(", "class_name", ",", "score", ")", ",", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "+", "15", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "\n", "1.0", ",", "(", "0", ",", "0", ",", "255", ")", ",", "thickness", "=", "1", ")", "\n", "", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils.adjust_learning_rate": [[63, 67], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "decay", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 0.5 every 20 epochs\"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "decay", "*", "param_group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils.save_checkpoint": [[69, 71], ["torch.save", "torch.save", "torch.save"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "state", ",", "filename", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils._smooth_l1_loss": [[72, 87], ["torch.abs", "torch.abs", "torch.abs", "sorted", "loss_box.sum.mean", "loss_box.sum.sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "_smooth_l1_loss", "(", "bbox_pred", ",", "bbox_targets", ",", "bbox_inside_weights", ",", "bbox_outside_weights", ",", "sigma", "=", "1.0", ",", "dim", "=", "[", "1", "]", ")", ":", "\n", "\n", "    ", "sigma_2", "=", "sigma", "**", "2", "\n", "box_diff", "=", "bbox_pred", "-", "bbox_targets", "\n", "in_box_diff", "=", "bbox_inside_weights", "*", "box_diff", "\n", "abs_in_box_diff", "=", "torch", ".", "abs", "(", "in_box_diff", ")", "\n", "smoothL1_sign", "=", "(", "abs_in_box_diff", "<", "1.", "/", "sigma_2", ")", ".", "detach", "(", ")", ".", "float", "(", ")", "\n", "in_loss_box", "=", "torch", ".", "pow", "(", "in_box_diff", ",", "2", ")", "*", "(", "sigma_2", "/", "2.", ")", "*", "smoothL1_sign", "+", "(", "abs_in_box_diff", "-", "(", "0.5", "/", "sigma_2", ")", ")", "*", "(", "1.", "-", "smoothL1_sign", ")", "\n", "out_loss_box", "=", "bbox_outside_weights", "*", "in_loss_box", "\n", "loss_box", "=", "out_loss_box", "\n", "for", "i", "in", "sorted", "(", "dim", ",", "reverse", "=", "True", ")", ":", "\n", "      ", "loss_box", "=", "loss_box", ".", "sum", "(", "i", ")", "\n", "", "loss_box", "=", "loss_box", ".", "mean", "(", ")", "\n", "return", "loss_box", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils._crop_pool_layer": [[88, 141], ["rois.detach.detach", "bottom.view().contiguous().expand().contiguous().view.size", "bottom.view().contiguous().expand().contiguous().view.size", "bottom.view().contiguous().expand().contiguous().view.size", "bottom.view().contiguous().expand().contiguous().view.size", "bottom.view().contiguous().expand().contiguous().view.size", "bottom.view().contiguous().expand().contiguous().view.size", "torch.autograd.Variable", "torch.cat().view", "torch.cat().view", "torch.cat().view", "rois.detach.size", "rois.detach.data.new().zero_", "torch.affine_grid", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand().contiguous().view", "torch.grid_sample", "torch.max_pool2d", "torch.affine_grid", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand().contiguous().view", "torch.grid_sample", "torch.cat", "torch.cat", "torch.cat", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "rois.detach.data.new", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand().contiguous", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand().contiguous", "rois.detach.size", "rois.detach.size", "rois.detach.size", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand", "bottom.view().contiguous().expand().contiguous().view.view().contiguous().expand", "bottom.view().contiguous().expand().contiguous().view.view().contiguous", "bottom.view().contiguous().expand().contiguous().view.view().contiguous", "bottom.view().contiguous().expand().contiguous().view.view", "bottom.view().contiguous().expand().contiguous().view.view"], "function", ["None"], ["", "def", "_crop_pool_layer", "(", "bottom", ",", "rois", ",", "max_pool", "=", "True", ")", ":", "\n", "# code modified from ", "\n", "# https://github.com/ruotianluo/pytorch-faster-rcnn", "\n", "# implement it using stn", "\n", "# box to affine", "\n", "# input (x1,y1,x2,y2)", "\n", "    ", "\"\"\"\n    [  x2-x1             x1 + x2 - W + 1  ]\n    [  -----      0      ---------------  ]\n    [  W - 1                  W - 1       ]\n    [                                     ]\n    [           y2-y1    y1 + y2 - H + 1  ]\n    [    0      -----    ---------------  ]\n    [           H - 1         H - 1      ]\n    \"\"\"", "\n", "rois", "=", "rois", ".", "detach", "(", ")", "\n", "batch_size", "=", "bottom", ".", "size", "(", "0", ")", "\n", "D", "=", "bottom", ".", "size", "(", "1", ")", "\n", "H", "=", "bottom", ".", "size", "(", "2", ")", "\n", "W", "=", "bottom", ".", "size", "(", "3", ")", "\n", "roi_per_batch", "=", "rois", ".", "size", "(", "0", ")", "/", "batch_size", "\n", "x1", "=", "rois", "[", ":", ",", "1", ":", ":", "4", "]", "/", "16.0", "\n", "y1", "=", "rois", "[", ":", ",", "2", ":", ":", "4", "]", "/", "16.0", "\n", "x2", "=", "rois", "[", ":", ",", "3", ":", ":", "4", "]", "/", "16.0", "\n", "y2", "=", "rois", "[", ":", ",", "4", ":", ":", "4", "]", "/", "16.0", "\n", "\n", "height", "=", "bottom", ".", "size", "(", "2", ")", "\n", "width", "=", "bottom", ".", "size", "(", "3", ")", "\n", "\n", "# affine theta", "\n", "zero", "=", "Variable", "(", "rois", ".", "data", ".", "new", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ")", ".", "zero_", "(", ")", ")", "\n", "theta", "=", "torch", ".", "cat", "(", "[", "(", "x2", "-", "x1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "x1", "+", "x2", "-", "width", "+", "1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "y2", "-", "y1", ")", "/", "(", "height", "-", "1", ")", ",", "\n", "(", "y1", "+", "y2", "-", "height", "+", "1", ")", "/", "(", "height", "-", "1", ")", "]", ",", "1", ")", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "\n", "if", "max_pool", ":", "\n", "      ", "pre_pool_size", "=", "cfg", ".", "POOLING_SIZE", "*", "2", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "torch", ".", "Size", "(", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ",", "pre_pool_size", ",", "pre_pool_size", ")", ")", ")", "\n", "bottom", "=", "bottom", ".", "view", "(", "1", ",", "batch_size", ",", "D", ",", "H", ",", "W", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "roi_per_batch", ",", "batch_size", ",", "D", ",", "H", ",", "W", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "D", ",", "H", ",", "W", ")", "\n", "crops", "=", "F", ".", "grid_sample", "(", "bottom", ",", "grid", ")", "\n", "crops", "=", "F", ".", "max_pool2d", "(", "crops", ",", "2", ",", "2", ")", "\n", "", "else", ":", "\n", "      ", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "torch", ".", "Size", "(", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ",", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ")", ")", ")", "\n", "bottom", "=", "bottom", ".", "view", "(", "1", ",", "batch_size", ",", "D", ",", "H", ",", "W", ")", ".", "contiguous", "(", ")", ".", "expand", "(", "roi_per_batch", ",", "batch_size", ",", "D", ",", "H", ",", "W", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "D", ",", "H", ",", "W", ")", "\n", "crops", "=", "F", ".", "grid_sample", "(", "bottom", ",", "grid", ")", "\n", "\n", "", "return", "crops", ",", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils._affine_grid_gen": [[142, 165], ["rois.detach.detach", "torch.autograd.Variable", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.affine_grid", "rois.detach.data.new().zero_", "torch.Size", "torch.Size", "torch.Size", "torch.cat", "torch.cat", "torch.cat", "rois.detach.data.new", "rois.detach.size", "rois.detach.size"], "function", ["None"], ["", "def", "_affine_grid_gen", "(", "rois", ",", "input_size", ",", "grid_size", ")", ":", "\n", "\n", "    ", "rois", "=", "rois", ".", "detach", "(", ")", "\n", "x1", "=", "rois", "[", ":", ",", "1", ":", ":", "4", "]", "/", "16.0", "\n", "y1", "=", "rois", "[", ":", ",", "2", ":", ":", "4", "]", "/", "16.0", "\n", "x2", "=", "rois", "[", ":", ",", "3", ":", ":", "4", "]", "/", "16.0", "\n", "y2", "=", "rois", "[", ":", ",", "4", ":", ":", "4", "]", "/", "16.0", "\n", "\n", "height", "=", "input_size", "[", "0", "]", "\n", "width", "=", "input_size", "[", "1", "]", "\n", "\n", "zero", "=", "Variable", "(", "rois", ".", "data", ".", "new", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ")", ".", "zero_", "(", ")", ")", "\n", "theta", "=", "torch", ".", "cat", "(", "[", "(", "x2", "-", "x1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "x1", "+", "x2", "-", "width", "+", "1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "y2", "-", "y1", ")", "/", "(", "height", "-", "1", ")", ",", "\n", "(", "y1", "+", "y2", "-", "height", "+", "1", ")", "/", "(", "height", "-", "1", ")", "]", ",", "1", ")", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "torch", ".", "Size", "(", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ",", "grid_size", ",", "grid_size", ")", ")", ")", "\n", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils._affine_theta": [[166, 196], ["rois.detach.detach", "torch.autograd.Variable", "torch.cat().view", "torch.cat().view", "torch.cat().view", "rois.detach.data.new().zero_", "torch.cat", "torch.cat", "torch.cat", "rois.detach.data.new", "rois.detach.size"], "function", ["None"], ["", "def", "_affine_theta", "(", "rois", ",", "input_size", ")", ":", "\n", "\n", "    ", "rois", "=", "rois", ".", "detach", "(", ")", "\n", "x1", "=", "rois", "[", ":", ",", "1", ":", ":", "4", "]", "/", "16.0", "\n", "y1", "=", "rois", "[", ":", ",", "2", ":", ":", "4", "]", "/", "16.0", "\n", "x2", "=", "rois", "[", ":", ",", "3", ":", ":", "4", "]", "/", "16.0", "\n", "y2", "=", "rois", "[", ":", ",", "4", ":", ":", "4", "]", "/", "16.0", "\n", "\n", "height", "=", "input_size", "[", "0", "]", "\n", "width", "=", "input_size", "[", "1", "]", "\n", "\n", "zero", "=", "Variable", "(", "rois", ".", "data", ".", "new", "(", "rois", ".", "size", "(", "0", ")", ",", "1", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "# theta = torch.cat([\\", "\n", "#   (x2 - x1) / (width - 1),", "\n", "#   zero,", "\n", "#   (x1 + x2 - width + 1) / (width - 1),", "\n", "#   zero,", "\n", "#   (y2 - y1) / (height - 1),", "\n", "#   (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)", "\n", "\n", "theta", "=", "torch", ".", "cat", "(", "[", "(", "y2", "-", "y1", ")", "/", "(", "height", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "y1", "+", "y2", "-", "height", "+", "1", ")", "/", "(", "height", "-", "1", ")", ",", "\n", "zero", ",", "\n", "(", "x2", "-", "x1", ")", "/", "(", "width", "-", "1", ")", ",", "\n", "(", "x1", "+", "x2", "-", "width", "+", "1", ")", "/", "(", "width", "-", "1", ")", "]", ",", "1", ")", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils.compare_grid_sample": [[197, 224], ["random.randint", "torch.autograd.Variable", "torch.autograd.Variable.clone().data.contiguous", "torch.autograd.Variable", "torch.autograd.Variable.clone().contiguous", "torch.grid_sample", "torch.autograd.Variable", "torch.autograd.Variable.clone().contiguous", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "model.roi_crop.functions.roi_crop.RoICropFunction", "torch.stack().contiguous().cuda", "torch.stack().contiguous().cuda", "torch.stack().contiguous().cuda", "model.roi_crop.functions.roi_crop.RoICropFunction.forward", "model.roi_crop.functions.roi_crop.RoICropFunction.backward", "pdb.set_trace", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.autograd.Variable.contiguous", "torch.autograd.Variable.clone", "torch.autograd.Variable.clone", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.randn", "torch.randn", "torch.randn", "torch.autograd.Variable.clone", "torch.randn", "torch.randn", "torch.randn", "torch.rand", "torch.rand", "torch.rand", "F.grid_sample.size", "torch.stack", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.ResNet.forward", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.roi_align.RoIAlignFunction.backward"], ["", "def", "compare_grid_sample", "(", ")", ":", "\n", "# do gradcheck", "\n", "    ", "N", "=", "random", ".", "randint", "(", "1", ",", "8", ")", "\n", "C", "=", "2", "# random.randint(1, 8)", "\n", "H", "=", "5", "# random.randint(1, 8)", "\n", "W", "=", "4", "# random.randint(1, 8)", "\n", "input", "=", "Variable", "(", "torch", ".", "randn", "(", "N", ",", "C", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "input_p", "=", "input", ".", "clone", "(", ")", ".", "data", ".", "contiguous", "(", ")", "\n", "\n", "grid", "=", "Variable", "(", "torch", ".", "randn", "(", "N", ",", "H", ",", "W", ",", "2", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "grid_clone", "=", "grid", ".", "clone", "(", ")", ".", "contiguous", "(", ")", "\n", "\n", "out_offcial", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ")", "\n", "grad_outputs", "=", "Variable", "(", "torch", ".", "rand", "(", "out_offcial", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ")", "\n", "grad_outputs_clone", "=", "grad_outputs", ".", "clone", "(", ")", ".", "contiguous", "(", ")", "\n", "grad_inputs", "=", "torch", ".", "autograd", ".", "grad", "(", "out_offcial", ",", "(", "input", ",", "grid", ")", ",", "grad_outputs", ".", "contiguous", "(", ")", ")", "\n", "grad_input_off", "=", "grad_inputs", "[", "0", "]", "\n", "\n", "\n", "crf", "=", "RoICropFunction", "(", ")", "\n", "grid_yx", "=", "torch", ".", "stack", "(", "[", "grid_clone", ".", "data", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "grid_clone", ".", "data", "[", ":", ",", ":", ",", ":", ",", "0", "]", "]", ",", "3", ")", ".", "contiguous", "(", ")", ".", "cuda", "(", ")", "\n", "out_stn", "=", "crf", ".", "forward", "(", "input_p", ",", "grid_yx", ")", "\n", "grad_inputs", "=", "crf", ".", "backward", "(", "grad_outputs_clone", ".", "data", ")", "\n", "grad_input_stn", "=", "grad_inputs", "[", "0", "]", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "delta", "=", "(", "grad_input_off", ".", "data", "-", "grad_input_stn", ")", ".", "sum", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.pool_queue.PoolQueue.__init__": [[4, 6], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_queue_size", ")", ":", "\n", "        ", "self", ".", "queue", "=", "collections", ".", "deque", "(", "maxlen", "=", "max_queue_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.pool_queue.PoolQueue.__len__": [[7, 9], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "queue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.pool_queue.PoolQueue.enqueue": [[10, 12], ["pool_queue.PoolQueue.queue.append"], "methods", ["None"], ["", "def", "enqueue", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "queue", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.pool_queue.PoolQueue.get_queue": [[13, 15], ["None"], "methods", ["None"], ["", "def", "get_queue", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.pool_queue.PoolQueue.get_latest_value": [[16, 18], ["None"], "methods", ["None"], ["", "def", "get_latest_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "queue", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.blob.im_list_to_blob": [[20, 34], ["numpy.array().max", "len", "numpy.zeros", "xrange", "numpy.array"], "function", ["None"], ["", "def", "im_list_to_blob", "(", "ims", ")", ":", "\n", "    ", "\"\"\"Convert a list of images into a network input.\n\n    Assumes images are already prepared (means subtracted, BGR order, ...).\n    \"\"\"", "\n", "max_shape", "=", "np", ".", "array", "(", "[", "im", ".", "shape", "for", "im", "in", "ims", "]", ")", ".", "max", "(", "axis", "=", "0", ")", "\n", "num_images", "=", "len", "(", "ims", ")", "\n", "blob", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "max_shape", "[", "0", "]", ",", "max_shape", "[", "1", "]", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "xrange", "(", "num_images", ")", ":", "\n", "        ", "im", "=", "ims", "[", "i", "]", "\n", "blob", "[", "i", ",", "0", ":", "im", ".", "shape", "[", "0", "]", ",", "0", ":", "im", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "im", "\n", "\n", "", "return", "blob", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.blob.prep_im_for_blob": [[35, 53], ["cv2.resize.astype", "numpy.min", "numpy.max", "cv2.resize", "float", "float"], "function", ["None"], ["", "def", "prep_im_for_blob", "(", "im", ",", "pixel_means", ",", "target_size", ",", "max_size", ")", ":", "\n", "    ", "\"\"\"Mean subtract and scale an image for use in a blob.\"\"\"", "\n", "\n", "im", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "im", "-=", "pixel_means", "\n", "# im = im[:, :, ::-1]", "\n", "im_shape", "=", "im", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# Prevent the biggest axis from being more than MAX_SIZE", "\n", "# if np.round(im_scale * im_size_max) > max_size:", "\n", "#     im_scale = float(max_size) / float(im_size_max)", "\n", "# im = imresize(im, im_scale)", "\n", "im", "=", "cv2", ".", "resize", "(", "im", ",", "None", ",", "None", ",", "fx", "=", "im_scale", ",", "fy", "=", "im_scale", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "im", ",", "im_scale", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.rpn._RPN.__init__": [[19, 46], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "proposal_layer._ProposalLayer", "anchor_target_layer._AnchorTargetLayer", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["def", "__init__", "(", "self", ",", "din", ")", ":", "\n", "        ", "super", "(", "_RPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "din", "=", "din", "# get depth of input feature map, e.g., 512", "\n", "self", ".", "anchor_scales", "=", "cfg", ".", "ANCHOR_SCALES", "\n", "self", ".", "anchor_ratios", "=", "cfg", ".", "ANCHOR_RATIOS", "\n", "self", ".", "feat_stride", "=", "cfg", ".", "FEAT_STRIDE", "[", "0", "]", "\n", "\n", "# define the convrelu layers processing input feature map", "\n", "self", ".", "RPN_Conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "din", ",", "512", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# define bg/fg classifcation score layer", "\n", "self", ".", "nc_score_out", "=", "len", "(", "self", ".", "anchor_scales", ")", "*", "len", "(", "self", ".", "anchor_ratios", ")", "*", "2", "# 2(bg/fg) * 9 (anchors)", "\n", "self", ".", "RPN_cls_score", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "nc_score_out", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "# define anchor box offset prediction layer", "\n", "self", ".", "nc_bbox_out", "=", "len", "(", "self", ".", "anchor_scales", ")", "*", "len", "(", "self", ".", "anchor_ratios", ")", "*", "4", "# 4(coords) * 9 (anchors)", "\n", "self", ".", "RPN_bbox_pred", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "nc_bbox_out", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "# define proposal layer", "\n", "self", ".", "RPN_proposal", "=", "_ProposalLayer", "(", "self", ".", "feat_stride", ",", "self", ".", "anchor_scales", ",", "self", ".", "anchor_ratios", ")", "\n", "\n", "# define anchor target layer", "\n", "self", ".", "RPN_anchor_target", "=", "_AnchorTargetLayer", "(", "self", ".", "feat_stride", ",", "self", ".", "anchor_scales", ",", "self", ".", "anchor_ratios", ")", "\n", "\n", "self", ".", "rpn_loss_cls", "=", "0", "\n", "self", ".", "rpn_loss_box", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.rpn._RPN.reshape": [[47, 57], ["x.view.view.size", "x.view.view.view", "int", "int", "float", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "reshape", "(", "x", ",", "d", ")", ":", "\n", "        ", "input_shape", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "\n", "input_shape", "[", "0", "]", ",", "\n", "int", "(", "d", ")", ",", "\n", "int", "(", "float", "(", "input_shape", "[", "1", "]", "*", "input_shape", "[", "2", "]", ")", "/", "float", "(", "d", ")", ")", ",", "\n", "input_shape", "[", "3", "]", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.rpn._RPN.forward": [[58, 111], ["base_feat.size", "torch.relu", "torch.relu", "torch.relu", "rpn._RPN.RPN_cls_score", "rpn._RPN.reshape", "torch.softmax", "torch.softmax", "torch.softmax", "rpn._RPN.reshape", "rpn._RPN.RPN_bbox_pred", "rpn._RPN.RPN_proposal", "rpn._RPN.RPN_Conv", "rpn._RPN.RPN_anchor_target", "rpn._RPN.permute().contiguous().view", "rpn_data[].view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model.utils.net_utils._smooth_l1_loss", "torch.autograd.Variable.view().ne().nonzero().view", "torch.autograd.Variable.view().ne().nonzero().view", "torch.autograd.Variable.view().ne().nonzero().view", "torch.index_select.view", "torch.index_select.view", "torch.index_select.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.long", "torch.autograd.Variable.long", "torch.autograd.Variable.long", "torch.autograd.Variable.data.ne", "torch.autograd.Variable.data.ne", "torch.autograd.Variable.data.ne", "rpn._RPN.permute().contiguous", "torch.autograd.Variable.view().ne().nonzero", "torch.autograd.Variable.view().ne().nonzero", "torch.autograd.Variable.view().ne().nonzero", "rpn._RPN.permute", "torch.autograd.Variable.view().ne", "torch.autograd.Variable.view().ne", "torch.autograd.Variable.view().ne", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer.reshape", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer.reshape", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils._smooth_l1_loss"], ["", "def", "forward", "(", "self", ",", "base_feat", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", ")", ":", "\n", "\n", "        ", "batch_size", "=", "base_feat", ".", "size", "(", "0", ")", "\n", "\n", "# return feature map after convrelu layer", "\n", "rpn_conv1", "=", "F", ".", "relu", "(", "self", ".", "RPN_Conv", "(", "base_feat", ")", ",", "inplace", "=", "True", ")", "\n", "# get rpn classification score", "\n", "rpn_cls_score", "=", "self", ".", "RPN_cls_score", "(", "rpn_conv1", ")", "\n", "\n", "rpn_cls_score_reshape", "=", "self", ".", "reshape", "(", "rpn_cls_score", ",", "2", ")", "\n", "rpn_cls_prob_reshape", "=", "F", ".", "softmax", "(", "rpn_cls_score_reshape", ",", "1", ")", "\n", "rpn_cls_prob", "=", "self", ".", "reshape", "(", "rpn_cls_prob_reshape", ",", "self", ".", "nc_score_out", ")", "\n", "\n", "# get rpn offsets to the anchor boxes", "\n", "rpn_bbox_pred", "=", "self", ".", "RPN_bbox_pred", "(", "rpn_conv1", ")", "\n", "\n", "# proposal layer", "\n", "cfg_key", "=", "'TRAIN'", "if", "self", ".", "training", "else", "'TEST'", "\n", "\n", "rois", "=", "self", ".", "RPN_proposal", "(", "(", "rpn_cls_prob", ".", "data", ",", "rpn_bbox_pred", ".", "data", ",", "\n", "im_info", ",", "cfg_key", ")", ")", "\n", "\n", "self", ".", "rpn_loss_cls", "=", "0", "\n", "self", ".", "rpn_loss_box", "=", "0", "\n", "\n", "# generating training labels and build the rpn loss", "\n", "if", "self", ".", "training", ":", "\n", "            ", "assert", "gt_boxes", "is", "not", "None", "\n", "\n", "rpn_data", "=", "self", ".", "RPN_anchor_target", "(", "(", "rpn_cls_score", ".", "data", ",", "gt_boxes", ",", "im_info", ",", "num_boxes", ")", ")", "\n", "\n", "# compute classification loss", "\n", "rpn_cls_score", "=", "rpn_cls_score_reshape", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "2", ")", "\n", "rpn_label", "=", "rpn_data", "[", "0", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "rpn_keep", "=", "Variable", "(", "rpn_label", ".", "view", "(", "-", "1", ")", ".", "ne", "(", "-", "1", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "rpn_cls_score", "=", "torch", ".", "index_select", "(", "rpn_cls_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "0", ",", "rpn_keep", ")", "\n", "rpn_label", "=", "torch", ".", "index_select", "(", "rpn_label", ".", "view", "(", "-", "1", ")", ",", "0", ",", "rpn_keep", ".", "data", ")", "\n", "rpn_label", "=", "Variable", "(", "rpn_label", ".", "long", "(", ")", ")", "\n", "self", ".", "rpn_loss_cls", "=", "F", ".", "cross_entropy", "(", "rpn_cls_score", ",", "rpn_label", ")", "\n", "fg_cnt", "=", "torch", ".", "sum", "(", "rpn_label", ".", "data", ".", "ne", "(", "0", ")", ")", "\n", "\n", "rpn_bbox_targets", ",", "rpn_bbox_inside_weights", ",", "rpn_bbox_outside_weights", "=", "rpn_data", "[", "1", ":", "]", "\n", "\n", "# compute bbox regression loss", "\n", "rpn_bbox_inside_weights", "=", "Variable", "(", "rpn_bbox_inside_weights", ")", "\n", "rpn_bbox_outside_weights", "=", "Variable", "(", "rpn_bbox_outside_weights", ")", "\n", "rpn_bbox_targets", "=", "Variable", "(", "rpn_bbox_targets", ")", "\n", "\n", "self", ".", "rpn_loss_box", "=", "_smooth_l1_loss", "(", "rpn_bbox_pred", ",", "rpn_bbox_targets", ",", "rpn_bbox_inside_weights", ",", "\n", "rpn_bbox_outside_weights", ",", "sigma", "=", "3", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "", "return", "rois", ",", "self", ".", "rpn_loss_cls", ",", "self", ".", "rpn_loss_box", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._AnchorTargetLayer.__init__": [[36, 47], ["torch.Module.__init__", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "anchor_target_layer._AnchorTargetLayer._anchors.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "generate_anchors.generate_anchors.generate_anchors", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors.generate_anchors"], ["def", "__init__", "(", "self", ",", "feat_stride", ",", "scales", ",", "ratios", ")", ":", "\n", "        ", "super", "(", "_AnchorTargetLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_feat_stride", "=", "feat_stride", "\n", "self", ".", "_scales", "=", "scales", "\n", "anchor_scales", "=", "scales", "\n", "self", ".", "_anchors", "=", "torch", ".", "from_numpy", "(", "generate_anchors", "(", "scales", "=", "np", ".", "array", "(", "anchor_scales", ")", ",", "ratios", "=", "np", ".", "array", "(", "ratios", ")", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "_num_anchors", "=", "self", ".", "_anchors", ".", "size", "(", "0", ")", "\n", "\n", "# allow boxes to sit over the edge by a small amount", "\n", "self", ".", "_allowed_border", "=", "0", "# default is 0", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._AnchorTargetLayer.forward": [[48, 194], ["gt_boxes.size", "numpy.meshgrid", "numpy.meshgrid", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous().type_as().float", "shifts.contiguous().type_as().float.contiguous().type_as().float.size", "anchor_target_layer._AnchorTargetLayer._anchors.type_as", "all_anchors.view.view.view", "int", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "gt_boxes.new().fill_", "gt_boxes.new().zero_", "gt_boxes.new().zero_", "bbox_transform.bbox_overlaps_batch", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "int", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "anchor_target_layer._compute_targets_batch", "anchor_target_layer._unmap", "anchor_target_layer._unmap", "anchor_target_layer._unmap", "anchor_target_layer._unmap", "labels.view.view.view().permute().contiguous", "labels.view.view.view", "outputs.append", "bbox_targets.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "outputs.append", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.size", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.view().expand", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous", "outputs.append", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.view().expand", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous", "outputs.append", "rpn_cls_score.size", "rpn_cls_score.size", "rpn_cls_score.size", "rpn_cls_score.size", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.vstack().transpose", "numpy.vstack().transpose", "anchor_target_layer._AnchorTargetLayer._anchors.view", "shifts.contiguous().type_as().float.contiguous().type_as().float.view", "bbox_transform.bbox_overlaps_batch.eq", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "gt_boxes.size", "offset.view().type_as", "[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous().type_as", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "gt_boxes.new", "gt_boxes.new", "gt_boxes.new", "gt_max_overlaps.view().expand_as", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.sum.item", "torch.sum.item", "torch.sum.item", "torch.sum.item", "labels.view.view.view().permute", "bbox_targets.view().permute().contiguous.view().permute().contiguous.view().permute", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.view", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view().permute", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.view", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view().permute", "numpy.vstack", "numpy.vstack", "long", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "offset.view", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous", "long", "gt_max_overlaps.view", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "gt_boxes.view", "labels.view.view.view", "bbox_targets.view().permute().contiguous.view().permute().contiguous.view", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous().view", "shift_x.ravel", "shift_y.ravel", "shift_x.ravel", "shift_y.ravel", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "argmax_overlaps.view", "bbox_inside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous", "bbox_outside_weights.contiguous().view().permute().contiguous.contiguous().view().permute().contiguous.contiguous", "numpy.random.permutation", "numpy.random.permutation", "torch.nonzero().view.size", "torch.nonzero().view.size", "numpy.random.permutation", "numpy.random.permutation", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size", "torch.nonzero().view.size"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_overlaps_batch", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._compute_targets_batch", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._unmap", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._unmap", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._unmap", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._unmap"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Algorithm:", "\n", "#", "\n", "# for each (H, W) location i", "\n", "#   generate 9 anchor boxes centered on cell i", "\n", "#   apply predicted bbox deltas at cell i to each of the 9 anchors", "\n", "# filter out-of-image anchors", "\n", "\n", "        ", "rpn_cls_score", "=", "input", "[", "0", "]", "\n", "gt_boxes", "=", "input", "[", "1", "]", "\n", "im_info", "=", "input", "[", "2", "]", "\n", "num_boxes", "=", "input", "[", "3", "]", "\n", "\n", "# map of shape (..., H, W)", "\n", "height", ",", "width", "=", "rpn_cls_score", ".", "size", "(", "2", ")", ",", "rpn_cls_score", ".", "size", "(", "3", ")", "\n", "\n", "batch_size", "=", "gt_boxes", ".", "size", "(", "0", ")", "\n", "\n", "feat_height", ",", "feat_width", "=", "rpn_cls_score", ".", "size", "(", "2", ")", ",", "rpn_cls_score", ".", "size", "(", "3", ")", "\n", "shift_x", "=", "np", ".", "arange", "(", "0", ",", "feat_width", ")", "*", "self", ".", "_feat_stride", "\n", "shift_y", "=", "np", ".", "arange", "(", "0", ",", "feat_height", ")", "*", "self", ".", "_feat_stride", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "shifts", "=", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "(", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ",", "\n", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ")", ")", ".", "transpose", "(", ")", ")", "\n", "shifts", "=", "shifts", ".", "contiguous", "(", ")", ".", "type_as", "(", "rpn_cls_score", ")", ".", "float", "(", ")", "\n", "\n", "A", "=", "self", ".", "_num_anchors", "\n", "K", "=", "shifts", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "_anchors", "=", "self", ".", "_anchors", ".", "type_as", "(", "gt_boxes", ")", "# move to specific gpu.", "\n", "all_anchors", "=", "self", ".", "_anchors", ".", "view", "(", "1", ",", "A", ",", "4", ")", "+", "shifts", ".", "view", "(", "K", ",", "1", ",", "4", ")", "\n", "all_anchors", "=", "all_anchors", ".", "view", "(", "K", "*", "A", ",", "4", ")", "\n", "\n", "total_anchors", "=", "int", "(", "K", "*", "A", ")", "\n", "\n", "keep", "=", "(", "(", "all_anchors", "[", ":", ",", "0", "]", ">=", "-", "self", ".", "_allowed_border", ")", "&", "\n", "(", "all_anchors", "[", ":", ",", "1", "]", ">=", "-", "self", ".", "_allowed_border", ")", "&", "\n", "(", "all_anchors", "[", ":", ",", "2", "]", "<", "long", "(", "im_info", "[", "0", "]", "[", "1", "]", ")", "+", "self", ".", "_allowed_border", ")", "&", "\n", "(", "all_anchors", "[", ":", ",", "3", "]", "<", "long", "(", "im_info", "[", "0", "]", "[", "0", "]", ")", "+", "self", ".", "_allowed_border", ")", ")", "\n", "\n", "inds_inside", "=", "torch", ".", "nonzero", "(", "keep", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# keep only inside anchors", "\n", "anchors", "=", "all_anchors", "[", "inds_inside", ",", ":", "]", "\n", "\n", "# label: 1 is positive, 0 is negative, -1 is dont care", "\n", "labels", "=", "gt_boxes", ".", "new", "(", "batch_size", ",", "inds_inside", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "-", "1", ")", "\n", "bbox_inside_weights", "=", "gt_boxes", ".", "new", "(", "batch_size", ",", "inds_inside", ".", "size", "(", "0", ")", ")", ".", "zero_", "(", ")", "\n", "bbox_outside_weights", "=", "gt_boxes", ".", "new", "(", "batch_size", ",", "inds_inside", ".", "size", "(", "0", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "overlaps", "=", "bbox_overlaps_batch", "(", "anchors", ",", "gt_boxes", ")", "\n", "\n", "max_overlaps", ",", "argmax_overlaps", "=", "torch", ".", "max", "(", "overlaps", ",", "2", ")", "\n", "gt_max_overlaps", ",", "_", "=", "torch", ".", "max", "(", "overlaps", ",", "1", ")", "\n", "\n", "if", "not", "cfg", ".", "TRAIN", ".", "RPN_CLOBBER_POSITIVES", ":", "\n", "            ", "labels", "[", "max_overlaps", "<", "cfg", ".", "TRAIN", ".", "RPN_NEGATIVE_OVERLAP", "]", "=", "0", "\n", "\n", "", "gt_max_overlaps", "[", "gt_max_overlaps", "==", "0", "]", "=", "1e-5", "\n", "keep", "=", "torch", ".", "sum", "(", "overlaps", ".", "eq", "(", "gt_max_overlaps", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", ".", "expand_as", "(", "overlaps", ")", ")", ",", "2", ")", "\n", "\n", "if", "torch", ".", "sum", "(", "keep", ")", ">", "0", ":", "\n", "            ", "labels", "[", "keep", ">", "0", "]", "=", "1", "\n", "\n", "# fg label: above threshold IOU", "\n", "", "labels", "[", "max_overlaps", ">=", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_OVERLAP", "]", "=", "1", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "RPN_CLOBBER_POSITIVES", ":", "\n", "            ", "labels", "[", "max_overlaps", "<", "cfg", ".", "TRAIN", ".", "RPN_NEGATIVE_OVERLAP", "]", "=", "0", "\n", "\n", "", "num_fg", "=", "int", "(", "cfg", ".", "TRAIN", ".", "RPN_FG_FRACTION", "*", "cfg", ".", "TRAIN", ".", "RPN_BATCHSIZE", ")", "\n", "\n", "sum_fg", "=", "torch", ".", "sum", "(", "(", "labels", "==", "1", ")", ".", "int", "(", ")", ",", "1", ")", "\n", "sum_bg", "=", "torch", ".", "sum", "(", "(", "labels", "==", "0", ")", ".", "int", "(", ")", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# subsample positive labels if we have too many", "\n", "            ", "if", "sum_fg", "[", "i", "]", ">", "num_fg", ":", "\n", "                ", "fg_inds", "=", "torch", ".", "nonzero", "(", "labels", "[", "i", "]", "==", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "# torch.randperm seems has a bug on multi-gpu setting that cause the segfault.", "\n", "# See https://github.com/pytorch/pytorch/issues/1868 for more details.", "\n", "# use numpy instead.", "\n", "#rand_num = torch.randperm(fg_inds.size(0)).type_as(gt_boxes).long()", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "fg_inds", ".", "size", "(", "0", ")", ")", ")", ".", "type_as", "(", "gt_boxes", ")", ".", "long", "(", ")", "\n", "disable_inds", "=", "fg_inds", "[", "rand_num", "[", ":", "fg_inds", ".", "size", "(", "0", ")", "-", "num_fg", "]", "]", "\n", "labels", "[", "i", "]", "[", "disable_inds", "]", "=", "-", "1", "\n", "\n", "#           num_bg = cfg.TRAIN.RPN_BATCHSIZE - sum_fg[i]", "\n", "", "num_bg", "=", "cfg", ".", "TRAIN", ".", "RPN_BATCHSIZE", "-", "torch", ".", "sum", "(", "(", "labels", "==", "1", ")", ".", "int", "(", ")", ",", "1", ")", "[", "i", "]", "\n", "\n", "# subsample negative labels if we have too many", "\n", "if", "sum_bg", "[", "i", "]", ">", "num_bg", ":", "\n", "                ", "bg_inds", "=", "torch", ".", "nonzero", "(", "labels", "[", "i", "]", "==", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "#rand_num = torch.randperm(bg_inds.size(0)).type_as(gt_boxes).long()", "\n", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "bg_inds", ".", "size", "(", "0", ")", ")", ")", ".", "type_as", "(", "gt_boxes", ")", ".", "long", "(", ")", "\n", "disable_inds", "=", "bg_inds", "[", "rand_num", "[", ":", "bg_inds", ".", "size", "(", "0", ")", "-", "num_bg", "]", "]", "\n", "labels", "[", "i", "]", "[", "disable_inds", "]", "=", "-", "1", "\n", "\n", "", "", "offset", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ")", "*", "gt_boxes", ".", "size", "(", "1", ")", "\n", "\n", "argmax_overlaps", "=", "argmax_overlaps", "+", "offset", ".", "view", "(", "batch_size", ",", "1", ")", ".", "type_as", "(", "argmax_overlaps", ")", "\n", "bbox_targets", "=", "_compute_targets_batch", "(", "anchors", ",", "gt_boxes", ".", "view", "(", "-", "1", ",", "5", ")", "[", "argmax_overlaps", ".", "view", "(", "-", "1", ")", ",", ":", "]", ".", "view", "(", "batch_size", ",", "-", "1", ",", "5", ")", ")", "\n", "\n", "# use a single value instead of 4 values for easy index.", "\n", "bbox_inside_weights", "[", "labels", "==", "1", "]", "=", "cfg", ".", "TRAIN", ".", "RPN_BBOX_INSIDE_WEIGHTS", "[", "0", "]", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", "<", "0", ":", "\n", "            ", "num_examples", "=", "torch", ".", "sum", "(", "labels", "[", "i", "]", ">=", "0", ")", "\n", "positive_weights", "=", "1.0", "/", "num_examples", ".", "item", "(", ")", "\n", "negative_weights", "=", "1.0", "/", "num_examples", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "(", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", ">", "0", ")", "&", "\n", "(", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", "<", "1", ")", ")", "\n", "\n", "", "bbox_outside_weights", "[", "labels", "==", "1", "]", "=", "positive_weights", "\n", "bbox_outside_weights", "[", "labels", "==", "0", "]", "=", "negative_weights", "\n", "\n", "labels", "=", "_unmap", "(", "labels", ",", "total_anchors", ",", "inds_inside", ",", "batch_size", ",", "fill", "=", "-", "1", ")", "\n", "bbox_targets", "=", "_unmap", "(", "bbox_targets", ",", "total_anchors", ",", "inds_inside", ",", "batch_size", ",", "fill", "=", "0", ")", "\n", "bbox_inside_weights", "=", "_unmap", "(", "bbox_inside_weights", ",", "total_anchors", ",", "inds_inside", ",", "batch_size", ",", "fill", "=", "0", ")", "\n", "bbox_outside_weights", "=", "_unmap", "(", "bbox_outside_weights", ",", "total_anchors", ",", "inds_inside", ",", "batch_size", ",", "fill", "=", "0", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "\n", "labels", "=", "labels", ".", "view", "(", "batch_size", ",", "height", ",", "width", ",", "A", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "labels", "=", "labels", ".", "view", "(", "batch_size", ",", "1", ",", "A", "*", "height", ",", "width", ")", "\n", "outputs", ".", "append", "(", "labels", ")", "\n", "\n", "bbox_targets", "=", "bbox_targets", ".", "view", "(", "batch_size", ",", "height", ",", "width", ",", "A", "*", "4", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outputs", ".", "append", "(", "bbox_targets", ")", "\n", "\n", "anchors_count", "=", "bbox_inside_weights", ".", "size", "(", "1", ")", "\n", "bbox_inside_weights", "=", "bbox_inside_weights", ".", "view", "(", "batch_size", ",", "anchors_count", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "anchors_count", ",", "4", ")", "\n", "\n", "bbox_inside_weights", "=", "bbox_inside_weights", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "height", ",", "width", ",", "4", "*", "A", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "outputs", ".", "append", "(", "bbox_inside_weights", ")", "\n", "\n", "bbox_outside_weights", "=", "bbox_outside_weights", ".", "view", "(", "batch_size", ",", "anchors_count", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "anchors_count", ",", "4", ")", "\n", "bbox_outside_weights", "=", "bbox_outside_weights", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "height", ",", "width", ",", "4", "*", "A", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outputs", ".", "append", "(", "bbox_outside_weights", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._AnchorTargetLayer.backward": [[195, 198], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "top", ",", "propagate_down", ",", "bottom", ")", ":", "\n", "        ", "\"\"\"This layer does not propagate gradients.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._AnchorTargetLayer.reshape": [[199, 202], ["None"], "methods", ["None"], ["", "def", "reshape", "(", "self", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "\"\"\"Reshaping happens during the call to forward.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._unmap": [[203, 214], ["data.dim", "torch.Tensor().fill_().type_as", "torch.Tensor().fill_().type_as", "torch.Tensor().fill_().type_as", "torch.Tensor().fill_().type_as", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "data.size"], "function", ["None"], ["", "", "def", "_unmap", "(", "data", ",", "count", ",", "inds", ",", "batch_size", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n    size count) \"\"\"", "\n", "\n", "if", "data", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "ret", "=", "torch", ".", "Tensor", "(", "batch_size", ",", "count", ")", ".", "fill_", "(", "fill", ")", ".", "type_as", "(", "data", ")", "\n", "ret", "[", ":", ",", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "ret", "=", "torch", ".", "Tensor", "(", "batch_size", ",", "count", ",", "data", ".", "size", "(", "2", ")", ")", ".", "fill_", "(", "fill", ")", ".", "type_as", "(", "data", ")", "\n", "ret", "[", ":", ",", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.anchor_target_layer._compute_targets_batch": [[216, 220], ["bbox_transform.bbox_transform_batch"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_transform_batch"], ["", "def", "_compute_targets_batch", "(", "ex_rois", ",", "gt_rois", ")", ":", "\n", "    ", "\"\"\"Compute bounding-box regression targets for an image.\"\"\"", "\n", "\n", "return", "bbox_transform_batch", "(", "ex_rois", ",", "gt_rois", "[", ":", ",", ":", ",", ":", "4", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_layer._ProposalLayer.__init__": [[32, 39], ["torch.Module.__init__", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "proposal_layer._ProposalLayer._anchors.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "generate_anchors.generate_anchors.generate_anchors", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors.generate_anchors"], ["def", "__init__", "(", "self", ",", "feat_stride", ",", "scales", ",", "ratios", ")", ":", "\n", "        ", "super", "(", "_ProposalLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_feat_stride", "=", "feat_stride", "\n", "self", ".", "_anchors", "=", "torch", ".", "from_numpy", "(", "generate_anchors", "(", "scales", "=", "np", ".", "array", "(", "scales", ")", ",", "\n", "ratios", "=", "np", ".", "array", "(", "ratios", ")", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "_num_anchors", "=", "self", ".", "_anchors", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_layer._ProposalLayer.forward": [[49, 162], ["bbox_deltas.view.view.size", "numpy.meshgrid", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous().type_as().float", "shifts.contiguous().type_as().float.contiguous().type_as().float.size", "proposal_layer._ProposalLayer._anchors.type_as", "anchors.view().expand.view().expand.view().expand", "bbox_deltas.view.view.permute().contiguous", "bbox_deltas.view.view.view", "scores.view.view.permute().contiguous", "scores.view.view.view", "bbox_transform.bbox_transform_inv", "bbox_transform.clip_boxes", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "scores.view.view.new().zero_", "range", "scores.view.view.size", "scores.view.view.size", "numpy.arange", "numpy.arange", "numpy.vstack().transpose", "proposal_layer._ProposalLayer._anchors.view", "shifts.contiguous().type_as().float.contiguous().type_as().float.view", "scores_single[].view", "model.nms.nms_wrapper.nms", "keep_idx_i.long().view.long().view.long().view", "proposals_single.size", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous().type_as", "anchors.view().expand.view().expand.view", "bbox_deltas.view.view.permute", "scores.view.view.permute", "scores.view.view.new", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.vstack", "scores_keep.numel", "keep_idx_i.long().view.long().view.long", "shifts.contiguous().type_as().float.contiguous().type_as().float.contiguous", "shift_x.ravel", "shift_y.ravel", "shift_x.ravel", "shift_y.ravel"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_transform_inv", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.clip_boxes", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.nms.nms_wrapper.nms"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "# Algorithm:", "\n", "#", "\n", "# for each (H, W) location i", "\n", "#   generate A anchor boxes centered on cell i", "\n", "#   apply predicted bbox deltas at cell i to each of the A anchors", "\n", "# clip predicted boxes to image", "\n", "# remove predicted boxes with either height or width < threshold", "\n", "# sort all (proposal, score) pairs by score from highest to lowest", "\n", "# take top pre_nms_topN proposals before NMS", "\n", "# apply NMS with threshold 0.7 to remaining proposals", "\n", "# take after_nms_topN proposals after NMS", "\n", "# return the top proposals (-> RoIs top, scores top)", "\n", "\n", "\n", "# the first set of _num_anchors channels are bg probs", "\n", "# the second set are the fg probs", "\n", "        ", "scores", "=", "input", "[", "0", "]", "[", ":", ",", "self", ".", "_num_anchors", ":", ",", ":", ",", ":", "]", "\n", "bbox_deltas", "=", "input", "[", "1", "]", "\n", "im_info", "=", "input", "[", "2", "]", "\n", "cfg_key", "=", "input", "[", "3", "]", "\n", "\n", "pre_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_PRE_NMS_TOP_N", "\n", "post_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_POST_NMS_TOP_N", "\n", "nms_thresh", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_NMS_THRESH", "\n", "min_size", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_MIN_SIZE", "\n", "\n", "batch_size", "=", "bbox_deltas", ".", "size", "(", "0", ")", "\n", "\n", "feat_height", ",", "feat_width", "=", "scores", ".", "size", "(", "2", ")", ",", "scores", ".", "size", "(", "3", ")", "\n", "shift_x", "=", "np", ".", "arange", "(", "0", ",", "feat_width", ")", "*", "self", ".", "_feat_stride", "\n", "shift_y", "=", "np", ".", "arange", "(", "0", ",", "feat_height", ")", "*", "self", ".", "_feat_stride", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "shifts", "=", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "(", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ",", "\n", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ")", ")", ".", "transpose", "(", ")", ")", "\n", "shifts", "=", "shifts", ".", "contiguous", "(", ")", ".", "type_as", "(", "scores", ")", ".", "float", "(", ")", "\n", "\n", "A", "=", "self", ".", "_num_anchors", "\n", "K", "=", "shifts", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "_anchors", "=", "self", ".", "_anchors", ".", "type_as", "(", "scores", ")", "\n", "# anchors = self._anchors.view(1, A, 4) + shifts.view(1, K, 4).permute(1, 0, 2).contiguous()", "\n", "anchors", "=", "self", ".", "_anchors", ".", "view", "(", "1", ",", "A", ",", "4", ")", "+", "shifts", ".", "view", "(", "K", ",", "1", ",", "4", ")", "\n", "anchors", "=", "anchors", ".", "view", "(", "1", ",", "K", "*", "A", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "K", "*", "A", ",", "4", ")", "\n", "\n", "# Transpose and reshape predicted bbox transformations to get them", "\n", "# into the same order as the anchors:", "\n", "\n", "bbox_deltas", "=", "bbox_deltas", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "bbox_deltas", "=", "bbox_deltas", ".", "view", "(", "batch_size", ",", "-", "1", ",", "4", ")", "\n", "\n", "# Same story for the scores:", "\n", "scores", "=", "scores", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "scores", "=", "scores", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "# Convert anchors into proposals via bbox transformations", "\n", "proposals", "=", "bbox_transform_inv", "(", "anchors", ",", "bbox_deltas", ",", "batch_size", ")", "\n", "\n", "# 2. clip predicted boxes to image", "\n", "proposals", "=", "clip_boxes", "(", "proposals", ",", "im_info", ",", "batch_size", ")", "\n", "# proposals = clip_boxes_batch(proposals, im_info, batch_size)", "\n", "\n", "# assign the score to 0 if it's non keep.", "\n", "# keep = self._filter_boxes(proposals, min_size * im_info[:, 2])", "\n", "\n", "# trim keep index to make it euqal over batch", "\n", "# keep_idx = torch.cat(tuple(keep_idx), 0)", "\n", "\n", "# scores_keep = scores.view(-1)[keep_idx].view(batch_size, trim_size)", "\n", "# proposals_keep = proposals.view(-1, 4)[keep_idx, :].contiguous().view(batch_size, trim_size, 4)", "\n", "\n", "# _, order = torch.sort(scores_keep, 1, True)", "\n", "\n", "scores_keep", "=", "scores", "\n", "proposals_keep", "=", "proposals", "\n", "_", ",", "order", "=", "torch", ".", "sort", "(", "scores_keep", ",", "1", ",", "True", ")", "\n", "\n", "output", "=", "scores", ".", "new", "(", "batch_size", ",", "post_nms_topN", ",", "5", ")", ".", "zero_", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# # 3. remove predicted boxes with either height or width < threshold", "\n", "# # (NOTE: convert min_size to input image scale stored in im_info[2])", "\n", "            ", "proposals_single", "=", "proposals_keep", "[", "i", "]", "\n", "scores_single", "=", "scores_keep", "[", "i", "]", "\n", "\n", "# # 4. sort all (proposal, score) pairs by score from highest to lowest", "\n", "# # 5. take top pre_nms_topN (e.g. 6000)", "\n", "order_single", "=", "order", "[", "i", "]", "\n", "\n", "if", "pre_nms_topN", ">", "0", "and", "pre_nms_topN", "<", "scores_keep", ".", "numel", "(", ")", ":", "\n", "                ", "order_single", "=", "order_single", "[", ":", "pre_nms_topN", "]", "\n", "\n", "", "proposals_single", "=", "proposals_single", "[", "order_single", ",", ":", "]", "\n", "scores_single", "=", "scores_single", "[", "order_single", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# 6. apply nms (e.g. threshold = 0.7)", "\n", "# 7. take after_nms_topN (e.g. 300)", "\n", "# 8. return the top proposals (-> RoIs top)", "\n", "\n", "keep_idx_i", "=", "nms", "(", "torch", ".", "cat", "(", "(", "proposals_single", ",", "scores_single", ")", ",", "1", ")", ",", "nms_thresh", ",", "force_cpu", "=", "not", "cfg", ".", "USE_GPU_NMS", ")", "\n", "keep_idx_i", "=", "keep_idx_i", ".", "long", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "post_nms_topN", ">", "0", ":", "\n", "                ", "keep_idx_i", "=", "keep_idx_i", "[", ":", "post_nms_topN", "]", "\n", "", "proposals_single", "=", "proposals_single", "[", "keep_idx_i", ",", ":", "]", "\n", "scores_single", "=", "scores_single", "[", "keep_idx_i", ",", ":", "]", "\n", "\n", "# padding 0 at the end.", "\n", "num_proposal", "=", "proposals_single", ".", "size", "(", "0", ")", "\n", "output", "[", "i", ",", ":", ",", "0", "]", "=", "i", "\n", "output", "[", "i", ",", ":", "num_proposal", ",", "1", ":", "]", "=", "proposals_single", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_layer._ProposalLayer.backward": [[163, 166], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "top", ",", "propagate_down", ",", "bottom", ")", ":", "\n", "        ", "\"\"\"This layer does not propagate gradients.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_layer._ProposalLayer.reshape": [[167, 170], ["None"], "methods", ["None"], ["", "def", "reshape", "(", "self", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "\"\"\"Reshaping happens during the call to forward.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_layer._ProposalLayer._filter_boxes": [[171, 177], ["min_size.view().expand_as", "min_size.view().expand_as", "min_size.view", "min_size.view"], "methods", ["None"], ["", "def", "_filter_boxes", "(", "self", ",", "boxes", ",", "min_size", ")", ":", "\n", "        ", "\"\"\"Remove all boxes with any side smaller than min_size.\"\"\"", "\n", "ws", "=", "boxes", "[", ":", ",", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", ":", ",", "0", "]", "+", "1", "\n", "hs", "=", "boxes", "[", ":", ",", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", ":", ",", "1", "]", "+", "1", "\n", "keep", "=", "(", "(", "ws", ">=", "min_size", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand_as", "(", "ws", ")", ")", "&", "(", "hs", ">=", "min_size", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand_as", "(", "hs", ")", ")", ")", "\n", "return", "keep", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_transform": [[15, 35], ["torch.log", "torch.log", "torch.stack"], "function", ["None"], ["def", "bbox_transform", "(", "ex_rois", ",", "gt_rois", ")", ":", "\n", "    ", "ex_widths", "=", "ex_rois", "[", ":", ",", "2", "]", "-", "ex_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "ex_heights", "=", "ex_rois", "[", ":", ",", "3", "]", "-", "ex_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ex_ctr_x", "=", "ex_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "ex_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "gt_rois", "[", ":", ",", "2", "]", "-", "gt_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "gt_heights", "=", "gt_rois", "[", ":", ",", "3", "]", "-", "gt_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "gt_ctr_x", "=", "gt_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "gt_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "torch", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "torch", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "\n", "targets", "=", "torch", ".", "stack", "(", "\n", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ",", "1", ")", "\n", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_transform_batch": [[36, 76], ["torch.stack", "ex_rois.dim", "torch.log", "torch.log", "ex_rois.dim", "torch.log", "torch.log", "ValueError", "ex_ctr_x.view().expand_as", "ex_ctr_y.view().expand_as", "ex_widths.view().expand_as", "ex_heights.view().expand_as", "ex_ctr_x.view", "ex_ctr_y.view", "ex_widths.view", "ex_heights.view"], "function", ["None"], ["", "def", "bbox_transform_batch", "(", "ex_rois", ",", "gt_rois", ")", ":", "\n", "\n", "    ", "if", "ex_rois", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "ex_widths", "=", "ex_rois", "[", ":", ",", "2", "]", "-", "ex_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "ex_heights", "=", "ex_rois", "[", ":", ",", "3", "]", "-", "ex_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ex_ctr_x", "=", "ex_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "ex_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "gt_rois", "[", ":", ",", ":", ",", "2", "]", "-", "gt_rois", "[", ":", ",", ":", ",", "0", "]", "+", "1.0", "\n", "gt_heights", "=", "gt_rois", "[", ":", ",", ":", ",", "3", "]", "-", "gt_rois", "[", ":", ",", ":", ",", "1", "]", "+", "1.0", "\n", "gt_ctr_x", "=", "gt_rois", "[", ":", ",", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "gt_rois", "[", ":", ",", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "ex_ctr_x", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "gt_ctr_x", ")", ")", "/", "ex_widths", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "ex_ctr_y", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "gt_ctr_y", ")", ")", "/", "ex_heights", "\n", "targets_dw", "=", "torch", ".", "log", "(", "gt_widths", "/", "ex_widths", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "gt_widths", ")", ")", "\n", "targets_dh", "=", "torch", ".", "log", "(", "gt_heights", "/", "ex_heights", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "gt_heights", ")", ")", "\n", "\n", "", "elif", "ex_rois", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "ex_widths", "=", "ex_rois", "[", ":", ",", ":", ",", "2", "]", "-", "ex_rois", "[", ":", ",", ":", ",", "0", "]", "+", "1.0", "\n", "ex_heights", "=", "ex_rois", "[", ":", ",", ":", ",", "3", "]", "-", "ex_rois", "[", ":", ",", ":", ",", "1", "]", "+", "1.0", "\n", "ex_ctr_x", "=", "ex_rois", "[", ":", ",", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "ex_rois", "[", ":", ",", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "gt_rois", "[", ":", ",", ":", ",", "2", "]", "-", "gt_rois", "[", ":", ",", ":", ",", "0", "]", "+", "1.0", "\n", "gt_heights", "=", "gt_rois", "[", ":", ",", ":", ",", "3", "]", "-", "gt_rois", "[", ":", ",", ":", ",", "1", "]", "+", "1.0", "\n", "gt_ctr_x", "=", "gt_rois", "[", ":", ",", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "gt_rois", "[", ":", ",", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "torch", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "torch", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'ex_roi input dimension is not correct.'", ")", "\n", "\n", "", "targets", "=", "torch", ".", "stack", "(", "\n", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ",", "2", ")", "\n", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_transform_inv": [[77, 104], ["deltas.clone", "ctr_x.unsqueeze", "ctr_y.unsqueeze", "torch.exp", "widths.unsqueeze", "torch.exp", "heights.unsqueeze", "widths.unsqueeze", "heights.unsqueeze"], "function", ["None"], ["", "def", "bbox_transform_inv", "(", "boxes", ",", "deltas", ",", "batch_size", ")", ":", "\n", "    ", "widths", "=", "boxes", "[", ":", ",", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", ":", ",", "0", "]", "+", "1.0", "\n", "heights", "=", "boxes", "[", ":", ",", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", ":", ",", "1", "]", "+", "1.0", "\n", "ctr_x", "=", "boxes", "[", ":", ",", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "dx", "=", "deltas", "[", ":", ",", ":", ",", "0", ":", ":", "4", "]", "\n", "dy", "=", "deltas", "[", ":", ",", ":", ",", "1", ":", ":", "4", "]", "\n", "dw", "=", "deltas", "[", ":", ",", ":", ",", "2", ":", ":", "4", "]", "\n", "dh", "=", "deltas", "[", ":", ",", ":", ",", "3", ":", ":", "4", "]", "\n", "\n", "pred_ctr_x", "=", "dx", "*", "widths", ".", "unsqueeze", "(", "2", ")", "+", "ctr_x", ".", "unsqueeze", "(", "2", ")", "\n", "pred_ctr_y", "=", "dy", "*", "heights", ".", "unsqueeze", "(", "2", ")", "+", "ctr_y", ".", "unsqueeze", "(", "2", ")", "\n", "pred_w", "=", "torch", ".", "exp", "(", "dw", ")", "*", "widths", ".", "unsqueeze", "(", "2", ")", "\n", "pred_h", "=", "torch", ".", "exp", "(", "dh", ")", "*", "heights", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "pred_boxes", "=", "deltas", ".", "clone", "(", ")", "\n", "# x1", "\n", "pred_boxes", "[", ":", ",", ":", ",", "0", ":", ":", "4", "]", "=", "pred_ctr_x", "-", "0.5", "*", "pred_w", "\n", "# y1", "\n", "pred_boxes", "[", ":", ",", ":", ",", "1", ":", ":", "4", "]", "=", "pred_ctr_y", "-", "0.5", "*", "pred_h", "\n", "# x2", "\n", "pred_boxes", "[", ":", ",", ":", ",", "2", ":", ":", "4", "]", "=", "pred_ctr_x", "+", "0.5", "*", "pred_w", "\n", "# y2", "\n", "pred_boxes", "[", ":", ",", ":", ",", "3", ":", ":", "4", "]", "=", "pred_ctr_y", "+", "0.5", "*", "pred_h", "\n", "\n", "return", "pred_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.clip_boxes_batch": [[105, 124], ["boxes.size"], "function", ["None"], ["", "def", "clip_boxes_batch", "(", "boxes", ",", "im_shape", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"\n    Clip boxes to image boundaries.\n    \"\"\"", "\n", "num_rois", "=", "boxes", ".", "size", "(", "1", ")", "\n", "\n", "boxes", "[", "boxes", "<", "0", "]", "=", "0", "\n", "# batch_x = (im_shape[:,0]-1).view(batch_size, 1).expand(batch_size, num_rois)", "\n", "# batch_y = (im_shape[:,1]-1).view(batch_size, 1).expand(batch_size, num_rois)", "\n", "\n", "batch_x", "=", "im_shape", "[", ":", ",", "1", "]", "-", "1", "\n", "batch_y", "=", "im_shape", "[", ":", ",", "0", "]", "-", "1", "\n", "\n", "boxes", "[", ":", ",", ":", ",", "0", "]", "[", "boxes", "[", ":", ",", ":", ",", "0", "]", ">", "batch_x", "]", "=", "batch_x", "\n", "boxes", "[", ":", ",", ":", ",", "1", "]", "[", "boxes", "[", ":", ",", ":", ",", "1", "]", ">", "batch_y", "]", "=", "batch_y", "\n", "boxes", "[", ":", ",", ":", ",", "2", "]", "[", "boxes", "[", ":", ",", ":", ",", "2", "]", ">", "batch_x", "]", "=", "batch_x", "\n", "boxes", "[", ":", ",", ":", ",", "3", "]", "[", "boxes", "[", ":", ",", ":", ",", "3", "]", ">", "batch_y", "]", "=", "batch_y", "\n", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.clip_boxes": [[125, 134], ["range", "boxes[].clamp_", "boxes[].clamp_", "boxes[].clamp_", "boxes[].clamp_"], "function", ["None"], ["", "def", "clip_boxes", "(", "boxes", ",", "im_shape", ",", "batch_size", ")", ":", "\n", "\n", "    ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "boxes", "[", "i", ",", ":", ",", "0", ":", ":", "4", "]", ".", "clamp_", "(", "0", ",", "im_shape", "[", "i", ",", "1", "]", "-", "1", ")", "\n", "boxes", "[", "i", ",", ":", ",", "1", ":", ":", "4", "]", ".", "clamp_", "(", "0", ",", "im_shape", "[", "i", ",", "0", "]", "-", "1", ")", "\n", "boxes", "[", "i", ",", ":", ",", "2", ":", ":", "4", "]", ".", "clamp_", "(", "0", ",", "im_shape", "[", "i", ",", "1", "]", "-", "1", ")", "\n", "boxes", "[", "i", ",", ":", ",", "3", ":", ":", "4", "]", ".", "clamp_", "(", "0", ",", "im_shape", "[", "i", ",", "0", "]", "-", "1", ")", "\n", "\n", "", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_overlaps": [[136, 167], ["anchors.size", "gt_boxes.size", "anchors.view().expand", "gt_boxes.view().expand", "anchors.view", "gt_boxes.view", "torch.min", "torch.max", "torch.min", "torch.max"], "function", ["None"], ["", "def", "bbox_overlaps", "(", "anchors", ",", "gt_boxes", ")", ":", "\n", "    ", "\"\"\"\n    anchors: (N, 4) ndarray of float\n    gt_boxes: (K, 4) ndarray of float\n\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "N", "=", "anchors", ".", "size", "(", "0", ")", "\n", "K", "=", "gt_boxes", ".", "size", "(", "0", ")", "\n", "\n", "gt_boxes_area", "=", "(", "(", "gt_boxes", "[", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "\n", "(", "gt_boxes", "[", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", "1", "]", "+", "1", ")", ")", ".", "view", "(", "1", ",", "K", ")", "\n", "\n", "anchors_area", "=", "(", "(", "anchors", "[", ":", ",", "2", "]", "-", "anchors", "[", ":", ",", "0", "]", "+", "1", ")", "*", "\n", "(", "anchors", "[", ":", ",", "3", "]", "-", "anchors", "[", ":", ",", "1", "]", "+", "1", ")", ")", ".", "view", "(", "N", ",", "1", ")", "\n", "\n", "boxes", "=", "anchors", ".", "view", "(", "N", ",", "1", ",", "4", ")", ".", "expand", "(", "N", ",", "K", ",", "4", ")", "\n", "query_boxes", "=", "gt_boxes", ".", "view", "(", "1", ",", "K", ",", "4", ")", ".", "expand", "(", "N", ",", "K", ",", "4", ")", "\n", "\n", "iw", "=", "(", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", "2", "]", ",", "query_boxes", "[", ":", ",", ":", ",", "2", "]", ")", "-", "\n", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", "0", "]", ",", "query_boxes", "[", ":", ",", ":", ",", "0", "]", ")", "+", "1", ")", "\n", "iw", "[", "iw", "<", "0", "]", "=", "0", "\n", "\n", "ih", "=", "(", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", "3", "]", ",", "query_boxes", "[", ":", ",", ":", ",", "3", "]", ")", "-", "\n", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", "1", "]", ",", "query_boxes", "[", ":", ",", ":", ",", "1", "]", ")", "+", "1", ")", "\n", "ih", "[", "ih", "<", "0", "]", "=", "0", "\n", "\n", "ua", "=", "anchors_area", "+", "gt_boxes_area", "-", "(", "iw", "*", "ih", ")", "\n", "overlaps", "=", "iw", "*", "ih", "/", "ua", "\n", "\n", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_overlaps_batch": [[168, 258], ["gt_boxes[].contiguous.size", "anchors[].contiguous.dim", "anchors[].contiguous.size", "gt_boxes[].contiguous.size", "anchors[].contiguous.view().expand().contiguous", "gt_boxes[].contiguous", "anchors[].contiguous.view().expand", "gt_boxes[].contiguous.view().expand", "overlaps.masked_fill_", "overlaps.masked_fill_", "gt_area_zero.view().expand", "anchors_area_zero.view().expand", "anchors[].contiguous.dim", "anchors[].contiguous.size", "gt_boxes[].contiguous.size", "gt_boxes[].contiguous", "anchors[].contiguous.view().expand", "gt_boxes[].contiguous.view().expand", "overlaps.masked_fill_", "overlaps.masked_fill_", "ValueError", "anchors[].contiguous.view().expand", "anchors[].contiguous.view", "gt_boxes[].contiguous.view", "torch.min", "torch.max", "torch.min", "torch.max", "anchors[].contiguous.size", "anchors[].contiguous", "anchors[].contiguous", "gt_area_zero.view().expand", "anchors_area_zero.view().expand", "gt_area_zero.view", "anchors_area_zero.view", "anchors[].contiguous.view", "gt_boxes[].contiguous.view", "torch.min", "torch.max", "torch.min", "torch.max", "anchors[].contiguous.view", "gt_area_zero.view", "anchors_area_zero.view"], "function", ["None"], ["", "def", "bbox_overlaps_batch", "(", "anchors", ",", "gt_boxes", ")", ":", "\n", "    ", "\"\"\"\n    anchors: (N, 4) ndarray of float\n    gt_boxes: (b, K, 5) ndarray of float\n\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "batch_size", "=", "gt_boxes", ".", "size", "(", "0", ")", "\n", "\n", "\n", "if", "anchors", ".", "dim", "(", ")", "==", "2", ":", "\n", "\n", "        ", "N", "=", "anchors", ".", "size", "(", "0", ")", "\n", "K", "=", "gt_boxes", ".", "size", "(", "1", ")", "\n", "\n", "anchors", "=", "anchors", ".", "view", "(", "1", ",", "N", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", ":", ",", ":", ",", ":", "4", "]", ".", "contiguous", "(", ")", "\n", "\n", "\n", "gt_boxes_x", "=", "(", "gt_boxes", "[", ":", ",", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", ":", ",", "0", "]", "+", "1", ")", "\n", "gt_boxes_y", "=", "(", "gt_boxes", "[", ":", ",", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", ":", ",", "1", "]", "+", "1", ")", "\n", "gt_boxes_area", "=", "(", "gt_boxes_x", "*", "gt_boxes_y", ")", ".", "view", "(", "batch_size", ",", "1", ",", "K", ")", "\n", "\n", "anchors_boxes_x", "=", "(", "anchors", "[", ":", ",", ":", ",", "2", "]", "-", "anchors", "[", ":", ",", ":", ",", "0", "]", "+", "1", ")", "\n", "anchors_boxes_y", "=", "(", "anchors", "[", ":", ",", ":", ",", "3", "]", "-", "anchors", "[", ":", ",", ":", ",", "1", "]", "+", "1", ")", "\n", "anchors_area", "=", "(", "anchors_boxes_x", "*", "anchors_boxes_y", ")", ".", "view", "(", "batch_size", ",", "N", ",", "1", ")", "\n", "\n", "gt_area_zero", "=", "(", "gt_boxes_x", "==", "1", ")", "&", "(", "gt_boxes_y", "==", "1", ")", "\n", "anchors_area_zero", "=", "(", "anchors_boxes_x", "==", "1", ")", "&", "(", "anchors_boxes_y", "==", "1", ")", "\n", "\n", "boxes", "=", "anchors", ".", "view", "(", "batch_size", ",", "N", ",", "1", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ",", "4", ")", "\n", "query_boxes", "=", "gt_boxes", ".", "view", "(", "batch_size", ",", "1", ",", "K", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ",", "4", ")", "\n", "\n", "iw", "=", "(", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "2", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "2", "]", ")", "-", "\n", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "+", "1", ")", "\n", "iw", "[", "iw", "<", "0", "]", "=", "0", "\n", "\n", "ih", "=", "(", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "3", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "3", "]", ")", "-", "\n", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "1", "]", ")", "+", "1", ")", "\n", "ih", "[", "ih", "<", "0", "]", "=", "0", "\n", "ua", "=", "anchors_area", "+", "gt_boxes_area", "-", "(", "iw", "*", "ih", ")", "\n", "overlaps", "=", "iw", "*", "ih", "/", "ua", "\n", "\n", "# mask the overlap here.", "\n", "overlaps", ".", "masked_fill_", "(", "gt_area_zero", ".", "view", "(", "batch_size", ",", "1", ",", "K", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ")", ",", "0", ")", "\n", "overlaps", ".", "masked_fill_", "(", "anchors_area_zero", ".", "view", "(", "batch_size", ",", "N", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ")", ",", "-", "1", ")", "\n", "\n", "", "elif", "anchors", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "N", "=", "anchors", ".", "size", "(", "1", ")", "\n", "K", "=", "gt_boxes", ".", "size", "(", "1", ")", "\n", "\n", "if", "anchors", ".", "size", "(", "2", ")", "==", "4", ":", "\n", "            ", "anchors", "=", "anchors", "[", ":", ",", ":", ",", ":", "4", "]", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "anchors", "=", "anchors", "[", ":", ",", ":", ",", "1", ":", "5", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "gt_boxes", "=", "gt_boxes", "[", ":", ",", ":", ",", ":", "4", "]", ".", "contiguous", "(", ")", "\n", "\n", "gt_boxes_x", "=", "(", "gt_boxes", "[", ":", ",", ":", ",", "2", "]", "-", "gt_boxes", "[", ":", ",", ":", ",", "0", "]", "+", "1", ")", "\n", "gt_boxes_y", "=", "(", "gt_boxes", "[", ":", ",", ":", ",", "3", "]", "-", "gt_boxes", "[", ":", ",", ":", ",", "1", "]", "+", "1", ")", "\n", "gt_boxes_area", "=", "(", "gt_boxes_x", "*", "gt_boxes_y", ")", ".", "view", "(", "batch_size", ",", "1", ",", "K", ")", "\n", "\n", "anchors_boxes_x", "=", "(", "anchors", "[", ":", ",", ":", ",", "2", "]", "-", "anchors", "[", ":", ",", ":", ",", "0", "]", "+", "1", ")", "\n", "anchors_boxes_y", "=", "(", "anchors", "[", ":", ",", ":", ",", "3", "]", "-", "anchors", "[", ":", ",", ":", ",", "1", "]", "+", "1", ")", "\n", "anchors_area", "=", "(", "anchors_boxes_x", "*", "anchors_boxes_y", ")", ".", "view", "(", "batch_size", ",", "N", ",", "1", ")", "\n", "\n", "gt_area_zero", "=", "(", "gt_boxes_x", "==", "1", ")", "&", "(", "gt_boxes_y", "==", "1", ")", "\n", "anchors_area_zero", "=", "(", "anchors_boxes_x", "==", "1", ")", "&", "(", "anchors_boxes_y", "==", "1", ")", "\n", "\n", "boxes", "=", "anchors", ".", "view", "(", "batch_size", ",", "N", ",", "1", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ",", "4", ")", "\n", "query_boxes", "=", "gt_boxes", ".", "view", "(", "batch_size", ",", "1", ",", "K", ",", "4", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ",", "4", ")", "\n", "\n", "iw", "=", "(", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "2", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "2", "]", ")", "-", "\n", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "+", "1", ")", "\n", "iw", "[", "iw", "<", "0", "]", "=", "0", "\n", "\n", "ih", "=", "(", "torch", ".", "min", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "3", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "3", "]", ")", "-", "\n", "torch", ".", "max", "(", "boxes", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "query_boxes", "[", ":", ",", ":", ",", ":", ",", "1", "]", ")", "+", "1", ")", "\n", "ih", "[", "ih", "<", "0", "]", "=", "0", "\n", "ua", "=", "anchors_area", "+", "gt_boxes_area", "-", "(", "iw", "*", "ih", ")", "\n", "\n", "overlaps", "=", "iw", "*", "ih", "/", "ua", "\n", "\n", "# mask the overlap here.", "\n", "overlaps", ".", "masked_fill_", "(", "gt_area_zero", ".", "view", "(", "batch_size", ",", "1", ",", "K", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ")", ",", "0", ")", "\n", "overlaps", ".", "masked_fill_", "(", "anchors_area_zero", ".", "view", "(", "batch_size", ",", "N", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "N", ",", "K", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'anchors input dimension is not correct.'", ")", "\n", "\n", "", "return", "overlaps", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer.__init__": [[26, 32], ["torch.Module.__init__", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["def", "__init__", "(", "self", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", "_ProposalTargetLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_classes", "=", "nclasses", "\n", "self", ".", "BBOX_NORMALIZE_MEANS", "=", "torch", ".", "FloatTensor", "(", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_MEANS", ")", "\n", "self", ".", "BBOX_NORMALIZE_STDS", "=", "torch", ".", "FloatTensor", "(", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_STDS", ")", "\n", "self", ".", "BBOX_INSIDE_WEIGHTS", "=", "torch", ".", "FloatTensor", "(", "cfg", ".", "TRAIN", ".", "BBOX_INSIDE_WEIGHTS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer.forward": [[33, 57], ["proposal_target_layer_cascade._ProposalTargetLayer.BBOX_NORMALIZE_MEANS.type_as", "proposal_target_layer_cascade._ProposalTargetLayer.BBOX_NORMALIZE_STDS.type_as", "proposal_target_layer_cascade._ProposalTargetLayer.BBOX_INSIDE_WEIGHTS.type_as", "gt_boxes.new().zero_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "int", "proposal_target_layer_cascade._ProposalTargetLayer._sample_rois_pytorch", "numpy.round", "numpy.round", "gt_boxes.new", "gt_boxes.size"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer._sample_rois_pytorch"], ["", "def", "forward", "(", "self", ",", "all_rois", ",", "gt_boxes", ",", "num_boxes", ")", ":", "\n", "\n", "        ", "self", ".", "BBOX_NORMALIZE_MEANS", "=", "self", ".", "BBOX_NORMALIZE_MEANS", ".", "type_as", "(", "gt_boxes", ")", "\n", "self", ".", "BBOX_NORMALIZE_STDS", "=", "self", ".", "BBOX_NORMALIZE_STDS", ".", "type_as", "(", "gt_boxes", ")", "\n", "self", ".", "BBOX_INSIDE_WEIGHTS", "=", "self", ".", "BBOX_INSIDE_WEIGHTS", ".", "type_as", "(", "gt_boxes", ")", "\n", "\n", "gt_boxes_append", "=", "gt_boxes", ".", "new", "(", "gt_boxes", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "gt_boxes_append", "[", ":", ",", ":", ",", "1", ":", "5", "]", "=", "gt_boxes", "[", ":", ",", ":", ",", ":", "4", "]", "\n", "\n", "# Include ground-truth boxes in the set of candidate rois", "\n", "all_rois", "=", "torch", ".", "cat", "(", "[", "all_rois", ",", "gt_boxes_append", "]", ",", "1", ")", "\n", "\n", "num_images", "=", "1", "\n", "rois_per_image", "=", "int", "(", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "/", "num_images", ")", "\n", "fg_rois_per_image", "=", "int", "(", "np", ".", "round", "(", "cfg", ".", "TRAIN", ".", "FG_FRACTION", "*", "rois_per_image", ")", ")", "\n", "fg_rois_per_image", "=", "1", "if", "fg_rois_per_image", "==", "0", "else", "fg_rois_per_image", "\n", "\n", "labels", ",", "rois", ",", "bbox_targets", ",", "bbox_inside_weights", "=", "self", ".", "_sample_rois_pytorch", "(", "\n", "all_rois", ",", "gt_boxes", ",", "fg_rois_per_image", ",", "\n", "rois_per_image", ",", "self", ".", "_num_classes", ")", "\n", "\n", "bbox_outside_weights", "=", "(", "bbox_inside_weights", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "return", "rois", ",", "labels", ",", "bbox_targets", ",", "bbox_inside_weights", ",", "bbox_outside_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer.backward": [[58, 61], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "top", ",", "propagate_down", ",", "bottom", ")", ":", "\n", "        ", "\"\"\"This layer does not propagate gradients.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer.reshape": [[62, 65], ["None"], "methods", ["None"], ["", "def", "reshape", "(", "self", ",", "bottom", ",", "top", ")", ":", "\n", "        ", "\"\"\"Reshaping happens during the call to forward.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer._get_bbox_regression_labels_pytorch": [[66, 94], ["labels_batch.size", "labels_batch.size", "bbox_target_data.new().zero_", "bbox_target_data.new().zero_", "range", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "range", "bbox_target_data.new", "bbox_target_data.new", "clss[].sum", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "bbox_target_data.new().zero_.size", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["None"], ["", "def", "_get_bbox_regression_labels_pytorch", "(", "self", ",", "bbox_target_data", ",", "labels_batch", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"Bounding-box regression targets (bbox_target_data) are stored in a\n        compact form b x N x (class, tx, ty, tw, th)\n\n        This function expands those targets into the 4-of-4*K representation used\n        by the network (i.e. only one class has non-zero targets).\n\n        Returns:\n            bbox_target (ndarray): b x N x 4K blob of regression targets\n            bbox_inside_weights (ndarray): b x N x 4K blob of loss weights\n        \"\"\"", "\n", "batch_size", "=", "labels_batch", ".", "size", "(", "0", ")", "\n", "rois_per_image", "=", "labels_batch", ".", "size", "(", "1", ")", "\n", "clss", "=", "labels_batch", "\n", "bbox_targets", "=", "bbox_target_data", ".", "new", "(", "batch_size", ",", "rois_per_image", ",", "4", ")", ".", "zero_", "(", ")", "\n", "bbox_inside_weights", "=", "bbox_target_data", ".", "new", "(", "bbox_targets", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "# assert clss[b].sum() > 0", "\n", "            ", "if", "clss", "[", "b", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "inds", "=", "torch", ".", "nonzero", "(", "clss", "[", "b", "]", ">", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "inds", ".", "numel", "(", ")", ")", ":", "\n", "                ", "ind", "=", "inds", "[", "i", "]", "\n", "bbox_targets", "[", "b", ",", "ind", ",", ":", "]", "=", "bbox_target_data", "[", "b", ",", "ind", ",", ":", "]", "\n", "bbox_inside_weights", "[", "b", ",", "ind", ",", ":", "]", "=", "self", ".", "BBOX_INSIDE_WEIGHTS", "\n", "\n", "", "", "return", "bbox_targets", ",", "bbox_inside_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer._compute_targets_pytorch": [[96, 114], ["ex_rois.size", "ex_rois.size", "bbox_transform.bbox_transform_batch", "ex_rois.size", "gt_rois.size", "ex_rois.size", "gt_rois.size", "proposal_target_layer_cascade._ProposalTargetLayer.BBOX_NORMALIZE_STDS.expand_as", "proposal_target_layer_cascade._ProposalTargetLayer.BBOX_NORMALIZE_MEANS.expand_as"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_transform_batch"], ["", "def", "_compute_targets_pytorch", "(", "self", ",", "ex_rois", ",", "gt_rois", ")", ":", "\n", "        ", "\"\"\"Compute bounding-box regression targets for an image.\"\"\"", "\n", "\n", "assert", "ex_rois", ".", "size", "(", "1", ")", "==", "gt_rois", ".", "size", "(", "1", ")", "\n", "assert", "ex_rois", ".", "size", "(", "2", ")", "==", "4", "\n", "assert", "gt_rois", ".", "size", "(", "2", ")", "==", "4", "\n", "\n", "batch_size", "=", "ex_rois", ".", "size", "(", "0", ")", "\n", "rois_per_image", "=", "ex_rois", ".", "size", "(", "1", ")", "\n", "\n", "targets", "=", "bbox_transform_batch", "(", "ex_rois", ",", "gt_rois", ")", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_TARGETS_PRECOMPUTED", ":", "\n", "# Optionally normalize targets by a precomputed mean and stdev", "\n", "            ", "targets", "=", "(", "(", "targets", "-", "self", ".", "BBOX_NORMALIZE_MEANS", ".", "expand_as", "(", "targets", ")", ")", "\n", "/", "self", ".", "BBOX_NORMALIZE_STDS", ".", "expand_as", "(", "targets", ")", ")", "\n", "\n", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer._sample_rois_pytorch": [[116, 213], ["bbox_transform.bbox_overlaps_batch", "torch.max", "torch.max", "torch.max", "torch.max", "bbox_transform.bbox_overlaps_batch.size", "bbox_transform.bbox_overlaps_batch.size", "bbox_transform.bbox_overlaps_batch.size", "[].view", "[].view.new().zero_", "all_rois.new().zero_", "all_rois.new().zero_", "range", "proposal_target_layer_cascade._ProposalTargetLayer._compute_targets_pytorch", "proposal_target_layer_cascade._ProposalTargetLayer._get_bbox_regression_labels_pytorch", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "gt_boxes.size", "offset.view().type_as", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view.numel", "torch.nonzero().view.numel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "labels_batch[].copy_", "[].view.new", "all_rois.new", "all_rois.new", "min", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "numpy.floor", "numpy.floor", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "offset.view", "gt_boxes[].contiguous().view", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.floor", "numpy.floor", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "numpy.random.rand", "numpy.random.rand", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "numpy.floor", "numpy.floor", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "torch.from_numpy().type_as().long", "ValueError", "gt_boxes[].contiguous", "offset.view", "numpy.random.rand", "numpy.random.rand", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.rand", "numpy.random.rand", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "torch.from_numpy().type_as", "numpy.random.permutation", "numpy.random.permutation", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.bbox_transform.bbox_overlaps_batch", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer._compute_targets_pytorch", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.proposal_target_layer_cascade._ProposalTargetLayer._get_bbox_regression_labels_pytorch"], ["", "def", "_sample_rois_pytorch", "(", "self", ",", "all_rois", ",", "gt_boxes", ",", "fg_rois_per_image", ",", "rois_per_image", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"Generate a random sample of RoIs comprising foreground and background\n        examples.\n        \"\"\"", "\n", "# overlaps: (rois x gt_boxes)", "\n", "\n", "overlaps", "=", "bbox_overlaps_batch", "(", "all_rois", ",", "gt_boxes", ")", "\n", "\n", "max_overlaps", ",", "gt_assignment", "=", "torch", ".", "max", "(", "overlaps", ",", "2", ")", "\n", "\n", "batch_size", "=", "overlaps", ".", "size", "(", "0", ")", "\n", "num_proposal", "=", "overlaps", ".", "size", "(", "1", ")", "\n", "num_boxes_per_img", "=", "overlaps", ".", "size", "(", "2", ")", "\n", "\n", "offset", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ")", "*", "gt_boxes", ".", "size", "(", "1", ")", "\n", "offset", "=", "offset", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "gt_assignment", ")", "+", "gt_assignment", "\n", "# print(type(gt_boxes[:,:,4].contiguous().view(-1)))", "\n", "labels", "=", "gt_boxes", "[", ":", ",", ":", ",", "4", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "[", "(", "offset", ".", "view", "(", "-", "1", ")", ",", ")", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "# 'Tensor' object has no attribute 'index' \ubb38\uc81c \ubc1c\uc0dd\ud558\uc5ec \uc218\uc815.", "\n", "# print(gt_boxes[:,:,4].contiguous().view(-1))", "\n", "labels_batch", "=", "labels", ".", "new", "(", "batch_size", ",", "rois_per_image", ")", ".", "zero_", "(", ")", "\n", "rois_batch", "=", "all_rois", ".", "new", "(", "batch_size", ",", "rois_per_image", ",", "5", ")", ".", "zero_", "(", ")", "\n", "gt_rois_batch", "=", "all_rois", ".", "new", "(", "batch_size", ",", "rois_per_image", ",", "5", ")", ".", "zero_", "(", ")", "\n", "# Guard against the case when an image has fewer than max_fg_rois_per_image", "\n", "# foreground RoIs", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "\n", "            ", "fg_inds", "=", "torch", ".", "nonzero", "(", "max_overlaps", "[", "i", "]", ">=", "cfg", ".", "TRAIN", ".", "FG_THRESH", ")", ".", "view", "(", "-", "1", ")", "\n", "fg_num_rois", "=", "fg_inds", ".", "numel", "(", ")", "\n", "\n", "# Select background RoIs as those within [BG_THRESH_LO, BG_THRESH_HI)", "\n", "bg_inds", "=", "torch", ".", "nonzero", "(", "(", "max_overlaps", "[", "i", "]", "<", "cfg", ".", "TRAIN", ".", "BG_THRESH_HI", ")", "&", "\n", "(", "max_overlaps", "[", "i", "]", ">=", "cfg", ".", "TRAIN", ".", "BG_THRESH_LO", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "bg_num_rois", "=", "bg_inds", ".", "numel", "(", ")", "\n", "\n", "if", "fg_num_rois", ">", "0", "and", "bg_num_rois", ">", "0", ":", "\n", "# sampling fg", "\n", "                ", "fg_rois_per_this_image", "=", "min", "(", "fg_rois_per_image", ",", "fg_num_rois", ")", "\n", "\n", "# torch.randperm seems has a bug on multi-gpu setting that cause the segfault.", "\n", "# See https://github.com/pytorch/pytorch/issues/1868 for more details.", "\n", "# use numpy instead.", "\n", "#rand_num = torch.randperm(fg_num_rois).long().cuda()", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "permutation", "(", "fg_num_rois", ")", ")", ".", "type_as", "(", "gt_boxes", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "[", ":", "fg_rois_per_this_image", "]", "]", "\n", "\n", "# sampling bg", "\n", "bg_rois_per_this_image", "=", "rois_per_image", "-", "fg_rois_per_this_image", "\n", "\n", "# Seems torch.rand has a bug, it will generate very large number and make an error.", "\n", "# We use numpy rand instead.", "\n", "#rand_num = (torch.rand(bg_rois_per_this_image) * bg_num_rois).long().cuda()", "\n", "rand_num", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "rand", "(", "bg_rois_per_this_image", ")", "*", "bg_num_rois", ")", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "rand_num", ")", ".", "type_as", "(", "gt_boxes", ")", ".", "long", "(", ")", "\n", "bg_inds", "=", "bg_inds", "[", "rand_num", "]", "\n", "\n", "", "elif", "fg_num_rois", ">", "0", "and", "bg_num_rois", "==", "0", ":", "\n", "# sampling fg", "\n", "#rand_num = torch.floor(torch.rand(rois_per_image) * fg_num_rois).long().cuda()", "\n", "                ", "rand_num", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "rand", "(", "rois_per_image", ")", "*", "fg_num_rois", ")", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "rand_num", ")", ".", "type_as", "(", "gt_boxes", ")", ".", "long", "(", ")", "\n", "fg_inds", "=", "fg_inds", "[", "rand_num", "]", "\n", "fg_rois_per_this_image", "=", "rois_per_image", "\n", "bg_rois_per_this_image", "=", "0", "\n", "", "elif", "bg_num_rois", ">", "0", "and", "fg_num_rois", "==", "0", ":", "\n", "# sampling bg", "\n", "#rand_num = torch.floor(torch.rand(rois_per_image) * bg_num_rois).long().cuda()", "\n", "                ", "rand_num", "=", "np", ".", "floor", "(", "np", ".", "random", ".", "rand", "(", "rois_per_image", ")", "*", "bg_num_rois", ")", "\n", "rand_num", "=", "torch", ".", "from_numpy", "(", "rand_num", ")", ".", "type_as", "(", "gt_boxes", ")", ".", "long", "(", ")", "\n", "\n", "bg_inds", "=", "bg_inds", "[", "rand_num", "]", "\n", "bg_rois_per_this_image", "=", "rois_per_image", "\n", "fg_rois_per_this_image", "=", "0", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"bg_num_rois = 0 and fg_num_rois = 0, this should not happen!\"", ")", "\n", "\n", "# The indices that we're selecting (both fg and bg)", "\n", "", "keep_inds", "=", "torch", ".", "cat", "(", "[", "fg_inds", ",", "bg_inds", "]", ",", "0", ")", "\n", "\n", "# Select sampled values from various arrays:", "\n", "labels_batch", "[", "i", "]", ".", "copy_", "(", "labels", "[", "i", "]", "[", "keep_inds", "]", ")", "\n", "\n", "# Clamp labels for the background RoIs to 0", "\n", "if", "fg_rois_per_this_image", "<", "rois_per_image", ":", "\n", "                ", "labels_batch", "[", "i", "]", "[", "fg_rois_per_this_image", ":", "]", "=", "0", "\n", "\n", "", "rois_batch", "[", "i", "]", "=", "all_rois", "[", "i", "]", "[", "keep_inds", "]", "\n", "rois_batch", "[", "i", ",", ":", ",", "0", "]", "=", "i", "\n", "\n", "gt_rois_batch", "[", "i", "]", "=", "gt_boxes", "[", "i", "]", "[", "gt_assignment", "[", "i", "]", "[", "keep_inds", "]", "]", "\n", "\n", "", "bbox_target_data", "=", "self", ".", "_compute_targets_pytorch", "(", "\n", "rois_batch", "[", ":", ",", ":", ",", "1", ":", "5", "]", ",", "gt_rois_batch", "[", ":", ",", ":", ",", ":", "4", "]", ")", "\n", "\n", "bbox_targets", ",", "bbox_inside_weights", "=", "self", ".", "_get_bbox_regression_labels_pytorch", "(", "bbox_target_data", ",", "labels_batch", ",", "num_classes", ")", "\n", "\n", "return", "labels_batch", ",", "rois_batch", ",", "bbox_targets", ",", "bbox_inside_weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors.generate_anchors": [[45, 57], ["generate_anchors._ratio_enum", "numpy.vstack", "numpy.arange", "numpy.array", "generate_anchors._scale_enum", "xrange"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors._ratio_enum", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors._scale_enum"], ["", "def", "generate_anchors", "(", "base_size", "=", "16", ",", "ratios", "=", "[", "0.5", ",", "1", ",", "2", "]", ",", "\n", "scales", "=", "2", "**", "np", ".", "arange", "(", "3", ",", "6", ")", ")", ":", "\n", "    ", "\"\"\"\n    Generate anchor (reference) windows by enumerating aspect ratios X\n    scales wrt a reference (0, 0, 15, 15) window.\n    \"\"\"", "\n", "\n", "base_anchor", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "base_size", ",", "base_size", "]", ")", "-", "1", "\n", "ratio_anchors", "=", "_ratio_enum", "(", "base_anchor", ",", "ratios", ")", "\n", "anchors", "=", "np", ".", "vstack", "(", "[", "_scale_enum", "(", "ratio_anchors", "[", "i", ",", ":", "]", ",", "scales", ")", "\n", "for", "i", "in", "xrange", "(", "ratio_anchors", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors._whctrs": [[58, 68], ["None"], "function", ["None"], ["", "def", "_whctrs", "(", "anchor", ")", ":", "\n", "    ", "\"\"\"\n    Return width, height, x center, and y center for an anchor (window).\n    \"\"\"", "\n", "\n", "w", "=", "anchor", "[", "2", "]", "-", "anchor", "[", "0", "]", "+", "1", "\n", "h", "=", "anchor", "[", "3", "]", "-", "anchor", "[", "1", "]", "+", "1", "\n", "x_ctr", "=", "anchor", "[", "0", "]", "+", "0.5", "*", "(", "w", "-", "1", ")", "\n", "y_ctr", "=", "anchor", "[", "1", "]", "+", "0.5", "*", "(", "h", "-", "1", ")", "\n", "return", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors._mkanchors": [[69, 82], ["numpy.hstack"], "function", ["None"], ["", "def", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", ":", "\n", "    ", "\"\"\"\n    Given a vector of widths (ws) and heights (hs) around a center\n    (x_ctr, y_ctr), output a set of anchors (windows).\n    \"\"\"", "\n", "\n", "ws", "=", "ws", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "hs", "=", "hs", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "anchors", "=", "np", ".", "hstack", "(", "(", "x_ctr", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_ctr", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "+", "0.5", "*", "(", "hs", "-", "1", ")", ")", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors._ratio_enum": [[83, 95], ["generate_anchors._whctrs", "numpy.round", "numpy.round", "generate_anchors._mkanchors", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors._whctrs", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors._mkanchors"], ["", "def", "_ratio_enum", "(", "anchor", ",", "ratios", ")", ":", "\n", "    ", "\"\"\"\n    Enumerate a set of anchors for each aspect ratio wrt an anchor.\n    \"\"\"", "\n", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "size", "=", "w", "*", "h", "\n", "size_ratios", "=", "size", "/", "ratios", "\n", "ws", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "size_ratios", ")", ")", "\n", "hs", "=", "np", ".", "round", "(", "ws", "*", "ratios", ")", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors._scale_enum": [[96, 106], ["generate_anchors._whctrs", "generate_anchors._mkanchors"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors._whctrs", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.rpn.generate_anchors._mkanchors"], ["", "def", "_scale_enum", "(", "anchor", ",", "scales", ")", ":", "\n", "    ", "\"\"\"\n    Enumerate a set of anchors for each scale wrt an anchor.\n    \"\"\"", "\n", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "ws", "=", "w", "*", "scales", "\n", "hs", "=", "h", "*", "scales", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_pooling.__init__._import_symbols": [[6, 14], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], ["# --------------------------------------------------------", "\n", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.roi_pool.RoIPoolFunction.__init__": [[7, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "ctx", ",", "pooled_height", ",", "pooled_width", ",", "spatial_scale", ")", ":", "\n", "        ", "ctx", ".", "pooled_width", "=", "pooled_width", "\n", "ctx", ".", "pooled_height", "=", "pooled_height", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "feature_size", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.roi_pool.RoIPoolFunction.forward": [[13, 29], ["features.size", "rois.size", "features.new().zero_", "features.new().zero_().int", "features.permute", "_ext.roi_pooling.roi_pooling_forward", "_ext.roi_pooling.roi_pooling_forward_cuda", "features.new", "features.new().zero_", "features.new"], "methods", ["None"], ["", "def", "forward", "(", "ctx", ",", "features", ",", "rois", ")", ":", "\n", "        ", "ctx", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "ctx", ".", "feature_size", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n", "output", "=", "features", ".", "new", "(", "num_rois", ",", "num_channels", ",", "ctx", ".", "pooled_height", ",", "ctx", ".", "pooled_width", ")", ".", "zero_", "(", ")", "\n", "ctx", ".", "argmax", "=", "features", ".", "new", "(", "num_rois", ",", "num_channels", ",", "ctx", ".", "pooled_height", ",", "ctx", ".", "pooled_width", ")", ".", "zero_", "(", ")", ".", "int", "(", ")", "\n", "ctx", ".", "rois", "=", "rois", "\n", "if", "not", "features", ".", "is_cuda", ":", "\n", "            ", "_features", "=", "features", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "roi_pooling", ".", "roi_pooling_forward", "(", "ctx", ".", "pooled_height", ",", "ctx", ".", "pooled_width", ",", "ctx", ".", "spatial_scale", ",", "\n", "_features", ",", "rois", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "roi_pooling", ".", "roi_pooling_forward_cuda", "(", "ctx", ".", "pooled_height", ",", "ctx", ".", "pooled_width", ",", "ctx", ".", "spatial_scale", ",", "\n", "features", ",", "rois", ",", "output", ",", "ctx", ".", "argmax", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.roi_pool.RoIPoolFunction.backward": [[30, 39], ["grad_output.new().zero_", "_ext.roi_pooling.roi_pooling_backward_cuda", "grad_output.new"], "methods", ["None"], ["", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "assert", "(", "ctx", ".", "feature_size", "is", "not", "None", "and", "grad_output", ".", "is_cuda", ")", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "ctx", ".", "feature_size", "\n", "grad_input", "=", "grad_output", ".", "new", "(", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", ")", ".", "zero_", "(", ")", "\n", "\n", "roi_pooling", ".", "roi_pooling_backward_cuda", "(", "ctx", ".", "pooled_height", ",", "ctx", ".", "pooled_width", ",", "ctx", ".", "spatial_scale", ",", "\n", "grad_output", ",", "ctx", ".", "rois", ",", "grad_input", ",", "ctx", ".", "argmax", ")", "\n", "\n", "return", "grad_input", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.gridgen.AffineGridGenFunction.__init__": [[8, 19], ["torch.autograd.Function.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "numpy.repeat", "gridgen.AffineGridGenFunction.grid.astype", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ",", "lr", "=", "1", ")", ":", "\n", "        ", "super", "(", "AffineGridGenFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "height", ",", "self", ".", "width", "=", "height", ",", "width", "\n", "self", ".", "grid", "=", "np", ".", "zeros", "(", "[", "self", ".", "height", ",", "self", ".", "width", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "grid", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "-", "1", ",", "1", ",", "2.0", "/", "(", "self", ".", "height", ")", ")", ",", "0", ")", ",", "repeats", "=", "self", ".", "width", ",", "axis", "=", "0", ")", ".", "T", ",", "0", ")", "\n", "self", ".", "grid", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "-", "1", ",", "1", ",", "2.0", "/", "(", "self", ".", "width", ")", ")", ",", "0", ")", ",", "repeats", "=", "self", ".", "height", ",", "axis", "=", "0", ")", ",", "0", ")", "\n", "# self.grid[:,:,0] = np.expand_dims(np.repeat(np.expand_dims(np.arange(-1, 1, 2.0/(self.height - 1)), 0), repeats = self.width, axis = 0).T, 0)", "\n", "# self.grid[:,:,1] = np.expand_dims(np.repeat(np.expand_dims(np.arange(-1, 1, 2.0/(self.width - 1)), 0), repeats = self.height, axis = 0), 0)", "\n", "self", ".", "grid", "[", ":", ",", ":", ",", "2", "]", "=", "np", ".", "ones", "(", "[", "self", ".", "height", ",", "width", "]", ")", "\n", "self", ".", "grid", "=", "torch", ".", "from_numpy", "(", "self", ".", "grid", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "#print(self.grid)", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.gridgen.AffineGridGenFunction.forward": [[21, 36], ["input1.new().zero_", "input1.new().zero_", "range", "range", "input1.size", "gridgen.AffineGridGenFunction.grid.astype", "input1.size", "torch.bmm().view", "input1.new", "input1.new", "torch.bmm", "torch.Size", "gridgen.AffineGridGenFunction.grid.size", "torch.Size", "gridgen.AffineGridGenFunction.grid.size", "gridgen.AffineGridGenFunction.batchgrid.view", "torch.transpose", "input1.size", "input1.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input1", ")", ":", "\n", "        ", "self", ".", "input1", "=", "input1", "\n", "output", "=", "input1", ".", "new", "(", "torch", ".", "Size", "(", "[", "input1", ".", "size", "(", "0", ")", "]", ")", "+", "self", ".", "grid", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "self", ".", "batchgrid", "=", "input1", ".", "new", "(", "torch", ".", "Size", "(", "[", "input1", ".", "size", "(", "0", ")", "]", ")", "+", "self", ".", "grid", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "for", "i", "in", "range", "(", "input1", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "self", ".", "batchgrid", "[", "i", "]", "=", "self", ".", "grid", ".", "astype", "(", "self", ".", "batchgrid", "[", "i", "]", ")", "\n", "\n", "# if input1.is_cuda:", "\n", "#    self.batchgrid = self.batchgrid.cuda()", "\n", "#    output = output.cuda()", "\n", "\n", "", "for", "i", "in", "range", "(", "input1", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "output", "=", "torch", ".", "bmm", "(", "self", ".", "batchgrid", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "3", ")", ",", "torch", ".", "transpose", "(", "input1", ",", "1", ",", "2", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "height", ",", "self", ".", "width", ",", "2", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.gridgen.AffineGridGenFunction.backward": [[37, 47], ["gridgen.AffineGridGenFunction.input1.new().zero_", "torch.baddbmm", "torch.transpose", "gridgen.AffineGridGenFunction.batchgrid.view", "gridgen.AffineGridGenFunction.input1.new", "grad_output.view", "gridgen.AffineGridGenFunction.input1.size"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "\n", "        ", "grad_input1", "=", "self", ".", "input1", ".", "new", "(", "self", ".", "input1", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "# if grad_output.is_cuda:", "\n", "#    self.batchgrid = self.batchgrid.cuda()", "\n", "#    grad_input1 = grad_input1.cuda()", "\n", "\n", "grad_input1", "=", "torch", ".", "baddbmm", "(", "grad_input1", ",", "torch", ".", "transpose", "(", "grad_output", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "2", ")", ",", "1", ",", "2", ")", ",", "self", ".", "batchgrid", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "3", ")", ")", "\n", "return", "grad_input1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.roi_crop.RoICropFunction.forward": [[8, 16], ["input1.clone", "input2.clone", "input2.new().zero_", "_ext.roi_crop.BilinearSamplerBHWD_updateOutput_cuda", "input2.new().zero_.get_device", "input1.get_device", "input2.new().zero_.get_device", "input2.get_device", "input2.new", "input2.size", "input1.size", "input2.size", "input2.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "self", ".", "input1", "=", "input1", ".", "clone", "(", ")", "\n", "self", ".", "input2", "=", "input2", ".", "clone", "(", ")", "\n", "output", "=", "input2", ".", "new", "(", "input2", ".", "size", "(", ")", "[", "0", "]", ",", "input1", ".", "size", "(", ")", "[", "1", "]", ",", "input2", ".", "size", "(", ")", "[", "1", "]", ",", "input2", ".", "size", "(", ")", "[", "2", "]", ")", ".", "zero_", "(", ")", "\n", "assert", "output", ".", "get_device", "(", ")", "==", "input1", ".", "get_device", "(", ")", ",", "\"output and input1 must on the same device\"", "\n", "assert", "output", ".", "get_device", "(", ")", "==", "input2", ".", "get_device", "(", ")", ",", "\"output and input2 must on the same device\"", "\n", "roi_crop", ".", "BilinearSamplerBHWD_updateOutput_cuda", "(", "input1", ",", "input2", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.roi_crop.RoICropFunction.backward": [[17, 22], ["_ext.roi_crop.RoICropFunction.input1.new().zero_", "_ext.roi_crop.RoICropFunction.input2.new().zero_", "_ext.roi_crop.BilinearSamplerBHWD_updateGradInput_cuda", "_ext.roi_crop.RoICropFunction.input1.new", "_ext.roi_crop.RoICropFunction.input2.new", "_ext.roi_crop.RoICropFunction.input1.size", "_ext.roi_crop.RoICropFunction.input2.size"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "grad_input1", "=", "self", ".", "input1", ".", "new", "(", "self", ".", "input1", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "grad_input2", "=", "self", ".", "input2", ".", "new", "(", "self", ".", "input2", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "roi_crop", ".", "BilinearSamplerBHWD_updateGradInput_cuda", "(", "self", ".", "input1", ",", "self", ".", "input2", ",", "grad_input1", ",", "grad_input2", ",", "grad_output", ")", "\n", "return", "grad_input1", ",", "grad_input2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.crop_resize.RoICropFunction.forward": [[9, 26], ["ffi.new", "torch.zeros", "torch.cuda.current_device", "_ext.roi_crop.BilinearSamplerBHWD_updateOutput", "output.cuda.cuda.cuda", "_ext.roi_crop.BilinearSamplerBHWD_updateOutput_cuda", "input2.size", "input1.size", "input2.size", "input2.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "self", ".", "input1", "=", "input1", "\n", "self", ".", "input2", "=", "input2", "\n", "self", ".", "device_c", "=", "ffi", ".", "new", "(", "\"int *\"", ")", "\n", "output", "=", "torch", ".", "zeros", "(", "input2", ".", "size", "(", ")", "[", "0", "]", ",", "input1", ".", "size", "(", ")", "[", "1", "]", ",", "input2", ".", "size", "(", ")", "[", "1", "]", ",", "input2", ".", "size", "(", ")", "[", "2", "]", ")", "\n", "#print('decice %d' % torch.cuda.current_device())", "\n", "if", "input1", ".", "is_cuda", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "-", "1", "\n", "", "self", ".", "device_c", "[", "0", "]", "=", "self", ".", "device", "\n", "if", "not", "input1", ".", "is_cuda", ":", "\n", "            ", "roi_crop", ".", "BilinearSamplerBHWD_updateOutput", "(", "input1", ",", "input2", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", "self", ".", "device", ")", "\n", "roi_crop", ".", "BilinearSamplerBHWD_updateOutput_cuda", "(", "input1", ",", "input2", ",", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.crop_resize.RoICropFunction.backward": [[27, 38], ["torch.zeros", "torch.zeros", "crop_resize.RoICropFunction.input1.size", "crop_resize.RoICropFunction.input2.size", "_ext.roi_crop.BilinearSamplerBHWD_updateGradInput", "grad_input1.cuda.cuda.cuda", "grad_input2.cuda.cuda.cuda", "_ext.roi_crop.BilinearSamplerBHWD_updateGradInput_cuda"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "grad_input1", "=", "torch", ".", "zeros", "(", "self", ".", "input1", ".", "size", "(", ")", ")", "\n", "grad_input2", "=", "torch", ".", "zeros", "(", "self", ".", "input2", ".", "size", "(", ")", ")", "\n", "#print('backward decice %d' % self.device)", "\n", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "roi_crop", ".", "BilinearSamplerBHWD_updateGradInput", "(", "self", ".", "input1", ",", "self", ".", "input2", ",", "grad_input1", ",", "grad_input2", ",", "grad_output", ")", "\n", "", "else", ":", "\n", "            ", "grad_input1", "=", "grad_input1", ".", "cuda", "(", "self", ".", "device", ")", "\n", "grad_input2", "=", "grad_input2", ".", "cuda", "(", "self", ".", "device", ")", "\n", "roi_crop", ".", "BilinearSamplerBHWD_updateGradInput_cuda", "(", "self", ".", "input1", ",", "self", ".", "input2", ",", "grad_input1", ",", "grad_input2", ",", "grad_output", ")", "\n", "", "return", "grad_input1", ",", "grad_input2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.roi_align.RoIAlignFunction.__init__": [[8, 14], ["int", "int", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "aligned_height", ",", "aligned_width", ",", "spatial_scale", ")", ":", "\n", "        ", "self", ".", "aligned_width", "=", "int", "(", "aligned_width", ")", "\n", "self", ".", "aligned_height", "=", "int", "(", "aligned_height", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "self", ".", "rois", "=", "None", "\n", "self", ".", "feature_size", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.roi_align.RoIAlignFunction.forward": [[15, 36], ["features.size", "features.size", "rois.size", "features.new().zero_", "_ext.roi_align.roi_align_forward_cuda", "_ext.roi_align.roi_align_forward", "features.new"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "self", ".", "rois", "=", "rois", "\n", "self", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "features", ".", "size", "(", ")", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "features", ".", "new", "(", "num_rois", ",", "num_channels", ",", "self", ".", "aligned_height", ",", "self", ".", "aligned_width", ")", ".", "zero_", "(", ")", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "roi_align", ".", "roi_align_forward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "features", ",", "\n", "rois", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "roi_align", ".", "roi_align_forward", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "features", ",", "\n", "rois", ",", "output", ")", "\n", "#            raise NotImplementedError", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.functions.roi_align.RoIAlignFunction.backward": [[37, 52], ["_ext.roi_align.RoIAlignFunction.rois.new().zero_", "_ext.roi_align.roi_align_backward_cuda", "_ext.roi_align.RoIAlignFunction.rois.new"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "assert", "(", "self", ".", "feature_size", "is", "not", "None", "and", "grad_output", ".", "is_cuda", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "self", ".", "feature_size", "\n", "\n", "grad_input", "=", "self", ".", "rois", ".", "new", "(", "batch_size", ",", "num_channels", ",", "data_height", ",", "\n", "data_width", ")", ".", "zero_", "(", ")", "\n", "roi_align", ".", "roi_align_backward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "grad_output", ",", "\n", "self", ".", "rois", ",", "grad_input", ")", "\n", "\n", "# print grad_input", "\n", "\n", "return", "grad_input", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.roi_pool._RoIPooling.__init__": [[6, 12], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["class", "RoIPoolFunction", "(", "Function", ")", ":", "\n", "    ", "def", "__init__", "(", "ctx", ",", "pooled_height", ",", "pooled_width", ",", "spatial_scale", ")", ":", "\n", "        ", "ctx", ".", "pooled_width", "=", "pooled_width", "\n", "ctx", ".", "pooled_height", "=", "pooled_height", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "feature_size", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.roi_pool._RoIPooling.forward": [[13, 15], ["functions.roi_pool.RoIPoolFunction"], "methods", ["None"], ["", "def", "forward", "(", "ctx", ",", "features", ",", "rois", ")", ":", "\n", "        ", "ctx", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "ctx", ".", "feature_size", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen._AffineGridGen.__init__": [[13, 19], ["torch.nn.modules.module.Module.__init__", "functions.gridgen.AffineGridGenFunction"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["self", ".", "grid", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "-", "1", ",", "1", ",", "2.0", "/", "(", "self", ".", "height", ")", ")", ",", "0", ")", ",", "repeats", "=", "self", ".", "width", ",", "axis", "=", "0", ")", ".", "T", ",", "0", ")", "\n", "self", ".", "grid", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "-", "1", ",", "1", ",", "2.0", "/", "(", "self", ".", "width", ")", ")", ",", "0", ")", ",", "repeats", "=", "self", ".", "height", ",", "axis", "=", "0", ")", ",", "0", ")", "\n", "# self.grid[:,:,0] = np.expand_dims(np.repeat(np.expand_dims(np.arange(-1, 1, 2.0/(self.height - 1)), 0), repeats = self.width, axis = 0).T, 0)", "\n", "# self.grid[:,:,1] = np.expand_dims(np.repeat(np.expand_dims(np.arange(-1, 1, 2.0/(self.width - 1)), 0), repeats = self.height, axis = 0), 0)", "\n", "self", ".", "grid", "[", ":", ",", ":", ",", "2", "]", "=", "np", ".", "ones", "(", "[", "self", ".", "height", ",", "width", "]", ")", "\n", "self", ".", "grid", "=", "torch", ".", "from_numpy", "(", "self", ".", "grid", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "#print(self.grid)", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen._AffineGridGen.forward": [[19, 22], ["gridgen._AffineGridGen.f"], "methods", ["None"], ["#print(self.grid)", "\n", "\n", "", "def", "forward", "(", "self", ",", "input1", ")", ":", "\n", "        ", "self", ".", "input1", "=", "input1", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.CylinderGridGen.__init__": [[35, 41], ["torch.nn.modules.module.Module.__init__", "CylinderGridGenFunction"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["", "return", "output", "\n", "\n", "", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "\n", "        ", "grad_input1", "=", "self", ".", "input1", ".", "new", "(", "self", ".", "input1", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "# if grad_output.is_cuda:", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.CylinderGridGen.forward": [[41, 47], ["gridgen.CylinderGridGen.f", "gridgen.CylinderGridGen.f", "torch.mul().view", "torch.mul"], "methods", ["None"], ["# if grad_output.is_cuda:", "\n", "#    self.batchgrid = self.batchgrid.cuda()", "\n", "#    grad_input1 = grad_input1.cuda()", "\n", "\n", "grad_input1", "=", "torch", ".", "baddbmm", "(", "grad_input1", ",", "torch", ".", "transpose", "(", "grad_output", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "2", ")", ",", "1", ",", "2", ")", ",", "self", ".", "batchgrid", ".", "view", "(", "-", "1", ",", "self", ".", "height", "*", "self", ".", "width", ",", "3", ")", ")", "\n", "return", "grad_input1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.AffineGridGenV2.__init__": [[50, 61], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "numpy.repeat", "gridgen.AffineGridGenV2.grid.astype", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.AffineGridGenV2.forward": [[63, 76], ["torch.zeros", "range", "torch.autograd.Variable", "torch.bmm().view", "input1.size", "gridgen.AffineGridGenV2.batchgrid.cuda", "torch.Size", "gridgen.AffineGridGenV2.grid.size", "torch.bmm", "gridgen.AffineGridGenV2.batchgrid.view", "torch.transpose", "input1.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.CylinderGridGenV2.__init__": [[79, 88], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "numpy.repeat", "gridgen.CylinderGridGenV2.grid.astype", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.CylinderGridGenV2.forward": [[88, 106], ["torch.zeros", "range", "torch.autograd.Variable", "input.view().repeat", "torch.cat", "input.size", "torch.atan", "torch.Size", "gridgen.CylinderGridGenV2.grid.size", "input.view", "torch.tan", "input.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.DenseAffineGridGen.__init__": [[109, 120], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "numpy.repeat", "gridgen.DenseAffineGridGen.grid.astype", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.DenseAffineGridGen.forward": [[122, 136], ["torch.zeros", "range", "torch.autograd.Variable", "torch.mul", "torch.mul", "torch.cat", "input1.size", "torch.Size", "gridgen.DenseAffineGridGen.grid.size", "torch.sum", "torch.sum", "input1.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.DenseAffine3DGridGen.__init__": [[141, 166], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "torch.cos", "torch.from_numpy", "numpy.repeat", "gridgen.DenseAffine3DGridGen.grid.astype", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "numpy.zeros", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.DenseAffine3DGridGen.forward": [[168, 193], ["torch.zeros", "range", "torch.autograd.Variable", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "input1.size", "torch.mul", "torch.mul", "torch.mul", "torch.sqrt", "torch.atan", "torch.Size", "gridgen.DenseAffine3DGridGen.grid3d.size", "torch.acos", "torch.sum.lt().type", "torch.sum.ge().type", "torch.sum.lt().type", "input1.size", "torch.sum.lt", "torch.sum.ge", "torch.sum.lt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.DenseAffine3DGridGen_rotate.__init__": [[199, 224], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "torch.cos", "torch.from_numpy", "numpy.repeat", "gridgen.DenseAffine3DGridGen_rotate.grid.astype", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "numpy.zeros", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.DenseAffine3DGridGen_rotate.forward": [[226, 263], ["torch.zeros", "range", "torch.autograd.Variable", "torch.zeros", "range", "torch.autograd.Variable", "torch.sum", "torch.sum", "torch.sum", "input2.view().repeat", "torch.cat", "torch.cat", "input1.size", "input1.size", "torch.mul", "torch.mul", "torch.mul", "torch.sqrt", "torch.atan", "torch.atan", "torch.Size", "gridgen.DenseAffine3DGridGen_rotate.grid3d.size", "torch.Size", "gridgen.DenseAffine3DGridGen_rotate.grid.size", "torch.acos", "input2.view", "torch.tan", "torch.sum.lt().type", "torch.sum.ge().type", "torch.sum.lt().type", "input1.size", "input1.size", "torch.sum.lt", "torch.sum.ge", "torch.sum.lt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.Depth3DGridGen.__init__": [[266, 291], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "torch.cos", "torch.from_numpy", "numpy.repeat", "gridgen.Depth3DGridGen.grid.astype", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "numpy.zeros", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.Depth3DGridGen.forward": [[293, 333], ["torch.zeros", "range", "torch.autograd.Variable", "torch.zeros", "range", "torch.autograd.Variable", "rotate.view().repeat", "torch.cat", "torch.cat", "depth.size", "depth.size", "trans0.view().repeat", "trans1.view().repeat", "torch.sqrt", "torch.atan", "torch.atan", "torch.Size", "gridgen.Depth3DGridGen.grid3d.size", "torch.Size", "gridgen.Depth3DGridGen.grid.size", "torch.acos", "rotate.view", "torch.tan", "trans0.view", "trans1.view", "x.lt().type", "y.ge().type", "y.lt().type", "depth.size", "depth.size", "x.lt", "y.ge", "y.lt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.Depth3DGridGen_with_mask.__init__": [[339, 365], ["torch.nn.modules.module.Module.__init__", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.ones", "torch.from_numpy", "torch.cos", "torch.from_numpy", "numpy.repeat", "gridgen.Depth3DGridGen_with_mask.grid.astype", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "numpy.zeros", "numpy.repeat", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.gridgen.Depth3DGridGen_with_mask.forward": [[367, 415], ["torch.zeros", "range", "torch.autograd.Variable", "torch.zeros", "range", "torch.autograd.Variable", "torch.cat", "depth.size", "depth.size", "gridgen.Depth3DGridGen_with_mask.batchgrid.cuda", "gridgen.Depth3DGridGen_with_mask.batchgrid3d.cuda", "trans0.view().repeat", "trans1.view().repeat", "rotate.view().repeat", "torch.sqrt", "torch.Size", "gridgen.Depth3DGridGen_with_mask.grid3d.size", "torch.Size", "gridgen.Depth3DGridGen_with_mask.grid.size", "torch.cos", "torch.sin", "torch.sin", "torch.cos", "torch.acos", "torch.atan", "torch.atan", "trans0.view", "trans1.view", "rotate.view", "depth.size", "depth.size", "x.lt().type", "y.ge().type", "y.lt().type", "x.lt().type", "y.ge().type", "y.lt().type", "x.lt", "y.ge", "y.lt", "x.lt", "y.ge", "y.lt"], "methods", ["None"], []], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.roi_crop._RoICrop.__init__": [[5, 7], ["torch.nn.modules.module.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["import", "pdb", "\n", "\n", "class", "RoICropFunction", "(", "Function", ")", ":", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.roi_crop._RoICrop.forward": [[7, 9], ["functions.roi_crop.RoICropFunction"], "methods", ["None"], ["class", "RoICropFunction", "(", "Function", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "self", ".", "input1", "=", "input1", ".", "clone", "(", ")", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.roi_align.RoIAlign.__init__": [[7, 13], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["class", "RoIAlignFunction", "(", "Function", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "aligned_height", ",", "aligned_width", ",", "spatial_scale", ")", ":", "\n", "        ", "self", ".", "aligned_width", "=", "int", "(", "aligned_width", ")", "\n", "self", ".", "aligned_height", "=", "int", "(", "aligned_height", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "self", ".", "rois", "=", "None", "\n", "self", ".", "feature_size", "=", "None", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.roi_align.RoIAlign.forward": [[14, 17], ["functions.roi_align.RoIAlignFunction"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "self", ".", "rois", "=", "rois", "\n", "self", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.roi_align.RoIAlignAvg.__init__": [[19, 25], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "features", ".", "size", "(", ")", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "features", ".", "new", "(", "num_rois", ",", "num_channels", ",", "self", ".", "aligned_height", ",", "self", ".", "aligned_width", ")", ".", "zero_", "(", ")", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "roi_align", ".", "roi_align_forward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.roi_align.RoIAlignAvg.forward": [[26, 30], ["torch.nn.functional.avg_pool2d", "functions.roi_align.RoIAlignFunction"], "methods", ["None"], ["self", ".", "spatial_scale", ",", "features", ",", "\n", "rois", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "roi_align", ".", "roi_align_forward", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.roi_align.RoIAlignMax.__init__": [[32, 38], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["rois", ",", "output", ")", "\n", "#            raise NotImplementedError", "\n", "\n", "", "return", "output", "\n", "\n", "", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "assert", "(", "self", ".", "feature_size", "is", "not", "None", "and", "grad_output", ".", "is_cuda", ")", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.modules.roi_align.RoIAlignMax.forward": [[39, 43], ["torch.nn.functional.max_pool2d", "functions.roi_align.RoIAlignFunction"], "methods", ["None"], ["\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "self", ".", "feature_size", "\n", "\n", "grad_input", "=", "self", ".", "rois", ".", "new", "(", "batch_size", ",", "num_channels", ",", "data_height", ",", "\n", "data_width", ")", ".", "zero_", "(", ")", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.nms.nms_gpu.nms_gpu": [[7, 13], ["dets.new().zero_().int", "dets.new().zero_().int", "_ext.nms.nms_cuda", "dets.new().zero_", "dets.new().zero_", "dets.new", "dets.new", "dets.size"], "function", ["None"], ["def", "nms_gpu", "(", "dets", ",", "thresh", ")", ":", "\n", "\t", "keep", "=", "dets", ".", "new", "(", "dets", ".", "size", "(", "0", ")", ",", "1", ")", ".", "zero_", "(", ")", ".", "int", "(", ")", "\n", "num_out", "=", "dets", ".", "new", "(", "1", ")", ".", "zero_", "(", ")", ".", "int", "(", ")", "\n", "nms", ".", "nms_cuda", "(", "keep", ",", "dets", ",", "num_out", ",", "thresh", ")", "\n", "keep", "=", "keep", "[", ":", "num_out", "[", "0", "]", "]", "\n", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.nms.nms_cpu.nms_cpu": [[6, 35], ["dets.numpy.numpy", "torch.IntTensor", "scores.argsort", "order.item", "keep.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.where"], "function", ["None"], ["def", "nms_cpu", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "dets", "=", "dets", ".", "numpy", "(", ")", "\n", "x1", "=", "dets", "[", ":", ",", "0", "]", "\n", "y1", "=", "dets", "[", ":", ",", "1", "]", "\n", "x2", "=", "dets", "[", ":", ",", "2", "]", "\n", "y2", "=", "dets", "[", ":", ",", "3", "]", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "\n", "areas", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", ".", "item", "(", "0", ")", "\n", "keep", ".", "append", "(", "i", ")", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", "+", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", "+", "1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "ovr", "=", "inter", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "inter", ")", "\n", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "\n", "", "return", "torch", ".", "IntTensor", "(", "keep", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.nms.nms_wrapper.nms": [[13, 22], ["nms_gpu", "model.nms.nms_cpu.nms_cpu"], "function", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.nms.nms_gpu.nms_gpu", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.nms.nms_cpu.nms_cpu"], ["def", "nms", "(", "dets", ",", "thresh", ",", "force_cpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"Dispatch to either CPU or GPU NMS implementations.\"\"\"", "\n", "if", "dets", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "# ---numpy version---", "\n", "# original: return gpu_nms(dets, thresh, device_id=cfg.GPU_ID)", "\n", "# ---pytorch version---", "\n", "\n", "", "return", "nms_gpu", "(", "dets", ",", "thresh", ")", "if", "force_cpu", "==", "False", "else", "nms_cpu", "(", "dets", ",", "thresh", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.nms.__init__._import_symbols": [[6, 14], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], ["# --------------------------------------------------------", "\n", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_crop.__init__._import_symbols": [[6, 14], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], ["# --------------------------------------------------------", "\n", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.crop_resize.__init__._import_symbols": [[6, 11], ["dir", "getattr", "torch.utils.ffi._wrap_function", "__all__.append"], "function", ["None"], ["# --------------------------------------------------------", "\n", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.vgg16.vgg16.__init__": [[20, 27], ["model.faster_rcnn.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "classes", ",", "pretrained", "=", "False", ",", "class_agnostic", "=", "False", ")", ":", "\n", "    ", "self", ".", "model_path", "=", "'data/pretrained_model/vgg16_caffe.pth'", "\n", "self", ".", "dout_base_model", "=", "512", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "\n", "_fasterRCNN", ".", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.vgg16.vgg16._init_modules": [[28, 55], ["torchvision.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Linear", "torch.Linear", "torch.Linear", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torchvision.vgg16.load_state_dict", "vgg16.vgg16.RCNN_base[].parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "list", "torch.load.items", "torch.load.items", "torch.load.items", "torchvision.vgg16.classifier._modules.values", "torchvision.vgg16.features._modules.values", "torchvision.vgg16.state_dict"], "methods", ["None"], ["", "def", "_init_modules", "(", "self", ")", ":", "\n", "    ", "vgg", "=", "models", ".", "vgg16", "(", ")", "\n", "if", "self", ".", "pretrained", ":", "\n", "        ", "print", "(", "\"Loading pretrained weights from %s\"", "%", "(", "self", ".", "model_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "model_path", ")", "\n", "vgg", ".", "load_state_dict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "vgg", ".", "state_dict", "(", ")", "}", ")", "\n", "\n", "", "vgg", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg", ".", "classifier", ".", "_modules", ".", "values", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "# not using the last maxpool layer", "\n", "self", ".", "RCNN_base", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg", ".", "features", ".", "_modules", ".", "values", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "# Fix the layers before conv3:", "\n", "for", "layer", "in", "range", "(", "10", ")", ":", "\n", "      ", "for", "p", "in", "self", ".", "RCNN_base", "[", "layer", "]", ".", "parameters", "(", ")", ":", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# self.RCNN_base = _RCNN_base(vgg.features, self.classes, self.dout_base_model)", "\n", "\n", "", "self", ".", "RCNN_top", "=", "vgg", ".", "classifier", "\n", "\n", "# not using the last maxpool layer", "\n", "self", ".", "RCNN_cls_score", "=", "nn", ".", "Linear", "(", "4096", ",", "self", ".", "n_classes", ")", "\n", "\n", "if", "self", ".", "class_agnostic", ":", "\n", "      ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "4096", ",", "4", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "4096", ",", "4", "*", "self", ".", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.vgg16.vgg16._head_to_tail": [[56, 62], ["pool5.view", "vgg16.vgg16.RCNN_top", "pool5.size"], "methods", ["None"], ["", "", "def", "_head_to_tail", "(", "self", ",", "pool5", ")", ":", "\n", "\n", "    ", "pool5_flat", "=", "pool5", ".", "view", "(", "pool5", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "fc7", "=", "self", ".", "RCNN_top", "(", "pool5_flat", ")", "\n", "\n", "return", "fc7", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.faster_rcnn._fasterRCNN.__init__": [[19, 36], ["torch.Module.__init__", "len", "model.rpn.rpn._RPN", "model.rpn.proposal_target_layer_cascade._ProposalTargetLayer", "model.roi_pooling.modules.roi_pool._RoIPooling", "model.roi_align.modules.roi_align.RoIAlignAvg", "model.roi_crop.modules.roi_crop._RoICrop"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["def", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ")", ":", "\n", "        ", "super", "(", "_fasterRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "n_classes", "=", "len", "(", "classes", ")", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "# loss", "\n", "self", ".", "RCNN_loss_cls", "=", "0", "\n", "self", ".", "RCNN_loss_bbox", "=", "0", "\n", "\n", "# define rpn", "\n", "self", ".", "RCNN_rpn", "=", "_RPN", "(", "self", ".", "dout_base_model", ")", "\n", "self", ".", "RCNN_proposal_target", "=", "_ProposalTargetLayer", "(", "self", ".", "n_classes", ")", "\n", "self", ".", "RCNN_roi_pool", "=", "_RoIPooling", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ",", "1.0", "/", "16.0", ")", "\n", "self", ".", "RCNN_roi_align", "=", "RoIAlignAvg", "(", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", ",", "1.0", "/", "16.0", ")", "\n", "\n", "self", ".", "grid_size", "=", "cfg", ".", "POOLING_SIZE", "*", "2", "if", "cfg", ".", "CROP_RESIZE_WITH_MAX_POOL", "else", "cfg", ".", "POOLING_SIZE", "\n", "self", ".", "RCNN_roi_crop", "=", "_RoICrop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.faster_rcnn._fasterRCNN.spatial_pool": [[37, 45], ["int", "int", "int", "int", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d.", "math.ceil", "math.ceil", "torch.ZeroPad2d."], "methods", ["None"], ["", "def", "spatial_pool", "(", "self", ",", "input_conv", ",", "input_conv_size", ",", "output_pool_size", ")", ":", "\n", "        ", "h_wid", "=", "int", "(", "math", ".", "ceil", "(", "input_conv_size", "[", "0", "]", "/", "output_pool_size", ")", ")", "\n", "w_wid", "=", "int", "(", "math", ".", "ceil", "(", "input_conv_size", "[", "1", "]", "/", "output_pool_size", ")", ")", "\n", "h_pad", "=", "int", "(", "(", "h_wid", "*", "output_pool_size", "-", "input_conv_size", "[", "0", "]", "+", "1", ")", "/", "2", ")", "\n", "w_pad", "=", "int", "(", "(", "w_wid", "*", "output_pool_size", "-", "input_conv_size", "[", "1", "]", "+", "1", ")", "/", "2", ")", "\n", "zero_pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "w_pad", ",", "w_pad", ",", "h_pad", ",", "h_pad", ")", ")", "\n", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "(", "h_wid", ",", "w_wid", ")", ",", "stride", "=", "(", "h_wid", ",", "w_wid", ")", ")", "\n", "return", "maxpool", "(", "zero_pad", "(", "input_conv", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.faster_rcnn._fasterRCNN.forward": [[46, 212], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN.RCNN_altitude_score", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "[].type_as().eq", "correct_altitude.sum().type().cuda.sum().type().cuda.sum().type().cuda", "faster_rcnn._fasterRCNN.RCNN_angle_score", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "[].type_as().eq", "correct_angle.sum().type().cuda.sum().type().cuda.sum().type().cuda", "faster_rcnn._fasterRCNN.RCNN_weather_score", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "[].type_as().eq", "correct_weather.sum().type().cuda.sum().type().cuda.sum().type().cuda", "faster_rcnn._fasterRCNN.RCNN_rpn", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "faster_rcnn._fasterRCNN._head_to_tail", "faster_rcnn._fasterRCNN.RCNN_bbox_pred", "faster_rcnn._fasterRCNN.RCNN_cls_score", "torch.softmax", "torch.softmax", "torch.softmax", "cls_prob.view.view.view", "torch.gather.squeeze.view", "im_data.size", "faster_rcnn._fasterRCNN.RCNN_base", "faster_rcnn._fasterRCNN.spatial_pool", "meta_data[].view().long", "meta_data[].view().long", "meta_data[].view().long", "faster_rcnn._fasterRCNN.RCNN_altitude().mean().mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.RCNN_angle().mean().mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.RCNN_weather().mean().mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.RCNN_proposal_target", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model.utils.net_utils._affine_grid_gen", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "torch.stack().contiguous", "faster_rcnn._fasterRCNN.RCNN_roi_crop", "torch.gather.squeeze.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.squeeze", "torch.gather.squeeze", "torch.gather.squeeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "model.utils.net_utils._smooth_l1_loss", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "faster_rcnn._fasterRCNN.detach", "meta_data.detach", "faster_rcnn._fasterRCNN.RCNN_base", "faster_rcnn._fasterRCNN.spatial_pool", "[].type_as", "correct_altitude.sum().type().cuda.sum().type().cuda.sum().type", "[].type_as", "correct_angle.sum().type().cuda.sum().type().cuda.sum().type", "[].type_as", "correct_weather.sum().type().cuda.sum().type().cuda.sum().type", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view().long", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "torch.autograd.Variable().detach", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "faster_rcnn._fasterRCNN.RCNN_roi_align", "torch.gather.squeeze.size", "int", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "torch.autograd.Variable.view().expand", "meta_data[].view", "meta_data[].view", "meta_data[].view", "faster_rcnn._fasterRCNN.RCNN_altitude().mean", "faster_rcnn._fasterRCNN.softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "faster_rcnn._fasterRCNN.RCNN_angle().mean", "faster_rcnn._fasterRCNN.softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "faster_rcnn._fasterRCNN.RCNN_weather().mean", "faster_rcnn._fasterRCNN.softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.RCNN_roi_pool", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "faster_rcnn._fasterRCNN.size", "faster_rcnn._fasterRCNN.size", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "correct_altitude.sum().type().cuda.sum().type().cuda.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "correct_angle.sum().type().cuda.sum().type().cuda.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "correct_weather.sum().type().cuda.sum().type().cuda.sum", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.gather.squeeze.size", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "faster_rcnn._fasterRCNN.size", "faster_rcnn._fasterRCNN.size", "faster_rcnn._fasterRCNN.RCNN_altitude", "faster_rcnn._fasterRCNN.softmax", "faster_rcnn._fasterRCNN.max", "faster_rcnn._fasterRCNN.RCNN_angle", "faster_rcnn._fasterRCNN.softmax", "faster_rcnn._fasterRCNN.max", "faster_rcnn._fasterRCNN.RCNN_weather", "faster_rcnn._fasterRCNN.softmax", "faster_rcnn._fasterRCNN.max", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._head_to_tail", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.faster_rcnn._fasterRCNN.spatial_pool", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils._affine_grid_gen", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.utils.net_utils._smooth_l1_loss", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.faster_rcnn._fasterRCNN.spatial_pool"], ["", "def", "forward", "(", "self", ",", "im_data", ",", "meta_data", ",", "im_info", "=", "None", ",", "gt_boxes", "=", "None", ",", "num_boxes", "=", "None", ",", "run_partial", "=", "False", ",", "is_first", "=", "False", ")", ":", "\n", "# feed image data to base model to obtain base feature map", "\n", "        ", "if", "not", "run_partial", ":", "\n", "            ", "batch_size", "=", "im_data", ".", "size", "(", "0", ")", "\n", "\n", "im_info", "=", "im_info", ".", "data", "\n", "gt_boxes", "=", "gt_boxes", ".", "data", "\n", "num_boxes", "=", "num_boxes", ".", "data", "\n", "meta_data", "=", "meta_data", ".", "data", "\n", "\n", "base_feat", "=", "self", ".", "RCNN_base", "(", "im_data", ")", "\n", "avg_feat", "=", "self", ".", "spatial_pool", "(", "base_feat", ",", "[", "base_feat", ".", "size", "(", ")", "[", "2", "]", ",", "base_feat", ".", "size", "(", ")", "[", "3", "]", "]", ",", "14", ")", "\n", "pool_data", "=", "(", "avg_feat", ".", "detach", "(", ")", ",", "meta_data", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "# use data from pooling queue", "\n", "            ", "if", "is_first", ":", "\n", "                ", "base_feat", "=", "self", ".", "RCNN_base", "(", "im_data", ")", "\n", "avg_feat", "=", "self", ".", "spatial_pool", "(", "base_feat", ",", "[", "base_feat", ".", "size", "(", ")", "[", "2", "]", ",", "base_feat", ".", "size", "(", ")", "[", "3", "]", "]", ",", "14", ")", "\n", "", "else", ":", "\n", "                ", "avg_feat", "=", "im_data", "\n", "", "meta_data", "=", "meta_data", ".", "data", "\n", "\n", "", "weather_label", "=", "Variable", "(", "meta_data", "[", ":", ",", "0", "]", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ")", "\n", "altitude_label", "=", "Variable", "(", "meta_data", "[", ":", ",", "1", "]", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ")", "\n", "angle_label", "=", "Variable", "(", "meta_data", "[", ":", ",", "2", "]", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ")", "\n", "\n", "'''\n        Altitude\n        '''", "\n", "altitude_score", "=", "self", ".", "RCNN_altitude_score", "(", "self", ".", "RCNN_altitude", "(", "avg_feat", ")", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ")", "\n", "RCNN_loss_altitude", "=", "F", ".", "cross_entropy", "(", "altitude_score", ",", "altitude_label", ")", "\n", "\n", "# negative entropy function", "\n", "RCNN_loss_altitude_adv", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "sum", "(", "altitude_score", ".", "softmax", "(", "1", ")", "*", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "altitude_score", ".", "softmax", "(", "1", ")", ",", "min", "=", "1e-10", ",", "max", "=", "1.0", ")", ")", ",", "1", ")", ")", "\n", "\n", "correct_altitude", "=", "altitude_score", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "altitude_label", ")", ".", "eq", "(", "altitude_label", ")", "\n", "correct_altitude", "=", "correct_altitude", ".", "sum", "(", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", "\n", "RCNN_acc_altitude", "=", "correct_altitude", "/", "altitude_label", ".", "size", "(", "0", ")", "\n", "\n", "'''\n        View Angle\n        '''", "\n", "angle_score", "=", "self", ".", "RCNN_angle_score", "(", "self", ".", "RCNN_angle", "(", "avg_feat", ")", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ")", "\n", "RCNN_loss_angle", "=", "F", ".", "cross_entropy", "(", "angle_score", ",", "angle_label", ")", "\n", "RCNN_loss_angle_adv", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "sum", "(", "angle_score", ".", "softmax", "(", "1", ")", "*", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "angle_score", ".", "softmax", "(", "1", ")", ",", "min", "=", "1e-10", ",", "max", "=", "1.0", ")", ")", ",", "1", ")", ")", "\n", "correct_angle", "=", "angle_score", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "angle_label", ")", ".", "eq", "(", "angle_label", ")", "\n", "correct_angle", "=", "correct_angle", ".", "sum", "(", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", "\n", "RCNN_acc_angle", "=", "correct_angle", "/", "angle_label", ".", "size", "(", "0", ")", "\n", "\n", "'''\n        Weather\n        '''", "\n", "weather_score", "=", "self", ".", "RCNN_weather_score", "(", "self", ".", "RCNN_weather", "(", "avg_feat", ")", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ")", "\n", "RCNN_loss_weather", "=", "F", ".", "cross_entropy", "(", "weather_score", ",", "weather_label", ")", "\n", "RCNN_loss_weather_adv", "=", "torch", ".", "mean", "(", "\n", "torch", ".", "sum", "(", "weather_score", ".", "softmax", "(", "1", ")", "*", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "weather_score", ".", "softmax", "(", "1", ")", ",", "min", "=", "1e-10", ",", "max", "=", "1.0", ")", ")", ",", "1", ")", ")", "\n", "correct_weather", "=", "weather_score", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "weather_label", ")", ".", "eq", "(", "weather_label", ")", "\n", "correct_weather", "=", "correct_weather", ".", "sum", "(", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", "\n", "RCNN_acc_weather", "=", "correct_weather", "/", "weather_label", ".", "size", "(", "0", ")", "\n", "if", "run_partial", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "RCNN_loss_altitude", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_altitude", ",", "0", ")", "\n", "RCNN_loss_altitude_adv", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_altitude_adv", ",", "0", ")", "\n", "RCNN_acc_altitude", "=", "torch", ".", "unsqueeze", "(", "RCNN_acc_altitude", ",", "0", ")", "\n", "\n", "RCNN_loss_angle", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_angle", ",", "0", ")", "\n", "RCNN_loss_angle_adv", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_angle_adv", ",", "0", ")", "\n", "RCNN_acc_angle", "=", "torch", ".", "unsqueeze", "(", "RCNN_acc_angle", ",", "0", ")", "\n", "\n", "RCNN_loss_weather", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_weather", ",", "0", ")", "\n", "RCNN_loss_weather_adv", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_weather_adv", ",", "0", ")", "\n", "RCNN_acc_weather", "=", "torch", ".", "unsqueeze", "(", "RCNN_acc_weather", ",", "0", ")", "\n", "\n", "", "return", "RCNN_loss_altitude", ",", "RCNN_loss_altitude_adv", ",", "RCNN_acc_altitude", ",", "RCNN_loss_angle", ",", "RCNN_loss_angle_adv", ",", "RCNN_acc_angle", ",", "RCNN_loss_weather", ",", "RCNN_loss_weather_adv", ",", "RCNN_acc_weather", "\n", "\n", "# feed base feature map tp RPN to obtain rois", "\n", "", "rois", ",", "rpn_loss_cls", ",", "rpn_loss_bbox", "=", "self", ".", "RCNN_rpn", "(", "base_feat", ",", "im_info", ",", "gt_boxes", ",", "num_boxes", ")", "\n", "\n", "# if it is training phrase, then use ground truth bboxes for refining", "\n", "if", "self", ".", "training", ":", "\n", "            ", "roi_data", "=", "self", ".", "RCNN_proposal_target", "(", "rois", ",", "gt_boxes", ",", "num_boxes", ")", "# Produces proposal classification labels and bounding-box regression targets.", "\n", "rois", ",", "rois_label", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", "=", "roi_data", "\n", "rois_label", "=", "Variable", "(", "rois_label", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", ")", "\n", "rois_target", "=", "Variable", "(", "rois_target", ".", "view", "(", "-", "1", ",", "rois_target", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_inside_ws", "=", "Variable", "(", "rois_inside_ws", ".", "view", "(", "-", "1", ",", "rois_inside_ws", ".", "size", "(", "2", ")", ")", ")", "\n", "rois_outside_ws", "=", "Variable", "(", "rois_outside_ws", ".", "view", "(", "-", "1", ",", "rois_outside_ws", ".", "size", "(", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "rois_label", "=", "None", "\n", "rois_target", "=", "None", "\n", "rois_inside_ws", "=", "None", "\n", "rois_outside_ws", "=", "None", "\n", "rpn_loss_cls", "=", "0", "\n", "rpn_loss_bbox", "=", "0", "\n", "\n", "", "rois", "=", "Variable", "(", "rois", ")", "\n", "# do roi pooling based on predicted rois", "\n", "\n", "if", "cfg", ".", "POOLING_MODE", "==", "'crop'", ":", "\n", "            ", "grid_xy", "=", "_affine_grid_gen", "(", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ",", "base_feat", ".", "size", "(", ")", "[", "2", ":", "]", ",", "self", ".", "grid_size", ")", "\n", "grid_yx", "=", "torch", ".", "stack", "(", "[", "grid_xy", ".", "data", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "grid_xy", ".", "data", "[", ":", ",", ":", ",", ":", ",", "0", "]", "]", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "pooled_feat", "=", "self", ".", "RCNN_roi_crop", "(", "base_feat", ",", "Variable", "(", "grid_yx", ")", ".", "detach", "(", ")", ")", "\n", "if", "cfg", ".", "CROP_RESIZE_WITH_MAX_POOL", ":", "\n", "                ", "pooled_feat", "=", "F", ".", "max_pool2d", "(", "pooled_feat", ",", "2", ",", "2", ")", "\n", "", "", "elif", "cfg", ".", "POOLING_MODE", "==", "'align'", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_align", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "", "elif", "cfg", ".", "POOLING_MODE", "==", "'pool'", ":", "\n", "            ", "pooled_feat", "=", "self", ".", "RCNN_roi_pool", "(", "base_feat", ",", "rois", ".", "view", "(", "-", "1", ",", "5", ")", ")", "\n", "\n", "# feed pooled features to top model ", "\n", "", "pooled_feat", "=", "self", ".", "_head_to_tail", "(", "pooled_feat", ")", "\n", "\n", "# compute bbox offset", "\n", "bbox_pred", "=", "self", ".", "RCNN_bbox_pred", "(", "pooled_feat", ")", "\n", "if", "self", ".", "training", "and", "not", "self", ".", "class_agnostic", ":", "\n", "# select the corresponding columns according to roi labels", "\n", "            ", "bbox_pred_view", "=", "bbox_pred", ".", "view", "(", "bbox_pred", ".", "size", "(", "0", ")", ",", "int", "(", "bbox_pred", ".", "size", "(", "1", ")", "/", "4", ")", ",", "4", ")", "\n", "bbox_pred_select", "=", "torch", ".", "gather", "(", "bbox_pred_view", ",", "1", ",", "\n", "rois_label", ".", "view", "(", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", ".", "expand", "(", "rois_label", ".", "size", "(", "0", ")", ",", "1", ",", "4", ")", ")", "\n", "bbox_pred", "=", "bbox_pred_select", ".", "squeeze", "(", "1", ")", "\n", "\n", "# compute object classification probability", "\n", "", "cls_score", "=", "self", ".", "RCNN_cls_score", "(", "pooled_feat", ")", "\n", "cls_prob", "=", "F", ".", "softmax", "(", "cls_score", ",", "1", ")", "\n", "\n", "RCNN_loss_cls", "=", "0", "\n", "RCNN_loss_bbox", "=", "0", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# classification loss", "\n", "            ", "RCNN_loss_cls", "=", "F", ".", "cross_entropy", "(", "cls_score", ",", "rois_label", ")", "\n", "\n", "# bounding box regression L1 loss", "\n", "RCNN_loss_bbox", "=", "_smooth_l1_loss", "(", "bbox_pred", ",", "rois_target", ",", "rois_inside_ws", ",", "rois_outside_ws", ")", "\n", "\n", "", "cls_prob", "=", "cls_prob", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "view", "(", "batch_size", ",", "rois", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "rpn_loss_cls", "=", "torch", ".", "unsqueeze", "(", "rpn_loss_cls", ",", "0", ")", "\n", "rpn_loss_bbox", "=", "torch", ".", "unsqueeze", "(", "rpn_loss_bbox", ",", "0", ")", "\n", "RCNN_loss_cls", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_cls", ",", "0", ")", "\n", "RCNN_loss_bbox", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_bbox", ",", "0", ")", "\n", "\n", "RCNN_loss_altitude", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_altitude", ",", "0", ")", "\n", "RCNN_loss_altitude_adv", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_altitude_adv", ",", "0", ")", "\n", "RCNN_acc_altitude", "=", "torch", ".", "unsqueeze", "(", "RCNN_acc_altitude", ",", "0", ")", "\n", "\n", "RCNN_loss_angle", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_angle", ",", "0", ")", "\n", "RCNN_loss_angle_adv", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_angle_adv", ",", "0", ")", "\n", "RCNN_acc_angle", "=", "torch", ".", "unsqueeze", "(", "RCNN_acc_angle", ",", "0", ")", "\n", "\n", "RCNN_loss_weather", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_weather", ",", "0", ")", "\n", "RCNN_loss_weather_adv", "=", "torch", ".", "unsqueeze", "(", "RCNN_loss_weather_adv", ",", "0", ")", "\n", "RCNN_acc_weather", "=", "torch", ".", "unsqueeze", "(", "RCNN_acc_weather", ",", "0", ")", "\n", "\n", "return", "rois", ",", "cls_prob", ",", "bbox_pred", ",", "rpn_loss_cls", ",", "rpn_loss_bbox", ",", "RCNN_loss_cls", ",", "RCNN_loss_bbox", ",", "RCNN_loss_altitude", ",", "RCNN_loss_altitude_adv", ",", "RCNN_acc_altitude", ",", "RCNN_loss_angle", ",", "RCNN_loss_angle_adv", ",", "RCNN_acc_angle", ",", "RCNN_loss_weather", ",", "RCNN_loss_weather_adv", ",", "RCNN_acc_weather", ",", "rois_label", ",", "pool_data", "\n", "\n", "", "return", "rois", ",", "cls_prob", ",", "bbox_pred", ",", "RCNN_acc_altitude", ",", "RCNN_acc_angle", ",", "RCNN_acc_weather", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.faster_rcnn._fasterRCNN._init_weights": [[213, 233], ["faster_rcnn._fasterRCNN._init_weights.normal_init"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "def", "normal_init", "(", "m", ",", "mean", ",", "stddev", ",", "truncated", "=", "False", ")", ":", "\n", "            ", "\"\"\"\n            weight initalizer: truncated normal and random normal.\n            \"\"\"", "\n", "# x is a parameter", "\n", "if", "truncated", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", ")", ".", "fmod_", "(", "2", ")", ".", "mul_", "(", "stddev", ")", ".", "add_", "(", "mean", ")", "# not a perfect approximation", "\n", "", "else", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", ",", "stddev", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_Conv", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_rpn", ".", "RPN_bbox_pred", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_cls_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_bbox_pred", ",", "0", ",", "0.001", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_altitude_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_angle_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "normal_init", "(", "self", ".", "RCNN_weather_score", ",", "0", ",", "0.01", ",", "cfg", ".", "TRAIN", ".", "TRUNCATED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.faster_rcnn._fasterRCNN.create_architecture": [[234, 237], ["faster_rcnn._fasterRCNN._init_modules", "faster_rcnn._fasterRCNN._init_weights"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._init_modules", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.faster_rcnn._fasterRCNN._init_weights"], ["", "def", "create_architecture", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_modules", "(", ")", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.faster_rcnn.concat_all_gather": [[238, 250], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.parallel.gather"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "# tensors_gather = [torch.ones_like(tensor)", "\n", "#     for _ in range(torch.distributed.get_world_size())]", "\n", "# torch.distributed.all_gather(tensors_gather, tensor, async_op=False)", "\n", "\n", "# output = torch.cat(tensors_gather, dim=0)", "\n", "return", "nn", ".", "parallel", ".", "gather", "(", "tensor", ",", "0", ",", "dim", "=", "0", ")", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.BasicBlock.__init__": [[37, 46], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.conv3x3", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.BasicBlock.forward": [[47, 64], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.Bottleneck.__init__": [[69, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.Bottleneck.forward": [[82, 103], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.ResNet.__init__": [[106, 130], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._make_layer", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._make_layer", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._make_layer", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# it is slightly better whereas slower to set stride = 1", "\n", "# self.layer4 = self._make_layer(block, 512, layers[3], stride=1)", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.ResNet._make_layer": [[131, 147], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.ResNet.forward": [[148, 164], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__": [[222, 230], ["model.faster_rcnn.faster_rcnn._fasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classes", ",", "num_layers", "=", "101", ",", "pretrained", "=", "False", ",", "class_agnostic", "=", "False", ")", ":", "\n", "        ", "self", ".", "model_path", "=", "'data/pretrained_model/resnet101_caffe.pth'", "\n", "self", ".", "dout_base_model", "=", "1024", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "self", ".", "inplanes", "=", "1024", "\n", "\n", "_fasterRCNN", ".", "__init__", "(", "self", ",", "classes", ",", "class_agnostic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._init_modules": [[231, 279], ["resnet.resnet101", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base.apply", "resnet101.resnet.RCNN_top.apply", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "resnet101.load_state_dict", "resnet101.resnet._make_layer", "resnet101.resnet._make_layer", "resnet101.resnet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "resnet101.resnet.RCNN_base[].parameters", "classname.find", "m.parameters", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "resnet101.state_dict"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet101", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._make_layer", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._make_layer", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._make_layer"], ["", "def", "_init_modules", "(", "self", ")", ":", "\n", "        ", "resnet", "=", "resnet101", "(", ")", "\n", "\n", "if", "self", ".", "pretrained", "==", "True", ":", "\n", "            ", "print", "(", "\"Loading pretrained weights from %s\"", "%", "(", "self", ".", "model_path", ")", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "model_path", ")", "\n", "resnet", ".", "load_state_dict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "resnet", ".", "state_dict", "(", ")", "}", ")", "\n", "# print(resnet.state_dict().keys())", "\n", "# Build resnet.", "\n", "", "self", ".", "RCNN_base", "=", "nn", ".", "Sequential", "(", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "\n", "resnet", ".", "maxpool", ",", "resnet", ".", "layer1", ",", "resnet", ".", "layer2", ",", "resnet", ".", "layer3", ")", "\n", "\n", "self", ".", "RCNN_top", "=", "nn", ".", "Sequential", "(", "resnet", ".", "layer4", ")", "# objection detection branch \uc784.", "\n", "\n", "self", ".", "RCNN_altitude", "=", "nn", ".", "Sequential", "(", "self", ".", "_make_layer", "(", "Bottleneck", ",", "512", ",", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "RCNN_altitude_score", "=", "nn", ".", "Linear", "(", "2048", ",", "3", ")", "\n", "self", ".", "inplanes", "=", "1024", "\n", "self", ".", "RCNN_angle", "=", "nn", ".", "Sequential", "(", "self", ".", "_make_layer", "(", "Bottleneck", ",", "512", ",", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "RCNN_angle_score", "=", "nn", ".", "Linear", "(", "2048", ",", "3", ")", "\n", "self", ".", "inplanes", "=", "1024", "\n", "self", ".", "RCNN_weather", "=", "nn", ".", "Sequential", "(", "self", ".", "_make_layer", "(", "Bottleneck", ",", "512", ",", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "RCNN_weather_score", "=", "nn", ".", "Linear", "(", "2048", ",", "2", ")", "\n", "\n", "self", ".", "RCNN_cls_score", "=", "nn", ".", "Linear", "(", "2048", ",", "self", ".", "n_classes", ")", "\n", "if", "self", ".", "class_agnostic", ":", "\n", "            ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "2048", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "RCNN_bbox_pred", "=", "nn", ".", "Linear", "(", "2048", ",", "4", "*", "self", ".", "n_classes", ")", "\n", "\n", "# Fix blocks", "\n", "", "for", "p", "in", "self", ".", "RCNN_base", "[", "0", "]", ".", "parameters", "(", ")", ":", "p", ".", "requires_grad", "=", "False", "\n", "for", "p", "in", "self", ".", "RCNN_base", "[", "1", "]", ".", "parameters", "(", ")", ":", "p", ".", "requires_grad", "=", "False", "\n", "\n", "assert", "(", "0", "<=", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "<", "4", ")", "\n", "if", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ">=", "3", ":", "\n", "            ", "for", "p", "in", "self", ".", "RCNN_base", "[", "6", "]", ".", "parameters", "(", ")", ":", "p", ".", "requires_grad", "=", "False", "\n", "", "if", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ">=", "2", ":", "\n", "            ", "for", "p", "in", "self", ".", "RCNN_base", "[", "5", "]", ".", "parameters", "(", ")", ":", "p", ".", "requires_grad", "=", "False", "\n", "", "if", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ">=", "1", ":", "\n", "            ", "for", "p", "in", "self", ".", "RCNN_base", "[", "4", "]", ".", "parameters", "(", ")", ":", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "def", "set_bn_fix", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "                ", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "RCNN_base", ".", "apply", "(", "set_bn_fix", ")", "\n", "self", ".", "RCNN_top", ".", "apply", "(", "set_bn_fix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._make_layer": [[280, 296], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.train": [[297, 313], ["torch.Module.train", "torch.Module.train", "torch.Module.train", "torch.Module.train", "resnet.resnet.RCNN_base.eval", "resnet.resnet.RCNN_base[].train", "resnet.resnet.RCNN_base[].train", "resnet.resnet.RCNN_base.apply", "resnet.resnet.RCNN_top.apply", "classname.find", "m.eval"], "methods", ["home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.train", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.train", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.train", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.train", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.train", "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# Override train so that the training mode is set as we want", "\n", "        ", "nn", ".", "Module", ".", "train", "(", "self", ",", "mode", ")", "\n", "if", "mode", ":", "\n", "# Set fixed blocks to be in eval mode", "\n", "            ", "self", ".", "RCNN_base", ".", "eval", "(", ")", "\n", "self", ".", "RCNN_base", "[", "5", "]", ".", "train", "(", ")", "\n", "self", ".", "RCNN_base", "[", "6", "]", ".", "train", "(", ")", "\n", "\n", "def", "set_bn_eval", "(", "m", ")", ":", "\n", "                ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "self", ".", "RCNN_base", ".", "apply", "(", "set_bn_eval", ")", "\n", "self", ".", "RCNN_top", ".", "apply", "(", "set_bn_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet._head_to_tail": [[314, 318], ["resnet.resnet.RCNN_top().mean().mean", "resnet.resnet.RCNN_top().mean", "resnet.resnet.RCNN_top"], "methods", ["None"], ["", "", "def", "_head_to_tail", "(", "self", ",", "pool5", ")", ":", "\n", "# print(self.RCNN_top(pool5).size())", "\n", "        ", "fc7", "=", "self", ".", "RCNN_top", "(", "pool5", ")", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "return", "fc7", "\n", "", "", ""]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.conv3x3": [[28, 32], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet18": [[166, 175], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet34": [[177, 186], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet50": [[188, 197], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet101": [[199, 208], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.faster_rcnn.resnet.resnet152": [[210, 219], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.2-Chae_A-NDFT.roi_align.__init__._import_symbols": [[6, 14], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], ["# --------------------------------------------------------", "\n", ""]]}