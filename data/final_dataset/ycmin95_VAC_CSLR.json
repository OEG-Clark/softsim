{"home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.seq_train": [[14, 40], ["model.train", "enumerate", "optimizer.scheduler.step", "recoder.print_log", "tqdm.tqdm", "device.data_to_device", "device.data_to_device", "device.data_to_device", "device.data_to_device", "model", "model.criterion_calculation", "optimizer.zero_grad", "model.criterion_calculation.backward", "optimizer.step", "loss_value.append", "numpy.isinf", "numpy.isnan", "print", "model.criterion_calculation.item", "recoder.print_log", "numpy.mean", "model.criterion_calculation.item", "model.criterion_calculation.item", "len", "model.criterion_calculation.item"], "function", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.step", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.SLRModel.criterion_calculation", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.zero_grad", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.step", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log"], ["def", "seq_train", "(", "loader", ",", "model", ",", "optimizer", ",", "device", ",", "epoch_idx", ",", "recoder", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "loss_value", "=", "[", "]", "\n", "clr", "=", "[", "group", "[", "'lr'", "]", "for", "group", "in", "optimizer", ".", "optimizer", ".", "param_groups", "]", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "        ", "vid", "=", "device", ".", "data_to_device", "(", "data", "[", "0", "]", ")", "\n", "vid_lgt", "=", "device", ".", "data_to_device", "(", "data", "[", "1", "]", ")", "\n", "label", "=", "device", ".", "data_to_device", "(", "data", "[", "2", "]", ")", "\n", "label_lgt", "=", "device", ".", "data_to_device", "(", "data", "[", "3", "]", ")", "\n", "ret_dict", "=", "model", "(", "vid", ",", "vid_lgt", ",", "label", "=", "label", ",", "label_lgt", "=", "label_lgt", ")", "\n", "loss", "=", "model", ".", "criterion_calculation", "(", "ret_dict", ",", "label", ",", "label_lgt", ")", "\n", "if", "np", ".", "isinf", "(", "loss", ".", "item", "(", ")", ")", "or", "np", ".", "isnan", "(", "loss", ".", "item", "(", ")", ")", ":", "\n", "            ", "print", "(", "data", "[", "-", "1", "]", ")", "\n", "continue", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# nn.utils.clip_grad_norm_(model.rnn.parameters(), 5)", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss_value", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "if", "batch_idx", "%", "recoder", ".", "log_interval", "==", "0", ":", "\n", "            ", "recoder", ".", "print_log", "(", "\n", "'\\tEpoch: {}, Batch({}/{}) done. Loss: {:.8f}  lr:{:.6f}'", "\n", ".", "format", "(", "epoch_idx", ",", "batch_idx", ",", "len", "(", "loader", ")", ",", "loss", ".", "item", "(", ")", ",", "clr", "[", "0", "]", ")", ")", "\n", "", "", "optimizer", ".", "scheduler", ".", "step", "(", ")", "\n", "recoder", ".", "print_log", "(", "'\\tMean training loss: {:.10f}.'", ".", "format", "(", "np", ".", "mean", "(", "loss_value", ")", ")", ")", "\n", "return", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.seq_eval": [[42, 88], ["model.eval", "enumerate", "recoder.print_log", "tqdm.tqdm", "recoder.record_timer", "device.data_to_device", "device.data_to_device", "device.data_to_device", "device.data_to_device", "seq_scripts.write2file", "seq_scripts.write2file", "evaluation.slr_eval.wer_calculation.evaluate", "evaluation.slr_eval.wer_calculation.evaluate", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "print", "len", "file_name.split", "sys.exc_info"], "function", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.record_timer", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.write2file", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.write2file", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.wer_calculation.evaluate", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.wer_calculation.evaluate"], ["", "def", "seq_eval", "(", "cfg", ",", "loader", ",", "model", ",", "device", ",", "mode", ",", "epoch", ",", "work_dir", ",", "recoder", ",", "\n", "evaluate_tool", "=", "\"python\"", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_sent", "=", "[", "]", "\n", "total_info", "=", "[", "]", "\n", "total_conv_sent", "=", "[", "]", "\n", "stat", "=", "{", "i", ":", "[", "0", ",", "0", "]", "for", "i", "in", "range", "(", "len", "(", "loader", ".", "dataset", ".", "dict", ")", ")", "}", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "        ", "recoder", ".", "record_timer", "(", "\"device\"", ")", "\n", "vid", "=", "device", ".", "data_to_device", "(", "data", "[", "0", "]", ")", "\n", "vid_lgt", "=", "device", ".", "data_to_device", "(", "data", "[", "1", "]", ")", "\n", "label", "=", "device", ".", "data_to_device", "(", "data", "[", "2", "]", ")", "\n", "label_lgt", "=", "device", ".", "data_to_device", "(", "data", "[", "3", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "ret_dict", "=", "model", "(", "vid", ",", "vid_lgt", ",", "label", "=", "label", ",", "label_lgt", "=", "label_lgt", ")", "\n", "\n", "", "total_info", "+=", "[", "file_name", ".", "split", "(", "\"|\"", ")", "[", "0", "]", "for", "file_name", "in", "data", "[", "-", "1", "]", "]", "\n", "total_sent", "+=", "ret_dict", "[", "'recognized_sents'", "]", "\n", "total_conv_sent", "+=", "ret_dict", "[", "'conv_sents'", "]", "\n", "", "try", ":", "\n", "        ", "python_eval", "=", "True", "if", "evaluate_tool", "==", "\"python\"", "else", "False", "\n", "write2file", "(", "work_dir", "+", "\"output-hypothesis-{}.ctm\"", ".", "format", "(", "mode", ")", ",", "total_info", ",", "total_sent", ")", "\n", "write2file", "(", "work_dir", "+", "\"output-hypothesis-{}-conv.ctm\"", ".", "format", "(", "mode", ")", ",", "total_info", ",", "\n", "total_conv_sent", ")", "\n", "conv_ret", "=", "evaluate", "(", "\n", "prefix", "=", "work_dir", ",", "mode", "=", "mode", ",", "output_file", "=", "\"output-hypothesis-{}-conv.ctm\"", ".", "format", "(", "mode", ")", ",", "\n", "evaluate_dir", "=", "cfg", ".", "dataset_info", "[", "'evaluation_dir'", "]", ",", "\n", "evaluate_prefix", "=", "cfg", ".", "dataset_info", "[", "'evaluation_prefix'", "]", ",", "\n", "output_dir", "=", "\"epoch_{}_result/\"", ".", "format", "(", "epoch", ")", ",", "\n", "python_evaluate", "=", "python_eval", ",", "\n", ")", "\n", "lstm_ret", "=", "evaluate", "(", "\n", "prefix", "=", "work_dir", ",", "mode", "=", "mode", ",", "output_file", "=", "\"output-hypothesis-{}.ctm\"", ".", "format", "(", "mode", ")", ",", "\n", "evaluate_dir", "=", "cfg", ".", "dataset_info", "[", "'evaluation_dir'", "]", ",", "\n", "evaluate_prefix", "=", "cfg", ".", "dataset_info", "[", "'evaluation_prefix'", "]", ",", "\n", "output_dir", "=", "\"epoch_{}_result/\"", ".", "format", "(", "epoch", ")", ",", "\n", "python_evaluate", "=", "python_eval", ",", "\n", "triplet", "=", "True", ",", "\n", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"Unexpected error:\"", ",", "sys", ".", "exc_info", "(", ")", "[", "0", "]", ")", "\n", "lstm_ret", "=", "100.0", "\n", "", "finally", ":", "\n", "        ", "pass", "\n", "", "recoder", ".", "print_log", "(", "f\"Epoch {epoch}, {mode} {lstm_ret: 2.2f}%\"", ",", "f\"{work_dir}/{mode}.txt\"", ")", "\n", "return", "lstm_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.seq_feature_generation": [[90, 129], ["model.eval", "os.path.abspath", "os.path.abspath", "os.path.islink", "tqdm.tqdm", "os.symlink", "os.path.exists", "os.makedirs", "os.readlink", "enumerate", "recoder.record_timer", "device.data_to_device", "device.data_to_device", "range", "os.path.isabs", "os.unlink", "os.path.exists", "os.symlink", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "os.path.exists", "os.makedirs", "len", "numpy.save", "len", "len", "len", "[].T.cpu().detach", "os.listdir", "[].split", "[].T.cpu"], "function", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.record_timer", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device"], ["", "def", "seq_feature_generation", "(", "loader", ",", "model", ",", "device", ",", "mode", ",", "work_dir", ",", "recoder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "src_path", "=", "os", ".", "path", ".", "abspath", "(", "f\"{work_dir}{mode}\"", ")", "\n", "tgt_path", "=", "os", ".", "path", ".", "abspath", "(", "f\"./features/{mode}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./features/\"", ")", ":", "\n", "    \t", "os", ".", "makedirs", "(", "\"./features/\"", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "islink", "(", "tgt_path", ")", ":", "\n", "        ", "curr_path", "=", "os", ".", "readlink", "(", "tgt_path", ")", "\n", "if", "work_dir", "[", "1", ":", "]", "in", "curr_path", "and", "os", ".", "path", ".", "isabs", "(", "curr_path", ")", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "os", ".", "unlink", "(", "tgt_path", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "src_path", ")", "and", "len", "(", "loader", ".", "dataset", ")", "==", "len", "(", "os", ".", "listdir", "(", "src_path", ")", ")", ":", "\n", "            ", "os", ".", "symlink", "(", "src_path", ",", "tgt_path", ")", "\n", "return", "\n", "\n", "", "", "for", "batch_idx", ",", "data", "in", "tqdm", "(", "enumerate", "(", "loader", ")", ")", ":", "\n", "        ", "recoder", ".", "record_timer", "(", "\"device\"", ")", "\n", "vid", "=", "device", ".", "data_to_device", "(", "data", "[", "0", "]", ")", "\n", "vid_lgt", "=", "device", ".", "data_to_device", "(", "data", "[", "1", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "ret_dict", "=", "model", "(", "vid", ",", "vid_lgt", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "src_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "src_path", ")", "\n", "", "start", "=", "0", "\n", "for", "sample_idx", "in", "range", "(", "len", "(", "vid", ")", ")", ":", "\n", "            ", "end", "=", "start", "+", "data", "[", "3", "]", "[", "sample_idx", "]", "\n", "filename", "=", "f\"{src_path}/{data[-1][sample_idx].split('|')[0]}_features.npy\"", "\n", "save_file", "=", "{", "\n", "\"label\"", ":", "data", "[", "2", "]", "[", "start", ":", "end", "]", ",", "\n", "\"features\"", ":", "ret_dict", "[", "'framewise_features'", "]", "[", "sample_idx", "]", "[", ":", ",", ":", "vid_lgt", "[", "sample_idx", "]", "]", ".", "T", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "\n", "}", "\n", "np", ".", "save", "(", "filename", ",", "save_file", ")", "\n", "start", "=", "end", "\n", "", "assert", "end", "==", "len", "(", "data", "[", "2", "]", ")", "\n", "", "os", ".", "symlink", "(", "src_path", ",", "tgt_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.write2file": [[131, 140], ["open", "enumerate", "enumerate", "open.writelines"], "function", ["None"], ["", "def", "write2file", "(", "path", ",", "info", ",", "output", ")", ":", "\n", "    ", "filereader", "=", "open", "(", "path", ",", "\"w\"", ")", "\n", "for", "sample_idx", ",", "sample", "in", "enumerate", "(", "output", ")", ":", "\n", "        ", "for", "word_idx", ",", "word", "in", "enumerate", "(", "sample", ")", ":", "\n", "            ", "filereader", ".", "writelines", "(", "\n", "\"{} 1 {:.2f} {:.2f} {}\\n\"", ".", "format", "(", "info", "[", "sample_idx", "]", ",", "\n", "word_idx", "*", "1.0", "/", "100", ",", "\n", "(", "word_idx", "+", "1", ")", "*", "1.0", "/", "100", ",", "\n", "word", "[", "0", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.Identity.__init__": [[15, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.Identity.forward": [[18, 20], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.NormLinear.__init__": [[23, 27], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "NormLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_dim", ",", "out_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.NormLinear.forward": [[28, 31], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.normalize", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.normalize", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "torch", ".", "matmul", "(", "x", ",", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.SLRModel.__init__": [[34, 64], ["torch.Module.__init__", "dict", "slr_network.SLRModel.criterion_init", "slr_network.Identity", "modules.TemporalConv", "utils.Decode", "modules.BiLSTMLayer", "slr_network.SLRModel.register_backward_hook", "getattr", "slr_network.NormLinear", "slr_network.NormLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.SLRModel.criterion_init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "num_classes", ",", "c2d_type", ",", "conv_type", ",", "use_bn", "=", "False", ",", "\n", "hidden_size", "=", "1024", ",", "gloss_dict", "=", "None", ",", "loss_weights", "=", "None", ",", "\n", "weight_norm", "=", "True", ",", "share_classifier", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "SLRModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder", "=", "None", "\n", "self", ".", "loss", "=", "dict", "(", ")", "\n", "self", ".", "criterion_init", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "self", ".", "conv2d", "=", "getattr", "(", "models", ",", "c2d_type", ")", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "conv2d", ".", "fc", "=", "Identity", "(", ")", "\n", "self", ".", "conv1d", "=", "TemporalConv", "(", "input_size", "=", "512", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "conv_type", "=", "conv_type", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "decoder", "=", "utils", ".", "Decode", "(", "gloss_dict", ",", "num_classes", ",", "'beam'", ")", "\n", "self", ".", "temporal_model", "=", "BiLSTMLayer", "(", "rnn_type", "=", "'LSTM'", ",", "input_size", "=", "hidden_size", ",", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "2", ",", "bidirectional", "=", "True", ")", "\n", "if", "weight_norm", ":", "\n", "            ", "self", ".", "classifier", "=", "NormLinear", "(", "hidden_size", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "conv1d", ".", "fc", "=", "NormLinear", "(", "hidden_size", ",", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "self", ".", "num_classes", ")", "\n", "", "if", "share_classifier", ":", "\n", "            ", "self", ".", "conv1d", ".", "fc", "=", "self", ".", "classifier", "\n", "", "self", ".", "register_backward_hook", "(", "self", ".", "backward_hook", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.SLRModel.backward_hook": [[65, 68], ["None"], "methods", ["None"], ["", "def", "backward_hook", "(", "self", ",", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "        ", "for", "g", "in", "grad_input", ":", "\n", "            ", "g", "[", "g", "!=", "g", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.SLRModel.masked_bn": [[69, 78], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "slr_network.SLRModel.conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "slr_network.SLRModel.masked_bn.pad"], "methods", ["None"], ["", "", "def", "masked_bn", "(", "self", ",", "inputs", ",", "len_x", ")", ":", "\n", "        ", "def", "pad", "(", "tensor", ",", "length", ")", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "tensor", ",", "tensor", ".", "new", "(", "length", "-", "tensor", ".", "size", "(", "0", ")", ",", "*", "tensor", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "zero_", "(", ")", "]", ")", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "inputs", "[", "len_x", "[", "0", "]", "*", "idx", ":", "len_x", "[", "0", "]", "*", "idx", "+", "lgt", "]", "for", "idx", ",", "lgt", "in", "enumerate", "(", "len_x", ")", "]", ")", "\n", "x", "=", "self", ".", "conv2d", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "pad", "(", "x", "[", "sum", "(", "len_x", "[", ":", "idx", "]", ")", ":", "sum", "(", "len_x", "[", ":", "idx", "+", "1", "]", ")", "]", ",", "len_x", "[", "0", "]", ")", "\n", "for", "idx", ",", "lgt", "in", "enumerate", "(", "len_x", ")", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.SLRModel.forward": [[79, 109], ["slr_network.SLRModel.conv1d", "slr_network.SLRModel.temporal_model", "slr_network.SLRModel.classifier", "len", "x.reshape", "slr_network.SLRModel.masked_bn", "framewise.reshape().transpose.reshape().transpose.reshape().transpose", "slr_network.SLRModel.decoder.decode", "slr_network.SLRModel.decoder.decode", "framewise.reshape().transpose.reshape().transpose.reshape"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.SLRModel.masked_bn", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.decode.Decode.decode", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.decode.Decode.decode"], ["", "def", "forward", "(", "self", ",", "x", ",", "len_x", ",", "label", "=", "None", ",", "label_lgt", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "x", ".", "shape", ")", "==", "5", ":", "\n", "# videos", "\n", "            ", "batch", ",", "temp", ",", "channel", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "inputs", "=", "x", ".", "reshape", "(", "batch", "*", "temp", ",", "channel", ",", "height", ",", "width", ")", "\n", "framewise", "=", "self", ".", "masked_bn", "(", "inputs", ",", "len_x", ")", "\n", "framewise", "=", "framewise", ".", "reshape", "(", "batch", ",", "temp", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "# frame-wise features", "\n", "            ", "framewise", "=", "x", "\n", "\n", "", "conv1d_outputs", "=", "self", ".", "conv1d", "(", "framewise", ",", "len_x", ")", "\n", "# x: T, B, C", "\n", "x", "=", "conv1d_outputs", "[", "'visual_feat'", "]", "\n", "lgt", "=", "conv1d_outputs", "[", "'feat_len'", "]", "\n", "tm_outputs", "=", "self", ".", "temporal_model", "(", "x", ",", "lgt", ")", "\n", "outputs", "=", "self", ".", "classifier", "(", "tm_outputs", "[", "'predictions'", "]", ")", "\n", "pred", "=", "None", "if", "self", ".", "training", "else", "self", ".", "decoder", ".", "decode", "(", "outputs", ",", "lgt", ",", "batch_first", "=", "False", ",", "probs", "=", "False", ")", "\n", "conv_pred", "=", "None", "if", "self", ".", "training", "else", "self", ".", "decoder", ".", "decode", "(", "conv1d_outputs", "[", "'conv_logits'", "]", ",", "lgt", ",", "batch_first", "=", "False", ",", "probs", "=", "False", ")", "\n", "\n", "return", "{", "\n", "\"framewise_features\"", ":", "framewise", ",", "\n", "\"visual_features\"", ":", "x", ",", "\n", "\"feat_len\"", ":", "lgt", ",", "\n", "\"conv_logits\"", ":", "conv1d_outputs", "[", "'conv_logits'", "]", ",", "\n", "\"sequence_logits\"", ":", "outputs", ",", "\n", "\"conv_sents\"", ":", "conv_pred", ",", "\n", "\"recognized_sents\"", ":", "pred", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.SLRModel.criterion_calculation": [[111, 127], ["slr_network.SLRModel.loss_weights.items", "ret_dict[].log_softmax", "label.cpu().int", "ret_dict[].cpu().int", "label_lgt.cpu().int", "ret_dict[].detach", "ret_dict[].log_softmax", "label.cpu().int", "ret_dict[].cpu().int", "label_lgt.cpu().int", "label.cpu", "ret_dict[].cpu", "label_lgt.cpu", "label.cpu", "ret_dict[].cpu", "label_lgt.cpu"], "methods", ["None"], ["", "def", "criterion_calculation", "(", "self", ",", "ret_dict", ",", "label", ",", "label_lgt", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "k", ",", "weight", "in", "self", ".", "loss_weights", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "==", "'ConvCTC'", ":", "\n", "                ", "loss", "+=", "weight", "*", "self", ".", "loss", "[", "'CTCLoss'", "]", "(", "ret_dict", "[", "\"conv_logits\"", "]", ".", "log_softmax", "(", "-", "1", ")", ",", "\n", "label", ".", "cpu", "(", ")", ".", "int", "(", ")", ",", "ret_dict", "[", "\"feat_len\"", "]", ".", "cpu", "(", ")", ".", "int", "(", ")", ",", "\n", "label_lgt", ".", "cpu", "(", ")", ".", "int", "(", ")", ")", ".", "mean", "(", ")", "\n", "", "elif", "k", "==", "'SeqCTC'", ":", "\n", "                ", "loss", "+=", "weight", "*", "self", ".", "loss", "[", "'CTCLoss'", "]", "(", "ret_dict", "[", "\"sequence_logits\"", "]", ".", "log_softmax", "(", "-", "1", ")", ",", "\n", "label", ".", "cpu", "(", ")", ".", "int", "(", ")", ",", "ret_dict", "[", "\"feat_len\"", "]", ".", "cpu", "(", ")", ".", "int", "(", ")", ",", "\n", "label_lgt", ".", "cpu", "(", ")", ".", "int", "(", ")", ")", ".", "mean", "(", ")", "\n", "", "elif", "k", "==", "'Dist'", ":", "\n", "                ", "loss", "+=", "weight", "*", "self", ".", "loss", "[", "'distillation'", "]", "(", "ret_dict", "[", "\"conv_logits\"", "]", ",", "\n", "ret_dict", "[", "\"sequence_logits\"", "]", ".", "detach", "(", ")", ",", "\n", "use_blank", "=", "False", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.slr_network.SLRModel.criterion_init": [[128, 132], ["torch.nn.CTCLoss", "torch.nn.CTCLoss", "torch.nn.CTCLoss", "torch.nn.CTCLoss", "torch.nn.CTCLoss", "torch.nn.CTCLoss", "torch.nn.CTCLoss", "torch.nn.CTCLoss", "torch.nn.CTCLoss", "modules.criterions.SeqKD"], "methods", ["None"], ["", "def", "criterion_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", "[", "'CTCLoss'", "]", "=", "torch", ".", "nn", ".", "CTCLoss", "(", "reduction", "=", "'none'", ",", "zero_infinity", "=", "False", ")", "\n", "self", ".", "loss", "[", "'distillation'", "]", "=", "SeqKD", "(", "T", "=", "8", ")", "\n", "return", "self", ".", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.__init__": [[23, 35], ["main.Processor.save_arg", "utils.GpuDataParallel", "utils.Recorder", "numpy.load().item", "main.Processor.loading", "utils.RandomState", "len", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.save_arg", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.loading"], ["    ", "def", "__init__", "(", "self", ",", "arg", ")", ":", "\n", "        ", "self", ".", "arg", "=", "arg", "\n", "self", ".", "save_arg", "(", ")", "\n", "if", "self", ".", "arg", ".", "random_fix", ":", "\n", "            ", "self", ".", "rng", "=", "utils", ".", "RandomState", "(", "seed", "=", "self", ".", "arg", ".", "random_seed", ")", "\n", "", "self", ".", "device", "=", "utils", ".", "GpuDataParallel", "(", ")", "\n", "self", ".", "recoder", "=", "utils", ".", "Recorder", "(", "self", ".", "arg", ".", "work_dir", ",", "self", ".", "arg", ".", "print_log", ",", "self", ".", "arg", ".", "log_interval", ")", "\n", "self", ".", "dataset", "=", "{", "}", "\n", "self", ".", "data_loader", "=", "{", "}", "\n", "self", ".", "gloss_dict", "=", "np", ".", "load", "(", "self", ".", "arg", ".", "dataset_info", "[", "'dict_path'", "]", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "self", ".", "arg", ".", "model_args", "[", "'num_classes'", "]", "=", "len", "(", "self", ".", "gloss_dict", ")", "+", "1", "\n", "self", ".", "model", ",", "self", ".", "optimizer", "=", "self", ".", "loading", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.start": [[36, 72], ["main.Processor.recoder.print_log", "range", "seq_scripts.seq_train", "main.Processor.recoder.print_log", "main.Processor.recoder.print_log", "seq_scripts.seq_eval", "seq_scripts.seq_eval", "main.Processor.recoder.print_log", "str", "seq_scripts.seq_eval", "main.Processor.recoder.print_log", "seq_model_list.append", "print", "main.Processor.save_model", "ValueError", "vars", "seq_scripts.seq_feature_generation"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.seq_train", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.seq_eval", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.seq_eval", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.seq_eval", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.save_model", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.seq_scripts.seq_feature_generation"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "arg", ".", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "recoder", ".", "print_log", "(", "'Parameters:\\n{}\\n'", ".", "format", "(", "str", "(", "vars", "(", "self", ".", "arg", ")", ")", ")", ")", "\n", "seq_model_list", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "self", ".", "arg", ".", "optimizer_args", "[", "'start_epoch'", "]", ",", "self", ".", "arg", ".", "num_epoch", ")", ":", "\n", "                ", "save_model", "=", "epoch", "%", "self", ".", "arg", ".", "save_interval", "==", "0", "\n", "eval_model", "=", "epoch", "%", "self", ".", "arg", ".", "eval_interval", "==", "0", "\n", "# train end2end model", "\n", "seq_train", "(", "self", ".", "data_loader", "[", "'train'", "]", ",", "self", ".", "model", ",", "self", ".", "optimizer", ",", "\n", "self", ".", "device", ",", "epoch", ",", "self", ".", "recoder", ")", "\n", "if", "eval_model", ":", "\n", "                    ", "dev_wer", "=", "seq_eval", "(", "self", ".", "arg", ",", "self", ".", "data_loader", "[", "'dev'", "]", ",", "self", ".", "model", ",", "self", ".", "device", ",", "\n", "'dev'", ",", "epoch", ",", "self", ".", "arg", ".", "work_dir", ",", "self", ".", "recoder", ",", "self", ".", "arg", ".", "evaluate_tool", ")", "\n", "self", ".", "recoder", ".", "print_log", "(", "\"Dev WER: {:05.2f}%\"", ".", "format", "(", "dev_wer", ")", ")", "\n", "", "if", "save_model", ":", "\n", "                    ", "model_path", "=", "\"{}dev_{:05.2f}_epoch{}_model.pt\"", ".", "format", "(", "self", ".", "arg", ".", "work_dir", ",", "dev_wer", ",", "epoch", ")", "\n", "seq_model_list", ".", "append", "(", "model_path", ")", "\n", "print", "(", "\"seq_model_list\"", ",", "seq_model_list", ")", "\n", "self", ".", "save_model", "(", "epoch", ",", "model_path", ")", "\n", "", "", "", "elif", "self", ".", "arg", ".", "phase", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "arg", ".", "load_weights", "is", "None", "and", "self", ".", "arg", ".", "load_checkpoints", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Please appoint --load-weights.'", ")", "\n", "", "self", ".", "recoder", ".", "print_log", "(", "'Model:   {}.'", ".", "format", "(", "self", ".", "arg", ".", "model", ")", ")", "\n", "self", ".", "recoder", ".", "print_log", "(", "'Weights: {}.'", ".", "format", "(", "self", ".", "arg", ".", "load_weights", ")", ")", "\n", "# train_wer = seq_eval(self.arg, self.data_loader[\"train_eval\"], self.model, self.device,", "\n", "#                      \"train\", 6667, self.arg.work_dir, self.recoder, self.arg.evaluate_tool)", "\n", "dev_wer", "=", "seq_eval", "(", "self", ".", "arg", ",", "self", ".", "data_loader", "[", "\"dev\"", "]", ",", "self", ".", "model", ",", "self", ".", "device", ",", "\n", "\"dev\"", ",", "6667", ",", "self", ".", "arg", ".", "work_dir", ",", "self", ".", "recoder", ",", "self", ".", "arg", ".", "evaluate_tool", ")", "\n", "test_wer", "=", "seq_eval", "(", "self", ".", "arg", ",", "self", ".", "data_loader", "[", "\"test\"", "]", ",", "self", ".", "model", ",", "self", ".", "device", ",", "\n", "\"test\"", ",", "6667", ",", "self", ".", "arg", ".", "work_dir", ",", "self", ".", "recoder", ",", "self", ".", "arg", ".", "evaluate_tool", ")", "\n", "self", ".", "recoder", ".", "print_log", "(", "'Evaluation Done.\\n'", ")", "\n", "", "elif", "self", ".", "arg", ".", "phase", "==", "\"features\"", ":", "\n", "            ", "for", "mode", "in", "[", "\"train\"", ",", "\"dev\"", ",", "\"test\"", "]", ":", "\n", "                ", "seq_feature_generation", "(", "\n", "self", ".", "data_loader", "[", "mode", "+", "\"_eval\"", "if", "mode", "==", "\"train\"", "else", "mode", "]", ",", "\n", "self", ".", "model", ",", "self", ".", "device", ",", "mode", ",", "self", ".", "arg", ".", "work_dir", ",", "self", ".", "recoder", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.save_arg": [[74, 80], ["vars", "os.path.exists", "os.makedirs", "open", "yaml.dump"], "methods", ["None"], ["", "", "", "def", "save_arg", "(", "self", ")", ":", "\n", "        ", "arg_dict", "=", "vars", "(", "self", ".", "arg", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "arg", ".", "work_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "arg", ".", "work_dir", ")", "\n", "", "with", "open", "(", "'{}/config.yaml'", ".", "format", "(", "self", ".", "arg", ".", "work_dir", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "arg_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.save_model": [[81, 89], ["torch.save", "torch.save", "torch.save", "torch.save", "main.Processor.model.state_dict", "main.Processor.optimizer.state_dict", "main.Processor.optimizer.scheduler.state_dict", "main.Processor.rng.save_rng_state"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.state_dict", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.state_dict", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.state_dict", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.random_state.RandomState.save_rng_state"], ["", "", "def", "save_model", "(", "self", ",", "epoch", ",", "save_path", ")", ":", "\n", "        ", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler_state_dict'", ":", "self", ".", "optimizer", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'rng_state'", ":", "self", ".", "rng", ".", "save_rng_state", "(", ")", ",", "\n", "}", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.loading": [[90, 109], ["main.Processor.device.set_device", "print", "main.import_class", "import_class.", "utils.Optimizer", "main.Processor.model_to_device", "print", "main.Processor.load_data", "main.Processor.load_model_weights", "main.Processor.load_checkpoint_weights"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.set_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.import_class", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.model_to_device", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.load_data", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.load_model_weights", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.load_checkpoint_weights"], ["", "def", "loading", "(", "self", ")", ":", "\n", "        ", "self", ".", "device", ".", "set_device", "(", "self", ".", "arg", ".", "device", ")", "\n", "print", "(", "\"Loading model\"", ")", "\n", "model_class", "=", "import_class", "(", "self", ".", "arg", ".", "model", ")", "\n", "model", "=", "model_class", "(", "\n", "**", "self", ".", "arg", ".", "model_args", ",", "\n", "gloss_dict", "=", "self", ".", "gloss_dict", ",", "\n", "loss_weights", "=", "self", ".", "arg", ".", "loss_weights", ",", "\n", ")", "\n", "optimizer", "=", "utils", ".", "Optimizer", "(", "model", ",", "self", ".", "arg", ".", "optimizer_args", ")", "\n", "\n", "if", "self", ".", "arg", ".", "load_weights", ":", "\n", "            ", "self", ".", "load_model_weights", "(", "model", ",", "self", ".", "arg", ".", "load_weights", ")", "\n", "", "elif", "self", ".", "arg", ".", "load_checkpoints", ":", "\n", "            ", "self", ".", "load_checkpoint_weights", "(", "model", ",", "optimizer", ")", "\n", "", "model", "=", "self", ".", "model_to_device", "(", "model", ")", "\n", "print", "(", "\"Loading model finished.\"", ")", "\n", "self", ".", "load_data", "(", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.model_to_device": [[110, 120], ["modules.sync_batchnorm.convert_model.to", "modules.sync_batchnorm.convert_model", "modules.sync_batchnorm.convert_model.cuda", "len", "torch.DataParallel", "torch.DataParallel"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.to", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm.convert_model"], ["", "def", "model_to_device", "(", "self", ",", "model", ")", ":", "\n", "        ", "model", "=", "model", ".", "to", "(", "self", ".", "device", ".", "output_device", ")", "\n", "if", "len", "(", "self", ".", "device", ".", "gpu_list", ")", ">", "1", ":", "\n", "            ", "model", ".", "conv2d", "=", "nn", ".", "DataParallel", "(", "\n", "model", ".", "conv2d", ",", "\n", "device_ids", "=", "self", ".", "device", ".", "gpu_list", ",", "\n", "output_device", "=", "self", ".", "device", ".", "output_device", ")", "\n", "", "model", "=", "convert_model", "(", "model", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.load_model_weights": [[121, 132], ["torch.load", "torch.load", "torch.load", "torch.load", "len", "main.Processor.modified_weights", "model.load_state_dict", "torch.load.pop", "torch.load.pop", "print", "print"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.modified_weights", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.load_state_dict"], ["", "def", "load_model_weights", "(", "self", ",", "model", ",", "weight_path", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "weight_path", ")", "\n", "if", "len", "(", "self", ".", "arg", ".", "ignore_weights", ")", ":", "\n", "            ", "for", "w", "in", "self", ".", "arg", ".", "ignore_weights", ":", "\n", "                ", "if", "state_dict", ".", "pop", "(", "w", ",", "None", ")", "is", "not", "None", ":", "\n", "                    ", "print", "(", "'Successfully Remove Weights: {}.'", ".", "format", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'Can Not Remove Weights: {}.'", ".", "format", "(", "w", ")", ")", "\n", "", "", "", "weights", "=", "self", ".", "modified_weights", "(", "state_dict", "[", "'model_state_dict'", "]", ",", "False", ")", "\n", "# weights = self.modified_weights(state_dict['model_state_dict'])", "\n", "model", ".", "load_state_dict", "(", "weights", ",", "strict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.modified_weights": [[133, 140], ["collections.OrderedDict", "dict", "k.replace", "collections.OrderedDict.items"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modified_weights", "(", "state_dict", ",", "modified", "=", "False", ")", ":", "\n", "        ", "state_dict", "=", "OrderedDict", "(", "[", "(", "k", ".", "replace", "(", "'.module'", ",", "''", ")", ",", "v", ")", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "]", ")", "\n", "if", "not", "modified", ":", "\n", "            ", "return", "state_dict", "\n", "", "modified_dict", "=", "dict", "(", ")", "\n", "return", "modified_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.load_checkpoint_weights": [[141, 158], ["main.Processor.load_model_weights", "torch.load", "torch.load", "torch.load", "torch.load", "main.Processor.recoder.print_log", "len", "len", "print", "main.Processor.rng.set_rng_state", "torch.load.keys", "torch.load.keys", "print", "optimizer.load_state_dict", "optimizer.to", "torch.load.keys", "torch.load.keys", "print", "optimizer.scheduler.load_state_dict", "torch.cuda.get_rng_state_all", "torch.cuda.get_rng_state_all", "torch.cuda.get_rng_state_all", "torch.cuda.get_rng_state_all"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.load_model_weights", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.random_state.RandomState.set_rng_state", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.load_state_dict", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.to", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.load_state_dict"], ["", "def", "load_checkpoint_weights", "(", "self", ",", "model", ",", "optimizer", ")", ":", "\n", "        ", "self", ".", "load_model_weights", "(", "model", ",", "self", ".", "arg", ".", "load_checkpoints", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "arg", ".", "load_checkpoints", ")", "\n", "\n", "if", "len", "(", "torch", ".", "cuda", ".", "get_rng_state_all", "(", ")", ")", "==", "len", "(", "state_dict", "[", "'rng_state'", "]", "[", "'cuda'", "]", ")", ":", "\n", "            ", "print", "(", "\"Loading random seeds...\"", ")", "\n", "self", ".", "rng", ".", "set_rng_state", "(", "state_dict", "[", "'rng_state'", "]", ")", "\n", "", "if", "\"optimizer_state_dict\"", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "\"Loading optimizer parameters...\"", ")", "\n", "optimizer", ".", "load_state_dict", "(", "state_dict", "[", "\"optimizer_state_dict\"", "]", ")", "\n", "optimizer", ".", "to", "(", "self", ".", "device", ".", "output_device", ")", "\n", "", "if", "\"scheduler_state_dict\"", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "\"Loading scheduler parameters...\"", ")", "\n", "optimizer", ".", "scheduler", ".", "load_state_dict", "(", "state_dict", "[", "\"scheduler_state_dict\"", "]", ")", "\n", "\n", "", "self", ".", "arg", ".", "optimizer_args", "[", "'start_epoch'", "]", "=", "state_dict", "[", "\"epoch\"", "]", "+", "1", "\n", "self", ".", "recoder", ".", "print_log", "(", "\"Resuming from checkpoint: epoch {self.arg.optimizer_args['start_epoch']}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.load_data": [[159, 171], ["print", "main.import_class", "zip", "enumerate", "print", "main.Processor.feeder", "main.Processor.build_dataloader", "mode.split"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.import_class", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.build_dataloader"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Loading data\"", ")", "\n", "self", ".", "feeder", "=", "import_class", "(", "self", ".", "arg", ".", "feeder", ")", "\n", "dataset_list", "=", "zip", "(", "[", "\"train\"", ",", "\"train_eval\"", ",", "\"dev\"", ",", "\"test\"", "]", ",", "[", "True", ",", "False", ",", "False", ",", "False", "]", ")", "\n", "for", "idx", ",", "(", "mode", ",", "train_flag", ")", "in", "enumerate", "(", "dataset_list", ")", ":", "\n", "            ", "arg", "=", "self", ".", "arg", ".", "feeder_args", "\n", "arg", "[", "\"prefix\"", "]", "=", "self", ".", "arg", ".", "dataset_info", "[", "'dataset_root'", "]", "\n", "arg", "[", "\"mode\"", "]", "=", "mode", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "arg", "[", "\"transform_mode\"", "]", "=", "train_flag", "\n", "self", ".", "dataset", "[", "mode", "]", "=", "self", ".", "feeder", "(", "gloss_dict", "=", "self", ".", "gloss_dict", ",", "**", "arg", ")", "\n", "self", ".", "data_loader", "[", "mode", "]", "=", "self", ".", "build_dataloader", "(", "self", ".", "dataset", "[", "mode", "]", ",", "mode", ",", "train_flag", ")", "\n", "", "print", "(", "\"Loading data finished.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.Processor.build_dataloader": [[172, 180], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "build_dataloader", "(", "self", ",", "dataset", ",", "mode", ",", "train_flag", ")", ":", "\n", "        ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "self", ".", "arg", ".", "batch_size", "if", "mode", "==", "\"train\"", "else", "self", ".", "arg", ".", "test_batch_size", ",", "\n", "shuffle", "=", "train_flag", ",", "\n", "drop_last", "=", "train_flag", ",", "\n", "num_workers", "=", "self", ".", "arg", ".", "num_worker", ",", "# if train_flag else 0", "\n", "collate_fn", "=", "self", ".", "feeder", ".", "collate_fn", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.None.main.import_class": [[183, 188], ["name.rsplit", "importlib.import_module", "getattr"], "function", ["None"], ["", "", "def", "import_class", "(", "name", ")", ":", "\n", "    ", "components", "=", "name", ".", "rsplit", "(", "'.'", ",", "1", ")", "\n", "mod", "=", "importlib", ".", "import_module", "(", "components", "[", "0", "]", ")", "\n", "mod", "=", "getattr", "(", "mod", ",", "components", "[", "1", "]", ")", "\n", "return", "mod", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.__init__": [[8, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "gpu_list", "=", "[", "]", "\n", "self", ".", "output_device", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.set_device": [[12, 20], ["str", "str.GpuDataParallel.occupy_gpu", "len", "range", "len", "str.split"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.occupy_gpu"], ["", "def", "set_device", "(", "self", ",", "device", ")", ":", "\n", "        ", "device", "=", "str", "(", "device", ")", "\n", "if", "device", "!=", "'None'", ":", "\n", "            ", "self", ".", "gpu_list", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "device", ".", "split", "(", "','", ")", ")", ")", "]", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "device", "\n", "output_device", "=", "self", ".", "gpu_list", "[", "0", "]", "\n", "self", ".", "occupy_gpu", "(", "self", ".", "gpu_list", ")", "\n", "", "self", ".", "output_device", "=", "output_device", "if", "len", "(", "self", ".", "gpu_list", ")", ">", "0", "else", "\"cpu\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.model_to_device": [[21, 30], ["torch.DataParallel.to", "len", "torch.DataParallel", "torch.DataParallel"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.to"], ["", "def", "model_to_device", "(", "self", ",", "model", ")", ":", "\n", "# model = convert_model(model)", "\n", "        ", "model", "=", "model", ".", "to", "(", "self", ".", "output_device", ")", "\n", "if", "len", "(", "self", ".", "gpu_list", ")", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "\n", "model", ",", "\n", "device_ids", "=", "self", ".", "gpu_list", ",", "\n", "output_device", "=", "self", ".", "output_device", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device": [[31, 44], ["isinstance", "data.to", "isinstance", "data.float().to", "isinstance", "data.long().to", "isinstance", "data.float", "data.to", "data.long", "isinstance", "isinstance", "ValueError", "device.GpuDataParallel.data_to_device"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.to", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.to", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.to", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.to", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.data_to_device"], ["", "def", "data_to_device", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "data", ".", "to", "(", "self", ".", "output_device", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "torch", ".", "DoubleTensor", ")", ":", "\n", "            ", "return", "data", ".", "float", "(", ")", ".", "to", "(", "self", ".", "output_device", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "data", ".", "long", "(", ")", ".", "to", "(", "self", ".", "output_device", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "torch", ".", "LongTensor", ")", ":", "\n", "            ", "return", "data", ".", "to", "(", "self", ".", "output_device", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "list", ")", "or", "isinstance", "(", "data", ",", "tuple", ")", ":", "\n", "            ", "return", "[", "self", ".", "data_to_device", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "data", ".", "shape", ",", "\"Unknown Dtype: {}\"", ".", "format", "(", "data", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.criterion_to_device": [[45, 47], ["loss.to"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.to"], ["", "", "def", "criterion_to_device", "(", "self", ",", "loss", ")", ":", "\n", "        ", "return", "loss", ".", "to", "(", "self", ".", "output_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.device.GpuDataParallel.occupy_gpu": [[48, 58], ["len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "isinstance", "list", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "occupy_gpu", "(", "self", ",", "gpus", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            make program appear on nvidia-smi.\n        \"\"\"", "\n", "if", "len", "(", "gpus", ")", "==", "0", ":", "\n", "            ", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "gpus", "=", "[", "gpus", "]", "if", "isinstance", "(", "gpus", ",", "int", ")", "else", "list", "(", "gpus", ")", "\n", "for", "g", "in", "gpus", ":", "\n", "                ", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", "g", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.decode.Decode.__init__": [[12, 21], ["dict", "ctcdecode.CTCBeamDecoder", "chr", "decode.Decode.i2g_dict.items", "range", "gloss_dict.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gloss_dict", ",", "num_classes", ",", "search_mode", ",", "blank_id", "=", "0", ")", ":", "\n", "        ", "self", ".", "i2g_dict", "=", "dict", "(", "(", "v", "[", "0", "]", ",", "k", ")", "for", "k", ",", "v", "in", "gloss_dict", ".", "items", "(", ")", ")", "\n", "self", ".", "g2i_dict", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "i2g_dict", ".", "items", "(", ")", "}", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "search_mode", "=", "search_mode", "\n", "self", ".", "blank_id", "=", "blank_id", "\n", "vocab", "=", "[", "chr", "(", "x", ")", "for", "x", "in", "range", "(", "20000", ",", "20000", "+", "num_classes", ")", "]", "\n", "self", ".", "ctc_decoder", "=", "ctcdecode", ".", "CTCBeamDecoder", "(", "vocab", ",", "beam_width", "=", "10", ",", "blank_id", "=", "blank_id", ",", "\n", "num_processes", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.decode.Decode.decode": [[22, 29], ["nn_output.permute.permute.permute", "decode.Decode.MaxDecode", "decode.Decode.BeamSearch"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.decode.Decode.MaxDecode", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.decode.Decode.BeamSearch"], ["", "def", "decode", "(", "self", ",", "nn_output", ",", "vid_lgt", ",", "batch_first", "=", "True", ",", "probs", "=", "False", ")", ":", "\n", "        ", "if", "not", "batch_first", ":", "\n", "            ", "nn_output", "=", "nn_output", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "", "if", "self", ".", "search_mode", "==", "\"max\"", ":", "\n", "            ", "return", "self", ".", "MaxDecode", "(", "nn_output", ",", "vid_lgt", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "BeamSearch", "(", "nn_output", ",", "vid_lgt", ",", "probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.decode.Decode.BeamSearch": [[30, 51], ["vid_lgt.cpu.cpu.cpu", "decode.Decode.ctc_decoder.decode", "range", "nn_output.softmax().cpu.softmax().cpu.softmax().cpu", "len", "ret_list.append", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "nn_output.softmax().cpu.softmax().cpu.softmax", "enumerate", "itertools.groupby", "int"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.decode.Decode.decode"], ["", "", "def", "BeamSearch", "(", "self", ",", "nn_output", ",", "vid_lgt", ",", "probs", "=", "False", ")", ":", "\n", "        ", "'''\n        CTCBeamDecoder Shape:\n                - Input:  nn_output (B, T, N), which should be passed through a softmax layer\n                - Output: beam_resuls (B, N_beams, T), int, need to be decoded by i2g_dict\n                          beam_scores (B, N_beams), p=1/np.exp(beam_score)\n                          timesteps (B, N_beams)\n                          out_lens (B, N_beams)\n        '''", "\n", "if", "not", "probs", ":", "\n", "            ", "nn_output", "=", "nn_output", ".", "softmax", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "", "vid_lgt", "=", "vid_lgt", ".", "cpu", "(", ")", "\n", "beam_result", ",", "beam_scores", ",", "timesteps", ",", "out_seq_len", "=", "self", ".", "ctc_decoder", ".", "decode", "(", "nn_output", ",", "vid_lgt", ")", "\n", "ret_list", "=", "[", "]", "\n", "for", "batch_idx", "in", "range", "(", "len", "(", "nn_output", ")", ")", ":", "\n", "            ", "first_result", "=", "beam_result", "[", "batch_idx", "]", "[", "0", "]", "[", ":", "out_seq_len", "[", "batch_idx", "]", "[", "0", "]", "]", "\n", "if", "len", "(", "first_result", ")", "!=", "0", ":", "\n", "                ", "first_result", "=", "torch", ".", "stack", "(", "[", "x", "[", "0", "]", "for", "x", "in", "groupby", "(", "first_result", ")", "]", ")", "\n", "", "ret_list", ".", "append", "(", "[", "(", "self", ".", "i2g_dict", "[", "int", "(", "gloss_id", ")", "]", ",", "idx", ")", "for", "idx", ",", "gloss_id", "in", "\n", "enumerate", "(", "first_result", ")", "]", ")", "\n", "", "return", "ret_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.decode.Decode.MaxDecode": [[52, 67], ["torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "range", "ret_list.append", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "itertools.groupby", "filter", "itertools.groupby", "enumerate", "int"], "methods", ["None"], ["", "def", "MaxDecode", "(", "self", ",", "nn_output", ",", "vid_lgt", ")", ":", "\n", "        ", "index_list", "=", "torch", ".", "argmax", "(", "nn_output", ",", "axis", "=", "2", ")", "\n", "batchsize", ",", "lgt", "=", "index_list", ".", "shape", "\n", "ret_list", "=", "[", "]", "\n", "for", "batch_idx", "in", "range", "(", "batchsize", ")", ":", "\n", "            ", "group_result", "=", "[", "x", "[", "0", "]", "for", "x", "in", "groupby", "(", "index_list", "[", "batch_idx", "]", "[", ":", "vid_lgt", "[", "batch_idx", "]", "]", ")", "]", "\n", "filtered", "=", "[", "*", "filter", "(", "lambda", "x", ":", "x", "!=", "self", ".", "blank_id", ",", "group_result", ")", "]", "\n", "if", "len", "(", "filtered", ")", ">", "0", ":", "\n", "                ", "max_result", "=", "torch", ".", "stack", "(", "filtered", ")", "\n", "max_result", "=", "[", "x", "[", "0", "]", "for", "x", "in", "groupby", "(", "max_result", ")", "]", "\n", "", "else", ":", "\n", "                ", "max_result", "=", "filtered", "\n", "", "ret_list", ".", "append", "(", "[", "(", "self", ".", "i2g_dict", "[", "int", "(", "gloss_id", ")", "]", ",", "idx", ")", "for", "idx", ",", "gloss_id", "in", "\n", "enumerate", "(", "max_result", ")", "]", ")", "\n", "", "return", "ret_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.parameters.get_parser": [[4, 151], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "dict", "dict", "dict"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "# parameter priority: command line > config > default", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'The pytorch implementation for Visual Alignment Constraint '", "\n", "'for Continuous Sign Language Recognition.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work-dir'", ",", "\n", "default", "=", "'./work_dir/temp'", ",", "\n", "help", "=", "'the work folder for storing results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--config'", ",", "\n", "default", "=", "'./configs/baseline.yaml'", ",", "\n", "help", "=", "'path to the configuration file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--random_fix'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "'fix random seed or not'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--device'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'the indexes of GPUs for training or testing'", ")", "\n", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "# processor", "\n", "parser", ".", "add_argument", "(", "\n", "'--phase'", ",", "default", "=", "'train'", ",", "help", "=", "'can be train, test and features'", ")", "\n", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "# debug", "\n", "parser", ".", "add_argument", "(", "\n", "'--save-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "200", ",", "\n", "help", "=", "'the interval for storing models (#epochs)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--random-seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'the default value for random seed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'the interval for evaluating models (#epochs)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--print-log'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "'print logging or not'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "'the interval for printing messages (#iteration)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--evaluate-tool'", ",", "default", "=", "\"python\"", ",", "help", "=", "'sclite or python'", ")", "\n", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "# feeder", "\n", "parser", ".", "add_argument", "(", "\n", "'--feeder'", ",", "default", "=", "'dataloader_video.BaseFeeder'", ",", "help", "=", "'data loader will be used'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'data loader will be used'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset-info'", ",", "\n", "default", "=", "dict", "(", ")", ",", "\n", "help", "=", "'data loader will be used'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-worker'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "'the number of worker for data loader'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--feeder-args'", ",", "\n", "default", "=", "dict", "(", ")", ",", "\n", "help", "=", "'the arguments of data loader'", ")", "\n", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "None", ",", "help", "=", "'the model will be used'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model-args'", ",", "\n", "type", "=", "dict", ",", "\n", "default", "=", "dict", "(", ")", ",", "\n", "help", "=", "'the arguments of model'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--load-weights'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'load weights for network initialization'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--load-checkpoints'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'load checkpoints for continue training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--decode-mode'", ",", "\n", "default", "=", "\"max\"", ",", "\n", "help", "=", "'search mode for decode, max or beam'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--ignore-weights'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "[", "]", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'the name of weights which will be ignored in the initialization'", ")", "\n", "\n", "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #", "\n", "# optim", "\n", "parser", ".", "add_argument", "(", "\n", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'training batch size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'test batch size'", ")", "\n", "\n", "default_optimizer_dict", "=", "{", "\n", "\"base_lr\"", ":", "1e-2", ",", "\n", "\"optimizer\"", ":", "\"SGD\"", ",", "\n", "\"nesterov\"", ":", "False", ",", "\n", "\"step\"", ":", "[", "5", ",", "10", "]", ",", "\n", "\"weight_decay\"", ":", "0.00005", ",", "\n", "\"start_epoch\"", ":", "1", ",", "\n", "}", "\n", "default_loss_dict", "=", "{", "\n", "\"SeqCTC\"", ":", "1.0", ",", "\n", "}", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--loss-weights'", ",", "\n", "default", "=", "default_loss_dict", ",", "\n", "help", "=", "'loss selection'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--optimizer-args'", ",", "\n", "default", "=", "default_optimizer_dict", ",", "\n", "help", "=", "'the arguments of optimizer'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-epoch'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "80", ",", "\n", "help", "=", "'stop training in which epoch'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.parameters.str2bool": [[153, 160], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.pack_code.pack_code": [[9, 25], ["os.path.isdir", "subprocess.run", "subprocess.run", "logger.warning", "logger.warning", "open", "f.write"], "function", ["None"], ["def", "pack_code", "(", "git_root", ",", "run_dir", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "f\"{git_root}/.git\"", ")", ":", "\n", "        ", "subprocess", ".", "run", "(", "\n", "[", "'git'", ",", "'archive'", ",", "'-o'", ",", "f\"{run_dir}/code.tar.gz\"", ",", "'HEAD'", "]", ",", "\n", "check", "=", "True", ",", "\n", ")", "\n", "diff_process", "=", "subprocess", ".", "run", "(", "\n", "[", "'git'", ",", "'diff'", ",", "'HEAD'", "]", ",", "\n", "check", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "text", "=", "True", ",", "\n", ")", "\n", "if", "diff_process", ".", "stdout", ":", "\n", "            ", "logger", ".", "warning", "(", "'Working tree is dirty. Patch:\\n%s'", ",", "diff_process", ".", "stdout", ")", "\n", "with", "open", "(", "f\"{run_dir}/dirty.patch\"", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "diff_process", ".", "stdout", ")", "\n", "", "", "", "else", ":", "\n", "        ", "logger", ".", "warning", "(", "'.git does not exist in current dir'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.__init__": [[6, 12], ["time.time", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "work_dir", ",", "print_log", ",", "log_interval", ")", ":", "\n", "        ", "self", ".", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "print_log_flag", "=", "print_log", "\n", "self", ".", "log_interval", "=", "log_interval", "\n", "self", ".", "log_path", "=", "'{}/log.txt'", ".", "format", "(", "work_dir", ")", "\n", "self", ".", "timer", "=", "dict", "(", "dataloader", "=", "0.001", ",", "device", "=", "0.001", ",", "forward", "=", "0.001", ",", "backward", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_time": [[13, 16], ["time.asctime", "record.Recorder.print_log", "time.localtime", "time.time"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log"], ["", "def", "print_time", "(", "self", ")", ":", "\n", "        ", "localtime", "=", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "self", ".", "print_log", "(", "\"Local current time :  \"", "+", "localtime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log": [[17, 28], ["print", "time.asctime", "time.localtime", "open", "f.writelines", "f.writelines", "time.time"], "methods", ["None"], ["", "def", "print_log", "(", "self", ",", "str", ",", "path", "=", "None", ",", "print_time", "=", "True", ")", ":", "\n", "        ", "if", "path", "is", "None", ":", "\n", "            ", "path", "=", "self", ".", "log_path", "\n", "", "if", "print_time", ":", "\n", "            ", "localtime", "=", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "str", "=", "\"[ \"", "+", "localtime", "+", "' ] '", "+", "str", "\n", "", "print", "(", "str", ")", "\n", "if", "self", ".", "print_log_flag", ":", "\n", "            ", "with", "open", "(", "path", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "f", ".", "writelines", "(", "str", ")", "\n", "f", ".", "writelines", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.record_time": [[29, 32], ["time.time"], "methods", ["None"], ["", "", "", "def", "record_time", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "return", "self", ".", "cur_time", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.split_time": [[33, 37], ["record.Recorder.record_time", "time.time"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.record_time"], ["", "def", "split_time", "(", "self", ")", ":", "\n", "        ", "split_time", "=", "time", ".", "time", "(", ")", "-", "self", ".", "cur_time", "\n", "self", ".", "record_time", "(", ")", "\n", "return", "split_time", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.timer_reset": [[38, 41], ["time.time", "dict"], "methods", ["None"], ["", "def", "timer_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "timer", "=", "dict", "(", "dataloader", "=", "0.001", ",", "device", "=", "0.001", ",", "forward", "=", "0.001", ",", "backward", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.record_timer": [[42, 44], ["record.Recorder.split_time"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.split_time"], ["", "def", "record_timer", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "timer", "[", "key", "]", "+=", "self", ".", "split_time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_time_statistics": [[45, 52], ["record.Recorder.print_log", "int", "record.Recorder.timer.items", "round", "sum", "record.Recorder.timer.values"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.record.Recorder.print_log"], ["", "def", "print_time_statistics", "(", "self", ")", ":", "\n", "        ", "proportion", "=", "{", "\n", "k", ":", "'{:02d}%'", ".", "format", "(", "int", "(", "round", "(", "v", "*", "100", "/", "sum", "(", "self", ".", "timer", ".", "values", "(", ")", ")", ")", ")", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "timer", ".", "items", "(", ")", "}", "\n", "self", ".", "print_log", "(", "\n", "'\\tTime consumption: [Data]{dataloader}, [GPU]{device}, [Forward]{forward}, [Backward]{backward}'", ".", "format", "(", "\n", "**", "proportion", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.random_state.RandomState.__init__": [[8, 16], ["torch.set_num_threads", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seed", ")", ":", "\n", "        ", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.random_state.RandomState.save_rng_state": [[17, 24], ["torch.get_rng_state", "torch.cuda.get_rng_state_all", "numpy.random.get_state", "random.getstate"], "methods", ["None"], ["", "def", "save_rng_state", "(", "self", ")", ":", "\n", "        ", "rng_dict", "=", "{", "}", "\n", "rng_dict", "[", "\"torch\"", "]", "=", "torch", ".", "get_rng_state", "(", ")", "\n", "rng_dict", "[", "\"cuda\"", "]", "=", "torch", ".", "cuda", ".", "get_rng_state_all", "(", ")", "\n", "rng_dict", "[", "\"numpy\"", "]", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "rng_dict", "[", "\"random\"", "]", "=", "random", ".", "getstate", "(", ")", "\n", "return", "rng_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.random_state.RandomState.set_rng_state": [[25, 30], ["torch.set_rng_state", "torch.cuda.set_rng_state_all", "numpy.random.set_state", "random.setstate"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.random_state.RandomState.set_rng_state"], ["", "def", "set_rng_state", "(", "self", ",", "rng_dict", ")", ":", "\n", "        ", "torch", ".", "set_rng_state", "(", "rng_dict", "[", "\"torch\"", "]", ")", "\n", "torch", ".", "cuda", ".", "set_rng_state_all", "(", "rng_dict", "[", "\"cuda\"", "]", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_dict", "[", "\"numpy\"", "]", ")", "\n", "random", ".", "setstate", "(", "rng_dict", "[", "\"random\"", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.__init__": [[8, 35], ["optimizer.Optimizer.define_lr_scheduler", "torch.SGD", "torch.SGD", "torch.Adam", "torch.Adam", "ValueError", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.define_lr_scheduler"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "optim_dict", ")", ":", "\n", "        ", "self", ".", "optim_dict", "=", "optim_dict", "\n", "if", "self", ".", "optim_dict", "[", "\"optimizer\"", "]", "==", "'SGD'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "model", ",", "\n", "lr", "=", "self", ".", "optim_dict", "[", "'base_lr'", "]", ",", "\n", "momentum", "=", "0.9", ",", "\n", "nesterov", "=", "self", ".", "optim_dict", "[", "'nesterov'", "]", ",", "\n", "weight_decay", "=", "self", ".", "optim_dict", "[", "'weight_decay'", "]", "\n", ")", "\n", "", "elif", "self", ".", "optim_dict", "[", "\"optimizer\"", "]", "==", "'Adam'", ":", "\n", "            ", "alpha", "=", "self", ".", "optim_dict", "[", "'learning_ratio'", "]", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "# [", "\n", "#     {'params': model.conv2d.parameters(), 'lr': self.optim_dict['base_lr']*alpha},", "\n", "#     {'params': model.conv1d.parameters(), 'lr': self.optim_dict['base_lr']*alpha},", "\n", "#     {'params': model.rnn.parameters()},", "\n", "#     {'params': model.classifier.parameters()},", "\n", "# ],", "\n", "# model.conv1d.fc.parameters(),", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "optim_dict", "[", "'base_lr'", "]", ",", "\n", "weight_decay", "=", "self", ".", "optim_dict", "[", "'weight_decay'", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "self", ".", "scheduler", "=", "self", ".", "define_lr_scheduler", "(", "self", ".", "optimizer", ",", "self", ".", "optim_dict", "[", "'step'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.define_lr_scheduler": [[36, 42], ["torch.lr_scheduler.MultiStepLR", "torch.lr_scheduler.MultiStepLR", "ValueError"], "methods", ["None"], ["", "def", "define_lr_scheduler", "(", "self", ",", "optimizer", ",", "milestones", ")", ":", "\n", "        ", "if", "self", ".", "optim_dict", "[", "\"optimizer\"", "]", "in", "[", "'SGD'", ",", "'Adam'", "]", ":", "\n", "            ", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "milestones", ",", "gamma", "=", "0.2", ")", "\n", "return", "lr_scheduler", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.zero_grad": [[43, 45], ["optimizer.Optimizer.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.zero_grad"], ["", "", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.step": [[46, 48], ["optimizer.Optimizer.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.state_dict": [[49, 51], ["optimizer.Optimizer.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.load_state_dict": [[52, 54], ["optimizer.Optimizer.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.to": [[55, 60], ["optimizer.Optimizer.optimizer.state.values", "state.items", "isinstance", "v.to"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.optimizer.Optimizer.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "state", "in", "self", ".", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "state", "[", "k", "]", "=", "v", ".", "to", "(", "device", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.Compose.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.Compose.__call__": [[19, 26], ["isinstance", "t", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "label", ",", "file_info", "=", "None", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "if", "file_info", "is", "not", "None", "and", "isinstance", "(", "t", ",", "WERAugment", ")", ":", "\n", "                ", "image", ",", "label", "=", "t", "(", "image", ",", "label", ",", "file_info", ")", "\n", "", "else", ":", "\n", "                ", "image", "=", "t", "(", "image", ")", "\n", "", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.WERAugment.__init__": [[29, 32], ["numpy.load().item", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "boundary_path", ")", ":", "\n", "        ", "self", ".", "boundary_dict", "=", "np", ".", "load", "(", "boundary_path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "self", ".", "K", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.WERAugment.__call__": [[33, 44], ["numpy.arange().tolist", "copy.deepcopy", "numpy.random.randint", "range", "video_augmentation.WERAugment.boundary_dict.keys", "min", "video_augmentation.WERAugment.one_operation", "numpy.arange", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.WERAugment.one_operation"], ["", "def", "__call__", "(", "self", ",", "video", ",", "label", ",", "file_info", ")", ":", "\n", "        ", "ind", "=", "np", ".", "arange", "(", "len", "(", "video", ")", ")", ".", "tolist", "(", ")", "\n", "if", "file_info", "not", "in", "self", ".", "boundary_dict", ".", "keys", "(", ")", ":", "\n", "            ", "return", "video", ",", "label", "\n", "", "binfo", "=", "copy", ".", "deepcopy", "(", "self", ".", "boundary_dict", "[", "file_info", "]", ")", "\n", "binfo", "=", "[", "0", "]", "+", "binfo", "+", "[", "len", "(", "video", ")", "]", "\n", "k", "=", "np", ".", "random", ".", "randint", "(", "min", "(", "self", ".", "K", ",", "len", "(", "label", ")", "-", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "ind", ",", "label", ",", "binfo", "=", "self", ".", "one_operation", "(", "ind", ",", "label", ",", "binfo", ")", "\n", "", "ret_video", "=", "[", "video", "[", "i", "]", "for", "i", "in", "ind", "]", "\n", "return", "ret_video", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.WERAugment.one_operation": [[45, 53], ["numpy.random.random", "video_augmentation.WERAugment.delete", "video_augmentation.WERAugment.substitute", "video_augmentation.WERAugment.insert"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.WERAugment.delete", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.WERAugment.substitute", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.WERAugment.insert"], ["", "def", "one_operation", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "prob", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "if", "prob", "<", "0.3", ":", "\n", "            ", "return", "self", ".", "delete", "(", "*", "inputs", ")", "\n", "", "elif", "0.3", "<=", "prob", "<", "0.7", ":", "\n", "            ", "return", "self", ".", "substitute", "(", "*", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "insert", "(", "*", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.WERAugment.delete": [[54, 62], ["numpy.random.randint", "len"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "delete", "(", "ind", ",", "label", ",", "binfo", ")", ":", "\n", "        ", "del_wd", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "label", ")", ")", "\n", "ind", "=", "ind", "[", ":", "binfo", "[", "del_wd", "]", "]", "+", "ind", "[", "binfo", "[", "del_wd", "+", "1", "]", ":", "]", "\n", "duration", "=", "binfo", "[", "del_wd", "+", "1", "]", "-", "binfo", "[", "del_wd", "]", "\n", "del", "label", "[", "del_wd", "]", "\n", "binfo", "=", "[", "i", "for", "i", "in", "binfo", "[", ":", "del_wd", "]", "]", "+", "[", "i", "-", "duration", "for", "i", "in", "binfo", "[", "del_wd", "+", "1", ":", "]", "]", "\n", "return", "ind", ",", "label", ",", "binfo", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.WERAugment.insert": [[63, 74], ["numpy.random.randint", "numpy.random.choice", "binfo.index", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "insert", "(", "ind", ",", "label", ",", "binfo", ")", ":", "\n", "        ", "ins_wd", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "label", ")", ")", "\n", "ins_pos", "=", "np", ".", "random", ".", "choice", "(", "binfo", ")", "\n", "ins_lab_pos", "=", "binfo", ".", "index", "(", "ins_pos", ")", "\n", "\n", "ind", "=", "ind", "[", ":", "ins_pos", "]", "+", "ind", "[", "binfo", "[", "ins_wd", "]", ":", "binfo", "[", "ins_wd", "+", "1", "]", "]", "+", "ind", "[", "ins_pos", ":", "]", "\n", "duration", "=", "binfo", "[", "ins_wd", "+", "1", "]", "-", "binfo", "[", "ins_wd", "]", "\n", "label", "=", "label", "[", ":", "ins_lab_pos", "]", "+", "[", "label", "[", "ins_wd", "]", "]", "+", "label", "[", "ins_lab_pos", ":", "]", "\n", "binfo", "=", "binfo", "[", ":", "ins_lab_pos", "]", "+", "[", "binfo", "[", "ins_lab_pos", "-", "1", "]", "+", "duration", "]", "+", "[", "i", "+", "duration", "for", "i", "in", "binfo", "[", "ins_lab_pos", ":", "]", "]", "\n", "return", "ind", ",", "label", ",", "binfo", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.WERAugment.substitute": [[75, 85], ["numpy.random.randint", "numpy.random.randint", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "substitute", "(", "ind", ",", "label", ",", "binfo", ")", ":", "\n", "        ", "sub_wd", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "label", ")", ")", "\n", "tar_wd", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "label", ")", ")", "\n", "\n", "ind", "=", "ind", "[", ":", "binfo", "[", "tar_wd", "]", "]", "+", "ind", "[", "binfo", "[", "sub_wd", "]", ":", "binfo", "[", "sub_wd", "+", "1", "]", "]", "+", "ind", "[", "binfo", "[", "tar_wd", "+", "1", "]", ":", "]", "\n", "label", "[", "tar_wd", "]", "=", "label", "[", "sub_wd", "]", "\n", "delta_duration", "=", "binfo", "[", "sub_wd", "+", "1", "]", "-", "binfo", "[", "sub_wd", "]", "-", "(", "binfo", "[", "tar_wd", "+", "1", "]", "-", "binfo", "[", "tar_wd", "]", ")", "\n", "binfo", "=", "binfo", "[", ":", "tar_wd", "+", "1", "]", "+", "[", "i", "+", "delta_duration", "for", "i", "in", "binfo", "[", "tar_wd", "+", "1", ":", "]", "]", "\n", "return", "ind", ",", "label", ",", "binfo", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.ToTensor.__call__": [[88, 95], ["isinstance", "isinstance", "numpy.array", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy.transpose", "torch.from_numpy", "torch.from_numpy.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "video", ")", ":", "\n", "        ", "if", "isinstance", "(", "video", ",", "list", ")", ":", "\n", "            ", "video", "=", "np", ".", "array", "(", "video", ")", "\n", "video", "=", "torch", ".", "from_numpy", "(", "video", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", ".", "float", "(", ")", "\n", "", "if", "isinstance", "(", "video", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "video", "=", "torch", ".", "from_numpy", "(", "video", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", "\n", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.RandomCrop.__init__": [[107, 116], ["isinstance", "ValueError", "len", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "size", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "'If size is a single number, it must be positive'", ")", "\n", "", "size", "=", "(", "size", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "size", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "'If size is a sequence, it must be of len 2.'", ")", "\n", "", "", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.RandomCrop.__call__": [[117, 146], ["isinstance", "isinstance", "isinstance", "random.randint", "random.randint", "isinstance", "TypeError", "numpy.pad", "numpy.pad", "img.crop", "type"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "crop_h", ",", "crop_w", "=", "self", ".", "size", "\n", "if", "isinstance", "(", "clip", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "im_h", ",", "im_w", ",", "im_c", "=", "clip", "[", "0", "]", ".", "shape", "\n", "", "elif", "isinstance", "(", "clip", "[", "0", "]", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "im_w", ",", "im_h", "=", "clip", "[", "0", "]", ".", "size", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'Expected numpy.ndarray or PIL.Image'", "+", "\n", "'but got list of {0}'", ".", "format", "(", "type", "(", "clip", "[", "0", "]", ")", ")", ")", "\n", "", "if", "crop_w", ">", "im_w", ":", "\n", "            ", "pad", "=", "crop_w", "-", "im_w", "\n", "clip", "=", "[", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "0", ")", ",", "(", "pad", "//", "2", ",", "pad", "-", "pad", "//", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ",", "constant_values", "=", "0", ")", "for", "img", "in", "\n", "clip", "]", "\n", "w1", "=", "0", "\n", "", "else", ":", "\n", "            ", "w1", "=", "random", ".", "randint", "(", "0", ",", "im_w", "-", "crop_w", ")", "\n", "\n", "", "if", "crop_h", ">", "im_h", ":", "\n", "            ", "pad", "=", "crop_h", "-", "im_h", "\n", "clip", "=", "[", "np", ".", "pad", "(", "img", ",", "(", "(", "pad", "//", "2", ",", "pad", "-", "pad", "//", "2", ")", ",", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ",", "constant_values", "=", "0", ")", "for", "img", "in", "\n", "clip", "]", "\n", "h1", "=", "0", "\n", "", "else", ":", "\n", "            ", "h1", "=", "random", ".", "randint", "(", "0", ",", "im_h", "-", "crop_h", ")", "\n", "\n", "", "if", "isinstance", "(", "clip", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "[", "img", "[", "h1", ":", "h1", "+", "crop_h", ",", "w1", ":", "w1", "+", "crop_w", ",", ":", "]", "for", "img", "in", "clip", "]", "\n", "", "elif", "isinstance", "(", "clip", "[", "0", "]", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "return", "[", "img", ".", "crop", "(", "(", "w1", ",", "h1", ",", "w1", "+", "crop_w", ",", "h1", "+", "crop_h", ")", ")", "for", "img", "in", "clip", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.CenterCrop.__init__": [[149, 154], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.CenterCrop.__call__": [[155, 166], ["int", "int", "round", "round", "print"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "im_h", ",", "im_w", ",", "im_c", "=", "clip", "[", "0", "]", ".", "shape", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "clip", "[", "0", "]", ".", "shape", ")", "\n", "", "new_h", ",", "new_w", "=", "self", ".", "size", "\n", "new_h", "=", "im_h", "if", "new_h", ">=", "im_h", "else", "new_h", "\n", "new_w", "=", "im_w", "if", "new_w", ">=", "im_w", "else", "new_w", "\n", "top", "=", "int", "(", "round", "(", "(", "im_h", "-", "new_h", ")", "/", "2.", ")", ")", "\n", "left", "=", "int", "(", "round", "(", "(", "im_w", "-", "new_w", ")", "/", "2.", ")", ")", "\n", "return", "[", "img", "[", "top", ":", "top", "+", "new_h", ",", "left", ":", "left", "+", "new_w", "]", "for", "img", "in", "clip", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.RandomHorizontalFlip.__init__": [[169, 171], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.RandomHorizontalFlip.__call__": [[172, 179], ["numpy.array", "random.random", "numpy.flip", "numpy.ascontiguousarray", "copy.deepcopy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "# B, H, W, 3", "\n", "        ", "flag", "=", "random", ".", "random", "(", ")", "<", "self", ".", "prob", "\n", "if", "flag", ":", "\n", "            ", "clip", "=", "np", ".", "flip", "(", "clip", ",", "axis", "=", "2", ")", "\n", "clip", "=", "np", ".", "ascontiguousarray", "(", "copy", ".", "deepcopy", "(", "clip", ")", ")", "\n", "", "return", "np", ".", "array", "(", "clip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.RandomRotation.__init__": [[191, 202], ["isinstance", "ValueError", "len", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "degrees", ")", ":", "\n", "        ", "if", "isinstance", "(", "degrees", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "degrees", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "'If degrees is a single number,'", "\n", "'must be positive'", ")", "\n", "", "degrees", "=", "(", "-", "degrees", ",", "degrees", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "degrees", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "'If degrees is a sequence,'", "\n", "'it must be of len 2.'", ")", "\n", "", "", "self", ".", "degrees", "=", "degrees", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.RandomRotation.__call__": [[203, 220], ["random.uniform", "isinstance", "isinstance", "scipy.misc.imrotate", "TypeError", "img.rotate", "type"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n        img (PIL.Image or numpy.ndarray): List of images to be cropped\n        in format (h, w, c) in numpy.ndarray\n        Returns:\n        PIL.Image or numpy.ndarray: Cropped list of images\n        \"\"\"", "\n", "angle", "=", "random", ".", "uniform", "(", "self", ".", "degrees", "[", "0", "]", ",", "self", ".", "degrees", "[", "1", "]", ")", "\n", "if", "isinstance", "(", "clip", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "rotated", "=", "[", "scipy", ".", "misc", ".", "imrotate", "(", "img", ",", "angle", ")", "for", "img", "in", "clip", "]", "\n", "", "elif", "isinstance", "(", "clip", "[", "0", "]", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "rotated", "=", "[", "img", ".", "rotate", "(", "angle", ")", "for", "img", "in", "clip", "]", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'Expected numpy.ndarray or PIL.Image'", "+", "\n", "'but got list of {0}'", ".", "format", "(", "type", "(", "clip", "[", "0", "]", ")", ")", ")", "\n", "", "return", "rotated", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.TemporalRescale.__init__": [[223, 228], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "temp_scaling", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "min_len", "=", "32", "\n", "self", ".", "max_len", "=", "230", "\n", "self", ".", "L", "=", "1.0", "-", "temp_scaling", "\n", "self", ".", "U", "=", "1.0", "+", "temp_scaling", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.TemporalRescale.__call__": [[229, 243], ["len", "int", "sorted", "sorted", "random.sample", "random.choices", "range", "range", "numpy.random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "vid_len", "=", "len", "(", "clip", ")", "\n", "new_len", "=", "int", "(", "vid_len", "*", "(", "self", ".", "L", "+", "(", "self", ".", "U", "-", "self", ".", "L", ")", "*", "np", ".", "random", ".", "random", "(", ")", ")", ")", "\n", "if", "new_len", "<", "self", ".", "min_len", ":", "\n", "            ", "new_len", "=", "self", ".", "min_len", "\n", "", "if", "new_len", ">", "self", ".", "max_len", ":", "\n", "            ", "new_len", "=", "self", ".", "max_len", "\n", "", "if", "(", "new_len", "-", "4", ")", "%", "4", "!=", "0", ":", "\n", "            ", "new_len", "+=", "4", "-", "(", "new_len", "-", "4", ")", "%", "4", "\n", "", "if", "new_len", "<=", "vid_len", ":", "\n", "            ", "index", "=", "sorted", "(", "random", ".", "sample", "(", "range", "(", "vid_len", ")", ",", "new_len", ")", ")", "\n", "", "else", ":", "\n", "            ", "index", "=", "sorted", "(", "random", ".", "choices", "(", "range", "(", "vid_len", ")", ",", "k", "=", "new_len", ")", ")", "\n", "", "return", "clip", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.RandomResize.__init__": [[255, 258], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "rate", "=", "0.0", ",", "interp", "=", "'bilinear'", ")", ":", "\n", "        ", "self", ".", "rate", "=", "rate", "\n", "self", ".", "interpolation", "=", "interp", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.RandomResize.__call__": [[259, 277], ["random.uniform", "isinstance", "int", "int", "isinstance", "isinstance", "isinstance", "scipy.misc.imresize", "TypeError", "img.resize", "video_augmentation.RandomResize._get_PIL_interp", "type"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.Resize._get_PIL_interp"], ["", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "scaling_factor", "=", "random", ".", "uniform", "(", "1", "-", "self", ".", "rate", ",", "1", "+", "self", ".", "rate", ")", "\n", "\n", "if", "isinstance", "(", "clip", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "im_h", ",", "im_w", ",", "im_c", "=", "clip", "[", "0", "]", ".", "shape", "\n", "", "elif", "isinstance", "(", "clip", "[", "0", "]", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "im_w", ",", "im_h", "=", "clip", "[", "0", "]", ".", "size", "\n", "\n", "", "new_w", "=", "int", "(", "im_w", "*", "scaling_factor", ")", "\n", "new_h", "=", "int", "(", "im_h", "*", "scaling_factor", ")", "\n", "new_size", "=", "(", "new_h", ",", "new_w", ")", "\n", "if", "isinstance", "(", "clip", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "[", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "size", "=", "(", "new_h", ",", "new_w", ")", ",", "interp", "=", "self", ".", "interpolation", ")", "for", "img", "in", "clip", "]", "\n", "", "elif", "isinstance", "(", "clip", "[", "0", "]", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "return", "[", "img", ".", "resize", "(", "size", "=", "(", "new_w", ",", "new_h", ")", ",", "resample", "=", "self", ".", "_get_PIL_interp", "(", "self", ".", "interpolation", ")", ")", "for", "img", "in", "clip", "]", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'Expected numpy.ndarray or PIL.Image'", "+", "\n", "'but got list of {0}'", ".", "format", "(", "type", "(", "clip", "[", "0", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.RandomResize._get_PIL_interp": [[278, 289], ["None"], "methods", ["None"], ["", "", "def", "_get_PIL_interp", "(", "self", ",", "interp", ")", ":", "\n", "        ", "if", "interp", "==", "'nearest'", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "NEAREST", "\n", "", "elif", "interp", "==", "'lanczos'", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "LANCZOS", "\n", "", "elif", "interp", "==", "'bilinear'", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "BILINEAR", "\n", "", "elif", "interp", "==", "'bicubic'", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "BICUBIC", "\n", "", "elif", "interp", "==", "'cubic'", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "CUBIC", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.Resize.__init__": [[301, 304], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "rate", "=", "0.0", ",", "interp", "=", "'bilinear'", ")", ":", "\n", "        ", "self", ".", "rate", "=", "rate", "\n", "self", ".", "interpolation", "=", "interp", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.Resize.__call__": [[305, 323], ["isinstance", "int", "int", "isinstance", "isinstance", "isinstance", "numpy.array", "TypeError", "PIL.Image.fromarray().resize", "img.resize", "PIL.Image.fromarray", "video_augmentation.Resize._get_PIL_interp", "type"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.Resize._get_PIL_interp"], ["", "def", "__call__", "(", "self", ",", "clip", ")", ":", "\n", "        ", "scaling_factor", "=", "self", ".", "rate", "\n", "\n", "if", "isinstance", "(", "clip", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "im_h", ",", "im_w", ",", "im_c", "=", "clip", "[", "0", "]", ".", "shape", "\n", "", "elif", "isinstance", "(", "clip", "[", "0", "]", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "im_w", ",", "im_h", "=", "clip", "[", "0", "]", ".", "size", "\n", "\n", "", "new_w", "=", "int", "(", "im_w", "*", "scaling_factor", ")", "\n", "new_h", "=", "int", "(", "im_h", "*", "scaling_factor", ")", "\n", "new_size", "=", "(", "new_w", ",", "new_h", ")", "\n", "if", "isinstance", "(", "clip", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "[", "np", ".", "array", "(", "PIL", ".", "Image", ".", "fromarray", "(", "img", ")", ".", "resize", "(", "new_size", ")", ")", "for", "img", "in", "clip", "]", "\n", "", "elif", "isinstance", "(", "clip", "[", "0", "]", ",", "PIL", ".", "Image", ".", "Image", ")", ":", "\n", "            ", "return", "[", "img", ".", "resize", "(", "size", "=", "(", "new_w", ",", "new_h", ")", ",", "resample", "=", "self", ".", "_get_PIL_interp", "(", "self", ".", "interpolation", ")", ")", "for", "img", "in", "clip", "]", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'Expected numpy.ndarray or PIL.Image'", "+", "\n", "'but got list of {0}'", ".", "format", "(", "type", "(", "clip", "[", "0", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.utils.video_augmentation.Resize._get_PIL_interp": [[324, 335], ["None"], "methods", ["None"], ["", "", "def", "_get_PIL_interp", "(", "self", ",", "interp", ")", ":", "\n", "        ", "if", "interp", "==", "'nearest'", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "NEAREST", "\n", "", "elif", "interp", "==", "'lanczos'", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "LANCZOS", "\n", "", "elif", "interp", "==", "'bilinear'", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "BILINEAR", "\n", "", "elif", "interp", "==", "'bicubic'", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "BICUBIC", "\n", "", "elif", "interp", "==", "'cubic'", ":", "\n", "            ", "return", "PIL", ".", "Image", ".", "CUBIC", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.__init__": [[27, 43], ["numpy.load().item", "print", "dataloader_video.BaseFeeder.transform", "print", "len", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.transform"], ["    ", "def", "__init__", "(", "self", ",", "prefix", ",", "gloss_dict", ",", "drop_ratio", "=", "1", ",", "num_gloss", "=", "-", "1", ",", "mode", "=", "\"train\"", ",", "transform_mode", "=", "True", ",", "\n", "datatype", "=", "\"lmdb\"", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "ng", "=", "num_gloss", "\n", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "dict", "=", "gloss_dict", "\n", "self", ".", "data_type", "=", "datatype", "\n", "self", ".", "feat_prefix", "=", "f\"{prefix}/features/fullFrame-256x256px/{mode}\"", "\n", "self", ".", "transform_mode", "=", "\"train\"", "if", "transform_mode", "else", "\"test\"", "\n", "self", ".", "inputs_list", "=", "np", ".", "load", "(", "f\"./preprocess/phoenix2014/{mode}_info.npy\"", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "# self.inputs_list = np.load(f\"{prefix}/annotations/manual/{mode}.corpus.npy\", allow_pickle=True).item()", "\n", "# self.inputs_list = np.load(f\"{prefix}/annotations/manual/{mode}.corpus.npy\", allow_pickle=True).item()", "\n", "# self.inputs_list = dict([*filter(lambda x: isinstance(x[0], str) or x[0] < 10, self.inputs_list.items())])", "\n", "print", "(", "mode", ",", "len", "(", "self", ")", ")", "\n", "self", ".", "data_aug", "=", "self", ".", "transform", "(", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.__getitem__": [[44, 57], ["dataloader_video.BaseFeeder.read_video", "dataloader_video.BaseFeeder.normalize", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataloader_video.BaseFeeder.read_lmdb", "dataloader_video.BaseFeeder.normalize", "dataloader_video.BaseFeeder.read_features", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.read_video", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.normalize", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.normalize", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.read_features"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "data_type", "==", "\"video\"", ":", "\n", "            ", "input_data", ",", "label", ",", "fi", "=", "self", ".", "read_video", "(", "idx", ")", "\n", "input_data", ",", "label", "=", "self", ".", "normalize", "(", "input_data", ",", "label", ")", "\n", "# input_data, label = self.normalize(input_data, label, fi['fileid'])", "\n", "return", "input_data", ",", "torch", ".", "LongTensor", "(", "label", ")", ",", "self", ".", "inputs_list", "[", "idx", "]", "[", "'original_info'", "]", "\n", "", "elif", "self", ".", "data_type", "==", "\"lmdb\"", ":", "\n", "            ", "input_data", ",", "label", ",", "fi", "=", "self", ".", "read_lmdb", "(", "idx", ")", "\n", "input_data", ",", "label", "=", "self", ".", "normalize", "(", "input_data", ",", "label", ")", "\n", "return", "input_data", ",", "torch", ".", "LongTensor", "(", "label", ")", ",", "self", ".", "inputs_list", "[", "idx", "]", "[", "'original_info'", "]", "\n", "", "else", ":", "\n", "            ", "input_data", ",", "label", "=", "self", ".", "read_features", "(", "idx", ")", "\n", "return", "input_data", ",", "label", ",", "self", ".", "inputs_list", "[", "idx", "]", "[", "'original_info'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.read_video": [[58, 70], ["os.path.join", "sorted", "fi[].split", "glob.glob", "dataloader_video.BaseFeeder.dict.keys", "label_list.append", "cv2.cvtColor", "cv2.imread"], "methods", ["None"], ["", "", "def", "read_video", "(", "self", ",", "index", ",", "num_glosses", "=", "-", "1", ")", ":", "\n", "# load file info", "\n", "        ", "fi", "=", "self", ".", "inputs_list", "[", "index", "]", "\n", "img_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "prefix", ",", "\"features/fullFrame-256x256px/\"", "+", "fi", "[", "'folder'", "]", ")", "\n", "img_list", "=", "sorted", "(", "glob", ".", "glob", "(", "img_folder", ")", ")", "\n", "label_list", "=", "[", "]", "\n", "for", "phase", "in", "fi", "[", "'label'", "]", ".", "split", "(", "\" \"", ")", ":", "\n", "            ", "if", "phase", "==", "''", ":", "\n", "                ", "continue", "\n", "", "if", "phase", "in", "self", ".", "dict", ".", "keys", "(", ")", ":", "\n", "                ", "label_list", ".", "append", "(", "self", ".", "dict", "[", "phase", "]", "[", "0", "]", ")", "\n", "", "", "return", "[", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "img_path", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "for", "img_path", "in", "img_list", "]", ",", "label_list", ",", "fi", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.read_features": [[71, 76], ["numpy.load().item", "numpy.load"], "methods", ["None"], ["", "def", "read_features", "(", "self", ",", "index", ")", ":", "\n", "# load file info", "\n", "        ", "fi", "=", "self", ".", "inputs_list", "[", "index", "]", "\n", "data", "=", "np", ".", "load", "(", "f\"./features/{self.mode}/{fi['fileid']}_features.npy\"", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "return", "data", "[", "'features'", "]", ",", "data", "[", "'label'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.normalize": [[77, 81], ["dataloader_video.BaseFeeder.data_aug", "video.float"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "video", ",", "label", ",", "file_id", "=", "None", ")", ":", "\n", "        ", "video", ",", "label", "=", "self", ".", "data_aug", "(", "video", ",", "label", ",", "file_id", ")", "\n", "video", "=", "video", ".", "float", "(", ")", "/", "127.5", "-", "1", "\n", "return", "video", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.transform": [[82, 100], ["print", "utils.video_augmentation.Compose", "print", "utils.video_augmentation.Compose", "utils.video_augmentation.RandomCrop", "utils.video_augmentation.RandomHorizontalFlip", "utils.video_augmentation.ToTensor", "utils.video_augmentation.TemporalRescale", "utils.video_augmentation.CenterCrop", "utils.video_augmentation.ToTensor"], "methods", ["None"], ["", "def", "transform", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "transform_mode", "==", "\"train\"", ":", "\n", "            ", "print", "(", "\"Apply training transform.\"", ")", "\n", "return", "video_augmentation", ".", "Compose", "(", "[", "\n", "# video_augmentation.CenterCrop(224),", "\n", "# video_augmentation.WERAugment('/lustre/wangtao/current_exp/exp/baseline/boundary.npy'),", "\n", "video_augmentation", ".", "RandomCrop", "(", "224", ")", ",", "\n", "video_augmentation", ".", "RandomHorizontalFlip", "(", "0.5", ")", ",", "\n", "video_augmentation", ".", "ToTensor", "(", ")", ",", "\n", "video_augmentation", ".", "TemporalRescale", "(", "0.2", ")", ",", "\n", "# video_augmentation.Resize(0.5),", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Apply testing transform.\"", ")", "\n", "return", "video_augmentation", ".", "Compose", "(", "[", "\n", "video_augmentation", ".", "CenterCrop", "(", "224", ")", ",", "\n", "# video_augmentation.Resize(0.5),", "\n", "video_augmentation", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.byte_to_img": [[102, 110], ["pa.deserialize", "six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "", "def", "byte_to_img", "(", "self", ",", "byteflow", ")", ":", "\n", "        ", "unpacked", "=", "pa", ".", "deserialize", "(", "byteflow", ")", "\n", "imgbuf", "=", "unpacked", "[", "0", "]", "\n", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "img", "=", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.collate_fn": [[111, 150], ["list", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "zip", "len", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "max", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "sorted", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.LongTensor.extend", "torch.LongTensor.extend", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "int", "[].expand", "[].expand", "[].expand", "len", "numpy.ceil", "numpy.ceil", "len", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "batch", ")", ":", "\n", "        ", "batch", "=", "[", "item", "for", "item", "in", "sorted", "(", "batch", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ")", "]", "\n", "video", ",", "label", ",", "info", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "if", "len", "(", "video", "[", "0", "]", ".", "shape", ")", ">", "3", ":", "\n", "            ", "max_len", "=", "len", "(", "video", "[", "0", "]", ")", "\n", "video_length", "=", "torch", ".", "LongTensor", "(", "[", "np", ".", "ceil", "(", "len", "(", "vid", ")", "/", "4.0", ")", "*", "4", "+", "12", "for", "vid", "in", "video", "]", ")", "\n", "left_pad", "=", "6", "\n", "right_pad", "=", "int", "(", "np", ".", "ceil", "(", "max_len", "/", "4.0", ")", ")", "*", "4", "-", "max_len", "+", "6", "\n", "max_len", "=", "max_len", "+", "left_pad", "+", "right_pad", "\n", "padded_video", "=", "[", "torch", ".", "cat", "(", "\n", "(", "\n", "vid", "[", "0", "]", "[", "None", "]", ".", "expand", "(", "left_pad", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "\n", "vid", ",", "\n", "vid", "[", "-", "1", "]", "[", "None", "]", ".", "expand", "(", "max_len", "-", "len", "(", "vid", ")", "-", "left_pad", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "\n", ")", "\n", ",", "dim", "=", "0", ")", "\n", "for", "vid", "in", "video", "]", "\n", "padded_video", "=", "torch", ".", "stack", "(", "padded_video", ")", "\n", "", "else", ":", "\n", "            ", "max_len", "=", "len", "(", "video", "[", "0", "]", ")", "\n", "video_length", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "vid", ")", "for", "vid", "in", "video", "]", ")", "\n", "padded_video", "=", "[", "torch", ".", "cat", "(", "\n", "(", "\n", "vid", ",", "\n", "vid", "[", "-", "1", "]", "[", "None", "]", ".", "expand", "(", "max_len", "-", "len", "(", "vid", ")", ",", "-", "1", ")", ",", "\n", ")", "\n", ",", "dim", "=", "0", ")", "\n", "for", "vid", "in", "video", "]", "\n", "padded_video", "=", "torch", ".", "stack", "(", "padded_video", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "label_length", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "lab", ")", "for", "lab", "in", "label", "]", ")", "\n", "if", "max", "(", "label_length", ")", "==", "0", ":", "\n", "            ", "return", "padded_video", ",", "video_length", ",", "[", "]", ",", "[", "]", ",", "info", "\n", "", "else", ":", "\n", "            ", "padded_label", "=", "[", "]", "\n", "for", "lab", "in", "label", ":", "\n", "                ", "padded_label", ".", "extend", "(", "lab", ")", "\n", "", "padded_label", "=", "torch", ".", "LongTensor", "(", "padded_label", ")", "\n", "return", "padded_video", ",", "video_length", ",", "padded_label", ",", "label_length", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.__len__": [[151, 153], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs_list", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.record_time": [[154, 157], ["time.time"], "methods", ["None"], ["", "def", "record_time", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "return", "self", ".", "cur_time", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.split_time": [[158, 162], ["dataloader_video.BaseFeeder.record_time", "time.time"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.dataset.dataloader_video.BaseFeeder.record_time"], ["", "def", "split_time", "(", "self", ")", ":", "\n", "        ", "split_time", "=", "time", ".", "time", "(", ")", "-", "self", ".", "cur_time", "\n", "self", ".", "record_time", "(", ")", "\n", "return", "split_time", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.modules.tconv.TemporalConv.__init__": [[10, 40], ["torch.Module.__init__", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "modules.append", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "modules.append", "modules.append", "modules.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "conv_type", "=", "2", ",", "use_bn", "=", "False", ",", "num_classes", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "TemporalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "conv_type", "=", "conv_type", "\n", "\n", "if", "self", ".", "conv_type", "==", "0", ":", "\n", "            ", "self", ".", "kernel_size", "=", "[", "'K3'", "]", "\n", "", "elif", "self", ".", "conv_type", "==", "1", ":", "\n", "            ", "self", ".", "kernel_size", "=", "[", "'K5'", ",", "\"P2\"", "]", "\n", "", "elif", "self", ".", "conv_type", "==", "2", ":", "\n", "            ", "self", ".", "kernel_size", "=", "[", "'K5'", ",", "\"P2\"", ",", "'K5'", ",", "\"P2\"", "]", "\n", "\n", "", "modules", "=", "[", "]", "\n", "for", "layer_idx", ",", "ks", "in", "enumerate", "(", "self", ".", "kernel_size", ")", ":", "\n", "            ", "input_sz", "=", "self", ".", "input_size", "if", "layer_idx", "==", "0", "else", "self", ".", "hidden_size", "\n", "if", "ks", "[", "0", "]", "==", "'P'", ":", "\n", "                ", "modules", ".", "append", "(", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "int", "(", "ks", "[", "1", "]", ")", ",", "ceil_mode", "=", "False", ")", ")", "\n", "", "elif", "ks", "[", "0", "]", "==", "'K'", ":", "\n", "                ", "modules", ".", "append", "(", "\n", "nn", ".", "Conv1d", "(", "input_sz", ",", "self", ".", "hidden_size", ",", "kernel_size", "=", "int", "(", "ks", "[", "1", "]", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n", "modules", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "self", ".", "hidden_size", ")", ")", "\n", "modules", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "", "self", ".", "temporal_conv", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "if", "self", ".", "num_classes", "!=", "-", "1", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.modules.tconv.TemporalConv.update_lgt": [[41, 49], ["copy.deepcopy", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "int"], "methods", ["None"], ["", "", "def", "update_lgt", "(", "self", ",", "lgt", ")", ":", "\n", "        ", "feat_len", "=", "copy", ".", "deepcopy", "(", "lgt", ")", "\n", "for", "ks", "in", "self", ".", "kernel_size", ":", "\n", "            ", "if", "ks", "[", "0", "]", "==", "'P'", ":", "\n", "                ", "feat_len", "=", "torch", ".", "div", "(", "feat_len", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "feat_len", "-=", "int", "(", "ks", "[", "1", "]", ")", "-", "1", "\n", "", "", "return", "feat_len", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.modules.tconv.TemporalConv.forward": [[50, 59], ["tconv.TemporalConv.temporal_conv", "tconv.TemporalConv.update_lgt", "tconv.TemporalConv.fc().transpose", "tconv.TemporalConv.permute", "logits.permute", "tconv.TemporalConv.cpu", "tconv.TemporalConv.fc", "tconv.TemporalConv.transpose"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.modules.tconv.TemporalConv.update_lgt"], ["", "def", "forward", "(", "self", ",", "frame_feat", ",", "lgt", ")", ":", "\n", "        ", "visual_feat", "=", "self", ".", "temporal_conv", "(", "frame_feat", ")", "\n", "lgt", "=", "self", ".", "update_lgt", "(", "lgt", ")", "\n", "logits", "=", "None", "if", "self", ".", "num_classes", "==", "-", "1", "else", "self", ".", "fc", "(", "visual_feat", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "{", "\n", "\"visual_feat\"", ":", "visual_feat", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "\n", "\"conv_logits\"", ":", "logits", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ",", "\n", "\"feat_len\"", ":", "lgt", ".", "cpu", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.modules.BiLSTM.BiLSTMLayer.__init__": [[8, 26], ["torch.Module.__init__", "int", "getattr"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "debug", "=", "False", ",", "hidden_size", "=", "512", ",", "num_layers", "=", "1", ",", "dropout", "=", "0.3", ",", "\n", "bidirectional", "=", "True", ",", "rnn_type", "=", "'LSTM'", ",", "num_classes", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "BiLSTMLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "num_directions", "=", "2", "if", "bidirectional", "else", "1", "\n", "self", ".", "hidden_size", "=", "int", "(", "hidden_size", "/", "self", ".", "num_directions", ")", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "rnn", "=", "getattr", "(", "nn", ",", "self", ".", "rnn_type", ")", "(", "\n", "input_size", "=", "self", ".", "input_size", ",", "\n", "hidden_size", "=", "self", ".", "hidden_size", ",", "\n", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "bidirectional", "=", "self", ".", "bidirectional", ")", "\n", "# for name, param in self.rnn.named_parameters():", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.modules.BiLSTM.BiLSTMLayer.forward": [[30, 65], ["torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "BiLSTM.BiLSTMLayer.rnn", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "isinstance", "int", "BiLSTM.BiLSTMLayer._cat_directions", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.modules.BiLSTM.BiLSTMLayer._cat_directions"], ["", "def", "forward", "(", "self", ",", "src_feats", ",", "src_lens", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            - src_feats: (max_src_len, batch_size, D)\n            - src_lens: (batch_size)\n        Returns:\n            - outputs: (max_src_len, batch_size, hidden_size * num_directions)\n            - hidden : (num_layers, batch_size, hidden_size * num_directions)\n        \"\"\"", "\n", "# (max_src_len, batch_size, D)", "\n", "packed_emb", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "src_feats", ",", "src_lens", ")", "\n", "\n", "# rnn(gru) returns:", "\n", "# - packed_outputs: shape same as packed_emb", "\n", "# - hidden: (num_layers * num_directions, batch_size, hidden_size)", "\n", "if", "hidden", "is", "not", "None", "and", "self", ".", "rnn_type", "==", "'LSTM'", ":", "\n", "            ", "half", "=", "int", "(", "hidden", ".", "size", "(", "0", ")", "/", "2", ")", "\n", "hidden", "=", "(", "hidden", "[", ":", "half", "]", ",", "hidden", "[", "half", ":", "]", ")", "\n", "", "packed_outputs", ",", "hidden", "=", "self", ".", "rnn", "(", "packed_emb", ",", "hidden", ")", "\n", "\n", "# outputs: (max_src_len, batch_size, hidden_size * num_directions)", "\n", "rnn_outputs", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "packed_outputs", ")", "\n", "\n", "if", "self", ".", "bidirectional", ":", "\n", "# (num_layers * num_directions, batch_size, hidden_size)", "\n", "# => (num_layers, batch_size, hidden_size * num_directions)", "\n", "            ", "hidden", "=", "self", ".", "_cat_directions", "(", "hidden", ")", "\n", "\n", "", "if", "isinstance", "(", "hidden", ",", "tuple", ")", ":", "\n", "# cat hidden and cell states", "\n", "            ", "hidden", "=", "torch", ".", "cat", "(", "hidden", ",", "0", ")", "\n", "\n", "", "return", "{", "\n", "\"predictions\"", ":", "rnn_outputs", ",", "\n", "\"hidden\"", ":", "hidden", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.modules.BiLSTM.BiLSTMLayer._cat_directions": [[67, 97], ["isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tuple", "BiLSTM.BiLSTMLayer._cat_directions._cat"], "methods", ["None"], ["", "def", "_cat_directions", "(", "self", ",", "hidden", ")", ":", "\n", "        ", "\"\"\" If the encoder is bidirectional, do the following transformation.\n            Ref: https://github.com/IBM/pytorch-seq2seq/blob/master/seq2seq/models/DecoderRNN.py#L176\n            -----------------------------------------------------------\n            In: (num_layers * num_directions, batch_size, hidden_size)\n            (ex: num_layers=2, num_directions=2)\n\n            layer 1: forward__hidden(1)\n            layer 1: backward_hidden(1)\n            layer 2: forward__hidden(2)\n            layer 2: backward_hidden(2)\n\n            -----------------------------------------------------------\n            Out: (num_layers, batch_size, hidden_size * num_directions)\n\n            layer 1: forward__hidden(1) backward_hidden(1)\n            layer 2: forward__hidden(2) backward_hidden(2)\n        \"\"\"", "\n", "\n", "def", "_cat", "(", "h", ")", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "h", "[", "0", ":", "h", ".", "size", "(", "0", ")", ":", "2", "]", ",", "h", "[", "1", ":", "h", ".", "size", "(", "0", ")", ":", "2", "]", "]", ",", "2", ")", "\n", "\n", "", "if", "isinstance", "(", "hidden", ",", "tuple", ")", ":", "\n", "# LSTM hidden contains a tuple (hidden state, cell state)", "\n", "            ", "hidden", "=", "tuple", "(", "[", "_cat", "(", "h", ")", "for", "h", "in", "hidden", "]", ")", "\n", "", "else", ":", "\n", "# GRU hidden", "\n", "            ", "hidden", "=", "_cat", "(", "hidden", ")", "\n", "\n", "", "return", "hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.modules.criterions.SeqKD.__init__": [[11, 15], ["torch.Module.__init__", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__"], ["def", "__init__", "(", "self", ",", "T", "=", "1", ")", ":", "\n", "        ", "super", "(", "SeqKD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kdloss", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'batchmean'", ")", "\n", "self", ".", "T", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.modules.criterions.SeqKD.forward": [[16, 30], ["torch.log_softmax().view", "torch.log_softmax().view", "torch.log_softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "criterions.SeqKD.kdloss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prediction_logits", ",", "ref_logits", ",", "use_blank", "=", "True", ")", ":", "\n", "        ", "start_idx", "=", "0", "if", "use_blank", "else", "1", "\n", "prediction_logits", "=", "F", ".", "log_softmax", "(", "prediction_logits", "[", ":", ",", ":", ",", "start_idx", ":", "]", "/", "self", ".", "T", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ",", "ref_logits", ".", "shape", "[", "2", "]", "-", "start_idx", ")", "\n", "ref_probs", "=", "F", ".", "softmax", "(", "ref_logits", "[", ":", ",", ":", ",", "start_idx", ":", "]", "/", "self", ".", "T", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ",", "ref_logits", ".", "shape", "[", "2", "]", "-", "start_idx", ")", "\n", "loss", "=", "self", ".", "kdloss", "(", "prediction_logits", ",", "ref_probs", ")", "*", "self", ".", "T", "*", "self", ".", "T", "\n", "# mask_probs = F.softmax(ref_logits[:, :, 1:], dim=-1).view(-1, ref_logits.shape[2] - 1)", "\n", "# mask = torch.max(mask_probs, dim=1)[0] > 0.5", "\n", "# if torch.sum(mask) != 0:", "\n", "#     loss = torch.sum(torch.sum(loss, dim=1) * mask) / torch.sum(mask)", "\n", "# else:", "\n", "#     loss = torch.sum(torch.sum(loss, dim=1) * mask)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ",", "atol", "=", "1e-5", ",", "rtol", "=", "1e-3", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[62, 77], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "\n", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "if", "not", "self", ".", "track_running_stats", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "'track_running_stats=False is not supported by the SynchronizedBatchNorm.'", ")", "\n", "\n", "", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[78, 110], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "assert", "input", ".", "size", "(", "1", ")", "==", "self", ".", "num_features", ",", "'Channel size mismatch: got {}, expect {}.'", ".", "format", "(", "input", ".", "size", "(", "1", ")", ",", "self", ".", "num_features", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[111, 120], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[121, 143], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[144, 167], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ValueError", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "if", "SBN_EPS_MODE", "==", "'clamp'", ":", "\n", "            ", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "", "elif", "SBN_EPS_MODE", "==", "'plus'", ":", "\n", "            ", "return", "mean", ",", "(", "bias_var", "+", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown EPS mode: {}.'", ".", "format", "(", "SBN_EPS_MODE", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[225, 229], ["ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[287, 291], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[350, 354], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm.set_sbn_eps_mode": [[41, 45], ["None"], "function", ["None"], ["def", "set_sbn_eps_mode", "(", "mode", ")", ":", "\n", "    ", "global", "SBN_EPS_MODE", "\n", "assert", "mode", "in", "(", "'clamp'", ",", "'plus'", ")", "\n", "SBN_EPS_MODE", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._sum_ft": [[47, 50], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["", "def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm._unsqueeze_ft": [[52, 55], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[356, 369], ["None"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm.convert_model": [[371, 413], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ",", "device_ids", "=", "module", ".", "device_ids", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.preprocess.dataset_preprocess.csv2dict": [[14, 35], ["pandas.read_csv", "[].values", "dict", "print", "tqdm.tqdm", "[].values.drop", "enumerate", "file_info.split", "len", "anno_path.rsplit", "len", "glob.glob", "[].values.to_dict"], "function", ["None"], ["def", "csv2dict", "(", "anno_path", ",", "dataset_type", ")", ":", "\n", "    ", "inputs_list", "=", "pandas", ".", "read_csv", "(", "anno_path", ")", "\n", "if", "dataset_type", "==", "'train'", ":", "\n", "        ", "broken_data", "=", "[", "2390", "]", "\n", "inputs_list", ".", "drop", "(", "broken_data", ",", "inplace", "=", "True", ")", "\n", "", "inputs_list", "=", "(", "inputs_list", ".", "to_dict", "(", ")", "[", "'id|folder|signer|annotation'", "]", ".", "values", "(", ")", ")", "\n", "info_dict", "=", "dict", "(", ")", "\n", "info_dict", "[", "'prefix'", "]", "=", "anno_path", ".", "rsplit", "(", "\"/\"", ",", "3", ")", "[", "0", "]", "+", "\"/features/fullFrame-210x260px\"", "\n", "print", "(", "f\"Generate information dict from {anno_path}\"", ")", "\n", "for", "file_idx", ",", "file_info", "in", "tqdm", "(", "enumerate", "(", "inputs_list", ")", ",", "total", "=", "len", "(", "inputs_list", ")", ")", ":", "\n", "        ", "fileid", ",", "folder", ",", "signer", ",", "label", "=", "file_info", ".", "split", "(", "\"|\"", ")", "\n", "num_frames", "=", "len", "(", "glob", ".", "glob", "(", "f\"{info_dict['prefix']}/{dataset_type}/{folder}\"", ")", ")", "\n", "info_dict", "[", "file_idx", "]", "=", "{", "\n", "'fileid'", ":", "fileid", ",", "\n", "'folder'", ":", "f\"{dataset_type}/{folder}\"", ",", "\n", "'signer'", ":", "signer", ",", "\n", "'label'", ":", "label", ",", "\n", "'num_frames'", ":", "num_frames", ",", "\n", "'original_info'", ":", "file_info", ",", "\n", "}", "\n", "", "return", "info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.preprocess.dataset_preprocess.generate_gt_stm": [[37, 43], ["open", "info.items", "f.writelines", "isinstance"], "function", ["None"], ["", "def", "generate_gt_stm", "(", "info", ",", "save_path", ")", ":", "\n", "    ", "with", "open", "(", "save_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "k", ",", "v", "in", "info", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "k", ",", "int", ")", ":", "\n", "                ", "continue", "\n", "", "f", ".", "writelines", "(", "f\"{v['fileid']} 1 {v['signer']} 0.0 1.79769e+308 {v['label']}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.preprocess.dataset_preprocess.sign_dict_update": [[45, 56], ["info.items", "v[].split", "isinstance", "total_dict.keys"], "function", ["None"], ["", "", "", "def", "sign_dict_update", "(", "total_dict", ",", "info", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "info", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "k", ",", "int", ")", ":", "\n", "            ", "continue", "\n", "", "split_label", "=", "v", "[", "'label'", "]", ".", "split", "(", ")", "\n", "for", "gloss", "in", "split_label", ":", "\n", "            ", "if", "gloss", "not", "in", "total_dict", ".", "keys", "(", ")", ":", "\n", "                ", "total_dict", "[", "gloss", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "total_dict", "[", "gloss", "]", "+=", "1", "\n", "", "", "", "return", "total_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.preprocess.dataset_preprocess.resize_img": [[58, 63], ["tuple", "cv2.imread", "cv2.resize", "int", "re.findall"], "function", ["None"], ["", "def", "resize_img", "(", "img_path", ",", "dsize", "=", "'210x260px'", ")", ":", "\n", "    ", "dsize", "=", "tuple", "(", "int", "(", "res", ")", "for", "res", "in", "re", ".", "findall", "(", "\"\\d+\"", ",", "dsize", ")", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "dsize", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.preprocess.dataset_preprocess.resize_dataset": [[65, 77], ["glob.glob", "dataset_preprocess.resize_img", "img_path.replace", "os.path.dirname", "os.path.exists", "os.makedirs", "cv2.imwrite", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.preprocess.dataset_preprocess.resize_img"], ["", "def", "resize_dataset", "(", "video_idx", ",", "dsize", ",", "info_dict", ")", ":", "\n", "    ", "info", "=", "info_dict", "[", "video_idx", "]", "\n", "img_list", "=", "glob", ".", "glob", "(", "f\"{info_dict['prefix']}/{info['folder']}\"", ")", "\n", "for", "img_path", "in", "img_list", ":", "\n", "        ", "rs_img", "=", "resize_img", "(", "img_path", ",", "dsize", "=", "dsize", ")", "\n", "rs_img_path", "=", "img_path", ".", "replace", "(", "\"210x260px\"", ",", "dsize", ")", "\n", "rs_img_dir", "=", "os", ".", "path", ".", "dirname", "(", "rs_img_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "rs_img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "rs_img_dir", ")", "\n", "cv2", ".", "imwrite", "(", "rs_img_path", ",", "rs_img", ")", "\n", "", "else", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "rs_img_path", ",", "rs_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.preprocess.dataset_preprocess.run_mp_cmd": [[79, 83], ["multiprocessing.Pool", "list", "tqdm.tqdm", "p.imap", "len"], "function", ["None"], ["", "", "", "def", "run_mp_cmd", "(", "processes", ",", "process_func", ",", "process_args", ")", ":", "\n", "    ", "with", "Pool", "(", "processes", ")", "as", "p", ":", "\n", "        ", "outputs", "=", "list", "(", "tqdm", "(", "p", ".", "imap", "(", "process_func", ",", "process_args", ")", ",", "total", "=", "len", "(", "process_args", ")", ")", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.preprocess.dataset_preprocess.run_cmd": [[85, 87], ["func"], "function", ["None"], ["", "def", "run_cmd", "(", "func", ",", "args", ")", ":", "\n", "    ", "return", "func", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.load_groundtruth": [[12, 20], ["open().readlines", "dict", "open", "line[].split", "filter", "line.split", "len"], "function", ["None"], ["def", "load_groundtruth", "(", "fpath", ")", ":", "\n", "    ", "file_info", "=", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "gt_dict", "=", "dict", "(", ")", "\n", "for", "line", "in", "file_info", ":", "\n", "        ", "info", "=", "line", "[", ":", "-", "1", "]", ".", "split", "(", "\" \"", ")", "[", "5", ":", "]", "\n", "info", "=", "[", "*", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "info", ")", "]", "\n", "gt_dict", "[", "line", ".", "split", "(", "\" \"", ")", "[", "0", "]", "]", "=", "info", "\n", "", "return", "gt_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.load_prediction": [[22, 32], ["open().readlines", "dict", "line[].split", "open", "dict.keys", "pre_dict[].append"], "function", ["None"], ["", "def", "load_prediction", "(", "fpath", ")", ":", "\n", "    ", "file_info", "=", "open", "(", "fpath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "pre_dict", "=", "dict", "(", ")", "\n", "for", "line", "in", "file_info", ":", "\n", "        ", "file_name", ",", "_", ",", "_", ",", "_", ",", "wd", "=", "line", "[", ":", "-", "1", "]", ".", "split", "(", "\" \"", ")", "\n", "if", "file_name", "not", "in", "pre_dict", ".", "keys", "(", ")", ":", "\n", "            ", "pre_dict", "[", "file_name", "]", "=", "[", "wd", "]", "\n", "", "else", ":", "\n", "            ", "pre_dict", "[", "file_name", "]", ".", "append", "(", "wd", ")", "\n", "", "", "return", "pre_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.get_wer_delsubins": [[34, 128], ["numpy.zeros", "range", "numpy.array", "range", "range", "len", "len", "numpy.ones", "numpy.arange", "numpy.arange", "range", "np.array.min", "bt_path.append", "aligned_gt.append", "aligned_pred.append", "results.append", "aligned_pred.append", "aligned_gt.append", "results.append", "results.append", "results.append", "itertools.groupby", "min", "min", "len", "len", "aligned_gt.append", "aligned_pred.append", "aligned_gt.append", "aligned_pred.append", "aligned_gt.append", "aligned_pred.append", "len", "len", "aligned_gt.append", "aligned_pred.append", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "get_wer_delsubins", "(", "ref", ",", "hyp", ",", "merge_same", "=", "False", ",", "align_results", "=", "False", ",", "\n", "penalty", "=", "{", "'ins'", ":", "1", ",", "'del'", ":", "1", ",", "'sub'", ":", "1", "}", ")", ":", "\n", "# whether merge glosses before evaluation", "\n", "    ", "hyp", "=", "hyp", "if", "not", "merge_same", "else", "[", "x", "[", "0", "]", "for", "x", "in", "groupby", "(", "hyp", ")", "]", "\n", "\n", "# initialization", "\n", "ref_lgt", "=", "len", "(", "ref", ")", "+", "1", "\n", "hyp_lgt", "=", "len", "(", "hyp", ")", "+", "1", "\n", "\n", "costs", "=", "np", ".", "ones", "(", "(", "ref_lgt", ",", "hyp_lgt", ")", ",", "dtype", "=", "np", ".", "int", ")", "*", "1e6", "\n", "# auxiliary values", "\n", "costs", "[", "0", ",", ":", "]", "=", "np", ".", "arange", "(", "hyp_lgt", ")", "*", "penalty", "[", "'ins'", "]", "\n", "costs", "[", ":", ",", "0", "]", "=", "np", ".", "arange", "(", "ref_lgt", ")", "*", "penalty", "[", "'del'", "]", "\n", "\n", "backtrace", "=", "np", ".", "zeros", "(", "(", "ref_lgt", ",", "hyp_lgt", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# auxiliary indexes, 0, 1, 2, 3 are corresponding to correct, substitute, insert and delete, respectively", "\n", "backtrace", "[", "0", ",", ":", "]", "=", "2", "\n", "backtrace", "[", ":", ",", "0", "]", "=", "3", "\n", "\n", "# dynamic programming", "\n", "for", "i", "in", "range", "(", "1", ",", "ref_lgt", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "hyp_lgt", ")", ":", "\n", "            ", "if", "ref", "[", "i", "-", "1", "]", "==", "hyp", "[", "j", "-", "1", "]", ":", "\n", "                ", "costs", "[", "i", ",", "j", "]", "=", "min", "(", "costs", "[", "i", "-", "1", ",", "j", "-", "1", "]", ",", "costs", "[", "i", ",", "j", "]", ")", "\n", "backtrace", "[", "i", ",", "j", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "sub_cost", ",", "ins_cost", ",", "del_cost", "=", "costs", "[", "i", "-", "1", ",", "j", "-", "1", "]", "+", "penalty", "[", "'sub'", "]", ",", "costs", "[", "i", "-", "1", ",", "j", "]", "+", "penalty", "[", "'del'", "]", ",", "costs", "[", "i", ",", "j", "-", "1", "]", "+", "penalty", "[", "'ins'", "]", "\n", "min_cost", "=", "min", "(", "del_cost", ",", "ins_cost", ",", "sub_cost", ")", "\n", "if", "min_cost", "<", "costs", "[", "i", ",", "j", "]", ":", "\n", "                    ", "costs", "[", "i", ",", "j", "]", "=", "min_cost", "\n", "backtrace", "[", "i", ",", "j", "]", "=", "[", "sub_cost", ",", "ins_cost", ",", "del_cost", "]", ".", "index", "(", "costs", "[", "i", ",", "j", "]", ")", "+", "1", "\n", "\n", "# backtrace pointer", "\n", "", "", "", "", "bt_ptr", "=", "np", ".", "array", "(", "[", "ref_lgt", "-", "1", ",", "hyp_lgt", "-", "1", "]", ")", "\n", "bt_path", "=", "[", "]", "\n", "while", "bt_ptr", ".", "min", "(", ")", ">", "0", ":", "\n", "        ", "if", "backtrace", "[", "bt_ptr", "[", "0", "]", ",", "bt_ptr", "[", "1", "]", "]", "==", "0", ":", "\n", "# if correct, move (-1, -1)", "\n", "            ", "bt_ptr", "=", "bt_ptr", "-", "1", "\n", "op", "=", "'C'", "\n", "", "elif", "backtrace", "[", "bt_ptr", "[", "0", "]", ",", "bt_ptr", "[", "1", "]", "]", "==", "1", ":", "\n", "# if substitute, move (-1, -1)", "\n", "            ", "bt_ptr", "=", "bt_ptr", "-", "1", "\n", "op", "=", "'S'", "\n", "", "elif", "backtrace", "[", "bt_ptr", "[", "0", "]", ",", "bt_ptr", "[", "1", "]", "]", "==", "2", ":", "\n", "# if delete, move (-1, 0)", "\n", "            ", "bt_ptr", "=", "bt_ptr", "+", "(", "-", "1", ",", "0", ")", "\n", "op", "=", "'D'", "\n", "", "elif", "backtrace", "[", "bt_ptr", "[", "0", "]", ",", "bt_ptr", "[", "1", "]", "]", "==", "3", ":", "\n", "# if insert, move (0, -1)", "\n", "            ", "bt_ptr", "=", "bt_ptr", "+", "(", "0", ",", "-", "1", ")", "\n", "op", "=", "'I'", "\n", "", "else", ":", "\n", "            ", "assert", "\"Unexpected Operation\"", "\n", "", "bt_path", ".", "append", "(", "(", "bt_ptr", ",", "op", ")", ")", "\n", "\n", "# decode path", "\n", "", "aligned_gt", "=", "[", "]", "\n", "aligned_pred", "=", "[", "]", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bt_path", "[", "-", "1", "]", "[", "0", "]", "[", "0", "]", ")", ":", "\n", "        ", "aligned_gt", ".", "append", "(", "ref", "[", "i", "]", ")", "\n", "aligned_pred", ".", "append", "(", "'*'", "*", "len", "(", "ref", "[", "i", "]", ")", ")", "\n", "results", ".", "append", "(", "'D'", "+", "' '", "*", "(", "len", "(", "ref", "[", "i", "]", ")", "-", "1", ")", ")", "\n", "", "for", "i", "in", "range", "(", "bt_path", "[", "-", "1", "]", "[", "0", "]", "[", "1", "]", ")", ":", "\n", "        ", "aligned_pred", ".", "append", "(", "hyp", "[", "i", "]", ")", "\n", "aligned_gt", ".", "append", "(", "'*'", "*", "len", "(", "hyp", "[", "i", "]", ")", ")", "\n", "results", ".", "append", "(", "'I'", "+", "' '", "*", "(", "len", "(", "hyp", "[", "i", "]", ")", "-", "1", ")", ")", "\n", "", "for", "ptr", ",", "op", "in", "bt_path", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "if", "op", "in", "[", "'C'", ",", "'S'", "]", ":", "\n", "            ", "if", "align_results", ":", "\n", "                ", "delta_lgt", "=", "len", "(", "ref", "[", "ptr", "[", "0", "]", "]", ")", "-", "len", "(", "hyp", "[", "ptr", "[", "1", "]", "]", ")", "\n", "ref_pad", "=", "0", "if", "delta_lgt", ">", "0", "else", "-", "delta_lgt", "\n", "hyp_pad", "=", "0", "if", "delta_lgt", "<", "0", "else", "delta_lgt", "\n", "aligned_gt", ".", "append", "(", "ref", "[", "ptr", "[", "0", "]", "]", "+", "' '", "*", "ref_pad", ")", "\n", "aligned_pred", ".", "append", "(", "hyp", "[", "ptr", "[", "1", "]", "]", "+", "' '", "*", "hyp_pad", ")", "\n", "", "else", ":", "\n", "                ", "aligned_gt", ".", "append", "(", "ref", "[", "ptr", "[", "0", "]", "]", ")", "\n", "aligned_pred", ".", "append", "(", "hyp", "[", "ptr", "[", "1", "]", "]", ")", "\n", "", "", "elif", "op", "==", "'I'", ":", "\n", "            ", "aligned_gt", ".", "append", "(", "'*'", "*", "len", "(", "hyp", "[", "ptr", "[", "1", "]", "]", ")", ")", "\n", "aligned_pred", ".", "append", "(", "hyp", "[", "ptr", "[", "1", "]", "]", ")", "\n", "", "elif", "op", "==", "'D'", ":", "\n", "            ", "aligned_gt", ".", "append", "(", "ref", "[", "ptr", "[", "0", "]", "]", ")", "\n", "aligned_pred", ".", "append", "(", "'*'", "*", "len", "(", "ref", "[", "ptr", "[", "0", "]", "]", ")", ")", "\n", "\n", "", "if", "op", "==", "'C'", ":", "\n", "            ", "results", ".", "append", "(", "' '", "*", "(", "len", "(", "aligned_gt", "[", "-", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "results", ".", "append", "(", "op", "+", "' '", "*", "(", "len", "(", "aligned_gt", "[", "-", "1", "]", ")", "-", "1", ")", ")", "\n", "", "", "return", "aligned_gt", ",", "aligned_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.calculate_stats": [[130, 151], ["range", "len"], "function", ["None"], ["", "def", "calculate_stats", "(", "gt", ",", "lstm_pred", ",", "conv_pred", "=", "None", ")", ":", "\n", "    ", "stat_ret", "=", "{", "\n", "'wer_conv'", ":", "0", ",", "\n", "'wer_lstm'", ":", "0", ",", "\n", "'war'", ":", "0", ",", "\n", "'wdr'", ":", "0", ",", "\n", "'cnt'", ":", "0", ",", "\n", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "        ", "if", "\"*\"", "not", "in", "gt", "[", "i", "]", ":", "\n", "            ", "stat_ret", "[", "'cnt'", "]", "+=", "1", "\n", "", "if", "gt", "[", "i", "]", "!=", "lstm_pred", "[", "i", "]", ":", "\n", "            ", "stat_ret", "[", "'wer_lstm'", "]", "+=", "1", "\n", "", "if", "conv_pred", "is", "not", "None", ":", "\n", "            ", "if", "gt", "[", "i", "]", "!=", "conv_pred", "[", "i", "]", ":", "\n", "                ", "stat_ret", "[", "'wer_conv'", "]", "+=", "1", "\n", "", "if", "conv_pred", "[", "i", "]", "==", "gt", "[", "i", "]", "and", "lstm_pred", "[", "i", "]", "!=", "gt", "[", "i", "]", ":", "\n", "                ", "stat_ret", "[", "'wdr'", "]", "+=", "1", "\n", "", "if", "conv_pred", "[", "i", "]", "!=", "gt", "[", "i", "]", "and", "lstm_pred", "[", "i", "]", "==", "gt", "[", "i", "]", ":", "\n", "                ", "stat_ret", "[", "'war'", "]", "+=", "1", "\n", "", "", "", "return", "stat_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.sent_evaluation": [[153, 184], ["python_wer_evaluation.get_wer_delsubins", "python_wer_evaluation.calculate_stats", "kwargs.keys", "python_wer_evaluation.get_wer_delsubins", "python_wer_evaluation.get_wer_delsubins", "python_wer_evaluation.calculate_stats", "python_wer_evaluation.get_wer_delsubins", "python_wer_evaluation.get_wer_delsubins", "python_wer_evaluation.get_wer_delsubins"], "function", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.get_wer_delsubins", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.calculate_stats", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.get_wer_delsubins", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.get_wer_delsubins", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.calculate_stats", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.get_wer_delsubins", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.get_wer_delsubins", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.get_wer_delsubins"], ["", "def", "sent_evaluation", "(", "**", "kwargs", ")", ":", "\n", "    ", "if", "\"conv_prediction\"", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "        ", "ret1", "=", "get_wer_delsubins", "(", "kwargs", "[", "'gt'", "]", ",", "kwargs", "[", "'conv_prediction'", "]", ",", "\n", "merge_same", "=", "kwargs", "[", "'merge_same'", "]", ",", "\n", "penalty", "=", "kwargs", "[", "'penalty'", "]", ")", "\n", "ret2", "=", "get_wer_delsubins", "(", "kwargs", "[", "'gt'", "]", ",", "kwargs", "[", "'lstm_prediction'", "]", ",", "\n", "merge_same", "=", "kwargs", "[", "'merge_same'", "]", ",", "\n", "penalty", "=", "kwargs", "[", "'penalty'", "]", ")", "\n", "new_gt", "=", "get_wer_delsubins", "(", "\n", "ret1", "[", "0", "]", ",", "ret2", "[", "0", "]", ",", "\n", "merge_same", "=", "kwargs", "[", "'merge_same'", "]", ",", "\n", "penalty", "=", "kwargs", "[", "'penalty'", "]", ")", "[", "0", "]", "\n", "conv_pred", "=", "get_wer_delsubins", "(", "\n", "new_gt", ",", "kwargs", "[", "'conv_prediction'", "]", ",", "\n", "align_results", "=", "True", ",", "\n", "merge_same", "=", "kwargs", "[", "'merge_same'", "]", ",", "\n", "penalty", "=", "kwargs", "[", "'penalty'", "]", ")", "[", "1", "]", "\n", "lstm_pred", "=", "get_wer_delsubins", "(", "\n", "new_gt", ",", "kwargs", "[", "'lstm_prediction'", "]", ",", "\n", "align_results", "=", "True", ",", "\n", "merge_same", "=", "kwargs", "[", "'merge_same'", "]", ",", "\n", "penalty", "=", "kwargs", "[", "'penalty'", "]", ")", "[", "1", "]", "\n", "# print(new_gt)", "\n", "# print(new_ret1)", "\n", "# print(new_ret2)", "\n", "return", "calculate_stats", "(", "new_gt", ",", "lstm_pred", ",", "conv_pred", ")", "\n", "\n", "", "gt", ",", "lstm_pred", "=", "get_wer_delsubins", "(", "kwargs", "[", "'gt'", "]", ",", "kwargs", "[", "'lstm_prediction'", "]", ",", "\n", "merge_same", "=", "kwargs", "[", "'merge_same'", "]", ",", "\n", "penalty", "=", "kwargs", "[", "'penalty'", "]", ")", "\n", "return", "calculate_stats", "(", "gt", ",", "lstm_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.sum_dict": [[186, 191], ["dict", "dict_list[].keys", "sum"], "function", ["None"], ["", "def", "sum_dict", "(", "dict_list", ")", ":", "\n", "    ", "ret_dict", "=", "dict", "(", ")", "\n", "for", "key", "in", "dict_list", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "ret_dict", "[", "key", "]", "=", "sum", "(", "[", "d", "[", "key", "]", "for", "d", "in", "dict_list", "]", ")", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.wer_calculation": [[193, 225], ["python_wer_evaluation.load_groundtruth", "python_wer_evaluation.load_prediction", "python_wer_evaluation.sum_dict", "print", "python_wer_evaluation.load_prediction", "load_groundtruth.items", "load_groundtruth.items", "python_wer_evaluation.sent_evaluation", "results_list.append", "python_wer_evaluation.sent_evaluation", "results_list.append"], "function", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.load_groundtruth", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.load_prediction", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.sum_dict", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.load_prediction", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.sent_evaluation", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.sent_evaluation"], ["", "def", "wer_calculation", "(", "gt_path", ",", "primary_pred", ",", "auxiliary_pred", "=", "None", ")", ":", "\n", "    ", "gt", "=", "load_groundtruth", "(", "gt_path", ")", "\n", "pred1", "=", "load_prediction", "(", "primary_pred", ")", "\n", "results_list", "=", "[", "]", "\n", "if", "auxiliary_pred", "is", "not", "None", ":", "\n", "        ", "pred2", "=", "load_prediction", "(", "auxiliary_pred", ")", "\n", "for", "fileid", ",", "sent", "in", "gt", ".", "items", "(", ")", ":", "\n", "            ", "sent_stat", "=", "sent_evaluation", "(", "\n", "info", "=", "fileid", ",", "gt", "=", "sent", ",", "\n", "merge_same", "=", "True", ",", "\n", "lstm_prediction", "=", "pred1", "[", "fileid", "]", ",", "\n", "conv_prediction", "=", "pred2", "[", "fileid", "]", ",", "\n", "penalty", "=", "{", "'ins'", ":", "3", ",", "'del'", ":", "3", ",", "'sub'", ":", "4", "}", ",", "\n", ")", "\n", "results_list", ".", "append", "(", "sent_stat", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "fileid", ",", "sent", "in", "gt", ".", "items", "(", ")", ":", "\n", "            ", "sent_stat", "=", "sent_evaluation", "(", "\n", "info", "=", "fileid", ",", "gt", "=", "sent", ",", "\n", "merge_same", "=", "True", ",", "\n", "lstm_prediction", "=", "pred1", "[", "fileid", "]", ",", "\n", "penalty", "=", "{", "'ins'", ":", "3", ",", "'del'", ":", "3", ",", "'sub'", ":", "4", "}", ",", "\n", ")", "\n", "results_list", ".", "append", "(", "sent_stat", ")", "\n", "", "", "results", "=", "sum_dict", "(", "results_list", ")", "\n", "print", "(", "\n", "f\"WER_primary: {results['wer_lstm'] / results['cnt']: 2.2%}\\n\"", "\n", "f\"WER_auxiliary: {results['wer_conv'] / results['cnt']: 2.2%}\\n\"", "\n", "f\"WAR: {results['war'] / results['cnt']: 2.2%}\\n\"", "\n", "f\"WDR: {results['wdr'] / results['cnt']: 2.2%}\"", "\n", ")", "\n", "return", "results", "[", "'wer_lstm'", "]", "/", "results", "[", "'cnt'", "]", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.wer_calculation.evaluate": [[6, 45], ["print", "os.system", "os.system", "os.system", "os.system", "float", "os.getcwd", "python_wer_evaluation.wer_calculation", "os.system", "os.system", "os.popen().readlines", "python_wer_evaluation.wer_calculation", "os.path.isdir", "os.makedirs", "[].split", "os.popen", "python_wer_evaluation.wer_calculation.split"], "function", ["home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.wer_calculation", "home.repos.pwc.inspect_result.ycmin95_VAC_CSLR.slr_eval.python_wer_evaluation.wer_calculation"], ["def", "evaluate", "(", "prefix", "=", "\"./\"", ",", "mode", "=", "\"dev\"", ",", "evaluate_dir", "=", "None", ",", "evaluate_prefix", "=", "None", ",", "\n", "output_file", "=", "None", ",", "output_dir", "=", "None", ",", "python_evaluate", "=", "False", ",", "\n", "triplet", "=", "False", ")", ":", "\n", "    ", "'''\n    TODO  change file save path\n    '''", "\n", "sclite_path", "=", "\"./software/sclite\"", "\n", "print", "(", "os", ".", "getcwd", "(", ")", ")", "\n", "os", ".", "system", "(", "f\"bash {evaluate_dir}/preprocess.sh {prefix + output_file} {prefix}tmp.ctm {prefix}tmp2.ctm\"", ")", "\n", "os", ".", "system", "(", "f\"cat {evaluate_dir}/{evaluate_prefix}-{mode}.stm | sort  -k1,1 > {prefix}tmp.stm\"", ")", "\n", "# tmp2.ctm: prediction result; tmp.stm: ground-truth result", "\n", "os", ".", "system", "(", "f\"python {evaluate_dir}/mergectmstm.py {prefix}tmp2.ctm {prefix}tmp.stm\"", ")", "\n", "os", ".", "system", "(", "f\"cp {prefix}tmp2.ctm {prefix}out.{output_file}\"", ")", "\n", "if", "python_evaluate", ":", "\n", "        ", "ret", "=", "wer_calculation", "(", "f\"{evaluate_dir}/{evaluate_prefix}-{mode}.stm\"", ",", "f\"{prefix}out.{output_file}\"", ")", "\n", "if", "triplet", ":", "\n", "            ", "wer_calculation", "(", "\n", "f\"{evaluate_dir}/{evaluate_prefix}-{mode}.stm\"", ",", "\n", "f\"{prefix}out.{output_file}\"", ",", "\n", "f\"{prefix}out.{output_file}\"", ".", "replace", "(", "\".ctm\"", ",", "\"-conv.ctm\"", ")", "\n", ")", "\n", "", "return", "ret", "\n", "", "if", "output_dir", "is", "not", "None", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "prefix", "+", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "prefix", "+", "output_dir", ")", "\n", "", "os", ".", "system", "(", "\n", "f\"{sclite_path}  -h {prefix}out.{output_file} ctm\"", "\n", "f\" -r {prefix}tmp.stm stm -f 0 -o sgml sum rsum pra -O {prefix + output_dir}\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "system", "(", "\n", "f\"{sclite_path}  -h {prefix}out.{output_file} ctm\"", "\n", "f\" -r {prefix}tmp.stm stm -f 0 -o sgml sum rsum pra\"", "\n", ")", "\n", "", "ret", "=", "os", ".", "popen", "(", "\n", "f\"{sclite_path}  -h {prefix}out.{output_file} ctm \"", "\n", "f\"-r {prefix}tmp.stm stm -f 0 -o dtl stdout |grep Error\"", "\n", ")", ".", "readlines", "(", ")", "[", "0", "]", "\n", "return", "float", "(", "ret", ".", "split", "(", "\"=\"", ")", "[", "1", "]", ".", "split", "(", "\"%\"", ")", "[", "0", "]", ")", "\n", "\n"]]}