{"home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.VOCColorize.__init__": [[46, 49], ["evaluateUDA.color_map", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.color_map"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "22", ")", ":", "\n", "        ", "self", ".", "cmap", "=", "color_map", "(", "22", ")", "\n", "self", ".", "cmap", "=", "torch", ".", "from_numpy", "(", "self", ".", "cmap", "[", ":", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.VOCColorize.__call__": [[50, 65], ["numpy.zeros", "range", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "gray_image", ")", ":", "\n", "        ", "size", "=", "gray_image", ".", "shape", "\n", "color_image", "=", "np", ".", "zeros", "(", "(", "3", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "label", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cmap", ")", ")", ":", "\n", "            ", "mask", "=", "(", "label", "==", "gray_image", ")", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "0", "]", "\n", "color_image", "[", "1", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "1", "]", "\n", "color_image", "[", "2", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "2", "]", "\n", "\n", "# handle void", "\n", "", "mask", "=", "(", "255", "==", "gray_image", ")", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "color_image", "[", "1", "]", "[", "mask", "]", "=", "color_image", "[", "2", "]", "[", "mask", "]", "=", "255", "\n", "\n", "return", "color_image", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.get_arguments": [[30, 44], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"UDA evaluation script\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-m\"", ",", "\"--model-path\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Model to evaluate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "(", "0", ",", ")", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-output-images\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"save output images\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.color_map": [[66, 85], ["numpy.zeros", "range", "range", "numpy.array", "evaluateUDA.color_map.bitget"], "function", ["None"], ["", "", "def", "color_map", "(", "N", "=", "256", ",", "normalized", "=", "False", ")", ":", "\n", "    ", "def", "bitget", "(", "byteval", ",", "idx", ")", ":", "\n", "        ", "return", "(", "(", "byteval", "&", "(", "1", "<<", "idx", ")", ")", "!=", "0", ")", "\n", "\n", "", "dtype", "=", "'float32'", "if", "normalized", "else", "'uint8'", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "r", "=", "g", "=", "b", "=", "0", "\n", "c", "=", "i", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "            ", "r", "=", "r", "|", "(", "bitget", "(", "c", ",", "0", ")", "<<", "7", "-", "j", ")", "\n", "g", "=", "g", "|", "(", "bitget", "(", "c", ",", "1", ")", "<<", "7", "-", "j", ")", "\n", "b", "=", "b", "|", "(", "bitget", "(", "c", ",", "2", ")", "<<", "7", "-", "j", ")", "\n", "c", "=", "c", ">>", "3", "\n", "\n", "", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "", "cmap", "=", "cmap", "/", "255", "if", "normalized", "else", "cmap", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.get_label_vector": [[86, 98], ["numpy.histogram", "numpy.zeros", "range", "len"], "function", ["None"], ["", "def", "get_label_vector", "(", "target", ",", "nclass", ")", ":", "\n", "# target is a 3D Variable BxHxW, output is 2D BxnClass", "\n", "    ", "hist", ",", "_", "=", "np", ".", "histogram", "(", "target", ",", "bins", "=", "nclass", ",", "range", "=", "(", "0", ",", "nclass", "-", "1", ")", ")", "\n", "vect", "=", "hist", ">", "0", "\n", "vect_out", "=", "np", ".", "zeros", "(", "(", "21", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "vect", ")", ")", ":", "\n", "        ", "if", "vect", "[", "i", "]", "==", "True", ":", "\n", "            ", "vect_out", "[", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "vect_out", "[", "i", "]", "=", "0", "\n", "\n", "", "", "return", "vect_out", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.get_iou": [[99, 133], ["ConfusionMatrix", "Pool", "Pool.map", "Pool.close", "Pool.join", "ConfusionMatrix.jaccard", "numpy.array", "enumerate", "print", "ConfusionMatrix.addM", "print", "open", "enumerate", "f.write", "str", "f.write", "str"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.jaccard", "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.addM"], ["", "def", "get_iou", "(", "data_list", ",", "class_num", ",", "dataset", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "from", "multiprocessing", "import", "Pool", "\n", "from", "utils", ".", "metric", "import", "ConfusionMatrix", "\n", "\n", "ConfM", "=", "ConfusionMatrix", "(", "class_num", ")", "\n", "f", "=", "ConfM", ".", "generateM", "\n", "pool", "=", "Pool", "(", ")", "\n", "m_list", "=", "pool", ".", "map", "(", "f", ",", "data_list", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "for", "m", "in", "m_list", ":", "\n", "        ", "ConfM", ".", "addM", "(", "m", ")", "\n", "\n", "", "aveJ", ",", "j_list", ",", "M", "=", "ConfM", ".", "jaccard", "(", ")", "\n", "\n", "classes", "=", "np", ".", "array", "(", "(", "\"road\"", ",", "\"sidewalk\"", ",", "\n", "\"building\"", ",", "\"wall\"", ",", "\"fence\"", ",", "\"pole\"", ",", "\n", "\"traffic_light\"", ",", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\n", "\"terrain\"", ",", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\n", "\"car\"", ",", "\"truck\"", ",", "\"bus\"", ",", "\n", "\"train\"", ",", "\"motorcycle\"", ",", "\"bicycle\"", ")", ")", "\n", "\n", "\n", "for", "i", ",", "iou", "in", "enumerate", "(", "j_list", ")", ":", "\n", "        ", "print", "(", "'class {:2d} {:12} IU {:.2f}'", ".", "format", "(", "i", ",", "classes", "[", "i", "]", ",", "100", "*", "j_list", "[", "i", "]", ")", ")", "\n", "\n", "", "print", "(", "'meanIOU: '", "+", "str", "(", "aveJ", ")", "+", "'\\n'", ")", "\n", "if", "save_path", ":", "\n", "        ", "with", "open", "(", "save_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "iou", "in", "enumerate", "(", "j_list", ")", ":", "\n", "                ", "f", ".", "write", "(", "'class {:2d} {:12} IU {:.2f}'", ".", "format", "(", "i", ",", "classes", "[", "i", "]", ",", "100", "*", "j_list", "[", "i", "]", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "write", "(", "'meanIOU: '", "+", "str", "(", "aveJ", ")", "+", "'\\n'", ")", "\n", "", "", "return", "aveJ", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.evaluate": [[134, 197], ["print", "evaluateUDA.VOCColorize", "enumerate", "evaluateUDA.get_iou", "numpy.mean", "data.get_loader", "data.get_data_path", "data.get_loader.", "torch.utils.data.DataLoader", "torch.Upsample", "os.path.join", "data.get_loader", "data.get_data_path", "data.get_loader.", "torch.utils.data.DataLoader", "torch.Upsample", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "nn.Upsample.", "torch.autograd.Variable().cuda", "utils.loss.CrossEntropy2d().cuda", "CrossEntropy2d().cuda.", "total_loss.append", "np.asarray.cpu().data[].numpy", "np.asarray.transpose", "numpy.asarray", "data_list.append", "print", "str", "torch.autograd.Variable().cuda", "criterion.item", "numpy.asarray", "numpy.argmax", "len", "torch.autograd.Variable", "utils.loss.CrossEntropy2d", "label[].numpy", "numpy.asarray", "np.asarray.flatten", "np.asarray.flatten", "torch.autograd.Variable", "label.long", "label[].numpy", "np.asarray.cpu"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.get_iou", "home.repos.pwc.inspect_result.vikolss_DACS.data.__init__.get_loader", "home.repos.pwc.inspect_result.vikolss_DACS.data.__init__.get_data_path", "home.repos.pwc.inspect_result.vikolss_DACS.data.__init__.get_loader", "home.repos.pwc.inspect_result.vikolss_DACS.data.__init__.get_data_path"], ["", "def", "evaluate", "(", "model", ",", "dataset", ",", "ignore_label", "=", "250", ",", "save_output_images", "=", "False", ",", "save_dir", "=", "None", ",", "input_size", "=", "(", "512", ",", "1024", ")", ")", ":", "\n", "\n", "    ", "if", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "num_classes", "=", "19", "\n", "data_loader", "=", "get_loader", "(", "'cityscapes'", ")", "\n", "data_path", "=", "get_data_path", "(", "'cityscapes'", ")", "\n", "test_dataset", "=", "data_loader", "(", "data_path", ",", "img_size", "=", "input_size", ",", "img_mean", "=", "IMG_MEAN", ",", "is_transform", "=", "True", ",", "split", "=", "'val'", ")", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "input_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "ignore_label", "=", "250", "\n", "\n", "", "elif", "dataset", "==", "'gta'", ":", "\n", "        ", "num_classes", "=", "19", "\n", "data_loader", "=", "get_loader", "(", "'gta'", ")", "\n", "data_path", "=", "get_data_path", "(", "'gta'", ")", "\n", "test_dataset", "=", "data_loader", "(", "data_path", ",", "list_path", "=", "'./data/gta5_list/train.txt'", ",", "img_size", "=", "(", "1280", ",", "720", ")", ",", "mean", "=", "IMG_MEAN", ")", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "720", ",", "1280", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "ignore_label", "=", "255", "\n", "\n", "", "print", "(", "'Evaluating, found '", "+", "str", "(", "len", "(", "testloader", ")", ")", "+", "' images.'", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "colorize", "=", "VOCColorize", "(", ")", "\n", "\n", "total_loss", "=", "[", "]", "\n", "\n", "for", "index", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "image", ",", "label", ",", "size", ",", "name", ",", "_", "=", "batch", "\n", "size", "=", "size", "[", "0", "]", "\n", "#if index > 500:", "\n", "#    break", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "Variable", "(", "image", ")", ".", "cuda", "(", ")", ")", "\n", "output", "=", "interp", "(", "output", ")", "\n", "\n", "label_cuda", "=", "Variable", "(", "label", ".", "long", "(", ")", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "CrossEntropy2d", "(", "ignore_label", "=", "ignore_label", ")", ".", "cuda", "(", ")", "# Ignore label ??", "\n", "loss", "=", "criterion", "(", "output", ",", "label_cuda", ")", "\n", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "output", "=", "output", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "if", "dataset", "==", "'cityscapes'", ":", "\n", "                ", "gt", "=", "np", ".", "asarray", "(", "label", "[", "0", "]", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "elif", "dataset", "==", "'gta'", ":", "\n", "                ", "gt", "=", "np", ".", "asarray", "(", "label", "[", "0", "]", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "data_list", ".", "append", "(", "[", "gt", ".", "flatten", "(", ")", ",", "output", ".", "flatten", "(", ")", "]", ")", "\n", "\n", "", "if", "(", "index", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'%d processed'", "%", "(", "index", "+", "1", ")", ")", "\n", "\n", "", "", "if", "save_dir", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'result.txt'", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "None", "\n", "", "mIoU", "=", "get_iou", "(", "data_list", ",", "num_classes", ",", "dataset", ",", "filename", ")", "\n", "loss", "=", "np", ".", "mean", "(", "total_loss", ")", "\n", "return", "mIoU", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.main": [[198, 220], ["model.deeplabv2.Res_Deeplab", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel.eval", "evaluateUDA.evaluate", "os.path.exists", "os.makedirs", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.load_state_dict"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.Res_Deeplab", "home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.evaluate"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "gpu0", "=", "args", ".", "gpu", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "#model = torch.nn.DataParallel(Res_Deeplab(num_classes=num_classes), device_ids=args.gpu)", "\n", "", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "model_path", ")", "\n", "try", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "", "except", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "args", ".", "gpu", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "\n", "", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "evaluate", "(", "model", ",", "dataset", ",", "ignore_label", "=", "ignore_label", ",", "save_output_images", "=", "args", ".", "save_output_images", ",", "save_dir", "=", "save_dir", ",", "input_size", "=", "input_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.DeNormalize.__init__": [[143, 145], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.DeNormalize.__call__": [[146, 153], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "trainUDA.DeNormalize.mean.copy", "torch.from_numpy.unsqueeze().unsqueeze", "torch.from_numpy.unsqueeze().unsqueeze", "torch.from_numpy.unsqueeze().unsqueeze", "torch.from_numpy.unsqueeze().unsqueeze", "torch.from_numpy.unsqueeze().unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze", "torch.from_numpy.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "IMG_MEAN", "=", "torch", ".", "from_numpy", "(", "self", ".", "mean", ".", "copy", "(", ")", ")", "\n", "IMG_MEAN", ",", "_", "=", "torch", ".", "broadcast_tensors", "(", "IMG_MEAN", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "tensor", ")", "\n", "tensor", "=", "tensor", "+", "IMG_MEAN", "\n", "tensor", "=", "(", "tensor", "/", "255", ")", ".", "float", "(", ")", "\n", "tensor", "=", "torch", ".", "flip", "(", "tensor", ",", "(", "0", ",", ")", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.Learning_Rate_Object.__init__": [[155, 157], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "learning_rate", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.get_arguments": [[50, 68], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpus\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"choose number of gpu devices to use (default: 1)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--config\"", ",", "type", "=", "str", ",", "default", "=", "'config.json'", ",", "\n", "help", "=", "'Path to the config file (default: config.json)'", ")", "\n", "parser", ".", "add_argument", "(", "\"-r\"", ",", "\"--resume\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Path to the .pth file to resume from (default: None)'", ")", "\n", "parser", ".", "add_argument", "(", "\"-n\"", ",", "\"--name\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "required", "=", "True", ",", "\n", "help", "=", "'Name of the run (default: None)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-images\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Include to save images (default: None)'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.loss_calc": [[71, 79], ["torch.autograd.Variable().cuda", "CrossEntropy2d().cuda.", "len", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "utils.loss.CrossEntropy2d().cuda", "torch.autograd.Variable", "Variable().cuda.long", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.loss.CrossEntropy2d", "utils.loss.CrossEntropy2d"], "function", ["None"], ["", "def", "loss_calc", "(", "pred", ",", "label", ")", ":", "\n", "    ", "label", "=", "Variable", "(", "label", ".", "long", "(", ")", ")", ".", "cuda", "(", ")", "\n", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "DataParallel", "(", "CrossEntropy2d", "(", "ignore_label", "=", "ignore_label", ")", ",", "device_ids", "=", "gpus", ")", ".", "cuda", "(", ")", "# Ignore label ??", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "CrossEntropy2d", "(", "ignore_label", "=", "ignore_label", ")", ".", "cuda", "(", ")", "# Ignore label ??", "\n", "\n", "", "return", "criterion", "(", "pred", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.lr_poly": [[80, 82], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.adjust_learning_rate": [[83, 88], ["trainUDA.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "learning_rate", ",", "i_iter", ",", "num_iterations", ",", "lr_power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.create_ema_model": [[89, 110], ["model.deeplabv2.Res_Deeplab", "torch.nn.DataParallel.parameters", "list", "list", "len", "range", "param.detach_", "model.parameters", "torch.nn.DataParallel.parameters", "mp[].data[].clone", "len", "utils.sync_batchnorm.convert_model", "utils.sync_batchnorm.DataParallelWithCallback", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.Res_Deeplab", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.convert_model"], ["", "", "def", "create_ema_model", "(", "model", ")", ":", "\n", "#ema_model = getattr(models, config['arch']['type'])(self.train_loader.dataset.num_classes, **config['arch']['args']).to(self.device)", "\n", "    ", "ema_model", "=", "Res_Deeplab", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "for", "param", "in", "ema_model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "detach_", "(", ")", "\n", "", "mp", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "mcp", "=", "list", "(", "ema_model", ".", "parameters", "(", ")", ")", "\n", "n", "=", "len", "(", "mp", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "mcp", "[", "i", "]", ".", "data", "[", ":", "]", "=", "mp", "[", "i", "]", ".", "data", "[", ":", "]", ".", "clone", "(", ")", "\n", "#_, availble_gpus = self._get_available_devices(self.config['n_gpu'])", "\n", "#ema_model = torch.nn.DataParallel(ema_model, device_ids=availble_gpus)", "\n", "", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "#return torch.nn.DataParallel(ema_model, device_ids=gpus)", "\n", "        ", "if", "use_sync_batchnorm", ":", "\n", "            ", "ema_model", "=", "convert_model", "(", "ema_model", ")", "\n", "ema_model", "=", "DataParallelWithCallback", "(", "ema_model", ",", "device_ids", "=", "gpus", ")", "\n", "", "else", ":", "\n", "            ", "ema_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "ema_model", ",", "device_ids", "=", "gpus", ")", "\n", "", "", "return", "ema_model", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.update_ema_variables": [[111, 123], ["min", "len", "zip", "zip", "ema_model.module.parameters", "model.module.parameters", "ema_model.parameters", "model.parameters"], "function", ["None"], ["", "def", "update_ema_variables", "(", "ema_model", ",", "model", ",", "alpha_teacher", ",", "iteration", ")", ":", "\n", "# Use the \"true\" average until the exponential average is more correct", "\n", "    ", "alpha_teacher", "=", "min", "(", "1", "-", "1", "/", "(", "iteration", "+", "1", ")", ",", "alpha_teacher", ")", "\n", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "        ", "for", "ema_param", ",", "param", "in", "zip", "(", "ema_model", ".", "module", ".", "parameters", "(", ")", ",", "model", ".", "module", ".", "parameters", "(", ")", ")", ":", "\n", "#ema_param.data.mul_(alpha).add_(1 - alpha, param.data)", "\n", "            ", "ema_param", ".", "data", "[", ":", "]", "=", "alpha_teacher", "*", "ema_param", "[", ":", "]", ".", "data", "[", ":", "]", "+", "(", "1", "-", "alpha_teacher", ")", "*", "param", "[", ":", "]", ".", "data", "[", ":", "]", "\n", "", "", "else", ":", "\n", "        ", "for", "ema_param", ",", "param", "in", "zip", "(", "ema_model", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "#ema_param.data.mul_(alpha).add_(1 - alpha, param.data)", "\n", "            ", "ema_param", ".", "data", "[", ":", "]", "=", "alpha_teacher", "*", "ema_param", "[", ":", "]", ".", "data", "[", ":", "]", "+", "(", "1", "-", "alpha_teacher", ")", "*", "param", "[", ":", "]", ".", "data", "[", ":", "]", "\n", "", "", "return", "ema_model", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.strongTransform": [[124, 131], ["utils.transformsgpu.oneMix", "utils.transformsgpu.colorJitter", "utils.transformsgpu.gaussian_blur", "utils.transformsgpu.flip", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "IMG_MEAN.copy"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.oneMix", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.colorJitter", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.gaussian_blur", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip"], ["", "def", "strongTransform", "(", "parameters", ",", "data", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "    ", "assert", "(", "(", "data", "is", "not", "None", ")", "or", "(", "target", "is", "not", "None", ")", ")", "\n", "data", ",", "target", "=", "transformsgpu", ".", "oneMix", "(", "mask", "=", "parameters", "[", "\"Mix\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ")", "\n", "data", ",", "target", "=", "transformsgpu", ".", "colorJitter", "(", "colorJitter", "=", "parameters", "[", "\"ColorJitter\"", "]", ",", "img_mean", "=", "torch", ".", "from_numpy", "(", "IMG_MEAN", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", ",", "data", "=", "data", ",", "target", "=", "target", ")", "\n", "data", ",", "target", "=", "transformsgpu", ".", "gaussian_blur", "(", "blur", "=", "parameters", "[", "\"GaussianBlur\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ")", "\n", "data", ",", "target", "=", "transformsgpu", ".", "flip", "(", "flip", "=", "parameters", "[", "\"flip\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ")", "\n", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.weakTransform": [[132, 135], ["utils.transformsgpu.flip"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip"], ["", "def", "weakTransform", "(", "parameters", ",", "data", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "    ", "data", ",", "target", "=", "transformsgpu", ".", "flip", "(", "flip", "=", "parameters", "[", "\"flip\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ")", "\n", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.getWeakInverseTransformParameters": [[136, 138], ["None"], "function", ["None"], ["", "def", "getWeakInverseTransformParameters", "(", "parameters", ")", ":", "\n", "    ", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.getStrongInverseTransformParameters": [[139, 141], ["None"], "function", ["None"], ["", "def", "getStrongInverseTransformParameters", "(", "parameters", ")", ":", "\n", "    ", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.save_image": [[158, 173], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torchvision.transforms.Compose", "transforms.Compose.", "restore_transform.save", "restore_transform.numpy", "utils.helpers.colorize_mask", "utils.helpers.colorize_mask.save", "os.path.join", "os.path.join", "trainUDA.DeNormalize", "torchvision.transforms.ToPILImage", "str", "str", "utils.palette.CityScpates_palette", "utils.palette.CityScpates_palette", "utils.palette.CityScpates_palette", "utils.palette.CityScpates_palette"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.colorize_mask"], ["", "", "def", "save_image", "(", "image", ",", "epoch", ",", "id", ",", "palette", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "image", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "            ", "restore_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "DeNormalize", "(", "IMG_MEAN", ")", ",", "\n", "transforms", ".", "ToPILImage", "(", ")", "]", ")", "\n", "\n", "\n", "image", "=", "restore_transform", "(", "image", ")", "\n", "#image = PIL.Image.fromarray(np.array(image)[:, :, ::-1])  # BGR->RGB", "\n", "image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "'../visualiseImages/'", ",", "str", "(", "epoch", ")", "+", "id", "+", "'.png'", ")", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "image", ".", "numpy", "(", ")", "\n", "colorized_mask", "=", "colorize_mask", "(", "mask", ",", "palette", ")", "\n", "colorized_mask", ".", "save", "(", "os", ".", "path", ".", "join", "(", "'../visualiseImages'", ",", "str", "(", "epoch", ")", "+", "id", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA._save_checkpoint": [[174, 202], ["optimizer.state_dict", "len", "model.module.state_dict", "model.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "os.path.join", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "ema_model.module.state_dict", "ema_model.state_dict", "os.remove", "os.path.join"], "function", ["None"], ["", "", "", "def", "_save_checkpoint", "(", "iteration", ",", "model", ",", "optimizer", ",", "config", ",", "ema_model", ",", "save_best", "=", "False", ",", "overwrite", "=", "True", ")", ":", "\n", "    ", "checkpoint", "=", "{", "\n", "'iteration'", ":", "iteration", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'config'", ":", "config", ",", "\n", "}", "\n", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "        ", "checkpoint", "[", "'model'", "]", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "if", "train_unlabeled", ":", "\n", "            ", "checkpoint", "[", "'ema_model'", "]", "=", "ema_model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "checkpoint", "[", "'model'", "]", "=", "model", ".", "state_dict", "(", ")", "\n", "if", "train_unlabeled", ":", "\n", "            ", "checkpoint", "[", "'ema_model'", "]", "=", "ema_model", ".", "state_dict", "(", ")", "\n", "\n", "", "", "if", "save_best", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'best_model.pth'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "filename", ")", "\n", "print", "(", "\"Saving current best model: best_model.pth\"", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'checkpoint-iter{iteration}.pth'", ")", "\n", "print", "(", "f'\\nSaving a checkpoint: {filename} ...'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "filename", ")", "\n", "if", "overwrite", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'checkpoint-iter{iteration - save_checkpoint_every}.pth'", ")", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA._resume_checkpoint": [[203, 225], ["print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "optimizer.load_state_dict", "len", "model.module.load_state_dict", "model.load_state_dict", "str", "len", "ema_model.module.load_state_dict", "ema_model.load_state_dict"], "function", ["None"], ["", "", "", "", "def", "_resume_checkpoint", "(", "resume_path", ",", "model", ",", "optimizer", ",", "ema_model", ")", ":", "\n", "    ", "print", "(", "f'Loading checkpoint : {resume_path}'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ")", "\n", "\n", "# Load last run info, the model params, the optimizer and the loggers", "\n", "iteration", "=", "checkpoint", "[", "'iteration'", "]", "+", "1", "\n", "print", "(", "'Starting at iteration: '", "+", "str", "(", "iteration", ")", ")", "\n", "\n", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "        ", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "\n", "", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "if", "train_unlabeled", ":", "\n", "        ", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "            ", "ema_model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'ema_model'", "]", ")", "\n", "", "else", ":", "\n", "            ", "ema_model", ".", "load_state_dict", "(", "checkpoint", "[", "'ema_model'", "]", ")", "\n", "\n", "", "", "return", "iteration", ",", "model", ",", "optimizer", ",", "ema_model", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.main": [[226, 578], ["print", "model.deeplabv2.Res_Deeplab", "torch.nn.DataParallel.state_dict().copy", "model.state_dict().copy.items", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.train", "torch.nn.DataParallel.cuda", "len", "print", "torch.utils.data.DataLoader", "iter", "print", "trainUDA.Learning_Rate_Object", "optim.Adam.zero_grad", "torch.Upsample", "range", "trainUDA._save_checkpoint", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.train", "timeit.default_timer", "print", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "trainUDA.create_ema_model", "update_ema_variables.train", "update_ema_variables.cuda", "len", "data.get_loader", "data.get_data_path", "data.get_loader.", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "print", "numpy.random.seed", "torch.utils.data.DataLoader", "iter", "data.get_loader", "data.get_data_path", "data.get_loader.", "len", "trainUDA._resume_checkpoint", "os.path.exists", "os.makedirs", "open", "json.dump", "torch.nn.DataParallel.train", "optim.Adam.zero_grad", "images.cuda.cuda", "labels.cuda().long.cuda().long", "nn.Upsample.", "trainUDA.loss_calc", "loss.mean.backward", "optim.Adam.step", "print", "evaluateUDA.evaluate", "trainUDA._save_checkpoint", "tensorboard.SummaryWriter.add_scalar", "tensorboard.SummaryWriter.add_scalar", "len", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "utils.loss.MSELoss2d().cuda", "torch.nn.DataParallel.state_dict", "new_params[].copy_", "utils.sync_batchnorm.convert_model", "utils.sync_batchnorm.DataParallelWithCallback", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "data.augmentations.Compose", "data.augmentations.Compose", "len", "torch.SGD", "torch.SGD", "trainUDA.adjust_learning_rate", "next", "torch.nn.DataParallel.", "images_remain.cuda.cuda", "trainUDA.weakTransform", "nn.Upsample.", "trainUDA.weakTransform", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "trainUDA.strongTransform", "trainUDA.strongTransform", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nn.Upsample.", "trainUDA.strongTransform", "trainUDA.strongTransform", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "trainUDA.strongTransform", "trainUDA.strongTransform", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "len", "loss.mean.mean", "loss_calc.mean().item", "loss_calc.item", "trainUDA.update_ema_variables", "accumulated_loss_l.append", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.train", "trainUDA.save_image", "trainUDA.save_image", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "trainUDA.save_image", "trainUDA.save_image", "len", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted().cuda", "param.size", "saved_state_dict[].size", "torch.nn.DataParallel.module.optim_parameters", "torch.nn.DataParallel.optim_parameters", "len", "torch.Adam", "torch.Adam", "next", "print", "iter", "next", "labels.cuda().long.cuda", "next", "update_ema_variables.", "trainUDA.getWeakInverseTransformParameters", "interp.detach", "range", "random.randint", "random.uniform", "random.uniform", "torch.nn.DataParallel.", "L_u.mean().item", "L_u.item", "trainUDA._save_checkpoint", "trainUDA._save_checkpoint", "locals", "torch.utils.tensorboard.SummaryWriter", "accumulated_loss_u.append", "tensorboard.SummaryWriter.add_scalar", "evaluateUDA.evaluate", "trainUDA._save_checkpoint", "tensorboard.SummaryWriter.add_scalar", "tensorboard.SummaryWriter.add_scalar", "inputs_u_s[].cpu", "inputs_u_s[].cpu", "pred_u_s[].cpu", "pred_u_s[].cpu", "str", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.loss.MSELoss2d", "data.augmentations.RandomCrop_city", "data.augmentations.RandomCrop_gta", "torch.nn.DataParallel.module.optim_parameters", "torch.nn.DataParallel.optim_parameters", "next", "iter", "next", "interp.detach", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "classes[].cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "numpy.size", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "max_probs.ge().float().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "numpy.size", "CrossEntropyLoss2dPixelWiseWeighted().cuda.", "loss_calc.mean", "len", "numpy.mean", "tensorboard.SummaryWriter.add_scalar", "utils.loss.MSELoss2d", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted", "utils.transformmasks.generate_class_mask().unsqueeze().cuda", "utils.transformmasks.generate_class_mask().unsqueeze().cuda", "numpy.array", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "numpy.array", "CrossEntropyLoss2dPixelWiseWeighted().cuda.", "L_u.mean", "numpy.mean", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted", "images[].unsqueeze", "images_remain[].unsqueeze", "images[].unsqueeze", "images_remain[].unsqueeze", "labels[].unsqueeze", "targets_u_w[].unsqueeze", "labels[].unsqueeze", "targets_u_w[].unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat().long.cpu", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "max_probs.ge().float", "onesWeights[].unsqueeze", "pixelWiseWeight[].unsqueeze", "onesWeights[].unsqueeze", "pixelWiseWeight[].unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat().long.cpu", "utils.transformmasks.generate_class_mask().unsqueeze", "utils.transformmasks.generate_class_mask().unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "max_probs.ge().long", "max_probs.ge", "max_probs.ge().long", "utils.transformmasks.generate_class_mask", "utils.transformmasks.generate_class_mask", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "max_probs.ge", "max_probs.ge", "numpy.random.choice", "int"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.Res_Deeplab", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA._save_checkpoint", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.create_ema_model", "home.repos.pwc.inspect_result.vikolss_DACS.data.__init__.get_loader", "home.repos.pwc.inspect_result.vikolss_DACS.data.__init__.get_data_path", "home.repos.pwc.inspect_result.vikolss_DACS.data.__init__.get_loader", "home.repos.pwc.inspect_result.vikolss_DACS.data.__init__.get_data_path", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA._resume_checkpoint", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.loss_calc", "home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.evaluate", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA._save_checkpoint", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.vikolss_DACS.data.city_utils.adjust_learning_rate", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.weakTransform", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.weakTransform", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.strongTransform", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.strongTransform", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.strongTransform", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.strongTransform", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.strongTransform", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.strongTransform", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.update_ema_variables", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.save_image", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.save_image", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.save_image", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.save_image", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.optim_parameters", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.optim_parameters", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA.getWeakInverseTransformParameters", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA._save_checkpoint", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA._save_checkpoint", "home.repos.pwc.inspect_result.vikolss_DACS.None.evaluateUDA.evaluate", "home.repos.pwc.inspect_result.vikolss_DACS.None.trainUDA._save_checkpoint", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.optim_parameters", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.optim_parameters", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformmasks.generate_class_mask", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformmasks.generate_class_mask"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "config", ")", "\n", "\n", "best_mIoU", "=", "0", "\n", "\n", "if", "consistency_loss", "==", "'MSE'", ":", "\n", "        ", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "            ", "unlabeled_loss", "=", "torch", ".", "nn", ".", "DataParallel", "(", "MSELoss2d", "(", ")", ",", "device_ids", "=", "gpus", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "unlabeled_loss", "=", "MSELoss2d", "(", ")", ".", "cuda", "(", ")", "\n", "", "", "elif", "consistency_loss", "==", "'CE'", ":", "\n", "        ", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "            ", "unlabeled_loss", "=", "torch", ".", "nn", ".", "DataParallel", "(", "CrossEntropyLoss2dPixelWiseWeighted", "(", "ignore_index", "=", "ignore_label", ")", ",", "device_ids", "=", "gpus", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "unlabeled_loss", "=", "CrossEntropyLoss2dPixelWiseWeighted", "(", "ignore_index", "=", "ignore_label", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# create network", "\n", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "# load pretrained parameters", "\n", "#saved_state_dict = torch.load(args.restore_from)", "\n", "# load pretrained parameters", "\n", "if", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "restore_from", ")", "\n", "\n", "# Copy loaded parameters to model", "\n", "", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "name", ",", "param", "in", "new_params", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "in", "saved_state_dict", "and", "param", ".", "size", "(", ")", "==", "saved_state_dict", "[", "name", "]", ".", "size", "(", ")", ":", "\n", "            ", "new_params", "[", "name", "]", ".", "copy_", "(", "saved_state_dict", "[", "name", "]", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "\n", "# init ema-model", "\n", "if", "train_unlabeled", ":", "\n", "        ", "ema_model", "=", "create_ema_model", "(", "model", ")", "\n", "ema_model", ".", "train", "(", ")", "\n", "ema_model", "=", "ema_model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "ema_model", "=", "None", "\n", "\n", "", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "        ", "if", "use_sync_batchnorm", ":", "\n", "            ", "model", "=", "convert_model", "(", "model", ")", "\n", "model", "=", "DataParallelWithCallback", "(", "model", ",", "device_ids", "=", "gpus", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpus", ")", "\n", "", "", "model", ".", "train", "(", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "if", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "data_loader", "=", "get_loader", "(", "'cityscapes'", ")", "\n", "data_path", "=", "get_data_path", "(", "'cityscapes'", ")", "\n", "if", "random_crop", ":", "\n", "            ", "data_aug", "=", "Compose", "(", "[", "RandomCrop_city", "(", "input_size", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "data_aug", "=", "None", "\n", "\n", "#data_aug = Compose([RandomHorizontallyFlip()])", "\n", "", "train_dataset", "=", "data_loader", "(", "data_path", ",", "is_transform", "=", "True", ",", "augmentations", "=", "data_aug", ",", "img_size", "=", "input_size", ",", "img_mean", "=", "IMG_MEAN", ")", "\n", "\n", "", "train_dataset_size", "=", "len", "(", "train_dataset", ")", "\n", "print", "(", "'dataset size: '", ",", "train_dataset_size", ")", "\n", "\n", "if", "labeled_samples", "is", "None", ":", "\n", "        ", "trainloader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "trainloader_remain", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "\n", "", "else", ":", "\n", "        ", "partial_size", "=", "labeled_samples", "\n", "print", "(", "'Training on number of samples:'", ",", "partial_size", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "trainloader_remain", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "\n", "\n", "#New loader for Domain transfer", "\n", "", "if", "True", ":", "\n", "        ", "data_loader", "=", "get_loader", "(", "'gta'", ")", "\n", "data_path", "=", "get_data_path", "(", "'gta'", ")", "\n", "if", "random_crop", ":", "\n", "            ", "data_aug", "=", "Compose", "(", "[", "RandomCrop_gta", "(", "input_size", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "data_aug", "=", "None", "\n", "\n", "#data_aug = Compose([RandomHorizontallyFlip()])", "\n", "", "train_dataset", "=", "data_loader", "(", "data_path", ",", "list_path", "=", "'./data/gta5_list/train.txt'", ",", "augmentations", "=", "data_aug", ",", "img_size", "=", "(", "1280", ",", "720", ")", ",", "mean", "=", "IMG_MEAN", ")", "\n", "\n", "", "trainloader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "trainloader_iter", "=", "iter", "(", "trainloader", ")", "\n", "print", "(", "'gta size:'", ",", "len", "(", "trainloader", ")", ")", "\n", "\n", "#Load new data for domain_transfer", "\n", "\n", "# optimizer for segmentation network", "\n", "learning_rate_object", "=", "Learning_Rate_Object", "(", "config", "[", "'training'", "]", "[", "'learning_rate'", "]", ")", "\n", "\n", "if", "optimizer_type", "==", "'SGD'", ":", "\n", "        ", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "module", ".", "optim_parameters", "(", "learning_rate_object", ")", ",", "\n", "lr", "=", "learning_rate", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "learning_rate_object", ")", ",", "\n", "lr", "=", "learning_rate", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "", "elif", "optimizer_type", "==", "'Adam'", ":", "\n", "        ", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "module", ".", "optim_parameters", "(", "learning_rate_object", ")", ",", "\n", "lr", "=", "learning_rate", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "weight_decay", ")", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "optim_parameters", "(", "learning_rate_object", ")", ",", "\n", "lr", "=", "learning_rate", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size", "[", "0", "]", ",", "input_size", "[", "1", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "start_iteration", "=", "0", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "start_iteration", ",", "model", ",", "optimizer", ",", "ema_model", "=", "_resume_checkpoint", "(", "args", ".", "resume", ",", "model", ",", "optimizer", ",", "ema_model", ")", "\n", "\n", "", "accumulated_loss_l", "=", "[", "]", "\n", "accumulated_loss_u", "=", "[", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "with", "open", "(", "checkpoint_dir", "+", "'/config.json'", ",", "'w'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "config", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "epochs_since_start", "=", "0", "\n", "for", "i_iter", "in", "range", "(", "start_iteration", ",", "num_iterations", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "loss_u_value", "=", "0", "\n", "loss_l_value", "=", "0", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "lr_schedule", ":", "\n", "            ", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "# training loss for labeled data only", "\n", "", "try", ":", "\n", "            ", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "if", "batch", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "                ", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "", "", "except", ":", "\n", "            ", "epochs_since_start", "=", "epochs_since_start", "+", "1", "\n", "print", "(", "'Epochs since start: '", ",", "epochs_since_start", ")", "\n", "trainloader_iter", "=", "iter", "(", "trainloader", ")", "\n", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "\n", "#if random_flip:", "\n", "#    weak_parameters={\"flip\":random.randint(0,1)}", "\n", "#else:", "\n", "", "weak_parameters", "=", "{", "\"flip\"", ":", "0", "}", "\n", "\n", "\n", "images", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "\n", "#images, labels = weakTransform(weak_parameters, data = images, target = labels)", "\n", "\n", "pred", "=", "interp", "(", "model", "(", "images", ")", ")", "\n", "L_l", "=", "loss_calc", "(", "pred", ",", "labels", ")", "# Cross entropy loss for labeled data", "\n", "#L_l = torch.Tensor([0.0]).cuda()", "\n", "\n", "if", "train_unlabeled", ":", "\n", "            ", "try", ":", "\n", "                ", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "if", "batch_remain", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "                    ", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "", "", "except", ":", "\n", "                ", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "\n", "", "images_remain", ",", "_", ",", "_", ",", "_", ",", "_", "=", "batch_remain", "\n", "images_remain", "=", "images_remain", ".", "cuda", "(", ")", "\n", "inputs_u_w", ",", "_", "=", "weakTransform", "(", "weak_parameters", ",", "data", "=", "images_remain", ")", "\n", "#inputs_u_w = inputs_u_w.clone()", "\n", "logits_u_w", "=", "interp", "(", "ema_model", "(", "inputs_u_w", ")", ")", "\n", "logits_u_w", ",", "_", "=", "weakTransform", "(", "getWeakInverseTransformParameters", "(", "weak_parameters", ")", ",", "data", "=", "logits_u_w", ".", "detach", "(", ")", ")", "\n", "\n", "pseudo_label", "=", "torch", ".", "softmax", "(", "logits_u_w", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "max_probs", ",", "targets_u_w", "=", "torch", ".", "max", "(", "pseudo_label", ",", "dim", "=", "1", ")", "\n", "\n", "if", "mix_mask", "==", "\"class\"", ":", "\n", "                ", "for", "image_i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "classes", "=", "torch", ".", "unique", "(", "labels", "[", "image_i", "]", ")", "\n", "#classes=classes[classes!=ignore_label]", "\n", "nclasses", "=", "classes", ".", "shape", "[", "0", "]", "\n", "#if nclasses > 0:", "\n", "classes", "=", "(", "classes", "[", "torch", ".", "Tensor", "(", "np", ".", "random", ".", "choice", "(", "nclasses", ",", "int", "(", "(", "nclasses", "+", "nclasses", "%", "2", ")", "/", "2", ")", ",", "replace", "=", "False", ")", ")", ".", "long", "(", ")", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "image_i", "==", "0", ":", "\n", "                        ", "MixMask0", "=", "transformmasks", ".", "generate_class_mask", "(", "labels", "[", "image_i", "]", ",", "classes", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                        ", "MixMask1", "=", "transformmasks", ".", "generate_class_mask", "(", "labels", "[", "image_i", "]", ",", "classes", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "", "elif", "mix_mask", "==", "None", ":", "\n", "                ", "MixMask", "=", "torch", ".", "ones", "(", "(", "inputs_u_w", ".", "shape", ")", ")", "\n", "\n", "", "strong_parameters", "=", "{", "\"Mix\"", ":", "MixMask0", "}", "\n", "if", "random_flip", ":", "\n", "                ", "strong_parameters", "[", "\"flip\"", "]", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "strong_parameters", "[", "\"flip\"", "]", "=", "0", "\n", "", "if", "color_jitter", ":", "\n", "                ", "strong_parameters", "[", "\"ColorJitter\"", "]", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "strong_parameters", "[", "\"ColorJitter\"", "]", "=", "0", "\n", "", "if", "gaussian_blur", ":", "\n", "                ", "strong_parameters", "[", "\"GaussianBlur\"", "]", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "strong_parameters", "[", "\"GaussianBlur\"", "]", "=", "0", "\n", "\n", "", "inputs_u_s0", ",", "_", "=", "strongTransform", "(", "strong_parameters", ",", "data", "=", "torch", ".", "cat", "(", "(", "images", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ",", "images_remain", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", ")", "\n", "strong_parameters", "[", "\"Mix\"", "]", "=", "MixMask1", "\n", "inputs_u_s1", ",", "_", "=", "strongTransform", "(", "strong_parameters", ",", "data", "=", "torch", ".", "cat", "(", "(", "images", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", ",", "images_remain", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", ")", "\n", "inputs_u_s", "=", "torch", ".", "cat", "(", "(", "inputs_u_s0", ",", "inputs_u_s1", ")", ")", "\n", "logits_u_s", "=", "interp", "(", "model", "(", "inputs_u_s", ")", ")", "\n", "\n", "strong_parameters", "[", "\"Mix\"", "]", "=", "MixMask0", "\n", "_", ",", "targets_u0", "=", "strongTransform", "(", "strong_parameters", ",", "target", "=", "torch", ".", "cat", "(", "(", "labels", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ",", "targets_u_w", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", ")", "\n", "strong_parameters", "[", "\"Mix\"", "]", "=", "MixMask1", "\n", "_", ",", "targets_u1", "=", "strongTransform", "(", "strong_parameters", ",", "target", "=", "torch", ".", "cat", "(", "(", "labels", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", ",", "targets_u_w", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", ")", "\n", "targets_u", "=", "torch", ".", "cat", "(", "(", "targets_u0", ",", "targets_u1", ")", ")", ".", "long", "(", ")", "\n", "\n", "if", "pixel_weight", "==", "\"threshold_uniform\"", ":", "\n", "                ", "unlabeled_weight", "=", "torch", ".", "sum", "(", "max_probs", ".", "ge", "(", "0.968", ")", ".", "long", "(", ")", "==", "1", ")", ".", "item", "(", ")", "/", "np", ".", "size", "(", "np", ".", "array", "(", "targets_u", ".", "cpu", "(", ")", ")", ")", "\n", "pixelWiseWeight", "=", "unlabeled_weight", "*", "torch", ".", "ones", "(", "max_probs", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "", "elif", "pixel_weight", "==", "\"threshold\"", ":", "\n", "                ", "pixelWiseWeight", "=", "max_probs", ".", "ge", "(", "0.968", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "pixel_weight", "==", "False", ":", "\n", "                ", "pixelWiseWeight", "=", "torch", ".", "ones", "(", "max_probs", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "\n", "", "onesWeights", "=", "torch", ".", "ones", "(", "(", "pixelWiseWeight", ".", "shape", ")", ")", ".", "cuda", "(", ")", "\n", "strong_parameters", "[", "\"Mix\"", "]", "=", "MixMask0", "\n", "_", ",", "pixelWiseWeight0", "=", "strongTransform", "(", "strong_parameters", ",", "target", "=", "torch", ".", "cat", "(", "(", "onesWeights", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ",", "pixelWiseWeight", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", ")", "\n", "strong_parameters", "[", "\"Mix\"", "]", "=", "MixMask1", "\n", "_", ",", "pixelWiseWeight1", "=", "strongTransform", "(", "strong_parameters", ",", "target", "=", "torch", ".", "cat", "(", "(", "onesWeights", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", ",", "pixelWiseWeight", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", ")", "\n", "pixelWiseWeight", "=", "torch", ".", "cat", "(", "(", "pixelWiseWeight0", ",", "pixelWiseWeight1", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "consistency_loss", "==", "'MSE'", ":", "\n", "                ", "unlabeled_weight", "=", "torch", ".", "sum", "(", "max_probs", ".", "ge", "(", "0.968", ")", ".", "long", "(", ")", "==", "1", ")", ".", "item", "(", ")", "/", "np", ".", "size", "(", "np", ".", "array", "(", "targets_u", ".", "cpu", "(", ")", ")", ")", "\n", "#pseudo_label = torch.cat((pseudo_label[1].unsqueeze(0),pseudo_label[0].unsqueeze(0)))", "\n", "L_u", "=", "consistency_weight", "*", "unlabeled_weight", "*", "unlabeled_loss", "(", "logits_u_s", ",", "pseudo_label", ")", "\n", "", "elif", "consistency_loss", "==", "'CE'", ":", "\n", "                ", "L_u", "=", "consistency_weight", "*", "unlabeled_loss", "(", "logits_u_s", ",", "targets_u", ",", "pixelWiseWeight", ")", "\n", "\n", "", "loss", "=", "L_l", "+", "L_u", "\n", "\n", "", "else", ":", "\n", "            ", "loss", "=", "L_l", "\n", "\n", "", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "#print('before mean = ',loss)", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "#print('after mean = ',loss)", "\n", "loss_l_value", "+=", "L_l", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "if", "train_unlabeled", ":", "\n", "                ", "loss_u_value", "+=", "L_u", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "loss_l_value", "+=", "L_l", ".", "item", "(", ")", "\n", "if", "train_unlabeled", ":", "\n", "                ", "loss_u_value", "+=", "L_u", ".", "item", "(", ")", "\n", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update Mean teacher network", "\n", "if", "ema_model", "is", "not", "None", ":", "\n", "            ", "alpha_teacher", "=", "0.99", "\n", "ema_model", "=", "update_ema_variables", "(", "ema_model", "=", "ema_model", ",", "model", "=", "model", ",", "alpha_teacher", "=", "alpha_teacher", ",", "iteration", "=", "i_iter", ")", "\n", "\n", "", "print", "(", "'iter = {0:6d}/{1:6d}, loss_l = {2:.3f}, loss_u = {3:.3f}'", ".", "format", "(", "i_iter", ",", "num_iterations", ",", "loss_l_value", ",", "loss_u_value", ")", ")", "\n", "\n", "if", "i_iter", "%", "save_checkpoint_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "if", "epochs_since_start", "*", "len", "(", "trainloader", ")", "<", "save_checkpoint_every", ":", "\n", "                ", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "ema_model", ",", "overwrite", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "ema_model", ")", "\n", "\n", "", "", "if", "config", "[", "'utils'", "]", "[", "'tensorboard'", "]", ":", "\n", "            ", "if", "'tensorboard_writer'", "not", "in", "locals", "(", ")", ":", "\n", "                ", "tensorboard_writer", "=", "tensorboard", ".", "SummaryWriter", "(", "log_dir", ",", "flush_secs", "=", "30", ")", "\n", "\n", "", "accumulated_loss_l", ".", "append", "(", "loss_l_value", ")", "\n", "if", "train_unlabeled", ":", "\n", "                ", "accumulated_loss_u", ".", "append", "(", "loss_u_value", ")", "\n", "", "if", "i_iter", "%", "log_per_iter", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "\n", "                ", "tensorboard_writer", ".", "add_scalar", "(", "'Training/Supervised loss'", ",", "np", ".", "mean", "(", "accumulated_loss_l", ")", ",", "i_iter", ")", "\n", "accumulated_loss_l", "=", "[", "]", "\n", "\n", "if", "train_unlabeled", ":", "\n", "                    ", "tensorboard_writer", ".", "add_scalar", "(", "'Training/Unsupervised loss'", ",", "np", ".", "mean", "(", "accumulated_loss_u", ")", ",", "i_iter", ")", "\n", "accumulated_loss_u", "=", "[", "]", "\n", "\n", "\n", "", "", "", "if", "i_iter", "%", "val_per_iter", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "if", "dataset", "==", "'cityscapes'", ":", "\n", "                ", "mIoU", ",", "eval_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "ignore_label", "=", "250", ",", "input_size", "=", "(", "512", ",", "1024", ")", ",", "save_dir", "=", "checkpoint_dir", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "if", "mIoU", ">", "best_mIoU", "and", "save_best_model", ":", "\n", "                ", "best_mIoU", "=", "mIoU", "\n", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "ema_model", ",", "save_best", "=", "True", ")", "\n", "\n", "", "if", "config", "[", "'utils'", "]", "[", "'tensorboard'", "]", ":", "\n", "                ", "tensorboard_writer", ".", "add_scalar", "(", "'Validation/mIoU'", ",", "mIoU", ",", "i_iter", ")", "\n", "tensorboard_writer", ".", "add_scalar", "(", "'Validation/Loss'", ",", "eval_loss", ",", "i_iter", ")", "\n", "\n", "", "", "if", "save_unlabeled_images", "and", "train_unlabeled", "and", "i_iter", "%", "save_checkpoint_every", "==", "0", ":", "\n", "# Saves two mixed images and the corresponding prediction", "\n", "            ", "save_image", "(", "inputs_u_s", "[", "0", "]", ".", "cpu", "(", ")", ",", "i_iter", ",", "'input1'", ",", "palette", ".", "CityScpates_palette", ")", "\n", "save_image", "(", "inputs_u_s", "[", "1", "]", ".", "cpu", "(", ")", ",", "i_iter", ",", "'input2'", ",", "palette", ".", "CityScpates_palette", ")", "\n", "_", ",", "pred_u_s", "=", "torch", ".", "max", "(", "logits_u_s", ",", "dim", "=", "1", ")", "\n", "save_image", "(", "pred_u_s", "[", "0", "]", ".", "cpu", "(", ")", ",", "i_iter", ",", "'pred1'", ",", "palette", ".", "CityScpates_palette", ")", "\n", "save_image", "(", "pred_u_s", "[", "1", "]", ".", "cpu", "(", ")", ",", "i_iter", ",", "'pred2'", ",", "palette", ".", "CityScpates_palette", ")", "\n", "\n", "", "", "_save_checkpoint", "(", "num_iterations", ",", "model", ",", "optimizer", ",", "config", ",", "ema_model", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "if", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "mIoU", ",", "val_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "ignore_label", "=", "250", ",", "input_size", "=", "(", "512", ",", "1024", ")", ",", "save_dir", "=", "checkpoint_dir", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "if", "mIoU", ">", "best_mIoU", "and", "save_best_model", ":", "\n", "        ", "best_mIoU", "=", "mIoU", "\n", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "ema_model", ",", "save_best", "=", "True", ")", "\n", "\n", "", "if", "config", "[", "'utils'", "]", "[", "'tensorboard'", "]", ":", "\n", "        ", "tensorboard_writer", ".", "add_scalar", "(", "'Validation/mIoU'", ",", "mIoU", ",", "i_iter", ")", "\n", "tensorboard_writer", ".", "add_scalar", "(", "'Validation/Loss'", ",", "val_loss", ",", "i_iter", ")", "\n", "\n", "\n", "", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "'Total time: '", "+", "str", "(", "end", "-", "start", ")", "+", "'seconds'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformmasks.generate_cutout_mask": [[8, 25], ["numpy.random.seed", "numpy.random.randint", "numpy.round", "numpy.random.randint", "numpy.random.randint", "int", "int", "numpy.ones", "np.ones.astype"], "function", ["None"], ["def", "generate_cutout_mask", "(", "img_size", ",", "seed", "=", "None", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "cutout_area", "=", "img_size", "[", "0", "]", "*", "img_size", "[", "1", "]", "/", "2", "\n", "\n", "w", "=", "np", ".", "random", ".", "randint", "(", "img_size", "[", "1", "]", "/", "2", ",", "img_size", "[", "1", "]", "+", "1", ")", "\n", "h", "=", "np", ".", "round", "(", "cutout_area", "/", "w", ")", "\n", "\n", "x_start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img_size", "[", "1", "]", "-", "w", "+", "1", ")", "\n", "y_start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img_size", "[", "0", "]", "-", "h", "+", "1", ")", "\n", "\n", "x_end", "=", "int", "(", "x_start", "+", "w", ")", "\n", "y_end", "=", "int", "(", "y_start", "+", "h", ")", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "img_size", ")", "\n", "mask", "[", "y_start", ":", "y_end", ",", "x_start", ":", "x_end", "]", "=", "0", "\n", "return", "mask", ".", "astype", "(", "float", ")", "\n", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformmasks.generate_cow_mask": [[36, 44], ["numpy.random.seed", "numpy.random.normal", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter.mean", "scipy.ndimage.filters.gaussian_filter.std", "scipy.special.erfinv"], "function", ["None"], ["def", "generate_cow_mask", "(", "img_size", ",", "sigma", ",", "p", ",", "seed", "=", "None", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "# Randomly draw sigma from log-uniform distribution", "\n", "N", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "img_size", ")", "# Generate noise image", "\n", "Ns", "=", "gaussian_filter", "(", "N", ",", "sigma", ")", "# Smooth with a Gaussian", "\n", "# Compute threshold", "\n", "t", "=", "erfinv", "(", "p", "*", "2", "-", "1", ")", "*", "(", "2", "**", "0.5", ")", "*", "Ns", ".", "std", "(", ")", "+", "Ns", ".", "mean", "(", ")", "\n", "return", "(", "Ns", ">", "t", ")", ".", "astype", "(", "float", ")", "# Apply threshold and return", "\n", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformmasks.generate_class_mask": [[56, 60], ["torch.broadcast_tensors", "pred.eq().sum", "pred.unsqueeze", "classes.unsqueeze().unsqueeze", "pred.eq", "classes.unsqueeze"], "function", ["None"], ["def", "generate_class_mask", "(", "pred", ",", "classes", ")", ":", "\n", "    ", "pred", ",", "classes", "=", "torch", ".", "broadcast_tensors", "(", "pred", ".", "unsqueeze", "(", "0", ")", ",", "classes", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ")", "\n", "N", "=", "pred", ".", "eq", "(", "classes", ")", ".", "sum", "(", "0", ")", "\n", "return", "N", "\n", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.colorJitter": [[7, 19], ["torch.broadcast_tensors", "torch.broadcast_tensors", "torch.Sequential", "nn.Sequential.", "img_mean.unsqueeze().unsqueeze().unsqueeze", "kornia.augmentation.ColorJitter", "img_mean.unsqueeze().unsqueeze", "img_mean.unsqueeze"], "function", ["None"], ["def", "colorJitter", "(", "colorJitter", ",", "img_mean", ",", "data", "=", "None", ",", "target", "=", "None", ",", "s", "=", "0.25", ")", ":", "\n", "# s is the strength of colorjitter", "\n", "#colorJitter", "\n", "    ", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "if", "data", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "if", "colorJitter", ">", "0.2", ":", "\n", "                ", "img_mean", ",", "_", "=", "torch", ".", "broadcast_tensors", "(", "img_mean", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "data", ")", "\n", "seq", "=", "nn", ".", "Sequential", "(", "kornia", ".", "augmentation", ".", "ColorJitter", "(", "brightness", "=", "s", ",", "contrast", "=", "s", ",", "saturation", "=", "s", ",", "hue", "=", "s", ")", ")", "\n", "data", "=", "(", "data", "+", "img_mean", ")", "/", "255", "\n", "data", "=", "seq", "(", "data", ")", "\n", "data", "=", "(", "data", "*", "255", "-", "img_mean", ")", ".", "float", "(", ")", "\n", "", "", "", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.gaussian_blur": [[20, 31], ["numpy.random.uniform", "int", "int", "torch.Sequential", "nn.Sequential.", "numpy.floor", "numpy.floor", "kornia.filters.GaussianBlur2d", "numpy.ceil", "numpy.ceil", "numpy.ceil", "numpy.ceil"], "function", ["None"], ["", "def", "gaussian_blur", "(", "blur", ",", "data", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "    ", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "if", "data", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "if", "blur", ">", "0.5", ":", "\n", "                ", "sigma", "=", "np", ".", "random", ".", "uniform", "(", "0.15", ",", "1.15", ")", "\n", "kernel_size_y", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "ceil", "(", "0.1", "*", "data", ".", "shape", "[", "2", "]", ")", "-", "0.5", "+", "np", ".", "ceil", "(", "0.1", "*", "data", ".", "shape", "[", "2", "]", ")", "%", "2", ")", ")", "\n", "kernel_size_x", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "ceil", "(", "0.1", "*", "data", ".", "shape", "[", "3", "]", ")", "-", "0.5", "+", "np", ".", "ceil", "(", "0.1", "*", "data", ".", "shape", "[", "3", "]", ")", "%", "2", ")", ")", "\n", "kernel_size", "=", "(", "kernel_size_y", ",", "kernel_size_x", ")", "\n", "seq", "=", "nn", ".", "Sequential", "(", "kornia", ".", "filters", ".", "GaussianBlur2d", "(", "kernel_size", "=", "kernel_size", ",", "sigma", "=", "(", "sigma", ",", "sigma", ")", ")", ")", "\n", "data", "=", "seq", "(", "data", ")", "\n", "", "", "", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip": [[32, 39], ["torch.flip", "torch.flip", "torch.flip", "torch.flip"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.flip"], ["", "def", "flip", "(", "flip", ",", "data", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "#Flip", "\n", "    ", "if", "flip", "==", "1", ":", "\n", "        ", "if", "not", "(", "data", "is", "None", ")", ":", "data", "=", "torch", ".", "flip", "(", "data", ",", "(", "3", ",", ")", ")", "#np.array([np.fliplr(data[i]).copy() for i in range(np.shape(data)[0])])", "\n", "if", "not", "(", "target", "is", "None", ")", ":", "\n", "            ", "target", "=", "torch", ".", "flip", "(", "target", ",", "(", "2", ",", ")", ")", "#np.array([np.fliplr(target[i]).copy() for i in range(np.shape(target)[0])])", "\n", "", "", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.cowMix": [[40, 53], ["torch.broadcast_tensors", "torch.broadcast_tensors", "stackedMask.clone.clone", "torch.broadcast_tensors", "torch.broadcast_tensors", "stackedMask.clone.clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "cowMix", "(", "mask", ",", "data", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "#Mix", "\n", "    ", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "stackedMask", ",", "data", "=", "torch", ".", "broadcast_tensors", "(", "mask", ",", "data", ")", "\n", "stackedMask", "=", "stackedMask", ".", "clone", "(", ")", "\n", "stackedMask", "[", "1", ":", ":", "2", "]", "=", "1", "-", "stackedMask", "[", "1", ":", ":", "2", "]", "\n", "data", "=", "(", "stackedMask", "*", "torch", ".", "cat", "(", "(", "data", "[", ":", ":", "2", "]", ",", "data", "[", ":", ":", "2", "]", ")", ")", "+", "(", "1", "-", "stackedMask", ")", "*", "torch", ".", "cat", "(", "(", "data", "[", "1", ":", ":", "2", "]", ",", "data", "[", "1", ":", ":", "2", "]", ")", ")", ")", ".", "float", "(", ")", "\n", "", "if", "not", "(", "target", "is", "None", ")", ":", "\n", "        ", "stackedMask", ",", "target", "=", "torch", ".", "broadcast_tensors", "(", "mask", ",", "target", ")", "\n", "stackedMask", "=", "stackedMask", ".", "clone", "(", ")", "\n", "stackedMask", "[", "1", ":", ":", "2", "]", "=", "1", "-", "stackedMask", "[", "1", ":", ":", "2", "]", "\n", "target", "=", "(", "stackedMask", "*", "torch", ".", "cat", "(", "(", "target", "[", ":", ":", "2", "]", ",", "target", "[", ":", ":", "2", "]", ")", ")", "+", "(", "1", "-", "stackedMask", ")", "*", "torch", ".", "cat", "(", "(", "target", "[", "1", ":", ":", "2", "]", ",", "target", "[", "1", ":", ":", "2", "]", ")", ")", ")", ".", "float", "(", ")", "\n", "", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.mix": [[54, 65], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "int", "int"], "function", ["None"], ["", "def", "mix", "(", "mask", ",", "data", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "#Mix", "\n", "    ", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "if", "mask", ".", "shape", "[", "0", "]", "==", "data", ".", "shape", "[", "0", "]", ":", "\n", "            ", "data", "=", "torch", ".", "cat", "(", "[", "(", "mask", "[", "i", "]", "*", "data", "[", "i", "]", "+", "(", "1", "-", "mask", "[", "i", "]", ")", "*", "data", "[", "(", "i", "+", "1", ")", "%", "data", ".", "shape", "[", "0", "]", "]", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "", "elif", "mask", ".", "shape", "[", "0", "]", "==", "data", ".", "shape", "[", "0", "]", "/", "2", ":", "\n", "            ", "data", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cat", "(", "[", "(", "mask", "[", "i", "]", "*", "data", "[", "2", "*", "i", "]", "+", "(", "1", "-", "mask", "[", "i", "]", ")", "*", "data", "[", "2", "*", "i", "+", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "int", "(", "data", ".", "shape", "[", "0", "]", "/", "2", ")", ")", "]", ")", ",", "\n", "torch", ".", "cat", "(", "[", "(", "(", "1", "-", "mask", "[", "i", "]", ")", "*", "data", "[", "2", "*", "i", "]", "+", "mask", "[", "i", "]", "*", "data", "[", "2", "*", "i", "+", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "int", "(", "data", ".", "shape", "[", "0", "]", "/", "2", ")", ")", "]", ")", ")", ")", "\n", "", "", "if", "not", "(", "target", "is", "None", ")", ":", "\n", "        ", "target", "=", "torch", ".", "cat", "(", "[", "(", "mask", "[", "i", "]", "*", "target", "[", "i", "]", "+", "(", "1", "-", "mask", "[", "i", "]", ")", "*", "target", "[", "(", "i", "+", "1", ")", "%", "target", ".", "shape", "[", "0", "]", "]", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "target", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.oneMix": [[66, 75], ["torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors"], "function", ["None"], ["", "def", "oneMix", "(", "mask", ",", "data", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "#Mix", "\n", "    ", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "stackedMask0", ",", "_", "=", "torch", ".", "broadcast_tensors", "(", "mask", "[", "0", "]", ",", "data", "[", "0", "]", ")", "\n", "data", "=", "(", "stackedMask0", "*", "data", "[", "0", "]", "+", "(", "1", "-", "stackedMask0", ")", "*", "data", "[", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "not", "(", "target", "is", "None", ")", ":", "\n", "        ", "stackedMask0", ",", "_", "=", "torch", ".", "broadcast_tensors", "(", "mask", "[", "0", "]", ",", "target", "[", "0", "]", ")", "\n", "target", "=", "(", "stackedMask0", "*", "target", "[", "0", "]", "+", "(", "1", "-", "stackedMask0", ")", "*", "target", "[", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.transformsgpu.normalize": [[77, 87], ["torch.Tensor().unsqueeze().unsqueeze().unsqueeze().cuda", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze().cuda", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze().cuda", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze().cuda", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.broadcast_tensors", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "normalize", "(", "MEAN", ",", "STD", ",", "data", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "#Normalize", "\n", "    ", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "if", "data", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "STD", "=", "torch", ".", "Tensor", "(", "STD", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "cuda", "(", ")", "\n", "MEAN", "=", "torch", ".", "Tensor", "(", "MEAN", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "cuda", "(", ")", "\n", "STD", ",", "data", "=", "torch", ".", "broadcast_tensors", "(", "STD", ",", "data", ")", "\n", "MEAN", ",", "data", "=", "torch", ".", "broadcast_tensors", "(", "MEAN", ",", "data", ")", "\n", "data", "=", "(", "(", "data", "-", "MEAN", ")", "/", "STD", ")", ".", "float", "(", ")", "\n", "", "", "return", "data", ",", "target", "\n", "", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.palette.get_voc_palette": [[2, 18], ["range"], "function", ["None"], ["def", "get_voc_palette", "(", "num_classes", ")", ":", "\n", "    ", "n", "=", "num_classes", "\n", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "            ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "(", "lab", ">", "0", ")", ":", "\n", "                    ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "=", "i", "+", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.CrossEntropy2d.__init__": [[9, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.CrossEntropy2d.forward": [[13, 33], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "target.data.dim", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                predict:(n, c, h, w)\n                target:(n, h, w)\n                weight (Tensor, optional): a manual rescaling weight given to each class.\n                                           If given, has to be a Tensor of size \"nclasses\"\n        \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "reduction", "=", "'mean'", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.CrossEntropyLoss2dPixelWiseWeighted.__init__": [[36, 39], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "ignore_index", "=", "250", ",", "reduction", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss2dPixelWiseWeighted", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "CE", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.CrossEntropyLoss2dPixelWiseWeighted.forward": [[40, 44], ["torch.mean.CrossEntropyLoss2dPixelWiseWeighted.CE", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ",", "pixelWiseWeight", ")", ":", "\n", "        ", "loss", "=", "self", ".", "CE", "(", "output", ",", "target", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", "*", "pixelWiseWeight", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.MSELoss2d.__init__": [[46, 49], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "super", "(", "MSELoss2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "MSE", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "size_average", ",", "reduce", "=", "reduce", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.MSELoss2d.forward": [[50, 53], ["loss.MSELoss2d.MSELoss2d.MSE", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "loss", "=", "self", ".", "MSE", "(", "torch", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.ImgWtLossSoftNLL.__init__": [[70, 80], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__"], ["def", "__init__", "(", "self", ",", "classes", ",", "ignore_index", "=", "255", ",", "weights", "=", "None", ",", "upper_bound", "=", "1.0", ",", "\n", "norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImgWtLossSoftNLL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "num_classes", "=", "classes", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "upper_bound", "=", "upper_bound", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "batch_weights", "=", "False", "\n", "self", ".", "fp16", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.ImgWtLossSoftNLL.calculate_weights": [[82, 95], ["len", "target.sum", "target.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "calculate_weights", "(", "self", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Calculate weights of the classes based on training crop\n        \"\"\"", "\n", "if", "len", "(", "target", ".", "shape", ")", "==", "3", ":", "\n", "            ", "hist", "=", "np", ".", "sum", "(", "target", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "*", "1.0", "/", "target", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "hist", "=", "np", ".", "sum", "(", "target", ",", "axis", "=", "(", "0", ",", "2", ",", "3", ")", ")", "*", "1.0", "/", "target", ".", "sum", "(", ")", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "hist", "=", "(", "(", "hist", "!=", "0", ")", "*", "self", ".", "upper_bound", "*", "(", "1", "/", "hist", ")", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "hist", "=", "(", "(", "hist", "!=", "0", ")", "*", "self", ".", "upper_bound", "*", "(", "1", "-", "hist", ")", ")", "+", "1", "\n", "", "return", "hist", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.ImgWtLossSoftNLL.custom_nll": [[96, 122], ["loss_matrix.sum", "mask.half", "mask.float", "mask.sum().item", "mask.sum", "loss.customsoftmax", "loss.customsoftmax", "target[].half", "class_weights.unsqueeze().unsqueeze().unsqueeze", "target[].half", "target[].float", "class_weights.unsqueeze().unsqueeze().unsqueeze", "target[].float", "class_weights.unsqueeze().unsqueeze", "class_weights.unsqueeze().unsqueeze", "class_weights.unsqueeze", "class_weights.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.customsoftmax", "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.customsoftmax"], ["", "def", "custom_nll", "(", "self", ",", "inputs", ",", "target", ",", "class_weights", ",", "border_weights", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        NLL Relaxed Loss Implementation\n        \"\"\"", "\n", "#if (cfg.REDUCE_BORDER_EPOCH != -1 and cfg.EPOCH > cfg.REDUCE_BORDER_EPOCH):", "\n", "#    border_weights = 1 / border_weights", "\n", "#    target[target > 1] = 1", "\n", "if", "self", ".", "fp16", ":", "\n", "            ", "loss_matrix", "=", "(", "-", "1", "/", "border_weights", "*", "\n", "(", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "half", "(", ")", "*", "\n", "class_weights", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "*", "\n", "customsoftmax", "(", "inputs", ",", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "half", "(", ")", ")", ")", ".", "sum", "(", "1", ")", ")", "*", "(", "1.", "-", "mask", ".", "half", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss_matrix", "=", "(", "-", "1", "/", "border_weights", "*", "\n", "(", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "float", "(", ")", "*", "\n", "class_weights", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "*", "\n", "customsoftmax", "(", "inputs", ",", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "float", "(", ")", ")", ")", ".", "sum", "(", "1", ")", ")", "*", "(", "1.", "-", "mask", ".", "float", "(", ")", ")", "\n", "\n", "# loss_matrix[border_weights > 1] = 0", "\n", "", "loss", "=", "loss_matrix", ".", "sum", "(", ")", "\n", "\n", "# +1 to prevent division by 0", "\n", "loss", "=", "loss", "/", "(", "target", ".", "shape", "[", "0", "]", "*", "target", ".", "shape", "[", "2", "]", "*", "target", ".", "shape", "[", "3", "]", "-", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.ImgWtLossSoftNLL.forward": [[123, 148], ["target.data.cpu().numpy", "range", "target[].sum().half", "target[].sum().float", "loss.ImgWtLossSoftNLL.calculate_weights", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "target.data.cpu", "loss.ImgWtLossSoftNLL.calculate_weights", "loss.ImgWtLossSoftNLL.custom_nll", "target[].sum", "target[].sum", "inputs[].unsqueeze", "target[].unsqueeze", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.ImgWtLossSoftNLL.calculate_weights", "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.ImgWtLossSoftNLL.calculate_weights", "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.ImgWtLossSoftNLL.custom_nll"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "fp16", ":", "\n", "            ", "weights", "=", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", "1", ")", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", "1", ")", ".", "float", "(", ")", "\n", "", "ignore_mask", "=", "(", "weights", "==", "0", ")", "\n", "weights", "[", "ignore_mask", "]", "=", "1", "\n", "\n", "loss", "=", "0", "\n", "target_cpu", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "self", ".", "batch_weights", ":", "\n", "            ", "class_weights", "=", "self", ".", "calculate_weights", "(", "target_cpu", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "inputs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "not", "self", ".", "batch_weights", ":", "\n", "                ", "class_weights", "=", "self", ".", "calculate_weights", "(", "target_cpu", "[", "i", "]", ")", "\n", "\n", "", "class_weights", "=", "torch", ".", "ones", "(", "(", "class_weights", ".", "shape", ")", ")", "\n", "loss", "=", "loss", "+", "self", ".", "custom_nll", "(", "inputs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "target", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "class_weights", "=", "torch", ".", "Tensor", "(", "class_weights", ")", ".", "cuda", "(", ")", ",", "\n", "border_weights", "=", "weights", ",", "mask", "=", "ignore_mask", "[", "i", "]", ")", "\n", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.loss.customsoftmax": [[54, 63], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.log", "torch.log", "torch.log", "torch.max", "torch.max", "torch.max"], "function", ["None"], ["", "", "def", "customsoftmax", "(", "inp", ",", "multihotmask", ")", ":", "\n", "    ", "\"\"\"\n    Custom Softmax\n    \"\"\"", "\n", "soft", "=", "torch", ".", "softmax", "(", "inp", ",", "dim", "=", "1", ")", "\n", "# This takes the mask * softmax ( sums it up hence summing up the classes in border", "\n", "# then takes of summed up version vs no summed version", "\n", "return", "torch", ".", "log", "(", "\n", "torch", ".", "max", "(", "soft", ",", "(", "multihotmask", "*", "(", "soft", "*", "multihotmask", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.dir_exists": [[8, 11], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "dir_exists", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.initialize_weights": [[12, 23], ["model.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.fill_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "function", ["None"], ["", "", "def", "initialize_weights", "(", "*", "models", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1.", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "1e-4", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.0001", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.get_upsampling_weight": [[24, 35], ["numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "abs", "abs", "list", "list", "range", "range"], "function", ["None"], ["", "", "", "", "def", "get_upsampling_weight", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ")", ":", "\n", "    ", "factor", "=", "(", "kernel_size", "+", "1", ")", "//", "2", "\n", "if", "kernel_size", "%", "2", "==", "1", ":", "\n", "            ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "            ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "kernel_size", ",", ":", "kernel_size", "]", "\n", "filt", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "weight", "=", "np", ".", "zeros", "(", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "kernel_size", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "weight", "[", "list", "(", "range", "(", "in_channels", ")", ")", ",", "list", "(", "range", "(", "out_channels", ")", ")", ",", ":", ",", ":", "]", "=", "filt", "\n", "return", "torch", ".", "from_numpy", "(", "weight", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.colorize_mask": [[36, 43], ["range", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.putpalette", "len", "palette.append", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ",", "palette", ")", ":", "\n", "    ", "zero_pad", "=", "256", "*", "3", "-", "len", "(", "palette", ")", "\n", "for", "i", "in", "range", "(", "zero_pad", ")", ":", "\n", "                    ", "palette", ".", "append", "(", "0", ")", "\n", "", "new_mask", "=", "PIL", ".", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.set_trainable_attr": [[44, 47], ["m.parameters"], "function", ["None"], ["", "def", "set_trainable_attr", "(", "m", ",", "b", ")", ":", "\n", "    ", "m", ".", "trainable", "=", "b", "\n", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "p", ".", "requires_grad", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.apply_leaf": [[48, 55], ["isinstance", "isinstance", "list", "f", "len", "m.children", "helpers.apply_leaf"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.apply_leaf"], ["", "def", "apply_leaf", "(", "m", ",", "f", ")", ":", "\n", "    ", "c", "=", "m", "if", "isinstance", "(", "m", ",", "(", "list", ",", "tuple", ")", ")", "else", "list", "(", "m", ".", "children", "(", ")", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "f", "(", "m", ")", "\n", "", "if", "len", "(", "c", ")", ">", "0", ":", "\n", "        ", "for", "l", "in", "c", ":", "\n", "            ", "apply_leaf", "(", "l", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.set_trainable": [[56, 58], ["helpers.apply_leaf", "helpers.set_trainable_attr"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.apply_leaf", "home.repos.pwc.inspect_result.vikolss_DACS.utils.helpers.set_trainable_attr"], ["", "", "", "def", "set_trainable", "(", "l", ",", "b", ")", ":", "\n", "    ", "apply_leaf", "(", "l", ",", "lambda", "m", ":", "set_trainable_attr", "(", "m", ",", "b", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.__init__": [[52, 56], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ",", "classes", "=", "None", ")", ":", "\n", "        ", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "M", "=", "np", ".", "zeros", "(", "(", "nclass", ",", "nclass", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.add": [[57, 63], ["range", "numpy.max", "len", "len", "len"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "gt", ",", "pred", ")", ":", "\n", "        ", "assert", "(", "np", ".", "max", "(", "pred", ")", "<=", "self", ".", "nclass", ")", "\n", "assert", "(", "len", "(", "gt", ")", "==", "len", "(", "pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "            ", "if", "not", "gt", "[", "i", "]", "==", "255", ":", "\n", "                ", "self", ".", "M", "[", "gt", "[", "i", "]", ",", "pred", "[", "i", "]", "]", "+=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.addM": [[64, 67], ["None"], "methods", ["None"], ["", "", "", "def", "addM", "(", "self", ",", "matrix", ")", ":", "\n", "        ", "assert", "(", "matrix", ".", "shape", "==", "self", ".", "M", ".", "shape", ")", "\n", "self", ".", "M", "+=", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.__str__": [[68, 70], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.recall": [[71, 77], ["range", "numpy.sum"], "methods", ["None"], ["", "def", "recall", "(", "self", ")", ":", "\n", "        ", "recall", "=", "0.0", "\n", "for", "i", "in", "range", "(", "self", ".", "nclass", ")", ":", "\n", "            ", "recall", "+=", "self", ".", "M", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "self", ".", "M", "[", ":", ",", "i", "]", ")", "\n", "\n", "", "return", "recall", "/", "self", ".", "nclass", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.accuracy": [[78, 84], ["range", "numpy.sum"], "methods", ["None"], ["", "def", "accuracy", "(", "self", ")", ":", "\n", "        ", "accuracy", "=", "0.0", "\n", "for", "i", "in", "range", "(", "self", ".", "nclass", ")", ":", "\n", "            ", "accuracy", "+=", "self", ".", "M", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "self", ".", "M", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "return", "accuracy", "/", "self", ".", "nclass", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.jaccard": [[85, 93], ["range", "jaccard_perclass.append", "numpy.sum", "len", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "jaccard", "(", "self", ")", ":", "\n", "        ", "jaccard", "=", "0.0", "\n", "jaccard_perclass", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nclass", ")", ":", "\n", "#if not self.M[i, i] == 0:", "\n", "            ", "jaccard_perclass", ".", "append", "(", "self", ".", "M", "[", "i", ",", "i", "]", "/", "(", "np", ".", "sum", "(", "self", ".", "M", "[", "i", ",", ":", "]", ")", "+", "np", ".", "sum", "(", "self", ".", "M", "[", ":", ",", "i", "]", ")", "-", "self", ".", "M", "[", "i", ",", "i", "]", ")", ")", "\n", "\n", "", "return", "np", ".", "sum", "(", "jaccard_perclass", ")", "/", "len", "(", "jaccard_perclass", ")", ",", "jaccard_perclass", ",", "self", ".", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.generateM": [[94, 102], ["numpy.zeros", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "generateM", "(", "self", ",", "item", ")", ":", "\n", "        ", "gt", ",", "pred", "=", "item", "\n", "m", "=", "np", ".", "zeros", "(", "(", "self", ".", "nclass", ",", "self", ".", "nclass", ")", ")", "\n", "assert", "(", "len", "(", "gt", ")", "==", "len", "(", "pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "            ", "if", "gt", "[", "i", "]", "<", "self", ".", "nclass", ":", "#and pred[i] < self.nclass:", "\n", "                ", "m", "[", "gt", "[", "i", "]", ",", "pred", "[", "i", "]", "]", "+=", "1.0", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric._pickle_method": [[8, 13], ["None"], "function", ["None"], ["def", "_pickle_method", "(", "m", ")", ":", "\n", "    ", "if", "m", ".", "im_self", "is", "None", ":", "\n", "        ", "return", "getattr", ",", "(", "m", ".", "im_class", ",", "m", ".", "im_func", ".", "func_name", ")", "\n", "", "else", ":", "\n", "        ", "return", "getattr", ",", "(", "m", ".", "im_self", ",", "m", ".", "im_func", ".", "func_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.get_iou": [[16, 49], ["metric.ConfusionMatrix", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "metric.ConfusionMatrix.jaccard", "numpy.array", "enumerate", "print", "metric.ConfusionMatrix.addM", "print", "open", "enumerate", "f.write", "str", "f.write", "str"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.jaccard", "home.repos.pwc.inspect_result.vikolss_DACS.utils.metric.ConfusionMatrix.addM"], ["", "", "def", "get_iou", "(", "data_list", ",", "class_num", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "from", "multiprocessing", "import", "Pool", "\n", "from", "utils", ".", "metric", "import", "ConfusionMatrix", "\n", "\n", "ConfM", "=", "ConfusionMatrix", "(", "class_num", ")", "\n", "f", "=", "ConfM", ".", "generateM", "\n", "pool", "=", "Pool", "(", ")", "\n", "m_list", "=", "pool", ".", "map", "(", "f", ",", "data_list", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "for", "m", "in", "m_list", ":", "\n", "        ", "ConfM", ".", "addM", "(", "m", ")", "\n", "\n", "", "aveJ", ",", "j_list", ",", "M", "=", "ConfM", ".", "jaccard", "(", ")", "\n", "\n", "classes", "=", "np", ".", "array", "(", "(", "'background'", ",", "# always index 0", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "\n", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "\n", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", ")", ")", "\n", "\n", "for", "i", ",", "iou", "in", "enumerate", "(", "j_list", ")", ":", "\n", "        ", "print", "(", "'class {:2d} {:12} IU {:.2f}'", ".", "format", "(", "i", ",", "classes", "[", "i", "]", ",", "j_list", "[", "i", "]", ")", ")", "\n", "\n", "\n", "", "print", "(", "'meanIOU: '", "+", "str", "(", "aveJ", ")", "+", "'\\n'", ")", "\n", "if", "save_path", ":", "\n", "        ", "with", "open", "(", "save_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "iou", "in", "enumerate", "(", "j_list", ")", ":", "\n", "                ", "f", ".", "write", "(", "'class {:2d} {:12} IU {:.2f}'", ".", "format", "(", "i", ",", "classes", "[", "i", "]", ",", "j_list", "[", "i", "]", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "write", "(", "'meanIOU: '", "+", "str", "(", "aveJ", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[52, 62], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[63, 94], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[95, 104], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[105, 127], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[128, 146], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[204, 209], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[267, 272], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[331, 336], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._sum_ft": [[37, 40], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm._unsqueeze_ft": [[42, 45], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[338, 351], ["None"], "function", ["None"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.convert_model": [[353, 398], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "sync_module.parameters", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "for", "i", "in", "mod", ".", "parameters", "(", ")", ":", "\n", "                    ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "\n", "", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__", "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.BasicBlock.__init__": [[29, 38], ["torch.Module.__init__", "deeplabv2.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplabv2.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.conv3x3", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.BasicBlock.forward": [[39, 57], ["deeplabv2.BasicBlock.conv1", "deeplabv2.BasicBlock.bn1", "print", "deeplabv2.BasicBlock.relu", "deeplabv2.BasicBlock.conv2", "deeplabv2.BasicBlock.bn2", "deeplabv2.BasicBlock.relu", "deeplabv2.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "print", "(", "out", ".", "shape", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.Bottleneck.__init__": [[62, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv2.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv2.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv2.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.Bottleneck.forward": [[84, 105], ["deeplabv2.Bottleneck.conv1", "deeplabv2.Bottleneck.bn1", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.conv2", "deeplabv2.Bottleneck.bn2", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.conv3", "deeplabv2.Bottleneck.bn3", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.Classifier_Module.__init__": [[108, 116], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplabv2.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "2048", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.Classifier_Module.forward": [[117, 122], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.__init__": [[126, 149], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv2.ResNet.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplabv2.ResNet._make_layer", "deeplabv2.ResNet._make_layer", "deeplabv2.ResNet._make_layer", "deeplabv2.ResNet._make_layer", "deeplabv2.ResNet._make_pred_layer", "deeplabv2.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet._make_layer", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet._make_layer", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet._make_layer", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet._make_layer", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#        for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet._make_layer": [[152, 168], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet._make_pred_layer": [[168, 170], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.forward": [[171, 183], ["deeplabv2.ResNet.conv1", "deeplabv2.ResNet.bn1", "deeplabv2.ResNet.relu", "deeplabv2.ResNet.maxpool", "deeplabv2.ResNet.layer1", "deeplabv2.ResNet.layer2", "deeplabv2.ResNet.layer3", "deeplabv2.ResNet.layer4", "deeplabv2.ResNet.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.get_1x_lr_params_NOscale": [[184, 208], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.get_10x_lr_params": [[209, 220], ["b.append", "range", "deeplabv2.ResNet.layer5.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.optim_parameters": [[223, 226], ["deeplabv2.ResNet.get_1x_lr_params_NOscale", "deeplabv2.ResNet.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.ResNet.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.outS": [[13, 19], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.conv3x3": [[20, 24], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.model.deeplabv2.Res_Deeplab": [[228, 231], ["deeplabv2.ResNet"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.data.base.BaseDataset.__init__": [[16, 28], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", ",", "mode", "=", "None", ",", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "base_size", "=", "520", ",", "crop_size", "=", "480", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "mode", "=", "mode", "if", "mode", "is", "not", "None", "else", "split", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "print", "(", "'BaseDataset: base_size {}, crop_size {}'", ".", "format", "(", "base_size", ",", "crop_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.base.BaseDataset.__getitem__": [[29, 31], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.base.BaseDataset.num_class": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_class", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "NUM_CLASS", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.base.BaseDataset.pred_offset": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pred_offset", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.base.BaseDataset.make_pred": [[40, 42], ["None"], "methods", ["None"], ["", "def", "make_pred", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "pred_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.base.BaseDataset._val_sync_transform": [[43, 63], ["img.crop.crop.resize", "mask.crop.crop.resize", "int", "int", "img.crop.crop.crop", "mask.crop.crop.crop", "int", "int", "round", "round", "base.BaseDataset._mask_transform"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.base.BaseDataset._mask_transform"], ["", "def", "_val_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "outsize", "=", "self", ".", "crop_size", "\n", "short_size", "=", "outsize", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "w", ">", "h", ":", "\n", "            ", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "else", ":", "\n", "            ", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# center crop", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "outsize", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "outsize", ")", "/", "2.", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "outsize", ",", "y1", "+", "outsize", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "outsize", ",", "y1", "+", "outsize", ")", ")", "\n", "# final transform", "\n", "return", "img", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.base.BaseDataset._sync_transform": [[64, 99], ["random.randint", "img.filter.filter.resize", "PIL.ImageOps.expand.resize", "random.randint", "random.randint", "img.filter.filter.crop", "PIL.ImageOps.expand.crop", "random.random", "img.filter.filter.transpose", "PIL.ImageOps.expand.transpose", "int", "int", "int", "int", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "random.random", "img.filter.filter.filter", "base.BaseDataset._mask_transform", "PIL.ImageFilter.GaussianBlur", "random.random"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.base.BaseDataset._mask_transform"], ["", "def", "_sync_transform", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# random mirror", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "crop_size", "=", "self", ".", "crop_size", "\n", "# random scale (short edge from 480 to 720)", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "self", ".", "base_size", "*", "0.5", ")", ",", "int", "(", "self", ".", "base_size", "*", "2.0", ")", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "h", ">", "w", ":", "\n", "            ", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "# pad crop", "\n", "if", "short_size", "<", "crop_size", ":", "\n", "            ", "padh", "=", "crop_size", "-", "oh", "if", "oh", "<", "crop_size", "else", "0", "\n", "padw", "=", "crop_size", "-", "ow", "if", "ow", "<", "crop_size", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_size", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_size", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "# gaussian blur as in PSP", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "random", ".", "random", "(", ")", ")", ")", "\n", "# final transform", "\n", "", "return", "img", ",", "self", ".", "_mask_transform", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.base.BaseDataset._mask_transform": [[100, 102], ["torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "_mask_transform", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.base.test_batchify_fn": [[104, 112], ["isinstance", "TypeError", "list", "isinstance", "error_msg.format", "zip", "type", "base.test_batchify_fn"], "function", ["home.repos.pwc.inspect_result.vikolss_DACS.data.base.test_batchify_fn"], ["", "", "def", "test_batchify_fn", "(", "data", ")", ":", "\n", "    ", "error_msg", "=", "\"batch must contain tensors, tuples or lists; found {}\"", "\n", "if", "isinstance", "(", "data", "[", "0", "]", ",", "(", "str", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "        ", "return", "list", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", "[", "0", "]", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "data", "=", "zip", "(", "*", "data", ")", "\n", "return", "[", "test_batchify_fn", "(", "i", ")", "for", "i", "in", "data", "]", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "batch", "[", "0", "]", ")", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.data.synthia_dataset.SynthiaDataSet.__init__": [[14, 31], ["i_id.strip", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "augmentations", "=", "None", ",", "img_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "250", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "[", "-", "11", ":", "]", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "\n", "", "self", ".", "id_to_trainid", "=", "{", "3", ":", "0", ",", "4", ":", "1", ",", "2", ":", "2", ",", "21", ":", "3", ",", "5", ":", "4", ",", "7", ":", "5", ",", "\n", "15", ":", "6", ",", "9", ":", "7", ",", "6", ":", "8", ",", "16", ":", "9", ",", "1", ":", "10", ",", "10", ":", "11", ",", "17", ":", "12", ",", "\n", "8", ":", "13", ",", "18", ":", "14", ",", "19", ":", "15", ",", "20", ":", "16", ",", "12", ":", "17", ",", "11", ":", "18", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.synthia_dataset.SynthiaDataSet.__len__": [[41, 43], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.synthia_dataset.SynthiaDataSet.__getitem__": [[45, 74], ["PIL.Image.open().convert", "PIL.Image.open", "image.transpose.transpose.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "synthia_dataset.SynthiaDataSet.id_to_trainid.items", "image.transpose.transpose.transpose", "os.join", "os.join", "synthia_dataset.SynthiaDataSet.augmentations", "numpy.ones", "image.transpose.transpose.copy", "label_copy.copy", "numpy.array", "PIL.Image.open", "os.join", "os.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "name", "=", "self", ".", "img_ids", "[", "index", "]", "\n", "image", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "\"RGB/%s\"", "%", "name", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "\"synthia_mapped_to_cityscapes/%s\"", "%", "name", ")", ")", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "uint8", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "augmentations", "(", "image", ",", "label", ")", "\n", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.gta5_dataset.GTA5DataSet.__init__": [[14, 41], ["i_id.strip", "os.join", "os.join", "os.join", "os.join", "gta5_dataset.GTA5DataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "augmentations", "=", "None", ",", "img_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "250", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"images/%s\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"labels/%s\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.gta5_dataset.GTA5DataSet.__len__": [[43, 45], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.gta5_dataset.GTA5DataSet.__getitem__": [[47, 78], ["PIL.Image.open().convert", "PIL.Image.open", "image.transpose.transpose.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "gta5_dataset.GTA5DataSet.id_to_trainid.items", "image.transpose.transpose.transpose", "gta5_dataset.GTA5DataSet.augmentations", "numpy.ones", "image.transpose.transpose.copy", "label_copy.copy", "numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "img_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "uint8", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "augmentations", "(", "image", ",", "label", ")", "\n", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.city_utils.recursive_glob": [[9, 19], ["os.path.join", "os.walk", "filename.endswith"], "function", ["None"], ["def", "recursive_glob", "(", "rootdir", "=", "\".\"", ",", "suffix", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Performs recursive glob with given suffix and rootdir \n        :param rootdir is the root directory\n        :param suffix is the suffix to be searched\n    \"\"\"", "\n", "return", "[", "\n", "os", ".", "path", ".", "join", "(", "looproot", ",", "filename", ")", "\n", "for", "looproot", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "rootdir", ")", "\n", "for", "filename", "in", "filenames", "\n", "if", "filename", ".", "endswith", "(", "suffix", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.city_utils.poly_lr_scheduler": [[22, 38], ["None"], "function", ["None"], ["", "def", "poly_lr_scheduler", "(", "\n", "optimizer", ",", "init_lr", ",", "iter", ",", "lr_decay_iter", "=", "1", ",", "max_iter", "=", "30000", ",", "power", "=", "0.9", "\n", ")", ":", "\n", "    ", "\"\"\"Polynomial decay of learning rate\n        :param init_lr is base learning rate\n        :param iter is a current iteration\n        :param lr_decay_iter how frequently decay occurs, default is 1\n        :param max_iter is number of maximum iterations\n        :param power is a polymomial power\n\n    \"\"\"", "\n", "if", "iter", "%", "lr_decay_iter", "or", "iter", ">", "max_iter", ":", "\n", "        ", "return", "optimizer", "\n", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "init_lr", "*", "(", "1", "-", "iter", "/", "max_iter", ")", "**", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.city_utils.adjust_learning_rate": [[40, 45], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "init_lr", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "init_lr", "*", "(", "0.1", "**", "(", "epoch", "//", "30", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.city_utils.alpha_blend": [[47, 57], ["numpy.zeros"], "function", ["None"], ["", "", "def", "alpha_blend", "(", "input_image", ",", "segmentation_mask", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Alpha Blending utility to overlay RGB masks on RBG images \n        :param input_image is a np.ndarray with 3 channels\n        :param segmentation_mask is a np.ndarray with 3 channels\n        :param alpha is a float value\n\n    \"\"\"", "\n", "blended", "=", "np", ".", "zeros", "(", "input_image", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blended", "=", "input_image", "*", "alpha", "+", "segmentation_mask", "*", "(", "1", "-", "alpha", ")", "\n", "return", "blended", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.city_utils.convert_state_dict": [[59, 70], ["collections.OrderedDict", "state_dict.items"], "function", ["None"], ["", "def", "convert_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"Converts a state dict saved from a dataParallel module to normal \n       module state_dict inplace\n       :param state_dict is the loaded DataParallel model_state\n    \n    \"\"\"", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.CCompose.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "augmentations", ")", ":", "\n", "        ", "self", ".", "augmentations", "=", "augmentations", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.CCompose.__call__": [[15, 21], ["PIL.Image.fromarray", "PIL.Image.fromarray", "a", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "centroid", ")", ":", "\n", "        ", "img", ",", "mask", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"RGB\"", ")", ",", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "\"L\"", ")", "\n", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "a", "in", "self", ".", "augmentations", ":", "\n", "            ", "img", ",", "mask", "=", "a", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "", "return", "np", ".", "array", "(", "img", ")", ",", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.Compose.__init__": [[23, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "augmentations", ")", ":", "\n", "        ", "self", ".", "augmentations", "=", "augmentations", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.Compose.__call__": [[26, 32], ["PIL.Image.fromarray", "PIL.Image.fromarray", "a", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", ",", "mask", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"RGB\"", ")", ",", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "\"L\"", ")", "\n", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "a", "in", "self", ".", "augmentations", ":", "\n", "            ", "img", ",", "mask", "=", "a", "(", "img", ",", "mask", ")", "\n", "", "return", "np", ".", "array", "(", "img", ")", ",", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.CentroidCCrop.__init__": [[47, 55], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "ignore_index", "=", "0", ",", "nopad", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "nopad", "=", "nopad", "\n", "self", ".", "pad_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.CentroidCCrop.__call__": [[56, 105], ["random.randint", "min", "random.randint", "min", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "min", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "max", "max", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "centroid", "=", "None", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "# ASSUME H, W", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "\n", "", "if", "self", ".", "nopad", ":", "\n", "            ", "if", "th", ">", "h", "or", "tw", ">", "w", ":", "\n", "# Instead of padding, adjust crop size to the shorter edge of image.", "\n", "                ", "shorter_side", "=", "min", "(", "w", ",", "h", ")", "\n", "th", ",", "tw", "=", "shorter_side", ",", "shorter_side", "\n", "", "", "else", ":", "\n", "# Check if we need to pad img to fit for crop_size.", "\n", "            ", "if", "th", ">", "h", ":", "\n", "                ", "pad_h", "=", "(", "th", "-", "h", ")", "//", "2", "+", "1", "\n", "", "else", ":", "\n", "                ", "pad_h", "=", "0", "\n", "", "if", "tw", ">", "w", ":", "\n", "                ", "pad_w", "=", "(", "tw", "-", "w", ")", "//", "2", "+", "1", "\n", "", "else", ":", "\n", "                ", "pad_w", "=", "0", "\n", "", "border", "=", "(", "pad_w", ",", "pad_h", ",", "pad_w", ",", "pad_h", ")", "\n", "if", "pad_h", "or", "pad_w", ":", "\n", "                ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "border", ",", "fill", "=", "self", ".", "pad_color", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "border", ",", "fill", "=", "self", ".", "ignore_index", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "", "", "if", "centroid", "is", "not", "None", ":", "\n", "# Need to insure that centroid is covered by crop and that crop", "\n", "# sits fully within the image", "\n", "            ", "c_x", ",", "c_y", "=", "centroid", "\n", "max_x", "=", "w", "-", "tw", "\n", "max_y", "=", "h", "-", "th", "\n", "x1", "=", "random", ".", "randint", "(", "c_x", "-", "tw", ",", "c_x", ")", "\n", "x1", "=", "min", "(", "max_x", ",", "max", "(", "0", ",", "x1", ")", ")", "\n", "y1", "=", "random", ".", "randint", "(", "c_y", "-", "th", ",", "c_y", ")", "\n", "y1", "=", "min", "(", "max_y", ",", "max", "(", "0", ",", "y1", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "w", "==", "tw", ":", "\n", "                ", "x1", "=", "0", "\n", "", "else", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "", "if", "h", "==", "th", ":", "\n", "                ", "y1", "=", "0", "\n", "", "else", ":", "\n", "                ", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "", "", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomCrop.__init__": [[109, 116], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "#if isinstance(size, numbers.Number):", "\n", "#self.size = (int(size), int(size))", "\n", "#else:", "\n", "#self.size = size", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomCrop.__call__": [[117, 138], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "tw", "or", "h", "<", "th", ":", "\n", "            ", "return", "(", "\n", "img", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomCrop_city.__init__": [[142, 149], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "#if isinstance(size, numbers.Number):", "\n", "#self.size = (int(size), int(size))", "\n", "#else:", "\n", "#self.size = size", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomCrop_city.__call__": [[150, 180], ["PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "'''\n        if w == tw and h == th:\n            return img, mask\n        if w < tw or h < th:\n            return (\n                img.resize((tw, th), Image.BILINEAR),\n                mask.resize((tw, th), Image.NEAREST),\n            )\n        '''", "\n", "img", "=", "img", ".", "resize", "(", "(", "int", "(", "w", "/", "2", ")", ",", "int", "(", "h", "/", "2", ")", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "int", "(", "w", "/", "2", ")", ",", "int", "(", "h", "/", "2", ")", ")", ",", "Image", ".", "NEAREST", ")", "\n", "#img = img.resize((600, 300), Image.BILINEAR)", "\n", "#mask = mask.resize((600, 300), Image.NEAREST)", "\n", "#img = img.resize((512, 256), Image.BILINEAR)", "\n", "#mask = mask.resize((512, 256), Image.NEAREST)", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "w", "/", "2", ")", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "h", "/", "2", ")", "-", "th", ")", "\n", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomCrop_gta.__init__": [[183, 190], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "#if isinstance(size, numbers.Number):", "\n", "#self.size = (int(size), int(size))", "\n", "#else:", "\n", "#self.size = size", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomCrop_gta.__call__": [[191, 220], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "'''\n        if w == tw and h == th:\n            return img, mask\n        if w < tw or h < th:\n            return (\n                img.resize((tw, th), Image.BILINEAR),\n                mask.resize((tw, th), Image.NEAREST),\n            )\n        '''", "\n", "#img = img.resize((600, 300), Image.BILINEAR)", "\n", "#mask = mask.resize((600, 300), Image.NEAREST)", "\n", "#img = img.resize((512, 256), Image.BILINEAR)", "\n", "#mask = mask.resize((512, 256), Image.NEAREST)", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "w", ")", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "h", ")", "-", "th", ")", "\n", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomCrop_city_gnet.__init__": [[224, 231], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "#if isinstance(size, numbers.Number):", "\n", "#self.size = (int(size), int(size))", "\n", "#else:", "\n", "#self.size = size", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomCrop_city_gnet.__call__": [[232, 262], ["PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "'''\n        if w == tw and h == th:\n            return img, mask\n        if w < tw or h < th:\n            return (\n                img.resize((tw, th), Image.BILINEAR),\n                mask.resize((tw, th), Image.NEAREST),\n            )\n        '''", "\n", "#img = img.resize((int(w/2), int(h/2)), Image.BILINEAR)", "\n", "#mask = mask.resize((int(w/2), int(h/2)), Image.NEAREST)", "\n", "img", "=", "img", ".", "resize", "(", "(", "600", ",", "300", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "600", ",", "300", ")", ",", "Image", ".", "NEAREST", ")", "\n", "#img = img.resize((512, 256), Image.BILINEAR)", "\n", "#mask = mask.resize((512, 256), Image.NEAREST)", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "600", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "300", "-", "th", ")", "\n", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.CenterCrop.__init__": [[265, 273], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "'''\n        if isinstance(size, numbers.Number):\n            self.size = (int(size), int(size))\n        else:\n            self.size = size\n        '''", "\n", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.CenterCrop.__call__": [[274, 283], ["int", "int", "round", "round", "img.crop", "mask.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomHorizontallyFlip.__call__": [[287, 294], ["random.random", "img.transpose", "mask.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "(", "\n", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "\n", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.FreeScale.__init__": [[297, 299], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.FreeScale.__call__": [[300, 305], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "(", "\n", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.Scale.__init__": [[309, 311], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.Scale.__call__": [[312, 331], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "f_w", ",", "f_h", "=", "self", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "f_w", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "f_h", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "f_w", "\n", "oh", "=", "int", "(", "f_w", "*", "h", "/", "w", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "f_h", "\n", "ow", "=", "int", "(", "f_h", "*", "w", "/", "h", ")", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RSCrop.__init__": [[335, 337], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "#self.size = tuple(size)", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RSCrop.__call__": [[339, 373], ["random.randint", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "random.randint", "random.randint", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "int", "int", "int", "int", "PIL.ImageOps.expand", "PIL.ImageOps.expand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "#for attempt in range(10):", "\n", "#random scale (0.5 to 2.0)", "\n", "crop_size", "=", "self", ".", "size", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "self", ".", "size", "*", "0.5", ")", ",", "int", "(", "self", ".", "size", "*", "2.0", ")", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "h", ">", "w", ":", "\n", "            ", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "#deg = random.uniform(-10, 10)", "\n", "#img = img.rotate(deg, resample=Image.BILINEAR)", "\n", "#mask = mask.rotate(deg, resample=Image.NEAREST)", "\n", "# pad crop", "\n", "if", "short_size", "<", "crop_size", ":", "\n", "            ", "padh", "=", "crop_size", "-", "oh", "if", "oh", "<", "crop_size", "else", "0", "\n", "padw", "=", "crop_size", "-", "ow", "if", "ow", "<", "crop_size", "else", "0", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "padw", ",", "padh", ")", ",", "fill", "=", "0", ")", "\n", "\n", "# random crop crop_size", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_size", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_size", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RSCrop_city.__init__": [[376, 380], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "#self.size = size", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "self", ".", "base_size", "=", "1024", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RSCrop_city.__call__": [[381, 417], ["random.randint", "img.crop.crop.resize", "mask.crop.crop.resize", "random.uniform", "img.crop.crop.rotate", "mask.crop.crop.rotate", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "#for attempt in range(10):", "\n", "#random scale (0.5 to 2.0)", "\n", "#crop_size = self.size", "\n", "short_size", "=", "random", ".", "randint", "(", "int", "(", "self", ".", "base_size", "*", "0.25", ")", ",", "int", "(", "self", ".", "base_size", "*", "1.0", ")", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "h", ">", "w", ":", "\n", "            ", "ow", "=", "short_size", "\n", "oh", "=", "int", "(", "1.0", "*", "h", "*", "ow", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "short_size", "\n", "ow", "=", "int", "(", "1.0", "*", "w", "*", "oh", "/", "h", ")", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "deg", "=", "random", ".", "uniform", "(", "-", "10", ",", "10", ")", "\n", "img", "=", "img", ".", "rotate", "(", "deg", ",", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "rotate", "(", "deg", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "\n", "'''\n        # pad crop\n        #if short_size < crop_size:\n        padh = crop_size - oh if oh < crop_size else 0\n        padw = crop_size - ow if ow < crop_size else 0\n        img = ImageOps.expand(img, border=(0, 0, padw, padh), fill=0)\n        mask = ImageOps.expand(mask, border=(0, 0, padw, padh), fill=0)\n        '''", "\n", "# random crop crop_size", "\n", "#w, h = img.size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "size", "[", "0", "]", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "size", "[", "1", "]", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "size", "[", "0", "]", ",", "y1", "+", "self", ".", "size", "[", "1", "]", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "size", "[", "0", "]", ",", "y1", "+", "self", ".", "size", "[", "1", "]", ")", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomSizedCrop.__init__": [[419, 422], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "#self.size = size", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomSizedCrop.__call__": [[423, 455], ["range", "augmentations.Scale", "augmentations.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize", "mask.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.45", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "f_w", ",", "f_h", "=", "self", ".", "size", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "img", ".", "size", "==", "(", "w", ",", "h", ")", "\n", "\n", "return", "(", "\n", "img", ".", "resize", "(", "(", "f_w", ",", "f_h", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "f_w", ",", "f_h", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomRotate.__init__": [[458, 460], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomRotate.__call__": [[461, 466], ["img.rotate", "mask.rotate", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "(", "\n", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomSized.__init__": [[470, 474], ["augmentations.Scale", "augmentations.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.augmentations.RandomSized.__call__": [[475, 487], ["int", "int", "augmentations.RandomSized.crop", "img.resize", "mask.resize", "random.uniform", "random.uniform", "augmentations.RandomSized.scale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", "=", "int", "(", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "\n", "img", ",", "mask", "=", "(", "\n", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ",", "\n", ")", "\n", "\n", "return", "self", ".", "crop", "(", "*", "self", ".", "scale", "(", "img", ",", "mask", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__init__": [[49, 124], ["numpy.array", "os.path.join", "os.path.join", "torch.utils.data.city_utils.recursive_glob", "dict", "print", "isinstance", "zip", "Exception", "range", "len"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.city_utils.recursive_glob"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "split", "=", "\"train\"", ",", "\n", "is_transform", "=", "False", ",", "\n", "img_size", "=", "(", "512", ",", "1024", ")", ",", "\n", "img_norm", "=", "False", ",", "\n", "augmentations", "=", "None", ",", "\n", "version", "=", "\"cityscapes\"", ",", "\n", "return_id", "=", "False", ",", "\n", "img_mean", "=", "np", ".", "array", "(", "[", "73.15835921", ",", "82.90891754", ",", "72.39239876", "]", ")", "\n", ")", ":", "\n", "        ", "\"\"\"__init__\n\n        :param root:\n        :param split:\n        :param is_transform:\n        :param img_size:\n        :param augmentations\n        \"\"\"", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "is_transform", "=", "is_transform", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "img_norm", "=", "img_norm", "\n", "self", ".", "n_classes", "=", "19", "\n", "self", ".", "img_size", "=", "(", "\n", "img_size", "if", "isinstance", "(", "img_size", ",", "tuple", ")", "else", "(", "img_size", ",", "img_size", ")", "\n", ")", "\n", "self", ".", "mean", "=", "img_mean", "\n", "self", ".", "files", "=", "{", "}", "\n", "\n", "self", ".", "images_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit_trainvaltest\"", ",", "\"leftImg8bit\"", ",", "self", ".", "split", ")", "\n", "self", ".", "annotations_base", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "\"gtFine_trainvaltest\"", ",", "\"gtFine\"", ",", "self", ".", "split", "\n", ")", "\n", "\n", "self", ".", "files", "[", "split", "]", "=", "recursive_glob", "(", "rootdir", "=", "self", ".", "images_base", ",", "suffix", "=", "\".png\"", ")", "\n", "\n", "self", ".", "void_classes", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "10", ",", "14", ",", "15", ",", "16", ",", "18", ",", "29", ",", "30", ",", "-", "1", "]", "\n", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\n", "\"unlabelled\"", ",", "\n", "\"road\"", ",", "\n", "\"sidewalk\"", ",", "\n", "\"building\"", ",", "\n", "\"wall\"", ",", "\n", "\"fence\"", ",", "\n", "\"pole\"", ",", "\n", "\"traffic_light\"", ",", "\n", "\"traffic_sign\"", ",", "\n", "\"vegetation\"", ",", "\n", "\"terrain\"", ",", "\n", "\"sky\"", ",", "\n", "\"person\"", ",", "\n", "\"rider\"", ",", "\n", "\"car\"", ",", "\n", "\"truck\"", ",", "\n", "\"bus\"", ",", "\n", "\"train\"", ",", "\n", "\"motorcycle\"", ",", "\n", "\"bicycle\"", ",", "\n", "]", "\n", "\n", "self", ".", "ignore_index", "=", "250", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "19", ")", ")", ")", "\n", "\n", "if", "not", "self", ".", "files", "[", "split", "]", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No files for split=[%s] found in %s\"", "%", "(", "split", ",", "self", ".", "images_base", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Found %d %s images\"", "%", "(", "len", "(", "self", ".", "files", "[", "split", "]", ")", ",", "split", ")", ")", "\n", "\n", "self", ".", "return_id", "=", "return_id", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__len__": [[125, 128], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"__len__\"\"\"", "\n", "return", "len", "(", "self", ".", "files", "[", "self", ".", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.__getitem__": [[129, 158], ["[].rstrip", "os.path.join", "scipy.imread", "numpy.array", "scipy.imread", "numpy.array", "cityscapes_loader.cityscapesLoader.encode_segmap", "cityscapes_loader.cityscapesLoader.augmentations", "cityscapes_loader.cityscapesLoader.transform", "[].rstrip.split", "[].rstrip.split", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.encode_segmap", "home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"__getitem__\n\n        :param index:\n        \"\"\"", "\n", "img_path", "=", "self", ".", "files", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "lbl_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "annotations_base", ",", "\n", "img_path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", ",", "# temporary for cross validation", "\n", "os", ".", "path", ".", "basename", "(", "img_path", ")", "[", ":", "-", "15", "]", "+", "\"gtFine_labelIds.png\"", ",", "\n", ")", "\n", "\n", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "lbl", "=", "m", ".", "imread", "(", "lbl_path", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lbl", "=", "self", ".", "encode_segmap", "(", "lbl", ")", "\n", "\n", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "            ", "img", ",", "lbl", "=", "self", ".", "augmentations", "(", "img", ",", "lbl", ")", "\n", "\n", "", "if", "self", ".", "is_transform", ":", "\n", "            ", "img", ",", "lbl", "=", "self", ".", "transform", "(", "img", ",", "lbl", ")", "\n", "\n", "", "img_name", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "self", ".", "return_id", ":", "\n", "            ", "return", "img", ",", "lbl", ",", "img_name", ",", "img_name", ",", "index", "\n", "", "return", "img", ",", "lbl", ",", "img_path", ",", "lbl_path", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.transform": [[159, 193], ["scipy.imresize", "torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "numpy.unique", "torch.from_numpy().long.astype", "scipy.imresize", "torch.from_numpy().long.astype", "torch.from_numpy().float", "torch.from_numpy().long", "numpy.all", "print", "numpy.all", "print", "ValueError", "torch.from_numpy().float.astype", "numpy.unique", "torch.from_numpy", "torch.from_numpy", "numpy.unique", "numpy.unique"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "\"\"\"transform\n\n        :param img:\n        :param lbl:\n        \"\"\"", "\n", "img", "=", "m", ".", "imresize", "(", "\n", "img", ",", "(", "self", ".", "img_size", "[", "0", "]", ",", "self", ".", "img_size", "[", "1", "]", ")", "\n", ")", "# uint8 with RGB mode", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# RGB -> BGR", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img", "-=", "self", ".", "mean", "\n", "if", "self", ".", "img_norm", ":", "\n", "# Resize scales images from 0 to 255, thus we need", "\n", "# to divide by 255.0", "\n", "            ", "img", "=", "img", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "# NHWC -> NCHW", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "classes", "=", "np", ".", "unique", "(", "lbl", ")", "\n", "lbl", "=", "lbl", ".", "astype", "(", "float", ")", "\n", "lbl", "=", "m", ".", "imresize", "(", "lbl", ",", "(", "self", ".", "img_size", "[", "0", "]", ",", "self", ".", "img_size", "[", "1", "]", ")", ",", "\"nearest\"", ",", "mode", "=", "\"F\"", ")", "\n", "lbl", "=", "lbl", ".", "astype", "(", "int", ")", "\n", "if", "not", "np", ".", "all", "(", "classes", "==", "np", ".", "unique", "(", "lbl", ")", ")", ":", "\n", "            ", "print", "(", "\"WARN: resizing labels yielded fewer classes\"", ")", "\n", "\n", "", "if", "not", "np", ".", "all", "(", "np", ".", "unique", "(", "lbl", "[", "lbl", "!=", "self", ".", "ignore_index", "]", ")", "<", "self", ".", "n_classes", ")", ":", "\n", "            ", "print", "(", "\"after det\"", ",", "classes", ",", "np", ".", "unique", "(", "lbl", ")", ")", "\n", "raise", "ValueError", "(", "\"Segmentation map contained invalid class values\"", ")", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.decode_segmap": [[194, 208], ["temp.copy", "temp.copy", "temp.copy", "range", "numpy.zeros"], "methods", ["None"], ["", "def", "decode_segmap", "(", "self", ",", "temp", ")", ":", "\n", "        ", "r", "=", "temp", ".", "copy", "(", ")", "\n", "g", "=", "temp", ".", "copy", "(", ")", "\n", "b", "=", "temp", ".", "copy", "(", ")", "\n", "for", "l", "in", "range", "(", "0", ",", "self", ".", "n_classes", ")", ":", "\n", "            ", "r", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "0", "]", "\n", "g", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "1", "]", "\n", "b", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "2", "]", "\n", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "temp", ".", "shape", "[", "0", "]", ",", "temp", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.cityscapes_loader.cityscapesLoader.encode_segmap": [[209, 216], ["None"], "methods", ["None"], ["", "def", "encode_segmap", "(", "self", ",", "mask", ")", ":", "\n", "# Put all void classes to zero", "\n", "        ", "for", "_voidc", "in", "self", ".", "void_classes", ":", "\n", "            ", "mask", "[", "mask", "==", "_voidc", "]", "=", "self", ".", "ignore_index", "\n", "", "for", "_validc", "in", "self", ".", "valid_classes", ":", "\n", "            ", "mask", "[", "mask", "==", "_validc", "]", "=", "self", ".", "class_map", "[", "_validc", "]", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vikolss_DACS.data.__init__.get_loader": [[9, 18], ["None"], "function", ["None"], ["# Distributed under MIT License.", "\n", "\n", "from", ".", "batchnorm", "import", "SynchronizedBatchNorm1d", ",", "SynchronizedBatchNorm2d", ",", "SynchronizedBatchNorm3d", "\n", "from", ".", "batchnorm", "import", "patch_sync_batchnorm", ",", "convert_model", "\n", "from", ".", "replicate", "import", "DataParallelWithCallback", ",", "patch_replication_callback", "\n", ""]], "home.repos.pwc.inspect_result.vikolss_DACS.data.__init__.get_data_path": [[19, 30], ["None"], "function", ["None"], []]}