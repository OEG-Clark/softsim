{"home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess._extract_schema_terms_qald": [[15, 27], ["utils.sparql_util.get_functions_from_sparql", "terms.extend", "utils.sparql_util.get_triples_qald", "terms.append", "print", "triple[].toPython"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_functions_from_sparql", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_qald"], ["def", "_extract_schema_terms_qald", "(", "x", ")", ":", "\n", "    ", "terms", "=", "[", "]", "\n", "try", ":", "\n", "        ", "triples", "=", "get_triples_qald", "(", "x", "[", "\"query\"", "]", "[", "\"sparql\"", "]", ")", "\n", "for", "triple", "in", "triples", ":", "\n", "            ", "terms", ".", "append", "(", "triple", "[", "1", "]", ".", "toPython", "(", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "return", "np", ".", "NAN", "\n", "", "functions", "=", "get_functions_from_sparql", "(", "x", "[", "\"query\"", "]", "[", "\"sparql\"", "]", ")", "\n", "terms", ".", "extend", "(", "functions", ")", "\n", "return", "terms", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess._extract_schema_terms_lcquad": [[29, 43], ["utils.sparql_util.get_functions_from_sparql", "terms.extend", "utils.sparql_util.get_triples_lcquad", "terms.append", "print", "triple[].toPython"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_functions_from_sparql", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_lcquad"], ["", "def", "_extract_schema_terms_lcquad", "(", "x", ")", ":", "\n", "    ", "terms", "=", "[", "]", "\n", "try", ":", "\n", "        ", "triples", "=", "get_triples_lcquad", "(", "x", "[", "\"query\"", "]", "[", "\"sparql\"", "]", ")", "\n", "for", "triple", "in", "triples", ":", "\n", "            ", "terms", ".", "append", "(", "triple", "[", "1", "]", ".", "toPython", "(", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "return", "np", ".", "NAN", "\n", "\n", "", "functions", "=", "get_functions_from_sparql", "(", "x", "[", "\"query\"", "]", "[", "\"sparql\"", "]", ")", "\n", "terms", ".", "extend", "(", "functions", ")", "\n", "\n", "return", "terms", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess._extract_schema_terms_lcquad2": [[44, 60], ["utils.sparql_util.get_functions_from_sparql", "terms.extend", "utils.sparql_util.get_triples_lcquad2", "terms.append", "triple[].toPython", "utils.sparql_util.get_triples_lcquad2", "utils.sparql_util.formalize_for_lcquad2", "terms.append", "triple[].toPython"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_functions_from_sparql", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_lcquad2", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_lcquad2", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.formalize_for_lcquad2"], ["", "def", "_extract_schema_terms_lcquad2", "(", "x", ",", "kb", ")", ":", "\n", "    ", "terms", "=", "[", "]", "\n", "try", ":", "\n", "        ", "triples", "=", "get_triples_lcquad2", "(", "x", "[", "\"query\"", "]", "[", "\"sparql\"", "]", ",", "kb", ")", "\n", "for", "triple", "in", "triples", ":", "\n", "            ", "terms", ".", "append", "(", "triple", "[", "1", "]", ".", "toPython", "(", ")", ")", "\n", "", "", "except", ":", "\n", "        ", "try", ":", "\n", "            ", "triples", "=", "get_triples_lcquad2", "(", "formalize_for_lcquad2", "(", "x", "[", "\"query\"", "]", "[", "\"sparql\"", "]", ")", ",", "kb", ")", "\n", "for", "triple", "in", "triples", ":", "\n", "                ", "terms", ".", "append", "(", "triple", "[", "1", "]", ".", "toPython", "(", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "return", "np", ".", "NAN", "\n", "", "", "functions", "=", "get_functions_from_sparql", "(", "x", "[", "\"query\"", "]", "[", "\"sparql\"", "]", ")", "\n", "terms", ".", "extend", "(", "functions", ")", "\n", "return", "terms", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess.process_qald": [[61, 86], ["train[].map", "test[].map", "pandas.concat", "qald[].map", "qald.dropna.apply", "qald.dropna.apply", "qald.dropna.dropna", "datasets.load_dataset().to_pandas", "datasets.load_dataset().to_pandas", "json.loads", "preprocess.process_qald.func"], "function", ["None"], ["", "def", "process_qald", "(", ")", ":", "\n", "\n", "    ", "train", "=", "load_dataset", "(", "\"kgqa_datasets/qald/qald.py\"", ",", "\"qald\"", ",", "split", "=", "\"train\"", ")", ".", "to_pandas", "(", ")", "[", "\n", "[", "\"id\"", ",", "\"question\"", ",", "\"query\"", ",", "\"answers\"", "]", "]", "\n", "test", "=", "load_dataset", "(", "\"kgqa_datasets/qald/qald.py\"", ",", "\"qald\"", ",", "split", "=", "\"test\"", ")", ".", "to_pandas", "(", ")", "[", "\n", "[", "\"id\"", ",", "\"question\"", ",", "\"query\"", ",", "\"answers\"", "]", "]", "\n", "\n", "train", "[", "\"id\"", "]", "=", "train", "[", "\"id\"", "]", ".", "map", "(", "lambda", "x", ":", "\"qald_train_\"", "+", "str", "(", "x", ")", ")", "\n", "test", "[", "\"id\"", "]", "=", "test", "[", "\"id\"", "]", ".", "map", "(", "lambda", "x", ":", "\"qald_test_\"", "+", "str", "(", "x", ")", ")", "\n", "\n", "qald", "=", "pd", ".", "concat", "(", "[", "train", ",", "test", "]", ")", "\n", "\n", "def", "func", "(", "xs", ")", ":", "\n", "        ", "for", "x", "in", "json", ".", "loads", "(", "xs", ")", ":", "\n", "            ", "if", "x", "[", "\"language\"", "]", "==", "\"en\"", ":", "\n", "                ", "return", "[", "x", "]", "\n", "\n", "", "", "", "qald", "[", "\"question\"", "]", "=", "qald", "[", "\"question\"", "]", ".", "map", "(", "lambda", "x", ":", "func", "(", "x", ")", ")", "\n", "qald", "[", "\"answers\"", "]", "=", "qald", ".", "apply", "(", "lambda", "x", ":", "json", ".", "loads", "(", "x", "[", "\"answers\"", "]", ")", ",", "axis", "=", "1", ")", "\n", "qald", "[", "\"schema_terms\"", "]", "=", "qald", ".", "apply", "(", "lambda", "x", ":", "_extract_schema_terms_qald", "(", "x", ")", ",", "axis", "=", "1", ")", "\n", "\n", "errors", "=", "qald", "[", "qald", "[", "'schema_terms'", "]", ".", "isnull", "(", ")", "]", "\n", "qald", "=", "qald", ".", "dropna", "(", ")", "\n", "\n", "return", "qald", ",", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess.process_lcquad": [[88, 112], ["train[].map", "test[].map", "pandas.concat", "lcquad.dropna.rename", "lcquad[].map", "lcquad[].map", "lcquad[].map", "lcquad.dropna.apply", "lcquad.dropna.dropna", "datasets.load_dataset().to_pandas", "datasets.load_dataset().to_pandas", "preprocess._extract_schema_terms_lcquad", "lcquad[].isnull", "datasets.load_dataset", "datasets.load_dataset", "str", "str"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess._extract_schema_terms_lcquad"], ["", "def", "process_lcquad", "(", ")", ":", "\n", "\n", "    ", "train", "=", "load_dataset", "(", "\"kgqa_datasets/lcquad_v1/lcquad_v1.py\"", ",", "\"lcquad\"", ",", "split", "=", "\"train\"", ")", ".", "to_pandas", "(", ")", "[", "\n", "[", "\"_id\"", ",", "\"corrected_question\"", ",", "\"sparql_query\"", "]", "]", "\n", "test", "=", "load_dataset", "(", "\"kgqa_datasets/lcquad_v1/lcquad_v1.py\"", ",", "\"lcquad\"", ",", "split", "=", "\"test\"", ")", ".", "to_pandas", "(", ")", "[", "\n", "[", "\"_id\"", ",", "\"corrected_question\"", ",", "\"sparql_query\"", "]", "]", "\n", "\n", "train", "[", "\"_id\"", "]", "=", "train", "[", "\"_id\"", "]", ".", "map", "(", "lambda", "x", ":", "\"lcquad_train_\"", "+", "str", "(", "x", ")", ")", "\n", "test", "[", "\"_id\"", "]", "=", "test", "[", "\"_id\"", "]", ".", "map", "(", "lambda", "x", ":", "\"lcquad_test_\"", "+", "str", "(", "x", ")", ")", "\n", "\n", "lcquad", "=", "pd", ".", "concat", "(", "[", "train", ",", "test", "]", ")", "\n", "lcquad", ".", "rename", "(", "columns", "=", "{", "\"_id\"", ":", "\"id\"", ",", "\"corrected_question\"", ":", "\"question\"", ",", "\"sparql_query\"", ":", "\"query\"", "}", ",", "inplace", "=", "True", ")", "\n", "lcquad", "[", "\"question\"", "]", "=", "lcquad", "[", "\"question\"", "]", ".", "map", "(", "lambda", "x", ":", "[", "{", "\"language\"", ":", "\"en\"", ",", "\"string\"", ":", "x", "}", "]", ")", "\n", "lcquad", "[", "\"query\"", "]", "=", "lcquad", "[", "\"query\"", "]", ".", "map", "(", "lambda", "x", ":", "{", "\"sparql\"", ":", "x", "}", ")", "\n", "\n", "lcquad", "[", "\"answers\"", "]", "=", "\"\"", "\n", "lcquad", "[", "\"answers\"", "]", "=", "lcquad", "[", "\"answers\"", "]", ".", "map", "(", "lambda", "x", ":", "[", "]", ")", "\n", "\n", "lcquad", "[", "\"schema_terms\"", "]", "=", "lcquad", ".", "apply", "(", "lambda", "x", ":", "_extract_schema_terms_lcquad", "(", "x", ")", ",", "axis", "=", "1", ")", "\n", "\n", "errors", "=", "lcquad", "[", "lcquad", "[", "'schema_terms'", "]", ".", "isnull", "(", ")", "]", "\n", "lcquad", "=", "lcquad", ".", "dropna", "(", ")", "\n", "\n", "return", "lcquad", ",", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess.process_lcquad2": [[114, 142], ["train[].map", "test[].map", "pandas.concat", "lcquad2.dropna.rename", "lcquad2[].map", "lcquad2.dropna.apply", "lcquad2.dropna.dropna", "datasets.load_dataset().to_pandas", "datasets.load_dataset().to_pandas", "lcquad2[].map", "lcquad2[].map", "preprocess._extract_schema_terms_lcquad2", "lcquad2[].isnull", "datasets.load_dataset", "datasets.load_dataset", "str", "str", "utils.sparql_util.add_missing_angle_brackets_lcquad2"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess._extract_schema_terms_lcquad2", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.add_missing_angle_brackets_lcquad2"], ["", "def", "process_lcquad2", "(", "kb", "=", "\"dbpedia\"", ")", ":", "\n", "\n", "    ", "config_name", "=", "f\"lcquad2-{kb}\"", "\n", "\n", "train", "=", "load_dataset", "(", "\"kgqa_datasets/lcquad_v2/lcquad_v2.py\"", ",", "config_name", ",", "split", "=", "\"train\"", ")", ".", "to_pandas", "(", ")", "[", "\n", "[", "\"uid\"", ",", "\"question\"", ",", "\"sparql\"", ",", "\"answer\"", "]", "]", "\n", "test", "=", "load_dataset", "(", "\"kgqa_datasets/lcquad_v2/lcquad_v2.py\"", ",", "config_name", ",", "split", "=", "\"test\"", ")", ".", "to_pandas", "(", ")", "[", "\n", "[", "\"uid\"", ",", "\"question\"", ",", "\"sparql\"", ",", "\"answer\"", "]", "]", "\n", "\n", "train", "[", "\"uid\"", "]", "=", "train", "[", "\"uid\"", "]", ".", "map", "(", "lambda", "x", ":", "\"lcquad2_train_\"", "+", "str", "(", "x", ")", ")", "\n", "test", "[", "\"uid\"", "]", "=", "test", "[", "\"uid\"", "]", ".", "map", "(", "lambda", "x", ":", "\"lcquad2_test_\"", "+", "str", "(", "x", ")", ")", "\n", "\n", "lcquad2", "=", "pd", ".", "concat", "(", "[", "train", ",", "test", "]", ")", "\n", "lcquad2", ".", "rename", "(", "columns", "=", "{", "\"uid\"", ":", "\"id\"", ",", "\"sparql\"", ":", "\"query\"", ",", "\"answer\"", ":", "\"answers\"", "}", ",", "\n", "inplace", "=", "True", ")", "\n", "lcquad2", "[", "\"question\"", "]", "=", "lcquad2", "[", "\"question\"", "]", ".", "map", "(", "lambda", "x", ":", "[", "{", "\"language\"", ":", "\"en\"", ",", "\"string\"", ":", "x", "}", "]", ")", "\n", "\n", "if", "kb", "==", "\"dbpedia\"", ":", "\n", "        ", "lcquad2", "[", "\"query\"", "]", "=", "lcquad2", "[", "\"query\"", "]", ".", "map", "(", "lambda", "x", ":", "{", "\"sparql\"", ":", "add_missing_angle_brackets_lcquad2", "(", "x", ")", "}", ")", "\n", "", "else", ":", "\n", "        ", "lcquad2", "[", "\"query\"", "]", "=", "lcquad2", "[", "\"query\"", "]", ".", "map", "(", "lambda", "x", ":", "{", "\"sparql\"", ":", "x", "}", ")", "\n", "\n", "", "lcquad2", "[", "\"schema_terms\"", "]", "=", "lcquad2", ".", "apply", "(", "lambda", "x", ":", "_extract_schema_terms_lcquad2", "(", "x", ",", "kb", ")", ",", "axis", "=", "1", ")", "\n", "\n", "errors", "=", "lcquad2", "[", "lcquad2", "[", "'schema_terms'", "]", ".", "isnull", "(", ")", "]", "\n", "lcquad2", "=", "lcquad2", ".", "dropna", "(", ")", "\n", "\n", "return", "lcquad2", ",", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess.get_tasks": [[144, 154], ["task_names.split.split", "tasks.append", "task_name.upper", "task_name.upper"], "function", ["None"], ["", "def", "get_tasks", "(", "task_names", ")", ":", "\n", "    ", "task_names", "=", "task_names", ".", "split", "(", "','", ")", "\n", "if", "\"all\"", "in", "task_names", ":", "\n", "        ", "tasks", "=", "TASKS", "\n", "", "else", ":", "\n", "        ", "tasks", "=", "[", "]", "\n", "for", "task_name", "in", "task_names", ":", "\n", "            ", "assert", "task_name", ".", "upper", "(", ")", "in", "TASKS", ",", "\"Task %s not found!\"", "%", "task_name", "\n", "tasks", ".", "append", "(", "task_name", ".", "upper", "(", ")", ")", "\n", "", "", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess.main": [[156, 196], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "preprocess.get_tasks", "pandas.DataFrame", "pandas.DataFrame", "open", "open.close", "json.dump", "json.dump", "os.path.isdir", "os.mkdir", "os.path.join", "open.write", "open.write", "pandas.concat", "pandas.concat", "questions.sample.sample", "json.loads", "open", "json.loads", "open", "preprocess.process_qald", "questions.sample.to_json", "os.path.join", "pd.concat.to_json", "os.path.join", "preprocess.process_lcquad", "preprocess.process_lcquad2", "pandas.DataFrame", "pandas.DataFrame", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess.get_tasks", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess.process_qald", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess.process_lcquad", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.preprocess.process_lcquad2"], ["", "def", "main", "(", "arguments", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"-t\"", ",", "\"--tasks\"", ",", "type", "=", "str", ",", "default", "=", "\"lcquad2\"", ",", "help", "=", "\"tasks to be processed as a comma separated string.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-d\"", ",", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"data_dir\"", ",", "help", "=", "\"directory to save the preprocessed datasets.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-s\"", ",", "\"--shuffle\"", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "\"whether to shuffle the datasets.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-r\"", ",", "\"--random_seed\"", ",", "type", "=", "int", ",", "default", "=", "\"42\"", ",", "help", "=", "\"random seed.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--kb_lcquad2\"", ",", "default", "=", "\"dbpedia\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--kb_endpoint\"", ",", "type", "=", "str", ",", "help", "=", "\"kb endpoint\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "arguments", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "data_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "data_dir", ")", "\n", "\n", "", "tasks", "=", "get_tasks", "(", "args", ".", "tasks", ")", "\n", "\n", "questions", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"id\"", ",", "\"question\"", ",", "\"query\"", ",", "\"schema_terms\"", ",", "\"answers\"", "]", ")", "\n", "error_sets", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"id\"", ",", "\"question\"", ",", "\"query\"", ",", "\"schema_terms\"", ",", "\"answers\"", "]", ")", "\n", "stats_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"stats.txt\"", ")", ",", "\"w\"", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "stats_file", ".", "write", "(", "f\"==============={task}===============\\n\"", ")", "\n", "if", "task", "==", "\"QALD\"", ":", "\n", "            ", "data", ",", "errors", "=", "process_qald", "(", ")", "\n", "", "elif", "task", "==", "\"LCQUAD\"", ":", "\n", "            ", "data", ",", "errors", "=", "process_lcquad", "(", ")", "\n", "", "elif", "task", "==", "\"LCQUAD2\"", ":", "\n", "            ", "data", ",", "errors", "=", "process_lcquad2", "(", "args", ".", "kb_lcquad2", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"id\"", ",", "\"question\"", ",", "\"query\"", ",", "\"schema_terms\"", ",", "\"answers\"", "]", ")", "\n", "errors", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"id\"", ",", "\"question\"", ",", "\"query\"", ",", "\"schema_terms\"", ",", "\"answers\"", "]", ")", "\n", "", "stats_file", ".", "write", "(", "f\"total: {len(data) + len(errors)}\\ndata: {len(data)}\\nerrors: {len(errors)}\\n\\n\"", ")", "\n", "questions", "=", "pd", ".", "concat", "(", "[", "questions", ",", "data", "]", ")", "\n", "error_sets", "=", "pd", ".", "concat", "(", "[", "error_sets", ",", "errors", "]", ")", "\n", "", "stats_file", ".", "close", "(", ")", "\n", "\n", "if", "args", ".", "shuffle", ":", "\n", "        ", "questions", "=", "questions", ".", "sample", "(", "frac", "=", "1", ",", "random_state", "=", "args", ".", "random_seed", ")", "\n", "\n", "", "json", ".", "dump", "(", "json", ".", "loads", "(", "questions", ".", "to_json", "(", "orient", "=", "\"records\"", ")", ")", ",", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"data_sets.json\"", ")", ",", "\"w\"", ")", ",", "indent", "=", "2", ")", "\n", "json", ".", "dump", "(", "json", ".", "loads", "(", "error_sets", ".", "to_json", "(", "orient", "=", "\"records\"", ")", ")", ",", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"errors.json\"", ")", ",", "\"w\"", ")", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.get_single_terms": [[11, 14], ["functools.reduce", "data[].values.tolist"], "function", ["None"], ["def", "get_single_terms", "(", "data", ")", ":", "\n", "    ", "single_terms", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "data", "[", "\"schema_terms\"", "]", ".", "values", ".", "tolist", "(", ")", ")", "\n", "return", "single_terms", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.get_schema_terms": [[15, 22], ["dict", "data.iterrows", "tuple", "len", "sorted", "tuple", "sorted"], "function", ["None"], ["", "def", "get_schema_terms", "(", "data", ")", ":", "\n", "    ", "schema_terms", "=", "dict", "(", ")", "\n", "\n", "for", "idx", ",", "row", "in", "data", ".", "iterrows", "(", ")", ":", "\n", "        ", "if", "tuple", "(", "sorted", "(", "row", "[", "\"schema_terms\"", "]", ")", ")", "not", "in", "schema_terms", ":", "\n", "            ", "schema_terms", "[", "tuple", "(", "sorted", "(", "row", "[", "\"schema_terms\"", "]", ")", ")", "]", "=", "len", "(", "schema_terms", ")", "\n", "", "", "return", "schema_terms", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.group_schema_terms": [[23, 32], ["dict", "data[].map", "tuple", "len", "resplit.group_schema_terms.func"], "function", ["None"], ["", "def", "group_schema_terms", "(", "data", ")", ":", "\n", "    ", "terms2group", "=", "dict", "(", ")", "\n", "def", "func", "(", "x", ")", ":", "\n", "        ", "if", "tuple", "(", "sorted", "(", "x", ")", ")", "not", "in", "terms2group", ":", "\n", "            ", "terms2group", "[", "tuple", "(", "sorted", "(", "x", ")", ")", "]", "=", "len", "(", "terms2group", ")", "\n", "", "return", "terms2group", "[", "tuple", "(", "sorted", "(", "x", ")", ")", "]", "\n", "", "data", "[", "\"schema_terms_group_idx\"", "]", "=", "data", "[", "\"schema_terms\"", "]", ".", "map", "(", "lambda", "x", ":", "func", "(", "x", ")", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.determine_level": [[33, 43], ["list", "set().difference", "tuple", "set", "sorted", "len", "set"], "function", ["None"], ["", "def", "determine_level", "(", "schema_terms", ",", "single_terms_train", ",", "schema_terms_train", ")", ":", "\n", "    ", "unseen_terms", "=", "list", "(", "set", "(", "schema_terms", ")", ".", "difference", "(", "set", "(", "single_terms_train", ")", ")", ")", "\n", "if", "tuple", "(", "sorted", "(", "schema_terms", ")", ")", "not", "in", "schema_terms_train", ":", "\n", "        ", "if", "len", "(", "unseen_terms", ")", "!=", "0", ":", "# zero-shot", "\n", "            ", "level", "=", "\"zero-shot\"", "\n", "", "else", ":", "\n", "            ", "level", "=", "\"compositional\"", "\n", "", "", "else", ":", "\n", "        ", "level", "=", "\"i.i.d.\"", "\n", "", "return", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_zeroshot_questions": [[45, 66], ["data[].tolist", "numpy.array", "sklearn.model_selection.GroupShuffleSplit", "dict", "sklearn.model_selection.GroupShuffleSplit.split", "dict.items", "list", "train_zeroshot_splits.append", "tuple", "sorted", "tuple", "sorted"], "function", ["None"], ["", "def", "sample_zeroshot_questions", "(", "data", ",", "sampling_ratio", ",", "n_splits", ",", "random_seed", ")", ":", "\n", "    ", "group_ids", "=", "data", "[", "\"schema_terms_group_idx\"", "]", ".", "tolist", "(", ")", "\n", "groups", "=", "np", ".", "array", "(", "group_ids", ")", "\n", "gss", "=", "GroupShuffleSplit", "(", "n_splits", "=", "n_splits", ",", "train_size", "=", "1", "-", "sampling_ratio", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "train_zeroshot_splits", "=", "[", "]", "\n", "\n", "unique_group_splits", "=", "dict", "(", ")", "\n", "for", "train_idx", ",", "zeroshot_idx", "in", "gss", ".", "split", "(", "X", "=", "data", ",", "groups", "=", "groups", ")", ":", "\n", "        ", "if", "tuple", "(", "sorted", "(", "train_idx", ")", ")", "not", "in", "unique_group_splits", ":", "\n", "            ", "unique_group_splits", "[", "tuple", "(", "sorted", "(", "train_idx", ")", ")", "]", "=", "zeroshot_idx", "\n", "\n", "", "", "for", "train_idx", ",", "zeroshot_idx", "in", "unique_group_splits", ".", "items", "(", ")", ":", "\n", "        ", "train_idx", "=", "list", "(", "train_idx", ")", "\n", "\n", "train_set", "=", "data", ".", "iloc", "[", "train_idx", "]", "\n", "zeroshot_set", "=", "data", ".", "iloc", "[", "zeroshot_idx", "]", "\n", "\n", "train_zeroshot_splits", ".", "append", "(", "(", "train_set", ",", "zeroshot_set", ")", ")", "\n", "\n", "", "return", "train_zeroshot_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_compositional_questions": [[67, 92], ["data[].tolist", "numpy.array", "sklearn.model_selection.GroupShuffleSplit", "dict", "sklearn.model_selection.GroupShuffleSplit.split", "dict.items", "list", "train_compos_splits.append", "tuple", "sorted", "tuple", "sorted"], "function", ["None"], ["", "def", "sample_compositional_questions", "(", "data", ",", "sampling_ratio", ",", "n_splits", ",", "random_seed", ")", ":", "\n", "\n", "    ", "if", "sampling_ratio", "==", "0.0", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "group_ids", "=", "data", "[", "\"schema_terms_group_idx\"", "]", ".", "tolist", "(", ")", "\n", "groups", "=", "np", ".", "array", "(", "group_ids", ")", "\n", "gss", "=", "GroupShuffleSplit", "(", "n_splits", "=", "n_splits", ",", "train_size", "=", "1", "-", "sampling_ratio", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "train_compos_splits", "=", "[", "]", "\n", "\n", "unique_group_splits", "=", "dict", "(", ")", "\n", "for", "train_idx", ",", "compo_idx", "in", "gss", ".", "split", "(", "X", "=", "data", ",", "groups", "=", "groups", ")", ":", "\n", "        ", "if", "tuple", "(", "sorted", "(", "train_idx", ")", ")", "not", "in", "unique_group_splits", ":", "\n", "            ", "unique_group_splits", "[", "tuple", "(", "sorted", "(", "train_idx", ")", ")", "]", "=", "compo_idx", "\n", "\n", "", "", "for", "train_idx", ",", "compo_idx", "in", "unique_group_splits", ".", "items", "(", ")", ":", "\n", "        ", "train_idx", "=", "list", "(", "train_idx", ")", "\n", "\n", "train_set", "=", "data", ".", "iloc", "[", "train_idx", "]", "\n", "compo_set", "=", "data", ".", "iloc", "[", "compo_idx", "]", "\n", "\n", "train_compos_splits", ".", "append", "(", "(", "train_set", ",", "compo_set", ")", ")", "\n", "\n", "", "return", "train_compos_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.data_filter": [[93, 104], ["resplit.get_single_terms", "resplit.get_schema_terms", "data_src[].map", "resplit.determine_level"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.get_single_terms", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.get_schema_terms", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.determine_level"], ["", "def", "data_filter", "(", "data_src", ",", "train_set", ")", ":", "\n", "\n", "    ", "single_schema_terms_train", "=", "get_single_terms", "(", "train_set", ")", "\n", "schema_terms_train", "=", "get_schema_terms", "(", "train_set", ")", "\n", "\n", "data_src", "[", "\"level\"", "]", "=", "data_src", "[", "\"schema_terms\"", "]", ".", "map", "(", "lambda", "x", ":", "determine_level", "(", "x", ",", "single_schema_terms_train", ",", "schema_terms_train", ")", ")", "\n", "zero_set", "=", "data_src", "[", "data_src", "[", "'level'", "]", "==", "\"zero-shot\"", "]", "\n", "compo_set", "=", "data_src", "[", "data_src", "[", "'level'", "]", "==", "\"compositional\"", "]", "\n", "iid_set", "=", "data_src", "[", "data_src", "[", "'level'", "]", "==", "\"i.i.d.\"", "]", "\n", "\n", "return", "zero_set", ",", "compo_set", ",", "iid_set", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.zeroshot_filter": [[106, 113], ["resplit.data_filter", "pandas.concat"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.data_filter"], ["", "def", "zeroshot_filter", "(", "zeroshot_set", ",", "train_set", ")", ":", "\n", "\n", "    ", "zeroshot_set", ",", "compositional_set", ",", "iid_set", "=", "data_filter", "(", "zeroshot_set", ",", "train_set", ")", "\n", "\n", "non_zeroshot_set", "=", "pd", ".", "concat", "(", "[", "compositional_set", ",", "iid_set", "]", ")", "\n", "\n", "return", "zeroshot_set", ",", "non_zeroshot_set", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.compositional_filter": [[115, 122], ["resplit.data_filter", "pandas.concat"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.data_filter"], ["", "def", "compositional_filter", "(", "compositional_set", ",", "train_set", ")", ":", "\n", "\n", "    ", "zeroshot_set", ",", "compositional_set", ",", "iid_set", "=", "data_filter", "(", "compositional_set", ",", "train_set", ")", "\n", "\n", "non_compositional_set", "=", "pd", ".", "concat", "(", "[", "zeroshot_set", ",", "iid_set", "]", ")", "\n", "\n", "return", "compositional_set", ",", "non_compositional_set", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_iid_questions": [[124, 127], ["sklearn.model_selection.train_test_split"], "function", ["None"], ["", "def", "sample_iid_questions", "(", "data", ",", "sampling_ratio", ",", "random_seed", ")", ":", "\n", "    ", "train_set", ",", "iid_set", "=", "train_test_split", "(", "data", ",", "train_size", "=", "1", "-", "sampling_ratio", ",", "random_state", "=", "random_seed", ")", "\n", "return", "train_set", ",", "iid_set", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.main": [[129, 308], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pandas.read_json", "resplit.group_schema_terms", "len", "pandas.DataFrame", "enumerate", "os.path.isdir", "os.mkdir", "resplit.sample_zeroshot_questions", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "train_zero_compo_iid_splits.append", "os.path.join", "json.dump", "json.dump", "open", "open.write", "open.write", "open.close", "resplit.zeroshot_filter", "pandas.concat", "candidate_zero_compo_iid_train_splits.append", "resplit.sample_compositional_questions", "resplit.data_filter", "pandas.concat", "pandas.concat", "pandas.concat", "resplit.data_filter", "pandas.concat", "pandas.concat", "pandas.concat", "resplit.data_filter", "pandas.concat", "pandas.concat", "pandas.concat", "pandas.concat", "pandas.concat", "pandas.concat", "os.path.isdir", "os.makedirs", "pandas.concat", "sklearn.model_selection.train_test_split", "json.dump", "json.loads", "open", "json.loads", "open", "os.path.join", "open.write", "open.write", "resplit.compositional_filter", "pandas.concat", "candidate_zero_compo_iid_train_splits.append", "resplit.sample_iid_questions", "candidate_zero_compo_iid_train_splits.append", "len", "str", "json.loads", "open", "pd.concat.to_json", "os.path.join", "test.to_json", "os.path.join", "resplit.sample_zeroshot_questions", "resplit.sample_compositional_questions", "validation.to_json", "os.path.join", "resplit.zeroshot_filter", "pandas.concat", "resplit.compositional_filter", "pandas.concat", "resplit.sample_iid_questions", "candidate_zero_compo_iid_train_splits.append", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "resplit.sample_compositional_questions", "resplit.sample_iid_questions", "candidate_zero_compo_iid_train_splits.append", "resplit.compositional_filter", "pandas.concat", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "resplit.sample_iid_questions", "candidate_zero_compo_iid_train_splits.append", "candidate_zero_compo_iid_train_splits.append"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.group_schema_terms", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_zeroshot_questions", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.zeroshot_filter", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_compositional_questions", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.data_filter", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.data_filter", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.data_filter", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.compositional_filter", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_iid_questions", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_zeroshot_questions", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_compositional_questions", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.zeroshot_filter", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.compositional_filter", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_iid_questions", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_compositional_questions", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_iid_questions", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.compositional_filter", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.None.resplit.sample_iid_questions"], ["", "def", "main", "(", "arguments", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_id\"", ",", "type", "=", "str", ",", "help", "=", "\"the unique identifier of the dataset newly generated.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input_path\"", ",", "type", "=", "str", ",", "help", "=", "\"full path of datasets to be resplitted.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "default", "=", "\"output_dir\"", ",", "type", "=", "str", ",", "help", "=", "\"directory to save the resplitted datasets.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_splits_zero\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"the number of splits for zeroshot generalization.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_splits_compo\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"the number of splits for compositional generalization.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_seed\"", ",", "default", "=", "42", ",", "type", "=", "int", ",", "help", "=", "\"random seed.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sampling_ratio_zero\"", ",", "default", "=", ".4", ",", "type", "=", "float", ",", "help", "=", "\"the ratio for sampling zeroshot questions from the data set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sampling_ratio_compo\"", ",", "default", "=", ".1", ",", "type", "=", "float", ",", "help", "=", "\"the ratio for sampling compositional questions from the data set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sampling_ratio_iid\"", ",", "default", "=", ".1", ",", "type", "=", "float", ",", "help", "=", "\"the ratio for sampling iid questions from the data set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--validation_size\"", ",", "default", "=", ".33", ",", "type", "=", "float", ",", "help", "=", "\"the size of validation set splitted from the test size.\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "arguments", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "output_dir", ")", "\n", "\n", "", "data_sets", "=", "pd", ".", "read_json", "(", "args", ".", "input_path", ",", "orient", "=", "\"records\"", ")", "\n", "\n", "data_sets", "=", "group_schema_terms", "(", "data_sets", ")", "\n", "num_samples", "=", "len", "(", "data_sets", ")", "\n", "\n", "empty_data", "=", "pd", ".", "DataFrame", "(", "columns", "=", "data_sets", ".", "columns", ")", "\n", "candidate_zero_compo_iid_train_splits", "=", "[", "]", "\n", "\n", "if", "args", ".", "sampling_ratio_iid", "==", "0.0", "and", "args", ".", "sampling_ratio_compo", "==", "0.0", "and", "args", ".", "sampling_ratio_zero", ">", "0.0", ":", "\n", "        ", "candidate_train_zeroshot_splits", "=", "sample_zeroshot_questions", "(", "data_sets", ",", "args", ".", "sampling_ratio_zero", ",", "\n", "args", ".", "n_splits_zero", ",", "\n", "args", ".", "random_seed", ")", "\n", "for", "train_set_1", ",", "zeroshot_set_1", "in", "candidate_train_zeroshot_splits", ":", "\n", "            ", "zeroshot_set", ",", "non_zeroshot_set", "=", "zeroshot_filter", "(", "zeroshot_set_1", ",", "train_set_1", ")", "\n", "train_set", "=", "pd", ".", "concat", "(", "[", "train_set_1", ",", "non_zeroshot_set", "]", ")", "\n", "candidate_zero_compo_iid_train_splits", ".", "append", "(", "(", "zeroshot_set", ",", "empty_data", ",", "empty_data", ",", "train_set", ")", ")", "\n", "", "", "elif", "args", ".", "sampling_ratio_iid", "==", "0.0", "and", "args", ".", "sampling_ratio_compo", ">", "0.0", "and", "args", ".", "sampling_ratio_zero", "==", "0.0", ":", "\n", "        ", "candidate_train_compo_splits", "=", "sample_compositional_questions", "(", "data_sets", ",", "\n", "args", ".", "sampling_ratio_compo", ",", "\n", "args", ".", "n_splits_compo", ",", "args", ".", "random_seed", ")", "\n", "for", "train_set_2", ",", "compositional_set_1", "in", "candidate_train_compo_splits", ":", "\n", "            ", "compositional_set", ",", "non_compositional_set", "=", "compositional_filter", "(", "compositional_set_1", ",", "train_set_2", ")", "\n", "train_set", "=", "pd", ".", "concat", "(", "[", "train_set_2", ",", "non_compositional_set", "]", ")", "\n", "candidate_zero_compo_iid_train_splits", ".", "append", "(", "(", "empty_data", ",", "compositional_set", ",", "empty_data", ",", "train_set", ")", ")", "\n", "", "", "elif", "args", ".", "sampling_ratio_iid", ">", "0.0", "and", "args", ".", "sampling_ratio_compo", "==", "0.0", "and", "args", ".", "sampling_ratio_zero", "==", "0.0", ":", "\n", "        ", "train_set", ",", "iid_set", "=", "sample_iid_questions", "(", "data_sets", ",", "args", ".", "sampling_ratio_iid", ",", "args", ".", "random_seed", ")", "\n", "candidate_zero_compo_iid_train_splits", ".", "append", "(", "(", "empty_data", ",", "empty_data", ",", "iid_set", ",", "train_set", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "sampling_ratio_zero", ">", "0.0", ":", "\n", "            ", "candidate_train_zeroshot_splits", "=", "sample_zeroshot_questions", "(", "data_sets", ",", "args", ".", "sampling_ratio_zero", ",", "args", ".", "n_splits_zero", ",", "\n", "args", ".", "random_seed", ")", "\n", "\n", "for", "train_set_1", ",", "zeroshot_set_1", "in", "candidate_train_zeroshot_splits", ":", "\n", "\n", "                ", "zeroshot_set", ",", "non_zeroshot_set", "=", "zeroshot_filter", "(", "zeroshot_set_1", ",", "train_set_1", ")", "\n", "intermediate_train_set_1", "=", "pd", ".", "concat", "(", "[", "train_set_1", ",", "non_zeroshot_set", "]", ")", "\n", "\n", "if", "args", ".", "sampling_ratio_compo", ">", "0.0", ":", "\n", "                    ", "candidate_train_compo_splits", "=", "sample_compositional_questions", "(", "intermediate_train_set_1", ",", "args", ".", "sampling_ratio_compo", ",", "\n", "args", ".", "n_splits_compo", ",", "args", ".", "random_seed", ")", "\n", "for", "train_set_2", ",", "compositional_set_1", "in", "candidate_train_compo_splits", ":", "\n", "                        ", "compositional_set", ",", "non_compositional_set", "=", "compositional_filter", "(", "compositional_set_1", ",", "train_set_2", ")", "\n", "intermediate_train_set_2", "=", "pd", ".", "concat", "(", "[", "train_set_2", ",", "non_compositional_set", "]", ")", "\n", "\n", "if", "args", ".", "sampling_ratio_iid", ">", "0.0", ":", "\n", "                            ", "train_set", ",", "iid_set", "=", "sample_iid_questions", "(", "intermediate_train_set_2", ",", "args", ".", "sampling_ratio_iid", ",", "args", ".", "random_seed", ")", "\n", "candidate_zero_compo_iid_train_splits", ".", "append", "(", "(", "zeroshot_set", ",", "compositional_set", ",", "iid_set", ",", "train_set", ")", ")", "\n", "", "else", ":", "\n", "                            ", "candidate_zero_compo_iid_train_splits", ".", "append", "(", "\n", "(", "zeroshot_set", ",", "compositional_set", ",", "empty_data", ",", "intermediate_train_set_2", ")", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "train_set", ",", "iid_set", "=", "sample_iid_questions", "(", "intermediate_train_set_1", ",", "args", ".", "sampling_ratio_iid", ",", "\n", "args", ".", "random_seed", ")", "\n", "candidate_zero_compo_iid_train_splits", ".", "append", "(", "(", "zeroshot_set", ",", "empty_data", ",", "iid_set", ",", "train_set", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "candidate_train_compo_splits", "=", "sample_compositional_questions", "(", "data_sets", ",", "\n", "args", ".", "sampling_ratio_compo", ",", "\n", "args", ".", "n_splits_compo", ",", "args", ".", "random_seed", ")", "\n", "for", "train_set_2", ",", "compositional_set_1", "in", "candidate_train_compo_splits", ":", "\n", "                ", "compositional_set", ",", "non_compositional_set", "=", "compositional_filter", "(", "compositional_set_1", ",", "train_set_2", ")", "\n", "intermediate_train_set_2", "=", "pd", ".", "concat", "(", "[", "train_set_2", ",", "non_compositional_set", "]", ")", "\n", "\n", "train_set", ",", "iid_set", "=", "sample_iid_questions", "(", "intermediate_train_set_2", ",", "args", ".", "sampling_ratio_iid", ",", "\n", "args", ".", "random_seed", ")", "\n", "candidate_zero_compo_iid_train_splits", ".", "append", "(", "(", "empty_data", ",", "compositional_set", ",", "iid_set", ",", "train_set", ")", ")", "\n", "\n", "", "", "", "train_zero_compo_iid_splits", "=", "[", "]", "\n", "\n", "for", "zero", ",", "compo", ",", "iid", ",", "train", "in", "candidate_zero_compo_iid_train_splits", ":", "\n", "\n", "        ", "zero_set_tmp", "=", "pd", ".", "DataFrame", "(", "columns", "=", "train", ".", "columns", ")", "\n", "compo_set_tmp", "=", "pd", ".", "DataFrame", "(", "columns", "=", "train", ".", "columns", ")", "\n", "iid_set_tmp", "=", "pd", ".", "DataFrame", "(", "columns", "=", "train", ".", "columns", ")", "\n", "\n", "if", "not", "zero", ".", "empty", ":", "\n", "            ", "zero_set_1", ",", "compo_set_1", ",", "iid_set_1", "=", "data_filter", "(", "zero", ",", "train", ")", "\n", "zero_set_tmp", "=", "pd", ".", "concat", "(", "[", "zero_set_tmp", ",", "zero_set_1", "]", ")", "\n", "compo_set_tmp", "=", "pd", ".", "concat", "(", "[", "compo_set_tmp", ",", "compo_set_1", "]", ")", "\n", "iid_set_tmp", "=", "pd", ".", "concat", "(", "[", "iid_set_tmp", ",", "iid_set_1", "]", ")", "\n", "\n", "", "if", "not", "compo", ".", "empty", ":", "\n", "            ", "zero_set_2", ",", "compo_set_2", ",", "iid_set_2", "=", "data_filter", "(", "compo", ",", "train", ")", "\n", "zero_set_tmp", "=", "pd", ".", "concat", "(", "[", "zero_set_tmp", ",", "zero_set_2", "]", ")", "\n", "compo_set_tmp", "=", "pd", ".", "concat", "(", "[", "compo_set_tmp", ",", "compo_set_2", "]", ")", "\n", "iid_set_tmp", "=", "pd", ".", "concat", "(", "[", "iid_set_tmp", ",", "iid_set_2", "]", ")", "\n", "\n", "", "if", "not", "iid", ".", "empty", ":", "\n", "            ", "zero_set_3", ",", "compo_set_3", ",", "iid_set_3", "=", "data_filter", "(", "iid", ",", "train", ")", "\n", "zero_set_tmp", "=", "pd", ".", "concat", "(", "[", "zero_set_tmp", ",", "zero_set_3", "]", ")", "\n", "compo_set_tmp", "=", "pd", ".", "concat", "(", "[", "compo_set_tmp", ",", "compo_set_3", "]", ")", "\n", "iid_set_tmp", "=", "pd", ".", "concat", "(", "[", "iid_set_tmp", ",", "iid_set_3", "]", ")", "\n", "\n", "", "if", "zero", ".", "empty", ":", "\n", "            ", "train", "=", "pd", ".", "concat", "(", "[", "train", ",", "zero_set_tmp", "]", ")", "\n", "zero_set", "=", "empty_data", "\n", "", "else", ":", "\n", "            ", "zero_set", "=", "zero_set_tmp", "\n", "\n", "", "if", "iid", ".", "empty", ":", "\n", "            ", "train", "=", "pd", ".", "concat", "(", "[", "train", ",", "iid_set_tmp", "]", ")", "\n", "iid_set", "=", "empty_data", "\n", "", "else", ":", "\n", "            ", "iid_set", "=", "iid_set_tmp", "\n", "\n", "", "if", "compo", ".", "empty", ":", "\n", "            ", "train", "=", "pd", ".", "concat", "(", "[", "train", ",", "compo_set_tmp", "]", ")", "\n", "compo_set", "=", "empty_data", "\n", "", "else", ":", "\n", "            ", "compo_set", "=", "compo_set_tmp", "\n", "\n", "", "train_zero_compo_iid_splits", ".", "append", "(", "(", "train", ",", "zero_set", ",", "compo_set", ",", "iid_set", ")", ")", "\n", "\n", "", "for", "idx", ",", "splits", "in", "enumerate", "(", "train_zero_compo_iid_splits", ",", "1", ")", ":", "\n", "\n", "        ", "split_dir_name", "=", "\"new_split_\"", "+", "str", "(", "idx", ")", "if", "len", "(", "train_zero_compo_iid_splits", ")", ">", "1", "else", "\"new_split\"", "\n", "split_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "split_dir_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "split_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "split_dir", ")", "\n", "\n", "", "train", ",", "zero", ",", "compo", ",", "iid", "=", "splits", "\n", "\n", "train", "=", "train", "[", "[", "\"id\"", ",", "\"question\"", ",", "\"query\"", ",", "\"answers\"", ",", "\"schema_terms\"", "]", "]", "\n", "test", "=", "pd", ".", "concat", "(", "[", "zero", ",", "compo", ",", "iid", "]", ")", "[", "[", "\"id\"", ",", "\"question\"", ",", "\"query\"", ",", "\"answers\"", ",", "\"schema_terms\"", ",", "\"level\"", "]", "]", "\n", "\n", "if", "args", ".", "validation_size", ">", "0.0", ":", "\n", "            ", "validation", ",", "test", ",", "_", ",", "_", "=", "train_test_split", "(", "test", ",", "test", "[", "\"level\"", "]", ",", "train_size", "=", "args", ".", "validation_size", ",", "stratify", "=", "test", "[", "\"level\"", "]", ",", "random_state", "=", "args", ".", "random_seed", ")", "\n", "json_rslt_valid", "=", "{", "\n", "\"dataset\"", ":", "{", "\n", "\"id\"", ":", "f\"{args.dataset_id}-valid\"", "\n", "}", ",", "\n", "\"questions\"", ":", "json", ".", "loads", "(", "validation", ".", "to_json", "(", "orient", "=", "\"records\"", ")", ")", "\n", "}", "\n", "json", ".", "dump", "(", "json_rslt_valid", ",", "open", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "f\"{args.dataset_id}-valid.json\"", ")", ",", "\"w\"", ")", ",", "indent", "=", "2", ")", "\n", "\n", "", "json_rslt_train", "=", "{", "\n", "\"dataset\"", ":", "{", "\n", "\"id\"", ":", "f\"{args.dataset_id}-train\"", "\n", "}", ",", "\n", "\"questions\"", ":", "json", ".", "loads", "(", "train", ".", "to_json", "(", "orient", "=", "\"records\"", ")", ")", "\n", "}", "\n", "json", ".", "dump", "(", "json_rslt_train", ",", "open", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "f\"{args.dataset_id}-train.json\"", ")", ",", "\"w\"", ")", ",", "indent", "=", "2", ")", "\n", "json_rslt_test", "=", "{", "\n", "\"dataset\"", ":", "{", "\n", "\"id\"", ":", "f\"{args.dataset_id}-test\"", "\n", "}", ",", "\n", "\"questions\"", ":", "json", ".", "loads", "(", "test", ".", "to_json", "(", "orient", "=", "\"records\"", ")", ")", "\n", "}", "\n", "json", ".", "dump", "(", "json_rslt_test", ",", "open", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "f\"{args.dataset_id}-test.json\"", ")", ",", "\"w\"", ")", ",", "indent", "=", "2", ")", "\n", "\n", "stats_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "split_dir", ",", "\"stats.txt\"", ")", ",", "\"w\"", ")", "\n", "stats_file", ".", "write", "(", "\"==============Split %d==============\\n\"", "%", "idx", ")", "\n", "if", "args", ".", "validation_size", ">", "0.0", ":", "\n", "            ", "stats_file", ".", "write", "(", "\n", "f\"total: {num_samples}\\ntrain: {len(train)} ({len(train)/num_samples*100} %%)\\nvalid: {len(validation)}({len(validation)/num_samples*100} %%)\\ntest: {len(test)}({len(test)/num_samples*100} %%)\\nzero: {len(zero)} ({len(zero)/num_samples*100} %%)\\ncompo: {len(compo)} ({len(compo)/num_samples*100} %%)\\niid: {len(iid)} ({len(iid)/num_samples*100} %%)\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "stats_file", ".", "write", "(", "\n", "f\"total: {num_samples}\\ntrain: {len(train)} ({len(train) / num_samples * 100} %%)\\ntest: {len(test)}({len(test) / num_samples * 100} %%)\\nzero: {len(zero)} ({len(zero) / num_samples * 100} %%)\\ncompo: {len(compo)} ({len(compo) / num_samples * 100} %%)\\niid: {len(iid)} ({len(iid) / num_samples * 100} %%)\"", "\n", ")", "\n", "", "stats_file", ".", "write", "(", "\"\\n\\n\"", ")", "\n", "stats_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.kb_interface.KB_query": [[4, 11], ["SPARQLWrapper.SPARQLWrapper", "SPARQLWrapper.SPARQLWrapper.setQuery", "SPARQLWrapper.SPARQLWrapper.setReturnFormat", "SPARQLWrapper.SPARQLWrapper.query().convert", "SPARQLWrapper.SPARQLWrapper.query"], "function", ["None"], ["def", "KB_query", "(", "_query", ",", "kb_endpoint", ")", ":", "\n", "    ", "sparql", "=", "SPARQLWrapper", "(", "kb_endpoint", ")", "\n", "sparql", ".", "setQuery", "(", "_query", ")", "\n", "sparql", ".", "setReturnFormat", "(", "JSON", ")", "\n", "# sparql.setTimeout(5)", "\n", "response", "=", "sparql", ".", "query", "(", ")", ".", "convert", "(", ")", "\n", "return", "response", "", "", ""]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_functions_from_sparql": [[12, 49], ["re.compile", "re.compile.findall", "re.compile", "re.compile.findall", "re.compile", "re.compile.findall", "re.compile", "re.compile.findall", "re.compile", "re.compile.findall", "re.compile", "re.compile.findall", "functions.append", "functions.extend", "functions.extend", "functions.extend", "functions.extend", "functions.extend", "len", "functions.append", "len", "len", "lt.strip", "len", "lq.strip", "len", "gt.strip", "len", "ge.strip", "len", "neq.strip", "lt.strip", "lq.strip", "gt.strip", "ge.strip", "neq.strip"], "function", ["None"], ["def", "get_functions_from_sparql", "(", "sparql", ")", ":", "\n", "    ", "functions", "=", "[", "]", "\n", "# count function", "\n", "count_pattern", "=", "re", ".", "compile", "(", "\"(?:COUNT|count)\"", ")", "\n", "count_strings", "=", "count_pattern", ".", "findall", "(", "sparql", ")", "\n", "if", "count_strings", "and", "len", "(", "count_strings", ")", ">", "0", ":", "\n", "        ", "functions", ".", "append", "(", "\"count\"", ")", "\n", "# comparative functions", "\n", "", "lt_pattern", "=", "re", ".", "compile", "(", "\"\\ <\\ \"", ")", "\n", "lt_strings", "=", "lt_pattern", ".", "findall", "(", "sparql", ")", "\n", "if", "lt_strings", "and", "len", "(", "lt_strings", ")", ">", "0", ":", "\n", "        ", "lt_strings", "=", "[", "lt", ".", "strip", "(", ")", "for", "lt", "in", "lt_strings", "if", "lt", ".", "strip", "(", ")", "==", "\"<\"", "]", "\n", "functions", ".", "extend", "(", "lt_strings", ")", "\n", "", "lq_pattern", "=", "re", ".", "compile", "(", "\"\\ <=\\ \"", ")", "\n", "lq_strings", "=", "lq_pattern", ".", "findall", "(", "sparql", ")", "\n", "if", "lq_strings", "and", "len", "(", "lq_strings", ")", ">", "0", ":", "\n", "        ", "lq_strings", "=", "[", "lq", ".", "strip", "(", ")", "for", "lq", "in", "lq_strings", "if", "lq", ".", "strip", "(", ")", "==", "\"<=\"", "]", "\n", "functions", ".", "extend", "(", "lq_strings", ")", "\n", "", "gt_pattern", "=", "re", ".", "compile", "(", "\"\\ >\\ \"", ")", "\n", "gt_strings", "=", "gt_pattern", ".", "findall", "(", "sparql", ")", "\n", "if", "gt_strings", "and", "len", "(", "gt_strings", ")", ">", "0", ":", "\n", "        ", "gt_strings", "=", "[", "gt", ".", "strip", "(", ")", "for", "gt", "in", "gt_strings", "if", "gt", ".", "strip", "(", ")", "==", "\">\"", "]", "\n", "functions", ".", "extend", "(", "gt_strings", ")", "\n", "", "ge_pattern", "=", "re", ".", "compile", "(", "\"\\ >=\\ \"", ")", "\n", "ge_strings", "=", "ge_pattern", ".", "findall", "(", "sparql", ")", "\n", "if", "ge_strings", "and", "len", "(", "ge_strings", ")", ">", "0", ":", "\n", "        ", "ge_strings", "=", "[", "ge", ".", "strip", "(", ")", "for", "ge", "in", "ge_strings", "if", "ge", ".", "strip", "(", ")", "==", "\">=\"", "]", "\n", "functions", ".", "extend", "(", "ge_strings", ")", "\n", "", "neq_pattern", "=", "re", ".", "compile", "(", "\"\\ !=\\ \"", ")", "\n", "neq_strings", "=", "neq_pattern", ".", "findall", "(", "sparql", ")", "\n", "if", "neq_strings", "and", "len", "(", "neq_strings", ")", ">", "0", ":", "\n", "        ", "neq_strings", "=", "[", "neq", ".", "strip", "(", ")", "for", "neq", "in", "neq_strings", "if", "neq", ".", "strip", "(", ")", "==", "\"!=\"", "]", "\n", "functions", ".", "extend", "(", "neq_strings", ")", "\n", "\n", "", "if", "len", "(", "functions", ")", "==", "0", ":", "\n", "        ", "functions", ".", "append", "(", "\"none\"", ")", "\n", "", "return", "functions", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_grailqa": [[51, 53], ["sparql_util._filter_extracted_triples", "sparql_util.extract_triples"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util._filter_extracted_triples", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.extract_triples"], ["", "def", "get_triples_grailqa", "(", "query", ",", "pattern", "=", "None", ")", ":", "\n", "    ", "return", "_filter_extracted_triples", "(", "extract_triples", "(", "query", ")", ",", "pattern", "=", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_graphquestions": [[55, 57], ["sparql_util._filter_extracted_triples", "sparql_util.extract_triples"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util._filter_extracted_triples", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.extract_triples"], ["", "def", "get_triples_graphquestions", "(", "query", ",", "pattern", "=", "None", ")", ":", "\n", "    ", "return", "_filter_extracted_triples", "(", "extract_triples", "(", "query", ")", ",", "pattern", "=", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_cwq": [[59, 75], ["re.compile", "re.compile.findall", "sparql_util._filter_extracted_triples", "sparql_util.extract_triples", "len", "re.compile", "query.replace.replace", "re.compile.findall"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util._filter_extracted_triples", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.extract_triples"], ["", "def", "get_triples_cwq", "(", "query", ",", "pattern", "=", "None", ")", ":", "\n", "    ", "prefixes", "=", "\"\"\"\n        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n        PREFIX wd: <http://www.wikidata.org/entity/> \n        PREFIX wdt: <http://www.wikidata.org/prop/direct/> \n    \"\"\"", "\n", "query", "=", "prefixes", "+", "query", "\n", "# replace COUNT() with COUNT () to avoid parsing error", "\n", "pattern_1", "=", "re", ".", "compile", "(", "\"(?:COUNT|count)\\(\\?[a-zA-Z0-9]+\\)\"", ")", "\n", "count_strings", "=", "pattern_1", ".", "findall", "(", "query", ")", "\n", "if", "count_strings", "and", "len", "(", "count_strings", ")", "!=", "0", ":", "\n", "        ", "for", "count_string", "in", "count_strings", ":", "\n", "            ", "pattern_2", "=", "re", ".", "compile", "(", "\"\\?[a-zA-Z0-9]+\"", ")", "\n", "variable", "=", "pattern_2", ".", "findall", "(", "count_string", ")", "[", "0", "]", "\n", "query", "=", "query", ".", "replace", "(", "count_string", ",", "variable", ")", "\n", "", "", "return", "_filter_extracted_triples", "(", "extract_triples", "(", "query", ")", ",", "pattern", "=", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.add_missing_angle_brackets_lcquad2": [[77, 88], ["re.search().group", "where_clause.strip.strip().strip", "where_clause.strip.strip", "re.findall", "query.replace.find", "re.search", "where_clause.strip.strip", "query.replace.replace"], "function", ["None"], ["", "def", "add_missing_angle_brackets_lcquad2", "(", "query", ")", ":", "\n", "    ", "where_clause", "=", "re", ".", "search", "(", "big_bracket_pattern", ",", "query", ")", ".", "group", "(", "0", ")", "\n", "where_clause", "=", "where_clause", ".", "strip", "(", "\"{\"", ")", ".", "strip", "(", "\"}\"", ")", "\n", "where_clause", "=", "where_clause", ".", "strip", "(", "\" \"", ")", "\n", "uris", "=", "re", ".", "findall", "(", "r'https?://[^\\s<>\"]+|www\\.[^\\s<>\"]+'", ",", "where_clause", ")", "\n", "for", "uri", "in", "uris", ":", "\n", "        ", "start_pos", "=", "query", ".", "find", "(", "uri", ")", "\n", "s_pre", "=", "query", "[", "start_pos", "-", "1", "]", "\n", "if", "s_pre", "!=", "\"<\"", ":", "\n", "            ", "query", "=", "query", ".", "replace", "(", "uri", ",", "\"<\"", "+", "uri", "+", "\">\"", ")", "\n", "", "", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.formalize_for_lcquad2": [[90, 138], ["re.search().group", "sparql.replace().split", "where_clause.replace().replace.strip().strip", "where_clause.replace().replace.strip", "re.findall", "re.findall", "list", "dict", "dict.items", "set", "where_clause.replace().replace.replace", "where_clause.replace().replace.replace", "where_clause.replace().replace.replace().replace", "x.strip", "re.search", "sparql.replace", "where_clause.replace().replace.strip", "errors.append", "where_clause.replace().replace.split", "new_where_clause.replace.replace", "new_where_clause.replace.replace", "os.path.split", "uri.split", "where_clause.replace().replace.replace"], "function", ["None"], ["", "def", "formalize_for_lcquad2", "(", "sparql", ")", ":", "\n", "    ", "prefixes", "=", "[", "\"<http://dbpedia.org/resource/\"", ",", "\"<http://dbpedia.org/property/\"", ",", "\n", "\"<http://dbpedia.org/ontology/\"", ",", "\"<http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"<http://www.wikidata.org/entity/\"", ",", "\"<http://wikidata.dbpedia.org/resource/\"", ",", "\n", "\">\"", "]", "\n", "prefixes_2", "=", "[", "\"http://dbpedia.org/resource/\"", ",", "\"http://dbpedia.org/property/\"", ",", "\n", "\"http://dbpedia.org/ontology/\"", ",", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", ",", "\n", "\"http://www.wikidata.org/entity/\"", ",", "\"http://wikidata.dbpedia.org/resource/\"", "]", "\n", "where_clause", "=", "re", ".", "search", "(", "big_bracket_pattern", ",", "sparql", ")", ".", "group", "(", "0", ")", "\n", "left", ",", "right", "=", "sparql", ".", "replace", "(", "where_clause", ",", "\"###\"", ")", ".", "split", "(", "\"###\"", ")", "\n", "where_clause", "=", "where_clause", ".", "strip", "(", "\"{\"", ")", ".", "strip", "(", "\"}\"", ")", "\n", "where_clause", "=", "where_clause", ".", "strip", "(", "\" \"", ")", "\n", "\n", "uris_1", "=", "re", ".", "findall", "(", "r'https?://[^\\s<>\"]+|www\\.[^\\s<>\"]+'", ",", "where_clause", ")", "\n", "uris_2", "=", "re", ".", "findall", "(", "angle_bracket_pattern", ",", "where_clause", ")", "\n", "uris", "=", "list", "(", "set", "(", "uris_1", "+", "uris_2", ")", ")", "\n", "id2links", "=", "dict", "(", ")", "\n", "errors", "=", "[", "]", "\n", "\n", "for", "uri", "in", "uris", ":", "\n", "        ", "if", "\"http\"", "in", "uri", ":", "\n", "            ", "if", "\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"", "not", "in", "uri", ":", "\n", "                ", "link", ",", "id", "=", "os", ".", "path", ".", "split", "(", "uri", ")", "\n", "", "else", ":", "\n", "                ", "link", ",", "id", "=", "uri", ".", "split", "(", "\"#\"", ")", "\n", "", "if", "id", "not", "in", "id2links", ":", "\n", "                ", "id2links", "[", "id", "]", "=", "link", "\n", "", "", "else", ":", "\n", "            ", "errors", ".", "append", "(", "uri", ")", "\n", "\n", "", "", "for", "p", "in", "prefixes", ":", "\n", "        ", "where_clause", "=", "where_clause", ".", "replace", "(", "p", ",", "\"\"", ")", "\n", "", "for", "p", "in", "prefixes_2", ":", "\n", "        ", "where_clause", "=", "where_clause", ".", "replace", "(", "p", ",", "\"\"", ")", "\n", "\n", "", "for", "err", "in", "errors", ":", "\n", "        ", "where_clause", "=", "where_clause", ".", "replace", "(", "\"<\"", ",", "\"\\\"\"", ")", ".", "replace", "(", "err", ",", "err", "+", "\"\\\"\"", ")", "\n", "\n", "", "triples", "=", "[", "x", ".", "strip", "(", "\" \"", ")", "for", "x", "in", "where_clause", ".", "split", "(", "\".\"", ")", "]", "\n", "new_where_clause", "=", "\" . \"", ".", "join", "(", "[", "triple", "for", "triple", "in", "triples", "]", ")", "\n", "for", "id", ",", "link", "in", "id2links", ".", "items", "(", ")", ":", "\n", "        ", "if", "id", "in", "[", "\"subject\"", ",", "\"predicate\"", ",", "\"object\"", "]", ":", "\n", "            ", "new_where_clause", "=", "new_where_clause", ".", "replace", "(", "id", ",", "\"<\"", "+", "link", "+", "\"#\"", "+", "id", "+", "\">\"", ")", "\n", "", "else", ":", "\n", "            ", "new_where_clause", "=", "new_where_clause", ".", "replace", "(", "id", ",", "\"<\"", "+", "link", "+", "\"/\"", "+", "id", "+", "\">\"", ")", "\n", "\n", "", "", "new_query", "=", "left", "+", "\"{ \"", "+", "new_where_clause", "+", "\" }\"", "+", "right", "\n", "return", "new_query", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_lcquad2": [[140, 175], ["re.compile", "re.compile.findall", "re.compile", "re.compile.findall", "sparql_util._filter_extracted_triples", "re.compile", "re.compile.findall", "sparql_util.extract_triples", "len", "len", "query.replace.replace", "len", "query.replace.replace", "query.replace.replace"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util._filter_extracted_triples", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.extract_triples"], ["", "def", "get_triples_lcquad2", "(", "query", ",", "kb", ",", "pattern", "=", "None", ")", ":", "\n", "\n", "    ", "if", "kb", "==", "\"wikidata\"", ":", "\n", "        ", "prefixes", "=", "\"\"\"\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n            PREFIX wd: <http://www.wikidata.org/entity/> \n            PREFIX wdt: <http://www.wikidata.org/prop/direct/> \n            PREFIX p: <http://www.wikidata.org/prop/direct/> \n            PREFIX ps: <http://www.wikidata.org/prop/direct/> \n            PREFIX pq: <http://www.wikidata.org/prop/direct/>\n        \"\"\"", "\n", "\n", "query", "=", "prefixes", "+", "query", "\n", "\n", "# ASK WHERE { wd:Q3591475 wdt:P2630 ?obj FILTER (?obj = t1270953452) }", "\n", "# error occurs when parsing the above query as t1270953452 is not the correct keyword", "\n", "pattern_1", "=", "re", ".", "compile", "(", "\"t[0-9]+\"", ")", "\n", "matches", "=", "pattern_1", ".", "findall", "(", "query", ")", "\n", "if", "len", "(", "matches", ")", "!=", "0", ":", "\n", "            ", "for", "match", "in", "matches", ":", "query", "=", "query", ".", "replace", "(", "match", ",", "\"'{}'\"", ".", "format", "(", "match", ")", ")", "\n", "\n", "# replace COUNT() with COUNT () to avoid parsing error", "\n", "", "", "pattern_2", "=", "re", ".", "compile", "(", "\"(?:COUNT\\(|count\\()\"", ")", "\n", "count_strings", "=", "pattern_2", ".", "findall", "(", "query", ")", "\n", "if", "count_strings", "and", "len", "(", "count_strings", ")", "!=", "0", ":", "\n", "        ", "for", "count_string", "in", "count_strings", ":", "\n", "            ", "query", "=", "query", ".", "replace", "(", "count_string", ",", "count_string", "[", ":", "-", "1", "]", "+", "\" (\"", ")", "\n", "\n", "# # remove FILTER() with FILTER () to avoid parsing error", "\n", "", "", "pattern_3", "=", "re", ".", "compile", "(", "\"(?:FILTER\\(|filter\\()\"", ")", "\n", "filter_strings", "=", "pattern_3", ".", "findall", "(", "query", ")", "\n", "if", "filter_strings", "and", "len", "(", "filter_strings", ")", "!=", "0", ":", "\n", "        ", "for", "filter_string", "in", "filter_strings", ":", "\n", "            ", "query", "=", "query", ".", "replace", "(", "filter_string", ",", "filter_string", "[", ":", "-", "1", "]", "+", "\" (\"", ")", "\n", "", "", "return", "_filter_extracted_triples", "(", "extract_triples", "(", "query", ")", ",", "pattern", "=", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_lcquad": [[177, 187], ["re.compile", "re.compile.findall", "sparql_util._filter_extracted_triples", "sparql_util.extract_triples", "len", "re.compile", "query.replace.replace", "re.compile.findall"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util._filter_extracted_triples", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.extract_triples"], ["", "def", "get_triples_lcquad", "(", "query", ",", "pattern", "=", "None", ")", ":", "\n", "# replace COUNT() with COUNT () to avoid parsing error", "\n", "    ", "pattern_1", "=", "re", ".", "compile", "(", "\"(?:COUNT|count)\\(\\?[a-zA-Z0-9]+\\)\"", ")", "\n", "count_strings", "=", "pattern_1", ".", "findall", "(", "query", ")", "\n", "if", "count_strings", "and", "len", "(", "count_strings", ")", "!=", "0", ":", "\n", "        ", "for", "count_string", "in", "count_strings", ":", "\n", "            ", "pattern_2", "=", "re", ".", "compile", "(", "\"\\?[a-zA-Z0-9]+\"", ")", "\n", "variable", "=", "pattern_2", ".", "findall", "(", "count_string", ")", "[", "0", "]", "\n", "query", "=", "query", ".", "replace", "(", "count_string", ",", "variable", ")", "\n", "", "", "return", "_filter_extracted_triples", "(", "extract_triples", "(", "query", ")", ",", "pattern", "=", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_complexwebquestions": [[189, 193], ["re.sub", "sparql_util._filter_extracted_triples", "sparql_util.extract_triples"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util._filter_extracted_triples", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.extract_triples"], ["", "def", "get_triples_complexwebquestions", "(", "query", ",", "pattern", "=", "None", ")", ":", "\n", "# # replace OR with || to avoid parsing error", "\n", "    ", "query", "=", "re", ".", "sub", "(", "\"\\ OR\\ \"", ",", "\" || \"", ",", "query", ")", "\n", "return", "_filter_extracted_triples", "(", "extract_triples", "(", "query", ")", ",", "pattern", "=", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.get_triples_qald": [[195, 220], ["sparql_util._filter_extracted_triples", "sparql_util.extract_triples", "query.replace.find", "query.replace.find", "query.replace.replace", "query.replace.find", "query.replace.find"], "function", ["home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util._filter_extracted_triples", "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.extract_triples"], ["", "def", "get_triples_qald", "(", "query", ",", "pattern", "=", "None", ")", ":", "\n", "\n", "# due to the missing of necessary namespace in the sparql, the parsing error would occur.", "\n", "    ", "prefixes", "=", "\"\"\"\n        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n        PREFIX dbp: <http://dbpedia.org/property/>\n        PREFIX dbo: <http://dbpedia.org/ontology/> \n        PREFIX res: <http://dbpedia.org/resource/> \n        PREFIX dbr: <http://dbpedia.org/resource/>\n        PREFIX yago: <http://dbpedia.org/class/yago/> \n        PREFIX dct: <http://purl.org/dc/terms/> \n        PREFIX dbc: <http://dbpedia.org/resource/Category:> \n    \"\"\"", "\n", "\n", "query", "=", "prefixes", "+", "query", "\n", "\n", "# when parsing the sparql, sometimes some errors caused by the COUNT would occur,", "\n", "# so for convenience, simply remove the sub string between SELECT and WHERE, and", "\n", "# replace it with a random variable ?uri", "\n", "if", "query", ".", "find", "(", "\"SELECT\"", ")", "!=", "-", "1", "and", "query", ".", "find", "(", "\"WHERE\"", ")", "!=", "-", "1", ":", "\n", "        ", "middle", "=", "query", "[", "query", ".", "find", "(", "\"SELECT\"", ")", "+", "6", ":", "query", ".", "find", "(", "\"WHERE\"", ")", "]", "\n", "if", "middle", "!=", "''", ":", "\n", "            ", "query", "=", "query", ".", "replace", "(", "middle", ",", "\" ?uri \"", ")", "\n", "", "", "return", "_filter_extracted_triples", "(", "extract_triples", "(", "query", ")", ",", "pattern", "=", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util.extract_triples": [[222, 240], ["rdflib.plugins.sparql.parser.parseQuery", "rdflib.plugins.sparql.algebra.translateQuery", "collections.deque", "collections.deque.append", "len", "collections.deque.popleft", "triples.extend", "queue.popleft.keys", "isinstance", "collections.deque.append"], "function", ["None"], ["", "def", "extract_triples", "(", "query", ")", ":", "\n", "    ", "parsed_query", "=", "parser", ".", "parseQuery", "(", "query", ")", "\n", "translated_query", "=", "translateQuery", "(", "parsed_query", ")", "\n", "\n", "queue", "=", "deque", "(", "[", "]", ")", "\n", "triples", "=", "[", "]", "\n", "\n", "p", "=", "translated_query", ".", "algebra", "\n", "queue", ".", "append", "(", "p", ")", "\n", "while", "len", "(", "queue", ")", "!=", "0", ":", "\n", "        ", "p", "=", "queue", ".", "popleft", "(", ")", "\n", "if", "\"triples\"", "in", "p", ":", "\n", "            ", "triples", ".", "extend", "(", "p", "[", "\"triples\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "for", "k", "in", "p", ".", "keys", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "p", "[", "k", "]", ",", "CompValue", ")", ":", "\n", "                    ", "queue", ".", "append", "(", "p", "[", "k", "]", ")", "\n", "", "", "", "", "return", "triples", "\n", "\n"]], "home.repos.pwc.inspect_result.semantic-systems_kgqa-datasets-generalization.utils.sparql_util._filter_extracted_triples": [[242, 251], ["result.append", "subj.toPython", "pred.toPython", "obj.toPython"], "function", ["None"], ["", "def", "_filter_extracted_triples", "(", "triples", ",", "pattern", "=", "None", ")", ":", "\n", "    ", "if", "not", "pattern", ":", "return", "triples", "\n", "result", "=", "[", "]", "\n", "for", "triple", "in", "triples", ":", "\n", "        ", "subj", ",", "pred", ",", "obj", "=", "triple", "\n", "triple_string", "=", "\" \"", ".", "join", "(", "[", "subj", ".", "toPython", "(", ")", ",", "pred", ".", "toPython", "(", ")", ",", "obj", ".", "toPython", "(", ")", "]", ")", "\n", "if", "pattern", "not", "in", "triple_string", ":", "\n", "            ", "result", ".", "append", "(", "triple", ")", "\n", "", "", "return", "result", "\n", "\n"]]}