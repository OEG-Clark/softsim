{"home.repos.pwc.inspect_result.ysymyth_ec-nl.lm-transfer.run_clm.DataTrainingArguments.__post_init__": [[189, 199], ["ValueError", "run_clm.DataTrainingArguments.train_file.split", "run_clm.DataTrainingArguments.validation_file.split"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataset_name", "is", "None", "and", "self", ".", "train_file", "is", "None", "and", "self", ".", "validation_file", "is", "None", "and", "self", ".", "pt_dataset", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Need either a dataset name or a training/validation file.\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "train_file", "is", "not", "None", ":", "\n", "                ", "extension", "=", "self", ".", "train_file", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "assert", "extension", "in", "[", "\"csv\"", ",", "\"json\"", ",", "\"txt\"", "]", ",", "\"`train_file` should be a csv, a json or a txt file.\"", "\n", "", "if", "self", ".", "validation_file", "is", "not", "None", ":", "\n", "                ", "extension", "=", "self", ".", "validation_file", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "assert", "extension", "in", "[", "\"csv\"", ",", "\"json\"", ",", "\"txt\"", "]", ",", "\"`validation_file` should be a csv, a json or a txt file.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.lm-transfer.run_clm.main": [[201, 523], ["transformers.HfArgumentParser", "logging.basicConfig", "logger.setLevel", "logger.warning", "transformers.trainer_utils.is_main_process", "logger.info", "transformers.set_seed", "datasets.map.map", "transformers.Trainer", "sys.argv[].endswith", "transformers.HfArgumentParser.parse_json_file", "transformers.HfArgumentParser.parse_args_into_dataclasses", "os.path.isdir", "transformers.trainer_utils.get_last_checkpoint", "transformers.utils.logging.set_verbosity_info", "transformers.utils.logging.enable_default_handler", "transformers.utils.logging.enable_explicit_format", "transformers.AutoConfig.from_pretrained", "transformers.AutoModelForCausalLM.from_pretrained", "AutoModelForCausalLM.from_config.transformer.wte.reset_parameters", "AutoModelForCausalLM.from_config.lm_head.reset_parameters", "logger.info", "transformers.AutoModelForCausalLM.from_config", "print", "torch.load", "isinstance", "datasets.DatasetDict", "transformers.AutoTokenizer.from_pretrained", "datasets.load_dataset.map", "min", "len", "result[].copy", "transformers.Trainer.create_optimizer_and_scheduler", "transformers.Trainer.train", "transformers.Trainer.save_model", "min", "transformers.Trainer.log_metrics", "transformers.Trainer.save_metrics", "transformers.Trainer.save_state", "logger.info", "transformers.Trainer.evaluate", "min", "math.exp", "transformers.Trainer.log_metrics", "transformers.Trainer.save_metrics", "logger.info", "transformers.Trainer.predict", "math.exp", "transformers.Trainer.log_metrics", "transformers.Trainer.save_metrics", "len", "ValueError", "transformers.trainer_utils.is_main_process", "transformers.AutoConfig.from_pretrained", "logger.warning", "torch.load.split", "datasets.load_dataset", "datasets.load_dataset", "transformers.AutoTokenizer.from_pretrained", "AutoTokenizer.from_pretrained.", "logger.warn", "logger.warn", "sum", "ValueError", "train_dataset.select.select", "ValueError", "eval_dataset.select.select", "wandb.init", "wandb.define_metric", "len", "len", "len", "len", "os.path.abspath", "len", "logger.info", "logging.StreamHandler", "bool", "len", "min", "torch.load.flatten", "datasets.Dataset.from_dict", "datasets.load_dataset.keys", "datasets.load_dataset", "datasets.load_dataset", "transformers.AutoTokenizer.from_pretrained", "ValueError", "examples.keys", "concatenated_examples.items", "range", "range", "os.path.isdir", "os.listdir", "bool", "tokens_dict.items", "data_args.train_file.split", "data_args.validation_file.split", "range", "wandb.Settings", "list", "v.tolist", "examples.keys", "len"], "function", ["None"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "# See all possible arguments in src/transformers/training_args.py", "\n", "# or by passing the --help flag to this script.", "\n", "# We now keep distinct sets of args, for a cleaner separation of concerns.", "\n", "\n", "    ", "parser", "=", "HfArgumentParser", "(", "(", "ModelArguments", ",", "DataTrainingArguments", ",", "TrainingArguments", ")", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "2", "and", "sys", ".", "argv", "[", "1", "]", ".", "endswith", "(", "\".json\"", ")", ":", "\n", "# If we pass only one argument to the script and it's the path to a json file,", "\n", "# let's parse it to get our arguments.", "\n", "        ", "model_args", ",", "data_args", ",", "training_args", "=", "parser", ".", "parse_json_file", "(", "json_file", "=", "os", ".", "path", ".", "abspath", "(", "sys", ".", "argv", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "model_args", ",", "data_args", ",", "training_args", "=", "parser", ".", "parse_args_into_dataclasses", "(", ")", "\n", "\n", "# Detecting last checkpoint.", "\n", "", "last_checkpoint", "=", "None", "\n", "if", "os", ".", "path", ".", "isdir", "(", "training_args", ".", "output_dir", ")", "and", "training_args", ".", "do_train", "and", "not", "training_args", ".", "overwrite_output_dir", ":", "\n", "        ", "last_checkpoint", "=", "get_last_checkpoint", "(", "training_args", ".", "output_dir", ")", "\n", "if", "last_checkpoint", "is", "None", "and", "len", "(", "os", ".", "listdir", "(", "training_args", ".", "output_dir", ")", ")", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"Output directory ({training_args.output_dir}) already exists and is not empty. \"", "\n", "\"Use --overwrite_output_dir to overcome.\"", "\n", ")", "\n", "", "elif", "last_checkpoint", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "f\"Checkpoint detected, resuming training at {last_checkpoint}. To avoid this behavior, change \"", "\n", "\"the `--output_dir` or add `--overwrite_output_dir` to train from scratch.\"", "\n", ")", "\n", "\n", "# Setup logging", "\n", "", "", "logging", ".", "basicConfig", "(", "\n", "format", "=", "\"%(asctime)s - %(levelname)s - %(name)s -   %(message)s\"", ",", "\n", "datefmt", "=", "\"%m/%d/%Y %H:%M:%S\"", ",", "\n", "handlers", "=", "[", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "]", ",", "\n", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", "if", "is_main_process", "(", "training_args", ".", "local_rank", ")", "else", "logging", ".", "WARN", ")", "\n", "\n", "# Log on each process the small summary:", "\n", "logger", ".", "warning", "(", "\n", "f\"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}\"", "\n", "+", "f\"distributed training: {bool(training_args.local_rank != -1)}, 16-bits training: {training_args.fp16}\"", "\n", ")", "\n", "# Set the verbosity to info of the Transformers logger (on main process only):", "\n", "if", "is_main_process", "(", "training_args", ".", "local_rank", ")", ":", "\n", "        ", "transformers", ".", "utils", ".", "logging", ".", "set_verbosity_info", "(", ")", "\n", "transformers", ".", "utils", ".", "logging", ".", "enable_default_handler", "(", ")", "\n", "transformers", ".", "utils", ".", "logging", ".", "enable_explicit_format", "(", ")", "\n", "", "logger", ".", "info", "(", "\"Training/evaluation parameters %s\"", ",", "training_args", ")", "\n", "\n", "# Set seed before initializing model.", "\n", "set_seed", "(", "training_args", ".", "seed", ")", "\n", "\n", "# Get the datasets: you can either provide your own CSV/JSON/TXT training and evaluation files (see below)", "\n", "# or just provide the name of one of the public datasets available on the hub at https://huggingface.co/datasets/", "\n", "# (the dataset will be downloaded automatically from the datasets Hub).", "\n", "#", "\n", "# For CSV/JSON files, this script will use the column called 'text' or the first column if no column called", "\n", "# 'text' is found. You can easily tweak this behavior (see below).", "\n", "#", "\n", "# In distributed training, the load_dataset function guarantee that only one local process can concurrently", "\n", "# download the dataset.", "\n", "\n", "# Moved later to tokenized_datasets", "\n", "\n", "# See more about loading any type of standard or custom dataset (from files, python dict, pandas DataFrame, etc) at", "\n", "# https://huggingface.co/docs/datasets/loading_datasets.html.", "\n", "\n", "# Load pretrained model and tokenizer", "\n", "#", "\n", "# Distributed training:", "\n", "# The .from_pretrained methods guarantee that only one local process can concurrently", "\n", "# download model & vocab.", "\n", "\n", "config_kwargs", "=", "{", "\n", "\"cache_dir\"", ":", "model_args", ".", "cache_dir", ",", "\n", "\"revision\"", ":", "model_args", ".", "model_revision", ",", "\n", "\"use_auth_token\"", ":", "True", "if", "model_args", ".", "use_auth_token", "else", "None", ",", "\n", "}", "\n", "if", "model_args", ".", "config_name", ":", "\n", "        ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_args", ".", "config_name", ",", "**", "config_kwargs", ")", "\n", "", "elif", "model_args", ".", "model_name_or_path", ":", "\n", "        ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_args", ".", "model_name_or_path", ",", "**", "config_kwargs", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "CONFIG_MAPPING", "[", "model_args", ".", "model_type", "]", "(", ")", "\n", "logger", ".", "warning", "(", "\"You are instantiating a new config instance from scratch.\"", ")", "\n", "\n", "\n", "", "if", "model_args", ".", "model_name_or_path", ":", "\n", "        ", "model", "=", "AutoModelForCausalLM", ".", "from_pretrained", "(", "\n", "model_args", ".", "model_name_or_path", ",", "\n", "from_tf", "=", "bool", "(", "\".ckpt\"", "in", "model_args", ".", "model_name_or_path", ")", ",", "\n", "config", "=", "config", ",", "\n", "cache_dir", "=", "model_args", ".", "cache_dir", ",", "\n", "revision", "=", "model_args", ".", "model_revision", ",", "\n", "use_auth_token", "=", "True", "if", "model_args", ".", "use_auth_token", "else", "None", ",", "\n", ")", "\n", "# CHANGE: re-initialize input and output embeddings during fine-tuning", "\n", "model", ".", "transformer", ".", "wte", ".", "reset_parameters", "(", ")", "\n", "model", ".", "lm_head", ".", "reset_parameters", "(", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Training new model from scratch\"", ")", "\n", "model", "=", "AutoModelForCausalLM", ".", "from_config", "(", "config", ")", "\n", "\n", "# CHANGE: directly get tokenized_datasets, or have default options", "\n", "", "if", "data_args", ".", "pt_dataset", ":", "\n", "        ", "print", "(", "f\"loading from {data_args.pt_dataset}!\"", ")", "\n", "tokens", "=", "torch", ".", "load", "(", "data_args", ".", "pt_dataset", ")", "\n", "tokens_dict", "=", "{", "}", "\n", "n_train", ",", "n_valid", ",", "n_test", "=", "data_args", ".", "dataset_limit_train", ",", "data_args", ".", "dataset_limit_valid", ",", "data_args", ".", "dataset_limit_test", "\n", "if", "isinstance", "(", "tokens", ",", "list", ")", ":", "\n", "            ", "assert", "len", "(", "tokens", ")", "==", "3", "\n", "tokens_dict", "[", "'train'", "]", ",", "tokens_dict", "[", "'validation'", "]", ",", "tokens_dict", "[", "'test'", "]", "=", "tokens", "\n", "if", "n_train", "!=", "-", "1", ":", "tokens_dict", "[", "'train'", "]", "=", "tokens_dict", "[", "'train'", "]", "[", ":", "n_train", "]", "\n", "if", "n_valid", "!=", "-", "1", ":", "tokens_dict", "[", "'validation'", "]", "=", "tokens_dict", "[", "'validation'", "]", "[", ":", "n_valid", "]", "\n", "if", "n_test", "!=", "-", "1", ":", "tokens_dict", "[", "'test'", "]", "=", "tokens_dict", "[", "'test'", "]", "[", ":", "n_test", "]", "\n", "", "else", ":", "# only for ec corpus", "\n", "            ", "assert", "min", "(", "n_train", ",", "n_valid", ",", "n_test", ")", ">", "0", "\n", "tokens", "=", "tokens", ".", "flatten", "(", ")", "[", ":", "n_train", "+", "n_valid", "+", "n_test", "]", "\n", "tokens_dict", "[", "'train'", "]", ",", "tokens_dict", "[", "'validation'", "]", ",", "tokens_dict", "[", "'test'", "]", "=", "tokens", ".", "split", "(", "[", "n_train", ",", "n_valid", ",", "n_test", "]", ")", "\n", "\n", "", "tokenized_datasets", "=", "DatasetDict", "(", "{", "\n", "k", ":", "Dataset", ".", "from_dict", "(", "{", "\"input_ids\"", ":", "[", "v", ".", "tolist", "(", ")", "]", ",", "\"attention_mask\"", ":", "[", "[", "1", "]", "*", "len", "(", "v", ")", "]", "}", ")", "\n", "for", "k", ",", "v", "in", "tokens_dict", ".", "items", "(", ")", "\n", "}", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "'gpt2'", ")", "\n", "", "else", ":", "\n", "        ", "if", "data_args", ".", "dataset_name", "is", "not", "None", ":", "\n", "# Downloading and loading a dataset from the hub.", "\n", "            ", "datasets", "=", "load_dataset", "(", "data_args", ".", "dataset_name", ",", "data_args", ".", "dataset_config_name", ")", "\n", "if", "\"validation\"", "not", "in", "datasets", ".", "keys", "(", ")", ":", "\n", "                ", "datasets", "[", "\"validation\"", "]", "=", "load_dataset", "(", "\n", "data_args", ".", "dataset_name", ",", "\n", "data_args", ".", "dataset_config_name", ",", "\n", "split", "=", "f\"train[:{data_args.validation_split_percentage}%]\"", ",", "\n", ")", "\n", "datasets", "[", "\"train\"", "]", "=", "load_dataset", "(", "\n", "data_args", ".", "dataset_name", ",", "\n", "data_args", ".", "dataset_config_name", ",", "\n", "split", "=", "f\"train[{data_args.validation_split_percentage}%:]\"", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "data_files", "=", "{", "}", "\n", "if", "data_args", ".", "train_file", "is", "not", "None", ":", "\n", "                ", "data_files", "[", "\"train\"", "]", "=", "data_args", ".", "train_file", "\n", "", "if", "data_args", ".", "validation_file", "is", "not", "None", ":", "\n", "                ", "data_files", "[", "\"validation\"", "]", "=", "data_args", ".", "validation_file", "\n", "", "extension", "=", "(", "\n", "data_args", ".", "train_file", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", "if", "data_args", ".", "train_file", "is", "not", "None", "\n", "else", "data_args", ".", "validation_file", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "\n", ")", "\n", "if", "extension", "==", "\"txt\"", ":", "\n", "                ", "extension", "=", "\"text\"", "\n", "", "datasets", "=", "load_dataset", "(", "extension", ",", "data_files", "=", "data_files", ")", "\n", "\n", "", "tokenizer_kwargs", "=", "{", "\n", "\"cache_dir\"", ":", "model_args", ".", "cache_dir", ",", "\n", "\"use_fast\"", ":", "model_args", ".", "use_fast_tokenizer", ",", "\n", "\"revision\"", ":", "model_args", ".", "model_revision", ",", "\n", "\"use_auth_token\"", ":", "True", "if", "model_args", ".", "use_auth_token", "else", "None", ",", "\n", "}", "\n", "if", "model_args", ".", "tokenizer_name", ":", "\n", "            ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_args", ".", "tokenizer_name", ",", "**", "tokenizer_kwargs", ")", "\n", "", "elif", "model_args", ".", "model_name_or_path", ":", "\n", "            ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_args", ".", "model_name_or_path", ",", "**", "tokenizer_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"You are instantiating a new tokenizer from scratch. This is not supported by this script.\"", "\n", "\"You can do it from another script, save it, and load it from here, using --tokenizer_name.\"", "\n", ")", "\n", "\n", "# Preprocessing the datasets.", "\n", "# First we tokenize all the texts.", "\n", "", "if", "training_args", ".", "do_train", ":", "\n", "            ", "column_names", "=", "datasets", "[", "\"train\"", "]", ".", "column_names", "\n", "", "else", ":", "\n", "            ", "column_names", "=", "datasets", "[", "\"validation\"", "]", ".", "column_names", "\n", "", "text_column_name", "=", "\"text\"", "if", "\"text\"", "in", "column_names", "else", "column_names", "[", "0", "]", "\n", "\n", "def", "tokenize_function", "(", "examples", ")", ":", "\n", "            ", "return", "tokenizer", "(", "examples", "[", "text_column_name", "]", ")", "\n", "\n", "", "tokenized_datasets", "=", "datasets", ".", "map", "(", "\n", "tokenize_function", ",", "\n", "batched", "=", "True", ",", "\n", "num_proc", "=", "data_args", ".", "preprocessing_num_workers", ",", "\n", "remove_columns", "=", "column_names", ",", "\n", "load_from_cache_file", "=", "not", "data_args", ".", "overwrite_cache", ",", "\n", ")", "\n", "\n", "\n", "", "if", "data_args", ".", "block_size", "is", "None", ":", "\n", "        ", "block_size", "=", "tokenizer", ".", "model_max_length", "\n", "if", "block_size", ">", "1024", ":", "\n", "            ", "logger", ".", "warn", "(", "\n", "f\"The tokenizer picked seems to have a very large `model_max_length` ({tokenizer.model_max_length}). \"", "\n", "\"Picking 1024 instead. You can change that default value by passing --block_size xxx.\"", "\n", ")", "\n", "", "block_size", "=", "1024", "\n", "", "else", ":", "\n", "        ", "if", "data_args", ".", "block_size", ">", "tokenizer", ".", "model_max_length", ":", "\n", "            ", "logger", ".", "warn", "(", "\n", "f\"The block_size passed ({data_args.block_size}) is larger than the maximum length for the model\"", "\n", "f\"({tokenizer.model_max_length}). Using block_size={tokenizer.model_max_length}.\"", "\n", ")", "\n", "", "block_size", "=", "min", "(", "data_args", ".", "block_size", ",", "tokenizer", ".", "model_max_length", ")", "\n", "\n", "# Main data processing function that will concatenate all texts from our dataset and generate chunks of block_size.", "\n", "", "def", "group_texts", "(", "examples", ")", ":", "\n", "# Concatenate all texts.", "\n", "        ", "concatenated_examples", "=", "{", "k", ":", "sum", "(", "examples", "[", "k", "]", ",", "[", "]", ")", "for", "k", "in", "examples", ".", "keys", "(", ")", "}", "\n", "total_length", "=", "len", "(", "concatenated_examples", "[", "list", "(", "examples", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ")", "\n", "# We drop the small remainder, we could add padding if the model supported it instead of this drop, you can", "\n", "# customize this part to your needs.", "\n", "total_length", "=", "(", "total_length", "//", "block_size", ")", "*", "block_size", "\n", "# Split by chunks of max_len.", "\n", "result", "=", "{", "\n", "k", ":", "[", "t", "[", "i", ":", "i", "+", "block_size", "]", "for", "i", "in", "range", "(", "0", ",", "total_length", ",", "block_size", ")", "]", "\n", "for", "k", ",", "t", "in", "concatenated_examples", ".", "items", "(", ")", "\n", "}", "\n", "result", "[", "\"labels\"", "]", "=", "result", "[", "\"input_ids\"", "]", ".", "copy", "(", ")", "\n", "return", "result", "\n", "\n", "# Note that with `batched=True`, this map processes 1,000 texts together, so group_texts throws away a remainder", "\n", "# for each of those groups of 1,000 texts. You can adjust that batch_size here but a higher value might be slower", "\n", "# to preprocess.", "\n", "#", "\n", "# To speed up this part, we use multiprocessing. See the documentation of the map method for more information:", "\n", "# https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset.map", "\n", "\n", "", "lm_datasets", "=", "tokenized_datasets", ".", "map", "(", "\n", "group_texts", ",", "\n", "batched", "=", "True", ",", "\n", "num_proc", "=", "data_args", ".", "preprocessing_num_workers", ",", "\n", "load_from_cache_file", "=", "not", "data_args", ".", "overwrite_cache", ",", "\n", ")", "\n", "\n", "if", "training_args", ".", "do_train", ":", "\n", "        ", "if", "\"train\"", "not", "in", "tokenized_datasets", ":", "\n", "            ", "raise", "ValueError", "(", "\"--do_train requires a train dataset\"", ")", "\n", "", "train_dataset", "=", "lm_datasets", "[", "\"train\"", "]", "\n", "if", "data_args", ".", "max_train_samples", "is", "not", "None", ":", "\n", "            ", "train_dataset", "=", "train_dataset", ".", "select", "(", "range", "(", "data_args", ".", "max_train_samples", ")", ")", "\n", "\n", "", "", "if", "training_args", ".", "do_eval", ":", "\n", "        ", "if", "\"validation\"", "not", "in", "tokenized_datasets", ":", "\n", "            ", "raise", "ValueError", "(", "\"--do_eval requires a validation dataset\"", ")", "\n", "", "eval_dataset", "=", "lm_datasets", "[", "\"validation\"", "]", "\n", "if", "data_args", ".", "max_val_samples", "is", "not", "None", ":", "\n", "            ", "eval_dataset", "=", "eval_dataset", ".", "select", "(", "range", "(", "data_args", ".", "max_val_samples", ")", ")", "\n", "\n", "# Initialize our Trainer", "\n", "", "", "trainer", "=", "Trainer", "(", "\n", "model", "=", "model", ",", "\n", "args", "=", "training_args", ",", "\n", "train_dataset", "=", "train_dataset", "if", "training_args", ".", "do_train", "else", "None", ",", "\n", "eval_dataset", "=", "eval_dataset", "if", "training_args", ".", "do_eval", "else", "None", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "# Data collator will default to DataCollatorWithPadding, so we change it.", "\n", "data_collator", "=", "default_data_collator", ",", "\n", ")", "\n", "\n", "# CHANGE: add scheduler steps", "\n", "if", "data_args", ".", "scheduler_steps", "!=", "-", "1", ":", "\n", "        ", "trainer", ".", "create_optimizer_and_scheduler", "(", "data_args", ".", "scheduler_steps", ")", "\n", "\n", "# Training", "\n", "", "if", "training_args", ".", "do_train", ":", "\n", "        ", "if", "last_checkpoint", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "last_checkpoint", "\n", "# CHANGE: only resume if data_args.resume is True", "\n", "", "elif", "model_args", ".", "model_name_or_path", "is", "not", "None", "and", "os", ".", "path", ".", "isdir", "(", "model_args", ".", "model_name_or_path", ")", "and", "data_args", ".", "resume", ":", "\n", "            ", "checkpoint", "=", "model_args", ".", "model_name_or_path", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "None", "\n", "\n", "# CHANGE: wandb", "\n", "", "if", "data_args", ".", "wandb", ":", "\n", "            ", "import", "wandb", "\n", "wandb", ".", "init", "(", "name", "=", "training_args", ".", "output_dir", ",", "config", "=", "training_args", ",", "settings", "=", "wandb", ".", "Settings", "(", "start_method", "=", "\"fork\"", ")", ")", "\n", "wandb", ".", "define_metric", "(", "\"eval/loss\"", ",", "summary", "=", "\"min\"", ")", "\n", "\n", "", "train_result", "=", "trainer", ".", "train", "(", "resume_from_checkpoint", "=", "checkpoint", ")", "\n", "trainer", ".", "save_model", "(", ")", "# Saves the tokenizer too for easy upload", "\n", "\n", "metrics", "=", "train_result", ".", "metrics", "\n", "\n", "max_train_samples", "=", "(", "\n", "data_args", ".", "max_train_samples", "if", "data_args", ".", "max_train_samples", "is", "not", "None", "else", "len", "(", "train_dataset", ")", "\n", ")", "\n", "metrics", "[", "\"train_samples\"", "]", "=", "min", "(", "max_train_samples", ",", "len", "(", "train_dataset", ")", ")", "\n", "\n", "trainer", ".", "log_metrics", "(", "\"train\"", ",", "metrics", ")", "\n", "trainer", ".", "save_metrics", "(", "\"train\"", ",", "metrics", ")", "\n", "trainer", ".", "save_state", "(", ")", "\n", "\n", "# Evaluation", "\n", "", "if", "training_args", ".", "do_eval", ":", "\n", "        ", "logger", ".", "info", "(", "\"*** Evaluate ***\"", ")", "\n", "\n", "metrics", "=", "trainer", ".", "evaluate", "(", ")", "\n", "\n", "max_val_samples", "=", "data_args", ".", "max_val_samples", "if", "data_args", ".", "max_val_samples", "is", "not", "None", "else", "len", "(", "eval_dataset", ")", "\n", "metrics", "[", "\"eval_samples\"", "]", "=", "min", "(", "max_val_samples", ",", "len", "(", "eval_dataset", ")", ")", "\n", "perplexity", "=", "math", ".", "exp", "(", "metrics", "[", "\"eval_loss\"", "]", ")", "\n", "metrics", "[", "\"perplexity\"", "]", "=", "perplexity", "\n", "\n", "trainer", ".", "log_metrics", "(", "\"eval\"", ",", "metrics", ")", "\n", "trainer", ".", "save_metrics", "(", "\"eval\"", ",", "metrics", ")", "\n", "\n", "# CHANGE: add Test", "\n", "", "if", "training_args", ".", "do_predict", "and", "'test'", "in", "lm_datasets", ":", "\n", "        ", "logger", ".", "info", "(", "\"*** Test ***\"", ")", "\n", "\n", "metrics", "=", "trainer", ".", "predict", "(", "lm_datasets", "[", "'test'", "]", ")", "\n", "metrics", "=", "metrics", ".", "metrics", "\n", "perplexity", "=", "math", ".", "exp", "(", "metrics", "[", "\"eval_loss\"", "]", ")", "\n", "metrics", "[", "\"perplexity\"", "]", "=", "perplexity", "\n", "if", "data_args", ".", "wandb", ":", "\n", "            ", "wandb", ".", "run", ".", "summary", "[", "\"test\"", "]", "=", "metrics", "\n", "", "trainer", ".", "log_metrics", "(", "\"test\"", ",", "metrics", ")", "\n", "trainer", ".", "save_metrics", "(", "\"test\"", ",", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.lm-transfer.run_clm._mp_fn": [[525, 528], ["run_clm.main"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.lm-transfer.run_clm.main"], ["", "", "def", "_mp_fn", "(", "index", ")", ":", "\n", "# For xla_spawn (TPUs)", "\n", "    ", "main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.DotAttn.forward": [[46, 49], ["models.DotAttn.softmax", "models.DotAttn.expand_as().mul().sum", "models.DotAttn.expand_as().mul", "models.DotAttn.expand_as"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.DotAttn.softmax"], ["def", "forward", "(", "self", ",", "inp", ",", "h", ")", ":", "\n", "        ", "score", "=", "self", ".", "softmax", "(", "inp", ",", "h", ")", "\n", "return", "score", ".", "expand_as", "(", "inp", ")", ".", "mul", "(", "inp", ")", ".", "sum", "(", "1", ")", ",", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.DotAttn.softmax": [[50, 54], ["inp.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "h.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.DotAttn.softmax", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.DotAttn.softmax", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.DotAttn.softmax"], ["", "def", "softmax", "(", "self", ",", "inp", ",", "h", ")", ":", "\n", "        ", "raw_score", "=", "inp", ".", "bmm", "(", "h", ".", "unsqueeze", "(", "2", ")", ")", "\n", "score", "=", "F", ".", "softmax", "(", "raw_score", ",", "dim", "=", "1", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.SingleAgent.__init__": [[57, 77], ["super().__init__", "models.Speaker", "models.RnnListener", "print", "models.Beholder", "models.Beholder", "print", "models.Beholder", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SingleAgent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "args", ".", "no_share_bhd", ":", "\n", "            ", "print", "(", "\"Not sharing visual system for each agent.\"", ")", "\n", "self", ".", "beholder1", "=", "Beholder", "(", "args", ")", "\n", "self", ".", "beholder2", "=", "Beholder", "(", "args", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Sharing visual system for each agent.\"", ")", "\n", "self", ".", "beholder", "=", "Beholder", "(", "args", ")", "\n", "", "self", ".", "video", "=", "\"video\"", "in", "args", ".", "dataset", "or", "\"box\"", "in", "args", ".", "dataset", "\n", "if", "self", ".", "video", ":", "\n", "            ", "self", ".", "video_rnn", "=", "nn", ".", "GRU", "(", "args", ".", "D_hid", ",", "args", ".", "D_hid", ",", "args", ".", "num_layers", ",", "batch_first", "=", "True", ")", "\n", "", "self", ".", "speaker", "=", "Speaker", "(", "args", ")", "\n", "self", ".", "listener", "=", "RnnListener", "(", "args", ")", "\n", "self", ".", "tt", "=", "torch", "if", "args", ".", "cpu", "else", "torch", ".", "cuda", "\n", "self", ".", "unit_norm", "=", "args", ".", "unit_norm", "\n", "\n", "self", ".", "no_share_bhd", "=", "args", ".", "no_share_bhd", "\n", "self", ".", "D_img", "=", "args", ".", "D_img", "\n", "self", ".", "D_hid", "=", "args", ".", "D_hid", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.SingleAgent.generate_ec": [[78, 88], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.SingleAgent.speaker", "models.SingleAgent.beholder1", "models.SingleAgent.beholder"], "methods", ["None"], ["", "def", "generate_ec", "(", "self", ",", "spk_h_img", ",", "a_spk_caps_in", "=", "0", ",", "a_spk_cap_lens", "=", "0", ",", "spk_sample_how", "=", "None", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "no_share_bhd", ":", "\n", "                ", "spk_h_img", "=", "self", ".", "beholder1", "(", "spk_h_img", ")", "# shared", "\n", "", "else", ":", "\n", "                ", "spk_h_img", "=", "self", ".", "beholder", "(", "spk_h_img", ")", "# shared", "\n", "\n", "", "spk_logits", ",", "comm_action", ",", "spk_cap_len_", "=", "self", ".", "speaker", "(", "spk_h_img", ",", "a_spk_caps_in", ",", "a_spk_cap_lens", ",", "\n", "spk_sample_how", ")", "# NOTE argmax / gumbel", "\n", "", "return", "comm_action", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.SingleAgent.generate_ec_video": [[89, 106], ["len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "video_tensor.view.view.view", "models.SingleAgent.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "models.SingleAgent.speaker", "models.SingleAgent.beholder1", "models.SingleAgent.beholder", "max", "video_h[].mean", "video.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "max", "range", "util.pad_sequences"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.pad_sequences"], ["", "def", "generate_ec_video", "(", "self", ",", "videos", ")", ":", "\n", "# bs, num_dist = b_lsn_imgs.size()", "\n", "        ", "bs", "=", "num_dist", "=", "len", "(", "videos", ")", "\n", "video_lens", "=", "torch", ".", "LongTensor", "(", "[", "video", ".", "size", "(", "0", ")", "for", "video", "in", "videos", "]", ")", "\n", "video_tensor", "=", "torch", ".", "from_numpy", "(", "pad_sequences", "(", "videos", ",", "dtype", "=", "'float32'", ")", ")", ".", "cuda", "(", ")", "\n", "video_tensor", "=", "video_tensor", ".", "view", "(", "bs", "*", "max", "(", "video_lens", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "no_share_bhd", ":", "\n", "            ", "video_h", "=", "self", ".", "beholder1", "(", "video_tensor", ")", "# shared", "\n", "", "else", ":", "\n", "            ", "video_h", "=", "self", ".", "beholder", "(", "video_tensor", ")", "# shared", "\n", "", "video_h", "=", "video_h", ".", "view", "(", "bs", ",", "max", "(", "video_lens", ")", ",", "-", "1", ")", "\n", "\n", "outs", "=", "[", "video_h", "[", "i", ",", "0", ":", "video_lens", "[", "i", "]", ",", ":", "]", ".", "mean", "(", "0", ")", "for", "i", "in", "range", "(", "bs", ")", "]", "\n", "out", "=", "torch", ".", "stack", "(", "outs", ",", "0", ")", "\n", "spk_h_img", "=", "torch", ".", "index_select", "(", "out", ",", "0", ",", "a_spk_img", ")", "\n", "spk_logits", ",", "comm_action", ",", "spk_cap_len_", "=", "self", ".", "speaker", "(", "spk_h_img", ",", "a_spk_caps_in", ",", "a_spk_cap_lens", ",", "spk_sample_how", ",", "\n", "video_out", "=", "video_h", ")", "# NOTE argmax / gumbel", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.SingleAgent.forward_image": [[107, 142], ["models.SingleAgent.speaker", "b_lsn_imgs.view", "models.SingleAgent.view", "models.SingleAgent.listener", "rnn_hid.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "b_lsn_imgs.size", "models.SingleAgent.beholder1", "models.SingleAgent.beholder", "print", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "models.SingleAgent.beholder2", "models.SingleAgent.beholder", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.max.int", "torch.max.int", "torch.max.int", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "rnn_hid.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "spk_logits.size", "spk_cap_len_.float", "spk_cap_len_.float", "spk_cap_len_.float", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "spk_cap_len_.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.max.size", "torch.max.size", "torch.max.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "end_idx_.size"], "methods", ["None"], ["", "def", "forward_image", "(", "self", ",", "data1", ",", "spk_sample_how", ")", ":", "\n", "        ", "a_spk_img", ",", "b_lsn_imgs", ",", "a_spk_caps_in", ",", "a_spk_cap_lens", "=", "data1", "[", ":", "4", "]", "# spk_imgs : (batch_size, 2048)", "\n", "\n", "num_dist", "=", "b_lsn_imgs", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "if", "self", ".", "no_share_bhd", ":", "\n", "            ", "spk_h_img", "=", "self", ".", "beholder1", "(", "a_spk_img", ")", "# shared", "\n", "", "else", ":", "\n", "            ", "spk_h_img", "=", "self", ".", "beholder", "(", "a_spk_img", ")", "# shared", "\n", "\n", "", "spk_logits", ",", "comm_action", ",", "spk_cap_len_", "=", "self", ".", "speaker", "(", "spk_h_img", ",", "a_spk_caps_in", ",", "a_spk_cap_lens", ",", "\n", "spk_sample_how", ")", "# NOTE argmax / gumbel", "\n", "\n", "lenlen", "=", "False", "\n", "if", "lenlen", ":", "\n", "            ", "print", "(", "spk_cap_len_", "[", ":", "10", "]", ")", "\n", "end_idx", "=", "torch", ".", "max", "(", "torch", ".", "ones", "(", "spk_cap_len_", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "(", "spk_cap_len_", "-", "2", ")", ".", "float", "(", ")", ")", "\n", "end_idx_", "=", "torch", ".", "arange", "(", "0", ",", "end_idx", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "*", "spk_logits", ".", "size", "(", "1", ")", "+", "end_idx", ".", "int", "(", ")", "\n", "\n", "end_loss_", "=", "3", "*", "torch", ".", "ones", "(", "end_idx_", ".", "size", "(", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "end_idx_", "=", "0", "\n", "end_loss_", "=", "0", "\n", "\n", "", "lsn_imgs", "=", "b_lsn_imgs", ".", "view", "(", "-", "1", ",", "self", ".", "D_img", ")", "\n", "if", "self", ".", "no_share_bhd", ":", "\n", "            ", "lsn_h_imgs", "=", "self", ".", "beholder2", "(", "lsn_imgs", ")", "\n", "", "else", ":", "\n", "            ", "lsn_h_imgs", "=", "self", ".", "beholder", "(", "lsn_imgs", ")", "\n", "", "lsn_h_imgs", "=", "lsn_h_imgs", ".", "view", "(", "-", "1", ",", "num_dist", ",", "self", ".", "D_hid", ")", "\n", "rnn_hid", "=", "self", ".", "listener", "(", "comm_action", "[", ":", ",", ":", "-", "1", "]", ",", "spk_cap_len_", "-", "1", ",", "spk_logits", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "rnn_hid", "=", "rnn_hid", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_dist", ",", "1", ")", "# (batch_size, num_dist, D_hid)", "\n", "\n", "return", "spk_logits", ",", "(", "rnn_hid", ",", "lsn_h_imgs", ")", ",", "comm_action", ",", "(", "end_idx_", ",", "end_loss_", ")", ",", "(", "\n", "torch", ".", "min", "(", "spk_cap_len_", ".", "float", "(", ")", ")", ",", "torch", ".", "mean", "(", "spk_cap_len_", ".", "float", "(", ")", ")", ",", "torch", ".", "max", "(", "spk_cap_len_", ".", "float", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.SingleAgent.forward_video": [[143, 197], ["b_lsn_imgs.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "video_tensor.view.view.view", "models.SingleAgent.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "models.SingleAgent.speaker", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "lsn_h_imgs.view.view.view", "models.SingleAgent.listener", "rnn_hid.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "models.SingleAgent.beholder1", "models.SingleAgent.beholder", "max", "video_h[].mean", "print", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "b_lsn_imgs.view", "video.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "max", "range", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.max.int", "torch.max.int", "torch.max.int", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "rnn_hid.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "util.pad_sequences", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "spk_logits.size", "spk_cap_len_.float", "spk_cap_len_.float", "spk_cap_len_.float", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "spk_cap_len_.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.max.size", "torch.max.size", "torch.max.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "end_idx_.size"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.pad_sequences"], ["", "def", "forward_video", "(", "self", ",", "data1", ",", "spk_sample_how", ")", ":", "\n", "        ", "videos", ",", "a_spk_img", ",", "b_lsn_imgs", ",", "a_spk_caps_in", ",", "a_spk_cap_lens", "=", "data1", "[", ":", "5", "]", "# spk_imgs : (batch_size, 2048)", "\n", "bs", ",", "num_dist", "=", "b_lsn_imgs", ".", "size", "(", ")", "\n", "video_lens", "=", "torch", ".", "LongTensor", "(", "[", "video", ".", "size", "(", "0", ")", "for", "video", "in", "videos", "]", ")", "\n", "video_tensor", "=", "torch", ".", "from_numpy", "(", "pad_sequences", "(", "videos", ",", "dtype", "=", "'float32'", ")", ")", ".", "cuda", "(", ")", "\n", "video_tensor", "=", "video_tensor", ".", "view", "(", "bs", "*", "max", "(", "video_lens", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "no_share_bhd", ":", "\n", "            ", "video_h", "=", "self", ".", "beholder1", "(", "video_tensor", ")", "# shared", "\n", "", "else", ":", "\n", "            ", "video_h", "=", "self", ".", "beholder", "(", "video_tensor", ")", "# shared", "\n", "", "video_h", "=", "video_h", ".", "view", "(", "bs", ",", "max", "(", "video_lens", ")", ",", "-", "1", ")", "\n", "\n", "\"\"\"\n        import pdb; pdb.set_trace() \n        pack = torch.nn.utils.rnn.pack_padded_sequence(video_h, video_lens.cpu(), batch_first=True, enforce_sorted=False)\n        video_out, h_n = self.video_rnn(pack)\n        out = h_n.transpose(0,1).contiguous().view(bs, self.D_hid)\n        \"\"\"", "\n", "\n", "outs", "=", "[", "video_h", "[", "i", ",", "0", ":", "video_lens", "[", "i", "]", ",", ":", "]", ".", "mean", "(", "0", ")", "for", "i", "in", "range", "(", "bs", ")", "]", "\n", "out", "=", "torch", ".", "stack", "(", "outs", ",", "0", ")", "\n", "\n", "# out = video_h[:,0,:]", "\n", "\n", "spk_h_img", "=", "torch", ".", "index_select", "(", "out", ",", "0", ",", "a_spk_img", ")", "\n", "spk_logits", ",", "comm_action", ",", "spk_cap_len_", "=", "self", ".", "speaker", "(", "spk_h_img", ",", "a_spk_caps_in", ",", "a_spk_cap_lens", ",", "spk_sample_how", ",", "\n", "video_out", "=", "video_h", ")", "# NOTE argmax / gumbel", "\n", "\n", "lenlen", "=", "False", "\n", "if", "lenlen", ":", "\n", "            ", "print", "(", "spk_cap_len_", "[", ":", "10", "]", ")", "\n", "end_idx", "=", "torch", ".", "max", "(", "torch", ".", "ones", "(", "spk_cap_len_", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "(", "spk_cap_len_", "-", "2", ")", ".", "float", "(", ")", ")", "\n", "end_idx_", "=", "torch", ".", "arange", "(", "0", ",", "end_idx", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "*", "spk_logits", ".", "size", "(", "1", ")", "+", "end_idx", ".", "int", "(", ")", "\n", "\n", "end_loss_", "=", "3", "*", "torch", ".", "ones", "(", "end_idx_", ".", "size", "(", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "end_idx_", "=", "0", "\n", "end_loss_", "=", "0", "\n", "\n", "", "\"\"\"\n        lsn_imgs = b_lsn_imgs.view(-1, self.D_img)\n        if self.no_share_bhd:\n            lsn_h_imgs = self.beholder2(lsn_imgs)\n        else:\n            lsn_h_imgs = self.beholder(lsn_imgs)\n        lsn_h_imgs = lsn_h_imgs.view(-1, num_dist, self.D_hid)\n        \"\"\"", "\n", "lsn_h_imgs", "=", "torch", ".", "index_select", "(", "out", ",", "0", ",", "b_lsn_imgs", ".", "view", "(", "-", "1", ")", ")", "\n", "lsn_h_imgs", "=", "lsn_h_imgs", ".", "view", "(", "bs", ",", "num_dist", ",", "-", "1", ")", "\n", "rnn_hid", "=", "self", ".", "listener", "(", "comm_action", "[", ":", ",", ":", "-", "1", "]", ",", "spk_cap_len_", "-", "1", ",", "spk_logits", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "rnn_hid", "=", "rnn_hid", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_dist", ",", "1", ")", "# (batch_size, num_dist, D_hid)", "\n", "\n", "return", "spk_logits", ",", "(", "rnn_hid", ",", "lsn_h_imgs", ")", ",", "comm_action", ",", "(", "end_idx_", ",", "end_loss_", ")", ",", "(", "\n", "torch", ".", "min", "(", "spk_cap_len_", ".", "float", "(", ")", ")", ",", "torch", ".", "mean", "(", "spk_cap_len_", ".", "float", "(", ")", ")", ",", "torch", ".", "max", "(", "spk_cap_len_", ".", "float", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.SingleAgent.forward": [[198, 200], ["models.SingleAgent.forward_video", "models.SingleAgent.forward_image"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.SingleAgent.forward_video", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.SingleAgent.forward_image"], ["", "def", "forward", "(", "self", ",", "data1", ",", "spk_sample_how", ")", ":", "\n", "        ", "return", "self", ".", "forward_video", "(", "data1", ",", "spk_sample_how", ")", "if", "self", ".", "video", "else", "self", ".", "forward_image", "(", "data1", ",", "spk_sample_how", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.ResnetVisualEncoder.__init__": [[207, 218], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.Logger.__init__"], ["def", "__init__", "(", "self", ",", "dframe", ",", "alex", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetVisualEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dframe", "=", "dframe", "\n", "self", ".", "flattened_size", "=", "64", "*", "6", "*", "6", "if", "alex", "else", "64", "*", "7", "*", "7", "\n", "self", ".", "alex", "=", "alex", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "256", "if", "alex", "else", "512", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "flattened_size", ",", "self", ".", "dframe", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.ResnetVisualEncoder.forward": [[219, 235], ["models.ResnetVisualEncoder.conv1", "torch.relu", "torch.relu", "torch.relu", "models.ResnetVisualEncoder.conv2", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "models.ResnetVisualEncoder.fc", "x.view.view.view", "x.view.view.view", "models.ResnetVisualEncoder.bn1", "models.ResnetVisualEncoder.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "alex", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "512", ",", "7", ",", "7", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "256", ",", "6", ",", "6", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "x", ")", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "flattened_size", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.Beholder.__init__": [[238, 252], ["super().__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "models.ResnetVisualEncoder"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Beholder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "args", ".", "dataset", "==", "\"coco\"", "or", "\"tsm\"", "in", "args", ".", "dataset", "or", "\"box\"", "in", "args", ".", "dataset", ":", "\n", "            ", "self", ".", "img_to_hid", "=", "torch", ".", "nn", ".", "Linear", "(", "args", ".", "D_img", ",", "args", ".", "D_hid", ")", "# shared visual system", "\n", "", "elif", "args", ".", "dataset", "in", "[", "\"imagenet\"", ",", "\"coco_2014\"", ",", "\"cc\"", "]", ":", "\n", "            ", "self", ".", "img_to_hid", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_to_hid", "=", "ResnetVisualEncoder", "(", "args", ".", "D_hid", ",", "alex", "=", "\"alex\"", "in", "args", ".", "dataset", ")", "\n", "\n", "", "self", ".", "unit_norm", "=", "args", ".", "unit_norm", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout", ")", "\n", "self", ".", "two_fc", "=", "args", ".", "two_fc", "\n", "if", "self", ".", "two_fc", ":", "\n", "            ", "self", ".", "hid_to_hid", "=", "torch", ".", "nn", ".", "Linear", "(", "args", ".", "D_hid", ",", "args", ".", "D_hid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.Beholder.forward": [[253, 267], ["models.Beholder.img_to_hid", "models.Beholder.drop", "models.Beholder.hid_to_hid", "torch.relu", "torch.relu", "torch.relu", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "norm.expand_as", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "img", ")", ":", "\n", "        ", "h_img", "=", "img", "\n", "if", "self", ".", "img_to_hid", "is", "None", ":", "return", "h_img", "\n", "h_img", "=", "self", ".", "img_to_hid", "(", "h_img", ")", "\n", "\n", "h_img", "=", "self", ".", "drop", "(", "h_img", ")", "\n", "\n", "if", "self", ".", "two_fc", ":", "\n", "            ", "h_img", "=", "self", ".", "hid_to_hid", "(", "F", ".", "relu", "(", "h_img", ")", ")", "\n", "\n", "", "if", "self", ".", "unit_norm", ":", "\n", "            ", "norm", "=", "torch", ".", "norm", "(", "h_img", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "detach", "(", ")", "+", "1e-9", "\n", "h_img", "=", "h_img", "/", "norm", ".", "expand_as", "(", "h_img", ")", "\n", "", "return", "h_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.RnnListener.__init__": [[270, 286], ["super().__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "RnnListener", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "args", ".", "D_emb", ",", "args", ".", "D_hid", ",", "args", ".", "num_layers", ",", "batch_first", "=", "True", ")", "if", "args", ".", "num_directions", "==", "1", "else", "nn", ".", "GRU", "(", "args", ".", "D_emb", ",", "args", ".", "D_hid", ",", "args", ".", "num_layers", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "args", ".", "vocab_size", ",", "args", ".", "D_emb", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "hid_to_hid", "=", "nn", ".", "Linear", "(", "args", ".", "num_directions", "*", "args", ".", "D_hid", ",", "args", ".", "D_hid", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout", ")", "\n", "\n", "self", ".", "D_hid", "=", "args", ".", "D_hid", "\n", "self", ".", "D_emb", "=", "args", ".", "D_emb", "\n", "self", ".", "num_layers", "=", "args", ".", "num_layers", "\n", "self", ".", "num_directions", "=", "args", ".", "num_directions", "\n", "self", ".", "vocab_size", "=", "args", ".", "vocab_size", "\n", "self", ".", "unit_norm", "=", "args", ".", "unit_norm", "\n", "\n", "self", ".", "tt", "=", "torch", "if", "args", ".", "cpu", "else", "torch", ".", "cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.RnnListener.forward": [[287, 312], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "models.RnnListener.drop", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "models.RnnListener.rnn", "h_n.transpose().contiguous().view", "models.RnnListener.hid_to_hid", "spk_msg.size", "spk_msg.size", "models.RnnListener.tt.FloatTensor().zero_", "spk_msg_lens.cpu", "h_n.transpose().contiguous", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "torch.norm().detach", "norm.expand_as", "models.RnnListener.tt.FloatTensor", "h_n.transpose", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "spk_msg", ",", "spk_msg_lens", ",", "spk_logit", "=", "0", ")", ":", "\n", "# spk_msg : (batch_size, seq_len)", "\n", "# spk_msg_lens : (batch_size)", "\n", "        ", "batch_size", "=", "spk_msg", ".", "size", "(", ")", "[", "0", "]", "\n", "seq_len", "=", "spk_msg", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "h_0", "=", "Variable", "(", "self", ".", "tt", ".", "FloatTensor", "(", "self", ".", "num_layers", "*", "self", ".", "num_directions", ",", "batch_size", ",", "self", ".", "D_hid", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "spk_msg_emb", "=", "torch", ".", "matmul", "(", "spk_logit", ",", "self", ".", "emb", ".", "weight", ")", "\n", "spk_msg_emb", "=", "self", ".", "drop", "(", "spk_msg_emb", ")", "\n", "\n", "pack", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "spk_msg_emb", ",", "spk_msg_lens", ".", "cpu", "(", ")", ",", "batch_first", "=", "True", ",", "\n", "enforce_sorted", "=", "False", ")", "\n", "\n", "_", ",", "h_n", "=", "self", ".", "rnn", "(", "pack", ",", "h_0", ")", "\n", "\n", "h_n", "=", "h_n", "[", "-", "self", ".", "num_directions", ":", ",", ":", ",", ":", "]", "\n", "out", "=", "h_n", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "self", ".", "num_directions", "*", "self", ".", "D_hid", ")", "\n", "out", "=", "self", ".", "hid_to_hid", "(", "out", ")", "\n", "\n", "if", "self", ".", "unit_norm", ":", "\n", "            ", "norm", "=", "torch", ".", "norm", "(", "out", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "detach", "(", ")", "+", "1e-9", "\n", "out", "=", "out", "/", "norm", ".", "expand_as", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.Speaker.__init__": [[315, 337], ["super().__init__", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "models.DotAttn", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Speaker", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "args", ".", "D_emb", ",", "args", ".", "D_hid", ",", "args", ".", "num_layers", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "args", ".", "vocab_size", ",", "args", ".", "D_emb", ",", "padding_idx", "=", "0", ")", "\n", "\n", "self", ".", "hid_to_voc", "=", "nn", ".", "Linear", "(", "args", ".", "D_hid", ",", "args", ".", "vocab_size", ")", "\n", "\n", "self", ".", "D_emb", "=", "args", ".", "D_emb", "\n", "self", ".", "D_hid", "=", "args", ".", "D_hid", "\n", "self", ".", "num_layers", "=", "args", ".", "num_layers", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout", ")", "\n", "\n", "self", ".", "vocab_size", "=", "args", ".", "vocab_size", "\n", "self", ".", "temp", "=", "args", ".", "temp", "\n", "self", ".", "hard", "=", "args", ".", "hard", "\n", "self", ".", "tt", "=", "torch", "if", "args", ".", "cpu", "else", "torch", ".", "cuda", "\n", "self", ".", "tt_", "=", "torch", "\n", "self", ".", "seq_len", "=", "args", ".", "seq_len", "\n", "\n", "self", ".", "attn", "=", "DotAttn", "(", ")", "\n", "self", ".", "h", "=", "nn", ".", "Linear", "(", "args", ".", "D_hid", ",", "args", ".", "D_hid", ")", "\n", "self", ".", "h1", "=", "nn", ".", "Linear", "(", "args", ".", "D_hid", "+", "args", ".", "D_emb", ",", "args", ".", "D_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.Speaker.forward": [[338, 376], ["h_img.view().repeat.view().repeat.view().repeat", "models.Speaker.emb", "models.Speaker.rnn", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "h_img.view().repeat.view().repeat.size", "models.Speaker.hid_to_voc", "models.gumbel_softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "models.Speaker.rnn", "torch.where.append", "torch.where.append", "torch.where.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.where.size", "torch.where.size", "torch.where.size", "pad_g.unsqueeze().repeat", "h_img.view().repeat.view().repeat.view", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "out_.view", "c_logit_.unsqueeze", "models.Speaker.attn", "weighted_lang.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.Speaker.h1", "c_logit_.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.where.size", "torch.where.size", "torch.where.size", "pad_g.cumsum().max", "models.Speaker.drop", "models.Speaker.h", "torch.where.size", "torch.where.size", "torch.where.size", "pad_g.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "pad_g.cumsum"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.gumbel_softmax"], ["", "def", "forward", "(", "self", ",", "h_img", ",", "caps_in", ",", "caps_in_lens", ",", "sample_how", ",", "video_out", "=", "None", ")", ":", "\n", "\n", "        ", "batch_size", "=", "h_img", ".", "size", "(", ")", "[", "0", "]", "# caps_in.size()[0]", "\n", "\n", "h_img", "=", "h_img", ".", "view", "(", "1", ",", "batch_size", ",", "self", ".", "D_hid", ")", ".", "repeat", "(", "self", ".", "num_layers", ",", "1", ",", "1", ")", "\n", "\n", "initial_input", "=", "self", ".", "emb", "(", "torch", ".", "ones", "(", "[", "batch_size", ",", "1", "]", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "cuda", "(", ")", "*", "2", ")", "\n", "out_", ",", "hid_", "=", "self", ".", "rnn", "(", "initial_input", ",", "h_img", ")", "\n", "logits_", "=", "[", "]", "\n", "labels_", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "seq_len", ")", ":", "\n", "            ", "logit_", "=", "self", ".", "hid_to_voc", "(", "out_", ".", "view", "(", "-", "1", ",", "self", ".", "D_hid", ")", ")", "\n", "c_logit_", ",", "comm_label_", "=", "gumbel_softmax", "(", "logit_", ",", "self", ".", "temp", ",", "self", ".", "hard", ",", "self", ".", "tt", ",", "idx", ")", "\n", "input_", "=", "torch", ".", "matmul", "(", "c_logit_", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "emb", ".", "weight", ")", "\n", "if", "video_out", "is", "not", "None", ":", "\n", "# video_tensor, _ = pad_packed_sequence(video_out)", "\n", "                ", "weighted_lang", ",", "lang_attn", "=", "self", ".", "attn", "(", "self", ".", "drop", "(", "video_out", ")", ",", "self", ".", "h", "(", "hid_", "[", "0", "]", ")", ")", "\n", "weighted_lang", "=", "weighted_lang", ".", "unsqueeze", "(", "1", ")", "\n", "input_", "=", "torch", ".", "cat", "(", "(", "input_", ",", "weighted_lang", ")", ",", "dim", "=", "-", "1", ")", "\n", "input_", "=", "self", ".", "h1", "(", "input_", ")", "\n", "", "out_", ",", "hid_", "=", "self", ".", "rnn", "(", "input_", ",", "hid_", ")", "\n", "logits_", ".", "append", "(", "c_logit_", ".", "unsqueeze", "(", "1", ")", ")", "\n", "labels_", ".", "append", "(", "comm_label_", ")", "\n", "", "logits_", "=", "torch", ".", "cat", "(", "logits_", ",", "dim", "=", "1", ")", "\n", "labels_", "=", "torch", ".", "cat", "(", "labels_", ",", "dim", "=", "-", "1", ")", "\n", "tmp", "=", "torch", ".", "zeros", "(", "logits_", ".", "size", "(", "-", "1", ")", ")", "\n", "tmp", "[", "3", "]", "=", "1", "\n", "logits_", "[", ":", ",", "-", "1", ",", ":", "]", "=", "tmp", "\n", "labels_", "[", ":", ",", "-", "1", "]", "=", "3", "\n", "pad_g", "=", "(", "(", "labels_", "==", "3", ")", ".", "cumsum", "(", "1", ")", "==", "0", ")", "\n", "labels_", "=", "pad_g", "*", "labels_", "\n", "pad_", "=", "torch", ".", "zeros", "(", "logits_", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "pad_", "[", ":", ",", ":", ",", "0", "]", "=", "1", "\n", "logits_", "=", "torch", ".", "where", "(", "pad_g", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "logits_", ".", "size", "(", "-", "1", ")", ")", ",", "logits_", ",", "pad_", ")", "\n", "\n", "cap_len", "=", "pad_g", ".", "cumsum", "(", "1", ")", ".", "max", "(", "1", ")", ".", "values", "+", "1", "\n", "\n", "return", "logits_", ",", "labels_", ",", "cap_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.sample_gumbel": [[19, 22], ["torch.autograd.Variable", "tt.FloatTensor().uniform_", "torch.log", "torch.log", "torch.log", "tt.FloatTensor", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["def", "sample_gumbel", "(", "shape", ",", "tt", "=", "torch", ",", "eps", "=", "1e-20", ")", ":", "\n", "    ", "U", "=", "Variable", "(", "tt", ".", "FloatTensor", "(", "shape", ")", ".", "uniform_", "(", "0", ",", "1", ")", ")", "\n", "return", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "U", "+", "eps", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.gumbel_softmax_sample": [[24, 29], ["torch.softmax", "models.sample_gumbel", "float", "logits.size"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.DotAttn.softmax", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.sample_gumbel"], ["", "def", "gumbel_softmax_sample", "(", "logits", ",", "temp", ",", "tt", "=", "torch", ",", "idx_", "=", "10", ")", ":", "\n", "    ", "y", "=", "(", "logits", "+", "sample_gumbel", "(", "logits", ".", "size", "(", ")", ",", "tt", ")", ")", "/", "temp", "\n", "if", "idx_", "==", "0", ":", "\n", "        ", "y", "[", ":", ",", "3", "]", "=", "-", "float", "(", "'inf'", ")", "\n", "", "return", "F", ".", "softmax", "(", "y", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.gumbel_softmax": [[31, 39], ["models.gumbel_softmax_sample", "torch.max", "torch.max", "torch.max", "tt.FloatTensor().zero_().scatter_", "torch.autograd.Variable", "tt.FloatTensor().zero_", "tt.FloatTensor", "gumbel_softmax_sample.size"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.gumbel_softmax_sample"], ["", "def", "gumbel_softmax", "(", "logits", ",", "temp", ",", "hard", ",", "tt", "=", "torch", ",", "idx_", "=", "10", ")", ":", "\n", "    ", "y", "=", "gumbel_softmax_sample", "(", "logits", ",", "temp", ",", "tt", ",", "idx_", ")", "# (batch_size, num_cat)", "\n", "y_max", ",", "y_max_idx", "=", "torch", ".", "max", "(", "y", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "hard", ":", "\n", "        ", "y_hard", "=", "tt", ".", "FloatTensor", "(", "y", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", ".", "scatter_", "(", "1", ",", "y_max_idx", ".", "data", ",", "1", ")", "\n", "y", "=", "Variable", "(", "y_hard", "-", "y", ".", "data", ",", "requires_grad", "=", "False", ")", "+", "y", "\n", "\n", "", "return", "y", ",", "y_max_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.forward.ed": [[19, 28], ["range", "max", "len", "range", "len", "len", "range", "len", "len", "min", "min", "len"], "function", ["None"], ["def", "ed", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Edit distance\"\"\"", "\n", "n", "=", "max", "(", "len", "(", "a", ")", ",", "len", "(", "b", ")", ")", "+", "1", "\n", "dp", "=", "[", "[", "0", "]", "*", "n", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "dp", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", "=", "min", "(", "dp", "[", "i", "+", "1", "]", "[", "j", "]", ",", "dp", "[", "i", "]", "[", "j", "+", "1", "]", ")", "+", "1", "\n", "if", "a", "[", "i", "]", "==", "b", "[", "j", "]", ":", "dp", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", "=", "min", "(", "dp", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", ",", "dp", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "return", "dp", "[", "len", "(", "a", ")", "]", "[", "len", "(", "b", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.forward.ts": [[30, 41], ["inp.div.div", "len", "range", "inp.div.norm", "range", "scipy.stats.spearmanr", "d_msg.append", "d_inp.append", "forward.ed", "msg[].tolist", "msg[].tolist", "inp[].dot().item", "inp[].dot"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.forward.ed"], ["", "def", "ts", "(", "msg", ",", "inp", ")", ":", "\n", "    ", "\"\"\" Topological similarity\"\"\"", "\n", "d_msg", ",", "d_inp", "=", "[", "]", ",", "[", "]", "\n", "inp", "=", "inp", ".", "div", "(", "inp", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "n", "=", "len", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "            ", "d_msg", ".", "append", "(", "ed", "(", "msg", "[", "i", "]", ".", "tolist", "(", ")", ",", "msg", "[", "j", "]", ".", "tolist", "(", ")", ")", ")", "\n", "d_inp", ".", "append", "(", "-", "inp", "[", "i", "]", ".", "dot", "(", "inp", "[", "j", "]", ")", ".", "item", "(", ")", ")", "\n", "", "", "d_msg", "[", "0", "]", "+=", "1e-5", "\n", "return", "stats", ".", "spearmanr", "(", "d_msg", ",", "d_inp", ")", ".", "correlation", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.forward.forward_joint": [[43, 83], ["get_data", "model", "loss_dict_[].update", "loss_dict_[].update", "loss_dict_[].update", "loss_dict_[].update", "extract.append", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "forward.ts", "comm_actions.detach", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "util.logit_to_acc", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "comm_actions.detach", "en_batch[].detach", "output_en.reshape", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "util.logit_to_acc", "util.idx_to_emb", "torch.autograd.Variable", "util.logit_to_acc", "util.idx_to_emb", "torch.autograd.Variable", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "en_batch[].cpu().data.numpy", "tt.FloatTensor().fill_", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "l2_batch[].cpu().data.numpy", "tt.FloatTensor().fill_", "output_en.size", "output_en.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "tt.FloatTensor", "tt.FloatTensor", "en_batch[].cpu", "torch.masked_select.size", "l2_batch[].cpu", "torch.masked_select.size"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.AverageMeter.update", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.AverageMeter.update", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.AverageMeter.update", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.AverageMeter.update", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.forward.ts", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.logit_to_acc", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.logit_to_acc", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.idx_to_emb", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.logit_to_acc", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.idx_to_emb"], ["", "def", "forward_joint", "(", "images", ",", "model", ",", "loss_dict_", ",", "args", ",", "loss_fn", ",", "num_dist", ",", "tt", ",", "extract", "=", "None", ",", "t", "=", "0", ")", ":", "\n", "    ", "get_data", "=", "next_batch_joint_video", "if", "(", "\"video\"", "in", "args", ".", "dataset", "or", "\"box\"", "in", "args", ".", "dataset", ")", "else", "next_batch_joint", "\n", "en_batch", "=", "get_data", "(", "images", ",", "args", ".", "batch_size", ",", "num_dist", ",", "tt", ",", "t", ")", "\n", "l2_batch", "=", "en_batch", "\n", "output_en", ",", "output_l2", ",", "comm_actions", ",", "end_loss_", ",", "len_info", "=", "model", "(", "en_batch", ",", "args", ".", "sample_how", ")", "\n", "if", "extract", "is", "not", "None", ":", "extract", ".", "append", "(", "comm_actions", ".", "detach", "(", ")", ")", "\n", "final_loss", "=", "0", "\n", "lenlen", "=", "False", "\n", "if", "lenlen", ":", "\n", "        ", "en_spk_loss", "=", "loss_fn", "[", "'xent'", "]", "(", "torch", ".", "index_select", "(", "output_en", ".", "reshape", "(", "output_en", ".", "size", "(", "0", ")", "*", "output_en", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "0", ",", "end_loss_", "[", "0", "]", ")", ",", "end_loss_", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "en_spk_loss", "=", "torch", ".", "tensor", "(", "0", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "", "loss_dict_", "[", "\"average_len\"", "]", ".", "update", "(", "len_info", "[", "1", "]", ".", "data", ")", "\n", "if", "args", ".", "loss_type", "==", "\"xent\"", ":", "\n", "        ", "l2_diff_dist", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "output_l2", "[", "0", "]", "-", "output_l2", "[", "1", "]", ",", "2", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "num_dist", ")", "\n", "l2_logits", "=", "1", "/", "(", "l2_diff_dist", "+", "1e-10", ")", "\n", "l2_lsn_loss", "=", "loss_fn", "[", "'xent'", "]", "(", "l2_logits", ",", "l2_batch", "[", "-", "1", "]", ")", "\n", "l2_lsn_acc", "=", "logit_to_acc", "(", "l2_logits", ",", "l2_batch", "[", "-", "1", "]", ")", "*", "100", "\n", "final_loss", "+=", "l2_lsn_loss", "\n", "", "elif", "args", ".", "loss_type", "==", "\"mse\"", ":", "\n", "        ", "en_diff_dist", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "output_en", "[", "1", "]", "[", "0", "]", "-", "output_en", "[", "1", "]", "[", "1", "]", ",", "2", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "args", ".", "num_dist", ")", "\n", "en_logits", "=", "1", "/", "(", "en_diff_dist", "+", "1e-10", ")", "\n", "en_lsn_acc", "=", "logit_to_acc", "(", "en_logits", ",", "en_batch", "[", "-", "1", "]", ")", "*", "100", "\n", "\n", "en_diff_dist", "=", "torch", ".", "masked_select", "(", "en_diff_dist", ",", "idx_to_emb", "(", "en_batch", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "args", ".", "num_dist", ",", "tt", ")", ")", "\n", "en_lsn_loss", "=", "loss_fn", "[", "'mse'", "]", "(", "en_diff_dist", ",", "Variable", "(", "tt", ".", "FloatTensor", "(", "en_diff_dist", ".", "size", "(", ")", ")", ".", "fill_", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n", "l2_diff_dist", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "output_l2", "[", "1", "]", "[", "0", "]", "-", "output_l2", "[", "1", "]", "[", "1", "]", ",", "2", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "args", ".", "num_dist", ")", "\n", "l2_logits", "=", "1", "/", "(", "l2_diff_dist", "+", "1e-10", ")", "\n", "l2_lsn_acc", "=", "logit_to_acc", "(", "l2_logits", ",", "l2_batch", "[", "-", "1", "]", ")", "*", "100", "\n", "\n", "l2_diff_dist", "=", "torch", ".", "masked_select", "(", "l2_diff_dist", ",", "idx_to_emb", "(", "l2_batch", "[", "-", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "args", ".", "num_dist", ",", "tt", ")", ")", "\n", "l2_lsn_loss", "=", "loss_fn", "[", "'mse'", "]", "(", "l2_diff_dist", ",", "Variable", "(", "tt", ".", "FloatTensor", "(", "l2_diff_dist", ".", "size", "(", ")", ")", ".", "fill_", "(", "0", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n", "final_loss", "+=", "en_lsn_loss", "\n", "final_loss", "+=", "l2_lsn_loss", "\n", "", "loss_dict_", "[", "\"accuracy\"", "]", ".", "update", "(", "l2_lsn_acc", ")", "\n", "loss_dict_", "[", "\"loss\"", "]", ".", "update", "(", "l2_lsn_loss", ".", "data", ")", "\n", "loss_dict_", "[", "\"ts\"", "]", ".", "update", "(", "ts", "(", "comm_actions", ".", "detach", "(", ")", ",", "en_batch", "[", "0", "]", ".", "detach", "(", ")", ")", ")", "\n", "return", "final_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.dataloader.next_batch_joint": [[15, 57], ["range", "range", "torch.index_select().numpy", "torch.index_select().numpy", "numpy.array", "torch.autograd.Variable", "torch.from_numpy", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "len", "len", "torch.index_select.div", "len", "random.choice", "torch.index_select", "spk_imgs.cuda.append", "list", "whichs.cuda.append", "torch.from_numpy", "spk_imgs.cuda.cuda", "lsn_imgs.cuda.cuda", "whichs.cuda.cuda", "torch.index_select.norm", "len", "torch.tensor", "random.randint", "images.div.matmul", "torch.nn.functional.softmax", "random.choice", "random.randint", "torch.index_select", "torch.index_select", "torch.autograd.Variable", "torch.autograd.Variable", "len", "list", "len", "torch.tensor", "torch.tensor", "torch.LongTensor", "random.choice", "range", "len", "torch.nn.functional.softmax.numpy"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.models.DotAttn.softmax"], ["def", "next_batch_joint", "(", "images", ",", "batch_size", ",", "num_dist", ",", "tt", ",", "t", "=", "0", ")", ":", "\n", "    ", "spk_imgs", ",", "spk_caps", ",", "lsn_imgs", ",", "lsn_caps", ",", "whichs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "total_indices", "=", "[", "]", "\n", "keys", "=", "range", "(", "len", "(", "images", ")", ")", "\n", "assert", "len", "(", "keys", ")", ">=", "num_dist", "\n", "if", "t", ":", "img", "=", "images", ".", "div", "(", "images", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "if", "len", "(", "images", ")", ">", "50000", ":", "\n", "        ", "img_indices", "=", "random", ".", "choice", "(", "len", "(", "images", ")", ",", "50000", ",", "replace", "=", "False", ")", "\n", "images", "=", "torch", ".", "index_select", "(", "images", ",", "0", ",", "torch", ".", "tensor", "(", "img_indices", ")", ")", "\n", "", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "if", "t", ":", "\n", "            ", "spk_img", "=", "random", ".", "randint", "(", "len", "(", "images", ")", ")", "\n", "sim", "=", "img", ".", "matmul", "(", "img", "[", "spk_img", "]", ")", "\n", "sim", "[", "spk_img", "]", "=", "-", "100000", "\n", "p", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "sim", ")", "\n", "img_indices", "=", "[", "spk_img", "]", "+", "list", "(", "random", ".", "choice", "(", "range", "(", "len", "(", "images", ")", ")", ",", "num_dist", "-", "1", ",", "replace", "=", "False", ",", "p", "=", "p", ".", "numpy", "(", ")", ")", ")", "\n", "which", "=", "0", "\n", "", "else", ":", "\n", "# img_indices = random.permutation(len(images))[:num_dist]", "\n", "            ", "img_indices", "=", "random", ".", "choice", "(", "len", "(", "images", ")", ",", "num_dist", ",", "replace", "=", "False", ")", "\n", "which", "=", "random", ".", "randint", "(", "0", ",", "num_dist", ")", "# (1)", "\n", "spk_img", "=", "img_indices", "[", "which", "]", "\n", "\n", "", "spk_imgs", ".", "append", "(", "spk_img", ")", "# (batch_size, 2048)", "\n", "lsn_imgs", "+=", "list", "(", "img_indices", ")", "# batch_size * num_dist", "\n", "whichs", ".", "append", "(", "which", ")", "# (batch_size)", "\n", "# if len(keys) == num_dist: # easier way out", "\n", "#     whichs = list(range(num_dist))", "\n", "#     spk_imgs = keys", "\n", "#     lsn_imgs = [keys for _ in range(num_dist)]", "\n", "", "spk_imgs", "=", "torch", ".", "index_select", "(", "images", ",", "0", ",", "torch", ".", "tensor", "(", "spk_imgs", ")", ")", ".", "numpy", "(", ")", "\n", "lsn_imgs", "=", "torch", ".", "index_select", "(", "images", ",", "0", ",", "torch", ".", "tensor", "(", "lsn_imgs", ")", ")", ".", "numpy", "(", ")", "# view(batch_size, num_dist,-1).numpy()", "\n", "whichs", "=", "np", ".", "array", "(", "whichs", ")", "\n", "spk_imgs", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "spk_imgs", ")", ",", "requires_grad", "=", "False", ")", "# .view(batch_size, -1)", "\n", "lsn_imgs", "=", "torch", ".", "from_numpy", "(", "lsn_imgs", ")", "\n", "lsn_imgs", "=", "Variable", "(", "lsn_imgs", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "batch_size", ",", "num_dist", ",", "-", "1", ")", "\n", "whichs", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "whichs", ")", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "batch_size", ")", "\n", "if", "tt", "==", "torch", ".", "cuda", ":", "\n", "        ", "spk_imgs", "=", "spk_imgs", ".", "cuda", "(", ")", "\n", "lsn_imgs", "=", "lsn_imgs", ".", "cuda", "(", ")", "\n", "whichs", "=", "whichs", ".", "cuda", "(", ")", "\n", "", "return", "(", "spk_imgs", ",", "lsn_imgs", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "whichs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.dataloader.next_batch_joint_video": [[59, 84], ["torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "random.permutation", "len", "len", "list", "range", "torch.LongTensor", "torch.LongTensor", "spk_imgs.cuda.cuda", "lsn_imgs.cuda.cuda", "whichs.cuda.cuda", "len", "range", "list", "random.randint", "spk_imgs.cuda.append", "lsn_imgs.cuda.append", "whichs.cuda.append", "torch.autograd.Variable", "numpy.array", "numpy.array", "range", "range", "random.permutation", "list", "torch.LongTensor", "numpy.array"], "function", ["None"], ["", "def", "next_batch_joint_video", "(", "videos", ",", "batch_size", ",", "num_dist", ",", "tt", ",", "t", "=", "0", ")", ":", "\n", "    ", "spk_imgs", ",", "spk_caps", ",", "lsn_imgs", ",", "lsn_caps", ",", "whichs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "total_indices", "=", "[", "]", "\n", "# keys = range(len(images))", "\n", "keys", "=", "random", ".", "permutation", "(", "len", "(", "videos", ")", ")", "[", ":", "batch_size", "]", "# fix batch size of videos, distractors from the batch", "\n", "assert", "len", "(", "keys", ")", ">=", "num_dist", "\n", "if", "len", "(", "keys", ")", "==", "num_dist", ":", "\n", "        ", "whichs", "=", "spk_imgs", "=", "list", "(", "range", "(", "num_dist", ")", ")", "\n", "lsn_imgs", "=", "[", "list", "(", "range", "(", "num_dist", ")", ")", "for", "_", "in", "range", "(", "num_dist", ")", "]", "\n", "", "else", ":", "\n", "        ", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "img_indices", "=", "random", ".", "permutation", "(", "batch_size", ")", "[", ":", "num_dist", "]", "\n", "which", "=", "random", ".", "randint", "(", "0", ",", "num_dist", ")", "# (1)", "\n", "spk_imgs", ".", "append", "(", "img_indices", "[", "which", "]", ")", "# list of (batchsize, )", "\n", "lsn_imgs", ".", "append", "(", "list", "(", "img_indices", ")", ")", "# list of (batchsize, num_dist)", "\n", "whichs", ".", "append", "(", "which", ")", "# (batch_size)", "\n", "", "", "batch_videos", "=", "[", "videos", "[", "key", "]", "for", "key", "in", "keys", "]", "\n", "whichs", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "whichs", ")", ")", ",", "requires_grad", "=", "False", ")", ".", "view", "(", "batch_size", ")", "\n", "spk_imgs", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "spk_imgs", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "lsn_imgs", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "lsn_imgs", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "tt", "==", "torch", ".", "cuda", ":", "\n", "        ", "spk_imgs", "=", "spk_imgs", ".", "cuda", "(", ")", "\n", "lsn_imgs", "=", "lsn_imgs", ".", "cuda", "(", ")", "\n", "whichs", "=", "whichs", ".", "cuda", "(", ")", "\n", "", "return", "(", "batch_videos", ",", "spk_imgs", ",", "lsn_imgs", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "whichs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.dataloader.weave_out": [[86, 94], ["max", "range", "len", "len", "ans.append"], "function", ["None"], ["", "def", "weave_out", "(", "caps_out", ")", ":", "\n", "    ", "ans", "=", "[", "]", "\n", "seq_len", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "caps_out", "]", ")", "\n", "for", "idx", "in", "range", "(", "seq_len", ")", ":", "\n", "        ", "for", "sublst", "in", "caps_out", ":", "\n", "            ", "if", "idx", "<", "len", "(", "sublst", ")", ":", "\n", "                ", "ans", ".", "append", "(", "sublst", "[", "idx", "]", ")", "\n", "", "", "", "return", "ans", "\n", "", ""]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.AverageMeter.__init__": [[15, 17], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.AverageMeter.reset": [[18, 23], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.AverageMeter.update": [[24, 29], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.Logger.__init__": [[72, 81], ["print", "codecs.open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "no_write", "=", "False", ",", "no_terminal", "=", "False", ")", ":", "\n", "        ", "self", ".", "no_write", "=", "no_write", "\n", "if", "self", ".", "no_write", ":", "\n", "            ", "print", "(", "\"Don't write to file\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "log", "=", "codecs", ".", "open", "(", "path", "+", "\"log.log\"", ",", "\"wb\"", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n", "", "self", ".", "no_terminal", "=", "no_terminal", "\n", "self", ".", "terminal", "=", "sys", ".", "stdout", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.Logger.write": [[82, 87], ["util.Logger.log.write", "util.Logger.terminal.write"], "methods", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.Logger.write", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.Logger.write"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "if", "not", "self", ".", "no_write", ":", "\n", "            ", "self", ".", "log", ".", "write", "(", "message", ")", "\n", "", "if", "not", "self", ".", "no_terminal", ":", "\n", "            ", "self", ".", "terminal", ".", "write", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.Logger.flush": [[88, 93], ["None"], "methods", ["None"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "# this flush method is needed for python 3 compatibility.", "\n", "# this handles the flush command by doing nothing.", "\n", "# you might want to specify some extra behavior here.", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.sum_num_captions": [[31, 33], ["sum", "len"], "function", ["None"], ["", "", "def", "sum_num_captions", "(", "org", ")", ":", "\n", "    ", "return", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "org", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.get_coco_idx": [[35, 61], ["len", "len", "len", "len", "a_.append", "b_.append", "set", "set"], "function", ["None"], ["", "def", "get_coco_idx", "(", ")", ":", "\n", "    ", "a", ",", "b", "=", "56644", ",", "56643", "\n", "a_", ",", "b_", "=", "[", "]", ",", "[", "]", "\n", "\n", "cand", "=", "0", "\n", "while", "len", "(", "a_", ")", "<", "14500", ":", "\n", "        ", "if", "not", "cand", "in", "a_", ":", "\n", "            ", "a_", ".", "append", "(", "cand", ")", "\n", "cand", "=", "cand", "+", "4", "\n", "", "else", ":", "\n", "            ", "cand", "+=", "1", "\n", "", "cand", "=", "cand", "%", "56644", "\n", "\n", "", "cand", "=", "0", "\n", "while", "len", "(", "b_", ")", "<", "14500", ":", "\n", "        ", "if", "not", "cand", "in", "b_", ":", "\n", "            ", "b_", ".", "append", "(", "cand", ")", "\n", "cand", "+=", "4", "\n", "", "else", ":", "\n", "            ", "cand", "+=", "1", "\n", "", "cand", "=", "cand", "%", "56643", "\n", "\n", "", "assert", "(", "len", "(", "set", "(", "a_", ")", ")", "==", "14500", ")", "\n", "assert", "(", "len", "(", "set", "(", "b_", ")", ")", "==", "14500", ")", "\n", "\n", "return", "a_", ",", "b_", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.recur_mkdir": [[63, 69], ["dir.split", "range", "len", "util.check_mkdir"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.check_mkdir"], ["", "def", "recur_mkdir", "(", "dir", ")", ":", "\n", "    ", "ll", "=", "dir", ".", "split", "(", "\"/\"", ")", "\n", "ll", "=", "[", "x", "for", "x", "in", "ll", "if", "x", "!=", "\"\"", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "ll", ")", ")", ":", "\n", "        ", "ss", "=", "\"/\"", ".", "join", "(", "ll", "[", "0", ":", "idx", "+", "1", "]", ")", "\n", "check_mkdir", "(", "\"/\"", "+", "ss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.check_dataset_sanity": [[95, 101], ["None"], "function", ["None"], ["", "", "def", "check_dataset_sanity", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "==", "\"coco\"", "or", "args", ".", "dataset", "==", "\"multi30k\"", "\n", "if", "args", ".", "dataset", "==", "\"coco\"", ":", "\n", "        ", "assert", "(", "args", ".", "src", ",", "args", ".", "trg", ")", "==", "(", "\"en\"", ",", "\"jp\"", ")", "or", "(", "args", ".", "src", ",", "args", ".", "trg", ")", "==", "(", "\"jp\"", ",", "\"en\"", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"multi30k\"", ":", "\n", "        ", "assert", "(", "args", ".", "src", ",", "args", ".", "trg", ")", "==", "(", "\"en\"", ",", "\"de\"", ")", "or", "(", "args", ".", "src", ",", "args", ".", "trg", ")", "==", "(", "\"de\"", ",", "\"en\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.sort_per_len": [[103, 109], ["np.array.sort", "numpy.array", "len", "len", "len", "enumerate"], "function", ["None"], ["", "", "def", "sort_per_len", "(", "caps", ")", ":", "\n", "    ", "lens", "=", "[", "(", "idx", ",", "len", "(", "cap", ")", ")", "for", "idx", ",", "cap", "in", "enumerate", "(", "caps", ")", "]", "\n", "lens", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "lens", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "lens", "]", ")", "\n", "assert", "len", "(", "lens", ")", "==", "len", "(", "caps", ")", "\n", "return", "lens", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.trim_caps": [[111, 115], ["print", "util.sum_num_captions", "util.sum_num_captions", "len", "len"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.sum_num_captions", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.sum_num_captions"], ["", "def", "trim_caps", "(", "caps", ",", "minlen", ",", "maxlen", ")", ":", "\n", "    ", "new_cap", "=", "[", "[", "cap", "for", "cap", "in", "cap_i", "if", "len", "(", "cap", ")", "<=", "maxlen", "and", "len", "(", "cap", ")", ">=", "minlen", "]", "for", "cap_i", "in", "caps", "]", "\n", "print", "(", "\"Before : {} captions / After : {} captions\"", ".", "format", "(", "sum_num_captions", "(", "caps", ")", ",", "sum_num_captions", "(", "new_cap", ")", ")", ")", "\n", "return", "new_cap", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.print_params": [[117, 144], ["collections.OrderedDict", "zip", "name.split", "len", "len", "sorted", "[].keys"], "function", ["None"], ["", "def", "print_params", "(", "names", ",", "sizes", ")", ":", "\n", "    ", "agents", "=", "\"l1_agent l2_agent\"", ".", "split", "(", ")", "\n", "comps", "=", "\"speaker listener beholder\"", ".", "split", "(", ")", "\n", "\n", "dd", "=", "OrderedDict", "(", ")", "\n", "for", "aa", "in", "agents", ":", "\n", "        ", "dd", "[", "aa", "]", "=", "{", "}", "\n", "for", "cc", "in", "comps", ":", "\n", "            ", "dd", "[", "aa", "]", "[", "cc", "]", "=", "{", "}", "\n", "\n", "", "", "for", "name", ",", "size", "in", "zip", "(", "names", ",", "sizes", ")", ":", "\n", "        ", "name_", "=", "name", ".", "split", "(", "\".\"", ")", "\n", "aa", ",", "cc", ",", "rest", "=", "name_", "[", "0", "]", ",", "name_", "[", "1", "]", ",", "\".\"", ".", "join", "(", "name_", "[", "2", ":", "]", ")", "\n", "dd", "[", "aa", "]", "[", "cc", "]", "[", "rest", "]", "=", "\"{} ({})\"", ".", "format", "(", "rest", ",", "size", "[", "0", "]", ")", "if", "len", "(", "size", ")", "==", "1", "else", "\"{} ({}, {})\"", ".", "format", "(", "rest", ",", "size", "[", "0", "]", ",", "\n", "size", "[", "1", "]", ")", "\n", "\n", "", "ss", "=", "\"\"", "\n", "for", "aa", "in", "agents", ":", "\n", "        ", "ss", "+=", "\"\\t{}\\n\"", ".", "format", "(", "aa", ")", "\n", "for", "cc", "in", "comps", ":", "\n", "            ", "if", "len", "(", "dd", "[", "aa", "]", "[", "cc", "]", ")", ">", "0", ":", "\n", "                ", "ss", "+=", "\"\\t\\t{}:\\t\"", ".", "format", "(", "cc", ")", "\n", "for", "rr", "in", "sorted", "(", "dd", "[", "aa", "]", "[", "cc", "]", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "ss", "+=", "dd", "[", "aa", "]", "[", "cc", "]", "[", "rr", "]", "+", "\", \"", "\n", "", "ss", "+=", "\"\\n\"", "\n", "\n", "", "", "", "return", "ss", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.print_captions": [[146, 148], ["joiner.join().replace", "joiner.join"], "function", ["None"], ["", "def", "print_captions", "(", "gen_indices", ",", "i2w", ",", "joiner", ")", ":", "\n", "    ", "return", "[", "joiner", ".", "join", "(", "[", "i2w", "[", "ii", "]", "for", "ii", "in", "gen_idx", "]", ")", ".", "replace", "(", "\"@@ \"", ",", "\"\"", ")", "for", "gen_idx", "in", "gen_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.decode": [[150, 152], ["None"], "function", ["None"], ["", "def", "decode", "(", "gen_indices", ",", "i2w", ")", ":", "\n", "    ", "return", "[", "\" \"", ".", "join", "(", "[", "i2w", "[", "ii", "]", "for", "ii", "in", "gen_idx", "]", ")", ".", "replace", "(", "\"@@ \"", ",", "\"\"", ")", "for", "gen_idx", "in", "gen_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.pick": [[154, 160], ["enumerate", "res.append"], "function", ["None"], ["", "def", "pick", "(", "i1", ",", "i2", ",", "whichs", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "img", "=", "[", "i1", ",", "i2", "]", "\n", "for", "idx", ",", "which", "in", "enumerate", "(", "whichs", ")", ":", "\n", "        ", "res", ".", "append", "(", "img", "[", "which", "]", "[", "idx", "]", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.idx_to_onehot": [[162, 170], ["torch.LongTensor().view", "torch.FloatTensor", "torch.FloatTensor.zero_", "torch.FloatTensor.scatter_", "torch.LongTensor"], "function", ["None"], ["", "def", "idx_to_onehot", "(", "indices", ",", "nb_digits", ")", ":", "# input numpy array", "\n", "    ", "y", "=", "torch", ".", "LongTensor", "(", "indices", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "y_onehot", "=", "torch", ".", "FloatTensor", "(", "indices", ".", "shape", "[", "0", "]", ",", "nb_digits", ")", "\n", "\n", "y_onehot", ".", "zero_", "(", ")", "\n", "y_onehot", ".", "scatter_", "(", "1", ",", "y", ",", "1", ")", "\n", "\n", "return", "y_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.max_logit_to_onehot": [[172, 179], ["torch.max", "torch.FloatTensor", "Variable().cuda.zero_", "Variable().cuda.scatter_", "torch.autograd.Variable().cuda", "logits.cuda", "logits.size", "max_idx.data.long().cpu", "torch.autograd.Variable", "max_idx.data.long", "torch.FloatTensor"], "function", ["None"], ["", "def", "max_logit_to_onehot", "(", "logits", ")", ":", "\n", "    ", "max_element", ",", "max_idx", "=", "torch", ".", "max", "(", "logits", ".", "cuda", "(", ")", ",", "1", ")", "\n", "onehot", "=", "torch", ".", "FloatTensor", "(", "logits", ".", "size", "(", ")", ")", "\n", "onehot", ".", "zero_", "(", ")", "\n", "onehot", ".", "scatter_", "(", "1", ",", "max_idx", ".", "data", ".", "long", "(", ")", ".", "cpu", "(", ")", ",", "1", ")", "\n", "onehot", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "onehot", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "return", "onehot", ",", "max_idx", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.sample_logit_to_onehot": [[181, 189], ["torch.multinomial", "torch.FloatTensor", "Variable().cuda.zero_", "enumerate", "torch.autograd.Variable().cuda", "logits.size", "torch.multinomial.data.cpu().numpy().flatten().tolist", "torch.autograd.Variable", "torch.multinomial.data.cpu().numpy().flatten", "torch.multinomial.data.cpu().numpy", "torch.multinomial.data.cpu"], "function", ["None"], ["", "def", "sample_logit_to_onehot", "(", "logits", ")", ":", "\n", "    ", "indices", "=", "torch", ".", "multinomial", "(", "logits", ",", "1", ")", "\n", "onehot", "=", "torch", ".", "FloatTensor", "(", "logits", ".", "size", "(", ")", ")", "\n", "onehot", ".", "zero_", "(", ")", "\n", "for", "ii", ",", "jj", "in", "enumerate", "(", "indices", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "onehot", "[", "ii", "]", "[", "jj", "]", "=", "1", "\n", "", "onehot", "=", "Variable", "(", "onehot", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "return", "onehot", ",", "indices", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.logit_to_acc": [[191, 196], ["torch.max", "torch.eq", "float", "float", "torch.eq.nelement", "torch.eq.sum"], "function", ["None"], ["", "def", "logit_to_acc", "(", "logits", ",", "y", ")", ":", "# logits: [batch_size, num_of_classes]", "\n", "    ", "y_max", ",", "y_max_idx", "=", "torch", ".", "max", "(", "logits", ",", "1", ")", "# [batch_size]", "\n", "eq", "=", "torch", ".", "eq", "(", "y_max_idx", ",", "y", ")", "\n", "acc", "=", "float", "(", "eq", ".", "sum", "(", ")", ".", "data", ")", "/", "float", "(", "eq", ".", "nelement", "(", ")", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.logit_to_top_k": [[198, 206], ["torch.sort", "y.view.view", "y.view.expand", "torch.eq", "torch.sum", "indices.size", "torch.sum.nelement", "torch.sum.sum"], "function", ["None"], ["", "def", "logit_to_top_k", "(", "logits", ",", "y", ",", "k", ")", ":", "# logits: [batch_size, num_of_classes]", "\n", "    ", "logits_sorted", ",", "indices", "=", "torch", ".", "sort", "(", "logits", ",", "1", ",", "descending", "=", "True", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "indices", "=", "indices", "[", ":", ",", ":", "k", "]", "\n", "y_big", "=", "y", ".", "expand", "(", "indices", ".", "size", "(", ")", ")", "\n", "eq", "=", "torch", ".", "eq", "(", "indices", ",", "y_big", ")", "\n", "eq2", "=", "torch", ".", "sum", "(", "eq", ",", "1", ")", "\n", "return", "eq2", ".", "sum", "(", ")", ".", "data", "[", "0", "]", ",", "eq2", ".", "nelement", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.loss_and_acc": [[208, 212], ["loss_fn", "util.logit_to_acc"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.logit_to_acc"], ["", "def", "loss_and_acc", "(", "logits", ",", "labels", ",", "loss_fn", ")", ":", "\n", "    ", "loss", "=", "loss_fn", "(", "logits", ",", "labels", ")", "\n", "acc", "=", "logit_to_acc", "(", "logits", ",", "labels", ")", "\n", "return", "(", "loss", ",", "acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.loss_acc_dict": [[214, 221], ["None"], "function", ["None"], ["", "def", "loss_acc_dict", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"spk\"", ":", "{", "\"loss\"", ":", "0", "}", ",", "\"lsn\"", ":", "{", "\"loss\"", ":", "0", ",", "\"acc\"", ":", "0", "}", "}", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.loss_acc_meter": [[224, 231], ["util.AverageMeter", "util.AverageMeter", "util.AverageMeter"], "function", ["None"], ["", "def", "loss_acc_meter", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"spk\"", ":", "{", "\"loss\"", ":", "AverageMeter", "(", ")", "}", ",", "\"lsn\"", ":", "{", "\"loss\"", ":", "AverageMeter", "(", ")", ",", "\"acc\"", ":", "AverageMeter", "(", ")", "}", "}", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.get_loss_dict": [[234, 236], ["util.loss_acc_dict", "util.loss_acc_dict"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.loss_acc_dict", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.loss_acc_dict"], ["", "def", "get_loss_dict", "(", ")", ":", "\n", "    ", "return", "{", "\"l1\"", ":", "loss_acc_dict", "(", ")", ",", "\"l2\"", ":", "loss_acc_dict", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.get_log_loss_dict": [[238, 240], ["util.loss_acc_meter", "util.loss_acc_meter"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.loss_acc_meter", "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.loss_acc_meter"], ["", "def", "get_log_loss_dict", "(", ")", ":", "\n", "    ", "return", "{", "\"l1\"", ":", "loss_acc_meter", "(", ")", ",", "\"l2\"", ":", "loss_acc_meter", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.get_loss_dict_": [[242, 244], ["None"], "function", ["None"], ["", "def", "get_loss_dict_", "(", ")", ":", "\n", "    ", "return", "{", "\"loss\"", ":", "0", ",", "\"accuracy\"", ":", "0", ",", "\"average_len\"", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.get_log_loss_dict_": [[246, 248], ["util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter"], "function", ["None"], ["", "def", "get_log_loss_dict_", "(", ")", ":", "\n", "    ", "return", "{", "\"loss\"", ":", "AverageMeter", "(", ")", ",", "\"accuracy\"", ":", "AverageMeter", "(", ")", ",", "\"average_len\"", ":", "AverageMeter", "(", ")", ",", "\"ts\"", ":", "AverageMeter", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.get_avg_from_loss_dict_": [[250, 255], ["util.get_loss_dict_", "log_loss_dict.items"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.get_loss_dict_"], ["", "def", "get_avg_from_loss_dict_", "(", "log_loss_dict", ")", ":", "\n", "    ", "res", "=", "get_loss_dict_", "(", ")", "\n", "for", "k", ",", "v", "in", "log_loss_dict", ".", "items", "(", ")", ":", "\n", "        ", "res", "[", "k", "]", "=", "v", ".", "avg", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.get_avg_from_loss_dict": [[257, 264], ["util.get_loss_dict", "log_loss_dict.items", "v1.items", "v2.items"], "function", ["home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.get_loss_dict"], ["", "def", "get_avg_from_loss_dict", "(", "log_loss_dict", ")", ":", "\n", "    ", "res", "=", "get_loss_dict", "(", ")", "\n", "for", "k1", ",", "v1", "in", "log_loss_dict", ".", "items", "(", ")", ":", "# en_agent / fr_agent", "\n", "        ", "for", "k2", ",", "v2", "in", "v1", ".", "items", "(", ")", ":", "# spk / lsn", "\n", "            ", "for", "k3", ",", "v3", "in", "v2", ".", "items", "(", ")", ":", "# loss / acc", "\n", "                ", "res", "[", "k1", "]", "[", "k2", "]", "[", "k3", "]", "=", "v3", ".", "avg", "\n", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.print_loss_": [[266, 276], ["None"], "function", ["None"], ["", "def", "print_loss_", "(", "epoch", ",", "alpha", ",", "avg_loss_dict", ",", "mode", "=", "\"train\"", ")", ":", "\n", "    ", "prt_msg", "=", "\"epoch {:5d} {} \"", ".", "format", "(", "epoch", ",", "mode", ")", "\n", "prt_msg", "+=", "\"| loss\"", "\n", "prt_msg", "+=", "\" {:.4f}\"", ".", "format", "(", "avg_loss_dict", "[", "\"loss\"", "]", ")", "\n", "prt_msg", "+=", "\"| prediction accuracy\"", "\n", "prt_msg", "+=", "\" {:.2f}%\"", ".", "format", "(", "avg_loss_dict", "[", "\"accuracy\"", "]", ")", "\n", "prt_msg", "+=", "\"| average message length\"", "\n", "prt_msg", "+=", "\" {:.4f}\"", ".", "format", "(", "avg_loss_dict", "[", "\"average_len\"", "]", ")", "\n", "prt_msg", "+=", "\" |\"", "\n", "return", "prt_msg", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.print_loss": [[278, 292], ["None"], "function", ["None"], ["", "def", "print_loss", "(", "epoch", ",", "alpha", ",", "avg_loss_dict", ",", "mode", "=", "\"train\"", ")", ":", "\n", "    ", "prt_msg", "=", "\"epoch {:5d} {} \"", ".", "format", "(", "epoch", ",", "mode", ")", "\n", "for", "agent", "in", "\"l1 l2\"", ".", "split", "(", ")", ":", "\n", "        ", "prt_msg", "+=", "\"| \"", "# en_agent / fr_agent", "\n", "for", "person", "in", "\"spk lsn\"", ".", "split", "(", ")", ":", "\n", "            ", "prt_msg", "+=", "\" {}_{}\"", ".", "format", "(", "agent", ",", "person", ")", "# spk / lsn", "\n", "if", "person", "==", "\"spk\"", ":", "\n", "                ", "prt_msg", "+=", "\" {:.3f}\"", ".", "format", "(", "avg_loss_dict", "[", "agent", "]", "[", "person", "]", "[", "\"loss\"", "]", ")", "\n", "", "elif", "person", "==", "\"lsn\"", ":", "\n", "                ", "prt_msg", "+=", "\" {:.3f} * {} = {:.3f}\"", ".", "format", "(", "avg_loss_dict", "[", "agent", "]", "[", "person", "]", "[", "\"loss\"", "]", ",", "alpha", ",", "\n", "avg_loss_dict", "[", "agent", "]", "[", "person", "]", "[", "\"loss\"", "]", "*", "alpha", ")", "\n", "prt_msg", "+=", "\" {:.2f}%\"", ".", "format", "(", "avg_loss_dict", "[", "agent", "]", "[", "person", "]", "[", "\"acc\"", "]", ")", "\n", "", "prt_msg", "+=", "\" |\"", "\n", "", "", "return", "prt_msg", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.clip_grad": [[294, 297], ["v.register_hook", "g.clamp"], "function", ["None"], ["", "def", "clip_grad", "(", "v", ",", "min", ",", "max", ")", ":", "\n", "    ", "v", ".", "register_hook", "(", "lambda", "g", ":", "g", ".", "clamp", "(", "min", ",", "max", ")", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.check_mkdir": [[299, 304], ["os.stat", "os.mkdir"], "function", ["None"], ["", "def", "check_mkdir", "(", "dir", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "stat", "(", "dir", ")", "\n", "", "except", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.idx_to_emb": [[306, 311], ["tt.ByteTensor().fill_", "enumerate", "torch.autograd.Variable", "tt.ByteTensor", "len"], "function", ["None"], ["", "", "def", "idx_to_emb", "(", "idx", ",", "maxmax", ",", "tt", ")", ":", "\n", "    ", "ans", "=", "tt", ".", "ByteTensor", "(", "len", "(", "idx", ")", ",", "maxmax", ")", ".", "fill_", "(", "0", ")", "\n", "for", "aaa", ",", "iii", "in", "enumerate", "(", "idx", ")", ":", "\n", "        ", "ans", "[", "aaa", "]", "[", "iii", "]", "=", "1", "\n", "", "return", "Variable", "(", "ans", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.remove_duplicate": [[313, 342], ["list", "list", "list", "list", "list", "list", "range", "set", "range", "torch.index_select", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "len", "len", "torch.tensor", "data[].numpy", "data[].numpy", "data[].numpy", "data[].numpy", "data[].numpy", "data[].numpy", "str", "string_.append", "torch.sum().numpy", "string_2.append", "index_.append", "str", "torch.sum", "torch.abs", "str", "str", "str", "str"], "function", ["None"], ["", "def", "remove_duplicate", "(", "data", ")", ":", "\n", "    ", "hash_0", "=", "list", "(", "np", ".", "round", "(", "data", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", ",", "3", ")", ")", "\n", "hash_1", "=", "list", "(", "np", ".", "round", "(", "data", "[", ":", ",", "1", "]", ".", "numpy", "(", ")", ",", "3", ")", ")", "\n", "hash_2", "=", "list", "(", "np", ".", "round", "(", "data", "[", ":", ",", "2", "]", ".", "numpy", "(", ")", ",", "3", ")", ")", "\n", "hash_1000", "=", "list", "(", "np", ".", "round", "(", "data", "[", ":", ",", "1000", "]", ".", "numpy", "(", ")", ",", "3", ")", ")", "\n", "hash_2046", "=", "list", "(", "np", ".", "round", "(", "data", "[", ":", ",", "2046", "]", ".", "numpy", "(", ")", ",", "3", ")", ")", "\n", "hash_2047", "=", "list", "(", "np", ".", "round", "(", "data", "[", ":", ",", "2047", "]", ".", "numpy", "(", ")", ",", "3", ")", ")", "\n", "\n", "seen_e2i", "=", "{", "}", "\n", "string_", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "hash_0", ")", ")", ":", "\n", "        ", "keystr", "=", "str", "(", "hash_0", "[", "idx", "]", ")", "+", "'/'", "+", "str", "(", "hash_1", "[", "idx", "]", ")", "+", "'/'", "+", "str", "(", "hash_2", "[", "idx", "]", ")", "+", "'/'", "+", "str", "(", "\n", "hash_1000", "[", "idx", "]", ")", "+", "'/'", "+", "str", "(", "hash_2046", "[", "idx", "]", ")", "+", "'/'", "+", "str", "(", "hash_2047", "[", "idx", "]", ")", "\n", "if", "keystr", "in", "seen_e2i", ":", "\n", "            ", "string_", ".", "append", "(", "[", "seen_e2i", "[", "keystr", "]", ",", "idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "seen_e2i", "[", "keystr", "]", "=", "idx", "\n", "\n", "", "", "string_2", "=", "[", "]", "\n", "for", "pair", "in", "string_", ":", "\n", "        ", "if", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "data", "[", "pair", "[", "0", "]", "]", "-", "data", "[", "pair", "[", "1", "]", "]", ")", ")", ".", "numpy", "(", ")", "<", "15", ":", "\n", "            ", "string_2", ".", "append", "(", "pair", ")", "\n", "", "", "s", "=", "set", "(", "[", "i", "[", "-", "1", "]", "for", "i", "in", "string_2", "]", ")", "\n", "index_", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "        ", "if", "i", "not", "in", "s", ":", "\n", "            ", "index_", ".", "append", "(", "i", ")", "\n", "", "", "data", "=", "torch", ".", "index_select", "(", "data", ",", "0", ",", "torch", ".", "tensor", "(", "index_", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "\n", "return", "data", "[", ":", "-", "10000", "]", ",", "data", "[", "-", "10000", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ysymyth_ec-nl.ec-game.util.pad_sequences": [[344, 380], ["len", "tuple", "enumerate", "len", "numpy.max", "numpy.asarray", "len", "len", "ValueError", "numpy.ones", "numpy.asarray", "len"], "function", ["None"], ["", "def", "pad_sequences", "(", "sequences", ",", "maxlen", "=", "None", ",", "dtype", "=", "'int32'", ",", "value", "=", "0.", ")", ":", "\n", "    ", "'''\n    Partially borrowed from Keras\n    # Arguments\n        sequences: list of lists where each element is a sequence\n        maxlen: int, maximum length\n        dtype: type to cast the resulting sequence.\n        value: float, value to pad the sequences to the desired value.\n    # Returns\n        x: numpy array with dimensions (number_of_sequences, maxlen)\n    '''", "\n", "lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "sequences", "]", "\n", "nb_samples", "=", "len", "(", "sequences", ")", "\n", "if", "maxlen", "is", "None", ":", "\n", "        ", "maxlen", "=", "np", ".", "max", "(", "lengths", ")", "\n", "# take the sample shape from the first non empty sequence", "\n", "# checking for consistency in the main loop below.", "\n", "", "sample_shape", "=", "tuple", "(", ")", "\n", "for", "s", "in", "sequences", ":", "\n", "        ", "if", "len", "(", "s", ")", ">", "0", ":", "\n", "            ", "sample_shape", "=", "np", ".", "asarray", "(", "s", ")", ".", "shape", "[", "1", ":", "]", "\n", "break", "\n", "", "", "x", "=", "(", "np", ".", "ones", "(", "(", "nb_samples", ",", "maxlen", ")", "+", "sample_shape", ")", "*", "value", ")", ".", "astype", "(", "dtype", ")", "\n", "for", "idx", ",", "s", "in", "enumerate", "(", "sequences", ")", ":", "\n", "        ", "if", "len", "(", "s", ")", "==", "0", ":", "\n", "            ", "continue", "# empty list was found", "\n", "# pre truncating", "\n", "", "trunc", "=", "s", "[", "-", "maxlen", ":", "]", "\n", "# check `trunc` has expected shape", "\n", "trunc", "=", "np", ".", "asarray", "(", "trunc", ",", "dtype", "=", "dtype", ")", "\n", "if", "trunc", ".", "shape", "[", "1", ":", "]", "!=", "sample_shape", ":", "\n", "            ", "raise", "ValueError", "(", "'Shape of sample %s of sequence at position %s is different from expected shape %s'", "%", "\n", "(", "trunc", ".", "shape", "[", "1", ":", "]", ",", "idx", ",", "sample_shape", ")", ")", "\n", "# post padding", "\n", "", "x", "[", "idx", ",", ":", "len", "(", "trunc", ")", "]", "=", "trunc", "\n", "", "return", "x", "\n", "", ""]]}