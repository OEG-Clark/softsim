{"home.repos.pwc.inspect_result.nmichlo_disent.examples.overview_metrics.make_vae": [[16, 23], ["disent.frameworks.vae.BetaVae", "disent.model.AutoEncoder", "disent.frameworks.vae.BetaVae.cfg", "disent.model.ae.EncoderConv64", "disent.model.ae.DecoderConv64", "dict"], "function", ["None"], ["def", "make_vae", "(", "beta", ")", ":", "\n", "    ", "return", "BetaVae", "(", "\n", "model", "=", "AutoEncoder", "(", "\n", "encoder", "=", "EncoderConv64", "(", "x_shape", "=", "data", ".", "x_shape", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "2", ")", ",", "\n", "decoder", "=", "DecoderConv64", "(", "x_shape", "=", "data", ".", "x_shape", ",", "z_size", "=", "6", ")", ",", "\n", ")", ",", "\n", "cfg", "=", "BetaVae", ".", "cfg", "(", "optimizer", "=", "'adam'", ",", "optimizer_kwargs", "=", "dict", "(", "lr", "=", "1e-3", ")", ",", "beta", "=", "beta", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.examples.overview_metrics.train": [[25, 36], ["pytorch_lightning.Trainer", "pl.Trainer.fit", "module.encode", "disent.metrics.metric_dci", "disent.metrics.metric_mig", "disent.util.is_test_run", "x.to", "disent.util.is_test_run", "disent.util.is_test_run", "disent.util.is_test_run"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._mig.metric_mig", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.is_test_run", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.is_test_run", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.is_test_run", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.is_test_run"], ["", "def", "train", "(", "module", ")", ":", "\n", "    ", "trainer", "=", "pl", ".", "Trainer", "(", "logger", "=", "False", ",", "checkpoint_callback", "=", "False", ",", "max_steps", "=", "256", ",", "fast_dev_run", "=", "is_test_run", "(", ")", ")", "\n", "trainer", ".", "fit", "(", "module", ",", "dataloader", ")", "\n", "\n", "# we cannot guarantee which device the representation is on", "\n", "get_repr", "=", "lambda", "x", ":", "module", ".", "encode", "(", "x", ".", "to", "(", "module", ".", "device", ")", ")", "\n", "\n", "# evaluate", "\n", "return", "{", "\n", "**", "metric_dci", "(", "dataset", ",", "get_repr", ",", "num_train", "=", "10", "if", "is_test_run", "(", ")", "else", "1000", ",", "num_test", "=", "5", "if", "is_test_run", "(", ")", "else", "500", ",", "boost_mode", "=", "'sklearn'", ")", ",", "\n", "**", "metric_mig", "(", "dataset", ",", "get_repr", ",", "num_train", "=", "20", "if", "is_test_run", "(", ")", "else", "2000", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.examples.mnist_example.MNIST.__getitem__": [[16, 19], ["torchvision.datasets.MNIST.__getitem__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__getitem__"], ["    ", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "target", "=", "super", "(", ")", ".", "__getitem__", "(", "index", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversals.ensure_rgb": [[57, 62], ["numpy.concatenate", "tuple"], "function", ["None"], ["def", "ensure_rgb", "(", "img", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "img", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "img", "=", "np", ".", "concatenate", "(", "[", "img", ",", "img", ",", "img", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "assert", "img", ".", "shape", "[", "-", "1", "]", "==", "3", ",", "f'last channel of array is not of size 3 for RGB, got shape: {tuple(img.shape)}'", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversals.plot_dataset_traversals": [[64, 138], ["disent.dataset.DisentDataset", "gt_data.normalise_factor_idxs", "docs.visualize_dataset_traversal", "isinstance", "matplotlib.pyplot.show", "min", "docs.plt_subplots_imshow", "docs.plt_subplots_imshow", "docs.make_rel_path_add_ext", "matplotlib.pyplot.savefig", "print", "max", "disent.util.seeds.TempNumpySeed", "numpy.concatenate", "numpy.swapaxes", "disent.dataset.DisentDataset.dataset_sample_batch", "plot_dataset_traversals.ensure_rgb", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.visualize_dataset_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_rel_path_add_ext", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_overlap_diffs.ensure_rgb"], ["", "def", "plot_dataset_traversals", "(", "\n", "gt_data", ":", "GroundTruthData", ",", "\n", "f_idxs", "=", "None", ",", "\n", "num_cols", ":", "Optional", "[", "int", "]", "=", "8", ",", "\n", "take_cols", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "base_factors", "=", "None", ",", "\n", "add_random_traversal", ":", "bool", "=", "True", ",", "\n", "pad", ":", "int", "=", "8", ",", "\n", "bg_color", ":", "int", "=", "127", ",", "\n", "border", ":", "bool", "=", "False", ",", "\n", "rel_path", ":", "str", "=", "None", ",", "\n", "save", ":", "bool", "=", "True", ",", "\n", "seed", ":", "int", "=", "777", ",", "\n", "plt_scale", ":", "float", "=", "4.5", ",", "\n", "offset", ":", "float", "=", "0.75", ",", "\n", "transpose", ":", "bool", "=", "False", ",", "\n", "title", ":", "Union", "[", "bool", ",", "str", "]", "=", "True", ",", "\n", "label_size", ":", "int", "=", "22", ",", "\n", "title_size", ":", "int", "=", "26", ",", "\n", "labels_at_top", ":", "bool", "=", "False", ",", "\n", "img_ext", ":", "str", "=", "'.jpg'", ",", "\n", ")", ":", "\n", "    ", "if", "take_cols", "is", "not", "None", ":", "\n", "        ", "assert", "take_cols", ">=", "num_cols", "\n", "# convert", "\n", "", "dataset", "=", "DisentDataset", "(", "gt_data", ")", "\n", "f_idxs", "=", "gt_data", ".", "normalise_factor_idxs", "(", "f_idxs", ")", "\n", "num_cols", "=", "num_cols", "if", "(", "num_cols", "is", "not", "None", ")", "else", "min", "(", "max", "(", "gt_data", ".", "factor_sizes", ")", ",", "32", ")", "\n", "# get traversal grid", "\n", "row_labels", "=", "[", "gt_data", ".", "factor_names", "[", "i", "]", "for", "i", "in", "f_idxs", "]", "\n", "grid", ",", "_", ",", "_", "=", "H", ".", "visualize_dataset_traversal", "(", "\n", "dataset", "=", "dataset", ",", "\n", "data_mode", "=", "'raw'", ",", "\n", "factor_names", "=", "f_idxs", ",", "\n", "num_frames", "=", "num_cols", "if", "(", "take_cols", "is", "None", ")", "else", "take_cols", ",", "\n", "seed", "=", "seed", ",", "\n", "base_factors", "=", "base_factors", ",", "\n", "traverse_mode", "=", "'interval'", ",", "\n", "pad", "=", "pad", ",", "\n", "bg_color", "=", "bg_color", ",", "\n", "border", "=", "border", ",", "\n", ")", "\n", "if", "take_cols", "is", "not", "None", ":", "\n", "        ", "grid", "=", "grid", "[", ":", ",", ":", "num_cols", ",", "...", "]", "\n", "# add random traversal", "\n", "", "if", "add_random_traversal", ":", "\n", "        ", "with", "TempNumpySeed", "(", "seed", ")", ":", "\n", "            ", "row_labels", "=", "[", "'random'", "]", "+", "row_labels", "\n", "row", "=", "dataset", ".", "dataset_sample_batch", "(", "num_samples", "=", "num_cols", ",", "mode", "=", "'raw'", ")", "[", "None", ",", "...", "]", "# torch.Tensor", "\n", "grid", "=", "np", ".", "concatenate", "(", "[", "ensure_rgb", "(", "row", ")", ",", "grid", "]", ")", "\n", "# make figure", "\n", "", "", "factors", ",", "frames", ",", "_", ",", "_", ",", "c", "=", "grid", ".", "shape", "\n", "assert", "c", "==", "3", "\n", "\n", "# get title", "\n", "if", "isinstance", "(", "title", ",", "bool", ")", ":", "\n", "        ", "title", "=", "gt_data", ".", "name", "if", "title", "else", "None", "\n", "\n", "", "if", "transpose", ":", "\n", "        ", "col_titles", "=", "None", "\n", "if", "labels_at_top", ":", "\n", "            ", "col_titles", ",", "row_labels", "=", "row_labels", ",", "None", "\n", "", "fig", ",", "axs", "=", "H", ".", "plt_subplots_imshow", "(", "np", ".", "swapaxes", "(", "grid", ",", "0", ",", "1", ")", ",", "label_size", "=", "label_size", ",", "title_size", "=", "title_size", ",", "title", "=", "title", ",", "titles", "=", "col_titles", ",", "titles_size", "=", "label_size", ",", "col_labels", "=", "row_labels", ",", "subplot_padding", "=", "None", ",", "figsize", "=", "(", "offset", "+", "(", "1", "/", "2.54", ")", "*", "frames", "*", "plt_scale", ",", "(", "1", "/", "2.54", ")", "*", "(", "factors", "+", "0.45", ")", "*", "plt_scale", ")", "[", ":", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "fig", ",", "axs", "=", "H", ".", "plt_subplots_imshow", "(", "grid", ",", "label_size", "=", "label_size", ",", "title_size", "=", "title_size", ",", "title", "=", "title", ",", "row_labels", "=", "row_labels", ",", "subplot_padding", "=", "None", ",", "figsize", "=", "(", "offset", "+", "(", "1", "/", "2.54", ")", "*", "frames", "*", "plt_scale", ",", "(", "1", "/", "2.54", ")", "*", "(", "factors", "+", "0.45", ")", "*", "plt_scale", ")", ")", "\n", "\n", "# save figure", "\n", "", "if", "save", "and", "(", "rel_path", "is", "not", "None", ")", ":", "\n", "        ", "path", "=", "H", ".", "make_rel_path_add_ext", "(", "rel_path", ",", "ext", "=", "img_ext", ")", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "print", "(", "f'saved: {repr(path)}'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "# done!", "\n", "return", "fig", ",", "axs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversals.plot_incr_overlap": [[140, 171], ["isinstance", "docs.plt_subplots_imshow", "fig.tight_layout", "docs.plt_rel_path_savefig", "disent.dataset.data.XYSquaresData", "grid.append", "disent.util.seeds.TempNumpySeed", "disent.dataset.data.XYSquaresData.sample_random_factor_traversal", "len", "disent.dataset.data.XYSquaresData.normalise_factor_idx"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.plt_rel_path_savefig", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idx"], ["", "def", "plot_incr_overlap", "(", "\n", "rel_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "spacings", ":", "Union", "[", "Sequence", "[", "int", "]", ",", "bool", "]", "=", "False", ",", "\n", "seed", ":", "int", "=", "777", ",", "\n", "fidx", ":", "int", "=", "1", ",", "\n", "traversal_size", ":", "int", "=", "8", ",", "\n", "traversal_lim", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "save", ":", "bool", "=", "True", ",", "\n", "show", ":", "bool", "=", "True", ",", "\n", "img_ext", ":", "str", "=", "'.jpg'", ",", "\n", ")", ":", "\n", "    ", "if", "isinstance", "(", "spacings", ",", "bool", ")", ":", "\n", "        ", "spacings", "=", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", "if", "spacings", "else", "[", "1", ",", "4", ",", "8", "]", ")", "\n", "\n", "", "if", "traversal_lim", "is", "None", ":", "\n", "        ", "traversal_lim", "=", "traversal_size", "\n", "", "assert", "traversal_size", ">=", "traversal_lim", "\n", "\n", "grid", "=", "[", "]", "\n", "for", "s", "in", "spacings", ":", "\n", "        ", "data", "=", "XYSquaresData", "(", "grid_spacing", "=", "s", ",", "grid_size", "=", "8", ",", "no_warnings", "=", "True", ")", "\n", "with", "TempNumpySeed", "(", "seed", ")", ":", "\n", "            ", "factors", ",", "indices", "=", "data", ".", "sample_random_factor_traversal", "(", "f_idx", "=", "data", ".", "normalise_factor_idx", "(", "fidx", ")", ",", "num", "=", "traversal_size", ",", "mode", "=", "'interval'", ",", "return_indices", "=", "True", ")", "\n", "obs", "=", "[", "data", "[", "i", "]", "for", "i", "in", "indices", "[", ":", "traversal_lim", "]", "]", "\n", "", "grid", ".", "append", "(", "obs", ")", "\n", "\n", "", "w", ",", "h", "=", "traversal_lim", "*", "2.54", ",", "len", "(", "spacings", ")", "*", "2.54", "\n", "fig", ",", "axs", "=", "H", ".", "plt_subplots_imshow", "(", "grid", ",", "row_labels", "=", "[", "f'Space: {s}px'", "for", "s", "in", "spacings", "]", ",", "figsize", "=", "(", "w", ",", "h", ")", ",", "label_size", "=", "24", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "H", ".", "plt_rel_path_savefig", "(", "rel_path", "=", "rel_path", ",", "save", "=", "save", ",", "ext", "=", "img_ext", ",", "show", "=", "show", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_overlap_diffs.ensure_rgb": [[50, 55], ["numpy.concatenate", "tuple"], "function", ["None"], ["def", "ensure_rgb", "(", "img", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "img", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "img", "=", "np", ".", "concatenate", "(", "[", "img", ",", "img", ",", "img", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "assert", "img", ".", "shape", "[", "-", "1", "]", "==", "3", ",", "f'last channel of array is not of size 3 for RGB, got shape: {tuple(img.shape)}'", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_overlap_diffs.plot_dataset_overlap": [[57, 145], ["disent.util.seeds.TempNumpySeed", "numpy.random.choice", "numpy.zeros", "enumerate", "np.concatenate.max", "gt_data.normalise_factor_idxs", "max", "numpy.array", "enumerate", "docs.plt_subplots_imshow", "matplotlib.pyplot.show", "docs.plt_subplots_imshow", "matplotlib.pyplot.show", "docs.plt_subplots_imshow", "matplotlib.pyplot.show", "docs.plt_subplots_imshow", "matplotlib.pyplot.show", "gt_data.pos_to_idx", "len", "len", "len", "numpy.abs", "docs.make_rel_path_add_ext", "matplotlib.pyplot.savefig", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "docs.make_rel_path_add_ext", "matplotlib.pyplot.savefig", "print", "docs.make_rel_path_add_ext", "matplotlib.pyplot.savefig", "print", "docs.make_rel_path_add_ext", "matplotlib.pyplot.savefig", "print", "gt_data.sample_random_factor_traversal", "plot_dataset_overlap_diffs.ensure_rgb", "len", "numpy.ones_like", "repr", "len", "len", "repr", "repr", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_rel_path_add_ext", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_rel_path_add_ext", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_rel_path_add_ext", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_rel_path_add_ext", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_overlap_diffs.ensure_rgb"], ["", "def", "plot_dataset_overlap", "(", "\n", "gt_data", ":", "GroundTruthData", ",", "\n", "f_idxs", "=", "None", ",", "\n", "obs_max", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "obs_spacing", ":", "int", "=", "1", ",", "\n", "rel_path", "=", "None", ",", "\n", "plot_base", ":", "bool", "=", "False", ",", "\n", "plot_combined", ":", "bool", "=", "True", ",", "\n", "plot_sidebar", ":", "bool", "=", "False", ",", "\n", "save", "=", "True", ",", "\n", "seed", "=", "777", ",", "\n", "plt_scale", "=", "4.5", ",", "\n", "offset", "=", "0.75", ",", "\n", ")", ":", "\n", "    ", "with", "TempNumpySeed", "(", "seed", ")", ":", "\n", "# choose an f_idx", "\n", "        ", "f_idx", "=", "np", ".", "random", ".", "choice", "(", "gt_data", ".", "normalise_factor_idxs", "(", "f_idxs", ")", ")", "\n", "f_name", "=", "gt_data", ".", "factor_names", "[", "f_idx", "]", "\n", "num_cols", "=", "gt_data", ".", "factor_sizes", "[", "f_idx", "]", "\n", "# get a traversal", "\n", "obs", "=", "[", "gt_data", "[", "i", "]", "for", "i", "in", "gt_data", ".", "pos_to_idx", "(", "gt_data", ".", "sample_random_factor_traversal", "(", "f_idx", "=", "f_idx", ")", ")", "]", "\n", "# get subset", "\n", "if", "obs_max", "is", "not", "None", ":", "\n", "            ", "max_obs_spacing", ",", "i", "=", "obs_spacing", ",", "1", "\n", "while", "max_obs_spacing", "*", "obs_max", ">", "len", "(", "obs", ")", ":", "\n", "                ", "max_obs_spacing", "=", "obs_spacing", "-", "i", "\n", "i", "+=", "1", "\n", "", "i", "=", "max", "(", "(", "len", "(", "obs", ")", "-", "obs_max", "*", "max_obs_spacing", ")", "//", "2", ",", "0", ")", "\n", "obs", "=", "obs", "[", "i", ":", "i", "+", "obs_max", "*", "obs_spacing", ":", "max_obs_spacing", "]", "[", ":", "obs_max", "]", "\n", "# convert", "\n", "", "obs", "=", "np", ".", "array", "(", "[", "ensure_rgb", "(", "x", ")", "for", "x", "in", "obs", "]", ",", "dtype", "=", "'float32'", ")", "/", "255", "\n", "# compute the distances", "\n", "grid", "=", "np", ".", "zeros", "(", "[", "len", "(", "obs", ")", ",", "len", "(", "obs", ")", ",", "*", "obs", "[", "0", "]", ".", "shape", "]", ")", "\n", "for", "i", ",", "i_obs", "in", "enumerate", "(", "obs", ")", ":", "\n", "            ", "for", "j", ",", "j_obs", "in", "enumerate", "(", "obs", ")", ":", "\n", "                ", "grid", "[", "i", ",", "j", "]", "=", "np", ".", "abs", "(", "i_obs", "-", "j_obs", ")", "\n", "# normalize", "\n", "", "", "grid", "/=", "grid", ".", "max", "(", ")", "\n", "\n", "# make figure", "\n", "factors", ",", "frames", ",", "_", ",", "_", ",", "c", "=", "grid", ".", "shape", "\n", "assert", "c", "==", "3", "\n", "\n", "if", "plot_base", ":", "\n", "# plot", "\n", "            ", "fig", ",", "axs", "=", "H", ".", "plt_subplots_imshow", "(", "grid", ",", "label_size", "=", "18", ",", "title_size", "=", "24", ",", "title", "=", "f'{gt_data.name}: {f_name}'", ",", "subplot_padding", "=", "None", ",", "figsize", "=", "(", "offset", "+", "(", "1", "/", "2.54", ")", "*", "frames", "*", "plt_scale", ",", "(", "1", "/", "2.54", ")", "*", "(", "factors", "+", "0.45", ")", "*", "plt_scale", ")", ")", "\n", "# save figure", "\n", "if", "save", "and", "(", "rel_path", "is", "not", "None", ")", ":", "\n", "                ", "path", "=", "H", ".", "make_rel_path_add_ext", "(", "rel_path", ",", "ext", "=", "'.png'", ")", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "print", "(", "f'saved: {repr(path)}'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n", "", "if", "plot_combined", ":", "\n", "# add obs", "\n", "            ", "if", "True", ":", "\n", "                ", "factors", "+=", "1", "\n", "frames", "+=", "1", "\n", "# scaled_obs = obs", "\n", "scaled_obs", "=", "obs", "*", "0.5", "+", "0.25", "\n", "# grid = 1 - grid", "\n", "# grid = grid * 0.5 + 0.25", "\n", "grid", "=", "np", ".", "concatenate", "(", "[", "scaled_obs", "[", "None", ",", ":", "]", ",", "grid", "]", ",", "axis", "=", "0", ")", "\n", "add_row", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones_like", "(", "obs", "[", "0", ":", "1", "]", ")", ",", "scaled_obs", "]", ",", "axis", "=", "0", ")", "\n", "grid", "=", "np", ".", "concatenate", "(", "[", "grid", ",", "add_row", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "1", ")", "\n", "# plot", "\n", "", "fig", ",", "axs", "=", "H", ".", "plt_subplots_imshow", "(", "grid", ",", "label_size", "=", "18", ",", "title_size", "=", "24", ",", "row_labels", "=", "[", "\"traversal\"", "]", "+", "(", "[", "\"diff.\"", "]", "*", "len", "(", "obs", ")", ")", ",", "col_labels", "=", "(", "[", "\"diff.\"", "]", "*", "len", "(", "obs", ")", ")", "+", "[", "\"traversal\"", "]", ",", "title", "=", "f'{gt_data.name}: {f_name}'", ",", "subplot_padding", "=", "None", ",", "figsize", "=", "(", "offset", "+", "(", "1", "/", "2.54", ")", "*", "frames", "*", "plt_scale", ",", "(", "1", "/", "2.54", ")", "*", "(", "factors", "+", "0.45", ")", "*", "plt_scale", ")", ")", "\n", "# save figure", "\n", "if", "save", "and", "(", "rel_path", "is", "not", "None", ")", ":", "\n", "                ", "path", "=", "H", ".", "make_rel_path_add_ext", "(", "rel_path", "+", "'__combined'", ",", "ext", "=", "'.png'", ")", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "print", "(", "f'saved: {repr(path)}'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n", "# plot", "\n", "", "if", "plot_sidebar", ":", "\n", "            ", "fig", ",", "axs", "=", "H", ".", "plt_subplots_imshow", "(", "obs", "[", ":", ",", "None", "]", ",", "subplot_padding", "=", "None", ",", "figsize", "=", "(", "offset", "+", "(", "1", "/", "2.54", ")", "*", "1", "*", "plt_scale", ",", "(", "1", "/", "2.54", ")", "*", "(", "factors", "+", "0.45", ")", "*", "plt_scale", ")", ")", "\n", "if", "save", "and", "(", "rel_path", "is", "not", "None", ")", ":", "\n", "                ", "path", "=", "H", ".", "make_rel_path_add_ext", "(", "rel_path", "+", "'__v'", ",", "ext", "=", "'.png'", ")", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "print", "(", "f'saved: {repr(path)}'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "fig", ",", "axs", "=", "H", ".", "plt_subplots_imshow", "(", "obs", "[", "None", ",", ":", "]", ",", "subplot_padding", "=", "None", ",", "figsize", "=", "(", "offset", "+", "(", "1", "/", "2.54", ")", "*", "frames", "*", "plt_scale", ",", "(", "1", "/", "2.54", ")", "*", "(", "1", "+", "0.45", ")", "*", "plt_scale", ")", ")", "\n", "if", "save", "and", "(", "rel_path", "is", "not", "None", ")", ":", "\n", "                ", "path", "=", "H", ".", "make_rel_path_add_ext", "(", "rel_path", "+", "'__h'", ",", "ext", "=", "'.png'", ")", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "print", "(", "f'saved: {repr(path)}'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.compute_xysquares_overlap.XYSquaresSampler.sample_1d_boxes": [[33, 41], ["isinstance", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "sample_1d_boxes", "(", "self", ",", "size", "=", "None", ")", ":", "\n", "        ", "size", "=", "(", "2", ",", ")", "if", "(", "size", "is", "None", ")", "else", "(", "(", "size", ",", "2", ")", "if", "isinstance", "(", "size", ",", "int", ")", "else", "(", "*", "size", ",", "2", ")", ")", "\n", "# sample x0, y0", "\n", "s0", "=", "self", ".", "_offset", "+", "self", ".", "_spacing", "*", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "_placements", ",", "size", "=", "size", ")", "\n", "# sample x1, y1", "\n", "s1", "=", "s0", "+", "self", ".", "_square_size", "\n", "# return (x0, y0), (x1, y1)", "\n", "return", "s0", ",", "s1", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.compute_xysquares_overlap.XYSquaresSampler.sample_1d_overlap": [[42, 46], ["compute_xysquares_overlap.XYSquaresSampler.sample_1d_boxes", "numpy.maximum", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.compute_xysquares_overlap.XYSquaresSampler.sample_1d_boxes"], ["", "def", "sample_1d_overlap", "(", "self", ",", "size", "=", "None", ")", ":", "\n", "        ", "s0", ",", "s1", "=", "self", ".", "sample_1d_boxes", "(", "size", "=", "size", ")", "\n", "# compute overlap", "\n", "return", "np", ".", "maximum", "(", "np", ".", "min", "(", "s1", ",", "axis", "=", "-", "1", ")", "-", "np", ".", "max", "(", "s0", ",", "axis", "=", "-", "1", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.compute_xysquares_overlap.XYSquaresSampler.sample_1d_delta": [[47, 54], ["compute_xysquares_overlap.XYSquaresSampler.sample_1d_boxes", "numpy.minimum", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.compute_xysquares_overlap.XYSquaresSampler.sample_1d_boxes"], ["", "def", "sample_1d_delta", "(", "self", ",", "size", "=", "None", ")", ":", "\n", "        ", "s0", ",", "s1", "=", "self", ".", "sample_1d_boxes", "(", "size", "=", "size", ")", "\n", "# compute differences", "\n", "l_delta", "=", "np", ".", "max", "(", "s0", ",", "axis", "=", "-", "1", ")", "-", "np", ".", "min", "(", "s0", ",", "axis", "=", "-", "1", ")", "\n", "r_delta", "=", "np", ".", "max", "(", "s1", ",", "axis", "=", "-", "1", ")", "-", "np", ".", "min", "(", "s1", ",", "axis", "=", "-", "1", ")", "\n", "# return delta", "\n", "return", "np", ".", "minimum", "(", "l_delta", "+", "r_delta", ",", "self", ".", "_square_size", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.sample_factor_traversal_info": [[64, 89], ["torch.no_grad", "torch.no_grad", "gt_data.sample_random_factor_traversal", "torch.stack", "torch.stack", "docs.pair_indices", "torch.mse_loss().mean().numpy", "numpy.abs().sum", "dict", "len", "torch.mse_loss().mean", "numpy.abs", "torch.mse_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.pair_indices"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample_factor_traversal_info", "(", "\n", "gt_data", ":", "GroundTruthData", ",", "\n", "f_idx", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "sample_mode", ":", "SampleModeHint", "=", "'random'", ",", "\n", ")", "->", "dict", ":", "\n", "# load traversal", "\n", "    ", "factors", ",", "indices", "=", "gt_data", ".", "sample_random_factor_traversal", "(", "f_idx", "=", "f_idx", ",", "return_indices", "=", "True", ")", "\n", "obs", "=", "torch", ".", "stack", "(", "[", "gt_data", "[", "i", "]", "for", "i", "in", "indices", "]", ")", "# TODO: this is the bottleneck! not threaded", "\n", "# get pairs", "\n", "idxs_a", ",", "idxs_b", "=", "H", ".", "pair_indices", "(", "max_idx", "=", "len", "(", "indices", ")", ",", "mode", "=", "sample_mode", ")", "\n", "# compute deltas", "\n", "deltas", "=", "F", ".", "mse_loss", "(", "obs", "[", "idxs_a", "]", ",", "obs", "[", "idxs_b", "]", ",", "reduction", "=", "'none'", ")", ".", "mean", "(", "dim", "=", "[", "-", "3", ",", "-", "2", ",", "-", "1", "]", ")", ".", "numpy", "(", ")", "\n", "fdists", "=", "np", ".", "abs", "(", "factors", "[", "idxs_a", "]", "-", "factors", "[", "idxs_b", "]", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "# (NUM, FACTOR_SIZE) -> (NUM,)", "\n", "# done!", "\n", "return", "dict", "(", "\n", "# traversals", "\n", "factors", "=", "factors", ",", "# np.ndarray", "\n", "indices", "=", "indices", ",", "# np.ndarray", "\n", "obs", "=", "obs", ",", "# torch.Tensor", "\n", "# pairs", "\n", "idxs_a", "=", "idxs_a", ",", "# np.ndarray", "\n", "idxs_b", "=", "idxs_b", ",", "# np.ndarray", "\n", "deltas", "=", "deltas", ",", "# np.ndarray", "\n", "fdists", "=", "fdists", ",", "# np.ndarray", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.sample_factor_traversal_info_and_distmat": [[92, 109], ["plot_dataset_traversal_dists.sample_factor_traversal_info", "numpy.zeros", "numpy.zeros", "dict"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.sample_factor_traversal_info"], ["", "def", "sample_factor_traversal_info_and_distmat", "(", "\n", "gt_data", ":", "GroundTruthData", ",", "\n", "f_idx", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "dict", ":", "\n", "    ", "dat", "=", "sample_factor_traversal_info", "(", "gt_data", "=", "gt_data", ",", "f_idx", "=", "f_idx", ",", "sample_mode", "=", "'combinations'", ")", "\n", "# extract", "\n", "factors", ",", "idxs_a", ",", "idxs_b", ",", "deltas", ",", "fdists", "=", "dat", "[", "'factors'", "]", ",", "dat", "[", "'idxs_a'", "]", ",", "dat", "[", "'idxs_b'", "]", ",", "dat", "[", "'deltas'", "]", ",", "dat", "[", "'fdists'", "]", "\n", "# generate deltas matrix", "\n", "deltas_matrix", "=", "np", ".", "zeros", "(", "[", "factors", ".", "shape", "[", "0", "]", ",", "factors", ".", "shape", "[", "0", "]", "]", ")", "\n", "deltas_matrix", "[", "idxs_a", ",", "idxs_b", "]", "=", "deltas", "\n", "deltas_matrix", "[", "idxs_b", ",", "idxs_a", "]", "=", "deltas", "\n", "# generate distance matrix", "\n", "fdists_matrix", "=", "np", ".", "zeros", "(", "[", "factors", ".", "shape", "[", "0", "]", ",", "factors", ".", "shape", "[", "0", "]", "]", ")", "\n", "fdists_matrix", "[", "idxs_a", ",", "idxs_b", "]", "=", "fdists", "\n", "fdists_matrix", "[", "idxs_b", ",", "idxs_a", "]", "=", "fdists", "\n", "# done!", "\n", "return", "dict", "(", "**", "dat", ",", "deltas_matrix", "=", "deltas_matrix", ",", "fdists_matrix", "=", "fdists_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists._collect_stats_for_factors": [[116, 146], ["gt_data.normalise_factor_idxs", "enumerate", "collections.defaultdict", "tqdm.tqdm", "range", "plot_dataset_traversal_dists.plot_traversal_stats.stats_fn", "f_stats.append", "stats_callback", "stats[].append"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "_collect_stats_for_factors", "(", "\n", "gt_data", ":", "GroundTruthData", ",", "\n", "f_idxs", ":", "Sequence", "[", "int", "]", ",", "\n", "stats_fn", ":", "Callable", "[", "[", "GroundTruthData", ",", "int", ",", "int", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", "keep_keys", ":", "Sequence", "[", "str", "]", ",", "\n", "stats_callback", ":", "Optional", "[", "Callable", "[", "[", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", ",", "int", ",", "int", "]", ",", "None", "]", "]", "=", "None", ",", "\n", "return_stats", ":", "bool", "=", "True", ",", "\n", "num_traversal_sample", ":", "int", "=", "100", ",", "\n", ")", "->", "List", "[", "Dict", "[", "str", ",", "List", "[", "Any", "]", "]", "]", ":", "\n", "# prepare", "\n", "    ", "f_idxs", "=", "gt_data", ".", "normalise_factor_idxs", "(", "f_idxs", ")", "\n", "# generate data per factor", "\n", "f_stats", "=", "[", "]", "\n", "for", "i", ",", "f_idx", "in", "enumerate", "(", "f_idxs", ")", ":", "\n", "        ", "factor_name", "=", "gt_data", ".", "factor_names", "[", "f_idx", "]", "\n", "factor_size", "=", "gt_data", ".", "factor_sizes", "[", "f_idx", "]", "\n", "# repeatedly generate stats per factor", "\n", "stats", "=", "defaultdict", "(", "list", ")", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "num_traversal_sample", ")", ",", "desc", "=", "f'{gt_data.name}: {factor_name}'", ")", ":", "\n", "            ", "data", "=", "stats_fn", "(", "gt_data", ",", "i", ",", "f_idx", ")", "\n", "for", "key", "in", "keep_keys", ":", "\n", "                ", "stats", "[", "key", "]", ".", "append", "(", "data", "[", "key", "]", ")", "\n", "# save factor stats", "\n", "", "", "if", "return_stats", ":", "\n", "            ", "f_stats", ".", "append", "(", "stats", ")", "\n", "", "if", "stats_callback", ":", "\n", "            ", "stats_callback", "(", "stats", ",", "i", ",", "f_idx", ")", "\n", "# done!", "\n", "", "", "if", "return_stats", ":", "\n", "        ", "return", "f_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.plot_traversal_stats": [[153, 247], ["gt_data.normalise_factor_idxs", "isinstance", "plot_dataset_traversal_dists._collect_stats_for_factors", "docs.plt_subplots_imshow", "fig.tight_layout", "matplotlib.show", "plot_dataset_traversal_dists.sample_factor_traversal_info_and_distmat", "numpy.mean", "numpy.mean", "grid_t.append", "isinstance", "isinstance", "docs.make_data", "ax0.images[].set_cmap", "ax1.images[].set_cmap", "save_path.endswith", "disent.util.inout.paths.ensure_parent_dir_exists", "matplotlib.savefig", "print", "grid_titles.append", "list", "grid_titles.append", "zip", "len"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists._collect_stats_for_factors", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.sample_factor_traversal_info_and_distmat", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_data", "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.ensure_parent_dir_exists", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "", "def", "plot_traversal_stats", "(", "\n", "dataset_or_name", ":", "Union", "[", "str", ",", "GroundTruthData", "]", ",", "\n", "num_repeats", ":", "int", "=", "256", ",", "\n", "f_idxs", ":", "Optional", "[", "NonNormalisedFactorIdxs", "]", "=", "None", ",", "\n", "suffix", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "save_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "plot_title", ":", "Union", "[", "bool", ",", "str", "]", "=", "False", ",", "\n", "plt_scale", ":", "float", "=", "6", ",", "\n", "col_titles", ":", "Union", "[", "bool", ",", "List", "[", "str", "]", "]", "=", "True", ",", "\n", "y_size_offset", ":", "float", "=", "0.45", ",", "\n", "x_size_offset", ":", "float", "=", "0.75", ",", "\n", "disable_labels", ":", "bool", "=", "False", ",", "\n", "bottom_labels", ":", "bool", "=", "False", ",", "\n", "label_size", ":", "int", "=", "23", ",", "\n", "return_dists", ":", "bool", "=", "True", "\n", ")", ":", "\n", "# - - - - - - - - - - - - - - - - - #", "\n", "\n", "    ", "def", "stats_fn", "(", "gt_data", ",", "i", ",", "f_idx", ")", ":", "\n", "        ", "return", "sample_factor_traversal_info_and_distmat", "(", "gt_data", "=", "gt_data", ",", "f_idx", "=", "f_idx", ")", "\n", "\n", "", "grid_t", "=", "[", "]", "\n", "grid_titles", "=", "[", "]", "\n", "\n", "def", "plot_ax", "(", "stats", ":", "dict", ",", "i", ":", "int", ",", "f_idx", ":", "int", ")", ":", "\n", "        ", "fdists_matrix", "=", "np", ".", "mean", "(", "stats", "[", "'fdists_matrix'", "]", ",", "axis", "=", "0", ")", "\n", "deltas_matrix", "=", "np", ".", "mean", "(", "stats", "[", "'deltas_matrix'", "]", ",", "axis", "=", "0", ")", "\n", "grid_t", ".", "append", "(", "[", "fdists_matrix", ",", "deltas_matrix", "]", ")", "\n", "# get the title", "\n", "if", "isinstance", "(", "col_titles", ",", "bool", ")", ":", "\n", "            ", "if", "col_titles", ":", "\n", "                ", "grid_titles", ".", "append", "(", "gt_data", ".", "factor_names", "[", "f_idx", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "grid_titles", ".", "append", "(", "col_titles", "[", "i", "]", ")", "\n", "\n", "# initialize", "\n", "", "", "gt_data", ":", "GroundTruthData", "=", "H", ".", "make_data", "(", "dataset_or_name", ")", "if", "isinstance", "(", "dataset_or_name", ",", "str", ")", "else", "dataset_or_name", "\n", "f_idxs", "=", "gt_data", ".", "normalise_factor_idxs", "(", "f_idxs", ")", "\n", "\n", "# get title", "\n", "if", "isinstance", "(", "plot_title", ",", "str", ")", ":", "\n", "        ", "suptitle", "=", "f'{plot_title}'", "\n", "", "elif", "plot_title", ":", "\n", "        ", "suptitle", "=", "f'{gt_data.name} {f\" {suffix}\" if suffix else \"\"}'", "\n", "", "else", ":", "\n", "        ", "suptitle", "=", "None", "\n", "\n", "# generate plot", "\n", "", "_collect_stats_for_factors", "(", "\n", "gt_data", "=", "gt_data", ",", "\n", "f_idxs", "=", "f_idxs", ",", "\n", "stats_fn", "=", "stats_fn", ",", "\n", "keep_keys", "=", "[", "'deltas'", ",", "'fdists'", ",", "'deltas_matrix'", ",", "'fdists_matrix'", "]", ",", "\n", "stats_callback", "=", "plot_ax", ",", "\n", "num_traversal_sample", "=", "num_repeats", ",", "\n", ")", "\n", "\n", "labels", "=", "None", "\n", "if", "(", "not", "disable_labels", ")", "and", "grid_titles", ":", "\n", "        ", "labels", "=", "grid_titles", "\n", "\n", "# settings", "\n", "", "fig", ",", "axs", "=", "H", ".", "plt_subplots_imshow", "(", "\n", "grid", "=", "list", "(", "zip", "(", "*", "grid_t", ")", ")", ",", "\n", "title", "=", "suptitle", ",", "\n", "titles", "=", "None", "if", "bottom_labels", "else", "labels", ",", "\n", "titles_size", "=", "label_size", ",", "\n", "col_labels", "=", "labels", "if", "bottom_labels", "else", "None", ",", "\n", "label_size", "=", "label_size", ",", "\n", "subplot_padding", "=", "None", ",", "\n", "figsize", "=", "(", "(", "1", "/", "2.54", ")", "*", "len", "(", "f_idxs", ")", "*", "plt_scale", "+", "x_size_offset", ",", "(", "1", "/", "2.54", ")", "*", "(", "2", ")", "*", "plt_scale", "+", "y_size_offset", ")", "\n", ")", "\n", "\n", "# recolor axes", "\n", "for", "(", "ax0", ",", "ax1", ")", "in", "axs", ".", "T", ":", "\n", "        ", "ax0", ".", "images", "[", "0", "]", ".", "set_cmap", "(", "'Blues'", ")", "\n", "ax1", ".", "images", "[", "0", "]", ".", "set_cmap", "(", "'Purples'", ")", "\n", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "\n", "# save the path", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "assert", "save_path", ".", "endswith", "(", "'.png'", ")", "\n", "ensure_parent_dir_exists", "(", "save_path", ")", "\n", "plt", ".", "savefig", "(", "save_path", ")", "\n", "print", "(", "f'saved {gt_data.name} to: {save_path}'", ")", "\n", "\n", "# show it!", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n", "# - - - - - - - - - - - - - - - - - #", "\n", "if", "return_dists", ":", "\n", "        ", "return", "fig", ",", "grid_t", ",", "grid_titles", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.factor_stats": [[254, 284], ["torch.no_grad", "torch.no_grad", "gt_data.normalise_factor_idxs", "f_dists.append", "tqdm.tqdm", "gt_data.sample_random_factor_traversal", "torch.stack", "torch.stack", "docs.pair_indices", "recon_loss.compute_pairwise_loss", "d.numpy().tolist.numpy().tolist", "dists.extend", "p.update", "numpy.array", "len", "len", "len", "d.numpy().tolist.numpy"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.pair_indices", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_pairwise_loss", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "factor_stats", "(", "gt_data", ":", "GroundTruthData", ",", "f_idxs", "=", "None", ",", "min_samples", ":", "int", "=", "100_000", ",", "min_repeats", ":", "int", "=", "5000", ",", "recon_loss", ":", "str", "=", "'mse'", ",", "sample_mode", ":", "str", "=", "'random'", ")", "->", "Tuple", "[", "Sequence", "[", "int", "]", ",", "List", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "    ", "from", "disent", ".", "registry", "import", "RECON_LOSSES", "\n", "from", "disent", ".", "frameworks", ".", "helper", ".", "reconstructions", "import", "ReconLossHandler", "\n", "recon_loss", ":", "ReconLossHandler", "=", "RECON_LOSSES", "[", "recon_loss", "]", "(", "reduction", "=", "'mean'", ")", "\n", "\n", "f_dists", "=", "[", "]", "\n", "f_idxs", "=", "gt_data", ".", "normalise_factor_idxs", "(", "f_idxs", ")", "\n", "# for each factor", "\n", "for", "f_idx", "in", "f_idxs", ":", "\n", "        ", "dists", "=", "[", "]", "\n", "with", "tqdm", "(", "desc", "=", "gt_data", ".", "factor_names", "[", "f_idx", "]", ",", "total", "=", "min_samples", ")", "as", "p", ":", "\n", "# for multiple random factor traversals along the factor", "\n", "            ", "while", "len", "(", "dists", ")", "<", "min_samples", "or", "p", ".", "n", "<", "min_repeats", ":", "\n", "# based on: sample_factor_traversal_info(...) # TODO: should add recon loss to that function instead", "\n", "                ", "factors", ",", "indices", "=", "gt_data", ".", "sample_random_factor_traversal", "(", "f_idx", "=", "f_idx", ",", "return_indices", "=", "True", ")", "\n", "obs", "=", "torch", ".", "stack", "(", "[", "gt_data", "[", "i", "]", "for", "i", "in", "indices", "]", ")", "\n", "# random pairs -- we use this because it does not include [i == i]", "\n", "idxs_a", ",", "idxs_b", "=", "H", ".", "pair_indices", "(", "max_idx", "=", "len", "(", "indices", ")", ",", "mode", "=", "sample_mode", ")", "\n", "# get distances", "\n", "d", "=", "recon_loss", ".", "compute_pairwise_loss", "(", "obs", "[", "idxs_a", "]", ",", "obs", "[", "idxs_b", "]", ")", "\n", "d", "=", "d", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "# H.plt_subplots_imshow([[np.moveaxis(o.numpy(), 0, -1) for o in obs]])", "\n", "# plt.show()", "\n", "dists", ".", "extend", "(", "d", ")", "\n", "p", ".", "update", "(", "len", "(", "d", ")", ")", "\n", "# aggregate the average distances", "\n", "", "", "f_dists", ".", "append", "(", "np", ".", "array", "(", "dists", ")", "[", ":", "min_samples", "]", ")", "\n", "\n", "", "return", "f_idxs", ",", "f_dists", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.get_random_dists": [[286, 304], ["numpy.array", "tqdm.tqdm", "len", "numpy.random.randint", "recon_loss.compute_pairwise_loss", "dists.append", "p.update", "len", "float", "recon_loss.compute_pairwise_loss.flatten"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_pairwise_loss", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "get_random_dists", "(", "gt_data", ":", "GroundTruthData", ",", "num_samples", ":", "int", "=", "100_000", ",", "recon_loss", ":", "str", "=", "'mse'", ")", ":", "\n", "    ", "from", "disent", ".", "registry", "import", "RECON_LOSSES", "\n", "from", "disent", ".", "frameworks", ".", "helper", ".", "reconstructions", "import", "ReconLossHandler", "\n", "recon_loss", ":", "ReconLossHandler", "=", "RECON_LOSSES", "[", "recon_loss", "]", "(", "reduction", "=", "'mean'", ")", "\n", "\n", "dists", "=", "[", "]", "\n", "with", "tqdm", "(", "desc", "=", "gt_data", ".", "name", ",", "total", "=", "num_samples", ")", "as", "p", ":", "\n", "# for multiple random factor traversals along the factor", "\n", "        ", "while", "len", "(", "dists", ")", "<", "num_samples", ":", "\n", "# random pair", "\n", "            ", "i", ",", "j", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "gt_data", ")", ",", "size", "=", "2", ")", "\n", "# get distance", "\n", "d", "=", "recon_loss", ".", "compute_pairwise_loss", "(", "gt_data", "[", "i", "]", "[", "None", ",", "...", "]", ",", "gt_data", "[", "j", "]", "[", "None", ",", "...", "]", ")", "\n", "# plt.show()", "\n", "dists", ".", "append", "(", "float", "(", "d", ".", "flatten", "(", ")", ")", ")", "\n", "p", ".", "update", "(", ")", "\n", "# done!", "\n", "", "", "return", "np", ".", "array", "(", "dists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.print_ave_dists": [[306, 311], ["plot_dataset_traversal_dists.get_random_dists", "numpy.mean", "numpy.std", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.get_random_dists"], ["", "def", "print_ave_dists", "(", "gt_data", ":", "GroundTruthData", ",", "num_samples", ":", "int", "=", "100_000", ",", "recon_loss", ":", "str", "=", "'mse'", ")", ":", "\n", "    ", "dists", "=", "get_random_dists", "(", "gt_data", "=", "gt_data", ",", "num_samples", "=", "num_samples", ",", "recon_loss", "=", "recon_loss", ")", "\n", "f_mean", "=", "np", ".", "mean", "(", "dists", ")", "\n", "f_std", "=", "np", ".", "std", "(", "dists", ")", "\n", "print", "(", "f'[{gt_data.name}] RANDOM ({len(gt_data)}, {len(dists)}) - mean: {f_mean:7.4f}  std: {f_std:7.4f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.print_ave_factor_stats": [[313, 325], ["plot_dataset_traversal_dists.factor_stats", "numpy.mean", "numpy.std", "numpy.argsort", "print", "len"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.factor_stats"], ["", "def", "print_ave_factor_stats", "(", "gt_data", ":", "GroundTruthData", ",", "f_idxs", "=", "None", ",", "min_samples", ":", "int", "=", "100_000", ",", "min_repeats", ":", "int", "=", "5000", ",", "recon_loss", ":", "str", "=", "'mse'", ",", "sample_mode", ":", "str", "=", "'random'", ")", ":", "\n", "# compute average distances", "\n", "    ", "f_idxs", ",", "f_dists", "=", "factor_stats", "(", "gt_data", "=", "gt_data", ",", "f_idxs", "=", "f_idxs", ",", "min_repeats", "=", "min_repeats", ",", "min_samples", "=", "min_samples", ",", "recon_loss", "=", "recon_loss", ",", "sample_mode", "=", "sample_mode", ")", "\n", "# compute dists", "\n", "f_means", "=", "[", "np", ".", "mean", "(", "d", ")", "for", "d", "in", "f_dists", "]", "\n", "f_stds", "=", "[", "np", ".", "std", "(", "d", ")", "for", "d", "in", "f_dists", "]", "\n", "# sort in order of importance", "\n", "order", "=", "np", ".", "argsort", "(", "f_means", ")", "[", ":", ":", "-", "1", "]", "\n", "# print information", "\n", "for", "i", "in", "order", ":", "\n", "        ", "f_idx", ",", "f_mean", ",", "f_std", "=", "f_idxs", "[", "i", "]", ",", "f_means", "[", "i", "]", ",", "f_stds", "[", "i", "]", "\n", "print", "(", "f'[{gt_data.name}] {gt_data.factor_names[f_idx]} ({gt_data.factor_sizes[f_idx]}, {len(f_dists[f_idx])}) - mean: {f_mean:7.4f}  std: {f_std:7.4f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.main_compute_dists": [[327, 355], ["docs.make_data", "disent.util.seeds.TempNumpySeed", "plot_dataset_traversal_dists.print_ave_factor_stats", "disent.util.seeds.TempNumpySeed", "plot_dataset_traversal_dists.print_ave_dists"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_data", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.print_ave_factor_stats", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.print_ave_dists"], ["", "", "def", "main_compute_dists", "(", "\n", "factor_samples", ":", "int", "=", "50_000", ",", "\n", "min_repeats", ":", "int", "=", "5000", ",", "\n", "random_samples", ":", "int", "=", "50_000", ",", "\n", "recon_loss", ":", "str", "=", "'mse'", ",", "\n", "sample_mode", ":", "str", "=", "'random'", ",", "\n", "seed", ":", "int", "=", "777", ",", "\n", ")", ":", "\n", "# plot standard datasets", "\n", "    ", "for", "name", "in", "[", "\n", "'dsprites'", ",", "\n", "'shapes3d'", ",", "\n", "'cars3d'", ",", "\n", "'smallnorb'", ",", "\n", "'xysquares_8x8_s8'", ",", "\n", "'xyobject'", ",", "\n", "'xyobject_shaded'", ",", "\n", "'mpi3d_toy'", ",", "\n", "'mpi3d_realistic'", ",", "\n", "'mpi3d_real'", ",", "\n", "]", ":", "\n", "        ", "gt_data", "=", "H", ".", "make_data", "(", "name", ")", "\n", "if", "factor_samples", "is", "not", "None", ":", "\n", "            ", "with", "TempNumpySeed", "(", "seed", ")", ":", "\n", "                ", "print_ave_factor_stats", "(", "gt_data", ",", "min_samples", "=", "factor_samples", ",", "min_repeats", "=", "min_repeats", ",", "recon_loss", "=", "recon_loss", ",", "sample_mode", "=", "sample_mode", ")", "\n", "", "", "if", "random_samples", "is", "not", "None", ":", "\n", "            ", "with", "TempNumpySeed", "(", "seed", ")", ":", "\n", "                ", "print_ave_dists", "(", "gt_data", ",", "num_samples", "=", "random_samples", ",", "recon_loss", "=", "recon_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists._grid_plot_save": [[409, 413], ["disent.util.visualize.vis_util.make_image_grid", "docs.plt_imshow", "imageio.imsave"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.make_image_grid", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_imshow"], ["", "", "", "", "def", "_grid_plot_save", "(", "path", ":", "str", ",", "imgs", ":", "Sequence", "[", "np", ".", "ndarray", "]", ",", "show", ":", "bool", "=", "True", ")", ":", "\n", "    ", "img", "=", "make_image_grid", "(", "imgs", ",", "pad", "=", "0", ",", "border", "=", "False", ",", "num_cols", "=", "-", "1", ")", "\n", "H", ".", "plt_imshow", "(", "img", ",", "show", "=", "True", ")", "\n", "imageio", ".", "imsave", "(", "path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists._make_self_contained_dataset": [[415, 417], ["disent.dataset.data.SelfContainedHdf5GroundTruthData", "disent.dataset.transform.ToImgTensorF32"], "function", ["None"], ["", "def", "_make_self_contained_dataset", "(", "h5_path", ")", ":", "\n", "    ", "return", "SelfContainedHdf5GroundTruthData", "(", "h5_path", "=", "h5_path", ",", "transform", "=", "ToImgTensorF32", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists._print_data_mean_std": [[419, 425], ["disent.dataset.util.stats.compute_data_mean_std", "print", "isinstance", "docs.make_data", "isinstance", "mean.tolist", "std.tolist"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.stats.compute_data_mean_std", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_data"], ["", "def", "_print_data_mean_std", "(", "data_or_name", ",", "print_mean_std", ":", "bool", "=", "True", ")", ":", "\n", "    ", "if", "print_mean_std", ":", "\n", "        ", "data", "=", "H", ".", "make_data", "(", "data_or_name", ")", "if", "isinstance", "(", "data_or_name", ",", "str", ")", "else", "data_or_name", "\n", "name", "=", "data_or_name", "if", "isinstance", "(", "data_or_name", ",", "str", ")", "else", "data", ".", "name", "\n", "mean", ",", "std", "=", "compute_data_mean_std", "(", "data", ")", "\n", "print", "(", "f'{name}\\n    vis_mean: {mean.tolist()}\\n    vis_std: {std.tolist()}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.main_plotting": [[427, 465], ["plot_dataset_traversal_dists._grid_plot_save", "plot_dataset_traversal_dists._grid_plot_save", "os.path.join", "plot_dataset_traversal_dists.plot_traversal_stats", "plot_dataset_traversal_dists._print_data_mean_std", "plot_dataset_traversal_dists.plot_traversal_stats", "plot_dataset_traversal_dists._print_data_mean_std", "os.path.dirname", "plot_dataset_traversal_dists.main_plotting.sp"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists._grid_plot_save", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists._grid_plot_save", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.plot_traversal_stats", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists._print_data_mean_std", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists.plot_traversal_stats", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.plot_dataset_traversal_dists._print_data_mean_std"], ["", "", "def", "main_plotting", "(", "print_mean_std", ":", "bool", "=", "True", ")", ":", "\n", "\n", "    ", "def", "sp", "(", "name", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'plots/dists'", ",", "f'DIST_NO-FREQ_{name}.png'", ")", "\n", "\n", "# plot xysquares with increasing overlap", "\n", "", "for", "s", "in", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", "]", ":", "\n", "        ", "plot_traversal_stats", "(", "plt_scale", "=", "8", ",", "label_size", "=", "26", ",", "x_size_offset", "=", "0", ",", "y_size_offset", "=", "0.6", ",", "save_path", "=", "sp", "(", "f'xysquares_8x8_s{s}'", ")", ",", "dataset_or_name", "=", "f'xysquares_8x8_s{s}'", ",", "f_idxs", "=", "[", "1", "]", ",", "col_titles", "=", "[", "f'Space: {s}px'", "]", ")", "\n", "_print_data_mean_std", "(", "f'xysquares_8x8_s{s}'", ",", "print_mean_std", ")", "\n", "\n", "# plot xysquares with increasing overlap -- combined into one image", "\n", "", "_grid_plot_save", "(", "path", "=", "sp", "(", "f'xysquares_8x8_all'", ")", ",", "imgs", "=", "[", "imageio", ".", "imread", "(", "sp", "(", "f'xysquares_8x8_s{s}'", ")", ")", "[", ":", ",", "2", ":", "-", "2", ",", ":", "3", "]", "for", "s", "in", "range", "(", "1", ",", "9", ")", "]", ")", "\n", "_grid_plot_save", "(", "path", "=", "sp", "(", "f'xysquares_8x8_some'", ")", ",", "imgs", "=", "[", "imageio", ".", "imread", "(", "sp", "(", "f'xysquares_8x8_s{s}'", ")", ")", "[", ":", ",", "2", ":", "-", "2", ",", ":", "3", "]", "for", "s", "in", "[", "1", ",", "2", ",", "4", ",", "8", "]", "]", ")", "\n", "\n", "# replace the factor names!", "\n", "Mpi3dData", ".", "factor_names", "=", "(", "'color'", ",", "'shape'", ",", "'size'", ",", "'elevation'", ",", "'bg_color'", ",", "'first_dof'", ",", "'second_dof'", ")", "\n", "\n", "# plot standard datasets", "\n", "for", "name", "in", "[", "\n", "'dsprites'", ",", "\n", "'shapes3d'", ",", "\n", "'cars3d'", ",", "\n", "'smallnorb'", ",", "\n", "'xyobject'", ",", "\n", "'xyobject_shaded'", ",", "\n", "'mpi3d_toy'", ",", "\n", "'mpi3d_realistic'", ",", "\n", "'mpi3d_real'", ",", "\n", "]", ":", "\n", "        ", "plot_traversal_stats", "(", "x_size_offset", "=", "0", ",", "y_size_offset", "=", "0.6", ",", "num_repeats", "=", "256", ",", "disable_labels", "=", "False", ",", "save_path", "=", "sp", "(", "name", ")", ",", "dataset_or_name", "=", "name", ")", "\n", "_print_data_mean_std", "(", "name", ",", "print_mean_std", ")", "\n", "\n", "# plot adversarial dsprites datasets", "\n", "", "for", "fg", "in", "[", "True", ",", "False", "]", ":", "\n", "        ", "for", "vis", "in", "[", "100", ",", "75", ",", "50", ",", "25", ",", "0", "]", ":", "\n", "            ", "name", "=", "f'dsprites_imagenet_{\"fg\" if fg else \"bg\"}_{vis}'", "\n", "plot_traversal_stats", "(", "save_path", "=", "sp", "(", "name", ")", ",", "dataset_or_name", "=", "name", ",", "x_size_offset", "=", "0.4", ")", "\n", "_print_data_mean_std", "(", "name", ",", "print_mean_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation._rotation_matrix": [[48, 58], ["torch.eye", "numpy.deg2rad", "numpy.sin", "numpy.cos"], "function", ["None"], ["def", "_rotation_matrix", "(", "d", ",", "i", ",", "j", ",", "deg", ")", ":", "\n", "    ", "assert", "0", "<=", "i", "<", "j", "<=", "d", "\n", "mat", "=", "torch", ".", "eye", "(", "d", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "r", "=", "np", ".", "deg2rad", "(", "deg", ")", "\n", "s", ",", "c", "=", "np", ".", "sin", "(", "r", ")", ",", "np", ".", "cos", "(", "r", ")", "\n", "mat", "[", "i", ",", "i", "]", "=", "c", "\n", "mat", "[", "j", ",", "j", "]", "=", "c", "\n", "mat", "[", "j", ",", "i", "]", "=", "-", "s", "\n", "mat", "[", "i", ",", "j", "]", "=", "s", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.rotation_matrix_2d": [[60, 62], ["save_metric_visualisation._rotation_matrix"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation._rotation_matrix"], ["", "def", "rotation_matrix_2d", "(", "deg", ")", ":", "\n", "    ", "return", "_rotation_matrix", "(", "d", "=", "2", ",", "i", "=", "0", ",", "j", "=", "1", ",", "deg", "=", "deg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation._random_rotation_matrix": [[64, 70], ["torch.eye", "range", "range", "save_metric_visualisation._rotation_matrix", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation._rotation_matrix"], ["", "def", "_random_rotation_matrix", "(", "d", ")", ":", "\n", "    ", "mat", "=", "torch", ".", "eye", "(", "d", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "d", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "d", ")", ":", "\n", "            ", "mat", "@=", "_rotation_matrix", "(", "d", ",", "i", ",", "j", ",", "np", ".", "random", ".", "randint", "(", "0", ",", "360", ")", ")", "\n", "", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.make_2d_line_points": [[72, 76], ["torch.randn", "torch.as_tensor", "save_metric_visualisation.rotation_matrix_2d"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.rotation_matrix_2d"], ["", "def", "make_2d_line_points", "(", "n", ":", "int", "=", "100", ",", "deg", ":", "float", "=", "30", ",", "std_x", ":", "float", "=", "1.0", ",", "std_y", ":", "float", "=", "0.005", ")", ":", "\n", "    ", "points", "=", "torch", ".", "randn", "(", "n", ",", "2", ",", "dtype", "=", "torch", ".", "float32", ")", "*", "torch", ".", "as_tensor", "(", "[", "[", "std_x", ",", "std_y", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "points", "=", "points", "@", "rotation_matrix_2d", "(", "deg", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.make_nd_line_points": [[78, 95], ["torch.randn", "isinstance", "torch.cat", "isinstance", "numpy.randint", "torch.full", "save_metric_visualisation._random_rotation_matrix", "torch.as_tensor", "torch.rand"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation._random_rotation_matrix"], ["", "def", "make_nd_line_points", "(", "n", ":", "int", "=", "100", ",", "dims", ":", "int", "=", "4", ",", "std_x", ":", "float", "=", "1.0", ",", "std_y", ":", "float", "=", "0.005", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "dims", ",", "int", ")", ":", "\n", "        ", "m", ",", "M", "=", "dims", "\n", "dims", "=", "np", ".", "randint", "(", "m", ",", "M", ")", "\n", "# generate numbers", "\n", "", "xs", "=", "torch", ".", "randn", "(", "n", ",", "dims", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "# axis standard deviations", "\n", "if", "isinstance", "(", "std_y", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "std_y", "=", "torch", ".", "full", "(", "(", "dims", "-", "1", ",", ")", ",", "fill_value", "=", "std_y", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "m", ",", "M", "=", "std_y", "\n", "std_y", "=", "torch", ".", "rand", "(", "dims", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "*", "(", "M", "-", "m", ")", "+", "m", "\n", "# scale axes", "\n", "", "std", "=", "torch", ".", "cat", "(", "[", "torch", ".", "as_tensor", "(", "[", "std_x", "]", ")", ",", "std_y", "]", ")", "\n", "xs", "=", "xs", "*", "std", "[", "None", ",", ":", "]", "\n", "# rotate", "\n", "return", "xs", "@", "_random_rotation_matrix", "(", "dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.make_line_points": [[97, 103], ["save_metric_visualisation.make_nd_line_points", "save_metric_visualisation.make_2d_line_points", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.make_nd_line_points", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.make_2d_line_points"], ["", "def", "make_line_points", "(", "n", ":", "int", "=", "100", ",", "deg", ":", "float", "=", "None", ",", "dims", ":", "int", "=", "2", ",", "std_x", ":", "float", "=", "1.0", ",", "std_y", ":", "float", "=", "0.1", ")", ":", "\n", "    ", "if", "deg", "is", "None", ":", "\n", "        ", "return", "make_nd_line_points", "(", "n", "=", "n", ",", "dims", "=", "dims", ",", "std_x", "=", "std_x", ",", "std_y", "=", "std_y", ")", "\n", "", "else", ":", "\n", "        ", "assert", "dims", "==", "2", ",", "f'if \"deg\" is not None, then \"dims\" must equal 2, currently set to: {repr(dims)}'", "\n", "return", "make_2d_line_points", "(", "n", "=", "n", ",", "deg", "=", "deg", ",", "std_x", "=", "std_x", ",", "std_y", "=", "std_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d": [[121, 122], ["torch.exp", "numpy.sqrt"], "function", ["None"], ["", "", "def", "gaussian_1d", "(", "x", ",", "s", ")", ":", "return", "1", "/", "(", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", ")", "*", "s", ")", "*", "torch", ".", "exp", "(", "-", "(", "x", "**", "2", ")", "/", "(", "2", "*", "s", "**", "2", ")", ")", "\n", "def", "gaussian_1d_dx", "(", "x", ",", "s", ")", ":", "return", "gaussian_1d", "(", "x", ",", "s", ")", "*", "(", "-", "x", "/", "s", "**", "2", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d_dx": [[122, 123], ["save_metric_visualisation.gaussian_1d"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d"], ["def", "gaussian_1d_dx", "(", "x", ",", "s", ")", ":", "return", "gaussian_1d", "(", "x", ",", "s", ")", "*", "(", "-", "x", "/", "s", "**", "2", ")", "\n", "def", "gaussian_1d_dx2", "(", "x", ",", "s", ")", ":", "return", "gaussian_1d", "(", "x", ",", "s", ")", "*", "(", "(", "x", "**", "2", "-", "s", "**", "2", ")", "/", "s", "**", "4", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d_dx2": [[123, 124], ["save_metric_visualisation.gaussian_1d"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d"], ["def", "gaussian_1d_dx2", "(", "x", ",", "s", ")", ":", "return", "gaussian_1d", "(", "x", ",", "s", ")", "*", "(", "(", "x", "**", "2", "-", "s", "**", "2", ")", "/", "s", "**", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_2d": [[126, 127], ["save_metric_visualisation.gaussian_1d", "save_metric_visualisation.gaussian_1d"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d"], ["def", "gaussian_2d", "(", "x", ",", "y", ",", "sx", ",", "sy", ")", ":", "return", "gaussian_1d", "(", "x", ",", "sx", ")", "*", "gaussian_1d", "(", "y", ",", "sy", ")", "\n", "def", "gaussian_2d_dy", "(", "x", ",", "y", ",", "sx", ",", "sy", ")", ":", "return", "gaussian_1d", "(", "x", ",", "sx", ")", "*", "gaussian_1d_dx", "(", "y", ",", "sy", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_2d_dy": [[127, 128], ["save_metric_visualisation.gaussian_1d", "save_metric_visualisation.gaussian_1d_dx"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d_dx"], ["def", "gaussian_2d_dy", "(", "x", ",", "y", ",", "sx", ",", "sy", ")", ":", "return", "gaussian_1d", "(", "x", ",", "sx", ")", "*", "gaussian_1d_dx", "(", "y", ",", "sy", ")", "\n", "def", "gaussian_2d_dy2", "(", "x", ",", "y", ",", "sx", ",", "sy", ")", ":", "return", "gaussian_1d", "(", "x", ",", "sx", ")", "*", "gaussian_1d_dx2", "(", "y", ",", "sy", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_2d_dy2": [[128, 129], ["save_metric_visualisation.gaussian_1d", "save_metric_visualisation.gaussian_1d_dx2"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_1d_dx2"], ["def", "gaussian_2d_dy2", "(", "x", ",", "y", ",", "sx", ",", "sy", ")", ":", "return", "gaussian_1d", "(", "x", ",", "sx", ")", "*", "gaussian_1d_dx2", "(", "y", ",", "sy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.rotated_radius_meshgrid": [[131, 142], ["torch.linspace", "torch.meshgrid", "torch.einsum", "torch.stack", "save_metric_visualisation.rotation_matrix_2d"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.rotation_matrix_2d"], ["def", "rotated_radius_meshgrid", "(", "radius", ":", "float", ",", "num_points", ":", "int", ",", "deg", ":", "float", "=", "0", ",", "device", "=", "None", ",", "return_orig", "=", "False", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# x & y values centered around zero", "\n", "# p = torch.arange(size, device=device) - (size-1)/2", "\n", "    ", "p", "=", "torch", ".", "linspace", "(", "-", "radius", ",", "radius", ",", "num_points", ",", "device", "=", "device", ")", "\n", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "p", ",", "p", ")", "\n", "# matrix multiplication along first axis | https://pytorch.org/docs/stable/generated/torch.einsum.html", "\n", "rx", ",", "ry", "=", "torch", ".", "einsum", "(", "'dxy,kd->kxy'", ",", "torch", ".", "stack", "(", "[", "x", ",", "y", "]", ")", ",", "rotation_matrix_2d", "(", "deg", ")", ")", "\n", "# result", "\n", "if", "return_orig", ":", "\n", "        ", "return", "(", "rx", ",", "ry", ")", ",", "(", "x", ",", "y", ")", "\n", "", "return", "rx", ",", "ry", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.rotated_guassian2d": [[144, 150], ["save_metric_visualisation.rotated_radius_meshgrid", "save_metric_visualisation.gaussian_2d", "gaussian_2d.sum", "max"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.rotated_radius_meshgrid", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.gaussian_2d"], ["", "def", "rotated_guassian2d", "(", "std_x", ":", "float", ",", "std_y", ":", "float", ",", "deg", ":", "float", ",", "trunc_sigma", ":", "Optional", "[", "float", "]", "=", "None", ",", "num_points", ":", "int", "=", "511", ")", ":", "\n", "    ", "radius", "=", "(", "2.25", "*", "max", "(", "std_x", ",", "std_y", ")", ")", "if", "(", "trunc_sigma", "is", "None", ")", "else", "trunc_sigma", "\n", "(", "xs_r", ",", "ys_r", ")", ",", "(", "xs", ",", "ys", ")", "=", "rotated_radius_meshgrid", "(", "radius", "=", "radius", ",", "num_points", "=", "num_points", ",", "deg", "=", "deg", ",", "return_orig", "=", "True", ")", "\n", "zs", "=", "gaussian_2d", "(", "xs_r", ",", "ys_r", ",", "sx", "=", "std_x", ",", "sy", "=", "std_y", ")", "\n", "zs", "/=", "zs", ".", "sum", "(", ")", "\n", "return", "xs", ",", "ys", ",", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.plot_gaussian": [[152, 182], ["fig.gca.set_xlim", "fig.gca.set_ylim", "save_metric_visualisation.rotated_guassian2d", "fig.gca.contourf", "matplotlib.pyplot.figure", "plt.figure.gca", "save_metric_visualisation.make_line_points", "fig.gca.scatter", "max"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.rotated_guassian2d", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.make_line_points"], ["", "def", "plot_gaussian", "(", "\n", "deg", ":", "float", "=", "0.0", ",", "\n", "std_x", ":", "float", "=", "1.0", ",", "\n", "std_y", ":", "float", "=", "0.1", ",", "\n", "# contour", "\n", "contour_resolution", ":", "int", "=", "255", ",", "\n", "contour_trunc_sigma", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "contour_kwargs", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "# dots", "\n", "dots_num", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "dots_kwargs", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "# axis", "\n", "ax", "=", "None", ",", "\n", ")", ":", "\n", "    ", "if", "ax", "is", "None", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "# set limits", "\n", "", "trunc_sigma", "=", "(", "2.05", "*", "max", "(", "std_x", ",", "std_y", ")", ")", "if", "(", "contour_trunc_sigma", "is", "None", ")", "else", "contour_trunc_sigma", "\n", "ax", ".", "set_xlim", "(", "[", "-", "trunc_sigma", ",", "trunc_sigma", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "trunc_sigma", ",", "trunc_sigma", "]", ")", "\n", "# plot contour", "\n", "xs", ",", "ys", ",", "zs", "=", "rotated_guassian2d", "(", "std_x", "=", "std_x", ",", "std_y", "=", "std_y", ",", "deg", "=", "deg", ",", "trunc_sigma", "=", "trunc_sigma", ",", "num_points", "=", "contour_resolution", ")", "\n", "ax", ".", "contourf", "(", "xs", ",", "ys", ",", "zs", ",", "**", "(", "{", "}", "if", "contour_kwargs", "is", "None", "else", "contour_kwargs", ")", ")", "\n", "# plot dots", "\n", "if", "dots_num", "is", "not", "None", ":", "\n", "        ", "points", "=", "make_line_points", "(", "n", "=", "dots_num", ",", "dims", "=", "2", ",", "deg", "=", "deg", ",", "std_x", "=", "std_x", ",", "std_y", "=", "std_y", ")", "\n", "ax", ".", "scatter", "(", "*", "points", ".", "T", ",", "**", "(", "{", "}", "if", "dots_kwargs", "is", "None", "else", "dots_kwargs", ")", ")", "\n", "# done", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.score_grid": [[189, 218], ["torch.zeros", "torch.zeros", "enumerate", "len", "len", "torch.zeros", "enumerate", "save_metric_visualisation.make_line_points", "disent.metrics._factored_components.compute_axis_score", "disent.metrics._factored_components.compute_linear_score"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.make_line_points", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components.compute_axis_score", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components.compute_linear_score"], ["", "def", "score_grid", "(", "\n", "deg_rotations", ":", "Sequence", "[", "Optional", "[", "float", "]", "]", ",", "\n", "y_std_ratios", ":", "Sequence", "[", "float", "]", ",", "\n", "x_std", ":", "float", "=", "1.0", ",", "\n", "num_points", ":", "int", "=", "1000", ",", "\n", "num_dims", ":", "int", "=", "2", ",", "\n", "use_std", ":", "bool", "=", "True", ",", "\n", "top_2", ":", "bool", "=", "False", ",", "\n", "norm", ":", "bool", "=", "True", ",", "\n", "return_points", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "    ", "h", ",", "w", "=", "len", "(", "y_std_ratios", ")", ",", "len", "(", "deg_rotations", ")", "\n", "# grids", "\n", "axis_scores", "=", "torch", ".", "zeros", "(", "[", "h", ",", "w", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "linear_scores", "=", "torch", ".", "zeros", "(", "[", "h", ",", "w", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "if", "return_points", ":", "\n", "        ", "all_points", "=", "torch", ".", "zeros", "(", "[", "h", ",", "w", ",", "num_points", ",", "num_dims", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "# compute scores", "\n", "", "for", "i", ",", "y_std_ratio", "in", "enumerate", "(", "y_std_ratios", ")", ":", "\n", "        ", "for", "j", ",", "deg", "in", "enumerate", "(", "deg_rotations", ")", ":", "\n", "            ", "points", "=", "make_line_points", "(", "n", "=", "num_points", ",", "dims", "=", "num_dims", ",", "deg", "=", "deg", ",", "std_x", "=", "x_std", ",", "std_y", "=", "x_std", "*", "y_std_ratio", ")", "\n", "axis_scores", "[", "i", ",", "j", "]", "=", "compute_axis_score", "(", "points", ",", "use_std", "=", "use_std", ",", "top_2", "=", "top_2", ",", "norm", "=", "norm", ")", "\n", "linear_scores", "[", "i", ",", "j", "]", "=", "compute_linear_score", "(", "points", ",", "use_std", "=", "use_std", ",", "top_2", "=", "top_2", ",", "norm", "=", "norm", ")", "\n", "if", "return_points", ":", "\n", "                ", "all_points", "[", "i", ",", "j", "]", "=", "points", "\n", "# results", "\n", "", "", "", "if", "return_points", ":", "\n", "        ", "return", "axis_scores", ",", "linear_scores", ",", "all_points", "\n", "", "return", "axis_scores", ",", "linear_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.ave_score_grid": [[220, 241], ["tqdm.tqdm", "zip", "torch.mean", "torch.mean", "range", "results.append", "torch.stack", "torch.stack", "save_metric_visualisation.score_grid"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.score_grid"], ["", "def", "ave_score_grid", "(", "\n", "deg_rotations", ":", "Sequence", "[", "Optional", "[", "float", "]", "]", ",", "\n", "y_std_ratios", ":", "Sequence", "[", "float", "]", ",", "\n", "x_std", ":", "float", "=", "1.0", ",", "\n", "num_points", ":", "int", "=", "1000", ",", "\n", "num_dims", ":", "int", "=", "2", ",", "\n", "use_std", ":", "bool", "=", "True", ",", "\n", "top_2", ":", "bool", "=", "False", ",", "\n", "norm", ":", "bool", "=", "True", ",", "\n", "repeats", ":", "int", "=", "10", ",", "\n", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "# repeat", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "repeats", ")", ")", ":", "\n", "        ", "results", ".", "append", "(", "score_grid", "(", "deg_rotations", "=", "deg_rotations", ",", "y_std_ratios", "=", "y_std_ratios", ",", "x_std", "=", "x_std", ",", "num_points", "=", "num_points", ",", "num_dims", "=", "num_dims", ",", "use_std", "=", "use_std", ",", "top_2", "=", "top_2", ",", "norm", "=", "norm", ")", ")", "\n", "# average results", "\n", "", "all_axis_scores", ",", "all_linear_scores", "=", "zip", "(", "*", "results", ")", "\n", "axis_scores", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "all_axis_scores", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "linear_scores", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "all_linear_scores", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "# results", "\n", "return", "axis_scores", ",", "linear_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.make_ave_scores_plot": [[243, 296], ["save_metric_visualisation.ave_score_grid", "docs.plt_subplots", "axs.flatten", "ax0.imshow", "ax1.imshow", "axs.flatten", "fig.tight_layout", "ax.set_aspect", "len", "numpy.linspace", "ax.get_xticks", "ax.set_xticks", "numpy.linspace", "int", "int", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.ave_score_grid", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots"], ["", "def", "make_ave_scores_plot", "(", "\n", "std_num", ":", "int", "=", "21", ",", "\n", "deg_num", ":", "int", "=", "21", ",", "\n", "ndim", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "# extra", "\n", "num_points", ":", "int", "=", "1000", ",", "\n", "repeats", ":", "int", "=", "25", ",", "\n", "x_std", ":", "float", "=", "1.0", ",", "\n", "use_std", ":", "bool", "=", "True", ",", "\n", "top_2", ":", "bool", "=", "False", ",", "\n", "norm", ":", "bool", "=", "True", ",", "\n", "# cmap", "\n", "cmap_axis", ":", "str", "=", "'GnBu_r'", ",", "# 'RdPu_r', 'GnBu_r', 'Blues_r', 'viridis', 'plasma', 'magma'", "\n", "cmap_linear", ":", "str", "=", "'RdPu_r'", ",", "# 'RdPu_r', 'GnBu_r', 'Blues_r', 'viridis', 'plasma', 'magma'", "\n", "vertical", ":", "bool", "=", "True", ",", "\n", "# subplot settings", "\n", "subplot_size", ":", "float", "=", "4.", ",", "\n", "subplot_padding", ":", "float", "=", "1.5", ",", "\n", ")", ":", "\n", "# make sure to handle the random case", "\n", "    ", "deg_num", "=", "std_num", "if", "(", "ndim", "is", "None", ")", "else", "deg_num", "\n", "axis_scores", ",", "linear_scores", "=", "ave_score_grid", "(", "\n", "deg_rotations", "=", "np", ".", "linspace", "(", "0.", ",", "180.", ",", "num", "=", "deg_num", ")", "if", "(", "ndim", "is", "None", ")", "else", "[", "None", "]", ",", "\n", "y_std_ratios", "=", "np", ".", "linspace", "(", "0.", ",", "1.", ",", "num", "=", "std_num", ")", ",", "\n", "x_std", "=", "x_std", ",", "\n", "num_points", "=", "num_points", ",", "\n", "num_dims", "=", "2", "if", "(", "ndim", "is", "None", ")", "else", "ndim", ",", "\n", "use_std", "=", "use_std", ",", "\n", "top_2", "=", "top_2", ",", "\n", "norm", "=", "norm", ",", "\n", "repeats", "=", "repeats", ",", "\n", ")", "\n", "# make plot", "\n", "fig", ",", "axs", "=", "H", ".", "plt_subplots", "(", "\n", "nrows", "=", "1", "+", "int", "(", "vertical", ")", ",", "\n", "ncols", "=", "1", "+", "int", "(", "not", "vertical", ")", ",", "\n", "titles", "=", "[", "'Linear'", ",", "'Axis'", "]", ",", "\n", "row_labels", "=", "f'$\u03c3_y$ - Standard Deviation'", ",", "\n", "col_labels", "=", "f'\u03b8 - Rotation Degrees'", ",", "\n", "figsize", "=", "(", "subplot_size", "+", "0.5", ",", "subplot_size", "*", "2", "*", "(", "deg_num", "/", "std_num", ")", "+", "0.75", ")", "[", ":", ":", "1", "if", "vertical", "else", "-", "1", "]", "\n", ")", "\n", "(", "ax0", ",", "ax1", ")", "=", "axs", ".", "flatten", "(", ")", "\n", "# subplots", "\n", "ax0", ".", "imshow", "(", "linear_scores", ",", "cmap", "=", "cmap_linear", ",", "extent", "=", "[", "0.", ",", "180.", ",", "1.", ",", "0.", "]", ")", "\n", "ax1", ".", "imshow", "(", "axis_scores", ",", "cmap", "=", "cmap_axis", ",", "extent", "=", "[", "0.", ",", "180.", ",", "1.", ",", "0.", "]", ")", "\n", "for", "ax", "in", "axs", ".", "flatten", "(", ")", ":", "\n", "        ", "ax", ".", "set_aspect", "(", "180", "*", "(", "std_num", "/", "deg_num", ")", ")", "\n", "if", "len", "(", "ax", ".", "get_xticks", "(", ")", ")", ":", "\n", "            ", "ax", ".", "set_xticks", "(", "np", ".", "linspace", "(", "0.", ",", "180.", ",", "5", ")", ")", "\n", "# layout", "\n", "", "", "fig", ".", "tight_layout", "(", "pad", "=", "subplot_padding", ")", "\n", "# done", "\n", "return", "fig", ",", "axs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.plot_scores": [[303, 314], ["ax.legend", "matplotlib.cm.get_cmap", "numpy.clip", "matplotlib.cm.get_cmap", "numpy.clip", "Line2D", "Line2D", "float", "float"], "function", ["None"], ["", "def", "plot_scores", "(", "ax", ",", "axis_score", ",", "linear_score", ")", ":", "\n", "    ", "from", "matplotlib", ".", "lines", "import", "Line2D", "\n", "assert", "0", "<=", "linear_score", "<=", "1", "\n", "assert", "0", "<=", "axis_score", "<=", "1", "\n", "linear_rgb", "=", "cm", ".", "get_cmap", "(", "'RdPu_r'", ")", "(", "np", ".", "clip", "(", "linear_score", ",", "0.", ",", "1.", ")", ")", "\n", "axis_rgb", "=", "cm", ".", "get_cmap", "(", "'GnBu_r'", ")", "(", "np", ".", "clip", "(", "axis_score", ",", "0.", ",", "1.", ")", ")", "\n", "ax", ".", "legend", "(", "handles", "=", "[", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "label", "=", "f'Linear: {float(linear_score):.2f}'", ",", "color", "=", "linear_rgb", ",", "marker", "=", "'o'", ",", "markersize", "=", "10", ",", "linestyle", "=", "'None'", ")", ",", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "label", "=", "f'Axis: {float(axis_score):.2f}'", ",", "color", "=", "axis_rgb", ",", "marker", "=", "'o'", ",", "markersize", "=", "10", ",", "linestyle", "=", "'None'", ")", ",", "\n", "]", ")", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.make_grid_gaussian_score_plot": [[321, 372], ["docs.plt_subplots", "tqdm.tqdm", "itertools.product", "matplotlib.pyplot.tight_layout", "dict", "dict", "len", "len", "enumerate", "enumerate", "range", "save_metric_visualisation.plot_gaussian", "save_metric_visualisation.plot_scores", "tqdm.tqdm.update", "save_metric_visualisation.make_2d_line_points", "axis_score.append", "linear_score.append", "numpy.mean", "numpy.mean", "disent.metrics._factored_components.compute_axis_score", "disent.metrics._factored_components.compute_linear_score"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.plot_gaussian", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.plot_scores", "home.repos.pwc.inspect_result.nmichlo_disent.plotting_examples.save_metric_visualisation.make_2d_line_points", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components.compute_axis_score", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components.compute_linear_score"], ["", "def", "make_grid_gaussian_score_plot", "(", "\n", "# grid", "\n", "y_stds", ":", "Sequence", "[", "float", "]", "=", "(", "0.8", ",", "0.2", ",", "0.05", ")", "[", ":", ":", "-", "1", "]", ",", "# (0.8, 0.4, 0.2, 0.1, 0.05),", "\n", "deg_rotations", ":", "Sequence", "[", "float", "]", "=", "(", "0", ",", "22.5", ",", "45", ",", "67.5", ",", "90", ",", "112.5", ",", "135", ",", "157.5", ")", ",", "# (0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165),", "\n", "# plot dot options", "\n", "dots_num", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "# score options", "\n", "num_points", ":", "int", "=", "10000", ",", "\n", "repeats", ":", "int", "=", "100", ",", "\n", "use_std", ":", "bool", "=", "True", ",", "\n", "top_2", ":", "bool", "=", "False", ",", "\n", "norm", ":", "bool", "=", "True", ",", "\n", "# grid options", "\n", "subplot_size", ":", "float", "=", "2.125", ",", "\n", "subplot_padding", ":", "float", "=", "0.5", ",", "\n", "subplot_contour_kwargs", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "subplot_dots_kwargs", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", ")", ":", "\n", "# defaults", "\n", "    ", "if", "subplot_contour_kwargs", "is", "None", ":", "subplot_contour_kwargs", "=", "dict", "(", "cmap", "=", "'Blues'", ")", "\n", "if", "subplot_dots_kwargs", "is", "None", ":", "subplot_dots_kwargs", "=", "dict", "(", "cmap", "=", "'Purples'", ")", "\n", "\n", "# make figure", "\n", "nrows", ",", "ncols", "=", "len", "(", "y_stds", ")", ",", "len", "(", "deg_rotations", ")", "\n", "fig", ",", "axs", "=", "H", ".", "plt_subplots", "(", "\n", "nrows", "=", "nrows", ",", "ncols", "=", "ncols", ",", "\n", "row_labels", "=", "[", "f'$\u03c3_y$ = {std_y}'", "for", "std_y", "in", "y_stds", "]", ",", "\n", "col_labels", "=", "[", "f'\u03b8 = {deg}\u00b0'", "for", "deg", "in", "deg_rotations", "]", ",", "\n", "hide_axis", "=", "'all'", ",", "\n", "figsize", "=", "(", "ncols", "*", "subplot_size", ",", "nrows", "*", "subplot_size", ")", ",", "\n", ")", "\n", "\n", "# progress", "\n", "p", "=", "tqdm", "(", "total", "=", "axs", ".", "size", ",", "desc", "=", "'generating_plot'", ")", "\n", "# generate plot", "\n", "for", "(", "y", ",", "std_y", ")", ",", "(", "x", ",", "deg", ")", "in", "itertools", ".", "product", "(", "enumerate", "(", "y_stds", ")", ",", "enumerate", "(", "deg_rotations", ")", ")", ":", "\n", "# compute scores", "\n", "        ", "axis_score", ",", "linear_score", "=", "[", "]", ",", "[", "]", "\n", "for", "k", "in", "range", "(", "repeats", ")", ":", "\n", "            ", "points", "=", "make_2d_line_points", "(", "n", "=", "num_points", ",", "deg", "=", "deg", ",", "std_x", "=", "1.0", ",", "std_y", "=", "std_y", ")", "\n", "axis_score", ".", "append", "(", "compute_axis_score", "(", "points", ",", "use_std", "=", "use_std", ",", "top_2", "=", "top_2", ",", "norm", "=", "norm", ")", ")", "\n", "linear_score", ".", "append", "(", "compute_linear_score", "(", "points", ",", "use_std", "=", "use_std", ",", "top_2", "=", "top_2", ",", "norm", "=", "norm", ")", ")", "\n", "", "axis_score", ",", "linear_score", "=", "np", ".", "mean", "(", "axis_score", ")", ",", "np", ".", "mean", "(", "linear_score", ")", "\n", "# generate subplots", "\n", "plot_gaussian", "(", "ax", "=", "axs", "[", "y", ",", "x", "]", ",", "deg", "=", "deg", ",", "std_x", "=", "1.0", ",", "std_y", "=", "std_y", ",", "dots_num", "=", "dots_num", ",", "contour_trunc_sigma", "=", "2.05", ",", "contour_kwargs", "=", "subplot_contour_kwargs", ",", "dots_kwargs", "=", "subplot_dots_kwargs", ")", "\n", "plot_scores", "(", "ax", "=", "axs", "[", "y", ",", "x", "]", ",", "axis_score", "=", "axis_score", ",", "linear_score", "=", "linear_score", ")", "\n", "# update progress", "\n", "p", ".", "update", "(", ")", "\n", "", "plt", ".", "tight_layout", "(", "pad", "=", "subplot_padding", ")", "\n", "\n", "return", "fig", ",", "axs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_transform": [[81, 90], ["disent.dataset.transform.ToImgTensorU8", "disent.dataset.transform.ToImgTensorF32", "KeyError", "repr"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_data": [[93, 171], ["__init__.make_transform", "disent.dataset.data.XYSquaresData", "NotImplementedError", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XColumnsData", "disent.dataset.data.XColumnsData", "disent.dataset.data.XColumnsData", "disent.dataset.data.XColumnsData", "disent.dataset.data.XColumnsData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresData", "disent.dataset.data.XYObjectData", "disent.dataset.data.XYObjectShadedData", "docs.examples.extend_experiment.code.groundtruth__xyblocks.XYBlocksData", "disent.dataset.data.Cars3d64Data", "disent.dataset.data.SmallNorb64Data", "disent.dataset.data.Shapes3dData", "disent.dataset.data.DSpritesData", "disent.dataset.data.Mpi3dData", "disent.dataset.data.Mpi3dData", "disent.dataset.data.Mpi3dData", "disent.dataset.data.SpritesData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "disent.dataset.data.DSpritesImagenetData", "KeyError", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_transform"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_dataset": [[173, 194], ["__init__.make_data", "disent.dataset.DisentDataset", "__init__.make_transform", "disent.dataset.sampling.GroundTruthSingleSampler"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_data", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_transform"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.pair_indices_random": [[202, 221], ["numpy.random.randint", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.pair_indices_combinations": [[223, 235], ["numpy.triu_indices"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.pair_indices_nearby": [[237, 248], ["numpy.arange", "numpy.roll"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.pair_indices": [[257, 263], ["fn", "KeyError", "repr"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__._make_rel_path": [[271, 282], ["inspect.stack", "inspect.getmodule", "os.path.dirname", "os.path.join", "os.makedirs", "os.path.isabs", "os.path.dirname", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__._make_rel_path_add_ext": [[284, 290], ["__init__._make_rel_path", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__._make_rel_path"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_rel_path": [[292, 294], ["__init__._make_rel_path"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__._make_rel_path"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.make_rel_path_add_ext": [[296, 298], ["__init__._make_rel_path_add_ext"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__._make_rel_path_add_ext"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.plt_rel_path_savefig": [[300, 308], ["__init__._make_rel_path_add_ext", "plt.savefig", "print", "plt.show", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__._make_rel_path_add_ext"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_main.register_searchpath_plugin": [[68, 108], ["isinstance", "isinstance", "isinstance", "all", "isinstance", "all", "isinstance", "sys.path.insert", "repr", "repr", "repr", "isinstance", "isinstance"], "function", ["None"], ["def", "register_searchpath_plugin", "(", "\n", "search_dir_main", ":", "str", "=", "EXP_CONFIG_DIR", ",", "\n", "search_dirs_prepend", ":", "Optional", "[", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "]", "=", "None", ",", "\n", "search_dirs_append", ":", "Optional", "[", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Patch Hydra:\n    1. sets the default search path to `experiment/config`\n    2. add to the search path with the `DISENT_CONFIGS_PREPEND` and `DISENT_CONFIGS_APPEND` environment variables\n   NOTE: --config-dir has lower priority than all these, --config-path has higher priority.\n\n    This function can safely be called multiple times\n        - unless other functions modify these same libs which is unlikely!\n    \"\"\"", "\n", "# normalise the config paths", "\n", "if", "search_dirs_prepend", "is", "None", ":", "search_dirs_prepend", "=", "[", "]", "\n", "if", "search_dirs_append", "is", "None", ":", "search_dirs_append", "=", "[", "]", "\n", "if", "isinstance", "(", "search_dirs_prepend", ",", "str", ")", ":", "search_dirs_prepend", "=", "[", "search_dirs_prepend", "]", "\n", "if", "isinstance", "(", "search_dirs_append", ",", "str", ")", ":", "search_dirs_append", "=", "[", "search_dirs_append", "]", "\n", "assert", "isinstance", "(", "search_dirs_prepend", ",", "(", "tuple", ",", "list", ")", ")", "and", "all", "(", "(", "isinstance", "(", "d", ",", "str", ")", "and", "d", ")", "for", "d", "in", "search_dirs_prepend", ")", ",", "f'`search_dirs_prepend` must be a list or tuple of non-empty path strings to directories, got: {repr(search_dirs_prepend)}'", "\n", "assert", "isinstance", "(", "search_dirs_append", ",", "(", "tuple", ",", "list", ")", ")", "and", "all", "(", "(", "isinstance", "(", "d", ",", "str", ")", "and", "d", ")", "for", "d", "in", "search_dirs_append", ")", ",", "f'`search_dirs_append` must be a list or tuple of non-empty path strings to directories, got: {repr(search_dirs_append)}'", "\n", "assert", "isinstance", "(", "search_dir_main", ",", "str", ")", "and", "search_dir_main", ",", "f'`search_dir_main` must be a non-empty path string to a directory, got: {repr(search_dir_main)}'", "\n", "# get dirs", "\n", "config_dirs", "=", "[", "*", "search_dirs_prepend", ",", "search_dir_main", ",", "*", "search_dirs_append", "]", "\n", "\n", "# check that it is the same as what has previously been registered, otherwise set the directories!", "\n", "global", "_DISENT_CONFIG_DIRS", "\n", "if", "_DISENT_CONFIG_DIRS", "is", "None", ":", "\n", "        ", "_DISENT_CONFIG_DIRS", "=", "config_dirs", "\n", "", "else", ":", "\n", "        ", "assert", "_DISENT_CONFIG_DIRS", "==", "config_dirs", ",", "f'Config dirs have already been registered, on additional calls, registered dirs must be the same as previously values!\\n- existing: {_DISENT_CONFIG_DIRS}\\n- registered: {config_dirs}'", "\n", "\n", "# register the experiment's search path plugin with disent, using hydras auto-detection", "\n", "# of folders named `hydra_plugins` contained insided `namespace packages` or rather", "\n", "# packages that are in the `PYTHONPATH` or `sys.path`", "\n", "#   1. sets the default search path to those registered above", "\n", "#   2. add to the search path with the `DISENT_CONFIGS_PREPEND` and `DISENT_CONFIGS_APPEND` environment variables", "\n", "#      NOTE: --config-dir has lower priority than all these, --config-path has higher priority.", "\n", "", "if", "PLUGIN_NAMESPACE", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "PLUGIN_NAMESPACE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_main.register_hydra_resolvers": [[110, 174], ["omegaconf.OmegaConf.has_resolver", "omegaconf.OmegaConf.register_new_resolver", "omegaconf.OmegaConf.has_resolver", "omegaconf.OmegaConf.register_new_resolver", "omegaconf.OmegaConf.has_resolver", "omegaconf.OmegaConf.register_new_resolver", "omegaconf.OmegaConf.has_resolver", "omegaconf.OmegaConf.register_new_resolver", "omegaconf.OmegaConf.has_resolver", "omegaconf.OmegaConf.register_new_resolver", "omegaconf.OmegaConf.has_resolver", "omegaconf.OmegaConf.register_new_resolver", "ConfigurationError", "logging.info", "dst.parent.mkdir", "subprocess.Popen().wait", "str", "pathlib.Path", "pathlib.Path", "src.is_absolute", "dst.is_absolute", "RuntimeError", "repr", "repr", "repr", "repr", "subprocess.Popen", "str", "str", "repr", "repr", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "register_hydra_resolvers", "(", ")", ":", "\n", "    ", "\"\"\"\n    Patch OmegaConf, enabling various config resolvers:\n        - enable the ${exit:<msg>} resolver for omegaconf/hydra\n        - enable the ${exp_num:<root_dir>} and ${exp_dir:<root_dir>,<name>} resolvers to detect the experiment number\n        - enable the ${fmt:<strfmt>,<kwargs...>} resolver that wraps `str.format`\n        - enable the ${abspath:<path>} resolver that wraps `hydra.utils.to_absolute_path` formatting relative paths in relation to the original working directory\n        - enable the ${rsync_dir:<src>/<name>,<dst>/<name>} resolver that returns `<dst>/<name>`, but first rsync's the two directories!\n\n    This function can safely be called multiple times\n        - unless other functions modify these same libs which is unlikely!\n    \"\"\"", "\n", "\n", "\n", "# register a custom OmegaConf resolver that allows us to put in a ${exit:msg} that exits the program", "\n", "# - if we don't register this, the program will still fail because we have an unknown", "\n", "#   resolver. This just prettifies the output.", "\n", "if", "not", "OmegaConf", ".", "has_resolver", "(", "'exit'", ")", ":", "\n", "        ", "class", "ConfigurationError", "(", "Exception", ")", ":", "\n", "            ", "pass", "\n", "# resolver function", "\n", "", "def", "_error_resolver", "(", "msg", ":", "str", ")", ":", "\n", "            ", "raise", "ConfigurationError", "(", "msg", ")", "\n", "# patch omegaconf for hydra", "\n", "", "OmegaConf", ".", "register_new_resolver", "(", "'exit'", ",", "_error_resolver", ")", "\n", "\n", "# register a custom OmegaConf resolver that allows us to get the next experiment number from a directory", "\n", "# - ${run_num:<root_dir>} returns the current experiment number", "\n", "", "if", "not", "OmegaConf", ".", "has_resolver", "(", "'exp_num'", ")", ":", "\n", "        ", "OmegaConf", ".", "register_new_resolver", "(", "'exp_num'", ",", "get_current_experiment_number", ")", "\n", "# - ${run_dir:<root_dir>,<name>} returns the current experiment folder with the name appended", "\n", "", "if", "not", "OmegaConf", ".", "has_resolver", "(", "'exp_dir'", ")", ":", "\n", "        ", "OmegaConf", ".", "register_new_resolver", "(", "'exp_dir'", ",", "make_current_experiment_dir", ")", "\n", "\n", "# register a function that pads an integer to a specified length", "\n", "# - ${fmt:\"{:04d}\",42} -> \"0042\"", "\n", "", "if", "not", "OmegaConf", ".", "has_resolver", "(", "'fmt'", ")", ":", "\n", "        ", "OmegaConf", ".", "register_new_resolver", "(", "'fmt'", ",", "str", ".", "format", ")", "\n", "\n", "# register hydra helper functions", "\n", "# - ${abspath:<rel_path>} convert a relative path to an abs path using the original hydra working directory, not the changed experiment dir.", "\n", "", "if", "not", "OmegaConf", ".", "has_resolver", "(", "'abspath'", ")", ":", "\n", "        ", "OmegaConf", ".", "register_new_resolver", "(", "'abspath'", ",", "hydra", ".", "utils", ".", "to_absolute_path", ")", "\n", "\n", "# registry copy directory function", "\n", "# - useful if datasets are already prepared on a shared drive and need to be copied to a temp drive for example!", "\n", "", "if", "not", "OmegaConf", ".", "has_resolver", "(", "'rsync_dir'", ")", ":", "\n", "        ", "def", "rsync_dir", "(", "src", ":", "str", ",", "dst", ":", "str", ")", "->", "str", ":", "\n", "            ", "src", ",", "dst", "=", "Path", "(", "src", ")", ",", "Path", "(", "dst", ")", "\n", "# checks", "\n", "assert", "src", ".", "name", "and", "src", ".", "is_absolute", "(", ")", ",", "f'src path must be absolute and not the root: {repr(str(src))}'", "\n", "assert", "dst", ".", "name", "and", "dst", ".", "is_absolute", "(", ")", ",", "f'dst path must be absolute and not the root: {repr(str(dst))}'", "\n", "assert", "src", ".", "name", "==", "dst", ".", "name", ",", "f'src and dst paths must point to dirs with the same names: src.name={repr(src.name)}, dst.name={repr(dst.name)}'", "\n", "# synchronize dirs", "\n", "logging", ".", "info", "(", "f'rsync files:\\n- src={repr(str(src))}\\n- dst={repr(str(dst))}'", ")", "\n", "# create the parent dir and copy files into the parent", "\n", "dst", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "returncode", "=", "subprocess", ".", "Popen", "(", "[", "'rsync'", ",", "'-avh'", ",", "str", "(", "src", ")", ",", "str", "(", "dst", ".", "parent", ")", "]", ")", ".", "wait", "(", ")", "\n", "if", "returncode", "!=", "0", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Failed to rsync files!'", ")", "\n", "# return the destination dir", "\n", "", "return", "str", "(", "dst", ")", "\n", "# REGISTER", "\n", "", "OmegaConf", ".", "register_new_resolver", "(", "'rsync_dir'", ",", "rsync_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_main.patch_hydra": [[181, 190], ["hydra_main.register_searchpath_plugin", "hydra_main.register_hydra_resolvers"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_main.register_searchpath_plugin", "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_main.register_hydra_resolvers"], ["", "", "def", "patch_hydra", "(", "\n", "# config search path", "\n", "search_dir_main", ":", "str", "=", "EXP_CONFIG_DIR", ",", "\n", "search_dirs_prepend", ":", "Optional", "[", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "]", "=", "None", ",", "\n", "search_dirs_append", ":", "Optional", "[", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "# Patch Hydra and OmegaConf:", "\n", "    ", "register_searchpath_plugin", "(", "search_dir_main", "=", "search_dir_main", ",", "search_dirs_prepend", "=", "search_dirs_prepend", ",", "search_dirs_append", "=", "search_dirs_append", ")", "\n", "register_hydra_resolvers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_main.hydra_main": [[192, 228], ["hydra_main.patch_hydra", "hydra.main", "logging.basicConfig", "hydra_main.hydra_main._hydra_main"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_main.patch_hydra"], ["", "def", "hydra_main", "(", "\n", "callback", ":", "Callable", "[", "[", "DictConfig", "]", ",", "NoReturn", "]", ",", "\n", "config_name", ":", "str", "=", "'config'", ",", "\n", "# config search path", "\n", "search_dir_main", ":", "str", "=", "EXP_CONFIG_DIR", ",", "\n", "search_dirs_prepend", ":", "Optional", "[", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "]", "=", "None", ",", "\n", "search_dirs_append", ":", "Optional", "[", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "]", "=", "None", ",", "\n", "# logging", "\n", "log_level", ":", "Optional", "[", "int", "]", "=", "logging", ".", "INFO", ",", "\n", "log_exc_info_callback", ":", "bool", "=", "True", ",", "\n", "log_exc_info_hydra", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "# manually set log level before hydra initialises!", "\n", "    ", "if", "log_level", "is", "not", "None", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "log_level", ")", "\n", "\n", "# Patch Hydra and OmegaConf:", "\n", "", "patch_hydra", "(", "search_dir_main", "=", "search_dir_main", ",", "search_dirs_prepend", "=", "search_dirs_prepend", ",", "search_dirs_append", "=", "search_dirs_append", ")", "\n", "\n", "@", "hydra", ".", "main", "(", "config_path", "=", "None", ",", "config_name", "=", "config_name", ")", "\n", "def", "_hydra_main", "(", "cfg", ":", "DictConfig", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "callback", "(", "cfg", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "log_error_and_exit", "(", "err_type", "=", "'experiment error'", ",", "err_msg", "=", "str", "(", "e", ")", ",", "exc_info", "=", "log_exc_info_callback", ")", "\n", "", "except", ":", "\n", "            ", "log_error_and_exit", "(", "err_type", "=", "'experiment error'", ",", "err_msg", "=", "'<UNKNOWN>'", ",", "exc_info", "=", "log_exc_info_callback", ")", "\n", "\n", "", "", "try", ":", "\n", "        ", "_hydra_main", "(", ")", "\n", "", "except", "KeyboardInterrupt", "as", "e", ":", "\n", "        ", "log_error_and_exit", "(", "err_type", "=", "'interrupted'", ",", "err_msg", "=", "str", "(", "e", ")", ",", "exc_info", "=", "False", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "log_error_and_exit", "(", "err_type", "=", "'hydra error'", ",", "err_msg", "=", "str", "(", "e", ")", ",", "exc_info", "=", "log_exc_info_hydra", ")", "\n", "", "except", ":", "\n", "        ", "log_error_and_exit", "(", "err_type", "=", "'hydra error'", ",", "err_msg", "=", "'<UNKNOWN>'", ",", "exc_info", "=", "log_exc_info_hydra", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils.safe_unset_debug_trainer": [[56, 60], ["None"], "function", ["None"], ["def", "safe_unset_debug_trainer", "(", ")", ":", "\n", "    ", "global", "_PL_TRAINER", "\n", "if", "_PL_TRAINER", "is", "not", "None", ":", "\n", "        ", "_PL_TRAINER", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils.set_debug_trainer": [[62, 67], ["None"], "function", ["None"], ["", "", "def", "set_debug_trainer", "(", "trainer", ":", "Optional", "[", "Trainer", "]", ")", ":", "\n", "    ", "global", "_PL_TRAINER", "\n", "assert", "_PL_TRAINER", "is", "None", ",", "'debug trainer has already been set'", "\n", "_PL_TRAINER", "=", "trainer", "\n", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils._signal_handler_log_and_exit": [[69, 90], ["dict", "dict.get", "run_utils.log_error_and_exit", "_PL_TRAINER.callbacks.clear", "log.debug", "multiprocessing.current_process", "reversed", "sorted", "v.startswith", "signal.__dict__.items", "v.startswith"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get", "home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils.log_error_and_exit", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.clear"], ["", "def", "_signal_handler_log_and_exit", "(", "signal_number", ",", "frame", ")", ":", "\n", "# call in all the child processes for the best chance of clearing this...", "\n", "# remove callbacks from trainer so we aren't stuck running forever!", "\n", "# TODO: this is a hack... there must be a better way to do this... could it be a pl bug?", "\n", "#       this logic is duplicated in the framework training_step", "\n", "    ", "if", "_PL_TRAINER", "and", "_PL_TRAINER", ".", "callbacks", ":", "\n", "        ", "_PL_TRAINER", ".", "callbacks", ".", "clear", "(", ")", "\n", "\n", "# make sure that we only exit in the parent process", "\n", "", "if", "current_process", "(", ")", ".", "name", "!=", "'MainProcess'", ":", "\n", "        ", "log", ".", "debug", "(", "'Skipping signal handling for child process!'", ")", "\n", "return", "\n", "# get the signal name", "\n", "", "numbers_to_names", "=", "dict", "(", "(", "k", ",", "v", ")", "for", "v", ",", "k", "in", "reversed", "(", "sorted", "(", "signal", ".", "__dict__", ".", "items", "(", ")", ")", ")", "if", "v", ".", "startswith", "(", "'SIG'", ")", "and", "not", "v", ".", "startswith", "(", "'SIG_'", ")", ")", "\n", "signal_name", "=", "numbers_to_names", ".", "get", "(", "signal_number", ",", "signal_number", ")", "\n", "# log everything!", "\n", "log_error_and_exit", "(", "\n", "err_type", "=", "f'received exit signal'", ",", "\n", "err_msg", "=", "f'{signal_name}'", ",", "\n", "exit_code", "=", "signal_number", ",", "\n", "exc_info", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils.safe_unset_debug_logger": [[93, 103], ["_PL_SIGNALS_OLD_HANDLERS.pop", "signal.signal"], "function", ["None"], ["", "def", "safe_unset_debug_logger", "(", ")", ":", "\n", "    ", "global", "_PL_LOGGER", "\n", "# unset logger", "\n", "if", "_PL_LOGGER", "is", "not", "None", ":", "\n", "        ", "_PL_LOGGER", "=", "None", "\n", "# return control to original handlers", "\n", "for", "signal_type", "in", "_PL_SIGNALS", ":", "\n", "            ", "if", "signal_type", "in", "_PL_SIGNALS_OLD_HANDLERS", ":", "\n", "                ", "handler", "=", "_PL_SIGNALS_OLD_HANDLERS", ".", "pop", "(", "signal_type", ")", "\n", "signal", ".", "signal", "(", "signal_type", ",", "handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils.set_debug_logger": [[105, 124], ["_PL_LOGGER.log_metrics", "signal.getsignal", "signal.signal"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.log_metrics"], ["", "", "", "", "def", "set_debug_logger", "(", "logger", ":", "Optional", "[", "LoggerCollection", "]", ")", ":", "\n", "    ", "global", "_PL_LOGGER", "\n", "assert", "_PL_LOGGER", "is", "None", ",", "'debug logger has already been set'", "\n", "_PL_LOGGER", "=", "logger", "\n", "# set initial messages", "\n", "if", "_PL_LOGGER", "is", "not", "None", ":", "\n", "        ", "_PL_LOGGER", ".", "log_metrics", "(", "{", "\n", "'error_type'", ":", "'N/A'", ",", "\n", "'error_msg'", ":", "'N/A'", ",", "\n", "'error_occurred'", ":", "False", ",", "\n", "}", ")", "\n", "# register signal listeners", "\n", "", "for", "signal_type", "in", "_PL_SIGNALS", ":", "\n", "# save the old handler", "\n", "        ", "_PL_SIGNALS_OLD_HANDLERS", "[", "signal_type", "]", "=", "signal", ".", "getsignal", "(", "signal_type", ")", "\n", "# update the handler", "\n", "signal", ".", "signal", "(", "signal_type", ",", "_signal_handler_log_and_exit", ")", "\n", "# return the logger", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils.log_error_and_exit": [[126, 148], ["log.error", "sys.exit", "_PL_LOGGER.log_metrics", "disent.util.lightning.logger_util.wb_yield_loggers", "len", "wb_logger.experiment._get_run_url", "wb_logger.experiment._get_project_url", "log.error", "log.error", "wb_logger.experiment.finish"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.log_metrics", "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_yield_loggers"], ["", "def", "log_error_and_exit", "(", "err_type", ":", "str", ",", "err_msg", ":", "str", ",", "exit_code", ":", "int", "=", "1", ",", "exc_info", "=", "True", ")", ":", "\n", "# truncate error", "\n", "    ", "err_msg", "=", "err_msg", "[", ":", "244", "]", "+", "' <TRUNCATED>'", "if", "len", "(", "err_msg", ")", ">", "244", "else", "err_msg", "\n", "# log something at least", "\n", "log", ".", "error", "(", "f'exiting: {err_type} | {err_msg}'", ",", "exc_info", "=", "exc_info", ")", "\n", "# try log to pytorch lightning & wandb", "\n", "if", "_PL_LOGGER", "is", "not", "None", ":", "\n", "        ", "_PL_LOGGER", ".", "log_metrics", "(", "{", "\n", "'error_type'", ":", "err_type", ",", "\n", "'error_msg'", ":", "err_msg", ",", "\n", "'error_occurred'", ":", "True", ",", "\n", "}", ")", "\n", "for", "wb_logger", "in", "wb_yield_loggers", "(", "_PL_LOGGER", ")", ":", "\n", "# so I dont have to scroll up... I'm lazy...", "\n", "            ", "run_url", "=", "wb_logger", ".", "experiment", ".", "_get_run_url", "(", ")", "\n", "project_url", "=", "wb_logger", ".", "experiment", ".", "_get_project_url", "(", ")", "\n", "log", ".", "error", "(", "f'wandb: run url: {run_url if run_url else \"N/A\"}'", ")", "\n", "log", ".", "error", "(", "f'wandb: project url: {project_url if run_url else \"N/A\"}'", ")", "\n", "# make sure we log everything online!", "\n", "wb_logger", ".", "experiment", ".", "finish", "(", "exit_code", "=", "exit_code", ")", "\n", "# EXIT!", "\n", "", "", "sys", ".", "exit", "(", "exit_code", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_data.HydraDataModule.__init__": [[87, 125], ["pytorch_lightning.LightningDataModule.__init__", "hydra_data.HydraDataModule.save_hyperparameters", "hydra.utils.instantiate", "hydra.utils.instantiate", "callable", "callable", "disent.dataset.transform.DisentDatasetTransform", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data", ":", "Dict", "[", "str", ",", "Any", "]", ",", "# = dataset.data", "\n", "sampler", ":", "Dict", "[", "str", ",", "Any", "]", ",", "# = sampling._sampler_.sampler_cls", "\n", "transform", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "# = dataset.transform", "\n", "augment", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "# = augment.augment_cls", "\n", "dataloader_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "# = dataloader", "\n", "augment_on_gpu", ":", "bool", "=", "False", ",", "# = dsettings.dataset.gpu_augment", "\n", "using_cuda", ":", "Optional", "[", "bool", "]", "=", "False", ",", "# = self.hparams.dsettings.trainer.cuda", "\n", "prepare_data_per_node", ":", "bool", "=", "True", ",", "# DataHooks.prepare_data_per_node", "\n", "return_indices", ":", "bool", "=", "False", ",", "# = framework.meta.requires_indices", "\n", "return_factors", ":", "bool", "=", "False", ",", "# = framework.meta.requires_factors", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# OVERRIDE:", "\n", "self", ".", "prepare_data_per_node", "=", "prepare_data_per_node", "\n", "# save hparams", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "# ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #", "\n", "# transform: prepares data from datasets", "\n", "self", ".", "data_transform", "=", "hydra", ".", "utils", ".", "instantiate", "(", "transform", ")", "\n", "assert", "(", "self", ".", "data_transform", "is", "None", ")", "or", "callable", "(", "self", ".", "data_transform", ")", "\n", "# input_transform_aug: augment data for inputs, then apply input_transform", "\n", "self", ".", "input_transform", "=", "hydra", ".", "utils", ".", "instantiate", "(", "augment", ")", "\n", "assert", "(", "self", ".", "input_transform", "is", "None", ")", "or", "callable", "(", "self", ".", "input_transform", ")", "# should be: `Callable[[torch.Tensor], torch.Tensor]`", "\n", "# ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #", "\n", "# batch_augment: augments transformed data for inputs, should be applied across a batch", "\n", "# which version of the dataset we need to use if GPU augmentation is enabled or not.", "\n", "# - corresponds to below in train_dataloader()", "\n", "if", "augment_on_gpu", ":", "\n", "            ", "self", ".", "_gpu_batch_augment", "=", "DisentDatasetTransform", "(", "transform", "=", "self", ".", "input_transform", ")", "\n", "warnings", ".", "warn", "(", "'`augment_on_gpu=True` is outdated and may no longer be equivalent to `augment_on_gpu=False`'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_gpu_batch_augment", "=", "None", "\n", "# ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #", "\n", "# datasets initialised in setup()", "\n", "", "self", ".", "dataset_train_noaug", ":", "DisentDataset", "=", "None", "\n", "self", ".", "dataset_train_aug", ":", "DisentDataset", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_data.HydraDataModule.gpu_batch_augment": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "gpu_batch_augment", "(", "self", ")", "->", "Optional", "[", "DisentDatasetTransform", "]", ":", "\n", "        ", "return", "self", ".", "_gpu_batch_augment", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_data.HydraDataModule.prepare_data": [[130, 143], ["dict", "log.info", "hydra.utils.instantiate"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", "->", "None", ":", "\n", "# *NB* Do not set model parameters here.", "\n", "# - Instantiate data once to download and prepare if needed.", "\n", "# - trainer.prepare_data_per_node affects this functions behavior per node.", "\n", "        ", "data", "=", "dict", "(", "self", ".", "hparams", ".", "data", ")", "\n", "if", "'in_memory'", "in", "data", ":", "\n", "            ", "del", "data", "[", "'in_memory'", "]", "\n", "# create the data", "\n", "# - we instantiate the data twice, once here and once in setup otherwise", "\n", "#   things could go wrong. We try be efficient about it by removing the", "\n", "#   in_memory argument if it exists.", "\n", "", "log", ".", "info", "(", "f'Data - Preparation & Downloading'", ")", "\n", "hydra", ".", "utils", ".", "instantiate", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_data.HydraDataModule.setup": [[144, 152], ["log.info", "hydra.utils.instantiate", "disent.dataset.DisentDataset", "disent.dataset.DisentDataset", "hydra.utils.instantiate", "hydra.utils.instantiate"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "stage", "=", "None", ")", "->", "None", ":", "\n", "# ground truth data", "\n", "        ", "log", ".", "info", "(", "f'Data - Instance'", ")", "\n", "data", "=", "hydra", ".", "utils", ".", "instantiate", "(", "self", ".", "hparams", ".", "data", ")", "\n", "# Wrap the data for the framework some datasets need triplets, pairs, etc.", "\n", "# Augmentation is done inside the frameworks so that it can be done on the GPU, otherwise things are very slow.", "\n", "self", ".", "dataset_train_noaug", "=", "DisentDataset", "(", "data", ",", "hydra", ".", "utils", ".", "instantiate", "(", "self", ".", "hparams", ".", "sampler", ")", ",", "transform", "=", "self", ".", "data_transform", ",", "augment", "=", "None", ",", "return_indices", "=", "self", ".", "hparams", ".", "return_indices", ",", "return_factors", "=", "self", ".", "hparams", ".", "return_factors", ")", "\n", "self", ".", "dataset_train_aug", "=", "DisentDataset", "(", "data", ",", "hydra", ".", "utils", ".", "instantiate", "(", "self", ".", "hparams", ".", "sampler", ")", ",", "transform", "=", "self", ".", "data_transform", ",", "augment", "=", "self", ".", "input_transform", ",", "return_indices", "=", "self", ".", "hparams", ".", "return_indices", ",", "return_factors", "=", "self", ".", "hparams", ".", "return_factors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_data.HydraDataModule.train_dataloader": [[166, 194], ["torch.utils.data.DataLoader", "KeyError", "sorted", "kwargs.keys"], "methods", ["None"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Training Dataset: Sample of data used to fit the model.\n        \"\"\"", "\n", "# Select which version of the dataset we need to use if GPU augmentation is enabled or not.", "\n", "# - corresponds to above in __init__()", "\n", "if", "self", ".", "hparams", ".", "augment_on_gpu", ":", "\n", "            ", "dataset", "=", "self", ".", "dataset_train_noaug", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "self", ".", "dataset_train_aug", "\n", "# ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #", "\n", "# get default kwargs", "\n", "", "default_kwargs", "=", "{", "\n", "'shuffle'", ":", "True", ",", "\n", "# This should usually be TRUE if cuda is enabled.", "\n", "# About 20% faster with the xysquares dataset, RTX 2060 Rev. A, and Intel i7-3930K", "\n", "'pin_memory'", ":", "self", ".", "hparams", ".", "using_cuda", ",", "\n", "}", "\n", "# get config kwargs", "\n", "kwargs", "=", "self", ".", "hparams", ".", "dataloader_kwargs", "\n", "if", "not", "kwargs", ":", "\n", "            ", "kwargs", "=", "{", "}", "\n", "# check required keys", "\n", "", "if", "(", "'batch_size'", "not", "in", "kwargs", ")", "or", "(", "'num_workers'", "not", "in", "kwargs", ")", ":", "\n", "            ", "raise", "KeyError", "(", "f'`dataset.dataloader` must contain keys: [\"batch_size\", \"num_workers\"], got: {sorted(kwargs.keys())}'", ")", "\n", "# ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #", "\n", "# create dataloader", "\n", "", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "**", "{", "**", "default_kwargs", ",", "**", "kwargs", "}", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_utils.make_non_strict": [[46, 52], ["copy.deepcopy", "omegaconf.OmegaConf.create"], "function", ["None"], ["def", "make_non_strict", "(", "cfg", ":", "DictConfig", ")", ":", "\n", "    ", "\"\"\"\n    Convert the config into a mutable version.\n    \"\"\"", "\n", "cfg", "=", "deepcopy", "(", "cfg", ")", "\n", "return", "OmegaConf", ".", "create", "(", "{", "**", "cfg", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.path_utils.get_max_experiment_number": [[46, 81], ["os.listdir", "os.path.exists", "FileNotFoundError", "_EXPERIMENT_RGX.search", "_EXPERIMENT_RGX.search.groups", "int", "os.path.isdir", "NotADirectoryError", "os.path.isdir", "os.path.join", "repr", "repr", "os.path.abspath", "repr", "repr", "os.path.abspath"], "function", ["None"], ["def", "get_max_experiment_number", "(", "root_dir", ":", "str", ",", "return_path", ":", "bool", "=", "False", ")", "->", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "Optional", "[", "str", "]", "]", "]", ":", "\n", "    ", "\"\"\"\n    Get the next experiment number in the specified directory. Experiment directories\n    all start with a numerical value.\n    - eg. \"1\", \"00002\", \"3_name\", \"00042_name\" are all valid subdirectories.\n    - eg. \"name\", \"name_1\", \"name_00001\", \"99999_image.png\" are all invalid and are\n          ignored. Either their name format is wrong or they are a file.\n\n    If all the above directories are all used as an example, then this function will\n    return the value 42 corresponding to \"00042_name\"\n    \"\"\"", "\n", "# check the dirs exist", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root_dir", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "f'The given experiments directory does not exist: {repr(root_dir)} ({repr(os.path.abspath(root_dir))})'", ")", "\n", "", "elif", "not", "os", ".", "path", ".", "isdir", "(", "root_dir", ")", ":", "\n", "        ", "raise", "NotADirectoryError", "(", "f'The given experiments path exists, but is not a directory: {repr(root_dir)} ({repr(os.path.abspath(root_dir))})'", ")", "\n", "# linear search over each file in the dir", "\n", "", "max_num", ",", "max_path", "=", "0", ",", "None", "\n", "for", "file", "in", "os", ".", "listdir", "(", "root_dir", ")", ":", "\n", "# skip if not a directory", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "file", ")", ")", ":", "\n", "            ", "continue", "\n", "# skip if the file name does not match", "\n", "", "match", "=", "_EXPERIMENT_RGX", ".", "search", "(", "file", ")", "\n", "if", "not", "match", ":", "\n", "            ", "continue", "\n", "# update the maximum number", "\n", "", "num", ",", "_", "=", "match", ".", "groups", "(", ")", "\n", "num", "=", "int", "(", "num", ")", "\n", "if", "num", ">", "max_num", ":", "\n", "            ", "max_num", ",", "max_path", "=", "num", ",", "file", "\n", "# done!", "\n", "", "", "if", "return_path", ":", "\n", "        ", "return", "max_num", ",", "max_path", "\n", "", "return", "max_num", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.path_utils.get_current_experiment_number": [[87, 101], ["path_utils.get_max_experiment_number"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.path_utils.get_max_experiment_number"], ["def", "get_current_experiment_number", "(", "root_dir", ":", "str", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Get the next experiment number from the experiment directory, and cache\n    the result for future calls of this function for the current instance of the program.\n    - The next time the program is run, this value will differ.\n\n    For example, if the `root_dir` contains the directories: \"00001_name\", \"00041\", then\n    this function will return the next value which is `42` on all subsequent calls, even\n    if a directory for experiment 42 is created during the current program's lifetime.\n    \"\"\"", "\n", "global", "_CURRENT_EXPERIMENT_NUM", "\n", "if", "_CURRENT_EXPERIMENT_NUM", "is", "None", ":", "\n", "        ", "_CURRENT_EXPERIMENT_NUM", "=", "get_max_experiment_number", "(", "root_dir", ",", "return_path", "=", "False", ")", "+", "1", "\n", "", "return", "_CURRENT_EXPERIMENT_NUM", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.path_utils.get_current_experiment_dir": [[103, 126], ["path_utils.get_current_experiment_number", "os.path.abspath", "os.path.join", "RuntimeError", "pathlib.Path", "repr", "repr", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.path_utils.get_current_experiment_number"], ["", "def", "get_current_experiment_dir", "(", "root_dir", ":", "str", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Like `get_current_experiment_number` which computes the next experiment number, this\n    function computes the next experiment path, which appends a name to the computed number.\n\n    The result is cached for the lifetime of the program, however, on subsequent calls of\n    this function, the computed name must always match the original value otherwise an\n    error is thrown! This is to prevent experiments with duplicate numbers from being created!\n    \"\"\"", "\n", "if", "name", "is", "not", "None", ":", "\n", "        ", "assert", "Path", "(", "name", ")", ".", "name", "==", "name", ",", "f'The given name is not valid: {repr(name)}'", "\n", "# make the dirname & normalise the path", "\n", "", "num", "=", "get_current_experiment_number", "(", "root_dir", ")", "\n", "dir_name", "=", "f'{num:05d}{_EXPERIMENT_SEP}{name}'", "if", "name", "else", "f'{num:05d}'", "\n", "exp_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "dir_name", ")", ")", "\n", "# cache the experiment name or check against the existing cache", "\n", "global", "_CURRENT_EXPERIMENT_DIR", "\n", "if", "_CURRENT_EXPERIMENT_DIR", "is", "None", ":", "\n", "        ", "_CURRENT_EXPERIMENT_DIR", "=", "exp_dir", "\n", "", "if", "exp_dir", "!=", "_CURRENT_EXPERIMENT_DIR", ":", "\n", "        ", "raise", "RuntimeError", "(", "f'Current experiment directory has already been set: {repr(_CURRENT_EXPERIMENT_DIR)} This does not match what was computed: {repr(exp_dir)}'", ")", "\n", "# done!", "\n", "", "return", "_CURRENT_EXPERIMENT_DIR", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.path_utils.make_current_experiment_dir": [[128, 146], ["os.path.abspath", "path_utils.get_current_experiment_dir", "os.path.exists", "log.info", "os.makedirs", "os.path.exists", "log.info", "os.makedirs", "repr", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.path_utils.get_current_experiment_dir"], ["", "def", "make_current_experiment_dir", "(", "root_dir", ":", "str", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Like `get_current_experiment_dir`, but create any of the directories if needed.\n    - Both the `root_dir` and the computed subdir for the current experiment will be created.\n    \"\"\"", "\n", "root_dir", "=", "os", ".", "path", ".", "abspath", "(", "root_dir", ")", "\n", "# make the root directory if it does not exist!", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root_dir", ")", ":", "\n", "        ", "log", ".", "info", "(", "f'root experiments directory does not exist, creating... {repr(root_dir)}'", ")", "\n", "os", ".", "makedirs", "(", "root_dir", ",", "exist_ok", "=", "True", ")", "\n", "# get the current dir", "\n", "", "current_dir", "=", "get_current_experiment_dir", "(", "root_dir", ",", "name", ")", "\n", "# make the current dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "current_dir", ")", ":", "\n", "        ", "log", ".", "info", "(", "f'current experiment directory does not exist, creating... {repr(current_dir)}'", ")", "\n", "os", ".", "makedirs", "(", "current_dir", ",", "exist_ok", "=", "True", ")", "\n", "# done!", "\n", "", "return", "current_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFile.__init__": [[57, 59], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", ":", "str", ")", ":", "\n", "        ", "self", ".", "_file_name", "=", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFile.out_name": [[60, 64], ["None"], "methods", ["None"], ["", "@", "final", "\n", "@", "property", "\n", "def", "out_name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFile.prepare": [[65, 68], ["None"], "methods", ["None"], ["", "def", "prepare", "(", "self", ",", "out_dir", ":", "str", ")", "->", "str", ":", "\n", "# TODO: maybe check that the file exists or not and raise a FileNotFoundError?", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFile.__repr__": [[69, 71], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}(out_name={repr(self.out_name)})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.__init__": [[81, 92], ["datafile.DataFile.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "file_name", ":", "str", ",", "\n", "file_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "hash_type", ":", "str", "=", "'md5'", ",", "\n", "hash_mode", ":", "str", "=", "'fast'", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "file_name", "=", "file_name", ")", "\n", "self", ".", "_file_hash", "=", "file_hash", "\n", "self", ".", "_hash_type", "=", "hash_type", "\n", "self", ".", "_hash_mode", "=", "hash_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.prepare": [[93, 98], ["disent.util.inout.cache.stalefile", "datafile.DataFileHashed.prepare.wrapped"], "methods", ["None"], ["", "def", "prepare", "(", "self", ",", "out_dir", ":", "str", ")", "->", "str", ":", "\n", "        ", "@", "stalefile", "(", "file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "self", ".", "_file_name", ")", ",", "hash", "=", "self", ".", "_file_hash", ",", "hash_type", "=", "self", ".", "_hash_type", ",", "hash_mode", "=", "self", ".", "_hash_mode", ")", "\n", "def", "wrapped", "(", "out_file", ")", ":", "\n", "            ", "self", ".", "_prepare", "(", "out_dir", "=", "out_dir", ",", "out_file", "=", "out_file", ")", "\n", "", "return", "wrapped", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed._prepare": [[99, 102], ["None"], "methods", ["None"], ["", "def", "_prepare", "(", "self", ",", "out_dir", ":", "str", ",", "out_file", ":", "str", ")", "->", "NoReturn", ":", "\n", "# TODO: maybe raise a FileNotFoundError or a HashError instead?", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashedDl.__init__": [[111, 126], ["datafile.DataFileHashed.__init__", "disent.util.inout.paths.filename_from_url"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.filename_from_url"], ["def", "__init__", "(", "\n", "self", ",", "\n", "uri", ":", "str", ",", "\n", "uri_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "uri_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "hash_type", ":", "str", "=", "'md5'", ",", "\n", "hash_mode", ":", "str", "=", "'fast'", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "file_name", "=", "filename_from_url", "(", "uri", ")", "if", "(", "uri_name", "is", "None", ")", "else", "uri_name", ",", "\n", "file_hash", "=", "uri_hash", ",", "\n", "hash_type", "=", "hash_type", ",", "\n", "hash_mode", "=", "hash_mode", "\n", ")", "\n", "self", ".", "_uri", "=", "uri", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashedDl._prepare": [[127, 129], ["disent.util.inout.files.retrieve_file"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.files.retrieve_file"], ["", "def", "_prepare", "(", "self", ",", "out_dir", ":", "str", ",", "out_file", ":", "str", ")", ":", "\n", "        ", "retrieve_file", "(", "src_uri", "=", "self", ".", "_uri", ",", "dst_path", "=", "out_file", ",", "overwrite_existing", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashedDl.__repr__": [[130, 132], ["repr", "repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}(uri={repr(self._uri)}, out_name={repr(self.out_name)})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashedDlGen.__init__": [[140, 165], ["datafile.DataFileHashedDl", "datafile.DataFileHashed.__init__", "disent.util.inout.paths.modify_file_name"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.modify_file_name"], ["def", "__init__", "(", "\n", "self", ",", "\n", "# download & save files", "\n", "uri", ":", "str", ",", "\n", "uri_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "file_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "# save paths", "\n", "uri_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "file_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "# hash settings", "\n", "hash_type", ":", "str", "=", "'md5'", ",", "\n", "hash_mode", ":", "str", "=", "'fast'", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_dl_obj", "=", "DataFileHashedDl", "(", "\n", "uri", "=", "uri", ",", "\n", "uri_hash", "=", "uri_hash", ",", "\n", "uri_name", "=", "uri_name", ",", "\n", "hash_type", "=", "hash_type", ",", "\n", "hash_mode", "=", "hash_mode", ",", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "file_name", "=", "modify_file_name", "(", "self", ".", "_dl_obj", ".", "out_name", ",", "prefix", "=", "'gen'", ")", "if", "(", "file_name", "is", "None", ")", "else", "file_name", ",", "\n", "file_hash", "=", "file_hash", ",", "\n", "hash_type", "=", "hash_type", ",", "\n", "hash_mode", "=", "hash_mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashedDlGen._prepare": [[167, 170], ["datafile.DataFileHashedDlGen._dl_obj.prepare", "datafile.DataFileHashedDlGen._generate"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.prepare", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__cars3d.DataFileCars3d._generate"], ["", "def", "_prepare", "(", "self", ",", "out_dir", ":", "str", ",", "out_file", ":", "str", ")", ":", "\n", "        ", "inp_file", "=", "self", ".", "_dl_obj", ".", "prepare", "(", "out_dir", "=", "out_dir", ")", "\n", "self", ".", "_generate", "(", "inp_file", "=", "inp_file", ",", "out_file", "=", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashedDlGen._generate": [[171, 173], ["None"], "methods", ["None"], ["", "def", "_generate", "(", "self", ",", "inp_file", ":", "str", ",", "out_file", ":", "str", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashedDlGen.__repr__": [[174, 176], ["repr", "repr", "repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}(uri={repr(self._dl_obj._uri)}, uri_name={repr(self._dl_obj.out_name)}, out_name={repr(self.out_name)})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashedDlH5.__init__": [[183, 225], ["datafile.DataFileHashedDlGen.__init__", "disent.util.function.wrapped_partial"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial"], ["def", "__init__", "(", "\n", "self", ",", "\n", "# download & save files", "\n", "uri", ":", "str", ",", "\n", "uri_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "file_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "# h5 re-save settings", "\n", "hdf5_dataset_name", ":", "str", ",", "\n", "hdf5_chunk_size", ":", "Tuple", "[", "int", ",", "...", "]", ",", "\n", "hdf5_compression", ":", "Optional", "[", "str", "]", "=", "'gzip'", ",", "\n", "hdf5_compression_lvl", ":", "Optional", "[", "int", "]", "=", "4", ",", "\n", "hdf5_dtype", ":", "Optional", "[", "Union", "[", "np", ".", "dtype", ",", "str", "]", "]", "=", "None", ",", "\n", "hdf5_mutator", ":", "Optional", "[", "Callable", "[", "[", "np", ".", "ndarray", "]", ",", "np", ".", "ndarray", "]", "]", "=", "None", ",", "\n", "hdf5_obs_shape", ":", "Optional", "[", "Sequence", "[", "int", "]", "]", "=", "None", ",", "\n", "# save paths", "\n", "uri_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "file_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "# hash settings", "\n", "hash_type", ":", "str", "=", "'md5'", ",", "\n", "hash_mode", ":", "str", "=", "'fast'", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "file_name", "=", "file_name", ",", "\n", "file_hash", "=", "file_hash", ",", "\n", "uri", "=", "uri", ",", "\n", "uri_hash", "=", "uri_hash", ",", "\n", "uri_name", "=", "uri_name", ",", "\n", "hash_type", "=", "hash_type", ",", "\n", "hash_mode", "=", "hash_mode", ",", "\n", ")", "\n", "self", ".", "_hdf5_resave_file", "=", "wrapped_partial", "(", "\n", "hdf5_resave_file", ",", "\n", "dataset_name", "=", "hdf5_dataset_name", ",", "\n", "chunk_size", "=", "hdf5_chunk_size", ",", "\n", "compression", "=", "hdf5_compression", ",", "\n", "compression_lvl", "=", "hdf5_compression_lvl", ",", "\n", "out_dtype", "=", "hdf5_dtype", ",", "\n", "out_mutator", "=", "hdf5_mutator", ",", "\n", "obs_shape", "=", "hdf5_obs_shape", ",", "\n", ")", "\n", "# save the dataset name", "\n", "self", ".", "_dataset_name", "=", "hdf5_dataset_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashedDlH5.dataset_name": [[226, 229], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset_name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_dataset_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashedDlH5._generate": [[230, 232], ["datafile.DataFileHashedDlH5._hdf5_resave_file"], "methods", ["None"], ["", "def", "_generate", "(", "self", ",", "inp_file", ":", "str", ",", "out_file", ":", "str", ")", ":", "\n", "        ", "self", ".", "_hdf5_resave_file", "(", "inp_path", "=", "inp_file", ",", "out_path", "=", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.stats.compute_data_mean_std": [[38, 78], ["torch.no_grad", "min", "torch.utils.data.DataLoader", "torch.mean", "torch.mean", "os.cpu_count", "tqdm", "isinstance", "batch.to.to", "img_means.append", "img_stds.append", "torch.cat", "torch.cat", "torch.mean.numpy", "torch.mean.numpy", "torch.mean", "torch.std", "type", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "compute_data_mean_std", "(", "\n", "data", ",", "\n", "batch_size", ":", "int", "=", "256", ",", "\n", "num_workers", ":", "int", "=", "min", "(", "os", ".", "cpu_count", "(", ")", ",", "16", ")", ",", "\n", "progress", ":", "bool", "=", "False", ",", "\n", "chn_is_last", ":", "bool", "=", "False", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Input data when collected using a DataLoader should return\n    `torch.Tensor`s, output mean and std are an `np.ndarray`s\n    \"\"\"", "\n", "loader", "=", "DataLoader", "(", "\n", "data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "if", "progress", ":", "\n", "        ", "from", "tqdm", "import", "tqdm", "\n", "loader", "=", "tqdm", "(", "loader", ",", "desc", "=", "f'{data.__class__.__name__} stats'", ",", "total", "=", "(", "len", "(", "data", ")", "+", "batch_size", "-", "1", ")", "//", "batch_size", ")", "\n", "# reduction dims", "\n", "", "dims", "=", "(", "1", ",", "2", ")", "if", "chn_is_last", "else", "(", "2", ",", "3", ")", "\n", "# collect obs means & stds", "\n", "img_means", ",", "img_stds", "=", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "loader", ":", "\n", "        ", "assert", "isinstance", "(", "batch", ",", "torch", ".", "Tensor", ")", ",", "f'batch must be an instance of torch.Tensor, got: {type(batch)}'", "\n", "assert", "batch", ".", "ndim", "==", "4", ",", "f'batch shape must be: (B, C, H, W), got: {tuple(batch.shape)}'", "\n", "batch", "=", "batch", ".", "to", "(", "torch", ".", "float64", ")", "\n", "img_means", ".", "append", "(", "torch", ".", "mean", "(", "batch", ",", "dim", "=", "dims", ")", ")", "\n", "img_stds", ".", "append", "(", "torch", ".", "std", "(", "batch", ",", "dim", "=", "dims", ")", ")", "\n", "# aggregate obs means & stds", "\n", "", "mean", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "img_means", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "std", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "img_stds", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "# checks!", "\n", "assert", "mean", ".", "ndim", "==", "1", "\n", "assert", "std", ".", "ndim", "==", "1", "\n", "# done!", "\n", "return", "mean", ".", "numpy", "(", ")", ",", "std", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.__init__": [[57, 76], ["disent.util.iters.LengthIter.__init__", "numpy.array", "state_space._dims_multipliers", "int", "ValueError", "len", "ValueError", "numpy.prod", "tuple", "tuple", "len", "len", "ValueError", "range", "tuple"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space._dims_multipliers"], ["def", "__init__", "(", "self", ",", "factor_sizes", ":", "Sequence", "[", "int", "]", ",", "factor_names", ":", "Optional", "[", "Sequence", "[", "str", "]", "]", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# dimension: [read only]", "\n", "self", ".", "__factor_sizes", "=", "np", ".", "array", "(", "factor_sizes", ")", "\n", "self", ".", "__factor_sizes", ".", "flags", ".", "writeable", "=", "False", "\n", "# checks", "\n", "if", "self", ".", "__factor_sizes", ".", "ndim", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "f'`factor_sizes` must be an array with only one dimension, got shape: {self.__factor_sizes.shape}'", ")", "\n", "", "if", "len", "(", "self", ".", "__factor_sizes", ")", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f'`factor_sizes` must be non-empty, got shape: {self.__factor_sizes.shape}'", ")", "\n", "# multipliers: [read only]", "\n", "", "self", ".", "__factor_multipliers", "=", "_dims_multipliers", "(", "self", ".", "__factor_sizes", ")", "\n", "self", ".", "__factor_multipliers", ".", "flags", ".", "writeable", "=", "False", "\n", "# total permutations", "\n", "self", ".", "__size", "=", "int", "(", "np", ".", "prod", "(", "factor_sizes", ")", ")", "\n", "# factor names", "\n", "self", ".", "__factor_names", "=", "tuple", "(", "f'f{i}'", "for", "i", "in", "range", "(", "self", ".", "num_factors", ")", ")", "if", "(", "factor_names", "is", "None", ")", "else", "tuple", "(", "factor_names", ")", "\n", "if", "len", "(", "self", ".", "__factor_names", ")", "!=", "len", "(", "self", ".", "__factor_sizes", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Dimensionality mismatch of factor_names and factor_sizes: len({self.__factor_names}) != len({tuple(self.__factor_sizes)})'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.__len__": [[77, 80], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Same as self.size\"\"\"", "\n", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.__getitem__": [[81, 84], ["state_space.StateSpace.idx_to_pos"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Data returned based on the idx\"\"\"", "\n", "return", "self", ".", "idx_to_pos", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.size": [[89, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"The number of permutations of factors handled by this state space\"\"\"", "\n", "return", "self", ".", "__size", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.num_factors": [[94, 98], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_factors", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"The number of factors handled by this state space\"\"\"", "\n", "return", "len", "(", "self", ".", "__factor_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.factor_sizes": [[99, 103], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_sizes", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"A list of sizes or dimensionality of factors handled by this state space\"\"\"", "\n", "return", "self", ".", "__factor_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.factor_names": [[104, 108], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_names", "(", "self", ")", "->", "Tuple", "[", "str", ",", "...", "]", ":", "\n", "        ", "\"\"\"A list of names of factors handled by this state space\"\"\"", "\n", "return", "self", ".", "__factor_names", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.factor_multipliers": [[109, 123], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_multipliers", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        The cumulative product of the factor_sizes used to convert indices to positions, and positions to indices.\n        - The highest values is at the front, the lowest is at the end always being 1.\n        - The size of this vector is: num_factors + 1\n\n        Formulas:\n            * Use broadcasting to get positions:\n                pos = (idx[..., None] % muls[:-1]) // muls[1:]\n            * Use broadcasting to get indices\n                idx = np.sum(pos * muls[1:], axis=-1)\n        \"\"\"", "\n", "return", "self", ".", "__factor_multipliers", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idx": [[128, 142], ["isinstance", "isinstance", "int", "state_space.StateSpace.factor_names.index", "KeyError", "repr"], "methods", ["None"], ["", "def", "normalise_factor_idx", "(", "self", ",", "factor", ":", "NonNormalisedFactorIdx", ")", "->", "int", ":", "\n", "# convert a factor name to the factor id", "\n", "        ", "if", "isinstance", "(", "factor", ",", "str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "f_idx", "=", "self", ".", "factor_names", ".", "index", "(", "factor", ")", "\n", "", "except", ":", "\n", "                ", "raise", "KeyError", "(", "f'invalid factor name: {repr(factor)} must be one of: {self.factor_names}'", ")", "\n", "", "", "else", ":", "\n", "            ", "f_idx", "=", "int", "(", "factor", ")", "\n", "# check that the values are correct", "\n", "", "assert", "isinstance", "(", "f_idx", ",", "int", ")", "\n", "assert", "0", "<=", "f_idx", "<", "self", ".", "num_factors", "\n", "# return the resulting values", "\n", "return", "f_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs": [[143, 155], ["isinstance", "numpy.array", "numpy.arange", "len", "len", "state_space.StateSpace.normalise_factor_idx", "set"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idx"], ["", "def", "normalise_factor_idxs", "(", "self", ",", "f_idxs", ":", "Optional", "[", "NonNormalisedFactorIdxs", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "# return the default list of factor indices", "\n", "        ", "if", "f_idxs", "is", "None", ":", "\n", "            ", "return", "np", ".", "arange", "(", "self", ".", "num_factors", ")", "\n", "# normalize a single factor into a list", "\n", "", "if", "isinstance", "(", "f_idxs", ",", "(", "int", ",", "str", ")", ")", ":", "\n", "            ", "f_idxs", "=", "[", "f_idxs", "]", "\n", "# convert all the factors to their indices", "\n", "", "f_idxs", "=", "np", ".", "array", "(", "[", "self", ".", "normalise_factor_idx", "(", "f_idx", ")", "for", "f_idx", "in", "f_idxs", "]", ")", "\n", "# done! make sure there are not duplicates!", "\n", "assert", "len", "(", "set", "(", "f_idxs", ")", ")", "==", "len", "(", "f_idxs", ")", ",", "'duplicate factors were found!'", "\n", "return", "f_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.invert_factor_idxs": [[156, 163], ["state_space.StateSpace.normalise_factor_idxs", "numpy.ones", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs"], ["", "def", "invert_factor_idxs", "(", "self", ",", "f_idxs", ":", "Optional", "[", "NonNormalisedFactorIdxs", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "f_idxs", "=", "self", ".", "normalise_factor_idxs", "(", "f_idxs", ")", "\n", "# create a mask of factors", "\n", "f_mask", "=", "np", ".", "ones", "(", "self", ".", "num_factors", ",", "dtype", "=", "'bool'", ")", "\n", "f_mask", "[", "f_idxs", "]", "=", "False", "\n", "# # # select the inverse factors", "\n", "return", "np", ".", "where", "(", "f_mask", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx": [[168, 178], ["numpy.moveaxis", "numpy.ravel_multi_index"], "methods", ["None"], ["", "def", "pos_to_idx", "(", "self", ",", "positions", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Convert a position to an index (or convert a list of positions to a list of indices)\n        - positions are lists of integers, with each element < their corresponding factor size\n        - indices are integers < size\n\n        TODO: can factor_multipliers be used to speed this up?\n        \"\"\"", "\n", "positions", "=", "np", ".", "moveaxis", "(", "positions", ",", "source", "=", "-", "1", ",", "destination", "=", "0", ")", "\n", "return", "np", ".", "ravel_multi_index", "(", "positions", ",", "self", ".", "__factor_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos": [[179, 189], ["numpy.array", "numpy.moveaxis", "numpy.unravel_index"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "idx_to_pos", "(", "self", ",", "indices", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Convert an index to a position (or convert a list of indices to a list of positions)\n        - indices are integers < size\n        - positions are lists of integers, with each element < their corresponding factor size\n\n        TODO: can factor_multipliers be used to speed this up?\n        \"\"\"", "\n", "positions", "=", "np", ".", "array", "(", "np", ".", "unravel_index", "(", "indices", ",", "self", ".", "__factor_sizes", ")", ")", "\n", "return", "np", ".", "moveaxis", "(", "positions", ",", "source", "=", "0", ",", "destination", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.iter_traversal_indices": [[194, 200], ["list", "state_space.StateSpace.pos_to_idx", "state_space._get_step_size", "tuple", "range"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space._get_step_size"], ["", "def", "iter_traversal_indices", "(", "self", ",", "f_idx", ":", "int", ",", "base_factors", ")", ":", "\n", "        ", "base_factors", "=", "list", "(", "base_factors", ")", "\n", "base_factors", "[", "f_idx", "]", "=", "0", "\n", "base_idx", "=", "self", ".", "pos_to_idx", "(", "base_factors", ")", "\n", "step_size", "=", "_get_step_size", "(", "tuple", "(", "self", ".", "__factor_sizes", ")", ",", "f_idx", ")", "\n", "yield", "from", "range", "(", "base_idx", ",", "base_idx", "+", "step_size", "*", "self", ".", "__factor_sizes", "[", "f_idx", "]", ",", "step_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_indices": [[205, 207], ["numpy.random.randint", "len"], "methods", ["None"], ["", "def", "sample_indices", "(", "self", ",", "size", "=", "None", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", ",", "size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors": [[208, 229], ["numpy.random.randint", "numpy.append", "numpy.array", "len", "state_space.StateSpace.normalise_factor_idxs"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs"], ["", "def", "sample_factors", "(", "self", ",", "size", "=", "None", ",", "f_idxs", ":", "Optional", "[", "NonNormalisedFactorIdxs", "]", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        sample randomly from all factors, otherwise the given factor_indices.\n        returned values must appear in the same order as factor_indices.\n\n        If factor factor_indices is None, all factors are sampled.\n        If size=None then the array returned is the same shape as (len(factor_indices),) or factor_sizes[factor_indices]\n        If size is an integer or shape, the samples returned are that shape with the last dimension\n            the same size as factor_indices, ie (*size, len(factor_indices))\n        \"\"\"", "\n", "# get factor sizes", "\n", "if", "f_idxs", "is", "None", ":", "\n", "            ", "f_sizes", "=", "self", ".", "__factor_sizes", "\n", "", "else", ":", "\n", "            ", "f_sizes", "=", "self", ".", "__factor_sizes", "[", "self", ".", "normalise_factor_idxs", "(", "f_idxs", ")", "]", "# this may be quite slow, add caching?", "\n", "# get resample size", "\n", "", "if", "size", "is", "not", "None", ":", "\n", "# empty np.array(()) gets dtype float which is incompatible with len", "\n", "            ", "size", "=", "np", ".", "append", "(", "np", ".", "array", "(", "size", ",", "dtype", "=", "int", ")", ",", "len", "(", "f_sizes", ")", ")", "\n", "# sample for factors", "\n", "", "return", "np", ".", "random", ".", "randint", "(", "0", ",", "f_sizes", ",", "size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_missing_factors": [[230, 263], ["state_space.StateSpace.normalise_factor_idxs", "state_space.StateSpace.invert_factor_idxs", "numpy.array", "numpy.empty", "state_space.StateSpace.sample_factors", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.invert_factor_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors"], ["", "def", "sample_missing_factors", "(", "self", ",", "known_factors", ":", "NonNormalisedFactors", ",", "f_idxs", ":", "NonNormalisedFactorIdxs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Samples the remaining factors not given in the known_factor_indices.\n        ie. fills in the missing values by sampling from the unused dimensions.\n        returned values are ordered by increasing factor index and not factor_indices.\n        (known_factors must correspond to known_factor_indices)\n\n        - eg. known_factors=[A], known_factor_indices=1\n              BECOMES: known_factors=[A], known_factor_indices=[1]\n        - eg. known_factors=[A], known_factor_indices=[1]\n              = [..., A, ...]\n        - eg. known_factors=[[A]], known_factor_indices=[1]\n              = [[..., A, ...]]\n        - eg. known_factors=[A, B], known_factor_indices=[1, 2]\n              = [..., A, B, ...]\n        - eg. known_factors=[[A], [B]], known_factor_indices=[1]\n              = [[..., A, ...], [..., B, ...]]\n        - eg. known_factors=[[A, B], [C, D]], known_factor_indices=[1, 2]\n              = [[..., A, B, ...], [..., C, D, ...]]\n        \"\"\"", "\n", "f_idxs", "=", "self", ".", "normalise_factor_idxs", "(", "f_idxs", ")", "\n", "f_idxs_inv", "=", "self", ".", "invert_factor_idxs", "(", "f_idxs", ")", "\n", "# normalize shapes", "\n", "known_factors", "=", "np", ".", "array", "(", "known_factors", ")", "\n", "# checks", "\n", "assert", "known_factors", ".", "ndim", ">=", "1", ",", "f'known_factors must have at least one dimension, got shape: {known_factors.shape}'", "\n", "assert", "known_factors", ".", "shape", "[", "-", "1", "]", "==", "len", "(", "f_idxs", ")", ",", "f'last dimension of factors must be the same size as the number of f_idxs ({len(f_idxs)}), got shape: {known_factors.shape}'", "\n", "# replace the specified factors", "\n", "new_factors", "=", "np", ".", "empty", "(", "[", "*", "known_factors", ".", "shape", "[", ":", "-", "1", "]", ",", "self", ".", "num_factors", "]", ",", "dtype", "=", "'int'", ")", "\n", "new_factors", "[", "...", ",", "f_idxs", "]", "=", "known_factors", "\n", "new_factors", "[", "...", ",", "f_idxs_inv", "]", "=", "self", ".", "sample_factors", "(", "size", "=", "known_factors", ".", "shape", "[", ":", "-", "1", "]", ",", "f_idxs", "=", "f_idxs_inv", ")", "\n", "# done!", "\n", "return", "new_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.resample_other_factors": [[264, 269], ["state_space.StateSpace.resample_given_factors", "state_space.StateSpace.invert_factor_idxs"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.resample_given_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.invert_factor_idxs"], ["", "def", "resample_other_factors", "(", "self", ",", "factors", ":", "NonNormalisedFactors", ",", "f_idxs", ":", "NonNormalisedFactorIdxs", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Resample all unspecified factors, keeping f_idxs constant.\n        \"\"\"", "\n", "return", "self", ".", "resample_given_factors", "(", "factors", "=", "factors", ",", "f_idxs", "=", "self", ".", "invert_factor_idxs", "(", "f_idxs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.resample_given_factors": [[270, 283], ["state_space.StateSpace.normalise_factor_idxs", "numpy.copy", "state_space.StateSpace.sample_factors"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors"], ["", "def", "resample_given_factors", "(", "self", ",", "factors", ":", "NonNormalisedFactors", ",", "f_idxs", ":", "NonNormalisedFactorIdxs", ")", ":", "\n", "        ", "\"\"\"\n        Resample all specified f_idxs, keeping all remaining factors constant.\n        \"\"\"", "\n", "f_idxs", "=", "self", ".", "normalise_factor_idxs", "(", "f_idxs", ")", "\n", "new_factors", "=", "np", ".", "copy", "(", "factors", ")", "\n", "# checks", "\n", "assert", "new_factors", ".", "ndim", ">=", "1", ",", "f'factors must have at least one dimension, got shape: {new_factors.shape}'", "\n", "assert", "new_factors", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "num_factors", ",", "f'last dimension of factors must be the same size as the number of factors ({self.num_factors}), got shape: {new_factors.shape}'", "\n", "# replace the specified factors", "\n", "new_factors", "[", "...", ",", "f_idxs", "]", "=", "self", ".", "sample_factors", "(", "size", "=", "new_factors", ".", "shape", "[", ":", "-", "1", "]", ",", "f_idxs", "=", "f_idxs", ")", "\n", "# done!", "\n", "return", "new_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace._get_f_idx_and_factors_and_size": [[284, 313], ["numpy.reshape.repeat", "numpy.random.randint", "state_space.StateSpace.sample_factors", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors"], ["", "def", "_get_f_idx_and_factors_and_size", "(", "\n", "self", ",", "\n", "f_idx", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "base_factors", ":", "Optional", "[", "NonNormalisedFactors", "]", "=", "None", ",", "\n", "num", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param f_idx: Sampled randomly in the range [0, num_factors) if not given.\n        :param base_factors: Sampled randomly from all possible factors if not given. Coerced into the shape (1, num_factors)\n        :param num: Set to the factor size `self.factor_sizes[f_idx]` if not given.\n        :return: All values above in a tuple.\n        \"\"\"", "\n", "# choose a random factor if not given", "\n", "if", "f_idx", "is", "None", ":", "\n", "            ", "f_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "num_factors", ")", "\n", "# sample factors if not given", "\n", "", "if", "base_factors", "is", "None", ":", "\n", "            ", "base_factors", "=", "self", ".", "sample_factors", "(", "size", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "base_factors", "=", "np", ".", "reshape", "(", "base_factors", ",", "(", "1", ",", "self", ".", "num_factors", ")", ")", "\n", "# get size if not given", "\n", "", "if", "num", "is", "None", ":", "\n", "            ", "num", "=", "self", ".", "factor_sizes", "[", "f_idx", "]", "\n", "", "else", ":", "\n", "            ", "assert", "num", ">", "0", "\n", "# generate a traversal", "\n", "", "base_factors", "=", "base_factors", ".", "repeat", "(", "num", ",", "axis", "=", "0", ")", "\n", "# return everything", "\n", "return", "f_idx", ",", "base_factors", ",", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal": [[314, 334], ["state_space.StateSpace._get_f_idx_and_factors_and_size", "disent.util.visualize.vis_util.get_idx_traversal", "state_space.StateSpace.pos_to_idx"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace._get_f_idx_and_factors_and_size", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.get_idx_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx"], ["", "def", "sample_random_factor_traversal", "(", "\n", "self", ",", "\n", "f_idx", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "base_factors", ":", "Optional", "[", "NonNormalisedFactors", "]", "=", "None", ",", "\n", "num", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "mode", ":", "str", "=", "'interval'", ",", "\n", "start_index", ":", "int", "=", "0", ",", "\n", "return_indices", ":", "bool", "=", "False", ",", "\n", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"\n        Sample a single random factor traversal along the\n        given factor index, starting from some random base sample.\n        \"\"\"", "\n", "f_idx", ",", "base_factors", ",", "num", "=", "self", ".", "_get_f_idx_and_factors_and_size", "(", "f_idx", "=", "f_idx", ",", "base_factors", "=", "base_factors", ",", "num", "=", "num", ")", "\n", "# generate traversal", "\n", "base_factors", "[", ":", ",", "f_idx", "]", "=", "get_idx_traversal", "(", "self", ".", "factor_sizes", "[", "f_idx", "]", ",", "num_frames", "=", "num", ",", "mode", "=", "mode", ",", "start_index", "=", "start_index", ")", "\n", "# return factors (num_frames, num_factors)", "\n", "if", "return_indices", ":", "\n", "            ", "return", "base_factors", ",", "self", ".", "pos_to_idx", "(", "base_factors", ")", "\n", "", "return", "base_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal_grid": [[335, 358], ["state_space.StateSpace.normalise_factor_idxs", "numpy.stack", "int", "state_space.StateSpace.sample_factors", "numpy.stack.append", "numpy.ceil", "state_space.StateSpace.sample_random_factor_traversal", "state_space.StateSpace.pos_to_idx", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx"], ["", "def", "sample_random_factor_traversal_grid", "(", "\n", "self", ",", "\n", "num", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "base_factors", ":", "Optional", "[", "NonNormalisedFactors", "]", "=", "None", ",", "\n", "mode", ":", "str", "=", "'interval'", ",", "\n", "factor_indices", ":", "Optional", "[", "NonNormalisedFactorIdxs", "]", "=", "None", ",", "\n", "return_indices", ":", "bool", "=", "False", ",", "\n", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "# default values", "\n", "        ", "if", "num", "is", "None", ":", "\n", "            ", "num", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "mean", "(", "self", ".", "factor_sizes", ")", ")", ")", "\n", "", "if", "base_factors", "is", "None", ":", "\n", "            ", "base_factors", "=", "self", ".", "sample_factors", "(", ")", "\n", "", "factor_indices", "=", "self", ".", "normalise_factor_idxs", "(", "factor_indices", ")", "\n", "# generate a grid of factors", "\n", "factors_grid", "=", "[", "]", "\n", "for", "f_idx", "in", "factor_indices", ":", "\n", "            ", "factors_grid", ".", "append", "(", "self", ".", "sample_random_factor_traversal", "(", "f_idx", "=", "f_idx", ",", "base_factors", "=", "base_factors", ",", "num", "=", "num", ",", "mode", "=", "mode", ",", "start_index", "=", "0", ")", ")", "\n", "", "factors_grid", "=", "np", ".", "stack", "(", "factors_grid", ",", "axis", "=", "0", ")", "\n", "# done!", "\n", "if", "return_indices", ":", "\n", "            ", "return", "factors_grid", ",", "self", ".", "pos_to_idx", "(", "factors_grid", ")", "\n", "", "return", "factors_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space._get_step_size": [[365, 376], ["functools.lru_cache", "all", "numpy.zeros", "int", "len", "len", "numpy.ravel_multi_index"], "function", ["None"], ["", "", "@", "lru_cache", "(", ")", "\n", "def", "_get_step_size", "(", "factor_sizes", ",", "f_idx", ":", "int", ")", ":", "\n", "# check values", "\n", "    ", "assert", "f_idx", ">=", "0", "\n", "assert", "f_idx", "<", "len", "(", "factor_sizes", ")", "\n", "# return values", "\n", "assert", "all", "(", "f", ">", "0", "for", "f", "in", "factor_sizes", ")", "\n", "# return factor size", "\n", "pos", "=", "np", ".", "zeros", "(", "len", "(", "factor_sizes", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "pos", "[", "f_idx", "]", "=", "1", "\n", "return", "int", "(", "np", ".", "ravel_multi_index", "(", "pos", ",", "factor_sizes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space._dims_multipliers": [[378, 382], ["numpy.array", "numpy.append", "numpy.cumprod"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "_dims_multipliers", "(", "factor_sizes", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "factor_sizes", "=", "np", ".", "array", "(", "factor_sizes", ")", "\n", "assert", "factor_sizes", ".", "ndim", "==", "1", "\n", "return", "np", ".", "append", "(", "np", ".", "cumprod", "(", "factor_sizes", "[", ":", ":", "-", "1", "]", ")", "[", ":", ":", "-", "1", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.array.replace_arrays_with_shapes": [[34, 51], ["isinstance", "isinstance", "isinstance", "array.replace_arrays_with_shapes", "array.replace_arrays_with_shapes", "list", "isinstance", "obj.items", "tuple", "isinstance", "array.replace_arrays_with_shapes", "array.replace_arrays_with_shapes", "array.replace_arrays_with_shapes"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.array.replace_arrays_with_shapes", "home.repos.pwc.inspect_result.nmichlo_disent.util.array.replace_arrays_with_shapes", "home.repos.pwc.inspect_result.nmichlo_disent.util.array.replace_arrays_with_shapes", "home.repos.pwc.inspect_result.nmichlo_disent.util.array.replace_arrays_with_shapes", "home.repos.pwc.inspect_result.nmichlo_disent.util.array.replace_arrays_with_shapes"], ["def", "replace_arrays_with_shapes", "(", "obj", ")", ":", "\n", "    ", "\"\"\"\n    recursively replace all arrays of an object\n    with their shapes to make debugging easier!\n    \"\"\"", "\n", "if", "isinstance", "(", "obj", ",", "(", "torch", ".", "Tensor", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "return", "obj", ".", "shape", "\n", "", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "return", "{", "replace_arrays_with_shapes", "(", "k", ")", ":", "replace_arrays_with_shapes", "(", "v", ")", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", "}", "\n", "", "elif", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "        ", "return", "list", "(", "replace_arrays_with_shapes", "(", "v", ")", "for", "v", "in", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "replace_arrays_with_shapes", "(", "v", ")", "for", "v", "in", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "set", ")", ":", "\n", "        ", "return", "{", "replace_arrays_with_shapes", "(", "k", ")", "for", "k", "in", "obj", "}", "\n", "", "else", ":", "\n", "        ", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.LengthIter.__iter__": [[112, 116], ["range", "len"], "methods", ["None"], ["    ", "def", "__iter__", "(", "self", ")", ":", "\n", "# this takes priority over __getitem__, otherwise __getitem__ would need to", "\n", "# raise an IndexError if out of bounds to signal the end of iteration", "\n", "        ", "yield", "from", "(", "self", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.LengthIter.__len__": [[117, 119], ["NotImplementedError"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.LengthIter.__getitem__": [[120, 122], ["NotImplementedError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.chunked": [[35, 42], ["len", "range", "len"], "function", ["None"], ["def", "chunked", "(", "arr", ",", "chunk_size", ":", "int", ",", "include_remainder", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    return an array of array chucks of size chunk_size.\n    This is NOT an iterable, and returns all the data.\n    \"\"\"", "\n", "size", "=", "(", "len", "(", "arr", ")", "+", "chunk_size", "-", "1", ")", "if", "include_remainder", "else", "len", "(", "arr", ")", "\n", "return", "[", "arr", "[", "chunk_size", "*", "i", ":", "chunk_size", "*", "(", "i", "+", "1", ")", "]", "for", "i", "in", "range", "(", "size", "//", "chunk_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.iter_chunks": [[44, 54], ["iter", "itertools.islice", "len"], "function", ["None"], ["", "def", "iter_chunks", "(", "items", ",", "chunk_size", ":", "int", ",", "include_remainder", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    iterable version of chunked.\n    that does not evaluate unneeded elements\n    \"\"\"", "\n", "items", "=", "iter", "(", "items", ")", "\n", "for", "first", "in", "items", ":", "\n", "        ", "chunk", "=", "[", "first", ",", "*", "islice", "(", "items", ",", "chunk_size", "-", "1", ")", "]", "\n", "if", "len", "(", "chunk", ")", ">=", "chunk_size", "or", "include_remainder", ":", "\n", "            ", "yield", "chunk", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.iter_rechunk": [[56, 65], ["iters.iter_chunks"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.iters.iter_chunks"], ["", "", "", "def", "iter_rechunk", "(", "chunks", ",", "chunk_size", ":", "int", ",", "include_remainder", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    takes in chunks and returns chunks of a new size.\n    - Does not evaluate unneeded chunks\n    \"\"\"", "\n", "return", "iter_chunks", "(", "\n", "(", "item", "for", "chunk", "in", "chunks", "for", "item", "in", "chunk", ")", ",", "# flatten chunks", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "include_remainder", "=", "include_remainder", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.map_all": [[68, 88], ["len", "all", "tuple", "tuple", "fn", "fn", "zip", "len", "zip", "zip"], "function", ["None"], ["", "def", "map_all", "(", "fn", ",", "*", "arg_lists", ",", "starmap", ":", "bool", "=", "True", ",", "collect_returned", ":", "bool", "=", "False", ",", "common_kwargs", ":", "dict", "=", "None", ")", ":", "\n", "# TODO: not actually an iterator", "\n", "    ", "assert", "arg_lists", ",", "'an empty list of args was passed'", "\n", "# check all lengths are the same", "\n", "num", "=", "len", "(", "arg_lists", "[", "0", "]", ")", "\n", "assert", "num", ">", "0", "\n", "assert", "all", "(", "len", "(", "items", ")", "==", "num", "for", "items", "in", "arg_lists", ")", "\n", "# update kwargs", "\n", "if", "common_kwargs", "is", "None", ":", "\n", "        ", "common_kwargs", "=", "{", "}", "\n", "# map everything", "\n", "", "if", "starmap", ":", "\n", "        ", "results", "=", "(", "fn", "(", "*", "args", ",", "**", "common_kwargs", ")", "for", "args", "in", "zip", "(", "*", "arg_lists", ")", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "(", "fn", "(", "args", ",", "**", "common_kwargs", ")", "for", "args", "in", "zip", "(", "*", "arg_lists", ")", ")", "\n", "# zip everything", "\n", "", "if", "collect_returned", ":", "\n", "        ", "return", "tuple", "(", "zip", "(", "*", "results", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "tuple", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.collect_dicts": [[90, 95], ["results[].keys", "zip", "list", "zip"], "function", ["None"], ["", "", "def", "collect_dicts", "(", "results", ":", "List", "[", "dict", "]", ")", ":", "\n", "# collect everything", "\n", "    ", "keys", "=", "results", "[", "0", "]", ".", "keys", "(", ")", "\n", "values", "=", "zip", "(", "*", "(", "[", "result", "[", "k", "]", "for", "k", "in", "keys", "]", "for", "result", "in", "results", ")", ")", "\n", "return", "{", "k", ":", "list", "(", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "values", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.aggregate_dict": [[97, 102], ["sum", "len", "results.items"], "function", ["None"], ["", "def", "aggregate_dict", "(", "results", ":", "dict", ",", "reduction", "=", "'mean'", ")", ":", "\n", "# TODO: this shouldn't be here", "\n", "    ", "assert", "reduction", "==", "'mean'", ",", "'mean is the only mode supported'", "\n", "return", "{", "\n", "k", ":", "sum", "(", "v", ")", "/", "len", "(", "v", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.__init__": [[90, 96], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ":", "str", "=", "None", ",", "log_level", ":", "int", "=", "logging", ".", "INFO", ")", ":", "\n", "        ", "self", ".", "_start_time", ":", "int", "=", "None", "\n", "self", ".", "_end_time", ":", "int", "=", "None", "\n", "self", ".", "_total_time", "=", "0", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "_log_level", "=", "log_level", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.__enter__": [[97, 100], ["time.time_ns"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_start_time", "=", "time", ".", "time_ns", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.__exit__": [[101, 113], ["time.time_ns", "print", "log.log"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_end_time", "=", "time", ".", "time_ns", "(", ")", "\n", "# add elapsed time to total time, and reset the timer!", "\n", "self", ".", "_total_time", "+=", "(", "self", ".", "_end_time", "-", "self", ".", "_start_time", ")", "\n", "self", ".", "_start_time", "=", "None", "\n", "self", ".", "_end_time", "=", "None", "\n", "# print results", "\n", "if", "self", ".", "name", ":", "\n", "            ", "if", "self", ".", "_log_level", "is", "None", ":", "\n", "                ", "print", "(", "f'{self.name}: {self.pretty}'", ")", "\n", "", "else", ":", "\n", "                ", "log", ".", "log", "(", "self", ".", "_log_level", ",", "f'{self.name}: {self.pretty}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.restart": [[114, 118], ["time.time_ns"], "methods", ["None"], ["", "", "", "def", "restart", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_start_time", "is", "not", "None", ",", "'timer must have been started before we can restart it'", "\n", "assert", "self", ".", "_end_time", "is", "None", ",", "'timer cannot be restarted if it is finished'", "\n", "self", ".", "_start_time", "=", "time", ".", "time_ns", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.elapsed_ns": [[119, 126], ["time.time_ns"], "methods", ["None"], ["", "@", "property", "\n", "def", "elapsed_ns", "(", "self", ")", "->", "int", ":", "\n", "        ", "if", "self", ".", "_start_time", "is", "not", "None", ":", "\n", "# running", "\n", "            ", "return", "self", ".", "_total_time", "+", "(", "time", ".", "time_ns", "(", ")", "-", "self", ".", "_start_time", ")", "\n", "# finished running", "\n", "", "return", "self", ".", "_total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.elapsed_ms": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "elapsed_ms", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "elapsed_ns", "/", "1_000_000", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.elapsed": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "elapsed", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "elapsed_ns", "/", "1_000_000_000", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.pretty": [[135, 138], ["profiling.Timer.prettify_time"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.prettify_time"], ["", "@", "property", "\n", "def", "pretty", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "Timer", ".", "prettify_time", "(", "self", ".", "elapsed_ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.__int__": [[139, 140], ["None"], "methods", ["None"], ["", "def", "__int__", "(", "self", ")", ":", "return", "self", ".", "elapsed_ns", "\n", "def", "__float__", "(", "self", ")", ":", "return", "self", ".", "elapsed", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.__float__": [[140, 141], ["None"], "methods", ["None"], ["def", "__float__", "(", "self", ")", ":", "return", "self", ".", "elapsed", "\n", "def", "__str__", "(", "self", ")", ":", "return", "self", ".", "pretty", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.__str__": [[141, 142], ["None"], "methods", ["None"], ["def", "__str__", "(", "self", ")", ":", "return", "self", ".", "pretty", "\n", "def", "__repr__", "(", "self", ")", ":", "return", "self", ".", "pretty", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.__repr__": [[142, 143], ["None"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "return", "self", ".", "pretty", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.Timer.prettify_time": [[144, 167], ["min", "int", "int", "divmod", "divmod", "divmod", "math.log10"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "prettify_time", "(", "ns", ":", "int", ")", "->", "str", ":", "\n", "        ", "if", "ns", "==", "0", ":", "\n", "            ", "return", "'N/A'", "\n", "", "elif", "ns", "<", "0", ":", "\n", "            ", "return", "'NaN'", "\n", "# get power of 1000", "\n", "", "pow", "=", "min", "(", "3", ",", "int", "(", "log10", "(", "ns", ")", "//", "3", ")", ")", "\n", "time", "=", "ns", "/", "1000", "**", "pow", "\n", "# get pretty string!", "\n", "if", "pow", "<", "3", "or", "time", "<", "60", ":", "\n", "# less than 1 minute", "\n", "            ", "name", "=", "[", "'ns'", ",", "'\u00b5s'", ",", "'ms'", ",", "'s'", "]", "[", "pow", "]", "\n", "return", "f'{time:.3f}{name}'", "\n", "", "else", ":", "\n", "# 1 or more minutes", "\n", "            ", "s", "=", "int", "(", "time", ")", "\n", "d", ",", "s", "=", "divmod", "(", "s", ",", "86400", ")", "\n", "h", ",", "s", "=", "divmod", "(", "s", ",", "3600", ")", "\n", "m", ",", "s", "=", "divmod", "(", "s", ",", "60", ")", "\n", "if", "d", ">", "0", ":", "return", "f'{d}d:{h}h:{m}m'", "\n", "elif", "h", ">", "0", ":", "return", "f'{h}h:{m}m:{s}s'", "\n", "else", ":", "return", "f'{m}m:{s}s'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.profiling.get_memory_usage": [[39, 50], ["psutil.Process", "os.getpid", "psutil.Process.memory_info", "bytes_to_human"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.bytes_to_human"], ["def", "get_memory_usage", "(", "pretty", ":", "bool", "=", "False", ")", ":", "\n", "    ", "import", "os", "\n", "import", "psutil", "\n", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "num_bytes", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "# in bytes", "\n", "# format the bytes", "\n", "if", "pretty", ":", "\n", "        ", "from", "disent", ".", "util", ".", "strings", ".", "fmt", "import", "bytes_to_human", "\n", "return", "bytes_to_human", "(", "num_bytes", ")", "\n", "", "else", ":", "\n", "        ", "return", "num_bytes", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.imports._check_and_split_path": [[34, 41], ["import_path.split", "tuple", "all", "ValueError", "map", "repr"], "function", ["None"], ["def", "_check_and_split_path", "(", "import_path", ":", "str", ")", "->", "Tuple", "[", "str", ",", "...", "]", ":", "\n", "    ", "segments", "=", "import_path", ".", "split", "(", "'.'", ")", "\n", "# make sure each segment is a valid python identifier", "\n", "if", "not", "all", "(", "map", "(", "str", ".", "isidentifier", ",", "segments", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'import path is invalid: {repr(import_path)}'", ")", "\n", "# return the segments!", "\n", "", "return", "tuple", "(", "segments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.imports.import_obj": [[43, 61], ["imports._check_and_split_path", "importlib.import_module", "getattr", "ImportError", "ImportError", "repr", "repr", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.imports._check_and_split_path"], ["", "def", "import_obj", "(", "import_path", ":", "str", ")", ":", "\n", "# checks", "\n", "    ", "segments", "=", "_check_and_split_path", "(", "import_path", ")", "\n", "# split path", "\n", "module_path", ",", "attr_name", "=", "'.'", ".", "join", "(", "segments", "[", ":", "-", "1", "]", ")", ",", "segments", "[", "-", "1", "]", "\n", "# import the module", "\n", "import", "importlib", "\n", "try", ":", "\n", "        ", "module", "=", "importlib", ".", "import_module", "(", "module_path", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "raise", "ImportError", "(", "f'failed to import module: {repr(module_path)}'", ")", "from", "e", "\n", "# import the attrs", "\n", "", "try", ":", "\n", "        ", "attr", "=", "getattr", "(", "module", ",", "attr_name", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "raise", "ImportError", "(", "f'failed to get attribute: {repr(attr_name)} on module: {repr(module_path)}'", ")", "from", "e", "\n", "# done", "\n", "", "return", "attr", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.imports.import_obj_partial": [[63, 71], ["imports.import_obj", "wrapped_partial"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.imports.import_obj", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial"], ["", "def", "import_obj_partial", "(", "import_path", ":", "str", ",", "*", "partial_args", ",", "**", "partial_kwargs", ")", ":", "\n", "    ", "obj", "=", "import_obj", "(", "import_path", ")", "\n", "# wrap the object if needed", "\n", "if", "partial_args", "or", "partial_kwargs", ":", "\n", "        ", "from", "disent", ".", "util", ".", "function", "import", "wrapped_partial", "\n", "obj", "=", "wrapped_partial", "(", "obj", ",", "*", "partial_args", ",", "**", "partial_kwargs", ")", "\n", "# done!", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.TempNumpySeed.__init__": [[63, 73], ["int", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seed", ":", "int", "=", "None", ")", ":", "\n", "# check and normalize seed", "\n", "        ", "if", "seed", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "seed", "=", "int", "(", "seed", ")", "\n", "", "except", ":", "\n", "                ", "raise", "ValueError", "(", "f'seed={seed} is not int-like!'", ")", "\n", "# save values", "\n", "", "", "self", ".", "_seed", "=", "seed", "\n", "self", ".", "_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.TempNumpySeed.__enter__": [[74, 79], ["np.random.get_state", "np.random.seed"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_seed", "is", "not", "None", ":", "\n", "            ", "import", "numpy", "as", "np", "\n", "self", ".", "_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.TempNumpySeed.__exit__": [[80, 85], ["np.random.set_state"], "methods", ["None"], ["", "", "def", "__exit__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "_seed", "is", "not", "None", ":", "\n", "            ", "import", "numpy", "as", "np", "\n", "np", ".", "random", ".", "set_state", "(", "self", ".", "_state", ")", "\n", "self", ".", "_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.TempNumpySeed._recreate_cm": [[86, 89], ["None"], "methods", ["None"], ["", "", "def", "_recreate_cm", "(", "self", ")", ":", "\n", "# TODO: do we need to override this?", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed": [[37, 60], ["random.seed", "np.random.seed", "log.info", "log.warning", "torch.manual_seed", "log.warning"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed", "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed"], ["def", "seed", "(", "long", "=", "777", ")", ":", "\n", "    ", "\"\"\"\n    https://pytorch.org/docs/stable/notes/randomness.html\n    \"\"\"", "\n", "if", "long", "is", "None", ":", "\n", "        ", "log", ".", "warning", "(", "f'[SEEDING]: no seed was specified. Seeding skipped!'", ")", "\n", "return", "\n", "# seed python", "\n", "", "import", "random", "\n", "random", ".", "seed", "(", "long", ")", "\n", "# seed numpy", "\n", "import", "numpy", "as", "np", "\n", "np", ".", "random", ".", "seed", "(", "long", ")", "\n", "# seed torch - it can be slow to import", "\n", "try", ":", "\n", "        ", "import", "torch", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "manual_seed", "(", "long", ")", "# also calls: torch.cuda.manual_seed_all", "\n", "", "except", "ImportError", ":", "\n", "        ", "log", ".", "warning", "(", "f'[SEEDING]: torch is not installed. Skipped seeding torch methods!'", ")", "\n", "# done!", "\n", "", "log", ".", "info", "(", "f'[SEEDED]: {long}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial": [[31, 40], ["functools.partial", "functools.update_wrapper"], "function", ["None"], ["def", "wrapped_partial", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Like functools.partial but keeps the same __name__ and __doc__\n    on the returned function.\n    \"\"\"", "\n", "import", "functools", "\n", "partial_func", "=", "functools", ".", "partial", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "functools", ".", "update_wrapper", "(", "partial_func", ",", "func", ")", "\n", "return", "partial_func", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.deprecate._get_traceback_string": [[35, 42], ["StringIO", "traceback.print_stack", "StringIO.getvalue"], "function", ["None"], ["def", "_get_traceback_string", "(", ")", "->", "str", ":", "\n", "    ", "from", "io", "import", "StringIO", "\n", "import", "traceback", "\n", "# print the stack trace to an in-memory buffer", "\n", "file", "=", "StringIO", "(", ")", "\n", "traceback", ".", "print_stack", "(", "file", "=", "file", ")", "\n", "return", "file", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.deprecate._get_traceback_file_groups": [[44, 57], ["_get_traceback_string().splitlines", "line.strip().startswith", "group.append", "results.append", "deprecate._get_traceback_string", "line.strip", "results.append"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.util.deprecate._get_traceback_string", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "_get_traceback_file_groups", "(", ")", ":", "\n", "# filter the lines", "\n", "    ", "results", "=", "[", "]", "\n", "group", "=", "[", "]", "\n", "for", "line", "in", "_get_traceback_string", "(", ")", ".", "splitlines", "(", ")", ":", "\n", "        ", "if", "line", ".", "strip", "(", ")", ".", "startswith", "(", "'File \"'", ")", ":", "\n", "            ", "if", "group", ":", "\n", "                ", "results", ".", "append", "(", "group", ")", "\n", "group", "=", "[", "]", "\n", "", "", "group", ".", "append", "(", "line", ")", "\n", "", "if", "group", ":", "\n", "        ", "results", ".", "append", "(", "group", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.deprecate._get_stack_file_strings": [[59, 66], ["inspect.stack", "results.append"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "_get_stack_file_strings", "(", ")", ":", "\n", "# mimic the output of a traceback so pycharm performs syntax highlighting when printed", "\n", "    ", "import", "inspect", "\n", "results", "=", "[", "]", "\n", "for", "frame_info", "in", "inspect", ".", "stack", "(", ")", ":", "\n", "        ", "results", ".", "append", "(", "f'File \"{frame_info.filename}\", line {frame_info.lineno}, in {frame_info.function}'", ")", "\n", "", "return", "results", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.deprecate.deprecated": [[72, 123], ["isinstance", "functools.wraps", "deprecate.deprecated._decorator"], "function", ["None"], ["def", "deprecated", "(", "msg", ":", "str", ",", "traceback_mode", ":", "Optional", "[", "str", "]", "=", "None", ",", "fn", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Mark a function or class as deprecated, and print a warning the\n    first time it is used.\n    - This decorator wraps functions, but only replaces the __init__\n      method of a class so that we can still inherit from a deprecated class!\n    \"\"\"", "\n", "assert", "isinstance", "(", "msg", ",", "str", ")", ",", "f'msg must be a str, got type: {type(msg)}'", "\n", "if", "traceback_mode", "is", "None", ":", "\n", "        ", "traceback_mode", "=", "DEFAULT_TRACEBACK_MODE", "\n", "", "assert", "traceback_mode", "in", "_TRACEBACK_MODES", ",", "f'invalid traceback_mode, got: {repr(traceback_mode)}, must be one of: {sorted(_TRACEBACK_MODES)}'", "\n", "\n", "def", "_decorator", "(", "fn", ")", ":", "\n", "# we need to handle classes and function separately", "\n", "        ", "is_class", "=", "isinstance", "(", "fn", ",", "type", ")", "and", "hasattr", "(", "fn", ",", "'__init__'", ")", "\n", "# backup the original function & data", "\n", "call_fn", "=", "fn", ".", "__init__", "if", "is_class", "else", "fn", "\n", "dat", "=", "(", "fn", ".", "__module__", ",", "f'{fn.__module__}.{fn.__name__}'", ",", "str", "(", "msg", ")", ")", "\n", "# wrapper function", "\n", "@", "wraps", "(", "call_fn", ")", "\n", "def", "_caller", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "nonlocal", "dat", "\n", "# print the message!", "\n", "if", "dat", "is", "not", "None", ":", "\n", "                ", "name", ",", "path", ",", "dsc", "=", "dat", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "warning", "(", "f'[DEPRECATED] {path} - {repr(dsc)}'", ")", "\n", "# get stack trace lines", "\n", "if", "traceback_mode", "==", "'first'", ":", "lines", "=", "_get_stack_file_strings", "(", ")", "[", "-", "3", ":", "-", "2", "]", "\n", "elif", "traceback_mode", "==", "'mini'", ":", "lines", "=", "_get_stack_file_strings", "(", ")", "[", ":", "-", "2", "]", "\n", "elif", "traceback_mode", "==", "'traceback'", ":", "lines", "=", "(", "l", "[", "2", ":", "]", "for", "g", "in", "_get_traceback_file_groups", "(", ")", "[", ":", "-", "3", "]", "for", "l", "in", "g", ")", "\n", "else", ":", "lines", "=", "[", "]", "\n", "# print lines", "\n", "for", "line", "in", "lines", ":", "\n", "                    ", "logger", ".", "warning", "(", "f'| {line}'", ")", "\n", "# never run this again", "\n", "", "dat", "=", "None", "\n", "# call the function", "\n", "", "return", "call_fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# handle function or class", "\n", "", "if", "is_class", ":", "\n", "            ", "fn", ".", "__init__", "=", "_caller", "\n", "", "else", ":", "\n", "            ", "fn", "=", "_caller", "\n", "", "return", "fn", "\n", "\n", "# handle function used as decorator, or called directly", "\n", "", "if", "fn", "is", "not", "None", ":", "\n", "        ", "return", "_decorator", "(", "fn", ")", "\n", "", "else", ":", "\n", "        ", "return", "_decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.is_test_run": [[43, 49], ["bool", "os.environ.get"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__._set_test_run": [[51, 53], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy": [[60, 74], ["torch.is_tensor", "array.cpu().detach().numpy", "isinstance", "numpy.stack", "numpy.array", "array.cpu().detach", "__init__.to_numpy", "array.cpu"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy"], []], "home.repos.pwc.inspect_result.nmichlo_disent.util.jit.try_njit": [[31, 49], ["jit.try_njit.njit"], "function", ["None"], ["def", "try_njit", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper around numba.njit\n    - If numba is installed, then we JIT the decorated function\n    - If numba is missing, then we do nothing and leave the function untouched!\n    \"\"\"", "\n", "try", ":", "\n", "        ", "from", "numba", "import", "njit", "\n", "", "except", "ImportError", ":", "\n", "# dummy njit", "\n", "        ", "def", "njit", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "def", "_wrapper", "(", "func", ")", ":", "\n", "                ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "f'failed to JIT compile: {func}, numba is not installed!'", ")", "\n", "return", "func", "\n", "", "return", "_wrapper", "\n", "# try and JIT compile function!", "\n", "", "", "return", "njit", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.code.weaklysupervised__si_adavae.SwappedInputAdaVae.__init__": [[48, 51], ["disent.frameworks.vae._weaklysupervised__adavae.AdaVae.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "self", ",", "model", ":", "'AutoEncoder'", ",", "cfg", ":", "cfg", "=", "None", ",", "batch_augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ",", "cfg", "=", "cfg", ",", "batch_augment", "=", "batch_augment", ")", "\n", "assert", "cfg", ".", "swap_chance", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.code.weaklysupervised__si_adavae.SwappedInputAdaVae.do_training_step": [[52, 63], ["weaklysupervised__si_adavae.SwappedInputAdaVae._get_xs_and_targs", "super().do_training_step", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin._get_xs_and_targs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.do_training_step"], ["", "def", "do_training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "(", "x0_targ", ",", "x1_targ", ")", "=", "self", ".", "_get_xs_and_targs", "(", "batch", ",", "batch_idx", ")", "\n", "\n", "# random chance to swap the inputs", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "cfg", ".", "swap_chance", ":", "\n", "            ", "x0", ",", "x1", "=", "x1", ",", "x0", "\n", "\n", "", "return", "super", "(", "SwappedInputAdaVae", ",", "self", ")", ".", "do_training_step", "(", "{", "\n", "'x'", ":", "(", "x0", ",", "x1", ")", ",", "\n", "'x_targ'", ":", "(", "x0_targ", ",", "x1_targ", ")", ",", "\n", "}", ",", "batch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.code.random_data.RandomData._get_observation": [[38, 41], ["numpy.random.default_rng", "numpy.random.default_rng.integers"], "methods", ["None"], ["def", "_get_observation", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "idx", "+", "1", ")", "\n", "return", "rng", ".", "integers", "(", "0", ",", "256", ",", "size", "=", "self", ".", "img_shape", ",", "dtype", "=", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.code.weaklysupervised__si_betavae.SwappedInputBetaVae.__init__": [[48, 51], ["disent.frameworks.vae._unsupervised__betavae.BetaVae.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "self", ",", "model", ":", "'AutoEncoder'", ",", "cfg", ":", "cfg", "=", "None", ",", "batch_augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ",", "cfg", "=", "cfg", ",", "batch_augment", "=", "batch_augment", ")", "\n", "assert", "cfg", ".", "swap_chance", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.code.weaklysupervised__si_betavae.SwappedInputBetaVae.do_training_step": [[52, 63], ["weaklysupervised__si_betavae.SwappedInputBetaVae._get_xs_and_targs", "super().do_training_step", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin._get_xs_and_targs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.do_training_step"], ["", "def", "do_training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x0", ",", "x1", ")", ",", "(", "x0_targ", ",", "x1_targ", ")", "=", "self", ".", "_get_xs_and_targs", "(", "batch", ",", "batch_idx", ")", "\n", "\n", "# random change for the target not to be equal to the input", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "cfg", ".", "swap_chance", ":", "\n", "            ", "x0", ",", "x1", "=", "x1", ",", "x0", "\n", "\n", "", "return", "super", "(", "SwappedInputBetaVae", ",", "self", ")", ".", "do_training_step", "(", "{", "\n", "'x'", ":", "(", "x0", ",", ")", ",", "\n", "'x_targ'", ":", "(", "x0_targ", ",", ")", ",", "\n", "}", ",", "batch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.code.__init__.register_to_disent": [[32, 45], ["log.info", "disent.LazyImport", "disent.LazyImport", "disent.LazyImport", "disent.LazyImport"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_register_disent_plugins": [[70, 79], ["log.info", "log.info", "log.info", "hydra.utils.instantiate", "dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_get_gpus": [[81, 99], ["torch.cuda.is_available", "torch.cuda.is_available", "log.warning", "torch.cuda.is_available", "torch.cuda.is_available", "log.error", "RuntimeError", "torch.cuda.is_available", "torch.cuda.is_available", "log.info", "log.warning"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_check_data_paths": [[101, 120], ["os.path.isabs", "log.warning", "RuntimeError", "log.error", "repr", "repr", "repr", "repr"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_check_data_meta": [[122, 132], ["log.warning", "log.warning", "log.warning", "log.info", "log.info", "log.info"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_make_logger": [[134, 141], ["hydra.utils.instantiate", "log.info", "log.warning"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_get_callbacks": [[143, 154], ["cfg.callbacks.items", "hydra.utils.instantiate", "isinstance", "log.info", "callbacks.append"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_get_metric_callbacks": [[156, 188], ["isinstance", "isinstance", "isinstance", "metric.items", "isinstance", "type", "settings.get", "settings.get", "callbacks.append", "type", "repr", "type", "repr", "disent.util.lightning.callbacks.VaeMetricLoggingCallback", "settings.get", "settings.get"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_create_framework": [[190, 216], ["str.endswith", "hydra.utils.get_class", "hydra.utils.get_class.", "sorted", "isinstance", "log.warning", "log.info", "schedule_items.items", "repr", "hydra.utils.instantiate", "hydra.utils.instantiate", "set", "set", "log.warning", "type", "repr", "framework.register_schedule", "framework.cfg.get_keys", "cfg.framework.cfg.keys", "hydra.utils.instantiate", "len", "repr", "repr"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_make_datamodule": [[218, 232], ["experiment.util.hydra_data.HydraDataModule", "cfg.framework.meta.get", "cfg.framework.meta.get"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.action_prepare_data": [[239, 258], ["datetime.datetime.today().strftime", "log.info", "disent.util.seeds.seed", "run.hydra_register_disent_plugins", "log.info", "log.info", "run.hydra_check_data_paths", "run.hydra_check_data_meta", "log.info", "run.hydra_make_datamodule", "hydra_make_datamodule.prepare_data", "datetime.datetime.today", "os.getcwd", "hydra.utils.get_original_cwd", "disent.util.strings.fmt.make_box_str", "omegaconf.OmegaConf.to_yaml"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_register_disent_plugins", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_check_data_paths", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_check_data_meta", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_make_datamodule", "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_data.HydraDataModule.prepare_data", "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.make_box_str"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.action_train": [[260, 362], ["datetime.datetime.today().strftime", "log.info", "experiment.util.run_utils.set_debug_logger", "disent.util.seeds.seed", "run.hydra_register_disent_plugins", "log.info", "log.info", "run.hydra_get_gpus", "run.hydra_check_data_paths", "run.hydra_check_data_meta", "run.hydra_make_datamodule", "run.hydra_create_framework", "experiment.util.run_utils.set_debug_trainer", "boxed_pop", "boxed_pop", "boxed_pop", "boxed_pop", "boxed_pop", "boxed_pop", "log.info", "hydra_create_framework.hparams.update", "experiment.util.run_utils.set_debug_trainer.fit", "experiment.util.run_utils.safe_unset_debug_trainer", "experiment.util.run_utils.safe_unset_debug_logger", "wandb.finish", "run.hydra_make_logger", "pytorch_lightning.Trainer", "dict", "experiment.util.run_utils.set_debug_trainer.logger.log_hyperparams", "wandb.finish", "datetime.datetime.today", "disent.util.strings.fmt.make_box_str", "os.getcwd", "hydra.utils.get_original_cwd", "omegaconf.OmegaConf.to_yaml", "pytorch_lightning.callbacks.ModelSummary", "dict", "run.hydra_get_callbacks", "run.hydra_get_metric_callbacks", "print_cfg.pop"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils.set_debug_logger", "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_register_disent_plugins", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_get_gpus", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_check_data_paths", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_check_data_meta", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_make_datamodule", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_create_framework", "home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils.set_debug_trainer", "home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils.safe_unset_debug_trainer", "home.repos.pwc.inspect_result.nmichlo_disent.util.run_utils.safe_unset_debug_logger", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_make_logger", "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.make_box_str", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_get_callbacks", "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_get_metric_callbacks"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.run_action": [[372, 380], ["action", "KeyError", "repr", "sorted", "ACTIONS.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.nmichlo_disent.experiment.run.hydra_experiment": [[387, 412], ["experiment.util.hydra_main.hydra_main"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_main.hydra_main"], []], "home.repos.pwc.inspect_result.nmichlo_disent.hydra_plugins.searchpath_plugin.DisentExperimentSearchPathPlugin.manipulate_search_path": [[18, 34], ["log.info", "log.info", "os.environ.get().split", "os.environ.get().split", "log.info", "search_path.append", "os.environ.get", "os.environ.get", "os.path.abspath", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get"], ["    ", "def", "manipulate_search_path", "(", "self", ",", "search_path", ":", "ConfigSearchPath", ")", "->", "None", ":", "\n", "        ", "from", "experiment", ".", "util", ".", "hydra_main", "import", "_DISENT_CONFIG_DIRS", "\n", "# find paths", "\n", "paths", "=", "[", "\n", "*", "os", ".", "environ", ".", "get", "(", "'DISENT_CONFIGS_PREPEND'", ",", "''", ")", ".", "split", "(", "';'", ")", ",", "\n", "*", "_DISENT_CONFIG_DIRS", ",", "\n", "*", "os", ".", "environ", ".", "get", "(", "'DISENT_CONFIGS_APPEND'", ",", "''", ")", ".", "split", "(", "';'", ")", ",", "\n", "]", "\n", "# print information", "\n", "log", ".", "info", "(", "f' [disent-search-path-plugin]: Activated hydra plugin: {self.__class__.__name__}'", ")", "\n", "log", ".", "info", "(", "f' [disent-search-path-plugin]: To register more search paths, adjust the `DISENT_CONFIGS_PREPEND` and `DISENT_CONFIGS_APPEND` environment variables!'", ")", "\n", "# add paths", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "if", "path", ":", "\n", "                ", "log", ".", "info", "(", "f' [disent-search-path] - {repr(path)}'", ")", "\n", "search_path", ".", "append", "(", "provider", "=", "'disent-searchpath-plugin'", ",", "path", "=", "os", ".", "path", ".", "abspath", "(", "path", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math.test_cov_corr": [[58, 74], ["range", "range", "torch.randn", "torch.from_numpy().to", "torch.from_numpy().to", "disent.nn.functional.torch_cov_matrix", "disent.nn.functional.torch_corr_matrix", "torch.allclose", "torch.allclose", "torch.from_numpy", "torch.from_numpy", "numpy.cov", "numpy.corrcoef", "disent.util.to_numpy", "disent.util.to_numpy"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._correlation.torch_cov_matrix", "home.repos.pwc.inspect_result.nmichlo_disent.functional._correlation.torch_corr_matrix", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy"], ["def", "test_cov_corr", "(", ")", ":", "\n", "\n", "    ", "for", "i", "in", "range", "(", "5", ",", "1000", ",", "250", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "2", ",", "100", ",", "25", ")", ":", "\n", "\n", "# these match when torch.float64 is used, not when torch float32 is used...", "\n", "            ", "xs", "=", "torch", ".", "randn", "(", "i", ",", "j", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "\n", "np_cov", "=", "torch", ".", "from_numpy", "(", "np", ".", "cov", "(", "to_numpy", "(", "xs", ")", ",", "rowvar", "=", "False", ",", "ddof", "=", "0", ")", ")", ".", "to", "(", "xs", ".", "dtype", ")", "\n", "np_cor", "=", "torch", ".", "from_numpy", "(", "np", ".", "corrcoef", "(", "to_numpy", "(", "xs", ")", ",", "rowvar", "=", "False", ",", "ddof", "=", "0", ")", ")", ".", "to", "(", "xs", ".", "dtype", ")", "\n", "\n", "cov", "=", "torch_cov_matrix", "(", "xs", ")", "\n", "cor", "=", "torch_corr_matrix", "(", "xs", ")", "\n", "\n", "assert", "torch", ".", "allclose", "(", "np_cov", ",", "cov", ")", "\n", "assert", "torch", ".", "allclose", "(", "np_cor", ",", "cor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math.test_generalised_mean": [[76, 96], ["torch.abs", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.randn", "disent.nn.functional.torch_mean_generalized", "torch.mean", "disent.nn.functional.torch_mean_generalized", "torch.mean", "disent.nn.functional.torch_mean_generalized", "torch.as_tensor", "disent.nn.functional.torch_mean_generalized", "torch.as_tensor", "disent.nn.functional.torch_mean_generalized", "torch.as_tensor", "disent.nn.functional.torch_mean_generalized", "torch.as_tensor", "disent.nn.functional.torch_mean_generalized", "torch.as_tensor", "disent.nn.functional.torch_mean_generalized", "torch.as_tensor", "disent.nn.functional.torch_mean_generalized", "torch.amax", "disent.nn.functional.torch_mean_generalized", "torch.amin", "disent.nn.functional.torch_mean_generalized", "torch.amax", "disent.nn.functional.torch_mean_generalized", "torch.amin", "scipy.stats.gmean", "scipy.stats.hmean", "scipy.stats.gmean", "scipy.stats.hmean", "scipy.stats.gmean", "scipy.stats.hmean"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized"], ["", "", "", "def", "test_generalised_mean", "(", ")", ":", "\n", "    ", "xs", "=", "torch", ".", "abs", "(", "torch", ".", "randn", "(", "2", ",", "1000", ",", "3", ",", "dtype", "=", "torch", ".", "float64", ")", ")", "\n", "\n", "# normal", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "'arithmetic'", ",", "dim", "=", "1", ")", ",", "torch", ".", "mean", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "1", ",", "dim", "=", "1", ")", ",", "torch", ".", "mean", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# scipy equivalents", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "'geometric'", ",", "dim", "=", "1", ")", ",", "torch", ".", "as_tensor", "(", "gmean", "(", "xs", ",", "axis", "=", "1", ")", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "'harmonic'", ",", "dim", "=", "1", ")", ",", "torch", ".", "as_tensor", "(", "hmean", "(", "xs", ",", "axis", "=", "1", ")", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "0", ",", "dim", "=", "1", ")", ",", "torch", ".", "as_tensor", "(", "gmean", "(", "xs", ",", "axis", "=", "1", ")", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "-", "1", ",", "dim", "=", "1", ")", ",", "torch", ".", "as_tensor", "(", "hmean", "(", "xs", ",", "axis", "=", "1", ")", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "0", ")", ",", "torch", ".", "as_tensor", "(", "gmean", "(", "xs", ",", "axis", "=", "None", ")", ")", ")", "# scipy default axis is 0", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "-", "1", ")", ",", "torch", ".", "as_tensor", "(", "hmean", "(", "xs", ",", "axis", "=", "None", ")", ")", ")", "# scipy default axis is 0", "\n", "\n", "# min max", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "'maximum'", ",", "dim", "=", "1", ")", ",", "torch", ".", "amax", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "'minimum'", ",", "dim", "=", "1", ")", ",", "torch", ".", "amin", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "np", ".", "inf", ",", "dim", "=", "1", ")", ",", "torch", ".", "amax", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_mean_generalized", "(", "xs", ",", "p", "=", "-", "np", ".", "inf", ",", "dim", "=", "1", ")", ",", "torch", ".", "amin", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math.test_p_norm": [[98, 157], ["torch.abs", "float", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.flatten", "torch.allclose", "torch.flatten", "torch.allclose", "torch.flatten", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.randn", "disent.nn.functional.torch_norm", "torch.linalg.norm", "disent.nn.functional.torch_norm", "torch.linalg.norm", "disent.nn.functional.torch_norm", "torch.linalg.norm", "pytest.raises", "torch.allclose", "pytest.raises", "torch.allclose", "disent.nn.functional.torch_dist", "torch.linalg.norm", "disent.nn.functional.torch_dist", "torch.linalg.norm", "disent.nn.functional.torch_dist", "torch.linalg.norm", "disent.nn.functional.torch_dist", "torch.linalg.norm", "torch.moveaxis", "disent.nn.functional.torch_norm", "torch.linalg.norm", "disent.nn.functional.torch_norm", "torch.linalg.norm", "torch.moveaxis", "disent.nn.functional.torch_dist", "torch.linalg.norm", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_norm_euclidean", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_norm_euclidean", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_norm_manhattan", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_norm_manhattan", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist_hamming", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist_hamming", "disent.nn.functional.torch_norm", "torch.linalg.norm", "disent.nn.functional.torch_norm", "torch.linalg.norm", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist", "disent.nn.functional.torch_dist"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm_euclidean", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm_euclidean", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm_manhattan", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm_manhattan", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist_hamming", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist_hamming", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist", "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist"], ["", "def", "test_p_norm", "(", ")", ":", "\n", "    ", "xs", "=", "torch", ".", "abs", "(", "torch", ".", "randn", "(", "2", ",", "1000", ",", "3", ",", "dtype", "=", "torch", ".", "float64", ")", ")", "\n", "\n", "inf", "=", "float", "(", "'inf'", ")", "\n", "\n", "# torch equivalents", "\n", "assert", "torch", ".", "allclose", "(", "torch_norm", "(", "xs", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "xs", ",", "ord", "=", "1", ",", "dim", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_norm", "(", "xs", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "xs", ",", "ord", "=", "2", ",", "dim", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_norm", "(", "xs", ",", "p", "=", "'maximum'", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "xs", ",", "ord", "=", "inf", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# torch equivalents -- less than zero [FAIL]", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'p-norm cannot have a p value less than 1'", ")", ":", "\n", "        ", "assert", "torch", ".", "allclose", "(", "torch_norm", "(", "xs", ",", "p", "=", "0", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "xs", ",", "ord", "=", "0", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'p-norm cannot have a p value less than 1'", ")", ":", "\n", "        ", "assert", "torch", ".", "allclose", "(", "torch_norm", "(", "xs", ",", "p", "=", "'minimum'", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "xs", ",", "ord", "=", "-", "inf", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# torch equivalents -- less than zero", "\n", "", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "p", "=", "0", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "xs", ",", "ord", "=", "0", ",", "dim", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "p", "=", "'minimum'", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "xs", ",", "ord", "=", "-", "inf", ",", "dim", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "p", "=", "0", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "xs", ",", "ord", "=", "0", ",", "dim", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "p", "=", "'minimum'", ",", "dim", "=", "-", "1", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "xs", ",", "ord", "=", "-", "inf", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# test other axes", "\n", "ys", "=", "torch", ".", "flatten", "(", "torch", ".", "moveaxis", "(", "xs", ",", "0", ",", "-", "1", ")", ",", "start_dim", "=", "1", ",", "end_dim", "=", "-", "1", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_norm", "(", "xs", ",", "p", "=", "2", ",", "dim", "=", "[", "0", ",", "-", "1", "]", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "ys", ",", "ord", "=", "2", ",", "dim", "=", "-", "1", ")", ")", "\n", "ys", "=", "torch", ".", "flatten", "(", "xs", ",", "start_dim", "=", "1", ",", "end_dim", "=", "-", "1", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_norm", "(", "xs", ",", "p", "=", "1", ",", "dim", "=", "[", "-", "2", ",", "-", "1", "]", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "ys", ",", "ord", "=", "1", ",", "dim", "=", "-", "1", ")", ")", "\n", "ys", "=", "torch", ".", "flatten", "(", "torch", ".", "moveaxis", "(", "xs", ",", "-", "1", ",", "0", ")", ",", "start_dim", "=", "1", ",", "end_dim", "=", "-", "1", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "p", "=", "0", ",", "dim", "=", "[", "0", ",", "1", "]", ")", ",", "torch", ".", "linalg", ".", "norm", "(", "ys", ",", "ord", "=", "0", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# check equal names", "\n", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "dim", "=", "1", ",", "p", "=", "'euclidean'", ")", ",", "torch_norm_euclidean", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "dim", "=", "1", ",", "p", "=", "2", ")", ",", "torch_norm_euclidean", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "dim", "=", "1", ",", "p", "=", "'manhattan'", ")", ",", "torch_norm_manhattan", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "dim", "=", "1", ",", "p", "=", "1", ")", ",", "torch_norm_manhattan", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "dim", "=", "1", ",", "p", "=", "'hamming'", ")", ",", "torch_dist_hamming", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dist", "(", "xs", ",", "dim", "=", "1", ",", "p", "=", "0", ")", ",", "torch_dist_hamming", "(", "xs", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# check axes", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "1", ",", "p", "=", "2", ",", "keepdim", "=", "False", ")", ".", "shape", "==", "(", "2", ",", "3", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "1", ",", "p", "=", "2", ",", "keepdim", "=", "True", ")", ".", "shape", "==", "(", "2", ",", "1", ",", "3", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "-", "1", ",", "p", "=", "1", ",", "keepdim", "=", "False", ")", ".", "shape", "==", "(", "2", ",", "1000", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "-", "1", ",", "p", "=", "1", ",", "keepdim", "=", "True", ")", ".", "shape", "==", "(", "2", ",", "1000", ",", "1", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "0", ",", "p", "=", "0", ",", "keepdim", "=", "False", ")", ".", "shape", "==", "(", "1000", ",", "3", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "0", ",", "p", "=", "0", ",", "keepdim", "=", "True", ")", ".", "shape", "==", "(", "1", ",", "1000", ",", "3", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "[", "0", ",", "-", "1", "]", ",", "p", "=", "-", "inf", ",", "keepdim", "=", "False", ")", ".", "shape", "==", "(", "1000", ",", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "[", "0", ",", "-", "1", "]", ",", "p", "=", "-", "inf", ",", "keepdim", "=", "True", ")", ".", "shape", "==", "(", "1", ",", "1000", ",", "1", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "[", "0", ",", "1", "]", ",", "p", "=", "inf", ",", "keepdim", "=", "False", ")", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "[", "0", ",", "1", "]", ",", "p", "=", "inf", ",", "keepdim", "=", "True", ")", ".", "shape", "==", "(", "1", ",", "1", ",", "3", ")", "\n", "\n", "# check norm over all", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "None", ",", "p", "=", "0", ",", "keepdim", "=", "False", ")", ".", "shape", "==", "(", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "None", ",", "p", "=", "0", ",", "keepdim", "=", "True", ")", ".", "shape", "==", "(", "1", ",", "1", ",", "1", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "None", ",", "p", "=", "1", ",", "keepdim", "=", "False", ")", ".", "shape", "==", "(", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "None", ",", "p", "=", "1", ",", "keepdim", "=", "True", ")", ".", "shape", "==", "(", "1", ",", "1", ",", "1", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "None", ",", "p", "=", "2", ",", "keepdim", "=", "False", ")", ".", "shape", "==", "(", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "None", ",", "p", "=", "2", ",", "keepdim", "=", "True", ")", ".", "shape", "==", "(", "1", ",", "1", ",", "1", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "None", ",", "p", "=", "inf", ",", "keepdim", "=", "False", ")", ".", "shape", "==", "(", ")", "\n", "assert", "torch_dist", "(", "xs", ",", "dim", "=", "None", ",", "p", "=", "inf", ",", "keepdim", "=", "True", ")", ".", "shape", "==", "(", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math.test_dct": [[159, 196], ["torch.randn", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "disent.nn.functional.torch_idct", "pytest.raises", "torch.allclose", "disent.nn.functional.torch_idct", "disent.nn.functional.torch_idct", "disent.nn.functional.torch_idct", "pytest.raises", "torch.allclose", "disent.nn.functional.torch_idct", "disent.nn.functional.torch_idct", "disent.nn.functional.torch_dct", "disent.nn.functional.torch_dct", "disent.nn.functional.torch_idct", "disent.nn.functional.torch_idct", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_idct2", "disent.nn.functional.torch_dct", "disent.nn.functional.torch_idct", "disent.nn.functional.torch_dct", "disent.nn.functional.torch_dct", "disent.nn.functional.torch_dct", "disent.nn.functional.torch_idct", "disent.nn.functional.torch_dct", "disent.nn.functional.torch_dct", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_dct2", "disent.nn.functional.torch_dct", "disent.nn.functional.torch_dct"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct"], ["", "def", "test_dct", "(", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "128", ",", "3", ",", "64", ",", "32", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "\n", "# chceck +ve dims", "\n", "assert", "torch", ".", "allclose", "(", "x", ",", "torch_idct", "(", "torch_dct", "(", "x", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", ")", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'does not support odd sized dimension'", ")", ":", "\n", "        ", "torch", ".", "allclose", "(", "x", ",", "torch_idct", "(", "torch_dct", "(", "x", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "assert", "torch", ".", "allclose", "(", "x", ",", "torch_idct", "(", "torch_dct", "(", "x", ",", "dim", "=", "2", ")", ",", "dim", "=", "2", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "x", ",", "torch_idct", "(", "torch_dct", "(", "x", ",", "dim", "=", "3", ")", ",", "dim", "=", "3", ")", ")", "\n", "\n", "# chceck -ve dims", "\n", "assert", "torch", ".", "allclose", "(", "x", ",", "torch_idct", "(", "torch_dct", "(", "x", ",", "dim", "=", "-", "4", ")", ",", "dim", "=", "-", "4", ")", ")", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'does not support odd sized dimension'", ")", ":", "\n", "        ", "torch", ".", "allclose", "(", "x", ",", "torch_idct", "(", "torch_dct", "(", "x", ",", "dim", "=", "-", "3", ")", ",", "dim", "=", "-", "3", ")", ")", "\n", "", "assert", "torch", ".", "allclose", "(", "x", ",", "torch_idct", "(", "torch_dct", "(", "x", ",", "dim", "=", "-", "2", ")", ",", "dim", "=", "-", "2", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "x", ",", "torch_idct", "(", "torch_dct", "(", "x", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# check defaults", "\n", "assert", "torch", ".", "allclose", "(", "torch_dct", "(", "x", ")", ",", "torch_dct", "(", "x", ",", "dim", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_idct", "(", "x", ")", ",", "torch_idct", "(", "x", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# check dct2", "\n", "assert", "torch", ".", "allclose", "(", "x", ",", "torch_idct2", "(", "torch_dct2", "(", "x", ")", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "x", ",", "torch_idct2", "(", "torch_dct2", "(", "x", ")", ")", ")", "\n", "\n", "# check defaults dct2", "\n", "assert", "torch", ".", "allclose", "(", "torch_dct2", "(", "x", ")", ",", "torch_dct2", "(", "x", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "2", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dct2", "(", "x", ")", ",", "torch_dct2", "(", "x", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_idct2", "(", "x", ")", ",", "torch_idct2", "(", "x", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "2", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_idct2", "(", "x", ")", ",", "torch_idct2", "(", "x", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "# check order dct2", "\n", "assert", "torch", ".", "allclose", "(", "torch_dct2", "(", "x", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "2", ")", ",", "torch_dct2", "(", "x", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dct2", "(", "x", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "4", ")", ",", "torch_dct2", "(", "x", ",", "dim1", "=", "-", "4", ",", "dim2", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_dct2", "(", "x", ",", "dim1", "=", "-", "4", ",", "dim2", "=", "-", "1", ")", ",", "torch_dct2", "(", "x", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "4", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_idct2", "(", "x", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "2", ")", ",", "torch_idct2", "(", "x", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_idct2", "(", "x", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "4", ")", ",", "torch_idct2", "(", "x", ",", "dim1", "=", "-", "4", ",", "dim2", "=", "-", "1", ")", ")", "\n", "assert", "torch", ".", "allclose", "(", "torch_idct2", "(", "x", ",", "dim1", "=", "-", "4", ",", "dim2", "=", "-", "1", ")", ",", "torch_idct2", "(", "x", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math.test_fft_conv2d": [[198, 210], ["disent.dataset.data.XYObjectData", "disent.dataset.DisentDataset", "disent.dataset.DisentDataset.gt_data.sample_random_factor_traversal", "disent.dataset.DisentDataset.dataset_batch_from_factors", "range", "disent.dataset.sampling.RandomSampler", "disent.nn.functional.torch_gaussian_kernel_2d", "disent.dataset.transform.ToImgTensorF32", "disent.nn.functional.torch_conv2d_channel_wise", "disent.nn.functional.torch_conv2d_channel_wise_fft", "torch.amax", "torch.abs"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel_2d", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d.torch_conv2d_channel_wise", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d.torch_conv2d_channel_wise_fft"], ["", "def", "test_fft_conv2d", "(", ")", ":", "\n", "    ", "data", "=", "XYObjectData", "(", ")", "\n", "dataset", "=", "DisentDataset", "(", "data", ",", "RandomSampler", "(", ")", ",", "transform", "=", "ToImgTensorF32", "(", ")", ",", "augment", "=", "None", ")", "\n", "# sample data", "\n", "factors", "=", "dataset", ".", "gt_data", ".", "sample_random_factor_traversal", "(", "f_idx", "=", "2", ")", "\n", "batch", "=", "dataset", ".", "dataset_batch_from_factors", "(", "factors", "=", "factors", ",", "mode", "=", "\"input\"", ")", "\n", "# test torch_conv2d_channel_wise variants", "\n", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "        ", "kernel", "=", "torch_gaussian_kernel_2d", "(", "sigma", "=", "i", ")", "\n", "out_cnv", "=", "torch_conv2d_channel_wise", "(", "signal", "=", "batch", ",", "kernel", "=", "kernel", ")", "[", "0", "]", "\n", "out_fft", "=", "torch_conv2d_channel_wise_fft", "(", "signal", "=", "batch", ",", "kernel", "=", "kernel", ")", "[", "0", "]", "\n", "assert", "torch", ".", "amax", "(", "torch", ".", "abs", "(", "out_cnv", "-", "out_fft", ")", ")", "<", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_data_similarity.test_xysquares_similarity": [[38, 50], ["disent.dataset.data.XYSquaresData", "disent.dataset.data.XYSquaresMinimalData", "len", "numpy.random.randint", "numpy.allclose", "numpy.allclose", "len", "len", "numpy.allclose"], "function", ["None"], ["def", "test_xysquares_similarity", "(", ")", ":", "\n", "    ", "data_org", "=", "XYSquaresData", "(", ")", "\n", "data_min", "=", "XYSquaresMinimalData", "(", ")", "\n", "# check lengths", "\n", "assert", "len", "(", "data_org", ")", "==", "len", "(", "data_min", ")", "\n", "n", "=", "len", "(", "data_min", ")", "\n", "# check items", "\n", "for", "i", "in", "np", ".", "random", ".", "randint", "(", "0", ",", "n", ",", "size", "=", "100", ")", ":", "\n", "        ", "assert", "np", ".", "allclose", "(", "data_org", "[", "i", "]", ",", "data_min", "[", "i", "]", ")", "\n", "# check bounds", "\n", "", "assert", "np", ".", "allclose", "(", "data_org", "[", "0", "]", ",", "data_min", "[", "0", "]", ")", "\n", "assert", "np", ".", "allclose", "(", "data_org", "[", "n", "-", "1", "]", ",", "data_min", "[", "n", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_data_similarity.test_xyobject_similarity": [[52, 62], ["disent.dataset.data.XYObjectData.COLOR_PALETTES_3.keys", "disent.dataset.data.XYObjectData", "disent.dataset.data.XYObjectShadedData", "numpy.random.randint", "len", "len", "len", "numpy.allclose", "numpy.prod"], "function", ["None"], ["", "def", "test_xyobject_similarity", "(", ")", ":", "\n", "    ", "for", "palette", "in", "XYObjectData", ".", "COLOR_PALETTES_3", ".", "keys", "(", ")", ":", "\n", "# create", "\n", "        ", "data0", "=", "XYObjectData", "(", "palette", "=", "palette", ")", "\n", "data1", "=", "XYObjectShadedData", "(", "palette", "=", "palette", ")", "\n", "assert", "len", "(", "data0", ")", "==", "len", "(", "data1", ")", "\n", "assert", "data0", ".", "factor_sizes", "==", "(", "*", "data1", ".", "factor_sizes", "[", ":", "-", "2", "]", ",", "np", ".", "prod", "(", "data1", ".", "factor_sizes", "[", "-", "2", ":", "]", ")", ")", "\n", "# check random", "\n", "for", "i", "in", "np", ".", "random", ".", "randint", "(", "len", "(", "data0", ")", ",", "size", "=", "100", ")", ":", "\n", "            ", "assert", "np", ".", "allclose", "(", "data0", "[", "i", "]", ",", "data1", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_data_similarity.test_xyobject_grey_similarity": [[64, 74], ["disent.dataset.data.XYObjectData.COLOR_PALETTES_1.keys", "disent.dataset.data.XYObjectData", "disent.dataset.data.XYObjectShadedData", "numpy.random.randint", "len", "len", "len", "numpy.allclose", "numpy.prod"], "function", ["None"], ["", "", "", "def", "test_xyobject_grey_similarity", "(", ")", ":", "\n", "    ", "for", "palette", "in", "XYObjectData", ".", "COLOR_PALETTES_1", ".", "keys", "(", ")", ":", "\n", "# create", "\n", "        ", "data0", "=", "XYObjectData", "(", "palette", "=", "palette", ",", "rgb", "=", "False", ")", "\n", "data1", "=", "XYObjectShadedData", "(", "palette", "=", "palette", ",", "rgb", "=", "False", ")", "\n", "assert", "len", "(", "data0", ")", "==", "len", "(", "data1", ")", "\n", "assert", "data0", ".", "factor_sizes", "==", "(", "*", "data1", ".", "factor_sizes", "[", ":", "-", "2", "]", ",", "np", ".", "prod", "(", "data1", ".", "factor_sizes", "[", "-", "2", ":", "]", ")", ")", "\n", "# check random", "\n", "for", "i", "in", "np", ".", "random", ".", "randint", "(", "len", "(", "data0", ")", ",", "size", "=", "100", ")", ":", "\n", "            ", "assert", "np", ".", "allclose", "(", "data0", "[", "i", "]", ",", "data1", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_transform.test_gaussian_kernels": [[38, 50], ["torch.stack().max", "disent.nn.functional.torch_gaussian_kernel", "disent.nn.functional.torch_gaussian_kernel", "disent.nn.functional.torch_gaussian_kernel", "disent.nn.functional.torch_gaussian_kernel", "disent.nn.functional.torch_gaussian_kernel_2d", "disent.nn.functional.torch_gaussian_kernel_2d", "disent.nn.functional.torch_gaussian_kernel_2d", "torch.stack", "r", "r", "r", "r", "r", "r", "r", "torch.meshgrid", "torch.arange"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel_2d", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel_2d", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel_2d"], ["def", "test_gaussian_kernels", "(", ")", ":", "\n", "\n", "    ", "r", "=", "lambda", "*", "shape", ":", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "*", "(", "(", "torch", ".", "arange", "(", "s", ")", "+", "1", ")", "for", "s", "in", "shape", ")", ")", ",", "dim", "=", "-", "1", ")", ".", "max", "(", "dim", "=", "-", "1", ")", ".", "values", "\n", "\n", "assert", "(", "9", ",", ")", "==", "torch_gaussian_kernel", "(", "sigma", "=", "1.0", ",", "truncate", "=", "4.0", ")", ".", "shape", "\n", "assert", "(", "5", ",", "41", ")", "==", "torch_gaussian_kernel", "(", "sigma", "=", "r", "(", "5", ")", ",", "truncate", "=", "4.0", ")", ".", "shape", "\n", "assert", "(", "5", ",", "3", ",", "41", ")", "==", "torch_gaussian_kernel", "(", "sigma", "=", "r", "(", "5", ",", "3", ")", ",", "truncate", "=", "4.0", ")", ".", "shape", "\n", "assert", "(", "5", ",", "7", ",", "71", ")", "==", "torch_gaussian_kernel", "(", "sigma", "=", "r", "(", "5", ",", "1", ")", ",", "truncate", "=", "r", "(", "1", ",", "7", ")", ")", ".", "shape", "\n", "\n", "assert", "(", "9", ",", "7", ")", "==", "torch_gaussian_kernel_2d", "(", "sigma", "=", "1.0", ",", "truncate", "=", "4.0", ",", "sigma_b", "=", "1.0", ",", "truncate_b", "=", "3.0", ")", ".", "shape", "\n", "assert", "(", "5", ",", "41", ",", "9", ")", "==", "torch_gaussian_kernel_2d", "(", "sigma", "=", "r", "(", "5", ")", ",", "truncate", "=", "4.0", ",", "sigma_b", "=", "1.0", ",", "truncate_b", "=", "4.0", ")", ".", "shape", "\n", "assert", "(", "5", ",", "7", ",", "41", ",", "57", ")", "==", "torch_gaussian_kernel_2d", "(", "sigma", "=", "r", "(", "5", ",", "1", ")", ",", "truncate", "=", "4.0", ",", "sigma_b", "=", "r", "(", "1", ",", "7", ")", ",", "truncate_b", "=", "4.0", ")", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_transform.test_fft_guassian_blur_sigmas": [[52, 60], ["disent.dataset.transform._augment._expand_to_min_max_tuples", "disent.dataset.transform._augment._expand_to_min_max_tuples", "disent.dataset.transform._augment._expand_to_min_max_tuples", "pytest.raises", "disent.dataset.transform._augment._expand_to_min_max_tuples", "pytest.raises", "disent.dataset.transform._augment._expand_to_min_max_tuples"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._expand_to_min_max_tuples", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._expand_to_min_max_tuples", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._expand_to_min_max_tuples", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._expand_to_min_max_tuples", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._expand_to_min_max_tuples"], ["", "def", "test_fft_guassian_blur_sigmas", "(", ")", ":", "\n", "    ", "assert", "_expand_to_min_max_tuples", "(", "1.0", ")", "==", "(", "(", "1.0", ",", "1.0", ")", ",", "(", "1.0", ",", "1.0", ")", ")", "\n", "assert", "_expand_to_min_max_tuples", "(", "[", "0.0", ",", "1.0", "]", ")", "==", "(", "(", "0.0", ",", "1.0", ")", ",", "(", "0.0", ",", "1.0", ")", ")", "\n", "assert", "_expand_to_min_max_tuples", "(", "[", "[", "0.0", ",", "1.0", "]", ",", "[", "1.0", ",", "2.0", "]", "]", ")", "==", "(", "(", "0.0", ",", "1.0", ")", ",", "(", "1.0", ",", "2.0", ")", ")", "\n", "with", "pytest", ".", "raises", "(", "Exception", ")", ":", "\n", "        ", "_expand_to_min_max_tuples", "(", "[", "[", "0.0", ",", "1.0", "]", ",", "1.0", "]", ")", "\n", "", "with", "pytest", ".", "raises", "(", "Exception", ")", ":", "\n", "        ", "_expand_to_min_max_tuples", "(", "[", "0.0", ",", "[", "1.0", ",", "2.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_transform.test_fft_guassian_blur": [[62, 65], ["disent.dataset.transform.FftGaussianBlur", "disent.dataset.transform.FftGaussianBlur.", "torch.randn"], "function", ["None"], ["", "", "def", "test_fft_guassian_blur", "(", ")", ":", "\n", "    ", "fn", "=", "FftGaussianBlur", "(", "sigma", "=", "1.0", ",", "truncate", "=", "3.0", ")", "\n", "fn", "(", "torch", ".", "randn", "(", "256", ",", "3", ",", "64", ",", "64", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_models.test_ae_models": [[33, 55], ["pytest.mark.parametrize", "disent.model.AutoEncoder", "encoder_cls", "decoder_cls", "torch.no_grad", "torch.randn", "disent.model.AutoEncoder.encode", "disent.model.AutoEncoder.decode"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "[", "'encoder_cls'", ",", "'decoder_cls'", "]", ",", "[", "\n", "[", "EncoderConv64", ",", "DecoderConv64", "]", ",", "\n", "[", "EncoderConv64Norm", ",", "DecoderConv64Norm", "]", ",", "\n", "[", "EncoderFC", ",", "DecoderFC", "]", ",", "\n", "[", "EncoderLinear", ",", "DecoderLinear", "]", ",", "\n", "]", ")", "\n", "def", "test_ae_models", "(", "encoder_cls", ":", "DisentEncoder", ",", "decoder_cls", ":", "DisentDecoder", ")", ":", "\n", "    ", "x_shape", ",", "z_size", "=", "(", "3", ",", "64", ",", "64", ")", ",", "8", "\n", "# create model", "\n", "vae", "=", "AutoEncoder", "(", "\n", "encoder_cls", "(", "x_shape", "=", "x_shape", ",", "z_size", "=", "z_size", ",", "z_multiplier", "=", "2", ")", ",", "\n", "decoder_cls", "(", "x_shape", "=", "x_shape", ",", "z_size", "=", "z_size", ",", "z_multiplier", "=", "1", ")", ",", "\n", ")", "\n", "# feed forward", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "x", "=", "torch", ".", "randn", "(", "1", ",", "*", "x_shape", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "assert", "x", ".", "shape", "==", "(", "1", ",", "*", "x_shape", ")", "\n", "z0", ",", "z1", "=", "vae", ".", "encode", "(", "x", ",", "chunk", "=", "True", ")", "\n", "assert", "z0", ".", "shape", "==", "(", "1", ",", "z_size", ")", "\n", "assert", "z1", ".", "shape", "==", "(", "1", ",", "z_size", ")", "\n", "y", "=", "vae", ".", "decode", "(", "z0", ")", "\n", "assert", "y", ".", "shape", "==", "(", "1", ",", "*", "x_shape", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_samplers.TestEpisodesData._load_episode_observations": [[39, 45], ["numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn"], "methods", ["None"], ["    ", "def", "_load_episode_observations", "(", "self", ")", "->", "List", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "return", "[", "\n", "np", ".", "random", ".", "randn", "(", "57", ",", "3", ",", "64", ",", "64", ")", ",", "\n", "np", ".", "random", ".", "randn", "(", "42", ",", "3", ",", "64", ",", "64", ")", ",", "\n", "np", ".", "random", ".", "randn", "(", "26", ",", "3", ",", "64", ",", "64", ")", ",", "\n", "np", ".", "random", ".", "randn", "(", "97", ",", "3", ",", "64", ",", "64", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_samplers.test_samplers": [[48, 121], ["pytest.mark.parametrize", "disent.dataset.DisentDataset", "test_samplers.test_samplers.check_samples"], "function", ["None"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "[", "'dataset'", ",", "'num_samples'", ",", "'check_mode'", ",", "'sampler'", "]", ",", "[", "\n", "[", "XYObjectData", "(", ")", ",", "1", ",", "'first'", ",", "SingleSampler", "(", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "1", ",", "'first'", ",", "GroundTruthSingleSampler", "(", ")", "]", ",", "\n", "\n", "# original AdaVAE sampling method", "\n", "[", "XYObjectData", "(", ")", ",", "2", ",", "'first'", ",", "GroundTruthPairOrigSampler", "(", "p_k", "=", "1", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "2", ",", "'first'", ",", "GroundTruthPairOrigSampler", "(", "p_k", "=", "2", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "2", ",", "'first'", ",", "GroundTruthPairOrigSampler", "(", "p_k", "=", "-", "1", ")", "]", ",", "\n", "\n", "# TODO: consider removing the pair sampler... it is difficult to maintain and confusing", "\n", "[", "XYObjectData", "(", ")", ",", "2", ",", "'first'", ",", "GroundTruthPairSampler", "(", ")", "]", ",", "\n", "\n", "# TODO: consider removing the triplet sampler... it is difficult to maintain and confusing", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthTripleSampler", "(", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthTripleSampler", "(", "swap_metric", "=", "'k'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthTripleSampler", "(", "swap_metric", "=", "'manhattan'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthTripleSampler", "(", "swap_metric", "=", "'manhattan_norm'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthTripleSampler", "(", "swap_metric", "=", "'euclidean'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthTripleSampler", "(", "swap_metric", "=", "'euclidean_norm'", ")", "]", ",", "\n", "# [XYObjectData(), 3, 'first', GroundTruthTripleSampler(n_k_sample_mode='offset')],  # TODO: these are broken", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthTripleSampler", "(", "n_k_sample_mode", "=", "'bounded_below'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthTripleSampler", "(", "n_k_sample_mode", "=", "'random'", ")", "]", ",", "\n", "# [XYObjectData(), 3, 'first', GroundTruthTripleSampler(n_radius_sample_mode='offset')],  # TODO: these are broken", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthTripleSampler", "(", "n_radius_sample_mode", "=", "'bounded_below'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthTripleSampler", "(", "n_radius_sample_mode", "=", "'random'", ")", "]", ",", "\n", "\n", "[", "XYObjectData", "(", ")", ",", "1", ",", "'first'", ",", "GroundTruthDistSampler", "(", "num_samples", "=", "1", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "2", ",", "'first'", ",", "GroundTruthDistSampler", "(", "num_samples", "=", "2", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthDistSampler", "(", "num_samples", "=", "3", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthDistSampler", "(", "num_samples", "=", "3", ",", "triplet_sample_mode", "=", "'random'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthDistSampler", "(", "num_samples", "=", "3", ",", "triplet_sample_mode", "=", "'factors'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthDistSampler", "(", "num_samples", "=", "3", ",", "triplet_sample_mode", "=", "'manhattan'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthDistSampler", "(", "num_samples", "=", "3", ",", "triplet_sample_mode", "=", "'manhattan_scaled'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthDistSampler", "(", "num_samples", "=", "3", ",", "triplet_sample_mode", "=", "'combined'", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "GroundTruthDistSampler", "(", "num_samples", "=", "3", ",", "triplet_sample_mode", "=", "'combined_scaled'", ")", "]", ",", "\n", "\n", "[", "XYObjectData", "(", ")", ",", "1", ",", "'first'", ",", "RandomSampler", "(", "num_samples", "=", "1", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "2", ",", "'first'", ",", "RandomSampler", "(", "num_samples", "=", "2", ")", "]", ",", "\n", "[", "XYObjectData", "(", ")", ",", "3", ",", "'first'", ",", "RandomSampler", "(", "num_samples", "=", "3", ")", "]", ",", "\n", "\n", "[", "TestEpisodesData", "(", ")", ",", "1", ",", "'any'", ",", "RandomEpisodeSampler", "(", "num_samples", "=", "1", ")", "]", ",", "\n", "[", "TestEpisodesData", "(", ")", ",", "2", ",", "'any'", ",", "RandomEpisodeSampler", "(", "num_samples", "=", "2", ")", "]", ",", "\n", "[", "TestEpisodesData", "(", ")", ",", "3", ",", "'any'", ",", "RandomEpisodeSampler", "(", "num_samples", "=", "3", ")", "]", ",", "\n", "[", "TestEpisodesData", "(", ")", ",", "3", ",", "'any'", ",", "RandomEpisodeSampler", "(", "num_samples", "=", "3", ",", "sample_radius", "=", "3", ")", "]", ",", "# sample_radius >= num_samples", "\n", "[", "TestEpisodesData", "(", ")", ",", "3", ",", "'any'", ",", "RandomEpisodeSampler", "(", "num_samples", "=", "3", ",", "sample_radius", "=", "4", ")", "]", ",", "\n", "[", "TestEpisodesData", "(", ")", ",", "3", ",", "'any'", ",", "RandomEpisodeSampler", "(", "num_samples", "=", "3", ",", "sample_radius", "=", "-", "1", ")", "]", ",", "\n", "]", ")", "\n", "def", "test_samplers", "(", "dataset", ",", "num_samples", ":", "int", ",", "check_mode", ":", "Union", "[", "Literal", "[", "'first'", "]", ",", "Literal", "[", "'any'", "]", "]", ",", "sampler", ":", "BaseDisentSampler", ")", ":", "\n", "# check dataset", "\n", "    ", "wrapper", "=", "DisentDataset", "(", "dataset", ",", "sampler", ")", "\n", "assert", "len", "(", "wrapper", ")", "==", "len", "(", "dataset", ")", "\n", "assert", "sampler", ".", "num_samples", "==", "num_samples", "\n", "# check dataset init & samples", "\n", "for", "batch", "in", "wrapper", ":", "\n", "        ", "assert", "isinstance", "(", "batch", ",", "dict", ")", "\n", "assert", "len", "(", "batch", "[", "'x_targ'", "]", ")", "==", "sampler", ".", "num_samples", "\n", "break", "\n", "# check sample", "\n", "", "def", "check_samples", "(", "i", ":", "int", ")", ":", "\n", "        ", "indices", "=", "sampler", "(", "i", ")", "\n", "assert", "isinstance", "(", "indices", ",", "tuple", ")", "\n", "assert", "len", "(", "indices", ")", "==", "num_samples", "\n", "if", "check_mode", "==", "'first'", ":", "\n", "            ", "assert", "i", "==", "indices", "[", "0", "]", "\n", "", "elif", "check_mode", "==", "'any'", ":", "\n", "            ", "assert", "i", "in", "indices", "\n", "", "else", ":", "# pragma: no cover", "\n", "            ", "raise", "RuntimeError", "(", "'test mode is invalid!'", ")", "\n", "# check indices", "\n", "", "", "check_samples", "(", "0", ")", "\n", "check_samples", "(", "len", "(", "dataset", ")", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "check_samples", "(", "random", ".", "randint", "(", "0", ",", "len", "(", "dataset", ")", "-", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_experiment.test_experiment_run": [[45, 70], ["pytest.mark.parametrize", "tests.util.temp_environ", "tests.util.temp_sys_args", "experiment.util.hydra_main.hydra_main", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.tests.util.temp_environ", "home.repos.pwc.inspect_result.nmichlo_disent.tests.util.temp_sys_args", "home.repos.pwc.inspect_result.nmichlo_disent.util.hydra_main.hydra_main"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "(", "'env'", ",", "'args'", ")", ",", "[", "\n", "# test the standard configs", "\n", "(", "dict", "(", ")", ",", "[", "'run_action=skip'", "]", ")", ",", "\n", "(", "dict", "(", ")", ",", "[", "'run_action=prepare_data'", "]", ")", ",", "\n", "(", "dict", "(", ")", ",", "[", "'run_action=train'", "]", ")", ",", "\n", "# test the configs with the research components", "\n", "# -- we need to modify the search path", "\n", "# -- we need to register all the components", "\n", "(", "dict", "(", "DISENT_CONFIGS_PREPEND", "=", "EXAMPLE_CFG_DIR", ")", ",", "[", "'run_action=train'", ",", "'dataset=E--xyblocks'", ",", "'metrics=test'", ",", "'framework=E--si-betavae'", ",", "'schedule=adanegtvae_up_all'", "]", ")", ",", "\n", "(", "dict", "(", "DISENT_CONFIGS_PREPEND", "=", "EXAMPLE_CFG_DIR", ")", ",", "[", "'run_action=train'", ",", "'dataset=E--mask-dthr-pseudorandom.yaml'", ",", "'metrics=none'", ",", "'framework=adavae_os'", ",", "'schedule=beta_cyclic'", "]", ")", ",", "\n", "]", ")", "\n", "def", "test_experiment_run", "(", "env", ",", "args", ")", ":", "\n", "# show full errors in hydra", "\n", "    ", "os", ".", "environ", "[", "'HYDRA_FULL_ERROR'", "]", "=", "'1'", "\n", "\n", "# temporarily set the environment and the arguments", "\n", "with", "temp_environ", "(", "env", ")", ",", "temp_sys_args", "(", "[", "experiment_run", ".", "__file__", ",", "*", "args", "]", ")", ":", "\n", "# run the hydra experiment", "\n", "# 1. sets the default search path to `experiment/config`", "\n", "# 2. add to the search path with the `DISENT_CONFIGS_PREPEND` and `DISENT_CONFIGS_APPEND` environment variables", "\n", "# 3. enable the ${exit:<msg>} and various other resolvers for omegaconf/hydra", "\n", "        ", "hydra_main", "(", "\n", "callback", "=", "experiment_run", ".", "run_action", ",", "\n", "config_name", "=", "'config_test'", ",", "\n", "log_level", "=", "logging", ".", "DEBUG", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_docs_examples.test_docs_examples": [[42, 53], ["pytest.mark.parametrize", "disent.util._set_test_run", "tests.util.no_stdout", "importlib.import_module", "os.path.relpath().replace", "glob.glob", "os.path.join", "os.path.relpath"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__._set_test_run", "home.repos.pwc.inspect_result.nmichlo_disent.tests.util.no_stdout"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"module\"", ",", "[", "\n", "os", ".", "path", ".", "relpath", "(", "path", ",", "ROOT_DIR", ")", ".", "replace", "(", "'/'", ",", "'.'", ")", "[", ":", "-", "3", "]", "\n", "for", "path", "in", "glob", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'docs/examples/overview_**.py'", ")", ")", "\n", "]", ")", "\n", "def", "test_docs_examples", "(", "capsys", ",", "module", ")", ":", "\n", "# make sure everything doesnt take 5 years to run", "\n", "    ", "_set_test_run", "(", ")", "\n", "# run all the files in the examples folder", "\n", "import", "importlib", "\n", "with", "no_stdout", "(", ")", ":", "\n", "        ", "importlib", ".", "import_module", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_registry.test_registry_loading": [[61, 72], ["pytest.mark.parametrize", "register_to_disent", "register_to_disent", "COUNTS.keys"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.code.__init__.register_to_disent", "home.repos.pwc.inspect_result.nmichlo_disent.code.__init__.register_to_disent"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'registry_key'", ",", "COUNTS", ".", "keys", "(", ")", ")", "\n", "def", "test_registry_loading", "(", "registry_key", ")", ":", "\n", "    ", "from", "docs", ".", "examples", ".", "extend_experiment", ".", "code", "import", "register_to_disent", "\n", "register_to_disent", "(", ")", "\n", "register_to_disent", "(", ")", "# must be able to call more than once!", "\n", "# load everything and check the counts", "\n", "count", "=", "0", "\n", "for", "example", "in", "R", ".", "REGISTRIES", "[", "registry_key", "]", ":", "\n", "        ", "loaded", "=", "R", ".", "REGISTRIES", "[", "registry_key", "]", "[", "example", "]", "\n", "count", "+=", "1", "\n", "", "assert", "count", "==", "COUNTS", "[", "registry_key", "]", ",", "f'invalid count for: {registry_key}'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img.test_torch_to_images_basic": [[43, 55], ["torch.rand", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images"], ["def", "test_torch_to_images_basic", "(", ")", ":", "\n", "    ", "inp_float", "=", "torch", ".", "rand", "(", "8", ",", "3", ",", "64", ",", "64", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "inp_uint8", "=", "(", "inp_float", "*", "127", "+", "63", ")", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "# check runs", "\n", "out", "=", "torch_to_images", "(", "inp_float", ")", "\n", "assert", "out", ".", "dtype", "==", "torch", ".", "uint8", "\n", "out", "=", "torch_to_images", "(", "inp_uint8", ")", "\n", "assert", "out", ".", "dtype", "==", "torch", ".", "uint8", "\n", "out", "=", "torch_to_images", "(", "inp_float", ",", "in_dtype", "=", "None", ",", "out_dtype", "=", "None", ")", "\n", "assert", "out", ".", "dtype", "==", "inp_float", ".", "dtype", "\n", "out", "=", "torch_to_images", "(", "inp_uint8", ",", "in_dtype", "=", "None", ",", "out_dtype", "=", "None", ")", "\n", "assert", "out", ".", "dtype", "==", "inp_uint8", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img.test_torch_to_images_permutations": [[57, 74], ["torch.rand", "test_to_img.test_torch_to_images_permutations.check_all"], "function", ["None"], ["", "def", "test_torch_to_images_permutations", "(", ")", ":", "\n", "    ", "inp_float", "=", "torch", ".", "rand", "(", "8", ",", "3", ",", "64", ",", "64", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "inp_uint8", "=", "(", "inp_float", "*", "127", "+", "63", ")", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "\n", "# general checks", "\n", "def", "check_all", "(", "inputs", ",", "in_dtype", "=", "None", ")", ":", "\n", "        ", "float_results", ",", "int_results", "=", "[", "]", ",", "[", "]", "\n", "for", "out_dtype", "in", "_ALLOWED_DTYPES", ":", "\n", "            ", "out", "=", "torch_to_images", "(", "inputs", ",", "in_dtype", "=", "in_dtype", ",", "out_dtype", "=", "out_dtype", ")", "\n", "stats", "=", "torch", ".", "stack", "(", "[", "out", ".", "min", "(", ")", ".", "to", "(", "torch", ".", "float64", ")", ",", "out", ".", "max", "(", ")", ".", "to", "(", "torch", ".", "float64", ")", ",", "out", ".", "to", "(", "dtype", "=", "torch", ".", "float64", ")", ".", "mean", "(", ")", "]", ")", "\n", "(", "float_results", "if", "out_dtype", ".", "is_floating_point", "else", "int_results", ")", ".", "append", "(", "stats", ")", "\n", "", "for", "a", ",", "b", "in", "zip", "(", "float_results", "[", ":", "-", "1", "]", ",", "float_results", "[", "1", ":", "]", ")", ":", "assert", "torch", ".", "allclose", "(", "a", ",", "b", ")", "\n", "for", "a", ",", "b", "in", "zip", "(", "int_results", "[", ":", "-", "1", "]", ",", "int_results", "[", "1", ":", "]", ")", ":", "assert", "torch", ".", "allclose", "(", "a", ",", "b", ")", "\n", "\n", "# check type permutations", "\n", "", "check_all", "(", "inp_float", ",", "torch", ".", "float32", ")", "\n", "check_all", "(", "inp_uint8", ",", "torch", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img.test_torch_to_images_preserve_type": [[76, 81], ["disent.util.visualize.vis_img.torch_to_images", "torch.rand"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images"], ["", "def", "test_torch_to_images_preserve_type", "(", ")", ":", "\n", "    ", "for", "dtype", "in", "_ALLOWED_DTYPES", ":", "\n", "        ", "tensor", "=", "(", "torch", ".", "rand", "(", "8", ",", "3", ",", "64", ",", "64", ")", "*", "(", "1", "if", "dtype", ".", "is_floating_point", "else", "255", ")", ")", ".", "to", "(", "dtype", ")", "\n", "out", "=", "torch_to_images", "(", "tensor", ",", "in_dtype", "=", "dtype", ",", "out_dtype", "=", "dtype", ",", "clamp_mode", "=", "'warn'", ")", "\n", "assert", "out", ".", "dtype", "==", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img.test_torch_to_images_arg_helper": [[83, 86], ["disent.util.visualize.vis_img._torch_to_images_normalise_args", "disent.util.visualize.vis_img._torch_to_images_normalise_args"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._torch_to_images_normalise_args", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._torch_to_images_normalise_args"], ["", "", "def", "test_torch_to_images_arg_helper", "(", ")", ":", "\n", "    ", "assert", "_torch_to_images_normalise_args", "(", "(", "64", ",", "128", ",", "3", ")", ",", "torch", ".", "uint8", ",", "'HWC'", ",", "'CHW'", ",", "None", ",", "None", ")", "==", "(", "(", "-", "1", ",", "-", "3", ",", "-", "2", ")", ",", "torch", ".", "uint8", ",", "torch", ".", "uint8", ",", "-", "3", ")", "\n", "assert", "_torch_to_images_normalise_args", "(", "(", "64", ",", "128", ",", "3", ")", ",", "torch", ".", "uint8", ",", "'HWC'", ",", "'HWC'", ",", "None", ",", "None", ")", "==", "(", "(", "-", "3", ",", "-", "2", ",", "-", "1", ")", ",", "torch", ".", "uint8", ",", "torch", ".", "uint8", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img.test_torch_to_images_invalid_args": [[88, 126], ["torch.rand", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "torch.rand", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images"], ["", "def", "test_torch_to_images_invalid_args", "(", ")", ":", "\n", "    ", "inp_float", "=", "torch", ".", "rand", "(", "8", ",", "3", ",", "64", ",", "64", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# check tensor", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "\"images must be of type\"", ")", ":", "\n", "        ", "torch_to_images", "(", "tensor", "=", "None", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'dim \"C\", required: 1 or 3'", ")", ":", "\n", "        ", "torch_to_images", "(", "tensor", "=", "torch", ".", "rand", "(", "8", ",", "2", ",", "16", ",", "16", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'dim \"C\", required: 1 or 3'", ")", ":", "\n", "        ", "torch_to_images", "(", "tensor", "=", "torch", ".", "rand", "(", "8", ",", "16", ",", "16", ",", "3", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'images must have 3 or more dimensions corresponding to'", ")", ":", "\n", "        ", "torch_to_images", "(", "tensor", "=", "torch", ".", "rand", "(", "16", ",", "16", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n", "# check dims", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "\"in_dims must be of type\"", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "in_dims", "=", "None", ")", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "\"out_dims must be of type\"", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "out_dims", "=", "None", ")", "\n", "", "with", "pytest", ".", "raises", "(", "KeyError", ",", "match", "=", "\"in_dims contains the symbols: 'INVALID', must contain only permutations of: 'CHW'\"", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "in_dims", "=", "'INVALID'", ")", "\n", "", "with", "pytest", ".", "raises", "(", "KeyError", ",", "match", "=", "\"out_dims contains the symbols: 'INVALID', must contain only permutations of: 'CHW'\"", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "out_dims", "=", "'INVALID'", ")", "\n", "", "with", "pytest", ".", "raises", "(", "KeyError", ",", "match", "=", "\"in_dims contains the symbols: 'CHWW', must contain only permutations of: 'CHW'\"", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "in_dims", "=", "'CHWW'", ")", "\n", "", "with", "pytest", ".", "raises", "(", "KeyError", ",", "match", "=", "\"out_dims contains the symbols: 'CHWW', must contain only permutations of: 'CHW'\"", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "out_dims", "=", "'CHWW'", ")", "\n", "\n", "# check dtypes", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "\"images dtype: torch.float32 does not match in_dtype: torch.uint8\"", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "in_dtype", "=", "torch", ".", "uint8", ")", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "'in_dtype is not allowed'", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "in_dtype", "=", "torch", ".", "complex64", ")", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "'out_dtype is not allowed'", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "out_dtype", "=", "torch", ".", "complex64", ")", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "'in_dtype is not allowed'", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "in_dtype", "=", "torch", ".", "float16", ")", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "'out_dtype is not allowed'", ")", ":", "\n", "        ", "torch_to_images", "(", "inp_float", ",", "out_dtype", "=", "torch", ".", "float16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check": [[128, 134], ["isinstance", "img.numpy.numpy", "numpy.isclose", "numpy.isclose", "img.numpy.min", "img.numpy.max", "img.numpy.min", "img.numpy.max", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.float32", "torch.float32", "torch.float32", "torch.float32", "torch.float64", "torch.float64", "torch.float64", "torch.float64", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.float32", "torch.float32", "torch.float32", "torch.float32", "torch.uint8", "torch.uint8", "torch.uint8", "torch.uint8", "torch.float32", "torch.float32", "torch.float32", "torch.float32"], "function", ["None"], ["", "", "def", "_check", "(", "target_shape", ",", "target_dtype", ",", "img", ",", "m", "=", "None", ",", "M", "=", "None", ")", ":", "\n", "    ", "assert", "img", ".", "dtype", "==", "target_dtype", "\n", "assert", "img", ".", "shape", "==", "target_shape", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "Tensor", ")", ":", "img", "=", "img", ".", "numpy", "(", ")", "\n", "if", "m", "is", "not", "None", ":", "assert", "np", ".", "isclose", "(", "img", ".", "min", "(", ")", ",", "m", ")", ",", "f'min mismatch: {img.min()} (actual) != {m} (expected)'", "\n", "if", "M", "is", "not", "None", ":", "assert", "np", ".", "isclose", "(", "img", ".", "max", "(", ")", ",", "M", ")", ",", "f'max mismatch: {img.max()} (actual) != {M} (expected)'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img.test_torch_to_images_adv": [[136, 223], ["torch.rand", "torch.randint", "torch.rand", "torch.randint", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images", "pytest.raises", "disent.util.visualize.vis_img.torch_to_images"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images"], ["", "def", "test_torch_to_images_adv", "(", ")", ":", "\n", "# CHW", "\n", "    ", "nchw_float", "=", "torch", ".", "rand", "(", "8", ",", "3", ",", "64", ",", "32", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "nchw_uint8", "=", "torch", ".", "randint", "(", "0", ",", "255", ",", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "# HWC", "\n", "nhwc_float", "=", "torch", ".", "rand", "(", "8", ",", "64", ",", "32", ",", "3", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "nhwc_uint8", "=", "torch", ".", "randint", "(", "0", ",", "255", ",", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_float", ")", ")", "# make sure default for numpy is CHW", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ")", ")", "# make sure default for numpy is CHW", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_float", ",", "'CHW'", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_float", ",", "'HWC'", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ")", ")", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_float", ",", "'CHW'", ",", "'HWC'", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'HWC'", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "'HWC'", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'HWC'", ")", ")", "\n", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_float", ",", "'CHW'", ",", "'CHW'", ")", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'CHW'", ")", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "'CHW'", ")", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'CHW'", ")", ")", "\n", "\n", "# random permute", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'CHW'", ")", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'CHW'", ")", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "32", ",", "64", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'CWH'", ")", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "32", ",", "64", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'CWH'", ")", ")", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "3", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'HCW'", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "3", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'HCW'", ")", ")", "\n", "_check", "(", "(", "8", ",", "32", ",", "3", ",", "64", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'WCH'", ")", ")", "\n", "_check", "(", "(", "8", ",", "32", ",", "3", ",", "64", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'WCH'", ")", ")", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'HWC'", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'HWC'", ")", ")", "\n", "_check", "(", "(", "8", ",", "32", ",", "64", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'WHC'", ")", ")", "\n", "_check", "(", "(", "8", ",", "32", ",", "64", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'WHC'", ")", ")", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nchw_float", ",", "'CHW'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float64", ",", "torch_to_images", "(", "nchw_float", ",", "'CHW'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float64", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float64", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float64", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float64", ",", "torch_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float64", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float64", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float64", ")", ")", "\n", "\n", "# random, but chance of this failing is almost impossible", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_float", ",", "'CHW'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "uint8", ",", "in_min", "=", "0.25", ",", "in_max", "=", "0.75", ")", ",", "m", "=", "0", ",", "M", "=", "255", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "uint8", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", ",", "m", "=", "0", ",", "M", "=", "255", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "uint8", ",", "in_min", "=", "0.25", ",", "in_max", "=", "0.75", ")", ",", "m", "=", "0", ",", "M", "=", "255", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "uint8", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", ",", "m", "=", "0", ",", "M", "=", "255", ")", "\n", "\n", "# random, but chance of this failing is almost impossible", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nchw_float", ",", "'CHW'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "in_min", "=", "0.25", ",", "in_max", "=", "0.75", ")", ",", "m", "=", "0", ",", "M", "=", "1", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", ",", "m", "=", "0", ",", "M", "=", "1", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "in_min", "=", "0.25", ",", "in_max", "=", "0.75", ")", ",", "m", "=", "0", ",", "M", "=", "1", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", ",", "m", "=", "0", ",", "M", "=", "1", ")", "\n", "\n", "# random, but chance of this failing is almost impossible", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_float", ",", "'CHW'", ",", "'CHW'", ",", "out_dtype", "=", "torch", ".", "uint8", ",", "in_min", "=", "0.25", ",", "in_max", "=", "0.75", ")", ",", "m", "=", "0", ",", "M", "=", "255", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'CHW'", ",", "out_dtype", "=", "torch", ".", "uint8", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", ",", "m", "=", "0", ",", "M", "=", "255", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "'CHW'", ",", "out_dtype", "=", "torch", ".", "uint8", ",", "in_min", "=", "0.25", ",", "in_max", "=", "0.75", ")", ",", "m", "=", "0", ",", "M", "=", "255", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "uint8", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'CHW'", ",", "out_dtype", "=", "torch", ".", "uint8", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", ",", "m", "=", "0", ",", "M", "=", "255", ")", "\n", "\n", "# random, but chance of this failing is almost impossible", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nchw_float", ",", "'CHW'", ",", "'CHW'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "in_min", "=", "0.25", ",", "in_max", "=", "0.75", ")", ",", "m", "=", "0", ",", "M", "=", "1", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'CHW'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", ",", "m", "=", "0", ",", "M", "=", "1", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "'CHW'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "in_min", "=", "0.25", ",", "in_max", "=", "0.75", ")", ",", "m", "=", "0", ",", "M", "=", "1", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "torch", ".", "float32", ",", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'CHW'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", ",", "m", "=", "0", ",", "M", "=", "1", ")", "\n", "\n", "# check clamping", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'is outside of the required range'", ")", ":", "\n", "        ", "torch_to_images", "(", "nchw_float", ",", "'CHW'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "clamp_mode", "=", "'error'", ",", "in_min", "=", "0.25", ",", "in_max", "=", "0.75", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'is outside of the required range'", ")", ":", "\n", "        ", "torch_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "clamp_mode", "=", "'error'", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'is outside of the required range'", ")", ":", "\n", "        ", "torch_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "clamp_mode", "=", "'error'", ",", "in_min", "=", "0.25", ",", "in_max", "=", "0.75", ")", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'is outside of the required range'", ")", ":", "\n", "        ", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "clamp_mode", "=", "'error'", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", "\n", "", "with", "pytest", ".", "raises", "(", "KeyError", ",", "match", "=", "\"invalid clamp mode: 'asdf'\"", ")", ":", "\n", "        ", "torch_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "out_dtype", "=", "torch", ".", "float32", ",", "clamp_mode", "=", "'asdf'", ",", "in_min", "=", "64", ",", "in_max", "=", "192", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img.test_numpy_to_pil_image": [[225, 265], ["numpy.random.rand", "numpy.random.randint", "numpy.random.rand", "numpy.random.randint", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "disent.util.visualize.vis_img.numpy_to_pil_images", "isinstance", "isinstance", "disent.util.visualize.vis_img.numpy_to_pil_images", "pytest.raises", "disent.util.visualize.vis_img.numpy_to_images", "pytest.raises", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_pil_images", "disent.util.visualize.vis_img.numpy_to_pil_images", "isinstance", "numpy.random.rand", "pil_image.tolist", "numpy.random.rand", "isinstance"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_pil_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_pil_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_pil_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_pil_images"], ["", "", "def", "test_numpy_to_pil_image", "(", ")", ":", "\n", "# CHW", "\n", "    ", "nchw_float", "=", "np", ".", "random", ".", "rand", "(", "8", ",", "3", ",", "64", ",", "32", ")", "\n", "nchw_uint8", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "# HWC", "\n", "nhwc_float", "=", "np", ".", "random", ".", "rand", "(", "8", ",", "64", ",", "32", ",", "3", ")", "\n", "nhwc_uint8", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'images do not have the correct number of channels for dim \"C\"'", ")", ":", "\n", "        ", "numpy_to_images", "(", "nchw_float", ")", "# make sure default for numpy is HWC", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ",", "match", "=", "'images do not have the correct number of channels for dim \"C\"'", ")", ":", "\n", "        ", "numpy_to_images", "(", "nchw_uint8", ")", "# make sure default for numpy is HWC", "\n", "\n", "", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_float", ")", ")", "# make sure default for numpy is HWC", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_uint8", ")", ")", "# make sure default for numpy is HWC", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_float", ",", "'CHW'", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_uint8", ",", "'CHW'", ")", ")", "\n", "\n", "for", "pil_images", "in", "[", "\n", "numpy_to_pil_images", "(", "nchw_float", ",", "'CHW'", ")", ",", "\n", "numpy_to_pil_images", "(", "nhwc_float", ")", ",", "\n", "]", ":", "\n", "        ", "assert", "isinstance", "(", "pil_images", ",", "np", ".", "ndarray", ")", "\n", "assert", "pil_images", ".", "shape", "==", "(", "8", ",", ")", "\n", "for", "pil_image", "in", "pil_images", ":", "\n", "            ", "pil_image", ":", "Image", ".", "Image", "\n", "assert", "isinstance", "(", "pil_image", ",", "Image", ".", "Image", ")", "\n", "assert", "pil_image", ".", "width", "==", "32", "\n", "assert", "pil_image", ".", "height", "==", "64", "\n", "\n", "# single image should be returned as an array of shape ()", "\n", "", "", "pil_image", ":", "np", ".", "ndarray", "=", "numpy_to_pil_images", "(", "np", ".", "random", ".", "rand", "(", "64", ",", "32", ",", "3", ")", ")", "\n", "assert", "pil_image", ".", "shape", "==", "(", ")", "\n", "assert", "isinstance", "(", "pil_image", ",", "np", ".", "ndarray", ")", "\n", "assert", "isinstance", "(", "pil_image", ".", "tolist", "(", ")", ",", "Image", ".", "Image", ")", "\n", "\n", "# check arb size", "\n", "pil_images", ":", "np", ".", "ndarray", "=", "numpy_to_pil_images", "(", "np", ".", "random", ".", "rand", "(", "4", ",", "5", ",", "2", ",", "16", ",", "32", ",", "3", ")", ")", "\n", "assert", "pil_images", ".", "shape", "==", "(", "4", ",", "5", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img.test_numpy_image_min_max": [[267, 324], ["numpy.random.rand", "numpy.random.randint", "numpy.random.rand", "numpy.random.randint", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "test_to_img._check", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images", "disent.util.visualize.vis_img.numpy_to_images"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_to_img._check", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images"], ["", "def", "test_numpy_image_min_max", "(", ")", ":", "\n", "# CHW", "\n", "    ", "nchw_float", "=", "np", ".", "random", ".", "rand", "(", "8", ",", "3", ",", "64", ",", "32", ")", "\n", "nchw_uint8", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "# HWC", "\n", "nhwc_float", "=", "np", ".", "random", ".", "rand", "(", "8", ",", "64", ",", "32", ",", "3", ")", "\n", "nhwc_uint8", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "in_min", "=", "0", ",", "in_max", "=", "1", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "in_min", "=", "0", ",", "in_max", "=", "255", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_float", ",", "'CHW'", ",", "in_min", "=", "0", ",", "in_max", "=", "1", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "in_min", "=", "0", ",", "in_max", "=", "255", ")", ")", "\n", "\n", "# OUT: HWC", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "in_min", "=", "(", "0", ",", "0", ",", "0", ")", ",", "in_max", "=", "(", "1", ",", "1", ",", "1", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "in_min", "=", "(", "0", ",", "0", ",", "0", ")", ",", "in_max", "=", "(", "255", ",", "255", ",", "255", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_float", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", "0", ",", "0", ")", ",", "in_max", "=", "(", "1", ",", "1", ",", "1", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", "0", ",", "0", ")", ",", "in_max", "=", "(", "255", ",", "255", ",", "255", ")", ")", ")", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "1", ",", ")", ")", ")", "# should maybe disable this from working?", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "255", ",", ")", ")", ")", "# should maybe disable this from working?", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_float", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "1", ",", ")", ")", ")", "# should maybe disable this from working?", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "3", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "255", ",", ")", ")", ")", "# should maybe disable this from working?", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "1", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_float", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "'HWC'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "1", ",", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "1", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_uint8", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "'HWC'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "255", ",", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "1", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_float", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "1", ",", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "1", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_uint8", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "255", ",", ")", ")", ")", "\n", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "1", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_float", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "'HWC'", ",", "in_min", "=", "0", ",", "in_max", "=", "1", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "1", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_uint8", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "'HWC'", ",", "in_min", "=", "0", ",", "in_max", "=", "255", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "1", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_float", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "'CHW'", ",", "in_min", "=", "0", ",", "in_max", "=", "1", ")", ")", "\n", "_check", "(", "(", "8", ",", "64", ",", "32", ",", "1", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_uint8", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "'CHW'", ",", "in_min", "=", "0", ",", "in_max", "=", "255", ")", ")", "\n", "\n", "# OUT: CHW", "\n", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", "0", ",", "0", ")", ",", "in_max", "=", "(", "1", ",", "1", ",", "1", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", "0", ",", "0", ")", ",", "in_max", "=", "(", "255", ",", "255", ",", "255", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_float", ",", "'CHW'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", "0", ",", "0", ")", ",", "in_max", "=", "(", "1", ",", "1", ",", "1", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", "0", ",", "0", ")", ",", "in_max", "=", "(", "255", ",", "255", ",", "255", ")", ")", ")", "\n", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_float", ",", "'HWC'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "1", ",", ")", ")", ")", "# should maybe disable this from working?", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_uint8", ",", "'HWC'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "255", ",", ")", ")", ")", "# should maybe disable this from working?", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_float", ",", "'CHW'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "1", ",", ")", ")", ")", "# should maybe disable this from working?", "\n", "_check", "(", "(", "8", ",", "3", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_uint8", ",", "'CHW'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "255", ",", ")", ")", ")", "# should maybe disable this from working?", "\n", "\n", "_check", "(", "(", "8", ",", "1", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_float", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "'HWC'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "1", ",", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "1", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_uint8", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "'HWC'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "255", ",", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "1", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_float", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "'CHW'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "1", ",", ")", ")", ")", "\n", "_check", "(", "(", "8", ",", "1", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_uint8", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "'CHW'", ",", "'CHW'", ",", "in_min", "=", "(", "0", ",", ")", ",", "in_max", "=", "(", "255", ",", ")", ")", ")", "\n", "\n", "_check", "(", "(", "8", ",", "1", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_float", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "'HWC'", ",", "'CHW'", ",", "in_min", "=", "0", ",", "in_max", "=", "1", ")", ")", "\n", "_check", "(", "(", "8", ",", "1", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nhwc_uint8", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "'HWC'", ",", "'CHW'", ",", "in_min", "=", "0", ",", "in_max", "=", "255", ")", ")", "\n", "_check", "(", "(", "8", ",", "1", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_float", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "'CHW'", ",", "'CHW'", ",", "in_min", "=", "0", ",", "in_max", "=", "1", ")", ")", "\n", "_check", "(", "(", "8", ",", "1", ",", "64", ",", "32", ")", ",", "'uint8'", ",", "numpy_to_images", "(", "nchw_uint8", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "'CHW'", ",", "'CHW'", ",", "in_min", "=", "0", ",", "in_max", "=", "255", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value": [[41, 56], ["isinstance", "type", "type", "isinstance", "numpy.all", "isinstance", "torch.all", "NotImplementedError"], "function", ["None"], ["def", "_assert_type_and_value", "(", "input", ",", "target", ")", ":", "\n", "# check types are the same", "\n", "    ", "assert", "type", "(", "input", ")", "==", "type", "(", "target", ")", "\n", "# specific checks", "\n", "if", "isinstance", "(", "target", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "assert", "input", "==", "target", "\n", "", "elif", "isinstance", "(", "target", ",", "(", "np", ".", "ndarray", ",", "np", ".", "int32", ",", "np", ".", "int64", ",", "np", ".", "float32", ",", "np", ".", "float64", ")", ")", ":", "\n", "        ", "assert", "input", ".", "dtype", "==", "target", ".", "dtype", "\n", "assert", "np", ".", "all", "(", "input", "==", "target", ")", "\n", "", "elif", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "assert", "input", ".", "dtype", "==", "target", ".", "dtype", "\n", "assert", "input", ".", "device", "==", "target", ".", "device", "\n", "assert", "torch", ".", "all", "(", "input", "==", "target", ")", "\n", "", "else", ":", "# pragma: no cover", "\n", "        ", "raise", "NotImplementedError", "(", "'This should never happen in tests!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic.test_generic_as_int32": [[63, 75], ["test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "pytest.raises", "disent.nn.functional._util_generic.generic_as_int32", "disent.nn.functional._util_generic.generic_as_int32", "disent.nn.functional._util_generic.generic_as_int32", "disent.nn.functional._util_generic.generic_as_int32", "disent.nn.functional._util_generic.generic_as_int32", "torch.as_tensor", "disent.nn.functional._util_generic.generic_as_int32", "numpy.array", "torch.as_tensor", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_as_int32", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_as_int32", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_as_int32", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_as_int32", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_as_int32", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_as_int32", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "", "def", "test_generic_as_int32", "(", ")", ":", "\n", "# scalars", "\n", "    ", "_assert_type_and_value", "(", "input", "=", "generic_as_int32", "(", "-", "1", ")", ",", "target", "=", "-", "1", ")", "\n", "_assert_type_and_value", "(", "input", "=", "generic_as_int32", "(", "-", "1.", ")", ",", "target", "=", "-", "1", ")", "\n", "_assert_type_and_value", "(", "input", "=", "generic_as_int32", "(", "1.5", ")", ",", "target", "=", "1", ")", "\n", "# torch", "\n", "_assert_type_and_value", "(", "input", "=", "generic_as_int32", "(", "torch", ".", "as_tensor", "(", "[", "-", "1.5", ",", "0", ",", "1.0", "]", ")", ")", ",", "target", "=", "torch", ".", "as_tensor", "(", "[", "-", "1", ",", "0", ",", "1", "]", ",", "dtype", "=", "torch", ".", "int32", ")", ")", "\n", "# numpy", "\n", "_assert_type_and_value", "(", "input", "=", "generic_as_int32", "(", "np", ".", "array", "(", "[", "-", "1.5", ",", "0", ",", "1.0", "]", ")", ")", ",", "target", "=", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "# unsupported", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "'invalid type'", ")", ":", "\n", "        ", "generic_as_int32", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic.test_generic_max": [[77, 90], ["test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "pytest.raises", "disent.nn.functional._util_generic.generic_max", "disent.nn.functional._util_generic.generic_max", "disent.nn.functional._util_generic.generic_max", "disent.nn.functional._util_generic.generic_max", "torch.as_tensor", "disent.nn.functional._util_generic.generic_max", "torch.as_tensor", "disent.nn.functional._util_generic.generic_max", "numpy.int64", "disent.nn.functional._util_generic.generic_max", "numpy.float64", "torch.as_tensor", "torch.as_tensor", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_max", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_max", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_max", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_max", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_max", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_max", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_max", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "", "def", "test_generic_max", "(", ")", ":", "\n", "# scalars", "\n", "    ", "_assert_type_and_value", "(", "input", "=", "generic_max", "(", "-", "1", ")", ",", "target", "=", "-", "1", ")", "\n", "_assert_type_and_value", "(", "input", "=", "generic_max", "(", "1.5", ")", ",", "target", "=", "1.5", ")", "\n", "# torch", "\n", "_assert_type_and_value", "(", "input", "=", "generic_max", "(", "torch", ".", "as_tensor", "(", "[", "-", "1", ",", "0", ",", "1", "]", ")", ")", ",", "target", "=", "torch", ".", "as_tensor", "(", "1", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "\n", "_assert_type_and_value", "(", "input", "=", "generic_max", "(", "torch", ".", "as_tensor", "(", "[", "-", "1.0", ",", "0.0", ",", "1.0", "]", ")", ")", ",", "target", "=", "torch", ".", "as_tensor", "(", "1.0", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "# numpy", "\n", "_assert_type_and_value", "(", "input", "=", "generic_max", "(", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", "]", ")", ")", ",", "target", "=", "np", ".", "int64", "(", "1", ")", ")", "\n", "_assert_type_and_value", "(", "input", "=", "generic_max", "(", "np", ".", "array", "(", "[", "-", "1.0", ",", "0.0", ",", "1.0", "]", ")", ")", ",", "target", "=", "np", ".", "float64", "(", "1.0", ")", ")", "\n", "# unsupported", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "'invalid type'", ")", ":", "\n", "        ", "generic_max", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic.test_generic_min": [[92, 105], ["test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "test_math_generic._assert_type_and_value", "pytest.raises", "disent.nn.functional._util_generic.generic_min", "disent.nn.functional._util_generic.generic_min", "disent.nn.functional._util_generic.generic_min", "disent.nn.functional._util_generic.generic_min", "torch.as_tensor", "disent.nn.functional._util_generic.generic_min", "torch.as_tensor", "disent.nn.functional._util_generic.generic_min", "numpy.int64", "disent.nn.functional._util_generic.generic_min", "numpy.float64", "torch.as_tensor", "torch.as_tensor", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic._assert_type_and_value", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_min", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_min", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_min", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_min", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_min", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_min", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_min", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "", "def", "test_generic_min", "(", ")", ":", "\n", "# scalars", "\n", "    ", "_assert_type_and_value", "(", "input", "=", "generic_min", "(", "-", "1", ")", ",", "target", "=", "-", "1", ")", "\n", "_assert_type_and_value", "(", "input", "=", "generic_min", "(", "1.5", ")", ",", "target", "=", "1.5", ")", "\n", "# torch", "\n", "_assert_type_and_value", "(", "input", "=", "generic_min", "(", "torch", ".", "as_tensor", "(", "[", "-", "1", ",", "0", ",", "1", "]", ")", ")", ",", "target", "=", "torch", ".", "as_tensor", "(", "-", "1", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "\n", "_assert_type_and_value", "(", "input", "=", "generic_min", "(", "torch", ".", "as_tensor", "(", "[", "-", "1.0", ",", "0.0", ",", "1.0", "]", ")", ")", ",", "target", "=", "torch", ".", "as_tensor", "(", "-", "1.0", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "# numpy", "\n", "_assert_type_and_value", "(", "input", "=", "generic_min", "(", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", "]", ")", ")", ",", "target", "=", "np", ".", "int64", "(", "-", "1", ")", ")", "\n", "_assert_type_and_value", "(", "input", "=", "generic_min", "(", "np", ".", "array", "(", "[", "-", "1.0", ",", "0.0", ",", "1.0", "]", ")", ")", ",", "target", "=", "np", ".", "float64", "(", "-", "1.0", ")", ")", "\n", "# unsupported", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "'invalid type'", ")", ":", "\n", "        ", "generic_min", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic.test_generic_shape": [[107, 120], ["disent.nn.functional._util_generic.generic_shape", "disent.nn.functional._util_generic.generic_shape", "disent.nn.functional._util_generic.generic_shape", "disent.nn.functional._util_generic.generic_shape", "disent.nn.functional._util_generic.generic_shape", "disent.nn.functional._util_generic.generic_shape", "pytest.raises", "disent.nn.functional._util_generic.generic_shape", "torch.as_tensor", "torch.as_tensor", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_shape", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_shape", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_shape", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_shape", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_shape", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_shape", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_shape", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "", "def", "test_generic_shape", "(", ")", ":", "\n", "# scalars", "\n", "    ", "assert", "generic_shape", "(", "1.", ")", "==", "(", ")", "\n", "assert", "generic_shape", "(", "-", "1", ")", "==", "(", ")", "\n", "# torch", "\n", "assert", "generic_shape", "(", "torch", ".", "as_tensor", "(", "[", "-", "1", ",", "0", ",", "1", "]", ")", ")", "==", "(", "3", ",", ")", "\n", "assert", "generic_shape", "(", "torch", ".", "as_tensor", "(", "[", "-", "1.0", ",", "0.0", ",", "1.0", "]", ")", ")", "==", "(", "3", ",", ")", "\n", "# numpy", "\n", "assert", "generic_shape", "(", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", "]", ")", ")", "==", "(", "3", ",", ")", "\n", "assert", "generic_shape", "(", "np", ".", "array", "(", "[", "-", "1.0", ",", "0.0", ",", "1.0", "]", ")", ")", "==", "(", "3", ",", ")", "\n", "# unsupported", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "'invalid type'", ")", ":", "\n", "        ", "generic_shape", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_math_generic.test_generic_ndim": [[122, 135], ["disent.nn.functional._util_generic.generic_ndim", "disent.nn.functional._util_generic.generic_ndim", "disent.nn.functional._util_generic.generic_ndim", "disent.nn.functional._util_generic.generic_ndim", "disent.nn.functional._util_generic.generic_ndim", "disent.nn.functional._util_generic.generic_ndim", "pytest.raises", "disent.nn.functional._util_generic.generic_ndim", "torch.as_tensor", "torch.as_tensor", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_ndim", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_ndim", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_ndim", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_ndim", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_ndim", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_ndim", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_ndim", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "", "def", "test_generic_ndim", "(", ")", ":", "\n", "# scalars", "\n", "    ", "assert", "generic_ndim", "(", "1.", ")", "==", "0", "\n", "assert", "generic_ndim", "(", "-", "1", ")", "==", "0", "\n", "# torch", "\n", "assert", "generic_ndim", "(", "torch", ".", "as_tensor", "(", "[", "-", "1", ",", "0", ",", "1", "]", ")", ")", "==", "1", "\n", "assert", "generic_ndim", "(", "torch", ".", "as_tensor", "(", "[", "-", "1.0", ",", "0.0", ",", "1.0", "]", ")", ")", "==", "1", "\n", "# numpy", "\n", "assert", "generic_ndim", "(", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "1", "]", ")", ")", "==", "1", "\n", "assert", "generic_ndim", "(", "np", ".", "array", "(", "[", "-", "1.0", ",", "0.0", ",", "1.0", "]", ")", ")", "==", "1", "\n", "# unsupported", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "'invalid type'", ")", ":", "\n", "        ", "generic_ndim", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats._iterate_over_data": [[56, 61], ["enumerate"], "function", ["None"], ["def", "_iterate_over_data", "(", "data", ",", "indices", ")", ":", "\n", "    ", "i", "=", "-", "1", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "img", "=", "data", "[", "i", "]", "\n", "", "return", "i", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats.create_temp_h5data": [[63, 74], ["numpy.stack", "tempfile.NamedTemporaryFile", "h5py.File", "file.create_dataset", "TestXYObjectData"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "create_temp_h5data", "(", "track_times", "=", "False", ",", "**", "h5py_dataset_kwargs", ")", ":", "\n", "# generate data", "\n", "    ", "data", "=", "np", ".", "stack", "(", "[", "img", "for", "img", "in", "TestXYObjectData", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "# create temp file", "\n", "with", "NamedTemporaryFile", "(", "'r'", ")", "as", "out_file", ":", "\n", "# create temp files", "\n", "        ", "with", "h5py", ".", "File", "(", "out_file", ".", "name", ",", "'w'", ",", "libver", "=", "'earliest'", ")", "as", "file", ":", "\n", "            ", "file", ".", "create_dataset", "(", "name", "=", "'data'", ",", "shape", "=", "(", "_TEST_LEN", ",", "4", ",", "4", ",", "3", ")", ",", "dtype", "=", "'uint8'", ",", "data", "=", "data", ",", "track_times", "=", "track_times", ",", "**", "h5py_dataset_kwargs", ")", "\n", "# return the data & file", "\n", "", "yield", "out_file", ".", "name", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats.test_hdf5_pickle_dataset": [[76, 96], ["test_dataset_formats.create_temp_h5data", "disent.dataset.data.Hdf5Dataset", "list", "concurrent.futures.ProcessPoolExecutor", "concurrent.futures.ProcessPoolExecutor.submit", "concurrent.futures.ProcessPoolExecutor.submit", "range", "test_dataset_formats._iterate_over_data", "executor.submit.result", "executor.submit.result", "h5py.File", "len", "pytest.raises", "concurrent.futures.ProcessPoolExecutor.submit", "executor.submit.result"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats.create_temp_h5data", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats._iterate_over_data"], ["", "", "def", "test_hdf5_pickle_dataset", "(", ")", ":", "\n", "    ", "with", "create_temp_h5data", "(", ")", "as", "(", "tmp_path", ",", "raw_data", ")", ":", "\n", "# load the data", "\n", "# - ideally we want to test this with a pytorch", "\n", "#   DataLoader, but that is quite slow to initialise", "\n", "        ", "with", "Hdf5Dataset", "(", "tmp_path", ",", "'data'", ")", "as", "data", ":", "\n", "            ", "indices", "=", "list", "(", "range", "(", "len", "(", "data", ")", ")", ")", "\n", "# test locally", "\n", "assert", "_iterate_over_data", "(", "data", "=", "data", ",", "indices", "=", "indices", ")", "==", "_TEST_LEN", "\n", "# test multiprocessing", "\n", "executor", "=", "ProcessPoolExecutor", "(", "2", ")", "\n", "future_0", "=", "executor", ".", "submit", "(", "_iterate_over_data", ",", "data", "=", "data", ",", "indices", "=", "indices", "[", "0", ":", ":", "2", "]", ")", "\n", "future_1", "=", "executor", ".", "submit", "(", "_iterate_over_data", ",", "data", "=", "data", ",", "indices", "=", "indices", "[", "1", ":", ":", "2", "]", ")", "\n", "assert", "future_0", ".", "result", "(", ")", "==", "_TEST_LEN", "//", "2", "\n", "assert", "future_1", ".", "result", "(", ")", "==", "_TEST_LEN", "//", "2", "\n", "# test multiprocessing on invalid data", "\n", "with", "h5py", ".", "File", "(", "tmp_path", ",", "'r'", ",", "swmr", "=", "True", ")", "as", "file", ":", "\n", "                ", "with", "pytest", ".", "raises", "(", "TypeError", ",", "match", "=", "'h5py objects cannot be pickled'", ")", ":", "\n", "                    ", "future_2", "=", "executor", ".", "submit", "(", "_iterate_over_data", ",", "data", "=", "file", "[", "'data'", "]", ",", "indices", "=", "indices", ")", "\n", "future_2", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats.test_hdf5_determinism": [[98, 125], ["pytest.mark.parametrize", "test_dataset_formats.test_hdf5_determinism.make_and_hash"], "function", ["None"], ["", "", "", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "[", "'hash_mode'", ",", "'target_hash'", "]", ",", "[", "\n", "(", "'full'", ",", "'a3b60a9e248b4b66bdbf4f87a78bf7cc'", ")", ",", "\n", "(", "'fast'", ",", "'a20d554d4912a39e7654b4dc98207490'", ")", ",", "\n", "]", ")", "\n", "def", "test_hdf5_determinism", "(", "hash_mode", ":", "str", ",", "target_hash", ":", "str", ")", ":", "\n", "# check hashing a", "\n", "    ", "def", "make_and_hash", "(", "track_times", "=", "False", ",", "**", "h5py_dataset_kwargs", ")", ":", "\n", "        ", "with", "create_temp_h5data", "(", "track_times", "=", "track_times", ",", "**", "h5py_dataset_kwargs", ")", "as", "(", "path_a", ",", "raw_data_a", ")", ":", "\n", "            ", "a", "=", "hash_file", "(", "path_a", ",", "hash_type", "=", "'md5'", ",", "hash_mode", "=", "hash_mode", ",", "missing_ok", "=", "False", ")", "\n", "# track times only has a resolution of 1 second", "\n", "# TODO: this test is slow ~4.4 seconds of sleeping...", "\n", "", "time", ".", "sleep", "(", "1.1", ")", "\n", "# redo the same task", "\n", "with", "create_temp_h5data", "(", "track_times", "=", "track_times", ",", "**", "h5py_dataset_kwargs", ")", "as", "(", "path_b", ",", "raw_data_b", ")", ":", "\n", "            ", "b", "=", "hash_file", "(", "path_b", ",", "hash_type", "=", "'md5'", ",", "hash_mode", "=", "hash_mode", ",", "missing_ok", "=", "False", ")", "\n", "", "return", "a", ",", "b", "\n", "# compute hashes", "\n", "", "deterministic_hash_a", ",", "deterministic_hash_b", "=", "make_and_hash", "(", "track_times", "=", "False", ")", "\n", "stochastic_hash_a", ",", "stochastic_hash_b", "=", "make_and_hash", "(", "track_times", "=", "True", ")", "\n", "# check hashes", "\n", "assert", "deterministic_hash_a", "==", "deterministic_hash_b", "\n", "assert", "stochastic_hash_a", "!=", "stochastic_hash_b", "\n", "# check against target", "\n", "assert", "deterministic_hash_a", "==", "target_hash", "\n", "assert", "deterministic_hash_b", "==", "target_hash", "\n", "assert", "stochastic_hash_a", "!=", "target_hash", "\n", "assert", "stochastic_hash_b", "!=", "target_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats.test_hdf5_resave_dataset": [[127, 179], ["pytest.mark.parametrize", "tests.util.no_stdout", "tests.util.no_stderr", "test_dataset_formats.create_temp_h5data", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "disent.dataset.util.formats.hdf5.hdf5_resave_file", "disent.util.inout.hashing.hash_file", "disent.util.inout.hashing.hash_file", "disent.util.inout.hashing.hash_file", "h5py.File", "disent.dataset.util.formats.hdf5.H5Builder", "builder.add_dataset_from_array", "h5py.File", "numpy.all", "h5py.File", "numpy.all", "h5py.File", "numpy.all"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.tests.util.no_stdout", "home.repos.pwc.inspect_result.nmichlo_disent.tests.util.no_stderr", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats.create_temp_h5data", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_resave_file", "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.hash_file", "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.hash_file", "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.hash_file", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.add_dataset_from_array"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "[", "'chunk_shape'", ",", "'compression_lvl'", ",", "'target_hash'", "]", ",", "[", "\n", "(", "(", "1", ",", "4", ",", "4", ",", "3", ")", ",", "None", ",", "'0a60b3edc4e2d75f3d38de9f1a29700c'", ")", ",", "\n", "(", "'batch'", ",", "4", ",", "'88801fba75bc6eb53ccfcc145ab8a4f5'", ")", ",", "\n", "]", ")", "\n", "def", "test_hdf5_resave_dataset", "(", "chunk_shape", ",", "compression_lvl", ",", "target_hash", ")", ":", "\n", "    ", "with", "no_stdout", "(", ")", ",", "no_stderr", "(", ")", ":", "\n", "        ", "with", "create_temp_h5data", "(", "chunks", "=", "(", "_TEST_LEN", ",", "4", ",", "4", ",", "3", ")", ")", "as", "(", "inp_path", ",", "raw_data", ")", ",", "NamedTemporaryFile", "(", "'r'", ")", "as", "out_file", ",", "NamedTemporaryFile", "(", "'r'", ")", "as", "alt_file", ":", "\n", "            ", "out_path", "=", "out_file", ".", "name", "\n", "alt_path", "=", "alt_file", ".", "name", "\n", "# convert dataset", "\n", "hdf5_resave_file", "(", "\n", "inp_path", "=", "inp_path", ",", "\n", "out_path", "=", "out_path", ",", "\n", "dataset_name", "=", "'data'", ",", "\n", "chunk_size", "=", "(", "1", ",", "4", ",", "4", ",", "3", ")", ",", "\n", "compression", "=", "'gzip'", "if", "(", "compression_lvl", "is", "not", "None", ")", "else", "None", ",", "\n", "compression_lvl", "=", "compression_lvl", ",", "\n", "batch_size", "=", "None", ",", "\n", "out_dtype", "=", "None", ",", "\n", "out_mutator", "=", "None", ",", "\n", "obs_shape", "=", "None", ",", "\n", "write_mode", "=", "'w'", ",", "\n", ")", "\n", "# check alt conversion", "\n", "with", "h5py", ".", "File", "(", "inp_path", ",", "'r'", ")", "as", "inp", ",", "H5Builder", "(", "alt_path", ",", "mode", "=", "'w'", ")", "as", "builder", ":", "\n", "                ", "builder", ".", "add_dataset_from_array", "(", "\n", "array", "=", "inp", "[", "'data'", "]", ",", "\n", "name", "=", "'data'", ",", "\n", "chunk_shape", "=", "chunk_shape", ",", "\n", "compression_lvl", "=", "compression_lvl", ",", "\n", "batch_size", "=", "'auto'", ",", "\n", ")", "\n", "# check datasets", "\n", "", "with", "h5py", ".", "File", "(", "inp_path", ",", "'r'", ")", "as", "inp", ":", "\n", "                ", "assert", "np", ".", "all", "(", "inp", "[", "'data'", "]", "[", "...", "]", "==", "raw_data", ")", "\n", "assert", "inp", "[", "'data'", "]", ".", "chunks", "==", "(", "_TEST_LEN", ",", "4", ",", "4", ",", "3", ")", "\n", "", "with", "h5py", ".", "File", "(", "out_path", ",", "'r'", ")", "as", "out", ":", "\n", "                ", "assert", "np", ".", "all", "(", "out", "[", "'data'", "]", "[", "...", "]", "==", "raw_data", ")", "\n", "assert", "out", "[", "'data'", "]", ".", "chunks", "==", "(", "1", ",", "4", ",", "4", ",", "3", ")", "\n", "", "with", "h5py", ".", "File", "(", "alt_path", ",", "'r'", ")", "as", "alt", ":", "\n", "                ", "assert", "np", ".", "all", "(", "alt", "[", "'data'", "]", "[", "...", "]", "==", "raw_data", ")", "\n", "assert", "alt", "[", "'data'", "]", ".", "chunks", "==", "(", "1", ",", "4", ",", "4", ",", "3", ")", "\n", "# check hashes", "\n", "", "inp_hash", "=", "hash_file", "(", "inp_path", ",", "hash_type", "=", "'md5'", ",", "hash_mode", "=", "'full'", ",", "missing_ok", "=", "False", ")", "\n", "out_hash", "=", "hash_file", "(", "out_path", ",", "hash_type", "=", "'md5'", ",", "hash_mode", "=", "'full'", ",", "missing_ok", "=", "False", ")", "\n", "alt_hash", "=", "hash_file", "(", "alt_path", ",", "hash_type", "=", "'md5'", ",", "hash_mode", "=", "'full'", ",", "missing_ok", "=", "False", ")", "\n", "assert", "inp_hash", "==", "'8f21382c20cd0230aac5b1105fee8b39'", "\n", "assert", "out_hash", "==", "target_hash", "\n", "assert", "alt_hash", "==", "target_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats.test_hdf5_speed_test": [[181, 188], ["test_dataset_formats.create_temp_h5data", "disent.dataset.util.formats.hdf5.hdf5_test_speed", "test_dataset_formats.create_temp_h5data", "disent.dataset.util.formats.hdf5.hdf5_test_speed", "test_dataset_formats.create_temp_h5data", "disent.dataset.util.formats.hdf5.hdf5_test_speed"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats.create_temp_h5data", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_test_speed", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats.create_temp_h5data", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_test_speed", "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_dataset_formats.create_temp_h5data", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_test_speed"], ["", "", "", "def", "test_hdf5_speed_test", "(", ")", ":", "\n", "    ", "with", "create_temp_h5data", "(", "chunks", "=", "(", "_TEST_LEN", ",", "4", ",", "4", ",", "3", ")", ")", "as", "(", "path", ",", "_", ")", ":", "\n", "        ", "hdf5_test_speed", "(", "path", ",", "dataset_name", "=", "'data'", ",", "access_method", "=", "'random'", ")", "\n", "", "with", "create_temp_h5data", "(", "chunks", "=", "(", "1", ",", "4", ",", "4", ",", "3", ")", ")", "as", "(", "path", ",", "_", ")", ":", "\n", "        ", "hdf5_test_speed", "(", "path", ",", "dataset_name", "=", "'data'", ",", "access_method", "=", "'sequential'", ")", "\n", "", "with", "create_temp_h5data", "(", "chunks", "=", "None", ")", "as", "(", "path", ",", "_", ")", ":", "\n", "        ", "hdf5_test_speed", "(", "path", ",", "dataset_name", "=", "'data'", ",", "access_method", "=", "'sequential'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_state_space.test_discrete_state_space_single_values": [[45, 57], ["disent.dataset.util.state_space.StateSpace", "enumerate", "len", "numpy.prod", "numpy.all", "numpy.prod", "disent.dataset.util.state_space.StateSpace.pos_to_idx", "disent.dataset.util.state_space.StateSpace.idx_to_pos"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos"], ["def", "test_discrete_state_space_single_values", "(", ")", ":", "\n", "    ", "for", "factor_sizes", "in", "FACTOR_SIZES", ":", "\n", "        ", "states", "=", "StateSpace", "(", "factor_sizes", "=", "factor_sizes", ")", "\n", "# check size", "\n", "assert", "len", "(", "states", ")", "==", "np", ".", "prod", "(", "factor_sizes", ")", "\n", "# check single values", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "states", ".", "factor_sizes", ")", ":", "\n", "            ", "factors", "=", "states", ".", "factor_sizes", "-", "1", "\n", "factors", "[", ":", "i", "]", "=", "0", "\n", "idx", "=", "np", ".", "prod", "(", "states", ".", "factor_sizes", "[", "i", ":", "]", ")", "-", "1", "\n", "assert", "states", ".", "pos_to_idx", "(", "factors", ")", "==", "idx", "\n", "assert", "np", ".", "all", "(", "states", ".", "idx_to_pos", "(", "idx", ")", "==", "factors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_state_space.test_discrete_state_space_one_to_one": [[58, 75], ["disent.dataset.util.state_space.StateSpace", "numpy.random.randint", "disent.dataset.util.state_space.StateSpace.sample_factors", "tuple", "numpy.all", "numpy.all", "disent.dataset.util.state_space.StateSpace.pos_to_idx", "disent.dataset.util.state_space.StateSpace.idx_to_pos", "disent.dataset.util.state_space.StateSpace.pos_to_idx", "numpy.all", "numpy.all", "range", "numpy.max", "numpy.min", "int"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx"], ["", "", "", "def", "test_discrete_state_space_one_to_one", "(", ")", ":", "\n", "    ", "for", "factor_sizes", "in", "FACTOR_SIZES", ":", "\n", "        ", "states", "=", "StateSpace", "(", "factor_sizes", "=", "factor_sizes", ")", "\n", "# check that entire range of values is generated", "\n", "k", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "5", ")", "\n", "# chances of this failing are extremely low, but it could happen...", "\n", "pos_0", "=", "states", ".", "sample_factors", "(", "[", "int", "(", "100_000", "**", "(", "1", "/", "k", ")", ")", "]", "*", "k", ")", "\n", "# check random values are in the right ranges", "\n", "all_dims", "=", "tuple", "(", "range", "(", "pos_0", ".", "ndim", ")", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "max", "(", "pos_0", ",", "axis", "=", "all_dims", "[", ":", "-", "1", "]", ")", "==", "(", "states", ".", "factor_sizes", "-", "1", ")", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "min", "(", "pos_0", ",", "axis", "=", "all_dims", "[", ":", "-", "1", "]", ")", "==", "0", ")", "\n", "# check that converting between them keeps values the same", "\n", "idx_0", "=", "states", ".", "pos_to_idx", "(", "pos_0", ")", "\n", "pos_1", "=", "states", ".", "idx_to_pos", "(", "idx_0", ")", "\n", "idx_1", "=", "states", ".", "pos_to_idx", "(", "pos_1", ")", "\n", "assert", "np", ".", "all", "(", "idx_0", "==", "idx_1", ")", "\n", "assert", "np", ".", "all", "(", "pos_0", "==", "pos_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_state_space.test_new_functions": [[77, 104], ["disent.dataset.util.state_space.StateSpace", "disent.dataset.util.state_space.StateSpace", "disent.dataset.util.state_space.StateSpace.sample_missing_factors", "disent.dataset.util.state_space.StateSpace.sample_missing_factors", "disent.dataset.util.state_space.StateSpace.sample_missing_factors", "disent.dataset.util.state_space.StateSpace.sample_random_factor_traversal_grid", "disent.dataset.util.state_space.StateSpace.sample_random_factor_traversal_grid", "numpy.max().tolist", "numpy.max().tolist", "numpy.max().tolist", "numpy.max().tolist", "numpy.max().tolist", "numpy.max().tolist", "numpy.max().tolist", "numpy.max().tolist", "numpy.max().tolist", "numpy.max().tolist", "numpy.array", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "disent.dataset.util.state_space.StateSpace.sample_factors", "disent.dataset.util.state_space.StateSpace.sample_factors", "disent.dataset.util.state_space.StateSpace.sample_factors", "disent.dataset.util.state_space.StateSpace.sample_missing_factors", "disent.dataset.util.state_space.StateSpace.resample_given_factors", "disent.dataset.util.state_space.StateSpace.resample_given_factors", "disent.dataset.util.state_space.StateSpace.resample_given_factors", "disent.dataset.util.state_space.StateSpace.resample_other_factors", "disent.dataset.util.state_space.StateSpace.resample_other_factors", "disent.dataset.util.state_space.StateSpace.resample_other_factors", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_missing_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_missing_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_missing_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal_grid", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal_grid", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_missing_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.resample_given_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.resample_given_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.resample_given_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.resample_other_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.resample_other_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.resample_other_factors"], ["", "", "def", "test_new_functions", "(", ")", ":", "\n", "# TODO: convert to propper tests", "\n", "    ", "s", "=", "StateSpace", "(", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "\n", "assert", "np", ".", "max", "(", "[", "s", ".", "sample_factors", "(", "size", "=", "2", ",", "f_idxs", "=", "[", "0", ",", "2", "]", ")", "for", "i", "in", "range", "(", "1000", ")", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "==", "[", "[", "1", ",", "3", "]", ",", "[", "1", ",", "3", "]", "]", "\n", "assert", "np", ".", "max", "(", "[", "s", ".", "sample_factors", "(", "size", "=", "(", "2", ",", ")", ",", "f_idxs", "=", "[", "0", ",", "2", "]", ")", "for", "i", "in", "range", "(", "1000", ")", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "==", "[", "[", "1", ",", "3", "]", ",", "[", "1", ",", "3", "]", "]", "\n", "assert", "np", ".", "max", "(", "[", "s", ".", "sample_factors", "(", "size", "=", "(", "2", ",", "3", ")", ",", "f_idxs", "=", "[", "0", ",", "2", "]", ")", "for", "i", "in", "range", "(", "1000", ")", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "==", "[", "[", "[", "1", ",", "3", "]", ",", "[", "1", ",", "3", "]", ",", "[", "1", ",", "3", "]", "]", ",", "[", "[", "1", ",", "3", "]", ",", "[", "1", ",", "3", "]", ",", "[", "1", ",", "3", "]", "]", "]", "\n", "assert", "np", ".", "max", "(", "[", "s", ".", "sample_missing_factors", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ",", "f_idxs", "=", "[", "0", ",", "2", "]", ")", "for", "i", "in", "range", "(", "1000", ")", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "==", "[", "[", "0", ",", "2", ",", "0", "]", ",", "[", "0", ",", "2", ",", "0", "]", "]", "\n", "\n", "states", "=", "StateSpace", "(", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n", "assert", "np", ".", "max", "(", "[", "states", ".", "resample_given_factors", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "f_idxs", "=", "1", ")", "for", "i", "in", "range", "(", "1000", ")", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "==", "[", "[", "0", ",", "2", ",", "0", ",", "0", "]", ",", "[", "0", ",", "2", ",", "0", ",", "0", "]", "]", "\n", "assert", "np", ".", "max", "(", "[", "states", ".", "resample_given_factors", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "f_idxs", "=", "[", "1", ",", "2", "]", ")", "for", "i", "in", "range", "(", "1000", ")", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "==", "[", "[", "0", ",", "2", ",", "3", ",", "0", "]", ",", "[", "0", ",", "2", ",", "3", ",", "0", "]", "]", "\n", "assert", "np", ".", "max", "(", "[", "states", ".", "resample_given_factors", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "f_idxs", "=", "[", "0", ",", "3", "]", ")", "for", "i", "in", "range", "(", "1000", ")", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "==", "[", "1", ",", "0", ",", "0", ",", "4", "]", "\n", "\n", "assert", "np", ".", "max", "(", "[", "states", ".", "resample_other_factors", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "f_idxs", "=", "1", ")", "for", "i", "in", "range", "(", "1000", ")", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "==", "[", "[", "1", ",", "0", ",", "3", ",", "4", "]", ",", "[", "1", ",", "0", ",", "3", ",", "4", "]", "]", "\n", "assert", "np", ".", "max", "(", "[", "states", ".", "resample_other_factors", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "f_idxs", "=", "[", "1", ",", "2", "]", ")", "for", "i", "in", "range", "(", "1000", ")", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "==", "[", "[", "1", ",", "0", ",", "0", ",", "4", "]", ",", "[", "1", ",", "0", ",", "0", ",", "4", "]", "]", "\n", "assert", "np", ".", "max", "(", "[", "states", ".", "resample_other_factors", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "f_idxs", "=", "[", "0", ",", "3", "]", ")", "for", "i", "in", "range", "(", "1000", ")", "]", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "==", "[", "0", ",", "2", ",", "3", ",", "0", "]", "\n", "\n", "# make sure these work", "\n", "states", ".", "sample_missing_factors", "(", "[", "1", "]", ",", "f_idxs", "=", "2", ")", "\n", "states", ".", "sample_missing_factors", "(", "[", "1", "]", ",", "f_idxs", "=", "2", ")", "\n", "states", ".", "sample_missing_factors", "(", "[", "[", "1", "]", ",", "[", "3", "]", ",", "[", "5", "]", "]", ",", "f_idxs", "=", "2", ")", "\n", "\n", "# make sure these work", "\n", "states", ".", "sample_random_factor_traversal_grid", "(", "base_factors", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", "\n", "states", ".", "sample_random_factor_traversal_grid", "(", "base_factors", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_metrics.test_metrics": [[40, 58], ["pytest.mark.parametrize", "disent.dataset.DisentDataset", "metric_fn", "disent.dataset.data.XYObjectData", "torch.randn", "disent.util.function.wrapped_partial", "disent.util.function.wrapped_partial", "disent.util.function.wrapped_partial", "disent.util.function.wrapped_partial", "disent.util.function.wrapped_partial", "disent.util.function.wrapped_partial", "disent.util.function.wrapped_partial", "disent.dataset.transform.ToImgTensorF32", "len"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'metric_fn'", ",", "[", "\n", "wrapped_partial", "(", "metric_mig", ",", "num_train", "=", "7", ")", ",", "\n", "wrapped_partial", "(", "metric_unsupervised", ",", "num_train", "=", "7", ")", ",", "\n", "wrapped_partial", "(", "metric_dci", ",", "num_train", "=", "7", ",", "num_test", "=", "7", ")", ",", "\n", "wrapped_partial", "(", "metric_sap", ",", "num_train", "=", "7", ",", "num_test", "=", "7", ")", ",", "\n", "wrapped_partial", "(", "metric_factor_vae", ",", "num_train", "=", "7", ",", "num_eval", "=", "7", ",", "num_variance_estimate", "=", "7", ")", ",", "\n", "wrapped_partial", "(", "metric_flatness", ",", "repeats", "=", "7", ")", ",", "\n", "wrapped_partial", "(", "metric_factored_components", ",", "repeats", "=", "7", ")", ",", "\n", "]", ")", "\n", "def", "test_metrics", "(", "metric_fn", ")", ":", "\n", "    ", "z_size", "=", "8", "\n", "# ground truth data", "\n", "# TODO: DisentDataset should not be needed to compute metrics!", "\n", "dataset", "=", "DisentDataset", "(", "XYObjectData", "(", ")", ",", "transform", "=", "ToImgTensorF32", "(", ")", ")", "\n", "# randomly sampled representation", "\n", "get_repr", "=", "lambda", "x", ":", "torch", ".", "randn", "(", "len", "(", "x", ")", ",", "z_size", ")", "\n", "# evaluate", "\n", "metric_fn", "(", "dataset", ",", "get_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.util.no_stdout": [[38, 44], ["open"], "function", ["None"], ["@", "contextmanager", "\n", "def", "no_stdout", "(", ")", ":", "\n", "    ", "old_stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "yield", "\n", "sys", ".", "stdout", "=", "old_stdout", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.util.no_stderr": [[46, 52], ["open"], "function", ["None"], ["", "@", "contextmanager", "\n", "def", "no_stderr", "(", ")", ":", "\n", "    ", "old_stderr", "=", "sys", ".", "stderr", "\n", "sys", ".", "stderr", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "yield", "\n", "sys", ".", "stderr", "=", "old_stderr", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.util.temp_wd": [[54, 60], ["os.getcwd", "os.chdir", "os.chdir"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "temp_wd", "(", "new_wd", ")", ":", "\n", "    ", "old_wd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "new_wd", ")", "\n", "yield", "\n", "os", ".", "chdir", "(", "old_wd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.util.temp_sys_args": [[62, 69], ["None"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "temp_sys_args", "(", "new_argv", ")", ":", "\n", "# TODO: should this copy values?", "\n", "    ", "old_argv", "=", "sys", ".", "argv", "\n", "sys", ".", "argv", "=", "new_argv", "\n", "yield", "\n", "sys", ".", "argv", "=", "old_argv", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.util.temp_environ": [[71, 91], ["os.environ.update"], "function", ["None"], ["", "@", "contextmanager", "\n", "def", "temp_environ", "(", "environment", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "# TODO: should this copy values? -- could use unittest.mock.patch.dict(...)", "\n", "# save the old environment", "\n", "    ", "existing_env", "=", "{", "}", "\n", "for", "k", "in", "environment", ":", "\n", "        ", "if", "k", "in", "os", ".", "environ", ":", "\n", "            ", "existing_env", "[", "k", "]", "=", "os", ".", "environ", "[", "k", "]", "\n", "# update the environment", "\n", "", "", "os", ".", "environ", ".", "update", "(", "environment", ")", "\n", "# run the context", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "# restore the original environment", "\n", "        ", "for", "k", "in", "environment", ":", "\n", "            ", "if", "k", "in", "existing_env", ":", "\n", "                ", "os", ".", "environ", "[", "k", "]", "=", "existing_env", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "del", "os", ".", "environ", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_frameworks.test_frameworks": [[98, 127], ["pytest.mark.parametrize", "disent.dataset.DisentDataset", "torch.utils.data.DataLoader", "Framework", "pickle.dumps", "pytorch_lightning.Trainer", "pl.Trainer.fit", "pickle.dumps", "disent.dataset.data.XYObjectData", "Data", "DataSampler", "disent.dataset.transform.ToImgTensorF32", "disent.model.AutoEncoder", "Framework.cfg", "disent.model.ae.EncoderLinear", "disent.model.ae.DecoderLinear", "issubclass"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "[", "'Framework'", ",", "'cfg_kwargs'", ",", "'Data'", "]", ",", "_TEST_FRAMEWORKS", ")", "\n", "def", "test_frameworks", "(", "Framework", ",", "cfg_kwargs", ",", "Data", ")", ":", "\n", "    ", "DataSampler", "=", "{", "\n", "1", ":", "GroundTruthSingleSampler", ",", "\n", "2", ":", "GroundTruthPairSampler", ",", "\n", "3", ":", "GroundTruthTripleSampler", ",", "\n", "}", "[", "Framework", ".", "REQUIRED_OBS", "]", "\n", "\n", "data", "=", "XYObjectData", "(", ")", "if", "(", "Data", "is", "None", ")", "else", "Data", "(", ")", "\n", "dataset", "=", "DisentDataset", "(", "data", ",", "DataSampler", "(", ")", ",", "transform", "=", "ToImgTensorF32", "(", ")", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ")", "\n", "\n", "framework", "=", "Framework", "(", "\n", "model", "=", "AutoEncoder", "(", "\n", "encoder", "=", "EncoderLinear", "(", "x_shape", "=", "data", ".", "x_shape", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "2", "if", "issubclass", "(", "Framework", ",", "Vae", ")", "else", "1", ")", ",", "\n", "decoder", "=", "DecoderLinear", "(", "x_shape", "=", "data", ".", "x_shape", ",", "z_size", "=", "6", ")", ",", "\n", ")", ",", "\n", "cfg", "=", "Framework", ".", "cfg", "(", "**", "cfg_kwargs", ")", "\n", ")", "\n", "\n", "# test pickling before training", "\n", "pickle", ".", "dumps", "(", "framework", ")", "\n", "\n", "# train!", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "logger", "=", "False", ",", "checkpoint_callback", "=", "False", ",", "max_steps", "=", "256", ",", "fast_dev_run", "=", "True", ")", "\n", "trainer", ".", "fit", "(", "framework", ",", "dataloader", ")", "\n", "\n", "# test pickling after training, something may have changed!", "\n", "pickle", ".", "dumps", "(", "framework", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_frameworks.test_framework_pickling": [[129, 140], ["pytest.mark.parametrize", "Framework", "pickle.dumps", "disent.model.AutoEncoder", "Framework.cfg", "disent.model.ae.EncoderLinear", "disent.model.ae.DecoderLinear", "issubclass"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "[", "'Framework'", ",", "'cfg_kwargs'", ",", "'Data'", "]", ",", "_TEST_FRAMEWORKS", ")", "\n", "def", "test_framework_pickling", "(", "Framework", ",", "cfg_kwargs", ",", "Data", ")", ":", "\n", "    ", "framework", "=", "Framework", "(", "\n", "model", "=", "AutoEncoder", "(", "\n", "encoder", "=", "EncoderLinear", "(", "x_shape", "=", "(", "64", ",", "64", ",", "3", ")", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "2", "if", "issubclass", "(", "Framework", ",", "Vae", ")", "else", "1", ")", ",", "\n", "decoder", "=", "DecoderLinear", "(", "x_shape", "=", "(", "64", ",", "64", ",", "3", ")", ",", "z_size", "=", "6", ")", ",", "\n", ")", ",", "\n", "cfg", "=", "Framework", ".", "cfg", "(", "**", "cfg_kwargs", ")", "\n", ")", "\n", "# test pickling!", "\n", "pickle", ".", "dumps", "(", "framework", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_frameworks.test_framework_config_defaults": [[142, 170], ["dataclasses.asdict", "dict", "dataclasses.asdict", "dict", "BetaVae.cfg", "BetaVae.cfg"], "function", ["None"], ["", "def", "test_framework_config_defaults", "(", ")", ":", "\n", "# import torch", "\n", "# we test that defaults are working recursively", "\n", "    ", "assert", "asdict", "(", "BetaVae", ".", "cfg", "(", ")", ")", "==", "dict", "(", "\n", "optimizer", "=", "'adam'", ",", "\n", "optimizer_kwargs", "=", "None", ",", "\n", "recon_loss", "=", "'mse'", ",", "\n", "disable_aug_loss", "=", "False", ",", "\n", "detach_decoder", "=", "False", ",", "\n", "disable_rec_loss", "=", "False", ",", "\n", "disable_reg_loss", "=", "False", ",", "\n", "loss_reduction", "=", "'mean'", ",", "\n", "latent_distribution", "=", "'normal'", ",", "\n", "kl_loss_mode", "=", "'direct'", ",", "\n", "beta", "=", "0.003", ",", "\n", ")", "\n", "assert", "asdict", "(", "BetaVae", ".", "cfg", "(", "recon_loss", "=", "'bce'", ",", "kl_loss_mode", "=", "'approx'", ")", ")", "==", "dict", "(", "\n", "optimizer", "=", "'adam'", ",", "\n", "optimizer_kwargs", "=", "None", ",", "\n", "recon_loss", "=", "'bce'", ",", "\n", "disable_aug_loss", "=", "False", ",", "\n", "detach_decoder", "=", "False", ",", "\n", "disable_rec_loss", "=", "False", ",", "\n", "disable_reg_loss", "=", "False", ",", "\n", "loss_reduction", "=", "'mean'", ",", "\n", "latent_distribution", "=", "'normal'", ",", "\n", "kl_loss_mode", "=", "'approx'", ",", "\n", "beta", "=", "0.003", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.tests.test_frameworks.test_ada_vae_similarity": [[173, 218], ["disent.util.seeds.seed", "disent.dataset.data.XYObjectData", "disent.dataset.DisentDataset", "torch.utils.data.DataLoader", "disent.model.AutoEncoder", "AdaGVaeMinimal", "AdaVae", "AdaVae", "next", "disent.util.seeds.seed", "AdaGVaeMinimal.do_training_step", "disent.util.seeds.seed", "AdaGVaeMinimal.do_training_step", "torch.allclose", "disent.util.seeds.seed", "AdaVae.do_training_step", "disent.util.seeds.seed", "AdaVae.do_training_step", "torch.allclose", "disent.util.seeds.seed", "AdaVae.do_training_step", "disent.util.seeds.seed", "AdaVae.do_training_step", "torch.allclose", "torch.allclose", "torch.allclose", "iter", "disent.dataset.sampling.RandomSampler", "disent.dataset.transform.ToImgTensorF32", "disent.model.ae.EncoderLinear", "disent.model.ae.DecoderLinear", "AdaGVaeMinimal.cfg", "AdaVae.cfg", "AdaVae.cfg"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed", "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.do_training_step", "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.do_training_step", "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.do_training_step", "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.do_training_step", "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.do_training_step", "home.repos.pwc.inspect_result.nmichlo_disent.util.seeds.seed", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.do_training_step"], ["", "def", "test_ada_vae_similarity", "(", ")", ":", "\n", "\n", "    ", "seed", "(", "42", ")", "\n", "\n", "data", "=", "XYObjectData", "(", ")", "\n", "dataset", "=", "DisentDataset", "(", "data", ",", "sampler", "=", "RandomSampler", "(", "num_samples", "=", "2", ")", ",", "transform", "=", "ToImgTensorF32", "(", ")", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "num_workers", "=", "0", ",", "batch_size", "=", "3", ")", "\n", "\n", "model", "=", "AutoEncoder", "(", "\n", "encoder", "=", "EncoderLinear", "(", "x_shape", "=", "data", ".", "x_shape", ",", "z_size", "=", "25", ",", "z_multiplier", "=", "2", ")", ",", "\n", "decoder", "=", "DecoderLinear", "(", "x_shape", "=", "data", ".", "x_shape", ",", "z_size", "=", "25", ",", "z_multiplier", "=", "1", ")", ",", "\n", ")", "\n", "\n", "adavae0", "=", "AdaGVaeMinimal", "(", "model", "=", "model", ",", "cfg", "=", "AdaGVaeMinimal", ".", "cfg", "(", ")", ")", "\n", "adavae1", "=", "AdaVae", "(", "model", "=", "model", ",", "cfg", "=", "AdaVae", ".", "cfg", "(", ")", ")", "\n", "adavae2", "=", "AdaVae", "(", "model", "=", "model", ",", "cfg", "=", "AdaVae", ".", "cfg", "(", "\n", "ada_average_mode", "=", "'gvae'", ",", "\n", "ada_thresh_mode", "=", "'symmetric_kl'", ",", "\n", "ada_thresh_ratio", "=", "0.5", ",", "\n", ")", ")", "\n", "\n", "batch", "=", "next", "(", "iter", "(", "dataloader", ")", ")", "\n", "\n", "# TODO: add a TempNumpySeed equivalent for torch", "\n", "seed", "(", "777", ")", "\n", "result0a", "=", "adavae0", ".", "do_training_step", "(", "batch", ",", "0", ")", "\n", "seed", "(", "777", ")", "\n", "result0b", "=", "adavae0", ".", "do_training_step", "(", "batch", ",", "0", ")", "\n", "assert", "torch", ".", "allclose", "(", "result0a", ",", "result0b", ")", ",", "f'{result0a} does not match {result0b}'", "\n", "\n", "seed", "(", "777", ")", "\n", "result1a", "=", "adavae1", ".", "do_training_step", "(", "batch", ",", "0", ")", "\n", "seed", "(", "777", ")", "\n", "result1b", "=", "adavae1", ".", "do_training_step", "(", "batch", ",", "0", ")", "\n", "assert", "torch", ".", "allclose", "(", "result1a", ",", "result1b", ")", ",", "f'{result1a} does not match {result1b}'", "\n", "\n", "seed", "(", "777", ")", "\n", "result2a", "=", "adavae2", ".", "do_training_step", "(", "batch", ",", "0", ")", "\n", "seed", "(", "777", ")", "\n", "result2b", "=", "adavae2", ".", "do_training_step", "(", "batch", ",", "0", ")", "\n", "assert", "torch", ".", "allclose", "(", "result2a", ",", "result2b", ")", ",", "f'{result2a} does not match {result2b}'", "\n", "\n", "# check similar", "\n", "assert", "torch", ".", "allclose", "(", "result0a", ",", "result1a", ")", ",", "f'{result0a} does not match {result1a}'", "\n", "assert", "torch", ".", "allclose", "(", "result1a", ",", "result2a", ")", ",", "f'{result1a} does not match {result2a}'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.nn.weights.init_model_weights": [[59, 91], ["log.log", "model.apply", "log.log", "log.log", "isinstance", "KeyError", "torch.nn.init.zeros_", "repr", "sorted"], "function", ["None"], ["def", "init_model_weights", "(", "model", ":", "nn", ".", "Module", ",", "mode", ":", "Optional", "[", "str", "]", "=", "'xavier_normal'", ",", "log_level", "=", "logging", ".", "INFO", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "count", "=", "0", "\n", "\n", "# get default mode", "\n", "if", "mode", "is", "None", ":", "\n", "        ", "mode", "=", "'default'", "\n", "\n", "", "def", "_apply_init_weights", "(", "m", ")", ":", "\n", "        ", "nonlocal", "count", "\n", "init", ",", "count", "=", "False", ",", "count", "+", "1", "\n", "\n", "# actually initialise!", "\n", "if", "mode", "==", "'default'", ":", "\n", "            ", "pass", "\n", "", "elif", "mode", "in", "_WEIGHT_INIT_FNS", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "                ", "_WEIGHT_INIT_FNS", "[", "mode", "]", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "init", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "f'Unknown init mode: {repr(mode)}, valid modes are: {[\"default\"] + sorted(_WEIGHT_INIT_FNS)}'", ")", "\n", "\n", "# print messages", "\n", "", "if", "init", ":", "\n", "            ", "log", ".", "log", "(", "log_level", ",", "f'| {count:03d} {c.lGRN}INIT{c.RST}: {m.__class__.__name__}'", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "log", "(", "log_level", ",", "f'| {count:03d} {c.lRED}SKIP{c.RST}: {m.__class__.__name__}'", ")", "\n", "\n", "", "", "log", ".", "log", "(", "log_level", ",", "f'Initialising Model Layers: {mode}'", ")", "\n", "model", ".", "apply", "(", "_apply_init_weights", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.nn.modules.DisentModule._forward_unimplemented": [[36, 40], ["RuntimeError"], "methods", ["None"], ["    ", "def", "_forward_unimplemented", "(", "self", ",", "*", "args", ")", ":", "\n", "# Annoying fix applied by torch for Module.forward:", "\n", "# https://github.com/python/mypy/issues/8795", "\n", "        ", "raise", "RuntimeError", "(", "'This should never run!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.nn.modules.DisentModule.forward": [[41, 43], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.nn.activations._SwishFunction.forward": [[43, 48], ["ctx.save_for_backward", "torch.sigmoid"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "y", "=", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "ctx", ".", "save_for_backward", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.nn.activations._SwishFunction.backward": [[49, 54], ["torch.sigmoid"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "ctx", ".", "saved_variables", "[", "0", "]", "\n", "sigmoid_x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "grad_output", "*", "(", "sigmoid_x", "*", "(", "1", "+", "x", "*", "(", "1", "-", "sigmoid_x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.nn.activations.Swish.forward": [[61, 63], ["_SwishFunction.apply"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "tensor", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "_SwishFunction", ".", "apply", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.nn.activations.swish": [[56, 58], ["_SwishFunction.apply"], "function", ["None"], ["", "", "def", "swish", "(", "tensor", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "_SwishFunction", ".", "apply", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.get_kernel_size": [[45, 57], ["disent.nn.functional._util_generic.generic_as_int32", "int", "disent.nn.functional._util_generic.generic_max"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_as_int32", "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_max"], ["def", "get_kernel_size", "(", "sigma", ":", "TypeGenericTensor", "=", "1.0", ",", "truncate", ":", "TypeGenericTensor", "=", "4.0", ")", ":", "\n", "    ", "\"\"\"\n    This is how sklearn chooses kernel sizes.\n    - sigma is the standard deviation, and truncate is the number of deviations away to truncate\n    - our version broadcasts sigma and truncate together, returning the max kernel size needed over all values\n    \"\"\"", "\n", "# compute radius", "\n", "radius", "=", "generic_as_int32", "(", "truncate", "*", "sigma", "+", "0.5", ")", "\n", "# get maximum value", "\n", "radius", "=", "int", "(", "generic_max", "(", "radius", ")", ")", "\n", "# compute diameter", "\n", "return", "2", "*", "radius", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel": [[59, 77], ["torch.as_tensor", "torch.as_tensor", "torch.broadcast_tensors", "disent.nn.functional._other.torch_unsqueeze_l", "disent.nn.functional._other.torch_unsqueeze_r", "_conv2d_kernels.get_kernel_size", "torch.arange", "torch.exp", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._other.torch_unsqueeze_l", "home.repos.pwc.inspect_result.nmichlo_disent.functional._other.torch_unsqueeze_r", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.get_kernel_size"], ["", "def", "torch_gaussian_kernel", "(", "\n", "sigma", ":", "TypeGenericTorch", "=", "1.0", ",", "truncate", ":", "TypeGenericTorch", "=", "4.0", ",", "size", ":", "int", "=", "None", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "None", ",", "\n", ")", ":", "\n", "# broadcast tensors together -- data may reference single memory locations", "\n", "    ", "sigma", "=", "torch", ".", "as_tensor", "(", "sigma", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "truncate", "=", "torch", ".", "as_tensor", "(", "truncate", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "sigma", ",", "truncate", "=", "torch", ".", "broadcast_tensors", "(", "sigma", ",", "truncate", ")", "\n", "# compute default size", "\n", "if", "size", "is", "None", ":", "\n", "        ", "size", ":", "int", "=", "get_kernel_size", "(", "sigma", "=", "sigma", ",", "truncate", "=", "truncate", ")", "\n", "# compute kernel", "\n", "", "x", "=", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "sigma", ".", "dtype", ",", "device", "=", "sigma", ".", "device", ")", "-", "(", "size", "-", "1", ")", "/", "2", "\n", "# pad tensors correctly", "\n", "x", "=", "torch_unsqueeze_l", "(", "x", ",", "n", "=", "sigma", ".", "ndim", ")", "\n", "s", "=", "torch_unsqueeze_r", "(", "sigma", ",", "n", "=", "1", ")", "\n", "# compute", "\n", "return", "torch", ".", "exp", "(", "-", "(", "x", "**", "2", ")", "/", "(", "2", "*", "s", "**", "2", ")", ")", "/", "(", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", ")", "*", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel_2d": [[79, 92], ["_conv2d_kernels.torch_gaussian_kernel", "_conv2d_kernels.torch_gaussian_kernel"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel"], ["", "def", "torch_gaussian_kernel_2d", "(", "\n", "sigma", ":", "TypeGenericTorch", "=", "1.0", ",", "truncate", ":", "TypeGenericTorch", "=", "4.0", ",", "size", ":", "int", "=", "None", ",", "\n", "sigma_b", ":", "TypeGenericTorch", "=", "None", ",", "truncate_b", ":", "TypeGenericTorch", "=", "None", ",", "size_b", ":", "int", "=", "None", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "None", ",", "\n", ")", ":", "\n", "# set default values", "\n", "    ", "if", "sigma_b", "is", "None", ":", "sigma_b", "=", "sigma", "\n", "if", "truncate_b", "is", "None", ":", "truncate_b", "=", "truncate", "\n", "if", "size_b", "is", "None", ":", "size_b", "=", "size", "\n", "# compute kernel", "\n", "kh", "=", "torch_gaussian_kernel", "(", "sigma", "=", "sigma", ",", "truncate", "=", "truncate", ",", "size", "=", "size", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "kw", "=", "torch_gaussian_kernel", "(", "sigma", "=", "sigma_b", ",", "truncate", "=", "truncate_b", ",", "size", "=", "size_b", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "return", "kh", "[", "...", ",", ":", ",", "None", "]", "*", "kw", "[", "...", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_box_kernel": [[94, 107], ["torch.abs", "torch.abs.max", "torch.abs", "torch.as_tensor", "torch.arange"], "function", ["None"], ["", "def", "torch_box_kernel", "(", "radius", ":", "TypeGenericTorch", "=", "1", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "None", ")", ":", "\n", "    ", "radius", "=", "torch", ".", "abs", "(", "torch", ".", "as_tensor", "(", "radius", ",", "device", "=", "device", ")", ")", "\n", "assert", "radius", ".", "dtype", "in", "{", "torch", ".", "int32", ",", "torch", ".", "int64", "}", ",", "f'box kernel radius must be of integer type: {radius.dtype}'", "\n", "# box kernel values", "\n", "radius_max", "=", "radius", ".", "max", "(", ")", "\n", "crange", "=", "torch", ".", "abs", "(", "torch", ".", "arange", "(", "radius_max", "*", "2", "+", "1", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "-", "radius_max", ")", "\n", "# pad everything", "\n", "radius", "=", "radius", "[", "...", ",", "None", "]", "\n", "crange", "=", "crange", "[", "None", ",", "...", "]", "\n", "# compute box kernel", "\n", "kernel", "=", "(", "crange", "<=", "radius", ")", ".", "to", "(", "dtype", ")", "/", "(", "radius", "*", "2", "+", "1", ")", "\n", "# done!", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_box_kernel_2d": [[109, 120], ["_conv2d_kernels.torch_box_kernel", "_conv2d_kernels.torch_box_kernel"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_box_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_box_kernel"], ["", "def", "torch_box_kernel_2d", "(", "\n", "radius", ":", "TypeGenericTorch", "=", "1", ",", "\n", "radius_b", ":", "TypeGenericTorch", "=", "None", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "None", "\n", ")", ":", "\n", "# set default values", "\n", "    ", "if", "radius_b", "is", "None", ":", "radius_b", "=", "radius", "\n", "# compute kernel", "\n", "kh", "=", "torch_box_kernel", "(", "radius", "=", "radius", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "kw", "=", "torch_box_kernel", "(", "radius", "=", "radius_b", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "return", "kh", "[", "...", ",", ":", ",", "None", "]", "*", "kw", "[", "...", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d._check_conv2d_inputs": [[34, 47], ["torch.broadcast_shapes", "repr", "repr"], "function", ["None"], ["def", "_check_conv2d_inputs", "(", "signal", ",", "kernel", ")", ":", "\n", "    ", "assert", "signal", ".", "ndim", "==", "4", ",", "f'signal has {repr(signal.ndim)} dimensions, must have 4 dimensions instead: BxCxHxW'", "\n", "assert", "kernel", ".", "ndim", "==", "2", "or", "kernel", ".", "ndim", "==", "4", ",", "f'kernel has {repr(kernel.ndim)} dimensions, must have 2 or 4 dimensions instead: HxW or BxCxHxW'", "\n", "# increase kernel size", "\n", "if", "kernel", ".", "ndim", "==", "2", ":", "\n", "        ", "kernel", "=", "kernel", "[", "None", ",", "None", ",", "...", "]", "\n", "# check kernel is an odd size", "\n", "", "kh", ",", "kw", "=", "kernel", ".", "shape", "[", "-", "2", ":", "]", "\n", "assert", "kh", "%", "2", "!=", "0", "and", "kw", "%", "2", "!=", "0", ",", "f'kernel dimension sizes must be odd: ({kh}, {kw})'", "\n", "# check that broadcasting does not adjust the signal shape... TODO: relax this limitation?", "\n", "assert", "torch", ".", "broadcast_shapes", "(", "signal", ".", "shape", "[", ":", "2", "]", ",", "kernel", ".", "shape", "[", ":", "2", "]", ")", "==", "signal", ".", "shape", "[", ":", "2", "]", "\n", "# done!", "\n", "return", "signal", ",", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d.torch_conv2d_channel_wise": [[49, 60], ["_conv2d._check_conv2d_inputs", "signal.reshape", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d.reshape", "kernel.size", "kernel.size"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d._check_conv2d_inputs", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.size", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.size"], ["", "def", "torch_conv2d_channel_wise", "(", "signal", ",", "kernel", ")", ":", "\n", "    ", "\"\"\"\n    Apply the kernel to each channel separately!\n    \"\"\"", "\n", "signal", ",", "kernel", "=", "_check_conv2d_inputs", "(", "signal", ",", "kernel", ")", "\n", "# split channels into singel images", "\n", "fsignal", "=", "signal", ".", "reshape", "(", "-", "1", ",", "1", ",", "*", "signal", ".", "shape", "[", "2", ":", "]", ")", "\n", "# convolve each channel image", "\n", "out", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "fsignal", ",", "kernel", ",", "padding", "=", "(", "kernel", ".", "size", "(", "-", "2", ")", "//", "2", ",", "kernel", ".", "size", "(", "-", "1", ")", "//", "2", ")", ")", "\n", "# reshape into original", "\n", "return", "out", ".", "reshape", "(", "-", "1", ",", "signal", ".", "shape", "[", "1", "]", ",", "*", "out", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d.torch_conv2d_channel_wise_fft": [[62, 85], ["_conv2d._check_conv2d_inputs", "numpy.array", "numpy.array", "torch.fft.rfft2", "torch.fft.rfft2", "torch.fft.irfft2", "tuple", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d._check_conv2d_inputs", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "torch_conv2d_channel_wise_fft", "(", "signal", ",", "kernel", ")", ":", "\n", "    ", "\"\"\"\n    The same as torch_conv2d_channel_wise, but apply the kernel using fft.\n    This is much more efficient for large filter sizes.\n\n    Reference implementation is from: https://github.com/pyro-ppl/pyro/blob/ae55140acfdc6d4eade08b434195234e5ae8c261/pyro/ops/tensor_utils.py#L187\n    \"\"\"", "\n", "signal", ",", "kernel", "=", "_check_conv2d_inputs", "(", "signal", ",", "kernel", ")", "\n", "# get last dimension sizes", "\n", "sig_shape", "=", "np", ".", "array", "(", "signal", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "ker_shape", "=", "np", ".", "array", "(", "kernel", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "# compute padding", "\n", "padded_shape", "=", "sig_shape", "+", "ker_shape", "-", "1", "\n", "# Compute convolution using fft.", "\n", "f_signal", "=", "torch", ".", "fft", ".", "rfft2", "(", "signal", ",", "s", "=", "tuple", "(", "padded_shape", ")", ")", "\n", "f_kernel", "=", "torch", ".", "fft", ".", "rfft2", "(", "kernel", ",", "s", "=", "tuple", "(", "padded_shape", ")", ")", "\n", "result", "=", "torch", ".", "fft", ".", "irfft2", "(", "f_signal", "*", "f_kernel", ",", "s", "=", "tuple", "(", "padded_shape", ")", ")", "\n", "# crop final result", "\n", "s", "=", "(", "padded_shape", "-", "sig_shape", ")", "//", "2", "\n", "f", "=", "s", "+", "sig_shape", "\n", "crop", "=", "result", "[", "...", ",", "s", "[", "0", "]", ":", "f", "[", "0", "]", ",", "s", "[", "1", "]", ":", "f", "[", "1", "]", "]", "\n", "# done...", "\n", "return", "crop", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_as_int32": [[43, 52], ["isinstance", "int", "isinstance", "input.to", "isinstance", "input.astype", "TypeError", "type"], "function", ["None"], ["def", "generic_as_int32", "(", "input", ":", "TypeGenericTensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "input", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "return", "int", "(", "input", ")", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "input", ".", "to", "(", "torch", ".", "int32", ")", "\n", "", "elif", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "input", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'invalid type: {type(input)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_max": [[54, 63], ["isinstance", "isinstance", "input.max", "isinstance", "input.max", "TypeError", "type"], "function", ["None"], ["", "", "def", "generic_max", "(", "input", ":", "TypeGenericTensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "input", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "return", "input", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "input", ".", "max", "(", ")", "\n", "", "elif", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "input", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'invalid type: {type(input)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_min": [[65, 74], ["isinstance", "isinstance", "input.min", "isinstance", "input.min", "TypeError", "type"], "function", ["None"], ["", "", "def", "generic_min", "(", "input", ":", "TypeGenericTensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "input", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "return", "input", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "input", ".", "min", "(", ")", "\n", "", "elif", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "input", ".", "min", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'invalid type: {type(input)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_shape": [[76, 85], ["isinstance", "isinstance", "isinstance", "TypeError", "type"], "function", ["None"], ["", "", "def", "generic_shape", "(", "input", ":", "TypeGenericTensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "input", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "return", "(", ")", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "input", ".", "shape", "\n", "", "elif", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "input", ".", "shape", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'invalid type: {type(input)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._util_generic.generic_ndim": [[87, 96], ["isinstance", "isinstance", "isinstance", "TypeError", "type"], "function", ["None"], ["", "", "def", "generic_ndim", "(", "input", ":", "TypeGenericTensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "input", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "return", "0", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "input", ".", "ndim", "\n", "", "elif", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "input", ".", "ndim", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'invalid type: {type(input)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct._flatten_dim_to_end": [[34, 42], ["torch.moveaxis", "x.reshape.reshape"], "function", ["None"], ["def", "_flatten_dim_to_end", "(", "input", ",", "dim", ")", ":", "\n", "# get shape", "\n", "    ", "s", "=", "input", ".", "shape", "\n", "n", "=", "s", "[", "dim", "]", "\n", "# do operation", "\n", "x", "=", "torch", ".", "moveaxis", "(", "input", ",", "dim", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "n", ")", "\n", "return", "x", ",", "s", ",", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct._unflatten_dim_to_end": [[44, 52], ["list", "list.append", "input.reshape", "torch.moveaxis", "list.pop"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "_unflatten_dim_to_end", "(", "input", ",", "dim", ",", "shape", ")", ":", "\n", "# get intermediate shape", "\n", "    ", "s", "=", "list", "(", "shape", ")", "\n", "s", ".", "append", "(", "s", ".", "pop", "(", "dim", ")", ")", "\n", "# undo operation", "\n", "x", "=", "input", ".", "reshape", "(", "*", "s", ")", "\n", "x", "=", "torch", ".", "moveaxis", "(", "x", ",", "-", "1", ",", "dim", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct": [[54, 81], ["_dct._flatten_dim_to_end", "x[].flip", "torch.cat", "torch.fft.fft", "_dct._unflatten_dim_to_end", "ValueError", "torch.arange", "torch.cos", "torch.sin", "torch.real", "torch.imag"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._dct._flatten_dim_to_end", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct._unflatten_dim_to_end"], ["", "def", "torch_dct", "(", "x", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Discrete Cosine Transform (DCT) Type II\n    \"\"\"", "\n", "x", ",", "x_shape", ",", "n", "=", "_flatten_dim_to_end", "(", "x", ",", "dim", "=", "dim", ")", "\n", "if", "n", "%", "2", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "f'dct does not support odd sized dimension! trying to compute dct over dimension: {dim} of tensor with shape: {x_shape}'", ")", "\n", "\n", "# concatenate even and odd offsets", "\n", "", "v_evn", "=", "x", "[", ":", ",", "0", ":", ":", "2", "]", "\n", "v_odd", "=", "x", "[", ":", ",", "1", ":", ":", "2", "]", ".", "flip", "(", "[", "1", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v_evn", ",", "v_odd", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# fast fourier transform", "\n", "fft", "=", "torch", ".", "fft", ".", "fft", "(", "v", ")", "\n", "\n", "# compute real & imaginary forward weights", "\n", "k", "=", "torch", ".", "arange", "(", "n", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "*", "(", "-", "np", ".", "pi", "/", "(", "2", "*", "n", ")", ")", "\n", "k", "=", "k", "[", "None", ",", ":", "]", "\n", "wr", "=", "torch", ".", "cos", "(", "k", ")", "*", "2", "\n", "wi", "=", "torch", ".", "sin", "(", "k", ")", "*", "2", "\n", "\n", "# compute dct", "\n", "dct", "=", "torch", ".", "real", "(", "fft", ")", "*", "wr", "-", "torch", ".", "imag", "(", "fft", ")", "*", "wi", "\n", "\n", "# restore shape", "\n", "return", "_unflatten_dim_to_end", "(", "dct", ",", "dim", ",", "x_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct": [[83, 116], ["_dct._flatten_dim_to_end", "torch.cat", "torch.view_as_complex", "torch.fft.ifft", "torch.real", "torch.zeros_like", "v[].flip", "_dct._unflatten_dim_to_end", "ValueError", "torch.arange", "torch.cos", "torch.sin", "torch.stack", "dct_real[].flip"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._dct._flatten_dim_to_end", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct._unflatten_dim_to_end"], ["", "def", "torch_idct", "(", "dct", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Inverse Discrete Cosine Transform (Inverse DCT) Type III\n    \"\"\"", "\n", "dct", ",", "dct_shape", ",", "n", "=", "_flatten_dim_to_end", "(", "dct", ",", "dim", "=", "dim", ")", "\n", "if", "n", "%", "2", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "f'idct does not support odd sized dimension! trying to compute idct over dimension: {dim} of tensor with shape: {dct_shape}'", ")", "\n", "\n", "# compute real & imaginary backward weights", "\n", "", "k", "=", "torch", ".", "arange", "(", "n", ",", "dtype", "=", "dct", ".", "dtype", ",", "device", "=", "dct", ".", "device", ")", "*", "(", "np", ".", "pi", "/", "(", "2", "*", "n", ")", ")", "\n", "k", "=", "k", "[", "None", ",", ":", "]", "\n", "wr", "=", "torch", ".", "cos", "(", "k", ")", "/", "2", "\n", "wi", "=", "torch", ".", "sin", "(", "k", ")", "/", "2", "\n", "\n", "dct_real", "=", "dct", "\n", "dct_imag", "=", "torch", ".", "cat", "(", "[", "0", "*", "dct_real", "[", ":", ",", ":", "1", "]", ",", "-", "dct_real", "[", ":", ",", "1", ":", "]", ".", "flip", "(", "[", "1", "]", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "fft_r", "=", "dct_real", "*", "wr", "-", "dct_imag", "*", "wi", "\n", "fft_i", "=", "dct_real", "*", "wi", "+", "dct_imag", "*", "wr", "\n", "# to complex number", "\n", "fft", "=", "torch", ".", "view_as_complex", "(", "torch", ".", "stack", "(", "[", "fft_r", ",", "fft_i", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# inverse fast fourier transform", "\n", "v", "=", "torch", ".", "fft", ".", "ifft", "(", "fft", ")", "\n", "v", "=", "torch", ".", "real", "(", "v", ")", "\n", "\n", "# undo even and odd offsets", "\n", "x", "=", "torch", ".", "zeros_like", "(", "dct", ")", "\n", "x", "[", ":", ",", "0", ":", ":", "2", "]", "=", "v", "[", ":", ",", ":", "(", "n", "+", "1", ")", "//", "2", "]", "# (N+1)//2 == N-(N//2)", "\n", "x", "[", ":", ",", "1", ":", ":", "2", "]", "+=", "v", "[", ":", ",", "(", "n", "+", "0", ")", "//", "2", ":", "]", ".", "flip", "(", "[", "1", "]", ")", "\n", "\n", "# restore shape", "\n", "return", "_unflatten_dim_to_end", "(", "x", ",", "dim", ",", "dct_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct2": [[118, 122], ["_dct.torch_dct", "_dct.torch_dct"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_dct"], ["", "def", "torch_dct2", "(", "x", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "2", ")", ":", "\n", "    ", "d", "=", "torch_dct", "(", "x", ",", "dim", "=", "dim1", ")", "\n", "d", "=", "torch_dct", "(", "d", ",", "dim", "=", "dim2", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct2": [[124, 128], ["_dct.torch_idct", "_dct.torch_idct"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct", "home.repos.pwc.inspect_result.nmichlo_disent.functional._dct.torch_idct"], ["", "def", "torch_idct2", "(", "d", ",", "dim1", "=", "-", "1", ",", "dim2", "=", "-", "2", ")", ":", "\n", "    ", "x", "=", "torch_idct", "(", "d", ",", "dim", "=", "dim2", ")", "\n", "x", "=", "torch_idct", "(", "x", ",", "dim", "=", "dim1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._pca.torch_pca_eig": [[33, 62], ["torch.linalg.eig", "torch.real", "torch.real", "torch.abs", "torch.argsort", "torch.mm", "torch.sqrt", "torch.mm", "X.mean", "torch.diagflat", "torch.diagonal"], "function", ["None"], ["def", "torch_pca_eig", "(", "X", ",", "center", "=", "True", ",", "scale", "=", "False", ",", "zero_negatives", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    perform PCA over X\n    - X is of size (num_points, vec_size)\n\n    NOTE: unlike PCA_svd, the number of vectors/values returned is always: vec_size\n\n    WARNING: this may be incorrect!\n    \"\"\"", "\n", "n", ",", "m", "=", "X", ".", "shape", "\n", "# center points along axes", "\n", "if", "center", ":", "\n", "        ", "X", "=", "X", "-", "X", ".", "mean", "(", "dim", "=", "0", ")", "\n", "# compute covariance -- TODO: optimise this line", "\n", "", "covariance", "=", "(", "1", "/", "(", "n", "-", "1", ")", ")", "*", "torch", ".", "mm", "(", "X", ".", "T", ",", "X", ")", "\n", "if", "scale", ":", "\n", "        ", "scaling", "=", "torch", ".", "sqrt", "(", "1", "/", "torch", ".", "diagonal", "(", "covariance", ")", ")", "\n", "covariance", "=", "torch", ".", "mm", "(", "torch", ".", "diagflat", "(", "scaling", ")", ",", "covariance", ")", "\n", "# compute eigen values and eigen vectors", "\n", "", "eigenvalues", ",", "eigenvectors", "=", "torch", ".", "linalg", ".", "eig", "(", "covariance", ")", "\n", "# sort components by decreasing variance", "\n", "components", "=", "torch", ".", "real", "(", "eigenvectors", ".", "T", ")", "# TODO: handle imaginary numbers!", "\n", "explained_variance", "=", "torch", ".", "real", "(", "eigenvalues", ")", "# TODO: handle imaginary numbers!", "\n", "# handle n < m -- numerical stability issues return negative values!", "\n", "#                 maybe this should just zero out the negatives instead, they don't contribute!?", "\n", "explained_variance", "=", "torch", ".", "abs", "(", "explained_variance", ")", "\n", "# return sorted", "\n", "idxs", "=", "torch", ".", "argsort", "(", "explained_variance", ",", "descending", "=", "True", ")", "\n", "return", "components", "[", "idxs", "]", ",", "explained_variance", "[", "idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._pca.torch_pca_svd": [[64, 82], ["torch.svd", "torch.mul", "X.mean"], "function", ["None"], ["", "def", "torch_pca_svd", "(", "X", ",", "center", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    perform PCA over X\n    - X is of size (num_points, vec_size)\n\n    NOTE: unlike PCA_eig, the number of vectors/values returned is: min(num_points, vec_size)\n    \"\"\"", "\n", "n", ",", "_", "=", "X", ".", "shape", "\n", "# center points along axes", "\n", "if", "center", ":", "\n", "        ", "X", "=", "X", "-", "X", ".", "mean", "(", "dim", "=", "0", ")", "\n", "# perform singular value decomposition", "\n", "", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "X", ")", "\n", "# sort components by decreasing variance", "\n", "# these are already sorted?", "\n", "components", "=", "v", ".", "T", "\n", "explained_variance", "=", "torch", ".", "mul", "(", "s", ",", "s", ")", "/", "(", "n", "-", "1", ")", "\n", "return", "components", ",", "explained_variance", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._pca.torch_pca": [[84, 94], ["_pca.torch_pca_svd", "_pca.torch_pca_eig", "KeyError", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._pca.torch_pca_svd", "home.repos.pwc.inspect_result.nmichlo_disent.functional._pca.torch_pca_eig"], ["", "def", "torch_pca", "(", "X", ",", "center", "=", "True", ",", "mode", "=", "'svd'", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "# number of values returned may differ depending on the method!", "\n", "# -- svd returns: min(num, z_size)", "\n", "# -- eig returns: num", "\n", "    ", "if", "mode", "==", "'svd'", ":", "\n", "        ", "return", "torch_pca_svd", "(", "X", ",", "center", "=", "center", ")", "\n", "", "elif", "mode", "==", "'eig'", ":", "\n", "        ", "return", "torch_pca_eig", "(", "X", ",", "center", "=", "center", ",", "scale", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f'invalid torch_pca mode: {repr(mode)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._other.torch_normalize": [[34, 44], ["tensor.min", "tensor.max", "tensor.to", "m.min", "M.max"], "function", ["None"], ["def", "torch_normalize", "(", "tensor", ":", "torch", ".", "Tensor", ",", "dims", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "# get min & max values", "\n", "    ", "if", "dims", "is", "not", "None", ":", "\n", "        ", "m", ",", "M", "=", "tensor", ",", "tensor", "\n", "for", "dim", "in", "dims", ":", "\n", "            ", "m", ",", "M", "=", "m", ".", "min", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", ".", "values", ",", "M", ".", "max", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", ".", "values", "\n", "", "", "else", ":", "\n", "        ", "m", ",", "M", "=", "tensor", ".", "min", "(", ")", ",", "tensor", ".", "max", "(", ")", "\n", "# scale tensor", "\n", "", "return", "(", "tensor", ".", "to", "(", "dtype", "=", "dtype", ")", "-", "m", ")", "/", "(", "M", "-", "m", ")", "# automatically converts to float32 if needed", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._other.torch_nan_to_num": [[51, 60], ["input.clone", "torch.isnan"], "function", ["None"], ["", "def", "torch_nan_to_num", "(", "input", ",", "nan", "=", "0.0", ",", "posinf", "=", "None", ",", "neginf", "=", "None", ")", ":", "\n", "    ", "output", "=", "input", ".", "clone", "(", ")", "\n", "if", "nan", "is", "not", "None", ":", "\n", "        ", "output", "[", "torch", ".", "isnan", "(", "input", ")", "]", "=", "nan", "\n", "", "if", "posinf", "is", "not", "None", ":", "\n", "        ", "output", "[", "input", "==", "np", ".", "inf", "]", "=", "posinf", "\n", "", "if", "neginf", "is", "not", "None", ":", "\n", "        ", "output", "[", "input", "==", "-", "np", ".", "inf", "]", "=", "neginf", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._other.torch_unsqueeze_l": [[67, 76], ["repr"], "function", ["None"], ["", "def", "torch_unsqueeze_l", "(", "input", ":", "torch", ".", "Tensor", ",", "n", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Add n new axis to the left.\n\n    eg. a tensor with shape (2, 3) passed to this function\n        with n=2 will input in an output shape of (1, 1, 2, 3)\n    \"\"\"", "\n", "assert", "n", ">=", "0", ",", "f'number of new axis cannot be less than zero, given: {repr(n)}'", "\n", "return", "input", "[", "(", "(", "None", ",", ")", "*", "n", ")", "+", "(", "...", ",", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._other.torch_unsqueeze_r": [[78, 87], ["repr"], "function", ["None"], ["", "def", "torch_unsqueeze_r", "(", "input", ":", "torch", ".", "Tensor", ",", "n", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Add n new axis to the right.\n\n    eg. a tensor with shape (2, 3) passed to this function\n        with n=2 will input in an output shape of (2, 3, 1, 1)\n    \"\"\"", "\n", "assert", "n", ">=", "0", ",", "f'number of new axis cannot be less than zero, given: {repr(n)}'", "\n", "return", "input", "[", "(", "...", ",", ")", "+", "(", "(", "None", ",", ")", "*", "n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist": [[61, 95], ["isinstance", "torch.abs", "torch.amax", "list", "torch.sum", "torch.sum", "torch.amin", "range", "warnings.warn", "torch.sum"], "function", ["None"], ["def", "torch_dist", "(", "xs", ":", "torch", ".", "Tensor", ",", "dim", ":", "_DimTypeHint", "=", "-", "1", ",", "p", ":", "Union", "[", "float", ",", "str", "]", "=", "1", ",", "keepdim", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Like torch_norm, but allows arbitrary p values that may\n    result in the returned values not being a valid norm.\n    - norm's require p >= 1\n    \"\"\"", "\n", "if", "isinstance", "(", "p", ",", "str", ")", ":", "\n", "        ", "p", "=", "_P_NORM_MAP", "[", "p", "]", "\n", "# get absolute values", "\n", "", "xs", "=", "torch", ".", "abs", "(", "xs", ")", "\n", "# compute the specific extreme cases", "\n", "# -- its kind of odd that the p-norm and generalised mean converge to the", "\n", "#    same values, just from different directions!", "\n", "if", "p", "==", "_POS_INF", ":", "\n", "        ", "return", "torch", ".", "amax", "(", "xs", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ")", "\n", "", "elif", "p", "==", "_NEG_INF", ":", "\n", "        ", "return", "torch", ".", "amin", "(", "xs", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ")", "\n", "# get the dimensions", "\n", "", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "list", "(", "range", "(", "xs", ".", "ndim", ")", ")", "\n", "# warn if the type is wrong", "\n", "", "if", "p", "!=", "1", ":", "\n", "        ", "if", "xs", ".", "dtype", "!=", "torch", ".", "float64", ":", "\n", "            ", "warnings", ".", "warn", "(", "f'Input tensor to p-norm might not have the required precision, type is {xs.dtype} not {torch.float64}.'", ")", "\n", "# compute the specific cases", "\n", "", "", "if", "p", "==", "0", ":", "\n", "# hamming distance -- number of non-zero entries of the vector", "\n", "        ", "return", "torch", ".", "sum", "(", "xs", "!=", "0", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ",", "dtype", "=", "xs", ".", "dtype", ")", "\n", "", "if", "p", "==", "1", ":", "\n", "# manhattan distance", "\n", "        ", "return", "torch", ".", "sum", "(", "xs", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ")", "\n", "", "else", ":", "\n", "# p-norm (if p==2, then euclidean distance)", "\n", "        ", "return", "torch", ".", "sum", "(", "xs", "**", "p", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ")", "**", "(", "1", "/", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm": [[97, 113], ["isinstance", "_norm.torch_dist", "ValueError", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist"], ["", "", "def", "torch_norm", "(", "xs", ":", "torch", ".", "Tensor", ",", "dim", ":", "_DimTypeHint", "=", "-", "1", ",", "p", ":", "Union", "[", "float", ",", "str", "]", "=", "1", ",", "keepdim", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Compute the generalised p-norm over the given dimension of a vector!\n    - p values must be >= 1\n\n    Closely related to the generalised mean.\n        - p-norm:          (sum(|x|^p)) ^ (1/p)\n        - gen-mean:  (1/n * sum(x ^ p)) ^ (1/p)\n    \"\"\"", "\n", "if", "isinstance", "(", "p", ",", "str", ")", ":", "\n", "        ", "p", "=", "_P_NORM_MAP", "[", "p", "]", "\n", "# check values", "\n", "", "if", "p", "<", "1", ":", "\n", "        ", "raise", "ValueError", "(", "f'p-norm cannot have a p value less than 1, got: {repr(p)}, to bypass this error set `unbounded_p=True`.'", ")", "\n", "# return norm", "\n", "", "return", "torch_dist", "(", "xs", "=", "xs", ",", "dim", "=", "dim", ",", "p", "=", "p", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm_euclidean": [[115, 117], ["_norm.torch_dist"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist"], ["", "def", "torch_norm_euclidean", "(", "xs", ",", "dim", ":", "_DimTypeHint", "=", "-", "1", ",", "keepdim", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "torch_dist", "(", "xs", ",", "dim", "=", "dim", ",", "p", "=", "'euclidean'", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_norm_manhattan": [[119, 121], ["_norm.torch_dist"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist"], ["", "def", "torch_norm_manhattan", "(", "xs", ",", "dim", ":", "_DimTypeHint", "=", "-", "1", ",", "keepdim", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "torch_dist", "(", "xs", ",", "dim", "=", "dim", ",", "p", "=", "'manhattan'", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist_hamming": [[123, 125], ["_norm.torch_dist"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._norm.torch_dist"], ["", "def", "torch_dist_hamming", "(", "xs", ",", "dim", ":", "_DimTypeHint", "=", "-", "1", ",", "keepdim", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "torch_dist", "(", "xs", ",", "dim", "=", "dim", ",", "p", "=", "'hamming'", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._correlation.torch_cov_matrix": [[33, 54], ["torch.mean", "torch.mean"], "function", ["None"], ["def", "torch_cov_matrix", "(", "xs", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the covariance matrix of multiple samples (N) of random vectors of size (X)\n    https://en.wikipedia.org/wiki/Covariance_matrix\n    - The input shape is: (N, X)\n    - The output shape is: (X, X)\n\n    This should be the same as:\n        np.cov(xs, rowvar=False, ddof=0)\n    \"\"\"", "\n", "# NOTE:", "\n", "#   torch.mm is strict matrix multiplication", "\n", "#   however if we multiply arrays with broadcasting:", "\n", "#   size(3, 1) * size(1, 2) -> size(3, 2)  # broadcast, not matmul", "\n", "#   size(1, 3) * size(2, 1) -> size(2, 3)  # broadcast, not matmul", "\n", "# CHECK:", "\n", "assert", "xs", ".", "ndim", "==", "2", "# (N, X)", "\n", "Rxx", "=", "torch", ".", "mean", "(", "xs", "[", ":", ",", ":", ",", "None", "]", "*", "xs", "[", ":", ",", "None", ",", ":", "]", ",", "dim", "=", "0", ")", "# (X, X)", "\n", "ux", "=", "torch", ".", "mean", "(", "xs", ",", "dim", "=", "0", ")", "# (X,)", "\n", "Kxx", "=", "Rxx", "-", "(", "ux", "[", ":", ",", "None", "]", "*", "ux", "[", "None", ",", ":", "]", ")", "# (X, X)", "\n", "return", "Kxx", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._correlation.torch_corr_matrix": [[56, 71], ["_correlation.torch_cov_matrix", "torch.rsqrt", "torch.diagonal"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._correlation.torch_cov_matrix"], ["", "def", "torch_corr_matrix", "(", "xs", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the pearson's correlation matrix of multiple samples (N) of random vectors of size (X)\n    https://en.wikipedia.org/wiki/Pearson_correlation_coefficient\n    https://en.wikipedia.org/wiki/Covariance_matrix\n    - The input shape is: (N, X)\n    - The output shape is: (X, X)\n\n    This should be the same as:\n        np.corrcoef(xs, rowvar=False, ddof=0)\n    \"\"\"", "\n", "Kxx", "=", "torch_cov_matrix", "(", "xs", ")", "\n", "diag_Kxx", "=", "torch", ".", "rsqrt", "(", "torch", ".", "diagonal", "(", "Kxx", ")", ")", "\n", "corr", "=", "Kxx", "*", "(", "diag_Kxx", "[", ":", ",", "None", "]", "*", "diag_Kxx", "[", "None", ",", ":", "]", ")", "\n", "return", "corr", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._correlation.torch_rank_corr_matrix": [[73, 88], ["torch.argsort", "_correlation.torch_corr_matrix", "torch.argsort.to"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._correlation.torch_corr_matrix"], ["", "def", "torch_rank_corr_matrix", "(", "xs", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the spearman's rank correlation matrix of multiple samples (N) of random vectors of size (X)\n    https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient\n    - The input shape is: (N, X)\n    - The output shape is: (X, X)\n\n    Pearson's correlation measures linear relationships\n    Spearman's correlation measures monotonic relationships (whether linear or not)\n    - defined in terms of the pearson's correlation matrix of the rank variables\n\n    TODO: check, be careful of repeated values, this might not give the correct input?\n    \"\"\"", "\n", "rs", "=", "torch", ".", "argsort", "(", "xs", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "return", "torch_corr_matrix", "(", "rs", ".", "to", "(", "xs", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized": [[60, 96], ["isinstance", "torch.prod", "torch.amax", "list", "torch.exp", "torch.amin", "range", "torch.as_tensor", "warnings.warn", "torch.mean", "torch.sum", "torch.log", "torch.sum"], "function", ["None"], ["def", "torch_mean_generalized", "(", "xs", ":", "torch", ".", "Tensor", ",", "dim", ":", "_DimTypeHint", "=", "None", ",", "p", ":", "Union", "[", "float", ",", "str", "]", "=", "1", ",", "keepdim", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Compute the generalised mean.\n    - p is the power\n\n    harmonic mean \u2264 geometric mean \u2264 arithmetic mean\n    - If values have the same units: Use the arithmetic mean.\n    - If values have differing units: Use the geometric mean.\n    - If values are rates: Use the harmonic mean.\n    \"\"\"", "\n", "if", "isinstance", "(", "p", ",", "str", ")", ":", "\n", "        ", "p", "=", "_GENERALIZED_MEAN_MAP", "[", "p", "]", "\n", "# compute the specific extreme cases", "\n", "", "if", "p", "==", "_POS_INF", ":", "\n", "        ", "return", "torch", ".", "amax", "(", "xs", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ")", "\n", "", "elif", "p", "==", "_NEG_INF", ":", "\n", "        ", "return", "torch", ".", "amin", "(", "xs", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ")", "\n", "# compute the number of elements being averaged", "\n", "", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "list", "(", "range", "(", "xs", ".", "ndim", ")", ")", "\n", "", "n", "=", "torch", ".", "prod", "(", "torch", ".", "as_tensor", "(", "xs", ".", "shape", ")", "[", "dim", "]", ")", "\n", "# warn if the type is wrong", "\n", "if", "p", "!=", "1", ":", "\n", "        ", "if", "xs", ".", "dtype", "!=", "torch", ".", "float64", ":", "\n", "            ", "warnings", ".", "warn", "(", "f'Input tensor to generalised mean might not have the required precision, type is {xs.dtype} not {torch.float64}.'", ")", "\n", "# compute the specific cases", "\n", "", "", "if", "p", "==", "0", ":", "\n", "# geometric mean", "\n", "# orig numerically unstable: torch.prod(xs, dim=dim) ** (1 / n)", "\n", "        ", "return", "torch", ".", "exp", "(", "(", "1", "/", "n", ")", "*", "torch", ".", "sum", "(", "torch", ".", "log", "(", "xs", ")", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ")", ")", "\n", "", "elif", "p", "==", "1", ":", "\n", "# arithmetic mean", "\n", "        ", "return", "torch", ".", "mean", "(", "xs", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ")", "\n", "", "else", ":", "\n", "# generalised mean", "\n", "        ", "return", "(", "(", "1", "/", "n", ")", "*", "torch", ".", "sum", "(", "xs", "**", "p", ",", "dim", "=", "dim", ",", "keepdim", "=", "keepdim", ")", ")", "**", "(", "1", "/", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_quadratic": [[98, 100], ["_mean.torch_mean_generalized"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized"], ["", "", "def", "torch_mean_quadratic", "(", "xs", ",", "dim", ":", "_DimTypeHint", "=", "None", ",", "keepdim", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "torch_mean_generalized", "(", "xs", ",", "dim", "=", "dim", ",", "p", "=", "'quadratic'", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_geometric": [[102, 104], ["_mean.torch_mean_generalized"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized"], ["", "def", "torch_mean_geometric", "(", "xs", ",", "dim", ":", "_DimTypeHint", "=", "None", ",", "keepdim", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "torch_mean_generalized", "(", "xs", ",", "dim", "=", "dim", ",", "p", "=", "'geometric'", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_harmonic": [[106, 108], ["_mean.torch_mean_generalized"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized"], ["", "def", "torch_mean_harmonic", "(", "xs", ",", "dim", ":", "_DimTypeHint", "=", "None", ",", "keepdim", ":", "bool", "=", "False", ")", ":", "\n", "    ", "return", "torch_mean_generalized", "(", "xs", ",", "dim", "=", "dim", ",", "p", "=", "'harmonic'", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining._delta_mine_none": [[42, 45], ["torch.arange", "len", "len", "len"], "function", ["None"], ["def", "_delta_mine_none", "(", "dist_ap", ":", "torch", ".", "Tensor", ",", "dist_an", ":", "torch", ".", "Tensor", ",", "top_k", ":", "int", ",", "margin_max", ":", "float", ")", ":", "\n", "    ", "assert", "len", "(", "dist_ap", ")", "==", "len", "(", "dist_an", ")", "\n", "return", "torch", ".", "arange", "(", "len", "(", "dist_ap", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining._delta_mine_semi_hard_neg": [[47, 54], ["torch.arange", "len"], "function", ["None"], ["", "def", "_delta_mine_semi_hard_neg", "(", "dist_ap", ":", "torch", ".", "Tensor", ",", "dist_an", ":", "torch", ".", "Tensor", ",", "top_k", ":", "int", ",", "margin_max", ":", "float", ")", ":", "\n", "# SEMI HARD NEGATIVE MINING", "\n", "# \"choose an anchor-negative pair that is farther than the anchor-positive pair, but within the margin, and so still contributes a positive loss\"", "\n", "# -- triples satisfy d(a, p) < d(a, n) < alpha", "\n", "    ", "semi_hard_mask", "=", "(", "dist_ap", "<", "dist_an", ")", "&", "(", "dist_an", "<", "margin_max", ")", "\n", "semi_hard_idxs", "=", "torch", ".", "arange", "(", "len", "(", "semi_hard_mask", ")", ")", "[", "semi_hard_mask", "]", "\n", "return", "semi_hard_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining._delta_mine_hard_neg": [[56, 62], ["torch.argsort", "int"], "function", ["None"], ["", "def", "_delta_mine_hard_neg", "(", "dist_ap", ":", "torch", ".", "Tensor", ",", "dist_an", ":", "torch", ".", "Tensor", ",", "top_k", ":", "int", ",", "margin_max", ":", "float", ")", ":", "\n", "# HARD NEGATIVE MINING", "\n", "# \"most similar images which have a different label from the anchor image\"", "\n", "# -- triples with smallest d(a, n)", "\n", "    ", "hard_idxs", "=", "torch", ".", "argsort", "(", "dist_an", ",", "descending", "=", "False", ")", "[", ":", "int", "(", "top_k", ")", "]", "\n", "return", "hard_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining._delta_easy_neg": [[64, 68], ["RuntimeError"], "function", ["None"], ["", "def", "_delta_easy_neg", "(", "dist_ap", ",", "dist_an", ",", "cfg", ")", ":", "\n", "# EASY NEGATIVE MINING", "\n", "# \"least similar images which have the different label from the anchor image\"", "\n", "    ", "raise", "RuntimeError", "(", "'This triplet mode is not useful! Choose another.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining._delta_mine_hard_pos": [[70, 76], ["torch.argsort", "int"], "function", ["None"], ["", "def", "_delta_mine_hard_pos", "(", "dist_ap", ":", "torch", ".", "Tensor", ",", "dist_an", ":", "torch", ".", "Tensor", ",", "top_k", ":", "int", ",", "margin_max", ":", "float", ")", ":", "\n", "# HARD POSITIVE MINING -- this performs really well!", "\n", "# \"least similar images which have the same label to as anchor image\"", "\n", "# -- shown not to be suitable for all datasets", "\n", "    ", "hard_idxs", "=", "torch", ".", "argsort", "(", "dist_ap", ",", "descending", "=", "True", ")", "[", ":", "int", "(", "top_k", ")", "]", "\n", "return", "hard_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining._delta_mine_easy_pos": [[78, 83], ["torch.argsort", "int"], "function", ["None"], ["", "def", "_delta_mine_easy_pos", "(", "dist_ap", ":", "torch", ".", "Tensor", ",", "dist_an", ":", "torch", ".", "Tensor", ",", "top_k", ":", "int", ",", "margin_max", ":", "float", ")", ":", "\n", "# EASY POSITIVE MINING", "\n", "# \"the most similar images that have the same label as the anchor image\"", "\n", "    ", "easy_idxs", "=", "torch", ".", "argsort", "(", "dist_ap", ",", "descending", "=", "False", ")", "[", ":", "int", "(", "top_k", ")", "]", "\n", "return", "easy_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining.mine": [[100, 118], ["torch.no_grad", "mine_fn", "len", "log.warning", "triplet_mining._delta_mine_none", "KeyError", "repr", "sorted", "_TRIPLET_MINE_MODES.keys"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining._delta_mine_none"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "mine", "(", "mode", ":", "str", ",", "dist_ap", ":", "torch", ".", "Tensor", ",", "dist_an", ":", "torch", ".", "Tensor", ",", "top_k", ":", "int", ",", "margin_max", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "# check arrays", "\n", "    ", "assert", "(", "dist_ap", ".", "ndim", "==", "1", ")", "and", "(", "dist_an", ".", "ndim", "==", "1", ")", ",", "f'dist arrays must only have one dimension: dist_ap: {dist_ap.shape} & dist_an: {dist_an.shape}'", "\n", "assert", "(", "dist_ap", ".", "shape", "==", "dist_an", ".", "shape", ")", ",", "f'dist array shapes do not match: {dist_ap.shape} & dist_an: {dist_an.shape}'", "\n", "# get mining function", "\n", "try", ":", "\n", "        ", "mine_fn", "=", "_TRIPLET_MINE_MODES", "[", "mode", "]", "\n", "", "except", "KeyError", ":", "\n", "        ", "raise", "KeyError", "(", "f'invalid triplet mining mode: {repr(mode)}, must be one of: {sorted(_TRIPLET_MINE_MODES.keys())}'", ")", "\n", "# mine indices", "\n", "", "idxs", "=", "mine_fn", "(", "dist_ap", "=", "dist_ap", ",", "dist_an", "=", "dist_an", ",", "top_k", "=", "top_k", ",", "margin_max", "=", "margin_max", ")", "\n", "# check and return values", "\n", "if", "len", "(", "idxs", ")", ">", "0", ":", "\n", "        ", "return", "idxs", "\n", "", "else", ":", "\n", "        ", "log", ".", "warning", "(", "'no results using {repr(mode)} mining! using entire batch instead'", ")", "\n", "return", "_delta_mine_none", "(", "dist_ap", "=", "dist_ap", ",", "dist_an", "=", "dist_an", ",", "top_k", "=", "top_k", ",", "margin_max", "=", "margin_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining.mine_random_mode": [[120, 127], ["np.random.choice.startswith", "triplet_mining.mine", "numpy.random.choice", "mode[].split", "len"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining.mine"], ["", "", "def", "mine_random_mode", "(", "mode", ":", "str", ",", "dist_ap", ":", "torch", ".", "Tensor", ",", "dist_an", ":", "torch", ".", "Tensor", ",", "top_k", ":", "int", ",", "margin_max", ":", "float", ")", ":", "\n", "# randomly choose a mode", "\n", "# eg. `ran:hard_pos+easy_pos` randomly chooses between `hard_pos` and `easy_pos`", "\n", "    ", "if", "mode", ".", "startswith", "(", "'ran:'", ")", ":", "\n", "        ", "mode", "=", "np", ".", "random", ".", "choice", "(", "mode", "[", "len", "(", "'ran:'", ")", ":", "]", ".", "split", "(", "'+'", ")", ")", "\n", "# mine like usual", "\n", "", "return", "mine", "(", "mode", "=", "mode", ",", "dist_ap", "=", "dist_ap", ",", "dist_an", "=", "dist_an", ",", "top_k", "=", "top_k", ",", "margin_max", "=", "margin_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining.configured_mine": [[141, 148], ["triplet_mining.mine_random_mode", "int"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining.mine_random_mode"], ["", "def", "configured_mine", "(", "dist_ap", ":", "torch", ".", "Tensor", ",", "dist_an", ":", "torch", ".", "Tensor", ",", "cfg", ":", "SampledTripletMineCfgProto", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "mine_random_mode", "(", "\n", "mode", "=", "cfg", ".", "overlap_mine_triplet_mode", ",", "\n", "dist_ap", "=", "dist_ap", ",", "\n", "dist_an", "=", "dist_an", ",", "\n", "top_k", "=", "int", "(", "cfg", ".", "overlap_num", "*", "cfg", ".", "overlap_mine_ratio", ")", ",", "\n", "margin_max", "=", "cfg", ".", "triplet_margin_max", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining.configured_idx_mine": [[151, 173], ["torch.no_grad", "pairwise_loss_fn", "pairwise_loss_fn", "triplet_mining.configured_mine"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining.configured_mine"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "configured_idx_mine", "(", "\n", "x_targ", ":", "torch", ".", "Tensor", ",", "\n", "a_idxs", ":", "torch", ".", "Tensor", ",", "\n", "p_idxs", ":", "torch", ".", "Tensor", ",", "\n", "n_idxs", ":", "torch", ".", "Tensor", ",", "\n", "cfg", ":", "SampledTripletMineCfgProto", ",", "\n", "pairwise_loss_fn", ":", "Callable", "[", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", ",", "# should return arrays with ndim == 1", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# TODO: SIMPLIFY THIS FUNCTION HIERARCHY, THERE ARE A LOT OF UNNECESSARY CALLS!", "\n", "# TODO: this function is quite useless, its easier to just use configured_mine_random_mode", "\n", "# skip mining if mode is None!", "\n", "    ", "if", "cfg", ".", "overlap_mine_triplet_mode", "==", "'none'", ":", "\n", "        ", "return", "a_idxs", ",", "p_idxs", ",", "n_idxs", "\n", "# compute differences", "\n", "# TODO: this is computationally expensive! sometimes the dist_ap and dist_an may not be used depending on the mode!", "\n", "", "dist_ap", "=", "pairwise_loss_fn", "(", "x_targ", "[", "a_idxs", "]", ",", "x_targ", "[", "p_idxs", "]", ")", "\n", "dist_an", "=", "pairwise_loss_fn", "(", "x_targ", "[", "a_idxs", "]", ",", "x_targ", "[", "n_idxs", "]", ")", "\n", "# mine indices", "\n", "idxs", "=", "configured_mine", "(", "dist_ap", "=", "dist_ap", ",", "dist_an", "=", "dist_an", ",", "cfg", "=", "cfg", ")", "\n", "# check & return values", "\n", "return", "a_idxs", "[", "idxs", "]", ",", "p_idxs", "[", "idxs", "]", ",", "n_idxs", "[", "idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.loss_reduction_mean": [[34, 36], ["x.mean"], "function", ["None"], ["def", "loss_reduction_mean", "(", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "x", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.loss_reduction_mean_sum": [[38, 40], ["torch.flatten().sum().mean", "torch.flatten().sum", "torch.flatten"], "function", ["None"], ["", "def", "loss_reduction_mean_sum", "(", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.loss_reduction": [[48, 50], ["None"], "function", ["None"], ["def", "loss_reduction", "(", "tensor", ":", "torch", ".", "Tensor", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "return", "_LOSS_REDUCTION_STRATEGIES", "[", "reduction", "]", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.get_mean_loss_scale": [[57, 68], ["numpy.prod", "KeyError"], "function", ["None"], ["", "def", "get_mean_loss_scale", "(", "x", ":", "torch", ".", "Tensor", ",", "reduction", ":", "str", ")", ":", "\n", "# check the dimensions if given", "\n", "    ", "assert", "2", "<=", "x", ".", "ndim", "<=", "4", ",", "'unsupported number of dims, must be one of: BxC, BxHxW, BxCxHxW'", "\n", "\n", "# get the loss scaling", "\n", "if", "reduction", "==", "'sum'", ":", "\n", "        ", "return", "np", ".", "prod", "(", "x", ".", "shape", "[", "1", ":", "]", ")", "# MEAN(B, SUM(C x H x W))", "\n", "", "elif", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'unsupported loss reduction mode'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.batch_loss_reduction": [[84, 93], ["torch.flatten"], "function", ["None"], ["def", "batch_loss_reduction", "(", "tensor", ":", "torch", ".", "Tensor", ",", "reduction_dtype", "=", "None", ",", "reduction", "=", "'mean'", ")", "->", "torch", ".", "Tensor", ":", "\n", "# mean over final dims", "\n", "    ", "if", "tensor", ".", "ndim", ">=", "2", ":", "\n", "        ", "tensor", "=", "torch", ".", "flatten", "(", "tensor", ",", "start_dim", "=", "1", ")", "# (B, -1)", "\n", "tensor", "=", "_REDUCTION_FNS", "[", "reduction", "]", "(", "tensor", ",", "dim", "=", "-", "1", ",", "dtype", "=", "reduction_dtype", ")", "\n", "# check result", "\n", "", "assert", "tensor", ".", "ndim", "==", "1", "\n", "# done", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.triplet_loss": [[37, 42], ["triplet.dist_triplet_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.dist_triplet_loss"], ["def", "triplet_loss", "(", "anc", ",", "pos", ",", "neg", ",", "margin_min", "=", "None", ",", "margin_max", "=", "1.", ",", "p", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Standard Triplet Loss\n    \"\"\"", "\n", "return", "dist_triplet_loss", "(", "anc", "-", "pos", ",", "anc", "-", "neg", ",", "margin_min", "=", "margin_min", ",", "margin_max", "=", "margin_max", ",", "p", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.dist_triplet_loss": [[44, 54], ["torch.norm", "torch.norm", "torch.clamp_min", "torch.clamp_min.mean", "warnings.warn"], "function", ["None"], ["", "def", "dist_triplet_loss", "(", "pos_delta", ",", "neg_delta", ",", "margin_min", "=", "None", ",", "margin_max", "=", "1.", ",", "p", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Standard Triplet Loss\n    \"\"\"", "\n", "if", "margin_min", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'triplet_loss does not support margin_min'", ")", "\n", "", "p_dist", "=", "torch", ".", "norm", "(", "pos_delta", ",", "p", "=", "p", ",", "dim", "=", "-", "1", ")", "\n", "n_dist", "=", "torch", ".", "norm", "(", "neg_delta", ",", "p", "=", "p", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "torch", ".", "clamp_min", "(", "p_dist", "-", "n_dist", "+", "margin_max", ",", "0", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.triplet_sigmoid_loss": [[59, 65], ["triplet.dist_triplet_sigmoid_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.dist_triplet_sigmoid_loss"], ["", "def", "triplet_sigmoid_loss", "(", "anc", ",", "pos", ",", "neg", ",", "margin_min", "=", "None", ",", "margin_max", "=", "1.", ",", "p", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Sigmoid Triplet Loss\n    https://arxiv.org/pdf/2003.14021.pdf\n    \"\"\"", "\n", "return", "dist_triplet_sigmoid_loss", "(", "anc", "-", "pos", ",", "anc", "-", "neg", ",", "margin_min", "=", "margin_min", ",", "margin_max", "=", "margin_max", ",", "p", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.dist_triplet_sigmoid_loss": [[67, 78], ["torch.norm", "torch.norm", "torch.sigmoid", "torch.sigmoid.mean", "warnings.warn"], "function", ["None"], ["", "def", "dist_triplet_sigmoid_loss", "(", "pos_delta", ",", "neg_delta", ",", "margin_min", "=", "None", ",", "margin_max", "=", "1.", ",", "p", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Sigmoid Triplet Loss\n    https://arxiv.org/pdf/2003.14021.pdf\n    \"\"\"", "\n", "if", "margin_min", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'triplet_sigmoid_loss does not support margin_min'", ")", "\n", "", "p_dist", "=", "torch", ".", "norm", "(", "pos_delta", ",", "p", "=", "p", ",", "dim", "=", "-", "1", ")", "\n", "n_dist", "=", "torch", ".", "norm", "(", "neg_delta", ",", "p", "=", "p", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "torch", ".", "sigmoid", "(", "(", "1", "/", "margin_max", ")", "*", "(", "p_dist", "-", "n_dist", ")", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.triplet_soft_loss": [[83, 89], ["triplet.dist_triplet_soft_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.dist_triplet_soft_loss"], ["", "def", "triplet_soft_loss", "(", "anc", ",", "pos", ",", "neg", ",", "margin_min", "=", "None", ",", "margin_max", "=", "None", ",", "p", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Triplet Loss With Soft-Margin\n    https://arxiv.org/pdf/1703.07737.pdf\n    \"\"\"", "\n", "return", "dist_triplet_soft_loss", "(", "anc", "-", "pos", ",", "anc", "-", "neg", ",", "margin_min", "=", "margin_min", ",", "margin_max", "=", "margin_max", ",", "p", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.dist_triplet_soft_loss": [[91, 104], ["torch.norm", "torch.norm", "torch.log", "torch.log.mean", "warnings.warn", "warnings.warn", "torch.exp"], "function", ["None"], ["", "def", "dist_triplet_soft_loss", "(", "pos_delta", ",", "neg_delta", ",", "margin_min", "=", "None", ",", "margin_max", "=", "None", ",", "p", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Triplet Loss With Soft-Margin\n    https://arxiv.org/pdf/1703.07737.pdf\n    \"\"\"", "\n", "if", "margin_min", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'triplet_soft_loss does not support margin_min'", ")", "\n", "", "if", "margin_max", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'triplet_soft_loss does not support margin_max'", ")", "\n", "", "p_dist", "=", "torch", ".", "norm", "(", "pos_delta", ",", "p", "=", "p", ",", "dim", "=", "-", "1", ")", "\n", "n_dist", "=", "torch", ".", "norm", "(", "neg_delta", ",", "p", "=", "p", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "p_dist", "-", "n_dist", ")", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.min_clamped_triplet_loss": [[157, 164], ["triplet.dist_min_clamped_triplet_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.dist_min_clamped_triplet_loss"], ["", "def", "min_clamped_triplet_loss", "(", "anc", ",", "pos", ",", "neg", ",", "margin_min", "=", "0.01", ",", "margin_max", "=", "1.", ",", "p", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Min Margin Triplet Loss\n    TODO: is this better, or clamped_triplet_loss?\n    TODO: could take idea from soft-margin to make this continuously differentiable?\n    \"\"\"", "\n", "return", "dist_min_clamped_triplet_loss", "(", "anc", "-", "pos", ",", "anc", "-", "neg", ",", "margin_min", "=", "margin_min", ",", "margin_max", "=", "margin_max", ",", "p", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.dist_min_clamped_triplet_loss": [[166, 176], ["torch.norm", "torch.norm", "torch.clamp_min", "torch.clamp_min.mean", "torch.clamp_min"], "function", ["None"], ["", "def", "dist_min_clamped_triplet_loss", "(", "pos_delta", ",", "neg_delta", ",", "margin_min", "=", "0.01", ",", "margin_max", "=", "1.", ",", "p", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Min Margin Triplet Loss\n    TODO: is this better, or dist_clamped_triplet_loss?\n    TODO: could take idea from soft-margin to make this continuously differentiable?\n    \"\"\"", "\n", "p_dist", "=", "torch", ".", "norm", "(", "pos_delta", ",", "p", "=", "p", ",", "dim", "=", "-", "1", ")", "\n", "n_dist", "=", "torch", ".", "norm", "(", "neg_delta", ",", "p", "=", "p", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "torch", ".", "clamp_min", "(", "torch", ".", "clamp_min", "(", "p_dist", ",", "margin_min", ")", "-", "n_dist", "+", "margin_max", ",", "0", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.split_clamped_triplet_loss": [[180, 187], ["triplet.dist_split_clamped_triplet_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.dist_split_clamped_triplet_loss"], ["", "def", "split_clamped_triplet_loss", "(", "anc", ",", "pos", ",", "neg", ",", "margin_min", "=", "0.01", ",", "margin_max", "=", "1.", ",", "p", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Min Margin Triplet Loss\n    TODO: is this better, or min_clamp_triplet_loss?\n    TODO: could take idea from soft-margin to make this continuously differentiable?\n    \"\"\"", "\n", "return", "dist_split_clamped_triplet_loss", "(", "anc", "-", "pos", ",", "anc", "-", "neg", ",", "margin_min", "=", "margin_min", ",", "margin_max", "=", "margin_max", ",", "p", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.dist_split_clamped_triplet_loss": [[189, 199], ["torch.norm", "torch.norm", "loss.mean", "torch.clamp_min", "torch.clamp_max"], "function", ["None"], ["", "def", "dist_split_clamped_triplet_loss", "(", "pos_delta", ",", "neg_delta", ",", "margin_min", "=", "0.01", ",", "margin_max", "=", "1.", ",", "p", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Min Margin Triplet Loss\n    TODO: is this better, or dist_min_clamp_triplet_loss?\n    TODO: could take idea from soft-margin to make this continuously differentiable?\n    \"\"\"", "\n", "p_dist", "=", "torch", ".", "norm", "(", "pos_delta", ",", "p", "=", "p", ",", "dim", "=", "-", "1", ")", "\n", "n_dist", "=", "torch", ".", "norm", "(", "neg_delta", ",", "p", "=", "p", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "torch", ".", "clamp_min", "(", "p_dist", ",", "margin_min", ")", "-", "torch", ".", "clamp_max", "(", "n_dist", ",", "margin_max", ")", "+", "(", "margin_max", "-", "margin_min", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.configured_triplet": [[275, 282], ["None"], "function", ["None"], ["def", "configured_triplet", "(", "anc", ",", "pos", ",", "neg", ",", "cfg", ":", "TripletConfigTypeHint", ")", ":", "\n", "    ", "return", "_TRIPLET_LOSSES", "[", "cfg", ".", "triplet_loss", "]", "(", "\n", "anc", ",", "pos", ",", "neg", ",", "\n", "margin_min", "=", "cfg", ".", "triplet_margin_min", ",", "\n", "margin_max", "=", "cfg", ".", "triplet_margin_max", ",", "\n", "p", "=", "cfg", ".", "triplet_p", ",", "\n", ")", "*", "cfg", ".", "triplet_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.configured_dist_triplet": [[284, 291], ["None"], "function", ["None"], ["", "def", "configured_dist_triplet", "(", "pos_delta", ",", "neg_delta", ",", "cfg", ":", "TripletConfigTypeHint", ")", ":", "\n", "    ", "return", "_DIST_TRIPLET_LOSSES", "[", "cfg", ".", "triplet_loss", "]", "(", "\n", "pos_delta", ",", "neg_delta", ",", "\n", "margin_min", "=", "cfg", ".", "triplet_margin_min", ",", "\n", "margin_max", "=", "cfg", ".", "triplet_margin_max", ",", "\n", "p", "=", "cfg", ".", "triplet_p", ",", "\n", ")", "*", "cfg", ".", "triplet_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.compute_triplet_loss": [[293, 300], ["triplet.configured_triplet"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.configured_triplet"], ["", "def", "compute_triplet_loss", "(", "zs", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "cfg", ":", "TripletConfigTypeHint", ")", ":", "\n", "    ", "anc", ",", "pos", ",", "neg", "=", "zs", "\n", "# loss is scaled and everything", "\n", "loss", "=", "configured_triplet", "(", "anc", ",", "pos", ",", "neg", ",", "cfg", "=", "cfg", ")", "\n", "# return loss & log", "\n", "return", "loss", ",", "{", "\n", "f'{cfg.triplet_loss}_L{cfg.triplet_p}'", ":", "loss", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.compute_dist_triplet_loss": [[303, 310], ["triplet.configured_dist_triplet"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.configured_dist_triplet"], ["", "def", "compute_dist_triplet_loss", "(", "zs_deltas", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "cfg", ":", "TripletConfigTypeHint", ")", ":", "\n", "    ", "pos_delta", ",", "neg_delta", "=", "zs_deltas", "\n", "# loss is scaled and everything", "\n", "loss", "=", "configured_dist_triplet", "(", "pos_delta", ",", "neg_delta", ",", "cfg", "=", "cfg", ")", "\n", "# return loss & log", "\n", "return", "loss", ",", "{", "\n", "f'{cfg.triplet_loss}_L{cfg.triplet_p}'", ":", "loss", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss_direct_reverse": [[47, 55], ["torch.distributions.kl_divergence"], "function", ["None"], ["def", "kl_loss_direct_reverse", "(", "posterior", ":", "Distribution", ",", "prior", ":", "Distribution", ",", "z_sampled", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "# This is how the original VAE/BetaVAE papers do it.", "\n", "# - we compute the reverse kl divergence directly instead of approximating it", "\n", "# - kl(post|prior)", "\n", "# FORWARD vs. REVERSE kl (https://www.tuananhle.co.uk/notes/reverse-forward-kl.html)", "\n", "# - If we minimize the kl(post|prior) or the reverse/exclusive KL, the zero-forcing/mode-seeking behavior arises.", "\n", "# - If we minimize the kl(prior|post) or the forward/inclusive KL, the mass-covering/mean-seeking behavior arises.", "\n", "    ", "return", "torch", ".", "distributions", ".", "kl_divergence", "(", "posterior", ",", "prior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss_approx_reverse": [[57, 64], ["posterior.log_prob", "prior.log_prob"], "function", ["None"], ["", "def", "kl_loss_approx_reverse", "(", "posterior", ":", "Distribution", ",", "prior", ":", "Distribution", ",", "z_sampled", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "# This is how pytorch-lightning-bolts does it:", "\n", "# - kl(post|prior)", "\n", "# See issue: https://github.com/PyTorchLightning/pytorch-lightning-bolts/issues/565", "\n", "# - we approximate the reverse kl divergence instead of computing it analytically", "\n", "    ", "assert", "z_sampled", "is", "not", "None", ",", "'to compute the approximate kl loss, z_sampled needs to be defined (cfg.kl_mode=\"approx\")'", "\n", "return", "posterior", ".", "log_prob", "(", "z_sampled", ")", "-", "prior", ".", "log_prob", "(", "z_sampled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss_direct_forward": [[66, 70], ["torch.distributions.kl_divergence"], "function", ["None"], ["", "def", "kl_loss_direct_forward", "(", "posterior", ":", "Distribution", ",", "prior", ":", "Distribution", ",", "z_sampled", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "# compute the forward kl", "\n", "# - kl(prior|post)", "\n", "    ", "return", "torch", ".", "distributions", ".", "kl_divergence", "(", "prior", ",", "posterior", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss_approx_forward": [[72, 77], ["prior.log_prob", "posterior.log_prob"], "function", ["None"], ["", "def", "kl_loss_approx_forward", "(", "posterior", ":", "Distribution", ",", "prior", ":", "Distribution", ",", "z_sampled", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "# compute the approximate forward kl", "\n", "# - kl(prior|post)", "\n", "    ", "assert", "z_sampled", "is", "not", "None", ",", "'to compute the approximate kl loss, z_sampled needs to be defined (cfg.kl_mode=\"approx\")'", "\n", "return", "prior", ".", "log_prob", "(", "z_sampled", ")", "-", "posterior", ".", "log_prob", "(", "z_sampled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss_direct_symmetric": [[79, 83], ["kl.kl_loss_direct_reverse", "kl.kl_loss_direct_forward"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss_direct_reverse", "home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss_direct_forward"], ["", "def", "kl_loss_direct_symmetric", "(", "posterior", ":", "Distribution", ",", "prior", ":", "Distribution", ",", "z_sampled", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "# compute the (scaled) symmetric kl", "\n", "# - 0.5 * kl(prior|post) + 0.5 * kl(prior|post)", "\n", "    ", "return", "0.5", "*", "kl_loss_direct_reverse", "(", "posterior", ",", "prior", ",", "z_sampled", ")", "+", "0.5", "*", "kl_loss_direct_forward", "(", "posterior", ",", "prior", ",", "z_sampled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss_approx_symmetric": [[85, 89], ["kl.kl_loss_approx_reverse", "kl.kl_loss_approx_forward"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss_approx_reverse", "home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss_approx_forward"], ["", "def", "kl_loss_approx_symmetric", "(", "posterior", ":", "Distribution", ",", "prior", ":", "Distribution", ",", "z_sampled", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "# compute the approximate (scaled) symmetric kl", "\n", "# - 0.5 * kl(prior|post) + 0.5 * kl(prior|post)", "\n", "    ", "return", "0.5", "*", "kl_loss_approx_reverse", "(", "posterior", ",", "prior", ",", "z_sampled", ")", "+", "0.5", "*", "kl_loss_approx_forward", "(", "posterior", ",", "prior", ",", "z_sampled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss": [[106, 108], ["None"], "function", ["None"], ["def", "kl_loss", "(", "posterior", ":", "Distribution", ",", "prior", ":", "Distribution", ",", "z_sampled", ":", "torch", ".", "Tensor", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "    ", "return", "_KL_LOSS_MODES", "[", "mode", "]", "(", "posterior", ",", "prior", ",", "z_sampled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort._get_2d_reshape_info": [[40, 69], ["functools.lru_cache", "isinstance", "len", "tuple", "all", "set", "sorted", "sorted", "numpy.array", "int", "int", "tuple", "set", "numpy.prod", "numpy.prod", "range"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["@", "lru_cache", "(", "maxsize", "=", "32", ")", "\n", "def", "_get_2d_reshape_info", "(", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ",", "dims", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "=", "-", "1", ")", ":", "\n", "    ", "if", "isinstance", "(", "dims", ",", "int", ")", ":", "\n", "        ", "dims", "=", "(", "dims", ",", ")", "\n", "# number of dimensions & remove negatives", "\n", "", "ndim", "=", "len", "(", "shape", ")", "\n", "dims", "=", "tuple", "(", "(", "ndim", "+", "d", ")", "if", "d", "<", "0", "else", "d", "for", "d", "in", "dims", ")", "\n", "# check that we have at least 2 dims & that all values are valid", "\n", "assert", "all", "(", "0", "<=", "d", "<", "ndim", "for", "d", "in", "dims", ")", "\n", "# return new shape", "\n", "if", "ndim", "==", "1", ":", "\n", "        ", "return", "[", "0", "]", ",", "(", "1", ",", "*", "shape", ")", "\n", "# check resulting shape", "\n", "", "assert", "ndim", ">=", "2", "\n", "# get dims", "\n", "dims_X", "=", "set", "(", "dims", ")", "\n", "dims_B", "=", "set", "(", "range", "(", "ndim", ")", ")", "-", "dims_X", "\n", "# sort dims", "\n", "dims_X", "=", "sorted", "(", "dims_X", ")", "\n", "dims_B", "=", "sorted", "(", "dims_B", ")", "\n", "# compute shape", "\n", "shape", "=", "np", ".", "array", "(", "shape", ")", "\n", "size_B", "=", "int", "(", "np", ".", "prod", "(", "shape", "[", "dims_B", "]", ")", ")", "\n", "size_X", "=", "int", "(", "np", ".", "prod", "(", "shape", "[", "dims_X", "]", ")", ")", "\n", "# variables", "\n", "moved_end_dims", "=", "tuple", "(", "dims_X", "[", ":", ":", "-", "1", "]", ")", "\n", "reshape_size", "=", "(", "size_B", ",", "size_X", ")", "\n", "# sort dims", "\n", "return", "moved_end_dims", ",", "reshape_size", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_dims_at_end_2d": [[71, 85], ["softsort._get_2d_reshape_info", "torch.reshape", "torch.reshape", "torch.moveaxis", "torch.moveaxis"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort._get_2d_reshape_info"], ["", "def", "torch_dims_at_end_2d", "(", "tensor", ":", "torch", ".", "Tensor", ",", "dims", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "=", "-", "1", ",", "return_undo_data", "=", "True", ")", ":", "\n", "# get dim info", "\n", "    ", "moved_end_dims", ",", "reshape_size", "=", "_get_2d_reshape_info", "(", "tensor", ".", "shape", ",", "dims", "=", "dims", ")", "\n", "# move all axes", "\n", "for", "d", "in", "moved_end_dims", ":", "\n", "        ", "tensor", "=", "torch", ".", "moveaxis", "(", "tensor", ",", "d", ",", "-", "1", ")", "\n", "", "moved_shape", "=", "tensor", ".", "shape", "\n", "# reshape", "\n", "tensor", "=", "torch", ".", "reshape", "(", "tensor", ",", "reshape_size", ")", "\n", "# return all info", "\n", "if", "return_undo_data", ":", "\n", "        ", "return", "tensor", ",", "moved_shape", ",", "moved_end_dims", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_undo_dims_at_end_2d": [[87, 95], ["torch.reshape", "torch.reshape", "torch.moveaxis", "torch.moveaxis"], "function", ["None"], ["", "", "def", "torch_undo_dims_at_end_2d", "(", "tensor", ":", "torch", ".", "Tensor", ",", "moved_shape", ",", "moved_end_dims", ")", ":", "\n", "# reshape", "\n", "    ", "tensor", "=", "torch", ".", "reshape", "(", "tensor", ",", "moved_shape", ")", "\n", "# undo moving of dims", "\n", "for", "d", "in", "moved_end_dims", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "tensor", "=", "torch", ".", "moveaxis", "(", "tensor", ",", "-", "1", ",", "d", ")", "\n", "# reshape", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_soft_sort": [[102, 119], ["softsort.torch_dims_at_end_2d", "torchsort.soft_sort", "softsort.torch_undo_dims_at_end_2d"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_dims_at_end_2d", "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_undo_dims_at_end_2d"], ["", "def", "torch_soft_sort", "(", "\n", "tensor", ":", "torch", ".", "Tensor", ",", "\n", "dims", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "=", "-", "1", ",", "\n", "regularization", "=", "'l2'", ",", "\n", "regularization_strength", "=", "1.0", ",", "\n", "leave_dims_at_end", "=", "False", ",", "\n", ")", ":", "\n", "# we import it locally so that we don't have to install this", "\n", "    ", "import", "torchsort", "\n", "# reorder the dimensions", "\n", "tensor", ",", "moved_shape", ",", "moved_end_dims", "=", "torch_dims_at_end_2d", "(", "tensor", ",", "dims", "=", "dims", ",", "return_undo_data", "=", "True", ")", "\n", "# sort the last dimension of the 2D tensors", "\n", "tensor", "=", "torchsort", ".", "soft_sort", "(", "tensor", ",", "regularization", "=", "regularization", ",", "regularization_strength", "=", "regularization_strength", ")", "\n", "# undo the reorder operation", "\n", "if", "leave_dims_at_end", ":", "\n", "        ", "return", "tensor", "\n", "", "return", "torch_undo_dims_at_end_2d", "(", "tensor", ",", "moved_shape", "=", "moved_shape", ",", "moved_end_dims", "=", "moved_end_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_soft_rank": [[121, 138], ["softsort.torch_dims_at_end_2d", "torchsort.soft_rank", "softsort.torch_undo_dims_at_end_2d"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_dims_at_end_2d", "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_undo_dims_at_end_2d"], ["", "def", "torch_soft_rank", "(", "\n", "tensor", ":", "torch", ".", "Tensor", ",", "\n", "dims", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "=", "-", "1", ",", "\n", "regularization", "=", "'l2'", ",", "\n", "regularization_strength", "=", "1.0", ",", "\n", "leave_dims_at_end", "=", "False", ",", "\n", ")", ":", "\n", "# we import it locally so that we don't have to install this", "\n", "    ", "import", "torchsort", "\n", "# reorder the dimensions", "\n", "tensor", ",", "moved_shape", ",", "moved_end_dims", "=", "torch_dims_at_end_2d", "(", "tensor", ",", "dims", "=", "dims", ",", "return_undo_data", "=", "True", ")", "\n", "# sort the last dimension of the 2D tensors", "\n", "tensor", "=", "torchsort", ".", "soft_rank", "(", "tensor", ",", "regularization", "=", "regularization", ",", "regularization_strength", "=", "regularization_strength", ")", "\n", "# undo the reorder operation", "\n", "if", "leave_dims_at_end", ":", "\n", "        ", "return", "tensor", "\n", "", "return", "torch_undo_dims_at_end_2d", "(", "tensor", ",", "moved_shape", "=", "moved_shape", ",", "moved_end_dims", "=", "moved_end_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.multi_spearman_rank_loss": [[145, 169], ["softsort.torch_dims_at_end_2d", "softsort.torch_dims_at_end_2d", "softsort.spearman_rank_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_dims_at_end_2d", "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_dims_at_end_2d", "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.spearman_rank_loss"], ["", "def", "multi_spearman_rank_loss", "(", "\n", "pred", ":", "torch", ".", "Tensor", ",", "\n", "targ", ":", "torch", ".", "Tensor", ",", "\n", "dims", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "...", "]", "]", "=", "-", "1", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "regularization", "=", "'l2'", ",", "\n", "regularization_strength", "=", "1.0", ",", "\n", "nan_to_num", "=", "False", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Like spearman_rank_loss but computes the loss over the specified\n    dims, taking the average over the remaining unspecified dims.\n\n    eg. given a tensor of shape (B, C, H, W) and specifying dims=(1, 3), the\n        loss is computed over the C & W dims, by internally moving the dimensions\n        to the end (B, H, C, W) and the reshaping the array to (B*H, C*W) before\n        passing the array to spearman_rank_loss and returning the mean loss.\n    \"\"\"", "\n", "assert", "pred", ".", "shape", "==", "targ", ".", "shape", "\n", "pred", "=", "torch_dims_at_end_2d", "(", "pred", ",", "dims", "=", "dims", ",", "return_undo_data", "=", "False", ")", "\n", "targ", "=", "torch_dims_at_end_2d", "(", "targ", ",", "dims", "=", "dims", ",", "return_undo_data", "=", "False", ")", "\n", "# compute", "\n", "assert", "reduction", "==", "'mean'", ",", "'only supports reduction=\"mean\"'", "\n", "return", "spearman_rank_loss", "(", "pred", "=", "pred", ",", "targ", "=", "targ", ",", "reduction", "=", "reduction", ",", "regularization", "=", "regularization", ",", "regularization_strength", "=", "regularization_strength", ",", "nan_to_num", "=", "nan_to_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.spearman_rank_loss": [[171, 221], ["torchsort.soft_rank", "torchsort.soft_rank", "torch.nan_to_num.mean", "torch.nan_to_num.norm", "torch.nan_to_num.mean", "torch.nan_to_num.norm", "torch.nan_to_num", "torch.nan_to_num", "torch.nan_to_num", "torch.nan_to_num", "loss.mean", "torch.nan_to_num.reshape", "torch.nan_to_num.reshape", "KeyError", "repr"], "function", ["None"], ["", "def", "spearman_rank_loss", "(", "\n", "pred", ":", "torch", ".", "Tensor", ",", "\n", "targ", ":", "torch", ".", "Tensor", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "regularization", "=", "'l2'", ",", "\n", "regularization_strength", "=", "1.0", ",", "\n", "nan_to_num", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Compute the spearman correlation coefficient.\n    - Supports 1D and 2D tensors.\n    - For a 2D tensor of shape (B, N), the spearman correlation\n      coefficient is computed over the last axis, with\n      the mean taken over the B resulting values.\n    - If the tensor is 1D of shape (N,) it is converted\n      automatically to a 2D tensor of shape (1, N)\n\n    Adapted from: https://github.com/teddykoker/torchsort\n    \"\"\"", "\n", "# TODO: I think something is wrong with this...", "\n", "# we import it locally so that we don't have to install this", "\n", "import", "torchsort", "\n", "# add missing dim", "\n", "if", "pred", ".", "ndim", "==", "1", ":", "\n", "        ", "pred", ",", "targ", "=", "pred", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "targ", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "", "assert", "pred", ".", "shape", "==", "targ", ".", "shape", "\n", "assert", "pred", ".", "ndim", "==", "2", "\n", "# sort the last dimension of the 2D tensors", "\n", "assert", "regularization", "==", "'l2'", ",", "'Only l2 regularization is currently supported for torchsort, others can result in memory leaks. See the torchsort github page for the bug report.'", "\n", "pred", "=", "torchsort", ".", "soft_rank", "(", "pred", ",", "regularization", "=", "regularization", ",", "regularization_strength", "=", "regularization_strength", ")", "\n", "targ", "=", "torchsort", ".", "soft_rank", "(", "targ", ",", "regularization", "=", "regularization", ",", "regularization_strength", "=", "regularization_strength", ")", "\n", "# compute individual losses", "\n", "# TODO: this can result in nan values, what to do then?", "\n", "pred", "=", "pred", "-", "pred", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "pred", "=", "pred", "/", "pred", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "targ", "=", "targ", "-", "targ", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "targ", "=", "targ", "/", "targ", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "# replace nan values", "\n", "if", "nan_to_num", ":", "\n", "        ", "pred", "=", "torch", ".", "nan_to_num", "(", "pred", ",", "nan", "=", "0.0", ")", "\n", "targ", "=", "torch", ".", "nan_to_num", "(", "targ", ",", "nan", "=", "0.0", ")", "\n", "# compute the final loss", "\n", "", "loss", "=", "(", "pred", "*", "targ", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "# reduce the loss", "\n", "if", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "'none'", ":", "\n", "        ", "return", "loss", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f'Invalid reduction mode: {repr(reduction)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_mse_rank_loss": [[228, 233], ["torch.mse_loss", "softsort.torch_soft_rank", "softsort.torch_soft_rank"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_soft_rank", "home.repos.pwc.inspect_result.nmichlo_disent.loss.softsort.torch_soft_rank"], ["", "", "def", "torch_mse_rank_loss", "(", "pred", ",", "targ", ",", "dims", "=", "-", "1", ",", "regularization", "=", "'l2'", ",", "regularization_strength", "=", "1.0", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "return", "F", ".", "mse_loss", "(", "\n", "torch_soft_rank", "(", "pred", ",", "dims", "=", "dims", ",", "regularization", "=", "regularization", ",", "regularization_strength", "=", "regularization_strength", ",", "leave_dims_at_end", "=", "False", ")", ",", "\n", "torch_soft_rank", "(", "targ", ",", "dims", "=", "dims", ",", "regularization", "=", "regularization", ",", "regularization_strength", "=", "regularization_strength", ",", "leave_dims_at_end", "=", "False", ")", ",", "\n", "reduction", "=", "reduction", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._base.WrappedDataset.__len__": [[40, 42], ["None"], "methods", ["None"], ["from", "disent", ".", "dataset", ".", "data", "import", "GroundTruthData", "\n", "from", "disent", ".", "dataset", ".", "sampling", "import", "SingleSampler", "\n", "from", "disent", ".", "dataset", ".", "wrapper", "import", "WrappedDataset", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._base.WrappedDataset.__getitem__": [[43, 45], ["None"], "methods", ["None"], ["from", "disent", ".", "util", ".", "deprecate", "import", "deprecated", "\n", "from", "disent", ".", "util", ".", "iters", "import", "LengthIter", "\n", "from", "disent", ".", "util", ".", "math", ".", "random", "import", "random_choice_prng", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._base.WrappedDataset.data": [[46, 49], ["None"], "methods", ["None"], ["\n", "\n", "# ========================================================================= #", "\n", "# Helper                                                                    #", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._base.WrappedDataset.gt_data": [[50, 54], ["isinstance"], "methods", ["None"], ["# -- Checking if the wrapped data is an instance of GroundTruthData adds    #", "\n", "#    complexity, but it means the user doesn't have to worry about handling #", "\n", "#    potentially different instances of the DisentDataset class             #", "\n", "# ========================================================================= #", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._dither.DitheredDataset.__init__": [[45, 70], ["isinstance", "numpy.arange", "gt_data.idx_to_pos", "disent.dataset.util.state_space.StateSpace", "disent.dataset.util.state_space.StateSpace.pos_to_idx", "log.info", "len", "disent.util.math.dither.nd_dither_matrix", "d_mat.flatten", "numpy.arange", "len", "len", "sum", "len", "len", "unique_count_map.values", "zip", "sum", "numpy.unique", "unique_count_map.values"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx", "home.repos.pwc.inspect_result.nmichlo_disent.math.dither.nd_dither_matrix"], ["    ", "def", "__init__", "(", "self", ",", "gt_data", ":", "GroundTruthData", ",", "dither_n", ":", "int", "=", "2", ",", "keep_ratio", ":", "float", "=", "1", ")", ":", "\n", "        ", "assert", "0", "<", "keep_ratio", "<=", "1.0", "\n", "assert", "isinstance", "(", "gt_data", ",", "GroundTruthData", ")", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "self", ".", "_gt_data", "=", "gt_data", "\n", "# data space", "\n", "data_idx", "=", "np", ".", "arange", "(", "len", "(", "gt_data", ")", ")", "\n", "data_pos", "=", "gt_data", ".", "idx_to_pos", "(", "data_idx", ")", "\n", "# dmat space", "\n", "d_mat", "=", "nd_dither_matrix", "(", "n", "=", "dither_n", ",", "d", "=", "self", ".", "_gt_data", ".", "num_factors", ",", "norm", "=", "True", ")", "<", "keep_ratio", "\n", "d_states", "=", "StateSpace", "(", "d_mat", ".", "shape", ")", "\n", "# data space to dmat space", "\n", "dmat_pos", "=", "data_pos", "%", "dither_n", "\n", "dmat_idx", "=", "d_states", ".", "pos_to_idx", "(", "dmat_pos", ")", "\n", "mask", "=", "d_mat", ".", "flatten", "(", ")", "[", "dmat_idx", "]", "\n", "# convert mask to indices", "\n", "self", ".", "_indices", "=", "np", ".", "arange", "(", "len", "(", "gt_data", ")", ")", "[", "mask", "]", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "assert", "len", "(", "self", ".", "_indices", ")", ">", "0", "\n", "# check values & count compared to ratio", "\n", "unique_count_map", "=", "{", "False", ":", "0", ",", "True", ":", "0", ",", "**", "{", "u", ":", "c", "for", "u", ",", "c", "in", "zip", "(", "*", "np", ".", "unique", "(", "mask", ",", "return_counts", "=", "True", ")", ")", "}", "}", "\n", "assert", "len", "(", "unique_count_map", ")", "==", "2", "\n", "assert", "unique_count_map", "[", "True", "]", ">", "0", "\n", "assert", "sum", "(", "unique_count_map", ".", "values", "(", ")", ")", "==", "len", "(", "gt_data", ")", "\n", "log", ".", "info", "(", "f'[n={dither_n}] keep ratio: {keep_ratio:.2f} actual ratio: {unique_count_map[True] / sum(unique_count_map.values()):.2f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._dither.DitheredDataset.__len__": [[71, 73], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._dither.DitheredDataset.__getitem__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "_gt_data", "[", "self", ".", "_indices", "[", "item", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._dither.DitheredDataset.data": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", "->", "Dataset", ":", "\n", "        ", "return", "self", ".", "_gt_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._masked.MaskedDataset.__init__": [[75, 87], ["isinstance", "len", "_masked.load_mask_indices", "len", "_masked.load_mask_indices", "log.info", "disent.util.math.random.random_choice_prng", "len"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.wrapper._masked.load_mask_indices", "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._masked.load_mask_indices", "home.repos.pwc.inspect_result.nmichlo_disent.math.random.random_choice_prng"], ["    ", "def", "__init__", "(", "self", ",", "data", ":", "DataTypeHint", ",", "mask", ":", "MaskTypeHint", ",", "randomize", ":", "bool", "=", "False", ")", ":", "\n", "        ", "assert", "isinstance", "(", "data", ",", "(", "GroundTruthData", ",", "torch", ".", "Tensor", ",", "np", ".", "ndarray", ")", ")", "\n", "n", "=", "len", "(", "data", ")", "\n", "# save values", "\n", "self", ".", "_data", "=", "data", "\n", "self", ".", "_indices", "=", "load_mask_indices", "(", "n", ",", "mask", ")", "\n", "# randomize", "\n", "if", "randomize", ":", "\n", "            ", "l", "=", "len", "(", "self", ".", "_indices", ")", "\n", "self", ".", "_indices", "=", "load_mask_indices", "(", "n", ",", "random_choice_prng", "(", "n", ",", "size", "=", "l", ",", "replace", "=", "False", ")", ")", "\n", "assert", "len", "(", "self", ".", "_indices", ")", "==", "l", "\n", "log", ".", "info", "(", "f'replaced mask: {l}/{n} ({l/n:.3f}) with randomized mask!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._masked.MaskedDataset.__len__": [[88, 90], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._masked.MaskedDataset.__getitem__": [[91, 93], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "self", ".", "_indices", "[", "idx", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._masked.MaskedDataset.data": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", "->", "Dataset", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.wrapper._masked.load_mask_indices": [[49, 71], ["isinstance", "isinstance", "len", "len", "numpy.load", "len", "numpy.arange", "len", "len", "numpy.min", "numpy.max", "numpy.unique"], "function", ["None"], ["def", "load_mask_indices", "(", "length", ":", "int", ",", "mask_or_indices", ":", "MaskTypeHint", ")", ":", "\n", "# load as numpy mask if it is a string!", "\n", "    ", "if", "isinstance", "(", "mask_or_indices", ",", "str", ")", ":", "\n", "        ", "mask_or_indices", "=", "np", ".", "load", "(", "mask_or_indices", ")", "[", "'mask'", "]", "\n", "# load data", "\n", "", "assert", "isinstance", "(", "mask_or_indices", ",", "np", ".", "ndarray", ")", "\n", "# check inputs", "\n", "if", "mask_or_indices", ".", "dtype", "==", "'bool'", ":", "\n", "# boolean values", "\n", "        ", "assert", "length", "==", "len", "(", "mask_or_indices", ")", "\n", "indices", "=", "np", ".", "arange", "(", "length", ")", "[", "mask_or_indices", "]", "\n", "", "else", ":", "\n", "# integer values", "\n", "        ", "assert", "len", "(", "np", ".", "unique", "(", "mask_or_indices", ")", ")", "==", "len", "(", "mask_or_indices", ")", "\n", "assert", "np", ".", "min", "(", "mask_or_indices", ")", ">=", "0", "\n", "assert", "np", ".", "max", "(", "mask_or_indices", ")", "<", "length", "\n", "indices", "=", "mask_or_indices", "\n", "# check that we have at least 1 value", "\n", "", "assert", "len", "(", "indices", ")", ">", "0", "\n", "assert", "len", "(", "indices", ")", "<=", "length", "\n", "# return values", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__walk.GroundTruthRandomWalkSampler.uninit_copy": [[45, 50], ["_groundtruth__walk.GroundTruthRandomWalkSampler"], "methods", ["None"], ["    ", "def", "uninit_copy", "(", "self", ")", "->", "'GroundTruthRandomWalkSampler'", ":", "\n", "        ", "return", "GroundTruthRandomWalkSampler", "(", "\n", "num_samples", "=", "self", ".", "_num_samples", ",", "\n", "p_dist_max", "=", "self", ".", "_p_dist_max", ",", "\n", "n_dist_max", "=", "self", ".", "_n_dist_max", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__walk.GroundTruthRandomWalkSampler.__init__": [[52, 67], ["disent.dataset.sampling.BaseDisentSampler.__init__", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "num_samples", ":", "int", "=", "3", ",", "\n", "p_dist_max", ":", "int", "=", "8", ",", "\n", "n_dist_max", ":", "int", "=", "32", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_samples", "=", "num_samples", ")", "\n", "# checks", "\n", "assert", "num_samples", "in", "{", "1", ",", "2", ",", "3", "}", ",", "f'num_samples ({repr(num_samples)}) must be 1, 2 or 3'", "\n", "# save hparams", "\n", "self", ".", "_num_samples", "=", "num_samples", "\n", "self", ".", "_p_dist_max", "=", "p_dist_max", "\n", "self", ".", "_n_dist_max", "=", "n_dist_max", "\n", "# dataset variable", "\n", "self", ".", "_state_space", ":", "Optional", "[", "StateSpace", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__walk.GroundTruthRandomWalkSampler._init": [[68, 71], ["isinstance", "dataset.state_space_copy", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.state_space_copy"], ["", "def", "_init", "(", "self", ",", "dataset", ":", "GroundTruthData", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "GroundTruthData", ")", ",", "f'dataset must be an instance of {repr(GroundTruthData.__class__.__name__)}, got: {repr(dataset)}'", "\n", "self", ".", "_state_space", "=", "dataset", ".", "state_space_copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__walk.GroundTruthRandomWalkSampler._sample_idx": [[76, 91], ["numpy.random.randint", "_groundtruth__walk._random_walk", "numpy.random.randint", "numpy.random.randint", "_groundtruth__walk._random_walk", "_groundtruth__walk._random_walk"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__walk._random_walk", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__walk._random_walk", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__walk._random_walk"], ["", "def", "_sample_idx", "(", "self", ",", "idx", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "if", "self", ".", "_num_samples", "==", "1", ":", "\n", "            ", "return", "(", "idx", ",", ")", "\n", "", "elif", "self", ".", "_num_samples", "==", "2", ":", "\n", "            ", "p_dist", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "_p_dist_max", "+", "1", ")", "\n", "pos", "=", "_random_walk", "(", "idx", ",", "p_dist", ",", "self", ".", "_state_space", ".", "factor_sizes", ")", "\n", "return", "(", "idx", ",", "pos", ")", "\n", "", "elif", "self", ".", "_num_samples", "==", "3", ":", "\n", "            ", "p_dist", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "_p_dist_max", "+", "1", ")", "\n", "n_dist", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "_n_dist_max", "+", "1", ")", "\n", "pos", "=", "_random_walk", "(", "idx", ",", "p_dist", ",", "self", ".", "_state_space", ".", "factor_sizes", ")", "\n", "neg", "=", "_random_walk", "(", "pos", ",", "n_dist", ",", "self", ".", "_state_space", ".", "factor_sizes", ")", "\n", "return", "(", "idx", ",", "pos", ",", "neg", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__walk._random_walk": [[98, 106], ["numpy.array", "range", "numpy.ravel_multi_index", "int", "numpy.unravel_index", "_groundtruth__walk._walk_nearby_inplace"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__walk._walk_nearby_inplace"], ["", "", "", "def", "_random_walk", "(", "idx", ":", "int", ",", "dist", ":", "int", ",", "factor_sizes", ":", "np", ".", "ndarray", ")", "->", "int", ":", "\n", "# random walk", "\n", "    ", "pos", "=", "np", ".", "array", "(", "np", ".", "unravel_index", "(", "idx", ",", "factor_sizes", ")", ",", "dtype", "=", "int", ")", "# much faster than StateSpace.idx_to_pos, we don't need checks!", "\n", "for", "_", "in", "range", "(", "dist", ")", ":", "\n", "        ", "_walk_nearby_inplace", "(", "pos", ",", "factor_sizes", ")", "\n", "", "idx", "=", "np", ".", "ravel_multi_index", "(", "pos", ",", "factor_sizes", ")", "# much faster than StateSpace.pos_to_idx, we don't need checks!", "\n", "# done!", "\n", "return", "int", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__walk._walk_nearby_inplace": [[108, 124], ["disent.util.jit.try_njit", "numpy.random.randint", "len", "numpy.random.random", "max", "min"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.jit.try_njit"], ["", "@", "try_njit", "(", ")", "\n", "def", "_walk_nearby_inplace", "(", "pos", ":", "np", ".", "ndarray", ",", "factor_sizes", ":", "Sequence", "[", "int", "]", ")", "->", "NoReturn", ":", "\n", "# try to shift any single factor by 1 or -1", "\n", "    ", "while", "True", ":", "\n", "        ", "f_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "factor_sizes", ")", ")", "\n", "cur", "=", "pos", "[", "f_idx", "]", "\n", "# walk random factor value", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "nxt", "=", "max", "(", "cur", "-", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "nxt", "=", "min", "(", "cur", "+", "1", ",", "factor_sizes", "[", "f_idx", "]", "-", "1", ")", "\n", "# exit if different", "\n", "", "if", "cur", "!=", "nxt", ":", "\n", "            ", "break", "\n", "# update the position", "\n", "", "", "pos", "[", "f_idx", "]", "=", "nxt", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._single.SingleSampler.uninit_copy": [[38, 40], ["_single.SingleSampler"], "methods", ["None"], ["    ", "def", "uninit_copy", "(", "self", ")", "->", "'SingleSampler'", ":", "\n", "        ", "return", "SingleSampler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._single.SingleSampler.__init__": [[41, 43], ["disent.dataset.sampling._base.BaseDisentSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_samples", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._single.SingleSampler._init": [[44, 46], ["None"], "methods", ["None"], ["", "def", "_init", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._single.SingleSampler._sample_idx": [[47, 49], ["None"], "methods", ["None"], ["", "def", "_sample_idx", "(", "self", ",", "idx", ":", "int", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "(", "idx", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._random__any.RandomSampler.uninit_copy": [[38, 40], ["_random__any.RandomSampler"], "methods", ["None"], ["    ", "def", "uninit_copy", "(", "self", ")", "->", "'RandomSampler'", ":", "\n", "        ", "return", "RandomSampler", "(", "num_samples", "=", "self", ".", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._random__any.RandomSampler.__init__": [[41, 43], ["disent.dataset.sampling._base.BaseDisentSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "self", ",", "num_samples", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_samples", "=", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._random__any.RandomSampler._init": [[44, 46], ["len"], "methods", ["None"], ["", "def", "_init", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "_len", "=", "len", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._random__any.RandomSampler._sample_idx": [[47, 50], ["numpy.random.randint"], "methods", ["None"], ["", "def", "_sample_idx", "(", "self", ",", "idx", ":", "int", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "# sample indices", "\n", "        ", "return", "(", "idx", ",", "*", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "_len", ",", "size", "=", "self", ".", "_num_samples", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__single.GroundTruthSingleSampler.uninit_copy": [[43, 45], ["_groundtruth__single.GroundTruthSingleSampler"], "methods", ["None"], ["    ", "def", "uninit_copy", "(", "self", ")", "->", "'GroundTruthSingleSampler'", ":", "\n", "        ", "return", "GroundTruthSingleSampler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__single.GroundTruthSingleSampler.__init__": [[46, 49], ["disent.dataset.sampling._base.BaseDisentSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_samples", "=", "1", ")", "\n", "self", ".", "_state_space", ":", "Optional", "[", "StateSpace", "]", "=", "None", "# TODO: not actually needed", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__single.GroundTruthSingleSampler._init": [[50, 53], ["isinstance", "dataset.state_space_copy", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.state_space_copy"], ["", "def", "_init", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "GroundTruthData", ")", ",", "f'dataset must be an instance of {repr(GroundTruthData.__class__.__name__)}, got: {repr(dataset)}'", "\n", "self", ".", "_state_space", "=", "dataset", ".", "state_space_copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__single.GroundTruthSingleSampler._sample_idx": [[54, 56], ["None"], "methods", ["None"], ["", "def", "_sample_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "(", "idx", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._base.BaseDisentSampler.uninit_copy": [[36, 38], ["None"], "methods", ["None"], ["from", "torch", ".", "utils", ".", "data", "import", "IterableDataset", "\n", "from", "torch", ".", "utils", ".", "data", ".", "dataloader", "import", "default_collate", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._base.BaseDisentSampler.__init__": [[39, 41], ["None"], "methods", ["None"], ["from", "disent", ".", "dataset", ".", "sampling", "import", "BaseDisentSampler", "\n", "from", "disent", ".", "dataset", ".", "data", "import", "GroundTruthData", "\n", "from", "disent", ".", "dataset", ".", "sampling", "import", "SingleSampler", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._base.BaseDisentSampler.num_samples": [[42, 45], ["None"], "methods", ["None"], ["from", "disent", ".", "dataset", ".", "wrapper", "import", "WrappedDataset", "\n", "from", "disent", ".", "util", ".", "deprecate", "import", "deprecated", "\n", "from", "disent", ".", "util", ".", "iters", "import", "LengthIter", "\n", "from", "disent", ".", "util", ".", "math", ".", "random", "import", "random_choice_prng", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._base.BaseDisentSampler.init": [[48, 56], ["_base.BaseDisentSampler._init", "RuntimeError", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.GroundTruthDistSampler._init"], ["# ========================================================================= #", "\n", "# Helper                                                                    #", "\n", "# -- Checking if the wrapped data is an instance of GroundTruthData adds    #", "\n", "#    complexity, but it means the user doesn't have to worry about handling #", "\n", "#    potentially different instances of the DisentDataset class             #", "\n", "# ========================================================================= #", "\n", "\n", "\n", "class", "NotGroundTruthDataError", "(", "Exception", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._base.BaseDisentSampler._init": [[57, 62], ["None"], "methods", ["None"], ["    ", "\"\"\"\n    This error is thrown if the wrapped dataset is not GroundTruthData\n    \"\"\"", "\n", "\n", "\n", "", "T", "=", "TypeVar", "(", "'T'", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._base.BaseDisentSampler.is_init": [[63, 66], ["None"], "methods", ["None"], ["\n", "\n", "def", "groundtruth_only", "(", "func", ":", "T", ")", "->", "T", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._base.BaseDisentSampler._sample_idx": [[67, 69], ["None"], "methods", ["None"], ["def", "wrapper", "(", "self", ":", "'DisentDataset'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_ground_truth", ":", "\n", "            ", "raise", "NotGroundTruthDataError", "(", "f'Check `is_ground_truth` first before calling `{func.__name__}`, the dataset wrapped by {repr(self.__class__.__name__)} is not a {repr(GroundTruthData.__name__)}, instead got: {repr(self._dataset)}.'", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._base.BaseDisentSampler.sample": [[70, 81], ["_base.BaseDisentSampler._sample_idx", "RuntimeError", "len", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.GroundTruthDistSampler._sample_idx"], ["", "return", "func", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "\n", "\n", "", "def", "wrapped_only", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "self", ":", "'DisentDataset'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_wrapped_data", ":", "\n", "            ", "raise", "NotGroundTruthDataError", "(", "f'Check `is_data_wrapped` first before calling `{func.__name__}`, the dataset wrapped by {repr(self.__class__.__name__)} is not a {repr(WrappedDataset.__name__)}, instead got: {repr(self._dataset)}.'", ")", "\n", "", "return", "func", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._base.BaseDisentSampler.__call__": [[82, 84], ["_base.BaseDisentSampler.sample"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.sampling._base.BaseDisentSampler.sample"], ["\n", "# ========================================================================= #", "\n", "# Dataset Wrapper                                                           #", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair_orig.GroundTruthPairOrigSampler.uninit_copy": [[35, 38], ["_groundtruth__pair_orig.GroundTruthPairOrigSampler"], "methods", ["None"], ["    ", "def", "uninit_copy", "(", "self", ")", "->", "'GroundTruthPairOrigSampler'", ":", "\n", "        ", "return", "GroundTruthPairOrigSampler", "(", "\n", "p_k", "=", "self", ".", "p_k", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair_orig.GroundTruthPairOrigSampler.__init__": [[40, 54], ["disent.dataset.sampling._base.BaseDisentSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "# num_differing_factors", "\n", "p_k", ":", "int", "=", "1", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sampler that emulates choosing factors like:\n        https://github.com/google-research/disentanglement_lib/blob/master/disentanglement_lib/methods/weak/train_weak_lib.py\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_samples", "=", "2", ")", "\n", "# DIFFERING FACTORS", "\n", "self", ".", "p_k", "=", "p_k", "\n", "# dataset variable", "\n", "self", ".", "_state_space", ":", "Optional", "[", "StateSpace", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair_orig.GroundTruthPairOrigSampler._init": [[55, 58], ["isinstance", "dataset.state_space_copy", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.state_space_copy"], ["", "def", "_init", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "GroundTruthData", ")", ",", "f'dataset must be an instance of {repr(GroundTruthData.__class__.__name__)}, got: {repr(dataset)}'", "\n", "self", ".", "_state_space", "=", "dataset", ".", "state_space_copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair_orig.GroundTruthPairOrigSampler._sample_idx": [[63, 68], ["_groundtruth__pair_orig.GroundTruthPairOrigSampler.datapoint_sample_factors_pair", "_groundtruth__pair_orig.GroundTruthPairOrigSampler._state_space.pos_to_idx", "_groundtruth__pair_orig.GroundTruthPairOrigSampler._state_space.pos_to_idx"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler.datapoint_sample_factors_pair", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx"], ["", "def", "_sample_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "f0", ",", "f1", "=", "self", ".", "datapoint_sample_factors_pair", "(", "idx", ")", "\n", "return", "(", "\n", "self", ".", "_state_space", ".", "pos_to_idx", "(", "f0", ")", ",", "\n", "self", ".", "_state_space", ".", "pos_to_idx", "(", "f1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair_orig.GroundTruthPairOrigSampler.datapoint_sample_factors_pair": [[70, 81], ["_groundtruth__pair_orig.GroundTruthPairOrigSampler._state_space.idx_to_pos", "_groundtruth__pair_orig._sample_k_differing"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair_orig._sample_k_differing"], ["", "def", "datapoint_sample_factors_pair", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        This function is based on _sample_weak_pair_factors()\n        Except deterministic for the first item in the pair, based off of idx.\n        \"\"\"", "\n", "# randomly sample the first observation -- In our case we just use the idx", "\n", "sampled_factors", "=", "self", ".", "_state_space", ".", "idx_to_pos", "(", "idx", ")", "\n", "# sample the next observation with k differing factors", "\n", "next_factors", ",", "k", "=", "_sample_k_differing", "(", "sampled_factors", ",", "self", ".", "_state_space", ",", "k", "=", "self", ".", "p_k", ")", "\n", "# return the samples", "\n", "return", "sampled_factors", ",", "next_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair_orig._sample_k_differing": [[83, 107], ["numpy.array", "numpy.random.choice", "numpy.random.choice", "numpy.random.randint", "len", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "", "def", "_sample_k_differing", "(", "factors", ",", "state_space", ":", "StateSpace", ",", "k", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Resample the factors used for the corresponding item in a pair.\n      - Based on simple_dynamics() from:\n        https://github.com/google-research/disentanglement_lib/blob/master/disentanglement_lib/methods/weak/train_weak_lib.py\n    \"\"\"", "\n", "# checks for factors", "\n", "factors", "=", "np", ".", "array", "(", "factors", ")", "\n", "assert", "factors", ".", "ndim", "==", "1", "\n", "# sample k", "\n", "if", "k", "<=", "0", ":", "\n", "        ", "k", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "state_space", ".", "num_factors", ")", "\n", "# randomly choose 1 or k", "\n", "# TODO: This is in disentanglement lib, HOWEVER is this not a mistake?", "\n", "#       A bug report has been submitted to disentanglement_lib for clarity:", "\n", "#       https://github.com/google-research/disentanglement_lib/issues/31", "\n", "", "k", "=", "np", ".", "random", ".", "choice", "(", "[", "1", ",", "k", "]", ")", "\n", "# generate list of differing indices", "\n", "index_list", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "factors", ")", ",", "k", ",", "replace", "=", "False", ")", "\n", "# randomly update factors", "\n", "for", "index", "in", "index_list", ":", "\n", "        ", "factors", "[", "index", "]", "=", "np", ".", "random", ".", "choice", "(", "state_space", ".", "factor_sizes", "[", "index", "]", ")", "\n", "# return!", "\n", "", "return", "factors", ",", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair_orig._sample_weak_pair_factors": [[109, 121], ["state_space.sample_factors", "_groundtruth__pair_orig._sample_k_differing"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair_orig._sample_k_differing"], ["", "def", "_sample_weak_pair_factors", "(", "state_space", ":", "StateSpace", ")", ":", "# pragma: no cover", "\n", "    ", "\"\"\"\n    Sample a weakly supervised pair from the given GroundTruthData.\n      - Based on weak_dataset_generator() from:\n        https://github.com/google-research/disentanglement_lib/blob/master/disentanglement_lib/methods/weak/train_weak_lib.py\n    \"\"\"", "\n", "# randomly sample the first observation", "\n", "sampled_factors", "=", "state_space", ".", "sample_factors", "(", "1", ")", "\n", "# sample the next observation with k differing factors", "\n", "next_factors", ",", "k", "=", "_sample_k_differing", "(", "sampled_factors", ",", "state_space", ",", "k", "=", "1", ")", "\n", "# return the samples", "\n", "return", "sampled_factors", ",", "next_factors", "\n", "", ""]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler.uninit_copy": [[42, 46], ["_groundtruth__pair.GroundTruthPairSampler"], "methods", ["None"], ["    ", "def", "uninit_copy", "(", "self", ")", "->", "'GroundTruthPairSampler'", ":", "\n", "        ", "return", "GroundTruthPairSampler", "(", "\n", "p_k_range", "=", "self", ".", "p_k_range", ",", "\n", "p_radius_range", "=", "self", ".", "p_radius_range", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler.__init__": [[48, 67], ["disent.dataset.sampling._base.BaseDisentSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "# factor sampling", "\n", "p_k_range", "=", "(", "1", ",", "-", "1", ")", ",", "\n", "# radius sampling", "\n", "p_radius_range", "=", "(", "1", ",", "-", "1", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Dataset that pairs together samples with at most k differing factors of variation.\n\n        dataset: A dataset that extends GroundTruthData\n        k: An integer (k), None (k=d-1), or \"uniform\" (random k in range 1 to d-1) -- inclusive of end value, not exclusive like np.random.randint\n        variation_factor_indices: The indices of the factors of variation that are sampled between pairs, if None (all factors are sampled)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_samples", "=", "2", ")", "\n", "self", ".", "p_k_range", "=", "p_k_range", "\n", "self", ".", "p_radius_range", "=", "p_radius_range", "\n", "# dataset variable", "\n", "self", ".", "_state_space", ":", "Optional", "[", "StateSpace", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._init": [[68, 75], ["isinstance", "dataset.state_space_copy", "_groundtruth__pair.GroundTruthPairSampler._min_max_from_range", "_groundtruth__pair.GroundTruthPairSampler._min_max_from_range", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.state_space_copy", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._min_max_from_range", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._min_max_from_range"], ["", "def", "_init", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "GroundTruthData", ")", ",", "f'dataset must be an instance of {repr(GroundTruthData.__class__.__name__)}, got: {repr(dataset)}'", "\n", "self", ".", "_state_space", "=", "dataset", ".", "state_space_copy", "(", ")", "\n", "# DIFFERING FACTORS", "\n", "self", ".", "p_k_min", ",", "self", ".", "p_k_max", "=", "self", ".", "_min_max_from_range", "(", "p_range", "=", "self", ".", "p_k_range", ",", "max_values", "=", "self", ".", "_state_space", ".", "num_factors", ")", "\n", "# RADIUS SAMPLING", "\n", "self", ".", "p_radius_min", ",", "self", ".", "p_radius_max", "=", "self", ".", "_min_max_from_range", "(", "p_range", "=", "self", ".", "p_radius_range", ",", "max_values", "=", "self", ".", "_state_space", ".", "factor_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._sample_idx": [[80, 85], ["_groundtruth__pair.GroundTruthPairSampler.datapoint_sample_factors_pair", "_groundtruth__pair.GroundTruthPairSampler._state_space.pos_to_idx", "_groundtruth__pair.GroundTruthPairSampler._state_space.pos_to_idx"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler.datapoint_sample_factors_pair", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx"], ["", "def", "_sample_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "f0", ",", "f1", "=", "self", ".", "datapoint_sample_factors_pair", "(", "idx", ")", "\n", "return", "(", "\n", "self", ".", "_state_space", ".", "pos_to_idx", "(", "f0", ")", ",", "\n", "self", ".", "_state_space", ".", "pos_to_idx", "(", "f1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler.datapoint_sample_factors_pair": [[87, 112], ["_groundtruth__pair.GroundTruthPairSampler._sample_num_factors", "_groundtruth__pair.GroundTruthPairSampler._sample_shared_indices", "_groundtruth__pair.GroundTruthPairSampler._state_space.idx_to_pos", "_groundtruth__pair.GroundTruthPairSampler._resample_factors"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._sample_num_factors", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._sample_shared_indices", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._resample_factors"], ["", "def", "datapoint_sample_factors_pair", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Excerpt from Weakly-Supervised Disentanglement Without Compromises:\n        [section 5. Experimental results]\n\n        CREATE DATA SETS: with weak supervision from the existing\n        disentanglement data sets:\n        1. we first sample from the discrete z according to the ground-truth generative model (1)\u2013(2).\n        2. Then, we sample k factors of variation that should not be shared by the two images and re-sample those coordinates to obtain z\u02dc.\n           This ensures that each image pair differs in at most k factors of variation.\n\n        For k we consider the range from 1 to d \u2212 1.\n        This last setting corresponds to the case where all but one factor of variation are re-sampled.\n\n        We study both the case where k is constant across all pairs in the data set and where k is sampled uniformly in the range [d \u2212 1] for every training pair (k = Rnd in the following).\n        Unless specified otherwise, we aggregate the results for all values of k.\n        \"\"\"", "\n", "# SAMPLE FACTOR INDICES", "\n", "p_k", "=", "self", ".", "_sample_num_factors", "(", ")", "\n", "p_shared_indices", "=", "self", ".", "_sample_shared_indices", "(", "p_k", ")", "\n", "# SAMPLE FACTORS - sample, resample and replace shared factors with originals", "\n", "anchor_factors", "=", "self", ".", "_state_space", ".", "idx_to_pos", "(", "idx", ")", "\n", "positive_factors", "=", "self", ".", "_resample_factors", "(", "anchor_factors", ")", "\n", "positive_factors", "[", "p_shared_indices", "]", "=", "anchor_factors", "[", "p_shared_indices", "]", "\n", "return", "anchor_factors", ",", "positive_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._min_max_from_range": [[117, 125], ["disent.dataset.sampling._groundtruth__triplet.normalise_range_pair", "numpy.all", "disent.dataset.sampling._groundtruth__triplet.FactorSizeError", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "_min_max_from_range", "(", "self", ",", "p_range", ",", "max_values", ")", ":", "\n", "        ", "p_min", ",", "p_max", "=", "normalise_range_pair", "(", "p_range", ",", "max_values", ")", "\n", "# cross factor assertions", "\n", "if", "not", "np", ".", "all", "(", "p_max", "<=", "max_values", ")", ":", "\n", "            ", "raise", "FactorSizeError", "(", "'Factor dimensions are too small for given range:'", "\n", "f'\\n\\tUnsatisfied: p_max <= max_size'", "\n", "f'\\n\\tUnsatisfied: {p_max} <= {np.array(max_values)}'", ")", "\n", "", "return", "p_min", ",", "p_max", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._sample_num_factors": [[126, 129], ["numpy.random.randint"], "methods", ["None"], ["", "def", "_sample_num_factors", "(", "self", ")", ":", "\n", "        ", "p_k", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "p_k_min", ",", "self", ".", "p_k_max", "+", "1", ")", "\n", "return", "p_k", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._sample_shared_indices": [[130, 133], ["numpy.random.choice"], "methods", ["None"], ["", "def", "_sample_shared_indices", "(", "self", ",", "p_k", ")", ":", "\n", "        ", "p_shared_indices", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "_state_space", ".", "num_factors", ",", "size", "=", "self", ".", "_state_space", ".", "num_factors", "-", "p_k", ",", "replace", "=", "False", ")", "\n", "return", "p_shared_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__pair.GroundTruthPairSampler._resample_factors": [[134, 137], ["disent.util.math.random.sample_radius"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.math.random.sample_radius"], ["", "def", "_resample_factors", "(", "self", ",", "anchor_factors", ")", ":", "\n", "        ", "positive_factors", "=", "sample_radius", "(", "anchor_factors", ",", "low", "=", "0", ",", "high", "=", "self", ".", "_state_space", ".", "factor_sizes", ",", "r_low", "=", "self", ".", "p_radius_min", ",", "r_high", "=", "self", ".", "p_radius_max", "+", "1", ")", "\n", "return", "positive_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._random__episodes.RandomEpisodeSampler.uninit_copy": [[37, 41], ["_random__episodes.RandomEpisodeSampler"], "methods", ["None"], ["    ", "def", "uninit_copy", "(", "self", ")", "->", "'RandomEpisodeSampler'", ":", "\n", "        ", "return", "RandomEpisodeSampler", "(", "\n", "num_samples", "=", "self", ".", "num_samples", ",", "\n", "sample_radius", "=", "self", ".", "_sample_radius", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._random__episodes.RandomEpisodeSampler.__init__": [[43, 51], ["disent.dataset.sampling._base.BaseDisentSampler.__init__", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "self", ",", "num_samples", "=", "1", ",", "sample_radius", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_samples", "=", "num_samples", ")", "\n", "self", ".", "_sample_radius", "=", "sample_radius", "\n", "# checks", "\n", "if", "sample_radius", "is", "not", "None", ":", "\n", "            ", "if", "sample_radius", ">=", "0", ":", "\n", "                ", "if", "num_samples", ">", "sample_radius", ":", "\n", "                    ", "raise", "RuntimeError", "(", "f'sample radius: {sample_radius} cannot be less than the number of requested samples: {num_samples}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._random__episodes.RandomEpisodeSampler._init": [[52, 56], ["isinstance", "type"], "methods", ["None"], ["", "", "", "", "def", "_init", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "BaseEpisodesData", ")", ",", "f'data ({type(dataset)}) is not an instance of {BaseEpisodesData}'", "\n", "# TODO: reference to dataset is not ideal here", "\n", "self", ".", "_dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._random__episodes.RandomEpisodeSampler._sample_idx": [[61, 68], ["_random__episodes.RandomEpisodeSampler._dataset.get_episode_and_idx", "_random__episodes.RandomEpisodeSampler.sample_episode_indices", "tuple"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._episodes.BaseEpisodesData.get_episode_and_idx", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._random__episodes.RandomEpisodeSampler.sample_episode_indices"], ["", "def", "_sample_idx", "(", "self", ",", "idx", ")", ":", "\n", "# TODO: are we actually sampling distances correctly?", "\n", "# sample for observations", "\n", "        ", "episode", ",", "idx", ",", "offset", "=", "self", ".", "_dataset", ".", "get_episode_and_idx", "(", "idx", ")", "\n", "indices", "=", "self", ".", "sample_episode_indices", "(", "episode", ",", "idx", ",", "n", "=", "self", ".", "_num_samples", ",", "radius", "=", "self", ".", "_sample_radius", ")", "\n", "# transform back to original indices", "\n", "return", "tuple", "(", "i", "+", "offset", "for", "i", "in", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._random__episodes.RandomEpisodeSampler.sample_episode_indices": [[69, 93], ["len", "len", "indices.add", "len", "RuntimeError", "sorted", "len", "disent.util.math.random.sample_radius", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.math.random.sample_radius"], ["", "def", "sample_episode_indices", "(", "self", ",", "episode", ",", "idx", ",", "n", "=", "1", ",", "radius", "=", "None", ")", ":", "\n", "# TODO: update this to use the same API", "\n", "#       as ground truth triplet and pair.", "\n", "# default value", "\n", "        ", "if", "radius", "is", "None", ":", "\n", "            ", "radius", "=", "len", "(", "episode", ")", "\n", "", "elif", "radius", "<", "0", ":", "\n", "# TODO: I think this is the same as None? radius > len(episode) makes no difference?", "\n", "            ", "radius", "=", "len", "(", "episode", ")", "+", "radius", "+", "1", "\n", "", "assert", "n", "<=", "len", "(", "episode", ")", "\n", "assert", "n", "<=", "radius", "\n", "# sample values", "\n", "attempts", ",", "indices", "=", "0", ",", "{", "idx", "}", "\n", "while", "(", "len", "(", "indices", ")", "<", "n", ")", "and", "(", "attempts", "<", "n", "*", "100", ")", ":", "\n", "            ", "indices", ".", "add", "(", "sample_radius_fn", "(", "idx", ",", "low", "=", "0", ",", "high", "=", "len", "(", "episode", ")", ",", "r_low", "=", "0", ",", "r_high", "=", "radius", ")", ")", "\n", "attempts", "+=", "1", "\n", "# checks", "\n", "", "if", "len", "(", "indices", ")", "!=", "n", ":", "\n", "            ", "raise", "RuntimeError", "(", "'consider increasing the radius'", ")", "\n", "# sort indices from highest to lowest.", "\n", "# - anchor is the newest", "\n", "# - positive is close in the past", "\n", "# - negative is far in the past", "\n", "", "return", "sorted", "(", "indices", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.GroundTruthDistSampler.uninit_copy": [[44, 49], ["_groundtruth__dist.GroundTruthDistSampler"], "methods", ["None"], ["    ", "def", "uninit_copy", "(", "self", ")", "->", "'GroundTruthDistSampler'", ":", "\n", "        ", "return", "GroundTruthDistSampler", "(", "\n", "num_samples", "=", "self", ".", "_num_samples", ",", "\n", "triplet_sample_mode", "=", "self", ".", "_triplet_sample_mode", ",", "\n", "triplet_swap_chance", "=", "self", ".", "_triplet_swap_chance", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.GroundTruthDistSampler.__init__": [[51, 78], ["disent.dataset.sampling._base.BaseDisentSampler.__init__", "triplet_sample_mode.endswith", "repr", "repr", "len"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "num_samples", "=", "1", ",", "\n", "triplet_sample_mode", "=", "'manhattan_scaled'", ",", "\n", "triplet_swap_chance", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_samples", "=", "num_samples", ")", "\n", "# checks", "\n", "assert", "num_samples", "in", "{", "1", ",", "2", ",", "3", "}", ",", "f'num_samples ({repr(num_samples)}) must be 1, 2 or 3'", "\n", "assert", "triplet_sample_mode", "in", "{", "'random'", ",", "'factors'", ",", "'manhattan'", ",", "'manhattan_scaled'", ",", "'combined'", ",", "'combined_scaled'", "}", ",", "f'sample_mode ({repr(triplet_sample_mode)}) must be one of {[\"random\", \"factors\", \"manhattan\", \"combined\"]}'", "\n", "# save hparams", "\n", "self", ".", "_num_samples", "=", "num_samples", "\n", "self", ".", "_triplet_sample_mode", "=", "triplet_sample_mode", "\n", "self", ".", "_triplet_swap_chance", "=", "triplet_swap_chance", "\n", "# scaled", "\n", "self", ".", "_scaled", "=", "False", "\n", "if", "triplet_sample_mode", ".", "endswith", "(", "'_scaled'", ")", ":", "\n", "            ", "triplet_sample_mode", "=", "triplet_sample_mode", "[", ":", "-", "len", "(", "'_scaled'", ")", "]", "\n", "self", ".", "_scaled", "=", "True", "\n", "# checks", "\n", "", "assert", "triplet_sample_mode", "in", "{", "'random'", ",", "'factors'", ",", "'manhattan'", ",", "'combined'", "}", ",", "'It is a bug if this fails!'", "\n", "assert", "0", "<=", "triplet_swap_chance", "<=", "1", ",", "'triplet_swap_chance must be in range [0, 1]'", "\n", "# set vars", "\n", "self", ".", "_sample_mode", "=", "triplet_sample_mode", "\n", "self", ".", "_swap_chance", "=", "triplet_swap_chance", "\n", "# dataset variable", "\n", "self", ".", "_state_space", ":", "Optional", "[", "StateSpace", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.GroundTruthDistSampler._init": [[79, 82], ["isinstance", "dataset.state_space_copy", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.state_space_copy"], ["", "def", "_init", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "GroundTruthData", ")", ",", "f'dataset must be an instance of {repr(GroundTruthData.__class__.__name__)}, got: {repr(dataset)}'", "\n", "self", ".", "_state_space", "=", "dataset", ".", "state_space_copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.GroundTruthDistSampler._sample_idx": [[87, 100], ["_groundtruth__dist.GroundTruthDistSampler._swap_triple", "numpy.random.randint", "numpy.random.random", "len"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.GroundTruthDistSampler._swap_triple"], ["", "def", "_sample_idx", "(", "self", ",", "idx", ")", ":", "\n", "# sample indices", "\n", "        ", "indices", "=", "(", "idx", ",", "*", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "_state_space", ")", ",", "size", "=", "self", ".", "_num_samples", "-", "1", ")", ")", "\n", "# sort based on mode", "\n", "if", "self", ".", "_num_samples", "==", "3", ":", "\n", "            ", "a_i", ",", "p_i", ",", "n_i", "=", "self", ".", "_swap_triple", "(", "indices", ")", "\n", "# randomly swap positive and negative", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "_swap_chance", ":", "\n", "                ", "indices", "=", "(", "a_i", ",", "n_i", ",", "p_i", ")", "\n", "", "else", ":", "\n", "                ", "indices", "=", "(", "a_i", ",", "p_i", ",", "n_i", ")", "\n", "# get data", "\n", "", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.GroundTruthDistSampler._swap_triple": [[101, 129], ["_groundtruth__dist.GroundTruthDistSampler._state_space.idx_to_pos", "numpy.maximum", "_groundtruth__dist.factor_dist", "_groundtruth__dist.factor_dist", "_groundtruth__dist.factor_diff", "_groundtruth__dist.factor_diff", "_groundtruth__dist.factor_diff", "_groundtruth__dist.factor_diff", "KeyError", "_groundtruth__dist.factor_diff", "_groundtruth__dist.factor_diff", "_groundtruth__dist.factor_dist", "_groundtruth__dist.factor_dist"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_dist", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_dist", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_diff", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_diff", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_diff", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_diff", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_diff", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_diff", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_dist", "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_dist"], ["", "def", "_swap_triple", "(", "self", ",", "indices", ")", ":", "\n", "        ", "a_i", ",", "p_i", ",", "n_i", "=", "indices", "\n", "a_f", ",", "p_f", ",", "n_f", "=", "self", ".", "_state_space", ".", "idx_to_pos", "(", "indices", ")", "\n", "# get the scale for everything", "\n", "# - range of positions is [0, f_size - 1], to scale between 0 and 1 we need to", "\n", "#   divide by (f_size - 1), but if the factor size is 1, we can't divide by zero", "\n", "#   so we make the minimum 1", "\n", "scale", "=", "np", ".", "maximum", "(", "1", ",", "self", ".", "_state_space", ".", "factor_sizes", "-", "1", ")", "if", "(", "self", ".", "_scaled", ")", "else", "None", "\n", "# SWAP: manhattan", "\n", "if", "self", ".", "_sample_mode", "==", "'manhattan'", ":", "\n", "            ", "if", "factor_dist", "(", "a_f", ",", "p_f", ",", "scale", "=", "scale", ")", ">", "factor_dist", "(", "a_f", ",", "n_f", ",", "scale", "=", "scale", ")", ":", "\n", "                ", "return", "a_i", ",", "n_i", ",", "p_i", "\n", "# SWAP: factors", "\n", "", "", "elif", "self", ".", "_sample_mode", "==", "'factors'", ":", "\n", "            ", "if", "factor_diff", "(", "a_f", ",", "p_f", ")", ">", "factor_diff", "(", "a_f", ",", "n_f", ")", ":", "\n", "                ", "return", "a_i", ",", "n_i", ",", "p_i", "\n", "# SWAP: combined", "\n", "", "", "elif", "self", ".", "_sample_mode", "==", "'combined'", ":", "\n", "            ", "if", "factor_diff", "(", "a_f", ",", "p_f", ")", ">", "factor_diff", "(", "a_f", ",", "n_f", ")", ":", "\n", "                ", "return", "a_i", ",", "n_i", ",", "p_i", "\n", "", "elif", "factor_diff", "(", "a_f", ",", "p_f", ")", "==", "factor_diff", "(", "a_f", ",", "n_f", ")", ":", "\n", "                ", "if", "factor_dist", "(", "a_f", ",", "p_f", ",", "scale", "=", "scale", ")", ">", "factor_dist", "(", "a_f", ",", "n_f", ",", "scale", "=", "scale", ")", ":", "\n", "                    ", "return", "a_i", ",", "n_i", ",", "p_i", "\n", "# SWAP: random", "\n", "", "", "", "elif", "self", ".", "_sample_mode", "!=", "'random'", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid mode'", ")", "\n", "# done!", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_diff": [[131, 136], ["numpy.sum"], "function", ["None"], ["", "", "def", "factor_diff", "(", "f0", ":", "np", ".", "ndarray", ",", "f1", ":", "np", ".", "ndarray", ")", "->", "int", ":", "\n", "# input types should be np.int64", "\n", "    ", "assert", "f0", ".", "dtype", "==", "f1", ".", "dtype", "==", "'int64'", "\n", "# compute distances!", "\n", "return", "np", ".", "sum", "(", "f0", "!=", "f1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.sampling._groundtruth__dist.factor_dist": [[139, 163], ["numpy.sum", "f0.tolist", "f1.tolist", "scale.tolist", "fractions.Fraction", "zip", "numpy.abs", "fractions.Fraction", "abs"], "function", ["None"], ["", "def", "factor_dist", "(", "f0", ":", "np", ".", "ndarray", ",", "f1", ":", "np", ".", "ndarray", ",", "scale", ":", "np", ".", "ndarray", "=", "None", ")", "->", "Union", "[", "Fraction", ",", "int", "]", ":", "\n", "# compute distances!", "\n", "    ", "if", "scale", "is", "None", ":", "\n", "# input types should all be np.int64", "\n", "        ", "assert", "f0", ".", "dtype", "==", "f1", ".", "dtype", "==", "'int64'", ",", "f'invalid dtypes, f0: {f0.dtype}, f1: {f1.dtype}'", "\n", "# we can simply sum if everything is already an integer", "\n", "return", "np", ".", "sum", "(", "np", ".", "abs", "(", "f0", "-", "f1", ")", ")", "\n", "", "else", ":", "\n", "# input types should all be np.int64", "\n", "        ", "assert", "f0", ".", "dtype", "==", "f1", ".", "dtype", "==", "scale", ".", "dtype", "==", "'int64'", "\n", "# Division results in precision errors! We cannot simply sum divided values. We instead", "\n", "# store values as arbitrary precision rational numbers in the form of fractions This means", "\n", "# we do not lose precision while summing, and avoid comparison errors!", "\n", "#    - https://shlegeris.com/2018/10/23/sqrt.html", "\n", "#    - https://cstheory.stackexchange.com/a/4010", "\n", "# 1. first we need to convert numbers to python arbitrary precision values:", "\n", "f0", ":", "List", "[", "int", "]", "=", "f0", ".", "tolist", "(", ")", "\n", "f1", ":", "List", "[", "int", "]", "=", "f1", ".", "tolist", "(", ")", "\n", "scale", ":", "List", "[", "int", "]", "=", "scale", ".", "tolist", "(", ")", "\n", "# 2. we need to sum values in the form of fractions", "\n", "total", "=", "Fraction", "(", "0", ")", "\n", "for", "y0", ",", "y1", ",", "s", "in", "zip", "(", "f0", ",", "f1", ",", "scale", ")", ":", "\n", "            ", "total", "+=", "Fraction", "(", "abs", "(", "y0", "-", "y1", ")", ",", "s", ")", "\n", "", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.__init__": [[163, 184], ["object.__init__", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ":", "Union", "[", "str", ",", "Path", "]", ",", "mode", ":", "str", "=", "'x'", ")", ":", "\n", "        ", "\"\"\"\n        Supports the modes from `h5_open(...)`:\n            | atomic_w | Create temp file, then move and overwrite existing when done\n            | atomic_x | Create temp file, then try move or fail if existing when done\n            | r        | Readonly, file must exist (default)\n            | r+       | Read/write, file must exist\n            | w        | Create file, truncate if exists\n            | w- or x  | Create file, fail if exists\n            | a        | Read/write if exists, create otherwise\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# make sure that the file is deterministic", "\n", "# - we might be missing some of the properties that control this", "\n", "# - should we add a recursive option?", "\n", "if", "not", "isinstance", "(", "path", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'the given h5py path must be of type: `str`, `pathlib.Path`, got: {type(path)}'", ")", "\n", "", "self", ".", "_h5_path", "=", "path", "\n", "self", ".", "_h5_mode", "=", "mode", "\n", "self", ".", "_context_manager", "=", "None", "\n", "self", ".", "_open_file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.__enter__": [[185, 189], ["hdf5.h5_open", "hdf5.h5_assert_deterministic", "hdf5.H5Builder._context_manager.__enter__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.h5_open", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.h5_assert_deterministic", "home.repos.pwc.inspect_result.nmichlo_disent.inout.files.AtomicSaveFile.__enter__"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_context_manager", "=", "h5_open", "(", "self", ".", "_h5_path", ",", "self", ".", "_h5_mode", ")", "\n", "self", ".", "_open_file", "=", "h5_assert_deterministic", "(", "self", ".", "_context_manager", ".", "__enter__", "(", ")", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.__exit__": [[190, 194], ["hdf5.H5Builder._context_manager.__exit__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.files.AtomicSaveFile.__exit__"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "_context_manager", ".", "__exit__", "(", "exc_type", ",", "exc_val", ",", "exc_tb", ")", "\n", "self", ".", "_open_file", "=", "None", "\n", "self", ".", "_context_manager", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder._h5_file": [[195, 200], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_h5_file", "(", "self", ")", "->", "h5py", ".", "File", ":", "\n", "        ", "if", "self", ".", "_open_file", "is", "None", ":", "\n", "            ", "raise", "'The H5Builder has not been opened in a new context, use `with H5Builder(...) as builder: ...`'", "\n", "", "return", "self", ".", "_open_file", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.add_empty_dataset": [[201, 241], ["hdf5._normalize_compression", "hdf5.H5Builder._h5_file.create_dataset", "attrs.items", "hdf5._normalize_dtype", "hdf5._normalize_chunks", "isinstance", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5._normalize_compression", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5._normalize_dtype", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5._normalize_chunks", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "add_empty_dataset", "(", "\n", "self", ",", "\n", "name", ":", "str", ",", "\n", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ",", "\n", "dtype", ":", "AnyDType", ",", "\n", "chunk_shape", ":", "ChunksType", "=", "'batch'", ",", "\n", "compression_lvl", ":", "Optional", "[", "int", "]", "=", "9", ",", "\n", "attrs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", "\n", ")", "->", "'H5Builder'", ":", "\n", "# normalize chunk_shape", "\n", "        ", "compression", ",", "compression_lvl", "=", "_normalize_compression", "(", "compression_lvl", "=", "compression_lvl", ")", "\n", "# create new dataset", "\n", "dataset", "=", "self", ".", "_h5_file", ".", "create_dataset", "(", "\n", "name", "=", "name", ",", "\n", "shape", "=", "shape", ",", "\n", "dtype", "=", "_normalize_dtype", "(", "dtype", ")", ",", "\n", "chunks", "=", "_normalize_chunks", "(", "chunk_shape", ",", "shape", "=", "shape", ")", ",", "\n", "compression", "=", "compression", ",", "\n", "compression_opts", "=", "compression_lvl", ",", "\n", "# non-deterministic time stamps are added to the file if this is not", "\n", "# disabled, resulting in different hash sums when the file is re-generated!", "\n", "# - https://github.com/h5py/h5py/issues/225", "\n", "# - https://stackoverflow.com/questions/16019656", "\n", "# other properties:", "\n", "# - https://docs.h5py.org/en/stable/high/group.html#h5py.Group.create_dataset", "\n", "track_times", "=", "False", ",", "\n", "# how do these affect determinism:", "\n", "# track_order=False,", "\n", "# fletcher32=True,  # checksum for each chunk", "\n", "# shuffle=True,     # reorder chunk values to possibly help compression", "\n", "# scaleoffset=<int> # enable lossy compression, ints: number of bits to keep (0 is automatic lossless), floats: number of digits after decimal", "\n", ")", "\n", "# add attributes & convert", "\n", "if", "attrs", "is", "not", "None", ":", "\n", "            ", "for", "key", ",", "value", "in", "attrs", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "                    ", "value", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "'S'", ")", "\n", "", "dataset", ".", "attrs", "[", "key", "]", "=", "value", "\n", "# done!", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.fill_dataset": [[242, 280], ["len", "isinstance", "tqdm.tqdm.tqdm", "range", "max", "repr", "min", "hdf5.H5Builder.make_get_batch_fn.get_batch_fn", "isinstance", "progress.update", "log.warning", "repr", "repr", "repr", "repr", "repr", "tuple", "type", "tuple"], "methods", ["None"], ["", "def", "fill_dataset", "(", "\n", "self", ",", "\n", "name", ":", "str", ",", "\n", "get_batch_fn", ":", "Callable", "[", "[", "int", ",", "int", "]", ",", "np", ".", "ndarray", "]", ",", "# i_start, i_end", "\n", "batch_size", ":", "Union", "[", "int", ",", "Literal", "[", "'auto'", "]", "]", "=", "'auto'", ",", "\n", "show_progress", ":", "bool", "=", "False", ",", "\n", ")", "->", "'H5Builder'", ":", "\n", "        ", "dataset", ":", "h5py", ".", "Dataset", "=", "self", ".", "_h5_file", "[", "name", "]", "\n", "# determine batch size for copying data", "\n", "# get smallest multiple less than 32, otherwise original number", "\n", "if", "batch_size", "==", "'auto'", ":", "\n", "            ", "if", "dataset", ".", "chunks", ":", "\n", "                ", "batch_size", "=", "dataset", ".", "chunks", "[", "0", "]", "\n", "batch_size", "=", "max", "(", "(", "32", "//", "batch_size", ")", "*", "batch_size", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "                ", "batch_size", "=", "32", "\n", "", "", "else", ":", "\n", "            ", "if", "dataset", ".", "chunks", ":", "\n", "                ", "if", "batch_size", "%", "dataset", ".", "chunks", "[", "0", "]", "!=", "0", ":", "\n", "                    ", "log", ".", "warning", "(", "f'batch_size={batch_size} is not divisible by the first dimension of the dataset chunk size: {dataset.chunks[0]} {tuple(dataset.chunks)}'", ")", "\n", "# check batch size!", "\n", "", "", "", "assert", "isinstance", "(", "batch_size", ",", "int", ")", "and", "(", "batch_size", ">=", "1", ")", ",", "f'invalid batch_size: {repr(batch_size)}, expected: \"auto\" or an integer `>= 1`'", "\n", "# loop variables", "\n", "n", "=", "len", "(", "dataset", ")", "\n", "# save data", "\n", "with", "tqdm", "(", "total", "=", "n", ",", "disable", "=", "not", "show_progress", ",", "desc", "=", "f'saving {name}'", ")", "as", "progress", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "n", ",", "batch_size", ")", ":", "\n", "                ", "j", "=", "min", "(", "i", "+", "batch_size", ",", "n", ")", "\n", "assert", "j", ">", "i", ",", "f'this is a bug! {repr(j)} > {repr(i)}, len(dataset)={repr(n)}, batch_size={repr(batch_size)}'", "\n", "# load and modify the batch", "\n", "batch", "=", "get_batch_fn", "(", "i", ",", "j", ")", "# i_start, i_end", "\n", "assert", "isinstance", "(", "batch", ",", "np", ".", "ndarray", ")", ",", "f'returned batch is not an `np.ndarray`, got: {repr(type(batch))}'", "\n", "assert", "batch", ".", "shape", "==", "(", "j", "-", "i", ",", "*", "dataset", ".", "shape", "[", "1", ":", "]", ")", ",", "f'returned batch has incorrect shape: {tuple(batch.shape)}, expected: {(j-i, *dataset.shape[1:])}'", "\n", "# save the batch & update progress", "\n", "dataset", "[", "i", ":", "j", "]", "=", "batch", "\n", "progress", ".", "update", "(", "j", "-", "i", ")", "\n", "# done!", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.make_get_batch_fn": [[281, 313], ["isinstance", "isinstance", "hdf5.H5Builder.make_get_batch_fn._extract_fn"], "methods", ["None"], ["", "def", "make_get_batch_fn", "(", "\n", "self", ",", "\n", "array", ",", "\n", "mutator", ":", "Optional", "[", "Callable", "[", "[", "np", ".", "ndarray", "]", ",", "np", ".", "ndarray", "]", "]", "=", "None", ",", "\n", ")", "->", "Callable", "[", "[", "int", ",", "int", "]", ",", "np", ".", "ndarray", "]", ":", "\n", "# get the array extractor", "\n", "        ", "if", "isinstance", "(", "array", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "def", "_extract_fn", "(", "i", ",", "j", ")", "->", "np", ".", "ndarray", ":", "return", "array", "[", "i", ":", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "array", ",", "(", "np", ".", "ndarray", ",", "h5py", ".", "Dataset", ")", ")", ":", "# chunk sizes will be missmatched", "\n", "            ", "def", "_extract_fn", "(", "i", ",", "j", ")", "->", "np", ".", "ndarray", ":", "return", "array", "[", "i", ":", "j", "]", "\n", "", "elif", "isinstance", "(", "array", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "def", "_extract_fn", "(", "i", ",", "j", ")", "->", "np", ".", "ndarray", ":", "return", "np", ".", "array", "(", "array", "[", "i", ":", "j", "]", ")", "\n", "", "elif", "isinstance", "(", "array", ",", "Sequence", ")", ":", "\n", "            ", "def", "_extract_fn", "(", "i", ",", "j", ")", "->", "np", ".", "ndarray", ":", "return", "np", ".", "array", "(", "[", "array", "[", "k", "]", "for", "k", "in", "range", "(", "i", ",", "j", ")", "]", ")", "\n", "", "else", ":", "\n", "# last ditch effort, try as an iterator", "\n", "            ", "try", ":", "\n", "                ", "array", "=", "iter", "(", "array", ")", "\n", "", "except", ":", "\n", "                ", "raise", "TypeError", "(", "f'`fill_dataset_from_array` only supports arrays of type: `np.ndarray` or `torch.Tensor`'", ")", "\n", "# get iterator function", "\n", "", "def", "_extract_fn", "(", "i", ",", "j", ")", "->", "np", ".", "ndarray", ":", "return", "np", ".", "array", "(", "[", "next", "(", "array", ")", "for", "k", "in", "range", "(", "i", ",", "j", ")", "]", ")", "\n", "\n", "# make the get batch fn", "\n", "", "def", "get_batch_fn", "(", "i", ",", "j", ")", ":", "\n", "            ", "batch", ":", "np", ".", "ndarray", "=", "_extract_fn", "(", "i", ",", "j", ")", "\n", "if", "mutator", ":", "\n", "                ", "batch", "=", "mutator", "(", "batch", ")", "\n", "", "assert", "isinstance", "(", "batch", ",", "np", ".", "ndarray", ")", ",", "f'result of get_batch_fn is not a numpy array, got: {type(batch)}'", "\n", "return", "batch", "\n", "\n", "", "return", "get_batch_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.fill_dataset_from_array": [[314, 334], ["hdf5.H5Builder.make_get_batch_fn", "hdf5.H5Builder.fill_dataset", "isinstance"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.make_get_batch_fn", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.fill_dataset"], ["", "def", "fill_dataset_from_array", "(", "\n", "self", ",", "\n", "name", ":", "str", ",", "\n", "array", ",", "\n", "batch_size", ":", "Union", "[", "int", ",", "Literal", "[", "'auto'", "]", "]", "=", "'auto'", ",", "\n", "show_progress", ":", "bool", "=", "False", ",", "\n", "mutator", ":", "Optional", "[", "Callable", "[", "[", "np", ".", "ndarray", "]", ",", "np", ".", "ndarray", "]", "]", "=", "None", ",", "\n", ")", "->", "'H5Builder'", ":", "\n", "        ", "get_batch_fn", "=", "self", ".", "make_get_batch_fn", "(", "array", ",", "mutator", "=", "mutator", ")", "\n", "# get the batch size", "\n", "if", "batch_size", "==", "'auto'", "and", "isinstance", "(", "array", ",", "h5py", ".", "Dataset", ")", ":", "\n", "            ", "batch_size", "=", "array", ".", "chunks", "[", "0", "]", "\n", "# copy into the dataset", "\n", "", "self", ".", "fill_dataset", "(", "\n", "name", "=", "name", ",", "\n", "get_batch_fn", "=", "get_batch_fn", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "show_progress", "=", "show_progress", ",", "\n", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.fill_dataset_from_batches": [[335, 362], ["hdf5.H5Builder.fill_dataset", "iter", "next", "numpy.array", "TypeError", "len", "mutator", "type"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.fill_dataset", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "fill_dataset_from_batches", "(", "\n", "self", ",", "\n", "name", ":", "str", ",", "\n", "batch_iter", ",", "\n", "batch_size", ":", "Union", "[", "int", ",", "Literal", "[", "'auto'", "]", "]", "=", "'auto'", ",", "\n", "show_progress", ":", "bool", "=", "False", ",", "\n", "mutator", ":", "Optional", "[", "Callable", "[", "[", "Any", "]", ",", "np", ".", "ndarray", "]", "]", "=", "None", ",", "\n", ")", "->", "'H5Builder'", ":", "\n", "        ", "try", ":", "\n", "            ", "batches", "=", "iter", "(", "batch_iter", ")", "\n", "", "except", ":", "\n", "            ", "raise", "TypeError", "(", "f'`fill_dataset_from_batches` must have iterable `batch_iter`, got: {type(batch_iter)}'", ")", "\n", "# produce items", "\n", "", "def", "get_batch_fn", "(", "i", ",", "j", ")", ":", "\n", "            ", "batch", "=", "next", "(", "batches", ")", "\n", "assert", "len", "(", "batch", ")", "==", "(", "j", "-", "i", ")", "\n", "if", "mutator", ":", "\n", "                ", "batch", "=", "mutator", "(", "batch", ")", "\n", "", "return", "np", ".", "array", "(", "batch", ")", "\n", "# copy into the dataset", "\n", "", "self", ".", "fill_dataset", "(", "\n", "name", "=", "name", ",", "\n", "get_batch_fn", "=", "get_batch_fn", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "show_progress", "=", "show_progress", ",", "\n", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.add_dataset_from_array": [[363, 391], ["hdf5.H5Builder.add_empty_dataset", "hdf5.H5Builder.fill_dataset_from_array"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.add_empty_dataset", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.fill_dataset_from_array"], ["", "def", "add_dataset_from_array", "(", "\n", "self", ",", "\n", "array", ":", "np", ".", "ndarray", ",", "\n", "name", ":", "str", "=", "'data'", ",", "\n", "chunk_shape", ":", "ChunksType", "=", "'batch'", ",", "\n", "compression_lvl", ":", "Optional", "[", "int", "]", "=", "4", ",", "\n", "attrs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "batch_size", ":", "Union", "[", "int", ",", "Literal", "[", "'auto'", "]", "]", "=", "'auto'", ",", "\n", "show_progress", ":", "bool", "=", "False", ",", "\n", "# optional, discovered automatically from array otherwise", "\n", "mutator", ":", "Optional", "[", "Callable", "[", "[", "np", ".", "ndarray", "]", ",", "np", ".", "ndarray", "]", "]", "=", "None", ",", "\n", "dtype", ":", "Optional", "[", "np", ".", "dtype", "]", "=", "None", ",", "\n", "shape", ":", "Optional", "[", "Tuple", "[", "int", ",", "...", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "add_empty_dataset", "(", "\n", "name", "=", "name", ",", "\n", "shape", "=", "array", ".", "shape", "if", "(", "shape", "is", "None", ")", "else", "shape", ",", "\n", "dtype", "=", "array", ".", "dtype", "if", "(", "dtype", "is", "None", ")", "else", "dtype", ",", "\n", "chunk_shape", "=", "chunk_shape", ",", "\n", "compression_lvl", "=", "compression_lvl", ",", "\n", "attrs", "=", "attrs", ",", "\n", ")", "\n", "self", ".", "fill_dataset_from_array", "(", "\n", "name", "=", "name", ",", "\n", "array", "=", "array", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "show_progress", "=", "show_progress", ",", "\n", "mutator", "=", "mutator", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.add_dataset_from_gt_data": [[393, 443], ["min", "isinstance", "hdf5.H5Builder.add_empty_dataset", "hdf5.H5Builder.fill_dataset_from_batches", "os.cpu_count", "isinstance", "TypeError", "dict", "torch.utils.data.DataLoader", "len", "numpy.array", "numpy.array", "type"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.add_empty_dataset", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.fill_dataset_from_batches", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "add_dataset_from_gt_data", "(", "\n", "self", ",", "\n", "data", ":", "Union", "[", "'DisentDataset'", ",", "'GroundTruthData'", "]", ",", "\n", "name", ":", "str", "=", "'data'", ",", "\n", "mutator", ":", "Optional", "[", "Callable", "[", "[", "Any", "]", ",", "np", ".", "ndarray", "]", "]", "=", "None", ",", "\n", "img_shape", ":", "Tuple", "[", "Optional", "[", "int", "]", ",", "...", "]", "=", "(", "None", ",", "None", ",", "None", ")", ",", "# None items are automatically found", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "compression_lvl", ":", "Optional", "[", "int", "]", "=", "4", ",", "\n", "num_workers", ":", "int", "=", "min", "(", "os", ".", "cpu_count", "(", ")", ",", "16", ")", ",", "\n", "show_progress", ":", "bool", "=", "True", ",", "\n", "chunk_shape", ":", "ChunksType", "=", "'batch'", ",", "\n", "dtype", ":", "str", "=", "'uint8'", ",", "\n", "attrs", ":", "Optional", "[", "dict", "]", "=", "None", "\n", ")", ":", "\n", "        ", "from", "disent", ".", "dataset", "import", "DisentDataset", "\n", "from", "disent", ".", "dataset", ".", "data", "import", "GroundTruthData", "\n", "# get dataset", "\n", "# TODO: we should not automatically handle this extraction... The transform could be missing on the dataset?", "\n", "if", "isinstance", "(", "data", ",", "DisentDataset", ")", ":", "gt_data", "=", "data", ".", "gt_data", "\n", "elif", "isinstance", "(", "data", ",", "GroundTruthData", ")", ":", "gt_data", "=", "data", "\n", "else", ":", "raise", "TypeError", "(", "f'invalid data type: {type(data)}, must be {DisentDataset} or {GroundTruthData}'", ")", "\n", "# process image shape", "\n", "H", ",", "W", ",", "C", "=", "img_shape", "\n", "if", "H", "is", "None", ":", "H", "=", "gt_data", ".", "img_shape", "[", "0", "]", "\n", "if", "W", "is", "None", ":", "W", "=", "gt_data", ".", "img_shape", "[", "1", "]", "\n", "if", "C", "is", "None", ":", "C", "=", "gt_data", ".", "img_shape", "[", "2", "]", "\n", "# make the empty dataset", "\n", "self", ".", "add_empty_dataset", "(", "\n", "name", "=", "name", ",", "\n", "shape", "=", "(", "len", "(", "gt_data", ")", ",", "H", ",", "W", ",", "C", ")", ",", "\n", "dtype", "=", "dtype", ",", "\n", "chunk_shape", "=", "chunk_shape", ",", "\n", "compression_lvl", "=", "compression_lvl", ",", "\n", "# THESE ATTRIBUTES SHOULD MATCH: SelfContainedHdf5GroundTruthData", "\n", "attrs", "=", "dict", "(", "\n", "dataset_name", "=", "gt_data", ".", "name", ",", "\n", "dataset_cls_name", "=", "gt_data", ".", "__class__", ".", "__name__", ",", "\n", "factor_sizes", "=", "np", ".", "array", "(", "gt_data", ".", "factor_sizes", ",", "dtype", "=", "'uint'", ")", ",", "\n", "factor_names", "=", "np", ".", "array", "(", "gt_data", ".", "factor_names", ",", "dtype", "=", "'S'", ")", ",", "\n", "# extra attrs -- we can't overwrite the above", "\n", "**", "(", "attrs", "if", "(", "attrs", "is", "not", "None", ")", "else", "{", "}", ")", ",", "\n", ")", "\n", ")", "\n", "# fill the dataset!", "\n", "self", ".", "fill_dataset_from_batches", "(", "\n", "name", "=", "name", ",", "\n", "batch_iter", "=", "DataLoader", "(", "gt_data", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "drop_last", "=", "False", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "show_progress", "=", "show_progress", ",", "\n", "mutator", "=", "mutator", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5._normalize_dtype": [[82, 86], ["isinstance", "numpy.dtype", "torch.finfo"], "function", ["None"], ["def", "_normalize_dtype", "(", "dtype", ":", "AnyDType", ")", "->", "np", ".", "dtype", ":", "\n", "    ", "if", "isinstance", "(", "dtype", ",", "torch", ".", "dtype", ")", ":", "\n", "        ", "dtype", ":", "str", "=", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "dtype", "\n", "", "return", "np", ".", "dtype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5._normalize_chunks": [[91, 101], ["warnings.warn", "isinstance", "ValueError", "repr"], "function", ["None"], ["def", "_normalize_chunks", "(", "chunks", ":", "ChunksType", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "    ", "if", "chunks", "==", "'auto'", ":", "\n", "        ", "warnings", ".", "warn", "(", "'`auto` chuck shape has been used, did you mean `batch`'", ")", "\n", "return", "True", "\n", "", "elif", "chunks", "==", "'batch'", ":", "\n", "        ", "return", "(", "1", ",", "*", "shape", "[", "1", ":", "]", ")", "\n", "", "elif", "isinstance", "(", "chunks", ",", "tuple", ")", ":", "\n", "        ", "return", "chunks", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'invalid chunks value: {repr(chunks)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5._normalize_compression": [[103, 111], ["ValueError"], "function", ["None"], ["", "", "def", "_normalize_compression", "(", "compression_lvl", ":", "Optional", "[", "int", "]", ")", ":", "\n", "    ", "if", "compression_lvl", "is", "None", ":", "\n", "        ", "return", "None", ",", "None", "# compression, compression_lvl", "\n", "# check compression level", "\n", "", "if", "compression_lvl", "not", "in", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'compression_lvl must be an interger in the range [0, 9]'", ")", "\n", "# get values", "\n", "", "return", "'gzip'", ",", "compression_lvl", "# compression, compression_lvl", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.h5_assert_deterministic": [[122, 127], ["hdf5.H5IncompatibleError", "isinstance", "repr"], "function", ["None"], ["", "def", "h5_assert_deterministic", "(", "h5_file", ":", "h5py", ".", "File", ")", "->", "h5py", ".", "File", ":", "\n", "# check the version", "\n", "    ", "if", "(", "isinstance", "(", "h5_file", ".", "libver", ",", "str", ")", "and", "h5_file", ".", "libver", "!=", "'earliest'", ")", "or", "(", "h5_file", ".", "libver", "[", "0", "]", "!=", "'earliest'", ")", ":", "\n", "        ", "raise", "H5IncompatibleError", "(", "f'hdf5 out file has an incompatible libver: {repr(h5_file.libver)} libver should be set to: \"earliest\"'", ")", "\n", "", "return", "h5_file", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.h5_open": [[134, 159], ["warnings.warn", "str.endswith", "str.endswith", "disent.util.inout.files.AtomicSaveFile", "contextlib.nullcontext", "h5py.File", "disent.util.inout.files.AtomicSaveFile"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "h5_open", "(", "path", ":", "str", ",", "mode", ":", "str", "=", "'r'", ")", "->", "h5py", ".", "File", ":", "\n", "    ", "\"\"\"\n    MODES:\n        | atomic_w | Create temp file, then move and overwrite existing when done\n        | atomic_x | Create temp file, then try move or fail if existing when done\n        | r        | Readonly, file must exist (default)\n        | r+       | Read/write, file must exist\n        | w        | Create file, truncate if exists\n        | w- or x  | Create file, fail if exists\n        | a        | Read/write if exists, create otherwise\n    \"\"\"", "\n", "if", "not", "(", "str", ".", "endswith", "(", "path", ",", "'.h5'", ")", "or", "str", ".", "endswith", "(", "path", ",", "'.hdf5'", ")", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "f'hdf5 file path does not end with extension: `.h5` or `.hdf5`, got: {path}'", ")", "\n", "# get atomic context manager", "\n", "", "if", "mode", "==", "'atomic_w'", ":", "\n", "        ", "save_context", ",", "mode", "=", "AtomicSaveFile", "(", "path", ",", "open_mode", "=", "None", ",", "overwrite", "=", "True", ")", ",", "'w'", "\n", "", "elif", "mode", "==", "'atomic_x'", ":", "\n", "        ", "save_context", ",", "mode", "=", "AtomicSaveFile", "(", "path", ",", "open_mode", "=", "None", ",", "overwrite", "=", "False", ")", ",", "'x'", "\n", "", "else", ":", "\n", "        ", "save_context", "=", "contextlib", ".", "nullcontext", "(", "path", ")", "\n", "# handle saving to file", "\n", "", "with", "save_context", "as", "tmp_h5_path", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "tmp_h5_path", ",", "mode", ",", "libver", "=", "'earliest'", ")", "as", "h5_file", ":", "\n", "            ", "yield", "h5_file", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5._normalize_out_array": [[524, 528], ["isinstance", "numpy.array", "array.cpu().detach().numpy", "array.cpu().detach", "array.cpu"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "", "def", "_normalize_out_array", "(", "array", ":", "Union", "[", "torch", ".", "Tensor", ",", "np", ".", "ndarray", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "isinstance", "(", "array", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "array", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "np", ".", "array", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_save_array": [[530, 592], ["disent.util.deprecate.deprecated", "out_h5.create_dataset", "tqdm.tqdm.write", "hdf5.hdf5_print_entry_data_stats", "hdf5.hdf5_print_entry_data_stats", "RuntimeError", "log.debug", "tqdm.tqdm", "range", "isinstance", "len", "hdf5._normalize_out_array", "out_mutator", "progress.update", "hdf5._normalize_dtype", "hasattr", "len", "repr", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.deprecate.deprecated", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_print_entry_data_stats", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_print_entry_data_stats", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5._normalize_out_array", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5._normalize_dtype"], ["", "@", "deprecated", "(", "'this logic needs to be moved into `H5Builder`'", ")", "\n", "def", "hdf5_save_array", "(", "\n", "inp_data", ":", "Union", "[", "h5py", ".", "Dataset", ",", "np", ".", "ndarray", ",", "'torch.Tensor'", "]", ",", "\n", "out_h5", ":", "h5py", ".", "File", ",", "\n", "dataset_name", ":", "str", ",", "# input and output dataset name", "\n", "chunk_size", ":", "Optional", "[", "Union", "[", "Tuple", "[", "int", ",", "...", "]", ",", "Literal", "[", "True", "]", "]", "]", "=", "None", ",", "# True: auto determine, Tuple: specific chunk size, None: disable chunking", "\n", "compression", ":", "Optional", "[", "Union", "[", "Literal", "[", "'gzip'", "]", ",", "Literal", "[", "'lzf'", "]", "]", "]", "=", "None", ",", "# compression type, only works if chunks is specified", "\n", "compression_lvl", ":", "Optional", "[", "int", "]", "=", "None", ",", "# 0 through 9", "\n", "batch_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "# batch size to process / save at a time", "\n", "out_dtype", ":", "Optional", "[", "Union", "[", "np", ".", "dtype", ",", "str", "]", "]", "=", "None", ",", "# output dtype of the dataset", "\n", "out_mutator", ":", "Optional", "[", "Callable", "[", "[", "np", ".", "ndarray", "]", ",", "np", ".", "ndarray", "]", "]", "=", "None", ",", "# mutate batches before saving", "\n", "obs_shape", ":", "Optional", "[", "Tuple", "[", "int", ",", "...", "]", "]", "=", "None", ",", "# resize batches to this shape", "\n", ")", ":", "\n", "# TODO: this should take in an array object and output the file!", "\n", "# check out_h5 version compatibility", "\n", "    ", "if", "(", "isinstance", "(", "out_h5", ".", "libver", ",", "str", ")", "and", "out_h5", ".", "libver", "!=", "'earliest'", ")", "or", "(", "out_h5", ".", "libver", "[", "0", "]", "!=", "'earliest'", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "f'hdf5 out file has an incompatible libver: {repr(out_h5.libver)} libver should be set to: \"earliest\"'", ")", "\n", "# get observation size", "\n", "", "if", "obs_shape", "is", "None", ":", "\n", "        ", "obs_shape", "=", "inp_data", ".", "shape", "[", "1", ":", "]", "\n", "# create new dataset", "\n", "", "out_data", "=", "out_h5", ".", "create_dataset", "(", "\n", "name", "=", "dataset_name", ",", "\n", "shape", "=", "(", "inp_data", ".", "shape", "[", "0", "]", ",", "*", "obs_shape", ")", ",", "\n", "dtype", "=", "out_dtype", "if", "(", "out_dtype", "is", "not", "None", ")", "else", "_normalize_dtype", "(", "inp_data", ".", "dtype", ")", ",", "\n", "chunks", "=", "chunk_size", ",", "\n", "compression", "=", "compression", ",", "\n", "compression_opts", "=", "compression_lvl", ",", "\n", "# non-deterministic time stamps are added to the file if this is not", "\n", "# disabled, resulting in different hash sums when the file is re-generated!", "\n", "# - https://github.com/h5py/h5py/issues/225", "\n", "# - https://stackoverflow.com/questions/16019656", "\n", "# other properties:", "\n", "# - https://docs.h5py.org/en/stable/high/group.html#h5py.Group.create_dataset", "\n", "track_times", "=", "False", ",", "\n", "# track_order=False,", "\n", "# fletcher32=True,  # checksum for each chunk", "\n", "# shuffle=True,     # reorder chunk values to possibly help compression", "\n", "# scaleoffset=<int> # enable lossy compression, ints: number of bits to keep (0 is automatic lossless), floats: number of digits after decimal", "\n", ")", "\n", "# print stats", "\n", "tqdm", ".", "write", "(", "''", ")", "\n", "hdf5_print_entry_data_stats", "(", "inp_data", ",", "label", "=", "f'IN'", ")", "\n", "hdf5_print_entry_data_stats", "(", "out_data", ",", "label", "=", "f'OUT'", ")", "\n", "# choose batch size for copying data", "\n", "if", "batch_size", "is", "None", ":", "\n", "        ", "batch_size", "=", "inp_data", ".", "chunks", "[", "0", "]", "if", "(", "hasattr", "(", "inp_data", ",", "'chunks'", ")", "and", "inp_data", ".", "chunks", ")", "else", "32", "\n", "log", ".", "debug", "(", "f'saving h5 dataset using automatic batch size of: {batch_size}'", ")", "\n", "# get default", "\n", "", "if", "out_mutator", "is", "None", ":", "\n", "        ", "out_mutator", "=", "lambda", "x", ":", "x", "\n", "# save data", "\n", "", "with", "tqdm", "(", "total", "=", "len", "(", "inp_data", ")", ")", "as", "progress", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "inp_data", ")", ",", "batch_size", ")", ":", "\n", "# load and modify the batch", "\n", "            ", "batch", "=", "inp_data", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "batch", "=", "_normalize_out_array", "(", "batch", ")", "\n", "batch", "=", "out_mutator", "(", "batch", ")", "\n", "assert", "batch", ".", "shape", "[", "1", ":", "]", "==", "obs_shape", ",", "f'obs shape: {tuple(batch.shape[1:])} from processed input data does not match required obs shape: {tuple(obs_shape)}, try changing the `obs_shape` or resizing the batch in the `out_mutator`.'", "\n", "# save the batch", "\n", "out_data", "[", "i", ":", "i", "+", "batch_size", "]", "=", "batch", "\n", "progress", ".", "update", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_resave_file": [[594, 642], ["disent.util.deprecate.deprecated", "isinstance", "log.info", "h5py.File", "contextlib.nullcontext", "isinstance", "disent.util.inout.files.AtomicSaveFile", "contextlib.nullcontext", "h5py.File", "hdf5.hdf5_save_array", "disent.util.strings.fmt.bytes_to_human", "isinstance", "disent.util.strings.fmt.bytes_to_human", "os.path.getsize", "os.path.getsize"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.deprecate.deprecated", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_save_array", "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.bytes_to_human", "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.bytes_to_human"], ["", "", "", "@", "deprecated", "(", "'this logic needs to be moved into `H5Builder`'", ")", "\n", "def", "hdf5_resave_file", "(", "\n", "inp_path", ":", "Union", "[", "str", ",", "torch", ".", "Tensor", ",", "np", ".", "ndarray", "]", ",", "\n", "out_path", ":", "str", ",", "\n", "dataset_name", ":", "str", ",", "# input and output dataset name", "\n", "chunk_size", ":", "Optional", "[", "Union", "[", "Tuple", "[", "int", ",", "...", "]", ",", "Literal", "[", "True", "]", "]", "]", "=", "None", ",", "# True: auto determine, Tuple: specific chunk size, None: disable chunking", "\n", "compression", ":", "Optional", "[", "Union", "[", "Literal", "[", "'gzip'", "]", ",", "Literal", "[", "'lzf'", "]", "]", "]", "=", "None", ",", "# compression type, only works if chunks is specified", "\n", "compression_lvl", ":", "Optional", "[", "int", "]", "=", "None", ",", "# 0 through 9", "\n", "batch_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "# batch size to process / save at a time", "\n", "out_dtype", ":", "Optional", "[", "Union", "[", "np", ".", "dtype", ",", "str", "]", "]", "=", "None", ",", "# output dtype of the dataset", "\n", "out_mutator", ":", "Optional", "[", "Callable", "[", "[", "np", ".", "ndarray", "]", ",", "np", ".", "ndarray", "]", "]", "=", "None", ",", "# mutate batches before saving", "\n", "obs_shape", ":", "Optional", "[", "Tuple", "[", "int", ",", "...", "]", "]", "=", "None", ",", "# resize batches to this shape", "\n", "write_mode", ":", "Union", "[", "Literal", "[", "'atomic_w'", "]", ",", "Literal", "[", "'w'", "]", ",", "Literal", "[", "'a'", "]", "]", "=", "'atomic_w'", ",", "\n", ")", ":", "\n", "    ", "if", "isinstance", "(", "inp_path", ",", "str", ")", ":", "\n", "        ", "inp_context", "=", "h5py", ".", "File", "(", "inp_path", ",", "'r'", ")", "\n", "", "else", ":", "\n", "        ", "import", "contextlib", "\n", "inp_context", "=", "contextlib", ".", "nullcontext", "(", "inp_path", ")", "\n", "# re-save datasets", "\n", "", "with", "inp_context", "as", "inp_data", ":", "\n", "# get input dataset from h5 file", "\n", "        ", "if", "isinstance", "(", "inp_data", ",", "h5py", ".", "File", ")", ":", "\n", "            ", "inp_data", "=", "inp_data", "[", "dataset_name", "]", "\n", "# get context manager", "\n", "", "if", "write_mode", "==", "'atomic_w'", ":", "\n", "            ", "save_context", "=", "AtomicSaveFile", "(", "out_path", ",", "open_mode", "=", "None", ",", "overwrite", "=", "True", ")", "\n", "write_mode", "=", "'w'", "\n", "", "else", ":", "\n", "            ", "import", "contextlib", "\n", "save_context", "=", "contextlib", ".", "nullcontext", "(", "out_path", ")", "\n", "# handle saving to file", "\n", "", "with", "save_context", "as", "tmp_h5_path", ":", "\n", "            ", "with", "h5py", ".", "File", "(", "tmp_h5_path", ",", "write_mode", ",", "libver", "=", "'earliest'", ")", "as", "out_h5", ":", "# TODO: libver='latest' is not deterministic, even with track_times=False", "\n", "                ", "hdf5_save_array", "(", "\n", "inp_data", "=", "inp_data", ",", "\n", "out_h5", "=", "out_h5", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "compression", "=", "compression", ",", "\n", "compression_lvl", "=", "compression_lvl", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "out_dtype", "=", "out_dtype", ",", "\n", "out_mutator", "=", "out_mutator", ",", "\n", "obs_shape", "=", "obs_shape", ",", "\n", ")", "\n", "# file size:", "\n", "", "", "", "log", ".", "info", "(", "f'[FILE SIZES] IN: {bytes_to_human(os.path.getsize(inp_path)) if isinstance(inp_path, str) else \"N/A\"} OUT: {bytes_to_human(os.path.getsize(out_path))}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_test_entries_per_second": [[649, 673], ["disent.util.deprecate.deprecated", "min", "disent.util.profiling.Timer", "disent.util.iters.iter_chunks", "numpy.arange", "len", "enumerate", "len", "numpy.arange", "numpy.random.shuffle", "KeyError", "len"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.deprecate.deprecated", "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.iter_chunks"], ["", "@", "deprecated", "(", "'this logic needs to be moved into `H5Builder`'", ")", "\n", "def", "hdf5_test_entries_per_second", "(", "h5_dataset", ":", "h5py", ".", "Dataset", ",", "access_method", "=", "'random'", ",", "max_entries", "=", "48000", ",", "timeout", "=", "10", ",", "batch_size", ":", "int", "=", "256", ")", ":", "\n", "# get access method", "\n", "    ", "if", "access_method", "==", "'sequential'", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "len", "(", "h5_dataset", ")", ")", "\n", "", "elif", "access_method", "==", "'random'", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "len", "(", "h5_dataset", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'Invalid access method'", ")", "\n", "# num entries to test", "\n", "", "n", "=", "min", "(", "len", "(", "h5_dataset", ")", ",", "max_entries", ")", "\n", "indices", "=", "indices", "[", ":", "n", "]", "\n", "# iterate through dataset, exit on timeout or max_entries", "\n", "t", "=", "Timer", "(", ")", "\n", "for", "chunk", "in", "iter_chunks", "(", "enumerate", "(", "indices", ")", ",", "chunk_size", "=", "batch_size", ")", ":", "\n", "        ", "with", "t", ":", "\n", "            ", "for", "i", ",", "idx", "in", "chunk", ":", "\n", "                ", "entry", "=", "h5_dataset", "[", "idx", "]", "\n", "", "", "if", "t", ".", "elapsed", ">", "timeout", ":", "\n", "            ", "break", "\n", "# calculate score", "\n", "", "", "entries_per_sec", "=", "(", "i", "+", "1", ")", "/", "t", ".", "elapsed", "\n", "return", "entries_per_sec", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_test_speed": [[675, 680], ["disent.util.deprecate.deprecated", "h5py.File", "log.info", "log.info", "hdf5.hdf5_test_entries_per_second"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.deprecate.deprecated", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_test_entries_per_second"], ["", "@", "deprecated", "(", "'this logic needs to be moved into `H5Builder`'", ")", "\n", "def", "hdf5_test_speed", "(", "h5_path", ":", "str", ",", "dataset_name", ":", "str", ",", "access_method", ":", "str", "=", "'random'", ")", ":", "\n", "    ", "with", "h5py", ".", "File", "(", "h5_path", ",", "'r'", ")", "as", "out_h5", ":", "\n", "        ", "log", ".", "info", "(", "'[TESTING] Access Speed...'", ")", "\n", "log", ".", "info", "(", "f'Random Accesses Per Second: {hdf5_test_entries_per_second(out_h5[dataset_name], access_method=access_method, max_entries=5_000):.3f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.hdf5_print_entry_data_stats": [[687, 720], ["disent.util.deprecate.deprecated", "numpy.array", "numpy.ceil().astype", "numpy.prod", "tqdm.tqdm.write", "isinstance", "tqdm.tqdm.write", "hdf5._normalize_dtype", "numpy.prod", "numpy.array", "numpy.ones", "numpy.prod", "numpy.ceil", "str", "disent.util.strings.fmt.bytes_to_human", "str", "disent.util.strings.fmt.bytes_to_human", "str", "disent.util.strings.fmt.bytes_to_human", "list", "list", "list", "str", "repr", "repr", "isinstance", "tuple", "str"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.deprecate.deprecated", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5._normalize_dtype", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.bytes_to_human", "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.bytes_to_human", "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.bytes_to_human"], ["", "", "@", "deprecated", "(", "'this logic needs to be moved into `H5Builder`'", ")", "\n", "def", "hdf5_print_entry_data_stats", "(", "h5_dataset", ":", "h5py", ".", "Dataset", ",", "label", "=", "'STATISTICS'", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "h5_dataset", ",", "h5py", ".", "Dataset", ")", ":", "\n", "        ", "tqdm", ".", "write", "(", "\n", "f'[{label:3s}] '", "\n", "f'array: {tuple(h5_dataset.shape)} ({str(h5_dataset.dtype):8s})'", "\n", "+", "(", "f' ({h5_dataset.device})'", "if", "isinstance", "(", "h5_dataset", ",", "torch", ".", "Tensor", ")", "else", "''", ")", "\n", ")", "\n", "return", "\n", "# get info", "\n", "", "itemsize", "=", "_normalize_dtype", "(", "h5_dataset", ".", "dtype", ")", ".", "itemsize", "\n", "# entry", "\n", "shape", "=", "np", ".", "array", "(", "[", "1", ",", "*", "h5_dataset", ".", "shape", "[", "1", ":", "]", "]", ")", "\n", "data_per_entry", "=", "np", ".", "prod", "(", "shape", ")", "*", "itemsize", "\n", "# chunk", "\n", "chunks", "=", "np", ".", "array", "(", "h5_dataset", ".", "chunks", ")", "if", "(", "h5_dataset", ".", "chunks", "is", "not", "None", ")", "else", "np", ".", "ones", "(", "h5_dataset", ".", "ndim", ",", "dtype", "=", "'int'", ")", "\n", "data_per_chunk", "=", "np", ".", "prod", "(", "chunks", ")", "*", "itemsize", "\n", "# chunks per entry", "\n", "chunks_per_dim", "=", "np", ".", "ceil", "(", "shape", "/", "chunks", ")", ".", "astype", "(", "'int'", ")", "\n", "chunks_per_entry", "=", "np", ".", "prod", "(", "chunks_per_dim", ")", "\n", "read_data_per_entry", "=", "data_per_chunk", "*", "chunks_per_entry", "\n", "# format", "\n", "chunks", "=", "f'{str(list(chunks)):18s}'", "\n", "data_per_chunk", "=", "f'{bytes_to_human(data_per_chunk):20s}'", "\n", "chunks_per_dim", "=", "f'{str(list(chunks_per_dim)):18s}'", "\n", "chunks_per_entry", "=", "f'{chunks_per_entry:5d}'", "\n", "read_data_per_entry", "=", "f'{bytes_to_human(read_data_per_entry):20s}'", "\n", "# format remaining", "\n", "entry", "=", "f'{str(list(shape)):18s}'", "\n", "data_per_entry", "=", "f'{bytes_to_human(data_per_entry)}'", "\n", "# print info", "\n", "tqdm", ".", "write", "(", "\n", "f'[{label:3s}] '", "\n", "f'entry: {entry} ({str(h5_dataset.dtype):8s}) {c.lYLW}{data_per_entry}{c.RST} '", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.npz.save_dataset_array": [[35, 41], ["disent.util.inout.files.AtomicSaveFile", "numpy.savez_compressed"], "function", ["None"], ["def", "save_dataset_array", "(", "array", ":", "np", ".", "ndarray", ",", "out_file", ":", "str", ",", "overwrite", ":", "bool", "=", "False", ",", "save_key", ":", "str", "=", "'images'", ")", ":", "\n", "    ", "assert", "array", ".", "ndim", "==", "4", ",", "f'invalid array shape, got: {array.shape}, must be: (N, H, W, C)'", "\n", "assert", "array", ".", "dtype", "==", "'uint8'", ",", "f'invalid array dtype, got: {array.dtype}, must be: \"uint8\"'", "\n", "# save the data", "\n", "with", "AtomicSaveFile", "(", "out_file", ",", "overwrite", "=", "overwrite", ")", "as", "temp_file", ":", "\n", "        ", "np", ".", "savez_compressed", "(", "temp_file", ",", "**", "{", "save_key", ":", "array", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.formats.npz.save_resized_dataset_array": [[43, 73], ["out_file.endswith", "ArrayDataset", "F_tv.to_pil_image", "F_tv.resize", "numpy.array", "disent.util.inout.files.AtomicSaveFile", "numpy.zeros", "numpy.savez_compressed", "repr", "tqdm.tqdm", "range", "range"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "", "def", "save_resized_dataset_array", "(", "array", ":", "np", ".", "ndarray", ",", "out_file", ":", "str", ",", "size", ":", "int", "=", "64", ",", "overwrite", ":", "bool", "=", "False", ",", "save_key", ":", "str", "=", "'images'", ",", "progress", ":", "bool", "=", "True", ")", ":", "\n", "    ", "import", "torchvision", ".", "transforms", ".", "functional", "as", "F_tv", "\n", "from", "disent", ".", "dataset", ".", "data", "import", "ArrayDataset", "\n", "# checks", "\n", "assert", "out_file", ".", "endswith", "(", "'.npz'", ")", ",", "f'The output file must end with the extension: \".npz\", got: {repr(out_file)}'", "\n", "# Get the transform -- copied from: ToImgTensorF32 / ToImgTensorU8", "\n", "def", "transform", "(", "obs", ")", ":", "\n", "        ", "H", ",", "W", ",", "C", "=", "obs", ".", "shape", "\n", "obs", "=", "F_tv", ".", "to_pil_image", "(", "obs", ")", "\n", "obs", "=", "F_tv", ".", "resize", "(", "obs", ",", "size", "=", "[", "size", ",", "size", "]", ")", "\n", "obs", "=", "np", ".", "array", "(", "obs", ")", "\n", "# add removed dimension!", "\n", "if", "obs", ".", "ndim", "==", "2", ":", "\n", "            ", "obs", "=", "obs", "[", ":", ",", ":", ",", "None", "]", "\n", "assert", "obs", ".", "shape", "==", "(", "size", ",", "size", ",", "C", ")", "\n", "", "return", "obs", "\n", "# load the converted cars3d data ?x128x128x3", "\n", "", "assert", "array", ".", "ndim", "==", "4", ",", "f'invalid array shape, got: {array.shape}, must be: (N, H, W, C)'", "\n", "assert", "array", ".", "dtype", "==", "'uint8'", ",", "f'invalid array dtype, got: {array.dtype}, must be: \"uint8\"'", "\n", "N", ",", "H", ",", "W", ",", "C", "=", "array", ".", "shape", "\n", "data", "=", "ArrayDataset", "(", "array", ",", "transform", "=", "transform", ")", "\n", "# save the data", "\n", "with", "AtomicSaveFile", "(", "out_file", ",", "overwrite", "=", "overwrite", ")", "as", "temp_file", ":", "\n", "# resize the cars3d data", "\n", "        ", "idxs", "=", "tqdm", "(", "range", "(", "N", ")", ",", "desc", "=", "'converting'", ")", "if", "progress", "else", "range", "(", "N", ")", "\n", "converted", "=", "np", ".", "zeros", "(", "[", "N", ",", "size", ",", "size", ",", "C", "]", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "i", "in", "idxs", ":", "\n", "            ", "converted", "[", "i", ",", "...", "]", "=", "data", "[", "i", "]", "\n", "# save the data", "\n", "", "np", ".", "savez_compressed", "(", "temp_file", ",", "**", "{", "save_key", ":", "converted", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._BaseFftBlur.__init__": [[66, 80], ["disent.nn.modules.DisentModule.__init__", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "p", ":", "float", "=", "0.5", ",", "random_mode", "=", "'batch'", ",", "random_same_xy", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# check arguments", "\n", "assert", "0", "<=", "p", "<=", "1", ",", "f'probability of applying transform p={repr(p)} must be in range [0, 1]'", "\n", "self", ".", "p", "=", "p", "\n", "# random modes", "\n", "self", ".", "ran_batch", ",", "self", ".", "ran_channels", "=", "{", "\n", "'same'", ":", "(", "False", ",", "False", ")", ",", "\n", "'batch'", ":", "(", "True", ",", "False", ")", ",", "\n", "'all'", ":", "(", "True", ",", "True", ")", ",", "\n", "'channels'", ":", "(", "False", ",", "True", ")", ",", "\n", "}", "[", "random_mode", "]", "\n", "# same random value for x and y", "\n", "self", ".", "b_idx", "=", "0", "if", "random_same_xy", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._BaseFftBlur.forward": [[81, 97], ["_augment._BaseFftBlur._make_kernel", "disent.nn.functional.torch_conv2d_channel_wise_fft", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.transform._augment.FftBoxBlur._make_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d.torch_conv2d_channel_wise_fft"], ["", "def", "forward", "(", "self", ",", "obs", ")", ":", "\n", "# randomly return original", "\n", "        ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "(", "1", "-", "self", ".", "p", ")", ":", "\n", "            ", "return", "obs", "\n", "# add or remove batch dim", "\n", "", "add_batch_dim", "=", "(", "obs", ".", "ndim", "==", "3", ")", "\n", "if", "add_batch_dim", ":", "\n", "            ", "obs", "=", "obs", "[", "None", ",", "...", "]", "\n", "# apply kernel", "\n", "", "kernel", "=", "self", ".", "_make_kernel", "(", "obs", ".", "shape", ",", "obs", ".", "device", ")", "\n", "result", "=", "torch_conv2d_channel_wise_fft", "(", "signal", "=", "obs", ",", "kernel", "=", "kernel", ")", "\n", "# remove batch dim", "\n", "if", "add_batch_dim", ":", "\n", "            ", "result", "=", "result", "[", "0", "]", "\n", "# done!", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._BaseFftBlur._make_kernel": [[98, 100], ["None"], "methods", ["None"], ["", "def", "_make_kernel", "(", "self", ",", "shape", ",", "device", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment.FftGaussianBlur.__init__": [[108, 123], ["_augment._BaseFftBlur.__init__", "_augment._expand_to_min_max_tuples", "_augment._expand_to_min_max_tuples"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._expand_to_min_max_tuples", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._expand_to_min_max_tuples"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sigma", ":", "MmTuple", "=", "1.0", ",", "\n", "truncate", ":", "MmTuple", "=", "3.0", ",", "\n", "p", ":", "float", "=", "0.5", ",", "\n", "random_mode", "=", "'batch'", ",", "\n", "random_same_xy", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "p", "=", "p", ",", "random_mode", "=", "random_mode", ",", "random_same_xy", "=", "random_same_xy", ")", "\n", "self", ".", "sigma", "=", "_expand_to_min_max_tuples", "(", "sigma", ")", "\n", "self", ".", "trunc", "=", "_expand_to_min_max_tuples", "(", "truncate", ")", "\n", "# same random value for x and y", "\n", "if", "random_same_xy", ":", "\n", "            ", "assert", "self", ".", "sigma", "[", "0", "]", "==", "self", ".", "sigma", "[", "1", "]", "\n", "assert", "self", ".", "trunc", "[", "0", "]", "==", "self", ".", "trunc", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment.FftGaussianBlur._make_kernel": [[124, 137], ["disent.nn.functional.torch_gaussian_kernel_2d", "torch.as_tensor", "torch.as_tensor", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel_2d"], ["", "", "def", "_make_kernel", "(", "self", ",", "shape", ",", "device", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "shape", "\n", "# sigma & truncate", "\n", "sigma_m", ",", "sigma_M", "=", "torch", ".", "as_tensor", "(", "self", ".", "sigma", ",", "device", "=", "device", ")", ".", "T", "\n", "trunc_m", ",", "trunc_M", "=", "torch", ".", "as_tensor", "(", "self", ".", "trunc", ",", "device", "=", "device", ")", ".", "T", "\n", "# generate random values", "\n", "sigma", "=", "sigma_m", "+", "torch", ".", "rand", "(", "(", "B", "if", "self", ".", "ran_batch", "else", "1", ")", ",", "(", "C", "if", "self", ".", "ran_channels", "else", "1", ")", ",", "2", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "*", "(", "sigma_M", "-", "sigma_m", ")", "\n", "trunc", "=", "trunc_m", "+", "torch", ".", "rand", "(", "(", "B", "if", "self", ".", "ran_batch", "else", "1", ")", ",", "(", "C", "if", "self", ".", "ran_channels", "else", "1", ")", ",", "2", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "*", "(", "trunc_M", "-", "trunc_m", ")", "\n", "# generate kernel", "\n", "return", "torch_gaussian_kernel_2d", "(", "\n", "sigma", "=", "sigma", "[", "...", ",", "0", "]", ",", "truncate", "=", "trunc", "[", "...", ",", "0", "]", ",", "\n", "sigma_b", "=", "sigma", "[", "...", ",", "self", ".", "b_idx", "]", ",", "truncate_b", "=", "trunc", "[", "...", ",", "self", ".", "b_idx", "]", ",", "# TODO: we do generate unneeded random values if random_same_xy == True", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment.FftBoxBlur.__init__": [[146, 162], ["_augment._BaseFftBlur.__init__", "_augment._expand_to_min_max_tuples", "numpy.array().flatten().tolist", "all", "all", "numpy.array().flatten", "isinstance", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._expand_to_min_max_tuples", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["def", "__init__", "(", "\n", "self", ",", "\n", "radius", ":", "MmTuple", "=", "1", ",", "\n", "p", ":", "float", "=", "0.5", ",", "\n", "random_mode", "=", "'batch'", ",", "\n", "random_same_xy", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "p", "=", "p", ",", "random_mode", "=", "random_mode", ",", "random_same_xy", "=", "random_same_xy", ")", "\n", "self", ".", "radius", ":", "Tuple", "[", "Tuple", "[", "int", ",", "int", "]", ",", "Tuple", "[", "int", ",", "int", "]", "]", "=", "_expand_to_min_max_tuples", "(", "radius", ")", "\n", "# same random value for x and y", "\n", "if", "random_same_xy", ":", "\n", "            ", "assert", "self", ".", "radius", "[", "0", "]", "==", "self", ".", "radius", "[", "1", "]", "\n", "# check values", "\n", "", "values", "=", "np", ".", "array", "(", "self", ".", "radius", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "values", ")", ",", "'radius values must be integers'", "\n", "assert", "all", "(", "(", "0", "<=", "x", ")", "for", "x", "in", "values", ")", ",", "'radius values must be >= 0, resulting in diameter: 2*r+1'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment.FftBoxBlur._make_kernel": [[163, 175], ["torch.randint", "torch.randint", "disent.nn.functional.torch_box_kernel_2d"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_box_kernel_2d"], ["", "def", "_make_kernel", "(", "self", ",", "shape", ",", "device", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "shape", "\n", "# sigma & truncate", "\n", "(", "rym", ",", "ryM", ")", ",", "(", "rxm", ",", "rxM", ")", "=", "self", ".", "radius", "\n", "# generate random values", "\n", "radius_y", "=", "torch", ".", "randint", "(", "low", "=", "rym", ",", "high", "=", "ryM", "+", "1", ",", "size", "=", "(", "(", "B", "if", "self", ".", "ran_batch", "else", "1", ")", ",", "(", "C", "if", "self", ".", "ran_channels", "else", "1", ")", ")", ",", "device", "=", "device", ")", "\n", "radius_x", "=", "torch", ".", "randint", "(", "low", "=", "rxm", ",", "high", "=", "rxM", "+", "1", ",", "size", "=", "(", "(", "B", "if", "self", ".", "ran_batch", "else", "1", ")", ",", "(", "C", "if", "self", ".", "ran_channels", "else", "1", ")", ")", ",", "device", "=", "device", ")", "\n", "# done computing kernel", "\n", "return", "torch_box_kernel_2d", "(", "\n", "radius", "=", "radius_y", ",", "\n", "radius_b", "=", "radius_x", "if", "(", "self", ".", "b_idx", "==", "1", ")", "else", "radius_y", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment.FftKernel.__init__": [[191, 200], ["disent.nn.modules.DisentModule.__init__", "_augment.FftKernel.register_buffer", "ValueError", "_augment.get_kernel"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment.get_kernel"], ["def", "__init__", "(", "self", ",", "kernel", ":", "Union", "[", "torch", ".", "Tensor", ",", "str", "]", ",", "normalize_mode", ":", "str", "=", "_NO_ARG", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# deprecation error", "\n", "if", "normalize_mode", "is", "_NO_ARG", ":", "\n", "            ", "raise", "ValueError", "(", "f'default argument for normalize_mode was \"sum\", this has been deprecated and will change to \"none\" in future. Please manually override this value!'", ")", "\n", "# load & save the kernel -- no gradients allowed", "\n", "", "self", ".", "_kernel", ":", "torch", ".", "Tensor", "\n", "self", ".", "register_buffer", "(", "'_kernel'", ",", "get_kernel", "(", "kernel", ",", "normalize_mode", "=", "normalize_mode", ")", ",", "persistent", "=", "True", ")", "\n", "self", ".", "_kernel", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment.FftKernel.forward": [[201, 213], ["disent.nn.functional.torch_conv2d_channel_wise_fft"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d.torch_conv2d_channel_wise_fft"], ["", "def", "forward", "(", "self", ",", "obs", ")", ":", "\n", "# add or remove batch dim", "\n", "        ", "add_batch_dim", "=", "(", "obs", ".", "ndim", "==", "3", ")", "\n", "if", "add_batch_dim", ":", "\n", "            ", "obs", "=", "obs", "[", "None", ",", "...", "]", "\n", "# apply kernel", "\n", "", "result", "=", "torch_conv2d_channel_wise_fft", "(", "signal", "=", "obs", ",", "kernel", "=", "self", ".", "_kernel", ")", "\n", "# remove batch dim", "\n", "if", "add_batch_dim", ":", "\n", "            ", "result", "=", "result", "[", "0", "]", "\n", "# done!", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._expand_to_min_max_tuples": [[53, 58], ["numpy.broadcast_to().tolist", "all", "ValueError", "numpy.broadcast_to", "isinstance"], "function", ["None"], ["def", "_expand_to_min_max_tuples", "(", "input", ":", "MmTuple", ")", "->", "Tuple", "[", "Tuple", "[", "Number", ",", "Number", "]", ",", "Tuple", "[", "Number", ",", "Number", "]", "]", ":", "\n", "    ", "(", "xm", ",", "xM", ")", ",", "(", "ym", ",", "yM", ")", "=", "np", ".", "broadcast_to", "(", "input", ",", "(", "2", ",", "2", ")", ")", ".", "tolist", "(", ")", "\n", "if", "not", "all", "(", "isinstance", "(", "n", ",", "(", "float", ",", "int", ")", ")", "for", "n", "in", "[", "xm", ",", "xM", ",", "ym", ",", "yM", "]", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'only scalars, tuples with shape (2,): [m, M] or tuples with shape (2, 2): [[xm, xM], [ym, yM]] are supported'", ")", "\n", "", "return", "(", "xm", ",", "xM", ")", ",", "(", "ym", ",", "yM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._scale_kernel": [[221, 244], ["torch.no_grad", "isinstance", "ValueError", "kernel.sum", "torch.abs().sum", "repr", "[].sum", "torch.abs", "[].sum", "torch.maximum", "KeyError", "torch.abs", "[].sum", "[].sum", "torch.abs", "repr", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_scale_kernel", "(", "kernel", ":", "torch", ".", "Tensor", ",", "mode", ":", "Union", "[", "bool", ",", "str", "]", "=", "'abssum'", ")", ":", "\n", "# old normalize mode", "\n", "    ", "if", "isinstance", "(", "mode", ",", "bool", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'boolean arguments to `scale_kernel` are deprecated, convert True to \"sum\" and False to \"none\", got: {repr(mode)}'", ")", "\n", "# handle the normalize mode", "\n", "", "if", "mode", "==", "'sum'", ":", "\n", "        ", "return", "kernel", "/", "kernel", ".", "sum", "(", ")", "\n", "", "elif", "mode", "==", "'abssum'", ":", "\n", "        ", "return", "kernel", "/", "torch", ".", "abs", "(", "kernel", ")", ".", "sum", "(", ")", "\n", "", "elif", "mode", "==", "'possum'", ":", "\n", "        ", "return", "kernel", "/", "torch", ".", "abs", "(", "kernel", ")", "[", "kernel", ">", "0", "]", ".", "sum", "(", ")", "\n", "", "elif", "mode", "==", "'negsum'", ":", "\n", "        ", "return", "kernel", "/", "torch", ".", "abs", "(", "kernel", ")", "[", "kernel", "<", "0", "]", ".", "sum", "(", ")", "\n", "", "elif", "mode", "==", "'maxsum'", ":", "\n", "        ", "return", "kernel", "/", "torch", ".", "maximum", "(", "\n", "torch", ".", "abs", "(", "kernel", ")", "[", "kernel", ">", "0", "]", ".", "sum", "(", ")", ",", "\n", "torch", ".", "abs", "(", "kernel", ")", "[", "kernel", "<", "0", "]", ".", "sum", "(", ")", ",", "\n", ")", "\n", "", "elif", "mode", "==", "'none'", ":", "\n", "        ", "return", "kernel", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f'invalid scale mode: {repr(mode)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._check_kernel": [[246, 255], ["isinstance", "repr", "repr", "repr"], "function", ["None"], ["", "", "def", "_check_kernel", "(", "kernel", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "# check kernel", "\n", "    ", "assert", "isinstance", "(", "kernel", ",", "torch", ".", "Tensor", ")", "\n", "assert", "kernel", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "kernel", ".", "ndim", "==", "4", ",", "f'invalid number of kernel dims, required 4, given: {repr(kernel.ndim)}'", "# B, C, H, W", "\n", "assert", "kernel", ".", "shape", "[", "0", "]", "==", "1", ",", "f'invalid size of first kernel dim, required (1, ?, ?, ?), given: {repr(kernel.shape)}'", "# B", "\n", "assert", "kernel", ".", "shape", "[", "0", "]", "in", "(", "1", ",", "3", ")", ",", "f'invalid size of second kernel dim, required (?, 1 or 3, ?, ?), given: {repr(kernel.shape)}'", "# C", "\n", "# done checks", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment.make_kernel": [[258, 263], ["_augment._scale_kernel", "_augment._check_kernel"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._scale_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._check_kernel"], ["", "def", "make_kernel", "(", "name", ":", "str", ",", "normalize_mode", ":", "str", "=", "'none'", ")", ":", "\n", "    ", "kernel", "=", "R", ".", "KERNELS", "[", "name", "]", "\n", "kernel", "=", "_scale_kernel", "(", "kernel", ",", "mode", "=", "normalize_mode", ")", "\n", "kernel", "=", "_check_kernel", "(", "kernel", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._get_kernel": [[265, 274], ["os.path.isfile", "KeyError", "torch.load", "repr"], "function", ["None"], ["", "def", "_get_kernel", "(", "name_or_path", ":", "str", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "'/'", "not", "in", "name_or_path", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "R", ".", "KERNELS", "[", "name_or_path", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "name_or_path", ")", ":", "\n", "        ", "return", "torch", ".", "load", "(", "name_or_path", ")", "\n", "", "raise", "KeyError", "(", "f'Invalid kernel path or name: {repr(name_or_path)} Examples of argument based kernels include: {R.KERNELS.regex_examples}, otherwise specify a valid path to a kernel file save with torch.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment.get_kernel": [[276, 281], ["_augment._scale_kernel", "_augment._check_kernel", "isinstance", "_augment._get_kernel", "torch.clone"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._scale_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._check_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._get_kernel"], ["", "def", "get_kernel", "(", "kernel", ":", "Union", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "normalize_mode", ":", "str", "=", "'none'", ")", ":", "\n", "    ", "kernel", "=", "_get_kernel", "(", "kernel", ")", "if", "isinstance", "(", "kernel", ",", "str", ")", "else", "torch", ".", "clone", "(", "kernel", ")", "\n", "kernel", "=", "_scale_kernel", "(", "kernel", ",", "mode", "=", "normalize_mode", ")", "\n", "kernel", "=", "_check_kernel", "(", "kernel", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._make_box_kernel": [[289, 291], ["disent.nn.functional.torch_box_kernel_2d", "int"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_box_kernel_2d"], ["", "def", "_make_box_kernel", "(", "radius", ":", "str", ")", ":", "\n", "    ", "return", "torch_box_kernel_2d", "(", "radius", "=", "int", "(", "radius", ")", ")", "[", "None", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment._make_gaussian_kernel": [[294, 296], ["disent.nn.functional.torch_gaussian_kernel_2d", "int"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._conv2d_kernels.torch_gaussian_kernel_2d"], ["", "def", "_make_gaussian_kernel", "(", "radius", ":", "str", ")", ":", "\n", "    ", "return", "torch_gaussian_kernel_2d", "(", "sigma", "=", "int", "(", "radius", ")", "/", "4.0", ",", "truncate", "=", "4.0", ")", "[", "None", ",", "None", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.Noop.__call__": [[45, 47], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.Noop.__repr__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}()'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.CheckTensor.__init__": [[59, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "low", ":", "Optional", "[", "float", "]", "=", "0.", ",", "\n", "high", ":", "Optional", "[", "float", "]", "=", "1.", ",", "\n", "dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "=", "torch", ".", "float32", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_low", "=", "low", "\n", "self", ".", "_high", "=", "high", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.CheckTensor.__call__": [[69, 71], ["disent.check_tensor"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.transform.functional.check_tensor"], ["", "def", "__call__", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "F_d", ".", "check_tensor", "(", "obs", ",", "low", "=", "self", ".", "_low", ",", "high", "=", "self", ".", "_high", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.CheckTensor.__repr__": [[72, 76], ["dict", "dict.items", "repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "kwargs", "=", "dict", "(", "low", "=", "self", ".", "_low", ",", "high", "=", "self", ".", "_high", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "kwargs", "=", "\", \"", ".", "join", "(", "f\"{k}={repr(v)}\"", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "(", "v", "is", "not", "None", ")", ")", "\n", "return", "f'{self.__class__.__name__}({kwargs})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.ToImgTensorF32.__init__": [[93, 102], ["tuple", "tuple"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", ":", "Optional", "[", "F_d", ".", "SizeType", "]", "=", "None", ",", "\n", "mean", ":", "Optional", "[", "Sequence", "[", "float", "]", "]", "=", "None", ",", "\n", "std", ":", "Optional", "[", "Sequence", "[", "float", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_size", "=", "size", "\n", "self", ".", "_mean", "=", "tuple", "(", "mean", ")", "if", "(", "mean", "is", "not", "None", ")", "else", "None", "\n", "self", ".", "_std", "=", "tuple", "(", "std", ")", "if", "(", "std", "is", "not", "None", ")", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.ToImgTensorF32.__call__": [[103, 105], ["disent.to_img_tensor_f32"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.transform.functional.to_img_tensor_f32"], ["", "def", "__call__", "(", "self", ",", "obs", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "F_d", ".", "to_img_tensor_f32", "(", "obs", ",", "size", "=", "self", ".", "_size", ",", "mean", "=", "self", ".", "_mean", ",", "std", "=", "self", ".", "_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.ToImgTensorF32.__repr__": [[106, 110], ["dict", "dict.items", "repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "kwargs", "=", "dict", "(", "size", "=", "self", ".", "_size", ",", "mean", "=", "self", ".", "_mean", ",", "std", "=", "self", ".", "_std", ")", "\n", "kwargs", "=", "\", \"", ".", "join", "(", "f\"{k}={repr(v)}\"", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "(", "v", "is", "not", "None", ")", ")", "\n", "return", "f'{self.__class__.__name__}({kwargs})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.ToImgTensorU8.__init__": [[124, 129], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", ":", "Optional", "[", "F_d", ".", "SizeType", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.ToImgTensorU8.__call__": [[130, 132], ["disent.to_img_tensor_u8"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.transform.functional.to_img_tensor_u8"], ["", "def", "__call__", "(", "self", ",", "obs", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "F_d", ".", "to_img_tensor_u8", "(", "obs", ",", "size", "=", "self", ".", "_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._transforms.ToImgTensorU8.__repr__": [[133, 136], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "kwargs", "=", "f'size={repr(self._size)}'", "if", "(", "self", ".", "_size", "is", "not", "None", ")", "else", "''", "\n", "return", "f'{self.__class__.__name__}({kwargs})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform.functional.noop": [[55, 60], ["None"], "function", ["None"], ["def", "noop", "(", "obs", ":", "_T", ")", "->", "_T", ":", "\n", "    ", "\"\"\"\n    Transform that does absolutely nothing!\n    \"\"\"", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform.functional.check_tensor": [[62, 84], ["torch.is_tensor", "obs.min", "obs.max", "obs.min", "obs.max"], "function", ["None"], ["", "def", "check_tensor", "(", "\n", "obs", ":", "Any", ",", "\n", "low", ":", "Optional", "[", "float", "]", "=", "0.", ",", "\n", "high", ":", "Optional", "[", "float", "]", "=", "1.", ",", "\n", "dtype", ":", "torch", ".", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Check that the input is a tensor, its datatype matches, and\n    that it is in the required range.\n    \"\"\"", "\n", "# check is a tensor", "\n", "assert", "torch", ".", "is_tensor", "(", "obs", ")", ",", "'observation is not a tensor'", "\n", "# check type", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "        ", "assert", "obs", ".", "dtype", "==", "dtype", ",", "f'tensor type {obs.dtype} is not required type {dtype}'", "\n", "# check range", "\n", "", "if", "low", "is", "not", "None", ":", "\n", "        ", "assert", "low", "<=", "obs", ".", "min", "(", ")", ",", "f'minimum value of tensor {obs.min()} is less than allowed minimum value: {low}'", "\n", "", "if", "high", "is", "not", "None", ":", "\n", "        ", "assert", "obs", ".", "max", "(", ")", "<=", "high", ",", "f'maximum value of tensor {obs.max()} is greater than allowed maximum value: {high}'", "\n", "# DONE!", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform.functional._is_size_different": [[91, 95], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "_is_size_different", "(", "obs", ":", "Obs", ",", "size", ":", "SizeType", ")", ":", "\n", "    ", "h", ",", "w", "=", "(", "size", ",", "size", ")", "if", "isinstance", "(", "size", ",", "int", ")", "else", "size", "\n", "H", ",", "W", "=", "(", "obs", ".", "height", ",", "obs", ".", "width", ")", "if", "isinstance", "(", "obs", ",", "Image", ")", "else", "obs", ".", "shape", "[", ":", "2", "]", "\n", "return", "(", "H", "!=", "h", ")", "or", "(", "W", "!=", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform.functional.to_img_tensor_u8": [[97, 128], ["isinstance", "torch.from_numpy", "torch.moveaxis", "functional._is_size_different", "torchvision.resize", "numpy.array", "isinstance", "torchvision.to_pil_image"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.transform.functional._is_size_different", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "to_img_tensor_u8", "(", "\n", "obs", ":", "Obs", ",", "\n", "size", ":", "Optional", "[", "SizeType", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Basic transform that makes sure the image tensor is uint8 and a specified size.\n\n    Steps:\n    1. resize image if size is specified\n    2. add missing channel to greyscale image\n    3. move channels to first dim (H, W, C) -> (C, H, W)\n    \"\"\"", "\n", "# resize image", "\n", "if", "(", "size", "is", "not", "None", ")", "and", "_is_size_different", "(", "obs", ",", "size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "obs", ",", "Image", ")", ":", "\n", "            ", "obs", "=", "F_tv", ".", "to_pil_image", "(", "obs", ")", "\n", "", "obs", "=", "F_tv", ".", "resize", "(", "obs", ",", "size", "=", "size", ")", "\n", "# to numpy", "\n", "", "if", "isinstance", "(", "obs", ",", "Image", ")", ":", "\n", "        ", "obs", "=", "np", ".", "array", "(", "obs", ")", "\n", "# add missing axis", "\n", "", "if", "obs", ".", "ndim", "==", "2", ":", "\n", "        ", "obs", "=", "obs", "[", ":", ",", ":", ",", "None", "]", "\n", "# to tensor & move axis", "\n", "", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", "\n", "obs", "=", "torch", ".", "moveaxis", "(", "obs", ",", "-", "1", ",", "-", "3", ")", "\n", "# checks", "\n", "assert", "obs", ".", "ndim", "==", "3", "\n", "assert", "obs", ".", "dtype", "==", "torch", ".", "uint8", "\n", "# done!", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform.functional.to_img_tensor_f32": [[130, 179], ["torchvision.to_tensor", "functional._is_size_different", "torchvision.resize", "torchvision.normalize", "isinstance", "torchvision.to_pil_image"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.transform.functional._is_size_different"], ["", "def", "to_img_tensor_f32", "(", "\n", "obs", ":", "Obs", ",", "\n", "size", ":", "Optional", "[", "SizeType", "]", "=", "None", ",", "\n", "mean", ":", "Optional", "[", "Sequence", "[", "float", "]", "]", "=", "None", ",", "\n", "std", ":", "Optional", "[", "Sequence", "[", "float", "]", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Basic transform that should be applied to most datasets, making sure\n    the image tensor is float32 and a specified size.\n\n    Steps:\n        1. resize image if size is specified\n        2. if we have integer inputs, divide by 255\n        3. add missing channel to greyscale image\n        4. move channels to first dim (H, W, C) -> (C, H, W)\n        5. normalize using mean and std, values might thus be outside of the range [0, 1]\n    \"\"\"", "\n", "# resize image", "\n", "if", "(", "size", "is", "not", "None", ")", "and", "_is_size_different", "(", "obs", ",", "size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "obs", ",", "Image", ")", ":", "\n", "            ", "obs", "=", "F_tv", ".", "to_pil_image", "(", "obs", ")", "\n", "", "obs", "=", "F_tv", ".", "resize", "(", "obs", ",", "size", "=", "size", ")", "\n", "# transform to tensor, add missing dims & move channel dim to front", "\n", "# TODO: this should be replaced with custom logic, this is quite slow...", "\n", "#       - benchmarks show that doing conversions as numpy first, and then using torch.from_numpy is faster!", "\n", "#       - eg. SmallNorb64Data", "\n", "#             `to_tensor(item)                                                          # 27547.81it/s", "\n", "#             `torch.from_numpy(np.transpose(item.astype('float32') / 255, [2, 0, 1]))  # 53987.90it/s", "\n", "#             `torch.from_numpy((item.astype('float32') / 255).transpose([2, 0, 1]))    # 66544.00it/s", "\n", "#             `torch.from_numpy(item.astype('float32').transpose([2, 0, 1]) / 255)      # 66511.62it/s", "\n", "#             `torch.from_numpy(item.transpose([2, 0, 1]).astype('float32') / 255)      # 66133.27it/s", "\n", "#       - eg. Cars3d64Data", "\n", "#             `to_tensor(item)                                                          # 13810.46it/s", "\n", "#             `torch.from_numpy(np.transpose(item.astype('float32') / 255, [2, 0, 1]))  # 32258.03it/s", "\n", "#             `torch.from_numpy((item.astype('float32') / 255).transpose([2, 0, 1]))    # 37861.46it/s", "\n", "#             `torch.from_numpy(item.astype('float32').transpose([2, 0, 1]) / 255)      # 33034.21it/s", "\n", "#             `torch.from_numpy(item.transpose([2, 0, 1]).astype('float32') / 255)      # 32883.32it/s", "\n", "#       - INVESTIGATE: if transpose is used, and then from_numpy is called, that references the original memory? It", "\n", "#            might then be slower to convolve this data? Speed benefits could be negated? A copy might be better?", "\n", "", "obs", "=", "F_tv", ".", "to_tensor", "(", "obs", ")", "\n", "# checks", "\n", "assert", "obs", ".", "ndim", "==", "3", ",", "f'obs has does not have 3 dimensions, got: {obs.ndim} for shape: {obs.shape}'", "\n", "assert", "obs", ".", "dtype", "==", "torch", ".", "float32", ",", "f'obs is not dtype torch.float32, got: {obs.dtype}'", "\n", "# apply mean and std, we obs is of the shape (C, H, W)", "\n", "if", "(", "mean", "is", "not", "None", ")", "or", "(", "std", "is", "not", "None", ")", ":", "\n", "        ", "obs", "=", "F_tv", ".", "normalize", "(", "obs", ",", "mean", "=", "0.", "if", "(", "mean", "is", "None", ")", "else", "mean", ",", "std", "=", "1.", "if", "(", "std", "is", "None", ")", "else", "std", ",", "inplace", "=", "True", ")", "\n", "assert", "obs", ".", "dtype", "==", "torch", ".", "float32", ",", "f'after normalization, tensor should remain as dtype torch.float32, got: {obs.dtype}'", "\n", "# done!", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment_disent.DisentDatasetTransform.__init__": [[41, 48], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "transform", ":", "Optional", "[", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "]", "=", "None", ",", "\n", "transform_targ", ":", "Optional", "[", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "transform_targ", "=", "transform_targ", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment_disent.DisentDatasetTransform.__call__": [[49, 60], ["_augment_disent._apply_transform_to_batch_dict", "_augment_disent._apply_transform_to_batch_dict"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.transform._augment_disent._apply_transform_to_batch_dict", "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment_disent._apply_transform_to_batch_dict"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "# transform inputs", "\n", "        ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "if", "'x'", "not", "in", "batch", ":", "\n", "                ", "batch", "[", "'x'", "]", "=", "batch", "[", "'x_targ'", "]", "\n", "", "batch", "[", "'x'", "]", "=", "_apply_transform_to_batch_dict", "(", "batch", "[", "'x'", "]", ",", "self", ".", "transform", ")", "\n", "# transform targets", "\n", "", "if", "self", ".", "transform_targ", "is", "not", "None", ":", "\n", "            ", "batch", "[", "'x_targ'", "]", "=", "_apply_transform_to_batch_dict", "(", "batch", "[", "'x_targ'", "]", ",", "self", ".", "transform_targ", ")", "\n", "# done!", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment_disent.DisentDatasetTransform.__repr__": [[61, 63], ["repr", "repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}(transform={repr(self.transform)}, transform_targ={repr(self.transform_targ)})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.transform._augment_disent._apply_transform_to_batch_dict": [[65, 72], ["isinstance", "isinstance", "tuple", "list", "transform", "transform", "transform"], "function", ["None"], ["", "", "def", "_apply_transform_to_batch_dict", "(", "batch", ",", "transform", ")", ":", "\n", "    ", "if", "isinstance", "(", "batch", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "transform", "(", "obs", ")", "for", "obs", "in", "batch", ")", "\n", "", "if", "isinstance", "(", "batch", ",", "list", ")", ":", "\n", "        ", "return", "list", "(", "transform", "(", "obs", ")", "for", "obs", "in", "batch", ")", "\n", "", "else", ":", "\n", "        ", "return", "transform", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.__init__": [[58, 63], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "_transform", "=", "transform", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "factor_sizes", "=", "self", ".", "factor_sizes", ",", "\n", "factor_names", "=", "self", ".", "factor_names", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.name": [[69, 75], ["name.endswith", "name.lower", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "name", "=", "self", ".", "__class__", ".", "__name__", "\n", "if", "name", ".", "endswith", "(", "'Data'", ")", ":", "\n", "            ", "name", "=", "name", "[", ":", "-", "len", "(", "'Data'", ")", "]", "\n", "", "return", "name", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.factor_names": [[80, 83], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_names", "(", "self", ")", "->", "Tuple", "[", "str", ",", "...", "]", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.factor_sizes": [[84, 87], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_sizes", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.state_space_copy": [[88, 95], ["disent.dataset.util.state_space.StateSpace"], "methods", ["None"], ["", "def", "state_space_copy", "(", "self", ")", "->", "StateSpace", ":", "\n", "        ", "\"\"\"\n        :return: Copy this ground truth dataset as a StateSpace, discarding everything else!\n        \"\"\"", "\n", "return", "StateSpace", "(", "\n", "factor_sizes", "=", "self", ".", "factor_sizes", ",", "\n", "factor_names", "=", "self", ".", "factor_names", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.x_shape": [[101, 107], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "x_shape", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "# shape as would be for a single observation in a torch batch", "\n", "# eg. C x H x W", "\n", "        ", "H", ",", "W", ",", "C", "=", "self", ".", "img_shape", "\n", "return", "(", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.img_shape": [[108, 113], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_shape", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "# shape as would be for an original image", "\n", "# eg. H x W x C", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.img_channels": [[114, 119], ["repr"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_channels", "(", "self", ")", "->", "int", ":", "\n", "        ", "channels", "=", "self", ".", "img_shape", "[", "-", "1", "]", "\n", "assert", "channels", "in", "(", "1", ",", "3", ")", ",", "f'invalid number of channels for dataset: {self.__class__.__name__}, got: {repr(channels)}, required: 1 or 3'", "\n", "return", "channels", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.__getitem__": [[124, 129], ["_groundtruth.GroundTruthData._get_observation", "_groundtruth.GroundTruthData._transform"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectShadedData._get_observation"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_get_observation", "(", "idx", ")", "\n", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "            ", "obs", "=", "self", ".", "_transform", "(", "obs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData._get_observation": [[130, 132], ["None"], "methods", ["None"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.GroundTruthData.sample_random_obs_traversal": [[137, 148], ["_groundtruth.GroundTruthData.sample_random_factor_traversal", "_groundtruth.GroundTruthData.pos_to_idx", "obs_collect_fn"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx"], ["", "def", "sample_random_obs_traversal", "(", "self", ",", "f_idx", ":", "int", "=", "None", ",", "base_factors", "=", "None", ",", "num", ":", "int", "=", "None", ",", "mode", "=", "'interval'", ",", "obs_collect_fn", "=", "None", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "Union", "[", "List", "[", "Any", "]", ",", "Any", "]", "]", ":", "\n", "        ", "\"\"\"\n        Same API as sample_random_factor_traversal, but also\n        returns the corresponding indices and uncollated list of observations\n        \"\"\"", "\n", "factors", "=", "self", ".", "sample_random_factor_traversal", "(", "f_idx", "=", "f_idx", ",", "base_factors", "=", "base_factors", ",", "num", "=", "num", ",", "mode", "=", "mode", ")", "\n", "indices", "=", "self", ".", "pos_to_idx", "(", "factors", ")", "\n", "obs", "=", "[", "self", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "if", "obs_collect_fn", "is", "not", "None", ":", "\n", "            ", "obs", "=", "obs_collect_fn", "(", "obs", ")", "\n", "", "return", "factors", ",", "indices", ",", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.__init__": [[157, 174], ["tuple", "tuple", "_groundtruth.GroundTruthData.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "array", ",", "factor_names", ":", "Tuple", "[", "str", ",", "...", "]", ",", "factor_sizes", ":", "Tuple", "[", "int", ",", "...", "]", ",", "array_chn_is_last", ":", "bool", "=", "True", ",", "x_shape", ":", "Optional", "[", "Tuple", "[", "int", ",", "...", "]", "]", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "__factor_names", "=", "tuple", "(", "factor_names", ")", "\n", "self", ".", "__factor_sizes", "=", "tuple", "(", "factor_sizes", ")", "\n", "self", ".", "_array", "=", "array", "\n", "# get shape", "\n", "if", "x_shape", "is", "not", "None", ":", "\n", "            ", "C", ",", "H", ",", "W", "=", "x_shape", "\n", "", "elif", "array_chn_is_last", ":", "\n", "            ", "H", ",", "W", ",", "C", "=", "array", ".", "shape", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "C", ",", "H", ",", "W", "=", "array", ".", "shape", "[", "1", ":", "]", "\n", "# set observation shape", "\n", "", "self", ".", "__img_shape", "=", "(", "H", ",", "W", ",", "C", ")", "\n", "# initialize", "\n", "super", "(", ")", ".", "__init__", "(", "transform", "=", "transform", ")", "\n", "# check shapes -- it is up to the user to handle which method they choose", "\n", "assert", "(", "array", ".", "shape", "[", "1", ":", "]", "==", "self", ".", "img_shape", ")", "or", "(", "array", ".", "shape", "[", "1", ":", "]", "==", "self", ".", "x_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array": [[175, 178], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "array", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_array", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.factor_names": [[179, 182], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_names", "(", "self", ")", "->", "Tuple", "[", "str", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "__factor_names", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.factor_sizes": [[183, 186], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_sizes", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "__factor_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.img_shape": [[187, 190], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_shape", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "__img_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData._get_observation": [[191, 195], ["None"], "methods", ["None"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "# TODO: INVESTIGATE! I think this implements a lock,", "\n", "#       hindering multi-threaded environments?", "\n", "        ", "return", "self", ".", "_array", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.new_like": [[196, 206], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "new_like", "(", "cls", ",", "array", ",", "gt_data", ":", "GroundTruthData", ",", "array_chn_is_last", ":", "bool", "=", "True", ")", ":", "\n", "# TODO: should this not copy the x_shape and transform?", "\n", "        ", "return", "cls", "(", "\n", "array", "=", "array", ",", "\n", "factor_names", "=", "gt_data", ".", "factor_names", ",", "\n", "factor_sizes", "=", "gt_data", ".", "factor_sizes", ",", "\n", "array_chn_is_last", "=", "array_chn_is_last", ",", "\n", "x_shape", "=", "None", ",", "# infer from array", "\n", "transform", "=", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._DiskDataMixin._mixin_disk_init": [[221, 235], ["disent.util.inout.paths.ensure_dir_exists", "log.info", "os.path.abspath", "os.path.join", "os.path.expanduser", "log.debug", "datafile.prepare", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.ensure_dir_exists", "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.prepare"], ["def", "_mixin_disk_init", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ")", ":", "\n", "# get root data folder", "\n", "        ", "if", "data_root", "is", "None", ":", "\n", "            ", "data_root", "=", "self", ".", "default_data_root", "\n", "", "else", ":", "\n", "            ", "data_root", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "data_root", ")", ")", "\n", "# get class data folder", "\n", "", "self", ".", "_data_dir", "=", "ensure_dir_exists", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "self", ".", "name", ")", ")", "\n", "log", ".", "info", "(", "f'{self.name}: data_dir_share={repr(self._data_dir)}'", ")", "\n", "# prepare everything", "\n", "if", "prepare", ":", "\n", "            ", "for", "datafile", "in", "self", ".", "datafiles", ":", "\n", "                ", "log", ".", "debug", "(", "f'[preparing]: {datafile} into data dir: {self._data_dir}'", ")", "\n", "datafile", ".", "prepare", "(", "self", ".", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._DiskDataMixin.data_dir": [[236, 239], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "data_dir", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._DiskDataMixin.default_data_root": [[240, 243], ["os.path.abspath", "os.environ.get"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get"], ["", "@", "property", "\n", "def", "default_data_root", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "abspath", "(", "os", ".", "environ", ".", "get", "(", "'DISENT_DATA_ROOT'", ",", "'data/dataset'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._DiskDataMixin.datafiles": [[244, 247], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "datafiles", "(", "self", ")", "->", "Sequence", "[", "DataFile", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._DiskDataMixin.name": [[248, 251], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", "->", "str", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.DiskGroundTruthData.__init__": [[260, 264], ["object.__init__", "_groundtruth.DiskGroundTruthData._mixin_disk_init"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._DiskDataMixin._mixin_disk_init"], ["def", "__init__", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "transform", "=", "transform", ")", "\n", "# get root data folder", "\n", "self", ".", "_mixin_disk_init", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.NumpyFileGroundTruthData.__init__": [[272, 285], ["_groundtruth.DiskGroundTruthData.__init__", "os.path.join", "os.path.join.endswith", "numpy.load", "gzip.GzipFile", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ",", "transform", "=", "transform", ")", "\n", "# load dataset", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "self", ".", "datafile", ".", "out_name", ")", "\n", "if", "load_path", ".", "endswith", "(", "'.gz'", ")", ":", "\n", "            ", "import", "gzip", "\n", "with", "gzip", ".", "GzipFile", "(", "load_path", ",", "'r'", ")", "as", "load_file", ":", "\n", "                ", "self", ".", "_data", "=", "np", ".", "load", "(", "load_file", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_data", "=", "np", ".", "load", "(", "load_path", ")", "\n", "# load from the key if specified", "\n", "", "if", "self", ".", "data_key", "is", "not", "None", ":", "\n", "            ", "self", ".", "_data", "=", "self", ".", "_data", "[", "self", ".", "data_key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.NumpyFileGroundTruthData._get_observation": [[286, 288], ["None"], "methods", ["None"], ["", "", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.NumpyFileGroundTruthData.datafiles": [[289, 292], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "datafiles", "(", "self", ")", "->", "Sequence", "[", "DataFile", "]", ":", "\n", "        ", "return", "[", "self", ".", "datafile", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.NumpyFileGroundTruthData.datafile": [[293, 296], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "datafile", "(", "self", ")", "->", "DataFile", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.NumpyFileGroundTruthData.data_key": [[297, 301], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_key", "(", "self", ")", "->", "Optional", "[", "str", "]", ":", "\n", "# can override this!", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._Hdf5DataMixin._mixin_hdf5_init": [[310, 331], ["disent.dataset.data._raw.Hdf5Dataset", "disent.dataset.data._raw.Hdf5Dataset.get_attrs", "disent.dataset.data._raw.Hdf5Dataset.close"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.get_attrs", "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.close"], ["def", "_mixin_hdf5_init", "(", "self", ",", "h5_path", ":", "str", ",", "h5_dataset_name", ":", "str", "=", "'data'", ",", "in_memory", ":", "bool", "=", "False", ")", ":", "\n", "# variables", "\n", "        ", "self", ".", "_in_memory", "=", "in_memory", "\n", "# load the h5py dataset", "\n", "data", "=", "Hdf5Dataset", "(", "\n", "h5_path", "=", "h5_path", ",", "\n", "h5_dataset_name", "=", "h5_dataset_name", ",", "\n", ")", "\n", "# load attributes", "\n", "self", ".", "_attrs", "=", "data", ".", "get_attrs", "(", ")", "\n", "# handle different memory modes", "\n", "if", "self", ".", "_in_memory", ":", "\n", "# Load the entire dataset into memory if required", "\n", "# indexing dataset objects returns numpy array", "\n", "# instantiating np.array from the dataset requires double memory.", "\n", "            ", "self", ".", "_data", "=", "data", "[", ":", "]", "\n", "self", ".", "_data", ".", "flags", ".", "writeable", "=", "False", "\n", "data", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "# Load the dataset from the disk", "\n", "            ", "self", ".", "_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._Hdf5DataMixin.__len__": [[332, 334], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._Hdf5DataMixin.img_shape": [[335, 340], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_shape", "(", "self", ")", ":", "\n", "        ", "shape", "=", "self", ".", "_data", ".", "shape", "[", "1", ":", "]", "\n", "assert", "len", "(", "shape", ")", "==", "3", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._Hdf5DataMixin._get_observation": [[342, 344], ["None"], "methods", ["None"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.Hdf5GroundTruthData.__init__": [[353, 360], ["object.__init__", "_groundtruth.Hdf5GroundTruthData._mixin_hdf5_init", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._Hdf5DataMixin._mixin_hdf5_init"], ["def", "__init__", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "in_memory", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ",", "transform", "=", "transform", ")", "\n", "# initialize mixin", "\n", "self", ".", "_mixin_hdf5_init", "(", "\n", "h5_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "self", ".", "datafile", ".", "out_name", ")", ",", "\n", "h5_dataset_name", "=", "self", ".", "datafile", ".", "dataset_name", ",", "\n", "in_memory", "=", "in_memory", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.Hdf5GroundTruthData.datafiles": [[362, 365], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "datafiles", "(", "self", ")", "->", "Sequence", "[", "DataFileHashedDlH5", "]", ":", "\n", "        ", "return", "[", "self", ".", "datafile", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.Hdf5GroundTruthData.datafile": [[366, 369], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "datafile", "(", "self", ")", "->", "DataFileHashedDlH5", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.SelfContainedHdf5GroundTruthData.__init__": [[373, 389], ["_groundtruth.SelfContainedHdf5GroundTruthData._mixin_hdf5_init", "_groundtruth.SelfContainedHdf5GroundTruthData._attrs[].decode", "tuple", "tuple", "object.__init__", "name.decode", "int"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._Hdf5DataMixin._mixin_hdf5_init", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode"], ["    ", "def", "__init__", "(", "self", ",", "h5_path", ":", "str", ",", "in_memory", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "# initialize mixin", "\n", "        ", "self", ".", "_mixin_hdf5_init", "(", "\n", "h5_path", "=", "h5_path", ",", "\n", "h5_dataset_name", "=", "'data'", ",", "\n", "in_memory", "=", "in_memory", ",", "\n", ")", "\n", "# load attrs", "\n", "self", ".", "_attr_name", "=", "self", ".", "_attrs", "[", "'dataset_name'", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "self", ".", "_attr_factor_names", "=", "tuple", "(", "name", ".", "decode", "(", "\"utf-8\"", ")", "for", "name", "in", "self", ".", "_attrs", "[", "'factor_names'", "]", ")", "\n", "self", ".", "_attr_factor_sizes", "=", "tuple", "(", "int", "(", "size", ")", "for", "size", "in", "self", ".", "_attrs", "[", "'factor_sizes'", "]", ")", "\n", "# set size", "\n", "(", "B", ",", "H", ",", "W", ",", "C", ")", "=", "self", ".", "_data", ".", "shape", "\n", "self", ".", "_img_shape", "=", "(", "H", ",", "W", ",", "C", ")", "\n", "# initialize!", "\n", "super", "(", ")", ".", "__init__", "(", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.SelfContainedHdf5GroundTruthData.name": [[390, 393], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_attr_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.SelfContainedHdf5GroundTruthData.factor_names": [[394, 397], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_names", "(", "self", ")", "->", "Tuple", "[", "str", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "_attr_factor_names", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.SelfContainedHdf5GroundTruthData.factor_sizes": [[398, 401], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_sizes", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "_attr_factor_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.SelfContainedHdf5GroundTruthData.img_shape": [[402, 405], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_shape", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "_img_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet.NumpyFolder.__getitem__": [[57, 60], ["torchvision.datasets.ImageFolder.__getitem__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__getitem__", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["    ", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "cls", "=", "super", "(", ")", ".", "__getitem__", "(", "idx", ")", "\n", "return", "np", ".", "array", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet.ImageNetTinyDataFile._generate": [[115, 117], ["_groundtruth__dsprites_imagenet.resave_imagenet_tiny_archive"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet.resave_imagenet_tiny_archive"], ["def", "_generate", "(", "self", ",", "inp_file", ":", "str", ",", "out_file", ":", "str", ")", ":", "\n", "        ", "resave_imagenet_tiny_archive", "(", "orig_zipped_file", "=", "inp_file", ",", "new_save_file", "=", "out_file", ",", "overwrite", "=", "True", ",", "h5_dataset_name", "=", "self", ".", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet.ImageNetTinyData.__init__": [[134, 146], ["disent.dataset.data._groundtruth._Hdf5DataMixin.__init__", "_groundtruth__dsprites_imagenet.ImageNetTinyData._mixin_disk_init", "_groundtruth__dsprites_imagenet.ImageNetTinyData._mixin_hdf5_init", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._DiskDataMixin._mixin_disk_init", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth._Hdf5DataMixin._mixin_hdf5_init"], ["def", "__init__", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "in_memory", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_transform", "=", "transform", "\n", "# initialize mixin", "\n", "self", ".", "_mixin_disk_init", "(", "\n", "data_root", "=", "data_root", ",", "\n", "prepare", "=", "prepare", ",", "\n", ")", "\n", "self", ".", "_mixin_hdf5_init", "(", "\n", "h5_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "self", ".", "datafile_imagenet_h5", ".", "out_name", ")", ",", "\n", "h5_dataset_name", "=", "self", ".", "datafile_imagenet_h5", ".", "dataset_name", ",", "\n", "in_memory", "=", "in_memory", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet.ImageNetTinyData.__getitem__": [[148, 153], ["_groundtruth__dsprites_imagenet.ImageNetTinyData._transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "obs", "=", "self", ".", "_data", "[", "idx", "]", "\n", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "            ", "obs", "=", "self", ".", "_transform", "(", "obs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet.DSpritesImagenetData.__init__": [[179, 196], ["disent.dataset.data.GroundTruthData.__init__", "isinstance", "disent.dataset.data._groundtruth__dsprites.DSpritesData", "_groundtruth__dsprites_imagenet.ImageNetTinyData", "disent.util.math.random.random_choice_prng", "len", "type", "repr", "repr", "len"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.math.random.random_choice_prng"], ["def", "__init__", "(", "self", ",", "visibility", ":", "int", "=", "100", ",", "mode", ":", "str", "=", "'bg'", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "in_memory", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "transform", "=", "transform", ")", "\n", "# check visibility and convert to ratio", "\n", "assert", "isinstance", "(", "visibility", ",", "int", ")", ",", "f'incorrect visibility percentage type, expected int, got: {type(visibility)}'", "\n", "assert", "0", "<=", "visibility", "<=", "100", ",", "f'incorrect visibility percentage: {repr(visibility)}, must be in range [0, 100]. '", "\n", "self", ".", "_visibility", "=", "visibility", "/", "100", "\n", "# check mode and convert to foreground boolean", "\n", "assert", "mode", "in", "{", "'bg'", ",", "'fg'", "}", ",", "f'incorrect mode: {repr(mode)}, must be one of: [\"bg\", \"fg\"]'", "\n", "self", ".", "_foreground", "=", "(", "mode", "==", "'fg'", ")", "\n", "# handle the datasets", "\n", "self", ".", "_dsprites", "=", "DSpritesData", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ",", "in_memory", "=", "in_memory", ",", "transform", "=", "None", ")", "\n", "self", ".", "_imagenet", "=", "ImageNetTinyData", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ",", "in_memory", "=", "in_memory", ",", "transform", "=", "None", ")", "\n", "# deterministic randomization of the imagenet order", "\n", "self", ".", "_imagenet_order", "=", "random_choice_prng", "(", "\n", "len", "(", "self", ".", "_imagenet", ")", ",", "\n", "size", "=", "len", "(", "self", ")", ",", "\n", "seed", "=", "42", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet.DSpritesImagenetData._get_observation": [[198, 219], ["_groundtruth__dsprites_imagenet.DSpritesImagenetData._dsprites[].repeat"], "methods", ["None"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "# we need to combine the two dataset images", "\n", "# dsprites contains only {0, 255} for values", "\n", "# we can directly use these values to mask the imagenet image", "\n", "        ", "bg", "=", "self", ".", "_imagenet", "[", "self", ".", "_imagenet_order", "[", "idx", "]", "]", "\n", "fg", "=", "self", ".", "_dsprites", "[", "idx", "]", ".", "repeat", "(", "3", ",", "axis", "=", "-", "1", ")", "\n", "# compute background", "\n", "# set foreground", "\n", "r", "=", "self", ".", "_visibility", "\n", "if", "self", ".", "_foreground", ":", "\n", "# lerp content to white, and then insert into fg regions", "\n", "# r*bg + (1-r)*255", "\n", "            ", "obs", "=", "(", "r", "*", "bg", "+", "(", "(", "1", "-", "r", ")", "*", "255", ")", ")", ".", "astype", "(", "'uint8'", ")", "\n", "obs", "[", "fg", "<=", "127", "]", "=", "0", "\n", "", "else", ":", "\n", "# lerp content to black, and then insert into bg regions", "\n", "# r*bg + (1-r)*000", "\n", "            ", "obs", "=", "(", "r", "*", "bg", ")", ".", "astype", "(", "'uint8'", ")", "\n", "obs", "[", "fg", ">", "127", "]", "=", "255", "\n", "# checks", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet._noop": [[62, 64], ["None"], "function", ["None"], ["", "", "def", "_noop", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet.load_imagenet_tiny_data": [[66, 74], ["_groundtruth__dsprites_imagenet.NumpyFolder", "torch.utils.data.DataLoader", "numpy.concatenate", "os.path.join", "list", "min", "tqdm.tqdm", "os.cpu_count"], "function", ["None"], ["", "def", "load_imagenet_tiny_data", "(", "raw_data_dir", ")", ":", "\n", "# load the data", "\n", "    ", "data", "=", "NumpyFolder", "(", "os", ".", "path", ".", "join", "(", "raw_data_dir", ",", "'train'", ")", ")", "\n", "data", "=", "DataLoader", "(", "data", ",", "batch_size", "=", "64", ",", "num_workers", "=", "min", "(", "16", ",", "os", ".", "cpu_count", "(", ")", ")", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "collate_fn", "=", "_noop", ")", "\n", "# load data - this is a bit memory inefficient doing it like this instead of with a loop into a pre-allocated array", "\n", "imgs", "=", "np", ".", "concatenate", "(", "list", "(", "tqdm", "(", "data", ",", "'loading'", ")", ")", ",", "axis", "=", "0", ")", "\n", "assert", "imgs", ".", "shape", "==", "(", "100_000", ",", "64", ",", "64", ",", "3", ")", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet.resave_imagenet_tiny_archive": [[76, 100], ["os.path.splitext", "tempfile.TemporaryDirectory", "log.info", "shutil.unpack_archive", "_groundtruth__dsprites_imagenet.load_imagenet_tiny_data", "disent.util.inout.files.AtomicSaveFile", "repr", "disent.dataset.util.formats.hdf5.H5Builder", "builder.add_dataset_from_array", "os.path.dirname", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__dsprites_imagenet.load_imagenet_tiny_data", "home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.add_dataset_from_array"], ["", "def", "resave_imagenet_tiny_archive", "(", "orig_zipped_file", ",", "new_save_file", ",", "overwrite", "=", "False", ",", "h5_dataset_name", ":", "str", "=", "'data'", ")", ":", "\n", "    ", "\"\"\"\n    Convert a imagenet tiny archive to an hdf5 or numpy file depending on the file extension.\n    Uncompressing the contents of the archive into a temporary directory in the same folder,\n    loading the images, then converting.\n    \"\"\"", "\n", "_", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "new_save_file", ")", "\n", "assert", "ext", "in", "{", "'.npz'", ",", "'.h5'", "}", ",", "f'unsupported save extension: {repr(ext)}, must be one of: {[\".npz\", \".h5\"]}'", "\n", "# extract zipfile into temp dir", "\n", "with", "TemporaryDirectory", "(", "prefix", "=", "'unzip_imagenet_tiny_'", ",", "dir", "=", "os", ".", "path", ".", "dirname", "(", "orig_zipped_file", ")", ")", "as", "temp_dir", ":", "\n", "        ", "log", ".", "info", "(", "f\"Extracting into temporary directory: {temp_dir}\"", ")", "\n", "shutil", ".", "unpack_archive", "(", "filename", "=", "orig_zipped_file", ",", "extract_dir", "=", "temp_dir", ")", "\n", "images", "=", "load_imagenet_tiny_data", "(", "raw_data_dir", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'tiny-imagenet-200'", ")", ")", "\n", "# save the data", "\n", "", "with", "AtomicSaveFile", "(", "new_save_file", ",", "overwrite", "=", "overwrite", ")", "as", "temp_file", ":", "\n", "# check the mode", "\n", "        ", "with", "H5Builder", "(", "temp_file", ",", "'atomic_w'", ")", "as", "builder", ":", "\n", "            ", "builder", ".", "add_dataset_from_array", "(", "\n", "name", "=", "h5_dataset_name", ",", "\n", "array", "=", "images", ",", "\n", "chunk_shape", "=", "'batch'", ",", "\n", "compression_lvl", "=", "4", ",", "\n", "attrs", "=", "None", ",", "\n", "show_progress", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.DataFileSprites._prepare": [[109, 112], ["_groundtruth__sprites.fetch_sprite_components", "_groundtruth__sprites.save_sprite_components"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.fetch_sprite_components", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.save_sprite_components"], ["def", "_prepare", "(", "self", ",", "out_dir", ":", "str", ",", "out_file", ":", "str", ")", "->", "NoReturn", ":", "\n", "        ", "sheets", ",", "names", "=", "fetch_sprite_components", "(", ")", "\n", "save_sprite_components", "(", "out_file", ",", "sheets", "=", "sheets", ",", "names", "=", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesAllData.__init__": [[146, 152], ["disent.dataset.data.DiskGroundTruthData.__init__", "numpy.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ",", "transform", "=", "transform", ")", "\n", "# load the data", "\n", "dat", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_data_dir", ",", "self", ".", "datafile", ".", "out_name", ")", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "_names", "=", "dat", "[", "'names'", "]", "\n", "self", ".", "_sheets", "=", "dat", "[", "'sheets'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesAllData.sample_random_frames": [[153, 155], ["_groundtruth__sprites.SpritesAllData.get_frames", "_groundtruth__sprites.SpritesAllData.sample_indices"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.get_frames", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_indices"], ["", "def", "sample_random_frames", "(", "self", ",", "alpha", ":", "bool", "=", "True", ",", "combined", ":", "bool", "=", "False", ")", "->", "List", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "return", "self", ".", "get_frames", "(", "idx", "=", "self", ".", "sample_indices", "(", ")", ",", "alpha", "=", "alpha", ",", "combined", "=", "combined", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesAllData.get_frames": [[156, 171], ["_groundtruth__sprites.SpritesAllData.idx_to_pos", "frames.append", "zip", "_groundtruth__sprites.SpritesAllData.combine_frames"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.combine_frames"], ["", "def", "get_frames", "(", "self", ",", "idx", ":", "Optional", "[", "int", "]", ",", "alpha", ":", "bool", "=", "True", ",", "combined", ":", "bool", "=", "False", ")", "->", "List", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "*", "sheet_idxs", ",", "act", ",", "rot", ",", "frame", "=", "self", ".", "idx_to_pos", "(", "idx", ")", "\n", "# extract the individual sheets", "\n", "sheets", "=", "(", "sheets", "[", "i", "]", "for", "i", ",", "sheets", "in", "zip", "(", "sheet_idxs", ",", "self", ".", "_sheets", ")", ")", "\n", "# extract the individual tiles", "\n", "y", ",", "x", "=", "act", "*", "4", "+", "rot", ",", "frame", "\n", "# return individual frames", "\n", "frames", "=", "[", "sheet", "[", "y", "*", "64", ":", "(", "y", "+", "1", ")", "*", "64", ",", "x", "*", "64", ":", "(", "x", "+", "1", ")", "*", "64", ",", ":", "]", "for", "sheet", "in", "sheets", "]", "\n", "# return the combined frame", "\n", "if", "combined", ":", "\n", "            ", "frames", ".", "append", "(", "self", ".", "combine_frames", "(", "frames", ",", "alpha", "=", "True", ")", ")", "\n", "# return the final result", "\n", "", "if", "not", "alpha", ":", "\n", "            ", "return", "[", "frame", "[", ":", ",", ":", ",", ":", "3", "]", "for", "frame", "in", "frames", "]", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesAllData.combine_frames": [[172, 185], ["numpy.zeros"], "methods", ["None"], ["", "def", "combine_frames", "(", "self", ",", "frames_rgba", ",", "alpha", ":", "bool", "=", "True", ")", ":", "\n", "# combine the frames in order", "\n", "        ", "img", "=", "np", ".", "zeros", "(", "(", "64", ",", "64", ",", "4", ")", "if", "alpha", "else", "(", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "i", "in", "[", "5", ",", "4", ",", "0", ",", "1", ",", "3", ",", "2", "]", ":", "# body, shoes, bottomwear, topwear, eyes, hair", "\n", "            ", "mask", "=", "frames_rgba", "[", "i", "]", "[", ":", ",", ":", ",", "3", "]", ">", "128", "\n", "img", "[", ":", ",", ":", ",", "0", "]", "[", "mask", "]", "=", "frames_rgba", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "[", "mask", "]", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "[", "mask", "]", "=", "frames_rgba", "[", "i", "]", "[", ":", ",", ":", ",", "1", "]", "[", "mask", "]", "\n", "img", "[", ":", ",", ":", ",", "2", "]", "[", "mask", "]", "=", "frames_rgba", "[", "i", "]", "[", ":", ",", ":", ",", "2", "]", "[", "mask", "]", "\n", "# union for the mask", "\n", "if", "alpha", ":", "\n", "                ", "img", "[", ":", ",", ":", ",", "3", "]", "[", "mask", "]", "=", "255", "\n", "# return the result", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesAllData._get_observation": [[186, 190], ["_groundtruth__sprites.SpritesAllData.get_frames", "_groundtruth__sprites.SpritesAllData.combine_frames"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.get_frames", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.combine_frames"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "frames", "=", "self", ".", "get_frames", "(", "idx", ",", "alpha", "=", "True", ",", "combined", "=", "False", ")", "\n", "img", "=", "self", ".", "combine_frames", "(", "frames", ",", "alpha", "=", "False", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.__init__": [[203, 206], ["disent.dataset.data.GroundTruthData.__init__", "_groundtruth__sprites.SpritesAllData"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "transform", "=", "transform", ")", "\n", "self", ".", "_sprites", "=", "SpritesAllData", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ",", "transform", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData._offset_idx": [[207, 216], ["_groundtruth__sprites.SpritesPartialData.idx_to_pos", "_groundtruth__sprites.SpritesPartialData._sprites.pos_to_idx"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx"], ["", "def", "_offset_idx", "(", "self", ",", "idx", ":", "int", ")", "->", "int", ":", "\n", "        ", "pos", "=", "self", ".", "idx_to_pos", "(", "idx", ")", "\n", "# convert to orig state space", "\n", "if", "pos", "[", "0", "]", ">=", "5", ":", "pos", "[", "0", "]", "+=", "1", "# no missing pants", "\n", "if", "pos", "[", "1", "]", ">=", "5", ":", "pos", "[", "1", "]", "+=", "1", "# no missing shirt", "\n", "if", "pos", "[", "7", "]", ">=", "0", ":", "pos", "[", "7", "]", "+=", "1", "# no backwards facing man", "\n", "idx", "=", "self", ".", "_sprites", ".", "pos_to_idx", "(", "pos", ")", "\n", "# index in orig state space", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.sample_random_frames": [[217, 219], ["_groundtruth__sprites.SpritesPartialData._sprites.sample_random_frames"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.sample_random_frames"], ["", "def", "sample_random_frames", "(", "self", ",", "alpha", ":", "bool", "=", "True", ",", "combined", ":", "bool", "=", "False", ")", "->", "List", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "return", "self", ".", "_sprites", ".", "sample_random_frames", "(", "alpha", "=", "alpha", ",", "combined", "=", "combined", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.get_frames": [[220, 222], ["_groundtruth__sprites.SpritesPartialData._sprites.get_frames", "_groundtruth__sprites.SpritesPartialData._offset_idx"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.get_frames", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesData._offset_idx"], ["", "def", "get_frames", "(", "self", ",", "idx", ":", "int", ",", "alpha", ":", "bool", "=", "True", ",", "combined", ":", "bool", "=", "False", ")", "->", "List", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "return", "self", ".", "_sprites", ".", "get_frames", "(", "idx", "=", "self", ".", "_offset_idx", "(", "idx", ")", ",", "alpha", "=", "alpha", ",", "combined", "=", "combined", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.combine_frames": [[223, 225], ["_groundtruth__sprites.SpritesPartialData._sprites.combine_frames"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData.combine_frames"], ["", "def", "combine_frames", "(", "self", ",", "frames_rgba", ",", "alpha", ":", "bool", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "_sprites", ".", "combine_frames", "(", "frames_rgba", "=", "frames_rgba", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesPartialData._get_observation": [[226, 228], ["_groundtruth__sprites.SpritesPartialData._sprites._get_observation", "_groundtruth__sprites.SpritesPartialData._offset_idx"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectShadedData._get_observation", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesData._offset_idx"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_sprites", ".", "_get_observation", "(", "self", ".", "_offset_idx", "(", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.SpritesData._offset_idx": [[238, 245], ["_groundtruth__sprites.SpritesData.idx_to_pos", "_groundtruth__sprites.SpritesData._sprites.pos_to_idx"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx"], ["def", "_offset_idx", "(", "self", ",", "idx", ":", "int", ")", "->", "int", ":", "\n", "        ", "pos", "=", "self", ".", "idx_to_pos", "(", "idx", ")", "\n", "# convert to orig state space", "\n", "if", "pos", "[", "7", "]", ">=", "0", ":", "pos", "[", "7", "]", "+=", "1", "# no backwards facing man", "\n", "idx", "=", "self", ".", "_sprites", ".", "pos_to_idx", "(", "pos", ")", "\n", "# index in orig state space", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.fetch_sprite_components": [[53, 82], ["tempfile.TemporaryDirectory", "log.info", "git.Repo.clone_from", "git.Repo.clone_from.git.checkout", "numpy.array", "numpy.array", "log.error", "exit", "sorted", "numpy.array", "component_sheets.append", "log.debug", "os.listdir", "os.path.join", "numpy.array", "np.array.append", "os.path.join", "PIL.Image.open().convert", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["def", "fetch_sprite_components", "(", ")", "->", "Tuple", "[", "np", ".", "array", ",", "np", ".", "array", "]", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "git", "\n", "", "except", "ImportError", ":", "\n", "        ", "log", ".", "error", "(", "'GitPython not found! Please install it: `pip install GitPython`'", ")", "\n", "exit", "(", "1", ")", "\n", "# store files in a temporary directory", "\n", "", "with", "TemporaryDirectory", "(", "suffix", "=", "'sprites'", ")", "as", "temp_dir", ":", "\n", "# clone the files into the temp dir", "\n", "        ", "log", ".", "info", "(", "f'Generating sprites data, temporarily cloning: {SPRITES_REPO} to {temp_dir}`'", ")", "\n", "repo", "=", "git", ".", "Repo", ".", "clone_from", "(", "SPRITES_REPO", ",", "temp_dir", ",", "no_checkout", "=", "True", ")", "\n", "repo", ".", "git", ".", "checkout", "(", "SPRITES_REPO_COMMIT_SHA", ")", "\n", "# get all the components!", "\n", "component_sheets", ":", "List", "[", "np", ".", "ndarray", "]", "=", "[", "]", "\n", "component_names", "=", "[", "'bottomwear'", ",", "'topwear'", ",", "'hair'", ",", "'eyes'", ",", "'shoes'", ",", "'body'", "]", "\n", "for", "sprites_folder", "in", "component_names", ":", "\n", "# append all sprite sheets for the current component", "\n", "            ", "sheets", "=", "[", "]", "\n", "for", "sheet_name", "in", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "sprites_folder", ")", ")", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "sprites_folder", ",", "sheet_name", ")", "\n", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGBA'", ")", ")", "# imageio sometimes doesnt load these all in the same way, we explicitly set the format as RGBA!", "\n", "sheets", ".", "append", "(", "img", ")", "\n", "# append all the sheets", "\n", "", "sheets", "=", "np", ".", "array", "(", "sheets", ")", "\n", "component_sheets", ".", "append", "(", "sheets", ")", "\n", "# print information", "\n", "log", ".", "debug", "(", "f'{sprites_folder} {sheets.shape} {sheets.dtype}'", ")", "\n", "# done!", "\n", "", "", "return", "np", ".", "array", "(", "component_sheets", ",", "dtype", "=", "object", ")", ",", "np", ".", "array", "(", "component_names", ",", "dtype", "=", "object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.save_sprite_components": [[84, 91], ["os.path.abspath", "log.debug", "os.makedirs", "numpy.savez_compressed", "os.path.dirname"], "function", ["None"], ["", "def", "save_sprite_components", "(", "out_file", ":", "str", ",", "sheets", ",", "names", ")", "->", "NoReturn", ":", "\n", "# get the path and make the parant dirs", "\n", "    ", "out_file", "=", "os", ".", "path", ".", "abspath", "(", "out_file", ")", "\n", "log", ".", "debug", "(", "f'saving: {out_file}'", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "# save the data", "\n", "np", ".", "savez_compressed", "(", "out_file", ",", "sheets", "=", "sheets", ",", "names", "=", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__sprites.load_sprite_components": [[93, 96], ["numpy.load"], "function", ["None"], ["", "def", "load_sprite_components", "(", "in_file", ":", "str", ")", "->", "Tuple", "[", "Tuple", "[", "np", ".", "ndarray", ",", "...", "]", ",", "Tuple", "[", "str", ",", "...", "]", "]", ":", "\n", "    ", "dat", "=", "np", ".", "load", "(", "in_file", ",", "allow_pickle", "=", "True", ")", "\n", "return", "dat", "[", "'sheets'", "]", ",", "dat", "[", "'names'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xcolumns.XColumnsData.factor_names": [[49, 52], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "factor_names", "(", "self", ")", "->", "Tuple", "[", "str", ",", "...", "]", ":", "\n", "        ", "return", "(", "'x_R'", ",", "'x_G'", ",", "'x_B'", ")", "[", ":", "self", ".", "_num_squares", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xcolumns.XColumnsData.factor_sizes": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_sizes", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "(", "self", ".", "_placements", ",", ")", "*", "self", ".", "_num_squares", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xcolumns.XColumnsData._get_observation": [[57, 70], ["_groundtruth__xcolumns.XColumnsData.idx_to_pos", "numpy.zeros", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "# get factors", "\n", "        ", "factors", "=", "self", ".", "idx_to_pos", "(", "idx", ")", "\n", "offset", ",", "space", ",", "size", "=", "self", ".", "_offset", ",", "self", ".", "_spacing", ",", "self", ".", "_square_size", "\n", "# GENERATE", "\n", "obs", "=", "np", ".", "zeros", "(", "self", ".", "img_shape", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "for", "i", ",", "fx", "in", "enumerate", "(", "factors", ")", ":", "\n", "            ", "x", "=", "offset", "+", "space", "*", "fx", "\n", "if", "self", ".", "_rgb", ":", "\n", "                ", "obs", "[", ":", ",", "x", ":", "x", "+", "size", ",", "i", "]", "=", "self", ".", "_fill_value", "\n", "", "else", ":", "\n", "                ", "obs", "[", ":", ",", "x", ":", "x", "+", "size", ",", ":", "]", "=", "self", ".", "_fill_value", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._episodes.BaseEpisodesData.__init__": [[41, 50], ["_episodes.BaseEpisodesData._load_episode_observations", "numpy.array", "numpy.sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._episodes.BaseEpisodesData._load_episode_observations", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["    ", "def", "__init__", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "_transform", "=", "transform", "\n", "# load episodes", "\n", "self", ".", "_episodes", "=", "self", ".", "_load_episode_observations", "(", ")", "\n", "assert", "len", "(", "self", ".", "_episodes", ")", ">", "0", ",", "'There must be at least one episode!'", "\n", "# total length", "\n", "self", ".", "_lengths", "=", "np", ".", "array", "(", "[", "len", "(", "episode", ")", "for", "episode", "in", "self", ".", "_episodes", "]", ")", "\n", "self", ".", "_length", "=", "np", ".", "sum", "(", "self", ".", "_lengths", ")", "\n", "self", ".", "_weights", "=", "self", ".", "_lengths", "/", "self", ".", "_length", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._episodes.BaseEpisodesData.__len__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_length", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._episodes.BaseEpisodesData.__getitem__": [[54, 62], ["_episodes.BaseEpisodesData.get_episode_and_idx", "_episodes.BaseEpisodesData._transform"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._episodes.BaseEpisodesData.get_episode_and_idx"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# this can be slow!", "\n", "# linear search is conducted!", "\n", "        ", "episode", ",", "idx", ",", "_", "=", "self", ".", "get_episode_and_idx", "(", "idx", ")", "\n", "obs", "=", "episode", "[", "idx", "]", "\n", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "            ", "obs", "=", "self", ".", "_transform", "(", "obs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._episodes.BaseEpisodesData.get_episode_and_idx": [[63, 78], ["len"], "methods", ["None"], ["", "def", "get_episode_and_idx", "(", "self", ",", "idx", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "int", ",", "int", "]", ":", "\n", "        ", "assert", "idx", ">=", "0", ",", "'Negative indices are not supported.'", "\n", "# linear search for episode & shift idx accordingly", "\n", "# TODO: This could be better...", "\n", "# TODO: add caching?", "\n", "episode", ",", "offset", "=", "None", ",", "0", "\n", "for", "episode", "in", "self", ".", "_episodes", ":", "\n", "            ", "length", "=", "len", "(", "episode", ")", "\n", "if", "idx", "<", "length", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "offset", "+=", "length", "\n", "idx", "-=", "length", "\n", "# return found", "\n", "", "", "return", "episode", ",", "idx", ",", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._episodes.BaseEpisodesData._load_episode_observations": [[79, 81], ["None"], "methods", ["None"], ["", "def", "_load_episode_observations", "(", "self", ")", "->", "List", "[", "np", ".", "ndarray", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d.DataFileMpi3dResaved.__init__": [[66, 82], ["disent.dataset.util.datafile.DataFileHashed.__init__", "disent.util.inout.paths.modify_ext"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.modify_ext"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "mpi3d_datafile", ":", "DataFileHashedDl", ",", "\n", "# # - convert file name", "\n", "out_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "out_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "# # - hash settings", "\n", "hash_type", ":", "str", "=", "'md5'", ",", "\n", "hash_mode", ":", "str", "=", "'fast'", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_mpi3d_datafile", "=", "mpi3d_datafile", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "file_name", "=", "modify_ext", "(", "self", ".", "_mpi3d_datafile", ".", "out_name", ",", "'h5'", ")", "if", "(", "out_name", "is", "None", ")", "else", "out_name", ",", "\n", "file_hash", "=", "out_hash", ",", "\n", "hash_type", "=", "hash_type", ",", "\n", "hash_mode", "=", "hash_mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d.DataFileMpi3dResaved._prepare": [[84, 89], ["log.debug", "_groundtruth__mpi3d.DataFileMpi3dResaved._mpi3d_datafile.prepare", "log.debug", "_groundtruth__mpi3d.resave_mpi3d_array"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.prepare", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d.resave_mpi3d_array"], ["", "def", "_prepare", "(", "self", ",", "out_dir", ":", "str", ",", "out_file", ":", "str", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'Preparing Orig Mpi3d Data:'", ")", "\n", "mpi3d_path", "=", "self", ".", "_mpi3d_datafile", ".", "prepare", "(", "out_dir", ")", "\n", "log", ".", "debug", "(", "'Generating hdf5 Mpi3d Data:'", ")", "\n", "resave_mpi3d_array", "(", "in_npz_path", "=", "mpi3d_path", ",", "out_h5_path", "=", "out_file", ",", "overwrite", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d._Mpi3dMixin.datafile": [[107, 111], ["repr", "set", "_groundtruth__mpi3d._Mpi3dMixin.MPI3D_DATAFILES.keys"], "methods", ["None"], ["@", "property", "\n", "def", "datafile", "(", "self", ")", "->", "DataFile", ":", "\n", "        ", "assert", "self", ".", "subset", "in", "self", ".", "MPI3D_DATAFILES", ",", "f'Invalid MPI3D subset: {repr(self.subset)} must be one of: {set(self.MPI3D_DATAFILES.keys())}'", "\n", "return", "self", ".", "MPI3D_DATAFILES", "[", "self", ".", "subset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d._Mpi3dMixin.MPI3D_DATAFILES": [[115, 118], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "MPI3D_DATAFILES", "(", "self", ")", "->", "Dict", "[", "str", ",", "DataFile", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d._Mpi3dMixin.subset": [[119, 122], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "subset", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_subset", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d.Mpi3dNumpyData.__init__": [[142, 146], ["log.warning", "disent.dataset.data._groundtruth.NumpyFileGroundTruthData.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "subset", ":", "str", "=", "'realistic'", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "_subset", "=", "subset", "\n", "log", ".", "warning", "(", "'[WARNING]: mpi3d files are extremely large (over 11GB), you are trying to load these into memory.'", ")", "\n", "super", "(", ")", ".", "__init__", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ",", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d.Mpi3dHdf5Data.__init__": [[162, 167], ["disent.dataset.data.Hdf5GroundTruthData.__init__", "log.warning"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "subset", ":", "str", "=", "'realistic'", ",", "in_memory", ":", "bool", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "_subset", "=", "subset", "\n", "if", "in_memory", ":", "\n", "            ", "log", ".", "warning", "(", "'[WARNING]: mpi3d files are extremely large (over 11GB), you are trying to load these into memory.'", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ",", "in_memory", "=", "in_memory", ",", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d.Mpi3dData.__init__": [[177, 184], ["disent.dataset.data.DiskGroundTruthData.__init__", "_groundtruth__mpi3d.Mpi3dNumpyData", "_groundtruth__mpi3d.Mpi3dHdf5Data"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "subset", ":", "str", "=", "'realistic'", ",", "in_memory", ":", "bool", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "if", "in_memory", ":", "\n", "            ", "self", ".", "_wrapped_mpi3d", "=", "Mpi3dNumpyData", "(", "data_root", "=", "data_root", ",", "prepare", "=", "False", ",", "subset", "=", "subset", ",", "transform", "=", "None", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_wrapped_mpi3d", "=", "Mpi3dHdf5Data", "(", "data_root", "=", "data_root", ",", "prepare", "=", "False", ",", "subset", "=", "subset", ",", "transform", "=", "None", ",", "in_memory", "=", "False", ")", "\n", "# initialize", "\n", "", "super", "(", ")", ".", "__init__", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ",", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d.Mpi3dData.datafiles": [[185, 188], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "datafiles", "(", "self", ")", "->", "Sequence", "[", "DataFile", "]", ":", "\n", "        ", "return", "self", ".", "_wrapped_mpi3d", ".", "datafiles", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d.Mpi3dData._get_observation": [[189, 191], ["_groundtruth__mpi3d.Mpi3dData._wrapped_mpi3d._get_observation"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectShadedData._get_observation"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_wrapped_mpi3d", ".", "_get_observation", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__mpi3d.resave_mpi3d_array": [[50, 62], ["Timer", "Timer", "numpy.load", "H5Builder", "builder.add_dataset_from_array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.hdf5.H5Builder.add_dataset_from_array"], ["def", "resave_mpi3d_array", "(", "in_npz_path", ":", "str", ",", "out_h5_path", ":", "str", ",", "overwrite", ":", "bool", "=", "False", ")", ":", "\n", "    ", "from", "disent", ".", "util", ".", "profiling", "import", "Timer", "\n", "from", "disent", ".", "dataset", ".", "util", ".", "formats", ".", "hdf5", "import", "H5Builder", "\n", "# load the array", "\n", "with", "Timer", "(", "'loading images into memory'", ")", ":", "\n", "        ", "imgs", "=", "np", ".", "load", "(", "in_npz_path", ")", "[", "'images'", "]", "\n", "assert", "imgs", ".", "dtype", "==", "'uint8'", "\n", "assert", "imgs", ".", "shape", "==", "(", "1036800", ",", "64", ",", "64", ",", "3", ")", "\n", "# resave the array as hdf5", "\n", "", "with", "Timer", "(", "'resaving images'", ")", ":", "\n", "        ", "with", "H5Builder", "(", "out_h5_path", ",", "mode", "=", "'atomic_w'", "if", "overwrite", "else", "'atomic_x'", ")", "as", "builder", ":", "\n", "            ", "builder", ".", "add_dataset_from_array", "(", "name", "=", "'images'", ",", "array", "=", "imgs", ",", "show_progress", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSquaresMinimalData.factor_names": [[71, 74], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "factor_names", "(", "self", ")", "->", "Tuple", "[", "str", ",", "...", "]", ":", "\n", "        ", "return", "'x_R'", ",", "'y_R'", ",", "'x_G'", ",", "'y_G'", ",", "'x_B'", ",", "'y_B'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSquaresMinimalData.factor_sizes": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_sizes", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "# R, G, B squares", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSquaresMinimalData.img_shape": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_shape", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "64", ",", "64", ",", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSquaresMinimalData._get_observation": [[83, 92], ["numpy.reshape", "numpy.zeros", "enumerate", "numpy.unravel_index"], "methods", ["None"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "# get factors", "\n", "        ", "factors", "=", "np", ".", "reshape", "(", "np", ".", "unravel_index", "(", "idx", ",", "self", ".", "factor_sizes", ")", ",", "(", "-", "1", ",", "2", ")", ")", "\n", "# GENERATE", "\n", "obs", "=", "np", ".", "zeros", "(", "self", ".", "img_shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", ",", "(", "fx", ",", "fy", ")", "in", "enumerate", "(", "factors", ")", ":", "\n", "            ", "x", ",", "y", "=", "8", "*", "fx", ",", "8", "*", "fy", "\n", "obs", "[", "y", ":", "y", "+", "8", ",", "x", ":", "x", "+", "8", ",", "i", "]", "=", "255", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSquaresData.factor_names": [[121, 124], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "factor_names", "(", "self", ")", "->", "Tuple", "[", "str", ",", "...", "]", ":", "\n", "        ", "return", "(", "'x_R'", ",", "'y_R'", ",", "'x_G'", ",", "'y_G'", ",", "'x_B'", ",", "'y_B'", ")", "[", ":", "self", ".", "_num_squares", "*", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSquaresData.factor_sizes": [[125, 128], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "factor_sizes", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "(", "self", ".", "_placements", ",", "self", ".", "_placements", ")", "*", "self", ".", "_num_squares", "# R, G, B squares", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSquaresData.img_shape": [[129, 132], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_shape", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "_width", ",", "self", ".", "_width", ",", "(", "3", "if", "self", ".", "_rgb", "else", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSquaresData.__init__": [[133, 199], ["numpy.dtype", "disent.dataset.data._groundtruth.GroundTruthData.__init__", "log.warning", "isinstance", "isinstance", "min", "isinstance", "TypeError", "log.warning"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "square_size", ":", "int", "=", "8", ",", "\n", "image_size", ":", "int", "=", "64", ",", "\n", "grid_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "grid_spacing", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "num_squares", ":", "int", "=", "3", ",", "\n", "rgb", ":", "bool", "=", "True", ",", "\n", "fill_value", ":", "Optional", "[", "Union", "[", "float", ",", "int", "]", "]", "=", "None", ",", "\n", "dtype", ":", "Union", "[", "np", ".", "dtype", ",", "str", "]", "=", "np", ".", "uint8", ",", "\n", "no_warnings", ":", "bool", "=", "False", ",", "\n", "transform", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param square_size: the size of the individual squares in pixels\n        :param image_size: the image size in pixels\n        :param grid_spacing: the step size between square positions on the grid. By\n               default this is set to square_size which results in non-overlapping\n               data if `grid_spacing >= square_size` Reducing this value such that\n               `grid_spacing < square_size` results in overlapping data.\n        :param num_squares: The number of squares drawn. `1 <= num_squares <= 3`\n        :param rgb: Image has 3 channels if True, otherwise it is greyscale with 1 channel.\n        :param no_warnings: If warnings should be disabled if overlapping.\n        :param fill_value: The foreground value to use for filling squares, the default background value is 0.\n        :param grid_size: The number of grid positions available for the square to be placed in. The square is centered if this is less than\n        :param dtype: \n        \"\"\"", "\n", "if", "grid_spacing", "is", "None", ":", "\n", "            ", "grid_spacing", "=", "square_size", "\n", "", "if", "(", "grid_spacing", "<", "square_size", ")", "and", "not", "no_warnings", ":", "\n", "            ", "log", ".", "warning", "(", "f'overlap between squares for reconstruction loss, {grid_spacing} < {square_size}'", ")", "\n", "# color", "\n", "", "self", ".", "_rgb", "=", "rgb", "\n", "self", ".", "_dtype", "=", "np", ".", "dtype", "(", "dtype", ")", "\n", "# check fill values", "\n", "if", "self", ".", "_dtype", ".", "kind", "==", "'u'", ":", "\n", "            ", "self", ".", "_fill_value", "=", "255", "if", "(", "fill_value", "is", "None", ")", "else", "fill_value", "\n", "assert", "isinstance", "(", "self", ".", "_fill_value", ",", "int", ")", "\n", "assert", "0", "<", "self", ".", "_fill_value", "<=", "255", ",", "f'0 < {self._fill_value} <= 255'", "\n", "", "elif", "self", ".", "_dtype", ".", "kind", "==", "'f'", ":", "\n", "            ", "self", ".", "_fill_value", "=", "1.0", "if", "(", "fill_value", "is", "None", ")", "else", "fill_value", "\n", "assert", "isinstance", "(", "self", ".", "_fill_value", ",", "(", "int", ",", "float", ")", ")", "\n", "assert", "0.0", "<", "self", ".", "_fill_value", "<=", "1.0", ",", "f'0.0 < {self._fill_value} <= 1.0'", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "f'invalid dtype: {self._dtype}, must be float or unsigned integer'", ")", "\n", "# image sizes", "\n", "", "self", ".", "_width", "=", "image_size", "\n", "# number of squares", "\n", "self", ".", "_num_squares", "=", "num_squares", "\n", "assert", "1", "<=", "num_squares", "<=", "3", ",", "'Only 1, 2 or 3 squares are supported!'", "\n", "# square scales", "\n", "self", ".", "_square_size", "=", "square_size", "\n", "# x, y", "\n", "self", ".", "_spacing", "=", "grid_spacing", "\n", "self", ".", "_placements", "=", "(", "self", ".", "_width", "-", "self", ".", "_square_size", ")", "//", "grid_spacing", "+", "1", "\n", "# maximum placements", "\n", "if", "grid_size", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "grid_size", ",", "int", ")", "\n", "assert", "grid_size", ">", "0", "\n", "if", "(", "grid_size", ">", "self", ".", "_placements", ")", "and", "not", "no_warnings", ":", "\n", "                ", "log", ".", "warning", "(", "f'number of possible placements: {self._placements} is less than the given grid size: {grid_size}, reduced grid size from: {grid_size} -> {self._placements}'", ")", "\n", "", "self", ".", "_placements", "=", "min", "(", "self", ".", "_placements", ",", "grid_size", ")", "\n", "# center elements", "\n", "", "self", ".", "_offset", "=", "(", "self", ".", "_width", "-", "(", "self", ".", "_square_size", "+", "(", "self", ".", "_placements", "-", "1", ")", "*", "self", ".", "_spacing", ")", ")", "//", "2", "\n", "# initialise parents -- they depend on self.factors", "\n", "super", "(", ")", ".", "__init__", "(", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSquaresData._get_observation": [[200, 213], ["_groundtruth__xysquares.XYSquaresData.idx_to_pos", "numpy.zeros", "enumerate", "disent.util.iters.iter_chunks"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos", "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.iter_chunks"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "# get factors", "\n", "        ", "factors", "=", "self", ".", "idx_to_pos", "(", "idx", ")", "\n", "offset", ",", "space", ",", "size", "=", "self", ".", "_offset", ",", "self", ".", "_spacing", ",", "self", ".", "_square_size", "\n", "# GENERATE", "\n", "obs", "=", "np", ".", "zeros", "(", "self", ".", "img_shape", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "for", "i", ",", "(", "fx", ",", "fy", ")", "in", "enumerate", "(", "iter_chunks", "(", "factors", ",", "2", ")", ")", ":", "\n", "            ", "x", ",", "y", "=", "offset", "+", "space", "*", "fx", ",", "offset", "+", "space", "*", "fy", "\n", "if", "self", ".", "_rgb", ":", "\n", "                ", "obs", "[", "y", ":", "y", "+", "size", ",", "x", ":", "x", "+", "size", ",", "i", "]", "=", "self", ".", "_fill_value", "\n", "", "else", ":", "\n", "                ", "obs", "[", "y", ":", "y", "+", "size", ",", "x", ":", "x", "+", "size", ",", ":", "]", "=", "self", ".", "_fill_value", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSingleSquareData.factor_sizes": [[234, 237], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "factor_sizes", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "(", "self", ".", "_placements", ",", "self", ".", "_placements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSingleSquareData.img_shape": [[238, 241], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_shape", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "_width", ",", "self", ".", "_width", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSingleSquareData.__init__": [[242, 269], ["disent.dataset.data._groundtruth.GroundTruthData.__init__", "log.warning", "min", "log.warning"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "square_size", ":", "int", "=", "8", ",", "# square width and height", "\n", "image_size", ":", "int", "=", "64", ",", "# image width and height", "\n", "grid_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "# limit the number of square placements along an axis, automatically set as the maximum valid", "\n", "grid_spacing", ":", "Optional", "[", "int", "]", "=", "None", ",", "# how far apart the square is spaced, buy default this is the square size, meaning no overlap!", "\n", "no_warnings", ":", "bool", "=", "False", ",", "\n", "transform", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "grid_spacing", "is", "None", ":", "\n", "            ", "grid_spacing", "=", "square_size", "\n", "", "if", "(", "grid_spacing", "<", "square_size", ")", "and", "not", "no_warnings", ":", "\n", "            ", "log", ".", "warning", "(", "f'overlap between squares for reconstruction loss, {grid_spacing} < {square_size}'", ")", "\n", "# vars", "\n", "", "self", ".", "_width", "=", "image_size", "# image width and height", "\n", "self", ".", "_square_size", "=", "square_size", "# square width and height", "\n", "self", ".", "_spacing", "=", "grid_spacing", "# spacing between square positions", "\n", "self", ".", "_placements", "=", "(", "self", ".", "_width", "-", "self", ".", "_square_size", ")", "//", "grid_spacing", "+", "1", "# number of positions the square can be in along an axis", "\n", "# maximum placements", "\n", "if", "grid_size", "is", "not", "None", ":", "\n", "            ", "if", "(", "grid_size", ">", "self", ".", "_placements", ")", ":", "\n", "                ", "log", ".", "warning", "(", "f'number of possible placements: {self._placements} is less than the given grid size: {grid_size}, reduced grid size from: {grid_size} -> {self._placements}'", ")", "\n", "", "self", ".", "_placements", "=", "min", "(", "self", ".", "_placements", ",", "grid_size", ")", "\n", "# center elements", "\n", "", "self", ".", "_offset", "=", "(", "self", ".", "_width", "-", "(", "self", ".", "_square_size", "+", "(", "self", ".", "_placements", "-", "1", ")", "*", "self", ".", "_spacing", ")", ")", "//", "2", "\n", "# initialise parents -- they depend on self.factors", "\n", "super", "(", ")", ".", "__init__", "(", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xysquares.XYSingleSquareData._get_observation": [[270, 279], ["_groundtruth__xysquares.XYSingleSquareData.idx_to_pos", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "# get factors == grid position/index", "\n", "        ", "fx", ",", "fy", "=", "self", ".", "idx_to_pos", "(", "idx", ")", "\n", "offset", ",", "space", ",", "size", "=", "self", ".", "_offset", ",", "self", ".", "_spacing", ",", "self", ".", "_square_size", "\n", "# draw square onto image", "\n", "obs", "=", "np", ".", "zeros", "(", "self", ".", "img_shape", ",", "dtype", "=", "'uint8'", ")", "\n", "x", ",", "y", "=", "offset", "+", "space", "*", "fx", ",", "offset", "+", "space", "*", "fy", "\n", "obs", "[", "y", ":", "y", "+", "size", ",", "x", ":", "x", "+", "size", ",", ":", "]", "=", "255", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._random__teapots3d.DataFileTeapots3dInt32._prepare": [[80, 84], ["os.path.exists", "FileNotFoundError", "repr", "repr", "repr"], "methods", ["None"], ["    ", "def", "_prepare", "(", "self", ",", "out_dir", ":", "str", ",", "out_file", ":", "str", ")", "->", "NoReturn", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_file", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\n", "f'Please download the Teapots3D dataset to: {repr(out_file)}'", "\n", "f'\\nThe original repository is: {repr(\"https://github.com/cianeastwood/qedr\")}'", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._random__teapots3d.DataFileTeapots3dUint8.__init__": [[91, 107], ["disent.dataset.util.datafile.DataFileHashed.__init__", "disent.util.inout.paths.modify_name_keep_ext"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.modify_name_keep_ext"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "teapots3d_datafile", ":", "DataFileTeapots3dInt32", ",", "\n", "# - convert file name", "\n", "out_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "out_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "# - hash settings", "\n", "hash_type", ":", "str", "=", "'md5'", ",", "\n", "hash_mode", ":", "str", "=", "'fast'", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_teapots3dfile", "=", "teapots3d_datafile", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "file_name", "=", "modify_name_keep_ext", "(", "self", ".", "_teapots3dfile", ".", "out_name", ",", "suffix", "=", "f'_uint8'", ")", "if", "(", "out_name", "is", "None", ")", "else", "out_name", ",", "\n", "file_hash", "=", "out_hash", ",", "\n", "hash_type", "=", "hash_type", ",", "\n", "hash_mode", "=", "hash_mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._random__teapots3d.DataFileTeapots3dUint8._prepare": [[109, 114], ["log.debug", "_random__teapots3d.DataFileTeapots3dUint8._teapots3dfile.prepare", "log.debug", "_random__teapots3d.resave_teapots3d_as_uint8"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.prepare", "home.repos.pwc.inspect_result.nmichlo_disent.data._random__teapots3d.resave_teapots3d_as_uint8"], ["", "def", "_prepare", "(", "self", ",", "out_dir", ":", "str", ",", "out_file", ":", "str", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'Preparing Orig Teapots3d Data:'", ")", "\n", "cars3d_path", "=", "self", ".", "_teapots3dfile", ".", "prepare", "(", "out_dir", ")", "\n", "log", ".", "debug", "(", "'Converting Teapots3d Data to Uint8:'", ")", "\n", "resave_teapots3d_as_uint8", "(", "orig_file", "=", "cars3d_path", ",", "new_file", "=", "out_file", ",", "overwrite", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._random__teapots3d.resave_teapots3d_as_uint8": [[47, 69], ["log.debug", "log.debug", "log.debug", "log.debug", "log.debug", "imgs.astype.astype", "log.debug", "log.debug", "save_dataset_array", "log.debug", "numpy.load", "imgs.astype.max", "imgs.astype.min"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.npz.save_dataset_array"], ["def", "resave_teapots3d_as_uint8", "(", "orig_file", ":", "str", ",", "new_file", ":", "str", ",", "overwrite", ":", "bool", "=", "False", ")", ":", "\n", "# load data into memory ~10GB", "\n", "# -- by default this array is stored as uint32, instead of uint8", "\n", "    ", "log", ".", "debug", "(", "'loading teapots data into memory, this may take a while...'", ")", "\n", "imgs", "=", "np", ".", "load", "(", "orig_file", ")", "[", "'images'", "]", "\n", "log", ".", "debug", "(", "'loaded teapots data into memory!'", ")", "\n", "# checks", "\n", "log", ".", "debug", "(", "'checking teapots data...'", ")", "\n", "assert", "imgs", ".", "dtype", "==", "'int32'", "\n", "assert", "imgs", ".", "shape", "==", "(", "200_000", ",", "64", ",", "64", ",", "3", ")", "\n", "assert", "imgs", ".", "max", "(", ")", "==", "255", "\n", "assert", "imgs", ".", "min", "(", ")", "==", "0", "\n", "log", ".", "debug", "(", "'checked teapots data!'", ")", "\n", "# convert the values", "\n", "log", ".", "debug", "(", "'converting teapots data to uint8...'", ")", "\n", "imgs", "=", "imgs", ".", "astype", "(", "'uint8'", ")", "\n", "log", ".", "debug", "(", "'converted teapots data!'", ")", "\n", "# save the array", "\n", "from", "disent", ".", "dataset", ".", "util", ".", "formats", ".", "npz", "import", "save_dataset_array", "\n", "log", ".", "debug", "(", "'saving convert teapots data...'", ")", "\n", "save_dataset_array", "(", "imgs", ",", "new_file", ",", "overwrite", "=", "overwrite", ",", "save_key", "=", "'images'", ")", "\n", "log", ".", "debug", "(", "'saved convert teapots data!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectData.factor_sizes": [[103, 106], ["len", "len"], "methods", ["None"], ["@", "property", "\n", "def", "factor_sizes", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "_placements", ",", "self", ".", "_placements", ",", "len", "(", "self", ".", "_square_scales", ")", ",", "len", "(", "self", ".", "_colors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectData.img_shape": [[107, 110], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_shape", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "_width", ",", "self", ".", "_width", ",", "(", "3", "if", "self", ".", "_rgb", "else", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectData.__init__": [[111, 143], ["numpy.arange", "disent.dataset.data._groundtruth.GroundTruthData.__init__", "len", "KeyError", "str.split", "repr", "repr", "repr", "sorted", "color_palettes.keys"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "grid_size", ":", "int", "=", "64", ",", "\n", "grid_spacing", ":", "int", "=", "2", ",", "\n", "min_square_size", ":", "int", "=", "7", ",", "\n", "max_square_size", ":", "int", "=", "15", ",", "\n", "square_size_spacing", ":", "int", "=", "2", ",", "\n", "rgb", ":", "bool", "=", "True", ",", "\n", "palette", ":", "str", "=", "'rainbow_4'", ",", "\n", "transform", "=", "None", ",", "\n", ")", ":", "\n", "# generation", "\n", "        ", "self", ".", "_rgb", "=", "rgb", "\n", "# check the pallete name", "\n", "assert", "len", "(", "str", ".", "split", "(", "palette", ",", "'_'", ")", ")", "==", "2", ",", "f'palette name must follow format: `<palette-name>_<brightness-levels>`, got: {repr(palette)}'", "\n", "# get the color palette", "\n", "color_palettes", "=", "(", "XYObjectData", ".", "COLOR_PALETTES_3", "if", "rgb", "else", "XYObjectData", ".", "COLOR_PALETTES_1", ")", "\n", "if", "palette", "not", "in", "color_palettes", ":", "\n", "            ", "raise", "KeyError", "(", "f'color palette: {repr(palette)} does not exist for rgb={repr(rgb)}, select one of: {sorted(color_palettes.keys())}'", ")", "\n", "", "self", ".", "_colors", "=", "color_palettes", "[", "palette", "]", "\n", "assert", "self", ".", "_colors", ".", "ndim", "==", "2", "\n", "assert", "self", ".", "_colors", ".", "shape", "[", "-", "1", "]", "==", "(", "3", "if", "rgb", "else", "1", ")", "\n", "# image sizes", "\n", "self", ".", "_width", "=", "grid_size", "\n", "# square scales", "\n", "assert", "min_square_size", "<=", "max_square_size", "\n", "self", ".", "_max_square_size", ",", "self", ".", "_max_square_size", "=", "min_square_size", ",", "max_square_size", "\n", "self", ".", "_square_scales", "=", "np", ".", "arange", "(", "min_square_size", ",", "max_square_size", "+", "1", ",", "square_size_spacing", ")", "\n", "# x, y", "\n", "self", ".", "_spacing", "=", "grid_spacing", "\n", "self", ".", "_placements", "=", "(", "self", ".", "_width", "-", "max_square_size", ")", "//", "grid_spacing", "+", "1", "\n", "super", "(", ")", ".", "__init__", "(", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectData._get_observation": [[144, 153], ["_groundtruth__xyobject.XYObjectData.idx_to_pos", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "s", ",", "c", "=", "self", ".", "idx_to_pos", "(", "idx", ")", "\n", "s", "=", "self", ".", "_square_scales", "[", "s", "]", "\n", "r", "=", "(", "self", ".", "_max_square_size", "-", "s", ")", "//", "2", "\n", "x", ",", "y", "=", "self", ".", "_spacing", "*", "x", "+", "r", ",", "self", ".", "_spacing", "*", "y", "+", "r", "\n", "# GENERATE", "\n", "obs", "=", "np", ".", "zeros", "(", "self", ".", "img_shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "obs", "[", "y", ":", "y", "+", "s", ",", "x", ":", "x", "+", "s", "]", "=", "self", ".", "_colors", "[", "c", "]", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectShadedData.factor_sizes": [[176, 179], ["len", "len"], "methods", ["None"], ["@", "property", "\n", "def", "factor_sizes", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "_placements", ",", "self", ".", "_placements", ",", "len", "(", "self", ".", "_square_scales", ")", ",", "self", ".", "_brightness_levels", ",", "len", "(", "self", ".", "_colors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectShadedData.img_shape": [[180, 183], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "img_shape", "(", "self", ")", "->", "Tuple", "[", "int", ",", "...", "]", ":", "\n", "        ", "return", "self", ".", "_width", ",", "self", ".", "_width", ",", "(", "3", "if", "self", ".", "_rgb", "else", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectShadedData.__init__": [[184, 220], ["palette.split", "isinstance", "_groundtruth__xyobject.XYObjectData.__init__", "len", "int", "warnings.warn", "type", "repr", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "grid_size", ":", "int", "=", "64", ",", "\n", "grid_spacing", ":", "int", "=", "2", ",", "\n", "min_square_size", ":", "int", "=", "7", ",", "\n", "max_square_size", ":", "int", "=", "15", ",", "\n", "square_size_spacing", ":", "int", "=", "2", ",", "\n", "rgb", ":", "bool", "=", "True", ",", "\n", "palette", ":", "str", "=", "'rainbow_4'", ",", "\n", "brightness_levels", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "transform", "=", "None", ",", "\n", ")", ":", "\n", "        ", "parts", "=", "palette", ".", "split", "(", "'_'", ")", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "# extract num levels from the string", "\n", "            ", "palette", ",", "b_levels", "=", "parts", "\n", "b_levels", "=", "int", "(", "b_levels", ")", "\n", "# handle conflict between brightness_levels and palette", "\n", "if", "brightness_levels", "is", "None", ":", "\n", "                ", "brightness_levels", "=", "b_levels", "\n", "", "else", ":", "\n", "                ", "warnings", ".", "warn", "(", "f'palette ends with brightness_levels integer: {repr(b_levels)} (ignoring) but actual brightness_levels parameter was already specified: {repr(brightness_levels)} (using)'", ")", "\n", "# check the brightness_levels", "\n", "", "", "assert", "isinstance", "(", "brightness_levels", ",", "int", ")", ",", "f'brightness_levels must be an integer, got: {type(brightness_levels)}'", "\n", "assert", "1", "<=", "brightness_levels", ",", "f'brightness_levels must be >= 1, got: {repr(brightness_levels)}'", "\n", "self", ".", "_brightness_levels", "=", "brightness_levels", "\n", "# initialize parent", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "grid_size", ",", "\n", "grid_spacing", "=", "grid_spacing", ",", "\n", "min_square_size", "=", "min_square_size", ",", "\n", "max_square_size", "=", "max_square_size", ",", "\n", "square_size_spacing", "=", "square_size_spacing", ",", "\n", "rgb", "=", "rgb", ",", "\n", "palette", "=", "f'{palette}_1'", ",", "\n", "transform", "=", "transform", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject.XYObjectShadedData._get_observation": [[222, 231], ["_groundtruth__xyobject.XYObjectShadedData.idx_to_pos", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.idx_to_pos"], ["", "def", "_get_observation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "x", ",", "y", ",", "s", ",", "b", ",", "c", "=", "self", ".", "idx_to_pos", "(", "idx", ")", "\n", "s", "=", "self", ".", "_square_scales", "[", "s", "]", "\n", "r", "=", "(", "self", ".", "_max_square_size", "-", "s", ")", "//", "2", "\n", "x", ",", "y", "=", "self", ".", "_spacing", "*", "x", "+", "r", ",", "self", ".", "_spacing", "*", "y", "+", "r", "\n", "# GENERATE", "\n", "obs", "=", "np", ".", "zeros", "(", "self", ".", "img_shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "obs", "[", "y", ":", "y", "+", "s", ",", "x", ":", "x", "+", "s", "]", "=", "self", ".", "_colors", "[", "c", "]", "*", "(", "b", "+", "1", ")", "//", "self", ".", "_brightness_levels", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__xyobject._shades": [[46, 50], ["numpy.array", "range", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["def", "_shades", "(", "num", ":", "int", ",", "shades", ")", ":", "\n", "    ", "all_shades", "=", "np", ".", "array", "(", "[", "shade", "*", "i", "//", "num", "for", "i", "in", "range", "(", "1", ",", "num", "+", "1", ")", "for", "shade", "in", "np", ".", "array", "(", "shades", ")", "]", ")", "\n", "assert", "all_shades", ".", "dtype", "in", "(", "'int64'", ",", "'int32'", ")", "\n", "return", "all_shades", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__cars3d.DataFileCars3d._generate": [[104, 106], ["_groundtruth__cars3d.resave_cars3d_archive"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__cars3d.resave_cars3d_archive"], ["def", "_generate", "(", "self", ",", "inp_file", ":", "str", ",", "out_file", ":", "str", ")", ":", "\n", "        ", "resave_cars3d_archive", "(", "orig_zipped_file", "=", "inp_file", ",", "new_save_file", "=", "out_file", ",", "overwrite", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__cars3d.DataFileCars3dResized.__init__": [[110, 128], ["disent.dataset.util.datafile.DataFileHashed.__init__", "disent.util.inout.paths.modify_name_keep_ext"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.modify_name_keep_ext"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "cars3d_datafile", ":", "DataFileCars3d", ",", "\n", "# - convert file name", "\n", "out_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "out_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "out_size", ":", "int", "=", "64", ",", "\n", "# - hash settings", "\n", "hash_type", ":", "str", "=", "'md5'", ",", "\n", "hash_mode", ":", "str", "=", "'fast'", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_out_size", "=", "out_size", "\n", "self", ".", "_cars3dfile", "=", "cars3d_datafile", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "file_name", "=", "modify_name_keep_ext", "(", "self", ".", "_cars3dfile", ".", "out_name", ",", "suffix", "=", "f'_x{out_size}'", ")", "if", "(", "out_name", "is", "None", ")", "else", "out_name", ",", "\n", "file_hash", "=", "out_hash", ",", "\n", "hash_type", "=", "hash_type", ",", "\n", "hash_mode", "=", "hash_mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__cars3d.DataFileCars3dResized._prepare": [[130, 135], ["log.debug", "_groundtruth__cars3d.DataFileCars3dResized._cars3dfile.prepare", "log.debug", "_groundtruth__cars3d.resave_cars3d_resized"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.prepare", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__cars3d.resave_cars3d_resized"], ["", "def", "_prepare", "(", "self", ",", "out_dir", ":", "str", ",", "out_file", ":", "str", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'Preparing Orig Cars3d Data:'", ")", "\n", "cars3d_path", "=", "self", ".", "_cars3dfile", ".", "prepare", "(", "out_dir", ")", "\n", "log", ".", "debug", "(", "'Generating Resized Cars3d Data:'", ")", "\n", "resave_cars3d_resized", "(", "orig_converted_file", "=", "cars3d_path", ",", "new_resized_file", "=", "out_file", ",", "overwrite", "=", "True", ",", "size", "=", "self", ".", "_out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__cars3d.load_cars3d_folder": [[49, 68], ["numpy.stack", "np.stack.transpose().reshape", "open", "os.path.join", "os.path.join", "np.stack.transpose", "img_names.readlines", "loadmat", "name.strip"], "function", ["None"], ["def", "load_cars3d_folder", "(", "raw_data_dir", ")", ":", "\n", "    ", "\"\"\"\n    nips2015-analogy-data.tar.gz contains:\n        1. /data/cars\n            - list.txt: [ordered list of mat files \"car_***_mesh\" without the extension]\n            - car_***_mesh.mat: [MATLAB file with keys: \"im\" (128, 128, 3, 24, 4), \"mask\" (128, 128, 24, 4)]\n        2. /data/sprites\n        3. /data/shapes48.mat\n    \"\"\"", "\n", "from", "scipy", ".", "io", "import", "loadmat", "\n", "# load image paths", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "raw_data_dir", ",", "'cars/list.txt'", ")", ",", "'r'", ")", "as", "img_names", ":", "\n", "        ", "img_paths", "=", "[", "os", ".", "path", ".", "join", "(", "raw_data_dir", ",", "f'cars/{name.strip()}.mat'", ")", "for", "name", "in", "img_names", ".", "readlines", "(", ")", "]", "\n", "# load images", "\n", "", "images", "=", "np", ".", "stack", "(", "[", "loadmat", "(", "img_path", ")", "[", "'im'", "]", "for", "img_path", "in", "img_paths", "]", ",", "axis", "=", "0", ")", "\n", "# check size", "\n", "assert", "images", ".", "shape", "==", "(", "183", ",", "128", ",", "128", ",", "3", ",", "24", ",", "4", ")", "\n", "# reshape & transpose: (183, 128, 128, 3, 24, 4) -> (4, 24, 183, 128, 128, 3) -> (17568, 128, 128, 3)", "\n", "return", "images", ".", "transpose", "(", "[", "5", ",", "4", ",", "0", ",", "1", ",", "2", ",", "3", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__cars3d.resave_cars3d_archive": [[70, 84], ["save_dataset_array", "tempfile.TemporaryDirectory", "log.info", "shutil.unpack_archive", "_groundtruth__cars3d.load_cars3d_folder", "os.path.dirname", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.npz.save_dataset_array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__cars3d.load_cars3d_folder"], ["", "def", "resave_cars3d_archive", "(", "orig_zipped_file", ",", "new_save_file", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Convert a cars3d archive 'nips2015-analogy-data.tar.gz' to a numpy file,\n    uncompressing the contents of the archive into a temporary directory in the same folder.\n    \"\"\"", "\n", "with", "TemporaryDirectory", "(", "prefix", "=", "'raw_cars3d_'", ",", "dir", "=", "os", ".", "path", ".", "dirname", "(", "orig_zipped_file", ")", ")", "as", "temp_dir", ":", "\n", "# extract zipfile and get path", "\n", "        ", "log", ".", "info", "(", "f\"Extracting into temporary directory: {temp_dir}\"", ")", "\n", "shutil", ".", "unpack_archive", "(", "filename", "=", "orig_zipped_file", ",", "extract_dir", "=", "temp_dir", ")", "\n", "# load images", "\n", "images", "=", "load_cars3d_folder", "(", "raw_data_dir", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'data'", ")", ")", "\n", "# save the array", "\n", "", "from", "disent", ".", "dataset", ".", "util", ".", "formats", ".", "npz", "import", "save_dataset_array", "\n", "save_dataset_array", "(", "images", ",", "new_save_file", ",", "overwrite", "=", "overwrite", ",", "save_key", "=", "'images'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__cars3d.resave_cars3d_resized": [[86, 93], ["save_resized_dataset_array", "numpy.load"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.npz.save_resized_dataset_array"], ["", "def", "resave_cars3d_resized", "(", "orig_converted_file", ":", "str", ",", "new_resized_file", ":", "str", ",", "overwrite", "=", "False", ",", "size", ":", "int", "=", "64", ")", ":", "\n", "# load the array", "\n", "    ", "cars3d_array", "=", "np", ".", "load", "(", "orig_converted_file", ")", "[", "'images'", "]", "\n", "assert", "cars3d_array", ".", "shape", "==", "(", "17568", ",", "128", ",", "128", ",", "3", ")", "\n", "# save the array", "\n", "from", "disent", ".", "dataset", ".", "util", ".", "formats", ".", "npz", "import", "save_resized_dataset_array", "\n", "save_resized_dataset_array", "(", "cars3d_array", ",", "new_resized_file", ",", "overwrite", "=", "overwrite", ",", "size", "=", "size", ",", "save_key", "=", "'images'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.DataFileSmallNorb.__init__": [[168, 183], ["disent.dataset.util.datafile.DataFileHashed.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "datafile_dat", ":", "DataFile", ",", "\n", "datafile_cat", ":", "DataFile", ",", "\n", "datafile_info", ":", "DataFile", ",", "\n", "out_name", ":", "str", ",", "\n", "out_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "hash_type", ":", "str", "=", "'md5'", ",", "\n", "hash_mode", ":", "str", "=", "'fast'", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_datafile_dat", "=", "datafile_dat", "\n", "self", ".", "_datafile_cat", "=", "datafile_cat", "\n", "self", ".", "_datafile_info", "=", "datafile_info", "\n", "# initialize", "\n", "super", "(", ")", ".", "__init__", "(", "file_name", "=", "out_name", ",", "file_hash", "=", "out_hash", ",", "hash_type", "=", "hash_type", ",", "hash_mode", "=", "hash_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.DataFileSmallNorb._prepare": [[184, 192], ["_groundtruth__norb.resave_norb_archive", "_groundtruth__norb.DataFileSmallNorb._datafile_dat.prepare", "_groundtruth__norb.DataFileSmallNorb._datafile_cat.prepare", "_groundtruth__norb.DataFileSmallNorb._datafile_info.prepare"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.resave_norb_archive", "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.prepare", "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.prepare", "home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.prepare"], ["", "def", "_prepare", "(", "self", ",", "out_dir", ":", "str", ",", "out_file", ":", "str", ")", "->", "NoReturn", ":", "\n", "        ", "resave_norb_archive", "(", "\n", "in_dat_path", "=", "self", ".", "_datafile_dat", ".", "prepare", "(", "out_dir", ")", ",", "\n", "in_cat_path", "=", "self", ".", "_datafile_cat", ".", "prepare", "(", "out_dir", ")", ",", "\n", "in_info_path", "=", "self", ".", "_datafile_info", ".", "prepare", "(", "out_dir", ")", ",", "\n", "new_save_file", "=", "out_file", ",", "\n", "in_gzipped", "=", "True", ",", "\n", "overwrite", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.DataFileSmallNorbResized.__init__": [[197, 215], ["disent.dataset.util.datafile.DataFileHashed.__init__", "disent.util.inout.paths.modify_name_keep_ext"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.modify_name_keep_ext"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "norb_datafile", ":", "DataFileSmallNorb", ",", "\n", "# - convert file name", "\n", "out_hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "out_name", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "out_size", ":", "int", "=", "64", ",", "\n", "# - hash settings", "\n", "hash_type", ":", "str", "=", "'md5'", ",", "\n", "hash_mode", ":", "str", "=", "'fast'", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_out_size", "=", "out_size", "\n", "self", ".", "_norb_datafile", "=", "norb_datafile", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "file_name", "=", "modify_name_keep_ext", "(", "self", ".", "_norb_datafile", ".", "out_name", ",", "suffix", "=", "f'_x{out_size}'", ")", "if", "(", "out_name", "is", "None", ")", "else", "out_name", ",", "\n", "file_hash", "=", "out_hash", ",", "\n", "hash_type", "=", "hash_type", ",", "\n", "hash_mode", "=", "hash_mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.DataFileSmallNorbResized._prepare": [[217, 222], ["log.debug", "_groundtruth__norb.DataFileSmallNorbResized._norb_datafile.prepare", "log.debug", "_groundtruth__norb.resave_norb_resized"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.datafile.DataFileHashed.prepare", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.resave_norb_resized"], ["", "def", "_prepare", "(", "self", ",", "out_dir", ":", "str", ",", "out_file", ":", "str", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'Preparing Orig SmallNorb Data:'", ")", "\n", "norb_path", "=", "self", ".", "_norb_datafile", ".", "prepare", "(", "out_dir", ")", "\n", "log", ".", "debug", "(", "'Generating Resized SmallNorb Data:'", ")", "\n", "resave_norb_resized", "(", "orig_converted_file", "=", "norb_path", ",", "new_resized_file", "=", "out_file", ",", "overwrite", "=", "True", ",", "size", "=", "self", ".", "_out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.SmallNorbData.__init__": [[265, 269], ["disent.dataset.data.NumpyFileGroundTruthData.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "data_root", ":", "Optional", "[", "str", "]", "=", "None", ",", "prepare", ":", "bool", "=", "False", ",", "is_test", ":", "bool", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "_is_test", "=", "is_test", "\n", "# initialize", "\n", "super", "(", ")", ".", "__init__", "(", "data_root", "=", "data_root", ",", "prepare", "=", "prepare", ",", "transform", "=", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.SmallNorbData.datafile": [[270, 273], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "datafile", "(", "self", ")", "->", "DataFile", ":", "\n", "        ", "return", "self", ".", "DATA_FILE_TEST", "if", "self", ".", "_is_test", "else", "self", ".", "DATA_FILE_TRAIN", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.read_binary_matrix_bytes": [[60, 87], ["int", "int", "max", "numpy.frombuffer", "data.reshape.reshape", "numpy.frombuffer", "numpy.frombuffer", "numpy.frombuffer", "tuple"], "function", ["None"], ["def", "read_binary_matrix_bytes", "(", "bytes", ")", ":", "\n", "    ", "\"\"\"\n    Read the binary matrix data\n    - modified from disentanglement_lib\n\n    Binary Matrix File Format Specification\n        * The Header:\n            - dtype:      4 bytes\n            - ndim:       4 bytes, little endian\n            - dim_sizes: (4 * min(3, ndim)) bytes\n        * Handling the number of dimensions:\n            - If there are less than 3 dimensions, then dim[1] and dim[2] are both: 1\n            - Elif there are 3 or more dimensions, then the header will contain further size information.\n        * Handling Matrix Data:\n            - Little endian matrix data comes after the header,\n              the index of the last dimension changes the fastest.\n    \"\"\"", "\n", "# header: dtype, ndim, dim_sizes", "\n", "dtype", "=", "int", "(", "np", ".", "frombuffer", "(", "bytes", ",", "dtype", "=", "'int32'", ",", "count", "=", "1", ",", "offset", "=", "0", ")", ")", "# bytes [0, 4)", "\n", "ndim", "=", "int", "(", "np", ".", "frombuffer", "(", "bytes", ",", "dtype", "=", "'int32'", ",", "count", "=", "1", ",", "offset", "=", "4", ")", ")", "# bytes [4, 8)", "\n", "stored_ndim", "=", "max", "(", "3", ",", "ndim", ")", "# stores minimum of 3 dimensions even for 1D array", "\n", "dims", "=", "np", ".", "frombuffer", "(", "bytes", ",", "dtype", "=", "'int32'", ",", "count", "=", "stored_ndim", ",", "offset", "=", "8", ")", "[", "0", ":", "ndim", "]", "# bytes [8, 8 + eff_dim * 4)", "\n", "# matrix: data", "\n", "data", "=", "np", ".", "frombuffer", "(", "bytes", ",", "dtype", "=", "_BINARY_MATRIX_TYPES", "[", "dtype", "]", ",", "count", "=", "-", "1", ",", "offset", "=", "8", "+", "stored_ndim", "*", "4", ")", "\n", "data", "=", "data", ".", "reshape", "(", "tuple", "(", "dims", ")", ")", "\n", "# done", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.read_binary_matrix_file": [[89, 94], ["_groundtruth__norb.read_binary_matrix_bytes", "f.read"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.read_binary_matrix_bytes"], ["", "def", "read_binary_matrix_file", "(", "file", ",", "gzipped", ":", "bool", "=", "True", ")", ":", "\n", "    ", "import", "gzip", "\n", "# this does not seem to copy the bytes, which saves memory", "\n", "with", "(", "gzip", ".", "open", "if", "gzipped", "else", "open", ")", "(", "file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "read_binary_matrix_bytes", "(", "bytes", "=", "f", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.read_norb_dataset": [[101, 138], ["_groundtruth__norb.read_binary_matrix_file", "_groundtruth__norb.read_binary_matrix_file", "_groundtruth__norb.read_binary_matrix_file", "numpy.column_stack", "numpy.lexsort"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.read_binary_matrix_file", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.read_binary_matrix_file", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.read_binary_matrix_file"], ["", "", "def", "read_norb_dataset", "(", "dat_path", ":", "str", ",", "cat_path", ":", "str", ",", "info_path", ":", "str", ",", "gzipped", "=", "True", ",", "sort", "=", "True", ",", "add_channel_dim", ":", "bool", "=", "True", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Load The Normalised Dataset\n    * dat:\n        - images (5 categories, 5 instances, 6 lightings, 9 elevations, and 18 azimuths)\n          + shape: (N, H, W, 1)\n    * cat:\n        - initial ground truth factor:\n            0. category of images (0 for animal, 1 for human, 2 for plane, 3 for truck, 4 for car).\n    * info:\n        - additional ground truth factors:\n            1. the instance in the category (0 to 9)\n            2. the elevation (0 to 8, which mean cameras are 30, 35,40,45,50,55,60,65,70 degrees from the horizontal respectively)\n            3. the azimuth (0,2,4,...,34, multiply by 10 to get the azimuth in degrees)\n            4. the lighting condition (0 to 5)\n    \"\"\"", "\n", "# read the dataset", "\n", "dat", "=", "read_binary_matrix_file", "(", "dat_path", ",", "gzipped", "=", "gzipped", ")", "\n", "cat", "=", "read_binary_matrix_file", "(", "cat_path", ",", "gzipped", "=", "gzipped", ")", "\n", "info", "=", "read_binary_matrix_file", "(", "info_path", ",", "gzipped", "=", "gzipped", ")", "\n", "# collect the ground truth factors", "\n", "factors", "=", "np", ".", "column_stack", "(", "[", "cat", ",", "info", "]", ")", "# append info to categories", "\n", "factors", "[", ":", ",", "3", "]", "=", "factors", "[", ":", ",", "3", "]", "/", "2", "# azimuth values are even numbers, convert to indices", "\n", "images", "=", "dat", "[", ":", ",", "0", "]", "# images are in pairs, only use the first. TODO: what is the second of each?", "\n", "# order the images and factors", "\n", "if", "sort", ":", "\n", "        ", "indices", "=", "np", ".", "lexsort", "(", "factors", "[", ":", ",", "[", "4", ",", "3", ",", "2", ",", "1", ",", "0", "]", "]", ".", "T", ")", "\n", "images", "=", "images", "[", "indices", "]", "\n", "factors", "=", "factors", "[", "indices", "]", "\n", "# add the channel dimension", "\n", "", "if", "add_channel_dim", ":", "\n", "        ", "images", "=", "images", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "assert", "images", ".", "ndim", "==", "4", "\n", "", "else", ":", "\n", "        ", "assert", "images", ".", "ndim", "==", "3", "\n", "# done!", "\n", "", "return", "images", ",", "factors", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.resave_norb_archive": [[140, 147], ["_groundtruth__norb.read_norb_dataset", "save_dataset_array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.read_norb_dataset", "home.repos.pwc.inspect_result.nmichlo_disent.formats.npz.save_dataset_array"], ["", "def", "resave_norb_archive", "(", "in_dat_path", ":", "str", ",", "in_cat_path", ":", "str", ",", "in_info_path", ":", "str", ",", "new_save_file", ":", "str", ",", "in_gzipped", "=", "True", ",", "overwrite", ":", "bool", "=", "False", ")", ":", "\n", "# load the array", "\n", "    ", "images", ",", "factors", "=", "read_norb_dataset", "(", "dat_path", "=", "in_dat_path", ",", "cat_path", "=", "in_cat_path", ",", "info_path", "=", "in_info_path", ",", "gzipped", "=", "in_gzipped", ",", "sort", "=", "True", ",", "add_channel_dim", "=", "True", ")", "\n", "assert", "images", ".", "shape", "==", "(", "24300", ",", "96", ",", "96", ",", "1", ")", "\n", "# save the array", "\n", "from", "disent", ".", "dataset", ".", "util", ".", "formats", ".", "npz", "import", "save_dataset_array", "\n", "save_dataset_array", "(", "images", ",", "new_save_file", ",", "overwrite", "=", "overwrite", ",", "save_key", "=", "'images'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth__norb.resave_norb_resized": [[149, 156], ["save_resized_dataset_array", "numpy.load"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.formats.npz.save_resized_dataset_array"], ["", "def", "resave_norb_resized", "(", "orig_converted_file", ":", "str", ",", "new_resized_file", ":", "str", ",", "overwrite", "=", "False", ",", "size", ":", "int", "=", "64", ")", ":", "\n", "# load the array", "\n", "    ", "norb_array", "=", "np", ".", "load", "(", "orig_converted_file", ")", "[", "'images'", "]", "\n", "assert", "norb_array", ".", "shape", "==", "(", "24300", ",", "96", ",", "96", ",", "1", ")", "\n", "# save the array", "\n", "from", "disent", ".", "dataset", ".", "util", ".", "formats", ".", "npz", "import", "save_resized_dataset_array", "\n", "save_resized_dataset_array", "(", "norb_array", ",", "new_resized_file", ",", "overwrite", "=", "overwrite", ",", "size", "=", "size", ",", "save_key", "=", "'images'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.ArrayDataset.__init__": [[38, 41], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "array", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "_array", "=", "array", "\n", "self", ".", "_transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.ArrayDataset.__len__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_array", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.ArrayDataset.__getitem__": [[45, 51], ["isinstance", "_raw.ArrayDataset._transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "assert", "isinstance", "(", "item", ",", "int", ")", "# disable smart array accesses", "\n", "elem", "=", "self", ".", "_array", "[", "item", "]", "\n", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "            ", "elem", "=", "self", ".", "_transform", "(", "elem", ")", "\n", "", "return", "elem", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.ArrayDataset.shape": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_array", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.__init__": [[70, 75], ["_raw.Hdf5Dataset._make_hdf5"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset._make_hdf5"], ["def", "__init__", "(", "self", ",", "h5_path", ":", "str", ",", "h5_dataset_name", ":", "str", "=", "'data'", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "_h5_path", "=", "h5_path", "\n", "self", ".", "_h5_dataset_name", "=", "h5_dataset_name", "\n", "self", ".", "_hdf5_file", ",", "self", ".", "_hdf5_data", "=", "self", ".", "_make_hdf5", "(", ")", "\n", "self", ".", "_transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset._make_hdf5": [[76, 81], ["h5py.File"], "methods", ["None"], ["", "def", "_make_hdf5", "(", "self", ")", ":", "\n", "# TODO: can this cause a memory leak if it is never closed?", "\n", "        ", "hdf5_file", "=", "h5py", ".", "File", "(", "self", ".", "_h5_path", ",", "'r'", ",", "swmr", "=", "True", ")", "\n", "hdf5_data", "=", "hdf5_file", "[", "self", ".", "_h5_dataset_name", "]", "\n", "return", "hdf5_file", ",", "hdf5_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.__len__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hdf5_data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.__getitem__": [[85, 90], ["_raw.Hdf5Dataset._transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "elem", "=", "self", ".", "_hdf5_data", "[", "item", "]", "\n", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "            ", "elem", "=", "self", ".", "_transform", "(", "elem", ")", "\n", "", "return", "elem", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.shape": [[91, 94], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hdf5_data", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.numpy_dataset": [[95, 98], ["_raw.ArrayDataset"], "methods", ["None"], ["", "def", "numpy_dataset", "(", "self", ")", "->", "ArrayDataset", ":", "\n", "# TODO: make this function global", "\n", "        ", "return", "ArrayDataset", "(", "array", "=", "self", ".", "_hdf5_data", "[", ":", "]", ",", "transform", "=", "self", ".", "_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.__enter__": [[99, 101], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.__exit__": [[102, 104], ["_raw.Hdf5Dataset.close"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.close"], ["", "def", "__exit__", "(", "self", ",", "error_type", ",", "error", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.__getstate__": [[111, 116], ["_raw.Hdf5Dataset.__dict__.copy", "_raw.Hdf5Dataset.pop", "_raw.Hdf5Dataset.pop"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "state", ".", "pop", "(", "'_hdf5_file'", ",", "None", ")", "\n", "state", ".", "pop", "(", "'_hdf5_data'", ",", "None", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.__setstate__": [[117, 120], ["_raw.Hdf5Dataset.__dict__.update", "_raw.Hdf5Dataset._make_hdf5"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset._make_hdf5"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "self", ".", "_hdf5_file", ",", "self", ".", "_hdf5_data", "=", "self", ".", "_make_hdf5", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.close": [[121, 125], ["_raw.Hdf5Dataset._hdf5_file.close"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "_hdf5_file", ".", "close", "(", ")", "\n", "del", "self", ".", "_hdf5_file", "\n", "del", "self", ".", "_hdf5_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.get_attrs": [[126, 128], ["dict"], "methods", ["None"], ["", "def", "get_attrs", "(", "self", ")", "->", "dict", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_hdf5_data", ".", "attrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule.lerp.lerp": [[36, 42], ["numpy.clip"], "function", ["None"], ["def", "lerp", "(", "ratio", ",", "start_val", ",", "end_val", ")", ":", "\n", "    ", "\"\"\"Linear interpolation between parameters, respects bounds when t is out of bounds [0, 1]\"\"\"", "\n", "# assert a < b", "\n", "r", "=", "np", ".", "clip", "(", "ratio", ",", "0.", ",", "1.", ")", "\n", "# precise method, guarantees v==b when t==1 | simplifies to: a + t*(b-a)", "\n", "return", "(", "1", "-", "r", ")", "*", "start_val", "+", "r", "*", "end_val", "\n", "# return start_val + r * (end_val - start_val)  # EQUIVALENT", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule.lerp.lerp_step": [[45, 49], ["lerp.lerp"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.schedule.lerp.lerp"], ["", "def", "lerp_step", "(", "step", ",", "max_step", ",", "start_val", ",", "end_val", ")", ":", "\n", "    ", "\"\"\"Linear interpolation based on a step count.\"\"\"", "\n", "assert", "max_step", ">", "0", "\n", "return", "lerp", "(", "ratio", "=", "step", "/", "max_step", ",", "start_val", "=", "start_val", ",", "end_val", "=", "end_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule.lerp.scale_ratio": [[63, 66], ["numpy.clip"], "function", ["None"], ["def", "scale_ratio", "(", "r", ",", "mode", "=", "'linear'", ")", ":", "\n", "    ", "r", "=", "np", ".", "clip", "(", "r", ",", "0.", ",", "1.", ")", "\n", "return", "_SCALE_RATIO_FNS", "[", "mode", "]", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule.lerp.cyclical_anneal": [[82, 121], ["numpy.where", "numpy.where", "lerp.scale_ratio", "_END_VALUES.get", "numpy.where"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.schedule.lerp.scale_ratio", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get"], ["def", "cyclical_anneal", "(", "\n", "step", ":", "Union", "[", "int", ",", "float", ",", "np", ".", "ndarray", "]", ",", "\n", "period", ":", "float", "=", "3600", ",", "\n", "low_ratio", ":", "float", "=", "0.0", ",", "\n", "high_ratio", ":", "float", "=", "0.0", ",", "\n", "repeats", ":", "int", "=", "None", ",", "\n", "start_low", ":", "bool", "=", "True", ",", "\n", "end_value", ":", "str", "=", "'high'", ",", "\n", "mode", ":", "str", "=", "'linear'", ",", "\n", ")", ":", "\n", "# check values", "\n", "    ", "assert", "0", "<=", "low_ratio", "<=", "1", "\n", "assert", "0", "<=", "high_ratio", "<=", "1", "\n", "assert", "(", "low_ratio", "+", "high_ratio", ")", "<=", "1", "\n", "assert", "(", "period", ">", "0", ")", "\n", "# compute ratio & masks", "\n", "r", "=", "(", "step", "/", "period", ")", "%", "1", "\n", "# flip the axis", "\n", "if", "not", "start_low", ":", "\n", "        ", "r", "=", "1", "-", "r", "\n", "# get the clip mask", "\n", "", "low_mask", ",", "high_mask", "=", "r", "<=", "low_ratio", ",", "(", "1", "-", "high_ratio", ")", "<=", "r", "\n", "# compute increasing values", "\n", "if", "low_ratio", "+", "high_ratio", "<", "1", ":", "\n", "        ", "r", "=", "(", "r", "-", "low_ratio", ")", "/", "(", "1", "-", "low_ratio", "-", "high_ratio", ")", "\n", "r", "=", "scale_ratio", "(", "r", ",", "mode", "=", "mode", ")", "\n", "# truncate values", "\n", "", "r", "=", "np", ".", "where", "(", "low_mask", ",", "0", ",", "r", ")", "\n", "r", "=", "np", ".", "where", "(", "high_mask", ",", "1", ",", "r", ")", "\n", "# repeats", "\n", "if", "repeats", "is", "not", "None", ":", "\n", "        ", "end_value", "=", "_END_VALUES", ".", "get", "(", "end_value", ",", "end_value", ")", "\n", "assert", "0", "<=", "end_value", "<=", "1", "\n", "assert", "repeats", ">", "0", "\n", "# compute", "\n", "n", "=", "step", "/", "period", "\n", "r", "=", "np", ".", "where", "(", "n", "<", "repeats", ",", "r", ",", "end_value", ")", "\n", "# done", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.Schedule.__call__": [[42, 44], ["_schedule.Schedule.compute_value"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.ClipSchedule.compute_value"], ["    ", "def", "__call__", "(", "self", ",", "step", ":", "int", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "compute_value", "(", "step", "=", "step", ",", "value", "=", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.Schedule.compute_value": [[45, 47], ["None"], "methods", ["None"], ["", "def", "compute_value", "(", "self", ",", "step", ":", "int", ",", "value", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.NoopSchedule.compute_value": [[56, 59], ["None"], "methods", ["None"], ["    ", "def", "compute_value", "(", "self", ",", "step", ":", "int", ",", "value", ")", ":", "\n", "# does absolutely nothing!", "\n", "        ", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.MultiplySchedule.__init__": [[68, 73], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "r", ":", "float", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        :param r: The constant ratio of the original value that the schedule will use\n        \"\"\"", "\n", "self", ".", "r", "=", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.MultiplySchedule.compute_value": [[74, 77], ["None"], "methods", ["None"], ["", "def", "compute_value", "(", "self", ",", "step", ":", "int", ",", "value", ")", ":", "\n", "# we always return a constant value!", "\n", "        ", "return", "value", "*", "self", ".", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.FixedValueSchedule.__init__": [[85, 98], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "value", ":", "float", ",", "\n", "schedule", ":", "Optional", "[", "Schedule", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param schedule: The wrapped schedule that is passed the new constant value\n        :param value: The value that should be used to replace the original values from the config.\n                      If `compute_value` is called, the value passed to the function is replaced with this one!\n        \"\"\"", "\n", "assert", "(", "schedule", "is", "None", ")", "or", "isinstance", "(", "schedule", ",", "Schedule", ")", "\n", "self", ".", "schedule", "=", "schedule", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.FixedValueSchedule.compute_value": [[99, 106], ["_schedule.FixedValueSchedule.schedule"], "methods", ["None"], ["", "def", "compute_value", "(", "self", ",", "step", ":", "int", ",", "value", ")", ":", "\n", "        ", "del", "value", "\n", "# we override the passed value, and pass in a constant value instead!", "\n", "if", "self", ".", "schedule", "is", "None", ":", "\n", "            ", "return", "self", ".", "value", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "schedule", "(", "step", ",", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.LinearSchedule.__init__": [[139, 159], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "start_step", ":", "int", ",", "\n", "end_step", ":", "int", ",", "\n", "r_start", ":", "float", "=", "0.0", ",", "\n", "r_end", ":", "float", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param min_step: The step at which the schedule starts and the value unfreezes\n        :param max_step: The step at which the schedule finishes and the value freezes\n        :param r_start: The ratio of the original value that the schedule will start with\n        :param r_end: The ratio of the original value that the schedule will end with\n        \"\"\"", "\n", "assert", "start_step", ">=", "0", "\n", "assert", "end_step", ">", "0", "\n", "assert", "start_step", "<", "end_step", "\n", "self", ".", "start_step", "=", "start_step", "\n", "self", ".", "end_step", "=", "end_step", "\n", "self", ".", "r_start", "=", "r_start", "\n", "self", ".", "r_end", "=", "r_end", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.LinearSchedule.compute_value": [[160, 165], ["_schedule._completion_ratio", "_schedule._common_lerp_value"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule._completion_ratio", "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule._common_lerp_value"], ["", "def", "compute_value", "(", "self", ",", "step", ":", "int", ",", "value", ")", ":", "\n", "# completion ratio in range [0, 1]. If step < start_step return 0, if step > end_step return 1", "\n", "        ", "ratio", "=", "_completion_ratio", "(", "step", "=", "step", ",", "start_step", "=", "self", ".", "start_step", ",", "end_step", "=", "self", ".", "end_step", ")", "\n", "# lerp the value into the range [r_start * value, r_end * value] according to the ratio", "\n", "return", "_common_lerp_value", "(", "ratio", ",", "value", "=", "value", ",", "r_start", "=", "self", ".", "r_start", ",", "r_end", "=", "self", ".", "r_end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.CyclicSchedule.__init__": [[177, 221], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "period", ":", "int", ",", "\n", "start_step", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "repeats", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "r_start", ":", "float", "=", "0.0", ",", "\n", "r_end", ":", "float", "=", "1.0", ",", "\n", "end_mode", ":", "str", "=", "'end'", ",", "\n", "mode", ":", "str", "=", "'linear'", ",", "\n", "p_low", ":", "float", "=", "0.0", ",", "\n", "p_high", ":", "float", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param period: The number of steps it takes for the schedule to repeat\n        :param start_step: The step when the schedule will start, if this is None\n                           then no modification to the step is performed. Equivalent to\n                           `start_step=0` if no negative step values are passed.\n        :param repeats: The number of repeats of this schedule. The end_step of the schedule will\n                        be `start_step + repeats*period`. If `repeats is None` or `repeats < 0` then the\n                        schedule never ends.\n        :param r_start: The ratio of the original value that the schedule will start with\n        :param r_end: The ratio of the original value that the schedule will end with\n        :param end_mode: what of value the schedule should take after finishing [start, end]\n        :param mode: The kind of function use to interpolate between the start and finish [linear, sigmoid, cosine]\n        :param p_low: The portion of the period at the start that is spent at the minimum value\n        :param p_high: The portion of the period that at the end is spent at the maximum value\n        \"\"\"", "\n", "# checks", "\n", "if", "(", "repeats", "is", "not", "None", ")", "and", "(", "repeats", "<", "0", ")", ":", "\n", "            ", "repeats", "=", "None", "\n", "# set values", "\n", "", "self", ".", "period", "=", "period", "\n", "self", ".", "repeats", "=", "repeats", "\n", "self", ".", "start_step", "=", "start_step", "\n", "self", ".", "end_value", "=", "{", "'start'", ":", "'low'", ",", "'end'", ":", "'high'", "}", "[", "end_mode", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "# scale values", "\n", "self", ".", "r_start", "=", "r_start", "\n", "self", ".", "r_end", "=", "r_end", "\n", "# portions of low and high -- low + high <= 1.0 -- low + slope + high == 1.0", "\n", "self", ".", "p_low", "=", "p_low", "\n", "self", ".", "p_high", "=", "p_high", "\n", "# checks", "\n", "assert", "(", "start_step", "is", "None", ")", "or", "(", "start_step", ">=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.CyclicSchedule.compute_value": [[222, 238], ["disent.schedule.lerp.cyclical_anneal", "_schedule._common_lerp_value", "max"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.schedule.lerp.cyclical_anneal", "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule._common_lerp_value"], ["", "def", "compute_value", "(", "self", ",", "step", ":", "int", ",", "value", ")", ":", "\n", "# shift the start", "\n", "        ", "if", "self", ".", "start_step", "is", "not", "None", ":", "\n", "            ", "step", "=", "max", "(", "0", ",", "step", "-", "self", ".", "start_step", ")", "\n", "# outputs value in range [0, 1]", "\n", "", "ratio", "=", "cyclical_anneal", "(", "\n", "step", "=", "step", ",", "\n", "period", "=", "self", ".", "period", ",", "\n", "low_ratio", "=", "self", ".", "p_low", ",", "\n", "high_ratio", "=", "self", ".", "p_high", ",", "\n", "repeats", "=", "self", ".", "repeats", ",", "\n", "start_low", "=", "True", ",", "\n", "end_value", "=", "self", ".", "end_value", ",", "\n", "mode", "=", "self", ".", "mode", "\n", ")", "\n", "return", "_common_lerp_value", "(", "ratio", ",", "value", "=", "value", ",", "r_start", "=", "self", ".", "r_start", ",", "r_end", "=", "self", ".", "r_end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.SingleSchedule.__init__": [[249, 274], ["_schedule.CyclicSchedule.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "start_step", ":", "int", ",", "\n", "end_step", ":", "int", ",", "\n", "r_start", ":", "float", "=", "0.0", ",", "\n", "r_end", ":", "float", "=", "1.0", ",", "\n", "mode", ":", "str", "=", "'linear'", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param start_step: The step when the schedule will start\n        :param end_step: The step when the schedule will finish\n        :param r_start: The ratio of the original value that the schedule will start with\n        :param r_end: The ratio of the original value that the schedule will end with\n        :param mode: The kind of function use to interpolate between the start and finish [linear, sigmoid, cosine]\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "period", "=", "(", "end_step", "-", "start_step", ")", ",", "\n", "start_step", "=", "start_step", ",", "\n", "repeats", "=", "1", ",", "\n", "r_start", "=", "r_start", ",", "\n", "r_end", "=", "r_end", ",", "\n", "end_mode", "=", "'end'", ",", "\n", "mode", "=", "mode", ",", "\n", "p_low", "=", "0.0", ",", "# adjust the start and end steps instead", "\n", "p_high", "=", "0.0", ",", "# adjust the start and end steps instead", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.CosineWaveSchedule.__init__": [[289, 304], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "period", ":", "int", ",", "\n", "r_start", ":", "float", "=", "0.0", ",", "\n", "r_end", ":", "float", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param period: The number of steps it takes for the schedule to repeat\n        :param r_start: The ratio of the original value that the schedule will start with\n        :param r_end: The ratio of the original value that the schedule will end with\n        \"\"\"", "\n", "assert", "period", ">", "0", "\n", "self", ".", "period", "=", "period", "\n", "self", ".", "r_start", "=", "r_start", "\n", "self", ".", "r_end", "=", "r_end", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.CosineWaveSchedule.compute_value": [[305, 309], ["_schedule._common_lerp_value", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule._common_lerp_value"], ["", "def", "compute_value", "(", "self", ",", "step", ":", "int", ",", "value", ")", ":", "\n", "        ", "cosine_ratio", "=", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "step", "*", "(", "2", "*", "np", ".", "pi", "/", "self", ".", "period", ")", "+", "np", ".", "pi", ")", ")", "\n", "# lerp the value into the range [r_start * value, r_end * value] according to the ratio", "\n", "return", "_common_lerp_value", "(", "cosine_ratio", ",", "value", "=", "value", ",", "r_start", "=", "self", ".", "r_start", ",", "r_end", "=", "self", ".", "r_end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.ClipSchedule.__init__": [[321, 354], ["isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "schedule", ":", "Schedule", ",", "\n", "min_step", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "max_step", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "shift_step", ":", "Union", "[", "bool", ",", "int", "]", "=", "True", ",", "\n", "min_value", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "max_value", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param schedule:\n        :param min_step: The minimum step passed to the sub-schedule\n        :param max_step: The maximum step passed to the sub-schedule\n        :param shift_step: (if bool) Shift all the step values passed to the sub-schedule,\n                           at or before min_step the sub-schedule will get `0`, at or after\n                           max_step the sub-schedule will get `max_step-shift_step`\n                           (if int) Add the given value to the step passed to the sub-schedule\n        :param min_value: The minimum value returned from the sub-schedule\n        :param max_value: The maximum value returned from the sub-schedule\n        \"\"\"", "\n", "assert", "isinstance", "(", "schedule", ",", "Schedule", ")", "\n", "self", ".", "schedule", "=", "schedule", "\n", "# step settings", "\n", "self", ".", "min_step", "=", "min_step", "\n", "self", ".", "max_step", "=", "max_step", "\n", "# shift step", "\n", "self", ".", "shift_step", "=", "shift_step", "\n", "if", "isinstance", "(", "shift_step", ",", "bool", ")", ":", "\n", "            ", "if", "self", ".", "min_step", "is", "not", "None", ":", "\n", "                ", "self", ".", "shift_step", "=", "-", "self", ".", "min_step", "\n", "# value settings", "\n", "", "", "self", ".", "min_value", "=", "min_value", "\n", "self", ".", "max_value", "=", "max_value", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule.ClipSchedule.compute_value": [[355, 363], ["_schedule.ClipSchedule.schedule", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum"], "methods", ["None"], ["", "def", "compute_value", "(", "self", ",", "step", ":", "int", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "max_step", "is", "not", "None", ":", "step", "=", "np", ".", "minimum", "(", "self", ".", "max_step", ",", "step", ")", "\n", "if", "self", ".", "min_step", "is", "not", "None", ":", "step", "=", "np", ".", "maximum", "(", "self", ".", "min_step", ",", "step", ")", "\n", "if", "self", ".", "shift_step", "is", "not", "None", ":", "step", "+=", "self", ".", "shift_step", "\n", "result", "=", "self", ".", "schedule", "(", "step", ",", "value", ")", "\n", "if", "self", ".", "max_value", "is", "not", "None", ":", "result", "=", "np", ".", "minimum", "(", "self", ".", "max_value", ",", "result", ")", "\n", "if", "self", ".", "min_value", "is", "not", "None", ":", "result", "=", "np", ".", "maximum", "(", "self", ".", "min_value", ",", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule._common_lerp_value": [[112, 118], ["disent.schedule.lerp.lerp"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.schedule.lerp.lerp"], ["", "", "", "def", "_common_lerp_value", "(", "ratio", ",", "value", ",", "r_start", ":", "float", ",", "r_end", ":", "float", ")", ":", "\n", "# scale the value such that it (which should be in the range [0, 1]) between [r_min, r_max]", "\n", "    ", "return", "lerp", "(", "\n", "ratio", ",", "\n", "start_val", "=", "value", "*", "r_start", ",", "\n", "end_val", "=", "value", "*", "r_end", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.schedule._schedule._completion_ratio": [[121, 129], ["disent.schedule.lerp.lerp_step"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.schedule.lerp.lerp_step"], ["", "def", "_completion_ratio", "(", "step", ":", "int", ",", "start_step", ":", "int", ",", "end_step", ":", "int", ")", ":", "\n", "    ", "ratio", "=", "lerp_step", "(", "\n", "step", "=", "(", "step", "-", "start_step", ")", ",", "\n", "max_step", "=", "(", "end_step", "-", "start_step", ")", ",", "\n", "start_val", "=", "0.0", ",", "\n", "end_val", "=", "1.0", ",", "\n", ")", "\n", "return", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentLatentsModule.__init__": [[51, 57], ["disent.nn.modules.DisentModule.__init__", "tuple", "int", "int", "int", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["#    complexity, but it means the user doesn't have to worry about handling #", "\n", "#    potentially different instances of the DisentDataset class             #", "\n", "# ========================================================================= #", "\n", "\n", "\n", "class", "NotGroundTruthDataError", "(", "Exception", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentLatentsModule.forward": [[58, 60], ["None"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentLatentsModule.x_shape": [[61, 64], ["None"], "methods", ["None"], ["\n", "", "T", "=", "TypeVar", "(", "'T'", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentLatentsModule.x_size": [[64, 67], ["None"], "methods", ["None"], ["\n", "def", "groundtruth_only", "(", "func", ":", "T", ")", "->", "T", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "self", ":", "'DisentDataset'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentLatentsModule.z_size": [[67, 70], ["None"], "methods", ["None"], ["def", "wrapper", "(", "self", ":", "'DisentDataset'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_ground_truth", ":", "\n", "            ", "raise", "NotGroundTruthDataError", "(", "f'Check `is_ground_truth` first before calling `{func.__name__}`, the dataset wrapped by {repr(self.__class__.__name__)} is not a {repr(GroundTruthData.__name__)}, instead got: {repr(self._dataset)}.'", ")", "\n", "", "return", "func", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentLatentsModule.z_multiplier": [[70, 73], ["None"], "methods", ["None"], ["", "return", "func", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentLatentsModule.z_total": [[73, 76], ["None"], "methods", ["None"], ["\n", "", "def", "wrapped_only", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "self", ":", "'DisentDataset'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentEncoder.forward": [[85, 101], ["_base.DisentEncoder.encode", "z.split.split.split", "all", "x.size", "s.size"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.size", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.size"], ["# ========================================================================= #", "\n", "\n", "\n", "", "_REF_", "=", "object", "(", ")", "\n", "\n", "\n", "class", "DisentDataset", "(", "Dataset", ",", "LengthIter", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ":", "Union", "[", "Dataset", ",", "GroundTruthData", "]", ",", "# TODO: this should be renamed to data", "\n", "sampler", ":", "Optional", "[", "BaseDisentSampler", "]", "=", "None", ",", "\n", "transform", ":", "Optional", "[", "callable", "]", "=", "None", ",", "\n", "augment", ":", "Optional", "[", "callable", "]", "=", "None", ",", "\n", "return_indices", ":", "bool", "=", "False", ",", "# doesn't really hurt performance, might as well leave enabled by default?", "\n", "return_factors", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentEncoder.encode": [[102, 104], ["None"], "methods", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# save attributes", "\n", "self", ".", "_dataset", "=", "dataset", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentDecoder.__init__": [[108, 111], ["_base.DisentLatentsModule.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["self", ".", "_return_indices", "=", "return_indices", "\n", "self", ".", "_return_factors", "=", "return_factors", "\n", "# check sampler", "\n", "assert", "isinstance", "(", "self", ".", "_sampler", ",", "BaseDisentSampler", ")", ",", "f'{DisentDataset.__name__} got an invalid {BaseDisentSampler.__name__}: {type(self._sampler)}'", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentDecoder.forward": [[112, 123], ["_base.DisentDecoder.decode", "z.size", "z.size"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.size", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.size"], ["# initialize sampler", "\n", "if", "not", "self", ".", "_sampler", ".", "is_init", ":", "\n", "            ", "self", ".", "_sampler", ".", "init", "(", "dataset", ")", "\n", "# warn if we are overriding a transform", "\n", "", "if", "self", ".", "_transform", "is", "not", "None", ":", "\n", "            ", "if", "hasattr", "(", "dataset", ",", "'_transform'", ")", "and", "dataset", ".", "_transform", ":", "\n", "                ", "warnings", ".", "warn", "(", "f'{DisentDataset.__name__} has transform specified as well as wrapped dataset: {dataset}, are you sure this is intended?'", ")", "\n", "# check the dataset if we are returning the factors", "\n", "", "", "if", "self", ".", "_return_factors", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "_dataset", ",", "GroundTruthData", ")", ",", "f'If `return_factors` is `True`, then the dataset must be an instance of: {GroundTruthData.__name__}, got: {type(dataset)}'", "\n", "\n", "", "", "def", "shallow_copy", "(", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.DisentDecoder.decode": [[124, 126], ["None"], "methods", ["None"], ["self", ",", "\n", "dataset", ":", "Union", "[", "Dataset", ",", "GroundTruthData", "]", "=", "_REF_", ",", "# TODO: this should be renamed to data", "\n", "sampler", ":", "Optional", "[", "BaseDisentSampler", "]", "=", "_REF_", ",", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.AutoEncoder.__init__": [[135, 147], ["isinstance", "isinstance", "_base.DisentLatentsModule.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["sampler", "=", "self", ".", "_sampler", ".", "uninit_copy", "(", ")", "if", "(", "sampler", "is", "_REF_", ")", "else", "sampler", ",", "\n", "transform", "=", "self", ".", "_transform", "if", "(", "transform", "is", "_REF_", ")", "else", "transform", ",", "\n", "augment", "=", "self", ".", "_augment", "if", "(", "augment", "is", "_REF_", ")", "else", "augment", ",", "\n", "return_indices", "=", "self", ".", "_return_indices", "if", "(", "return_indices", "is", "_REF_", ")", "else", "return_indices", ",", "\n", "return_factors", "=", "self", ".", "_return_factors", "if", "(", "return_factors", "is", "_REF_", ")", "else", "return_factors", ",", "\n", ")", "\n", "\n", "# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #", "\n", "# Properties                                                            #", "\n", "# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #", "\n", "\n", "", "@", "property", "\n", "def", "data", "(", "self", ")", "->", "Dataset", ":", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.AutoEncoder.forward": [[148, 150], ["RuntimeError"], "methods", ["None"], ["        ", "return", "self", ".", "_dataset", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.AutoEncoder.encode": [[151, 154], ["_base.AutoEncoder._encoder"], "methods", ["None"], ["def", "sampler", "(", "self", ")", "->", "BaseDisentSampler", ":", "\n", "        ", "return", "self", ".", "_sampler", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.model._base.AutoEncoder.decode": [[155, 161], ["_base.AutoEncoder._decoder"], "methods", ["None"], ["def", "transform", "(", "self", ")", "->", "Optional", "[", "Callable", "[", "[", "object", "]", ",", "object", "]", "]", ":", "\n", "        ", "return", "self", ".", "_transform", "\n", "\n", "", "@", "property", "\n", "def", "augment", "(", "self", ")", "->", "Optional", "[", "Callable", "[", "[", "object", "]", ",", "object", "]", "]", ":", "\n", "        ", "return", "self", ".", "_augment", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64.EncoderConv64Norm.__init__": [[47, 64], ["disent.model.DisentEncoder.__init__", "warnings.warn", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "_norm_conv64._make_activations", "_norm_conv64._make_activations", "_norm_conv64._make_activations", "_norm_conv64._make_activations", "_norm_conv64._make_activations"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations", "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations", "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations", "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations", "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations"], ["def", "__init__", "(", "self", ",", "x_shape", "=", "(", "3", ",", "64", ",", "64", ")", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "1", ",", "activation", "=", "'leaky_relu'", ",", "norm", "=", "'layer'", ",", "norm_pre_act", "=", "True", ")", ":", "\n", "# checks", "\n", "        ", "(", "C", ",", "H", ",", "W", ")", "=", "x_shape", "\n", "assert", "(", "H", ",", "W", ")", "==", "(", "64", ",", "64", ")", ",", "'This model only works with image size 64x64.'", "\n", "super", "(", ")", ".", "__init__", "(", "x_shape", "=", "x_shape", ",", "z_size", "=", "z_size", ",", "z_multiplier", "=", "z_multiplier", ")", "\n", "\n", "# warnings", "\n", "warnings", ".", "warn", "(", "f'this model: {self.__class__.__name__} is non-standard in VAE research!'", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "C", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "*", "_make_activations", "(", "activation", "=", "activation", ",", "norm", "=", "norm", ",", "shape", "=", "(", "32", ",", "33", ",", "33", ")", ",", "norm_pre_act", "=", "norm_pre_act", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "*", "_make_activations", "(", "activation", "=", "activation", ",", "norm", "=", "norm", ",", "shape", "=", "(", "32", ",", "17", ",", "17", ")", ",", "norm_pre_act", "=", "norm_pre_act", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "*", "_make_activations", "(", "activation", "=", "activation", ",", "norm", "=", "norm", ",", "shape", "=", "(", "64", ",", "9", ",", "9", ")", ",", "norm_pre_act", "=", "norm_pre_act", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "*", "_make_activations", "(", "activation", "=", "activation", ",", "norm", "=", "norm", ",", "shape", "=", "(", "64", ",", "5", ",", "5", ")", ",", "norm_pre_act", "=", "norm_pre_act", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "1600", ",", "out_features", "=", "256", ")", ",", "*", "_make_activations", "(", "activation", "=", "activation", ",", "norm", "=", "'none'", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "256", ",", "out_features", "=", "self", ".", "z_total", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64.EncoderConv64Norm.encode": [[66, 68], ["_norm_conv64.EncoderConv64Norm.model"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", "->", "(", "Tensor", ",", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64.DecoderConv64Norm.__init__": [[76, 93], ["disent.model.DisentDecoder.__init__", "warnings.warn", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Unflatten", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "_norm_conv64._make_activations", "_norm_conv64._make_activations", "_norm_conv64._make_activations", "_norm_conv64._make_activations", "_norm_conv64._make_activations"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations", "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations", "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations", "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations", "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations"], ["def", "__init__", "(", "self", ",", "x_shape", "=", "(", "3", ",", "64", ",", "64", ")", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "1", ",", "activation", "=", "'leaky_relu'", ",", "norm", "=", "'layer'", ",", "norm_pre_act", "=", "True", ")", ":", "\n", "# checks", "\n", "        ", "(", "C", ",", "H", ",", "W", ")", "=", "x_shape", "\n", "assert", "(", "H", ",", "W", ")", "==", "(", "64", ",", "64", ")", ",", "'This model only works with image size 64x64.'", "\n", "super", "(", ")", ".", "__init__", "(", "x_shape", "=", "x_shape", ",", "z_size", "=", "z_size", ",", "z_multiplier", "=", "z_multiplier", ")", "\n", "\n", "# warnings", "\n", "warnings", ".", "warn", "(", "f'this model: {self.__class__.__name__} is non-standard in VAE research!'", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "z_size", ",", "out_features", "=", "256", ")", ",", "*", "_make_activations", "(", "activation", "=", "activation", ",", "norm", "=", "'none'", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "256", ",", "out_features", "=", "1024", ")", ",", "*", "_make_activations", "(", "activation", "=", "activation", ",", "norm", "=", "'none'", ")", ",", "\n", "nn", ".", "Unflatten", "(", "dim", "=", "1", ",", "unflattened_size", "=", "[", "64", ",", "4", ",", "4", "]", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "*", "_make_activations", "(", "activation", "=", "activation", ",", "norm", "=", "norm", ",", "shape", "=", "(", "64", ",", "8", ",", "8", ")", ",", "norm_pre_act", "=", "norm_pre_act", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "*", "_make_activations", "(", "activation", "=", "activation", ",", "norm", "=", "norm", ",", "shape", "=", "(", "32", ",", "16", ",", "16", ")", ",", "norm_pre_act", "=", "norm_pre_act", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "*", "_make_activations", "(", "activation", "=", "activation", ",", "norm", "=", "norm", ",", "shape", "=", "(", "32", ",", "32", ",", "32", ")", ",", "norm_pre_act", "=", "norm_pre_act", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "C", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64.DecoderConv64Norm.decode": [[95, 97], ["_norm_conv64.DecoderConv64Norm.model"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "model", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._norm_conv64._make_activations": [[104, 137], ["tuple", "torch.nn.ReLU", "torch.nn.LeakyReLU", "torch.nn.BatchNorm2d", "disent.nn.activations.Swish", "KeyError", "torch.nn.InstanceNorm2d", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "KeyError", "repr", "repr"], "function", ["None"], ["", "", "def", "_make_activations", "(", "activation", "=", "'relu'", ",", "inplace", "=", "True", ",", "norm", "=", "'layer'", ",", "shape", ":", "Tuple", "[", "int", ",", "...", "]", "=", "None", ",", "norm_pre_act", "=", "True", ")", ":", "\n", "# get activation layer", "\n", "    ", "if", "activation", "==", "'relu'", ":", "\n", "        ", "a_layer", "=", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "", "elif", "activation", "==", "'leaky_relu'", ":", "\n", "        ", "a_layer", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "inplace", ")", "\n", "", "elif", "activation", "==", "'swish'", ":", "\n", "        ", "a_layer", "=", "Swish", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f'invalid activation layer: {repr(activation)}'", ")", "\n", "\n", "# get norm layer", "\n", "# https://www.programmersought.com/article/41731094913/", "\n", "# TODO: nn.GroupNorm", "\n", "\n", "", "if", "norm", "in", "(", "None", ",", "'none'", ")", ":", "\n", "        ", "n_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "C", ",", "H", ",", "W", "=", "shape", "\n", "if", "norm", "==", "'batch'", ":", "\n", "            ", "n_layer", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "C", ")", "\n", "", "elif", "norm", "==", "'instance'", ":", "\n", "            ", "n_layer", "=", "nn", ".", "InstanceNorm2d", "(", "num_features", "=", "C", ")", "\n", "", "elif", "norm", "==", "'layer'", ":", "\n", "            ", "n_layer", "=", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "[", "H", ",", "W", "]", ")", "\n", "", "elif", "norm", "==", "'layer_chn'", ":", "\n", "            ", "n_layer", "=", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "[", "C", ",", "H", ",", "W", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "f'invalid norm layer: {repr(norm)}'", ")", "\n", "# order layers", "\n", "", "", "layers", "=", "(", "n_layer", ",", "a_layer", ")", "if", "norm_pre_act", "else", "(", "a_layer", ",", "n_layer", ")", "\n", "# return layers", "\n", "return", "tuple", "(", "l", "for", "l", "in", "layers", "if", "l", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._linear.EncoderLinear.__init__": [[40, 46], ["disent.model.DisentEncoder.__init__", "torch.nn.Sequential", "torch.nn.Flatten", "torch.nn.Linear", "int", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_shape", "=", "(", "3", ",", "64", ",", "64", ")", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x_shape", "=", "x_shape", ",", "z_size", "=", "z_size", ",", "z_multiplier", "=", "z_multiplier", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "x_shape", ")", ")", ",", "out_features", "=", "self", ".", "z_total", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._linear.EncoderLinear.encode": [[48, 50], ["_linear.EncoderLinear.model"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", "->", "(", "Tensor", ",", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._linear.DecoderLinear.__init__": [[54, 60], ["disent.model.DisentDecoder.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Unflatten", "int", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_shape", "=", "(", "3", ",", "64", ",", "64", ")", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x_shape", "=", "x_shape", ",", "z_size", "=", "z_size", ",", "z_multiplier", "=", "z_multiplier", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "z_size", ",", "out_features", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "x_shape", ")", ")", ")", ",", "\n", "nn", ".", "Unflatten", "(", "dim", "=", "1", ",", "unflattened_size", "=", "self", ".", "x_shape", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._linear.DecoderLinear.decode": [[62, 64], ["_linear.DecoderLinear.model"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "model", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._vae_fc.EncoderFC.__init__": [[56, 64], ["disent.model.DisentEncoder.__init__", "torch.nn.Sequential", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "int", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "x_shape", "=", "(", "3", ",", "64", ",", "64", ")", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x_shape", "=", "x_shape", ",", "z_size", "=", "z_size", ",", "z_multiplier", "=", "z_multiplier", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "int", "(", "np", ".", "prod", "(", "x_shape", ")", ")", ",", "out_features", "=", "1200", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "1200", ",", "out_features", "=", "1200", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "1200", ",", "out_features", "=", "self", ".", "z_total", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._vae_fc.EncoderFC.encode": [[66, 68], ["_vae_fc.EncoderFC.model"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", "->", "(", "Tensor", ",", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._vae_fc.DecoderFC.__init__": [[87, 96], ["disent.model.DisentDecoder.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Unflatten", "int", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "x_shape", "=", "(", "3", ",", "64", ",", "64", ")", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "x_shape", "=", "x_shape", ",", "z_size", "=", "z_size", ",", "z_multiplier", "=", "z_multiplier", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "z_size", ",", "out_features", "=", "1200", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "1200", ",", "out_features", "=", "1200", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "1200", ",", "out_features", "=", "1200", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "1200", ",", "out_features", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "x_shape", ")", ")", ")", ",", "\n", "nn", ".", "Unflatten", "(", "dim", "=", "1", ",", "unflattened_size", "=", "self", ".", "x_shape", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._vae_fc.DecoderFC.decode": [[98, 100], ["_vae_fc.DecoderFC.model"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "model", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._vae_conv64.EncoderConv64.__init__": [[58, 72], ["disent.model.DisentEncoder.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "x_shape", "=", "(", "3", ",", "64", ",", "64", ")", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "1", ")", ":", "\n", "# checks", "\n", "        ", "(", "C", ",", "H", ",", "W", ")", "=", "x_shape", "\n", "assert", "(", "H", ",", "W", ")", "==", "(", "64", ",", "64", ")", ",", "'This model only works with image size 64x64.'", "\n", "super", "(", ")", ".", "__init__", "(", "x_shape", "=", "x_shape", ",", "z_size", "=", "z_size", ",", "z_multiplier", "=", "z_multiplier", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "C", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# This was reverted to kernel size 4x4 from 2x2, to match beta-vae paper", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# This was reverted to kernel size 4x4 from 2x2, to match beta-vae paper", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "1600", ",", "out_features", "=", "256", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "256", ",", "out_features", "=", "self", ".", "z_total", ")", ",", "# we combine the two networks in the reference implementation and use torch.chunk(2, dim=-1) to get mu & logvar", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._vae_conv64.EncoderConv64.encode": [[74, 76], ["_vae_conv64.EncoderConv64.model"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", "->", "(", "Tensor", ",", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._vae_conv64.DecoderConv64.__init__": [[98, 111], ["disent.model.DisentDecoder.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Unflatten", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "x_shape", "=", "(", "3", ",", "64", ",", "64", ")", ",", "z_size", "=", "6", ",", "z_multiplier", "=", "1", ")", ":", "\n", "        ", "(", "C", ",", "H", ",", "W", ")", "=", "x_shape", "\n", "assert", "(", "H", ",", "W", ")", "==", "(", "64", ",", "64", ")", ",", "'This model only works with image size 64x64.'", "\n", "super", "(", ")", ".", "__init__", "(", "x_shape", "=", "x_shape", ",", "z_size", "=", "z_size", ",", "z_multiplier", "=", "z_multiplier", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "z_size", ",", "out_features", "=", "256", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "256", ",", "out_features", "=", "1024", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Unflatten", "(", "dim", "=", "1", ",", "unflattened_size", "=", "[", "64", ",", "4", ",", "4", "]", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "C", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._vae_conv64.DecoderConv64.decode": [[113, 115], ["_vae_conv64.DecoderConv64.model"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "model", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__ae.Ae.__init__": [[78, 82], ["disent.frameworks.ae._ae_mixin._AeAndVaeMixin.__init__", "_unsupervised__ae.Ae._init_ae_mixin"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin._init_ae_mixin"], ["", "def", "__init__", "(", "self", ",", "model", ":", "AutoEncoder", ",", "cfg", ":", "cfg", "=", "None", ",", "batch_augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", "=", "cfg", ",", "batch_augment", "=", "batch_augment", ")", "\n", "# initialise the auto-encoder mixin (recon handler, model, enc, dec, etc.)", "\n", "self", ".", "_init_ae_mixin", "(", "model", "=", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__ae.Ae.do_training_step": [[87, 128], ["_unsupervised__ae.Ae._get_xs_and_targs", "disent.util.iters.map_all", "_unsupervised__ae.Ae.hook_ae_intercept_zs", "disent.util.iters.map_all", "_unsupervised__ae.Ae.compute_ave_recon_loss", "_unsupervised__ae.Ae.hook_ae_compute_ave_aug_loss", "_unsupervised__ae.Ae.log_dict", "_unsupervised__ae.Ae.log_dict", "disent.frameworks.helper.util.detach_all", "float", "float"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin._get_xs_and_targs", "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.map_all", "home.repos.pwc.inspect_result.nmichlo_disent.ae._weaklysupervised__adaae.AdaAe.hook_ae_intercept_zs", "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.map_all", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcVae.compute_ave_recon_loss", "home.repos.pwc.inspect_result.nmichlo_disent.ae._supervised__tae.TripletAe.hook_ae_compute_ave_aug_loss", "home.repos.pwc.inspect_result.nmichlo_disent.helper.util.detach_all"], ["", "@", "final", "\n", "def", "do_training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "xs", ",", "xs_targ", "=", "self", ".", "_get_xs_and_targs", "(", "batch", ",", "batch_idx", ")", "\n", "\n", "# FORWARD", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# latent variables", "\n", "zs", "=", "map_all", "(", "self", ".", "encode", ",", "xs", ")", "\n", "# [HOOK] intercept latent variables", "\n", "zs", ",", "logs_intercept_zs", "=", "self", ".", "hook_ae_intercept_zs", "(", "zs", ")", "\n", "# reconstruct without the final activation", "\n", "xs_partial_recon", "=", "map_all", "(", "self", ".", "decode_partial", ",", "detach_all", "(", "zs", ",", "if_", "=", "self", ".", "cfg", ".", "detach_decoder", ")", ")", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "# LOSS", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# compute all the recon losses", "\n", "recon_loss", ",", "logs_recon", "=", "self", ".", "compute_ave_recon_loss", "(", "xs_partial_recon", ",", "xs_targ", ")", "\n", "# [HOOK] augment loss", "\n", "aug_loss", ",", "logs_aug", "=", "self", ".", "hook_ae_compute_ave_aug_loss", "(", "zs", "=", "zs", ",", "xs_partial_recon", "=", "xs_partial_recon", ",", "xs_targ", "=", "xs_targ", ")", "\n", "# compute combined loss", "\n", "loss", "=", "0", "\n", "if", "not", "self", ".", "cfg", ".", "disable_rec_loss", ":", "loss", "+=", "recon_loss", "\n", "if", "not", "self", ".", "cfg", ".", "disable_aug_loss", ":", "loss", "+=", "aug_loss", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "# log general", "\n", "self", ".", "log_dict", "(", "{", "\n", "**", "logs_intercept_zs", ",", "\n", "**", "logs_recon", ",", "\n", "**", "logs_aug", ",", "\n", "}", ")", "\n", "\n", "# log progress bar", "\n", "self", ".", "log_dict", "(", "{", "\n", "'recon_loss'", ":", "float", "(", "recon_loss", ")", ",", "\n", "'aug_loss'", ":", "float", "(", "aug_loss", ")", ",", "\n", "}", ",", "prog_bar", "=", "True", ")", "\n", "\n", "# return values", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__ae.Ae.hook_ae_intercept_zs": [[133, 135], ["None"], "methods", ["None"], ["", "def", "hook_ae_intercept_zs", "(", "self", ",", "zs", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "return", "zs", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__ae.Ae.hook_ae_compute_ave_aug_loss": [[136, 138], ["None"], "methods", ["None"], ["", "def", "hook_ae_compute_ave_aug_loss", "(", "self", ",", "zs", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Union", "[", "torch", ".", "Tensor", ",", "Number", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "return", "0", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__ae.Ae.compute_ave_recon_loss": [[139, 145], ["_unsupervised__ae.Ae.recon_handler.compute_ave_loss_from_partial"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_ave_loss_from_partial"], ["", "def", "compute_ave_recon_loss", "(", "self", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Union", "[", "torch", ".", "Tensor", ",", "Number", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "# compute reconstruction loss", "\n", "        ", "pixel_loss", "=", "self", ".", "recon_handler", ".", "compute_ave_loss_from_partial", "(", "xs_partial_recon", ",", "xs_targ", ")", "\n", "# return logs", "\n", "return", "pixel_loss", ",", "{", "\n", "'pixel_loss'", ":", "pixel_loss", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__ae.Ae.encode": [[151, 155], ["_unsupervised__ae.Ae._model.encode"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode"], ["", "@", "final", "\n", "def", "encode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Get the deterministic latent representation (useful for visualisation)\"\"\"", "\n", "return", "self", ".", "_model", ".", "encode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__ae.Ae.decode": [[156, 160], ["_unsupervised__ae.Ae.recon_handler.activate", "_unsupervised__ae.Ae._model.decode"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.activate", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode"], ["", "@", "final", "\n", "def", "decode", "(", "self", ",", "z", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Decode latent vector z into reconstruction x_recon (useful for visualisation)\"\"\"", "\n", "return", "self", ".", "recon_handler", ".", "activate", "(", "self", ".", "_model", ".", "decode", "(", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__ae.Ae.forward": [[161, 165], ["_unsupervised__ae.Ae.decode", "_unsupervised__ae.Ae.encode"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode"], ["", "@", "final", "\n", "def", "forward", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Feed through the full deterministic model (useful for visualisation)\"\"\"", "\n", "return", "self", ".", "decode", "(", "self", ".", "encode", "(", "batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__ae.Ae.decode_partial": [[170, 174], ["_unsupervised__ae.Ae._model.decode"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode"], ["", "@", "final", "\n", "def", "decode_partial", "(", "self", ",", "z", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Decode latent vector z into partial reconstructions that exclude the final activation if there is one.\"\"\"", "\n", "return", "self", ".", "_model", ".", "decode", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._weaklysupervised__adaae.AdaAe.hook_ae_intercept_zs": [[58, 77], ["disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.make_shared_zs", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs.sum().float().mean", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs.sum().float", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs.sum"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.make_shared_zs"], ["", "def", "hook_ae_intercept_zs", "(", "self", ",", "zs", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "\"\"\"\n        Adaptive VAE Glue Method, putting the various components together\n        1. find differences between deltas\n        2. estimate a threshold for differences\n        3. compute a shared mask from this threshold\n        4. average together elements that should be considered shared\n\n        TODO: the methods used in this function should probably be moved here\n        TODO: this function could be turned into a torch.nn.Module!\n        \"\"\"", "\n", "z0", ",", "z1", "=", "zs", "\n", "# shared elements that need to be averaged, computed per pair in the batch.", "\n", "share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_zs", "(", "z0", ",", "z1", ",", "ratio", "=", "self", ".", "cfg", ".", "ada_thresh_ratio", ")", "\n", "# compute average posteriors", "\n", "new_zs", "=", "AdaVae", ".", "make_shared_zs", "(", "z0", ",", "z1", ",", "share_mask", ")", "\n", "# return new args & generate logs", "\n", "return", "new_zs", ",", "{", "\n", "'shared'", ":", "share_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._supervised__adaneg_tae.AdaNegTripletAe.hook_ae_compute_ave_aug_loss": [[66, 70], ["disent.frameworks.vae._supervised__adaneg_tvae.AdaNegTripletVae.estimate_ada_triplet_loss_from_zs"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.AdaNegTripletVae.estimate_ada_triplet_loss_from_zs"], ["", "def", "hook_ae_compute_ave_aug_loss", "(", "self", ",", "zs", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Union", "[", "torch", ".", "Tensor", ",", "Number", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "return", "AdaNegTripletVae", ".", "estimate_ada_triplet_loss_from_zs", "(", "\n", "zs", "=", "zs", ",", "\n", "cfg", "=", "self", ".", "cfg", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__dotae.DataOverlapTripletAe.__init__": [[64, 68], ["disent.frameworks.ae._supervised__adaneg_tae.AdaNegTripletAe.__init__", "_unsupervised__dotae.DataOverlapTripletAe.init_data_overlap_mixin"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.init_data_overlap_mixin"], ["", "def", "__init__", "(", "self", ",", "model", ":", "'AutoEncoder'", ",", "cfg", ":", "cfg", "=", "None", ",", "batch_augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ",", "cfg", "=", "cfg", ",", "batch_augment", "=", "batch_augment", ")", "\n", "# initialise mixin", "\n", "self", ".", "init_data_overlap_mixin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._unsupervised__dotae.DataOverlapTripletAe.hook_ae_compute_ave_aug_loss": [[69, 80], ["_unsupervised__dotae.DataOverlapTripletAe.random_mined_triplets", "disent.frameworks.vae._supervised__adaneg_tvae.AdaNegTripletVae.estimate_ada_triplet_loss_from_zs"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.random_mined_triplets", "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.AdaNegTripletVae.estimate_ada_triplet_loss_from_zs"], ["", "def", "hook_ae_compute_ave_aug_loss", "(", "self", ",", "zs", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "[", "z", "]", ",", "[", "x_targ_orig", "]", "=", "zs", ",", "xs_targ", "\n", "# 1. randomly generate and mine triplets using augmented versions of the inputs", "\n", "a_idxs", ",", "p_idxs", ",", "n_idxs", "=", "self", ".", "random_mined_triplets", "(", "x_targ_orig", "=", "x_targ_orig", ")", "\n", "# 2. compute triplet loss", "\n", "loss", ",", "loss_log", "=", "AdaNegTripletVae", ".", "estimate_ada_triplet_loss_from_zs", "(", "\n", "zs", "=", "[", "z", "[", "idxs", "]", "for", "idxs", "in", "(", "a_idxs", ",", "p_idxs", ",", "n_idxs", ")", "]", ",", "\n", "cfg", "=", "self", ".", "cfg", ",", "\n", ")", "\n", "return", "loss", ",", "{", "\n", "**", "loss_log", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._supervised__tae.TripletAe.hook_ae_compute_ave_aug_loss": [[53, 55], ["disent.nn.loss.triplet.compute_triplet_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.compute_triplet_loss"], ["", "def", "hook_ae_compute_ave_aug_loss", "(", "self", ",", "zs", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Union", "[", "torch", ".", "Tensor", ",", "Number", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "return", "compute_triplet_loss", "(", "zs", "=", "zs", ",", "cfg", "=", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin.REQUIRED_Z_MULTIPLIER": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "REQUIRED_Z_MULTIPLIER", "(", "self", ")", "->", "int", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin.REQUIRED_OBS": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "REQUIRED_OBS", "(", "self", ")", "->", "int", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin.recon_handler": [[79, 83], ["None"], "methods", ["None"], ["", "@", "final", "\n", "@", "property", "\n", "def", "recon_handler", "(", "self", ")", "->", "ReconLossHandler", ":", "\n", "        ", "return", "self", ".", "__recon_handler", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin._init_ae_mixin": [[92, 100], ["isinstance", "disent.frameworks.helper.reconstructions.make_reconstruction_loss", "type", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.make_reconstruction_loss"], ["def", "_init_ae_mixin", "(", "self", ",", "model", ":", "AutoEncoder", ")", ":", "\n", "# vae model", "\n", "        ", "self", ".", "_model", "=", "model", "\n", "# check the model", "\n", "assert", "isinstance", "(", "self", ".", "_model", ",", "AutoEncoder", ")", ",", "f'model must be an instance of {AutoEncoder.__name__}, got: {type(model)}'", "\n", "assert", "self", ".", "_model", ".", "z_multiplier", "==", "self", ".", "REQUIRED_Z_MULTIPLIER", ",", "f'model z_multiplier is {repr(self._model.z_multiplier)} but {self.__class__.__name__} requires that it is: {repr(self.REQUIRED_Z_MULTIPLIER)}'", "\n", "# recon loss & activation fn", "\n", "self", ".", "__recon_handler", ":", "ReconLossHandler", "=", "make_reconstruction_loss", "(", "self", ".", "cfg", ".", "recon_loss", ",", "reduction", "=", "self", ".", "cfg", ".", "loss_reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin._get_xs_and_targs": [[105, 119], ["log.warning", "len", "len", "len", "len"], "methods", ["None"], ["", "@", "final", "\n", "def", "_get_xs_and_targs", "(", "self", ",", "batch", ":", "Dict", "[", "str", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", "]", ",", "batch_idx", ")", "->", "Tuple", "[", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", "]", ":", "\n", "        ", "xs_targ", "=", "batch", "[", "'x_targ'", "]", "\n", "if", "'x'", "not", "in", "batch", ":", "\n", "# TODO: re-enable this warning but only ever print once!", "\n", "# warnings.warn('dataset does not have input: x -> x_targ using target as input: x_targ -> x_targ')", "\n", "            ", "xs", "=", "xs_targ", "\n", "", "else", ":", "\n", "            ", "xs", "=", "batch", "[", "'x'", "]", "\n", "# check that we have the correct number of inputs", "\n", "", "if", "(", "len", "(", "xs", ")", "!=", "self", ".", "REQUIRED_OBS", ")", "or", "(", "len", "(", "xs_targ", ")", "!=", "self", ".", "REQUIRED_OBS", ")", ":", "\n", "            ", "log", ".", "warning", "(", "f'batch len(xs)={len(xs)} and len(xs_targ)={len(xs_targ)} observation count mismatch, requires: {self.REQUIRED_OBS}'", ")", "\n", "# done", "\n", "", "return", "xs", ",", "xs_targ", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin.encode": [[124, 127], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Get the deterministic latent representation (useful for visualisation)\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin.decode": [[128, 131], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Decode latent vector z into reconstruction x_recon (useful for visualisation)\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin.forward": [[132, 135], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Feed through the full deterministic model (useful for visualisation)\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin.decode_partial": [[140, 143], ["None"], "methods", ["None"], ["", "def", "decode_partial", "(", "self", ",", "z", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Decode latent vector z into partial reconstructions that exclude the final activation if there is one.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandler.__init__": [[50, 53], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kl_mode", ":", "str", "=", "'direct'", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "self", ".", "_kl_mode", "=", "kl_mode", "\n", "self", ".", "_reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandler.encoding_to_representation": [[54, 56], ["None"], "methods", ["None"], ["", "def", "encoding_to_representation", "(", "self", ",", "z_raw", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandler.encoding_to_dists": [[57, 59], ["None"], "methods", ["None"], ["", "def", "encoding_to_dists", "(", "self", ",", "z_raw", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", ")", "->", "Tuple", "[", "Distribution", ",", "Distribution", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandler.encoding_to_dists_and_sample": [[60, 72], ["latent_distributions.LatentDistsHandler.encoding_to_dists", "posterior.rsample"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandlerLaplace.encoding_to_dists"], ["", "@", "final", "\n", "def", "encoding_to_dists_and_sample", "(", "self", ",", "z_raw", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", ")", "->", "Tuple", "[", "Distribution", ",", "Distribution", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Return the parameterized prior and the approximate posterior distributions,\n        as well as a sample from the approximate posterior using the 'reparameterization trick'.\n        \"\"\"", "\n", "posterior", ",", "prior", "=", "self", ".", "encoding_to_dists", "(", "z_raw", ")", "\n", "# sample from posterior -- reparameterization trick!", "\n", "# ie. z ~ q(z|x)", "\n", "z_sampled", "=", "posterior", ".", "rsample", "(", ")", "\n", "# return values", "\n", "return", "posterior", ",", "prior", ",", "z_sampled", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandler.compute_kl_loss": [[73, 81], ["disent.nn.loss.kl.kl_loss", "disent.nn.loss.reduction.loss_reduction"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss", "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.loss_reduction"], ["", "@", "final", "\n", "def", "compute_kl_loss", "(", "self", ",", "posterior", ":", "Distribution", ",", "prior", ":", "Distribution", ",", "z_sampled", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Compute the kl divergence\n        \"\"\"", "\n", "kl", "=", "kl_loss", "(", "posterior", ",", "prior", ",", "z_sampled", ",", "mode", "=", "self", ".", "_kl_mode", ")", "\n", "kl", "=", "loss_reduction", "(", "kl", ",", "reduction", "=", "self", ".", "_reduction", ")", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandler.compute_unreduced_kl_loss": [[82, 85], ["disent.nn.loss.kl.kl_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.kl.kl_loss"], ["", "@", "final", "\n", "def", "compute_unreduced_kl_loss", "(", "self", ",", "posterior", ":", "Distribution", ",", "prior", ":", "Distribution", ",", "z_sampled", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "kl_loss", "(", "posterior", ",", "prior", ",", "z_sampled", ",", "mode", "=", "self", ".", "_kl_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandler.compute_ave_kl_loss": [[86, 89], ["disent.frameworks.helper.util.compute_ave_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.util.compute_ave_loss"], ["", "@", "final", "\n", "def", "compute_ave_kl_loss", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Distribution", "]", ",", "ds_prior", ":", "Sequence", "[", "Distribution", "]", ",", "zs_sampled", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "compute_ave_loss", "(", "self", ".", "compute_kl_loss", ",", "ds_posterior", ",", "ds_prior", ",", "zs_sampled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandlerNormal.encoding_to_representation": [[108, 111], ["None"], "methods", ["None"], ["def", "encoding_to_representation", "(", "self", ",", "raw_z", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "z_mean", ",", "z_logvar", "=", "raw_z", "\n", "return", "z_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandlerNormal.encoding_to_dists": [[112, 132], ["torch.exp", "torch.distributions.Normal", "torch.distributions.Normal", "torch.zeros_like", "torch.ones_like"], "methods", ["None"], ["", "def", "encoding_to_dists", "(", "self", ",", "raw_z", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", ")", "->", "Tuple", "[", "Normal", ",", "Normal", "]", ":", "\n", "        ", "\"\"\"\n        Return the parameterized prior and the approximate posterior distributions.\n        - The standard VAE parameterizes the gaussian normal with diagonal covariance.\n        - logvar is used to avoid negative values for the standard deviation\n        - Gaussian Encoder Model Distribution: pg. 25 in Variational Auto Encoders\n\n        (\u2713) Visual inspection against reference implementations:\n            https://github.com/google-research/disentanglement_lib (sample_from_latent_distribution)\n            https://github.com/PyTorchLightning/pytorch-lightning-bolts/blob/master/pl_bolts/models/autoencoders/basic_vae/basic_vae_module.py\n        \"\"\"", "\n", "z_mean", ",", "z_logvar", "=", "raw_z", "\n", "# compute required values", "\n", "z_std", "=", "torch", ".", "exp", "(", "0.5", "*", "z_logvar", ")", "\n", "# q: approximate posterior distribution", "\n", "posterior", "=", "Normal", "(", "loc", "=", "z_mean", ",", "scale", "=", "z_std", ")", "\n", "# p: prior distribution", "\n", "prior", "=", "Normal", "(", "torch", ".", "zeros_like", "(", "z_mean", ")", ",", "torch", ".", "ones_like", "(", "z_std", ")", ")", "\n", "# return values", "\n", "return", "posterior", ",", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandlerLaplace.encoding_to_representation": [[144, 147], ["None"], "methods", ["None"], ["def", "encoding_to_representation", "(", "self", ",", "raw_z", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "z_loc", ",", "z_logscale", "=", "raw_z", "\n", "return", "z_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandlerLaplace.encoding_to_dists": [[148, 158], ["torch.exp", "torch.distributions.Laplace", "torch.distributions.Laplace", "torch.zeros_like", "torch.ones_like"], "methods", ["None"], ["", "def", "encoding_to_dists", "(", "self", ",", "raw_z", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "...", "]", ")", "->", "Tuple", "[", "Laplace", ",", "Laplace", "]", ":", "\n", "        ", "z_loc", ",", "z_logscale", "=", "raw_z", "\n", "# compute required values", "\n", "z_scale", "=", "torch", ".", "exp", "(", "z_logscale", ")", "\n", "# q: approximate posterior distribution", "\n", "posterior", "=", "Laplace", "(", "loc", "=", "z_loc", ",", "scale", "=", "z_scale", ")", "\n", "# p: prior distribution", "\n", "prior", "=", "Laplace", "(", "torch", ".", "zeros_like", "(", "z_loc", ")", ",", "torch", ".", "ones_like", "(", "z_scale", ")", ")", "\n", "# return values", "\n", "return", "posterior", ",", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.make_latent_distribution": [[165, 169], ["cls"], "function", ["None"], ["", "", "def", "make_latent_distribution", "(", "name", ":", "str", ",", "kl_mode", ":", "str", ",", "reduction", ":", "str", ")", "->", "LatentDistsHandler", ":", "\n", "    ", "cls", "=", "R", ".", "LATENT_HANDLERS", "[", "name", "]", "\n", "# make instance", "\n", "return", "cls", "(", "kl_mode", "=", "kl_mode", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.__init__": [[49, 52], ["disent.nn.modules.DisentModule.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", ":", "str", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.forward": [[53, 55], ["RuntimeError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "f'Cannot call forward() on {self.__class__.__name__}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.activate": [[56, 62], ["None"], "methods", ["None"], ["", "def", "activate", "(", "self", ",", "x_partial", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        The final activation of the model.\n        - Never use this in a training loop.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.activate_all": [[63, 65], ["reconstructions.ReconLossHandler.activate"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.activate"], ["", "def", "activate_all", "(", "self", ",", "xs_partial", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "return", "[", "self", ".", "activate", "(", "x_partial", ")", "for", "x_partial", "in", "xs_partial", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_loss": [[66, 76], ["reconstructions.ReconLossHandler.compute_unreduced_loss", "disent.nn.loss.reduction.loss_reduction"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss", "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.loss_reduction"], ["", "@", "final", "\n", "def", "compute_loss", "(", "self", ",", "x_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Takes in activated tensors\n        :return: The computed reduced loss\n        \"\"\"", "\n", "assert", "x_recon", ".", "shape", "==", "x_targ", ".", "shape", ",", "f'x_recon.shape={x_recon.shape} x_targ.shape={x_targ.shape}'", "\n", "batch_loss", "=", "self", ".", "compute_unreduced_loss", "(", "x_recon", ",", "x_targ", ")", "\n", "loss", "=", "loss_reduction", "(", "batch_loss", ",", "reduction", "=", "self", ".", "_reduction", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_loss_from_partial": [[77, 88], ["reconstructions.ReconLossHandler.compute_unreduced_loss_from_partial", "disent.nn.loss.reduction.loss_reduction"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss_from_partial", "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.loss_reduction"], ["", "@", "final", "\n", "def", "compute_loss_from_partial", "(", "self", ",", "x_partial_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Takes in an **unactivated** tensor from the model\n        as well as an original target from the dataset.\n        :return: The computed reduced loss\n        \"\"\"", "\n", "assert", "x_partial_recon", ".", "shape", "==", "x_targ", ".", "shape", ",", "f'x_partial_recon.shape={x_partial_recon.shape} x_targ.shape={x_targ.shape}'", "\n", "batch_loss", "=", "self", ".", "compute_unreduced_loss_from_partial", "(", "x_partial_recon", ",", "x_targ", ")", "\n", "loss", "=", "loss_reduction", "(", "batch_loss", ",", "reduction", "=", "self", ".", "_reduction", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_ave_loss": [[90, 96], ["disent.frameworks.helper.util.compute_ave_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.util.compute_ave_loss"], ["", "@", "final", "\n", "def", "compute_ave_loss", "(", "self", ",", "xs_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Compute the average over losses computed from corresponding tensor pairs in the sequence.\n        \"\"\"", "\n", "return", "compute_ave_loss", "(", "self", ".", "compute_loss", ",", "xs_recon", ",", "xs_targ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_ave_loss_from_partial": [[97, 103], ["disent.frameworks.helper.util.compute_ave_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.util.compute_ave_loss"], ["", "@", "final", "\n", "def", "compute_ave_loss_from_partial", "(", "self", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Compute the average over losses computed from corresponding tensor pairs in the sequence.\n        \"\"\"", "\n", "return", "compute_ave_loss", "(", "self", ".", "compute_loss_from_partial", ",", "xs_partial_recon", ",", "xs_targ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_unreduced_loss": [[104, 112], ["None"], "methods", ["None"], ["", "def", "compute_unreduced_loss", "(", "self", ",", "x_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Takes in activated tensors\n        Compute the loss without applying a reduction, the loss\n        tensor should be the same shapes as the input tensors\n        :return: The computed unreduced loss\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_unreduced_loss_from_partial": [[113, 121], ["None"], "methods", ["None"], ["", "def", "compute_unreduced_loss_from_partial", "(", "self", ",", "x_partial_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Takes in an **unactivated** tensor from the model\n        Compute the loss without applying a reduction, the loss\n        tensor should be the same shapes as the input tensors\n        :return: The computed unreduced loss\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler._pairwise_reduce": [[122, 125], ["disent.nn.loss.reduction.batch_loss_reduction"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.batch_loss_reduction"], ["", "def", "_pairwise_reduce", "(", "self", ",", "unreduced_loss", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "assert", "self", ".", "_reduction", "in", "(", "'mean'", ",", "'sum'", ")", ",", "f'pairwise losses only support \"mean\" and \"sum\" reduction modes.'", "\n", "return", "batch_loss_reduction", "(", "unreduced_loss", ",", "reduction_dtype", "=", "None", ",", "reduction", "=", "self", ".", "_reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_pairwise_loss": [[126, 128], ["reconstructions.ReconLossHandler._pairwise_reduce", "reconstructions.ReconLossHandler.compute_unreduced_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler._pairwise_reduce", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss"], ["", "def", "compute_pairwise_loss", "(", "self", ",", "x_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "_pairwise_reduce", "(", "self", ".", "compute_unreduced_loss", "(", "x_recon", ",", "x_targ", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_pairwise_loss_from_partial": [[129, 131], ["reconstructions.ReconLossHandler._pairwise_reduce", "reconstructions.ReconLossHandler.compute_unreduced_loss_from_partial"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler._pairwise_reduce", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss_from_partial"], ["", "def", "compute_pairwise_loss_from_partial", "(", "self", ",", "x_partial_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "_pairwise_reduce", "(", "self", ".", "compute_unreduced_loss_from_partial", "(", "x_partial_recon", ",", "x_targ", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerMse.activate": [[144, 147], ["None"], "methods", ["None"], ["def", "activate", "(", "self", ",", "x_partial", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "# mse requires no final activation", "\n", "        ", "return", "x_partial", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerMse.compute_unreduced_loss": [[148, 150], ["torch.mse_loss", "torch.mse_loss"], "methods", ["None"], ["", "def", "compute_unreduced_loss", "(", "self", ",", "x_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "F", ".", "mse_loss", "(", "x_recon", ",", "x_targ", ",", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerMse.compute_unreduced_loss_from_partial": [[151, 153], ["reconstructions.ReconLossHandlerMse.compute_unreduced_loss", "reconstructions.ReconLossHandlerMse.activate"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.activate"], ["", "def", "compute_unreduced_loss_from_partial", "(", "self", ",", "x_partial_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "compute_unreduced_loss", "(", "self", ".", "activate", "(", "x_partial_recon", ")", ",", "x_targ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerMae.compute_unreduced_loss": [[159, 161], ["torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["def", "compute_unreduced_loss", "(", "self", ",", "x_recon", ",", "x_targ", ")", ":", "\n", "        ", "return", "torch", ".", "abs", "(", "x_recon", "-", "x_targ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerBce.activate": [[169, 173], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["def", "activate", "(", "self", ",", "x_partial", ":", "torch", ".", "Tensor", ")", ":", "\n", "# we allow the model output x to generally be in the range [-1, 1] and scale", "\n", "# it to the range [0, 1] here to match the targets.", "\n", "        ", "return", "torch", ".", "sigmoid", "(", "x_partial", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerBce.compute_unreduced_loss": [[174, 177], ["warnings.warn", "torch.binary_cross_entropy", "torch.binary_cross_entropy"], "methods", ["None"], ["", "def", "compute_unreduced_loss", "(", "self", ",", "x_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "warnings", ".", "warn", "(", "'binary cross entropy not computed over logits is inaccurate!'", ")", "\n", "return", "F", ".", "binary_cross_entropy", "(", "x_recon", ",", "x_targ", ",", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerBce.compute_unreduced_loss_from_partial": [[178, 188], ["torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "compute_unreduced_loss_from_partial", "(", "self", ",", "x_partial_recon", ",", "x_targ", ")", ":", "\n", "        ", "\"\"\"\n        Computes the Bernoulli loss for the sigmoid activation function\n        REFERENCE:\n            https://github.com/google-research/disentanglement_lib/blob/76f41e39cdeff8517f7fba9d57b09f35703efca9/disentanglement_lib/methods/shared/losses.py\n            - the same when reduction=='mean_sum' for super().training_compute_loss()\n        REFERENCE ALT:\n            https://github.com/YannDubs/disentangling-vae/blob/master/disvae/models/losses.py\n        \"\"\"", "\n", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "x_partial_recon", ",", "x_targ", ",", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerBernoulli.compute_unreduced_loss": [[197, 201], ["warnings.warn", "torch.distributions.Bernoulli().log_prob", "torch.distributions.Bernoulli().log_prob", "torch.distributions.Bernoulli().log_prob", "torch.distributions.Bernoulli().log_prob", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli"], "methods", ["None"], ["    ", "def", "compute_unreduced_loss", "(", "self", ",", "x_recon", ",", "x_targ", ")", ":", "\n", "# This is exactly the same as the BCE version, but more 'correct'.", "\n", "        ", "warnings", ".", "warn", "(", "'bernoulli not computed over logits might be inaccurate!'", ")", "\n", "return", "-", "torch", ".", "distributions", ".", "Bernoulli", "(", "probs", "=", "x_recon", ")", ".", "log_prob", "(", "x_targ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerBernoulli.compute_unreduced_loss_from_partial": [[202, 205], ["torch.distributions.Bernoulli().log_prob", "torch.distributions.Bernoulli().log_prob", "torch.distributions.Bernoulli().log_prob", "torch.distributions.Bernoulli().log_prob", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli"], "methods", ["None"], ["", "def", "compute_unreduced_loss_from_partial", "(", "self", ",", "x_partial_recon", ",", "x_targ", ")", ":", "\n", "# This is exactly the same as the BCE version, but more 'correct'.", "\n", "        ", "return", "-", "torch", ".", "distributions", ".", "Bernoulli", "(", "logits", "=", "x_partial_recon", ")", ".", "log_prob", "(", "x_targ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerContinuousBernoulli.compute_unreduced_loss": [[214, 219], ["warnings.warn", "warnings.warn", "torch.distributions.ContinuousBernoulli().log_prob", "torch.distributions.ContinuousBernoulli().log_prob", "torch.distributions.ContinuousBernoulli().log_prob", "torch.distributions.ContinuousBernoulli().log_prob", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli"], "methods", ["None"], ["def", "compute_unreduced_loss", "(", "self", ",", "x_recon", ",", "x_targ", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Using continuous bernoulli distribution for reconstruction loss. This is not yet recommended!'", ")", "\n", "warnings", ".", "warn", "(", "'continuous bernoulli not computed over logits might be inaccurate!'", ")", "\n", "# I think there is something wrong with this...", "\n", "return", "-", "torch", ".", "distributions", ".", "ContinuousBernoulli", "(", "probs", "=", "x_recon", ",", "lims", "=", "(", "0.49", ",", "0.51", ")", ")", ".", "log_prob", "(", "x_targ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerContinuousBernoulli.compute_unreduced_loss_from_partial": [[220, 224], ["warnings.warn", "torch.distributions.ContinuousBernoulli().log_prob", "torch.distributions.ContinuousBernoulli().log_prob", "torch.distributions.ContinuousBernoulli().log_prob", "torch.distributions.ContinuousBernoulli().log_prob", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli", "torch.distributions.ContinuousBernoulli"], "methods", ["None"], ["", "def", "compute_unreduced_loss_from_partial", "(", "self", ",", "x_partial_recon", ",", "x_targ", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Using continuous bernoulli distribution for reconstruction loss. This is not yet recommended!'", ")", "\n", "# I think there is something wrong with this...", "\n", "return", "-", "torch", ".", "distributions", ".", "ContinuousBernoulli", "(", "logits", "=", "x_partial_recon", ",", "lims", "=", "(", "0.49", ",", "0.51", ")", ")", ".", "log_prob", "(", "x_targ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandlerNormal.compute_unreduced_loss": [[228, 233], ["warnings.warn", "torch.distributions.Normal().log_prob", "torch.distributions.Normal().log_prob", "torch.distributions.Normal().log_prob", "torch.distributions.Normal().log_prob", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal"], "methods", ["None"], ["    ", "def", "compute_unreduced_loss", "(", "self", ",", "x_recon", ",", "x_targ", ")", ":", "\n", "# this is almost the same as MSE, but scaled with a tiny offset", "\n", "# A value for scale should actually be passed...", "\n", "        ", "warnings", ".", "warn", "(", "'Using normal distribution for reconstruction loss. This is not yet recommended!'", ")", "\n", "return", "-", "torch", ".", "distributions", ".", "Normal", "(", "x_recon", ",", "1.0", ")", ".", "log_prob", "(", "x_targ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.__init__": [[245, 272], ["reconstructions.ReconLossHandler.__init__", "isinstance", "disent.dataset.transform.FftKernel", "reconstructions.AugmentedReconLossHandler.parameters", "isinstance", "ValueError", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "recon_loss_handler", ":", "ReconLossHandler", ",", "\n", "kernel", ":", "Union", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "wrap_weight", ":", "float", "=", "1.0", ",", "\n", "aug_weight", ":", "float", "=", "1.0", ",", "\n", "normalize_mode", ":", "str", "=", "_NO_ARG", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "reduction", "=", "recon_loss_handler", ".", "_reduction", ")", "\n", "# save variables", "\n", "self", ".", "_recon_loss_handler", "=", "recon_loss_handler", "\n", "# must be a recon loss handler, but cannot nest augmented handlers", "\n", "assert", "isinstance", "(", "recon_loss_handler", ",", "ReconLossHandler", ")", "\n", "assert", "not", "isinstance", "(", "recon_loss_handler", ",", "AugmentedReconLossHandler", ")", "\n", "# deprecation error", "\n", "if", "normalize_mode", "is", "_NO_ARG", ":", "\n", "            ", "raise", "ValueError", "(", "f'default argument for normalize_mode was \"sum\", this has been deprecated and will change to \"none\" in future. Please manually override this value!'", ")", "\n", "# load the kernel", "\n", "", "self", ".", "_kernel", "=", "FftKernel", "(", "kernel", "=", "kernel", ",", "normalize_mode", "=", "normalize_mode", ")", "\n", "# kernel weighting", "\n", "assert", "0", "<=", "wrap_weight", ",", "f'loss_weight must be in the range [0, inf) but received: {repr(wrap_weight)}'", "\n", "assert", "0", "<=", "aug_weight", ",", "f'kern_weight must be in the range [0, inf) but received: {repr(aug_weight)}'", "\n", "self", ".", "_wrap_weight", "=", "wrap_weight", "\n", "self", ".", "_aug_weight", "=", "aug_weight", "\n", "# disable gradients", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.activate": [[273, 275], ["reconstructions.AugmentedReconLossHandler._recon_loss_handler.activate"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.activate"], ["", "", "def", "activate", "(", "self", ",", "x_partial", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "_recon_loss_handler", ".", "activate", "(", "x_partial", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss": [[276, 280], ["reconstructions.AugmentedReconLossHandler._recon_loss_handler.compute_unreduced_loss", "reconstructions.AugmentedReconLossHandler._recon_loss_handler.compute_unreduced_loss", "reconstructions.AugmentedReconLossHandler._kernel", "reconstructions.AugmentedReconLossHandler._kernel"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss"], ["", "def", "compute_unreduced_loss", "(", "self", ",", "x_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "wrap_loss", "=", "self", ".", "_recon_loss_handler", ".", "compute_unreduced_loss", "(", "x_recon", ",", "x_targ", ")", "\n", "aug_loss", "=", "self", ".", "_recon_loss_handler", ".", "compute_unreduced_loss", "(", "self", ".", "_kernel", "(", "x_recon", ")", ",", "self", ".", "_kernel", "(", "x_targ", ")", ")", "\n", "return", "(", "self", ".", "_wrap_weight", "*", "wrap_loss", ")", "+", "(", "self", ".", "_aug_weight", "*", "aug_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss_from_partial": [[281, 283], ["reconstructions.AugmentedReconLossHandler.compute_unreduced_loss", "reconstructions.AugmentedReconLossHandler.activate"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.activate"], ["", "def", "compute_unreduced_loss_from_partial", "(", "self", ",", "x_partial_recon", ":", "torch", ".", "Tensor", ",", "x_targ", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "compute_unreduced_loss", "(", "self", ".", "activate", "(", "x_partial_recon", ")", ",", "x_targ", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions._make_aug_recon_loss_l_w_n": [[291, 295], ["reconstructions.AugmentedReconLossHandler", "reconstructions.make_reconstruction_loss", "float", "float"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.make_reconstruction_loss"], ["", "", "def", "_make_aug_recon_loss_l_w_n", "(", "loss", ":", "str", ",", "kern", ":", "str", ",", "loss_weight", ":", "str", ",", "kernel_weight", ":", "str", ",", "normalize_mode", ":", "str", ")", ":", "\n", "    ", "def", "_loss", "(", "reduction", ":", "str", ")", ":", "\n", "        ", "return", "AugmentedReconLossHandler", "(", "make_reconstruction_loss", "(", "loss", ",", "reduction", "=", "reduction", ")", ",", "kernel", "=", "kern", ",", "wrap_weight", "=", "float", "(", "loss_weight", ")", ",", "aug_weight", "=", "float", "(", "kernel_weight", ")", ",", "normalize_mode", "=", "normalize_mode", ")", "\n", "", "return", "_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions._make_aug_recon_loss_l1_w1_n": [[297, 301], ["reconstructions.AugmentedReconLossHandler", "reconstructions.make_reconstruction_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.make_reconstruction_loss"], ["", "def", "_make_aug_recon_loss_l1_w1_n", "(", "loss", ":", "str", ",", "kern", ":", "str", ",", "normalize_mode", ":", "str", ")", ":", "\n", "    ", "def", "_loss", "(", "reduction", ":", "str", ")", ":", "\n", "        ", "return", "AugmentedReconLossHandler", "(", "make_reconstruction_loss", "(", "loss", ",", "reduction", "=", "reduction", ")", ",", "kernel", "=", "kern", ",", "wrap_weight", "=", "1.0", ",", "aug_weight", "=", "1.0", ",", "normalize_mode", "=", "normalize_mode", ")", "\n", "", "return", "_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions._make_aug_recon_loss_l1_w1_nnone": [[303, 307], ["reconstructions.AugmentedReconLossHandler", "reconstructions.make_reconstruction_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.make_reconstruction_loss"], ["", "def", "_make_aug_recon_loss_l1_w1_nnone", "(", "loss", ":", "str", ",", "kern", ":", "str", ")", ":", "\n", "    ", "def", "_loss", "(", "reduction", ":", "str", ")", ":", "\n", "        ", "return", "AugmentedReconLossHandler", "(", "make_reconstruction_loss", "(", "loss", ",", "reduction", "=", "reduction", ")", ",", "kernel", "=", "kern", ",", "wrap_weight", "=", "1.0", ",", "aug_weight", "=", "1.0", ",", "normalize_mode", "=", "'none'", ")", "\n", "", "return", "_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.make_reconstruction_loss": [[310, 312], ["None"], "function", ["None"], ["", "def", "make_reconstruction_loss", "(", "name", ":", "str", ",", "reduction", ":", "str", ")", "->", "ReconLossHandler", ":", "\n", "    ", "return", "R", ".", "RECON_LOSSES", "[", "name", "]", "(", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.util.detach_all": [[42, 46], ["tuple", "tensor.detach"], "function", ["None"], ["yield", "\n", "sys", ".", "stdout", "=", "old_stdout", "\n", "\n", "\n", "", "@", "contextmanager", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.util.compute_ave_loss": [[53, 60], ["disent.util.iters.map_all", "torch.stack().mean", "torch.stack"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.iters.map_all"], ["\n", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "temp_wd", "(", "new_wd", ")", ":", "\n", "    ", "old_wd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "new_wd", ")", "\n", "yield", "\n", "os", ".", "chdir", "(", "old_wd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.helper.util.compute_ave_loss_and_logs": [[62, 71], ["disent.util.iters.map_all", "torch.stack().mean", "disent.util.iters.aggregate_dict", "disent.util.iters.collect_dicts", "torch.stack"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.iters.map_all", "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.aggregate_dict", "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.collect_dicts"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "temp_sys_args", "(", "new_argv", ")", ":", "\n", "# TODO: should this copy values?", "\n", "    ", "old_argv", "=", "sys", ".", "argv", "\n", "sys", ".", "argv", "=", "new_argv", "\n", "yield", "\n", "sys", ".", "argv", "=", "old_argv", "\n", "\n", "\n", "", "@", "contextmanager", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.__init__": [[99, 106], ["disent.frameworks.ae._ae_mixin._AeAndVaeMixin.__init__", "_unsupervised__vae.Vae._init_ae_mixin", "disent.frameworks.helper.latent_distributions.make_latent_distribution"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin._init_ae_mixin", "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.make_latent_distribution"], ["", "def", "__init__", "(", "self", ",", "model", ":", "'AutoEncoder'", ",", "cfg", ":", "cfg", "=", "None", ",", "batch_augment", "=", "None", ")", ":", "\n", "# required_z_multiplier", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "cfg", "=", "cfg", ",", "batch_augment", "=", "batch_augment", ")", "\n", "# initialise the auto-encoder mixin (recon handler, model, enc, dec, etc.)", "\n", "self", ".", "_init_ae_mixin", "(", "model", "=", "model", ")", "\n", "# vae distribution", "\n", "self", ".", "__latents_handler", "=", "make_latent_distribution", "(", "self", ".", "cfg", ".", "latent_distribution", ",", "kl_mode", "=", "self", ".", "cfg", ".", "kl_loss_mode", ",", "reduction", "=", "self", ".", "cfg", ".", "loss_reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.latents_handler": [[107, 111], ["None"], "methods", ["None"], ["", "@", "final", "\n", "@", "property", "\n", "def", "latents_handler", "(", "self", ")", "->", "LatentDistsHandler", ":", "\n", "        ", "return", "self", ".", "__latents_handler", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.do_training_step": [[116, 164], ["_unsupervised__vae.Vae._get_xs_and_targs", "disent.util.iters.map_all", "_unsupervised__vae.Vae.hook_intercept_ds", "tuple", "disent.util.iters.map_all", "_unsupervised__vae.Vae.compute_ave_recon_loss", "_unsupervised__vae.Vae.compute_ave_reg_loss", "_unsupervised__vae.Vae.hook_compute_ave_aug_loss", "_unsupervised__vae.Vae.log_dict", "_unsupervised__vae.Vae.log_dict", "disent.frameworks.helper.util.detach_all", "d.rsample", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.ae._ae_mixin._AeAndVaeMixin._get_xs_and_targs", "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.map_all", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaGVaeMinimal.hook_intercept_ds", "home.repos.pwc.inspect_result.nmichlo_disent.util.iters.map_all", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcVae.compute_ave_recon_loss", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dipvae.DipVae.compute_ave_reg_loss", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapTripletVae.hook_compute_ave_aug_loss", "home.repos.pwc.inspect_result.nmichlo_disent.helper.util.detach_all"], ["", "@", "final", "\n", "def", "do_training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "xs", ",", "xs_targ", "=", "self", ".", "_get_xs_and_targs", "(", "batch", ",", "batch_idx", ")", "\n", "\n", "# FORWARD", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# latent distribution parameterizations", "\n", "ds_posterior", ",", "ds_prior", "=", "map_all", "(", "self", ".", "encode_dists", ",", "xs", ",", "collect_returned", "=", "True", ")", "\n", "# [HOOK] intercept latent parameterizations", "\n", "ds_posterior", ",", "ds_prior", ",", "logs_intercept_ds", "=", "self", ".", "hook_intercept_ds", "(", "ds_posterior", ",", "ds_prior", ")", "\n", "# sample from dists", "\n", "zs_sampled", "=", "tuple", "(", "d", ".", "rsample", "(", ")", "for", "d", "in", "ds_posterior", ")", "\n", "# reconstruct without the final activation", "\n", "xs_partial_recon", "=", "map_all", "(", "self", ".", "decode_partial", ",", "detach_all", "(", "zs_sampled", ",", "if_", "=", "self", ".", "cfg", ".", "detach_decoder", ")", ")", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "# LOSS", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# compute all the recon losses", "\n", "recon_loss", ",", "logs_recon", "=", "self", ".", "compute_ave_recon_loss", "(", "xs_partial_recon", ",", "xs_targ", ")", "\n", "# compute all the regularization losses", "\n", "reg_loss", ",", "logs_reg", "=", "self", ".", "compute_ave_reg_loss", "(", "ds_posterior", ",", "ds_prior", ",", "zs_sampled", ")", "\n", "# [HOOK] augment loss", "\n", "aug_loss", ",", "logs_aug", "=", "self", ".", "hook_compute_ave_aug_loss", "(", "ds_posterior", "=", "ds_posterior", ",", "ds_prior", "=", "ds_prior", ",", "zs_sampled", "=", "zs_sampled", ",", "xs_partial_recon", "=", "xs_partial_recon", ",", "xs_targ", "=", "xs_targ", ")", "\n", "# compute combined loss", "\n", "loss", "=", "0", "\n", "if", "not", "self", ".", "cfg", ".", "disable_rec_loss", ":", "loss", "+=", "recon_loss", "\n", "if", "not", "self", ".", "cfg", ".", "disable_aug_loss", ":", "loss", "+=", "aug_loss", "\n", "if", "not", "self", ".", "cfg", ".", "disable_reg_loss", ":", "loss", "+=", "reg_loss", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "# log general", "\n", "self", ".", "log_dict", "(", "{", "\n", "**", "logs_intercept_ds", ",", "\n", "**", "logs_recon", ",", "\n", "**", "logs_reg", ",", "\n", "**", "logs_aug", ",", "\n", "}", ")", "\n", "\n", "# log progress bar", "\n", "self", ".", "log_dict", "(", "{", "\n", "'recon_loss'", ":", "float", "(", "recon_loss", ")", ",", "\n", "'reg_loss'", ":", "float", "(", "reg_loss", ")", ",", "\n", "'aug_loss'", ":", "float", "(", "aug_loss", ")", ",", "\n", "}", ",", "prog_bar", "=", "True", ")", "\n", "\n", "# return values", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.hook_intercept_ds": [[169, 171], ["None"], "methods", ["None"], ["", "def", "hook_intercept_ds", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Distribution", "]", ",", "ds_prior", ":", "Sequence", "[", "Distribution", "]", ")", "->", "Tuple", "[", "Sequence", "[", "Distribution", "]", ",", "Sequence", "[", "Distribution", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "return", "ds_posterior", ",", "ds_prior", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.hook_compute_ave_aug_loss": [[172, 174], ["None"], "methods", ["None"], ["", "def", "hook_compute_ave_aug_loss", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Distribution", "]", ",", "ds_prior", ":", "Sequence", "[", "Distribution", "]", ",", "zs_sampled", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Union", "[", "torch", ".", "Tensor", ",", "Number", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "return", "0", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.compute_ave_recon_loss": [[175, 181], ["_unsupervised__vae.Vae.recon_handler.compute_ave_loss_from_partial"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_ave_loss_from_partial"], ["", "def", "compute_ave_recon_loss", "(", "self", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Union", "[", "torch", ".", "Tensor", ",", "Number", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "# compute reconstruction loss", "\n", "        ", "pixel_loss", "=", "self", ".", "recon_handler", ".", "compute_ave_loss_from_partial", "(", "xs_partial_recon", ",", "xs_targ", ")", "\n", "# return logs", "\n", "return", "pixel_loss", ",", "{", "\n", "'pixel_loss'", ":", "pixel_loss", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.compute_ave_reg_loss": [[183, 189], ["_unsupervised__vae.Vae.latents_handler.compute_ave_kl_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandler.compute_ave_kl_loss"], ["", "def", "compute_ave_reg_loss", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Distribution", "]", ",", "ds_prior", ":", "Sequence", "[", "Distribution", "]", ",", "zs_sampled", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Union", "[", "torch", ".", "Tensor", ",", "Number", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "# compute regularization loss (kl divergence)", "\n", "        ", "kl_loss", "=", "self", ".", "latents_handler", ".", "compute_ave_kl_loss", "(", "ds_posterior", ",", "ds_prior", ",", "zs_sampled", ")", "\n", "# return logs", "\n", "return", "kl_loss", ",", "{", "\n", "'kl_loss'", ":", "kl_loss", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode": [[195, 201], ["_unsupervised__vae.Vae._model.encode", "_unsupervised__vae.Vae.latents_handler.encoding_to_representation"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode", "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandlerLaplace.encoding_to_representation"], ["", "@", "final", "\n", "def", "encode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Get the deterministic latent representation (useful for visualisation)\"\"\"", "\n", "z_raw", "=", "self", ".", "_model", ".", "encode", "(", "x", ",", "chunk", "=", "True", ")", "\n", "z", "=", "self", ".", "latents_handler", ".", "encoding_to_representation", "(", "z_raw", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode": [[202, 206], ["_unsupervised__vae.Vae.recon_handler.activate", "_unsupervised__vae.Vae._model.decode"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.activate", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode"], ["", "@", "final", "\n", "def", "decode", "(", "self", ",", "z", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Decode latent vector z into reconstruction x_recon (useful for visualisation)\"\"\"", "\n", "return", "self", ".", "recon_handler", ".", "activate", "(", "self", ".", "_model", ".", "decode", "(", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.forward": [[207, 211], ["_unsupervised__vae.Vae.decode", "_unsupervised__vae.Vae.encode"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode"], ["", "@", "final", "\n", "def", "forward", "(", "self", ",", "batch", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Feed through the full deterministic model (useful for visualisation)\"\"\"", "\n", "return", "self", ".", "decode", "(", "self", ".", "encode", "(", "batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode_dists": [[216, 222], ["_unsupervised__vae.Vae._model.encode", "_unsupervised__vae.Vae.latents_handler.encoding_to_dists"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode", "home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandlerLaplace.encoding_to_dists"], ["", "@", "final", "\n", "def", "encode_dists", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "Distribution", ",", "Distribution", "]", ":", "\n", "        ", "\"\"\"Get parametrisations of the latent distributions, which are sampled from during training.\"\"\"", "\n", "z_raw", "=", "self", ".", "_model", ".", "encode", "(", "x", ",", "chunk", "=", "True", ")", "\n", "z_posterior", ",", "z_prior", "=", "self", ".", "latents_handler", ".", "encoding_to_dists", "(", "z_raw", ")", "\n", "return", "z_posterior", ",", "z_prior", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode_partial": [[223, 227], ["_unsupervised__vae.Vae._model.decode"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode"], ["", "@", "final", "\n", "def", "decode_partial", "(", "self", ",", "z", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Decode latent vector z into partial reconstructions that exclude the final activation if there is one.\"\"\"", "\n", "return", "self", ".", "_model", ".", "decode", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae.__init__": [[66, 71], ["disent.frameworks.vae._unsupervised__vae.Vae.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "self", ",", "model", ":", "'AutoEncoder'", ",", "cfg", ":", "cfg", "=", "None", ",", "batch_augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ",", "cfg", "=", "cfg", ",", "batch_augment", "=", "batch_augment", ")", "\n", "# checks", "\n", "assert", "self", ".", "cfg", ".", "info_alpha", "<=", "0", ",", "f'cfg.info_alpha must be <= zero, current value is: {self.cfg.info_alpha}'", "\n", "assert", "self", ".", "cfg", ".", "loss_reduction", "==", "'mean'", ",", "'InfoVAE only supports cfg.loss_reduction == \"mean\"'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae.compute_ave_reg_loss": [[76, 111], ["_unsupervised__infovae.InfoVae.latents_handler.compute_ave_kl_loss", "_unsupervised__infovae.InfoVae._compute_mmd", "d_prior.rsample", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandler.compute_ave_kl_loss", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._compute_mmd"], ["", "def", "compute_ave_reg_loss", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Normal", "]", ",", "ds_prior", ":", "Sequence", "[", "Normal", "]", ",", "zs_sampled", ")", ":", "\n", "        ", "\"\"\"\n        TODO: This could be wrong?\n        \"\"\"", "\n", "\n", "# only supports one input observation at the moment", "\n", "(", "d_posterior", ",", ")", ",", "(", "d_prior", ",", ")", ",", "(", "z_sampled", ",", ")", "=", "ds_posterior", ",", "ds_prior", ",", "zs_sampled", "\n", "\n", "# compute kl divergence", "\n", "# compute maximum-mean discrepancy", "\n", "kl_loss", "=", "self", ".", "latents_handler", ".", "compute_ave_kl_loss", "(", "ds_posterior", ",", "ds_prior", ",", "zs_sampled", ")", "\n", "mmd_loss", "=", "self", ".", "_compute_mmd", "(", "z_posterior_samples", "=", "z_sampled", ",", "z_prior_samples", "=", "d_prior", ".", "rsample", "(", ")", ")", "\n", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# original loss Sums Everything, we use the mean and scale everything to keep the ratios the same", "\n", "# OLD: (C*W*H) * recon_mean + (Z)         * kl_mean + (Z)         * mmd_mean", "\n", "# NEW:           recon_mean + (Z)/(C*W*H) * kl_mean + (Z)/(C*W*H) * mmd_mean", "\n", "# compute the weight", "\n", "# TODO: maybe this should be standardised to something like Z=9, W=64, H=64, C=3", "\n", "# TODO: this could be moved into other models", "\n", "reg_weight", "=", "(", "self", ".", "_model", ".", "z_size", "/", "np", ".", "prod", "(", "self", ".", "_model", ".", "x_shape", ")", ")", "if", "self", ".", "cfg", ".", "maintain_reg_ratio", "else", "1.0", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "# weight the loss terms", "\n", "kl_reg_loss", "=", "reg_weight", "*", "(", "1", "-", "self", ".", "cfg", ".", "info_alpha", ")", "*", "kl_loss", "\n", "mmd_reg_loss", "=", "reg_weight", "*", "(", "self", ".", "cfg", ".", "info_alpha", "+", "self", ".", "cfg", ".", "info_lambda", "-", "1", ")", "*", "mmd_loss", "\n", "# compute combined loss", "\n", "combined_loss", "=", "kl_reg_loss", "+", "mmd_reg_loss", "\n", "\n", "# return logs", "\n", "return", "combined_loss", ",", "{", "\n", "'kl_loss'", ":", "kl_loss", ",", "\n", "'kl_reg_loss'", ":", "kl_reg_loss", ",", "\n", "'mmd_loss'", ":", "mmd_loss", ",", "\n", "'mmd_reg_loss'", ":", "mmd_reg_loss", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._compute_mmd": [[113, 128], ["_unsupervised__infovae.InfoVae._compute_unbiased_mean", "_unsupervised__infovae.InfoVae._compute_unbiased_mean", "_unsupervised__infovae.InfoVae._compute_unbiased_mean", "_unsupervised__infovae.InfoVae._compute_kernel", "_unsupervised__infovae.InfoVae._compute_kernel", "_unsupervised__infovae.InfoVae._compute_kernel"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._compute_unbiased_mean", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._compute_unbiased_mean", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._compute_unbiased_mean", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._compute_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._compute_kernel", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._compute_kernel"], ["", "def", "_compute_mmd", "(", "self", ",", "z_posterior_samples", ":", "Tensor", ",", "z_prior_samples", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        (\u2713) visual inspection against:\n            https://en.wikipedia.org/wiki/Kernel_embedding_of_distributions#Kernel_two-sample_test\n        \"\"\"", "\n", "# check sizes - these conditions can be relaxed in practice, just for debugging", "\n", "assert", "z_posterior_samples", ".", "ndim", "==", "2", "\n", "assert", "z_posterior_samples", ".", "shape", "==", "z_prior_samples", ".", "shape", "\n", "# compute kernels: (B, Z) -> (,)", "\n", "mean_pz_pz", "=", "self", ".", "_compute_unbiased_mean", "(", "self", ".", "_compute_kernel", "(", "z_prior_samples", ",", "z_prior_samples", ")", ",", "unbaised", "=", "True", ")", "\n", "mean_pz_qz", "=", "self", ".", "_compute_unbiased_mean", "(", "self", ".", "_compute_kernel", "(", "z_prior_samples", ",", "z_posterior_samples", ")", ",", "unbaised", "=", "False", ")", "\n", "mean_qz_qz", "=", "self", ".", "_compute_unbiased_mean", "(", "self", ".", "_compute_kernel", "(", "z_posterior_samples", ",", "z_posterior_samples", ")", ",", "unbaised", "=", "True", ")", "\n", "# maximum-mean discrepancy", "\n", "mmd", "=", "mean_pz_pz", "-", "2", "*", "mean_pz_qz", "+", "mean_qz_qz", "\n", "return", "mmd", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._compute_unbiased_mean": [[129, 149], ["kernel.mean", "kernel.sum", "torch.diagonal().sum", "torch.diagonal"], "methods", ["None"], ["", "def", "_compute_unbiased_mean", "(", "self", ",", "kernel", ":", "Tensor", ",", "unbaised", ":", "bool", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        (\u2713) visual inspection against equation (8) of\n            Training generative neural networks via Maximum Mean Discrepancy optimization\n            https://arxiv.org/pdf/1505.03906.pdf\n        \"\"\"", "\n", "# (B, B) == (N, M) ie. N=B and M=B", "\n", "N", ",", "M", "=", "kernel", ".", "shape", "\n", "assert", "N", "==", "M", "\n", "# compute mean along first and second dims", "\n", "if", "unbaised", ":", "\n", "# diagonal stacks values along last dimension ie. (B, B, Z) -> (Z, B) or (B, B) -> (B,)", "\n", "            ", "sum_kernel", "=", "kernel", ".", "sum", "(", "dim", "=", "(", "0", ",", "1", ")", ")", "-", "torch", ".", "diagonal", "(", "kernel", ",", "dim1", "=", "0", ",", "dim2", "=", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "# (B, B,) -> (,)", "\n", "# compute unbiased mean", "\n", "mean_kernel", "=", "sum_kernel", "/", "(", "N", "*", "(", "N", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean_kernel", "=", "kernel", ".", "mean", "(", "dim", "=", "(", "0", ",", "1", ")", ")", "# (B, B,) -> (,)", "\n", "# check size again", "\n", "", "assert", "mean_kernel", ".", "ndim", "==", "0", "\n", "return", "mean_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._compute_kernel": [[150, 173], ["z0.expand.expand.unsqueeze", "z1.expand.expand.unsqueeze", "z0.expand.expand.expand", "z1.expand.expand.expand", "_unsupervised__infovae.InfoVae._kernel_rbf", "KeyError"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._kernel_rbf"], ["", "def", "_compute_kernel", "(", "self", ",", "z0", ":", "Tensor", ",", "z1", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        (\u2713) visual inspection against:\n            https://en.wikipedia.org/wiki/Kernel_embedding_of_distributions#Kernel_two-sample_test\n        \"\"\"", "\n", "batch_size", ",", "z_size", "=", "z0", ".", "shape", "\n", "# convert tensors", "\n", "z0", "=", "z0", ".", "unsqueeze", "(", "-", "2", ")", "# convert to column tensor  # [B, Z] -> [B, 1, Z]", "\n", "z1", "=", "z1", ".", "unsqueeze", "(", "-", "3", ")", "# convert to row tensor     # [B, Z] -> [1, B, Z]", "\n", "# in our case this is not required, however it is useful", "\n", "# if z0 and z1 have different sizes along the 0th dimension.", "\n", "z0", "=", "z0", ".", "expand", "(", "batch_size", ",", "batch_size", ",", "z_size", ")", "# [B, 1, Z] -> [B, B, Z]", "\n", "z1", "=", "z1", ".", "expand", "(", "batch_size", ",", "batch_size", ",", "z_size", ")", "# [1, B, Z] -> [B, B, Z]", "\n", "# compute correct kernel", "\n", "if", "self", ".", "cfg", ".", "info_kernel", "==", "'rbf'", ":", "\n", "            ", "kernel", "=", "self", ".", "_kernel_rbf", "(", "z0", ",", "z1", ")", "\n", "# elif self.cfg.info_kernel == 'imq':", "\n", "#     kernel = self._kernel_imq(z0, z1)", "\n", "", "else", ":", "# pragma: no cover", "\n", "            ", "raise", "KeyError", "(", "f'invalid cfg.info_kernel: {self.cfg.info_kernel}'", ")", "\n", "# check result size", "\n", "", "assert", "kernel", ".", "shape", "==", "(", "batch_size", ",", "batch_size", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__infovae.InfoVae._kernel_rbf": [[174, 191], ["torch.exp"], "methods", ["None"], ["", "def", "_kernel_rbf", "(", "self", ",", "x", ":", "Tensor", ",", "y", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Radial Basis Function (RBF) Kernel a.k.a. Gaussian Kernel\n        k(x, y) = exp(- ||x - y||^2 / (2*sigma^2))\n\n        (\u2713) visual inspection against:\n            https://en.wikipedia.org/wiki/Reproducing_kernel_Hilbert_space#Radial_basis_function_kernels\n\n        TODO: how do we arrive at the value for sigma?\n              - multiplying sigma by z_size is that same as computing .mean(dim=-1)\n                instead of the current sum\n        TODO: do we treat each latent variable separately? or as vectors like now due to the .sum?\n        \"\"\"", "\n", "z_size", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "sigma", "=", "2", "*", "self", ".", "cfg", ".", "z_var", "*", "z_size", "\n", "kernel", "=", "torch", ".", "exp", "(", "-", "(", "(", "x", "-", "y", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "sigma", ")", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.hook_intercept_ds": [[69, 88], ["_weaklysupervised__adavae.AdaVae.compute_shared_mask_from_posteriors", "_weaklysupervised__adavae.AdaVae.make_shared_posteriors", "_weaklysupervised__adavae.AdaVae.sum().float().mean", "_weaklysupervised__adavae.AdaVae.sum().float", "_weaklysupervised__adavae.AdaVae.sum"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_posteriors", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.make_shared_posteriors"], ["", "def", "hook_intercept_ds", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Distribution", "]", ",", "ds_prior", ":", "Sequence", "[", "Distribution", "]", ")", "->", "Tuple", "[", "Sequence", "[", "Distribution", "]", ",", "Sequence", "[", "Distribution", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "\"\"\"\n        Adaptive VAE Glue Method, putting the various components together\n        1. find differences between deltas\n        2. estimate a threshold for differences\n        3. compute a shared mask from this threshold\n        4. average together elements that should be considered shared\n\n        (\u2713) Visual inspection against reference implementation:\n            https://github.com/google-research/disentanglement_lib (aggregate_argmax)\n        \"\"\"", "\n", "d0_posterior", ",", "d1_posterior", "=", "ds_posterior", "\n", "# shared elements that need to be averaged, computed per pair in the batch.", "\n", "share_mask", "=", "self", ".", "compute_shared_mask_from_posteriors", "(", "d0_posterior", ",", "d1_posterior", ",", "thresh_mode", "=", "self", ".", "cfg", ".", "ada_thresh_mode", ",", "ratio", "=", "self", ".", "cfg", ".", "ada_thresh_ratio", ")", "\n", "# compute average posteriors", "\n", "new_ds_posterior", "=", "self", ".", "make_shared_posteriors", "(", "d0_posterior", ",", "d1_posterior", ",", "share_mask", ",", "average_mode", "=", "self", ".", "cfg", ".", "ada_average_mode", ")", "\n", "# return new args & generate logs", "\n", "return", "new_ds_posterior", ",", "ds_prior", ",", "{", "\n", "'shared'", ":", "share_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_deltas_from_posteriors": [[94, 122], ["torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "cls.compute_deltas_from_zs", "cls.compute_deltas_from_zs", "KeyError", "d1_posterior.rsample", "d0_posterior.rsample", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_deltas_from_zs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_deltas_from_zs"], ["", "@", "classmethod", "\n", "def", "compute_deltas_from_posteriors", "(", "cls", ",", "d0_posterior", ":", "Distribution", ",", "d1_posterior", ":", "Distribution", ",", "thresh_mode", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        (\u2713) Visual inspection against reference implementation\n        https://github.com/google-research/disentanglement_lib (compute_kl)\n        - difference is that they don't multiply by 0.5 to get true kl, but that's not needed\n\n        TODO: this might be numerically unstable with f32 passed to distributions\n        \"\"\"", "\n", "# shared elements that need to be averaged, computed per pair in the batch.", "\n", "# [\ud835\udeff_i ...]", "\n", "if", "thresh_mode", "==", "'kl'", ":", "\n", "# ORIGINAL", "\n", "            ", "deltas", "=", "kl_divergence", "(", "d1_posterior", ",", "d0_posterior", ")", "\n", "", "elif", "thresh_mode", "==", "'symmetric_kl'", ":", "\n", "# FROM: https://openreview.net/pdf?id=8VXvj1QNRl1", "\n", "            ", "kl_deltas_d1_d0", "=", "kl_divergence", "(", "d1_posterior", ",", "d0_posterior", ")", "\n", "kl_deltas_d0_d1", "=", "kl_divergence", "(", "d0_posterior", ",", "d1_posterior", ")", "\n", "deltas", "=", "(", "0.5", "*", "kl_deltas_d1_d0", ")", "+", "(", "0.5", "*", "kl_deltas_d0_d1", ")", "\n", "", "elif", "thresh_mode", "==", "'dist'", ":", "\n", "            ", "deltas", "=", "cls", ".", "compute_deltas_from_zs", "(", "d1_posterior", ".", "mean", ",", "d0_posterior", ".", "mean", ")", "\n", "", "elif", "thresh_mode", "==", "'sampled_dist'", ":", "\n", "            ", "deltas", "=", "cls", ".", "compute_deltas_from_zs", "(", "d1_posterior", ".", "rsample", "(", ")", ",", "d0_posterior", ".", "rsample", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "f'invalid thresh_mode: {repr(thresh_mode)}'", ")", "\n", "\n", "# return values", "\n", "", "return", "deltas", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_posteriors": [[123, 126], ["cls.estimate_shared_mask", "cls.compute_deltas_from_posteriors"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.estimate_shared_mask", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_deltas_from_posteriors"], ["", "@", "classmethod", "\n", "def", "compute_shared_mask_from_posteriors", "(", "cls", ",", "d0_posterior", ":", "Distribution", ",", "d1_posterior", ":", "Distribution", ",", "thresh_mode", ":", "str", ",", "ratio", "=", "0.5", ")", ":", "\n", "        ", "return", "cls", ".", "estimate_shared_mask", "(", "z_deltas", "=", "cls", ".", "compute_deltas_from_posteriors", "(", "d0_posterior", ",", "d1_posterior", ",", "thresh_mode", "=", "thresh_mode", ")", ",", "ratio", "=", "ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.make_shared_posteriors": [[127, 136], ["_weaklysupervised__adavae.AdaVae.compute_average_distribution", "torch.distributions.Normal", "torch.distributions.Normal", "torch.where", "torch.where", "torch.where", "torch.where"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_average_distribution"], ["", "@", "classmethod", "\n", "def", "make_shared_posteriors", "(", "cls", ",", "d0_posterior", ":", "Normal", ",", "d1_posterior", ":", "Normal", ",", "share_mask", ":", "torch", ".", "Tensor", ",", "average_mode", ":", "str", ")", "->", "Tuple", "[", "Normal", ",", "Normal", "]", ":", "\n", "# compute average posterior", "\n", "        ", "ave_posterior", "=", "AdaVae", ".", "compute_average_distribution", "(", "d0_posterior", "=", "d0_posterior", ",", "d1_posterior", "=", "d1_posterior", ",", "average_mode", "=", "average_mode", ")", "\n", "# select shared elements", "\n", "ave_d0_posterior", "=", "Normal", "(", "loc", "=", "torch", ".", "where", "(", "share_mask", ",", "ave_posterior", ".", "loc", ",", "d0_posterior", ".", "loc", ")", ",", "scale", "=", "torch", ".", "where", "(", "share_mask", ",", "ave_posterior", ".", "scale", ",", "d0_posterior", ".", "scale", ")", ")", "\n", "ave_d1_posterior", "=", "Normal", "(", "loc", "=", "torch", ".", "where", "(", "share_mask", ",", "ave_posterior", ".", "loc", ",", "d1_posterior", ".", "loc", ")", ",", "scale", "=", "torch", ".", "where", "(", "share_mask", ",", "ave_posterior", ".", "scale", ",", "d1_posterior", ".", "scale", ")", ")", "\n", "# return values", "\n", "return", "ave_d0_posterior", ",", "ave_d1_posterior", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_deltas_from_zs": [[141, 144], ["torch.abs"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "compute_deltas_from_zs", "(", "cls", ",", "z0", ":", "torch", ".", "Tensor", ",", "z1", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "torch", ".", "abs", "(", "z0", "-", "z1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs": [[145, 148], ["cls.estimate_shared_mask", "cls.compute_deltas_from_zs"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.estimate_shared_mask", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_deltas_from_zs"], ["", "@", "classmethod", "\n", "def", "compute_shared_mask_from_zs", "(", "cls", ",", "z0", ":", "torch", ".", "Tensor", ",", "z1", ":", "torch", ".", "Tensor", ",", "ratio", ":", "float", "=", "0.5", ")", ":", "\n", "        ", "return", "cls", ".", "estimate_shared_mask", "(", "z_deltas", "=", "cls", ".", "compute_deltas_from_zs", "(", "z0", ",", "z1", ")", ",", "ratio", "=", "ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.make_shared_zs": [[149, 157], ["torch.where", "torch.where"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "make_shared_zs", "(", "cls", ",", "z0", ":", "torch", ".", "Tensor", ",", "z1", ":", "torch", ".", "Tensor", ",", "share_mask", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# compute average values", "\n", "        ", "ave", "=", "0.5", "*", "z0", "+", "0.5", "*", "z1", "\n", "# select shared elements", "\n", "ave_z0", "=", "torch", ".", "where", "(", "share_mask", ",", "ave", ",", "z0", ")", "\n", "ave_z1", "=", "torch", ".", "where", "(", "share_mask", ",", "ave", ",", "z1", ")", "\n", "return", "ave_z0", ",", "ave_z1", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.estimate_shared_mask": [[162, 191], ["torch.lerp", "z_deltas.max", "z_deltas.min", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.schedule.lerp.lerp"], ["", "@", "classmethod", "\n", "def", "estimate_shared_mask", "(", "cls", ",", "z_deltas", ":", "torch", ".", "Tensor", ",", "ratio", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Core of the adaptive VAE algorithm, estimating which factors\n        have changed (or in this case which are shared and should remained unchanged\n        by being be averaged) between pairs of observations.\n        - custom ratio is an addition, when ratio==0.5 then\n          this is equivalent to the original implementation.\n\n        (\u2713) Visual inspection against reference implementation:\n            https://github.com/google-research/disentanglement_lib (aggregate_argmax)\n            - Implementation conversion is non-trivial, items are histogram binned.\n              If we are in the second histogram bin, ie. 1, then kl_deltas <= kl_threshs\n            - TODO: (aggregate_labels) An alternative mode exists where you can bind the\n                    latent variables to any individual label, by one-hot encoding which\n                    latent variable should not be shared: \"enforce that each dimension\n                    of the latent code learns one factor (dimension 1 learns factor 1)\n                    and enforce that each factor of variation is encoded in a single\n                    dimension.\"\n        \"\"\"", "\n", "assert", "0", "<=", "ratio", "<=", "1", ",", "f'ratio must be in the range: 0 <= ratio <= 1, got: {repr(ratio)}'", "\n", "# threshold \u03c4", "\n", "maximums", "=", "z_deltas", ".", "max", "(", "axis", "=", "1", ",", "keepdim", "=", "True", ")", ".", "values", "# (B, 1)", "\n", "minimums", "=", "z_deltas", ".", "min", "(", "axis", "=", "1", ",", "keepdim", "=", "True", ")", ".", "values", "# (B, 1)", "\n", "z_threshs", "=", "torch", ".", "lerp", "(", "minimums", ",", "maximums", ",", "weight", "=", "ratio", ")", "# (B, 1)", "\n", "# true if 'unchanged' and should be average", "\n", "shared_mask", "=", "z_deltas", "<", "z_threshs", "# broadcast (B, Z) and (B, 1) -> (B, Z)", "\n", "# return", "\n", "return", "shared_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_average_distribution": [[196, 201], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "compute_average_distribution", "(", "cls", ",", "d0_posterior", ":", "Normal", ",", "d1_posterior", ":", "Normal", ",", "average_mode", ":", "str", ")", "->", "Normal", ":", "\n", "        ", "return", "_COMPUTE_AVE_FNS", "[", "average_mode", "]", "(", "\n", "d0_posterior", "=", "d0_posterior", ",", "\n", "d1_posterior", "=", "d1_posterior", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaGVaeMinimal.hook_intercept_ds": [[294, 339], ["isinstance", "isinstance", "torch.where", "torch.where", "torch.where", "torch.where", "torch.distributions.Normal", "torch.distributions.Normal", "z_deltas.min", "z_deltas.max", "type", "type", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "share_mask.sum().float().mean", "share_mask.sum().float", "share_mask.sum"], "methods", ["None"], ["def", "hook_intercept_ds", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Distribution", "]", ",", "ds_prior", ":", "Sequence", "[", "Distribution", "]", ")", "->", "Tuple", "[", "Sequence", "[", "Distribution", "]", ",", "Sequence", "[", "Distribution", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "\"\"\"\n        Adaptive VAE Method, putting the various components together\n            1. compute differences between representations\n            2. estimate a threshold for differences\n            3. compute a shared mask from this threshold\n            4. average together elements that are marked as shared\n\n        (x) Visual inspection against reference implementation:\n            https://github.com/google-research/disentanglement_lib (aggregate_argmax)\n        \"\"\"", "\n", "d0_posterior", ",", "d1_posterior", "=", "ds_posterior", "\n", "assert", "isinstance", "(", "d0_posterior", ",", "Normal", ")", ",", "f'posterior distributions must be {Normal.__name__} distributions, got: {type(d0_posterior)}'", "\n", "assert", "isinstance", "(", "d1_posterior", ",", "Normal", ")", ",", "f'posterior distributions must be {Normal.__name__} distributions, got: {type(d1_posterior)}'", "\n", "\n", "# [1] symmetric KL Divergence FROM: https://openreview.net/pdf?id=8VXvj1QNRl1", "\n", "z_deltas", "=", "0.5", "*", "kl_divergence", "(", "d1_posterior", ",", "d0_posterior", ")", "+", "0.5", "*", "kl_divergence", "(", "d0_posterior", ",", "d1_posterior", ")", "\n", "\n", "# [2] estimate threshold from deltas", "\n", "z_deltas_min", "=", "z_deltas", ".", "min", "(", "axis", "=", "1", ",", "keepdim", "=", "True", ")", ".", "values", "# (B, 1)", "\n", "z_deltas_max", "=", "z_deltas", ".", "max", "(", "axis", "=", "1", ",", "keepdim", "=", "True", ")", ".", "values", "# (B, 1)", "\n", "z_thresh", "=", "(", "0.5", "*", "z_deltas_min", "+", "0.5", "*", "z_deltas_max", ")", "# (B, 1)", "\n", "\n", "# [3] shared elements that need to be averaged, computed per pair in the batch", "\n", "share_mask", "=", "z_deltas", "<", "z_thresh", "# broadcast (B, Z) and (B, 1) to get (B, Z)", "\n", "\n", "# [4.a] compute average representations", "\n", "# - this is the only difference between the Ada-ML-VAE", "\n", "ave_mean", "=", "(", "0.5", "*", "d0_posterior", ".", "mean", "+", "0.5", "*", "d1_posterior", ".", "mean", ")", "\n", "ave_std", "=", "(", "0.5", "*", "d0_posterior", ".", "variance", "+", "0.5", "*", "d1_posterior", ".", "variance", ")", "**", "0.5", "\n", "\n", "# [4.b] select shared or original values based on mask", "\n", "z0_mean", "=", "torch", ".", "where", "(", "share_mask", ",", "ave_mean", ",", "d0_posterior", ".", "loc", ")", "\n", "z1_mean", "=", "torch", ".", "where", "(", "share_mask", ",", "ave_mean", ",", "d1_posterior", ".", "loc", ")", "\n", "z0_std", "=", "torch", ".", "where", "(", "share_mask", ",", "ave_std", ",", "d0_posterior", ".", "scale", ")", "\n", "z1_std", "=", "torch", ".", "where", "(", "share_mask", ",", "ave_std", ",", "d1_posterior", ".", "scale", ")", "\n", "\n", "# construct distributions", "\n", "ave_d0_posterior", "=", "Normal", "(", "loc", "=", "z0_mean", ",", "scale", "=", "z0_std", ")", "\n", "ave_d1_posterior", "=", "Normal", "(", "loc", "=", "z1_mean", ",", "scale", "=", "z1_std", ")", "\n", "new_ds_posterior", "=", "(", "ave_d0_posterior", ",", "ave_d1_posterior", ")", "\n", "\n", "# [done] return new args & generate logs", "\n", "return", "new_ds_posterior", ",", "ds_prior", ",", "{", "\n", "'shared'", ":", "share_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.compute_average_gvae_std": [[209, 224], ["isinstance", "isinstance", "torch.distributions.Normal", "type", "type"], "function", ["None"], ["", "", "def", "compute_average_gvae_std", "(", "d0_posterior", ":", "Normal", ",", "d1_posterior", ":", "Normal", ")", "->", "Normal", ":", "\n", "    ", "\"\"\"\n    Compute the arithmetic mean of the encoder distributions.\n    - This is a custom function based on the Ada-GVAE averaging,\n      except over the standard deviation instead of the variance!\n\n    *NB* this is un-official!\n    \"\"\"", "\n", "assert", "isinstance", "(", "d0_posterior", ",", "Normal", ")", ",", "f'posterior distributions must be {Normal.__name__} distributions, got: {type(d0_posterior)}'", "\n", "assert", "isinstance", "(", "d1_posterior", ",", "Normal", ")", ",", "f'posterior distributions must be {Normal.__name__} distributions, got: {type(d1_posterior)}'", "\n", "# averages", "\n", "ave_std", "=", "0.5", "*", "(", "d0_posterior", ".", "stddev", "+", "d1_posterior", ".", "stddev", ")", "\n", "ave_mean", "=", "0.5", "*", "(", "d0_posterior", ".", "mean", "+", "d1_posterior", ".", "mean", ")", "\n", "# done!", "\n", "return", "Normal", "(", "loc", "=", "ave_mean", ",", "scale", "=", "ave_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.compute_average_gvae": [[226, 241], ["isinstance", "isinstance", "torch.distributions.Normal", "type", "type", "torch.sqrt"], "function", ["None"], ["", "def", "compute_average_gvae", "(", "d0_posterior", ":", "Normal", ",", "d1_posterior", ":", "Normal", ")", "->", "Normal", ":", "\n", "    ", "\"\"\"\n    Compute the arithmetic mean of the encoder distributions.\n    - Ada-GVAE Averaging function\n\n    (\u2713) Visual inspection against reference implementation:\n        https://github.com/google-research/disentanglement_lib (GroupVAEBase.model_fn)\n    \"\"\"", "\n", "assert", "isinstance", "(", "d0_posterior", ",", "Normal", ")", ",", "f'posterior distributions must be {Normal.__name__} distributions, got: {type(d0_posterior)}'", "\n", "assert", "isinstance", "(", "d1_posterior", ",", "Normal", ")", ",", "f'posterior distributions must be {Normal.__name__} distributions, got: {type(d1_posterior)}'", "\n", "# averages", "\n", "ave_var", "=", "0.5", "*", "(", "d0_posterior", ".", "variance", "+", "d1_posterior", ".", "variance", ")", "\n", "ave_mean", "=", "0.5", "*", "(", "d0_posterior", ".", "mean", "+", "d1_posterior", ".", "mean", ")", "\n", "# done!", "\n", "return", "Normal", "(", "loc", "=", "ave_mean", ",", "scale", "=", "torch", ".", "sqrt", "(", "ave_var", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.compute_average_ml_vae": [[243, 266], ["isinstance", "isinstance", "torch.distributions.Normal", "d0_posterior.variance.reciprocal", "d1_posterior.variance.reciprocal", "type", "type", "torch.sqrt"], "function", ["None"], ["", "def", "compute_average_ml_vae", "(", "d0_posterior", ":", "Normal", ",", "d1_posterior", ":", "Normal", ")", "->", "Normal", ":", "\n", "    ", "\"\"\"\n    Compute the product of the encoder distributions.\n    - Ada-ML-VAE Averaging function\n\n    (\u2713) Visual inspection against reference implementation:\n        https://github.com/google-research/disentanglement_lib (MLVae.model_fn)\n\n    # TODO: recheck\n    \"\"\"", "\n", "assert", "isinstance", "(", "d0_posterior", ",", "Normal", ")", ",", "f'posterior distributions must be {Normal.__name__} distributions, got: {type(d0_posterior)}'", "\n", "assert", "isinstance", "(", "d1_posterior", ",", "Normal", ")", ",", "f'posterior distributions must be {Normal.__name__} distributions, got: {type(d1_posterior)}'", "\n", "# Diagonal matrix inverse: E^-1 = 1 / E", "\n", "# https://proofwiki.org/wiki/Inverse_of_Diagonal_Matrix", "\n", "z0_invvar", ",", "z1_invvar", "=", "d0_posterior", ".", "variance", ".", "reciprocal", "(", ")", ",", "d1_posterior", ".", "variance", ".", "reciprocal", "(", ")", "\n", "# average var: E^-1 = E1^-1 + E2^-1", "\n", "# disentanglement_lib: ave_var = 2 * z0_var * z1_var / (z0_var + z1_var)", "\n", "ave_var", "=", "2", "*", "(", "z0_invvar", "+", "z1_invvar", ")", ".", "reciprocal", "(", ")", "\n", "# average mean: u^T = (u1^T E1^-1 + u2^T E2^-1) E", "\n", "# disentanglement_lib: ave_mean = (z0_mean/z0_var + z1_mean/z1_var) * ave_var * 0.5", "\n", "ave_mean", "=", "(", "d0_posterior", ".", "mean", "*", "z0_invvar", "+", "d1_posterior", ".", "mean", "*", "z1_invvar", ")", "*", "ave_var", "*", "0.5", "\n", "# done!", "\n", "return", "Normal", "(", "loc", "=", "ave_mean", ",", "scale", "=", "torch", ".", "sqrt", "(", "ave_var", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcVae.__init__": [[72, 77], ["disent.frameworks.vae._unsupervised__betavae.BetaVae.__init__", "_unsupervised__dfcvae.DfcLossModule"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "self", ",", "model", ":", "'AutoEncoder'", ",", "cfg", ":", "cfg", "=", "None", ",", "batch_augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ",", "cfg", "=", "cfg", ",", "batch_augment", "=", "batch_augment", ")", "\n", "# make dfc loss", "\n", "# TODO: this should be converted to a reconstruction loss handler that wraps another handler", "\n", "self", ".", "_dfc_loss", "=", "DfcLossModule", "(", "feature_layers", "=", "self", ".", "cfg", ".", "feature_layers", ",", "input_mode", "=", "self", ".", "cfg", ".", "feature_inputs_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcVae.compute_ave_recon_loss": [[82, 96], ["_unsupervised__dfcvae.DfcVae.recon_handler.compute_ave_loss_from_partial", "_unsupervised__dfcvae.DfcVae.recon_handler.activate_all", "disent.frameworks.helper.util.compute_ave_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_ave_loss_from_partial", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.activate_all", "home.repos.pwc.inspect_result.nmichlo_disent.helper.util.compute_ave_loss"], ["", "def", "compute_ave_recon_loss", "(", "self", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Union", "[", "torch", ".", "Tensor", ",", "Number", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "# compute ave reconstruction loss", "\n", "        ", "pixel_loss", "=", "self", ".", "recon_handler", ".", "compute_ave_loss_from_partial", "(", "xs_partial_recon", ",", "xs_targ", ")", "# (DIFFERENCE: 1)", "\n", "# compute ave deep features loss", "\n", "xs_recon", "=", "self", ".", "recon_handler", ".", "activate_all", "(", "xs_partial_recon", ")", "\n", "feature_loss", "=", "compute_ave_loss", "(", "self", ".", "_dfc_loss", ".", "compute_loss", ",", "xs_recon", ",", "xs_targ", ",", "reduction", "=", "self", ".", "cfg", ".", "loss_reduction", ")", "\n", "# reconstruction error", "\n", "# TODO: not in reference implementation, but terms should be weighted", "\n", "# TODO: not in reference but feature loss is not scaled properly", "\n", "recon_loss", "=", "(", "pixel_loss", "+", "feature_loss", ")", "*", "0.5", "\n", "# return logs", "\n", "return", "recon_loss", ",", "{", "\n", "'pixel_loss'", ":", "pixel_loss", ",", "\n", "'feature_loss'", ":", "feature_loss", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcLossModule.__init__": [[117, 134], ["super().__init__", "set", "torchvision.models.vgg19_bn", "_unsupervised__dfcvae.DfcLossModule.feature_network.parameters", "_unsupervised__dfcvae.DfcLossModule.feature_network.eval", "str"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "feature_layers", ":", "Optional", "[", "List", "[", "Union", "[", "str", ",", "int", "]", "]", "]", "=", "None", ",", "input_mode", ":", "str", "=", "'none'", ")", ":", "\n", "        ", "\"\"\"\n        :param feature_layers: List of string of IDs of feature layers in pretrained model\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# feature layers to use", "\n", "self", ".", "feature_layers", "=", "set", "(", "[", "'14'", ",", "'24'", ",", "'34'", ",", "'43'", "]", "if", "(", "feature_layers", "is", "None", ")", "else", "[", "str", "(", "l", ")", "for", "l", "in", "feature_layers", "]", ")", "\n", "# feature network", "\n", "self", ".", "feature_network", "=", "vgg19_bn", "(", "pretrained", "=", "True", ")", "\n", "# Freeze the pretrained feature network", "\n", "for", "param", "in", "self", ".", "feature_network", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "# Evaluation Mode", "\n", "", "self", ".", "feature_network", ".", "eval", "(", ")", "\n", "# input node", "\n", "assert", "input_mode", "in", "{", "'none'", ",", "'clamp'", ",", "'assert'", "}", "\n", "self", ".", "input_mode", "=", "input_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcLossModule.compute_loss": [[135, 150], ["_unsupervised__dfcvae.DfcLossModule._extract_features", "_unsupervised__dfcvae.DfcLossModule._extract_features", "zip", "torch.nn.functional.mse_loss", "disent.nn.loss.reduction.get_mean_loss_scale"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcLossModule._extract_features", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcLossModule._extract_features", "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.get_mean_loss_scale"], ["", "def", "compute_loss", "(", "self", ",", "x_recon", ",", "x_targ", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "\"\"\"\n        x_recon and x_targ data should be an unnormalized RGB batch of\n        data [B x C x H x W] in the range [0, 1].\n        \"\"\"", "\n", "features_recon", "=", "self", ".", "_extract_features", "(", "x_recon", ")", "\n", "features_targ", "=", "self", ".", "_extract_features", "(", "x_targ", ")", "\n", "# compute losses", "\n", "# TODO: not in reference implementation, but consider calculating mean feature loss rather than sum", "\n", "feature_loss", "=", "0.0", "\n", "for", "(", "f_recon", ",", "f_targ", ")", "in", "zip", "(", "features_recon", ",", "features_targ", ")", ":", "\n", "            ", "feature_loss", "+=", "F", ".", "mse_loss", "(", "f_recon", ",", "f_targ", ",", "reduction", "=", "'mean'", ")", "\n", "# scale the loss accordingly", "\n", "# (DIFFERENCE: 2)", "\n", "", "return", "feature_loss", "*", "get_mean_loss_scale", "(", "x_targ", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcLossModule._extract_features": [[151, 168], ["_unsupervised__dfcvae.DfcLossModule._process_inputs", "torchvision.transforms.functional.normalize", "_unsupervised__dfcvae.DfcLossModule.feature_network.features._modules.items", "module", "features.append"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcLossModule._process_inputs", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "_extract_features", "(", "self", ",", "inputs", ":", "Tensor", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Extracts the features from the pretrained model\n        at the layers indicated by feature_layers.\n        :param inputs: (Tensor) [B x C x H x W] unnormalised in the range [0, 1].\n        :return: List of the extracted features\n        \"\"\"", "\n", "inputs", "=", "self", ".", "_process_inputs", "(", "inputs", ")", "\n", "# normalise: https://pytorch.org/docs/stable/torchvision/models.html", "\n", "result", "=", "torchvision", ".", "transforms", ".", "functional", ".", "normalize", "(", "inputs", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "# calculate all features", "\n", "features", "=", "[", "]", "\n", "for", "(", "key", ",", "module", ")", "in", "self", ".", "feature_network", ".", "features", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "result", "=", "module", "(", "result", ")", "\n", "if", "key", "in", "self", ".", "feature_layers", ":", "\n", "                ", "features", ".", "append", "(", "result", ")", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dfcvae.DfcLossModule._process_inputs": [[169, 184], ["disent.dataset.transform.functional.check_tensor", "torch.clamp.repeat", "torch.clamp", "KeyError", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.transform.functional.check_tensor"], ["", "def", "_process_inputs", "(", "self", ",", "inputs", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "# check the input tensor", "\n", "        ", "if", "self", ".", "input_mode", "==", "'assert'", ":", "\n", "            ", "inputs", "=", "check_tensor", "(", "inputs", ",", "low", "=", "0", ",", "high", "=", "1", ",", "dtype", "=", "None", ")", "\n", "", "elif", "self", ".", "input_mode", "==", "'clamp'", ":", "\n", "            ", "inputs", "=", "torch", ".", "clamp", "(", "inputs", ",", "0", ",", "1", ")", "\n", "", "elif", "self", ".", "input_mode", "!=", "'none'", ":", "\n", "            ", "raise", "KeyError", "(", "f'invalid input_mode={repr(self.input_mode)}'", ")", "\n", "# repeat if missing dimensions, supports C in [1, 3]", "\n", "", "B", ",", "C", ",", "H", ",", "W", "=", "inputs", ".", "shape", "\n", "if", "C", "==", "1", ":", "\n", "            ", "inputs", "=", "inputs", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "", "assert", "(", "B", ",", "3", ",", "H", ",", "W", ")", "==", "inputs", ".", "shape", "\n", "# done", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.AdaNegTripletVae.hook_compute_ave_aug_loss": [[71, 75], ["_supervised__adaneg_tvae.AdaNegTripletVae.estimate_ada_triplet_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.AdaNegTripletVae.estimate_ada_triplet_loss"], ["", "def", "hook_compute_ave_aug_loss", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Normal", "]", ",", "ds_prior", ":", "Sequence", "[", "Normal", "]", ",", "zs_sampled", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "return", "self", ".", "estimate_ada_triplet_loss", "(", "\n", "ds_posterior", "=", "ds_posterior", ",", "\n", "cfg", "=", "self", ".", "cfg", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.AdaNegTripletVae.estimate_ada_triplet_loss_from_zs": [[77, 87], ["_supervised__adaneg_tvae.compute_triplet_shared_masks_from_zs", "_supervised__adaneg_tvae.AdaNegTripletVae.compute_ada_triplet_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.compute_triplet_shared_masks_from_zs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.AdaNegTripletVae.compute_ada_triplet_loss"], ["", "@", "staticmethod", "\n", "def", "estimate_ada_triplet_loss_from_zs", "(", "zs", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "cfg", ":", "cfg", ")", ":", "\n", "# compute shared masks, shared embeddings & averages over shared embeddings", "\n", "        ", "share_masks", ",", "share_logs", "=", "compute_triplet_shared_masks_from_zs", "(", "zs", "=", "zs", ",", "cfg", "=", "cfg", ")", "\n", "# compute loss", "\n", "ada_triplet_loss", ",", "ada_triplet_logs", "=", "AdaNegTripletVae", ".", "compute_ada_triplet_loss", "(", "share_masks", "=", "share_masks", ",", "zs", "=", "zs", ",", "cfg", "=", "cfg", ")", "\n", "# merge logs & return loss", "\n", "return", "ada_triplet_loss", ",", "{", "\n", "**", "ada_triplet_logs", ",", "\n", "**", "share_logs", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.AdaNegTripletVae.estimate_ada_triplet_loss": [[89, 99], ["_supervised__adaneg_tvae.compute_triplet_shared_masks", "_supervised__adaneg_tvae.AdaNegTripletVae.compute_ada_triplet_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.compute_triplet_shared_masks", "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.AdaNegTripletVae.compute_ada_triplet_loss"], ["", "@", "staticmethod", "\n", "def", "estimate_ada_triplet_loss", "(", "ds_posterior", ":", "Sequence", "[", "Normal", "]", ",", "cfg", ":", "cfg", ")", ":", "\n", "# compute shared masks, shared embeddings & averages over shared embeddings", "\n", "        ", "share_masks", ",", "share_logs", "=", "compute_triplet_shared_masks", "(", "ds_posterior", ",", "cfg", "=", "cfg", ")", "\n", "# compute loss", "\n", "ada_triplet_loss", ",", "ada_triplet_logs", "=", "AdaNegTripletVae", ".", "compute_ada_triplet_loss", "(", "share_masks", "=", "share_masks", ",", "zs", "=", "(", "d", ".", "mean", "for", "d", "in", "ds_posterior", ")", ",", "cfg", "=", "cfg", ")", "\n", "# merge logs & return loss", "\n", "return", "ada_triplet_loss", ",", "{", "\n", "**", "ada_triplet_logs", ",", "\n", "**", "share_logs", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.AdaNegTripletVae.compute_ada_triplet_loss": [[101, 118], ["disent.nn.loss.triplet.configured_triplet", "disent.nn.loss.triplet.configured_dist_triplet", "torch.where"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.configured_triplet", "home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.configured_dist_triplet"], ["", "@", "staticmethod", "\n", "def", "compute_ada_triplet_loss", "(", "share_masks", ",", "zs", ",", "cfg", ":", "cfg", ")", ":", "\n", "# Normal Triplet Loss", "\n", "        ", "(", "a_z", ",", "p_z", ",", "n_z", ")", "=", "zs", "\n", "trip_loss", "=", "configured_triplet", "(", "a_z", ",", "p_z", ",", "n_z", ",", "cfg", "=", "cfg", ")", "\n", "\n", "# Soft Scaled Negative Triplet", "\n", "(", "ap_share_mask", ",", "an_share_mask", ",", "pn_share_mask", ")", "=", "share_masks", "\n", "triplet_hard_neg_ave_scaled", "=", "configured_dist_triplet", "(", "\n", "pos_delta", "=", "a_z", "-", "p_z", ",", "\n", "neg_delta", "=", "torch", ".", "where", "(", "an_share_mask", ",", "cfg", ".", "adat_triplet_share_scale", "*", "(", "a_z", "-", "n_z", ")", ",", "(", "a_z", "-", "n_z", ")", ")", ",", "\n", "cfg", "=", "cfg", ",", "\n", ")", "\n", "\n", "return", "triplet_hard_neg_ave_scaled", ",", "{", "\n", "'triplet'", ":", "trip_loss", ",", "\n", "'triplet_chosen'", ":", "triplet_hard_neg_ave_scaled", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.compute_triplet_shared_masks_from_zs": [[134, 150], ["disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "AdaVae.compute_shared_mask_from_zs.sum().float().mean", "AdaVae.compute_shared_mask_from_zs.sum().float().mean", "AdaVae.compute_shared_mask_from_zs.sum().float().mean", "AdaVae.compute_shared_mask_from_zs.sum().float", "AdaVae.compute_shared_mask_from_zs.sum().float", "AdaVae.compute_shared_mask_from_zs.sum().float", "AdaVae.compute_shared_mask_from_zs.sum", "AdaVae.compute_shared_mask_from_zs.sum", "AdaVae.compute_shared_mask_from_zs.sum"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs"], ["", "def", "compute_triplet_shared_masks_from_zs", "(", "zs", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "cfg", ")", ":", "\n", "    ", "\"\"\"\n    required config params:\n    - cfg.ada_thresh_ratio:\n    \"\"\"", "\n", "a_z", ",", "p_z", ",", "n_z", "=", "zs", "\n", "# shared elements that need to be averaged, computed per pair in the batch.", "\n", "ap_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_zs", "(", "a_z", ",", "p_z", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "an_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_zs", "(", "a_z", ",", "n_z", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "pn_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_zs", "(", "p_z", ",", "n_z", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "# return values", "\n", "share_masks", "=", "(", "ap_share_mask", ",", "an_share_mask", ",", "pn_share_mask", ")", "\n", "return", "share_masks", ",", "{", "\n", "'ap_shared'", ":", "ap_share_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "'an_shared'", ":", "an_share_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "'pn_shared'", ":", "pn_share_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.compute_triplet_shared_masks": [[153, 186], ["disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_posteriors", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_posteriors", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_posteriors", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "AdaVae.compute_shared_mask_from_zs.sum().float().mean", "AdaVae.compute_shared_mask_from_zs.sum().float().mean", "AdaVae.compute_shared_mask_from_zs.sum().float().mean", "a_posterior.rsample", "p_posterior.rsample", "n_posterior.rsample", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "disent.frameworks.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "KeyError", "a_posterior.rsample", "p_posterior.rsample", "a_posterior.rsample", "n_posterior.rsample", "p_posterior.rsample", "n_posterior.rsample", "AdaVae.compute_shared_mask_from_zs.sum().float", "AdaVae.compute_shared_mask_from_zs.sum().float", "AdaVae.compute_shared_mask_from_zs.sum().float", "repr", "AdaVae.compute_shared_mask_from_zs.sum", "AdaVae.compute_shared_mask_from_zs.sum", "AdaVae.compute_shared_mask_from_zs.sum"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_posteriors", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_posteriors", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_posteriors", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._weaklysupervised__adavae.AdaVae.compute_shared_mask_from_zs"], ["", "def", "compute_triplet_shared_masks", "(", "ds_posterior", ":", "Sequence", "[", "Distribution", "]", ",", "cfg", ":", "AdaTripletVae_cfg", ")", ":", "\n", "    ", "\"\"\"\n    required config params:\n    - cfg.ada_thresh_ratio:\n    - cfg.ada_thresh_mode: \"kl\", \"symmetric_kl\", \"dist\", \"sampled_dist\"\n      : only applies if cfg.ada_share_mask_mode==\"posterior\"\n    - cfg.adat_share_mask_mode: \"posterior\", \"sample\", \"sample_each\"\n    \"\"\"", "\n", "a_posterior", ",", "p_posterior", ",", "n_posterior", "=", "ds_posterior", "\n", "\n", "# shared elements that need to be averaged, computed per pair in the batch.", "\n", "if", "cfg", ".", "adat_share_mask_mode", "==", "'posterior'", ":", "\n", "        ", "ap_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_posteriors", "(", "a_posterior", ",", "p_posterior", ",", "thresh_mode", "=", "cfg", ".", "ada_thresh_mode", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "an_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_posteriors", "(", "a_posterior", ",", "n_posterior", ",", "thresh_mode", "=", "cfg", ".", "ada_thresh_mode", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "pn_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_posteriors", "(", "p_posterior", ",", "n_posterior", ",", "thresh_mode", "=", "cfg", ".", "ada_thresh_mode", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "", "elif", "cfg", ".", "adat_share_mask_mode", "==", "'sample'", ":", "\n", "        ", "a_z_sample", ",", "p_z_sample", ",", "n_z_sample", "=", "a_posterior", ".", "rsample", "(", ")", ",", "p_posterior", ".", "rsample", "(", ")", ",", "n_posterior", ".", "rsample", "(", ")", "\n", "ap_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_zs", "(", "a_z_sample", ",", "p_z_sample", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "an_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_zs", "(", "a_z_sample", ",", "n_z_sample", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "pn_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_zs", "(", "p_z_sample", ",", "n_z_sample", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "", "elif", "cfg", ".", "adat_share_mask_mode", "==", "'sample_each'", ":", "\n", "        ", "ap_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_zs", "(", "a_posterior", ".", "rsample", "(", ")", ",", "p_posterior", ".", "rsample", "(", ")", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "an_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_zs", "(", "a_posterior", ".", "rsample", "(", ")", ",", "n_posterior", ".", "rsample", "(", ")", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "pn_share_mask", "=", "AdaVae", ".", "compute_shared_mask_from_zs", "(", "p_posterior", ".", "rsample", "(", ")", ",", "n_posterior", ".", "rsample", "(", ")", ",", "ratio", "=", "cfg", ".", "ada_thresh_ratio", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f'Invalid cfg.adat_share_mask_mode={repr(cfg.adat_share_mask_mode)}'", ")", "\n", "\n", "# return values", "\n", "", "share_masks", "=", "(", "ap_share_mask", ",", "an_share_mask", ",", "pn_share_mask", ")", "\n", "return", "share_masks", ",", "{", "\n", "'ap_shared'", ":", "ap_share_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "'an_shared'", ":", "an_share_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "'pn_shared'", ":", "pn_share_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__tvae.TripletVae.hook_compute_ave_aug_loss": [[54, 56], ["disent.nn.loss.triplet.compute_triplet_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet.compute_triplet_loss"], ["", "def", "hook_compute_ave_aug_loss", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Normal", "]", ",", "ds_prior", ":", "Sequence", "[", "Normal", "]", ",", "zs_sampled", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_partial_recon", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Union", "[", "torch", ".", "Tensor", ",", "Number", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "return", "compute_triplet_loss", "(", "zs", "=", "[", "d", ".", "mean", "for", "d", "in", "ds_posterior", "]", ",", "cfg", "=", "self", ".", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.init_data_overlap_mixin": [[72, 91], ["hasattr", "disent.frameworks.helper.reconstructions.make_reconstruction_loss", "RuntimeError", "hydra.utils.instantiate", "log.info", "callable", "repr", "repr", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.make_reconstruction_loss"], ["def", "init_data_overlap_mixin", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'_init'", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'{DataOverlapMixin.__name__} on {self.__class__.__name__} was initialised more than once!'", ")", "\n", "", "self", ".", "_init", "=", "True", "\n", "# set augment and instantiate if needed", "\n", "if", "self", ".", "cfg", ".", "overlap_augment", "is", "not", "None", ":", "\n", "            ", "import", "hydra", "\n", "self", ".", "_augment", "=", "hydra", ".", "utils", ".", "instantiate", "(", "self", ".", "cfg", ".", "overlap_augment", ")", "\n", "assert", "(", "self", ".", "_augment", "is", "None", ")", "or", "callable", "(", "self", ".", "_augment", ")", ",", "f'augment is not None or callable: {repr(self._augment)}, obtained from `overlap_augment={repr(self.cfg.overlap_augment)}`'", "\n", "", "else", ":", "\n", "            ", "self", ".", "_augment", "=", "None", "\n", "# get overlap loss", "\n", "", "if", "self", ".", "cfg", ".", "overlap_loss", "is", "None", ":", "\n", "            ", "log", ".", "info", "(", "f'`overlap_loss` not specified for {repr(self.__class__.__name__)}, using `recon_loss` instead: {repr(self.cfg.recon_loss)}'", ")", "\n", "overlap_loss", "=", "self", ".", "cfg", ".", "recon_loss", "\n", "", "else", ":", "\n", "            ", "overlap_loss", "=", "self", ".", "cfg", ".", "overlap_loss", "\n", "# construct the overlap handler", "\n", "", "self", ".", "_overlap_handler", ":", "ReconLossHandler", "=", "make_reconstruction_loss", "(", "name", "=", "overlap_loss", ",", "reduction", "=", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.overlap_handler": [[92, 96], ["None"], "methods", ["None"], ["", "@", "final", "\n", "@", "property", "\n", "def", "overlap_handler", "(", "self", ")", "->", "ReconLossHandler", ":", "\n", "        ", "return", "self", ".", "_overlap_handler", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.overlap_swap_triplet_idxs": [[97, 107], ["_unsupervised__dotvae.DataOverlapMixin.overlap_swap_mask", "torch.where", "torch.where"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.overlap_swap_mask"], ["", "def", "overlap_swap_triplet_idxs", "(", "self", ",", "x_targ", ",", "a_idxs", ",", "p_idxs", ",", "n_idxs", ")", ":", "\n", "        ", "xs_targ", "=", "[", "x_targ", "[", "idxs", "]", "for", "idxs", "in", "(", "a_idxs", ",", "p_idxs", ",", "n_idxs", ")", "]", "\n", "# CORE: order the latent variables for triplet", "\n", "swap_mask", "=", "self", ".", "overlap_swap_mask", "(", "xs_targ", "=", "xs_targ", ")", "\n", "# swap all idxs", "\n", "swapped_a_idxs", "=", "a_idxs", "\n", "swapped_p_idxs", "=", "torch", ".", "where", "(", "swap_mask", ",", "n_idxs", ",", "p_idxs", ")", "\n", "swapped_n_idxs", "=", "torch", ".", "where", "(", "swap_mask", ",", "p_idxs", ",", "n_idxs", ")", "\n", "# return values", "\n", "return", "swapped_a_idxs", ",", "swapped_p_idxs", ",", "swapped_n_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.overlap_swap_mask": [[108, 121], ["torch.no_grad", "_unsupervised__dotvae.DataOverlapMixin.overlap_handler.compute_pairwise_loss", "_unsupervised__dotvae.DataOverlapMixin.overlap_handler.compute_pairwise_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_pairwise_loss", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_pairwise_loss"], ["", "def", "overlap_swap_mask", "(", "self", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "# get variables", "\n", "        ", "a_x_targ_OLD", ",", "p_x_targ_OLD", ",", "n_x_targ_OLD", "=", "xs_targ", "\n", "# CORE OF THIS APPROACH", "\n", "# ++++++++++++++++++++++++++++++++++++++++++ #", "\n", "# calculate which are wrong!", "\n", "# TODO: add more loss functions, like perceptual & others", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "a_p_losses", "=", "self", ".", "overlap_handler", ".", "compute_pairwise_loss", "(", "a_x_targ_OLD", ",", "p_x_targ_OLD", ")", "# (B, C, H, W) -> (B,)", "\n", "a_n_losses", "=", "self", ".", "overlap_handler", ".", "compute_pairwise_loss", "(", "a_x_targ_OLD", ",", "n_x_targ_OLD", ")", "# (B, C, H, W) -> (B,)", "\n", "swap_mask", "=", "(", "a_p_losses", ">", "a_n_losses", ")", "# (B,)", "\n", "# ++++++++++++++++++++++++++++++++++++++++++ #", "\n", "", "return", "swap_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.augment_batch": [[122, 142], ["torch.no_grad", "hydra.utils.instantiate", "_unsupervised__dotvae.DataOverlapMixin._augment", "KeyError", "repr"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "augment_batch", "(", "self", ",", "x_targ", ")", ":", "\n", "# ++++++++++++++++++++++++++++++++++++++++++ #", "\n", "# perform the augments", "\n", "        ", "if", "self", ".", "cfg", ".", "overlap_augment_mode", "in", "(", "'augment'", ",", "'augment_each'", ")", ":", "\n", "# recreate augment each time", "\n", "            ", "if", "self", ".", "cfg", ".", "overlap_augment_mode", "==", "'augment_each'", ":", "\n", "                ", "import", "hydra", "\n", "self", ".", "_augment", "=", "hydra", ".", "utils", ".", "instantiate", "(", "self", ".", "cfg", ".", "overlap_augment", ")", "\n", "# augment on correct device, but skip if not defined!", "\n", "", "aug_x_targ", "=", "x_targ", "if", "(", "self", ".", "_augment", "is", "None", ")", "else", "self", ".", "_augment", "(", "x_targ", ")", "\n", "", "elif", "self", ".", "cfg", ".", "overlap_augment_mode", "==", "'none'", ":", "\n", "# no augment", "\n", "            ", "aug_x_targ", "=", "x_targ", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "f'invalid cfg.overlap_augment_mode={repr(self.cfg.overlap_augment_mode)}'", ")", "\n", "# ++++++++++++++++++++++++++++++++++++++++++ #", "\n", "# checks", "\n", "", "assert", "x_targ", ".", "shape", "==", "aug_x_targ", ".", "shape", "\n", "return", "aug_x_targ", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.mine_triplets": [[143, 151], ["disent.nn.loss.triplet_mining.configured_idx_mine"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.loss.triplet_mining.configured_idx_mine"], ["", "def", "mine_triplets", "(", "self", ",", "x_targ", ",", "a_idxs", ",", "p_idxs", ",", "n_idxs", ")", ":", "\n", "        ", "return", "configured_idx_mine", "(", "\n", "x_targ", "=", "x_targ", ",", "\n", "a_idxs", "=", "a_idxs", ",", "\n", "p_idxs", "=", "p_idxs", ",", "\n", "n_idxs", "=", "n_idxs", ",", "\n", "cfg", "=", "self", ".", "cfg", ",", "\n", "pairwise_loss_fn", "=", "self", ".", "overlap_handler", ".", "compute_pairwise_loss", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.random_mined_triplets": [[153, 169], ["_unsupervised__dotvae.DataOverlapMixin.augment_batch", "torch.randint", "_unsupervised__dotvae.DataOverlapMixin.overlap_swap_triplet_idxs", "_unsupervised__dotvae.DataOverlapMixin.mine_triplets", "len", "min", "len"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.augment_batch", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.overlap_swap_triplet_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.mine_triplets"], ["", "def", "random_mined_triplets", "(", "self", ",", "x_targ_orig", ":", "torch", ".", "Tensor", ")", ":", "\n", "# ++++++++++++++++++++++++++++++++++++++++++ #", "\n", "# 1. augment batch", "\n", "        ", "aug_x_targ", "=", "self", ".", "augment_batch", "(", "x_targ_orig", ")", "\n", "# 2. generate random triples -- this does not generate unique pairs", "\n", "a_idxs", ",", "p_idxs", ",", "n_idxs", "=", "torch", ".", "randint", "(", "len", "(", "aug_x_targ", ")", ",", "size", "=", "(", "3", ",", "min", "(", "self", ".", "cfg", ".", "overlap_num", ",", "len", "(", "aug_x_targ", ")", "**", "3", ")", ")", ",", "device", "=", "aug_x_targ", ".", "device", ")", "\n", "# ++++++++++++++++++++++++++++++++++++++++++ #", "\n", "# self.debug(x_targ_orig, x_targ, a_idxs, p_idxs, n_idxs)", "\n", "# ++++++++++++++++++++++++++++++++++++++++++ #", "\n", "# TODO: this can be merged into a single function -- inefficient currently with deltas computed twice", "\n", "# 3. reorder random triples", "\n", "a_idxs", ",", "p_idxs", ",", "n_idxs", "=", "self", ".", "overlap_swap_triplet_idxs", "(", "aug_x_targ", ",", "a_idxs", ",", "p_idxs", ",", "n_idxs", ")", "\n", "# 4. mine random triples", "\n", "a_idxs", ",", "p_idxs", ",", "n_idxs", "=", "self", ".", "mine_triplets", "(", "aug_x_targ", ",", "a_idxs", ",", "p_idxs", ",", "n_idxs", ")", "\n", "# ++++++++++++++++++++++++++++++++++++++++++ #", "\n", "return", "a_idxs", ",", "p_idxs", ",", "n_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapTripletVae.__init__": [[217, 221], ["disent.frameworks.vae.AdaNegTripletVae.__init__", "_unsupervised__dotvae.DataOverlapTripletVae.init_data_overlap_mixin"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.init_data_overlap_mixin"], ["", "def", "__init__", "(", "self", ",", "model", ":", "'AutoEncoder'", ",", "cfg", ":", "cfg", "=", "None", ",", "batch_augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ",", "cfg", "=", "cfg", ",", "batch_augment", "=", "batch_augment", ")", "\n", "# initialise mixin", "\n", "self", ".", "init_data_overlap_mixin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapTripletVae.hook_compute_ave_aug_loss": [[222, 233], ["_unsupervised__dotvae.DataOverlapTripletVae.random_mined_triplets", "disent.frameworks.vae.AdaNegTripletVae.estimate_ada_triplet_loss", "torch.distributions.Normal"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dotvae.DataOverlapMixin.random_mined_triplets", "home.repos.pwc.inspect_result.nmichlo_disent.vae._supervised__adaneg_tvae.AdaNegTripletVae.estimate_ada_triplet_loss"], ["", "def", "hook_compute_ave_aug_loss", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Normal", "]", ",", "ds_prior", ",", "zs_sampled", ",", "xs_partial_recon", ",", "xs_targ", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "[", "d_posterior", "]", ",", "[", "x_targ_orig", "]", "=", "ds_posterior", ",", "xs_targ", "\n", "# 1. randomly generate and mine triplets using augmented versions of the inputs", "\n", "a_idxs", ",", "p_idxs", ",", "n_idxs", "=", "self", ".", "random_mined_triplets", "(", "x_targ_orig", "=", "x_targ_orig", ")", "\n", "# 2. compute triplet loss", "\n", "loss", ",", "loss_log", "=", "AdaNegTripletVae", ".", "estimate_ada_triplet_loss", "(", "\n", "ds_posterior", "=", "[", "Normal", "(", "d_posterior", ".", "loc", "[", "idxs", "]", ",", "d_posterior", ".", "scale", "[", "idxs", "]", ")", "for", "idxs", "in", "(", "a_idxs", ",", "p_idxs", ",", "n_idxs", ")", "]", ",", "\n", "cfg", "=", "self", ".", "cfg", ",", "\n", ")", "\n", "return", "loss", ",", "{", "\n", "**", "loss_log", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae.compute_ave_reg_loss": [[62, 74], ["super().compute_ave_reg_loss", "disent.frameworks.helper.util.compute_ave_loss_and_logs"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dipvae.DipVae.compute_ave_reg_loss", "home.repos.pwc.inspect_result.nmichlo_disent.helper.util.compute_ave_loss_and_logs"], ["", "def", "compute_ave_reg_loss", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Normal", "]", ",", "ds_prior", ":", "Sequence", "[", "Normal", "]", ",", "zs_sampled", ")", ":", "\n", "# compute kl loss", "\n", "# TODO: this should be KL instead? not KL Reg?", "\n", "        ", "kl_reg_loss", ",", "logs_kl_reg", "=", "super", "(", ")", ".", "compute_ave_reg_loss", "(", "ds_posterior", ",", "ds_prior", ",", "zs_sampled", ")", "\n", "# compute dip loss", "\n", "tc_reg_loss", ",", "logs_tc_reg", "=", "compute_ave_loss_and_logs", "(", "self", ".", "_betatc_compute_loss", ",", "ds_posterior", ",", "zs_sampled", ")", "\n", "# combine", "\n", "combined_loss", "=", "kl_reg_loss", "+", "tc_reg_loss", "\n", "# return logs", "\n", "return", "combined_loss", ",", "{", "\n", "**", "logs_kl_reg", ",", "# kl_loss, kl_reg_loss", "\n", "**", "logs_tc_reg", ",", "#", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_loss": [[80, 90], ["_unsupervised__betatcvae.BetaTcVae._betatc_compute_total_correlation", "torch.log"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_total_correlation"], ["", "def", "_betatc_compute_loss", "(", "self", ",", "d_posterior", ":", "Normal", ",", "z_sampled", ")", ":", "\n", "        ", "tc_loss", "=", "BetaTcVae", ".", "_betatc_compute_total_correlation", "(", "\n", "z_sampled", "=", "z_sampled", ",", "\n", "z_mean", "=", "d_posterior", ".", "mean", ",", "\n", "z_logvar", "=", "torch", ".", "log", "(", "d_posterior", ".", "variance", ")", ",", "\n", ")", "\n", "tc_reg_loss", "=", "(", "self", ".", "cfg", ".", "beta", "-", "1.", ")", "*", "tc_loss", "\n", "return", "tc_reg_loss", ",", "{", "\n", "'tc_loss'", ":", "tc_loss", ",", "\n", "'tc_reg_loss'", ":", "tc_reg_loss", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_total_correlation": [[92, 113], ["_unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "_unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "_unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "z_sampled.unsqueeze", "z_mean.unsqueeze", "z_logvar.unsqueeze", "_unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "_unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "_unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "_unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "_unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "_unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density"], ["", "@", "staticmethod", "\n", "def", "_betatc_compute_total_correlation", "(", "z_sampled", ",", "z_mean", ",", "z_logvar", ")", ":", "\n", "        ", "\"\"\"\n        Estimate total correlation over a batch.\n        Reference implementation is from: https://github.com/amir-abdi/disentanglement-pytorch\n        \"\"\"", "\n", "# Compute log(q(z(x_j)|x_i)) for every sample in the batch, which is a", "\n", "# tensor of size [batch_size, batch_size, num_latents]. In the following", "\n", "# comments, [batch_size, batch_size, num_latents] are indexed by [j, i, l].", "\n", "log_qz_prob", "=", "BetaTcVae", ".", "_betatc_compute_gaussian_log_density", "(", "z_sampled", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "z_mean", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "z_logvar", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "\n", "# Compute log prod_l p(z(x_j)_l) = sum_l(log(sum_i(q(z(z_j)_l|x_i)))", "\n", "# + constant) for each sample in the batch, which is a vector of size", "\n", "# [batch_size,].", "\n", "log_qz_product", "=", "log_qz_prob", ".", "exp", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", ".", "log", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "\n", "\n", "# Compute log(q(z(x_j))) as log(sum_i(q(z(x_j)|x_i))) + constant =", "\n", "# log(sum_i(prod_l q(z(x_j)_l|x_i))) + constant.", "\n", "log_qz", "=", "log_qz_prob", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", ".", "exp", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", ".", "log", "(", ")", "\n", "\n", "return", "(", "log_qz", "-", "log_qz_product", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betatcvae.BetaTcVae._betatc_compute_gaussian_log_density": [[114, 127], ["torch.tensor", "torch.log", "torch.exp"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_betatc_compute_gaussian_log_density", "(", "samples", ",", "mean", ",", "log_var", ")", ":", "\n", "        ", "\"\"\"\n        Estimate the log density of a Gaussian distribution\n        Reference implementation is from: https://github.com/amir-abdi/disentanglement-pytorch\n        \"\"\"", "\n", "# TODO: can this be replaced with some variant of Normal.log_prob?", "\n", "import", "math", "\n", "pi", "=", "torch", ".", "tensor", "(", "math", ".", "pi", ",", "requires_grad", "=", "False", ")", "\n", "normalization", "=", "torch", ".", "log", "(", "2", "*", "pi", ")", "\n", "inv_sigma", "=", "torch", ".", "exp", "(", "-", "log_var", ")", "\n", "tmp", "=", "samples", "-", "mean", "\n", "return", "-", "0.5", "*", "(", "tmp", "*", "tmp", "*", "inv_sigma", "+", "log_var", "+", "normalization", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betavae.BetaVae.__init__": [[81, 84], ["disent.frameworks.vae._unsupervised__vae.Vae.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "self", ",", "model", ":", "'AutoEncoder'", ",", "cfg", ":", "cfg", "=", "None", ",", "batch_augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ",", "cfg", "=", "cfg", ",", "batch_augment", "=", "batch_augment", ")", "\n", "assert", "self", ".", "cfg", ".", "beta", ">=", "0", ",", "'beta must be >= 0'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__betavae.BetaVae.compute_ave_reg_loss": [[89, 97], ["_unsupervised__betavae.BetaVae.latents_handler.compute_ave_kl_loss"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.latent_distributions.LatentDistsHandler.compute_ave_kl_loss"], ["", "def", "compute_ave_reg_loss", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Distribution", "]", ",", "ds_prior", ":", "Sequence", "[", "Distribution", "]", ",", "zs_sampled", ":", "Sequence", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "Union", "[", "torch", ".", "Tensor", ",", "Number", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "# BetaVAE: compute regularization loss (kl divergence)", "\n", "        ", "kl_loss", "=", "self", ".", "latents_handler", ".", "compute_ave_kl_loss", "(", "ds_posterior", ",", "ds_prior", ",", "zs_sampled", ")", "\n", "kl_reg_loss", "=", "self", ".", "cfg", ".", "beta", "*", "kl_loss", "\n", "# return logs", "\n", "return", "kl_reg_loss", ",", "{", "\n", "'kl_loss'", ":", "kl_loss", ",", "\n", "'kl_reg_loss'", ":", "kl_reg_loss", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dipvae.DipVae.__init__": [[58, 65], ["disent.frameworks.vae._unsupervised__betavae.BetaVae.__init__", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["", "def", "__init__", "(", "self", ",", "model", ":", "'AutoEncoder'", ",", "cfg", ":", "cfg", "=", "None", ",", "batch_augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", "=", "model", ",", "cfg", "=", "cfg", ",", "batch_augment", "=", "batch_augment", ")", "\n", "# checks", "\n", "assert", "self", ".", "cfg", ".", "dip_mode", "in", "{", "'i'", ",", "'ii'", "}", ",", "f'unsupported dip_mode={repr(self.cfg.dip_mode)} for {self.__class__.__name__}. Must be one of: {{\"i\", \"ii\"}}'", "\n", "assert", "self", ".", "cfg", ".", "dip_beta", ">=", "0", ",", "'dip_beta must be >= 0'", "\n", "assert", "self", ".", "cfg", ".", "lambda_d", ">=", "0", ",", "'lambda_d must be >= 0'", "\n", "assert", "self", ".", "cfg", ".", "lambda_od", ">=", "0", ",", "'lambda_od must be >= 0'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dipvae.DipVae.compute_ave_reg_loss": [[70, 81], ["super().compute_ave_reg_loss", "disent.frameworks.helper.util.compute_ave_loss_and_logs"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dipvae.DipVae.compute_ave_reg_loss", "home.repos.pwc.inspect_result.nmichlo_disent.helper.util.compute_ave_loss_and_logs"], ["", "def", "compute_ave_reg_loss", "(", "self", ",", "ds_posterior", ":", "Sequence", "[", "Normal", "]", ",", "ds_prior", ":", "Sequence", "[", "Normal", "]", ",", "zs_sampled", ")", ":", "\n", "# compute kl loss", "\n", "        ", "kl_reg_loss", ",", "logs_kl_reg", "=", "super", "(", ")", ".", "compute_ave_reg_loss", "(", "ds_posterior", ",", "ds_prior", ",", "zs_sampled", ")", "\n", "# compute dip loss", "\n", "dip_reg_loss", ",", "logs_dip_reg", "=", "compute_ave_loss_and_logs", "(", "self", ".", "_dip_compute_loss", ",", "ds_posterior", ")", "\n", "# combine", "\n", "combined_loss", "=", "kl_reg_loss", "+", "dip_reg_loss", "\n", "# return logs", "\n", "return", "combined_loss", ",", "{", "\n", "**", "logs_kl_reg", ",", "# kl_loss, kl_reg_loss", "\n", "**", "logs_dip_reg", ",", "# dip_loss_d, dip_loss_od, dip_loss, dip_reg_loss,", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dipvae.DipVae._dip_compute_loss": [[87, 90], ["_unsupervised__dipvae.DipVae._dip_estimate_cov_matrix", "_unsupervised__dipvae.DipVae._dip_compute_regulariser"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dipvae.DipVae._dip_estimate_cov_matrix", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dipvae.DipVae._dip_compute_regulariser"], ["", "def", "_dip_compute_loss", "(", "self", ",", "d_posterior", ":", "Normal", ")", ":", "\n", "        ", "cov_matrix", "=", "self", ".", "_dip_estimate_cov_matrix", "(", "d_posterior", ")", "\n", "return", "self", ".", "_dip_compute_regulariser", "(", "cov_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dipvae.DipVae._dip_compute_regulariser": [[91, 113], ["torch.diagonal", "torch.sum", "torch.sum", "torch.diag"], "methods", ["None"], ["", "def", "_dip_compute_regulariser", "(", "self", ",", "cov_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Compute DIP regularises for diagonal & off diagonal components\n        - covariance matrix should match the identity matrix\n        - diagonal and off diagonals are weighted differently\n        \"\"\"", "\n", "# covariance diagonal & off diagonal components", "\n", "cov_diag", "=", "torch", ".", "diagonal", "(", "cov_matrix", ")", "\n", "cov_off_diag", "=", "cov_matrix", "-", "torch", ".", "diag", "(", "cov_diag", ")", "\n", "# regulariser, encourage covariance to match identity matrix", "\n", "# TODO: this is all summed, we should rather calculate the means of each so that the scale stays the same after changing z_size", "\n", "dip_loss_d", "=", "torch", ".", "sum", "(", "(", "cov_diag", "-", "1", ")", "**", "2", ")", "# / num_diag", "\n", "dip_loss_od", "=", "torch", ".", "sum", "(", "cov_off_diag", "**", "2", ")", "# / num_off_diag", "\n", "dip_loss", "=", "(", "self", ".", "cfg", ".", "lambda_d", "*", "dip_loss_d", ")", "+", "(", "self", ".", "cfg", ".", "lambda_od", "*", "dip_loss_od", ")", "\n", "# scale dip loss - like beta for beta vae", "\n", "dip_reg_loss", "=", "self", ".", "cfg", ".", "dip_beta", "*", "dip_loss", "\n", "# return logs", "\n", "return", "dip_reg_loss", ",", "{", "\n", "'dip_loss_d'", ":", "dip_loss_d", ",", "\n", "'dip_loss_od'", ":", "dip_loss_od", ",", "\n", "'dip_loss'", ":", "dip_loss", ",", "\n", "'dip_reg_loss'", ":", "dip_reg_loss", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__dipvae.DipVae._dip_estimate_cov_matrix": [[115, 130], ["disent.nn.functional.torch_cov_matrix", "torch.mean", "KeyError", "torch.diag"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._correlation.torch_cov_matrix"], ["", "def", "_dip_estimate_cov_matrix", "(", "self", ",", "d_posterior", ":", "Normal", ")", ":", "\n", "        ", "z_mean", ",", "z_var", "=", "d_posterior", ".", "mean", ",", "d_posterior", ".", "variance", "\n", "# compute covariance over batch", "\n", "cov_z_mean", "=", "torch_cov_matrix", "(", "z_mean", ")", "\n", "# compute covariance matrix based on mode", "\n", "if", "self", ".", "cfg", ".", "dip_mode", "==", "\"i\"", ":", "\n", "            ", "cov_matrix", "=", "cov_z_mean", "\n", "", "elif", "self", ".", "cfg", ".", "dip_mode", "==", "\"ii\"", ":", "\n", "# E[var]", "\n", "            ", "E_var", "=", "torch", ".", "mean", "(", "torch", ".", "diag", "(", "z_var", ")", ",", "dim", "=", "0", ")", "\n", "cov_matrix", "=", "cov_z_mean", "+", "E_var", "\n", "", "else", ":", "# pragma: no cover", "\n", "            ", "raise", "KeyError", "(", "f'Unknown DipVAE mode: {self.cfg.dip_mode}'", ")", "\n", "# shape: (Z, Z)", "\n", "", "return", "cov_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.cache.stalefile.__init__": [[52, 63], ["disent.util.inout.hashing.normalise_hash"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.normalise_hash"], ["def", "__init__", "(", "\n", "self", ",", "\n", "file", ":", "str", ",", "\n", "hash", ":", "Optional", "[", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "]", ",", "\n", "hash_type", ":", "str", "=", "'md5'", ",", "\n", "hash_mode", ":", "str", "=", "'fast'", ",", "\n", ")", ":", "\n", "        ", "self", ".", "file", "=", "file", "\n", "self", ".", "hash", "=", "normalise_hash", "(", "hash", "=", "hash", ",", "hash_mode", "=", "hash_mode", ")", "\n", "self", ".", "hash_type", "=", "hash_type", "\n", "self", ".", "hash_mode", "=", "hash_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.cache.stalefile.__call__": [[64, 75], ["functools.wraps", "cache.stalefile.is_stale", "log.debug", "func", "disent.util.inout.hashing.validate_file_hash", "log.debug", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.cache.stalefile.is_stale", "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.validate_file_hash"], ["", "def", "__call__", "(", "self", ",", "func", ":", "Callable", "[", "[", "str", "]", ",", "NoReturn", "]", ")", "->", "Callable", "[", "[", "]", ",", "str", "]", ":", "\n", "        ", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", ")", "->", "str", ":", "\n", "            ", "if", "self", ".", "is_stale", "(", ")", ":", "\n", "                ", "log", ".", "debug", "(", "f'calling wrapped function: {func} because the file is stale: {repr(self.file)}'", ")", "\n", "func", "(", "self", ".", "file", ")", "\n", "validate_file_hash", "(", "self", ".", "file", ",", "hash", "=", "self", ".", "hash", ",", "hash_type", "=", "self", ".", "hash_type", ",", "hash_mode", "=", "self", ".", "hash_mode", ",", "missing_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "log", ".", "debug", "(", "f'skipped wrapped function: {func} because the file is fresh: {repr(self.file)}'", ")", "\n", "", "return", "self", ".", "file", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.cache.stalefile.is_stale": [[76, 86], ["disent.util.inout.hashing.hash_file", "log.debug", "log.info", "log.warning", "repr", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.hash_file"], ["", "def", "is_stale", "(", "self", ")", ":", "\n", "        ", "fhash", "=", "hash_file", "(", "file", "=", "self", ".", "file", ",", "hash_type", "=", "self", ".", "hash_type", ",", "hash_mode", "=", "self", ".", "hash_mode", ",", "missing_ok", "=", "True", ")", "\n", "if", "not", "fhash", ":", "\n", "            ", "log", ".", "info", "(", "f'file is stale because it does not exist: {repr(self.file)}'", ")", "\n", "return", "True", "\n", "", "if", "fhash", "!=", "self", ".", "hash", ":", "\n", "            ", "log", ".", "warning", "(", "f'file is stale because the computed {self.hash_mode} {self.hash_type} hash: {fhash} does not match the target hash: {self.hash} for file: {repr(self.file)}'", ")", "\n", "return", "True", "\n", "", "log", ".", "debug", "(", "f'file is fresh: {repr(self.file)}'", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.cache.stalefile.__bool__": [[87, 89], ["cache.stalefile.is_stale"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.cache.stalefile.is_stale"], ["", "def", "__bool__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "is_stale", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.files.AtomicSaveFile.__init__": [[61, 84], ["pathlib.Path().absolute", "disent.util.inout.paths.modify_file_name", "ValueError", "ValueError", "pathlib.Path", "pathlib.Path", "repr", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.modify_file_name"], ["def", "__init__", "(", "\n", "self", ",", "\n", "file", ":", "Union", "[", "str", ",", "Path", "]", ",", "\n", "open_mode", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "overwrite", ":", "bool", "=", "False", ",", "\n", "makedirs", ":", "bool", "=", "True", ",", "\n", "tmp_prefix", ":", "Optional", "[", "str", "]", "=", "'.temp.'", ",", "\n", "tmp_suffix", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", ":", "\n", "# check files", "\n", "        ", "if", "not", "file", "or", "not", "Path", "(", "file", ")", ".", "name", ":", "\n", "            ", "raise", "ValueError", "(", "f'file must not be empty: {repr(file)}'", ")", "\n", "# get files", "\n", "", "self", ".", "trg_file", "=", "Path", "(", "file", ")", ".", "absolute", "(", ")", "\n", "self", ".", "tmp_file", "=", "modify_file_name", "(", "self", ".", "trg_file", ",", "prefix", "=", "f'{tmp_prefix}{uuid4()}'", ",", "suffix", "=", "tmp_suffix", ")", "\n", "# check that the files are different", "\n", "if", "self", ".", "trg_file", "==", "self", ".", "tmp_file", ":", "\n", "            ", "raise", "ValueError", "(", "f'temporary and target files are the same: {self.tmp_file} == {self.trg_file}'", ")", "\n", "# other settings", "\n", "", "self", ".", "_makedirs", "=", "makedirs", "\n", "self", ".", "_overwrite", "=", "overwrite", "\n", "self", ".", "_open_mode", "=", "open_mode", "\n", "self", ".", "_resource", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.files.AtomicSaveFile.__enter__": [[85, 109], ["files.AtomicSaveFile.tmp_file.exists", "files.AtomicSaveFile.trg_file.exists", "files.AtomicSaveFile.tmp_file.exists", "files.AtomicSaveFile.tmp_file.parent.mkdir", "log.debug", "files.AtomicSaveFile.tmp_file.unlink", "log.debug", "open", "str", "files.AtomicSaveFile.tmp_file.is_file", "FileExistsError", "FileExistsError", "files.AtomicSaveFile.trg_file.is_file", "FileExistsError", "str"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "# check files exist or not", "\n", "        ", "if", "self", ".", "tmp_file", ".", "exists", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "tmp_file", ".", "is_file", "(", ")", ":", "\n", "                ", "raise", "FileExistsError", "(", "f'the temporary file exists but is not a file: {self.tmp_file}'", ")", "\n", "", "", "if", "self", ".", "trg_file", ".", "exists", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "_overwrite", ":", "\n", "                ", "raise", "FileExistsError", "(", "f'the target file already exists: {self.trg_file}, set overwrite=True to ignore this error.'", ")", "\n", "", "if", "not", "self", ".", "trg_file", ".", "is_file", "(", ")", ":", "\n", "                ", "raise", "FileExistsError", "(", "f'the target file exists but is not a file: {self.trg_file}'", ")", "\n", "# create the missing directories if needed", "\n", "", "", "if", "self", ".", "_makedirs", ":", "\n", "            ", "self", ".", "tmp_file", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "# delete any existing temporary files", "\n", "", "if", "self", ".", "tmp_file", ".", "exists", "(", ")", ":", "\n", "            ", "log", ".", "debug", "(", "f'deleting existing temporary file: {self.tmp_file}'", ")", "\n", "self", ".", "tmp_file", ".", "unlink", "(", ")", "\n", "# handle the different modes, deleting any existing tmp files", "\n", "", "if", "self", ".", "_open_mode", "is", "not", "None", ":", "\n", "            ", "log", ".", "debug", "(", "f'created new temporary file: {self.tmp_file}'", ")", "\n", "self", ".", "_resource", "=", "open", "(", "self", ".", "tmp_file", ",", "self", ".", "_open_mode", ")", "\n", "return", "str", "(", "self", ".", "tmp_file", ")", ",", "self", ".", "_resource", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "self", ".", "tmp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.files.AtomicSaveFile.__exit__": [[110, 137], ["log.info", "os.rename", "files.AtomicSaveFile._resource.close", "files.AtomicSaveFile.tmp_file.exists", "files.AtomicSaveFile.tmp_file.exists", "FileNotFoundError", "files.AtomicSaveFile.trg_file.exists", "files.AtomicSaveFile.trg_file.parent.mkdir", "files.AtomicSaveFile.tmp_file.unlink", "log.error", "log.error", "log.warning", "files.AtomicSaveFile.trg_file.unlink"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.data._raw.Hdf5Dataset.close"], ["", "", "def", "__exit__", "(", "self", ",", "error_type", ",", "error", ",", "traceback", ")", ":", "\n", "# close the temp file", "\n", "        ", "if", "self", ".", "_resource", "is", "not", "None", ":", "\n", "            ", "self", ".", "_resource", ".", "close", "(", ")", "\n", "self", ".", "_resource", "=", "None", "\n", "# cleanup if there was an error, and exit early", "\n", "", "if", "error_type", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "tmp_file", ".", "exists", "(", ")", ":", "\n", "                ", "self", ".", "tmp_file", ".", "unlink", "(", "missing_ok", "=", "True", ")", "\n", "log", ".", "error", "(", "f'An error occurred in {self.__class__.__name__}, cleaned up temporary file: {self.tmp_file}'", ")", "\n", "", "else", ":", "\n", "                ", "log", ".", "error", "(", "f'An error occurred in {self.__class__.__name__}'", ")", "\n", "", "return", "\n", "# the temp file must have been created!", "\n", "", "if", "not", "self", ".", "tmp_file", ".", "exists", "(", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "f'the temporary file was not created: {self.tmp_file}'", ")", "\n", "# delete the target file if it exists and overwrite is enabled:", "\n", "", "if", "self", ".", "_overwrite", ":", "\n", "            ", "if", "self", ".", "trg_file", ".", "exists", "(", ")", ":", "\n", "                ", "log", ".", "warning", "(", "f'overwriting file: {self.trg_file}'", ")", "\n", "self", ".", "trg_file", ".", "unlink", "(", "missing_ok", "=", "True", ")", "\n", "# create the missing directories if needed", "\n", "", "", "if", "self", ".", "_makedirs", ":", "\n", "            ", "self", ".", "trg_file", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "# move the temp file to the target file", "\n", "", "log", ".", "info", "(", "f'moved temporary file to final location: {self.tmp_file} -> {self.trg_file}'", ")", "\n", "os", ".", "rename", "(", "self", ".", "tmp_file", ",", "self", ".", "trg_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.files.download_file": [[144, 160], ["files.AtomicSaveFile", "requests.get", "requests.get.headers.get", "log.info", "int", "tqdm", "requests.get.iter_content", "file.write", "progress.update"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get"], ["", "", "def", "download_file", "(", "url", ":", "str", ",", "save_path", ":", "str", ",", "overwrite_existing", ":", "bool", "=", "False", ",", "chunk_size", ":", "int", "=", "16384", ")", ":", "\n", "    ", "import", "requests", "\n", "from", "tqdm", "import", "tqdm", "\n", "# write the file", "\n", "with", "AtomicSaveFile", "(", "file", "=", "save_path", ",", "open_mode", "=", "'wb'", ",", "overwrite", "=", "overwrite_existing", ")", "as", "(", "_", ",", "file", ")", ":", "\n", "        ", "response", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "total_length", "=", "response", ".", "headers", ".", "get", "(", "'content-length'", ")", "\n", "# cast to integer if content-length exists on response", "\n", "if", "total_length", "is", "not", "None", ":", "\n", "            ", "total_length", "=", "int", "(", "total_length", ")", "\n", "# download with progress bar", "\n", "", "log", ".", "info", "(", "f'Downloading: {url} to: {save_path}'", ")", "\n", "with", "tqdm", "(", "total", "=", "total_length", ",", "desc", "=", "f'Downloading'", ",", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "unit_divisor", "=", "1024", ")", "as", "progress", ":", "\n", "            ", "for", "data", "in", "response", ".", "iter_content", "(", "chunk_size", "=", "chunk_size", ")", ":", "\n", "                ", "file", ".", "write", "(", "data", ")", "\n", "progress", ".", "update", "(", "chunk_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.files.copy_file": [[162, 170], ["os.path.abspath", "os.path.abspath", "FileExistsError", "files.AtomicSaveFile", "shutil.copyfile", "repr"], "function", ["None"], ["", "", "", "", "def", "copy_file", "(", "src", ":", "str", ",", "dst", ":", "str", ",", "overwrite_existing", ":", "bool", "=", "False", ")", ":", "\n", "# copy the file", "\n", "    ", "if", "os", ".", "path", ".", "abspath", "(", "src", ")", "==", "os", ".", "path", ".", "abspath", "(", "dst", ")", ":", "\n", "        ", "raise", "FileExistsError", "(", "f'input and output paths for copy are the same, skipping: {repr(dst)}'", ")", "\n", "", "else", ":", "\n", "        ", "with", "AtomicSaveFile", "(", "file", "=", "dst", ",", "overwrite", "=", "overwrite_existing", ")", "as", "path", ":", "\n", "            ", "import", "shutil", "\n", "shutil", ".", "copyfile", "(", "src", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.files.retrieve_file": [[172, 178], ["disent.util.inout.paths.uri_parse_file_or_url", "files.download_file", "files.copy_file"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.uri_parse_file_or_url", "home.repos.pwc.inspect_result.nmichlo_disent.inout.files.download_file", "home.repos.pwc.inspect_result.nmichlo_disent.inout.files.copy_file"], ["", "", "", "def", "retrieve_file", "(", "src_uri", ":", "str", ",", "dst_path", ":", "str", ",", "overwrite_existing", ":", "bool", "=", "False", ")", ":", "\n", "    ", "uri", ",", "is_url", "=", "uri_parse_file_or_url", "(", "src_uri", ")", "\n", "if", "is_url", ":", "\n", "        ", "download_file", "(", "url", "=", "uri", ",", "save_path", "=", "dst_path", ",", "overwrite_existing", "=", "overwrite_existing", ")", "\n", "", "else", ":", "\n", "        ", "copy_file", "(", "src", "=", "uri", ",", "dst", "=", "dst_path", ",", "overwrite_existing", "=", "overwrite_existing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing._yield_file_bytes": [[35, 41], ["open", "f.read"], "function", ["None"], ["def", "_yield_file_bytes", "(", "file", ":", "str", ",", "chunk_size", "=", "16384", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "bytes", "=", "True", "\n", "while", "bytes", ":", "\n", "            ", "bytes", "=", "f", ".", "read", "(", "chunk_size", ")", "\n", "yield", "bytes", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing._yield_fast_hash_bytes": [[43, 59], ["os.path.getsize", "os.path.getsize.to_bytes", "hashing._yield_file_bytes", "open", "range", "f.seek", "f.read"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing._yield_file_bytes"], ["", "", "", "def", "_yield_fast_hash_bytes", "(", "file", ":", "str", ",", "chunk_size", "=", "16384", ",", "num_chunks", "=", "3", ")", ":", "\n", "    ", "assert", "num_chunks", ">=", "2", "\n", "# return the size in bytes", "\n", "size", "=", "os", ".", "path", ".", "getsize", "(", "file", ")", "\n", "yield", "size", ".", "to_bytes", "(", "length", "=", "64", "//", "8", ",", "byteorder", "=", "'big'", ",", "signed", "=", "False", ")", "\n", "# return file bytes chunks", "\n", "if", "size", "<", "chunk_size", "*", "num_chunks", ":", "\n", "# we cant return chunks because the file is too small, return everything!", "\n", "        ", "yield", "from", "_yield_file_bytes", "(", "file", ",", "chunk_size", "=", "chunk_size", ")", "\n", "", "else", ":", "\n", "# includes evenly spaced start, middle and end chunks", "\n", "        ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_chunks", ")", ":", "\n", "                ", "pos", "=", "(", "i", "*", "(", "size", "-", "chunk_size", ")", ")", "//", "(", "num_chunks", "-", "1", ")", "\n", "f", ".", "seek", "(", "pos", ")", "\n", "yield", "f", ".", "read", "(", "chunk_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.hash_file": [[66, 95], ["hashlib.new", "hash.hexdigest.hexdigest", "os.path.isfile", "FileNotFoundError", "hashing._yield_file_bytes", "hash.hexdigest.update", "hashing._yield_fast_hash_bytes", "KeyError", "repr", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing._yield_file_bytes", "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing._yield_fast_hash_bytes"], ["", "", "", "", "def", "hash_file", "(", "file", ":", "str", ",", "hash_type", "=", "'md5'", ",", "hash_mode", "=", "'full'", ",", "missing_ok", ":", "bool", "=", "False", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    :param file: the path to the file\n    :param hash_type: the kind of hash to compute, default is \"md5\"\n    :param hash_mode: \"full\" uses all the bytes in the file to compute the hash, \"fast\" uses the start, middle, end bytes as well as the size of the file in the hash.\n    :param missing_ok: If enabled, then an error is not thrown if the file is missing, rather an empty hash is returned!\n    :return: the hexdigest of the hash\n    :raises FileNotFoundError\n    \"\"\"", "\n", "import", "hashlib", "\n", "# check the file exists", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "file", ")", ":", "\n", "        ", "if", "missing_ok", ":", "\n", "            ", "return", "''", "\n", "", "raise", "FileNotFoundError", "(", "f'could not compute hash for missing file: {repr(file)}'", ")", "\n", "# get file bytes iterator", "\n", "", "if", "hash_mode", "==", "'full'", ":", "\n", "        ", "byte_iter", "=", "_yield_file_bytes", "(", "file", "=", "file", ")", "\n", "", "elif", "hash_mode", "==", "'fast'", ":", "\n", "        ", "byte_iter", "=", "_yield_fast_hash_bytes", "(", "file", "=", "file", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f'invalid hash_mode: {repr(hash_mode)}'", ")", "\n", "# generate hash", "\n", "", "hash", "=", "hashlib", ".", "new", "(", "hash_type", ")", "\n", "for", "bytes", "in", "byte_iter", ":", "\n", "        ", "hash", ".", "update", "(", "bytes", ")", "\n", "", "hash", "=", "hash", ".", "hexdigest", "(", ")", "\n", "# done", "\n", "return", "hash", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.normalise_hash": [[108, 119], ["isinstance", "KeyError", "repr"], "function", ["None"], ["", "def", "normalise_hash", "(", "hash", ":", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", ",", "hash_mode", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    file hashes depend on the mode.\n    - Allow hashes to be dictionaries that map the hash_mode to the hash.\n      This function returns the correct hash if it is a dictionary.\n    \"\"\"", "\n", "if", "isinstance", "(", "hash", ",", "dict", ")", ":", "\n", "        ", "if", "hash_mode", "not", "in", "hash", ":", "\n", "            ", "raise", "KeyError", "(", "f'hash dictionary does not contain a key for the specified mode: {repr(hash_mode)}, available hashes are: {hash}'", ")", "\n", "", "return", "hash", "[", "hash_mode", "]", "\n", "", "return", "hash", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.validate_file_hash": [[121, 131], ["hashing.normalise_hash", "hashing.hash_file", "hashing.HashError", "repr", "repr", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.normalise_hash", "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.hash_file"], ["", "def", "validate_file_hash", "(", "file", ":", "str", ",", "hash", ":", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", ",", "hash_type", ":", "str", "=", "'md5'", ",", "hash_mode", ":", "str", "=", "'full'", ",", "missing_ok", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :raises FileNotFoundError, HashError\n    \"\"\"", "\n", "hash", "=", "normalise_hash", "(", "hash", "=", "hash", ",", "hash_mode", "=", "hash_mode", ")", "\n", "# compute the hash", "\n", "fhash", "=", "hash_file", "(", "file", "=", "file", ",", "hash_type", "=", "hash_type", ",", "hash_mode", "=", "hash_mode", ",", "missing_ok", "=", "missing_ok", ")", "\n", "# check the hash", "\n", "if", "fhash", "!=", "hash", ":", "\n", "        ", "raise", "HashError", "(", "f'computed {hash_mode} {hash_type} hash: {repr(fhash)} does not match expected hash: {repr(hash)} for file: {repr(file)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.is_valid_file_hash": [[133, 139], ["hashing.validate_file_hash"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.hashing.validate_file_hash"], ["", "", "def", "is_valid_file_hash", "(", "file", ":", "str", ",", "hash", ":", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", ",", "hash_type", ":", "str", "=", "'md5'", ",", "hash_mode", ":", "str", "=", "'full'", ",", "missing_ok", ":", "bool", "=", "False", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "validate_file_hash", "(", "file", "=", "file", ",", "hash", "=", "hash", ",", "hash_type", "=", "hash_type", ",", "hash_mode", "=", "hash_mode", ",", "missing_ok", "=", "missing_ok", ")", "\n", "", "except", "HashError", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.modify_file_name": [[40, 50], ["pathlib.Path", "pathlib.Path.parent.joinpath", "isinstance", "str", "repr", "repr"], "function", ["None"], ["def", "modify_file_name", "(", "file", ":", "Union", "[", "str", ",", "Path", "]", ",", "prefix", ":", "str", "=", "None", ",", "suffix", ":", "str", "=", "None", ",", "sep", "=", "'.'", ")", "->", "Union", "[", "str", ",", "Path", "]", ":", "\n", "# get path components", "\n", "    ", "path", "=", "Path", "(", "file", ")", "\n", "assert", "path", ".", "name", ",", "f'file name cannot be empty: {repr(path)}, for name: {repr(path.name)}'", "\n", "# create new path", "\n", "prefix", "=", "''", "if", "(", "not", "prefix", ")", "else", "f'{prefix}{sep}'", "\n", "suffix", "=", "''", "if", "(", "not", "suffix", ")", "else", "f'{sep}{suffix}'", "\n", "new_path", "=", "path", ".", "parent", ".", "joinpath", "(", "f'{prefix}{path.name}{suffix}'", ")", "\n", "# return path with same format as input", "\n", "return", "str", "(", "new_path", ")", "if", "isinstance", "(", "file", ",", "str", ")", "else", "new_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.modify_name_keep_ext": [[52, 73], ["pathlib.Path", "pathlib.Path.parent.joinpath", "isinstance", "str", "repr", "repr", "name.rsplit", "pathlib.Path.name.split", "len"], "function", ["None"], ["", "def", "modify_name_keep_ext", "(", "file", ":", "Union", "[", "str", ",", "Path", "]", ",", "prefix", ":", "str", "=", "None", ",", "suffix", ":", "str", "=", "None", ",", "name_contains_sep", ":", "bool", "=", "False", ")", "->", "Union", "[", "str", ",", "Path", "]", ":", "\n", "# get path components", "\n", "    ", "path", "=", "Path", "(", "file", ")", "\n", "name", "=", "path", ".", "name", "\n", "assert", "name", ",", "f'file name cannot be empty: {repr(path)}, for name: {repr(name)}'", "\n", "# handle suffix", "\n", "if", "suffix", ":", "\n", "        ", "components", "=", "name", ".", "rsplit", "(", "'.'", ",", "1", ")", "if", "name_contains_sep", "else", "path", ".", "name", ".", "split", "(", "'.'", ",", "1", ")", "\n", "if", "len", "(", "components", ")", ">=", "2", ":", "\n", "            ", "[", "name", ",", "ext", "]", "=", "components", "\n", "name", "=", "f'{name}{suffix}.{ext}'", "\n", "", "else", ":", "\n", "            ", "[", "name", "]", "=", "components", "\n", "name", "=", "f'{name}{suffix}'", "\n", "# handle prefix", "\n", "", "", "if", "prefix", ":", "\n", "        ", "name", "=", "f'{prefix}{name}'", "\n", "# create new path", "\n", "", "new_path", "=", "path", ".", "parent", ".", "joinpath", "(", "name", ")", "\n", "# return path with same format as input", "\n", "return", "str", "(", "new_path", ")", "if", "isinstance", "(", "file", ",", "str", ")", "else", "new_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.modify_ext": [[75, 87], ["pathlib.Path", "pathlib.Path.parent.joinpath", "ext.startswith", "name.rsplit", "pathlib.Path.name.split", "isinstance", "str", "repr", "repr", "repr"], "function", ["None"], ["", "def", "modify_ext", "(", "file", ":", "Union", "[", "str", ",", "Path", "]", ",", "ext", ":", "str", ",", "name_contains_sep", ":", "bool", "=", "True", ")", "->", "Union", "[", "str", ",", "Path", "]", ":", "\n", "    ", "assert", "not", "ext", ".", "startswith", "(", "'.'", ")", ",", "f'please specify the extension without the starting period: {repr(ext)}'", "\n", "# get path components", "\n", "path", "=", "Path", "(", "file", ")", "\n", "name", "=", "path", ".", "name", "\n", "assert", "name", ",", "f'file name cannot be empty: {repr(path)}, for name: {repr(name)}'", "\n", "# update the path name", "\n", "(", "name", ",", "*", "_", ")", "=", "name", ".", "rsplit", "(", "'.'", ",", "1", ")", "if", "name_contains_sep", "else", "path", ".", "name", ".", "split", "(", "'.'", ",", "1", ")", "\n", "name", "=", "f'{name}.{ext}'", "\n", "new_path", "=", "path", ".", "parent", ".", "joinpath", "(", "name", ")", "\n", "# return path with same format as input", "\n", "return", "str", "(", "new_path", ")", "if", "isinstance", "(", "file", ",", "str", ")", "else", "new_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.ensure_dir_exists": [[94, 112], ["os.path.join", "os.path.exists", "os.path.abspath", "os.path.dirname", "os.makedirs", "log.info", "os.path.isdir", "IOError"], "function", ["None"], ["", "def", "ensure_dir_exists", "(", "*", "join_paths", ":", "str", ",", "is_file", "=", "False", ",", "absolute", "=", "False", ")", ":", "\n", "    ", "import", "os", "\n", "# join path", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "*", "join_paths", ")", "\n", "# to abs path", "\n", "if", "absolute", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "abspath", "(", "path", ")", "\n", "# remove file", "\n", "", "dirs", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "if", "is_file", "else", "path", "\n", "# create missing directory", "\n", "if", "os", ".", "path", ".", "exists", "(", "dirs", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirs", ")", ":", "\n", "            ", "raise", "IOError", "(", "f'path is not a directory: {dirs}'", ")", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirs", ",", "exist_ok", "=", "True", ")", "\n", "log", ".", "info", "(", "f'created missing directories: {dirs}'", ")", "\n", "# return directory", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.ensure_parent_dir_exists": [[114, 116], ["paths.ensure_dir_exists"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.ensure_dir_exists"], ["", "def", "ensure_parent_dir_exists", "(", "*", "join_paths", ":", "str", ")", ":", "\n", "    ", "return", "ensure_dir_exists", "(", "*", "join_paths", ",", "is_file", "=", "True", ",", "absolute", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.filename_from_url": [[123, 127], ["os.path.basename", "urlparse"], "function", ["None"], ["", "def", "filename_from_url", "(", "url", ":", "str", ")", ":", "\n", "    ", "import", "os", "\n", "from", "urllib", ".", "parse", "import", "urlparse", "\n", "return", "os", ".", "path", ".", "basename", "(", "urlparse", "(", "url", ")", ".", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.inout.paths.uri_parse_file_or_url": [[129, 151], ["urlparse", "urlparse.geturl", "os.path.abspath", "ValueError", "urlparse.geturl", "KeyError", "os.path.isabs", "RuntimeError", "repr", "urlparse.geturl", "repr", "repr"], "function", ["None"], ["", "def", "uri_parse_file_or_url", "(", "inp_uri", ":", "str", ")", "->", "Tuple", "[", "str", ",", "bool", "]", ":", "\n", "    ", "from", "urllib", ".", "parse", "import", "urlparse", "\n", "result", "=", "urlparse", "(", "inp_uri", ")", "\n", "# parse different cases", "\n", "if", "result", ".", "scheme", "in", "(", "'http'", ",", "'https'", ")", ":", "\n", "        ", "is_url", "=", "True", "\n", "uri", "=", "result", ".", "geturl", "(", ")", "\n", "", "elif", "result", ".", "scheme", "in", "(", "'file'", ",", "''", ")", ":", "\n", "        ", "is_url", "=", "False", "\n", "if", "result", ".", "scheme", "==", "'file'", ":", "\n", "            ", "if", "result", ".", "netloc", ":", "\n", "                ", "raise", "KeyError", "(", "f'file uri format is invalid: \"{result.geturl()}\" two slashes specifies host as: \"{result.netloc}\" eg. instead of \"file://hostname/root_folder/file.txt\", please use: \"file:/root_folder/file.txt\" (no hostname) or \"file:///root_folder/file.txt\" (empty hostname).'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isabs", "(", "result", ".", "path", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "f'path: {repr(result.path)} obtained from file URI: {repr(inp_uri)} should always be absolute'", ")", "\n", "", "uri", "=", "result", ".", "path", "\n", "", "else", ":", "\n", "            ", "uri", "=", "result", ".", "geturl", "(", ")", "\n", "", "uri", "=", "os", ".", "path", ".", "abspath", "(", "uri", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'invalid file or url: {repr(inp_uri)}'", ")", "\n", "# done", "\n", "", "return", "uri", ",", "is_url", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.integer.gcd": [[31, 41], ["isinstance", "isinstance", "type", "type"], "function", ["None"], ["def", "gcd", "(", "a", ":", "int", ",", "b", ":", "int", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Compute the greatest common divisor of a and b\n    TODO: not actually sure if this returns the correct values for zero or negative inputs?\n    \"\"\"", "\n", "assert", "isinstance", "(", "a", ",", "int", ")", ",", "f'number must be an int, got: {type(a)}'", "\n", "assert", "isinstance", "(", "b", ",", "int", ")", ",", "f'number must be an int, got: {type(b)}'", "\n", "while", "b", ">", "0", ":", "\n", "        ", "a", ",", "b", "=", "b", ",", "a", "%", "b", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.integer.lcm": [[43, 49], ["integer.gcd"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.math.integer.gcd"], ["", "def", "lcm", "(", "a", ":", "int", ",", "b", ":", "int", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Compute the lowest common multiple of a and b\n    TODO: not actually sure if this returns the correct values for zero or negative inputs?\n    \"\"\"", "\n", "return", "(", "a", "*", "b", ")", "//", "gcd", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.random.random_choice_prng": [[34, 47], ["numpy.random.Generator", "np.random.Generator.choice", "numpy.random.randint", "numpy.random.PCG64"], "function", ["None"], ["def", "random_choice_prng", "(", "a", ",", "size", "=", "None", ",", "replace", "=", "True", ",", "seed", ":", "int", "=", "None", ")", ":", "\n", "# generate a random seed", "\n", "    ", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", "**", "32", ")", "\n", "# create seeded pseudo random number generator", "\n", "# - built in np.random.choice cannot handle large values: https://github.com/numpy/numpy/issues/5299#issuecomment-497915672", "\n", "# - PCG64 is the default: https://numpy.org/doc/stable/reference/random/bit_generators/index.html", "\n", "# - PCG64 has good statistical properties and is fast: https://numpy.org/doc/stable/reference/random/performance.html", "\n", "", "g", "=", "np", ".", "random", ".", "Generator", "(", "np", ".", "random", ".", "PCG64", "(", "seed", "=", "seed", ")", ")", "\n", "# sample indices", "\n", "choices", "=", "g", ".", "choice", "(", "a", ",", "size", "=", "size", ",", "replace", "=", "replace", ")", "\n", "# done!", "\n", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.random.randint2": [[54, 77], ["numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.random.randint", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "randint2", "(", "a_low", ",", "a_high", ",", "b_low", ",", "b_high", ",", "size", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Like np.random.randint, but supports two ranges of values.\n    Samples with equal probability from both ranges.\n    - a: [a_low, a_high) -> including a_low, excluding a_high!\n    - b: [b_low, b_high) -> including b_low, excluding b_high!\n    \"\"\"", "\n", "# convert", "\n", "a_low", ",", "a_high", "=", "np", ".", "array", "(", "a_low", ")", ",", "np", ".", "array", "(", "a_high", ")", "\n", "b_low", ",", "b_high", "=", "np", ".", "array", "(", "b_low", ")", ",", "np", ".", "array", "(", "b_high", ")", "\n", "# checks", "\n", "assert", "np", ".", "all", "(", "a_low", "<=", "a_high", ")", ",", "f'a_low <= a_high | {a_low} <= {a_high}'", "\n", "assert", "np", ".", "all", "(", "b_low", "<=", "b_high", ")", ",", "f'b_low <= b_high | {b_low} <= {b_high}'", "\n", "assert", "np", ".", "all", "(", "a_high", "<=", "b_low", ")", ",", "f'a_high <= b_low | {a_high} <= {b_low}'", "\n", "# compute", "\n", "da", "=", "a_high", "-", "a_low", "\n", "db", "=", "b_high", "-", "b_low", "\n", "d", "=", "da", "+", "db", "\n", "assert", "np", ".", "all", "(", "d", ">", "0", ")", ",", "f'(a_high - a_low) + (b_high - b_low) > 0 | {d} = ({a_high} - {a_low}) + ({b_high} - {b_low}) > 0'", "\n", "# sampled", "\n", "offset", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "d", ",", "size", "=", "size", ")", "\n", "offset", "+=", "(", "da", "<=", "offset", ")", "*", "(", "b_low", "-", "a_high", ")", "\n", "return", "a_low", "+", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.random.sample_radius": [[79, 96], ["numpy.array", "numpy.all", "numpy.all", "random.randint2", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.math.random.randint2"], ["", "def", "sample_radius", "(", "value", ",", "low", ",", "high", ",", "r_low", ",", "r_high", ")", ":", "\n", "    ", "\"\"\"\n    Sample around the given value (low <= value < high),\n    the resampled value will lie in th same range.\n    - sampling occurs in a radius around the value\n      r_low <= radius < r_high\n    \"\"\"", "\n", "value", "=", "np", ".", "array", "(", "value", ")", "\n", "assert", "np", ".", "all", "(", "low", "<=", "value", ")", "\n", "assert", "np", ".", "all", "(", "value", "<", "high", ")", "\n", "# sample for new value", "\n", "return", "randint2", "(", "\n", "a_low", "=", "np", ".", "maximum", "(", "value", "-", "r_high", "+", "1", ",", "low", ")", ",", "\n", "a_high", "=", "np", ".", "maximum", "(", "value", "-", "r_low", "+", "1", ",", "low", ")", ",", "\n", "# if r_min == 0, then the ranges overlap, so we must shift one of them.", "\n", "b_low", "=", "np", ".", "minimum", "(", "value", "+", "r_low", "+", "(", "r_low", "==", "0", ")", ",", "high", ")", ",", "\n", "b_high", "=", "np", ".", "minimum", "(", "value", "+", "r_high", ",", "high", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.dither.nd_dither_offsets": [[38, 67], ["dither.nd_dither_offsets", "numpy.array", "dither._np_immutable_copy", "isinstance", "numpy.array", "numpy.flip"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.math.dither.nd_dither_offsets", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.math.dither._np_immutable_copy", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["def", "nd_dither_offsets", "(", "d", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Get the offsets for the d-dimensional dither matrix.\n\n    Output: array of shape: [2]*d\n\n    Algorithm:\n    M(d+1) = | 2 *     M(d)      |\n             | 2 * flip(M(d)) + 1 |\n\n    Examples:\n    d=1:  | d=2:    | d=3:\n    ------+---------+----------\n    [0 1] | [[0 2]  | [[[0 4]\n          |  [3 1]] |   [6 2]]\n          |         |  [[3 7]\n          |         |   [5 1]]]\n    \"\"\"", "\n", "assert", "isinstance", "(", "d", ",", "int", ")", "and", "(", "d", ">", "0", ")", "\n", "# base offsets", "\n", "if", "d", "==", "1", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "# recurse", "\n", "", "prev", "=", "nd_dither_offsets", "(", "d", "=", "d", "-", "1", ")", "\n", "offs", "=", "np", ".", "array", "(", "[", "\n", "2", "*", "prev", ",", "\n", "2", "*", "np", ".", "flip", "(", "prev", ")", "+", "1", "# flip(prev) is the same as prev[::-1, >>>] with ::-1 in all dimensions", "\n", "]", ")", "\n", "return", "_np_immutable_copy", "(", "offs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.dither.nd_dither_matrix": [[69, 113], ["dither._is_power_2", "dither.nd_dither_offsets", "dither.nd_dither_matrix", "numpy.kron", "numpy.tile", "dither._np_immutable_copy", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.math.dither._is_power_2", "home.repos.pwc.inspect_result.nmichlo_disent.math.dither.nd_dither_offsets", "home.repos.pwc.inspect_result.nmichlo_disent.math.dither.nd_dither_matrix", "home.repos.pwc.inspect_result.nmichlo_disent.math.dither._np_immutable_copy"], ["", "def", "nd_dither_matrix", "(", "n", ":", "int", "=", "2", ",", "d", ":", "int", "=", "2", ",", "norm", ":", "bool", "=", "True", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Compute the d-dimension dither matrix, with dimensions of size n.\n    - n must be a power of 2!\n\n    Output: array of shape: [n]*d\n\n    Algorithm (d=2):\n    M(2n) = | 4 * M(n) + 0     4 * M(n) + 2 |\n            | 4 * M(n) + 3     4 * M(n) + 1 |\n\n    Examples (n=2, norm=False):\n    d=1:  | d=2:    | d=3:\n    ------+---------+----------\n    [0 1] | [[0 2]  | [[[0 4]\n          |  [3 1]] |   [6 2]]\n          |         |  [[3 7]\n          |         |   [5 1]]]\n\n    Examples (n=4, norm=False):\n    d=1:      | d=2:\n    ----------+----------------\n    [0 2 1 3] | [[ 0  8  2 10]\n              |  [12  4 14  6]\n              |  [ 3 11  1  9]\n              |  [15  7 13  5]]\n    \"\"\"", "\n", "assert", "_is_power_2", "(", "n", ")", "\n", "# handle smallest case", "\n", "if", "n", "==", "1", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "[", "1", "]", "*", "d", ")", "# shape: [1] * d", "\n", "# recurse", "\n", "", "offs", "=", "nd_dither_offsets", "(", "d", "=", "d", ")", "# shape: [2] * d", "\n", "prev", "=", "nd_dither_matrix", "(", "n", "=", "n", "//", "2", ",", "d", "=", "d", ",", "norm", "=", "False", ")", "# shape: [N//2] * d", "\n", "# combine", "\n", "noffs", "=", "np", ".", "kron", "(", "\n", "offs", ",", "np", ".", "ones", "(", "[", "n", "//", "2", "]", "*", "d", ")", "\n", ")", "# kron, eg. [0, 1] -> [0, 0, 1, 1] | we need to enlarge to shape: [n] * d", "\n", "nprev", "=", "np", ".", "tile", "(", "prev", ",", "[", "2", "]", "*", "d", ")", "# tile, eg. [0, 1] -> [0, 1, 0, 1] | we need to enlarge to shape: [n] * d", "\n", "next", "=", "nprev", "*", "offs", ".", "size", "+", "noffs", "# shape: [n] * d", "\n", "# return", "\n", "if", "norm", ":", "\n", "        ", "next", "/=", "next", ".", "size", "\n", "", "return", "_np_immutable_copy", "(", "next", ")", "# shape: [n] * d", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.dither.nd_dither": [[120, 132], ["dither.nd_dither_matrix_like"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.math.dither.nd_dither_matrix_like"], ["", "def", "nd_dither", "(", "arr", ":", "np", ".", "ndarray", ",", "n", ":", "int", "=", "2", ",", "axis", ":", "Optional", "[", "Sequence", "[", "int", "]", "]", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Apply ordered dithering along the specified axes of an array.\n    The array must be floats with values in the range [0, 1]\n\n    If axis is not specified, then all the axes are dithered.\n\n    The output is a boolean array with the same shape as the input arr.\n    \"\"\"", "\n", "dd", "=", "nd_dither_matrix_like", "(", "arr", ",", "n", "=", "n", ",", "axis", "=", "axis", ",", "norm", "=", "True", ",", "expand", "=", "True", ")", "\n", "# compute dither", "\n", "return", "arr", ">", "dd", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.dither.nd_dither_matrix_like": [[134, 156], ["dither._normalize_axis", "dither.nd_dither_matrix", "numpy.tile", "tuple", "numpy.array", "numpy.expand_dims", "len", "tuple", "tuple", "slice", "set", "set", "range"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.math.dither._normalize_axis", "home.repos.pwc.inspect_result.nmichlo_disent.math.dither.nd_dither_matrix", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "nd_dither_matrix_like", "(", "arr", ":", "np", ".", "ndarray", ",", "n", ":", "int", "=", "2", ",", "axis", ":", "Optional", "[", "Sequence", "[", "int", "]", "]", "=", "None", ",", "norm", ":", "bool", "=", "True", ",", "expand", ":", "bool", "=", "True", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Tile the dither matrix across an array.\n    - `norm` specifies that the values should be in the range [0, 1)\n       and not the original indices in the range [0, 2**d)\n    - Use `axis` to specify which dimensions are tiled\n      unspecified dimensions are set to size 1 for broadcasting\n      with the original matrix, unless `expand=False`\n    - `n` is the size of the underlying dither matrix which is tiled\n    \"\"\"", "\n", "axis", "=", "_normalize_axis", "(", "arr", ".", "ndim", ",", "tuple", "(", "axis", ")", ")", "\n", "sizes", "=", "np", ".", "array", "(", "arr", ".", "shape", ")", "[", "axis", "]", "\n", "# get dither values", "\n", "d_mat", "=", "nd_dither_matrix", "(", "n", "=", "n", ",", "d", "=", "len", "(", "axis", ")", ",", "norm", "=", "norm", ")", "\n", "# repeat values across array, rounding up and then trimming dims", "\n", "dd", "=", "np", ".", "tile", "(", "d_mat", ",", "(", "sizes", "+", "n", "-", "1", ")", "//", "n", ")", "\n", "dd", "=", "dd", "[", "tuple", "(", "slice", "(", "0", ",", "l", ")", "for", "l", "in", "sizes", ")", "]", "\n", "# create missing dims", "\n", "if", "expand", ":", "\n", "        ", "dd", "=", "np", ".", "expand_dims", "(", "dd", ",", "axis", "=", "tuple", "(", "set", "(", "range", "(", "arr", ".", "ndim", ")", ")", "-", "set", "(", "axis", ")", ")", ")", "\n", "# done", "\n", "", "return", "dd", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.dither._np_immutable_copy": [[163, 167], ["numpy.copy"], "function", ["None"], ["", "def", "_np_immutable_copy", "(", "arr", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "arr", "=", "np", ".", "copy", "(", "arr", ")", "# does not copy inner python objects", "\n", "arr", ".", "flags", ".", "writeable", "=", "False", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.dither._is_power_2": [[169, 174], ["isinstance", "bool"], "function", ["None"], ["", "def", "_is_power_2", "(", "num", ":", "int", ")", ":", "\n", "    ", "assert", "isinstance", "(", "num", ",", "int", ")", "\n", "if", "num", "<=", "0", ":", "\n", "        ", "return", "False", "\n", "", "return", "not", "bool", "(", "num", "&", "(", "num", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.math.dither._normalize_axis": [[176, 199], ["functools.lru_cache", "numpy.array", "numpy.where", "numpy.sort", "numpy.all", "numpy.all", "dither._np_immutable_copy", "numpy.arange", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.math.dither._np_immutable_copy"], ["", "@", "functools", ".", "lru_cache", "(", ")", "\n", "def", "_normalize_axis", "(", "ndim", ":", "int", ",", "axis", ":", "Optional", "[", "Sequence", "[", "int", "]", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "# TODO: this functionality may be duplicated", "\n", "#       -- similar to np.normalize_axis_tuple(...)", "\n", "# defaults", "\n", "    ", "if", "axis", "is", "None", ":", "\n", "        ", "axis", "=", "np", ".", "arange", "(", "ndim", ")", "\n", "# convert", "\n", "", "axis", "=", "np", ".", "array", "(", "axis", ")", "\n", "if", "axis", ".", "ndim", "==", "0", ":", "\n", "        ", "axis", "=", "axis", "[", "None", "]", "\n", "# checks", "\n", "", "assert", "axis", ".", "ndim", "==", "1", "\n", "assert", "axis", ".", "dtype", "in", "(", "'int'", ",", "'int32'", ",", "'int64'", ")", "\n", "# convert", "\n", "axis", "=", "np", ".", "where", "(", "axis", "<", "0", ",", "ndim", "+", "axis", ",", "axis", ")", "\n", "axis", "=", "np", ".", "sort", "(", "axis", ")", "\n", "# checks", "\n", "assert", "np", ".", "unique", "(", "axis", ")", ".", "shape", "==", "axis", ".", "shape", "\n", "assert", "np", ".", "all", "(", "0", "<=", "axis", ")", "\n", "assert", "np", ".", "all", "(", "axis", "<", "ndim", ")", "\n", "# done!", "\n", "return", "_np_immutable_copy", "(", "axis", ")", "# shape: [d]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.make_image_grid": [[59, 95], ["numpy.all", "vis_util._get_grid_size", "numpy.full_like", "enumerate", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util._get_grid_size", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["def", "make_image_grid", "(", "images", ":", "Sequence", "[", "np", ".", "ndarray", "]", ",", "pad", ":", "int", "=", "8", ",", "border", ":", "bool", "=", "True", ",", "bg_color", "=", "None", ",", "num_cols", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert a list of images into a single image that is a grid of those images.\n    :param images: list of input images, all the same size: (I, H, W, C) or (I, H, W)\n    :param pad: the number of pixels between images\n    :param border: if there should be a border around the grid\n    :param bg_color: the background color to use for padding (can be a float, int or RGB tuple)\n    :param num_cols: the number of output columns in the grid. None for auto square, -1 for rows==1, or > 0 for that many cols.\n    :return: single output image:  (H', W') or (H', W', C)\n    \"\"\"", "\n", "# first, second, third channels are the (H, W, C)", "\n", "# get image sizes", "\n", "img_shape", ",", "ndim", "=", "np", ".", "array", "(", "images", "[", "0", "]", ".", "shape", ")", ",", "images", "[", "0", "]", ".", "ndim", "\n", "assert", "ndim", "==", "2", "or", "ndim", "==", "3", ",", "f'images have wrong number of channels: {img_shape}'", "\n", "assert", "np", ".", "all", "(", "img_shape", "==", "img", ".", "shape", "for", "img", "in", "images", ")", ",", "'Images are not the same shape!'", "\n", "# get image size and channels", "\n", "img_size", "=", "img_shape", "[", ":", "2", "]", "\n", "if", "ndim", "==", "3", ":", "\n", "        ", "assert", "img_shape", "[", "2", "]", "in", "(", "1", ",", "3", ",", "4", ")", ",", "f'Invalid number of channels for an image: {img_shape}'", "\n", "# get bg color", "\n", "", "if", "bg_color", "is", "None", ":", "\n", "        ", "bg_color", "=", "_BG_COLOR_DTYPE_MAP", "[", "images", "[", "0", "]", ".", "dtype", "]", "\n", "# grid sizes", "\n", "", "num_rows", ",", "num_cols", "=", "_get_grid_size", "(", "len", "(", "images", ")", ",", "num_cols", "=", "num_cols", ")", "\n", "grid_size", "=", "(", "img_size", "+", "pad", ")", "*", "[", "num_rows", ",", "num_cols", "]", "+", "(", "pad", "if", "border", "else", "-", "pad", ")", "\n", "# image sizes including padding on one side", "\n", "deltas", "=", "img_size", "+", "pad", "\n", "offset", "=", "pad", "if", "border", "else", "0", "\n", "# make image", "\n", "grid", "=", "np", ".", "full_like", "(", "images", ",", "fill_value", "=", "bg_color", ",", "shape", "=", "(", "*", "grid_size", ",", "*", "img_shape", "[", "2", ":", "]", ")", ")", "\n", "# fill image", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "y0", ",", "x0", "=", "offset", "+", "deltas", "*", "[", "i", "//", "num_cols", ",", "i", "%", "num_cols", "]", "\n", "y1", ",", "x1", "=", "img_size", "+", "[", "y0", ",", "x0", "]", "\n", "grid", "[", "y0", ":", "y1", ",", "x0", ":", "x1", ",", "...", "]", "=", "img", "\n", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.make_animated_image_grid": [[97, 114], ["zip", "disent.util.to_numpy", "frames.append", "vis_util.make_image_grid"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.make_image_grid"], ["", "def", "make_animated_image_grid", "(", "list_of_animated_images", ":", "Sequence", "[", "np", ".", "ndarray", "]", ",", "pad", ":", "int", "=", "8", ",", "border", ":", "bool", "=", "True", ",", "bg_color", "=", "None", ",", "num_cols", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param list_of_animated_images: list of input images, with the second dimension the number of frames: : (I, F, H, W, C) or (I, F, H, W)\n    :param pad: the number of pixels between images\n    :param border: if there should be a border around the grid\n    :param bg_color: the background color to use for padding (can be a float, int or RGB tuple)\n    :param num_cols: the number of output columns in the grid. None for auto square, -1 for rows==1, or > 0 for that many cols.\n    :return: animated output image: (F, H', W') or (F, H', W', C)\n    \"\"\"", "\n", "# first channel is the image (I)", "\n", "# second channel is the frame (F)", "\n", "# third, fourth, fifth channels are the (H, W, C)", "\n", "# -- (I, F, H, W, C)", "\n", "frames", "=", "[", "]", "\n", "for", "list_of_images", "in", "zip", "(", "*", "list_of_animated_images", ")", ":", "\n", "        ", "frames", ".", "append", "(", "make_image_grid", "(", "list_of_images", ",", "pad", "=", "pad", ",", "border", "=", "border", ",", "bg_color", "=", "bg_color", ",", "num_cols", "=", "num_cols", ")", ")", "\n", "", "return", "to_numpy", "(", "frames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util._get_grid_size": [[121, 135], ["int", "numpy.ceil"], "function", ["None"], ["", "def", "_get_grid_size", "(", "n", ":", "int", ",", "num_cols", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Determine the number of rows and columns, given the total number of elements n.\n    - if num_cols is None:     rows x cols is as square as possible\n    - if num_cols is a number: minimum number of rows needed is returned.\n    - if num_cols <= 0:        only 1 row is returned\n    :return: (num_rows, num_cols)\n    \"\"\"", "\n", "if", "num_cols", "is", "None", ":", "\n", "        ", "num_cols", "=", "int", "(", "np", ".", "ceil", "(", "n", "**", "0.5", ")", ")", "\n", "", "elif", "num_cols", "<=", "0", ":", "\n", "        ", "num_cols", "=", "n", "\n", "", "num_rows", "=", "(", "n", "+", "num_cols", "-", "1", ")", "//", "num_cols", "\n", "return", "num_rows", ",", "num_cols", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util._get_interval_factor_traversal": [[142, 152], ["numpy.linspace", "numpy.int64", "numpy.around"], "function", ["None"], ["", "def", "_get_interval_factor_traversal", "(", "factor_size", ":", "int", ",", "num_frames", ":", "int", ",", "start_index", ":", "int", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Cycles through the state space in a single cycle.\n    eg. num_indices=5, num_frames=7 returns: [0,1,1,2,3,3,4]\n    eg. num_indices=4, num_frames=7 returns: [0,0,1,2,2,2,3]  # TODO: this result is weird\n    \"\"\"", "\n", "grid", "=", "np", ".", "linspace", "(", "0", ",", "factor_size", "-", "1", ",", "num", "=", "num_frames", ",", "endpoint", "=", "True", ")", "\n", "grid", "=", "np", ".", "int64", "(", "np", ".", "around", "(", "grid", ")", ")", "\n", "grid", "=", "(", "start_index", "+", "grid", ")", "%", "factor_size", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util._get_cycle_factor_traversal": [[154, 164], ["vis_util._get_interval_factor_traversal", "numpy.concatenate", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util._get_interval_factor_traversal"], ["", "def", "_get_cycle_factor_traversal", "(", "factor_size", ":", "int", ",", "num_frames", ":", "int", ",", "start_index", ":", "int", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Cycles through the state space in a single cycle.\n    eg. num_indices=5, num_frames=7 returns: [0,1,3,4,3,2,1]\n    eg. num_indices=4, num_frames=7 returns: [0,1,2,3,2,2,0]\n    \"\"\"", "\n", "assert", "start_index", "==", "0", ",", "f'cycle factor traversal mode only supports start_index==0, got: {repr(start_index)}'", "\n", "grid", "=", "_get_interval_factor_traversal", "(", "factor_size", "=", "factor_size", ",", "num_frames", "=", "num_frames", ",", "start_index", "=", "0", ")", "\n", "grid", "=", "np", ".", "concatenate", "(", "[", "grid", "[", "0", ":", ":", "2", "]", ",", "grid", "[", "1", ":", ":", "2", "]", "[", ":", ":", "-", "1", "]", "]", ")", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util._get_cycle_factor_traversal_from_start": [[166, 178], ["numpy.array", "vis_util._get_interval_factor_traversal", "len", "range", "reversed", "range", "range"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util._get_interval_factor_traversal"], ["", "def", "_get_cycle_factor_traversal_from_start", "(", "factor_size", ":", "int", ",", "num_frames", ":", "int", ",", "start_index", ":", "int", "=", "0", ",", "ends", ":", "bool", "=", "False", ")", ":", "\n", "    ", "all_idxs", "=", "np", ".", "array", "(", "[", "\n", "*", "range", "(", "start_index", ",", "factor_size", "-", "(", "1", "if", "ends", "else", "0", ")", ")", ",", "\n", "*", "reversed", "(", "range", "(", "0", ",", "factor_size", ")", ")", ",", "\n", "*", "range", "(", "1", "if", "ends", "else", "0", ",", "start_index", ")", ",", "\n", "]", ")", "\n", "selected_idxs", "=", "_get_interval_factor_traversal", "(", "factor_size", "=", "len", "(", "all_idxs", ")", ",", "num_frames", "=", "num_frames", ",", "start_index", "=", "0", ")", "\n", "grid", "=", "all_idxs", "[", "selected_idxs", "]", "\n", "# checks", "\n", "assert", "all_idxs", "[", "0", "]", "==", "start_index", ",", "'Please report this bug!'", "\n", "assert", "grid", "[", "0", "]", "==", "start_index", ",", "'Please report this bug!'", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util._get_cycle_factor_traversal_from_start_ends": [[180, 182], ["vis_util._get_cycle_factor_traversal_from_start"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util._get_cycle_factor_traversal_from_start"], ["", "def", "_get_cycle_factor_traversal_from_start_ends", "(", "factor_size", ":", "int", ",", "num_frames", ":", "int", ",", "start_index", ":", "int", "=", "0", ",", "ends", ":", "bool", "=", "True", ")", ":", "\n", "    ", "return", "_get_cycle_factor_traversal_from_start", "(", "factor_size", "=", "factor_size", ",", "num_frames", "=", "num_frames", ",", "start_index", "=", "start_index", ",", "ends", "=", "ends", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.get_idx_traversal": [[193, 199], ["traversal_fn", "KeyError", "repr"], "function", ["None"], ["def", "get_idx_traversal", "(", "factor_size", ":", "int", ",", "num_frames", ":", "int", ",", "mode", ":", "str", "=", "'interval'", ",", "start_index", ":", "int", "=", "0", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "traversal_fn", "=", "_FACTOR_TRAVERSALS", "[", "mode", "]", "\n", "", "except", "KeyError", ":", "\n", "        ", "raise", "KeyError", "(", "f'Invalid factor traversal mode: {repr(mode)}'", ")", "\n", "", "return", "traversal_fn", "(", "factor_size", "=", "factor_size", ",", "num_frames", "=", "num_frames", ",", "start_index", "=", "start_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.cycle_gaussian": [[206, 222], ["scipy.stats.norm.cdf", "numpy.linspace", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.array", "scipy.stats.norm.ppf"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "cycle_gaussian", "(", "starting_value", ",", "num_frames", ",", "loc", "=", "0.", ",", "scale", "=", "1.", ")", ":", "\n", "    ", "\"\"\"\n    Cycles through the quantiles of a Gaussian in a single cycle.\n    # ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #\n    Copyright 2018 The DisentanglementLib Authors. All rights reserved.\n    Licensed under the Apache License, Version 2.0\n    https://github.com/google-research/disentanglement_lib\n    # ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #\n    \"\"\"", "\n", "starting_prob", "=", "scipy", ".", "stats", ".", "norm", ".", "cdf", "(", "starting_value", ",", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "grid", "=", "np", ".", "linspace", "(", "starting_prob", ",", "starting_prob", "+", "2.", ",", "num", "=", "num_frames", ",", "endpoint", "=", "False", ")", "\n", "grid", "-=", "np", ".", "maximum", "(", "0", ",", "2", "*", "grid", "-", "2", ")", "\n", "grid", "+=", "np", ".", "maximum", "(", "0", ",", "-", "2", "*", "grid", ")", "\n", "grid", "=", "np", ".", "minimum", "(", "grid", ",", "0.999", ")", "\n", "grid", "=", "np", ".", "maximum", "(", "grid", ",", "0.001", ")", "\n", "return", "np", ".", "array", "(", "[", "scipy", ".", "stats", ".", "norm", ".", "ppf", "(", "i", ",", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "for", "i", "in", "grid", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.cycle_interval": [[224, 239], ["numpy.nan_to_num", "numpy.linspace", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "cycle_interval", "(", "starting_value", ",", "num_frames", ",", "min_val", ",", "max_val", ")", ":", "\n", "    ", "\"\"\"\n    Cycles through the state space in a single cycle.\n    # ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #\n    Copyright 2018 The DisentanglementLib Authors. All rights reserved.\n    Licensed under the Apache License, Version 2.0\n    https://github.com/google-research/disentanglement_lib\n    # ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #\n    \"\"\"", "\n", "starting_in_01", "=", "(", "starting_value", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "starting_in_01", "=", "np", ".", "nan_to_num", "(", "starting_in_01", ")", "# handle division by zero, prints warning", "\n", "grid", "=", "np", ".", "linspace", "(", "starting_in_01", ",", "starting_in_01", "+", "2.", ",", "num", "=", "num_frames", ",", "endpoint", "=", "False", ")", "\n", "grid", "-=", "np", ".", "maximum", "(", "0", ",", "2", "*", "grid", "-", "2", ")", "\n", "grid", "+=", "np", ".", "maximum", "(", "0", ",", "-", "2", "*", "grid", ")", "\n", "return", "grid", "*", "(", "max_val", "-", "min_val", ")", "+", "min_val", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_latents._z_std_gaussian_cycle": [[53, 58], ["numpy.repeat", "disent.util.visualize.vis_util.cycle_gaussian", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.cycle_gaussian"], ["def", "_z_std_gaussian_cycle", "(", "base_z", ",", "z_means", ",", "z_logvars", ",", "z_idx", ",", "num_frames", ")", ":", "\n", "# Cycle through quantiles of a standard Gaussian.", "\n", "    ", "zs", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "base_z", ",", "0", ")", ",", "num_frames", ",", "axis", "=", "0", ")", "\n", "zs", "[", ":", ",", "z_idx", "]", "=", "vis_util", ".", "cycle_gaussian", "(", "base_z", "[", "z_idx", "]", ",", "num_frames", ",", "loc", "=", "0", ",", "scale", "=", "1", ")", "\n", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_latents._z_fitted_gaussian_cycle": [[60, 67], ["numpy.repeat", "numpy.mean", "disent.util.visualize.vis_util.cycle_gaussian", "numpy.expand_dims", "numpy.mean", "numpy.var", "numpy.exp", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.cycle_gaussian"], ["", "def", "_z_fitted_gaussian_cycle", "(", "base_z", ",", "z_means", ",", "z_logvars", ",", "z_idx", ",", "num_frames", ")", ":", "\n", "# Cycle through quantiles of a fitted Gaussian.", "\n", "    ", "zs", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "base_z", ",", "0", ")", ",", "num_frames", ",", "axis", "=", "0", ")", "\n", "loc", "=", "np", ".", "mean", "(", "z_means", "[", ":", ",", "z_idx", "]", ")", "\n", "total_variance", "=", "np", ".", "mean", "(", "np", ".", "exp", "(", "z_logvars", "[", ":", ",", "z_idx", "]", ")", ")", "+", "np", ".", "var", "(", "z_means", "[", ":", ",", "z_idx", "]", ")", "\n", "zs", "[", ":", ",", "z_idx", "]", "=", "vis_util", ".", "cycle_gaussian", "(", "base_z", "[", "z_idx", "]", ",", "num_frames", ",", "loc", "=", "loc", ",", "scale", "=", "np", ".", "sqrt", "(", "total_variance", ")", ")", "\n", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_latents._z_fixed_interval_cycle": [[69, 74], ["numpy.repeat", "disent.util.visualize.vis_util.cycle_interval", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.cycle_interval"], ["", "def", "_z_fixed_interval_cycle", "(", "base_z", ",", "z_means", ",", "z_logvars", ",", "z_idx", ",", "num_frames", ")", ":", "\n", "# Cycle through [-2, 2] interval.", "\n", "    ", "zs", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "base_z", ",", "0", ")", ",", "num_frames", ",", "axis", "=", "0", ")", "\n", "zs", "[", ":", ",", "z_idx", "]", "=", "vis_util", ".", "cycle_interval", "(", "base_z", "[", "z_idx", "]", ",", "num_frames", ",", "-", "2.", ",", "2.", ")", "\n", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_latents._z_conf_interval_cycle": [[76, 84], ["numpy.repeat", "numpy.mean", "numpy.sqrt", "disent.util.visualize.vis_util.cycle_interval", "numpy.expand_dims", "numpy.mean", "numpy.var", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.cycle_interval"], ["", "def", "_z_conf_interval_cycle", "(", "base_z", ",", "z_means", ",", "z_logvars", ",", "z_idx", ",", "num_frames", ")", ":", "\n", "# Cycle linearly through +-2 std dev of a fitted Gaussian.", "\n", "    ", "zs", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "base_z", ",", "0", ")", ",", "num_frames", ",", "axis", "=", "0", ")", "\n", "loc", "=", "np", ".", "mean", "(", "z_means", "[", ":", ",", "z_idx", "]", ")", "\n", "total_variance", "=", "np", ".", "mean", "(", "np", ".", "exp", "(", "z_logvars", "[", ":", ",", "z_idx", "]", ")", ")", "+", "np", ".", "var", "(", "z_means", "[", ":", ",", "z_idx", "]", ")", "\n", "scale", "=", "np", ".", "sqrt", "(", "total_variance", ")", "\n", "zs", "[", ":", ",", "z_idx", "]", "=", "vis_util", ".", "cycle_interval", "(", "base_z", "[", "z_idx", "]", ",", "num_frames", ",", "loc", "-", "2.", "*", "scale", ",", "loc", "+", "2.", "*", "scale", ")", "\n", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_latents._z_minmax_interval_cycle": [[86, 91], ["numpy.repeat", "disent.util.visualize.vis_util.cycle_interval", "numpy.expand_dims", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.cycle_interval"], ["", "def", "_z_minmax_interval_cycle", "(", "base_z", ",", "z_means", ",", "z_logvars", ",", "z_idx", ",", "num_frames", ")", ":", "\n", "# Cycle linearly through minmax of a fitted Gaussian.", "\n", "    ", "zs", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "base_z", ",", "0", ")", ",", "num_frames", ",", "axis", "=", "0", ")", "\n", "zs", "[", ":", ",", "z_idx", "]", "=", "vis_util", ".", "cycle_interval", "(", "base_z", "[", "z_idx", "]", ",", "num_frames", ",", "np", ".", "min", "(", "z_means", "[", ":", ",", "z_idx", "]", ")", ",", "np", ".", "max", "(", "z_means", "[", ":", ",", "z_idx", "]", ")", ")", "\n", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_latents.make_latent_zs_cycle": [[102, 123], ["z_gen_func", "torch.from_numpy", "KeyError", "len", "disent.util.to_numpy", "disent.util.to_numpy", "disent.util.to_numpy", "repr", "set"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy"], ["def", "make_latent_zs_cycle", "(", "\n", "base_z", ":", "torch", ".", "Tensor", ",", "\n", "z_means", ":", "torch", ".", "Tensor", ",", "\n", "z_logvars", ":", "torch", ".", "Tensor", ",", "\n", "z_idx", ":", "int", ",", "\n", "num_frames", ":", "int", ",", "\n", "mode", ":", "str", "=", "'minmax_interval_cycle'", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "# get mode", "\n", "    ", "if", "mode", "not", "in", "_LATENT_CYCLE_MODES_MAP", ":", "\n", "        ", "raise", "KeyError", "(", "f'Unsupported mode: {repr(mode)} not in {set(_LATENT_CYCLE_MODES_MAP)}'", ")", "\n", "", "z_gen_func", "=", "_LATENT_CYCLE_MODES_MAP", "[", "mode", "]", "\n", "# checks", "\n", "assert", "base_z", ".", "ndim", "==", "1", "\n", "assert", "base_z", ".", "shape", "==", "z_means", ".", "shape", "[", "1", ":", "]", "\n", "assert", "z_means", ".", "ndim", "==", "z_logvars", ".", "ndim", "==", "2", "\n", "assert", "z_means", ".", "shape", "==", "z_logvars", ".", "shape", "\n", "assert", "len", "(", "z_means", ")", ">", "1", ",", "f'not enough representations to average, number of z_means should be greater than 1, got: {z_means.shape}'", "\n", "# make cycle", "\n", "z_cycle", "=", "z_gen_func", "(", "to_numpy", "(", "base_z", ")", ",", "to_numpy", "(", "z_means", ")", ",", "to_numpy", "(", "z_logvars", ")", ",", "z_idx", ",", "num_frames", ")", "\n", "return", "torch", ".", "from_numpy", "(", "z_cycle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_latents.make_decoded_latent_cycles": [[131, 152], ["range", "torch.stack", "range", "torch.stack.append", "vis_latents.make_latent_zs_cycle", "torch.as_tensor", "frames.append", "torch.stack", "decoder_func"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_latents.make_latent_zs_cycle", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "make_decoded_latent_cycles", "(", "\n", "decoder_func", ":", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", ",", "\n", "z_means", ":", "torch", ".", "Tensor", ",", "\n", "z_logvars", ":", "torch", ".", "Tensor", ",", "\n", "mode", ":", "str", "=", "'minmax_interval_cycle'", ",", "\n", "num_animations", ":", "int", "=", "4", ",", "\n", "num_frames", ":", "int", "=", "20", ",", "\n", "decoder_device", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "# generate multiple latent traversal visualisations", "\n", "    ", "animations", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_animations", ")", ":", "\n", "        ", "frames", "=", "[", "]", "\n", "for", "z_idx", "in", "range", "(", "z_means", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "z", "=", "make_latent_zs_cycle", "(", "z_means", "[", "i", "]", ",", "z_means", ",", "z_logvars", ",", "z_idx", ",", "num_frames", ",", "mode", "=", "mode", ")", "\n", "z", "=", "torch", ".", "as_tensor", "(", "z", ",", "device", "=", "decoder_device", ")", "\n", "frames", ".", "append", "(", "decoder_func", "(", "z", ")", ")", "\n", "", "animations", ".", "append", "(", "torch", ".", "stack", "(", "frames", ",", "dim", "=", "0", ")", ")", "\n", "", "animations", "=", "torch", ".", "stack", "(", "animations", ",", "dim", "=", "0", ")", "\n", "# return everything", "\n", "return", "animations", "# (num_animations, z_size, num_frames, C, H, W)", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_imshow": [[66, 83], ["isinstance", "matplotlib.pyplot.subplots", "plot.plt_hide_axis", "ax.imshow", "fig.tight_layout", "numpy.array", "tuple", "matplotlib.pyplot.show"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_hide_axis", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "plt_imshow", "(", "img", ",", "figsize", "=", "12", ",", "show", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "# check image shape", "\n", "    ", "assert", "img", ".", "ndim", "==", "3", "\n", "assert", "img", ".", "shape", "[", "-", "1", "]", "in", "(", "1", ",", "3", ",", "4", ")", "\n", "# figure size -- fixed width, adjust height according to image", "\n", "if", "isinstance", "(", "figsize", ",", "(", "int", ",", "str", ",", "Number", ")", ")", ":", "\n", "        ", "size", "=", "np", ".", "array", "(", "img", ".", "shape", "[", ":", "2", "]", "[", ":", ":", "-", "1", "]", ")", "\n", "figsize", "=", "tuple", "(", "size", "/", "size", "[", "0", "]", "*", "figsize", ")", "\n", "# create plot", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "1", ",", "figsize", "=", "figsize", ",", "**", "kwargs", ")", "\n", "plt_hide_axis", "(", "ax", ")", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "# done!", "\n", "if", "show", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot._hide": [[85, 88], ["None"], "function", ["None"], ["", "def", "_hide", "(", "hide", ",", "cond", ")", ":", "\n", "    ", "assert", "hide", "in", "{", "True", ",", "False", ",", "'all'", ",", "'edges'", ",", "'none'", "}", "\n", "return", "(", "hide", "is", "True", ")", "or", "(", "hide", "==", "'all'", ")", "or", "(", "hide", "==", "'edges'", "and", "cond", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots": [[90, 148], ["isinstance", "isinstance", "matplotlib.pyplot.subplots", "range", "fig.suptitle", "numpy.array", "isinstance", "isinstance", "len", "len", "range", "numpy.stack", "len", "len", "plot.plt_hide_axis", "plot._hide", "ax.set_xlabel", "plot._hide", "ax.set_ylabel", "plot._hide", "plot._hide", "ax.set_title"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_hide_axis", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot._hide", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot._hide", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot._hide", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot._hide"], ["", "def", "plt_subplots", "(", "\n", "nrows", ":", "int", "=", "1", ",", "ncols", ":", "int", "=", "1", ",", "\n", "# custom", "\n", "title", "=", "None", ",", "\n", "titles", "=", "None", ",", "\n", "row_labels", "=", "None", ",", "\n", "col_labels", "=", "None", ",", "\n", "title_size", ":", "int", "=", "None", ",", "\n", "titles_size", ":", "int", "=", "None", ",", "\n", "label_size", ":", "int", "=", "None", ",", "\n", "hide_labels", "=", "'edges'", ",", "# none, edges, all", "\n", "hide_axis", "=", "'edges'", ",", "# none, edges, all", "\n", "# plt.subplots:", "\n", "sharex", ":", "str", "=", "False", ",", "\n", "sharey", ":", "str", "=", "False", ",", "\n", "subplot_kw", "=", "None", ",", "\n", "gridspec_kw", "=", "None", ",", "\n", "**", "fig_kw", ",", "\n", ")", ":", "\n", "    ", "assert", "isinstance", "(", "nrows", ",", "int", ")", "\n", "assert", "isinstance", "(", "ncols", ",", "int", ")", "\n", "# check titles", "\n", "if", "titles", "is", "not", "None", ":", "\n", "        ", "titles", "=", "np", ".", "array", "(", "titles", ")", "\n", "if", "titles", ".", "ndim", "==", "1", ":", "\n", "            ", "titles", "=", "np", ".", "stack", "(", "[", "titles", "]", "+", "(", "[", "[", "None", "]", "*", "ncols", "]", "*", "(", "nrows", "-", "1", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "assert", "titles", ".", "ndim", "==", "2", ",", "f'invalid titles shape, must have 2 dims: {titles.shape}'", "\n", "# get labels", "\n", "", "if", "(", "row_labels", "is", "None", ")", "or", "isinstance", "(", "row_labels", ",", "str", ")", ":", "\n", "        ", "row_labels", "=", "[", "row_labels", "]", "*", "nrows", "\n", "", "if", "(", "col_labels", "is", "None", ")", "or", "isinstance", "(", "col_labels", ",", "str", ")", ":", "\n", "        ", "col_labels", "=", "[", "col_labels", "]", "*", "ncols", "\n", "", "assert", "len", "(", "row_labels", ")", "==", "nrows", ",", "'row_labels and nrows mismatch'", "\n", "assert", "len", "(", "col_labels", ")", "==", "ncols", ",", "'row_labels and nrows mismatch'", "\n", "# check titles", "\n", "if", "titles", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "titles", ")", "==", "nrows", "\n", "assert", "len", "(", "titles", "[", "0", "]", ")", "==", "ncols", "\n", "# create subplots", "\n", "", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "nrows", "=", "nrows", ",", "ncols", "=", "ncols", ",", "sharex", "=", "sharex", ",", "sharey", "=", "sharey", ",", "squeeze", "=", "False", ",", "subplot_kw", "=", "subplot_kw", ",", "gridspec_kw", "=", "gridspec_kw", ",", "**", "fig_kw", ")", "\n", "# generate", "\n", "for", "y", "in", "range", "(", "nrows", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "ncols", ")", ":", "\n", "            ", "ax", "=", "axs", "[", "y", ",", "x", "]", "\n", "plt_hide_axis", "(", "ax", ",", "hide_xaxis", "=", "_hide", "(", "hide_axis", ",", "y", "!=", "nrows", "-", "1", ")", ",", "hide_yaxis", "=", "_hide", "(", "hide_axis", ",", "x", "!=", "0", ")", ")", "\n", "# modify ax", "\n", "if", "not", "_hide", "(", "hide_labels", ",", "y", "!=", "nrows", "-", "1", ")", ":", "\n", "                ", "ax", ".", "set_xlabel", "(", "col_labels", "[", "x", "]", ",", "fontsize", "=", "label_size", ")", "\n", "", "if", "not", "_hide", "(", "hide_labels", ",", "x", "!=", "0", ")", ":", "\n", "                ", "ax", ".", "set_ylabel", "(", "row_labels", "[", "y", "]", ",", "fontsize", "=", "label_size", ")", "\n", "# set title", "\n", "", "if", "titles", "is", "not", "None", ":", "\n", "                ", "if", "titles", "[", "y", "]", "[", "x", "]", "is", "not", "None", ":", "\n", "                    ", "ax", ".", "set_title", "(", "titles", "[", "y", "]", "[", "x", "]", ",", "fontsize", "=", "titles_size", ")", "\n", "# set title", "\n", "", "", "", "", "fig", ".", "suptitle", "(", "title", ",", "fontsize", "=", "title_size", ")", "\n", "# done!", "\n", "return", "fig", ",", "axs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow": [[150, 205], ["plot.plt_subplots", "numpy.ndindex", "fig.tight_layout", "axs[].imshow", "matplotlib.pyplot.show", "len", "len", "dict"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots"], ["", "def", "plt_subplots_imshow", "(", "\n", "grid", ",", "\n", "# custom:", "\n", "title", "=", "None", ",", "\n", "titles", "=", "None", ",", "\n", "row_labels", "=", "None", ",", "\n", "col_labels", "=", "None", ",", "\n", "title_size", ":", "int", "=", "None", ",", "\n", "titles_size", ":", "int", "=", "None", ",", "\n", "label_size", ":", "int", "=", "None", ",", "\n", "hide_labels", "=", "'edges'", ",", "# none, edges, all", "\n", "hide_axis", "=", "'all'", ",", "# none, edges, all", "\n", "# tight_layout:", "\n", "subplot_padding", ":", "Optional", "[", "float", "]", "=", "1.08", ",", "\n", "# plt.subplots:", "\n", "sharex", ":", "str", "=", "False", ",", "\n", "sharey", ":", "str", "=", "False", ",", "\n", "subplot_kw", "=", "None", ",", "\n", "gridspec_kw", "=", "None", ",", "\n", "# imshow", "\n", "vmin", ":", "float", "=", "None", ",", "\n", "vmax", ":", "float", "=", "None", ",", "\n", "# extra", "\n", "show", ":", "bool", "=", "False", ",", "\n", "imshow_kwargs", ":", "dict", "=", "None", ",", "\n", "**", "fig_kw", ",", "\n", ")", ":", "\n", "# TODO: add automatic height & width", "\n", "    ", "fig", ",", "axs", "=", "plt_subplots", "(", "\n", "nrows", "=", "len", "(", "grid", ")", ",", "ncols", "=", "len", "(", "grid", "[", "0", "]", ")", ",", "\n", "# custom", "\n", "title", "=", "title", ",", "\n", "titles", "=", "titles", ",", "\n", "row_labels", "=", "row_labels", ",", "\n", "col_labels", "=", "col_labels", ",", "\n", "title_size", "=", "title_size", ",", "\n", "titles_size", "=", "titles_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "hide_labels", "=", "hide_labels", ",", "# none, edges, all", "\n", "hide_axis", "=", "hide_axis", ",", "# none, edges, all", "\n", "# plt.subplots:", "\n", "sharex", "=", "sharex", ",", "\n", "sharey", "=", "sharey", ",", "\n", "subplot_kw", "=", "subplot_kw", ",", "\n", "gridspec_kw", "=", "gridspec_kw", ",", "\n", "**", "fig_kw", ",", "\n", ")", "\n", "# show images", "\n", "for", "y", ",", "x", "in", "np", ".", "ndindex", "(", "axs", ".", "shape", ")", ":", "\n", "        ", "axs", "[", "y", ",", "x", "]", ".", "imshow", "(", "grid", "[", "y", "]", "[", "x", "]", ",", "vmin", "=", "vmin", ",", "vmax", "=", "vmax", ",", "**", "(", "imshow_kwargs", "if", "imshow_kwargs", "else", "{", "}", ")", ")", "\n", "", "fig", ".", "tight_layout", "(", "**", "(", "{", "}", "if", "(", "subplot_padding", "is", "None", ")", "else", "dict", "(", "pad", "=", "subplot_padding", ")", ")", ")", "\n", "# done!", "\n", "if", "show", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "return", "fig", ",", "axs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_hide_axis": [[207, 228], ["ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.grid", "ax.set_xticks", "ax.set_xticklabels", "ax.xaxis.label.set_visible", "ax.set_yticks", "ax.set_yticklabels", "ax.yaxis.label.set_visible"], "function", ["None"], ["", "def", "plt_hide_axis", "(", "ax", ",", "hide_xaxis", "=", "True", ",", "hide_yaxis", "=", "True", ",", "hide_border", "=", "True", ",", "hide_axis_labels", "=", "False", ",", "hide_axis_ticks", "=", "True", ",", "hide_grid", "=", "True", ")", ":", "\n", "    ", "if", "hide_xaxis", ":", "\n", "        ", "if", "hide_axis_ticks", ":", "\n", "            ", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "", "if", "hide_axis_labels", ":", "\n", "            ", "ax", ".", "xaxis", ".", "label", ".", "set_visible", "(", "False", ")", "\n", "", "", "if", "hide_yaxis", ":", "\n", "        ", "if", "hide_axis_ticks", ":", "\n", "            ", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "", "if", "hide_axis_labels", ":", "\n", "            ", "ax", ".", "yaxis", ".", "label", ".", "set_visible", "(", "False", ")", "\n", "", "", "if", "hide_border", ":", "\n", "        ", "ax", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'bottom'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'left'", "]", ".", "set_visible", "(", "False", ")", "\n", "", "if", "hide_grid", ":", "\n", "        ", "ax", ".", "grid", "(", "False", ")", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.visualize_dataset_traversal": [[235, 312], ["dataset.gt_data.normalise_factor_idxs", "numpy.stack", "disent.util.visualize.vis_util.make_image_grid", "disent.util.visualize.vis_util.make_animated_image_grid", "disent.util.seeds.TempNumpySeed", "numpy.stack", "dataset.dataset_batch_from_factors", "grid.repeat.repeat", "numpy.concatenate", "numpy.stack", "wandb.Image", "wandb.Video", "augment_fn", "numpy.transpose", "dataset.gt_data.sample_random_factor_traversal"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.normalise_factor_idxs", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.make_image_grid", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.make_animated_image_grid", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal"], ["", "def", "visualize_dataset_traversal", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "# inputs", "\n", "factor_names", ":", "Optional", "[", "NonNormalisedFactorIdxs", "]", "=", "None", ",", "\n", "num_frames", ":", "int", "=", "9", ",", "\n", "seed", ":", "int", "=", "777", ",", "\n", "base_factors", "=", "None", ",", "\n", "traverse_mode", "=", "'cycle'", ",", "\n", "# images & animations", "\n", "pad", ":", "int", "=", "4", ",", "\n", "border", ":", "bool", "=", "True", ",", "\n", "bg_color", ":", "Number", "=", "None", ",", "\n", "# augment", "\n", "augment_fn", ":", "callable", "=", "None", ",", "\n", "data_mode", ":", "str", "=", "'raw'", ",", "\n", "# output", "\n", "output_wandb", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Generic function that can return multiple parts of the dataset & factor traversal pipeline.\n    - This only evaluates what is needed to compute the next components.\n    - The returned grid, image and animation will always have 3 channels, RGB\n\n    Tasks include:\n        - factor_idxs\n        - factors\n        - grid\n        - image\n        - image_wandb\n        - image_plt\n        - animation\n        - animation_wandb\n    \"\"\"", "\n", "\n", "# get factors from dataset", "\n", "factor_idxs", "=", "dataset", ".", "gt_data", ".", "normalise_factor_idxs", "(", "factor_names", ")", "\n", "\n", "# get factor traversals", "\n", "with", "TempNumpySeed", "(", "seed", ")", ":", "\n", "        ", "factors", "=", "np", ".", "stack", "(", "[", "\n", "dataset", ".", "gt_data", ".", "sample_random_factor_traversal", "(", "f_idx", ",", "base_factors", "=", "base_factors", ",", "num", "=", "num_frames", ",", "mode", "=", "traverse_mode", ")", "\n", "for", "f_idx", "in", "factor_idxs", "\n", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# retrieve and augment image grid", "\n", "", "grid", "=", "[", "dataset", ".", "dataset_batch_from_factors", "(", "f", ",", "mode", "=", "data_mode", ")", "for", "f", "in", "factors", "]", "\n", "if", "augment_fn", "is", "not", "None", ":", "\n", "        ", "grid", "=", "[", "augment_fn", "(", "batch", ")", "for", "batch", "in", "grid", "]", "\n", "", "grid", "=", "np", ".", "stack", "(", "grid", ",", "axis", "=", "0", ")", "\n", "\n", "# TODO: this is kinda hacky, maybe rather add a check?", "\n", "# TODO: can this be moved into the `output_wandb` if statement?", "\n", "# - animations glitch out if they do not have 3 channels", "\n", "assert", "grid", ".", "ndim", "==", "5", ",", "f'invalid number of dimensions, must be 5, got: {grid.ndim}'", "\n", "if", "grid", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "grid", "=", "grid", ".", "repeat", "(", "3", ",", "axis", "=", "-", "1", ")", "\n", "", "assert", "grid", ".", "shape", "[", "-", "1", "]", "in", "(", "1", ",", "3", ")", ",", "f'invalid number of channels, must be 1 or 3, got shape: {grid.shape}. Note that the dataset or augment if specified should output HWC images, not CHW images!'", "\n", "\n", "# generate visuals", "\n", "image", "=", "make_image_grid", "(", "np", ".", "concatenate", "(", "grid", ",", "axis", "=", "0", ")", ",", "pad", "=", "pad", ",", "border", "=", "border", ",", "bg_color", "=", "bg_color", ",", "num_cols", "=", "num_frames", ")", "\n", "animation", "=", "make_animated_image_grid", "(", "np", ".", "stack", "(", "grid", ",", "axis", "=", "0", ")", ",", "pad", "=", "pad", ",", "border", "=", "border", ",", "bg_color", "=", "bg_color", ",", "num_cols", "=", "None", ")", "\n", "\n", "# convert to wandb", "\n", "if", "output_wandb", ":", "\n", "        ", "import", "wandb", "\n", "wandb_image", "=", "wandb", ".", "Image", "(", "image", ")", "\n", "wandb_animation", "=", "wandb", ".", "Video", "(", "np", ".", "transpose", "(", "animation", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ",", "fps", "=", "4", ",", "format", "=", "'mp4'", ")", "\n", "return", "(", "\n", "wandb_image", ",", "\n", "wandb_animation", ",", "\n", ")", "\n", "\n", "# return values", "\n", "", "return", "(", "\n", "grid", ",", "# (FACTORS, NUM_FRAMES, H, W, C)", "\n", "image", ",", "# ([[H+PAD]*[FACTORS+1]], [[W+PAD]*[NUM_FRAMES+1]], C)", "\n", "animation", ",", "# (NUM_FRAMES, [H & FACTORS], [W & FACTORS], C) -- size is auto-chosen", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._dtype_min_max": [[64, 69], ["functools.lru_cache", "torch.finfo", "torch.iinfo"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "_dtype_min_max", "(", "dtype", ":", "torch", ".", "dtype", ")", "->", "Tuple", "[", "Union", "[", "float", ",", "int", "]", ",", "Union", "[", "float", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"Get the min and max values for a dtype\"\"\"", "\n", "dinfo", "=", "torch", ".", "finfo", "(", "dtype", ")", "if", "dtype", ".", "is_floating_point", "else", "torch", ".", "iinfo", "(", "dtype", ")", "\n", "return", "dinfo", ".", "min", ",", "dinfo", ".", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._check_image_dtype": [[71, 83], ["functools.lru_cache", "vis_img._dtype_min_max", "TypeError", "repr", "repr", "list"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._dtype_min_max"], ["", "@", "lru_cache", "(", ")", "\n", "def", "_check_image_dtype", "(", "dtype", ":", "torch", ".", "dtype", ")", ":", "\n", "    ", "\"\"\"Check that a dtype can hold image values\"\"\"", "\n", "# check that the datatype is within the right range -- this is not actually necessary if the below is correct!", "\n", "dmin", ",", "dmax", "=", "_dtype_min_max", "(", "dtype", ")", "\n", "imin", ",", "imax", "=", "(", "0", ",", "1", ")", "if", "dtype", ".", "is_floating_point", "else", "(", "0", ",", "255", ")", "\n", "assert", "(", "dmin", "<=", "imin", ")", "and", "(", "imax", "<=", "dmax", ")", ",", "f'The dtype: {repr(dtype)} with range [{dmin}, {dmax}] cannot store image values in the range [{imin}, {imax}]'", "\n", "# check the datatype is allowed", "\n", "if", "dtype", "not", "in", "_ALLOWED_DTYPES", ":", "\n", "        ", "raise", "TypeError", "(", "f'The dtype: {repr(dtype)} is not allowed, must be one of: {list(_ALLOWED_DTYPES)}'", ")", "\n", "# return the min and max values", "\n", "", "return", "imin", ",", "imax", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_image_has_valid_range": [[90, 108], ["vis_img._check_image_dtype", "tensor.amin().cpu().numpy", "tensor.amax().cpu().numpy", "KeyError", "tensor.amin().cpu", "tensor.amax().cpu", "ValueError", "warnings.warn", "repr", "tensor.amin", "tensor.amax", "repr", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._check_image_dtype"], ["", "def", "torch_image_has_valid_range", "(", "tensor", ":", "torch", ".", "Tensor", ",", "check_mode", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "bool", ":", "\n", "    ", "\"\"\"\n    Check that the range of values in the image is correct!\n    \"\"\"", "\n", "if", "check_mode", "not", "in", "{", "'error'", ",", "'warn'", ",", "'bool'", ",", "None", "}", ":", "\n", "        ", "raise", "KeyError", "(", "f'invalid check_mode: {repr(check_mode)}'", ")", "\n", "# get the range for the dtype", "\n", "", "imin", ",", "imax", "=", "_check_image_dtype", "(", "tensor", ".", "dtype", ")", "\n", "# get the values", "\n", "m", "=", "tensor", ".", "amin", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "M", "=", "tensor", ".", "amax", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "(", "m", "<", "imin", ")", "or", "(", "imax", "<", "M", ")", ":", "\n", "        ", "if", "check_mode", "==", "'error'", ":", "\n", "            ", "raise", "ValueError", "(", "f'images value range: [{m}, {M}] is outside of the required range: [{imin}, {imax}], for dtype: {repr(tensor.dtype)}'", ")", "\n", "", "elif", "check_mode", "==", "'warn'", ":", "\n", "            ", "warnings", ".", "warn", "(", "f'images value range: [{m}, {M}] is outside of the required range: [{imin}, {imax}], for dtype: {repr(tensor.dtype)}'", ")", "\n", "", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_image_clamp": [[110, 125], ["torch.no_grad", "vis_img._check_image_dtype", "torch.clamp", "vis_img.torch_image_has_valid_range", "KeyError", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._check_image_dtype", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_image_has_valid_range"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "torch_image_clamp", "(", "tensor", ":", "torch", ".", "Tensor", ",", "clamp_mode", ":", "str", "=", "'warn'", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Clamp the image based on the dtype\n    Valid `clamp_mode`s are {'warn', 'error', 'clamp'}\n    \"\"\"", "\n", "# check range of values", "\n", "if", "clamp_mode", "in", "(", "'warn'", ",", "'error'", ")", ":", "\n", "        ", "torch_image_has_valid_range", "(", "tensor", ",", "check_mode", "=", "clamp_mode", ")", "\n", "", "elif", "clamp_mode", "!=", "'clamp'", ":", "\n", "        ", "raise", "KeyError", "(", "f'invalid clamp mode: {repr(clamp_mode)}'", ")", "\n", "# get the range for the dtype", "\n", "", "imin", ",", "imax", "=", "_check_image_dtype", "(", "tensor", ".", "dtype", ")", "\n", "# clamp!", "\n", "return", "torch", ".", "clamp", "(", "tensor", ",", "imin", ",", "imax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_image_to_dtype": [[127, 149], ["torch.no_grad", "vis_img._check_image_dtype", "vis_img._check_image_dtype", "vis_img.torch_image_has_valid_range", "torch.clamp().to", "torch.clamp", "tensor.to", "torch.clamp", "tensor.to"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._check_image_dtype", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._check_image_dtype", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_image_has_valid_range"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "torch_image_to_dtype", "(", "tensor", ":", "torch", ".", "Tensor", ",", "out_dtype", ":", "torch", ".", "dtype", ")", ":", "\n", "    ", "\"\"\"\n    Convert an image to the specified dtype\n    - Scaling is automatically performed based on the input and output dtype\n      Floats should be in the range [0, 1], integers should be in the range [0, 255]\n    - if precision will be lost (), then the values are clamped!\n    \"\"\"", "\n", "_check_image_dtype", "(", "tensor", ".", "dtype", ")", "\n", "_check_image_dtype", "(", "out_dtype", ")", "\n", "# check scale", "\n", "torch_image_has_valid_range", "(", "tensor", ",", "check_mode", "=", "'error'", ")", "\n", "# convert", "\n", "if", "tensor", ".", "dtype", ".", "is_floating_point", "and", "(", "not", "out_dtype", ".", "is_floating_point", ")", ":", "\n", "# [float -> int] -- cast after scaling", "\n", "        ", "return", "torch", ".", "clamp", "(", "tensor", "*", "255", ",", "0", ",", "255", ")", ".", "to", "(", "out_dtype", ")", "\n", "", "elif", "(", "not", "tensor", ".", "dtype", ".", "is_floating_point", ")", "and", "out_dtype", ".", "is_floating_point", ":", "\n", "# [int -> float] -- cast before scaling", "\n", "        ", "return", "torch", ".", "clamp", "(", "tensor", ".", "to", "(", "out_dtype", ")", "/", "255", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "# [int -> int] | [float -> float]", "\n", "        ", "return", "tensor", ".", "to", "(", "out_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_image_normalize_channels": [[151, 180], ["torch.no_grad", "vis_img._check_image_dtype", "vis_img._torch_channel_broadcast_scale_values", "tensor.to.to", "torch.as_tensor", "torch.as_tensor", "torch.any", "torch.as_tensor.cpu().detach().numpy", "torch.as_tensor.cpu().detach().numpy", "warnings.warn", "repr", "torch.as_tensor.cpu().detach", "torch.as_tensor.cpu().detach", "torch.as_tensor.cpu", "torch.as_tensor.cpu"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._check_image_dtype", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._torch_channel_broadcast_scale_values"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "torch_image_normalize_channels", "(", "\n", "tensor", ":", "torch", ".", "Tensor", ",", "\n", "in_min", ":", "MinMaxHint", ",", "\n", "in_max", ":", "MinMaxHint", ",", "\n", "channel_dim", ":", "int", "=", "-", "1", ",", "\n", "out_dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "=", "None", "\n", ")", ":", "\n", "    ", "if", "out_dtype", "is", "None", ":", "\n", "        ", "out_dtype", "=", "tensor", ".", "dtype", "\n", "# check dtypes", "\n", "", "_check_image_dtype", "(", "out_dtype", ")", "\n", "assert", "out_dtype", ".", "is_floating_point", ",", "f'out_dtype must be a floating point, got: {repr(out_dtype)}'", "\n", "# get norm values padded to the dimension of the channel", "\n", "in_min", ",", "in_max", "=", "_torch_channel_broadcast_scale_values", "(", "in_min", ",", "in_max", ",", "in_dtype", "=", "tensor", ".", "dtype", ",", "dim", "=", "channel_dim", ",", "ndim", "=", "tensor", ".", "ndim", ")", "\n", "# convert", "\n", "tensor", "=", "tensor", ".", "to", "(", "out_dtype", ")", "\n", "in_min", "=", "torch", ".", "as_tensor", "(", "in_min", ",", "dtype", "=", "tensor", ".", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "in_max", "=", "torch", ".", "as_tensor", "(", "in_max", ",", "dtype", "=", "tensor", ".", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "# warn if the values are the same", "\n", "if", "torch", ".", "any", "(", "in_min", "==", "in_max", ")", ":", "\n", "        ", "m", "=", "in_min", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "M", "=", "in_min", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "warnings", ".", "warn", "(", "f'minimum: {m} and maximum: {M} values are the same, scaling values to zero.'", ")", "\n", "# handle equal values", "\n", "", "divisor", "=", "in_max", "-", "in_min", "\n", "divisor", "[", "divisor", "==", "0", "]", "=", "1", "\n", "# normalize", "\n", "return", "(", "tensor", "-", "in_min", ")", "/", "divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._torch_to_images_normalise_args": [[196, 224], ["functools.lru_cache", "in_dims.upper.upper", "out_dims.upper.upper", "tuple", "isinstance", "TypeError", "isinstance", "TypeError", "sorted", "sorted", "KeyError", "sorted", "sorted", "KeyError", "in_dims.upper.index", "len", "out_dims.upper.index", "len", "len", "ValueError", "ValueError", "TypeError", "TypeError", "in_dims.upper.index", "len", "type", "type", "repr", "repr", "repr", "repr", "repr", "list", "repr", "list"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "_torch_to_images_normalise_args", "(", "in_tensor_shape", ":", "Tuple", "[", "int", ",", "...", "]", ",", "in_tensor_dtype", ":", "torch", ".", "dtype", ",", "in_dims", ":", "str", ",", "out_dims", ":", "str", ",", "in_dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", ",", "out_dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", ")", ":", "\n", "# check types", "\n", "    ", "if", "not", "isinstance", "(", "in_dims", ",", "str", ")", ":", "raise", "TypeError", "(", "f'in_dims must be of type: {str}, but got: {type(in_dims)}'", ")", "\n", "if", "not", "isinstance", "(", "out_dims", ",", "str", ")", ":", "raise", "TypeError", "(", "f'out_dims must be of type: {str}, but got: {type(out_dims)}'", ")", "\n", "# normalise dim names", "\n", "in_dims", "=", "in_dims", ".", "upper", "(", ")", "\n", "out_dims", "=", "out_dims", ".", "upper", "(", ")", "\n", "# check dim values", "\n", "if", "sorted", "(", "in_dims", ")", "!=", "sorted", "(", "'CHW'", ")", ":", "raise", "KeyError", "(", "f'in_dims contains the symbols: {repr(in_dims)}, must contain only permutations of: {repr(\"CHW\")}'", ")", "\n", "if", "sorted", "(", "out_dims", ")", "!=", "sorted", "(", "'CHW'", ")", ":", "raise", "KeyError", "(", "f'out_dims contains the symbols: {repr(out_dims)}, must contain only permutations of: {repr(\"CHW\")}'", ")", "\n", "# get dimension indices", "\n", "in_c_dim", "=", "in_dims", ".", "index", "(", "'C'", ")", "-", "len", "(", "in_dims", ")", "\n", "out_c_dim", "=", "out_dims", ".", "index", "(", "'C'", ")", "-", "len", "(", "out_dims", ")", "\n", "transpose_indices", "=", "tuple", "(", "in_dims", ".", "index", "(", "c", ")", "-", "len", "(", "in_dims", ")", "for", "c", "in", "out_dims", ")", "\n", "# check image tensor", "\n", "if", "len", "(", "in_tensor_shape", ")", "<", "3", ":", "\n", "        ", "raise", "ValueError", "(", "f'images must have 3 or more dimensions corresponding to: (..., {\", \".join(in_dims)}), but got shape: {in_tensor_shape}'", ")", "\n", "", "if", "in_tensor_shape", "[", "in_c_dim", "]", "not", "in", "(", "1", ",", "3", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'images do not have the correct number of channels for dim \"C\", required: 1 or 3. Input format is (..., {\", \".join(in_dims)}), but got shape: {in_tensor_shape}'", ")", "\n", "# get default values", "\n", "", "if", "in_dtype", "is", "None", ":", "in_dtype", "=", "in_tensor_dtype", "\n", "if", "out_dtype", "is", "None", ":", "out_dtype", "=", "in_dtype", "\n", "# check dtypes allowed", "\n", "if", "in_dtype", "not", "in", "_ALLOWED_DTYPES", ":", "raise", "TypeError", "(", "f'in_dtype is not allowed, got: {repr(in_dtype)} must be one of: {list(_ALLOWED_DTYPES)}'", ")", "\n", "if", "out_dtype", "not", "in", "_ALLOWED_DTYPES", ":", "raise", "TypeError", "(", "f'out_dtype is not allowed, got: {repr(out_dtype)} must be one of: {list(_ALLOWED_DTYPES)}'", ")", "\n", "# done!", "\n", "return", "transpose_indices", ",", "in_dtype", ",", "out_dtype", ",", "out_c_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._torch_channel_broadcast_scale_values": [[226, 239], ["vis_img.__torch_channel_broadcast_scale_values", "tuple", "tuple", "numpy.array().reshape().tolist", "numpy.array().reshape().tolist", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.__torch_channel_broadcast_scale_values", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "_torch_channel_broadcast_scale_values", "(", "\n", "in_min", ":", "MinMaxHint", ",", "\n", "in_max", ":", "MinMaxHint", ",", "\n", "in_dtype", ":", "torch", ".", "dtype", ",", "\n", "dim", ":", "int", ",", "\n", "ndim", ":", "int", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "Number", "]", ",", "List", "[", "Number", "]", "]", ":", "\n", "    ", "return", "__torch_channel_broadcast_scale_values", "(", "\n", "in_min", "=", "tuple", "(", "np", ".", "array", "(", "in_min", ")", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", ",", "# TODO: this is slow?", "\n", "in_max", "=", "tuple", "(", "np", ".", "array", "(", "in_max", ")", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", ",", "# TODO: this is slow?", "\n", "in_dtype", "=", "in_dtype", ",", "\n", "dim", "=", "dim", ",", "\n", "ndim", "=", "ndim", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.__torch_channel_broadcast_scale_values": [[241, 269], ["functools.lru_cache", "torch.no_grad", "numpy.array", "numpy.array", "numpy.all", "numpy.core.multiarray.normalize_axis_index", "in_min.tolist", "in_max.tolist"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "@", "lru_cache", "(", ")", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "__torch_channel_broadcast_scale_values", "(", "\n", "in_min", ":", "MinMaxHint", ",", "\n", "in_max", ":", "MinMaxHint", ",", "\n", "in_dtype", ":", "torch", ".", "dtype", ",", "\n", "dim", ":", "int", ",", "\n", "ndim", ":", "int", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "Number", "]", ",", "List", "[", "Number", "]", "]", ":", "\n", "# get the default values", "\n", "    ", "in_min", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "(", "0.0", "if", "in_dtype", ".", "is_floating_point", "else", "0.0", ")", "if", "(", "in_min", "is", "None", ")", "else", "in_min", ")", "\n", "in_max", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "(", "1.0", "if", "in_dtype", ".", "is_floating_point", "else", "255.0", ")", "if", "(", "in_max", "is", "None", ")", "else", "in_max", ")", "\n", "# add missing axes", "\n", "if", "in_min", ".", "ndim", "==", "0", ":", "in_min", "=", "in_min", "[", "None", "]", "\n", "if", "in_max", ".", "ndim", "==", "0", ":", "in_max", "=", "in_max", "[", "None", "]", "\n", "# checks", "\n", "assert", "in_min", ".", "ndim", "==", "1", "\n", "assert", "in_max", ".", "ndim", "==", "1", "\n", "assert", "np", ".", "all", "(", "in_min", "<=", "in_max", ")", ",", "f'min values are not <= the max values: {in_min} !<= {in_max}'", "\n", "# normalize dim", "\n", "dim", "=", "normalize_axis_index", "(", "dim", ",", "ndim", "=", "ndim", ")", "\n", "# pad dim", "\n", "r_pad", "=", "ndim", "-", "(", "dim", "+", "1", ")", "\n", "if", "r_pad", ">", "0", ":", "\n", "        ", "in_min", "=", "in_min", "[", "(", "...", ",", ")", "+", "(", "(", "None", ",", ")", "*", "r_pad", ")", "]", "\n", "in_max", "=", "in_max", "[", "(", "...", ",", ")", "+", "(", "(", "None", ",", ")", "*", "r_pad", ")", "]", "\n", "# done!", "\n", "", "return", "in_min", ".", "tolist", "(", ")", ",", "in_max", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images": [[276, 349], ["torch.no_grad", "vis_img._torch_to_images_normalise_args", "torch.repeat_interleave.permute", "vis_img.torch_image_clamp", "vis_img.torch_image_to_dtype", "torch.any", "isinstance", "TypeError", "TypeError", "vis_img.torch_image_normalize_channels", "RuntimeError", "torch.isnan", "RuntimeError", "torch.repeat_interleave.detach().cpu().numpy", "tuple", "torch.repeat_interleave", "torch.repeat_interleave.detach().cpu", "type", "repr", "repr", "range", "repr", "repr", "torch.repeat_interleave.detach"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img._torch_to_images_normalise_args", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_image_clamp", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_image_to_dtype", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_image_normalize_channels"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "torch_to_images", "(", "\n", "tensor", ":", "torch", ".", "Tensor", ",", "\n", "in_dims", ":", "str", "=", "'CHW'", ",", "# we always treat numpy by default as HWC, and torch.Tensor as CHW", "\n", "out_dims", ":", "str", "=", "'HWC'", ",", "\n", "in_dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "=", "None", ",", "\n", "out_dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "=", "torch", ".", "uint8", ",", "\n", "clamp_mode", ":", "str", "=", "'warn'", ",", "# clamp, warn, error", "\n", "always_rgb", ":", "bool", "=", "False", ",", "\n", "in_min", ":", "Optional", "[", "MinMaxHint", "]", "=", "None", ",", "\n", "in_max", ":", "Optional", "[", "MinMaxHint", "]", "=", "None", ",", "\n", "to_numpy", ":", "bool", "=", "False", ",", "\n", ")", "->", "Union", "[", "torch", ".", "Tensor", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Convert a batch of image-like tensors to images.\n    A batch in this case consists of an arbitrary number of dimensions of a tensor,\n    with the last 3 dimensions making up the actual images.\n\n    Process:\n    1. check input dtype\n    2. move axis\n    3. normalize\n    4. clamp values\n    5. auto scale and convert\n    6. convert to rgb\n    7. check output dtype\n\n    example:\n        Convert a tensor of non-normalised images (..., C, H, W) to a\n        tensor of normalised and clipped images (..., H, W, C).\n        - integer dtypes are expected to be in the range [0, 255]\n        - float dtypes are expected to be in the range [0, 1]\n\n    # TODO: add support for uneven in/out dims, eg. in_dims=\"HW\", out_dims=\"HWC\"\n    \"\"\"", "\n", "# 0.a. check tensor", "\n", "if", "not", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "raise", "TypeError", "(", "f'images must be of type: {torch.Tensor}, got: {type(tensor)}'", ")", "\n", "# 0.b. get arguments", "\n", "", "transpose_indices", ",", "in_dtype", ",", "out_dtype", ",", "out_c_dim", "=", "_torch_to_images_normalise_args", "(", "\n", "in_tensor_shape", "=", "tuple", "(", "tensor", ".", "shape", ")", ",", "\n", "in_tensor_dtype", "=", "tensor", ".", "dtype", ",", "\n", "in_dims", "=", "in_dims", ",", "\n", "out_dims", "=", "out_dims", ",", "\n", "in_dtype", "=", "in_dtype", ",", "\n", "out_dtype", "=", "out_dtype", ",", "\n", ")", "\n", "# 1. check input dtype", "\n", "if", "in_dtype", "!=", "tensor", ".", "dtype", ":", "\n", "        ", "raise", "TypeError", "(", "f'images dtype: {repr(tensor.dtype)} does not match in_dtype: {repr(in_dtype)}'", ")", "\n", "# 2. move axes", "\n", "", "tensor", "=", "tensor", ".", "permute", "(", "*", "(", "i", "-", "tensor", ".", "ndim", "for", "i", "in", "range", "(", "tensor", ".", "ndim", "-", "3", ")", ")", ",", "*", "transpose_indices", ")", "\n", "# 3. normalise", "\n", "if", "(", "in_min", "is", "not", "None", ")", "or", "(", "in_max", "is", "not", "None", ")", ":", "\n", "        ", "norm_dtype", "=", "(", "out_dtype", "if", "out_dtype", ".", "is_floating_point", "else", "torch", ".", "float32", ")", "\n", "tensor", "=", "torch_image_normalize_channels", "(", "tensor", ",", "in_min", "=", "in_min", ",", "in_max", "=", "in_max", ",", "channel_dim", "=", "out_c_dim", ",", "out_dtype", "=", "norm_dtype", ")", "\n", "# 4. clamp", "\n", "", "tensor", "=", "torch_image_clamp", "(", "tensor", ",", "clamp_mode", "=", "clamp_mode", ")", "\n", "# 5. auto scale and convert", "\n", "tensor", "=", "torch_image_to_dtype", "(", "tensor", ",", "out_dtype", "=", "out_dtype", ")", "\n", "# 6. convert to rgb", "\n", "if", "always_rgb", ":", "\n", "        ", "if", "tensor", ".", "shape", "[", "out_c_dim", "]", "==", "1", ":", "\n", "            ", "tensor", "=", "torch", ".", "repeat_interleave", "(", "tensor", ",", "3", ",", "dim", "=", "out_c_dim", ")", "# torch.repeat is like np.tile, torch.repeat_interleave is like np.repeat", "\n", "# 7. check output dtype", "\n", "", "", "if", "out_dtype", "!=", "tensor", ".", "dtype", ":", "\n", "        ", "raise", "RuntimeError", "(", "f'[THIS IS A BUG!]: After conversion, images tensor dtype: {repr(tensor.dtype)} does not match out_dtype: {repr(in_dtype)}'", ")", "\n", "", "if", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "tensor", ")", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'[THIS IS A BUG!]: After conversion, images contain NaN values!'", ")", "\n", "# convert to numpy", "\n", "", "if", "to_numpy", ":", "\n", "        ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images": [[351, 386], ["numpy.dtype", "vis_img.torch_to_images", "torch.from_numpy", "numpy.dtype", "numpy.dtype"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images"], ["", "def", "numpy_to_images", "(", "\n", "ndarray", ":", "np", ".", "ndarray", ",", "\n", "in_dims", ":", "str", "=", "'HWC'", ",", "# we always treat numpy by default as HWC, and torch.Tensor as CHW", "\n", "out_dims", ":", "str", "=", "'HWC'", ",", "\n", "in_dtype", ":", "Optional", "[", "Union", "[", "str", ",", "np", ".", "dtype", "]", "]", "=", "None", ",", "\n", "out_dtype", ":", "Optional", "[", "Union", "[", "str", ",", "np", ".", "dtype", "]", "]", "=", "np", ".", "dtype", "(", "'uint8'", ")", ",", "\n", "clamp_mode", ":", "str", "=", "'warn'", ",", "# clamp, warn, error", "\n", "always_rgb", ":", "bool", "=", "False", ",", "\n", "in_min", ":", "Optional", "[", "MinMaxHint", "]", "=", "None", ",", "\n", "in_max", ":", "Optional", "[", "MinMaxHint", "]", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Convert a batch of image-like arrays to images.\n    A batch in this case consists of an arbitrary number of dimensions of an array,\n    with the last 3 dimensions making up the actual images.\n    - See the docs for: torch_to_images(...)\n    \"\"\"", "\n", "# convert numpy dtypes to torch", "\n", "if", "in_dtype", "is", "not", "None", ":", "in_dtype", "=", "_NP_TO_TORCH_DTYPE", "[", "np", ".", "dtype", "(", "in_dtype", ")", "]", "\n", "if", "out_dtype", "is", "not", "None", ":", "out_dtype", "=", "_NP_TO_TORCH_DTYPE", "[", "np", ".", "dtype", "(", "out_dtype", ")", "]", "\n", "# convert back", "\n", "array", "=", "torch_to_images", "(", "\n", "tensor", "=", "torch", ".", "from_numpy", "(", "ndarray", ")", ",", "\n", "in_dims", "=", "in_dims", ",", "\n", "out_dims", "=", "out_dims", ",", "\n", "in_dtype", "=", "in_dtype", ",", "\n", "out_dtype", "=", "out_dtype", ",", "\n", "clamp_mode", "=", "clamp_mode", ",", "\n", "always_rgb", "=", "always_rgb", ",", "\n", "in_min", "=", "in_min", ",", "\n", "in_max", "=", "in_max", ",", "\n", "to_numpy", "=", "True", ",", "\n", ")", "\n", "# done!", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_pil_images": [[388, 415], ["vis_img.numpy_to_images", "numpy.array().reshape", "PIL.Image.fromarray", "numpy.ndindex", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.numpy_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["", "def", "numpy_to_pil_images", "(", "\n", "ndarray", ":", "np", ".", "ndarray", ",", "\n", "in_dims", ":", "str", "=", "'HWC'", ",", "# we always treat numpy by default as HWC, and torch.Tensor as CHW", "\n", "clamp_mode", ":", "str", "=", "'warn'", ",", "\n", "always_rgb", ":", "bool", "=", "False", ",", "\n", "in_min", ":", "Optional", "[", "MinMaxHint", "]", "=", "None", ",", "\n", "in_max", ":", "Optional", "[", "MinMaxHint", "]", "=", "None", ",", "\n", ")", "->", "Union", "[", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Convert a numpy array containing images (..., C, H, W) to an array of PIL images (...,)\n    \"\"\"", "\n", "imgs", "=", "numpy_to_images", "(", "\n", "ndarray", "=", "ndarray", ",", "\n", "in_dims", "=", "in_dims", ",", "\n", "out_dims", "=", "'HWC'", ",", "\n", "in_dtype", "=", "None", ",", "\n", "out_dtype", "=", "'uint8'", ",", "\n", "clamp_mode", "=", "clamp_mode", ",", "\n", "always_rgb", "=", "always_rgb", ",", "\n", "in_min", "=", "in_min", ",", "\n", "in_max", "=", "in_max", ",", "\n", ")", "\n", "# all the cases (even ndim == 3)... bravo numpy, bravo!", "\n", "images", "=", "[", "Image", ".", "fromarray", "(", "imgs", "[", "idx", "]", ")", "for", "idx", "in", "np", ".", "ndindex", "(", "imgs", ".", "shape", "[", ":", "-", "3", "]", ")", "]", "\n", "images", "=", "np", ".", "array", "(", "images", ",", "dtype", "=", "object", ")", ".", "reshape", "(", "imgs", ".", "shape", "[", ":", "-", "3", "]", ")", "\n", "# done", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.log_metrics": [[48, 60], ["warnings.warn", "logger.log_metrics", "warnings.warn", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.log_metrics"], ["def", "log_metrics", "(", "logger", ":", "Optional", "[", "LightningLoggerBase", "]", ",", "metrics_dct", ":", "dict", ")", ":", "\n", "    ", "\"\"\"\n     Log the given values to the given logger.\n     - warn the user if something goes wrong\n    \"\"\"", "\n", "if", "logger", ":", "\n", "        ", "try", ":", "\n", "            ", "logger", ".", "log_metrics", "(", "metrics_dct", ")", "\n", "", "except", ":", "\n", "            ", "warnings", ".", "warn", "(", "f'Failed to log metrics: {repr(metrics_dct)}'", ")", "\n", "", "", "else", ":", "\n", "        ", "warnings", ".", "warn", "(", "'no trainer.logger found!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_yield_loggers": [[67, 77], ["isinstance", "isinstance", "logger_util.wb_yield_loggers"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_yield_loggers"], ["", "", "def", "wb_yield_loggers", "(", "logger", ":", "Optional", "[", "LightningLoggerBase", "]", ")", "->", "Iterable", "[", "WandbLogger", "]", ":", "\n", "    ", "\"\"\"\n    Recursively yield all the loggers or sub-loggers that are an instance of WandbLogger\n    \"\"\"", "\n", "if", "logger", ":", "\n", "        ", "if", "isinstance", "(", "logger", ",", "WandbLogger", ")", ":", "\n", "            ", "yield", "logger", "\n", "", "elif", "isinstance", "(", "logger", ",", "LoggerCollection", ")", ":", "\n", "            ", "for", "l", "in", "logger", ":", "\n", "                ", "yield", "from", "wb_yield_loggers", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_has_logger": [[79, 83], ["logger_util.wb_yield_loggers"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_yield_loggers"], ["", "", "", "", "def", "wb_has_logger", "(", "logger", ":", "Optional", "[", "LightningLoggerBase", "]", ")", "->", "bool", ":", "\n", "    ", "for", "l", "in", "wb_yield_loggers", "(", "logger", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_log_metrics": [[85, 96], ["logger_util.wb_yield_loggers", "wb_logger.log_metrics", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_yield_loggers", "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.log_metrics"], ["", "def", "wb_log_metrics", "(", "logger", ":", "Optional", "[", "LightningLoggerBase", "]", ",", "metrics_dct", ":", "dict", ")", ":", "\n", "    ", "\"\"\"\n    Log the given values only to loggers that are an instance of WandbLogger\n    \"\"\"", "\n", "wb_logger", "=", "None", "\n", "# iterate over loggers & update metrics", "\n", "for", "wb_logger", "in", "wb_yield_loggers", "(", "logger", ")", ":", "\n", "        ", "wb_logger", ".", "log_metrics", "(", "metrics_dct", ")", "\n", "# warn if nothing logged", "\n", "", "if", "wb_logger", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'no wandb logger found to log metrics to!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_log_reduced_summaries": [[105, 125], ["logger_util.wb_yield_loggers", "summary_dct.items", "warnings.warn", "wb_logger.experiment.summary.get", "reduce_fn", "log.error", "repr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_yield_loggers", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get"], ["def", "wb_log_reduced_summaries", "(", "logger", ":", "Optional", "[", "LightningLoggerBase", "]", ",", "summary_dct", ":", "dict", ",", "reduction", "=", "'max'", ")", ":", "\n", "    ", "\"\"\"\n    Aggregate the given values only to loggers that are an instance of WandbLogger\n    - supported reduction modes are `\"max\"` and `\"min\"`\n    \"\"\"", "\n", "reduce_fn", "=", "_SUMMARY_REDICTIONS", "[", "reduction", "]", "\n", "wb_logger", "=", "None", "\n", "# iterate over loggers & update summaries", "\n", "for", "wb_logger", "in", "wb_yield_loggers", "(", "logger", ")", ":", "\n", "        ", "for", "key", ",", "val_current", "in", "summary_dct", ".", "items", "(", ")", ":", "\n", "            ", "key", "=", "f'{key}.{reduction}'", "\n", "try", ":", "\n", "                ", "val_prev", "=", "wb_logger", ".", "experiment", ".", "summary", ".", "get", "(", "key", ",", "val_current", ")", "\n", "val_next", "=", "reduce_fn", "(", "val_prev", ",", "val_current", ")", "\n", "wb_logger", ".", "experiment", ".", "summary", "[", "key", "]", "=", "val_next", "\n", "", "except", ":", "\n", "                ", "log", ".", "error", "(", "f'W&B failed to update summary for: {repr(key)}'", ",", "exc_info", "=", "True", ")", "\n", "# warn if nothing logged!", "\n", "", "", "", "if", "wb_logger", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'no wandb logger found to log metrics to!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_log_metrics.VaeMetricLoggingCallback.__init__": [[70, 83], ["disent.util.lightning.callbacks._callbacks_base.BaseCallbackPeriodic.__init__", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "step_end_metrics", ":", "Optional", "[", "Sequence", "[", "str", "]", "]", "=", "None", ",", "\n", "train_end_metrics", ":", "Optional", "[", "Sequence", "[", "str", "]", "]", "=", "None", ",", "\n", "every_n_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "begin_first_step", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "every_n_steps", ",", "begin_first_step", ")", "\n", "self", ".", "step_end_metrics", "=", "step_end_metrics", "if", "step_end_metrics", "else", "[", "]", "\n", "self", ".", "train_end_metrics", "=", "train_end_metrics", "if", "train_end_metrics", "else", "[", "]", "\n", "assert", "isinstance", "(", "self", ".", "step_end_metrics", ",", "list", ")", "\n", "assert", "isinstance", "(", "self", ".", "train_end_metrics", ",", "list", ")", "\n", "assert", "self", ".", "step_end_metrics", "or", "self", ".", "train_end_metrics", ",", "'No metrics given to step_end_metrics or train_end_metrics'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_log_metrics.VaeMetricLoggingCallback._compute_metrics_and_log": [[84, 111], ["disent.util.lightning.callbacks._helper._get_dataset_and_ae_like", "max", "warnings.warn", "log.info", "disent.util.lightning.logger_util.log_metrics", "disent.util.lightning.logger_util.wb_log_reduced_summaries", "log.info", "disent.util.profiling.Timer", "metric", "_callback_log_metrics._normalized_numeric_metrics", "len", "metric.items", "vae.encode", "metric.items", "x.to"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.callbacks._helper._get_dataset_and_ae_like", "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.log_metrics", "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_log_reduced_summaries", "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_log_metrics._normalized_numeric_metrics", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode"], ["", "def", "_compute_metrics_and_log", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ",", "metrics", ":", "list", ",", "is_final", "=", "False", ")", ":", "\n", "# get dataset and vae framework from trainer and module", "\n", "        ", "dataset", ",", "vae", "=", "_get_dataset_and_ae_like", "(", "trainer", ",", "pl_module", ",", "unwrap_groundtruth", "=", "True", ")", "\n", "# check if we need to skip", "\n", "# TODO: dataset needs to be able to handle wrapped datasets!", "\n", "if", "not", "dataset", ".", "is_ground_truth", ":", "\n", "            ", "warnings", ".", "warn", "(", "f'{dataset.__class__.__name__} is not an instance of {GroundTruthData.__name__}. Skipping callback: {self.__class__.__name__}!'", ")", "\n", "return", "\n", "# get padding amount", "\n", "", "pad", "=", "max", "(", "7", "+", "len", "(", "k", ")", "for", "k", "in", "R", ".", "METRICS", ")", "# I know this is a magic variable... im just OCD", "\n", "# compute all metrics", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "if", "is_final", ":", "\n", "                ", "log", ".", "info", "(", "f'| {metric.__name__:<{pad}} - computing...'", ")", "\n", "", "with", "Timer", "(", ")", "as", "timer", ":", "\n", "                ", "scores", "=", "metric", "(", "dataset", ",", "lambda", "x", ":", "vae", ".", "encode", "(", "x", ".", "to", "(", "vae", ".", "device", ")", ")", ")", "\n", "", "metric_results", "=", "' '", ".", "join", "(", "f'{k}{c.GRY}={c.lMGT}{v:.3f}{c.RST}'", "for", "k", ",", "v", "in", "scores", ".", "items", "(", ")", ")", "\n", "log", ".", "info", "(", "f'| {metric.__name__:<{pad}} - time{c.GRY}={c.lYLW}{timer.pretty:<9}{c.RST} - {metric_results}'", ")", "\n", "\n", "# log to trainer", "\n", "prefix", "=", "'final_metric'", "if", "is_final", "else", "'epoch_metric'", "\n", "prefixed_scores", "=", "{", "f'{prefix}/{k}'", ":", "v", "for", "k", ",", "v", "in", "scores", ".", "items", "(", ")", "}", "\n", "log_metrics", "(", "trainer", ".", "logger", ",", "_normalized_numeric_metrics", "(", "prefixed_scores", ")", ")", "\n", "\n", "# log summary for WANDB", "\n", "# this is kinda hacky... the above should work for parallel coordinate plots", "\n", "wb_log_reduced_summaries", "(", "trainer", ".", "logger", ",", "prefixed_scores", ",", "reduction", "=", "'max'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_log_metrics.VaeMetricLoggingCallback.do_step": [[112, 118], ["log.debug", "log.debug", "disent.util.profiling.Timer", "_callback_log_metrics.VaeMetricLoggingCallback._compute_metrics_and_log"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_log_metrics.VaeMetricLoggingCallback._compute_metrics_and_log"], ["", "", "def", "do_step", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "        ", "if", "self", ".", "step_end_metrics", ":", "\n", "            ", "log", ".", "debug", "(", "'Computing Epoch Metrics:'", ")", "\n", "with", "Timer", "(", ")", "as", "timer", ":", "\n", "                ", "self", ".", "_compute_metrics_and_log", "(", "trainer", ",", "pl_module", ",", "metrics", "=", "self", ".", "step_end_metrics", ",", "is_final", "=", "False", ")", "\n", "", "log", ".", "debug", "(", "f'Computed Epoch Metrics! {timer.pretty}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_log_metrics.VaeMetricLoggingCallback.on_train_end": [[119, 125], ["log.debug", "log.debug", "disent.util.profiling.Timer", "_callback_log_metrics.VaeMetricLoggingCallback._compute_metrics_and_log"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_log_metrics.VaeMetricLoggingCallback._compute_metrics_and_log"], ["", "", "def", "on_train_end", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "        ", "if", "self", ".", "train_end_metrics", ":", "\n", "            ", "log", ".", "debug", "(", "'Computing Final Metrics...'", ")", "\n", "with", "Timer", "(", ")", "as", "timer", ":", "\n", "                ", "self", ".", "_compute_metrics_and_log", "(", "trainer", ",", "pl_module", ",", "metrics", "=", "self", ".", "train_end_metrics", ",", "is_final", "=", "True", ")", "\n", "", "log", ".", "debug", "(", "f'Computed Final Metrics! {timer.pretty}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_log_metrics._normalized_numeric_metrics": [[50, 61], ["items.items", "isinstance", "float", "log.warning", "repr", "type", "repr"], "function", ["None"], ["def", "_normalized_numeric_metrics", "(", "items", ":", "dict", ")", ":", "\n", "    ", "results", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "items", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "results", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "results", "[", "k", "]", "=", "float", "(", "v", ")", "\n", "", "except", ":", "\n", "                ", "log", ".", "warning", "(", "f'SKIPPED: metric with key: {repr(k)}, result has invalid type: {type(v)} with value: {repr(v)}'", ")", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_print_progress.LoggerProgressCallback.__init__": [[42, 45], ["disent.util.lightning.callbacks._callbacks_base.BaseCallbackTimed.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "interval", ":", "float", "=", "10", ",", "log_level", ":", "int", "=", "logging", ".", "INFO", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "interval", "=", "interval", ")", "\n", "self", ".", "_log_level", "=", "log_level", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_print_progress.LoggerProgressCallback.do_interval": [[46, 93], ["min", "min", "hasattr", "sorted", "log.log", "float", "float", "info_dict.keys", "isinstance", "trainer.progress_bar_metrics.items", "k.lower", "k.lower", "int", "int", "int", "int", "int", "int", "len", "str", "len", "str"], "methods", ["None"], ["", "def", "do_interval", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ",", "current_time", ",", "start_time", ")", ":", "\n", "# get missing vars", "\n", "        ", "trainer_max_epochs", "=", "trainer", ".", "max_epochs", "if", "(", "trainer", ".", "max_epochs", "is", "not", "None", ")", "else", "float", "(", "'inf'", ")", "\n", "trainer_max_steps", "=", "trainer", ".", "max_steps", "if", "(", "trainer", ".", "max_steps", "is", "not", "None", ")", "else", "float", "(", "'inf'", ")", "\n", "\n", "# compute vars", "\n", "max_batches", "=", "trainer", ".", "num_training_batches", "# can be inf", "\n", "max_epochs", "=", "min", "(", "trainer_max_epochs", ",", "(", "trainer_max_steps", "+", "max_batches", "-", "1", ")", "//", "max_batches", ")", "\n", "max_steps", "=", "min", "(", "trainer_max_epochs", "*", "max_batches", ",", "trainer_max_steps", ")", "\n", "elapsed_sec", "=", "current_time", "-", "start_time", "\n", "\n", "# get vars", "\n", "global_step", "=", "trainer", ".", "global_step", "+", "1", "\n", "epoch", "=", "trainer", ".", "current_epoch", "+", "1", "\n", "if", "hasattr", "(", "trainer", ",", "'batch_idx'", ")", ":", "\n", "            ", "batch", "=", "(", "trainer", ".", "batch_idx", "+", "1", ")", "\n", "", "else", ":", "\n", "# warnings.warn('batch_idx missing on pl.Trainer')  # TODO: re-enable this warning but only ever print once!", "\n", "            ", "batch", "=", "global_step", "%", "max_batches", "# might not be int?", "\n", "\n", "# completion", "\n", "", "train_pct", "=", "global_step", "/", "max_steps", "\n", "train_remain_time", "=", "elapsed_sec", "*", "(", "1", "-", "train_pct", ")", "/", "train_pct", "# seconds", "\n", "\n", "# get speed -- TODO: make this a moving average?", "\n", "if", "global_step", ">=", "elapsed_sec", ":", "\n", "            ", "step_speed_str", "=", "f'{global_step / elapsed_sec:4.2f}it/s'", "\n", "", "else", ":", "\n", "            ", "step_speed_str", "=", "f'{elapsed_sec / global_step:4.2f}s/it'", "\n", "\n", "# get the metrics and format them", "\n", "", "info_dict", "=", "{", "\n", "k", ":", "f'{v:.4g}'", "if", "isinstance", "(", "v", ",", "(", "int", ",", "float", ")", ")", "else", "f'{v}'", "\n", "for", "k", ",", "v", "in", "trainer", ".", "progress_bar_metrics", ".", "items", "(", ")", "\n", "}", "\n", "\n", "# sort the keys placing loss entries first", "\n", "sorted_k", "=", "sorted", "(", "info_dict", ".", "keys", "(", ")", ",", "key", "=", "lambda", "k", ":", "(", "'loss'", "!=", "k", ".", "lower", "(", ")", ",", "'loss'", "not", "in", "k", ".", "lower", "(", ")", ",", "k", ")", ")", "\n", "\n", "# log everything", "\n", "log", ".", "log", "(", "\n", "level", "=", "self", ".", "_log_level", ",", "\n", "msg", "=", "f'[{int(elapsed_sec)}s, {step_speed_str}] '", "\n", "+", "f'EPOCH: {epoch}/{max_epochs} - {int(global_step):0{len(str(max_steps))}d}/{max_steps} '", "\n", "+", "f'({int(train_pct * 100):02d}%) [rem. {int(train_remain_time)}s] '", "\n", "+", "f'STEP: {int(batch):{len(str(max_batches))}d}/{max_batches} ({int(batch / max_batches * 100):02d}%) '", "\n", "+", "f'| {\" \".join(f\"{k}={info_dict[k]}\" for k in sorted_k)}'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists.VaeGtDistsLoggingCallback.__init__": [[254, 277], ["disent.util.lightning.callbacks._callbacks_base.BaseCallbackPeriodic.__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "7777", ",", "\n", "every_n_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "traversal_repeats", ":", "int", "=", "100", ",", "\n", "begin_first_step", ":", "bool", "=", "False", ",", "\n", "plt_block_size", ":", "float", "=", "1.25", ",", "\n", "plt_show", ":", "bool", "=", "False", ",", "\n", "plt_transpose", ":", "bool", "=", "False", ",", "\n", "log_wandb", ":", "bool", "=", "True", ",", "# TODO: detect this automatically?", "\n", "batch_size", ":", "int", "=", "128", ",", "\n", "include_factor_dists", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "assert", "traversal_repeats", ">", "0", "\n", "self", ".", "_traversal_repeats", "=", "traversal_repeats", "\n", "self", ".", "_seed", "=", "seed", "\n", "self", ".", "_plt_block_size", "=", "plt_block_size", "\n", "self", ".", "_plt_show", "=", "plt_show", "\n", "self", ".", "_log_wandb", "=", "log_wandb", "\n", "self", ".", "_include_gt_factor_dists", "=", "include_factor_dists", "\n", "self", ".", "_transpose_plot", "=", "plt_transpose", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "super", "(", ")", ".", "__init__", "(", "every_n_steps", ",", "begin_first_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists.VaeGtDistsLoggingCallback.do_step": [[278, 324], ["torch.no_grad", "disent.util.lightning.callbacks._helper._get_dataset_and_ae_like", "_callback_vis_dists._get_dists_fn", "_callback_vis_dists.compute_factor_distances", "_callback_vis_dists.plt_factor_distances", "log.warning", "log.warning", "log.warning", "matplotlib.show", "disent.util.lightning.logger_util.wb_log_metrics", "batch.to", "wandb.Image", "type", "dataset.gt_data.name.capitalize"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.callbacks._helper._get_dataset_and_ae_like", "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._get_dists_fn", "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists.compute_factor_distances", "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists.plt_factor_distances", "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_log_metrics"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "do_step", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "# exit early", "\n", "        ", "if", "not", "(", "self", ".", "_plt_show", "or", "self", ".", "_log_wandb", ")", ":", "\n", "            ", "log", ".", "warning", "(", "f'skipping {self.__class__.__name__} neither `plt_show` or `log_wandb` is `True`!'", ")", "\n", "return", "\n", "# get dataset and vae framework from trainer and module", "\n", "", "dataset", ",", "vae", "=", "_get_dataset_and_ae_like", "(", "trainer", ",", "pl_module", ",", "unwrap_groundtruth", "=", "True", ")", "\n", "# exit early", "\n", "if", "not", "dataset", ".", "is_ground_truth", ":", "\n", "            ", "log", ".", "warning", "(", "f'cannot run {self.__class__.__name__} over non-ground-truth data, skipping!'", ")", "\n", "return", "\n", "# get aggregate function", "\n", "", "dists_names", ",", "dists_fn", "=", "_get_dists_fn", "(", "vae", ")", "\n", "if", "(", "dists_names", "is", "None", ")", "or", "(", "dists_fn", "is", "None", ")", ":", "\n", "            ", "log", ".", "warning", "(", "f'cannot run {self.__class__.__name__}, unsupported model type: {type(vae)}, must be {Ae.__name__} or {Vae.__name__}'", ")", "\n", "return", "\n", "# compute various distances matrices for each factor", "\n", "", "dists_names", ",", "f_grid", "=", "compute_factor_distances", "(", "\n", "dataset", "=", "dataset", ",", "\n", "dists_fn", "=", "dists_fn", ",", "\n", "dists_names", "=", "dists_names", ",", "\n", "traversal_repeats", "=", "self", ".", "_traversal_repeats", ",", "\n", "batch_size", "=", "self", ".", "_batch_size", ",", "\n", "include_gt_factor_dists", "=", "self", ".", "_include_gt_factor_dists", ",", "\n", "transform_batch", "=", "lambda", "batch", ":", "batch", ".", "to", "(", "vae", ".", "device", ")", ",", "\n", "seed", "=", "self", ".", "_seed", ",", "\n", "data_mode", "=", "'input'", ",", "\n", ")", "\n", "# plot these results", "\n", "fig", ",", "axs", "=", "plt_factor_distances", "(", "\n", "gt_data", "=", "dataset", ".", "gt_data", ",", "\n", "f_grid", "=", "f_grid", ",", "\n", "dists_names", "=", "dists_names", ",", "\n", "title", "=", "f'{vae.__class__.__name__}: {dataset.gt_data.name.capitalize()} Distances'", ",", "\n", "plt_block_size", "=", "self", ".", "_plt_block_size", ",", "\n", "plt_transpose", "=", "self", ".", "_transpose_plot", ",", "\n", "plt_cmap", "=", "'Blues'", ",", "\n", ")", "\n", "# show the plot", "\n", "if", "self", ".", "_plt_show", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "# log the plot to wandb", "\n", "", "if", "self", ".", "_log_wandb", ":", "\n", "            ", "wb_log_metrics", "(", "trainer", ".", "logger", ",", "{", "\n", "'factor_distances'", ":", "wandb", ".", "Image", "(", "fig", ")", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._to_dmat": [[65, 82], ["isinstance", "numpy.zeros", "dists.detach().cpu().numpy.detach().cpu().numpy", "dists.detach().cpu().numpy.detach().cpu", "dists.detach().cpu().numpy.detach"], "function", ["None"], ["def", "_to_dmat", "(", "\n", "size", ":", "int", ",", "\n", "i_a", ":", "np", ".", "ndarray", ",", "\n", "i_b", ":", "np", ".", "ndarray", ",", "\n", "dists", ":", "Union", "[", "torch", ".", "Tensor", ",", "np", ".", "ndarray", "]", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "isinstance", "(", "dists", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "dists", "=", "dists", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# checks", "\n", "", "assert", "i_a", ".", "ndim", "==", "1", "\n", "assert", "i_a", ".", "shape", "==", "i_b", ".", "shape", "\n", "assert", "i_a", ".", "shape", "==", "dists", ".", "shape", "\n", "# compute", "\n", "dmat", "=", "np", ".", "zeros", "(", "[", "size", ",", "size", "]", ",", "dtype", "=", "'float32'", ")", "\n", "dmat", "[", "i_a", ",", "i_b", "]", "=", "dists", "\n", "dmat", "[", "i_b", ",", "i_a", "]", "=", "dists", "\n", "return", "dmat", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._get_dists_ae": [[88, 98], ["torch.no_grad", "ae.encode", "ae.encode", "ae.decode", "ae.decode", "ae.recon_handler.compute_pairwise_loss", "torch.norm", "ae.recon_handler.compute_pairwise_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_pairwise_loss", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_pairwise_loss"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_get_dists_ae", "(", "ae", ":", "Ae", ",", "x_a", ":", "torch", ".", "Tensor", ",", "x_b", ":", "torch", ".", "Tensor", ")", ":", "\n", "# feed forware", "\n", "    ", "z_a", ",", "z_b", "=", "ae", ".", "encode", "(", "x_a", ")", ",", "ae", ".", "encode", "(", "x_b", ")", "\n", "r_a", ",", "r_b", "=", "ae", ".", "decode", "(", "z_a", ")", ",", "ae", ".", "decode", "(", "z_b", ")", "\n", "# distances", "\n", "return", "[", "\n", "ae", ".", "recon_handler", ".", "compute_pairwise_loss", "(", "x_a", ",", "x_b", ")", ",", "\n", "torch", ".", "norm", "(", "z_a", "-", "z_b", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ",", "# l2 dist", "\n", "ae", ".", "recon_handler", ".", "compute_pairwise_loss", "(", "r_a", ",", "r_b", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._get_dists_vae": [[101, 116], ["torch.no_grad", "vae.encode_dists", "vae.encode_dists", "vae.decode", "vae.decode", "vae.recon_handler.compute_pairwise_loss", "torch.norm", "vae.recon_handler._pairwise_reduce", "vae.recon_handler.compute_pairwise_loss", "kl_divergence", "kl_divergence"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode_dists", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode_dists", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.decode", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_pairwise_loss", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler._pairwise_reduce", "home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.ReconLossHandler.compute_pairwise_loss"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_get_dists_vae", "(", "vae", ":", "Vae", ",", "x_a", ":", "torch", ".", "Tensor", ",", "x_b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "from", "torch", ".", "distributions", "import", "kl_divergence", "\n", "# feed forward", "\n", "(", "z_post_a", ",", "z_prior_a", ")", ",", "(", "z_post_b", ",", "z_prior_b", ")", "=", "vae", ".", "encode_dists", "(", "x_a", ")", ",", "vae", ".", "encode_dists", "(", "x_b", ")", "\n", "z_a", ",", "z_b", "=", "z_post_a", ".", "mean", ",", "z_post_b", ".", "mean", "\n", "r_a", ",", "r_b", "=", "vae", ".", "decode", "(", "z_a", ")", ",", "vae", ".", "decode", "(", "z_b", ")", "\n", "# dists", "\n", "kl_ab", "=", "0.5", "*", "kl_divergence", "(", "z_post_a", ",", "z_post_b", ")", "+", "0.5", "*", "kl_divergence", "(", "z_post_b", ",", "z_post_a", ")", "\n", "# distances", "\n", "return", "[", "\n", "vae", ".", "recon_handler", ".", "compute_pairwise_loss", "(", "x_a", ",", "x_b", ")", ",", "\n", "torch", ".", "norm", "(", "z_a", "-", "z_b", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ",", "# l2 dist", "\n", "vae", ".", "recon_handler", ".", "_pairwise_reduce", "(", "kl_ab", ")", ",", "\n", "vae", ".", "recon_handler", ".", "compute_pairwise_loss", "(", "r_a", ",", "r_b", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._get_dists_fn": [[119, 128], ["isinstance", "isinstance", "disent.util.function.wrapped_partial", "disent.util.function.wrapped_partial"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial"], ["", "def", "_get_dists_fn", "(", "model", ":", "Ae", ")", "->", "Tuple", "[", "Optional", "[", "Tuple", "[", "str", ",", "...", "]", "]", ",", "Optional", "[", "Callable", "[", "[", "object", ",", "object", "]", ",", "Sequence", "[", "Sequence", "[", "float", "]", "]", "]", "]", "]", ":", "\n", "# get aggregate function", "\n", "    ", "if", "isinstance", "(", "model", ",", "Vae", ")", ":", "\n", "        ", "dists_names", ",", "dists_fn", "=", "_VAE_DIST_NAMES", ",", "wrapped_partial", "(", "_get_dists_vae", ",", "model", ")", "\n", "", "elif", "isinstance", "(", "model", ",", "Ae", ")", ":", "\n", "        ", "dists_names", ",", "dists_fn", "=", "_AE_DIST_NAMES", ",", "wrapped_partial", "(", "_get_dists_ae", ",", "model", ")", "\n", "", "else", ":", "\n", "        ", "dists_names", ",", "dists_fn", "=", "None", ",", "None", "\n", "", "return", "dists_names", ",", "dists_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._collect_dists_subbatches": [[130, 141], ["torch.no_grad", "disent.util.iters.chunked", "numpy.stack", "dists_fn", "results.append", "torch.cat", "zip"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.iters.chunked", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_collect_dists_subbatches", "(", "dists_fn", ":", "Callable", "[", "[", "object", ",", "object", "]", ",", "Sequence", "[", "Sequence", "[", "float", "]", "]", "]", ",", "batch", ":", "torch", ".", "Tensor", ",", "i_a", ":", "np", ".", "ndarray", ",", "i_b", ":", "np", ".", "ndarray", ",", "batch_size", ":", "int", "=", "64", ")", ":", "\n", "# feed forward", "\n", "    ", "results", "=", "[", "]", "\n", "for", "idxs", "in", "chunked", "(", "np", ".", "stack", "(", "[", "i_a", ",", "i_b", "]", ",", "axis", "=", "-", "1", ")", ",", "chunk_size", "=", "batch_size", ")", ":", "\n", "        ", "ia", ",", "ib", "=", "idxs", ".", "T", "\n", "x_a", ",", "x_b", "=", "batch", "[", "ia", "]", ",", "batch", "[", "ib", "]", "\n", "# feed forward", "\n", "data", "=", "dists_fn", "(", "x_a", ",", "x_b", ")", "\n", "results", ".", "append", "(", "data", ")", "\n", "", "return", "[", "torch", ".", "cat", "(", "r", ",", "dim", "=", "0", ")", "for", "r", "in", "zip", "(", "*", "results", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._compute_and_collect_dists": [[143, 193], ["enumerate", "numpy.triu_indices", "range", "f_grid.append", "tuple", "gt_data.sample_random_factor_traversal", "gt_data.pos_to_idx", "dataset.dataset_batch_from_indices", "_callback_vis_dists._collect_dists_subbatches", "f_dists.append", "_callback_vis_dists._to_dmat", "_callback_vis_dists._to_dmat", "transform_batch", "len", "len", "zip", "torch.stack().mean", "numpy.abs().sum", "torch.stack", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.pos_to_idx", "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._collect_dists_subbatches", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._to_dmat", "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._to_dmat"], ["", "def", "_compute_and_collect_dists", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "dists_fn", ",", "\n", "dists_names", ":", "Sequence", "[", "str", "]", ",", "\n", "traversal_repeats", ":", "int", "=", "100", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "include_gt_factor_dists", ":", "bool", "=", "True", ",", "\n", "transform_batch", ":", "Callable", "[", "[", "object", "]", ",", "object", "]", "=", "None", ",", "\n", "data_mode", ":", "str", "=", "'input'", ",", "\n", ")", "->", "Tuple", "[", "Tuple", "[", "str", ",", "...", "]", ",", "List", "[", "List", "[", "np", ".", "ndarray", "]", "]", "]", ":", "\n", "    ", "assert", "traversal_repeats", ">", "0", "\n", "gt_data", "=", "dataset", ".", "gt_data", "\n", "# generate", "\n", "f_grid", "=", "[", "]", "\n", "# generate", "\n", "for", "f_idx", ",", "f_size", "in", "enumerate", "(", "gt_data", ".", "factor_sizes", ")", ":", "\n", "# save for the current factor (traversal_repeats, len(names), len(i_a))", "\n", "        ", "f_dists", "=", "[", "]", "\n", "# upper triangle excluding diagonal", "\n", "i_a", ",", "i_b", "=", "np", ".", "triu_indices", "(", "f_size", ",", "k", "=", "1", ")", "\n", "# repeat over random traversals", "\n", "for", "i", "in", "range", "(", "traversal_repeats", ")", ":", "\n", "# get random factor traversal", "\n", "            ", "factors", "=", "gt_data", ".", "sample_random_factor_traversal", "(", "f_idx", "=", "f_idx", ")", "\n", "indices", "=", "gt_data", ".", "pos_to_idx", "(", "factors", ")", "\n", "# load data", "\n", "batch", "=", "dataset", ".", "dataset_batch_from_indices", "(", "indices", ",", "data_mode", ")", "\n", "if", "transform_batch", "is", "not", "None", ":", "\n", "                ", "batch", "=", "transform_batch", "(", "batch", ")", "\n", "# feed forward & compute dists -- (len(names), len(i_a))", "\n", "", "dists", "=", "_collect_dists_subbatches", "(", "dists_fn", "=", "dists_fn", ",", "batch", "=", "batch", ",", "i_a", "=", "i_a", ",", "i_b", "=", "i_b", ",", "batch_size", "=", "batch_size", ")", "\n", "assert", "len", "(", "dists", ")", "==", "len", "(", "dists_names", ")", "\n", "# distances", "\n", "f_dists", ".", "append", "(", "dists", ")", "\n", "# aggregate all dists into distances matrices for current factor", "\n", "", "f_dmats", "=", "[", "\n", "_to_dmat", "(", "size", "=", "f_size", ",", "i_a", "=", "i_a", ",", "i_b", "=", "i_b", ",", "dists", "=", "torch", ".", "stack", "(", "dists", ",", "dim", "=", "0", ")", ".", "mean", "(", "dim", "=", "0", ")", ")", "\n", "for", "dists", "in", "zip", "(", "*", "f_dists", ")", "\n", "]", "\n", "# handle factors", "\n", "if", "include_gt_factor_dists", ":", "\n", "            ", "i_dmat", "=", "_to_dmat", "(", "size", "=", "f_size", ",", "i_a", "=", "i_a", ",", "i_b", "=", "i_b", ",", "dists", "=", "np", ".", "abs", "(", "factors", "[", "i_a", "]", "-", "factors", "[", "i_b", "]", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", "\n", "f_dmats", "=", "[", "i_dmat", ",", "*", "f_dmats", "]", "\n", "# append data", "\n", "", "f_grid", ".", "append", "(", "f_dmats", ")", "\n", "# handle factors", "\n", "", "if", "include_gt_factor_dists", ":", "\n", "        ", "dists_names", "=", "(", "'factors'", ",", "*", "dists_names", ")", "\n", "# done", "\n", "", "return", "tuple", "(", "dists_names", ")", ",", "f_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists.compute_factor_distances": [[195, 224], ["log.info", "log.info", "disent.util.profiling.Timer", "disent.util.seeds.TempNumpySeed", "_callback_vis_dists._compute_and_collect_dists"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists._compute_and_collect_dists"], ["", "def", "compute_factor_distances", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "dists_fn", ",", "\n", "dists_names", ":", "Sequence", "[", "str", "]", ",", "\n", "traversal_repeats", ":", "int", "=", "100", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "include_gt_factor_dists", ":", "bool", "=", "True", ",", "\n", "transform_batch", ":", "Callable", "[", "[", "object", "]", ",", "object", "]", "=", "None", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "777", ",", "\n", "data_mode", ":", "str", "=", "'input'", ",", "\n", ")", "->", "Tuple", "[", "Tuple", "[", "str", ",", "...", "]", ",", "List", "[", "List", "[", "np", ".", "ndarray", "]", "]", "]", ":", "\n", "# log this callback", "\n", "    ", "gt_data", "=", "dataset", ".", "gt_data", "\n", "log", ".", "info", "(", "f'| {gt_data.name} - computing factor distances...'", ")", "\n", "# compute various distances matrices for each factor", "\n", "with", "Timer", "(", ")", "as", "timer", ",", "TempNumpySeed", "(", "seed", ")", ":", "\n", "        ", "dists_names", ",", "f_grid", "=", "_compute_and_collect_dists", "(", "\n", "dataset", "=", "dataset", ",", "\n", "dists_fn", "=", "dists_fn", ",", "\n", "dists_names", "=", "dists_names", ",", "\n", "traversal_repeats", "=", "traversal_repeats", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "include_gt_factor_dists", "=", "include_gt_factor_dists", ",", "\n", "transform_batch", "=", "transform_batch", ",", "\n", "data_mode", "=", "data_mode", ",", "\n", ")", "\n", "# log this callback!", "\n", "", "log", ".", "info", "(", "f'| {gt_data.name} - computed factor distances! time{c.GRY}={c.lYLW}{timer.pretty:<9}{c.RST}'", ")", "\n", "return", "dists_names", ",", "f_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_dists.plt_factor_distances": [[226, 245], ["dict", "disent.util.visualize.plot.plt_subplots_imshow", "disent.util.visualize.plot.plt_subplots_imshow", "len", "list", "zip"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.plot.plt_subplots_imshow"], ["", "def", "plt_factor_distances", "(", "\n", "gt_data", ":", "GroundTruthData", ",", "\n", "f_grid", ":", "List", "[", "List", "[", "np", ".", "ndarray", "]", "]", ",", "\n", "dists_names", ":", "Sequence", "[", "str", "]", ",", "\n", "title", ":", "str", ",", "\n", "plt_block_size", ":", "float", "=", "1.25", ",", "\n", "plt_transpose", ":", "bool", "=", "False", ",", "\n", "plt_cmap", "=", "'Blues'", ",", "\n", ")", ":", "\n", "# plot information", "\n", "    ", "imshow_kwargs", "=", "dict", "(", "cmap", "=", "plt_cmap", ")", "\n", "figsize", "=", "(", "plt_block_size", "*", "len", "(", "f_grid", "[", "0", "]", ")", ",", "plt_block_size", "*", "gt_data", ".", "num_factors", ")", "\n", "# plot!", "\n", "if", "not", "plt_transpose", ":", "\n", "        ", "fig", ",", "axs", "=", "plt_subplots_imshow", "(", "grid", "=", "f_grid", ",", "col_labels", "=", "dists_names", ",", "row_labels", "=", "gt_data", ".", "factor_names", ",", "figsize", "=", "figsize", ",", "title", "=", "title", ",", "imshow_kwargs", "=", "imshow_kwargs", ")", "\n", "", "else", ":", "\n", "        ", "fig", ",", "axs", "=", "plt_subplots_imshow", "(", "grid", "=", "list", "(", "zip", "(", "*", "f_grid", ")", ")", ",", "col_labels", "=", "gt_data", ".", "factor_names", ",", "row_labels", "=", "dists_names", ",", "figsize", "=", "figsize", "[", ":", ":", "-", "1", "]", ",", "title", "=", "title", ",", "imshow_kwargs", "=", "imshow_kwargs", ")", "\n", "# done", "\n", "", "return", "fig", ",", "axs", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_latents.VaeLatentCycleLoggingCallback.__init__": [[111, 148], ["disent.util.lightning.callbacks._callbacks_base.BaseCallbackPeriodic.__init__", "_callback_vis_latents.get_vis_min_max", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_latents.get_vis_min_max"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "7777", ",", "\n", "every_n_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "begin_first_step", ":", "bool", "=", "False", ",", "\n", "num_frames", ":", "int", "=", "17", ",", "\n", "mode", ":", "str", "=", "'minmax_interval_cycle'", ",", "\n", "num_stats_samples", ":", "int", "=", "64", ",", "\n", "log_wandb", ":", "bool", "=", "True", ",", "# TODO: detect this automatically?", "\n", "wandb_mode", ":", "str", "=", "'both'", ",", "\n", "wandb_fps", ":", "int", "=", "4", ",", "\n", "plt_show", ":", "bool", "=", "False", ",", "\n", "plt_block_size", ":", "float", "=", "1.0", ",", "\n", "# recon_min & recon_max", "\n", "recon_min", ":", "MinMaxHint", "=", "None", ",", "# scale data in this range [min, max] to [0, 1]", "\n", "recon_max", ":", "MinMaxHint", "=", "None", ",", "# scale data in this range [min, max] to [0, 1]", "\n", "recon_mean", ":", "MeanStdHint", "=", "None", ",", "# automatically converted to min & max [(0-mean)/std, (1-mean)/std], assuming original range of values is [0, 1]", "\n", "recon_std", ":", "MeanStdHint", "=", "None", ",", "# automatically converted to min & max [(0-mean)/std, (1-mean)/std], assuming original range of values is [0, 1]", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "every_n_steps", ",", "begin_first_step", ")", "\n", "self", ".", "_seed", "=", "seed", "\n", "self", ".", "_mode", "=", "mode", "\n", "self", ".", "_num_stats_samples", "=", "num_stats_samples", "\n", "self", ".", "_plt_show", "=", "plt_show", "\n", "self", ".", "_plt_block_size", "=", "plt_block_size", "\n", "self", ".", "_log_wandb", "=", "log_wandb", "\n", "self", ".", "_wandb_mode", "=", "wandb_mode", "\n", "self", ".", "_num_frames", "=", "num_frames", "\n", "self", ".", "_fps", "=", "wandb_fps", "\n", "# checks", "\n", "assert", "wandb_mode", "in", "{", "'img'", ",", "'vid'", ",", "'both'", "}", ",", "f'invalid wandb_mode={repr(wandb_mode)}, must be one of: (\"img\", \"vid\", \"both\")'", "\n", "# normalize", "\n", "self", ".", "_recon_min", ",", "self", ".", "_recon_max", "=", "get_vis_min_max", "(", "\n", "recon_min", "=", "recon_min", ",", "\n", "recon_max", "=", "recon_max", ",", "\n", "recon_mean", "=", "recon_mean", ",", "\n", "recon_std", "=", "recon_std", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_latents.VaeLatentCycleLoggingCallback.do_step": [[150, 177], ["torch.no_grad", "_callback_vis_latents.VaeLatentCycleLoggingCallback.get_visualisations", "log.warning", "disent.util.lightning.logger_util.wb_log_metrics", "plt.subplots", "ax.imshow", "ax.axis", "fig.tight_layout", "plt.show", "wandb.Image", "wandb.Video", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_latents.VaeLatentCycleLoggingCallback.get_visualisations", "home.repos.pwc.inspect_result.nmichlo_disent.lightning.logger_util.wb_log_metrics"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "do_step", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "# exit early", "\n", "        ", "if", "not", "(", "self", ".", "_plt_show", "or", "self", ".", "_log_wandb", ")", ":", "\n", "            ", "log", ".", "warning", "(", "f'skipping {self.__class__.__name__} neither `plt_show` or `log_wandb` is `True`!'", ")", "\n", "return", "\n", "\n", "# feed forward and visualise everything!", "\n", "", "stills", ",", "animation", ",", "image", "=", "self", ".", "get_visualisations", "(", "trainer", ",", "pl_module", ")", "\n", "\n", "# log video -- none, img, vid, both", "\n", "# TODO: there might be a memory leak in making the video below? Or there could be one in the actual DSPRITES dataset? memory usage seems to be very high and increase on this dataset.", "\n", "if", "self", ".", "_log_wandb", ":", "\n", "            ", "import", "wandb", "\n", "wandb_items", "=", "{", "}", "\n", "if", "self", ".", "_wandb_mode", "in", "(", "'img'", ",", "'both'", ")", ":", "wandb_items", "[", "f'{self._mode}_img'", "]", "=", "wandb", ".", "Image", "(", "image", ")", "\n", "if", "self", ".", "_wandb_mode", "in", "(", "'vid'", ",", "'both'", ")", ":", "wandb_items", "[", "f'{self._mode}_vid'", "]", "=", "wandb", ".", "Video", "(", "np", ".", "transpose", "(", "animation", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ",", "fps", "=", "self", ".", "_fps", ",", "format", "=", "'mp4'", ")", ",", "\n", "wb_log_metrics", "(", "trainer", ".", "logger", ",", "wandb_items", ")", "\n", "\n", "# log locally", "\n", "", "if", "self", ".", "_plt_show", ":", "\n", "            ", "from", "matplotlib", "import", "pyplot", "as", "plt", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "self", ".", "_plt_block_size", "*", "stills", ".", "shape", "[", "1", "]", ",", "self", ".", "_plt_block_size", "*", "stills", ".", "shape", "[", "0", "]", ")", ")", "\n", "ax", ".", "imshow", "(", "image", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_latents.VaeLatentCycleLoggingCallback.get_visualisations": [[178, 194], ["_callback_vis_latents.VaeLatentCycleLoggingCallback.generate_visualisations"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_latents.VaeLatentCycleLoggingCallback.generate_visualisations"], ["", "", "def", "get_visualisations", "(", "\n", "self", ",", "\n", "trainer_or_dataset", ":", "Union", "[", "pl", ".", "Trainer", ",", "DisentDataset", "]", ",", "\n", "pl_module", ":", "pl", ".", "LightningModule", ",", "\n", ")", "->", "Union", "[", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ",", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "        ", "return", "self", ".", "generate_visualisations", "(", "\n", "trainer_or_dataset", ",", "\n", "pl_module", ",", "\n", "seed", "=", "self", ".", "_seed", ",", "\n", "num_frames", "=", "self", ".", "_num_frames", ",", "\n", "mode", "=", "self", ".", "_mode", ",", "\n", "num_stats_samples", "=", "self", ".", "_num_stats_samples", ",", "\n", "recon_min", "=", "self", ".", "_recon_min", ",", "\n", "recon_max", "=", "self", ".", "_recon_max", ",", "\n", "recon_mean", "=", "None", ",", "\n", "recon_std", "=", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_latents.VaeLatentCycleLoggingCallback.generate_visualisations": [[196, 262], ["_callback_vis_latents.get_vis_min_max", "disent.util.lightning.callbacks._helper._get_dataset_and_ae_like", "isinstance", "disent.util.visualize.vis_img.torch_to_images", "disent.util.visualize.vis_util.make_animated_image_grid", "disent.util.visualize.vis_util.make_image_grid", "disent.util.seeds.TempNumpySeed", "dataset.dataset_sample_batch", "batch.to.to.to", "vae.encode_dists", "isinstance", "log.info", "disent.util.visualize.vis_latents.make_decoded_latent_cycles", "disent.util.visualize.vis_img.torch_to_images.reshape", "torch.log", "vae.encode", "torch.ones_like", "log.warning", "float", "float", "torch.amin().cpu", "torch.amax().cpu", "len", "type", "torch.amin", "torch.amax"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_latents.get_vis_min_max", "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._helper._get_dataset_and_ae_like", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_img.torch_to_images", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.make_animated_image_grid", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_util.make_image_grid", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode_dists", "home.repos.pwc.inspect_result.nmichlo_disent.visualize.vis_latents.make_decoded_latent_cycles", "home.repos.pwc.inspect_result.nmichlo_disent.vae._unsupervised__vae.Vae.encode"], ["", "@", "classmethod", "\n", "def", "generate_visualisations", "(", "\n", "cls", ",", "\n", "trainer_or_dataset", ":", "Union", "[", "pl", ".", "Trainer", ",", "DisentDataset", "]", ",", "\n", "pl_module", ":", "pl", ".", "LightningModule", ",", "\n", "seed", ":", "Optional", "[", "int", "]", "=", "7777", ",", "\n", "num_frames", ":", "int", "=", "17", ",", "\n", "mode", ":", "str", "=", "'fitted_gaussian_cycle'", ",", "\n", "num_stats_samples", ":", "int", "=", "64", ",", "\n", "# recon_min & recon_max", "\n", "recon_min", ":", "MinMaxHint", "=", "None", ",", "\n", "recon_max", ":", "MinMaxHint", "=", "None", ",", "\n", "recon_mean", ":", "MeanStdHint", "=", "None", ",", "\n", "recon_std", ":", "MeanStdHint", "=", "None", ",", "\n", ")", "->", "Union", "[", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ",", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "# normalize", "\n", "        ", "recon_min", ",", "recon_max", "=", "get_vis_min_max", "(", "\n", "recon_min", "=", "recon_min", ",", "\n", "recon_max", "=", "recon_max", ",", "\n", "recon_mean", "=", "recon_mean", ",", "\n", "recon_std", "=", "recon_std", ",", "\n", ")", "\n", "\n", "# get dataset and vae framework from trainer and module", "\n", "dataset", ",", "vae", "=", "_get_dataset_and_ae_like", "(", "trainer_or_dataset", ",", "pl_module", ",", "unwrap_groundtruth", "=", "True", ")", "\n", "\n", "# ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #", "\n", "# generate traversal", "\n", "# ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ #", "\n", "\n", "# get random sample of z_means and z_logvars for computing the range of values for the latent_cycle", "\n", "with", "TempNumpySeed", "(", "seed", ")", ":", "\n", "            ", "batch", ",", "indices", "=", "dataset", ".", "dataset_sample_batch", "(", "num_stats_samples", ",", "mode", "=", "'input'", ",", "replace", "=", "True", ",", "return_indices", "=", "True", ")", "# replace just in case the dataset it tiny", "\n", "batch", "=", "batch", ".", "to", "(", "vae", ".", "device", ")", "\n", "\n", "# get representations", "\n", "", "if", "isinstance", "(", "vae", ",", "Vae", ")", ":", "\n", "# variational auto-encoder", "\n", "            ", "ds_posterior", ",", "ds_prior", "=", "vae", ".", "encode_dists", "(", "batch", ")", "\n", "zs_mean", ",", "zs_logvar", "=", "ds_posterior", ".", "mean", ",", "torch", ".", "log", "(", "ds_posterior", ".", "variance", ")", "\n", "", "elif", "isinstance", "(", "vae", ",", "Ae", ")", ":", "\n", "# auto-encoder", "\n", "            ", "zs_mean", "=", "vae", ".", "encode", "(", "batch", ")", "\n", "zs_logvar", "=", "torch", ".", "ones_like", "(", "zs_mean", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "warning", "(", "f'cannot run {cls.__name__}, unsupported type: {type(vae)}, must be {Ae.__name__} or {Vae.__name__}'", ")", "\n", "return", "\n", "\n", "# get min and max if auto", "\n", "", "if", "(", "recon_min", "is", "None", ")", "or", "(", "recon_max", "is", "None", ")", ":", "\n", "            ", "if", "recon_min", "is", "None", ":", "recon_min", "=", "float", "(", "torch", ".", "amin", "(", "batch", ")", ".", "cpu", "(", ")", ")", "\n", "if", "recon_max", "is", "None", ":", "recon_max", "=", "float", "(", "torch", ".", "amax", "(", "batch", ")", ".", "cpu", "(", ")", ")", "\n", "log", ".", "info", "(", "f'auto visualisation min: {recon_min} and max: {recon_max} obtained from {len(batch)} samples'", ")", "\n", "\n", "# produce latent cycle still images & convert them to images", "\n", "", "stills", "=", "make_decoded_latent_cycles", "(", "vae", ".", "decode", ",", "zs_mean", ",", "zs_logvar", ",", "mode", "=", "mode", ",", "num_animations", "=", "1", ",", "num_frames", "=", "num_frames", ",", "decoder_device", "=", "vae", ".", "device", ")", "[", "0", "]", "\n", "stills", "=", "torch_to_images", "(", "stills", ",", "in_dims", "=", "'CHW'", ",", "out_dims", "=", "'HWC'", ",", "in_min", "=", "recon_min", ",", "in_max", "=", "recon_max", ",", "always_rgb", "=", "True", ",", "to_numpy", "=", "True", ")", "\n", "\n", "# generate the video frames and image grid from the stills", "\n", "# - TODO: this needs to be fixed to not use logvar, but rather the representations or distributions themselves", "\n", "# - TODO: should this not use `visualize_dataset_traversal`?", "\n", "frames", "=", "make_animated_image_grid", "(", "stills", ",", "pad", "=", "4", ",", "border", "=", "True", ",", "bg_color", "=", "None", ")", "\n", "image", "=", "make_image_grid", "(", "stills", ".", "reshape", "(", "-", "1", ",", "*", "stills", ".", "shape", "[", "2", ":", "]", ")", ",", "num_cols", "=", "stills", ".", "shape", "[", "1", "]", ",", "pad", "=", "4", ",", "border", "=", "True", ",", "bg_color", "=", "None", ")", "\n", "\n", "# done", "\n", "return", "stills", ",", "frames", ",", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callback_vis_latents.get_vis_min_max": [[60, 102], ["numpy.array", "numpy.array", "numpy.all", "ValueError", "ValueError", "isinstance", "isinstance", "numpy.divide", "numpy.divide", "ValueError", "ValueError", "ValueError", "numpy.array", "numpy.array", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array", "home.repos.pwc.inspect_result.nmichlo_disent.data._groundtruth.ArrayGroundTruthData.array"], ["def", "get_vis_min_max", "(", "\n", "recon_min", ":", "MinMaxHint", "=", "None", ",", "\n", "recon_max", ":", "MinMaxHint", "=", "None", ",", "\n", "recon_mean", ":", "MeanStdHint", "=", "None", ",", "\n", "recon_std", ":", "MeanStdHint", "=", "None", ",", "\n", ")", "->", "Union", "[", "Tuple", "[", "None", ",", "None", "]", ",", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "# check recon_min and recon_max", "\n", "    ", "if", "(", "recon_min", "is", "not", "None", ")", "or", "(", "recon_max", "is", "not", "None", ")", ":", "\n", "        ", "if", "(", "recon_mean", "is", "not", "None", ")", "or", "(", "recon_std", "is", "not", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'must choose either recon_min & recon_max OR recon_mean & recon_std, cannot specify both'", ")", "\n", "", "if", "(", "recon_min", "is", "None", ")", "or", "(", "recon_max", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'both recon_min & recon_max must be specified'", ")", "\n", "# check strings", "\n", "", "if", "isinstance", "(", "recon_min", ",", "str", ")", "or", "isinstance", "(", "recon_max", ",", "str", ")", ":", "\n", "            ", "if", "not", "(", "isinstance", "(", "recon_min", ",", "str", ")", "and", "isinstance", "(", "recon_max", ",", "str", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'both recon_min & recon_max must be \"auto\" if one is \"auto\"'", ")", "\n", "", "return", "None", ",", "None", "# \"auto\" -> None", "\n", "# check recon_mean and recon_std", "\n", "", "", "elif", "(", "recon_mean", "is", "not", "None", ")", "or", "(", "recon_std", "is", "not", "None", ")", ":", "\n", "        ", "if", "(", "recon_min", "is", "not", "None", ")", "or", "(", "recon_max", "is", "not", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'must choose either recon_min & recon_max OR recon_mean & recon_std, cannot specify both'", ")", "\n", "", "if", "(", "recon_mean", "is", "None", ")", "or", "(", "recon_std", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'both recon_mean & recon_std must be specified'", ")", "\n", "# set values:", "\n", "#  | ORIG: [0, 1]", "\n", "#  | TRANSFORM: (x - mean) / std         ->  [(0-mean)/std, (1-mean)/std]", "\n", "#  | REVERT:    (x - min) / (max - min)  ->  [0, 1]", "\n", "#  |            min=(0-mean)/std, max=(1-mean)/std", "\n", "", "recon_mean", ",", "recon_std", "=", "np", ".", "array", "(", "recon_mean", ",", "dtype", "=", "'float32'", ")", ",", "np", ".", "array", "(", "recon_std", ",", "dtype", "=", "'float32'", ")", "\n", "recon_min", "=", "np", ".", "divide", "(", "0", "-", "recon_mean", ",", "recon_std", ")", "\n", "recon_max", "=", "np", ".", "divide", "(", "1", "-", "recon_mean", ",", "recon_std", ")", "\n", "# set defaults", "\n", "", "if", "recon_min", "is", "None", ":", "recon_min", "=", "0.0", "\n", "if", "recon_max", "is", "None", ":", "recon_max", "=", "1.0", "\n", "# change type", "\n", "recon_min", "=", "np", ".", "array", "(", "recon_min", ")", "\n", "recon_max", "=", "np", ".", "array", "(", "recon_max", ")", "\n", "assert", "recon_min", ".", "ndim", "in", "(", "0", ",", "1", ")", "\n", "assert", "recon_max", ".", "ndim", "in", "(", "0", ",", "1", ")", "\n", "# checks", "\n", "assert", "np", ".", "all", "(", "recon_min", "<", "recon_max", ")", ",", "f'recon_min={recon_min} must be less than recon_max={recon_max}'", "\n", "return", "recon_min", ",", "recon_max", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._helper._get_dataset_and_ae_like": [[41, 67], ["isinstance", "isinstance", "isinstance", "hasattr", "hasattr", "warnings.warn", "hasattr", "isinstance", "RuntimeError", "dataset.unwrapped_shallow_copy", "RuntimeError", "type", "type"], "function", ["None"], ["def", "_get_dataset_and_ae_like", "(", "trainer_or_dataset", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ",", "unwrap_groundtruth", ":", "bool", "=", "False", ")", "->", "(", "DisentDataset", ",", "Union", "[", "Ae", ",", "Vae", "]", ")", ":", "\n", "    ", "assert", "isinstance", "(", "pl_module", ",", "(", "Ae", ",", "Vae", ")", ")", ",", "f'{pl_module.__class__} is not an instance of {Ae} or {Vae}'", "\n", "# get dataset", "\n", "if", "isinstance", "(", "trainer_or_dataset", ",", "pl", ".", "Trainer", ")", ":", "\n", "        ", "trainer", "=", "trainer_or_dataset", "\n", "if", "hasattr", "(", "trainer", ",", "'datamodule'", ")", "and", "(", "trainer", ".", "datamodule", "is", "not", "None", ")", ":", "\n", "            ", "assert", "hasattr", "(", "trainer", ".", "datamodule", ",", "'dataset_train_noaug'", ")", "# TODO: this is for experiments, another way of handling this should be added", "\n", "dataset", "=", "trainer", ".", "datamodule", ".", "dataset_train_noaug", "\n", "", "elif", "hasattr", "(", "trainer", ",", "'train_dataloader'", ")", "and", "(", "trainer", ".", "train_dataloader", "is", "not", "None", ")", ":", "\n", "            ", "if", "isinstance", "(", "trainer", ".", "train_dataloader", ",", "CombinedLoader", ")", ":", "\n", "                ", "dataset", "=", "trainer", ".", "train_dataloader", ".", "loaders", ".", "dataset", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "f'invalid trainer.train_dataloader: {trainer.train_dataloader}'", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'could not retrieve dataset! please report this...'", ")", "\n", "", "", "else", ":", "\n", "        ", "dataset", "=", "trainer_or_dataset", "\n", "# check dataset", "\n", "", "assert", "isinstance", "(", "dataset", ",", "DisentDataset", ")", ",", "f'retrieved dataset is not an {DisentDataset.__name__}'", "\n", "# unwrap dataset", "\n", "if", "unwrap_groundtruth", ":", "\n", "        ", "if", "dataset", ".", "is_wrapped_gt_data", ":", "\n", "            ", "old_dataset", ",", "dataset", "=", "dataset", ",", "dataset", ".", "unwrapped_shallow_copy", "(", ")", "\n", "warnings", ".", "warn", "(", "f'Unwrapped ground truth dataset returned! {type(old_dataset.data).__name__} -> {type(dataset.data).__name__}'", ")", "\n", "# done checks", "\n", "", "", "return", "dataset", ",", "pl_module", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callbacks_base.BaseCallbackPeriodic.__init__": [[42, 46], ["isinstance", "repr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "every_n_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "begin_first_step", ":", "bool", "=", "False", ")", ":", "\n", "        ", "assert", "(", "every_n_steps", "is", "None", ")", "or", "(", "isinstance", "(", "every_n_steps", ",", "int", ")", "and", "every_n_steps", ">", "0", ")", ",", "f'`every_n_steps` must be None or an integer greater than zero, got: {repr(every_n_steps)}'", "\n", "self", ".", "every_n_steps", "=", "every_n_steps", "\n", "self", ".", "begin_first_step", "=", "begin_first_step", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callbacks_base.BaseCallbackPeriodic.on_train_start": [[47, 51], ["None"], "methods", ["None"], ["", "def", "on_train_start", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "        ", "if", "self", ".", "every_n_steps", "is", "None", ":", "\n", "# number of steps/batches in an epoch", "\n", "            ", "self", ".", "every_n_steps", "=", "trainer", ".", "num_training_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callbacks_base.BaseCallbackPeriodic.on_batch_end": [[52, 58], ["_callbacks_base.BaseCallbackPeriodic.do_step"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callbacks_base.BaseCallbackPeriodic.do_step"], ["", "", "def", "on_batch_end", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "        ", "if", "0", "==", "trainer", ".", "global_step", "%", "self", ".", "every_n_steps", ":", "\n", "# skip on the first step if required", "\n", "            ", "if", "trainer", ".", "global_step", "==", "0", "and", "not", "self", ".", "begin_first_step", ":", "\n", "                ", "return", "\n", "", "self", ".", "do_step", "(", "trainer", ",", "pl_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callbacks_base.BaseCallbackPeriodic.do_step": [[59, 61], ["None"], "methods", ["None"], ["", "", "def", "do_step", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callbacks_base.BaseCallbackTimed.__init__": [[65, 70], ["time.time", "repr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "interval", ":", "float", "=", "10", ")", ":", "\n", "        ", "assert", "interval", ">", "0", ",", "f'The interval must be greater than zero, got: {repr(interval)}'", "\n", "self", ".", "_last_time", "=", "0", "\n", "self", ".", "_interval", "=", "interval", "\n", "self", ".", "_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callbacks_base.BaseCallbackTimed.on_batch_end": [[71, 78], ["time.time", "_callbacks_base.BaseCallbackTimed.do_interval"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callbacks_base.BaseCallbackTimed.do_interval"], ["", "def", "on_batch_end", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "step_delta", "=", "current_time", "-", "self", ".", "_last_time", "\n", "# only run every few seconds", "\n", "if", "self", ".", "_interval", "<", "step_delta", ":", "\n", "            ", "self", ".", "_last_time", "=", "current_time", "\n", "self", ".", "do_interval", "(", "trainer", ",", "pl_module", ",", "current_time", ",", "self", ".", "_start_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.callbacks._callbacks_base.BaseCallbackTimed.do_interval": [[79, 81], ["None"], "methods", ["None"], ["", "", "def", "do_interval", "(", "self", ",", "trainer", ":", "pl", ".", "Trainer", ",", "pl_module", ":", "pl", ".", "LightningModule", ",", "current_time", ",", "start_time", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.bytes_to_human": [[41, 53], ["int", "round", "ValueError", "math.floor", "math.log", "math.pow", "repr", "list", "_BYTES_NAME.keys"], "function", ["None"], ["def", "bytes_to_human", "(", "size_bytes", ":", "int", ",", "decimals", ":", "int", "=", "3", ",", "color", ":", "bool", "=", "True", ",", "mul", ":", "int", "=", "1024", ")", "->", "str", ":", "\n", "    ", "if", "size_bytes", "==", "0", ":", "\n", "        ", "return", "\"0B\"", "\n", "", "if", "mul", "not", "in", "_BYTES_NAME", ":", "\n", "        ", "raise", "ValueError", "(", "f'invalid bytes multiplier: {repr(mul)} must be one of: {list(_BYTES_NAME.keys())}'", ")", "\n", "# round correctly", "\n", "", "i", "=", "int", "(", "math", ".", "floor", "(", "math", ".", "log", "(", "size_bytes", ",", "mul", ")", ")", ")", "\n", "s", "=", "round", "(", "size_bytes", "/", "math", ".", "pow", "(", "mul", ",", "i", ")", ",", "decimals", ")", "\n", "# generate string", "\n", "name", "=", "f'{_BYTES_COLR[i]}{_BYTES_NAME[mul][i]}{c.RST}'", "if", "color", "else", "f'{_BYTES_NAME[mul][i]}'", "\n", "# format string", "\n", "return", "f\"{s:{4+decimals}.{decimals}f} {name}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.make_separator_str": [[60, 89], ["lines.append", "fmt.make_separator_str.append_wrapped"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "make_separator_str", "(", "text", ",", "header", "=", "None", ",", "width", "=", "100", ",", "char_v", "=", "'#'", ",", "char_h", "=", "'='", ",", "char_corners", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    function wraps text between two lines or inside a box with lines on either side.\n    FROM: my obstacle_tower project\n    \"\"\"", "\n", "if", "char_corners", "is", "None", ":", "\n", "        ", "char_corners", "=", "char_v", "\n", "", "assert", "len", "(", "char_v", ")", "==", "len", "(", "char_corners", ")", "\n", "assert", "len", "(", "char_h", ")", "==", "1", "\n", "import", "textwrap", "\n", "import", "pprint", "\n", "\n", "def", "append_wrapped", "(", "text", ")", ":", "\n", "        ", "for", "line", "in", "text", ".", "splitlines", "(", ")", ":", "\n", "            ", "for", "wrapped", "in", "(", "textwrap", ".", "wrap", "(", "line", ",", "w", ",", "tabsize", "=", "4", ")", "if", "line", ".", "strip", "(", ")", "else", "[", "''", "]", ")", ":", "\n", "                ", "lines", ".", "append", "(", "f'{char_v} {wrapped:{w}s} {char_v}'", ")", "\n", "\n", "", "", "", "w", "=", "width", "-", "4", "\n", "lines", "=", "[", "]", "\n", "sep", "=", "f'{char_corners} {char_h*w} {char_corners}'", "\n", "lines", ".", "append", "(", "f'\\n{sep}'", ")", "\n", "if", "header", ":", "\n", "        ", "append_wrapped", "(", "header", ")", "\n", "lines", ".", "append", "(", "sep", ")", "\n", "", "if", "type", "(", "text", ")", "!=", "str", ":", "\n", "        ", "text", "=", "pprint", ".", "pformat", "(", "text", ",", "width", "=", "w", ")", "\n", "", "append_wrapped", "(", "text", ")", "\n", "lines", ".", "append", "(", "f'{sep}\\n'", ")", "\n", "return", "'\\n'", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.make_box_str": [[91, 97], ["fmt.make_separator_str"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.make_separator_str"], ["", "def", "make_box_str", "(", "text", ",", "header", "=", "None", ",", "width", "=", "100", ",", "char_v", "=", "'|'", ",", "char_h", "=", "'-'", ",", "char_corners", "=", "'#'", ")", ":", "\n", "    ", "\"\"\"\n    like print_separator but is isntead a box\n    FROM: my obstacle_tower project\n    \"\"\"", "\n", "return", "make_separator_str", "(", "text", ",", "header", "=", "header", ",", "width", "=", "width", ",", "char_v", "=", "char_v", ",", "char_h", "=", "char_h", ",", "char_corners", "=", "char_corners", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.strings.fmt.concat_lines": [[99, 117], ["fmt.concat_lines.pad_height"], "function", ["None"], ["", "def", "concat_lines", "(", "*", "strings", ",", "sep", "=", "' | '", ")", ":", "\n", "    ", "\"\"\"\n    Join multi-line strings together horizontally, with the\n    specified separator between them.\n    \"\"\"", "\n", "\n", "def", "pad_width", "(", "lines", ")", ":", "\n", "        ", "max_len", "=", "max", "(", "len", "(", "line", ")", "for", "line", "in", "lines", ")", "\n", "return", "[", "f'{s:{max_len}}'", "for", "s", "in", "lines", "]", "\n", "\n", "", "def", "pad_height", "(", "list_of_lines", ")", ":", "\n", "        ", "max_lines", "=", "max", "(", "len", "(", "lines", ")", "for", "lines", "in", "list_of_lines", ")", "\n", "return", "[", "(", "lines", "+", "(", "[", "''", "]", "*", "(", "max_lines", "-", "len", "(", "lines", ")", ")", ")", ")", "for", "lines", "in", "list_of_lines", "]", "\n", "\n", "", "list_of_lines", "=", "[", "str", "(", "string", ")", ".", "splitlines", "(", ")", "for", "string", "in", "strings", "]", "\n", "list_of_lines", "=", "pad_height", "(", "list_of_lines", ")", "\n", "list_of_lines", "=", "[", "pad_width", "(", "lines", ")", "for", "lines", "in", "list_of_lines", "]", "\n", "return", "'\\n'", ".", "join", "(", "sep", ".", "join", "(", "rows", ")", "for", "rows", "in", "zip", "(", "*", "list_of_lines", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._sap.metric_sap": [[47, 73], ["disent.metrics.utils.make_metric", "log.debug", "disent.metrics.utils.generate_batch_factor_code", "disent.metrics.utils.generate_batch_factor_code", "log.debug", "_sap._compute_sap", "dict"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.make_metric", "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.generate_batch_factor_code", "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.generate_batch_factor_code", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._sap._compute_sap"], ["@", "make_metric", "(", "'sap'", ",", "fast_kwargs", "=", "dict", "(", "num_train", "=", "2000", ",", "num_test", "=", "1000", ")", ")", "\n", "def", "metric_sap", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ",", "\n", "num_train", "=", "10000", ",", "\n", "num_test", "=", "5000", ",", "\n", "batch_size", "=", "16", ",", "\n", "continuous_factors", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Computes the SAP score.\n    Args:\n      dataset: DisentDataset to be sampled from.\n      representation_function: Function that takes observations as input and\n        outputs a dim_representation sized representation for each observation.\n      num_train: Number of points used for training.\n      num_test: Number of points used for testing discrete variables.\n      batch_size: Batch size for sampling.\n      continuous_factors: Factors are continuous variable (True) or not (False).\n    Returns:\n      Dictionary with SAP score.\n    \"\"\"", "\n", "log", ".", "debug", "(", "\"Generating training set.\"", ")", "\n", "mus", ",", "ys", "=", "utils", ".", "generate_batch_factor_code", "(", "dataset", ",", "representation_function", ",", "num_train", ",", "batch_size", ")", "\n", "mus_test", ",", "ys_test", "=", "utils", ".", "generate_batch_factor_code", "(", "dataset", ",", "representation_function", ",", "num_test", ",", "batch_size", ")", "\n", "log", ".", "debug", "(", "\"Computing score matrix.\"", ")", "\n", "return", "_compute_sap", "(", "mus", ",", "ys", ",", "mus_test", ",", "ys_test", ",", "continuous_factors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._sap._compute_sap": [[75, 86], ["_sap._compute_score_matrix", "_sap._compute_avg_diff_top_two", "log.debug"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._sap._compute_score_matrix", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._sap._compute_avg_diff_top_two"], ["", "def", "_compute_sap", "(", "mus", ",", "ys", ",", "mus_test", ",", "ys_test", ",", "continuous_factors", ")", ":", "\n", "    ", "\"\"\"Computes score based on both training and testing codes and factors.\"\"\"", "\n", "score_matrix", "=", "_compute_score_matrix", "(", "mus", ",", "ys", ",", "mus_test", ",", "ys_test", ",", "continuous_factors", ")", "\n", "# Score matrix should have shape [num_latents, num_factors].", "\n", "assert", "score_matrix", ".", "shape", "[", "0", "]", "==", "mus", ".", "shape", "[", "0", "]", "\n", "assert", "score_matrix", ".", "shape", "[", "1", "]", "==", "ys", ".", "shape", "[", "0", "]", "\n", "\n", "sap_score", "=", "_compute_avg_diff_top_two", "(", "score_matrix", ")", "\n", "log", ".", "debug", "(", "\"SAP score: %.2g\"", ",", "sap_score", ")", "\n", "return", "{", "\n", "\"sap.score\"", ":", "sap_score", "# \"compactness: SAP\" -- Measuring Disentanglement: A Review of Metrics", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._sap._compute_score_matrix": [[89, 117], ["numpy.zeros", "range", "range", "numpy.cov", "sklearn.svm.LinearSVC", "svm.LinearSVC.fit", "svm.LinearSVC.predict", "numpy.mean"], "function", ["None"], ["", "def", "_compute_score_matrix", "(", "mus", ",", "ys", ",", "mus_test", ",", "ys_test", ",", "continuous_factors", ")", ":", "\n", "    ", "\"\"\"Compute score matrix as described in Section 3.\"\"\"", "\n", "num_latents", "=", "mus", ".", "shape", "[", "0", "]", "\n", "num_factors", "=", "ys", ".", "shape", "[", "0", "]", "\n", "score_matrix", "=", "np", ".", "zeros", "(", "[", "num_latents", ",", "num_factors", "]", ")", "\n", "for", "i", "in", "range", "(", "num_latents", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_factors", ")", ":", "\n", "            ", "mu_i", "=", "mus", "[", "i", ",", ":", "]", "\n", "y_j", "=", "ys", "[", "j", ",", ":", "]", "\n", "if", "continuous_factors", ":", "\n", "# Attribute is considered continuous.", "\n", "                ", "cov_mu_i_y_j", "=", "np", ".", "cov", "(", "mu_i", ",", "y_j", ",", "ddof", "=", "1", ")", "\n", "cov_mu_y", "=", "cov_mu_i_y_j", "[", "0", ",", "1", "]", "**", "2", "\n", "var_mu", "=", "cov_mu_i_y_j", "[", "0", ",", "0", "]", "\n", "var_y", "=", "cov_mu_i_y_j", "[", "1", ",", "1", "]", "\n", "if", "var_mu", ">", "1e-12", ":", "\n", "                    ", "score_matrix", "[", "i", ",", "j", "]", "=", "cov_mu_y", "*", "1.", "/", "(", "var_mu", "*", "var_y", ")", "\n", "", "else", ":", "\n", "                    ", "score_matrix", "[", "i", ",", "j", "]", "=", "0.", "\n", "", "", "else", ":", "\n", "# Attribute is considered discrete.", "\n", "                ", "mu_i_test", "=", "mus_test", "[", "i", ",", ":", "]", "\n", "y_j_test", "=", "ys_test", "[", "j", ",", ":", "]", "\n", "classifier", "=", "svm", ".", "LinearSVC", "(", "C", "=", "0.01", ",", "class_weight", "=", "\"balanced\"", ")", "\n", "classifier", ".", "fit", "(", "mu_i", "[", ":", ",", "np", ".", "newaxis", "]", ",", "y_j", ")", "\n", "pred", "=", "classifier", ".", "predict", "(", "mu_i_test", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "score_matrix", "[", "i", ",", "j", "]", "=", "np", ".", "mean", "(", "pred", "==", "y_j_test", ")", "\n", "", "", "", "return", "score_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._sap._compute_avg_diff_top_two": [[119, 122], ["numpy.sort", "numpy.mean"], "function", ["None"], ["", "def", "_compute_avg_diff_top_two", "(", "matrix", ")", ":", "\n", "    ", "sorted_matrix", "=", "np", ".", "sort", "(", "matrix", ",", "axis", "=", "0", ")", "\n", "return", "np", ".", "mean", "(", "sorted_matrix", "[", "-", "1", ",", ":", "]", "-", "sorted_matrix", "[", "-", "2", ",", ":", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factor_vae.metric_factor_vae": [[47, 132], ["disent.metrics.utils.make_metric", "log.debug", "_factor_vae._compute_variances", "_factor_vae._prune_dims", "log.debug", "_factor_vae._generate_training_batch", "numpy.argmax", "numpy.arange", "log.debug", "_factor_vae._generate_training_batch", "_prune_dims.any", "numpy.sum", "numpy.sum", "len", "dict", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.make_metric", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factor_vae._compute_variances", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factor_vae._prune_dims", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factor_vae._generate_training_batch", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factor_vae._generate_training_batch"], ["@", "make_metric", "(", "'factor_vae'", ",", "fast_kwargs", "=", "dict", "(", "num_train", "=", "700", ",", "num_eval", "=", "350", ",", "num_variance_estimate", "=", "1000", ")", ")", "# may not be accurate, but it just takes waay too long otherwise 20+ seconds", "\n", "def", "metric_factor_vae", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ":", "callable", ",", "\n", "batch_size", ":", "int", "=", "64", ",", "\n", "num_train", ":", "int", "=", "10000", ",", "\n", "num_eval", ":", "int", "=", "5000", ",", "\n", "num_variance_estimate", ":", "int", "=", "10000", ",", "\n", "show_progress", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Computes the FactorVAE disentanglement metric.\n\n    Algorithm Description (Excerpt from paper):\n    =====================\n\n    1. Choose a factor k\n    2. generate data with this factor fixed but all other factors varying randomly;\n    3. obtain their representations;\n    4. normalise each dimension by its empirical standard deviation over the full data\n      (or a large enough random subset);\n    5. take the empirical variance in each dimension of these normalised representations.\n    6. Then the index of the dimension with the lowest variance and the target index k\n       provide one training input/output example for the classifier (see bottom of Figure 2).\n\n    # ---------------------------------------------------------------------- #\n    | Thus if the representation is perfectly disentangled, the empirical    |\n    | variance in the dimension corresponding to the fixed factor will be 0. |\n    # ---------------------------------------------------------------------- #\n\n    - We normalise the representations (above) so that the arg min is invariant to rescaling\n      of the representations in each dimension.\n\n    - Since both inputs and outputs lie in a discrete space, the optimal\n         classifier is the majority-vote classifier (see Appendix B for details),\n         and the metric is the error rate of the classifier.\n\n    The resulting classifier is a deterministic function of the training data, hence there are no optimisation hyperparameters to tune.\n    We also believe that this metric is conceptually simpler and more natural than the previous one.\n    Most importantly, it circumvents the failure mode of the earlier metric, since the classifier needs to see the lowest variance in a latent dimension for a given factor to classify it correctly\n\n    Args:\n      dataset: DisentDataset to be sampled from.\n      representation_function: Function that takes observations as input and\n        outputs a dim_representation sized representation for each observation.\n      batch_size: Number of points to be used to compute the training_sample.\n      num_train: Number of points used for training.\n      num_eval: Number of points used for evaluation.\n      num_variance_estimate: Number of points used to estimate global variances.\n      show_progress: If a tqdm progress bar should be shown\n    Returns:\n      Dictionary with scores:\n        train_accuracy: Accuracy on training set.\n        eval_accuracy: Accuracy on evaluation set.\n    \"\"\"", "\n", "\n", "log", ".", "debug", "(", "\"Computing global variances to standardise.\"", ")", "\n", "global_variances", "=", "_compute_variances", "(", "dataset", ",", "representation_function", ",", "num_variance_estimate", ")", "\n", "active_dims", "=", "_prune_dims", "(", "global_variances", ")", "\n", "\n", "if", "not", "active_dims", ".", "any", "(", ")", ":", "\n", "        ", "return", "{", "\n", "\"factor_vae.train_accuracy\"", ":", "0.", ",", "\n", "\"factor_vae.eval_accuracy\"", ":", "0.", ",", "\n", "\"factor_vae.num_active_dims\"", ":", "0", "\n", "}", "\n", "\n", "", "log", ".", "debug", "(", "\"Generating training set.\"", ")", "\n", "training_votes", "=", "_generate_training_batch", "(", "dataset", ",", "representation_function", ",", "batch_size", ",", "num_train", ",", "global_variances", ",", "active_dims", ",", "show_progress", "=", "show_progress", ")", "\n", "classifier", "=", "np", ".", "argmax", "(", "training_votes", ",", "axis", "=", "0", ")", "\n", "other_index", "=", "np", ".", "arange", "(", "training_votes", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# Evaluate training set accuracy", "\n", "train_accuracy", "=", "np", ".", "sum", "(", "training_votes", "[", "classifier", ",", "other_index", "]", ")", "*", "1.", "/", "np", ".", "sum", "(", "training_votes", ")", "\n", "\n", "log", ".", "debug", "(", "\"Generating evaluation set.\"", ")", "\n", "eval_votes", "=", "_generate_training_batch", "(", "dataset", ",", "representation_function", ",", "batch_size", ",", "num_eval", ",", "global_variances", ",", "active_dims", ",", "show_progress", "=", "show_progress", ")", "\n", "\n", "# Evaluate evaluation set accuracy", "\n", "eval_accuracy", "=", "np", ".", "sum", "(", "eval_votes", "[", "classifier", ",", "other_index", "]", ")", "*", "1.", "/", "np", ".", "sum", "(", "eval_votes", ")", "\n", "\n", "return", "{", "\n", "\"factor_vae.train_accuracy\"", ":", "train_accuracy", ",", "# \"z-min variance\" -- Measuring Disentanglement: A Review of Metrics", "\n", "\"factor_vae.eval_accuracy\"", ":", "eval_accuracy", ",", "# \"z-min variance\" -- Measuring Disentanglement: A Review of Metrics", "\n", "\"factor_vae.num_active_dims\"", ":", "len", "(", "active_dims", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factor_vae._prune_dims": [[135, 139], ["numpy.sqrt"], "function", ["None"], ["", "def", "_prune_dims", "(", "variances", ",", "threshold", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Mask for dimensions collapsed to the prior.\"\"\"", "\n", "scale_z", "=", "np", ".", "sqrt", "(", "variances", ")", "\n", "return", "scale_z", ">=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factor_vae._compute_variances": [[141, 161], ["dataset.dataset_sample_batch", "disent.util.to_numpy", "numpy.transpose", "numpy.var", "disent.metrics.utils.obtain_representation"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.obtain_representation"], ["", "def", "_compute_variances", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ":", "callable", ",", "\n", "batch_size", ":", "int", ",", "\n", "eval_batch_size", ":", "int", "=", "64", "\n", ")", ":", "\n", "    ", "\"\"\"Computes the variance for each dimension of the representation.\n    Args:\n      dataset: DisentDataset to be sampled from.\n      representation_function: Function that takes observation as input and outputs a representation.\n      batch_size: Number of points to be used to compute the variances.\n      eval_batch_size: Batch size used to eval representation.\n    Returns:\n      Vector with the variance of each dimension.\n    \"\"\"", "\n", "observations", "=", "dataset", ".", "dataset_sample_batch", "(", "batch_size", ",", "mode", "=", "'input'", ")", "\n", "representations", "=", "to_numpy", "(", "utils", ".", "obtain_representation", "(", "observations", ",", "representation_function", ",", "eval_batch_size", ")", ")", "\n", "representations", "=", "np", ".", "transpose", "(", "representations", ")", "\n", "assert", "representations", ".", "shape", "[", "0", "]", "==", "batch_size", "\n", "return", "np", ".", "var", "(", "representations", ",", "axis", "=", "0", ",", "ddof", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factor_vae._generate_training_sample": [[163, 194], ["numpy.random.randint", "dataset.gt_data.sample_factors", "dataset.dataset_batch_from_factors", "disent.util.to_numpy", "numpy.var", "numpy.argmin", "representation_function"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy"], ["", "def", "_generate_training_sample", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ":", "callable", ",", "\n", "batch_size", ":", "int", ",", "\n", "global_variances", ":", "np", ".", "ndarray", ",", "\n", "active_dims", ":", "list", ",", "\n", ")", "->", "(", "int", ",", "int", ")", ":", "\n", "    ", "\"\"\"Sample a single training sample based on a mini-batch of ground-truth data.\n    Args:\n      dataset: DisentDataset to be sampled from.\n      representation_function: Function that takes observation as input and\n        outputs a representation.\n      batch_size: Number of points to be used to compute the training_sample.\n      global_variances: Numpy vector with variances for all dimensions of representation.\n      active_dims: Indexes of active dimensions.\n    Returns:\n      factor_index: Index of factor coordinate to be used.\n      argmin: Index of representation coordinate with the least variance.\n    \"\"\"", "\n", "# Select random coordinate to keep fixed.", "\n", "factor_index", "=", "np", ".", "random", ".", "randint", "(", "dataset", ".", "gt_data", ".", "num_factors", ")", "\n", "# Sample two mini batches of latent variables.", "\n", "factors", "=", "dataset", ".", "gt_data", ".", "sample_factors", "(", "batch_size", ")", "\n", "# Fix the selected factor across mini-batch.", "\n", "factors", "[", ":", ",", "factor_index", "]", "=", "factors", "[", "0", ",", "factor_index", "]", "\n", "# Obtain the observations.", "\n", "observations", "=", "dataset", ".", "dataset_batch_from_factors", "(", "factors", ",", "mode", "=", "'input'", ")", "\n", "representations", "=", "to_numpy", "(", "representation_function", "(", "observations", ")", ")", "\n", "local_variances", "=", "np", ".", "var", "(", "representations", ",", "axis", "=", "0", ",", "ddof", "=", "1", ")", "\n", "argmin", "=", "np", ".", "argmin", "(", "local_variances", "[", "active_dims", "]", "/", "global_variances", "[", "active_dims", "]", ")", "\n", "return", "factor_index", ",", "argmin", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factor_vae._generate_training_batch": [[196, 221], ["numpy.zeros", "tqdm.tqdm", "range", "_factor_vae._generate_training_sample"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._factor_vae._generate_training_sample"], ["", "def", "_generate_training_batch", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ":", "callable", ",", "\n", "batch_size", ":", "int", ",", "\n", "num_points", ":", "int", ",", "\n", "global_variances", ":", "np", ".", "ndarray", ",", "\n", "active_dims", ":", "list", ",", "\n", "show_progress", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Sample a set of training samples based on a batch of ground-truth data.\n    Args:\n      dataset: DisentDataset to be sampled from.\n      representation_function: Function that takes observations as input and outputs a dim_representation sized representation for each observation.\n      batch_size: Number of points to be used to compute the training_sample.\n      num_points: Number of points to be sampled for training set.\n      global_variances: Numpy vector with variances for all dimensions of representation.\n      active_dims: Indexes of active dimensions.\n    Returns:\n      (num_factors, dim_representation)-sized numpy array with votes.\n    \"\"\"", "\n", "votes", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "gt_data", ".", "num_factors", ",", "global_variances", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "num_points", ")", ",", "disable", "=", "(", "not", "show_progress", ")", ")", ":", "\n", "        ", "factor_index", ",", "argmin", "=", "_generate_training_sample", "(", "dataset", ",", "representation_function", ",", "batch_size", ",", "global_variances", ",", "active_dims", ")", "\n", "votes", "[", "factor_index", ",", "argmin", "]", "+=", "1", "\n", "", "return", "votes", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._mig.metric_mig": [[46, 67], ["disent.metrics.utils.make_metric", "log.debug", "disent.metrics.utils.generate_batch_factor_code", "_mig._compute_mig", "dict"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.make_metric", "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.generate_batch_factor_code", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._mig._compute_mig"], ["@", "make_metric", "(", "'mig'", ",", "fast_kwargs", "=", "dict", "(", "num_train", "=", "2000", ")", ")", "\n", "def", "metric_mig", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ",", "\n", "num_train", "=", "10000", ",", "\n", "batch_size", "=", "16", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Computes the mutual information gap.\n    Args:\n      dataset: DisentDataset to be sampled from.\n      representation_function: Function that takes observations as input and\n        outputs a dim_representation sized representation for each observation.\n      num_train: Number of points used for training.\n      batch_size: Batch size for sampling.\n    Returns:\n      Dict with average mutual information gap.\n    \"\"\"", "\n", "log", ".", "debug", "(", "\"Generating training set.\"", ")", "\n", "mus_train", ",", "ys_train", "=", "utils", ".", "generate_batch_factor_code", "(", "dataset", ",", "representation_function", ",", "num_train", ",", "batch_size", ")", "\n", "assert", "mus_train", ".", "shape", "[", "1", "]", "==", "num_train", "\n", "return", "_compute_mig", "(", "mus_train", ",", "ys_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._mig._compute_mig": [[69, 82], ["disent.metrics.utils.histogram_discretize", "disent.metrics.utils.discrete_mutual_info", "disent.metrics.utils.discrete_entropy", "numpy.sort", "numpy.mean", "numpy.divide"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.histogram_discretize", "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.discrete_mutual_info", "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.discrete_entropy"], ["", "def", "_compute_mig", "(", "mus_train", ",", "ys_train", ")", ":", "\n", "    ", "\"\"\"\n    Computes score based on both training and testing codes and factors.\n    \"\"\"", "\n", "discretized_mus", "=", "utils", ".", "histogram_discretize", "(", "mus_train", ",", "num_bins", "=", "20", ")", "\n", "m", "=", "utils", ".", "discrete_mutual_info", "(", "discretized_mus", ",", "ys_train", ")", "\n", "assert", "m", ".", "shape", "[", "0", "]", "==", "mus_train", ".", "shape", "[", "0", "]", "\n", "assert", "m", ".", "shape", "[", "1", "]", "==", "ys_train", ".", "shape", "[", "0", "]", "\n", "# m is [num_latents, num_factors]", "\n", "entropy", "=", "utils", ".", "discrete_entropy", "(", "ys_train", ")", "\n", "sorted_m", "=", "np", ".", "sort", "(", "m", ",", "axis", "=", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "return", "{", "\n", "\"mig.discrete_score\"", ":", "np", ".", "mean", "(", "np", ".", "divide", "(", "sorted_m", "[", "0", ",", ":", "]", "-", "sorted_m", "[", "1", ",", ":", "]", ",", "entropy", "[", ":", "]", ")", ")", "# \"modularity: MIG\" -- Measuring Disentanglement: A Review of Metrics", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._unsupervised.metric_unsupervised": [[45, 88], ["disent.metrics.utils.make_metric", "log.debug", "disent.metrics.utils.generate_batch_factor_code", "numpy.cov", "_unsupervised._gaussian_total_correlation", "_unsupervised._gaussian_wasserstein_correlation", "disent.metrics.utils.histogram_discretize", "disent.metrics.utils.discrete_mutual_info", "numpy.fill_diagonal", "numpy.sum", "numpy.sum", "dict", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.make_metric", "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.generate_batch_factor_code", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._unsupervised._gaussian_total_correlation", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._unsupervised._gaussian_wasserstein_correlation", "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.histogram_discretize", "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.discrete_mutual_info"], ["@", "make_metric", "(", "'unsupervised'", ",", "fast_kwargs", "=", "dict", "(", "num_train", "=", "2000", ")", ")", "\n", "def", "metric_unsupervised", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ",", "\n", "num_train", "=", "10000", ",", "\n", "batch_size", "=", "16", "\n", ")", ":", "\n", "    ", "\"\"\"Computes unsupervised scores based on covariance and mutual information.\n    Args:\n      dataset: DisentDataset to be sampled from.\n      representation_function: Function that takes observations as input and\n        outputs a dim_representation sized representation for each observation.\n      random_state: Numpy random state used for randomness.\n      artifact_dir: Optional path to directory where artifacts can be saved.\n      num_train: Number of points used for training.\n      batch_size: Batch size for sampling.\n    Returns:\n      Dictionary with scores.\n    \"\"\"", "\n", "log", ".", "debug", "(", "\"Generating training set.\"", ")", "\n", "mus_train", ",", "_", "=", "utils", ".", "generate_batch_factor_code", "(", "dataset", ",", "representation_function", ",", "num_train", ",", "batch_size", ")", "\n", "num_codes", "=", "mus_train", ".", "shape", "[", "0", "]", "\n", "cov_mus", "=", "np", ".", "cov", "(", "mus_train", ")", "\n", "assert", "num_codes", "==", "cov_mus", ".", "shape", "[", "0", "]", "\n", "\n", "# Gaussian total correlation.", "\n", "gaussian_total_correlation", "=", "_gaussian_total_correlation", "(", "cov_mus", ")", "\n", "\n", "# Gaussian Wasserstein correlation.", "\n", "gaussian_wasserstein_correlation", "=", "_gaussian_wasserstein_correlation", "(", "cov_mus", ")", "\n", "gaussian_wasserstein_correlation_norm", "=", "gaussian_wasserstein_correlation", "/", "np", ".", "sum", "(", "np", ".", "diag", "(", "cov_mus", ")", ")", "\n", "\n", "# Compute average mutual information between different factors.", "\n", "mus_discrete", "=", "utils", ".", "histogram_discretize", "(", "mus_train", ",", "num_bins", "=", "20", ")", "\n", "mutual_info_matrix", "=", "utils", ".", "discrete_mutual_info", "(", "mus_discrete", ",", "mus_discrete", ")", "\n", "np", ".", "fill_diagonal", "(", "mutual_info_matrix", ",", "0", ")", "\n", "mutual_info_score", "=", "np", ".", "sum", "(", "mutual_info_matrix", ")", "/", "(", "num_codes", "**", "2", "-", "num_codes", ")", "\n", "\n", "return", "{", "\n", "'unsup.mi_score'", ":", "mutual_info_score", ",", "\n", "'unsup.gauss_total_corr'", ":", "gaussian_total_correlation", ",", "\n", "'unsup.gauss_wasser_corr'", ":", "gaussian_wasserstein_correlation", ",", "\n", "'unsup.gauss_wasser_corr_norm'", ":", "gaussian_wasserstein_correlation_norm", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._unsupervised._gaussian_total_correlation": [[91, 103], ["numpy.sum", "numpy.log", "numpy.linalg.slogdet", "numpy.diag"], "function", ["None"], ["", "def", "_gaussian_total_correlation", "(", "cov", ")", ":", "\n", "    ", "\"\"\"Computes the total correlation of a Gaussian with covariance matrix cov.\n    We use that the total correlation is the KL divergence between the Gaussian\n    and the product of its marginals. By design, the means of these two Gaussians\n    are zero and the covariance matrix of the second Gaussian is equal to the\n    covariance matrix of the first Gaussian with off-diagonal entries set to zero.\n    Args:\n      cov: Numpy array with covariance matrix.\n    Returns:\n      Scalar with total correlation.\n    \"\"\"", "\n", "return", "0.5", "*", "(", "np", ".", "sum", "(", "np", ".", "log", "(", "np", ".", "diag", "(", "cov", ")", ")", ")", "-", "np", ".", "linalg", ".", "slogdet", "(", "cov", ")", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._unsupervised._gaussian_wasserstein_correlation": [[105, 114], ["scipy.linalg.sqrtm", "numpy.expand_dims", "numpy.trace", "numpy.trace", "numpy.diag"], "function", ["None"], ["", "def", "_gaussian_wasserstein_correlation", "(", "cov", ")", ":", "\n", "    ", "\"\"\"Wasserstein L2 distance between Gaussian and the product of its marginals.\n    Args:\n      cov: Numpy array with covariance matrix.\n    Returns:\n      Scalar with score.\n    \"\"\"", "\n", "sqrtm", "=", "scipy", ".", "linalg", ".", "sqrtm", "(", "cov", "*", "np", ".", "expand_dims", "(", "np", ".", "diag", "(", "cov", ")", ",", "axis", "=", "1", ")", ")", "\n", "return", "2", "*", "np", ".", "trace", "(", "cov", ")", "-", "2", "*", "np", ".", "trace", "(", "sqrtm", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.metric_flatness": [[55, 107], ["disent.metrics.utils.make_metric", "_flatness.aggregate_measure_distances_along_all_factors", "_flatness.compute_flatness", "_flatness.compute_flatness", "_flatness.compute_flatness", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "float", "dict", "_flatness.filter_inactive_factors", "_flatness.filter_inactive_factors", "_flatness.filter_inactive_factors", "_flatness.filter_inactive_factors", "results.items"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.make_metric", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.aggregate_measure_distances_along_all_factors", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.compute_flatness", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.compute_flatness", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.compute_flatness", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.filter_inactive_factors", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.filter_inactive_factors", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.filter_inactive_factors", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.filter_inactive_factors"], ["@", "make_metric", "(", "'flatness'", ",", "fast_kwargs", "=", "dict", "(", "repeats", "=", "128", ")", ")", "\n", "def", "metric_flatness", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ":", "callable", ",", "\n", "repeats", ":", "int", "=", "1024", ",", "\n", "batch_size", ":", "int", "=", "64", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Michlo et al.\n    https://github.com/nmichlo/msc-research\n\n    Computes the flatness metric:\n        approximately equal to: total_dim_width / (ave_point_dist_along_dim * num_points_along_dim)\n\n    Complexity of this metric is:\n        O(num_factors * ave_factor_size * repeats)\n        eg. 9 factors * 64 indices on ave * 128 repeats = 73728 observations loaded from the dataset\n\n    repeats:\n      - can go all the way down to about 64 and still get decent results.\n      - 64 is accurate to about +- 0.01\n      - 128 is accurate to about +- 0.003\n      - 1024 is accurate to about +- 0.001\n\n    Args:\n      dataset: DisentDataset to be sampled from.\n      representation_function: Function that takes observations as input and outputs a dim_representation sized representation for each observation.\n      repeats: how many times to repeat a traversal along each factors, these are then averaged together.\n      batch_size: Batch size to process at any time while generating representations, should not effect metric results.\n      p: how to calculate distances in the latent space, see torch.norm\n    Returns:\n      Dictionary with average disentanglement score, completeness and\n        informativeness (train and test).\n    \"\"\"", "\n", "p_fs_measures", "=", "aggregate_measure_distances_along_all_factors", "(", "dataset", ",", "representation_function", ",", "repeats", "=", "repeats", ",", "batch_size", "=", "batch_size", ",", "ps", "=", "(", "1", ",", "2", ")", ")", "\n", "# get info", "\n", "factor_sizes", "=", "dataset", ".", "gt_data", ".", "factor_sizes", "\n", "# aggregate data", "\n", "results", "=", "{", "\n", "# main metric -- also measures axis-alignment", "\n", "'flatness.ave_flatness'", ":", "compute_flatness", "(", "widths", "=", "p_fs_measures", "[", "2", "]", "[", "'fs_ave_widths'", "]", ",", "lengths", "=", "p_fs_measures", "[", "1", "]", "[", "'fs_ave_lengths'", "]", ",", "factor_sizes", "=", "factor_sizes", ")", ",", "\n", "# optional metrics", "\n", "'flatness.ave_flatness_l1'", ":", "compute_flatness", "(", "widths", "=", "p_fs_measures", "[", "1", "]", "[", "'fs_ave_widths'", "]", ",", "lengths", "=", "p_fs_measures", "[", "1", "]", "[", "'fs_ave_lengths'", "]", ",", "factor_sizes", "=", "factor_sizes", ")", ",", "\n", "'flatness.ave_flatness_l2'", ":", "compute_flatness", "(", "widths", "=", "p_fs_measures", "[", "2", "]", "[", "'fs_ave_widths'", "]", ",", "lengths", "=", "p_fs_measures", "[", "2", "]", "[", "'fs_ave_lengths'", "]", ",", "factor_sizes", "=", "factor_sizes", ")", ",", "\n", "# distances", "\n", "'flatness.ave_width_l1'", ":", "torch", ".", "mean", "(", "filter_inactive_factors", "(", "p_fs_measures", "[", "1", "]", "[", "'fs_ave_widths'", "]", ",", "factor_sizes", "=", "factor_sizes", ")", ")", ",", "\n", "'flatness.ave_width_l2'", ":", "torch", ".", "mean", "(", "filter_inactive_factors", "(", "p_fs_measures", "[", "2", "]", "[", "'fs_ave_widths'", "]", ",", "factor_sizes", "=", "factor_sizes", ")", ")", ",", "\n", "'flatness.ave_length_l1'", ":", "torch", ".", "mean", "(", "filter_inactive_factors", "(", "p_fs_measures", "[", "1", "]", "[", "'fs_ave_lengths'", "]", ",", "factor_sizes", "=", "factor_sizes", ")", ")", ",", "\n", "'flatness.ave_length_l2'", ":", "torch", ".", "mean", "(", "filter_inactive_factors", "(", "p_fs_measures", "[", "2", "]", "[", "'fs_ave_lengths'", "]", ",", "factor_sizes", "=", "factor_sizes", ")", ")", ",", "\n", "}", "\n", "# convert values from torch", "\n", "return", "{", "k", ":", "float", "(", "v", ")", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.compute_flatness": [[109, 121], ["_flatness.filter_inactive_factors", "_flatness.filter_inactive_factors", "torch.all", "torch.all", "torch.all", "torch.eq"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.filter_inactive_factors", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.filter_inactive_factors"], ["", "def", "compute_flatness", "(", "widths", ",", "lengths", ",", "factor_sizes", ")", ":", "\n", "    ", "widths", "=", "filter_inactive_factors", "(", "widths", ",", "factor_sizes", ")", "\n", "lengths", "=", "filter_inactive_factors", "(", "lengths", ",", "factor_sizes", ")", "\n", "# checks", "\n", "assert", "torch", ".", "all", "(", "widths", ">=", "0", ")", "\n", "assert", "torch", ".", "all", "(", "lengths", ">=", "0", ")", "\n", "assert", "torch", ".", "all", "(", "torch", ".", "eq", "(", "widths", "==", "0", ",", "lengths", "==", "0", ")", ")", "\n", "# update scores", "\n", "widths", "[", "lengths", "==", "0", "]", "=", "0", "\n", "lengths", "[", "lengths", "==", "0", "]", "=", "1", "\n", "# compute flatness", "\n", "return", "(", "widths", "/", "lengths", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.filter_inactive_factors": [[123, 129], ["torch.tensor", "torch.all", "torch.nonzero"], "function", ["None"], ["", "def", "filter_inactive_factors", "(", "tensor", ",", "factor_sizes", ")", ":", "\n", "    ", "factor_sizes", "=", "torch", ".", "tensor", "(", "factor_sizes", ",", "device", "=", "tensor", ".", "device", ")", "\n", "assert", "torch", ".", "all", "(", "factor_sizes", ">=", "1", ")", "\n", "# remove", "\n", "active_factors", "=", "torch", ".", "nonzero", "(", "factor_sizes", "-", "1", ",", "as_tuple", "=", "True", ")", "\n", "return", "tensor", "[", "active_factors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.aggregate_measure_distances_along_all_factors": [[131, 158], ["torch.utils.data.dataloader.default_collate().items", "_flatness.aggregate_measure_distances_along_factor", "range", "torch.utils.data.dataloader.default_collate", "torch.as_tensor"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.aggregate_measure_distances_along_factor"], ["", "def", "aggregate_measure_distances_along_all_factors", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ",", "\n", "repeats", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "ps", ":", "Iterable", "[", "Union", "[", "str", ",", "int", "]", "]", "=", "(", "1", ",", "2", ")", ",", "\n", ")", "->", "dict", ":", "\n", "# COMPUTE AGGREGATES FOR EACH FACTOR", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "    ", "fs_p_measures", "=", "[", "\n", "aggregate_measure_distances_along_factor", "(", "dataset", ",", "representation_function", ",", "f_idx", "=", "f_idx", ",", "repeats", "=", "repeats", ",", "batch_size", "=", "batch_size", ",", "ps", "=", "ps", ")", "\n", "for", "f_idx", "in", "range", "(", "dataset", ".", "gt_data", ".", "num_factors", ")", "\n", "]", "\n", "\n", "# FINALIZE FOR EACH FACTOR", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "p_fs_measures", "=", "{", "}", "\n", "for", "p", ",", "fs_measures", "in", "default_collate", "(", "fs_p_measures", ")", ".", "items", "(", ")", ":", "\n", "        ", "fs_ave_widths", "=", "fs_measures", "[", "'ave_width'", "]", "\n", "# get number of spaces deltas (number of points minus 1)", "\n", "# compute length: estimated version of factors_ave_width = factors_num_deltas * factors_ave_delta", "\n", "_fs_num_deltas", "=", "torch", ".", "as_tensor", "(", "dataset", ".", "gt_data", ".", "factor_sizes", ",", "device", "=", "fs_ave_widths", ".", "device", ")", "-", "1", "\n", "_fs_ave_deltas", "=", "fs_measures", "[", "'ave_delta'", "]", "\n", "fs_ave_lengths", "=", "_fs_num_deltas", "*", "_fs_ave_deltas", "\n", "# update", "\n", "p_fs_measures", "[", "p", "]", "=", "{", "'fs_ave_widths'", ":", "fs_ave_widths", ",", "'fs_ave_lengths'", ":", "fs_ave_lengths", "}", "\n", "", "return", "p_fs_measures", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.aggregate_measure_distances_along_factor": [[160, 208], ["torch.as_tensor", "_flatness.encode_all_along_factor", "ValueError", "range", "torch.norm", "torch.norm", "knn().values.max", "torch.topk", "measures[].mean", "measures[].mean", "torch.utils.data.dataloader.default_collate().items", "_flatness.get_device", "torch.as_tensor.clone", "torch.as_tensor.clone", "torch.roll", "torch.roll", "torch.utils.data.dataloader.default_collate", "_flatness.knn"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.encode_all_along_factor", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.get_device", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.knn"], ["", "def", "aggregate_measure_distances_along_factor", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ",", "\n", "f_idx", ":", "int", ",", "\n", "repeats", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "ps", ":", "Iterable", "[", "Union", "[", "str", ",", "int", "]", "]", "=", "(", "1", ",", "2", ")", ",", "\n", "cycle_fail", ":", "bool", "=", "False", ",", "\n", ")", "->", "dict", ":", "\n", "    ", "f_size", "=", "dataset", ".", "gt_data", ".", "factor_sizes", "[", "f_idx", "]", "\n", "\n", "if", "f_size", "==", "1", ":", "\n", "        ", "if", "cycle_fail", ":", "\n", "            ", "raise", "ValueError", "(", "f'dataset factor size is too small for flatness metric with cycle_normalize enabled! size={f_size} < 2'", ")", "\n", "", "zero", "=", "torch", ".", "as_tensor", "(", "0.", ",", "device", "=", "get_device", "(", "dataset", ",", "representation_function", ")", ")", "\n", "return", "{", "p", ":", "{", "'ave_width'", ":", "zero", ".", "clone", "(", ")", ",", "'ave_delta'", ":", "zero", ".", "clone", "(", ")", "}", "for", "p", "in", "ps", "}", "\n", "\n", "# FEED FORWARD, COMPUTE ALL DELTAS & WIDTHS - For each distance measure", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "", "p_measures", ":", "list", "=", "[", "{", "}", "for", "_", "in", "range", "(", "repeats", ")", "]", "\n", "for", "measures", "in", "p_measures", ":", "\n", "# generate repeated factors, varying one factor over the entire range", "\n", "        ", "zs_traversal", "=", "encode_all_along_factor", "(", "dataset", ",", "representation_function", ",", "f_idx", "=", "f_idx", ",", "batch_size", "=", "batch_size", ")", "\n", "# for each distance measure compute everything", "\n", "# - width: calculate the distance between the furthest two points", "\n", "# - deltas: calculating the distances of their representations to the next values.", "\n", "# - cycle_normalize: we cant get the ave next dist directly because of cycles, so we remove the largest dist", "\n", "for", "p", "in", "ps", ":", "\n", "            ", "deltas_next", "=", "torch", ".", "norm", "(", "torch", ".", "roll", "(", "zs_traversal", ",", "-", "1", ",", "dims", "=", "0", ")", "-", "zs_traversal", ",", "dim", "=", "-", "1", ",", "p", "=", "p", ")", "# next | shape: (factor_size, z_size)", "\n", "deltas_prev", "=", "torch", ".", "norm", "(", "torch", ".", "roll", "(", "zs_traversal", ",", "1", ",", "dims", "=", "0", ")", "-", "zs_traversal", ",", "dim", "=", "-", "1", ",", "p", "=", "p", ")", "# prev | shape: (factor_size, z_size)", "\n", "# values needed for flatness", "\n", "width", "=", "knn", "(", "x", "=", "zs_traversal", ",", "y", "=", "zs_traversal", ",", "k", "=", "1", ",", "largest", "=", "True", ",", "p", "=", "p", ")", ".", "values", ".", "max", "(", ")", "# shape: (,)", "\n", "min_deltas", "=", "torch", ".", "topk", "(", "deltas_next", ",", "k", "=", "f_size", "-", "1", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", ",", "sorted", "=", "False", ")", "# shape: (factor_size-1, z_size)", "\n", "# TODO: other measures can be added:", "\n", "#       1. multivariate skewness", "\n", "#       2. normality measure", "\n", "#       3. independence", "\n", "#       4. menger curvature (Cayley-Menger Determinant?)", "\n", "# save variables", "\n", "measures", "[", "p", "]", "=", "{", "'widths'", ":", "width", ",", "'deltas'", ":", "min_deltas", ".", "values", "}", "\n", "\n", "# AGGREGATE DATA - For each distance measure", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "", "", "return", "{", "\n", "p", ":", "{", "\n", "'ave_width'", ":", "measures", "[", "'widths'", "]", ".", "mean", "(", "dim", "=", "0", ")", ",", "# shape: (repeats,) -> ()", "\n", "'ave_delta'", ":", "measures", "[", "'deltas'", "]", ".", "mean", "(", "dim", "=", "[", "0", ",", "1", "]", ")", ",", "# shape: (repeats, factor_size - 1) -> ()", "\n", "}", "for", "p", ",", "measures", "in", "default_collate", "(", "p_measures", ")", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.encode_all_along_factor": [[216, 223], ["dataset.gt_data.sample_random_factor_traversal", "_flatness.encode_all_factors"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_random_factor_traversal", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.encode_all_factors"], ["", "def", "encode_all_along_factor", "(", "dataset", ":", "DisentDataset", ",", "representation_function", ",", "f_idx", ":", "int", ",", "batch_size", ":", "int", ",", "return_batch", ":", "bool", "=", "False", ")", ":", "\n", "# generate repeated factors, varying one factor over a range (f_size, f_dims)", "\n", "    ", "factors", "=", "dataset", ".", "gt_data", ".", "sample_random_factor_traversal", "(", "f_idx", "=", "f_idx", ")", "\n", "# get the representations of all the factors (f_size, z_size)", "\n", "# * if return_batch is False: return sequential_zs", "\n", "# * if return_batch is True: return (sequential_zs, sequential_batch)", "\n", "return", "encode_all_factors", "(", "dataset", ",", "representation_function", ",", "factors", "=", "factors", ",", "batch_size", "=", "batch_size", ",", "return_batch", "=", "return_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.encode_all_factors": [[225, 241], ["torch.no_grad", "disent.util.iters.iter_chunks", "torch.cat", "dataset.dataset_batch_from_factors", "representation_function", "zs.append", "torch.cat", "torch.cat", "xs.append"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.iters.iter_chunks", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "encode_all_factors", "(", "dataset", ":", "DisentDataset", ",", "representation_function", ",", "factors", ",", "batch_size", ":", "int", ",", "return_batch", ":", "bool", "=", "False", ")", "->", "Union", "[", "torch", ".", "Tensor", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "    ", "zs", "=", "[", "]", "\n", "xs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_factors", "in", "iter_chunks", "(", "factors", ",", "chunk_size", "=", "batch_size", ")", ":", "\n", "            ", "batch", "=", "dataset", ".", "dataset_batch_from_factors", "(", "batch_factors", ",", "mode", "=", "'input'", ")", "\n", "z", "=", "representation_function", "(", "batch", ")", "\n", "zs", ".", "append", "(", "z", ")", "\n", "if", "return_batch", ":", "\n", "                ", "xs", ".", "append", "(", "batch", ")", "\n", "# handle case", "\n", "", "", "", "if", "return_batch", ":", "\n", "# might be on different devices", "\n", "        ", "return", "torch", ".", "cat", "(", "zs", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "zs", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.get_device": [[243, 246], ["representation_function", "dataset.dataset_sample_batch"], "function", ["None"], ["", "", "def", "get_device", "(", "dataset", ":", "DisentDataset", ",", "representation_function", ")", ":", "\n", "# this is a hack...", "\n", "    ", "return", "representation_function", "(", "dataset", ".", "dataset_sample_batch", "(", "1", ",", "mode", "=", "'input'", ")", ")", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.knn": [[253, 263], ["torch.norm", "torch.topk"], "function", ["None"], ["", "def", "knn", "(", "x", ",", "y", ",", "k", ":", "int", "=", "None", ",", "largest", "=", "False", ",", "p", "=", "'fro'", ")", ":", "\n", "    ", "assert", "0", "<", "k", "<=", "y", ".", "shape", "[", "0", "]", "\n", "# check input vectors, must be array of vectors", "\n", "assert", "2", "==", "x", ".", "ndim", "==", "y", ".", "ndim", "\n", "assert", "x", ".", "shape", "[", "1", ":", "]", "==", "y", ".", "shape", "[", "1", ":", "]", "\n", "# compute distances between each and every pair", "\n", "dist_mat", "=", "x", "[", ":", ",", "None", ",", "...", "]", "-", "y", "[", "None", ",", ":", ",", "...", "]", "\n", "dist_mat", "=", "torch", ".", "norm", "(", "dist_mat", ",", "dim", "=", "-", "1", ",", "p", "=", "p", ")", "\n", "# return closest distances", "\n", "return", "torch", ".", "topk", "(", "dist_mat", ",", "k", "=", "k", ",", "dim", "=", "-", "1", ",", "largest", "=", "largest", ",", "sorted", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.Metric.__init__": [[55, 66], ["disent.util.function.wrapped_partial", "disent.util.function.wrapped_partial"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "name", ":", "str", ",", "\n", "metric_fn", ":", "T", ",", "# Callable[[...], Dict[str, Number]]", "\n", "default_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "fast_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_orig_fn", "=", "metric_fn", "\n", "self", ".", "_metric_fn_default", "=", "wrapped_partial", "(", "self", ".", "_orig_fn", ",", "**", "(", "default_kwargs", "if", "default_kwargs", "else", "{", "}", ")", ")", "\n", "self", ".", "_metric_fn_fast", "=", "wrapped_partial", "(", "self", ".", "_orig_fn", ",", "**", "(", "fast_kwargs", "if", "fast_kwargs", "else", "{", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.Metric.__call__": [[68, 70], ["utils.Metric._metric_fn_default"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "Dict", "[", "str", ",", "Number", "]", ":", "\n", "        ", "return", "self", ".", "_metric_fn_default", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.Metric.compute": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "compute", "(", "self", ")", "->", "T", ":", "\n", "        ", "return", "self", ".", "_metric_fn_default", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.Metric.compute_fast": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "compute_fast", "(", "self", ")", "->", "T", ":", "\n", "        ", "return", "self", ".", "_metric_fn_fast", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.Metric.unwrap": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrap", "(", "self", ")", "->", "T", ":", "\n", "        ", "return", "self", ".", "_orig_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.Metric.name": [[83, 86], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.Metric.__str__": [[87, 89], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'metric-{self.name}'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.make_metric": [[91, 110], ["utils.Metric"], "function", ["None"], ["", "", "def", "make_metric", "(", "\n", "name", ":", "str", ",", "\n", "default_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "fast_kwargs", ":", "Optional", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", ")", "->", "Callable", "[", "[", "T", "]", ",", "Union", "[", "Metric", "[", "T", "]", ",", "T", "]", "]", ":", "\n", "    ", "\"\"\"\n    Metrics should be decorated using this function to set defaults!\n    Two versions of the metric should exist.\n        1. Recommended settings\n           - This should give reliable results, but may be very slow, multiple minutes to half an\n             hour or more for some metrics depending on the underlying model, data and ground-truth factors.\n        2. Faster settings\n           - This should give a decent results, but should be decently fast, a few seconds/minutes at most.\n             This is not used for testing\n    \"\"\"", "\n", "# `Union[Metric[T], T]` is hack to get type hint on `__call__`", "\n", "def", "_wrap_fn_as_metric", "(", "metric_fn", ":", "T", ")", "->", "Union", "[", "Metric", "[", "T", "]", ",", "T", "]", ":", "\n", "        ", "return", "Metric", "(", "name", "=", "name", ",", "metric_fn", "=", "metric_fn", ",", "default_kwargs", "=", "default_kwargs", ",", "fast_kwargs", "=", "fast_kwargs", ")", "\n", "", "return", "_wrap_fn_as_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.generate_batch_factor_code": [[117, 153], ["tqdm.tqdm", "numpy.transpose", "numpy.transpose", "min", "dataset.dataset_sample_batch_with_factors", "bar.update", "disent.util.to_numpy", "numpy.vstack", "numpy.vstack", "representation_function", "disent.util.to_numpy", "representation_function"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy"], ["", "def", "generate_batch_factor_code", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ",", "\n", "num_points", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "show_progress", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Sample a single training sample based on a mini-batch of ground-truth data.\n    Args:\n      dataset: DisentDataset to be sampled from.\n      representation_function: Function that takes observation as input and outputs a representation.\n      num_points: Number of points to sample.\n      batch_size: Batchsize to sample points.\n      show_progress: if a progress bar should be shown\n    Returns:\n      representations: Codes (num_codes, num_points)-np array.\n      factors: Factors generating the codes (num_factors, num_points)-np array.\n    \"\"\"", "\n", "# TODO: this can be cleaned up and simplified", "\n", "#       maybe use chunked()", "\n", "representations", "=", "None", "\n", "factors", "=", "None", "\n", "i", "=", "0", "\n", "with", "tqdm", "(", "total", "=", "num_points", ",", "disable", "=", "not", "show_progress", ")", "as", "bar", ":", "\n", "        ", "while", "i", "<", "num_points", ":", "\n", "            ", "num_points_iter", "=", "min", "(", "num_points", "-", "i", ",", "batch_size", ")", "\n", "current_observations", ",", "current_factors", "=", "dataset", ".", "dataset_sample_batch_with_factors", "(", "num_points_iter", ",", "mode", "=", "'input'", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "factors", "=", "current_factors", "\n", "representations", "=", "to_numpy", "(", "representation_function", "(", "current_observations", ")", ")", "\n", "", "else", ":", "\n", "                ", "factors", "=", "np", ".", "vstack", "(", "(", "factors", ",", "current_factors", ")", ")", "\n", "representations", "=", "np", ".", "vstack", "(", "(", "representations", ",", "to_numpy", "(", "representation_function", "(", "current_observations", ")", ")", ")", ")", "\n", "", "i", "+=", "num_points_iter", "\n", "bar", ".", "update", "(", "num_points_iter", ")", "\n", "", "", "return", "np", ".", "transpose", "(", "representations", ")", ",", "np", ".", "transpose", "(", "factors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.split_train_test": [[155, 174], ["int", "numpy.ceil"], "function", ["None"], ["", "def", "split_train_test", "(", "observations", ",", "train_percentage", ")", ":", "\n", "    ", "\"\"\"\n    Splits observations into a train and test set.\n    Args:\n      observations: Observations to split in train and test. They can be the\n        representation or the observed factors of variation. The shape is\n        (num_dimensions, num_points) and the split is over the points.\n      train_percentage: Fraction of observations to be used for training.\n    Returns:\n      observations_train: Observations to be used for training.\n      observations_test: Observations to be used for testing.\n    \"\"\"", "\n", "num_labelled_samples", "=", "observations", ".", "shape", "[", "1", "]", "\n", "num_labelled_samples_train", "=", "int", "(", "np", ".", "ceil", "(", "num_labelled_samples", "*", "train_percentage", ")", ")", "\n", "num_labelled_samples_test", "=", "num_labelled_samples", "-", "num_labelled_samples_train", "\n", "observations_train", "=", "observations", "[", ":", ",", ":", "num_labelled_samples_train", "]", "\n", "observations_test", "=", "observations", "[", ":", ",", "num_labelled_samples_train", ":", "]", "\n", "assert", "observations_test", ".", "shape", "[", "1", "]", "==", "num_labelled_samples_test", ",", "\"Wrong size of the test set.\"", "\n", "return", "observations_train", ",", "observations_test", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.obtain_representation": [[176, 199], ["numpy.transpose", "min", "disent.util.to_numpy", "numpy.vstack", "representation_function", "disent.util.to_numpy", "representation_function"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy"], ["", "def", "obtain_representation", "(", "observations", ",", "representation_function", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"\"Obtain representations from observations.\n    Args:\n      observations: Observations for which we compute the representation.\n      representation_function: Function that takes observation as input and\n        outputs a representation.\n      batch_size: Batch size to compute the representation.\n    Returns:\n      representations: Codes (num_codes, num_points)-Numpy array.\n    \"\"\"", "\n", "representations", "=", "None", "\n", "# TODO: use chunked", "\n", "num_points", "=", "observations", ".", "shape", "[", "0", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "num_points", ":", "\n", "        ", "num_points_iter", "=", "min", "(", "num_points", "-", "i", ",", "batch_size", ")", "\n", "current_observations", "=", "observations", "[", "i", ":", "i", "+", "num_points_iter", "]", "\n", "if", "i", "==", "0", ":", "\n", "            ", "representations", "=", "to_numpy", "(", "representation_function", "(", "current_observations", ")", ")", "\n", "", "else", ":", "\n", "            ", "representations", "=", "np", ".", "vstack", "(", "(", "representations", ",", "to_numpy", "(", "representation_function", "(", "current_observations", ")", ")", ")", ")", "\n", "", "i", "+=", "num_points_iter", "\n", "", "return", "np", ".", "transpose", "(", "representations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.histogram_discretize": [[201, 209], ["numpy.zeros_like", "range", "numpy.digitize", "numpy.histogram"], "function", ["None"], ["", "def", "histogram_discretize", "(", "target", ",", "num_bins", "=", "20", ")", ":", "\n", "    ", "\"\"\"\n    Discretization based on histograms.\n    \"\"\"", "\n", "discretized", "=", "np", ".", "zeros_like", "(", "target", ")", "\n", "for", "i", "in", "range", "(", "target", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "discretized", "[", "i", ",", ":", "]", "=", "np", ".", "digitize", "(", "target", "[", "i", ",", ":", "]", ",", "np", ".", "histogram", "(", "target", "[", "i", ",", ":", "]", ",", "num_bins", ")", "[", "1", "]", "[", ":", "-", "1", "]", ")", "\n", "", "return", "discretized", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.discrete_mutual_info": [[211, 222], ["numpy.zeros", "range", "range", "sklearn.metrics.mutual_info_score"], "function", ["None"], ["", "def", "discrete_mutual_info", "(", "mus", ",", "ys", ")", ":", "\n", "    ", "\"\"\"\n    Compute discrete mutual information.\n    \"\"\"", "\n", "num_codes", "=", "mus", ".", "shape", "[", "0", "]", "\n", "num_factors", "=", "ys", ".", "shape", "[", "0", "]", "\n", "m", "=", "np", ".", "zeros", "(", "[", "num_codes", ",", "num_factors", "]", ")", "\n", "for", "i", "in", "range", "(", "num_codes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_factors", ")", ":", "\n", "            ", "m", "[", "i", ",", "j", "]", "=", "sklearn", ".", "metrics", ".", "mutual_info_score", "(", "ys", "[", "j", ",", ":", "]", ",", "mus", "[", "i", ",", ":", "]", ")", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics.utils.discrete_entropy": [[224, 233], ["numpy.zeros", "range", "sklearn.metrics.mutual_info_score"], "function", ["None"], ["", "def", "discrete_entropy", "(", "ys", ")", ":", "\n", "    ", "\"\"\"\n    Compute discrete mutual information.\n    \"\"\"", "\n", "num_factors", "=", "ys", ".", "shape", "[", "0", "]", "\n", "h", "=", "np", ".", "zeros", "(", "num_factors", ")", "\n", "for", "j", "in", "range", "(", "num_factors", ")", ":", "\n", "        ", "h", "[", "j", "]", "=", "sklearn", ".", "metrics", ".", "mutual_info_score", "(", "ys", "[", "j", ",", ":", "]", ",", "ys", "[", "j", ",", ":", "]", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._metric_factored_components": [[73, 159], ["_factored_components._compute_factored_metric_components", "ValueError", "sorted", "scores.keys"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_factored_metric_components"], ["def", "_metric_factored_components", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ":", "callable", ",", "\n", "num_samples", ":", "int", "=", "64", ",", "\n", "global_subset_size", ":", "int", "=", "32", ",", "\n", "repeats", ":", "int", "=", "1024", ",", "\n", "batch_size", ":", "int", "=", "64", ",", "\n", "compute_distances", ":", "bool", "=", "True", ",", "\n", "compute_linearity", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Michlo et al.\n    https://github.com/nmichlo/msc-research\n\n    Computes the factored components metric (ordering, linearity & axis alignment):\n\n    # Distances:\n        rcorr_factor_data:   rank correlation between ground-truth factor dists and MSE distances between data points\n        rcorr_latent_data:   rank correlation between l2 latent dists           and MSE distances between data points\n        rcorr_factor_latent: rank correlation between ground-truth factor dists and latent dists\n\n        lcorr_factor_data:   linear correlation between ground-truth factor dists and MSE distances between data points\n        lcorr_latent_data:   linear correlation between l2 latent dists           and MSE distances between data points\n        lcorr_factor_latent: linear correlation between ground-truth factor dists and latent dists\n\n        -- only active if `compute_swap_ratio=True`\n        rsame_factor_data:   how similar ground-truth factor dists are compared to MSE distances between data points  MEAN: ((a<A)&(b<B)) | ((a==A)&(b==B)) | ((a>A)&(b>B))\n        rsame_latent_data:   how similar l2 latent dists           are compared to MSE distances between data points  MEAN: ((a<A)&(b<B)) | ((a==A)&(b==B)) | ((a>A)&(b>B))\n        rsame_factor_latent: how similar ground-truth factor dists are compared to latent dists                       MEAN: ((a<A)&(b<B)) | ((a==A)&(b==B)) | ((a>A)&(b>B))\n\n        * modifiers:\n            - .global | computed using random global samples\n            - .factor | computed using random values along a ground-truth factor traversal\n            - .l1     | computed using l1 distance\n            - .l2     | computed using l2 distance -- (if an .l1 or .l2 tag is missing, then it is .l2 by default)\n\n    # Linearity & Axis Alignment\n        linear_ratio:           average (largest singular value over sum of singular values)\n        axis_ratio:             average (largest std/variance over sum of std/variances)\n        axis_alignment:         axis ratio is bounded by linear ratio - compute: axis / linear\n\n        linear_ratio_ave:       [INVALID] average (largest singular value) over average (sum of singular values)\n        axis_ratio_ave:         average (largest std/variance) over average (sum of std/variances)\n        axis_alignment_ave:     [INVALID] axis ratio is bounded by linear ratio - compute: axis / linear\n\n        * modifiers:\n            - .var | computed using the variance\n            - .std | computed using the standard deviation\n\n    Args:\n      dataset: DisentDataset to be sampled from.\n      representation_function: Function that takes observations as input and outputs a dim_representation sized representation for each observation.\n      num_samples: How many random triplets are sampled from a single factor-traversal or global ranom mini-batch\n      global_subset_size: Controls the size of the global random minibatch, for individual factors this is usually the size of the factor. Triplets are randomly sampled from this.\n      repeats: how many times to repeat a traversal along each factors, these are then averaged together.\n      batch_size: Batch size to process at any time while generating representations, should not effect metric results.\n      compute_distances: If the distance components of the metric should be computed.\n      compute_linearity: If the linearity components of the metric should be computed.\n    Returns:\n      Dictionary with metrics\n    \"\"\"", "\n", "# checks", "\n", "if", "not", "(", "compute_distances", "or", "compute_linearity", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Metric will not compute any values! At least one of: `compute_distances` or `compute_linearity` must be `True`'", ")", "\n", "\n", "# compute actual metric values", "\n", "", "factor_scores", ",", "global_scores", "=", "_compute_factored_metric_components", "(", "\n", "dataset", ",", "\n", "representation_function", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "global_subset_size", "=", "global_subset_size", ",", "\n", "repeats", "=", "repeats", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "compute_distances", "=", "compute_distances", ",", "\n", "compute_linearity", "=", "compute_linearity", ",", "\n", "\n", ")", "\n", "\n", "# convert values from torch", "\n", "scores", "=", "{", "\n", "**", "global_scores", ",", "\n", "**", "factor_scores", ",", "\n", "}", "\n", "\n", "# sorted", "\n", "return", "{", "k", ":", "scores", "[", "k", "]", "for", "k", "in", "sorted", "(", "scores", ".", "keys", "(", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._filtered_mean": [[188, 200], ["disent.metrics._flatness.filter_inactive_factors.to", "disent.metrics._flatness.filter_inactive_factors", "disent.nn.functional.torch_mean_generalized", "disent.util.to_numpy", "disent.nn.functional.torch_mean_generalized.to", "len"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.filter_inactive_factors", "home.repos.pwc.inspect_result.nmichlo_disent.functional._mean.torch_mean_generalized", "home.repos.pwc.inspect_result.nmichlo_disent.util.__init__.to_numpy"], ["def", "_filtered_mean", "(", "values", ":", "torch", ".", "Tensor", ",", "p", ":", "Union", "[", "str", ",", "int", "]", ",", "factor_sizes", ":", "Tuple", "[", "int", ",", "...", "]", ")", ":", "\n", "# increase precision", "\n", "    ", "values", "=", "values", ".", "to", "(", "torch", ".", "float64", ")", "\n", "# check size", "\n", "assert", "values", ".", "shape", "==", "(", "len", "(", "factor_sizes", ")", ",", ")", "\n", "# filter", "\n", "# -- filter out factor dimensions that are incorrect. ie. size <= 1", "\n", "values", "=", "filter_inactive_factors", "(", "values", ",", "factor_sizes", ")", "\n", "# compute mean", "\n", "mean", "=", "torch_mean_generalized", "(", "values", ",", "dim", "=", "0", ",", "p", "=", "p", ")", "\n", "# return decreased precision", "\n", "return", "to_numpy", "(", "mean", ".", "to", "(", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_factored_metric_components": [[202, 277], ["torch.no_grad", "torch.no_grad", "_factored_components._numpy_stack_all_dicts", "float", "range", "_factored_components._numpy_concat_all_dicts", "_factored_components._compute_scores_from_dists", "_factored_components._compute_factored_metric_components_along_factor", "_factored_components._filtered_mean", "factor_values.items", "dataset.gt_data.sample_factors", "disent.metrics._flatness.encode_all_factors", "_factored_components._compute_dists", "distance_measures.append", "range", "torch.from_numpy", "torch.from_numpy", "zs.cpu", "xs.cpu", "torch.from_numpy().to", "torch.from_numpy().to", "distance_measures.items", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._numpy_stack_all_dicts", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._numpy_concat_all_dicts", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_scores_from_dists", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_factored_metric_components_along_factor", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._filtered_mean", "home.repos.pwc.inspect_result.nmichlo_disent.util.state_space.StateSpace.sample_factors", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.encode_all_factors", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_dists", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_compute_factored_metric_components", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ",", "\n", "num_samples", ":", "int", ",", "\n", "global_subset_size", ":", "int", ",", "\n", "repeats", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "compute_distances", ":", "bool", ",", "\n", "compute_linearity", ":", "bool", ",", "\n", ")", "->", "(", "dict", ",", "dict", ")", ":", "\n", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# COMPUTE FOR EACH FACTOR", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "# shapes: (num_factors,)", "\n", "    ", "factor_values", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "=", "_numpy_stack_all_dicts", "(", "[", "\n", "_compute_factored_metric_components_along_factor", "(", "\n", "dataset", ",", "\n", "representation_function", ",", "\n", "f_idx", "=", "f_idx", ",", "\n", "num_samples", "=", "num_samples", ",", "\n", "repeats", "=", "repeats", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "compute_distances", "=", "compute_distances", ",", "\n", "compute_linearity", "=", "compute_linearity", ",", "\n", ")", "\n", "for", "f_idx", "in", "range", "(", "dataset", ".", "gt_data", ".", "num_factors", ")", "\n", "]", ")", "\n", "\n", "# aggregate for each factor", "\n", "# -- filter out factor dimensions that are incorrect. ie. size <= 1", "\n", "factor_scores", "=", "{", "\n", "k", ":", "float", "(", "_filtered_mean", "(", "torch", ".", "from_numpy", "(", "v", ")", ",", "p", "=", "'geometric'", ",", "factor_sizes", "=", "dataset", ".", "gt_data", ".", "factor_sizes", ")", ")", "\n", "for", "k", ",", "v", "in", "factor_values", ".", "items", "(", ")", "\n", "}", "\n", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# RANDOM GLOBAL SAMPLES", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "if", "compute_distances", ":", "\n", "# storage", "\n", "        ", "distance_measures", ":", "List", "[", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", "=", "[", "]", "\n", "\n", "# was: `iter_chunks(range(int(repeats * np.mean(dataset.gt_data.factor_sizes))), batch_size)`", "\n", "for", "_", "in", "range", "(", "repeats", ")", ":", "\n", "# sample random factors", "\n", "            ", "factors", "=", "dataset", ".", "gt_data", ".", "sample_factors", "(", "size", "=", "global_subset_size", ")", "\n", "# encode factors", "\n", "zs", ",", "xs", "=", "encode_all_factors", "(", "dataset", ",", "representation_function", ",", "factors", ",", "batch_size", "=", "batch_size", ",", "return_batch", "=", "True", ")", "\n", "zs", ",", "xs", ",", "factors", "=", "zs", ".", "cpu", "(", ")", ",", "xs", ".", "cpu", "(", ")", ",", "torch", ".", "from_numpy", "(", "factors", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "# [COMPUTE SAME RATIO & CORRELATION]: was `_SAMPLES_MULTIPLIER_GLOBAL*len(zs)`", "\n", "computed_dists", "=", "_compute_dists", "(", "num_triplets", "=", "num_samples", ",", "zs_traversal", "=", "zs", ",", "xs_traversal", "=", "xs", ",", "factors", "=", "factors", ")", "\n", "# [STORE DISTANCES]", "\n", "distance_measures", ".", "append", "(", "computed_dists", ")", "\n", "\n", "# [AGGREGATE]", "\n", "# concatenate all into arrays: <shape: (repeats*num_samples,)>", "\n", "# then aggregate over first dimension: <shape: (,)>", "\n", "", "distance_measures", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "=", "_numpy_concat_all_dicts", "(", "distance_measures", ")", "\n", "distance_measures", ":", "Dict", "[", "str", ",", "float", "]", "=", "_compute_scores_from_dists", "(", "distance_measures", ")", "\n", "distance_measures", ":", "Dict", "[", "str", ",", "float", "]", "=", "{", "f'distances.{k}.global'", ":", "v", "for", "k", ",", "v", "in", "distance_measures", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "distance_measures", ":", "Dict", "[", "str", ",", "float", "]", "=", "{", "}", "\n", "\n", "# update global scores", "\n", "", "global_scores", "=", "distance_measures", "\n", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# RETURN", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "return", "factor_scores", ",", "global_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_unsorted_axis_values": [[286, 293], ["torch.var", "torch.var", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "_compute_unsorted_axis_values", "(", "zs_traversal", ",", "use_std", ":", "bool", "=", "True", ")", ":", "\n", "# CORRELATIONS -- SORTED IN DESCENDING ORDER:", "\n", "# correlation with standard basis (1, 0, 0, ...), (0, 1, 0, ...), ...", "\n", "    ", "axis_values", "=", "torch", ".", "var", "(", "zs_traversal", ",", "dim", "=", "0", ")", "# (z_size,)", "\n", "if", "use_std", ":", "\n", "        ", "axis_values", "=", "torch", ".", "sqrt", "(", "axis_values", ")", "\n", "", "return", "axis_values", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_unsorted_linear_values": [[295, 304], ["disent.nn.functional.torch_pca", "torch.sqrt", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.functional._pca.torch_pca"], ["", "def", "_compute_unsorted_linear_values", "(", "zs_traversal", ",", "use_std", ":", "bool", "=", "True", ")", ":", "\n", "# CORRELATIONS -- SORTED IN DESCENDING ORDER:", "\n", "# correlation along arbitrary orthogonal basis", "\n", "# -- note pca_mode='svd' returns the number of values equal to: min(factor_size, z_size)  !!! this may lower scores on average", "\n", "# -- note pca_mode='eig' returns the number of values equal to: z_size", "\n", "    ", "_", ",", "linear_values", "=", "torch_pca", "(", "zs_traversal", ",", "center", "=", "True", ",", "mode", "=", "'eig'", ")", "\n", "if", "use_std", ":", "\n", "        ", "linear_values", "=", "torch", ".", "sqrt", "(", "linear_values", ")", "\n", "", "return", "linear_values", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._score_from_sorted": [[306, 322], ["len", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "_score_from_sorted", "(", "sorted_vars", ":", "torch", ".", "Tensor", ",", "top_2", ":", "bool", "=", "False", ",", "norm", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "top_2", ":", "\n", "# use two max values", "\n", "# this is more like mig", "\n", "        ", "sorted_vars", "=", "sorted_vars", "[", ":", "2", "]", "\n", "# sum all values", "\n", "", "n", "=", "len", "(", "sorted_vars", ")", "\n", "r", "=", "sorted_vars", "[", "0", "]", "/", "torch", ".", "sum", "(", "sorted_vars", ")", "\n", "# get norm if needed", "\n", "if", "norm", ":", "\n", "# for: x/(x+a)", "\n", "# normalised = (x/(x+a) - (1/n)) / (1 - (1/n))", "\n", "# normalised = (x - 1/(n-1) * a) / (x + a)", "\n", "        ", "r", "=", "(", "r", "-", "(", "1", "/", "n", ")", ")", "/", "(", "1", "-", "(", "1", "/", "n", ")", ")", "\n", "# done!", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._score_from_unsorted": [[324, 330], ["_factored_components._score_from_sorted", "torch.sort", "torch.sort"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._score_from_sorted"], ["", "def", "_score_from_unsorted", "(", "unsorted_values", ":", "torch", ".", "Tensor", ",", "top_2", ":", "bool", "=", "False", ",", "norm", ":", "bool", "=", "True", ")", ":", "\n", "    ", "assert", "unsorted_values", ".", "ndim", "==", "1", "\n", "# sort in descending order", "\n", "sorted_values", "=", "torch", ".", "sort", "(", "unsorted_values", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", ".", "values", "\n", "# compute score", "\n", "return", "_score_from_sorted", "(", "sorted_values", ",", "top_2", "=", "top_2", ",", "norm", "=", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components.compute_axis_score": [[332, 336], ["_factored_components._compute_unsorted_axis_values", "_factored_components._score_from_unsorted"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_unsorted_axis_values", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._score_from_unsorted"], ["", "def", "compute_axis_score", "(", "zs_traversal", ":", "torch", ".", "Tensor", ",", "use_std", ":", "bool", "=", "True", ",", "top_2", ":", "bool", "=", "False", ",", "norm", ":", "bool", "=", "True", ")", ":", "\n", "    ", "unsorted_values", "=", "_compute_unsorted_axis_values", "(", "zs_traversal", ",", "use_std", "=", "use_std", ")", "\n", "score", "=", "_score_from_unsorted", "(", "unsorted_values", ",", "top_2", "=", "top_2", ",", "norm", "=", "norm", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components.compute_linear_score": [[338, 342], ["_factored_components._compute_unsorted_linear_values", "_factored_components._score_from_unsorted"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_unsorted_linear_values", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._score_from_unsorted"], ["", "def", "compute_linear_score", "(", "zs_traversal", ":", "torch", ".", "Tensor", ",", "use_std", ":", "bool", "=", "True", ",", "top_2", ":", "bool", "=", "False", ",", "norm", ":", "bool", "=", "True", ")", ":", "\n", "    ", "unsorted_values", "=", "_compute_unsorted_linear_values", "(", "zs_traversal", ",", "use_std", "=", "use_std", ")", "\n", "score", "=", "_score_from_unsorted", "(", "unsorted_values", ",", "top_2", "=", "top_2", ",", "norm", "=", "norm", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._torch_concat_all_dicts": [[349, 351], ["torch.cat", "torch.cat", "dists_list[].keys"], "function", ["None"], ["", "def", "_torch_concat_all_dicts", "(", "dists_list", ":", "List", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "return", "{", "k", ":", "torch", ".", "cat", "(", "[", "dists_dict", "[", "k", "]", "for", "dists_dict", "in", "dists_list", "]", ",", "dim", "=", "0", ")", "for", "k", "in", "dists_list", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._torch_stack_all_dicts": [[353, 355], ["torch.stack", "torch.stack", "dists_list[].keys"], "function", ["None"], ["", "def", "_torch_stack_all_dicts", "(", "dists_list", ":", "List", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "return", "{", "k", ":", "torch", ".", "stack", "(", "[", "dists_dict", "[", "k", "]", "for", "dists_dict", "in", "dists_list", "]", ",", "dim", "=", "0", ")", "for", "k", "in", "dists_list", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._numpy_concat_all_dicts": [[357, 359], ["numpy.concatenate", "dists_list[].keys"], "function", ["None"], ["", "def", "_numpy_concat_all_dicts", "(", "dists_list", ":", "List", "[", "Dict", "[", "str", ",", "Union", "[", "np", ".", "ndarray", ",", "float", ",", "int", "]", "]", "]", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "return", "{", "k", ":", "np", ".", "concatenate", "(", "[", "dists_dict", "[", "k", "]", "for", "dists_dict", "in", "dists_list", "]", ",", "axis", "=", "0", ")", "for", "k", "in", "dists_list", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._numpy_stack_all_dicts": [[361, 363], ["numpy.stack", "dists_list[].keys"], "function", ["None"], ["", "def", "_numpy_stack_all_dicts", "(", "dists_list", ":", "List", "[", "Dict", "[", "str", ",", "Union", "[", "np", ".", "ndarray", ",", "float", ",", "int", "]", "]", "]", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "return", "{", "k", ":", "np", ".", "stack", "(", "[", "dists_dict", "[", "k", "]", "for", "dists_dict", "in", "dists_list", "]", ",", "axis", "=", "0", ")", "for", "k", "in", "dists_list", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._same_mask": [[370, 372], ["torch.float32", "torch.float32"], "function", ["None"], ["", "def", "_same_mask", "(", "ap0", ",", "an0", ",", "ap1", ",", "an1", ")", ":", "\n", "    ", "return", "(", "(", "ap0", "<", "an0", ")", "&", "(", "ap1", "<", "an1", ")", ")", "|", "(", "(", "ap0", "==", "an0", ")", "&", "(", "ap1", "==", "an1", ")", ")", "|", "(", "(", "ap0", ">", "an0", ")", "&", "(", "ap1", ">", "an1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._unswapped_ratio_torch": [[374, 379], ["_factored_components._same_mask", "float", "_same_mask.to().mean", "_same_mask.to"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._same_mask"], ["", "def", "_unswapped_ratio_torch", "(", "ap0", ":", "torch", ".", "Tensor", ",", "an0", ":", "torch", ".", "Tensor", ",", "ap1", ":", "torch", ".", "Tensor", ",", "an1", ":", "torch", ".", "Tensor", ")", "->", "float", ":", "\n", "# values must correspond", "\n", "    ", "same_mask", "=", "_same_mask", "(", "ap0", "=", "ap0", ",", "an0", "=", "an0", ",", "ap1", "=", "ap1", ",", "an1", "=", "an1", ")", "\n", "# num values", "\n", "return", "float", "(", "same_mask", ".", "to", "(", "torch", ".", "float32", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._unswapped_ratio_numpy": [[381, 386], ["_factored_components._same_mask", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._same_mask"], ["", "def", "_unswapped_ratio_numpy", "(", "ap0", ":", "np", ".", "ndarray", ",", "an0", ":", "np", ".", "ndarray", ",", "ap1", ":", "np", ".", "ndarray", ",", "an1", ":", "np", ".", "ndarray", ")", ":", "\n", "# values must correspond", "\n", "    ", "same_mask", "=", "_same_mask", "(", "ap0", "=", "ap0", ",", "an0", "=", "an0", ",", "ap1", "=", "ap1", ",", "an1", "=", "an1", ")", "\n", "# num values", "\n", "return", "np", ".", "mean", "(", "same_mask", ",", "dtype", "=", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_dists": [[388, 422], ["isinstance", "torch.no_grad", "torch.no_grad", "torch.randint", "torch.randint", "len", "len", "len", "len", "recon_loss_fn.compute_unreduced_loss", "recon_loss_fn", "len", "disent.nn.loss.reduction.batch_loss_reduction().cpu().numpy", "disent.nn.loss.reduction.batch_loss_reduction().cpu().numpy", "distances.update", "disent.nn.loss.reduction.batch_loss_reduction().cpu", "disent.nn.loss.reduction.batch_loss_reduction().cpu", "torch.norm().cpu().numpy", "torch.norm().cpu().numpy", "torch.norm().cpu().numpy", "torch.norm().cpu().numpy", "torch.norm().cpu().numpy", "torch.norm().cpu().numpy", "torch.norm().cpu().numpy", "torch.norm().cpu().numpy", "disent.nn.loss.reduction.batch_loss_reduction", "disent.nn.loss.reduction.batch_loss_reduction", "torch.norm().cpu", "torch.norm().cpu", "torch.norm().cpu", "torch.norm().cpu", "torch.norm().cpu", "torch.norm().cpu", "torch.norm().cpu", "torch.norm().cpu", "torch.norm", "torch.norm", "torch.abs", "torch.abs", "torch.norm", "torch.norm", "torch.abs", "torch.abs", "_factored_components._compute_dists._unreduced_loss"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.helper.reconstructions.AugmentedReconLossHandler.compute_unreduced_loss", "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.batch_loss_reduction", "home.repos.pwc.inspect_result.nmichlo_disent.loss.reduction.batch_loss_reduction"], ["", "def", "_compute_dists", "(", "num_triplets", ":", "int", ",", "zs_traversal", ":", "Optional", "[", "torch", ".", "Tensor", "]", ",", "xs_traversal", ":", "torch", ".", "Tensor", ",", "factors", ":", "Optional", "[", "torch", ".", "Tensor", "]", ",", "recon_loss_fn", "=", "F", ".", "mse_loss", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "assert", "(", "factors", "is", "None", ")", "or", "(", "len", "(", "factors", ")", "==", "len", "(", "xs_traversal", ")", ")", "\n", "assert", "(", "zs_traversal", "is", "None", ")", "or", "(", "len", "(", "zs_traversal", ")", "==", "len", "(", "xs_traversal", ")", ")", "\n", "\n", "# get the recon loss function", "\n", "def", "_unreduced_loss", "(", "input", ",", "target", ")", ":", "\n", "        ", "if", "isinstance", "(", "recon_loss_fn", ",", "ReconLossHandler", ")", ":", "\n", "            ", "return", "recon_loss_fn", ".", "compute_unreduced_loss", "(", "input", ",", "target", ")", "\n", "", "else", ":", "\n", "            ", "return", "recon_loss_fn", "(", "input", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "\n", "# compute!", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# generate random triplets", "\n", "# - {p, n} indices do not need to be sorted like triplets, these can be random.", "\n", "#   This metric is symmetric for swapped p & n values.", "\n", "        ", "idxs_a", ",", "idxs_p", ",", "idxs_n", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "xs_traversal", ")", ",", "size", "=", "(", "3", ",", "num_triplets", ")", ",", "device", "=", "xs_traversal", ".", "device", ")", "\n", "# compute distances -- shape: (num,)", "\n", "distances", "=", "{", "\n", "'ap_ground_dists'", ":", "(", "torch", ".", "norm", "(", "factors", "[", "idxs_a", ",", ":", "]", "-", "factors", "[", "idxs_p", ",", ":", "]", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "if", "(", "factors", "is", "not", "None", ")", "else", "torch", ".", "abs", "(", "idxs_a", "-", "idxs_p", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'an_ground_dists'", ":", "(", "torch", ".", "norm", "(", "factors", "[", "idxs_a", ",", ":", "]", "-", "factors", "[", "idxs_n", ",", ":", "]", ",", "p", "=", "1", ",", "dim", "=", "-", "1", ")", "if", "(", "factors", "is", "not", "None", ")", "else", "torch", ".", "abs", "(", "idxs_a", "-", "idxs_n", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'ap_data_dists'", ":", "batch_loss_reduction", "(", "_unreduced_loss", "(", "xs_traversal", "[", "idxs_a", ",", "...", "]", ",", "xs_traversal", "[", "idxs_p", ",", "...", "]", ")", ",", "reduction_dtype", "=", "torch", ".", "float32", ",", "reduction", "=", "'mean'", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'an_data_dists'", ":", "batch_loss_reduction", "(", "_unreduced_loss", "(", "xs_traversal", "[", "idxs_a", ",", "...", "]", ",", "xs_traversal", "[", "idxs_n", ",", "...", "]", ")", ",", "reduction_dtype", "=", "torch", ".", "float32", ",", "reduction", "=", "'mean'", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", "\n", "# compute distances -- shape: (num,)", "\n", "if", "zs_traversal", "is", "not", "None", ":", "\n", "            ", "distances", ".", "update", "(", "{", "\n", "'ap_latent_dists.l1'", ":", "torch", ".", "norm", "(", "zs_traversal", "[", "idxs_a", ",", ":", "]", "-", "zs_traversal", "[", "idxs_p", ",", ":", "]", ",", "dim", "=", "-", "1", ",", "p", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'an_latent_dists.l1'", ":", "torch", ".", "norm", "(", "zs_traversal", "[", "idxs_a", ",", ":", "]", "-", "zs_traversal", "[", "idxs_n", ",", ":", "]", ",", "dim", "=", "-", "1", ",", "p", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'ap_latent_dists.l2'", ":", "torch", ".", "norm", "(", "zs_traversal", "[", "idxs_a", ",", ":", "]", "-", "zs_traversal", "[", "idxs_p", ",", ":", "]", ",", "dim", "=", "-", "1", ",", "p", "=", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'an_latent_dists.l2'", ":", "torch", ".", "norm", "(", "zs_traversal", "[", "idxs_a", ",", ":", "]", "-", "zs_traversal", "[", "idxs_n", ",", ":", "]", ",", "dim", "=", "-", "1", ",", "p", "=", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", ")", "\n", "# return values -- shape: (num,)", "\n", "", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_scores_from_dists": [[424, 478], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "scores.update", "_factored_components._unswapped_ratio_numpy", "scipy.stats.spearmanr", "scipy.stats.pearsonr", "_factored_components._unswapped_ratio_numpy", "_factored_components._unswapped_ratio_numpy", "_factored_components._unswapped_ratio_numpy", "_factored_components._unswapped_ratio_numpy", "scipy.stats.spearmanr", "scipy.stats.spearmanr", "scipy.stats.spearmanr", "scipy.stats.spearmanr", "scipy.stats.pearsonr", "scipy.stats.pearsonr", "scipy.stats.pearsonr", "scipy.stats.pearsonr"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._unswapped_ratio_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._unswapped_ratio_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._unswapped_ratio_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._unswapped_ratio_numpy", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._unswapped_ratio_numpy"], ["", "", "def", "_compute_scores_from_dists", "(", "dists", ":", "Dict", "[", "str", ",", "np", ".", "array", "]", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "# [DATA & GROUND DISTS]:", "\n", "# extract the distances -- shape: (num,)", "\n", "    ", "ap_ground_dists", "=", "dists", "[", "'ap_ground_dists'", "]", "\n", "an_ground_dists", "=", "dists", "[", "'an_ground_dists'", "]", "\n", "ap_data_dists", "=", "dists", "[", "'ap_data_dists'", "]", "\n", "an_data_dists", "=", "dists", "[", "'an_data_dists'", "]", "\n", "# concatenate values -- shape: (2 * num,)", "\n", "ground_dists", "=", "np", ".", "concatenate", "(", "[", "ap_ground_dists", ",", "an_ground_dists", "]", ",", "axis", "=", "0", ")", "\n", "data_dists", "=", "np", ".", "concatenate", "(", "[", "ap_data_dists", ",", "an_data_dists", "]", ",", "axis", "=", "0", ")", "\n", "# compute the scores", "\n", "# - check the number of swapped elements along a factor for random triplets.", "\n", "# - compute the spearman rank correlation coefficient over the concatenated distances", "\n", "# - compute the pearman correlation coefficient over the concatenated distances", "\n", "scores", "=", "{", "\n", "'rsame_ground_data'", ":", "_unswapped_ratio_numpy", "(", "ap0", "=", "ap_ground_dists", ",", "an0", "=", "an_ground_dists", ",", "ap1", "=", "ap_data_dists", ",", "an1", "=", "an_data_dists", ")", ",", "# simplifies to: (ap_data_dists > an_data_dists).to(torch.float32).mean()", "\n", "'rcorr_ground_data'", ":", "spearmanr", "(", "ground_dists", ",", "data_dists", ")", "[", "0", "]", ",", "\n", "'lcorr_ground_data'", ":", "pearsonr", "(", "ground_dists", ",", "data_dists", ")", "[", "0", "]", ",", "\n", "}", "\n", "\n", "# [RETURN EARLY]:", "\n", "if", "'ap_latent_dists.l1'", "not", "in", "dists", ":", "\n", "        ", "return", "scores", "\n", "\n", "# [LATENT DISTS]:", "\n", "# extract the distances -- shape: (num,)", "\n", "", "ap_latent_dists_l1", "=", "dists", "[", "'ap_latent_dists.l1'", "]", "\n", "an_latent_dists_l1", "=", "dists", "[", "'an_latent_dists.l1'", "]", "\n", "ap_latent_dists_l2", "=", "dists", "[", "'ap_latent_dists.l2'", "]", "\n", "an_latent_dists_l2", "=", "dists", "[", "'an_latent_dists.l2'", "]", "\n", "# concatenate values -- shape: (2 * num,)", "\n", "latent_dists_l1", "=", "np", ".", "concatenate", "(", "[", "ap_latent_dists_l1", ",", "an_latent_dists_l1", "]", ",", "axis", "=", "0", ")", "\n", "latent_dists_l2", "=", "np", ".", "concatenate", "(", "[", "ap_latent_dists_l2", ",", "an_latent_dists_l2", "]", ",", "axis", "=", "0", ")", "\n", "# compute the scores", "\n", "scores", ".", "update", "(", "{", "\n", "# - check the number of swapped elements along a factor for random triplets.", "\n", "'rsame_ground_latent.l1'", ":", "_unswapped_ratio_numpy", "(", "ap0", "=", "ap_ground_dists", ",", "an0", "=", "an_ground_dists", ",", "ap1", "=", "ap_latent_dists_l1", ",", "an1", "=", "an_latent_dists_l1", ")", ",", "# simplifies to: (ap_latent_dists > an_latent_dists).to(torch.float32).mean()", "\n", "'rsame_latent_data.l1'", ":", "_unswapped_ratio_numpy", "(", "ap0", "=", "ap_latent_dists_l1", ",", "an0", "=", "an_latent_dists_l1", ",", "ap1", "=", "ap_data_dists", ",", "an1", "=", "an_data_dists", ")", ",", "\n", "'rsame_ground_latent.l2'", ":", "_unswapped_ratio_numpy", "(", "ap0", "=", "ap_ground_dists", ",", "an0", "=", "an_ground_dists", ",", "ap1", "=", "ap_latent_dists_l2", ",", "an1", "=", "an_latent_dists_l2", ")", ",", "# simplifies to: (ap_latent_dists > an_latent_dists).to(torch.float32).mean()", "\n", "'rsame_latent_data.l2'", ":", "_unswapped_ratio_numpy", "(", "ap0", "=", "ap_latent_dists_l2", ",", "an0", "=", "an_latent_dists_l2", ",", "ap1", "=", "ap_data_dists", ",", "an1", "=", "an_data_dists", ")", ",", "\n", "# - compute the spearman rank correlation coefficient over the concatenated distances", "\n", "'rcorr_ground_latent.l1'", ":", "spearmanr", "(", "ground_dists", ",", "latent_dists_l1", ")", "[", "0", "]", ",", "\n", "'rcorr_latent_data.l1'", ":", "spearmanr", "(", "latent_dists_l1", ",", "data_dists", ")", "[", "0", "]", ",", "\n", "'rcorr_ground_latent.l2'", ":", "spearmanr", "(", "ground_dists", ",", "latent_dists_l2", ")", "[", "0", "]", ",", "\n", "'rcorr_latent_data.l2'", ":", "spearmanr", "(", "latent_dists_l2", ",", "data_dists", ")", "[", "0", "]", ",", "\n", "# - compute the pearman correlation coefficient over the concatenated distances", "\n", "'lcorr_ground_latent.l1'", ":", "pearsonr", "(", "ground_dists", ",", "latent_dists_l1", ")", "[", "0", "]", ",", "\n", "'lcorr_latent_data.l1'", ":", "pearsonr", "(", "latent_dists_l1", ",", "data_dists", ")", "[", "0", "]", ",", "\n", "'lcorr_ground_latent.l2'", ":", "pearsonr", "(", "ground_dists", ",", "latent_dists_l2", ")", "[", "0", "]", ",", "\n", "'lcorr_latent_data.l2'", ":", "pearsonr", "(", "latent_dists_l2", ",", "data_dists", ")", "[", "0", "]", ",", "\n", "}", ")", "\n", "\n", "# [DONE]", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_factored_metric_components_along_factor": [[485, 572], ["range", "disent.metrics._flatness.encode_all_along_factor", "zs_traversal.cpu.cpu", "_factored_components._numpy_concat_all_dicts", "_factored_components._compute_scores_from_dists", "_factored_components._torch_stack_all_dicts", "_factored_components._score_from_unsorted", "xs_traversal.cpu.cpu", "_factored_components._compute_dists", "distance_measures.append", "_factored_components._compute_unsorted_axis_values", "_factored_components._compute_unsorted_linear_values", "_factored_components._score_from_unsorted", "_factored_components._score_from_unsorted", "linear_measures.append", "v.mean", "linear_measures.pop", "float", "distance_measures.items", "linear_measures.items", "linear_measures.items"], "function", ["home.repos.pwc.inspect_result.nmichlo_disent.metrics._flatness.encode_all_along_factor", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._numpy_concat_all_dicts", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_scores_from_dists", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._torch_stack_all_dicts", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._score_from_unsorted", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_dists", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_unsorted_axis_values", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._compute_unsorted_linear_values", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._score_from_unsorted", "home.repos.pwc.inspect_result.nmichlo_disent.metrics._factored_components._score_from_unsorted", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "_compute_factored_metric_components_along_factor", "(", "\n", "dataset", ":", "DisentDataset", ",", "\n", "representation_function", ",", "\n", "f_idx", ":", "int", ",", "\n", "num_samples", ":", "int", ",", "\n", "repeats", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "compute_distances", ":", "bool", ",", "\n", "compute_linearity", ":", "bool", ",", "\n", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "# NOTE: what to do if the factor size is too small?", "\n", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# FEED FORWARD, COMPUTE ALL", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "    ", "distance_measures", ":", "List", "[", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "]", "=", "[", "]", "\n", "linear_measures", ":", "List", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "repeats", ")", ":", "\n", "# [ENCODE TRAVERSAL]:", "\n", "# - generate repeated factors, varying one factor over the entire range", "\n", "# - shape: (factor_size, z_size)", "\n", "        ", "zs_traversal", ",", "xs_traversal", "=", "encode_all_along_factor", "(", "dataset", ",", "representation_function", ",", "f_idx", "=", "f_idx", ",", "batch_size", "=", "batch_size", ",", "return_batch", "=", "True", ")", "\n", "zs_traversal", "=", "zs_traversal", ".", "cpu", "(", ")", "\n", "\n", "if", "compute_distances", ":", "\n", "            ", "xs_traversal", "=", "xs_traversal", ".", "cpu", "(", ")", "\n", "# [COMPUTE SAME RATIO & CORRELATION] | was: `num_triplets=_SAMPLES_MULTIPLIER_FACTOR*len(zs_traversal)`", "\n", "computed_dists", "=", "_compute_dists", "(", "num_triplets", "=", "num_samples", ",", "zs_traversal", "=", "zs_traversal", ",", "xs_traversal", "=", "xs_traversal", ",", "factors", "=", "None", ")", "\n", "# [STORE DISTANCES]", "\n", "distance_measures", ".", "append", "(", "computed_dists", ")", "\n", "\n", "", "if", "compute_linearity", ":", "\n", "# [VARIANCE ALONG DIFFERING AXES]:", "\n", "# 1. axis: correlation with standard basis (1, 0, 0, ...), (0, 1, 0, ...), ...", "\n", "# 2. linear: correlation along arbitrary orthogonal bases", "\n", "            ", "axis_values_var", "=", "_compute_unsorted_axis_values", "(", "zs_traversal", ",", "use_std", "=", "False", ")", "# shape: (z_size,)", "\n", "linear_values_var", "=", "_compute_unsorted_linear_values", "(", "zs_traversal", ",", "use_std", "=", "False", ")", "# shape: (z_size,)", "\n", "# [COMPUTE LINEARITY SCORES]:", "\n", "axis_ratio_var", "=", "_score_from_unsorted", "(", "axis_values_var", ",", "top_2", "=", "False", ",", "norm", "=", "True", ")", "# shape: ()", "\n", "linear_ratio_var", "=", "_score_from_unsorted", "(", "linear_values_var", ",", "top_2", "=", "False", ",", "norm", "=", "True", ")", "# shape: ()", "\n", "# [STORE SCORES]", "\n", "linear_measures", ".", "append", "(", "{", "\n", "'linearity.axis_ratio.var'", ":", "axis_ratio_var", ",", "\n", "'linearity.linear_ratio.var'", ":", "linear_ratio_var", ",", "\n", "# aggregating linear values outside this function does not make sense, values do not correspond between repeats.", "\n", "'linearity.axis_alignment.var'", ":", "axis_ratio_var", "/", "(", "linear_ratio_var", "+", "1e-20", ")", ",", "\n", "# temp values", "\n", "'_TEMP_.axis_values.var'", ":", "axis_values_var", ",", "\n", "}", ")", "\n", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# AGGREGATE DATA - For each distance measure", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "", "", "if", "compute_distances", ":", "\n", "# concatenate all into arrays: <shape: (repeats*num_samples,)>", "\n", "# then aggregate over first dimension: <shape: (,)>", "\n", "        ", "distance_measures", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "=", "_numpy_concat_all_dicts", "(", "distance_measures", ")", "\n", "distance_measures", ":", "Dict", "[", "str", ",", "float", "]", "=", "_compute_scores_from_dists", "(", "distance_measures", ")", "\n", "distance_measures", ":", "Dict", "[", "str", ",", "float", "]", "=", "{", "f'distances.{k}.factor'", ":", "v", "for", "k", ",", "v", "in", "distance_measures", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "distance_measures", ":", "Dict", "[", "str", ",", "float", "]", "=", "{", "}", "\n", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "# AGGREGATE DATA - For each linearity measure", "\n", "# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- #", "\n", "\n", "", "if", "compute_linearity", ":", "\n", "# stack all into arrays: <shape: (repeats, ...)>", "\n", "# then aggregate over first dimension: <shape: (...)>", "\n", "# - eg: axis_ratio  (repeats,)        -> ()", "\n", "# - eg: axis_values (repeats, z_size) -> (z_size,)", "\n", "        ", "linear_measures", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "=", "_torch_stack_all_dicts", "(", "linear_measures", ")", "\n", "linear_measures", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "=", "{", "k", ":", "v", ".", "mean", "(", "dim", "=", "0", ")", "for", "k", ",", "v", "in", "linear_measures", ".", "items", "(", ")", "}", "\n", "# compute average scores & remove keys", "\n", "linear_measures", "[", "'linearity.axis_ratio_ave.var'", "]", "=", "_score_from_unsorted", "(", "linear_measures", ".", "pop", "(", "'_TEMP_.axis_values.var'", ")", ",", "top_2", "=", "False", ",", "norm", "=", "True", ")", "# shape: (z_size,) -> ()", "\n", "# convert values", "\n", "linear_measures", ":", "Dict", "[", "str", ",", "float", "]", "=", "{", "k", ":", "float", "(", "v", ")", "for", "k", ",", "v", "in", "linear_measures", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "linear_measures", ":", "Dict", "[", "str", ",", "float", "]", "=", "{", "}", "\n", "\n", "# done!", "\n", "", "return", "{", "\n", "**", "distance_measures", ",", "\n", "**", "linear_measures", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry._FactoryFn.__call__": [[61, 62], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "*", "args", ")", "->", "V", ":", "...", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.ProvidedValue.get": [[77, 79], ["None"], "methods", ["None"], ["def", "get", "(", "self", ")", "->", "V", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.ProvidedValue.__repr__": [[80, 82], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}()'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.StaticValue.__init__": [[90, 92], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "value", ":", "V", ")", ":", "\n", "        ", "self", ".", "_value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.StaticValue.get": [[93, 95], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", "->", "V", ":", "\n", "        ", "return", "self", ".", "_value", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.StaticValue.__repr__": [[96, 98], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}({repr(self._value)})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.StaticImport.__init__": [[101, 103], ["super().__init__", "disent.util.function.wrapped_partial"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.util.function.wrapped_partial"], ["    ", "def", "__init__", "(", "self", ",", "fn", ":", "V", ",", "*", "partial_args", ",", "**", "partial_kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "wrapped_partial", "(", "fn", ",", "*", "partial_args", ",", "**", "partial_kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.__init__": [[111, 116], ["callable"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "generate_fn", ":", "Callable", "[", "[", "]", ",", "V", "]", ")", ":", "\n", "        ", "assert", "callable", "(", "generate_fn", ")", "\n", "self", ".", "_generate_fn", "=", "generate_fn", "\n", "self", ".", "_is_generated", "=", "False", "\n", "self", ".", "_value", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get": [[117, 123], ["_registry.LazyValue._generate_fn"], "methods", ["None"], ["", "def", "get", "(", "self", ")", "->", "V", ":", "\n", "# cache the value", "\n", "        ", "if", "not", "self", ".", "_is_generated", ":", "\n", "            ", "self", ".", "_is_generated", "=", "True", "\n", "self", ".", "_value", "=", "self", ".", "_generate_fn", "(", ")", "\n", "", "return", "self", ".", "_value", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.clear": [[124, 127], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "_is_generated", "=", "False", "\n", "self", ".", "_value", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.__repr__": [[128, 130], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}({repr(self._generate_fn)})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyImport.__init__": [[140, 146], ["super().__init__", "disent.util.imports.import_obj_partial"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__", "home.repos.pwc.inspect_result.nmichlo_disent.util.imports.import_obj_partial"], ["def", "__init__", "(", "self", ",", "import_path", ":", "str", ",", "*", "partial_args", ",", "**", "partial_kwargs", ")", ":", "\n", "# function imports the object when called", "\n", "        ", "def", "generate_fn", "(", ")", ":", "\n", "            ", "return", "import_obj_partial", "(", "import_path", ",", "*", "partial_args", ",", "**", "partial_kwargs", ")", "\n", "# initialise the lazy value", "\n", "", "super", "(", ")", ".", "__init__", "(", "generate_fn", "=", "generate_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders.__init__": [[160, 162], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_providers", ":", "Dict", "[", "K", ",", "ProvidedValue", "[", "V", "]", "]", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders.__getitem__": [[163, 165], ["_registry.DictProviders._getitem"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders._getitem"], ["", "def", "__getitem__", "(", "self", ",", "k", ":", "K", ")", "->", "V", ":", "\n", "        ", "return", "self", ".", "_getitem", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders.__contains__": [[166, 168], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "k", ":", "K", ")", ":", "\n", "        ", "return", "k", "in", "self", ".", "_providers", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders.__setitem__": [[169, 171], ["_registry.DictProviders._setitem"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders._setitem"], ["", "def", "__setitem__", "(", "self", ",", "k", ":", "K", ",", "v", ":", "ProvidedValue", "[", "V", "]", ")", "->", "NoReturn", ":", "\n", "        ", "self", ".", "_setitem", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders.__delitem__": [[172, 174], ["None"], "methods", ["None"], ["", "def", "__delitem__", "(", "self", ",", "k", ":", "K", ")", "->", "NoReturn", ":", "\n", "        ", "del", "self", ".", "_providers", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders.__len__": [[175, 177], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "_providers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders.__iter__": [[178, 180], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", "->", "Iterator", "[", "K", "]", ":", "\n", "        ", "yield", "from", "self", ".", "_providers", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders._getitem": [[183, 186], ["provider.get"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.LazyValue.get"], ["", "def", "_getitem", "(", "self", ",", "k", ":", "K", ")", "->", "V", ":", "\n", "        ", "provider", "=", "self", ".", "_providers", "[", "k", "]", "\n", "return", "provider", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders._setitem": [[187, 191], ["isinstance", "TypeError", "repr"], "methods", ["None"], ["", "def", "_setitem", "(", "self", ",", "k", ":", "K", ",", "v", ":", "ProvidedValue", "[", "V", "]", ")", "->", "NoReturn", ":", "\n", "        ", "if", "not", "isinstance", "(", "v", ",", "ProvidedValue", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'Values stored in {self.__class__.__name__} must be instances of: {ProvidedValue.__name__}, got: {repr(v)}'", ")", "\n", "", "self", ".", "_providers", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry.__init__": [[200, 206], ["super().__init__", "str.isidentifier", "ValueError", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "        ", "if", "not", "str", ".", "isidentifier", "(", "name", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Registry names must be valid identifiers, got: {repr(name)}'", ")", "\n", "# initialise", "\n", "", "self", ".", "_name", "=", "name", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry.static_examples": [[207, 210], ["list", "_registry.Registry._providers.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "static_examples", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "list", "(", "self", ".", "_providers", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry.examples": [[211, 214], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "examples", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "self", ".", "static_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry.name": [[215, 218], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry.__repr__": [[219, 221], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}({self._name})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry.__setitem__": [[224, 226], ["_registry.Registry._setitems"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._setitems"], ["", "def", "__setitem__", "(", "self", ",", "aliases", ":", "AliasesHint", ",", "v", ":", "ProvidedValue", "[", "V", "]", ")", "->", "NoReturn", ":", "\n", "        ", "self", ".", "_setitems", "(", "aliases", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry.__getitem__": [[227, 231], ["_registry.Registry._getitem", "_registry.Registry._check_provided_value"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders._getitem", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._check_provided_value"], ["", "def", "__getitem__", "(", "self", ",", "k", ":", "str", ")", "->", "V", ":", "\n", "        ", "value", "=", "self", ".", "_getitem", "(", "k", ")", "\n", "self", ".", "_check_provided_value", "(", "value", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry.__delitem__": [[232, 234], ["RuntimeError", "repr", "repr"], "methods", ["None"], ["", "def", "__delitem__", "(", "self", ",", "k", ":", "str", ")", "->", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "f'Registry: {repr(self.name)} does not support item deletion. Tried to remove key: {repr(k)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._setitems": [[237, 251], ["_registry.Registry._normalise_aliases", "_registry.Registry._check_and_normalise_value", "_registry.Registry._check_key", "_registry.Registry._setitem", "str.isidentifier", "ValueError", "RuntimeError", "repr", "repr", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._normalise_aliases", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._check_and_normalise_value", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._check_key", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders._setitem"], ["", "def", "_setitems", "(", "self", ",", "aliases", ":", "AliasesHint", ",", "v", ":", "Union", "[", "V", ",", "ProvidedValue", "[", "V", "]", "]", ")", "->", "None", ":", "\n", "        ", "aliases", "=", "self", ".", "_normalise_aliases", "(", "aliases", ")", "\n", "# check all the aliases", "\n", "for", "k", "in", "aliases", ":", "\n", "            ", "if", "not", "str", ".", "isidentifier", "(", "k", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f'Keys stored in registry: {repr(self.name)} must be valid identifiers, got: {repr(k)}'", ")", "\n", "", "if", "k", "in", "self", ":", "\n", "                ", "raise", "RuntimeError", "(", "f'Tried to overwrite existing key: {repr(k)} in registry: {repr(self.name)}'", ")", "\n", "", "self", ".", "_check_key", "(", "k", ")", "\n", "# check the value", "\n", "", "v", "=", "self", ".", "_check_and_normalise_value", "(", "v", ")", "\n", "# set all the aliases", "\n", "for", "k", "in", "aliases", ":", "\n", "            ", "self", ".", "_setitem", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._normalise_aliases": [[252, 261], ["isinstance", "isinstance", "TypeError", "len", "ValueError", "repr", "repr", "repr", "repr"], "methods", ["None"], ["", "", "def", "_normalise_aliases", "(", "self", ",", "aliases", ":", "AliasesHint", ",", "check_nonempty", ":", "bool", "=", "True", ")", "->", "Tuple", "[", "str", "]", ":", "\n", "        ", "if", "isinstance", "(", "aliases", ",", "str", ")", ":", "\n", "            ", "aliases", "=", "(", "aliases", ",", ")", "\n", "", "if", "not", "isinstance", "(", "aliases", ",", "tuple", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'Multiple aliases must be provided to registry: {repr(self.name)} as a Tuple[str], got: {repr(aliases)}'", ")", "\n", "", "if", "check_nonempty", ":", "\n", "            ", "if", "len", "(", "aliases", ")", "<", "1", ":", "\n", "                ", "raise", "ValueError", "(", "f'At least one alias must be provided to registry: {repr(self.name)}, got: {repr(aliases)}'", ")", "\n", "", "", "return", "aliases", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._check_and_normalise_value": [[264, 266], ["None"], "methods", ["None"], ["", "def", "_check_and_normalise_value", "(", "self", ",", "v", ":", "ProvidedValue", "[", "V", "]", ")", "->", "ProvidedValue", "[", "V", "]", ":", "\n", "        ", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._check_provided_value": [[267, 269], ["None"], "methods", ["None"], ["", "def", "_check_provided_value", "(", "self", ",", "v", ":", "V", ")", "->", "NoReturn", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._check_key": [[270, 272], ["None"], "methods", ["None"], ["", "def", "_check_key", "(", "self", ",", "k", ":", "str", ")", "->", "NoReturn", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry.setmissing": [[275, 282], ["_registry.Registry._normalise_aliases", "tuple", "_registry.Registry._setitems"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._normalise_aliases", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._setitems"], ["", "def", "setmissing", "(", "self", ",", "alias", ":", "AliasesHint", ",", "value", ":", "V", ")", "->", "NoReturn", ":", "\n", "# find missing keys", "\n", "        ", "aliases", "=", "self", ".", "_normalise_aliases", "(", "alias", ")", "\n", "missing", "=", "tuple", "(", "alias", "for", "alias", "in", "aliases", "if", "(", "alias", "not", "in", "self", ")", ")", "\n", "# register missing keys", "\n", "if", "missing", ":", "\n", "            ", "self", ".", "_setitems", "(", "missing", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry.setm": [[283, 291], ["_registry.Registry._RegistrySetMissing"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "setm", "(", "self", ")", "->", "'_RegistrySetMissing'", ":", "\n", "# instead of checking values manually, at the cost of some efficiency,", "\n", "# this allows us to register values multiple times with hardly modified notation!", "\n", "# -- only modifies unset values", "\n", "# set once:    `REGISTRY['key'] = val`", "\n", "# set default: `REGISTRY.setm['key'] = val`", "\n", "        ", "return", "self", ".", "_RegistrySetMissing", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports.register": [[312, 338], ["_registry.RegistryImports._normalise_aliases", "_registry.RegistryImports._append_auto_alias", "_registry.StaticImport", "_registry.RegistryImports._get_fn_alias"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._normalise_aliases", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._append_auto_alias", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._get_fn_alias"], ["def", "register", "(", "\n", "self", ",", "\n", "aliases", ":", "Optional", "[", "AliasesHint", "]", "=", "None", ",", "\n", "auto_alias", ":", "bool", "=", "True", ",", "\n", "partial_args", ":", "Tuple", "[", "Any", ",", "...", "]", "=", "None", ",", "\n", "partial_kwargs", ":", "Dict", "[", "str", ",", "Any", "]", "=", "None", ",", "\n", ")", "->", "Callable", "[", "[", "T", "]", ",", "T", "]", ":", "\n", "        ", "\"\"\"\n        Register a function or object to this registry.\n        - can be used as a decorator @register(...)\n        - automatically chooses an alias based on the function name\n        - specify defaults for the function with the args and kwargs\n        \"\"\"", "\n", "# default values", "\n", "if", "aliases", "is", "None", ":", "aliases", "=", "(", ")", "\n", "if", "partial_args", "is", "None", ":", "partial_args", "=", "(", ")", "\n", "if", "partial_kwargs", "is", "None", ":", "partial_kwargs", "=", "{", "}", "\n", "aliases", "=", "self", ".", "_normalise_aliases", "(", "aliases", ",", "check_nonempty", "=", "False", ")", "\n", "\n", "# add the function name as an alias if it does not already exist,", "\n", "# then register the partially parameterised function as a static value", "\n", "def", "_decorator", "(", "orig_fn", ")", ":", "\n", "            ", "keys", "=", "self", ".", "_append_auto_alias", "(", "self", ".", "_get_fn_alias", "(", "orig_fn", ")", ",", "aliases", "=", "aliases", ",", "auto_alias", "=", "auto_alias", ")", "\n", "self", "[", "keys", "]", "=", "StaticImport", "(", "orig_fn", ",", "*", "partial_args", ",", "**", "partial_kwargs", ")", "\n", "return", "orig_fn", "\n", "", "return", "_decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports.register_import": [[339, 359], ["_registry.RegistryImports._normalise_aliases", "disent.util.imports._check_and_split_path", "_registry.RegistryImports._append_auto_alias", "_registry.LazyImport"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.Registry._normalise_aliases", "home.repos.pwc.inspect_result.nmichlo_disent.util.imports._check_and_split_path", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._append_auto_alias"], ["", "def", "register_import", "(", "\n", "self", ",", "\n", "import_path", ":", "str", ",", "\n", "aliases", ":", "Optional", "[", "AliasesHint", "]", "=", "None", ",", "\n", "auto_alias", ":", "bool", "=", "True", ",", "\n", "*", "partial_args", ",", "\n", "**", "partial_kwargs", ",", "\n", ")", "->", "NoReturn", ":", "\n", "        ", "\"\"\"\n        Register an import path and automatically obtain an alias from it.\n        - This is the same as: registry[(import_name, *aliases)] = LazyImport(import_path, *partial_args, **partial_kwargs)\n        \"\"\"", "\n", "# normalise aliases", "\n", "if", "aliases", "is", "None", ":", "aliases", "=", "(", ")", "\n", "aliases", "=", "self", ".", "_normalise_aliases", "(", "aliases", ",", "check_nonempty", "=", "False", ")", "\n", "# add object alias", "\n", "(", "*", "_", ",", "alias", ")", "=", "_check_and_split_path", "(", "import_path", ")", "\n", "aliases", "=", "self", ".", "_append_auto_alias", "(", "alias", ",", "aliases", "=", "aliases", ",", "auto_alias", "=", "auto_alias", ")", "\n", "# register the lazy import", "\n", "self", "[", "aliases", "]", "=", "LazyImport", "(", "import_path", "=", "import_path", ",", "*", "partial_args", ",", "**", "partial_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._append_auto_alias": [[362, 374], ["RuntimeError", "RuntimeError", "RuntimeError", "repr", "repr", "repr", "repr"], "methods", ["None"], ["", "def", "_append_auto_alias", "(", "self", ",", "alias", ":", "Optional", "[", "str", "]", ",", "aliases", ":", "Tuple", "[", "str", ",", "...", "]", ",", "auto_alias", ":", "bool", ")", ":", "\n", "        ", "if", "auto_alias", ":", "\n", "            ", "if", "alias", "is", "not", "None", ":", "\n", "                ", "if", "alias", "not", "in", "self", ":", "\n", "                    ", "aliases", "=", "(", "alias", ",", "*", "aliases", ")", "\n", "", "elif", "not", "aliases", ":", "\n", "                    ", "raise", "RuntimeError", "(", "f'automatic alias: {repr(alias)} already exists for registry: {repr(self.name)} and no alternative aliases were specified.'", ")", "\n", "", "", "elif", "not", "aliases", ":", "\n", "                ", "raise", "RuntimeError", "(", "f'Cannot add value to registry: {repr(self.name)}, no automatic alias was found!'", ")", "\n", "", "", "elif", "not", "aliases", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'Cannot add value to registry: {repr(self.name)}, no manual aliases were specified and automatic aliasing is disabled!'", ")", "\n", "", "return", "aliases", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._get_fn_alias": [[375, 381], ["hasattr", "str.isidentifier"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_fn_alias", "(", "fn", ")", "->", "Optional", "[", "str", "]", ":", "\n", "        ", "if", "hasattr", "(", "fn", ",", "'__name__'", ")", ":", "\n", "            ", "if", "str", ".", "isidentifier", "(", "fn", ".", "__name__", ")", ":", "\n", "                ", "return", "fn", ".", "__name__", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._check_and_normalise_value": [[384, 388], ["isinstance", "TypeError", "repr", "repr"], "methods", ["None"], ["", "def", "_check_and_normalise_value", "(", "self", ",", "v", ":", "ProvidedValue", "[", "V", "]", ")", "->", "ProvidedValue", "[", "V", "]", ":", "\n", "        ", "if", "not", "isinstance", "(", "v", ",", "(", "LazyImport", ",", "StaticImport", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'Values stored in registry: {repr(self.name)} must be instances of: {(LazyImport.__name__, StaticImport.__name__)}, got: {repr(v)}'", ")", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._check_provided_value": [[391, 393], ["None"], "methods", ["None"], ["", "def", "_check_provided_value", "(", "self", ",", "v", ":", "V", ")", "->", "NoReturn", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegistryImports._check_key": [[394, 396], ["None"], "methods", ["None"], ["", "def", "_check_key", "(", "self", ",", "k", ":", "str", ")", "->", "NoReturn", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor.__init__": [[409, 419], ["_registry.RegexConstructor._check_pattern", "_registry.RegexConstructor._check_example", "isinstance", "_registry.RegexConstructor._check_factory_fn"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor._check_pattern", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor._check_example", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor._check_factory_fn"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "pattern", ":", "Union", "[", "str", ",", "re", ".", "Pattern", "]", ",", "\n", "example", ":", "str", ",", "\n", "factory_fn", ":", "Union", "[", "_FactoryFn", "[", "V", "]", ",", "str", "]", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_pattern", "=", "self", ".", "_check_pattern", "(", "pattern", ")", "\n", "self", ".", "_example", "=", "self", ".", "_check_example", "(", "example", ",", "self", ".", "_pattern", ")", "\n", "# we can delay loading of the function if it is a string!", "\n", "self", ".", "_factory_fn", "=", "factory_fn", "if", "isinstance", "(", "factory_fn", ",", "str", ")", "else", "self", ".", "_check_factory_fn", "(", "factory_fn", ",", "self", ".", "_pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor._check_pattern": [[420, 430], ["isinstance", "re.compile", "isinstance", "TypeError", "ValueError", "repr", "repr"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_check_pattern", "(", "cls", ",", "pattern", ":", "Union", "[", "str", ",", "re", ".", "Pattern", "]", ")", ":", "\n", "# check the regex type & convert", "\n", "        ", "if", "isinstance", "(", "pattern", ",", "str", ")", ":", "\n", "            ", "pattern", "=", "re", ".", "compile", "(", "pattern", ")", "\n", "", "if", "not", "isinstance", "(", "pattern", ",", "re", ".", "Pattern", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'regex pattern must be a regex `str` or `re.Pattern`, got: {repr(pattern)}'", ")", "\n", "", "if", "pattern", ".", "groups", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "f'regex pattern must contain at least one group, got: {repr(pattern)}'", ")", "\n", "", "return", "pattern", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor._check_factory_fn": [[431, 440], ["inspect.signature", "callable", "TypeError", "len", "ValueError", "repr", "repr"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_check_factory_fn", "(", "cls", ",", "factory_fn", ":", "_FactoryFn", "[", "V", "]", ",", "pattern", ":", "re", ".", "Pattern", ")", "->", "_FactoryFn", "[", "V", "]", ":", "\n", "# we have an actual function, we can check it!", "\n", "        ", "if", "not", "callable", "(", "factory_fn", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'generator function must be callable, got: {factory_fn}'", ")", "\n", "", "signature", "=", "inspect", ".", "signature", "(", "factory_fn", ")", "\n", "if", "len", "(", "signature", ".", "parameters", ")", "!=", "pattern", ".", "groups", ":", "\n", "            ", "raise", "ValueError", "(", "f'signature has incorrect number of parameters: {repr(signature)} compared to the number of groups in the regex pattern: {repr(pattern)}'", ")", "\n", "", "return", "factory_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor._check_example": [[441, 452], ["isinstance", "TypeError", "ValueError", "pattern.search", "ValueError", "type", "type", "repr", "repr"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_check_example", "(", "cls", ",", "example", ":", "str", ",", "pattern", ":", "re", ".", "Pattern", ")", "->", "str", ":", "\n", "# check the example", "\n", "        ", "if", "not", "isinstance", "(", "example", ",", "str", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'example must be a `str`, got: {type(example)}'", ")", "\n", "", "if", "not", "example", ":", "\n", "            ", "raise", "ValueError", "(", "f'example must not be empty, got: {type(example)}'", ")", "\n", "# check that the regex matches the example!", "\n", "", "if", "pattern", ".", "search", "(", "example", ")", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "f'could not match example: {repr(example)} to regex: {repr(pattern)}'", ")", "\n", "", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor.pattern": [[453, 456], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pattern", "(", "self", ")", "->", "re", ".", "Pattern", ":", "\n", "        ", "return", "self", ".", "_pattern", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor.example": [[457, 460], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "example", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_example", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor.construct": [[461, 472], ["_registry.RegexConstructor._pattern.search", "isinstance", "_registry.RegexConstructor._factory_fn", "KeyError", "disent.util.imports.import_obj", "_registry.RegexConstructor._check_factory_fn", "_registry.RegexConstructor.groups", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.util.imports.import_obj", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor._check_factory_fn"], ["", "def", "construct", "(", "self", ",", "name", ":", "str", ")", "->", "V", ":", "\n", "# get the results", "\n", "        ", "result", "=", "self", ".", "_pattern", ".", "search", "(", "name", ")", "\n", "if", "result", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "f'pattern: {self.pattern} does not match given name: {repr(name)}. The following example would be valid: {repr(self.example)}'", ")", "\n", "# get the function -- load via the path", "\n", "", "if", "isinstance", "(", "self", ".", "_factory_fn", ",", "str", ")", ":", "\n", "            ", "fn", "=", "import_obj", "(", "self", ".", "_factory_fn", ")", "\n", "self", ".", "_factory_fn", "=", "self", ".", "_check_factory_fn", "(", "fn", ",", "self", ".", "_pattern", ")", "\n", "# construct", "\n", "", "return", "self", ".", "_factory_fn", "(", "*", "result", ".", "groups", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexConstructor.can_construct": [[473, 475], ["_registry.RegexConstructor._pattern.search"], "methods", ["None"], ["", "def", "can_construct", "(", "self", ",", "name", ":", "str", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "_pattern", ".", "search", "(", "name", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.__init__": [[484, 490], ["set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_patterns", ":", "Set", "[", "re", ".", "Pattern", "]", "=", "set", "(", ")", "\n", "self", ".", "_constructors", ":", "List", "[", "RegexConstructor", "]", "=", "[", "]", "\n", "# caching", "\n", "self", ".", "_cache", "=", "{", "}", "\n", "self", ".", "_cache_dirty", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.regex_constructors": [[491, 494], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "regex_constructors", "(", "self", ")", "->", "List", "[", "RegexConstructor", "]", ":", "\n", "        ", "return", "list", "(", "self", ".", "_constructors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.construct": [[495, 502], ["_registry.RegexProvidersSearch.get_constructor", "KeyError", "_registry.RegexProvidersSearch.construct", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.get_constructor", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.construct"], ["", "def", "construct", "(", "self", ",", "arg_str", ":", "str", ")", ":", "\n", "        ", "provider", "=", "self", ".", "get_constructor", "(", "arg_str", ")", "\n", "# build the object", "\n", "if", "provider", "is", "not", "None", ":", "\n", "            ", "return", "provider", ".", "construct", "(", "arg_str", ")", "\n", "# no result was found!", "\n", "", "raise", "KeyError", "(", "f'could not construct an item from the given argument string: {repr(arg_str)}, valid patterns include: {[p.pattern for p in self._constructors]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.can_construct": [[503, 505], ["_registry.RegexProvidersSearch.get_constructor"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.get_constructor"], ["", "def", "can_construct", "(", "self", ",", "arg_str", ":", "str", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "get_constructor", "(", "arg_str", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.get_constructor": [[506, 530], ["isinstance", "TypeError", "ValueError", "c.can_construct", "len", "_registry.RegexProvidersSearch._cache.popitem", "_registry.RegexProvidersSearch._cache.items", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.can_construct"], ["", "def", "get_constructor", "(", "self", ",", "arg_str", ":", "str", ")", "->", "Optional", "[", "RegexConstructor", "]", ":", "\n", "# TODO: clean up this cache!", "\n", "# check cache -- remove None entries if dirty", "\n", "        ", "if", "self", ".", "_cache_dirty", ":", "\n", "            ", "self", ".", "_cache", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "_cache", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", "\n", "self", ".", "_cache_dirty", "=", "False", "\n", "", "if", "arg_str", "in", "self", ".", "_cache", ":", "\n", "            ", "return", "self", ".", "_cache", "[", "arg_str", "]", "\n", "# check the input string", "\n", "", "if", "not", "isinstance", "(", "arg_str", ",", "str", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'regex factory can only construct from `str`, got: {repr(arg_str)}'", ")", "\n", "", "if", "not", "arg_str", ":", "\n", "            ", "raise", "ValueError", "(", "f'regex factory can only construct from non-empty `str`, got: {repr(arg_str)}'", ")", "\n", "# match the values", "\n", "", "constructor", "=", "None", "\n", "for", "c", "in", "self", ":", "\n", "            ", "if", "c", ".", "can_construct", "(", "arg_str", ")", ":", "\n", "                ", "constructor", "=", "c", "\n", "break", "\n", "# cache the value", "\n", "", "", "self", ".", "_cache", "[", "arg_str", "]", "=", "constructor", "\n", "if", "len", "(", "self", ".", "_cache", ")", ">", "128", ":", "\n", "            ", "self", ".", "_cache", ".", "popitem", "(", ")", "\n", "", "return", "constructor", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.has_pattern": [[531, 535], ["isinstance", "re.compile"], "methods", ["None"], ["", "def", "has_pattern", "(", "self", ",", "pattern", ":", "Union", "[", "str", ",", "re", ".", "Pattern", "]", ")", "->", "bool", ":", "\n", "        ", "if", "isinstance", "(", "pattern", ",", "str", ")", ":", "\n", "            ", "pattern", "=", "re", ".", "compile", "(", "pattern", ")", "\n", "", "return", "pattern", "in", "self", ".", "_patterns", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.__len__": [[536, 538], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "_constructors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.__iter__": [[539, 541], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", "->", "Iterator", "[", "RegexConstructor", "]", ":", "\n", "        ", "yield", "from", "self", ".", "_constructors", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append": [[542, 551], ["_registry.RegexProvidersSearch._patterns.add", "_registry.RegexProvidersSearch._constructors.append", "isinstance", "TypeError", "RuntimeError", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "append", "(", "self", ",", "constructor", ":", "RegexConstructor", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "constructor", ",", "RegexConstructor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'regex factory only accepts {RegexConstructor.__name__} providers.'", ")", "\n", "", "if", "constructor", ".", "pattern", "in", "self", ".", "_patterns", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'regex factory already contains the regex pattern: {repr(constructor.pattern)}'", ")", "\n", "# append value!", "\n", "", "self", ".", "_patterns", ".", "add", "(", "constructor", ".", "pattern", ")", "\n", "self", ".", "_constructors", ".", "append", "(", "constructor", ")", "\n", "self", ".", "_cache_dirty", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__": [[572, 575], ["_registry.RegexProvidersSearch", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__init__"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "        ", "self", ".", "_regex_providers", "=", "RegexProvidersSearch", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.regex_constructors": [[578, 581], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "regex_constructors", "(", "self", ")", "->", "List", "[", "RegexConstructor", "]", ":", "\n", "        ", "return", "self", ".", "_regex_providers", ".", "regex_constructors", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.regex_examples": [[582, 585], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "regex_examples", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "[", "constructor", ".", "example", "for", "constructor", "in", "self", ".", "_regex_providers", ".", "regex_constructors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.examples": [[586, 589], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "examples", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "[", "*", "self", ".", "static_examples", ",", "*", "self", ".", "regex_examples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__getitem__": [[590, 599], ["isinstance", "KeyError", "_registry.RegexRegistry._getitem", "_registry.RegexRegistry._regex_providers.can_construct", "repr", "_registry.RegexRegistry._regex_providers.construct", "repr", "repr", "sorted", "_registry.RegexRegistry._providers.keys"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.DictProviders._getitem", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.can_construct", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.construct"], ["", "def", "__getitem__", "(", "self", ",", "k", ":", "str", ")", "->", "V", ":", "\n", "        ", "assert", "isinstance", "(", "k", ",", "str", ")", ",", "f'invalid key: {repr(k)}, must be a `str`'", "\n", "# the regex provider is cached so this should be efficient for the same value calls", "\n", "# -- we do not cache the actual provided value!", "\n", "if", "k", "in", "self", ".", "_providers", ":", "\n", "            ", "return", "self", ".", "_getitem", "(", "k", ")", "\n", "", "elif", "self", ".", "_regex_providers", ".", "can_construct", "(", "k", ")", ":", "\n", "            ", "return", "self", ".", "_regex_providers", ".", "construct", "(", "k", ")", "\n", "", "raise", "KeyError", "(", "f'dynamic registry: {repr(self.name)} cannot construct item with key: {repr(k)}. Valid static values: {sorted(self._providers.keys())}. Valid dynamic examples: {[p.example for p in self._regex_providers]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__setitem__": [[600, 604], ["super().__setitem__", "isinstance", "isinstance", "RuntimeError", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "aliases", ":", "AliasesHint", ",", "v", ":", "ProvidedValue", "[", "V", "]", ")", "->", "NoReturn", ":", "\n", "        ", "if", "isinstance", "(", "aliases", ",", "re", ".", "Pattern", ")", "or", "isinstance", "(", "v", ",", "RegexConstructor", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f'register dynamic values to the dynamic registry: {repr(self.name)} with the `register_regex` or `register_constructor` methods.'", ")", "\n", "", "super", "(", ")", ".", "__setitem__", "(", "aliases", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__contains__": [[605, 611], ["_registry.RegexRegistry._regex_providers.can_construct"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.can_construct"], ["", "def", "__contains__", "(", "self", ",", "k", ":", "K", ")", ":", "\n", "        ", "if", "k", "in", "self", ".", "_providers", ":", "\n", "            ", "return", "True", "\n", "", "if", "self", ".", "_regex_providers", ".", "can_construct", "(", "k", ")", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__len__": [[612, 614], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "_providers", ")", "+", "len", "(", "self", ".", "_regex_providers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.__iter__": [[615, 618], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", "->", "Iterator", "[", "K", "]", ":", "\n", "        ", "yield", "from", "self", ".", "_providers", "\n", "yield", "from", "(", "p", ".", "example", "for", "p", "in", "self", ".", "_regex_providers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry._check_regex_constructor": [[621, 623], ["None"], "methods", ["None"], ["", "def", "_check_regex_constructor", "(", "self", ",", "constructor", ":", "RegexConstructor", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.has_regex": [[626, 628], ["_registry.RegexRegistry._regex_providers.has_pattern"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.has_pattern"], ["", "def", "has_regex", "(", "self", ",", "pattern", ":", "Union", "[", "str", ",", "re", ".", "Pattern", "]", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "_regex_providers", ".", "has_pattern", "(", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.register_constructor": [[629, 638], ["_registry.RegexRegistry._check_regex_constructor", "_registry.RegexRegistry._regex_providers.append", "isinstance", "TypeError", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry._check_regex_constructor", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexProvidersSearch.append"], ["", "def", "register_constructor", "(", "self", ",", "constructor", ":", "RegexConstructor", ")", "->", "'RegexRegistry'", ":", "\n", "        ", "\"\"\"\n        Register a regex constructor\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "constructor", ",", "RegexConstructor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'dynamic registry: {repr(self.name)} only accepts dynamic {RegexConstructor.__name__}, got: {repr(constructor)}'", ")", "\n", "", "self", ".", "_check_regex_constructor", "(", "constructor", ")", "\n", "self", ".", "_regex_providers", ".", "append", "(", "constructor", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.register_regex": [[639, 647], ["_registry.RegexRegistry.register_constructor", "_registry.RegexRegistry.register_regex._register_wrapper"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.register_constructor"], ["", "def", "register_regex", "(", "self", ",", "pattern", ":", "Union", "[", "str", ",", "re", ".", "Pattern", "]", ",", "example", ":", "str", ",", "factory_fn", ":", "Optional", "[", "Union", "[", "_FactoryFn", "[", "V", "]", ",", "str", "]", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Register and create a regex constructor\n        \"\"\"", "\n", "def", "_register_wrapper", "(", "fn", ":", "T", ")", "->", "T", ":", "\n", "            ", "self", ".", "register_constructor", "(", "RegexConstructor", "(", "pattern", "=", "pattern", ",", "example", "=", "example", ",", "factory_fn", "=", "fn", ")", ")", "\n", "return", "fn", "\n", "", "return", "_register_wrapper", "if", "(", "factory_fn", "is", "None", ")", "else", "_register_wrapper", "(", "factory_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.register_missing_constructor": [[648, 654], ["_registry.RegexRegistry.has_regex", "_registry.RegexRegistry.register_constructor"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.has_regex", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.register_constructor"], ["", "def", "register_missing_constructor", "(", "self", ",", "constructor", ":", "RegexConstructor", ")", ":", "\n", "        ", "\"\"\"\n        Only register a regex constructor if the pattern does not already exist!\n        \"\"\"", "\n", "if", "not", "self", ".", "has_regex", "(", "constructor", ".", "pattern", ")", ":", "\n", "            ", "return", "self", ".", "register_constructor", "(", "constructor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.register_missing_regex": [[655, 663], ["_registry.RegexRegistry.has_regex", "_registry.RegexRegistry.register_regex"], "methods", ["home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.has_regex", "home.repos.pwc.inspect_result.nmichlo_disent.registry._registry.RegexRegistry.register_regex"], ["", "", "def", "register_missing_regex", "(", "self", ",", "pattern", ":", "Union", "[", "str", ",", "re", ".", "Pattern", "]", ",", "example", ":", "str", ",", "factory_fn", ":", "Optional", "[", "Union", "[", "_FactoryFn", "[", "V", "]", ",", "str", "]", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Only register and create a regex constructor if the pattern does not already exist!\n        \"\"\"", "\n", "if", "not", "self", ".", "has_regex", "(", "pattern", ")", ":", "\n", "            ", "return", "self", ".", "register_regex", "(", "pattern", "=", "pattern", ",", "example", "=", "example", ",", "factory_fn", "=", "factory_fn", ")", "\n", "", "elif", "factory_fn", "is", "None", ":", "\n", "            ", "return", "lambda", "fn", ":", "fn", "# dummy wrapper", "\n", "\n"]]}