{"home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_argoverse_labels.process_split": [[25, 37], ["print", "argoverse.data_loading.argoverse_tracking_loader.ArgoverseTrackingLoader", "make_argoverse_labels.process_scene"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_nuscenes_labels.process_scene"], ["def", "process_split", "(", "map_data", ",", "config", ")", ":", "\n", "\n", "# Create an Argoverse loader instance", "\n", "    ", "path", "=", "exp_config", ".", "argo_track_path", "\n", "print", "(", "\"Loading Argoverse tracking data at \"", "+", "path", ")", "\n", "loader", "=", "ArgoverseTrackingLoader", "(", "path", ")", "\n", "\n", "\n", "\n", "for", "scene", "in", "loader", ":", "\n", "# if scene.current_log in VAL_LOGS:", "\n", "        ", "process_scene", "(", "scene", ",", "map_data", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_argoverse_labels.process_scene": [[39, 48], ["logging.error", "range", "make_argoverse_labels.process_frame"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_argoverse_labels.process_frame"], ["", "", "def", "process_scene", "(", "scene", ",", "map_data", ",", "config", ")", ":", "\n", "\n", "    ", "logging", ".", "error", "(", "\"\\n\\n==> Processing scene: \"", "+", "scene", ".", "current_log", ")", "\n", "\n", "# Iterate over each camera and each frame in the sequence", "\n", "for", "camera", "in", "RING_CAMERA_LIST", ":", "\n", "        ", "for", "frame", "in", "range", "(", "scene", ".", "num_lidar_frame", ")", ":", "\n", "# progress.update(i)", "\n", "            ", "process_frame", "(", "scene", ",", "camera", ",", "frame", ",", "map_data", ",", "config", ")", "\n", "# i += 1", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_argoverse_labels.process_frame": [[51, 84], ["dataset.argoverse_utils.get_object_masks", "dataset.argoverse_utils.get_map_mask", "scene.get_calibration", "scene.get_lidar", "scene.get_calibration.project_ego_to_cam", "dataset.utils.get_occlusion_mask", "dataset.utils.encode_binary_labels", "str", "os.path.join", "os.makedirs", "PIL.Image.fromarray().save", "os.path.dirname", "PIL.Image.fromarray", "dataset.utils.encode_binary_labels.astype"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_object_masks", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.argoverse_utils.get_map_mask", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.get_occlusion_mask", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.encode_binary_labels"], ["", "", "", "def", "process_frame", "(", "scene", ",", "camera", ",", "frame", ",", "map_data", ",", "config", ")", ":", "\n", "\n", "# Compute object masks", "\n", "    ", "masks", "=", "get_object_masks", "(", "scene", ",", "camera", ",", "frame", ",", "config", ".", "map_extents", ",", "\n", "config", ".", "map_resolution", ")", "\n", "\n", "# Compute drivable area mask", "\n", "masks", "[", "0", "]", "=", "get_map_mask", "(", "scene", ",", "camera", ",", "frame", ",", "map_data", ",", "config", ".", "map_extents", ",", "\n", "config", ".", "map_resolution", ")", "\n", "\n", "# Ignore regions of the BEV which are outside the image", "\n", "calib", "=", "scene", ".", "get_calibration", "(", "camera", ")", "\n", "# masks[-1] |= ~get_visible_mask(calib.K, calib.camera_config.img_width,", "\n", "#                                config.map_extents, config.map_resolution)", "\n", "\n", "# Ignore regions of the BEV which are occluded (based on LiDAR data)", "\n", "lidar", "=", "scene", ".", "get_lidar", "(", "frame", ")", "\n", "cam_lidar", "=", "calib", ".", "project_ego_to_cam", "(", "lidar", ")", "\n", "masks", "[", "-", "1", "]", "=", "get_occlusion_mask", "(", "cam_lidar", ",", "config", ".", "map_extents", ",", "\n", "config", ".", "map_resolution", ")", "\n", "\n", "# Encode masks as an integer bitmask", "\n", "labels", "=", "encode_binary_labels", "(", "masks", ")", "\n", "\n", "# Create a filename and directory", "\n", "timestamp", "=", "str", "(", "scene", ".", "image_timestamp_list_sync", "[", "camera", "]", "[", "frame", "]", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "exp_config", ".", "argo_labels_path", ",", "\n", "scene", ".", "current_log", ",", "camera", ",", "\n", "f'{camera}_{timestamp}.png'", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "output_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Save encoded label file to disk", "\n", "Image", ".", "fromarray", "(", "labels", ".", "astype", "(", "np", ".", "int32", ")", ",", "mode", "=", "'I'", ")", ".", "save", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.decode_binary_labels": [[117, 120], ["numpy.power", "numpy.uint8", "numpy.arange", "numpy.expand_dims", "numpy.reshape"], "function", ["None"], ["def", "decode_binary_labels", "(", "labels", ",", "nclass", ")", ":", "\n", "    ", "bits", "=", "np", ".", "power", "(", "2", ",", "np", ".", "arange", "(", "nclass", ")", ")", "\n", "return", "np", ".", "uint8", "(", "(", "np", ".", "expand_dims", "(", "labels", ",", "axis", "=", "-", "1", ")", "&", "np", ".", "reshape", "(", "bits", ",", "(", "1", ",", "1", ",", "-", "1", ")", ")", ")", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.list_directories": [[121, 123], ["os.listdir", "os.path.isdir", "os.path.join"], "function", ["None"], ["", "def", "list_directories", "(", "path", ")", ":", "\n", "     ", "return", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "path", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.get_clipped_grads": [[125, 135], ["logging.error", "capped_gvs.append", "tensorflow.clip_by_value", "str"], "function", ["None"], ["", "def", "get_clipped_grads", "(", "gvs", ")", ":", "\n", "\n", "    ", "capped_gvs", "=", "[", "]", "\n", "for", "grad", ",", "var", "in", "gvs", ":", "\n", "        ", "if", "grad", "==", "None", ":", "\n", "            ", "logging", ".", "error", "(", "'VAR '", "+", "str", "(", "var", ")", "+", "' NONE GRAD'", ")", "\n", "", "else", ":", "\n", "\n", "            ", "capped_gvs", ".", "append", "(", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "10.", ",", "10.", ")", ",", "var", ")", ")", "\n", "", "", "return", "capped_gvs", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.single_process": [[137, 244], ["PIL.Image.open", "Image.open.load", "PIL.Image.open", "np.array.load", "numpy.array", "numpy.array", "numpy.zeros", "numpy.copy", "range", "nusc.get", "nusc.get", "numpy.array", "nusc.get", "nusc.get", "nusc.get", "nusc.get", "numpy.float32", "numpy.stack", "utils.tensorflow_project_to_ground", "utils.tensorflow_project_to_ground", "utils.tensorflow_project_to_ground", "utils.project_to_ground", "numpy.zeros", "numpy.copy", "range", "cv2.resize", "cv2.resize", "numpy.zeros", "numpy.copy", "range", "numpy.copy", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.copy", "numpy.copy", "utils.inception_preprocess", "utils.inception_preprocess", "numpy.float32", "numpy.float32", "int", "int", "int", "int", "int", "numpy.reshape", "numpy.reshape", "numpy.reshape", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.inception_preprocess", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.inception_preprocess"], ["", "def", "single_process", "(", "pair", ")", ":", "\n", "\n", "\n", "    ", "camera_channel", "=", "'CAM_FRONT'", "\n", "image_path", ",", "label_path", ",", "my_reference_sample", ",", "my_current_sample", ",", "is_reference_sample", "=", "pair", "\n", "\n", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img", ".", "load", "(", ")", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "label", ".", "load", "(", ")", "\n", "\n", "image", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "label", "=", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "orig_label", "=", "np", ".", "zeros", "(", "(", "label", ".", "shape", "[", "0", "]", ",", "label", ".", "shape", "[", "1", "]", ",", "int", "(", "total_label_slices", ")", ")", ")", "\n", "\n", "rem", "=", "np", ".", "copy", "(", "label", ")", "\n", "#    logging.error('Rem shape ' + str(rem.shape))", "\n", "for", "k", "in", "range", "(", "total_label_slices", ")", ":", "\n", "\n", "        ", "temp_rem", "=", "rem", "//", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "#        logging.error('TEMP REM SHAPE : ' + str(temp_rem.shape))", "\n", "\n", "orig_label", "[", ":", ",", ":", ",", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", "]", "=", "np", ".", "copy", "(", "temp_rem", ")", "\n", "\n", "rem", "=", "rem", "%", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "\n", "\n", "", "cam_token_ref", "=", "my_reference_sample", "[", "'data'", "]", "[", "camera_channel", "]", "\n", "cam_record_ref", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_ref", ")", "\n", "\n", "cs_record_ref", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "cam_record_ref", "[", "'calibrated_sensor_token'", "]", ")", "\n", "cam_intrinsic", "=", "np", ".", "array", "(", "cs_record_ref", "[", "'camera_intrinsic'", "]", ")", "\n", "\n", "poserecord_ref", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "cam_record_ref", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "'''\n    '''", "\n", "cam_token_cur", "=", "my_current_sample", "[", "'data'", "]", "[", "camera_channel", "]", "\n", "cam_record_cur", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_cur", ")", "\n", "\n", "cs_record_cur", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "cam_record_cur", "[", "'calibrated_sensor_token'", "]", ")", "\n", "\n", "poserecord_cur", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "cam_record_cur", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "# bev_label = Image.open( os.path.join('/srv/beegfs02/scratch/tracezuerich/data/cany/bev_labels',  ", "\n", "#                            cam_record_cur['token'] + '.png'))", "\n", "\n", "vis_mask", "=", "np", ".", "float32", "(", "orig_label", "[", "...", ",", "exp_config", ".", "num_classes", "]", ")", "\n", "vis_mask", "=", "np", ".", "stack", "(", "[", "vis_mask", ",", "vis_mask", ",", "vis_mask", "]", ",", "axis", "=", "-", "1", ")", "\n", "warp_trans1", "=", "utils", ".", "tensorflow_project_to_ground", "(", "exp_config", ",", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "4", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "4", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "poserecord_ref", ",", "cs_record_ref", ",", "poserecord_cur", ",", "cs_record_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "warp_trans2", "=", "utils", ".", "tensorflow_project_to_ground", "(", "exp_config", ",", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "8", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "8", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "poserecord_ref", ",", "cs_record_ref", ",", "poserecord_cur", ",", "cs_record_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "warp_trans3", "=", "utils", ".", "tensorflow_project_to_ground", "(", "exp_config", ",", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "16", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "16", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "poserecord_ref", ",", "cs_record_ref", ",", "poserecord_cur", ",", "cs_record_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "\n", "\n", "\n", "warped_img", ",", "warped_cover", ",", "warped_label", ",", "coordinate_transform", "=", "utils", ".", "project_to_ground", "(", "exp_config", ",", "image", ",", "label", ",", "poserecord_ref", ",", "cs_record_ref", ",", "poserecord_cur", ",", "cs_record_cur", ",", "cam_intrinsic", ",", "vis_mask", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "\n", "bev_label", "=", "np", ".", "zeros", "(", "(", "warped_label", ".", "shape", "[", "0", "]", ",", "warped_label", ".", "shape", "[", "1", "]", ",", "int", "(", "total_label_slices", ")", ")", ")", "\n", "\n", "rem", "=", "np", ".", "copy", "(", "warped_label", ")", "\n", "#    logging.error('Rem shape ' + str(rem.shape))", "\n", "for", "k", "in", "range", "(", "total_label_slices", ")", ":", "\n", "\n", "        ", "temp_rem", "=", "rem", "//", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "#        logging.error('TEMP REM SHAPE : ' + str(temp_rem.shape))", "\n", "\n", "bev_label", "[", ":", ",", ":", ",", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", "]", "=", "np", ".", "copy", "(", "temp_rem", ")", "\n", "\n", "rem", "=", "rem", "%", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "\n", "\n", "\n", "", "new_sizes", "=", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ")", "\n", "cropped_label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "cropped_img", "=", "cv2", ".", "resize", "(", "image", ",", "new_sizes", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "temp_label", "=", "np", ".", "zeros", "(", "(", "cropped_label", ".", "shape", "[", "0", "]", ",", "cropped_label", ".", "shape", "[", "1", "]", ",", "int", "(", "total_label_slices", ")", ")", ")", "\n", "\n", "rem", "=", "np", ".", "copy", "(", "cropped_label", ")", "\n", "#    logging.error('Rem shape ' + str(rem.shape))", "\n", "for", "k", "in", "range", "(", "total_label_slices", ")", ":", "\n", "\n", "        ", "temp_rem", "=", "rem", "//", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "#        logging.error('TEMP REM SHAPE : ' + str(temp_rem.shape))", "\n", "\n", "temp_label", "[", ":", ",", ":", ",", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", "]", "=", "np", ".", "copy", "(", "temp_rem", ")", "\n", "\n", "rem", "=", "rem", "%", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "\n", "\n", "", "if", "not", "use_deeplab", ":", "\n", "#        pre_img = inception_preprocess(cropped_img)", "\n", "#        ", "\n", "        ", "pre_warped_img", "=", "utils", ".", "inception_preprocess", "(", "warped_img", ")", "\n", "pre_img", "=", "cropped_img", "-", "means_image", "\n", "#        pre_warped_img=warped_img - means_image ", "\n", "\n", "", "else", ":", "\n", "        ", "pre_img", "=", "cropped_img", "\n", "pre_warped_img", "=", "utils", ".", "inception_preprocess", "(", "warped_img", ")", "\n", "\n", "#    logging.error('Pre img shape ' + str(pre_img.shape))", "\n", "\n", "", "return", "(", "pre_img", ",", "np", ".", "float32", "(", "temp_label", ")", ",", "pre_warped_img", ",", "np", ".", "float32", "(", "bev_label", ")", ",", "warped_cover", ",", "coordinate_transform", ",", "np", ".", "reshape", "(", "warp_trans1", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ",", "np", ".", "reshape", "(", "warp_trans2", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ",", "np", ".", "reshape", "(", "warp_trans3", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.run_training": [[246, 843], ["logging.error", "logging.error", "numpy.arange", "logging.info", "tensorflow.ConfigProto", "len", "tensorflow.Session", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "deeplab.common.ModelOptions", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.image.resize", "tensorflow.constant", "mem_net.image_encoder", "mem_net.my_side_decoder", "range", "mem_net.my_object_side_decoder", "tensorflow.slice", "tensorflow.constant", "mem_net.full_object_loss", "mem_net.contrastive_sigmoid_loss", "mem_net.occlusion_loss", "tensorflow.contrib.image.transform", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.contrib.image.transform", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.image.resize", "tensorflow.contrib.image.transform", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.contrib.image.transform", "logging.error", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.concat", "mem_net.my_bev_object_decoder", "tensorflow.slice", "tensorflow.constant", "tensorflow.constant", "tensorflow.concat", "mem_net.full_modified_bev_object_loss", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.get_collection", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.get_collection", "logging.error", "logging.error", "logging.error", "tf.train.AdamOptimizer.compute_gradients", "nuscenes_train.get_clipped_grads", "tf.train.AdamOptimizer.apply_gradients", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.global_variables_initializer", "sess.run", "sess.run", "range", "str", "str", "int", "int", "len", "reference_image_endpoints.append", "tensorflow.slice", "numpy.expand_dims", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.concat", "numpy.expand_dims", "numpy.expand_dims", "tensorflow.add_n", "len", "dict", "dict", "tensorflow.train.Saver", "tf.train.Saver.restore", "mem_net.interp_surgery", "logging.error", "random.shuffle", "range", "range", "int", "int", "numpy.ones", "tensorflow.slice", "numpy.expand_dims", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "int", "int", "int", "int", "tensorflow.slice", "tensorflow.slice", "int", "int", "tensorflow.slice", "str", "tensorflow.slice", "int", "int", "numpy.expand_dims", "numpy.expand_dims", "var.op.name.split", "l2_loss_vars.append", "dict", "tensorflow.train.Saver", "non_decoder_vars.append", "str", "str", "str", "os.path.join", "tf.train.Saver.restore", "os.path.join", "tf.train.Saver.restore", "tensorflow.global_variables", "batch_indices_list.append", "generators_list.append", "int", "int", "numpy.max", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "restored_vars.append", "new_vars.append", "print", "numpy.sum", "numpy.sum", "str", "background_generator.BackgroundGenerator", "int", "int", "int", "restored_vars.append", "new_vars.append", "backbone_optimizer_variables.append", "optimizer_variables.append", "nuscenes_train.iterate_minibatches", "range", "time.time", "sess.run", "time.time", "time.time", "logging.error", "str", "logging.error", "optimizer_variables.append", "numpy.prod", "numpy.prod", "generators_list[].next", "tf.train.Saver.save", "sess.run", "recon_loss_value_list.append", "reg_loss_value_list.append", "occ_loss_value_list.append", "side_loss_value_list.append", "side_occ_loss_value_list.append", "side_recon_loss_value_list.append", "side_obj_loss_value_list.append", "loss_value_list.append", "seg_v_list0.append", "logging.error", "logging.error", "logging.error", "nuscenes_train.do_eval", "numpy.mean", "logging.error", "str", "var.op.name.replace", "backbone_optimizer_variables.append", "optimizer_variables.append", "logging.error", "v.get_shape().as_list", "v.get_shape().as_list", "os.path.join", "numpy.array", "numpy.copy", "logging.error", "tf.train.Saver.save", "var.op.name.replace", "backbone_optimizer_variables.append", "optimizer_variables.append", "str", "str", "str", "os.path.join", "var.op.name.replace", "str", "v.get_shape", "v.get_shape", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "str", "str", "numpy.uint8", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.image_encoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_side_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_object_side_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.full_object_loss", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.contrastive_sigmoid_loss", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.occlusion_loss", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_bev_object_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.full_modified_bev_object_loss", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.get_clipped_grads", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.interp_surgery", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.iterate_minibatches", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.next", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.do_eval"], ["", "def", "run_training", "(", "continue_run", ")", ":", "\n", "\n", "#    train_file ='C:\\\\winpython\\\\WPy-3670\\\\codes\\\\davis2017\\\\DAVIS\\\\ImageSets\\\\2017\\\\train.txt'", "\n", "#    data_images_path ='C:\\\\winpython\\\\WPy-3670\\\\codes\\\\davis2017\\\\DAVIS\\\\JPEGImages\\\\480p\\\\drone'", "\n", "\n", "\n", "    ", "logging", ".", "error", "(", "'EXPERIMENT : '", "+", "str", "(", "exp_config", ".", "experiment_name", ")", ")", "\n", "logging", ".", "error", "(", "'THIS IS : '", "+", "str", "(", "log_dir", ")", ")", "\n", "\n", "val_tokens", "=", "token_splits", ".", "VAL_SCENES", "\n", "train_tokens", "=", "token_splits", ".", "TRAIN_SCENES", "\n", "\n", "\n", "batch_indices", "=", "np", ".", "arange", "(", "len", "(", "train_tokens", ")", ")", "\n", "logging", ".", "info", "(", "'EXPERIMENT NAME: %s'", "%", "exp_config", ".", "experiment_name", ")", "\n", "\n", "\n", "init_step", "=", "0", "\n", "# Load data", "\n", "\n", "\n", "# Tell TensorFlow that the model will be built into the default Graph.", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "#        with tf.Graph().as_default():", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "# Generate placeholders for the images and labels.", "\n", "\n", "\n", "        ", "\"\"\"         \n        Note that the first frame mask is returned as float32 while the others as uint8. This is because the first frame mask\n        is not used in loss calculations and only concatenated with the image in memory encoding. While the other masks\n        are NOT used in memory encoding and only used in loss calculations. So for tf.one_hot to work they are uint8.\n        \"\"\"", "\n", "\n", "learning_rate_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ")", "\n", "training_time_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "\n", "my_training_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "\n", "\n", "# Build a Graph that computes predictions from the inference model.", "\n", "my_model_options", "=", "common", ".", "ModelOptions", "(", "{", "common", ".", "OUTPUT_TYPE", ":", "10", "}", ",", "crop_size", "=", "exp_config", ".", "camera_image_patch_size", ",", "atrous_rates", "=", "[", "6", ",", "12", ",", "18", "]", ")", "\n", "\n", "image_tensor_shape", "=", "[", "n_frames_per_seq", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "3", "]", "\n", "image_mask_tensor_shape", "=", "[", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "total_label_slices", "]", "\n", "mask_tensor_shape", "=", "[", "n_seqs", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "exp_config", ".", "num_bev_classes", "+", "1", "]", "\n", "\n", "images_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "image_tensor_shape", ",", "name", "=", "'images'", ")", "\n", "\n", "image_labels_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "image_mask_tensor_shape", ",", "name", "=", "'image_labels'", ")", "\n", "image_objects_label_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "1", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "exp_config", ".", "num_object_classes", "+", "1", "]", ",", "name", "=", "'image_object_labels'", ")", "\n", "covers_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", "]", ",", "name", "=", "'covers'", ")", "\n", "\n", "separate_covers_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", "]", ",", "name", "=", "'separate_covers'", ")", "\n", "\n", "bev_transforms_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "np", ".", "max", "(", "[", "1", ",", "n_seqs", "-", "1", "]", ")", ",", "8", "]", ",", "name", "=", "'bev_transforms'", ")", "\n", "\n", "ground_transforms_placeholder1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms1'", ")", "\n", "\n", "ground_transforms_placeholder2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms2'", ")", "\n", "\n", "ground_transforms_placeholder3", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms3'", ")", "\n", "\n", "\n", "coordinate_ground_transforms_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "3", ",", "3", "]", ",", "name", "=", "'coordinate_ground_transforms'", ")", "\n", "\n", "channel_bev_images_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "3", "*", "num_frames", "]", ",", "name", "=", "'channel_images'", ")", "\n", "\n", "\n", "ref_bev_labels_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "exp_config", ".", "label_patch_size", "[", "1", "]", ",", "exp_config", ".", "label_patch_size", "[", "0", "]", ",", "exp_config", ".", "num_bev_classes", "+", "2", "]", ",", "name", "=", "'ref_bev_labels'", ")", "\n", "\n", "resized_covers", "=", "tf", ".", "image", ".", "resize", "(", "\n", "covers_placeholder", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "exp_config", ".", "bev_downsample_ratio", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "exp_config", ".", "bev_downsample_ratio", ")", "]", ",", "method", "=", "'nearest'", ",", "name", "=", "'cover_resize'", ")", "\n", "\n", "\n", "no_mask_tensor", "=", "tf", ".", "constant", "(", "-", "np", ".", "ones", "(", "(", "1", ",", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "exp_config", ".", "feature_downsample", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "exp_config", ".", "feature_downsample", ")", ",", "int", "(", "exp_config", ".", "num_classes", "+", "1", ")", ")", ",", "np", ".", "float32", ")", ")", "\n", "\n", "'''\n        Extract features from the CAMERA IMAGE\n        '''", "\n", "\n", "image_total_backbone_out", ",", "image_total_relative_endpoints", ",", "image_total_end_points", "=", "mem_net", ".", "image_encoder", "(", "images_placeholder", ",", "no_mask_tensor", ",", "my_model_options", ",", "downsample_stages", "=", "4", ",", "use_deeplab", "=", "use_deeplab", ",", "is_training", "=", "training_time_placeholder", ",", "reuse", "=", "False", ")", "\n", "#            image_total_backbone_out = mem_net.my_image_decoder(image_total_relative_endpoints,image_total_backbone_out,reuse=False)", "\n", "\n", "\n", "total_input_image", "=", "image_total_backbone_out", "\n", "\n", "side_mask_logits", ",", "side_occ_est_logits", ",", "side_masks", ",", "side_occ_softmaxed", "=", "mem_net", ".", "my_side_decoder", "(", "image_total_relative_endpoints", ",", "total_input_image", ",", "reuse", "=", "False", ")", "\n", "\n", "reference_image_endpoints", "=", "[", "]", "\n", "for", "endi", "in", "range", "(", "len", "(", "image_total_relative_endpoints", ")", ")", ":", "\n", "            ", "reference_image_endpoints", ".", "append", "(", "tf", ".", "slice", "(", "image_total_relative_endpoints", "[", "endi", "]", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ")", "\n", "\n", "", "side_obj_logits", ",", "side_obj_softmaxed", "=", "mem_net", ".", "my_object_side_decoder", "(", "reference_image_endpoints", ",", "tf", ".", "slice", "(", "total_input_image", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "exp_config", ",", "apply_softmax", "=", "True", ",", "reuse", "=", "False", ")", "\n", "# logging.error('SIDE OCC LOGITS ' + str(side_obj_))", "\n", "# logging.error('SIDE OCC LABELS ' + str(tf.squeeze(tf.slice(image_labels_placeholder,[0,0,0,exp_config.num_classes+1],[-1,-1,-1,-1]),axis=-1)))", "\n", "\n", "cur_covers", "=", "tf", ".", "slice", "(", "resized_covers", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "\n", "alpha_pos", "=", "tf", ".", "constant", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "exp_config", ".", "image_object_positive_weights", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "\n", "side_obj_loss", ",", "_", "=", "mem_net", ".", "full_object_loss", "(", "side_obj_softmaxed", ",", "image_objects_label_placeholder", ",", "tf", ".", "slice", "(", "image_labels_placeholder", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "exp_config", ".", "num_classes", "+", "1", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "exp_config", ",", "alpha_pos", ",", "weight", "=", "True", ",", "weight_vector", "=", "None", ",", "focal", "=", "True", ")", "\n", "\n", "side_seg_loss0", ",", "side_alpha0", "=", "mem_net", ".", "contrastive_sigmoid_loss", "(", "side_mask_logits", ",", "image_labels_placeholder", ",", "exp_config", ",", "weight", "=", "True", ")", "\n", "\n", "\n", "\n", "side_occ_loss0", "=", "mem_net", ".", "occlusion_loss", "(", "side_occ_est_logits", ",", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "image_labels_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_classes", "+", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "projected_estimates", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "tf", ".", "concat", "(", "[", "side_masks", ",", "side_occ_softmaxed", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform'", "\n", ")", "\n", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "combined_projected_estimates", "=", "tf", ".", "reduce_max", "(", "projected_estimates", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "projected_obj_estimates", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "side_obj_softmaxed", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "reference_frame_index", ",", "0", "]", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform'", "\n", ")", "\n", "\n", "combined_projected_estimates", "=", "tf", ".", "concat", "(", "[", "combined_projected_estimates", ",", "projected_obj_estimates", "]", ",", "axis", "=", "-", "1", ")", "\n", "resized_combined_projected_estimates", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_projected_estimates", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "8", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "8", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "bigger_resized_combined_projected_estimates", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_projected_estimates", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "4", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'bigger_projected_estimates_resize'", ")", "\n", "\n", "'''\n        Scale the coordinates to the original image so that the transformation is compatible\n        '''", "\n", "\n", "\n", "all_bev_total_backbone_out", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "image_total_relative_endpoints", "[", "0", "]", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder2", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform_end1'", "\n", ")", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "# combined_back_out = tf.reduce_max(tf.slice(all_bev_total_backbone_out,[0,0,0,0],[-1,-1,-1,128])*cur_separate_covers,axis=0,keepdims=True)", "\n", "\n", "# combined_back_out = tf.concat([tf.tile(combined_back_out,[num_frames,1,1,1]),tf.slice(all_bev_total_backbone_out,[0,0,0,128],[-1,-1,-1,-1])],axis=-1)", "\n", "\n", "combined_back_out", "=", "tf", ".", "reduce_max", "(", "all_bev_total_backbone_out", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "combined_back_out", "=", "tf", ".", "concat", "(", "[", "combined_back_out", ",", "tf", ".", "slice", "(", "all_bev_total_backbone_out", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "bev_total_backbone_out", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_back_out", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "8", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "8", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "all_bev_end2", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "image_total_relative_endpoints", "[", "1", "]", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform_end2'", "\n", ")", "\n", "\n", "logging", ".", "error", "(", "'ENDPOINT WARPED '", "+", "str", "(", "all_bev_end2", ")", ")", "\n", "\n", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# combined_end = tf.reduce_max(tf.slice(all_bev_end2,[0,0,0,0],[-1,-1,-1,128])*cur_separate_covers,axis=0,keepdims=True)", "\n", "\n", "# combined_end = tf.concat([tf.tile(combined_end,[num_frames,1,1,1]),tf.slice(all_bev_end2,[0,0,0,128],[-1,-1,-1,-1])],axis=-1)", "\n", "\n", "combined_end", "=", "tf", ".", "reduce_max", "(", "all_bev_end2", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "combined_end", "=", "tf", ".", "concat", "(", "[", "combined_end", ",", "tf", ".", "slice", "(", "all_bev_end2", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# combined_end = tf.reduce_max( all_bev_end2*cur_separate_covers,axis=0,keepdims=True)", "\n", "\n", "combined_end", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_end", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "4", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "#        bev_total_relative_endpoints = [combined_end]", "\n", "bev_total_relative_endpoints", "=", "[", "tf", ".", "concat", "(", "[", "combined_end", ",", "bigger_resized_combined_projected_estimates", "]", ",", "axis", "=", "-", "1", ")", "]", "\n", "\n", "\n", "\n", "total_input", "=", "tf", ".", "concat", "(", "[", "resized_combined_projected_estimates", ",", "bev_total_backbone_out", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "\n", "\n", "static_logits", ",", "static_masks", ",", "object_logits", ",", "object_masks", "=", "mem_net", ".", "my_bev_object_decoder", "(", "bev_total_relative_endpoints", ",", "total_input", ",", "exp_config", ",", "apply_softmax", "=", "True", ",", "reuse", "=", "False", ")", "\n", "\n", "# object_logits, object_masks = mem_net.my_bev_static_decoder(bev_total_relative_endpoints,total_input,exp_config,reuse=False)", "\n", "\n", "\n", "cur_covers", "=", "tf", ".", "slice", "(", "resized_covers", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "\n", "# seg_loss0, alpha0 = mem_net.bev_object_loss(mask_logits,tf.slice(ref_bev_labels_placeholder,[0,0,0,0],[1,-1,-1,-1]),cur_covers,exp_config,weight=True)", "\n", "alpha_pos", "=", "tf", ".", "constant", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "exp_config", ".", "bev_positive_weights", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "tf", ".", "float32", ")", "\n", "alpha_neg", "=", "tf", ".", "constant", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "exp_config", ".", "bev_negative_weights", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "masks", "=", "tf", ".", "concat", "(", "[", "static_masks", ",", "object_masks", "]", ",", "axis", "=", "-", "1", ")", "\n", "seg_loss0", ",", "alpha0", "=", "mem_net", ".", "full_modified_bev_object_loss", "(", "masks", ",", "ref_bev_labels_placeholder", ",", "cur_covers", ",", "exp_config", ",", "alpha_pos", ",", "alpha_neg", ",", "weight", "=", "True", ")", "\n", "\n", "\n", "'''\n        LOSSES ADDED\n        '''", "\n", "mean_side_seg_loss0", "=", "tf", ".", "reduce_mean", "(", "side_seg_loss0", ")", "\n", "mean_side_obj_loss", "=", "tf", ".", "reduce_mean", "(", "side_obj_loss", ")", "\n", "mean_seg_loss0", "=", "tf", ".", "reduce_mean", "(", "seg_loss0", ")", "\n", "#            mean_seg_loss1 = tf.reduce_mean(seg_loss1)", "\n", "\n", "occ_loss", "=", "tf", ".", "constant", "(", "0", ")", "\n", "\n", "recon_loss", "=", "mean_seg_loss0", "\n", "\n", "side_loss", "=", "mean_side_seg_loss0", "+", "0.001", "*", "tf", ".", "reduce_mean", "(", "side_occ_loss0", ")", "+", "10", "*", "mean_side_obj_loss", "\n", "l2_loss_vars", "=", "[", "]", "\n", "# l2_loss_vars = []", "\n", "trainable_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ")", "\n", "for", "var", "in", "trainable_vars", ":", "\n", "            ", "cur_name", "=", "var", ".", "op", ".", "name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "# logging.error('CUR NAME ' + cur_name)", "\n", "if", "not", "(", "(", "'bias'", "in", "cur_name", ")", "|", "(", "'_b'", "in", "cur_name", ")", "|", "(", "'gamma'", "in", "var", ".", "op", ".", "name", ")", "|", "(", "'beta'", "in", "var", ".", "op", ".", "name", ")", ")", ":", "\n", "                ", "l2_loss_vars", ".", "append", "(", "var", ")", "\n", "\n", "# logging.error(str(l2_loss_vars))", "\n", "", "", "lossL2", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "l2_loss_vars", "]", ")", "/", "len", "(", "l2_loss_vars", ")", "\n", "loss", "=", "recon_loss", "+", "0.0001", "*", "lossL2", "+", "2", "*", "side_loss", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate_placeholder", ")", "\n", "#            ", "\n", "#           ", "\n", "\n", "all_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", "\n", "trainable_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ")", "\n", "optimizer_variables", "=", "[", "]", "\n", "\n", "backbone_optimizer_variables", "=", "[", "]", "\n", "if", "use_deeplab", ":", "\n", "            ", "if", "starting_from_cityscapes", ":", "\n", "                ", "query_variables_to_restore", "=", "dict", "(", ")", "\n", "\n", "restored_vars", "=", "[", "]", "\n", "new_vars", "=", "[", "]", "\n", "\n", "for", "var", "in", "all_vars", ":", "\n", "\n", "                  ", "if", "'image_encoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "                      ", "restored_vars", ".", "append", "(", "var", ".", "op", ".", "name", ")", "\n", "\n", "if", "'mem_net_backbone'", "in", "var", ".", "op", ".", "name", ":", "\n", "\n", "                          ", "query_variables_to_restore", "[", "var", ".", "op", ".", "name", ".", "replace", "(", "'image_encoder/mem_net_backbone/'", ",", "''", ")", "]", "=", "var", "\n", "", "elif", "'pretrained_decoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "                          ", "query_variables_to_restore", "[", "var", ".", "op", ".", "name", ".", "replace", "(", "'memory_encoder/pretrained_decoder/'", ",", "''", ")", "]", "=", "var", "\n", "\n", "\n", "", "", "else", ":", "\n", "                      ", "new_vars", ".", "append", "(", "var", ")", "\n", "#                      trainable_new_vars.append(var)", "\n", "", "", "imagenet_query_saver", "=", "tf", ".", "train", ".", "Saver", "(", "query_variables_to_restore", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "image_variables_to_restore", "=", "dict", "(", ")", "\n", "bev_variables_to_restore", "=", "dict", "(", ")", "\n", "restored_vars", "=", "[", "]", "\n", "new_vars", "=", "[", "]", "\n", "for", "var", "in", "all_vars", ":", "\n", "\n", "              ", "if", "'resnet_backbone'", "in", "var", ".", "op", ".", "name", ":", "\n", "                  ", "restored_vars", ".", "append", "(", "var", ".", "op", ".", "name", ")", "\n", "\n", "if", "'image_encoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "                      ", "image_variables_to_restore", "[", "var", ".", "op", ".", "name", ".", "replace", "(", "'image_encoder/resnet_backbone/'", ",", "''", ")", "]", "=", "var", "\n", "#                      else:", "\n", "#                          if not ('backbone_combine_conv' in var.op.name):", "\n", "#                              bev_variables_to_restore[var.op.name.replace('bev_encoder/resnet_backbone/', '')]=var", "\n", "", "", "else", ":", "\n", "                  ", "new_vars", ".", "append", "(", "var", ")", "\n", "#                      trainable_new_vars.append(var)", "\n", "", "", "imagenet_image_saver", "=", "tf", ".", "train", ".", "Saver", "(", "image_variables_to_restore", ")", "\n", "#                imagenet_bev_saver = tf.train.Saver(bev_variables_to_restore)", "\n", "\n", "\n", "", "non_decoder_vars", "=", "[", "]", "\n", "for", "var", "in", "all_vars", ":", "\n", "            ", "if", "(", "not", "(", "'my_bev_object_decoder'", "in", "var", ".", "op", ".", "name", ")", ")", ":", "\n", "                ", "non_decoder_vars", ".", "append", "(", "var", ")", "\n", "\n", "", "", "for", "var", "in", "trainable_vars", ":", "\n", "\n", "            ", "if", "'BatchNorm'", "in", "var", ".", "op", ".", "name", ":", "\n", "#                        print('Batch norm variable : '  + str(var))", "\n", "                ", "continue", "\n", "\n", "\n", "\n", "", "elif", "'upscale'", "in", "var", ".", "op", ".", "name", ":", "\n", "                ", "print", "(", "'Upscale variable : '", "+", "str", "(", "var", ")", ")", "\n", "\n", "", "elif", "'bev_encoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "                ", "backbone_optimizer_variables", ".", "append", "(", "var", ")", "\n", "optimizer_variables", ".", "append", "(", "var", ")", "\n", "", "elif", "'image_encoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "\n", "                ", "if", "use_deeplab", ":", "\n", "                    ", "if", "'exit'", "in", "var", ".", "op", ".", "name", ":", "\n", "                        ", "backbone_optimizer_variables", ".", "append", "(", "var", ")", "\n", "optimizer_variables", ".", "append", "(", "var", ")", "\n", "", "", "else", ":", "\n", "                    ", "backbone_optimizer_variables", ".", "append", "(", "var", ")", "\n", "optimizer_variables", ".", "append", "(", "var", ")", "\n", "logging", ".", "error", "(", "'BACKBONE VAR'", "+", "str", "(", "var", ")", ")", "\n", "#                   ", "\n", "", "", "else", ":", "\n", "                ", "logging", ".", "error", "(", "'NON BACKBONE VAR '", "+", "str", "(", "var", ")", ")", "\n", "optimizer_variables", ".", "append", "(", "var", ")", "\n", "\n", "", "", "logging", ".", "error", "(", "'NON DECODER VARS '", "+", "str", "(", "non_decoder_vars", ")", ")", "\n", "\n", "logging", ".", "error", "(", "'NUMBER OF ALL PARAMETERS: '", "+", "str", "(", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "for", "v", "in", "optimizer_variables", "]", ")", ")", ")", "\n", "logging", ".", "error", "(", "'NUMBER OF BACKBONE PARAMETERS: '", "+", "str", "(", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "for", "v", "in", "backbone_optimizer_variables", "]", ")", ")", ")", "\n", "\n", "# to_load_saver = tf.train.Saver(var_list=non_decoder_vars,max_to_keep=2)", "\n", "\n", "gvs", "=", "optimizer", ".", "compute_gradients", "(", "loss", ",", "var_list", "=", "optimizer_variables", ")", "\n", "\n", "capped_gvs", "=", "get_clipped_grads", "(", "gvs", ")", "\n", "\n", "network_train_op_total", "=", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ")", "\n", "\n", "\n", "# to_load_saver = tf.train.Saver(var_list=to_load_vars,max_to_keep=2)", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "2", ")", "\n", "\n", "saver_best_loss", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "2", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "\n", "if", "use_deeplab", "&", "starting_from_cityscapes", ":", "\n", "            ", "load_path", "=", "'/scratch_net/catweazle/cany/cityscapes_deeplab/model.ckpt'", "\n", "\n", "imagenet_query_saver", ".", "restore", "(", "sess", ",", "load_path", ")", "\n", "\n", "", "elif", "starting_from_imagenet", ":", "\n", "            ", "load_path1", "=", "os", ".", "path", ".", "join", "(", "'/scratch_net/catweazle/cany/resnet50/resnet_v1_50_2016_08_28/resnet_v1_50_1.ckpt'", ")", "\n", "\n", "\n", "imagenet_image_saver", ".", "restore", "(", "sess", ",", "load_path1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "load_path", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'checkpoints'", ",", "'routine-99999'", ")", "\n", "\n", "saver", ".", "restore", "(", "sess", ",", "load_path", ")", "\n", "\n", "", "sess", ".", "run", "(", "mem_net", ".", "interp_surgery", "(", "tf", ".", "global_variables", "(", ")", ")", ")", "\n", "\n", "\n", "\n", "init_step", "=", "0", "\n", "\n", "\n", "time2", "=", "0", "\n", "time3", "=", "0", "\n", "start_epoch", "=", "0", "\n", "step", "=", "init_step", "\n", "curr_lr", "=", "exp_config", ".", "learning_rate", "\n", "\n", "\n", "curr_lr", "=", "1e-05", "\n", "\n", "\n", "max_epoch", "=", "3000", "\n", "best_mean", "=", "0.2", "\n", "\n", "#            i1_value_list = []", "\n", "#            i2_value_list = []", "\n", "loss_value_list", "=", "[", "]", "\n", "occ_loss_value_list", "=", "[", "]", "\n", "recon_loss_value_list", "=", "[", "]", "\n", "reg_loss_value_list", "=", "[", "]", "\n", "\n", "side_loss_value_list", "=", "[", "]", "\n", "side_occ_loss_value_list", "=", "[", "]", "\n", "side_recon_loss_value_list", "=", "[", "]", "\n", "side_obj_loss_value_list", "=", "[", "]", "\n", "seg_v_list0", "=", "[", "]", "\n", "\n", "boundary_loss_value_list", "=", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "max_epoch", ")", ":", "\n", "\n", "\n", "            ", "if", "epoch", "%", "40", "==", "0", ":", "\n", "                ", "curr_lr", "=", "0.9", "*", "curr_lr", "\n", "\n", "", "logging", ".", "error", "(", "'EPOCH : '", "+", "str", "(", "epoch", ")", ")", "\n", "# Update learning rate if necessary", "\n", "\n", "\n", "# Iterate over batches", "\n", "random", ".", "shuffle", "(", "train_tokens", ")", "\n", "\n", "batch_indices_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "BATCH_SIZE", ")", ":", "\n", "\n", "#                    ", "\n", "#                    random.shuffle(batch_indices)", "\n", "                ", "batch_indices_list", ".", "append", "(", "batch_indices", "[", "k", ":", ":", "BATCH_SIZE", "]", ")", "\n", "#                ", "\n", "#                    logging.error(str(batch_indices_list[-1]))", "\n", "#                ", "\n", "", "generators_list", "=", "[", "]", "\n", "\n", "max_interval_between_frames", "=", "3", "\n", "for", "k", "in", "range", "(", "BATCH_SIZE", ")", ":", "\n", "                ", "generators_list", ".", "append", "(", "BackgroundGenerator", "(", "iterate_minibatches", "(", "train_tokens", ",", "max_interval_between_frames", ",", "reference_frame_index", "=", "reference_frame_index", ",", "n_frames_per_seq", "=", "n_frames_per_seq", ",", "\n", "batch_size", "=", "BATCH_SIZE", ")", ")", ")", "\n", "\n", "try", ":", "\n", "                    ", "end_of_epoch", "=", "False", "\n", "while", "(", "not", "end_of_epoch", ")", ":", "\n", "                            ", "end_of_epoch", "=", "False", "\n", "#                     ", "\n", "for", "k", "in", "range", "(", "BATCH_SIZE", ")", ":", "\n", "                                ", "temp_next", "=", "generators_list", "[", "k", "]", ".", "next", "(", ")", "\n", "if", "temp_next", "==", "None", ":", "\n", "                                    ", "end_of_epoch", "=", "True", "\n", "break", "\n", "#            ", "\n", "", "else", ":", "\n", "\n", "                                    ", "temp1", ",", "temp2", ",", "temp3", ",", "temp4", ",", "temp5", ",", "temp6", ",", "temp7", ",", "temp8", ",", "temp9", ",", "temp10", ",", "temp11", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", ",", "batch_image_objects", "=", "temp_next", "\n", "batch_image", "=", "temp1", "\n", "batch_label", "=", "temp2", "\n", "\n", "\n", "batch_bev_covers", "=", "temp5", "\n", "batch_transforms", "=", "temp6", "\n", "batch_tf_transforms1", "=", "temp7", "\n", "batch_tf_transforms2", "=", "temp8", "\n", "batch_tf_transforms3", "=", "temp9", "\n", "batch_separate_covers", "=", "temp10", "\n", "batch_coordinate_transforms", "=", "temp11", "\n", "", "", "if", "end_of_epoch", ":", "\n", "#                        ", "\n", "                                ", "break", "\n", "\n", "#                        batch_bev_covers = batch_bev_covers[...,0]", "\n", "\n", "", "if", "step", "%", "5000", "==", "4999", ":", "\n", "                                ", "saver", ".", "save", "(", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\n", "'checkpoints'", ",", "\n", "'routine'", ")", ",", "\n", "global_step", "=", "step", ")", "\n", "\n", "", "feed_dict", "=", "{", "\n", "\n", "learning_rate_placeholder", ":", "curr_lr", ",", "\n", "training_time_placeholder", ":", "True", ",", "\n", "my_training_placeholder", ":", "True", ",", "\n", "\n", "images_placeholder", ":", "batch_image", ",", "\n", "image_objects_label_placeholder", ":", "batch_image_objects", ",", "\n", "image_labels_placeholder", ":", "batch_label", ",", "\n", "covers_placeholder", ":", "batch_bev_covers", ",", "\n", "bev_transforms_placeholder", ":", "batch_transforms", ",", "\n", "separate_covers_placeholder", ":", "batch_separate_covers", ",", "\n", "ground_transforms_placeholder1", ":", "batch_tf_transforms1", ",", "\n", "ground_transforms_placeholder2", ":", "batch_tf_transforms2", ",", "\n", "ground_transforms_placeholder3", ":", "batch_tf_transforms3", ",", "\n", "coordinate_ground_transforms_placeholder", ":", "batch_coordinate_transforms", ",", "\n", "\n", "channel_bev_images_placeholder", ":", "batch_channel_bev_images", ",", "\n", "ref_bev_labels_placeholder", ":", "batch_ref_bev_labels", "\n", "\n", "\n", "}", "\n", "time1", "=", "time", ".", "time", "(", ")", "\n", "\n", "data_loading_time", "=", "time1", "-", "time3", "\n", "\n", "_", "=", "sess", ".", "run", "(", "network_train_op_total", ",", "feed_dict", "=", "feed_dict", ")", "\n", "#                       ", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "step", "%", "100", "==", "0", ":", "\n", "\n", "\n", "\n", "                                ", "loss_value", ",", "side_obj_v", ",", "recon_v", ",", "occ_v", ",", "reg_v", ",", "seg_loss_v0", ",", "mean_side_seg_loss0_v", ",", "side_occ_loss0_v", ",", "side_loss_v", "=", "sess", ".", "run", "(", "[", "loss", ",", "side_obj_loss", ",", "recon_loss", ",", "occ_loss", ",", "lossL2", ",", "mean_seg_loss0", ",", "mean_side_seg_loss0", ",", "side_occ_loss0", ",", "side_loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "#                           ", "\n", "recon_loss_value_list", ".", "append", "(", "recon_v", ")", "\n", "reg_loss_value_list", ".", "append", "(", "reg_v", ")", "\n", "occ_loss_value_list", ".", "append", "(", "occ_v", ")", "\n", "\n", "side_loss_value_list", ".", "append", "(", "side_loss_v", ")", "\n", "side_occ_loss_value_list", ".", "append", "(", "side_occ_loss0_v", ")", "\n", "side_recon_loss_value_list", ".", "append", "(", "mean_side_seg_loss0_v", ")", "\n", "side_obj_loss_value_list", ".", "append", "(", "side_obj_v", ")", "\n", "#                            side_loss_value_list.append(side_recon_v)", "\n", "loss_value_list", ".", "append", "(", "loss_value", ")", "\n", "\n", "seg_v_list0", ".", "append", "(", "seg_loss_v0", ")", "\n", "#                         ", "\n", "\n", "# Write the summaries and print an overview fairly often.", "\n", "", "if", "step", "%", "1000", "==", "0", ":", "\n", "\n", "                                ", "logging", ".", "error", "(", "'Step %d: loss= %.4f, rec= %.4f, reg= %.4f, occ= %.4f '", "%", "(", "step", ",", "np", ".", "mean", "(", "loss_value_list", ")", ",", "np", ".", "mean", "(", "recon_loss_value_list", ")", ",", "np", ".", "mean", "(", "reg_loss_value_list", ")", ",", "np", ".", "mean", "(", "occ_loss_value_list", ")", ")", ")", "\n", "\n", "logging", ".", "error", "(", "'Step %d: side loss = %.4f, side rec = %.4f, side occ = %.4f, side obj = %.4f, bound = %.4f  '", "%", "(", "step", ",", "np", ".", "mean", "(", "side_loss_value_list", ")", ",", "np", ".", "mean", "(", "side_recon_loss_value_list", ")", ",", "np", ".", "mean", "(", "side_occ_loss_value_list", ")", ",", "np", ".", "mean", "(", "side_obj_loss_value_list", ")", ",", "np", ".", "mean", "(", "boundary_loss_value_list", ")", ")", ")", "\n", "\n", "\n", "logging", ".", "error", "(", "'Time it took for optimization : '", "+", "str", "(", "time2", "-", "time1", ")", "+", "' and data loading: '", "+", "str", "(", "data_loading_time", ")", ")", "\n", "\n", "#  ", "\n", "loss_value_list", "=", "[", "]", "\n", "occ_loss_value_list", "=", "[", "]", "\n", "recon_loss_value_list", "=", "[", "]", "\n", "reg_loss_value_list", "=", "[", "]", "\n", "\n", "\n", "boundary_loss_value_list", "=", "[", "]", "\n", "seg_v_list0", "=", "[", "]", "\n", "\n", "side_loss_value_list", "=", "[", "]", "\n", "side_occ_loss_value_list", "=", "[", "]", "\n", "side_obj_loss_value_list", "=", "[", "]", "\n", "side_recon_loss_value_list", "=", "[", "]", "\n", "\n", "\n", "\n", "", "time3", "=", "time", ".", "time", "(", ")", "\n", "if", "step", "%", "exp_config", ".", "val_eval_frequency", "==", "(", "exp_config", ".", "val_eval_frequency", "-", "1", ")", ":", "\n", "\n", "#              ", "\n", "#", "\n", "                                 ", "val_res", "=", "do_eval", "(", "sess", ",", "val_tokens", ",", "\n", "my_training_placeholder", ",", "\n", "\n", "images_placeholder", ",", "\n", "\n", "image_labels_placeholder", ",", "\n", "covers_placeholder", ",", "\n", "bev_transforms_placeholder", ",", "\n", "separate_covers_placeholder", ",", "\n", "ground_transforms_placeholder1", ",", "\n", "ground_transforms_placeholder2", ",", "\n", "ground_transforms_placeholder3", ",", "\n", "coordinate_ground_transforms_placeholder", ",", "\n", "\n", "channel_bev_images_placeholder", ",", "\n", "\n", "masks", ",", "\n", "side_masks", ",", "side_occ_softmaxed", ",", "side_obj_softmaxed", ",", "\n", "projected_estimates", ",", "\n", "\n", "combined_projected_estimates", ",", "\n", "step", ",", "training_time_placeholder", ",", "val_folder_path", "=", "validation_res_path", ")", "\n", "overall_mean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "val_res", ")", ")", "\n", "logging", ".", "error", "(", "'Overall mean : '", "+", "str", "(", "overall_mean", ")", ")", "\n", "\n", "if", "overall_mean", ">", "best_mean", ":", "\n", "                                     ", "best_mean", "=", "np", ".", "copy", "(", "overall_mean", ")", "\n", "logging", ".", "error", "(", "'New best'", ")", "\n", "saver_best_loss", ".", "save", "(", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\n", "'checkpoints'", ",", "\n", "'best-'", "+", "str", "(", "np", ".", "uint8", "(", "np", ".", "floor", "(", "overall_mean", "*", "100", ")", ")", ")", ")", ",", "\n", "global_step", "=", "step", ")", "\n", "# ####                            ", "\n", "#                                ", "\n", "\n", "\n", "", "", "step", "=", "step", "+", "1", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "\n", "                    ", "logging", ".", "error", "(", "str", "(", "e", ")", ")", "\n", "\n", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.eval_iterator": [[847, 972], ["os.path.join", "multiprocessing.dummy.Pool", "sorted", "sorted", "frame_ids.append", "nusc.get", "nusc.getind", "nusc.getind", "numpy.arange", "range", "multiprocessing.dummy.Pool.map", "multiprocessing.dummy.Pool.close", "multiprocessing.dummy.Pool.join", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "numpy.ones", "numpy.ones", "range", "glob.glob", "glob.glob", "range", "range", "reference_samples.append", "nusc.get", "numpy.array", "numpy.flipud", "nuscenes_train.decode_binary_labels", "bev_labels_list.append", "range", "range", "len", "numpy.copy", "numpy.copy", "numpy.expand_dims", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.zeros", "numpy.stack", "os.path.join", "os.path.join", "frame_ids.append", "frame_ids.append", "os.path.join.split", "numpy.copy", "transforms_list.append", "PIL.Image.open", "range", "range", "int", "int", "int", "int", "numpy.copy", "numpy.copy", "numpy.copy", "utils.tensorflow_project_bev_to_bev", "numpy.reshape", "os.path.join", "pairs.append", "pairs.append", "numpy.copy", "numpy.copy", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.decode_binary_labels", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_bev_to_bev"], ["", "", "", "", "", "def", "eval_iterator", "(", "my_scene", ",", "cur_index", ",", "reference_frame_index", ",", "single_frame", "=", "False", ")", ":", "\n", "    ", "n_seqs", "=", "1", "\n", "current_dir", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "'scene'", "+", "my_scene", ")", "\n", "\n", "pool", "=", "ThreadPool", "(", "n_seqs", "*", "num_frames", ")", "\n", "\n", "all_images_list", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'img*.png'", ")", ")", ")", "\n", "all_labels_list", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'label*.png'", ")", ")", ")", "\n", "\n", "first_frame", "=", "cur_index", "\n", "\n", "frame_ids", "=", "[", "]", "\n", "frame_ids", ".", "append", "(", "first_frame", ")", "\n", "\n", "if", "single_frame", ":", "\n", "\n", "        ", "for", "frame_number", "in", "range", "(", "1", ",", "n_frames_per_seq", ")", ":", "\n", "            ", "frame_ids", ".", "append", "(", "first_frame", ")", "\n", "", "", "else", ":", "\n", "\n", "        ", "for", "frame_number", "in", "range", "(", "1", ",", "n_frames_per_seq", ")", ":", "\n", "            ", "frame_ids", ".", "append", "(", "first_frame", "+", "frame_number", ")", "\n", "\n", "", "", "pairs", "=", "[", "]", "\n", "\n", "\n", "scene_token", "=", "current_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "5", ":", "]", "\n", "\n", "my_scene", "=", "nusc", ".", "get", "(", "'scene'", ",", "scene_token", ")", "\n", "\n", "first_sample_token", "=", "my_scene", "[", "'first_sample_token'", "]", "\n", "last_sample_token", "=", "my_scene", "[", "'last_sample_token'", "]", "\n", "first_sample_ind", "=", "nusc", ".", "getind", "(", "'sample'", ",", "first_sample_token", ")", "\n", "last_sample_ind", "=", "nusc", ".", "getind", "(", "'sample'", ",", "last_sample_token", ")", "\n", "\n", "all_sample_inds", "=", "np", ".", "arange", "(", "first_sample_ind", ",", "last_sample_ind", "+", "1", ")", "\n", "\n", "transforms_list", "=", "[", "]", "\n", "reference_samples", "=", "[", "]", "\n", "\n", "#        logging.error('STARTING BEV TO BEV')", "\n", "\n", "bev_labels_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "if", "k", "<", "(", "n_seqs", "-", "1", ")", ":", "\n", "            ", "cur_sample", "=", "nusc", ".", "sample", "[", "all_sample_inds", "[", "frame_ids", "[", "reference_frame_index", "+", "k", "]", "]", "]", "\n", "next_sample", "=", "nusc", ".", "sample", "[", "all_sample_inds", "[", "frame_ids", "[", "reference_frame_index", "+", "k", "+", "1", "]", "]", "]", "\n", "\n", "my_trans", "=", "np", ".", "copy", "(", "utils", ".", "tensorflow_project_bev_to_bev", "(", "nusc", ",", "exp_config", ",", "cur_sample", ",", "next_sample", ")", ")", "\n", "my_trans", "=", "np", ".", "reshape", "(", "my_trans", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", "\n", "transforms_list", ".", "append", "(", "my_trans", ")", "\n", "\n", "", "cur_ref_sample", "=", "nusc", ".", "sample", "[", "all_sample_inds", "[", "frame_ids", "[", "reference_frame_index", "+", "k", "]", "]", "]", "\n", "reference_samples", ".", "append", "(", "cur_ref_sample", ")", "\n", "\n", "cam_token_cur", "=", "cur_ref_sample", "[", "'data'", "]", "[", "'CAM_FRONT'", "]", "\n", "cam_record_cur", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_cur", ")", "\n", "\n", "bev_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "exp_config", ".", "nuscenes_bev_root", ",", "\n", "cam_record_cur", "[", "'token'", "]", "+", "'.png'", ")", ")", ",", "np", ".", "int32", ")", "\n", "\n", "bev_label", "=", "np", ".", "flipud", "(", "bev_label", ")", "\n", "\n", "bev_label", "=", "decode_binary_labels", "(", "bev_label", ",", "exp_config", ".", "num_bev_classes", "+", "1", ")", "\n", "bev_labels_list", ".", "append", "(", "bev_label", ")", "\n", "\n", "\n", "", "if", "single_frame", ":", "\n", "\n", "        ", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "                ", "pairs", ".", "append", "(", "(", "all_images_list", "[", "frame_ids", "[", "k", "+", "m", "]", "]", ",", "all_labels_list", "[", "frame_ids", "[", "k", "+", "m", "]", "]", ",", "reference_samples", "[", "k", "]", ",", "nusc", ".", "sample", "[", "all_sample_inds", "[", "frame_ids", "[", "k", "+", "m", "]", "]", "]", ",", "True", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "                ", "pairs", ".", "append", "(", "(", "all_images_list", "[", "frame_ids", "[", "k", "+", "m", "]", "]", ",", "all_labels_list", "[", "frame_ids", "[", "k", "+", "m", "]", "]", ",", "reference_samples", "[", "k", "]", ",", "nusc", ".", "sample", "[", "all_sample_inds", "[", "frame_ids", "[", "k", "+", "m", "]", "]", "]", ",", "m", "==", "reference_frame_index", ")", ")", "\n", "\n", "\n", "", "", "", "results", "=", "pool", ".", "map", "(", "single_process", ",", "pairs", ")", "\n", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "#        logging.error('Results shape : ' + str(len(results)))", "\n", "\n", "seq_images_ar", "=", "np", ".", "zeros", "(", "(", "n_frames_per_seq", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "seq_labels_ar", "=", "np", ".", "ones", "(", "(", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "total_label_slices", ")", ")", ",", "np", ".", "float32", ")", "\n", "\n", "bev_transforms_ar1", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar2", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar3", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "\n", "coordinate_transforms_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "bev_images_ar", "=", "np", ".", "zeros", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "bev_labels_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "int", "(", "total_label_slices", ")", ")", ",", "np", ".", "float32", ")", "\n", "bev_covers_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "\n", "#        logging.error('PROJECT TO GROUND ENDED')", "\n", "for", "k", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "        ", "temp_res", "=", "results", "[", "k", "]", "\n", "\n", "if", "k", "<", "num_frames", ":", "\n", "\n", "            ", "seq_images_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "", "elif", "k", ">=", "(", "n_seqs", "*", "num_frames", "-", "(", "n_seqs", "-", "1", ")", ")", ":", "\n", "            ", "seq_images_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "#                logging.error('RETURNED GRID SHAPE ' + str(temp_res[3].shape))", "\n", "", "bev_images_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "2", "]", ")", "\n", "bev_labels_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "3", "]", ")", "\n", "bev_covers_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "copy", "(", "temp_res", "[", "4", "]", "[", "...", ",", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "bev_transforms_ar1", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "6", "]", ")", "\n", "bev_transforms_ar2", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "7", "]", ")", "\n", "bev_transforms_ar3", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "8", "]", ")", "\n", "coordinate_transforms_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "5", "]", ")", "\n", "\n", "\n", "\n", "", "return", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_labels_ar", ",", "bev_covers_ar", ",", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", ",", "bev_transforms_ar1", ",", "bev_transforms_ar2", ",", "bev_transforms_ar3", ",", "coordinate_transforms_ar", ",", "np", ".", "stack", "(", "bev_labels_list", ",", "axis", "=", "0", ")", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.overall_eval_iterator": [[974, 1013], ["nuscenes_train.eval_iterator", "numpy.squeeze", "range", "numpy.stack", "numpy.stack", "numpy.clip", "numpy.float32", "range", "numpy.concatenate", "numpy.zeros_like", "numpy.zeros_like", "range", "total_img_list.append", "total_labels_list.append", "numpy.sum", "to_return_bev_images_list.append"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.eval_iterator"], ["", "def", "overall_eval_iterator", "(", "my_scene", ",", "cur_index", ",", "reference_frame_index", ",", "single_frame", "=", "False", ")", ":", "\n", "\n", "# logging.error('SINGLE FRAME ' + str(single_frame))", "\n", "    ", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_labels_ar", ",", "bev_covers_ar", ",", "transforms_ar", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "coordinate_transforms_ar", ",", "real_ref_bev_labels", ",", "went_well", "=", "eval_iterator", "(", "my_scene", ",", "cur_index", ",", "reference_frame_index", ",", "single_frame", "=", "single_frame", ")", "\n", "\n", "\n", "squeezed_bev_covers_ar", "=", "np", ".", "squeeze", "(", "bev_covers_ar", ",", "axis", "=", "-", "1", ")", "\n", "\n", "total_img_list", "=", "[", "]", "\n", "total_labels_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "total_img", "=", "np", ".", "zeros_like", "(", "bev_images_ar", "[", "0", ",", "0", ",", "...", "]", ")", "\n", "total_labels", "=", "np", ".", "zeros_like", "(", "bev_labels_ar", "[", "0", ",", "0", ",", "...", "]", ")", "\n", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "            ", "total_img", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "=", "bev_images_ar", "[", "k", ",", "m", ",", "...", "]", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "\n", "total_labels", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "=", "bev_labels_ar", "[", "k", ",", "m", ",", "...", "]", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "\n", "\n", "", "total_img_list", ".", "append", "(", "total_img", ")", "\n", "total_labels_list", ".", "append", "(", "total_labels", ")", "\n", "\n", "", "fin_bev_images", "=", "np", ".", "stack", "(", "total_img_list", ",", "axis", "=", "0", ")", "\n", "fin_bev_labels", "=", "np", ".", "stack", "(", "total_labels_list", ",", "axis", "=", "0", ")", "\n", "fin_covers", "=", "np", ".", "clip", "(", "np", ".", "sum", "(", "bev_covers_ar", ",", "axis", "=", "1", ")", ",", "0", ",", "1", ")", "\n", "\n", "my_area", "=", "np", ".", "float32", "(", "bev_covers_ar", ">", "0.5", ")", "\n", "\n", "#        logging.error('BEV IMAGES MAX ' + str(np.max(bev_images_ar))+ ' MIN ' + str(np.min(bev_images_ar)))", "\n", "\n", "separate_bev_images", "=", "my_area", "*", "bev_images_ar", "\n", "\n", "to_return_bev_images_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "num_frames", ")", ":", "\n", "        ", "to_return_bev_images_list", ".", "append", "(", "separate_bev_images", "[", ":", ",", "k", ",", "...", "]", ")", "\n", "\n", "", "to_return_bev_images", "=", "np", ".", "concatenate", "(", "to_return_bev_images_list", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "seq_images_ar", ",", "seq_labels_ar", ",", "fin_bev_images", ",", "fin_bev_labels", ",", "fin_covers", ",", "transforms_ar", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "bev_covers_ar", ",", "coordinate_transforms_ar", ",", "to_return_bev_images", ",", "real_ref_bev_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.do_eval": [[1017, 1181], ["logging.error", "numpy.concatenate", "numpy.mean", "logging.error", "res_strings.append", "utils.write_to_txt_file", "os.path.join", "sorted", "range", "numpy.array", "all_j1s.append", "res_strings.append", "logging.error", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "os.path.join", "glob.glob", "os.path.exists", "os.makedirs", "len", "sess.run", "numpy.squeeze", "numpy.uint8", "numpy.argmax", "numpy.zeros", "range", "numpy.concatenate", "range", "scene_results.append", "numpy.squeeze", "str", "str", "os.path.join", "os.path.join", "os.path.join", "nuscenes_train.overall_eval_iterator", "numpy.uint8", "utils.get_all_stats", "sample_results.append", "numpy.array", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "nuscenes_train.overall_eval_iterator", "nuscenes_train.overall_eval_iterator", "numpy.squeeze", "numpy.squeeze", "str", "numpy.mean", "numpy.sum", "numpy.sum", "str", "len", "int", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.write_to_txt_file", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_all_stats", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator"], ["", "def", "do_eval", "(", "sess", ",", "val_tokens", ",", "\n", "my_training_placeholder", ",", "\n", "\n", "images_placeholder", ",", "\n", "\n", "image_labels_placeholder", ",", "\n", "covers_placeholder", ",", "\n", "bev_transforms_placeholder", ",", "\n", "separate_covers_placeholder", ",", "\n", "ground_transforms_placeholder1", ",", "\n", "ground_transforms_placeholder2", ",", "\n", "ground_transforms_placeholder3", ",", "\n", "coordinate_ground_transforms_placeholder", ",", "\n", "\n", "channel_bev_images_placeholder", ",", "\n", "\n", "masks", ",", "\n", "side_masks", ",", "side_occ_masks", ",", "side_obj_softmaxed", ",", "\n", "projected_estimates", ",", "\n", "\n", "combined_projected_estimates", ",", "\n", "iteration", ",", "training_time_placeholder", ",", "val_folder_path", "=", "validation_res_path", ")", ":", "\n", "\n", "\n", "    ", "logging", ".", "error", "(", "'Started evaluation'", ")", "\n", "\n", "\n", "res_strings", "=", "[", "]", "\n", "all_j1s", "=", "[", "]", "\n", "\n", "for", "my_scene_token", "in", "val_tokens", "[", "22", ":", "30", "]", ":", "\n", "\n", "        ", "scene_results", "=", "[", "]", "\n", "\n", "current_dir", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "'scene'", "+", "my_scene_token", ")", "\n", "\n", "images", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'img*.png'", ")", ")", ")", "\n", "\n", "name_of_seq", "=", "my_scene_token", "\n", "\n", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "validation_res_path", ",", "name_of_seq", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "validation_res_path", ",", "name_of_seq", ")", ")", "\n", "\n", "\n", "\n", "", "for", "frame_number", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "#            logging.error('FRAME NUMBER ' + str(frame_number))", "\n", "\n", "            ", "if", "frame_number", "<", "reference_frame_index", ":", "\n", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_labels", ",", "batch_bev_covers", ",", "batch_transforms", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "frame_number", ",", "reference_frame_index", ",", "single_frame", "=", "True", ")", "\n", "", "elif", "(", "frame_number", ">=", "(", "len", "(", "images", ")", "-", "(", "num_frames", "-", "reference_frame_index", "-", "1", ")", ")", ")", ":", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_labels", ",", "batch_bev_covers", ",", "batch_transforms", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "frame_number", ",", "reference_frame_index", ",", "single_frame", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_labels", ",", "batch_bev_covers", ",", "batch_transforms", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "int", "(", "frame_number", "-", "reference_frame_index", ")", ",", "reference_frame_index", ",", "single_frame", "=", "False", ")", "\n", "\n", "\n", "\n", "\n", "", "feed_dict", "=", "{", "\n", "\n", "\n", "training_time_placeholder", ":", "False", ",", "\n", "my_training_placeholder", ":", "False", ",", "\n", "\n", "images_placeholder", ":", "batch_image", ",", "\n", "\n", "covers_placeholder", ":", "batch_bev_covers", ",", "\n", "bev_transforms_placeholder", ":", "batch_transforms", ",", "\n", "separate_covers_placeholder", ":", "batch_separate_covers", ",", "\n", "ground_transforms_placeholder1", ":", "batch_tf_transforms1", ",", "\n", "ground_transforms_placeholder2", ":", "batch_tf_transforms2", ",", "\n", "ground_transforms_placeholder3", ":", "batch_tf_transforms3", ",", "\n", "coordinate_ground_transforms_placeholder", ":", "batch_coordinate_transforms", ",", "\n", "\n", "channel_bev_images_placeholder", ":", "batch_channel_bev_images", ",", "\n", "\n", "\n", "}", "\n", "\n", "masks_v", ",", "side_masks_v", ",", "side_occ_masks_v", ",", "projected_estimates_v", ",", "combined_projected_estimates_v", ",", "side_obj_softmaxed_v", "=", "sess", ".", "run", "(", "[", "masks", ",", "\n", "side_masks", ",", "side_occ_masks", ",", "projected_estimates", ",", "\n", "combined_projected_estimates", ",", "side_obj_softmaxed", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "#            logging.error('DEC OUTPUT ' + str(temp_dec_output.shape))", "\n", "\n", "\n", "sample_results", "=", "[", "]", "\n", "squeezed_masks", "=", "np", ".", "squeeze", "(", "masks_v", ")", "\n", "static_estimates", "=", "np", ".", "uint8", "(", "squeezed_masks", "[", "...", ",", ":", "exp_config", ".", "num_static_classes", "]", ">", "0.5", ")", "\n", "\n", "temp_object_estimates", "=", "squeezed_masks", "[", "...", ",", "exp_config", ".", "num_static_classes", ":", "]", "\n", "\n", "# logging.error('TEMP OBJ ' + str(temp_object_estimates))", "\n", "temp_object_estimates", "=", "np", ".", "argmax", "(", "temp_object_estimates", ",", "axis", "=", "-", "1", ")", "\n", "object_estimates", "=", "np", ".", "zeros", "(", "(", "temp_object_estimates", ".", "shape", "[", "0", "]", ",", "temp_object_estimates", ".", "shape", "[", "1", "]", ",", "exp_config", ".", "num_object_classes", ")", ")", "\n", "for", "k", "in", "range", "(", "exp_config", ".", "num_object_classes", ")", ":", "\n", "                ", "object_estimates", "[", "...", ",", "k", "]", "=", "np", ".", "uint8", "(", "temp_object_estimates", "==", "k", ")", "\n", "\n", "", "hard_estimates", "=", "np", ".", "concatenate", "(", "[", "static_estimates", ",", "object_estimates", "]", ",", "axis", "=", "-", "1", ")", "\n", "for", "k", "in", "range", "(", "exp_config", ".", "num_bev_classes", ")", ":", "\n", "\n", "# bev_estimate = np.squeeze(masks_v[...,k])", "\n", "# hard_estimate_list.append(np.uint8(bev_estimate > 0.5))", "\n", "\n", "                ", "all_stats", ",", "void_pixels", "=", "utils", ".", "get_all_stats", "(", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "k", "]", ")", ",", "hard_estimates", "[", "...", ",", "k", "]", ",", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "]", ")", ",", "mask_iou", "=", "exp_config", ".", "use_occlusion", ")", "\n", "sample_results", ".", "append", "(", "all_stats", ")", "\n", "\n", "", "scene_results", ".", "append", "(", "np", ".", "array", "(", "sample_results", ")", ")", "\n", "# occ_scene_results.append(occ_all_stats)", "\n", "\n", "\n", "\n", "", "seq_j1", "=", "np", ".", "array", "(", "scene_results", ")", "\n", "\n", "# logging.error('SEQ J SHAPE ' + str(seq_j1.shape))", "\n", "all_j1s", ".", "append", "(", "np", ".", "squeeze", "(", "seq_j1", ")", ")", "\n", "\n", "temp_string", "=", "\"Iteration : \"", "+", "str", "(", "iteration", ")", "+", "\" : Scene \"", "+", "str", "(", "my_scene_token", ")", "+", "\" - j1: \"", "+", "str", "(", "np", ".", "mean", "(", "seq_j1", ",", "axis", "=", "0", ")", "[", "...", ",", "0", "]", ")", "\n", "\n", "\n", "res_strings", ".", "append", "(", "temp_string", ")", "\n", "logging", ".", "error", "(", "temp_string", ")", "\n", "\n", "\n", "", "tot_j1", "=", "np", ".", "concatenate", "(", "all_j1s", ",", "axis", "=", "0", ")", "\n", "\n", "j", "=", "tot_j1", "[", "...", ",", "0", "]", "\n", "\n", "tp", "=", "tot_j1", "[", "...", ",", "2", "]", "\n", "fp", "=", "tot_j1", "[", "...", ",", "3", "]", "\n", "fn", "=", "tot_j1", "[", "...", ",", "4", "]", "\n", "tn", "=", "tot_j1", "[", "...", ",", "5", "]", "\n", "\n", "\n", "\n", "tp_rate", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "fp_rate", "=", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "tn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "\n", "tp_rate", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "fp_rate", "=", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "tn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "precision", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "\n", "take_all_j", "=", "np", ".", "mean", "(", "j", ",", "axis", "=", "0", ")", "\n", "confuse_iou", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "temp_string", "=", "'Bev framewise j : '", "+", "str", "(", "take_all_j", ")", "+", "' , Bev confuse j : '", "+", "str", "(", "confuse_iou", ")", "+", "'\\n'", "+", "' Bev tp_rate : '", "+", "str", "(", "tp_rate", ")", "+", "' Bev fp_rate : '", "+", "str", "(", "fp_rate", ")", "+", "' Bev precision : '", "+", "str", "(", "precision", ")", "+", "'\\n'", "\n", "\n", "\n", "logging", ".", "error", "(", "temp_string", ")", "\n", "res_strings", ".", "append", "(", "temp_string", ")", "\n", "utils", ".", "write_to_txt_file", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val_results.txt'", ")", ",", "res_strings", ")", "\n", "return", "confuse_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.standard_iterate_minibatches": [[1183, 1328], ["os.path.join", "multiprocessing.dummy.Pool", "sorted", "sorted", "len", "random.randint", "frame_ids.append", "range", "nusc.get", "nusc.getind", "nusc.getind", "numpy.arange", "range", "range", "multiprocessing.dummy.Pool.map", "multiprocessing.dummy.Pool.close", "multiprocessing.dummy.Pool.join", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "numpy.ones", "numpy.ones", "range", "glob.glob", "glob.glob", "frame_ids.append", "reference_samples.append", "nusc.get", "numpy.array", "numpy.flipud", "nusc.get", "numpy.array", "nuscenes_train.decode_binary_labels", "numpy.flipud", "numpy.concatenate", "bev_labels_list.append", "utils.project_to_image", "range", "len", "numpy.copy", "numpy.copy", "numpy.expand_dims", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.zeros", "numpy.stack", "multiprocessing.dummy.Pool.close", "multiprocessing.dummy.Pool.join", "logging.error", "os.path.join", "os.path.join", "random.randint", "os.path.join.split", "PIL.Image.open", "utils.get_visible_mask", "numpy.zeros", "pairs.append", "int", "int", "int", "int", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.min", "os.path.join", "numpy.expand_dims", "numpy.copy", "numpy.copy", "str", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.decode_binary_labels", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.project_to_image", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.get_visible_mask"], ["", "def", "standard_iterate_minibatches", "(", "my_scene", ",", "max_interval_between_frames", ",", "\n", "reference_frame_index", ",", "\n", "n_frames_per_seq", "=", "3", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "\n", "    ", "n_seqs", "=", "n_frames_per_seq", "-", "num_frames", "+", "1", "\n", "try", ":", "\n", "        ", "current_dir", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "'scene'", "+", "my_scene", ")", "\n", "\n", "#        logging.error('Cur directory : ' + str(current_dir))", "\n", "pool", "=", "ThreadPool", "(", "n_seqs", "*", "num_frames", ")", "\n", "\n", "\n", "all_images_list", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'img*.png'", ")", ")", ")", "\n", "all_labels_list", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'label*.png'", ")", ")", ")", "\n", "\n", "#", "\n", "\n", "n_frames_in_scene", "=", "len", "(", "all_images_list", ")", "\n", "seq_length", "=", "n_frames_in_scene", "\n", "frame_ids", "=", "[", "]", "\n", "first_frame", "=", "random", ".", "randint", "(", "0", ",", "n_frames_in_scene", "-", "n_frames_per_seq", ")", "\n", "frame_ids", ".", "append", "(", "first_frame", ")", "\n", "\n", "for", "frame_number", "in", "range", "(", "1", ",", "n_frames_per_seq", ")", ":", "\n", "            ", "frame_ids", ".", "append", "(", "random", ".", "randint", "(", "frame_ids", "[", "-", "1", "]", "+", "1", ",", "np", ".", "min", "(", "[", "seq_length", "-", "(", "n_frames_per_seq", "-", "frame_number", ")", ",", "frame_ids", "[", "-", "1", "]", "+", "max_interval_between_frames", "]", ")", ")", ")", "\n", "\n", "\n", "", "pairs", "=", "[", "]", "\n", "\n", "\n", "scene_token", "=", "current_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "5", ":", "]", "\n", "\n", "my_scene", "=", "nusc", ".", "get", "(", "'scene'", ",", "scene_token", ")", "\n", "\n", "first_sample_token", "=", "my_scene", "[", "'first_sample_token'", "]", "\n", "last_sample_token", "=", "my_scene", "[", "'last_sample_token'", "]", "\n", "first_sample_ind", "=", "nusc", ".", "getind", "(", "'sample'", ",", "first_sample_token", ")", "\n", "last_sample_ind", "=", "nusc", ".", "getind", "(", "'sample'", ",", "last_sample_token", ")", "\n", "\n", "all_sample_inds", "=", "np", ".", "arange", "(", "first_sample_ind", ",", "last_sample_ind", "+", "1", ")", "\n", "\n", "reference_samples", "=", "[", "]", "\n", "\n", "#        logging.error('STARTING BEV TO BEV')", "\n", "\n", "bev_labels_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "\n", "\n", "            ", "cur_ref_sample", "=", "nusc", ".", "sample", "[", "all_sample_inds", "[", "frame_ids", "[", "k", "+", "reference_frame_index", "]", "]", "]", "\n", "reference_samples", ".", "append", "(", "cur_ref_sample", ")", "\n", "\n", "cam_token_cur", "=", "cur_ref_sample", "[", "'data'", "]", "[", "'CAM_FRONT'", "]", "\n", "cam_record_cur", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_cur", ")", "\n", "\n", "bev_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "exp_config", ".", "nuscenes_bev_root", ",", "\n", "cam_record_cur", "[", "'token'", "]", "+", "'.png'", ")", ")", ",", "np", ".", "int32", ")", "\n", "\n", "bev_label", "=", "np", ".", "flipud", "(", "bev_label", ")", "\n", "\n", "cs_record_cur", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "cam_record_cur", "[", "'calibrated_sensor_token'", "]", ")", "\n", "cam_intrinsic", "=", "np", ".", "array", "(", "cs_record_cur", "[", "'camera_intrinsic'", "]", ")", "\n", "\n", "bev_label", "=", "decode_binary_labels", "(", "bev_label", ",", "exp_config", ".", "num_bev_classes", "+", "1", ")", "\n", "vis_mask", "=", "np", ".", "flipud", "(", "utils", ".", "get_visible_mask", "(", "cam_intrinsic", ",", "cam_record_cur", "[", "'width'", "]", ",", "\n", "exp_config", ".", "map_extents", ",", "exp_config", ".", "map_resolution", ")", ")", "\n", "\n", "# logging.error('VIS MASK ' + str(vis_mask.shape))", "\n", "# logging.error('BEV LABEL MASK ' + str(bev_label.shape))", "\n", "bev_label", "=", "np", ".", "concatenate", "(", "[", "bev_label", ",", "np", ".", "expand_dims", "(", "vis_mask", ",", "axis", "=", "-", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "bev_labels_list", ".", "append", "(", "bev_label", ")", "\n", "\n", "\n", "# np.savez('/home/cany/image_trans_stuff.npy',cs_record_cur,cam_intrinsic)", "\n", "\n", "to_image_transform", "=", "utils", ".", "project_to_image", "(", "exp_config", ",", "np", ".", "zeros", "(", "(", "exp_config", ".", "project_base_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_base_patch_size", "[", "0", "]", ")", ")", ",", "cs_record_cur", ",", "cam_intrinsic", ")", "\n", "\n", "\n", "\n", "#        logging.error('BEV TO BEV ENDED')", "\n", "\n", "\n", "\n", "#        my_sample = nusc.sample[scene_samples[m]]", "\n", "", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "                ", "pairs", ".", "append", "(", "(", "all_images_list", "[", "frame_ids", "[", "k", "+", "m", "]", "]", ",", "all_labels_list", "[", "frame_ids", "[", "k", "+", "m", "]", "]", ",", "reference_samples", "[", "k", "]", ",", "nusc", ".", "sample", "[", "all_sample_inds", "[", "frame_ids", "[", "k", "+", "m", "]", "]", "]", ",", "m", "==", "reference_frame_index", ")", ")", "\n", "\n", "\n", "", "", "results", "=", "pool", ".", "map", "(", "single_process", ",", "pairs", ")", "\n", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "#        logging.error('Results shape : ' + str(len(results)))", "\n", "\n", "seq_images_ar", "=", "np", ".", "zeros", "(", "(", "n_frames_per_seq", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "seq_labels_ar", "=", "np", ".", "ones", "(", "(", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "total_label_slices", ")", ")", ",", "np", ".", "float32", ")", "\n", "\n", "bev_transforms_ar1", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar2", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar3", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "coordinate_transforms_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "bev_images_ar", "=", "np", ".", "zeros", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "bev_labels_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "int", "(", "total_label_slices", ")", ")", ",", "np", ".", "float32", ")", "\n", "bev_covers_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "\n", "#        logging.error('PROJECT TO GROUND ENDED')", "\n", "for", "k", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "            ", "temp_res", "=", "results", "[", "k", "]", "\n", "\n", "if", "k", "<", "num_frames", ":", "\n", "\n", "                ", "seq_images_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "", "elif", "k", ">=", "(", "n_seqs", "*", "num_frames", "-", "(", "n_seqs", "-", "1", ")", ")", ":", "\n", "                ", "seq_images_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "#                logging.error('RETURNED GRID SHAPE ' + str(temp_res[3].shape))", "\n", "", "bev_images_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "2", "]", ")", "\n", "bev_labels_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "3", "]", ")", "\n", "bev_covers_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "copy", "(", "temp_res", "[", "4", "]", "[", "...", ",", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "bev_transforms_ar1", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "6", "]", ")", "\n", "bev_transforms_ar2", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "7", "]", ")", "\n", "bev_transforms_ar3", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "8", "]", ")", "\n", "coordinate_transforms_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "5", "]", ")", "\n", "\n", "\n", "# if n_seqs > 1:", "\n", "\n", "#     return seq_images_ar, seq_labels_ar,bev_images_ar,bev_labels_ar,bev_covers_ar,np.stack(transforms_list,axis=0), bev_transforms_ar1,bev_transforms_ar2,bev_transforms_ar3,coordinate_transforms_ar,np.stack(bev_labels_list,axis=0),True", "\n", "# else:", "\n", "", "return", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_labels_ar", ",", "bev_covers_ar", ",", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", ",", "bev_transforms_ar1", ",", "bev_transforms_ar2", ",", "bev_transforms_ar3", ",", "coordinate_transforms_ar", ",", "np", ".", "stack", "(", "bev_labels_list", ",", "axis", "=", "0", ")", ",", "to_image_transform", ",", "True", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "logging", ".", "error", "(", "'Exception '", "+", "str", "(", "e", ")", ")", "\n", "\n", "return", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.iterate_minibatches": [[1331, 1404], ["len", "range", "nuscenes_train.standard_iterate_minibatches", "numpy.squeeze", "range", "numpy.stack", "numpy.stack", "numpy.clip", "numpy.float32", "range", "numpy.concatenate", "cv2.warpPerspective", "cv2.resize", "numpy.expand_dims", "numpy.concatenate", "numpy.zeros_like", "numpy.zeros_like", "range", "total_img_list.append", "total_labels_list.append", "numpy.sum", "to_return_bev_images_list.append", "numpy.squeeze", "numpy.float32", "int", "int", "numpy.clip", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.standard_iterate_minibatches"], ["", "", "def", "iterate_minibatches", "(", "train_tokens", ",", "max_interval_between_frames", ",", "reference_frame_index", ",", "n_frames_per_seq", "=", "3", ",", "\n", "batch_size", "=", "BATCH_SIZE", ")", ":", "\n", "    ", "'''\n    Function to create mini batches from the dataset of a certain batch size \n    Returns tuple of   ( t x n x h x w x 3, t x n x h x w x 1)  where t is  n_frames_per_seq and n is batch size\n    This way it is easier to slice per frame number    \n    '''", "\n", "\n", "n_videos", "=", "len", "(", "train_tokens", ")", "\n", "\n", "\n", "\n", "\n", "for", "b_i", "in", "range", "(", "0", ",", "n_videos", ",", "batch_size", ")", ":", "\n", "\n", "        ", "if", "b_i", "+", "batch_size", ">", "n_videos", ":", "\n", "            ", "continue", "\n", "\n", "", "\"\"\"\n        Which video sequences will be in this batch\n        \"\"\"", "\n", "\n", "#        batch_indices = np.sort(random_indices[b_i:b_i+batch_size])", "\n", "\n", "\n", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_labels_ar", ",", "bev_covers_ar", ",", "transforms_ar", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "coordinate_transforms_ar", ",", "real_ref_bev_labels", ",", "to_image_transform", ",", "went_well", "=", "standard_iterate_minibatches", "(", "train_tokens", "[", "b_i", "]", ",", "max_interval_between_frames", ",", "\n", "\n", "reference_frame_index", ",", "\n", "n_frames_per_seq", "=", "n_frames_per_seq", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "\n", "if", "not", "went_well", ":", "\n", "            ", "continue", "\n", "", "squeezed_bev_covers_ar", "=", "np", ".", "squeeze", "(", "bev_covers_ar", ",", "axis", "=", "-", "1", ")", "\n", "\n", "total_img_list", "=", "[", "]", "\n", "total_labels_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "            ", "total_img", "=", "np", ".", "zeros_like", "(", "bev_images_ar", "[", "0", ",", "0", ",", "...", "]", ")", "\n", "total_labels", "=", "np", ".", "zeros_like", "(", "bev_labels_ar", "[", "0", ",", "0", ",", "...", "]", ")", "\n", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "                ", "total_img", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "=", "bev_images_ar", "[", "k", ",", "m", ",", "...", "]", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "\n", "total_labels", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "=", "bev_labels_ar", "[", "k", ",", "m", ",", "...", "]", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "\n", "\n", "", "total_img_list", ".", "append", "(", "total_img", ")", "\n", "total_labels_list", ".", "append", "(", "total_labels", ")", "\n", "\n", "", "fin_bev_images", "=", "np", ".", "stack", "(", "total_img_list", ",", "axis", "=", "0", ")", "\n", "fin_bev_labels", "=", "np", ".", "stack", "(", "total_labels_list", ",", "axis", "=", "0", ")", "\n", "fin_covers", "=", "np", ".", "clip", "(", "np", ".", "sum", "(", "bev_covers_ar", ",", "axis", "=", "1", ")", ",", "0", ",", "1", ")", "\n", "\n", "my_area", "=", "np", ".", "float32", "(", "bev_covers_ar", ">", "0.5", ")", "\n", "\n", "#        logging.error('BEV IMAGES MAX ' + str(np.max(bev_images_ar))+ ' MIN ' + str(np.min(bev_images_ar)))", "\n", "\n", "separate_bev_images", "=", "my_area", "*", "bev_images_ar", "\n", "\n", "to_return_bev_images_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "num_frames", ")", ":", "\n", "            ", "to_return_bev_images_list", ".", "append", "(", "separate_bev_images", "[", ":", ",", "k", ",", "...", "]", ")", "\n", "\n", "", "to_return_bev_images", "=", "np", ".", "concatenate", "(", "to_return_bev_images_list", ",", "axis", "=", "-", "1", ")", "\n", "\n", "image_objects", "=", "cv2", ".", "warpPerspective", "(", "np", ".", "squeeze", "(", "real_ref_bev_labels", "[", "...", ",", "4", ":", "-", "2", "]", ")", ",", "to_image_transform", ",", "exp_config", ".", "original_image_size", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "image_objects", "=", "cv2", ".", "resize", "(", "image_objects", ",", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "image_objects", "=", "np", ".", "expand_dims", "(", "np", ".", "float32", "(", "image_objects", ">", "0.5", ")", ",", "axis", "=", "0", ")", "\n", "\n", "image_objects", "=", "np", ".", "concatenate", "(", "[", "image_objects", ",", "np", ".", "clip", "(", "1", "-", "np", ".", "sum", "(", "image_objects", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "0", ",", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "yield", "seq_images_ar", ",", "seq_labels_ar", ",", "fin_bev_images", ",", "fin_bev_labels", ",", "fin_covers", ",", "transforms_ar", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "bev_covers_ar", ",", "coordinate_transforms_ar", ",", "to_return_bev_images", ",", "real_ref_bev_labels", ",", "image_objects", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_train.main": [[1405, 1416], ["shutil.copy", "nuscenes_train.run_training", "tensorflow.gfile.Exists", "tensorflow.gfile.MakeDirs"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.run_training"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "continue_run", "=", "True", "\n", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "log_dir", ")", ":", "\n", "        ", "tf", ".", "gfile", ".", "MakeDirs", "(", "log_dir", ")", "\n", "continue_run", "=", "False", "\n", "\n", "# Copy experiment config file", "\n", "", "shutil", ".", "copy", "(", "exp_config", ".", "__file__", ",", "log_dir", ")", "\n", "\n", "run_training", "(", "continue_run", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_test.decode_binary_labels": [[113, 116], ["numpy.power", "numpy.uint8", "numpy.arange", "numpy.expand_dims", "numpy.reshape"], "function", ["None"], ["def", "decode_binary_labels", "(", "labels", ",", "nclass", ")", ":", "\n", "    ", "bits", "=", "np", ".", "power", "(", "2", ",", "np", ".", "arange", "(", "nclass", ")", ")", "\n", "return", "np", ".", "uint8", "(", "(", "np", ".", "expand_dims", "(", "labels", ",", "axis", "=", "-", "1", ")", "&", "np", ".", "reshape", "(", "bits", ",", "(", "1", ",", "1", ",", "-", "1", ")", ")", ")", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_test.list_directories": [[117, 119], ["os.listdir", "os.path.isdir", "os.path.join"], "function", ["None"], ["", "def", "list_directories", "(", "path", ")", ":", "\n", "     ", "return", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "path", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_test.single_process": [[121, 228], ["PIL.Image.open", "Image.open.load", "PIL.Image.open", "np.array.load", "numpy.array", "numpy.array", "numpy.zeros", "numpy.copy", "range", "nusc.get", "nusc.get", "numpy.array", "nusc.get", "nusc.get", "nusc.get", "nusc.get", "numpy.float32", "numpy.stack", "utils.tensorflow_project_to_ground", "utils.tensorflow_project_to_ground", "utils.tensorflow_project_to_ground", "utils.project_to_ground", "numpy.zeros", "numpy.copy", "range", "cv2.resize", "cv2.resize", "numpy.zeros", "numpy.copy", "range", "numpy.copy", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.copy", "numpy.copy", "utils.inception_preprocess", "utils.inception_preprocess", "numpy.float32", "numpy.float32", "int", "int", "int", "int", "int", "numpy.reshape", "numpy.reshape", "numpy.reshape", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.inception_preprocess", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.inception_preprocess"], ["", "def", "single_process", "(", "pair", ")", ":", "\n", "\n", "\n", "    ", "camera_channel", "=", "'CAM_FRONT'", "\n", "image_path", ",", "label_path", ",", "my_reference_sample", ",", "my_current_sample", ",", "is_reference_sample", "=", "pair", "\n", "\n", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img", ".", "load", "(", ")", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "label", ".", "load", "(", ")", "\n", "\n", "image", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "label", "=", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "orig_label", "=", "np", ".", "zeros", "(", "(", "label", ".", "shape", "[", "0", "]", ",", "label", ".", "shape", "[", "1", "]", ",", "int", "(", "total_label_slices", ")", ")", ")", "\n", "\n", "rem", "=", "np", ".", "copy", "(", "label", ")", "\n", "#    logging.error('Rem shape ' + str(rem.shape))", "\n", "for", "k", "in", "range", "(", "total_label_slices", ")", ":", "\n", "\n", "        ", "temp_rem", "=", "rem", "//", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "#        logging.error('TEMP REM SHAPE : ' + str(temp_rem.shape))", "\n", "\n", "orig_label", "[", ":", ",", ":", ",", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", "]", "=", "np", ".", "copy", "(", "temp_rem", ")", "\n", "\n", "rem", "=", "rem", "%", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "\n", "\n", "", "cam_token_ref", "=", "my_reference_sample", "[", "'data'", "]", "[", "camera_channel", "]", "\n", "cam_record_ref", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_ref", ")", "\n", "\n", "cs_record_ref", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "cam_record_ref", "[", "'calibrated_sensor_token'", "]", ")", "\n", "cam_intrinsic", "=", "np", ".", "array", "(", "cs_record_ref", "[", "'camera_intrinsic'", "]", ")", "\n", "\n", "poserecord_ref", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "cam_record_ref", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "'''\n    '''", "\n", "cam_token_cur", "=", "my_current_sample", "[", "'data'", "]", "[", "camera_channel", "]", "\n", "cam_record_cur", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_cur", ")", "\n", "\n", "cs_record_cur", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "cam_record_cur", "[", "'calibrated_sensor_token'", "]", ")", "\n", "\n", "poserecord_cur", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "cam_record_cur", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "# bev_label = Image.open( os.path.join('/srv/beegfs02/scratch/tracezuerich/data/cany/bev_labels',  ", "\n", "#                            cam_record_cur['token'] + '.png'))", "\n", "\n", "vis_mask", "=", "np", ".", "float32", "(", "orig_label", "[", "...", ",", "exp_config", ".", "num_classes", "]", ")", "\n", "vis_mask", "=", "np", ".", "stack", "(", "[", "vis_mask", ",", "vis_mask", ",", "vis_mask", "]", ",", "axis", "=", "-", "1", ")", "\n", "warp_trans1", "=", "utils", ".", "tensorflow_project_to_ground", "(", "exp_config", ",", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "4", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "4", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "poserecord_ref", ",", "cs_record_ref", ",", "poserecord_cur", ",", "cs_record_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "warp_trans2", "=", "utils", ".", "tensorflow_project_to_ground", "(", "exp_config", ",", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "8", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "8", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "poserecord_ref", ",", "cs_record_ref", ",", "poserecord_cur", ",", "cs_record_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "warp_trans3", "=", "utils", ".", "tensorflow_project_to_ground", "(", "exp_config", ",", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "16", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "16", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "poserecord_ref", ",", "cs_record_ref", ",", "poserecord_cur", ",", "cs_record_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "\n", "\n", "\n", "warped_img", ",", "warped_cover", ",", "warped_label", ",", "coordinate_transform", "=", "utils", ".", "project_to_ground", "(", "exp_config", ",", "image", ",", "label", ",", "poserecord_ref", ",", "cs_record_ref", ",", "poserecord_cur", ",", "cs_record_cur", ",", "cam_intrinsic", ",", "vis_mask", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "\n", "bev_label", "=", "np", ".", "zeros", "(", "(", "warped_label", ".", "shape", "[", "0", "]", ",", "warped_label", ".", "shape", "[", "1", "]", ",", "int", "(", "total_label_slices", ")", ")", ")", "\n", "\n", "rem", "=", "np", ".", "copy", "(", "warped_label", ")", "\n", "#    logging.error('Rem shape ' + str(rem.shape))", "\n", "for", "k", "in", "range", "(", "total_label_slices", ")", ":", "\n", "\n", "        ", "temp_rem", "=", "rem", "//", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "#        logging.error('TEMP REM SHAPE : ' + str(temp_rem.shape))", "\n", "\n", "bev_label", "[", ":", ",", ":", ",", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", "]", "=", "np", ".", "copy", "(", "temp_rem", ")", "\n", "\n", "rem", "=", "rem", "%", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "\n", "\n", "\n", "", "new_sizes", "=", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ")", "\n", "cropped_label", "=", "cv2", ".", "resize", "(", "label", ",", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "cropped_img", "=", "cv2", ".", "resize", "(", "image", ",", "new_sizes", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "temp_label", "=", "np", ".", "zeros", "(", "(", "cropped_label", ".", "shape", "[", "0", "]", ",", "cropped_label", ".", "shape", "[", "1", "]", ",", "int", "(", "total_label_slices", ")", ")", ")", "\n", "\n", "rem", "=", "np", ".", "copy", "(", "cropped_label", ")", "\n", "#    logging.error('Rem shape ' + str(rem.shape))", "\n", "for", "k", "in", "range", "(", "total_label_slices", ")", ":", "\n", "\n", "        ", "temp_rem", "=", "rem", "//", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "#        logging.error('TEMP REM SHAPE : ' + str(temp_rem.shape))", "\n", "\n", "temp_label", "[", ":", ",", ":", ",", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", "]", "=", "np", ".", "copy", "(", "temp_rem", ")", "\n", "\n", "rem", "=", "rem", "%", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "\n", "\n", "", "if", "not", "use_deeplab", ":", "\n", "#        pre_img = inception_preprocess(cropped_img)", "\n", "#        ", "\n", "        ", "pre_warped_img", "=", "utils", ".", "inception_preprocess", "(", "warped_img", ")", "\n", "pre_img", "=", "cropped_img", "-", "means_image", "\n", "#        pre_warped_img=warped_img - means_image ", "\n", "\n", "", "else", ":", "\n", "        ", "pre_img", "=", "cropped_img", "\n", "pre_warped_img", "=", "utils", ".", "inception_preprocess", "(", "warped_img", ")", "\n", "\n", "#    logging.error('Pre img shape ' + str(pre_img.shape))", "\n", "\n", "", "return", "(", "pre_img", ",", "np", ".", "float32", "(", "temp_label", ")", ",", "pre_warped_img", ",", "np", ".", "float32", "(", "bev_label", ")", ",", "warped_cover", ",", "coordinate_transform", ",", "np", ".", "reshape", "(", "warp_trans1", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ",", "np", ".", "reshape", "(", "warp_trans2", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ",", "np", ".", "reshape", "(", "warp_trans3", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_test.run_training": [[231, 412], ["logging.error", "logging.error", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.placeholder", "tensorflow.placeholder", "deeplab.common.ModelOptions", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.constant", "mem_net.image_encoder", "mem_net.my_side_decoder", "range", "mem_net.my_object_side_decoder", "tensorflow.contrib.image.transform", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.contrib.image.transform", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.contrib.image.transform", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.contrib.image.transform", "logging.error", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.concat", "mem_net.my_bev_object_decoder", "tensorflow.concat", "tensorflow.train.Saver", "tensorflow.global_variables_initializer", "sess.run", "tf.train.Saver.restore", "sess.run", "nuscenes_test.do_eval", "numpy.mean", "logging.error", "str", "str", "int", "int", "len", "reference_image_endpoints.append", "tensorflow.slice", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.slice", "mem_net.interp_surgery", "numpy.array", "numpy.ones", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "int", "int", "tensorflow.slice", "tensorflow.slice", "int", "int", "tensorflow.slice", "str", "tensorflow.slice", "int", "int", "tensorflow.global_variables", "str", "numpy.max", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.image_encoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_side_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_object_side_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_bev_object_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.do_eval", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.interp_surgery"], ["", "def", "run_training", "(", "continue_run", ")", ":", "\n", "\n", "\n", "    ", "logging", ".", "error", "(", "'EXPERIMENT : '", "+", "str", "(", "exp_config", ".", "experiment_name", ")", ")", "\n", "logging", ".", "error", "(", "'THIS IS : '", "+", "str", "(", "log_dir", ")", ")", "\n", "\n", "\n", "val_tokens", "=", "token_splits", ".", "VAL_SCENES", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "#        with tf.Graph().as_default():", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "# Generate placeholders for the images and labels.", "\n", "\n", "\n", "\n", "        ", "training_time_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "\n", "my_training_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "\n", "# Build a Graph that computes predictions from the inference model.", "\n", "my_model_options", "=", "common", ".", "ModelOptions", "(", "{", "common", ".", "OUTPUT_TYPE", ":", "10", "}", ",", "crop_size", "=", "exp_config", ".", "camera_image_patch_size", ",", "atrous_rates", "=", "[", "6", ",", "12", ",", "18", "]", ")", "\n", "\n", "image_tensor_shape", "=", "[", "n_frames_per_seq", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "3", "]", "\n", "image_mask_tensor_shape", "=", "[", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "total_label_slices", "]", "\n", "\n", "images_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "image_tensor_shape", ",", "name", "=", "'images'", ")", "\n", "\n", "image_labels_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "image_mask_tensor_shape", ",", "name", "=", "'image_labels'", ")", "\n", "\n", "covers_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", "]", ",", "name", "=", "'covers'", ")", "\n", "\n", "separate_covers_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", "]", ",", "name", "=", "'separate_covers'", ")", "\n", "\n", "bev_transforms_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "np", ".", "max", "(", "[", "1", ",", "n_seqs", "-", "1", "]", ")", ",", "8", "]", ",", "name", "=", "'bev_transforms'", ")", "\n", "\n", "ground_transforms_placeholder1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms1'", ")", "\n", "\n", "ground_transforms_placeholder2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms2'", ")", "\n", "\n", "ground_transforms_placeholder3", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms3'", ")", "\n", "\n", "\n", "coordinate_ground_transforms_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "3", ",", "3", "]", ",", "name", "=", "'coordinate_ground_transforms'", ")", "\n", "\n", "channel_bev_images_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "3", "*", "num_frames", "]", ",", "name", "=", "'channel_images'", ")", "\n", "\n", "\n", "no_mask_tensor", "=", "tf", ".", "constant", "(", "-", "np", ".", "ones", "(", "(", "1", ",", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "exp_config", ".", "feature_downsample", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "exp_config", ".", "feature_downsample", ")", ",", "int", "(", "exp_config", ".", "num_classes", "+", "1", ")", ")", ",", "np", ".", "float32", ")", ")", "\n", "\n", "'''\n        Extract features from the CAMERA IMAGE\n        '''", "\n", "\n", "image_total_backbone_out", ",", "image_total_relative_endpoints", ",", "image_total_end_points", "=", "mem_net", ".", "image_encoder", "(", "images_placeholder", ",", "no_mask_tensor", ",", "my_model_options", ",", "downsample_stages", "=", "4", ",", "use_deeplab", "=", "use_deeplab", ",", "is_training", "=", "training_time_placeholder", ",", "reuse", "=", "False", ")", "\n", "\n", "total_input_image", "=", "image_total_backbone_out", "\n", "\n", "side_mask_logits", ",", "side_occ_est_logits", ",", "side_masks", ",", "side_occ_softmaxed", "=", "mem_net", ".", "my_side_decoder", "(", "image_total_relative_endpoints", ",", "total_input_image", ",", "reuse", "=", "False", ")", "\n", "\n", "reference_image_endpoints", "=", "[", "]", "\n", "for", "endi", "in", "range", "(", "len", "(", "image_total_relative_endpoints", ")", ")", ":", "\n", "            ", "reference_image_endpoints", ".", "append", "(", "tf", ".", "slice", "(", "image_total_relative_endpoints", "[", "endi", "]", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ")", "\n", "\n", "", "side_obj_logits", ",", "side_obj_softmaxed", "=", "mem_net", ".", "my_object_side_decoder", "(", "reference_image_endpoints", ",", "tf", ".", "slice", "(", "total_input_image", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "exp_config", ",", "apply_softmax", "=", "True", ",", "reuse", "=", "False", ")", "\n", "\n", "\n", "projected_estimates", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "tf", ".", "concat", "(", "[", "side_masks", ",", "side_occ_softmaxed", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform'", "\n", ")", "\n", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "combined_projected_estimates", "=", "tf", ".", "reduce_max", "(", "projected_estimates", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "projected_obj_estimates", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "side_obj_softmaxed", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "reference_frame_index", ",", "0", "]", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform'", "\n", ")", "\n", "\n", "combined_projected_estimates", "=", "tf", ".", "concat", "(", "[", "combined_projected_estimates", ",", "projected_obj_estimates", "]", ",", "axis", "=", "-", "1", ")", "\n", "resized_combined_projected_estimates", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_projected_estimates", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "8", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "8", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "\n", "'''\n        Scale the coordinates to the original image so that the transformation is compatible\n        '''", "\n", "\n", "\n", "all_bev_total_backbone_out", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "image_total_relative_endpoints", "[", "0", "]", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder2", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform_end1'", "\n", ")", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "combined_back_out", "=", "tf", ".", "reduce_max", "(", "all_bev_total_backbone_out", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "combined_back_out", "=", "tf", ".", "concat", "(", "[", "combined_back_out", ",", "tf", ".", "slice", "(", "all_bev_total_backbone_out", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "bev_total_backbone_out", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_back_out", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "8", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "8", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "all_bev_end2", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "image_total_relative_endpoints", "[", "1", "]", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform_end2'", "\n", ")", "\n", "\n", "logging", ".", "error", "(", "'ENDPOINT WARPED '", "+", "str", "(", "all_bev_end2", ")", ")", "\n", "\n", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "combined_end", "=", "tf", ".", "reduce_max", "(", "all_bev_end2", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "combined_end", "=", "tf", ".", "concat", "(", "[", "combined_end", ",", "tf", ".", "slice", "(", "all_bev_end2", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "combined_end", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_end", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "4", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "bev_total_relative_endpoints", "=", "[", "combined_end", "]", "\n", "\n", "total_input", "=", "tf", ".", "concat", "(", "[", "resized_combined_projected_estimates", ",", "bev_total_backbone_out", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "static_logits", ",", "static_masks", ",", "object_logits", ",", "object_masks", "=", "mem_net", ".", "my_bev_object_decoder", "(", "bev_total_relative_endpoints", ",", "total_input", ",", "exp_config", ",", "apply_softmax", "=", "True", ",", "reuse", "=", "False", ")", "\n", "masks", "=", "tf", ".", "concat", "(", "[", "static_masks", ",", "object_masks", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "2", ")", "\n", "\n", "# saver_best_loss = tf.train.Saver(max_to_keep=2)", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "load_path", "=", "exp_config", ".", "load_path", "\n", "\n", "\n", "\n", "\n", "saver", ".", "restore", "(", "sess", ",", "load_path", ")", "\n", "\n", "sess", ".", "run", "(", "mem_net", ".", "interp_surgery", "(", "tf", ".", "global_variables", "(", ")", ")", ")", "\n", "\n", "val_res", "=", "do_eval", "(", "sess", ",", "val_tokens", ",", "\n", "my_training_placeholder", ",", "\n", "\n", "images_placeholder", ",", "\n", "\n", "image_labels_placeholder", ",", "\n", "covers_placeholder", ",", "\n", "bev_transforms_placeholder", ",", "\n", "separate_covers_placeholder", ",", "\n", "ground_transforms_placeholder1", ",", "\n", "ground_transforms_placeholder2", ",", "\n", "ground_transforms_placeholder3", ",", "\n", "coordinate_ground_transforms_placeholder", ",", "\n", "\n", "channel_bev_images_placeholder", ",", "\n", "\n", "masks", ",", "\n", "side_masks", ",", "side_occ_softmaxed", ",", "side_obj_softmaxed", ",", "\n", "projected_estimates", ",", "\n", "projected_obj_estimates", ",", "\n", "combined_projected_estimates", ",", "\n", "0", ",", "training_time_placeholder", ",", "val_folder_path", "=", "validation_res_path", ")", "\n", "overall_mean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "val_res", ")", ")", "\n", "logging", ".", "error", "(", "'Overall mean : '", "+", "str", "(", "overall_mean", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_test.eval_iterator": [[414, 534], ["os.path.join", "multiprocessing.dummy.Pool", "sorted", "sorted", "frame_ids.append", "nusc.get", "nusc.getind", "nusc.getind", "numpy.arange", "range", "multiprocessing.dummy.Pool.map", "multiprocessing.dummy.Pool.close", "multiprocessing.dummy.Pool.join", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "numpy.ones", "numpy.ones", "range", "glob.glob", "glob.glob", "range", "reference_samples.append", "nusc.get", "numpy.array", "numpy.flipud", "nuscenes_test.decode_binary_labels", "bev_labels_list.append", "range", "range", "len", "numpy.copy", "numpy.copy", "numpy.expand_dims", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.zeros", "numpy.stack", "os.path.join", "os.path.join", "frame_ids.append", "range", "range", "os.path.join.split", "PIL.Image.open", "range", "range", "int", "int", "int", "int", "numpy.copy", "numpy.copy", "numpy.copy", "frame_ids.append", "frame_ids.append", "os.path.join", "pairs.append", "pairs.append", "numpy.copy", "numpy.copy", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.decode_binary_labels"], ["", "", "def", "eval_iterator", "(", "my_scene", ",", "cur_index", ",", "reference_frame_index", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "False", ")", ":", "\n", "    ", "n_seqs", "=", "1", "\n", "current_dir", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "'scene'", "+", "my_scene", ")", "\n", "\n", "pool", "=", "ThreadPool", "(", "n_seqs", "*", "num_frames", ")", "\n", "\n", "all_images_list", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'img*.png'", ")", ")", ")", "\n", "all_labels_list", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'label*.png'", ")", ")", ")", "\n", "\n", "first_frame", "=", "cur_index", "\n", "\n", "\n", "frame_ids", "=", "[", "]", "\n", "frame_ids", ".", "append", "(", "first_frame", ")", "\n", "\n", "if", "single_frame", ":", "\n", "\n", "        ", "for", "frame_number", "in", "range", "(", "1", ",", "n_frames_per_seq", ")", ":", "\n", "            ", "frame_ids", ".", "append", "(", "first_frame", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "apply_interval", ":", "\n", "            ", "for", "frame_number", "in", "range", "(", "1", ",", "n_frames_per_seq", ")", ":", "\n", "                ", "frame_ids", ".", "append", "(", "first_frame", "+", "frame_interval", "*", "frame_number", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "for", "frame_number", "in", "range", "(", "1", ",", "n_frames_per_seq", ")", ":", "\n", "                ", "frame_ids", ".", "append", "(", "first_frame", "+", "frame_number", ")", "\n", "\n", "", "", "", "pairs", "=", "[", "]", "\n", "\n", "\n", "scene_token", "=", "current_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "5", ":", "]", "\n", "\n", "my_scene", "=", "nusc", ".", "get", "(", "'scene'", ",", "scene_token", ")", "\n", "\n", "first_sample_token", "=", "my_scene", "[", "'first_sample_token'", "]", "\n", "last_sample_token", "=", "my_scene", "[", "'last_sample_token'", "]", "\n", "first_sample_ind", "=", "nusc", ".", "getind", "(", "'sample'", ",", "first_sample_token", ")", "\n", "last_sample_ind", "=", "nusc", ".", "getind", "(", "'sample'", ",", "last_sample_token", ")", "\n", "\n", "all_sample_inds", "=", "np", ".", "arange", "(", "first_sample_ind", ",", "last_sample_ind", "+", "1", ")", "\n", "\n", "reference_samples", "=", "[", "]", "\n", "\n", "bev_labels_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "cur_ref_sample", "=", "nusc", ".", "sample", "[", "all_sample_inds", "[", "frame_ids", "[", "k", "+", "reference_frame_index", "]", "]", "]", "\n", "reference_samples", ".", "append", "(", "cur_ref_sample", ")", "\n", "\n", "cam_token_cur", "=", "cur_ref_sample", "[", "'data'", "]", "[", "'CAM_FRONT'", "]", "\n", "cam_record_cur", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_cur", ")", "\n", "\n", "bev_label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "exp_config", ".", "nuscenes_bev_root", ",", "\n", "cam_record_cur", "[", "'token'", "]", "+", "'.png'", ")", ")", ",", "np", ".", "int32", ")", "\n", "\n", "bev_label", "=", "np", ".", "flipud", "(", "bev_label", ")", "\n", "\n", "bev_label", "=", "decode_binary_labels", "(", "bev_label", ",", "exp_config", ".", "num_bev_classes", "+", "1", ")", "\n", "\n", "bev_labels_list", ".", "append", "(", "bev_label", ")", "\n", "\n", "\n", "", "if", "single_frame", ":", "\n", "\n", "        ", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "                ", "pairs", ".", "append", "(", "(", "all_images_list", "[", "frame_ids", "[", "k", "+", "m", "]", "]", ",", "all_labels_list", "[", "frame_ids", "[", "k", "+", "m", "]", "]", ",", "reference_samples", "[", "k", "]", ",", "nusc", ".", "sample", "[", "all_sample_inds", "[", "frame_ids", "[", "k", "+", "m", "]", "]", "]", ",", "True", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "                ", "pairs", ".", "append", "(", "(", "all_images_list", "[", "frame_ids", "[", "k", "+", "m", "]", "]", ",", "all_labels_list", "[", "frame_ids", "[", "k", "+", "m", "]", "]", ",", "reference_samples", "[", "k", "]", ",", "nusc", ".", "sample", "[", "all_sample_inds", "[", "frame_ids", "[", "k", "+", "m", "]", "]", "]", ",", "m", "==", "reference_frame_index", ")", ")", "\n", "\n", "\n", "", "", "", "results", "=", "pool", ".", "map", "(", "single_process", ",", "pairs", ")", "\n", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "#        logging.error('Results shape : ' + str(len(results)))", "\n", "\n", "seq_images_ar", "=", "np", ".", "zeros", "(", "(", "n_frames_per_seq", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "seq_labels_ar", "=", "np", ".", "ones", "(", "(", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "total_label_slices", ")", ")", ",", "np", ".", "float32", ")", "\n", "\n", "bev_transforms_ar1", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar2", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar3", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "\n", "coordinate_transforms_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "bev_images_ar", "=", "np", ".", "zeros", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "bev_labels_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "int", "(", "total_label_slices", ")", ")", ",", "np", ".", "float32", ")", "\n", "bev_covers_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "\n", "#        logging.error('PROJECT TO GROUND ENDED')", "\n", "for", "k", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "        ", "temp_res", "=", "results", "[", "k", "]", "\n", "\n", "if", "k", "<", "num_frames", ":", "\n", "\n", "            ", "seq_images_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "", "elif", "k", ">=", "(", "n_seqs", "*", "num_frames", "-", "(", "n_seqs", "-", "1", ")", ")", ":", "\n", "            ", "seq_images_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "#                logging.error('RETURNED GRID SHAPE ' + str(temp_res[3].shape))", "\n", "", "bev_images_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "2", "]", ")", "\n", "bev_labels_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "3", "]", ")", "\n", "bev_covers_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "copy", "(", "temp_res", "[", "4", "]", "[", "...", ",", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "bev_transforms_ar1", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "6", "]", ")", "\n", "bev_transforms_ar2", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "7", "]", ")", "\n", "bev_transforms_ar3", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "8", "]", ")", "\n", "coordinate_transforms_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "5", "]", ")", "\n", "\n", "\n", "\n", "", "return", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_labels_ar", ",", "bev_covers_ar", ",", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", ",", "bev_transforms_ar1", ",", "bev_transforms_ar2", ",", "bev_transforms_ar3", ",", "coordinate_transforms_ar", ",", "np", ".", "stack", "(", "bev_labels_list", ",", "axis", "=", "0", ")", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_test.overall_eval_iterator": [[536, 575], ["nuscenes_test.eval_iterator", "numpy.squeeze", "range", "numpy.stack", "numpy.stack", "numpy.clip", "numpy.float32", "range", "numpy.concatenate", "numpy.zeros_like", "numpy.zeros_like", "range", "total_img_list.append", "total_labels_list.append", "numpy.sum", "to_return_bev_images_list.append"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.eval_iterator"], ["", "def", "overall_eval_iterator", "(", "my_scene", ",", "cur_index", ",", "reference_frame_index", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "False", ")", ":", "\n", "\n", "# logging.error('SINGLE FRAME ' + str(single_frame))", "\n", "    ", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_labels_ar", ",", "bev_covers_ar", ",", "transforms_ar", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "coordinate_transforms_ar", ",", "real_ref_bev_labels", ",", "went_well", "=", "eval_iterator", "(", "my_scene", ",", "cur_index", ",", "reference_frame_index", ",", "single_frame", "=", "single_frame", ",", "apply_interval", "=", "apply_interval", ")", "\n", "\n", "\n", "squeezed_bev_covers_ar", "=", "np", ".", "squeeze", "(", "bev_covers_ar", ",", "axis", "=", "-", "1", ")", "\n", "\n", "total_img_list", "=", "[", "]", "\n", "total_labels_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "total_img", "=", "np", ".", "zeros_like", "(", "bev_images_ar", "[", "0", ",", "0", ",", "...", "]", ")", "\n", "total_labels", "=", "np", ".", "zeros_like", "(", "bev_labels_ar", "[", "0", ",", "0", ",", "...", "]", ")", "\n", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "            ", "total_img", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "=", "bev_images_ar", "[", "k", ",", "m", ",", "...", "]", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "\n", "total_labels", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "=", "bev_labels_ar", "[", "k", ",", "m", ",", "...", "]", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "\n", "\n", "", "total_img_list", ".", "append", "(", "total_img", ")", "\n", "total_labels_list", ".", "append", "(", "total_labels", ")", "\n", "\n", "", "fin_bev_images", "=", "np", ".", "stack", "(", "total_img_list", ",", "axis", "=", "0", ")", "\n", "fin_bev_labels", "=", "np", ".", "stack", "(", "total_labels_list", ",", "axis", "=", "0", ")", "\n", "fin_covers", "=", "np", ".", "clip", "(", "np", ".", "sum", "(", "bev_covers_ar", ",", "axis", "=", "1", ")", ",", "0", ",", "1", ")", "\n", "\n", "my_area", "=", "np", ".", "float32", "(", "bev_covers_ar", ">", "0.5", ")", "\n", "\n", "#        logging.error('BEV IMAGES MAX ' + str(np.max(bev_images_ar))+ ' MIN ' + str(np.min(bev_images_ar)))", "\n", "\n", "separate_bev_images", "=", "my_area", "*", "bev_images_ar", "\n", "\n", "to_return_bev_images_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "num_frames", ")", ":", "\n", "        ", "to_return_bev_images_list", ".", "append", "(", "separate_bev_images", "[", ":", ",", "k", ",", "...", "]", ")", "\n", "\n", "", "to_return_bev_images", "=", "np", ".", "concatenate", "(", "to_return_bev_images_list", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "seq_images_ar", ",", "seq_labels_ar", ",", "fin_bev_images", ",", "fin_bev_labels", ",", "fin_covers", ",", "transforms_ar", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "bev_covers_ar", ",", "coordinate_transforms_ar", ",", "to_return_bev_images", ",", "real_ref_bev_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_test.do_eval": [[579, 798], ["logging.error", "numpy.concatenate", "numpy.concatenate", "numpy.sum", "numpy.array", "numpy.sum", "numpy.sum", "range", "logging.error", "res_strings.append", "utils.write_to_txt_file", "logging.error", "os.path.join", "sorted", "range", "numpy.array", "numpy.array", "all_static_j1s.append", "all_object_j1s.append", "res_strings.append", "logging.error", "utils.write_to_txt_file", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "ious.append", "str", "str", "os.path.join", "glob.glob", "os.path.exists", "os.makedirs", "len", "logging.error", "sess.run", "time.time", "sess.run", "time.time", "runtimes.append", "numpy.squeeze", "numpy.zeros", "range", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "utils.get_confusion", "range", "scene_static_results.append", "scene_object_results.append", "numpy.squeeze", "numpy.squeeze", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "nuscenes_test.overall_eval_iterator", "numpy.uint8", "numpy.uint8", "numpy.clip", "numpy.squeeze", "numpy.squeeze", "utils.get_all_stats", "sample_results.append", "numpy.array", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "str", "str", "nuscenes_test.overall_eval_iterator", "numpy.sum", "numpy.squeeze", "numpy.squeeze", "str", "numpy.sum", "numpy.sum", "str", "len", "int", "nuscenes_test.overall_eval_iterator", "str", "len", "nuscenes_test.overall_eval_iterator", "nuscenes_test.overall_eval_iterator", "str", "len", "int", "int", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.write_to_txt_file", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.write_to_txt_file", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_confusion", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_all_stats", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator"], ["", "def", "do_eval", "(", "sess", ",", "val_tokens", ",", "\n", "my_training_placeholder", ",", "\n", "\n", "images_placeholder", ",", "\n", "\n", "image_labels_placeholder", ",", "\n", "covers_placeholder", ",", "\n", "bev_transforms_placeholder", ",", "\n", "separate_covers_placeholder", ",", "\n", "ground_transforms_placeholder1", ",", "\n", "ground_transforms_placeholder2", ",", "\n", "ground_transforms_placeholder3", ",", "\n", "coordinate_ground_transforms_placeholder", ",", "\n", "\n", "channel_bev_images_placeholder", ",", "\n", "\n", "masks", ",", "\n", "side_masks", ",", "side_occ_masks", ",", "side_obj_softmaxed", ",", "\n", "projected_estimates", ",", "\n", "projected_obj_estimates", ",", "\n", "combined_projected_estimates", ",", "\n", "iteration", ",", "training_time_placeholder", ",", "val_folder_path", "=", "validation_res_path", ")", ":", "\n", "\n", "\n", "    ", "logging", ".", "error", "(", "'Started evaluation'", ")", "\n", "\n", "\n", "res_strings", "=", "[", "]", "\n", "all_static_j1s", "=", "[", "]", "\n", "all_object_j1s", "=", "[", "]", "\n", "\n", "counter", "=", "0", "\n", "\n", "runtimes", "=", "[", "]", "\n", "\n", "for", "my_scene_token", "in", "val_tokens", ":", "\n", "\n", "        ", "counter", "=", "counter", "+", "1", "\n", "logging", ".", "error", "(", "'SCENE '", "+", "str", "(", "counter", ")", "+", "' of '", "+", "str", "(", "len", "(", "val_tokens", ")", ")", "+", "' scenes'", ")", "\n", "\n", "scene_static_results", "=", "[", "]", "\n", "scene_object_results", "=", "[", "]", "\n", "current_dir", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "'scene'", "+", "my_scene_token", ")", "\n", "\n", "images", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'img*.png'", ")", ")", ")", "\n", "\n", "name_of_seq", "=", "my_scene_token", "\n", "\n", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "validation_res_path", ",", "name_of_seq", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "validation_res_path", ",", "name_of_seq", ")", ")", "\n", "\n", "\n", "\n", "", "for", "frame_number", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "            ", "logging", ".", "error", "(", "'FRAME NUMBER '", "+", "str", "(", "frame_number", ")", ")", "\n", "\n", "\n", "if", "frame_number", "<", "reference_frame_index", ":", "\n", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_labels", ",", "batch_bev_covers", ",", "batch_transforms", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "frame_number", ",", "reference_frame_index", ",", "single_frame", "=", "True", ",", "apply_interval", "=", "False", ")", "\n", "\n", "", "elif", "frame_number", "<", "frame_interval", "*", "reference_frame_index", ":", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_labels", ",", "batch_bev_covers", ",", "batch_transforms", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "int", "(", "frame_number", "-", "reference_frame_index", ")", ",", "reference_frame_index", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "False", ")", "\n", "\n", "", "elif", "(", "frame_number", ">=", "(", "len", "(", "images", ")", "-", "(", "num_frames", "-", "reference_frame_index", "-", "1", ")", ")", ")", ":", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_labels", ",", "batch_bev_covers", ",", "batch_transforms", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "frame_number", ",", "reference_frame_index", ",", "single_frame", "=", "True", ",", "apply_interval", "=", "False", ")", "\n", "\n", "", "elif", "(", "frame_number", ">=", "(", "len", "(", "images", ")", "-", "frame_interval", "*", "(", "num_frames", "-", "reference_frame_index", "-", "1", ")", ")", ")", ":", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_labels", ",", "batch_bev_covers", ",", "batch_transforms", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "int", "(", "frame_number", "-", "reference_frame_index", ")", ",", "reference_frame_index", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_labels", ",", "batch_bev_covers", ",", "batch_transforms", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "int", "(", "frame_number", "-", "frame_interval", "*", "reference_frame_index", ")", ",", "reference_frame_index", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "True", ")", "\n", "\n", "\n", "\n", "", "feed_dict", "=", "{", "\n", "\n", "\n", "training_time_placeholder", ":", "False", ",", "\n", "my_training_placeholder", ":", "False", ",", "\n", "\n", "images_placeholder", ":", "batch_image", ",", "\n", "\n", "covers_placeholder", ":", "batch_bev_covers", ",", "\n", "bev_transforms_placeholder", ":", "batch_transforms", ",", "\n", "separate_covers_placeholder", ":", "batch_separate_covers", ",", "\n", "ground_transforms_placeholder1", ":", "batch_tf_transforms1", ",", "\n", "ground_transforms_placeholder2", ":", "batch_tf_transforms2", ",", "\n", "ground_transforms_placeholder3", ":", "batch_tf_transforms3", ",", "\n", "coordinate_ground_transforms_placeholder", ":", "batch_coordinate_transforms", ",", "\n", "\n", "channel_bev_images_placeholder", ":", "batch_channel_bev_images", ",", "\n", "\n", "\n", "}", "\n", "\n", "masks_v", ",", "side_masks_v", ",", "side_occ_masks_v", ",", "projected_estimates_v", ",", "combined_projected_estimates_v", ",", "projected_obj_v", ",", "side_obj_softmaxed_v", "=", "sess", ".", "run", "(", "[", "masks", ",", "\n", "side_masks", ",", "side_occ_masks", ",", "projected_estimates", ",", "projected_obj_estimates", ",", "\n", "combined_projected_estimates", ",", "side_obj_softmaxed", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "time1", "=", "time", ".", "time", "(", ")", "\n", "masks_v", "=", "sess", ".", "run", "(", "masks", ",", "feed_dict", "=", "feed_dict", ")", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "rt", "=", "time2", "-", "time1", "\n", "runtimes", ".", "append", "(", "rt", ")", "\n", "#           ", "\n", "sample_results", "=", "[", "]", "\n", "squeezed_masks", "=", "np", ".", "squeeze", "(", "masks_v", ")", "\n", "\n", "temp_object_estimates", "=", "squeezed_masks", "[", "...", ",", "exp_config", ".", "num_static_classes", ":", "]", "\n", "\n", "\n", "\n", "thresh_list", "=", "[", "0.5", ",", "0.5", ",", "0.45", ",", "0.45", ",", "\n", "0.5", ",", "0.5", ",", "0.5", ",", "0.3", ",", "\n", "0.3", ",", "0.6", ",", "0.45", ",", "0.45", ",", "\n", "0.45", ",", "0.5", "]", "\n", "\n", "\n", "\n", "static_estimates", "=", "np", ".", "zeros", "(", "(", "temp_object_estimates", ".", "shape", "[", "0", "]", ",", "temp_object_estimates", ".", "shape", "[", "1", "]", ",", "exp_config", ".", "num_static_classes", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "exp_config", ".", "num_static_classes", ")", ":", "\n", "                ", "static_estimates", "[", "...", ",", "k", "]", "=", "np", ".", "uint8", "(", "squeezed_masks", "[", "...", ",", "k", "]", ">", "thresh_list", "[", "k", "]", ")", "\n", "\n", "\n", "", "object_estimates", "=", "np", ".", "zeros", "(", "(", "temp_object_estimates", ".", "shape", "[", "0", "]", ",", "temp_object_estimates", ".", "shape", "[", "1", "]", ",", "exp_config", ".", "num_object_classes", ")", ")", "\n", "for", "k", "in", "range", "(", "exp_config", ".", "num_object_classes", ")", ":", "\n", "                ", "object_estimates", "[", "...", ",", "k", "]", "=", "np", ".", "uint8", "(", "temp_object_estimates", "[", "...", ",", "k", "]", ">", "thresh_list", "[", "k", "+", "4", "]", ")", "\n", "\n", "", "bg_estimate", "=", "1", "-", "np", ".", "clip", "(", "np", ".", "sum", "(", "object_estimates", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "0", ",", "1", ")", "\n", "\n", "hard_estimates", "=", "np", ".", "concatenate", "(", "[", "static_estimates", ",", "object_estimates", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "object_estimates", "=", "np", ".", "concatenate", "(", "[", "object_estimates", ",", "bg_estimate", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "object_stats", "=", "utils", ".", "get_confusion", "(", "exp_config", ",", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "exp_config", ".", "num_static_classes", ":", "]", ")", ",", "object_estimates", ",", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "]", ")", ",", "mask_iou", "=", "exp_config", ".", "use_occlusion", ")", "\n", "\n", "\n", "\n", "for", "k", "in", "range", "(", "exp_config", ".", "num_static_classes", ")", ":", "\n", "\n", "                ", "all_stats", ",", "void_pixels", "=", "utils", ".", "get_all_stats", "(", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "k", "]", ")", ",", "hard_estimates", "[", "...", ",", "k", "]", ",", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "]", ")", ",", "mask_iou", "=", "exp_config", ".", "use_occlusion", ")", "\n", "sample_results", ".", "append", "(", "all_stats", ")", "\n", "\n", "", "scene_static_results", ".", "append", "(", "np", ".", "array", "(", "sample_results", ")", ")", "\n", "scene_object_results", ".", "append", "(", "object_stats", ")", "\n", "# occ_scene_results.append(occ_all_stats)", "\n", "\n", "\n", "\n", "", "seq_static_j1", "=", "np", ".", "array", "(", "scene_static_results", ")", "\n", "seq_object_j1", "=", "np", ".", "array", "(", "scene_object_results", ")", "\n", "\n", "\n", "all_static_j1s", ".", "append", "(", "np", ".", "squeeze", "(", "seq_static_j1", ")", ")", "\n", "all_object_j1s", ".", "append", "(", "np", ".", "squeeze", "(", "seq_object_j1", ")", ")", "\n", "\n", "temp_res", "=", "seq_static_j1", "[", "...", ",", "2", "]", "/", "(", "seq_static_j1", "[", "...", ",", "2", "]", "+", "seq_static_j1", "[", "...", ",", "3", "]", "+", "seq_static_j1", "[", "...", ",", "4", "]", "+", "0.0001", ")", "\n", "\n", "temp_string", "=", "\"Iteration : \"", "+", "str", "(", "iteration", ")", "+", "\" : Scene \"", "+", "str", "(", "my_scene_token", ")", "+", "\" - j1: \"", "+", "str", "(", "np", ".", "mean", "(", "temp_res", ",", "axis", "=", "0", ")", ")", "\n", "\n", "res_strings", ".", "append", "(", "temp_string", ")", "\n", "logging", ".", "error", "(", "temp_string", ")", "\n", "utils", ".", "write_to_txt_file", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val_results.txt'", ")", ",", "[", "temp_string", "]", ")", "\n", "\n", "\n", "", "tot_static_j1", "=", "np", ".", "concatenate", "(", "all_static_j1s", ",", "axis", "=", "0", ")", "\n", "tot_object_j1", "=", "np", ".", "concatenate", "(", "all_object_j1s", ",", "axis", "=", "0", ")", "\n", "\n", "tp", "=", "tot_static_j1", "[", "...", ",", "2", "]", "\n", "fp", "=", "tot_static_j1", "[", "...", ",", "3", "]", "\n", "fn", "=", "tot_static_j1", "[", "...", ",", "4", "]", "\n", "tn", "=", "tot_static_j1", "[", "...", ",", "5", "]", "\n", "\n", "tp_rate", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "fp_rate", "=", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "tn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "tp_rate", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "fp_rate", "=", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "tn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "precision", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "# take_all_j = np.mean(j,axis=0)", "\n", "confuse_iou", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "\n", "object_raw", "=", "np", ".", "sum", "(", "tot_object_j1", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "conf", "=", "np", ".", "array", "(", "object_raw", ")", "\n", "fps", "=", "np", ".", "sum", "(", "conf", ",", "axis", "=", "-", "1", ")", "\n", "fns", "=", "np", ".", "sum", "(", "conf", ",", "axis", "=", "0", ")", "\n", "\n", "ious", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "10", ")", ":", "\n", "        ", "ious", ".", "append", "(", "conf", "[", "k", ",", "k", "]", "/", "(", "fps", "[", "k", "]", "+", "fns", "[", "k", "]", "-", "conf", "[", "k", ",", "k", "]", ")", ")", "\n", "\n", "\n", "", "temp_string", "=", "'Static j : '", "+", "str", "(", "confuse_iou", ")", "+", "'\\n'", "+", "' Static tp_rate : '", "+", "str", "(", "tp_rate", ")", "+", "'\\n'", "+", "' Static fp_rate : '", "+", "str", "(", "fp_rate", ")", "+", "'\\n'", "+", "' Static precision : '", "+", "str", "(", "precision", ")", "+", "'\\n'", "+", "'Object confuse : '", "+", "str", "(", "object_raw", ")", "\n", "\n", "temp_string", "=", "temp_string", "+", "'\\n'", "+", "'Object IOU '", "+", "str", "(", "ious", ")", "\n", "\n", "logging", ".", "error", "(", "temp_string", ")", "\n", "res_strings", ".", "append", "(", "temp_string", ")", "\n", "utils", ".", "write_to_txt_file", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val_results.txt'", ")", ",", "res_strings", ")", "\n", "return", "confuse_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.nuscenes_test.main": [[801, 812], ["shutil.copy", "nuscenes_test.run_training", "tensorflow.gfile.Exists", "tensorflow.gfile.MakeDirs"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.run_training"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "continue_run", "=", "True", "\n", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "log_dir", ")", ":", "\n", "        ", "tf", ".", "gfile", ".", "MakeDirs", "(", "log_dir", ")", "\n", "continue_run", "=", "False", "\n", "\n", "# Copy experiment config file", "\n", "", "shutil", ".", "copy", "(", "exp_config", ".", "__file__", ",", "log_dir", ")", "\n", "\n", "run_training", "(", "continue_run", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.__init__": [[22, 29], ["threading.Thread.__init__", "queue.Queue", "background_generator.BackgroundGenerator.start"], "methods", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "max_prefetch", "=", "4", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "queue", "=", "queue", ".", "Queue", "(", "max_prefetch", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "daemon", "=", "True", "\n", "self", ".", "stopped_iter", "=", "False", "\n", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run": [[30, 34], ["background_generator.BackgroundGenerator.queue.put", "background_generator.BackgroundGenerator.queue.put"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "for", "item", "in", "self", ".", "generator", ":", "\n", "            ", "self", ".", "queue", ".", "put", "(", "item", ")", "\n", "", "self", ".", "queue", ".", "put", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.next": [[35, 43], ["background_generator.BackgroundGenerator.queue.get"], "methods", ["None"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "next_item", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "if", "self", ".", "stopped_iter", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "if", "next_item", "is", "None", ":", "\n", "            ", "self", ".", "stopped_iter", "=", "True", "\n", "\n", "", "return", "next_item", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.__next__": [[45, 47], ["background_generator.BackgroundGenerator.next"], "methods", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.__iter__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.raise_exception": [[51, 53], ["None"], "methods", ["None"], ["", "def", "raise_exception", "(", "self", ")", ":", "\n", "        ", "raise", "StopIteration", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.full_object_loss": [[24, 44], ["tensorflow.constant", "tensorflow.to_float", "numpy.ones_like", "tensorflow.log", "tensorflow.log", "tensorflow.pow", "tensorflow.pow"], "function", ["None"], ["def", "full_object_loss", "(", "y_pred", ",", "labels", ",", "occ_mask", ",", "exp_config", ",", "alpha_pos", ",", "weight", "=", "True", ",", "weight_vector", "=", "None", ",", "focal", "=", "True", ")", ":", "\n", "\n", "\n", "    ", "pen_mask", "=", "occ_mask", "\n", "alpha_neg", "=", "tf", ".", "constant", "(", "np", ".", "ones_like", "(", "alpha_pos", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "\n", "\n", "gamma", "=", "2", "\n", "epsilon", "=", "0.00001", "\n", "\n", "# y_pred=tf.nn.sigmoid(logits)", "\n", "labels", "=", "tf", ".", "to_float", "(", "labels", ")", "\n", "\n", "we", "=", "0.5", "\n", "L", "=", "alpha_pos", "*", "(", "-", "labels", "*", "we", "*", "(", "tf", ".", "pow", "(", "(", "1", "-", "y_pred", ")", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "y_pred", "+", "epsilon", ")", "-", "(", "1", "-", "labels", ")", "*", "(", "1", "-", "we", ")", "*", "(", "tf", ".", "pow", "(", "y_pred", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "1", "-", "y_pred", "+", "epsilon", ")", ")", "\n", "\n", "# L = L*pen_mask", "\n", "return", "pen_mask", "*", "L", ",", "alpha_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.classwise_object_loss": [[46, 67], ["tensorflow.constant", "tensorflow.to_float", "numpy.ones_like", "tensorflow.log", "tensorflow.log", "tensorflow.pow", "tensorflow.pow"], "function", ["None"], ["", "def", "classwise_object_loss", "(", "y_pred", ",", "labels", ",", "occ_mask", ",", "exp_config", ",", "alpha_pos", ",", "weight", "=", "True", ",", "weight_vector", "=", "None", ",", "focal", "=", "True", ")", ":", "\n", "\n", "\n", "# pen_mask = occ_mask + (1-occ_mask)*0.1", "\n", "    ", "pen_mask", "=", "occ_mask", "\n", "alpha_neg", "=", "tf", ".", "constant", "(", "np", ".", "ones_like", "(", "alpha_pos", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "\n", "\n", "gamma", "=", "2", "\n", "epsilon", "=", "0.00001", "\n", "\n", "# y_pred=tf.nn.sigmoid(logits)", "\n", "labels", "=", "tf", ".", "to_float", "(", "labels", ")", "\n", "#   ", "\n", "we", "=", "0.5", "\n", "L", "=", "-", "alpha_pos", "*", "labels", "*", "we", "*", "(", "tf", ".", "pow", "(", "(", "1", "-", "y_pred", ")", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "y_pred", "+", "epsilon", ")", "-", "(", "1", "-", "labels", ")", "*", "alpha_neg", "*", "(", "1", "-", "we", ")", "*", "(", "tf", ".", "pow", "(", "y_pred", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "1", "-", "y_pred", "+", "epsilon", ")", "\n", "\n", "# L = L*pen_mask", "\n", "return", "pen_mask", "*", "L", ",", "alpha_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.contrastive_sigmoid_loss": [[70, 119], ["tf.to_float.get_shape().as_list", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.to_float", "tensorflow.constant", "tensorflow.constant", "tensorflow.nn.sigmoid", "tensorflow.to_float", "numpy.expand_dims", "numpy.expand_dims", "tf.to_float.get_shape", "numpy.expand_dims", "numpy.expand_dims", "tensorflow.log", "tensorflow.log", "numpy.expand_dims", "numpy.expand_dims", "tensorflow.pow", "tensorflow.pow", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "contrastive_sigmoid_loss", "(", "logits", ",", "labels", ",", "exp_config", ",", "weight", "=", "True", ",", "weight_vector", "=", "None", ",", "focal", "=", "True", ")", ":", "\n", "\n", "    ", "labels_shape", "=", "labels", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n", "vis_mask", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_classes", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "occ_mask", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_classes", "+", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "tot_mask", "=", "1", "-", "occ_mask", "*", "vis_mask", "\n", "\n", "#    if exp_config.use_occlusion:", "\n", "#    ", "\n", "#        tot_mask = occ_mask*vis_mask", "\n", "#    else:", "\n", "#        tot_mask = vis_mask", "\n", "\n", "labels", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "exp_config", ".", "num_classes", "]", ")", "\n", "\n", "# pen_mask = tf.ones_like(labels)", "\n", "# temp_mask = tot_mask*labels", "\n", "pen_mask", "=", "tot_mask", "*", "0.1", "+", "(", "1", "-", "tot_mask", ")", "\n", "pen_mask", "=", "tf", ".", "to_float", "(", "pen_mask", ")", "\n", "#    pen_mask = occ_mask*labels*0.1 + (1-occ_mask)*labels", "\n", "#    no_labels = 1 - tf.clip_by_value(tf.reduce_sum(labels,axis=-1,keepdims=True),0,1)", "\n", "\n", "alpha_pos", "=", "tf", ".", "constant", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "[", "0.5", ",", "2.5", ",", "2.0", ",", "3.0", ",", "0.5", ",", "0.5", "]", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "tf", ".", "float32", ")", "\n", "alpha_neg", "=", "tf", ".", "constant", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "[", "0.5", ",", "1.0", ",", "1.0", ",", "1.0", ",", "0.5", ",", "0.5", "]", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "\n", "\n", "gamma", "=", "2", "\n", "epsilon", "=", "0.00001", "\n", "\n", "y_pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", "\n", "labels", "=", "tf", ".", "to_float", "(", "labels", ")", "\n", "#    no_labels=tf.to_float(no_labels)", "\n", "\n", "#    no_labels_loss = ", "\n", "\n", "\n", "#    L = tf.nn.sigmoid_cross_entropy_with_logits(", "\n", "#        labels=labels, logits=logits, name=None", "\n", "#    )", "\n", "\n", "\n", "L", "=", "-", "labels", "*", "alpha_pos", "*", "(", "tf", ".", "pow", "(", "(", "1", "-", "y_pred", ")", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "y_pred", "+", "epsilon", ")", "-", "(", "1", "-", "labels", ")", "*", "alpha_neg", "*", "(", "tf", ".", "pow", "(", "y_pred", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "1", "-", "y_pred", "+", "epsilon", ")", "\n", "\n", "L", "=", "L", "*", "pen_mask", "\n", "return", "L", ",", "alpha_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.argoverse_contrastive_sigmoid_loss": [[121, 161], ["tf.slice.get_shape().as_list", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.to_float", "tf.slice.get_shape", "tensorflow.log", "tensorflow.log", "tensorflow.pow", "tensorflow.pow"], "function", ["None"], ["", "def", "argoverse_contrastive_sigmoid_loss", "(", "y_pred", ",", "labels", ",", "exp_config", ",", "weight", "=", "True", ",", "weight_vector", "=", "None", ",", "focal", "=", "True", ")", ":", "\n", "\n", "    ", "labels_shape", "=", "labels", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n", "vis_mask", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_classes", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "occ_mask", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_classes", "+", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "tot_mask", "=", "occ_mask", "\n", "\n", "#    if exp_config.use_occlusion:", "\n", "#    ", "\n", "#        tot_mask = occ_mask*vis_mask", "\n", "#    else:", "\n", "#        tot_mask = vis_mask", "\n", "\n", "labels", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "# pen_mask = tf.ones_like(labels)", "\n", "# temp_mask = tot_mask*labels", "\n", "# pen_mask = tot_mask*0.1 + (1-tot_mask)", "\n", "pen_mask", "=", "tf", ".", "to_float", "(", "tot_mask", ")", "\n", "#    pen_mask = occ_mask*labels*0.1 + (1-occ_mask)*labels", "\n", "#    no_labels = 1 - tf.clip_by_value(tf.reduce_sum(labels,axis=-1,keepdims=True),0,1)", "\n", "\n", "# alpha_pos = tf.constant(np.expand_dims(np.expand_dims(np.expand_dims(np.array([0.5,2.5,2.0,3.0,0.5,0.5]),axis=0),axis=0),axis=0), tf.float32)", "\n", "# alpha_neg = tf.constant(np.expand_dims(np.expand_dims(np.expand_dims(np.array([0.5,1.0,1.0,1.0,0.5,0.5]),axis=0),axis=0),axis=0), tf.float32)", "\n", "\n", "\n", "alpha_pos", "=", "0.7", "\n", "alpha_neg", "=", "0.5", "\n", "gamma", "=", "2", "\n", "epsilon", "=", "0.00001", "\n", "\n", "\n", "\n", "L", "=", "-", "labels", "*", "alpha_pos", "*", "(", "tf", ".", "pow", "(", "(", "1", "-", "y_pred", ")", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "y_pred", "+", "epsilon", ")", "-", "(", "1", "-", "labels", ")", "*", "alpha_neg", "*", "(", "tf", ".", "pow", "(", "y_pred", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "1", "-", "y_pred", "+", "epsilon", ")", "\n", "\n", "L", "=", "L", "*", "pen_mask", "\n", "return", "L", ",", "alpha_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.occlusion_loss": [[163, 169], ["tensorflow.one_hot", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.squeeze"], "function", ["None"], ["", "def", "occlusion_loss", "(", "logits", ",", "labels", ",", "depth", "=", "2", ")", ":", "\n", "    ", "labels", "=", "tf", ".", "one_hot", "(", "tf", ".", "cast", "(", "tf", ".", "squeeze", "(", "labels", ")", ",", "tf", ".", "uint8", ")", ",", "depth", "=", "depth", ")", "\n", "#    temp = tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels)", "\n", "#    loss = tf.reduce_mean(tf.reduce_mean(tf.reduce_mean(temp,axis=[1,2]),axis=[1]))", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.full_modified_bev_object_loss": [[173, 205], ["tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.to_float", "tensorflow.clip_by_value", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.log", "tensorflow.pow", "tensorflow.pow"], "function", ["None"], ["", "def", "full_modified_bev_object_loss", "(", "y_pred", ",", "labels", ",", "cover", ",", "exp_config", ",", "alpha_pos", ",", "alpha_neg", ",", "img_shape", "=", "[", "448", ",", "800", "]", ",", "weight", "=", "True", ",", "weight_vector", "=", "None", ",", "focal", "=", "True", ")", ":", "\n", "\n", "\n", "# tot_mask = 1-tf.slice(labels,[0,0,0,exp_config.num_bev_classes],[-1,-1,-1,1])", "\n", "    ", "tot_mask", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_bev_classes", "+", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "# alpha_pos = tf.constant(np.expand_dims(np.expand_dims(np.expand_dims(exp_config.bev_positive_weights,axis=0),axis=0),axis=0), tf.float32)", "\n", "# alpha_neg = tf.constant(np.expand_dims(np.expand_dims(np.expand_dims(exp_config.bev_negative_weights,axis=0),axis=0),axis=0), tf.float32)", "\n", "gamma", "=", "2", "\n", "epsilon", "=", "0.00001", "\n", "#    ", "\n", "\n", "labels", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "exp_config", ".", "num_bev_classes", "]", ")", "\n", "\n", "object_labels", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_static_classes", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "\n", "\n", "bg_labels", "=", "1", "-", "tf", ".", "clip_by_value", "(", "tf", ".", "reduce_sum", "(", "object_labels", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "0", ",", "1", ")", "\n", "# bg_labels = tf.zeros_like(tf.slice(object_labels,[0,0,0,0],[-1,-1,-1,1]))", "\n", "labels", "=", "tf", ".", "concat", "(", "[", "labels", ",", "bg_labels", "]", ",", "axis", "=", "-", "1", ")", "\n", "labels", "=", "tf", ".", "to_float", "(", "labels", ")", "\n", "\n", "we", "=", "0.6", "\n", "L", "=", "alpha_pos", "*", "(", "-", "labels", "*", "we", "*", "(", "tf", ".", "pow", "(", "(", "1", "-", "y_pred", ")", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "y_pred", "+", "epsilon", ")", "-", "(", "1", "-", "labels", ")", "*", "(", "1", "-", "we", ")", "*", "(", "tf", ".", "pow", "(", "y_pred", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "1", "-", "y_pred", "+", "epsilon", ")", ")", "\n", "\n", "# L=-labels*alpha_pos*(tf.pow((1-y_pred),gamma))*tf.log(y_pred + epsilon)-\\", "\n", "#   (1-labels)*alpha_neg*(tf.pow(y_pred,gamma))*tf.log(1-y_pred + epsilon)", "\n", "\n", "L", "=", "L", "*", "tot_mask", "\n", "\n", "return", "L", ",", "alpha_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.classwise_modified_bev_object_loss": [[207, 251], ["tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.to_float", "tensorflow.clip_by_value", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.log", "tensorflow.pow", "tensorflow.pow"], "function", ["None"], ["", "def", "classwise_modified_bev_object_loss", "(", "y_pred", ",", "labels", ",", "cover", ",", "exp_config", ",", "alpha_pos", ",", "alpha_neg", ",", "img_shape", "=", "[", "448", ",", "800", "]", ",", "weight", "=", "True", ",", "weight_vector", "=", "None", ",", "focal", "=", "True", ")", ":", "\n", "\n", "\n", "# tot_mask = 1-tf.slice(labels,[0,0,0,exp_config.num_bev_classes],[-1,-1,-1,1])", "\n", "    ", "tot_mask", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_bev_classes", "+", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "# alpha_pos = tf.constant(np.expand_dims(np.expand_dims(np.expand_dims(exp_config.bev_positive_weights,axis=0),axis=0),axis=0), tf.float32)", "\n", "# alpha_neg = tf.constant(np.expand_dims(np.expand_dims(np.expand_dims(exp_config.bev_negative_weights,axis=0),axis=0),axis=0), tf.float32)", "\n", "gamma", "=", "2", "\n", "epsilon", "=", "0.00001", "\n", "#    ", "\n", "\n", "labels", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "exp_config", ".", "num_bev_classes", "]", ")", "\n", "\n", "object_labels", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_static_classes", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "\n", "\n", "#     labels=tf.to_float(labels)", "\n", "# #    alpha_pos = alpha_pos[:-1]", "\n", "#     y_pred=tf.slice(y_pred,[0,0,0,0],[-1,-1,-1,exp_config.num_bev_classes])", "\n", "\n", "#     we = 0.6", "\n", "#     L=alpha_pos*(-labels*we*(tf.pow((1-y_pred),gamma))*tf.log(y_pred + epsilon)-\\", "\n", "#       (1-labels)*(1-we)*(tf.pow(y_pred,gamma))*tf.log(1-y_pred + epsilon))", "\n", "\n", "\n", "#     L = L*tot_mask", "\n", "\n", "\n", "bg_labels", "=", "1", "-", "tf", ".", "clip_by_value", "(", "tf", ".", "reduce_sum", "(", "object_labels", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "0", ",", "1", ")", "\n", "# bg_labels = tf.zeros_like(tf.slice(object_labels,[0,0,0,0],[-1,-1,-1,1]))", "\n", "labels", "=", "tf", ".", "concat", "(", "[", "labels", ",", "bg_labels", "]", ",", "axis", "=", "-", "1", ")", "\n", "labels", "=", "tf", ".", "to_float", "(", "labels", ")", "\n", "\n", "# we = 0.6", "\n", "# L=alpha_pos*(-labels*we*(tf.pow((1-y_pred),gamma))*tf.log(y_pred + epsilon)-\\", "\n", "#   (1-labels)*(1-we)*(tf.pow(y_pred,gamma))*tf.log(1-y_pred + epsilon))", "\n", "\n", "L", "=", "-", "labels", "*", "alpha_pos", "*", "(", "tf", ".", "pow", "(", "(", "1", "-", "y_pred", ")", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "y_pred", "+", "epsilon", ")", "-", "(", "1", "-", "labels", ")", "*", "alpha_neg", "*", "(", "tf", ".", "pow", "(", "y_pred", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "1", "-", "y_pred", "+", "epsilon", ")", "\n", "\n", "L", "=", "L", "*", "tot_mask", "\n", "\n", "return", "L", ",", "alpha_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.linear_activation": [[253, 258], ["None"], "function", ["None"], ["", "def", "linear_activation", "(", "x", ")", ":", "\n", "    ", "'''\n    A linear activation function (i.e. no non-linearity)\n    '''", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.crop_features": [[259, 273], ["tensorflow.shape", "tensorflow.div", "tensorflow.div", "tensorflow.slice", "tensorflow.reshape", "tensorflow.subtract", "tensorflow.subtract", "int", "int", "feature.get_shape", "feature.get_shape"], "function", ["None"], ["", "def", "crop_features", "(", "feature", ",", "out_size", ")", ":", "\n", "    ", "\"\"\"Crop the center of a feature map\n    Args:\n    feature: Feature map to crop\n    out_size: Size of the output feature map\n    Returns:\n    Tensor that performs the cropping\n    \"\"\"", "\n", "up_size", "=", "tf", ".", "shape", "(", "feature", ")", "\n", "ini_w", "=", "tf", ".", "div", "(", "tf", ".", "subtract", "(", "up_size", "[", "1", "]", ",", "out_size", "[", "1", "]", ")", ",", "2", ")", "\n", "ini_h", "=", "tf", ".", "div", "(", "tf", ".", "subtract", "(", "up_size", "[", "2", "]", ",", "out_size", "[", "2", "]", ")", ",", "2", ")", "\n", "slice_input", "=", "tf", ".", "slice", "(", "feature", ",", "(", "0", ",", "ini_w", ",", "ini_h", ",", "0", ")", ",", "(", "-", "1", ",", "out_size", "[", "1", "]", ",", "out_size", "[", "2", "]", ",", "-", "1", ")", ")", "\n", "# slice_input = tf.slice(feature, (0, ini_w, ini_w, 0), (-1, out_size[1], out_size[2], -1))  # Caffe cropping way", "\n", "return", "tf", ".", "reshape", "(", "slice_input", ",", "[", "int", "(", "feature", ".", "get_shape", "(", ")", "[", "0", "]", ")", ",", "out_size", "[", "1", "]", ",", "out_size", "[", "2", "]", ",", "int", "(", "feature", ".", "get_shape", "(", ")", "[", "3", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.pixel_wise_cross_entropy_loss": [[274, 283], ["tensorflow.one_hot", "tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits_v2"], "function", ["None"], ["", "def", "pixel_wise_cross_entropy_loss", "(", "logits", ",", "labels", ",", "depth", "=", "2", ")", ":", "\n", "    ", "'''\n    Simple wrapper for the normal tensorflow cross entropy loss \n    '''", "\n", "labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "depth", ")", "\n", "#    temp = tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels)", "\n", "#    loss = tf.reduce_mean(tf.reduce_mean(tf.reduce_mean(temp,axis=[1,2]),axis=[1]))", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.bev_occlusion_loss": [[285, 291], ["tensorflow.one_hot", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.squeeze", "tensorflow.nn.softmax_cross_entropy_with_logits_v2"], "function", ["None"], ["", "def", "bev_occlusion_loss", "(", "logits", ",", "labels", ",", "mask", ",", "depth", "=", "2", ")", ":", "\n", "    ", "labels", "=", "tf", ".", "one_hot", "(", "tf", ".", "cast", "(", "tf", ".", "squeeze", "(", "labels", ")", ",", "tf", ".", "uint8", ")", ",", "depth", "=", "depth", ")", "\n", "#    temp = tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels)", "\n", "#    loss = tf.reduce_mean(tf.reduce_mean(tf.reduce_mean(temp,axis=[1,2]),axis=[1]))", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "*", "mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.masked_pixel_wise_cross_entropy_loss": [[292, 301], ["tensorflow.one_hot", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.nn.softmax_cross_entropy_with_logits_v2"], "function", ["None"], ["", "def", "masked_pixel_wise_cross_entropy_loss", "(", "logits", ",", "labels", ",", "mask", ",", "depth", "=", "2", ")", ":", "\n", "    ", "'''\n    Simple wrapper for the normal tensorflow cross entropy loss \n    '''", "\n", "labels", "=", "tf", ".", "one_hot", "(", "tf", ".", "cast", "(", "labels", ",", "tf", ".", "uint8", ")", ",", "depth", "=", "depth", ")", "\n", "#    temp = tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels)", "\n", "#    loss = tf.reduce_mean(tf.reduce_mean(tf.reduce_mean(temp,axis=[1,2]),axis=[1]))", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "*", "mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.pixel_wise_cross_entropy_loss_weighted": [[302, 326], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.constant", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.multiply", "tensorflow.reduce_mean", "numpy.array"], "function", ["None"], ["", "def", "pixel_wise_cross_entropy_loss_weighted", "(", "logits", ",", "labels", ",", "class_weights", ")", ":", "\n", "    ", "'''\n    Weighted cross entropy loss, with a weight per class\n    :param logits: Network output before softmax\n    :param labels: Ground truth masks\n    :param class_weights: A list of the weights for each class\n    :return: weighted cross entropy loss\n    '''", "\n", "\n", "\n", "flat_logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "flat_labels", "=", "tf", ".", "reshape", "(", "labels", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "\n", "class_weights", "=", "tf", ".", "constant", "(", "np", ".", "array", "(", "class_weights", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "weight_map", "=", "tf", ".", "multiply", "(", "flat_labels", ",", "class_weights", ")", "\n", "weight_map", "=", "tf", ".", "reduce_sum", "(", "weight_map", ",", "axis", "=", "1", ")", "\n", "\n", "loss_map", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "flat_logits", ",", "labels", "=", "flat_labels", ")", "\n", "weighted_loss", "=", "tf", ".", "multiply", "(", "loss_map", ",", "weight_map", ")", "\n", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "weighted_loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.sigmoid_loss": [[327, 354], ["tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.constant", "tensorflow.nn.sigmoid", "tensorflow.to_float", "numpy.expand_dims", "numpy.expand_dims", "tensorflow.log", "tensorflow.log", "numpy.expand_dims", "tensorflow.pow", "tensorflow.pow", "numpy.array"], "function", ["None"], ["", "def", "sigmoid_loss", "(", "logits", ",", "labels", ",", "exp_config", ",", "img_shape", "=", "[", "448", ",", "800", "]", ",", "weight", "=", "True", ",", "weight_vector", "=", "None", ",", "focal", "=", "True", ")", ":", "\n", "\n", "\n", "    ", "vis_mask", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_classes", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "occ_mask", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_classes", "+", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "if", "exp_config", ".", "use_occlusion", ":", "\n", "\n", "        ", "tot_mask", "=", "occ_mask", "*", "vis_mask", "\n", "", "else", ":", "\n", "        ", "tot_mask", "=", "vis_mask", "\n", "", "labels", "=", "tf", ".", "slice", "(", "labels", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "exp_config", ".", "num_classes", "]", ")", "\n", "\n", "\n", "\n", "alpha", "=", "tf", ".", "constant", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "[", "0.5", ",", "0.6", ",", "0.7", ",", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "tf", ".", "float32", ")", "\n", "gamma", "=", "2", "\n", "epsilon", "=", "0.00001", "\n", "\n", "y_pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "logits", ")", "\n", "labels", "=", "tf", ".", "to_float", "(", "labels", ")", "\n", "L", "=", "-", "labels", "*", "alpha", "*", "(", "tf", ".", "pow", "(", "(", "1", "-", "y_pred", ")", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "y_pred", "+", "epsilon", ")", "-", "(", "1", "-", "labels", ")", "*", "(", "1", "-", "alpha", ")", "*", "(", "tf", ".", "pow", "(", "y_pred", ",", "gamma", ")", ")", "*", "tf", ".", "log", "(", "1", "-", "y_pred", "+", "epsilon", ")", "\n", "\n", "L", "=", "L", "*", "tot_mask", "\n", "\n", "return", "L", ",", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.soft_focal_loss": [[358, 373], ["tensorflow.cast", "tensorflow.to_float", "tensorflow.greater_equal", "tensorflow.log", "tensorflow.log", "tensorflow.pow", "tensorflow.pow", "tensorflow.pow"], "function", ["None"], ["", "def", "soft_focal_loss", "(", "sigmoids", ",", "labels", ")", ":", "\n", "\n", "    ", "alpha", "=", "0.9", "\n", "gamma", "=", "2", "\n", "epsilon", "=", "0.00001", "\n", "beta", "=", "4", "\n", "\n", "hard_labels", "=", "tf", ".", "cast", "(", "tf", ".", "greater_equal", "(", "labels", ",", "0.7", ")", ",", "tf", ".", "float32", ")", "\n", "y_pred", "=", "sigmoids", "\n", "#    y_pred=tf.nn.sigmoid(logits)", "\n", "labels", "=", "tf", ".", "to_float", "(", "labels", ")", "\n", "L", "=", "-", "hard_labels", "*", "alpha", "*", "tf", ".", "pow", "(", "(", "1", "-", "y_pred", ")", ",", "gamma", ")", "*", "tf", ".", "log", "(", "y_pred", "+", "epsilon", ")", "-", "(", "1", "-", "hard_labels", ")", "*", "(", "1", "-", "alpha", ")", "*", "tf", ".", "pow", "(", "1", "-", "labels", ",", "beta", ")", "*", "tf", ".", "pow", "(", "y_pred", ",", "gamma", ")", "*", "tf", ".", "log", "(", "1", "-", "y_pred", "+", "epsilon", ")", "\n", "\n", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP": [[375, 394], ["tensorflow.nn.relu", "layers.coord_conv2D_layer", "tensorflow.nn.relu", "layers.coord_conv2D_layer"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer"], ["", "def", "deeplab_residual_block_RGMP", "(", "input_", ",", "num_filters", ",", "reuse", "=", "False", ")", ":", "\n", "\n", "\n", "    ", "relu_temp", "=", "tf", ".", "nn", ".", "relu", "(", "input_", ")", "\n", "res1", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "relu_temp", ",", "\n", "name", "=", "'res1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "relu_res1", "=", "tf", ".", "nn", ".", "relu", "(", "res1", ")", "\n", "res2", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "relu_res1", ",", "\n", "name", "=", "'res2'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "out", "=", "input_", "+", "res2", "\n", "return", "out", "\n", "", "def", "deeplab_refinement_module", "(", "input_", ",", "skip", ",", "num_filters", ",", "reuse", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_refinement_module": [[394, 420], ["layers.coord_conv2D_layer", "tensorflow.variable_scope", "tensorflow.contrib.layers.conv2d_transpose", "tensorflow.variable_scope", "mem_net.residual_block_RGMP", "tensorflow.variable_scope", "mem_net.residual_block_RGMP"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.residual_block_RGMP"], ["", "def", "deeplab_refinement_module", "(", "input_", ",", "skip", ",", "num_filters", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'refinement_upscale'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "upsampled", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d_transpose", "(", "\n", "input_", ",", "\n", "num_filters", ",", "\n", "4", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "activation_fn", "=", "None", ",", "\n", "trainable", "=", "False", "\n", ")", "\n", "", "temp", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "skip", ",", "\n", "name", "=", "'temp_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'residual_block1'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "res_out1", "=", "residual_block_RGMP", "(", "temp", ",", "num_filters", ")", "\n", "\n", "", "temp_sum", "=", "res_out1", "+", "upsampled", "\n", "with", "tf", ".", "variable_scope", "(", "'residual_block2'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "out", "=", "residual_block_RGMP", "(", "temp_sum", ",", "num_filters", ")", "\n", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.residual_block_RGMP": [[421, 440], ["tensorflow.nn.relu", "layers.conv2D_layer", "tensorflow.nn.relu", "layers.conv2D_layer"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer"], ["", "def", "residual_block_RGMP", "(", "input_", ",", "num_filters", ",", "reuse", "=", "False", ")", ":", "\n", "\n", "\n", "    ", "relu_temp", "=", "tf", ".", "nn", ".", "relu", "(", "input_", ")", "\n", "res1", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "relu_temp", ",", "\n", "name", "=", "'res1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "relu_res1", "=", "tf", ".", "nn", ".", "relu", "(", "res1", ")", "\n", "res2", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "relu_res1", ",", "\n", "name", "=", "'res2'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "out", "=", "input_", "+", "res2", "\n", "return", "out", "\n", "", "def", "refinement_module", "(", "input_", ",", "skip", ",", "num_filters", ",", "reuse", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.refinement_module": [[440, 466], ["layers.conv2D_layer", "tensorflow.variable_scope", "tensorflow.contrib.layers.conv2d_transpose", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP"], ["", "def", "refinement_module", "(", "input_", ",", "skip", ",", "num_filters", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'refinement_upscale'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "upsampled", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d_transpose", "(", "\n", "input_", ",", "\n", "num_filters", ",", "\n", "4", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "activation_fn", "=", "None", ",", "\n", "trainable", "=", "False", "\n", ")", "\n", "", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "skip", ",", "\n", "name", "=", "'temp_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'residual_block1'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "res_out1", "=", "deeplab_residual_block_RGMP", "(", "temp", ",", "num_filters", ")", "\n", "\n", "", "temp_sum", "=", "res_out1", "+", "upsampled", "\n", "with", "tf", ".", "variable_scope", "(", "'residual_block2'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "out", "=", "deeplab_residual_block_RGMP", "(", "temp_sum", ",", "num_filters", ")", "\n", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.get_side_prediction": [[467, 503], ["tensorflow.variable_scope", "layers.conv2D_layer", "range", "layers.coord_conv2D_layer", "tensorflow.nn.sigmoid", "tensorflow.variable_scope", "mem_net.residual_block_RGMP", "tensorflow.variable_scope", "mem_net.residual_block_RGMP", "tensorflow.contrib.layers.conv2d_transpose", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.residual_block_RGMP"], ["", "def", "get_side_prediction", "(", "post_processed", ",", "reuse", "=", "False", ",", "scope", "=", "'side_estimator'", ")", ":", "\n", "    ", "num_filters", "=", "128", "\n", "y", "=", "post_processed", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "y", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'init_res_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "2", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'module'", "+", "str", "(", "k", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "                ", "y", "=", "residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "y", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d_transpose", "(", "\n", "y", ",", "\n", "num_filters", ",", "\n", "4", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "activation_fn", "=", "None", ",", "\n", "trainable", "=", "False", "\n", ")", "\n", "\n", "\n", "", "", "temp", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'last_conv1'", ",", "\n", "\n", "num_filters", "=", "6", ",", "\n", "\n", "activation", "=", "tf", ".", "identity", ")", "\n", "\n", "\n", "", "return", "temp", ",", "tf", ".", "nn", ".", "sigmoid", "(", "temp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.vertical_residual_block": [[504, 523], ["tensorflow.nn.relu", "layers.coord_conv2D_layer", "tensorflow.nn.relu", "layers.coord_conv2D_layer"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer"], ["", "def", "vertical_residual_block", "(", "input_", ",", "num_filters", ",", "reuse", "=", "False", ")", ":", "\n", "\n", "\n", "    ", "relu_temp", "=", "tf", ".", "nn", ".", "relu", "(", "input_", ")", "\n", "res1", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "relu_temp", ",", "\n", "name", "=", "'vert1'", ",", "\n", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "relu_res1", "=", "tf", ".", "nn", ".", "relu", "(", "res1", ")", "\n", "res2", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "relu_res1", ",", "\n", "name", "=", "'vert2'", ",", "\n", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "out", "=", "input_", "+", "res2", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_bev_object_decoder": [[524, 676], ["tensorflow.variable_scope", "layers.coord_conv2D_layer", "layers.coord_conv2D_layer", "tensorflow.slice", "layers.conv2D_layer", "layers.conv2D_layer", "layers.conv2D_layer", "layers.conv2D_layer", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.vertical_residual_block", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.vertical_residual_block", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.vertical_residual_block", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.vertical_residual_block", "tensorflow.variable_scope", "mem_net.refinement_module", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "tensorflow.contrib.layers.conv2d_transpose", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "tensorflow.contrib.layers.conv2d_transpose", "tensorflow.variable_scope", "tensorflow.contrib.layers.conv2d_transpose", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "tensorflow.contrib.layers.conv2d_transpose", "tensorflow.nn.sigmoid", "tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.vertical_residual_block", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.vertical_residual_block", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.vertical_residual_block", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.vertical_residual_block", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.refinement_module", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP"], ["", "def", "my_bev_object_decoder", "(", "endpoints", ",", "y", ",", "exp_config", ",", "apply_softmax", "=", "False", ",", "reuse", "=", "False", ",", "scope", "=", "'my_bev_object_decoder'", ")", ":", "\n", "    ", "\"\"\"Produces the mask from the encoder endpoints and the memory read output\n    Args:\n    endpoints: The output of the residual block in each stage of the encoder ()\n    out_size: Size of the output feature map\n    Returns:\n    Tensor that performs the cropping\n    \n    \"\"\"", "\n", "\n", "num_filters", "=", "128", "\n", "\n", "#    layer_names = ['road_segment', 'lane', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area']", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "y", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'init_res_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y_base", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'init_vert_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y_base", "=", "vertical_residual_block", "(", "y_base", ",", "num_filters", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'init_res_block2'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y_base", "=", "deeplab_residual_block_RGMP", "(", "y_base", ",", "num_filters", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'init_vert_block2'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y_base", "=", "vertical_residual_block", "(", "y_base", ",", "num_filters", ")", "\n", "\n", "# with tf.variable_scope('init_res_block3', reuse=reuse):", "\n", "#     y_base=deeplab_residual_block_RGMP(y_base, num_filters)", "\n", "\n", "\n", "", "processed_endpoint", "=", "endpoints", "[", "0", "]", "\n", "processed_endpoint", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "processed_endpoint", ",", "\n", "name", "=", "'processed_endpoint_init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'processed_endpoint_init_res_block1'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "processed_endpoint", "=", "deeplab_residual_block_RGMP", "(", "processed_endpoint", ",", "num_filters", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'processed_vert_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y_base", "=", "vertical_residual_block", "(", "y_base", ",", "num_filters", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'processed_endpoint_init_res_block2'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "processed_endpoint", "=", "deeplab_residual_block_RGMP", "(", "processed_endpoint", ",", "num_filters", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'processed_vert_block2'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y_base", "=", "vertical_residual_block", "(", "y_base", ",", "num_filters", ")", "\n", "# with tf.variable_scope('processed_endpoint_init_res_block3', reuse=reuse):", "\n", "#     processed_endpoint=deeplab_residual_block_RGMP(processed_endpoint, num_filters)", "\n", "\n", "\n", "# for i in range(1):", "\n", "", "with", "tf", ".", "variable_scope", "(", "'refine_module1'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y_base", "=", "refinement_module", "(", "y_base", ",", "processed_endpoint", ",", "num_filters", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'after_refine_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y_base", "=", "deeplab_residual_block_RGMP", "(", "y_base", ",", "num_filters", ")", "\n", "", "y_base", "=", "tf", ".", "slice", "(", "y_base", ",", "[", "0", ",", "int", "(", "exp_config", ".", "extra_space", "[", "0", "]", "/", "8", ")", ",", "int", "(", "exp_config", ".", "extra_space", "[", "1", "]", "/", "8", ")", ",", "0", "]", ",", "[", "-", "1", ",", "int", "(", "exp_config", ".", "label_patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "label_patch_size", "[", "0", "]", "/", "4", ")", ",", "-", "1", "]", ")", "\n", "\n", "\n", "y", "=", "y_base", "\n", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'post_upscale'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d_transpose", "(", "\n", "y", ",", "\n", "num_filters", ",", "\n", "4", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "activation_fn", "=", "None", ",", "\n", "trainable", "=", "False", "\n", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'class_second_res_block2'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'post_upscale2'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d_transpose", "(", "\n", "y", ",", "\n", "num_filters", ",", "\n", "4", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "activation_fn", "=", "None", ",", "\n", "trainable", "=", "False", "\n", ")", "\n", "", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'last_conv1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "static_temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "temp", ",", "\n", "name", "=", "'last_conv_temp'", ",", "\n", "\n", "num_filters", "=", "exp_config", ".", "num_static_classes", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "y", "=", "y_base", "\n", "with", "tf", ".", "variable_scope", "(", "'object_post_upscale'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d_transpose", "(", "\n", "y", ",", "\n", "num_filters", ",", "\n", "4", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "activation_fn", "=", "None", ",", "\n", "trainable", "=", "False", "\n", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'object_class_second_res_block2'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'object_post_upscale2'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d_transpose", "(", "\n", "y", ",", "\n", "num_filters", ",", "\n", "4", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "activation_fn", "=", "None", ",", "\n", "trainable", "=", "False", "\n", ")", "\n", "", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'object_last_conv1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "object_temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "temp", ",", "\n", "name", "=", "'object_last_conv_temp'", ",", "\n", "\n", "num_filters", "=", "exp_config", ".", "num_object_classes", "+", "1", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "", "if", "apply_softmax", ":", "\n", "        ", "return", "static_temp", ",", "tf", ".", "nn", ".", "sigmoid", "(", "static_temp", ")", ",", "object_temp", ",", "tf", ".", "nn", ".", "softmax", "(", "object_temp", ")", "\n", "", "else", ":", "\n", "        ", "return", "static_temp", ",", "tf", ".", "nn", ".", "sigmoid", "(", "static_temp", ")", ",", "object_temp", ",", "tf", ".", "nn", ".", "sigmoid", "(", "object_temp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_object_side_decoder": [[679, 733], ["tensorflow.variable_scope", "layers.coord_conv2D_layer", "range", "layers.conv2D_layer", "layers.conv2D_layer", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.variable_scope", "mem_net.refinement_module", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.refinement_module"], ["", "", "def", "my_object_side_decoder", "(", "endpoints", ",", "y", ",", "exp_config", ",", "reuse", "=", "False", ",", "apply_softmax", "=", "False", ",", "scope", "=", "'object_side_decoder'", ")", ":", "\n", "    ", "\"\"\"Produces the mask from the encoder endpoints and the memory read output\n    Args:\n    endpoints: The output of the residual block in each stage of the encoder ()\n    out_size: Size of the output feature map\n    Returns:\n    Tensor that performs the cropping\n    \n    \"\"\"", "\n", "\n", "num_filters", "=", "128", "\n", "\n", "#    layer_names = ['road_segment', 'lane', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area']", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "y", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'init_res_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'refine_module'", "+", "str", "(", "i", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "                ", "y", "=", "refinement_module", "(", "y", ",", "endpoints", "[", "i", "]", ",", "num_filters", ")", "\n", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'object_part'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "\n", "\n", "\n", "", "temp_obj", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'obj_last_conv1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "temp_obj", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "temp_obj", ",", "\n", "name", "=", "'obj_last_conv_temp'", ",", "\n", "\n", "num_filters", "=", "exp_config", ".", "num_object_classes", "+", "1", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "\n", "", "if", "apply_softmax", ":", "\n", "\n", "        ", "return", "temp_obj", ",", "tf", ".", "nn", ".", "softmax", "(", "temp_obj", ")", "\n", "", "else", ":", "\n", "        ", "return", "temp_obj", ",", "tf", ".", "nn", ".", "sigmoid", "(", "temp_obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.compat_my_side_decoder": [[736, 821], ["tensorflow.variable_scope", "layers.coord_conv2D_layer", "range", "layers.conv2D_layer", "layers.conv2D_layer", "layers.conv2D_layer", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "layers.conv2D_layer", "layers.conv2D_layer", "tensorflow.variable_scope", "mem_net.refinement_module", "tensorflow.slice", "tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.refinement_module"], ["", "", "def", "compat_my_side_decoder", "(", "endpoints", ",", "y", ",", "reuse", "=", "False", ",", "num_classes", "=", "6", ",", "scope", "=", "'side_decoder'", ")", ":", "\n", "    ", "\"\"\"Produces the mask from the encoder endpoints and the memory read output\n    Args:\n    endpoints: The output of the residual block in each stage of the encoder ()\n    out_size: Size of the output feature map\n    Returns:\n    Tensor that performs the cropping\n    \n    \"\"\"", "\n", "\n", "num_filters", "=", "128", "\n", "\n", "#    layer_names = ['road_segment', 'lane', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area']", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "y", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'init_res_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'refine_module'", "+", "str", "(", "i", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "                ", "y", "=", "refinement_module", "(", "y", ",", "endpoints", "[", "i", "]", ",", "num_filters", ")", "\n", "\n", "", "", "y_base", "=", "y", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'occlusion_part'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "\n", "\n", "", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'occlusion_last_conv1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "temp_occlusion", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "temp", ",", "\n", "name", "=", "'occlusion_last_conv_temp'", ",", "\n", "\n", "num_filters", "=", "2", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "\n", "y", "=", "y_base", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'mask_part'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "\n", "\n", "\n", "", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'last_conv1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "if", "num_classes", "==", "1", ":", "\n", "            ", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "temp", ",", "\n", "name", "=", "'last_conv_temp'", ",", "\n", "\n", "num_filters", "=", "2", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "# return temp, temp_occlusion, tf.nn.sigmoid(temp), tf.nn.softmax(temp_occlusion)", "\n", "\n", "return", "temp", ",", "temp_occlusion", ",", "tf", ".", "slice", "(", "tf", ".", "nn", ".", "softmax", "(", "temp", ")", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "tf", ".", "nn", ".", "softmax", "(", "temp_occlusion", ")", "\n", "\n", "", "else", ":", "\n", "            ", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "temp", ",", "\n", "name", "=", "'last_conv_temp'", ",", "\n", "\n", "num_filters", "=", "num_classes", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "return", "temp", ",", "temp_occlusion", ",", "tf", ".", "nn", ".", "sigmoid", "(", "temp", ")", ",", "tf", ".", "nn", ".", "softmax", "(", "temp_occlusion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_side_decoder": [[823, 904], ["tensorflow.variable_scope", "layers.coord_conv2D_layer", "range", "layers.conv2D_layer", "layers.conv2D_layer", "layers.conv2D_layer", "layers.conv2D_layer", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.nn.sigmoid", "tensorflow.nn.softmax", "tensorflow.variable_scope", "mem_net.refinement_module", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.refinement_module"], ["", "", "", "def", "my_side_decoder", "(", "endpoints", ",", "y", ",", "reuse", "=", "False", ",", "num_classes", "=", "6", ",", "scope", "=", "'side_decoder'", ")", ":", "\n", "    ", "\"\"\"Produces the mask from the encoder endpoints and the memory read output\n    Args:\n    endpoints: The output of the residual block in each stage of the encoder ()\n    out_size: Size of the output feature map\n    Returns:\n    Tensor that performs the cropping\n    \n    \"\"\"", "\n", "\n", "num_filters", "=", "128", "\n", "\n", "#    layer_names = ['road_segment', 'lane', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area']", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "y", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'init_res_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'refine_module'", "+", "str", "(", "i", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "                ", "y", "=", "refinement_module", "(", "y", ",", "endpoints", "[", "i", "]", ",", "num_filters", ")", "\n", "\n", "", "", "y_base", "=", "y", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'occlusion_part'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "\n", "\n", "", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'occlusion_last_conv1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "temp_occlusion", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "temp", ",", "\n", "name", "=", "'occlusion_last_conv_temp'", ",", "\n", "\n", "num_filters", "=", "2", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "\n", "y", "=", "y_base", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'mask_part'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "\n", "\n", "\n", "", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'last_conv1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "# if num_classes == 1:", "\n", "#     temp = layers.conv2D_layer(bottom=temp,", "\n", "#         name='last_conv_temp',", "\n", "\n", "#         num_filters=2,", "\n", "\n", "#         activation=linear_activation)", "\n", "#     return temp, temp_occlusion, tf.slice(tf.nn.softmax(temp),[0,0,0,1],[-1,-1,-1,-1]), tf.nn.softmax(temp_occlusion)", "\n", "# else:", "\n", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "temp", ",", "\n", "name", "=", "'last_conv_temp'", ",", "\n", "\n", "num_filters", "=", "num_classes", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "return", "temp", ",", "temp_occlusion", ",", "tf", ".", "nn", ".", "sigmoid", "(", "temp", ")", ",", "tf", ".", "nn", ".", "softmax", "(", "temp_occlusion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_image_decoder": [[906, 936], ["tensorflow.variable_scope", "layers.conv2D_layer", "range", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.variable_scope", "mem_net.refinement_module", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.refinement_module"], ["", "", "def", "my_image_decoder", "(", "endpoints", ",", "y", ",", "reuse", "=", "False", ",", "scope", "=", "'my_image_decoder'", ")", ":", "\n", "    ", "\"\"\"Produces the mask from the encoder endpoints and the memory read output\n    Args:\n    endpoints: The output of the residual block in each stage of the encoder ()\n    out_size: Size of the output feature map\n    Returns:\n    Tensor that performs the cropping\n    \n    \"\"\"", "\n", "\n", "num_filters", "=", "256", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "y", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'init_res_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y_base", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "", "y", "=", "y_base", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'refine_module'", "+", "str", "(", "i", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "                ", "y", "=", "refinement_module", "(", "y", ",", "endpoints", "[", "i", "]", ",", "num_filters", ")", "\n", "\n", "\n", "\n", "", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.resnet_feature_refiner": [[937, 965], ["tensorflow.variable_scope", "layers.conv2D_layer", "range", "tensorflow.variable_scope", "mem_net.residual_block_RGMP", "tensorflow.variable_scope", "mem_net.refinement_module", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.residual_block_RGMP", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.refinement_module"], ["", "def", "resnet_feature_refiner", "(", "endpoints", ",", "y", ",", "reuse", "=", "False", ",", "scope", "=", "'resnet_feature_refiner'", ")", ":", "\n", "    ", "\"\"\"Produces the mask from the encoder endpoints and the memory read output\n    Args:\n    endpoints: The output of the residual block in each stage of the encoder ()\n    out_size: Size of the output feature map\n    Returns:\n    Tensor that performs the cropping\n    \n    \"\"\"", "\n", "\n", "num_filters", "=", "256", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "y", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "y", ",", "\n", "name", "=", "'init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'init_res_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y_base", "=", "residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "", "y", "=", "y_base", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'refine_module'", "+", "str", "(", "i", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "                ", "y", "=", "refinement_module", "(", "y", ",", "endpoints", "[", "i", "]", ",", "num_filters", ")", "\n", "\n", "", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.image_encoder": [[966, 989], ["tensorflow.variable_scope", "logging.error", "mem_net.backbone_deeplab", "tf.image.resize.get_shape().as_list", "logging.error", "logging.error", "input_img.get_shape().as_list", "mem_net.xception_decoder", "str", "tf.image.resize.get_shape", "str", "tensorflow.image.resize", "str", "input_img.get_shape", "int", "int"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.backbone_deeplab", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.xception_decoder"], ["", "def", "image_encoder", "(", "input_img", ",", "input_mask", ",", "my_model_options", ",", "downsample_stages", "=", "4", ",", "use_deeplab", "=", "True", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ",", "scope", "=", "'image_encoder'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "image_shape", "=", "input_img", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "3", "]", "\n", "logging", ".", "error", "(", "'IMAGE SHAPE '", "+", "str", "(", "image_shape", ")", ")", "\n", "\n", "backbone_out", ",", "relative_end_points", ",", "endpoints", "=", "backbone_deeplab", "(", "input_img", ",", "input_mask", ",", "scope", ",", "my_model_options", ",", "is_training", "=", "is_training", ",", "reuse", "=", "reuse", ")", "\n", "backbone_shape", "=", "backbone_out", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "logging", ".", "error", "(", "'BACKBONE SHAPE '", "+", "str", "(", "backbone_shape", ")", ")", "\n", "\n", "\n", "if", "downsample_stages", "==", "2", ":", "\n", "\n", "            ", "backbone_out", "=", "xception_decoder", "(", "backbone_out", ",", "endpoints", ",", "image_shape", ",", "reuse", "=", "reuse", ")", "\n", "", "elif", "downsample_stages", "==", "3", ":", "\n", "            ", "return", "backbone_out", ",", "relative_end_points", ",", "endpoints", "\n", "\n", "", "else", ":", "\n", "            ", "backbone_out", "=", "tf", ".", "image", ".", "resize", "(", "\n", "backbone_out", ",", "[", "int", "(", "backbone_shape", "[", "1", "]", "/", "2", ")", ",", "int", "(", "backbone_shape", "[", "2", "]", "/", "2", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'backbone_resize'", ")", "\n", "\n", "", "logging", ".", "error", "(", "'BACKBONE SHAPE '", "+", "str", "(", "backbone_out", ")", ")", "\n", "\n", "", "return", "backbone_out", ",", "relative_end_points", ",", "endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.backbone_deeplab": [[994, 1032], ["relative_endpoints.append", "relative_endpoints.append", "tensorflow.variable_scope", "deeplab.model.extract_features", "dict", "list", "end_points.keys", "entry.replace"], "function", ["None"], ["", "def", "backbone_deeplab", "(", "input_img", ",", "input_mask", ",", "higher_scope", ",", "my_model_options", ",", "is_training", "=", "True", ",", "reuse", "=", "False", ",", "scope", "=", "'mem_net_backbone'", ")", ":", "\n", "    ", "\"\"\"Defines the OSVOS network\n    Args:\n    inputs: Tensorflow placeholder that contains the input image\n    scope: Scope name for the network\n    Returns:\n    net: Output Tensor of the network\n    end_points: Dictionary with all Tensors of the network\n    \"\"\"", "\n", "\n", "\n", "#    image_size=(320,320)", "\n", "#    relative_end_points = []", "\n", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'mem_net_backbone'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "features", ",", "end_points", "=", "model", ".", "extract_features", "(", "\n", "input_img", ",", "\n", "my_model_options", ",", "\n", "is_training", "=", "False", ")", "\n", "# logging.error(str(end_points))", "\n", "# logging.error('FEATURES ' + str(features))", "\n", "\n", "modified_endpoints", "=", "dict", "(", ")", "\n", "\n", "for", "entry", "in", "list", "(", "end_points", ".", "keys", "(", ")", ")", ":", "\n", "            ", "temp_entry", "=", "entry", ".", "replace", "(", "higher_scope", "+", "'/mem_net_backbone/'", ",", "''", ")", "\n", "modified_endpoints", "[", "temp_entry", "]", "=", "end_points", "[", "entry", "]", "\n", "\n", "\n", "\n", "", "", "relative_endpoints", "=", "[", "]", "\n", "\n", "relative_endpoints", ".", "append", "(", "features", ")", "\n", "relative_endpoints", ".", "append", "(", "modified_endpoints", "[", "'xception_65/entry_flow/block2/unit_1/xception_module/separable_conv2_pointwise'", "]", ")", "\n", "\n", "\n", "return", "features", ",", "relative_endpoints", ",", "modified_endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.xception_decoder": [[1033, 1054], ["tensorflow.variable_scope", "deeplab.model.refine_by_decoder"], "function", ["None"], ["", "def", "xception_decoder", "(", "features", ",", "modified_endpoints", ",", "image_size", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'pretrained_decoder'", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "\n", "        ", "upsampled_features", "=", "model", ".", "refine_by_decoder", "(", "features", ",", "\n", "modified_endpoints", ",", "\n", "crop_size", "=", "image_size", ",", "\n", "decoder_output_stride", "=", "[", "4", "]", ",", "\n", "decoder_use_separable_conv", "=", "True", ",", "\n", "decoder_use_sum_merge", "=", "False", ",", "\n", "decoder_filters", "=", "256", ",", "\n", "decoder_output_is_logits", "=", "False", ",", "\n", "model_variant", "=", "'xception_65'", ",", "\n", "weight_decay", "=", "0.0001", ",", "\n", "reuse", "=", "None", ",", "\n", "is_training", "=", "False", ",", "\n", "fine_tune_batch_norm", "=", "False", ",", "\n", "use_bounded_activation", "=", "False", ",", "\n", "sync_batch_norm_method", "=", "'None'", ")", "\n", "\n", "return", "upsampled_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.post_concat_block": [[1056, 1072], ["tensorflow.variable_scope", "layers.conv2D_layer", "tensorflow.variable_scope", "tensorflow.nn.relu", "mem_net.deeplab_residual_block_RGMP"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP"], ["", "", "def", "post_concat_block", "(", "features", ",", "exp_config", ",", "reuse", "=", "False", ",", "scope", "=", "'post_concat_block'", ")", ":", "\n", "    ", "num_filters", "=", "256", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "y", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "features", ",", "\n", "name", "=", "'init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'init_res_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "tf", ".", "nn", ".", "relu", "(", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", ")", "\n", "\n", "\n", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_occlusion_finder": [[1075, 1108], ["tensorflow.variable_scope", "layers.conv2D_layer", "layers.coord_conv2D_layer", "layers.conv2D_layer", "tensorflow.nn.softmax", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP"], ["", "def", "deeplab_occlusion_finder", "(", "features", ",", "exp_config", ",", "reuse", "=", "False", ",", "scope", "=", "'deeplab_occlusion_finder'", ")", ":", "\n", "    ", "num_filters", "=", "128", "\n", "\n", "#    layer_names = ['road_segment', 'lane', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area']", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "y", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "features", ",", "\n", "name", "=", "'init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'init_res_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "#        with tf.variable_scope('second_res_block', reuse=reuse):", "\n", "#            y=residual_block_RGMP(y, num_filters)", "\n", "\n", "", "temp", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "tf", ".", "nn", ".", "relu", "(", "y", ")", ",", "\n", "name", "=", "'last_conv1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "\n", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "temp", ",", "\n", "name", "=", "'last_conv4'", ",", "\n", "\n", "num_filters", "=", "2", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "", "return", "temp", ",", "tf", ".", "nn", ".", "softmax", "(", "temp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_refiner": [[1109, 1142], ["tensorflow.variable_scope", "layers.conv2D_layer", "layers.coord_conv2D_layer", "layers.conv2D_layer", "tensorflow.nn.sigmoid", "tensorflow.variable_scope", "mem_net.deeplab_residual_block_RGMP", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.deeplab_residual_block_RGMP"], ["", "def", "deeplab_refiner", "(", "features", ",", "exp_config", ",", "reuse", "=", "False", ",", "scope", "=", "'deeplab_refiner'", ")", ":", "\n", "    ", "num_filters", "=", "128", "\n", "\n", "#    layer_names = ['road_segment', 'lane', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area']", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "y", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "features", ",", "\n", "name", "=", "'init_conv'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'init_res_block'", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "y", "=", "deeplab_residual_block_RGMP", "(", "y", ",", "num_filters", ")", "\n", "\n", "#        with tf.variable_scope('second_res_block', reuse=reuse):", "\n", "#            y=residual_block_RGMP(y, num_filters)", "\n", "\n", "", "temp", "=", "layers", ".", "coord_conv2D_layer", "(", "bottom", "=", "tf", ".", "nn", ".", "relu", "(", "y", ")", ",", "\n", "name", "=", "'last_conv1'", ",", "\n", "\n", "num_filters", "=", "num_filters", ",", "\n", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "\n", "temp", "=", "layers", ".", "conv2D_layer", "(", "bottom", "=", "temp", ",", "\n", "name", "=", "'last_conv4'", ",", "\n", "\n", "num_filters", "=", "exp_config", ".", "num_classes", ",", "\n", "\n", "activation", "=", "linear_activation", ")", "\n", "\n", "", "return", "temp", ",", "tf", ".", "nn", ".", "sigmoid", "(", "temp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.upsample_filt": [[1143, 1152], ["abs", "abs"], "function", ["None"], ["", "def", "upsample_filt", "(", "size", ")", ":", "\n", "    ", "factor", "=", "(", "size", "+", "1", ")", "//", "2", "\n", "if", "size", "%", "2", "==", "1", ":", "\n", "        ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "        ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "size", ",", ":", "size", "]", "\n", "return", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.interp_surgery": [[1156, 1173], ["print", "print", "v.get_shape", "numpy.zeros", "mem_net.upsample_filt", "interp_tensors.append", "str", "ValueError", "ValueError", "int", "tensorflow.assign", "str", "np.zeros.transpose", "range", "range"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.upsample_filt"], ["", "def", "interp_surgery", "(", "variables", ")", ":", "\n", "    ", "interp_tensors", "=", "[", "]", "\n", "for", "v", "in", "variables", ":", "\n", "        ", "if", "'upscale'", "in", "v", ".", "name", ":", "\n", "            ", "print", "(", "'Variable in surgery : '", "+", "str", "(", "v", ".", "name", ")", ")", "\n", "if", "'weights'", "in", "v", ".", "name", ":", "\n", "                ", "print", "(", "'Variable in surgery : '", "+", "str", "(", "v", ".", "name", ")", ")", "\n", "h", ",", "w", ",", "k", ",", "m", "=", "v", ".", "get_shape", "(", ")", "\n", "tmp", "=", "np", ".", "zeros", "(", "(", "m", ",", "k", ",", "h", ",", "w", ")", ")", "\n", "if", "m", "!=", "k", ":", "\n", "                    ", "raise", "ValueError", "(", "'input + output channels need to be the same'", ")", "\n", "", "if", "h", "!=", "w", ":", "\n", "                    ", "raise", "ValueError", "(", "'filters need to be square'", ")", "\n", "", "up_filter", "=", "upsample_filt", "(", "int", "(", "h", ")", ")", "\n", "tmp", "[", "range", "(", "m", ")", ",", "range", "(", "k", ")", ",", ":", ",", ":", "]", "=", "up_filter", "\n", "interp_tensors", ".", "append", "(", "tf", ".", "assign", "(", "v", ",", "tmp", ".", "transpose", "(", "(", "2", ",", "3", ",", "1", ",", "0", ")", ")", ",", "validate_shape", "=", "True", ",", "use_locking", "=", "True", ")", ")", "\n", "", "", "", "return", "interp_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net._mean_image_subtraction": [[1174, 1199], ["image.get_shape", "tensorflow.constant", "tensorflow.tile", "numpy.array"], "function", ["None"], ["", "def", "_mean_image_subtraction", "(", "image", ")", ":", "\n", "  ", "\"\"\"Subtracts the given means from each image channel.\n  For example:\n    means = [123.68, 116.779, 103.939]\n    image = _mean_image_subtraction(image, means)\n  Note that the rank of `image` must be known.\n  Args:\n    image: a tensor of size [height, width, C].\n    means: a C-vector of values to subtract from each channel.\n  Returns:\n    the centered image.\n  Raises:\n    ValueError: If the rank of `image` is unknown, if `image` has a rank other\n      than three or if the number of channels in `image` doesn't match the\n      number of values in `means`.\n  \"\"\"", "\n", "\n", "shapes", "=", "image", ".", "get_shape", "(", ")", "\n", "means_tensor", "=", "tf", ".", "constant", "(", "\n", "np", ".", "array", "(", "[", "123.68", ",", "116.779", ",", "103.939", "]", ",", "dtype", "=", "np", ".", "single", ")", "\n", ")", "\n", "\n", "temp", "=", "tf", ".", "tile", "(", "means_tensor", ",", "[", "shapes", "[", "0", "]", ",", "shapes", "[", "1", "]", ",", "shapes", "[", "2", "]", ",", "1", "]", ")", "\n", "\n", "return", "image", "-", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.preprocess_img": [[1201, 1215], ["numpy.subtract", "type", "numpy.array", "numpy.array", "PIL.Image.open"], "function", ["None"], ["", "def", "preprocess_img", "(", "image", ")", ":", "\n", "    ", "\"\"\"Preprocess the image to adapt it to network requirements\n    Args:\n    Image we want to input the network (W,H,3) numpy array\n    Returns:\n    Image ready to input the network (1,W,H,3)\n    \"\"\"", "\n", "if", "type", "(", "image", ")", "is", "not", "np", ".", "ndarray", ":", "\n", "        ", "image", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "image", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "in_", "=", "np", ".", "subtract", "(", "image", ",", "np", ".", "array", "(", "(", "123.68", ",", "116.779", ",", "103.939", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "# in_ = tf.subtract(tf.cast(in_, tf.float32), np.array((104.00699, 116.66877, 122.67892), dtype=np.float32))", "\n", "\n", "return", "in_", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.preprocess_labels": [[1218, 1235], ["numpy.greater", "numpy.expand_dims", "type", "numpy.array", "numpy.max", "numpy.expand_dims", "PIL.Image.open().split", "PIL.Image.open"], "function", ["None"], ["", "def", "preprocess_labels", "(", "label", ")", ":", "\n", "    ", "\"\"\"Preprocess the labels to adapt them to the loss computation requirements\n    Args:\n    Label corresponding to the input image (W,H) numpy array\n    Returns:\n    Label ready to compute the loss (1,W,H,1)\n    \"\"\"", "\n", "if", "type", "(", "label", ")", "is", "not", "np", ".", "ndarray", ":", "\n", "        ", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "label", ")", ".", "split", "(", ")", "[", "0", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "max_mask", "=", "np", ".", "max", "(", "label", ")", "*", "0.5", "\n", "label", "=", "np", ".", "greater", "(", "label", ",", "max_mask", ")", "\n", "label", "=", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "label", ",", "axis", "=", "0", ")", ",", "axis", "=", "3", ")", "\n", "# label = tf.cast(np.array(label), tf.float32)", "\n", "# max_mask = tf.multiply(tf.reduce_max(label), 0.5)", "\n", "# label = tf.cast(tf.greater(label, max_mask), tf.float32)", "\n", "# label = tf.expand_dims(tf.expand_dims(label, 0), 3)", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.load_vgg_imagenet": [[1237, 1254], ["tensorflow.train.NewCheckpointReader", "tf.train.NewCheckpointReader.get_variable_to_shape_map", "dict", "slim.assign_from_checkpoint_fn", "slim.get_model_variables", "v.replace"], "function", ["None"], ["", "def", "load_vgg_imagenet", "(", "ckpt_path", ")", ":", "\n", "    ", "\"\"\"Initialize the network parameters from the VGG-16 pre-trained model provided by TF-SLIM\n    Args:\n    Path to the checkpoint\n    Returns:\n    Function that takes a session and initializes the network\n    \"\"\"", "\n", "reader", "=", "tf", ".", "train", ".", "NewCheckpointReader", "(", "ckpt_path", ")", "\n", "var_to_shape_map", "=", "reader", ".", "get_variable_to_shape_map", "(", ")", "\n", "vars_corresp", "=", "dict", "(", ")", "\n", "for", "v", "in", "var_to_shape_map", ":", "\n", "        ", "if", "\"conv\"", "in", "v", ":", "\n", "            ", "vars_corresp", "[", "v", "]", "=", "slim", ".", "get_model_variables", "(", "v", ".", "replace", "(", "\"vgg_16\"", ",", "\"osvos\"", ")", ")", "[", "0", "]", "\n", "", "", "init_fn", "=", "slim", ".", "assign_from_checkpoint_fn", "(", "\n", "ckpt_path", ",", "\n", "vars_corresp", ")", "\n", "return", "init_fn", "\n", "", ""]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.linear_activation": [[11, 16], ["None"], "function", ["None"], ["def", "linear_activation", "(", "x", ")", ":", "\n", "    ", "'''\n    A linear activation function (i.e. no non-linearity)\n    '''", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.activation_layer": [[17, 28], ["tensorflow.name_scope", "activation", "tensorflow.summary.histogram"], "function", ["None"], ["", "def", "activation_layer", "(", "bottom", ",", "name", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "    ", "'''\n    Custom activation layer, with the tf.nn.relu as default\n    '''", "\n", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "\n", "        ", "op", "=", "activation", "(", "bottom", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "op", ".", "op", ".", "name", "+", "'/activations'", ",", "op", ")", "\n", "\n", "", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.max_pool_layer2d": [[29, 40], ["tensorflow.nn.max_pool"], "function", ["None"], ["", "def", "max_pool_layer2d", "(", "x", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ")", ":", "\n", "    ", "'''\n    2D max pooling layer with standard 2x2 pooling as default\n    '''", "\n", "\n", "kernel_size_aug", "=", "[", "1", ",", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "1", "]", "\n", "strides_aug", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "1", "]", "\n", "\n", "op", "=", "tf", ".", "nn", ".", "max_pool", "(", "x", ",", "ksize", "=", "kernel_size_aug", ",", "strides", "=", "strides_aug", ",", "padding", "=", "padding", ")", "\n", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.max_pool_layer3d": [[41, 52], ["tensorflow.nn.max_pool3d"], "function", ["None"], ["", "def", "max_pool_layer3d", "(", "x", ",", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ")", ":", "\n", "    ", "'''\n    3D max pooling layer with 2x2x2 pooling as default\n    '''", "\n", "\n", "kernel_size_aug", "=", "[", "1", ",", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "kernel_size", "[", "2", "]", ",", "1", "]", "\n", "strides_aug", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "strides", "[", "2", "]", ",", "1", "]", "\n", "\n", "op", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "x", ",", "ksize", "=", "kernel_size_aug", ",", "strides", "=", "strides_aug", ",", "padding", "=", "padding", ")", "\n", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.concat_layer": [[53, 67], ["tensorflow.concat"], "function", ["None"], ["", "def", "concat_layer", "(", "inputs", ",", "axis", "=", "-", "1", ")", ":", "\n", "\n", "    ", "'''\n    Layer for cropping and stacking feature maps of different size along a different axis. \n    Currently, the first feature map in the inputs list defines the output size. \n    The feature maps can have different numbers of channels. \n    :param inputs: A list of input tensors of the same dimensionality but can have different sizes\n    :param axis: Axis along which to concatentate the inputs\n    :return: The concatentated feature map tensor\n    '''", "\n", "\n", "\n", "\n", "return", "tf", ".", "concat", "(", "inputs", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.crop_and_concat_layer": [[68, 101], ["inputs[].get_shape().as_list", "range", "tensorflow.concat", "len", "inputs[].get_shape().as_list", "concat_inputs.append", "inputs[].get_shape", "numpy.subtract", "len", "tensorflow.slice", "inputs[].get_shape", "len", "tensorflow.slice", "ValueError", "len"], "function", ["None"], ["", "def", "crop_and_concat_layer", "(", "inputs", ",", "axis", "=", "-", "1", ")", ":", "\n", "\n", "    ", "'''\n    Layer for cropping and stacking feature maps of different size along a different axis. \n    Currently, the first feature map in the inputs list defines the output size. \n    The feature maps can have different numbers of channels. \n    :param inputs: A list of input tensors of the same dimensionality but can have different sizes\n    :param axis: Axis along which to concatentate the inputs\n    :return: The concatentated feature map tensor\n    '''", "\n", "\n", "output_size", "=", "inputs", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "concat_inputs", "=", "[", "inputs", "[", "0", "]", "]", "\n", "\n", "for", "ii", "in", "range", "(", "1", ",", "len", "(", "inputs", ")", ")", ":", "\n", "\n", "        ", "larger_size", "=", "inputs", "[", "ii", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "start_crop", "=", "np", ".", "subtract", "(", "larger_size", ",", "output_size", ")", "//", "2", "\n", "\n", "if", "len", "(", "output_size", ")", "==", "5", ":", "# 3D images", "\n", "            ", "cropped_tensor", "=", "tf", ".", "slice", "(", "inputs", "[", "ii", "]", ",", "\n", "(", "0", ",", "start_crop", "[", "1", "]", ",", "start_crop", "[", "2", "]", ",", "start_crop", "[", "3", "]", ",", "0", ")", ",", "\n", "(", "-", "1", ",", "output_size", "[", "1", "]", ",", "output_size", "[", "2", "]", ",", "output_size", "[", "3", "]", ",", "-", "1", ")", ")", "\n", "", "elif", "len", "(", "output_size", ")", "==", "4", ":", "# 2D images", "\n", "            ", "cropped_tensor", "=", "tf", ".", "slice", "(", "inputs", "[", "ii", "]", ",", "\n", "(", "0", ",", "start_crop", "[", "1", "]", ",", "start_crop", "[", "2", "]", ",", "0", ")", ",", "\n", "(", "-", "1", ",", "output_size", "[", "1", "]", ",", "output_size", "[", "2", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected number of dimensions on tensor: %d'", "%", "len", "(", "output_size", ")", ")", "\n", "\n", "", "concat_inputs", ".", "append", "(", "cropped_tensor", ")", "\n", "\n", "", "return", "tf", ".", "concat", "(", "concat_inputs", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.pad_to_size": [[103, 128], ["bottom.get_shape().as_list", "numpy.subtract", "numpy.mod", "len", "NotImplementedError", "bottom.get_shape", "len", "tensorflow.pad", "print", "print", "tf.pad.get_shape().as_list", "tf.pad.get_shape"], "function", ["None"], ["", "def", "pad_to_size", "(", "bottom", ",", "output_size", ")", ":", "\n", "\n", "    ", "''' \n    A layer used to pad the tensor bottom to output_size by padding zeros around it\n    TODO: implement for 3D data\n    '''", "\n", "\n", "input_size", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "size_diff", "=", "np", ".", "subtract", "(", "output_size", ",", "input_size", ")", "\n", "\n", "pad_size", "=", "size_diff", "//", "2", "\n", "odd_bit", "=", "np", ".", "mod", "(", "size_diff", ",", "2", ")", "\n", "\n", "if", "len", "(", "input_size", ")", "==", "5", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'This layer has not yet been extended to 3D'", ")", "\n", "\n", "", "elif", "len", "(", "input_size", ")", "==", "4", ":", "\n", "\n", "        ", "padded", "=", "tf", ".", "pad", "(", "bottom", ",", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "\n", "[", "pad_size", "[", "1", "]", ",", "pad_size", "[", "1", "]", "+", "odd_bit", "[", "1", "]", "]", ",", "\n", "[", "pad_size", "[", "2", "]", ",", "pad_size", "[", "2", "]", "+", "odd_bit", "[", "2", "]", "]", ",", "\n", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "print", "(", "'Padded shape:'", ")", "\n", "print", "(", "padded", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "", "def", "batch_norm", "(", "_input", ",", "is_train", ",", "reuse", ",", "scope", ",", "scale", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.batch_norm": [[128, 137], ["tensorflow.contrib.layers.batch_norm"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.batch_norm"], ["", "", "def", "batch_norm", "(", "_input", ",", "is_train", ",", "reuse", ",", "scope", ",", "scale", "=", "True", ")", ":", "\n", "    ", "\"\"\"Batch normalization based on tf.contrib.layers.\n\n    \"\"\"", "\n", "return", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "\n", "_input", ",", "center", "=", "True", ",", "scale", "=", "scale", ",", "\n", "epsilon", "=", "1e-3", ",", "decay", "=", "0.9", ",", "\n", "is_training", "=", "is_train", ",", "reuse", "=", "reuse", ",", "updates_collections", "=", "None", ",", "\n", "scope", "=", "scope", ",", "fused", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.batch_normalisation_layer": [[138, 185], ["tensorflow.variable_scope", "len", "tensorflow.constant", "tensorflow.constant", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.moments", "tensorflow.train.ExponentialMovingAverage", "tensorflow.cond", "tensorflow.nn.batch_normalization", "bottom.get_shape().as_list", "bottom.get_shape().as_list", "tf.train.ExponentialMovingAverage.apply", "tensorflow.control_dependencies", "bottom.get_shape", "bottom.get_shape", "ValueError", "tensorflow.identity", "tensorflow.identity", "tf.train.ExponentialMovingAverage.average", "tf.train.ExponentialMovingAverage.average"], "function", ["None"], ["", "def", "batch_normalisation_layer", "(", "bottom", ",", "name", ",", "training", ")", ":", "\n", "    ", "'''\n    Batch normalisation layer (Adapted from https://github.com/tensorflow/tensorflow/issues/1122)\n    :param bottom: Input layer (should be before activation)\n    :param name: A name for the computational graph\n    :param training: A tf.bool specifying if the layer is executed at training or testing time \n    :return: Batch normalised activation\n    '''", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "        ", "n_out", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "tensor_dim", "=", "len", "(", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "if", "tensor_dim", "==", "2", ":", "\n", "# must be a dense layer", "\n", "            ", "moments_over_axes", "=", "[", "0", "]", "\n", "", "elif", "tensor_dim", "==", "4", ":", "\n", "# must be a 2D conv layer", "\n", "            ", "moments_over_axes", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "", "elif", "tensor_dim", "==", "5", ":", "\n", "# must be a 3D conv layer", "\n", "            ", "moments_over_axes", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "", "else", ":", "\n", "# is not likely to be something reasonable", "\n", "            ", "raise", "ValueError", "(", "'Tensor dim %d is not supported by this batch_norm layer'", "%", "tensor_dim", ")", "\n", "\n", "", "init_beta", "=", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "n_out", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "init_gamma", "=", "tf", ".", "constant", "(", "1.0", ",", "shape", "=", "[", "n_out", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "name", "=", "name", "+", "'_beta'", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "init_beta", ",", "regularizer", "=", "None", ",", "\n", "trainable", "=", "True", ")", "\n", "gamma", "=", "tf", ".", "get_variable", "(", "name", "=", "name", "+", "'_gamma'", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "init_gamma", ",", "regularizer", "=", "None", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "batch_mean", ",", "batch_var", "=", "tf", ".", "nn", ".", "moments", "(", "bottom", ",", "moments_over_axes", ",", "name", "=", "name", "+", "'_moments'", ")", "\n", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "decay", "=", "0.5", ")", "\n", "\n", "def", "mean_var_with_update", "(", ")", ":", "\n", "            ", "ema_apply_op", "=", "ema", ".", "apply", "(", "[", "batch_mean", ",", "batch_var", "]", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "ema_apply_op", "]", ")", ":", "\n", "                ", "return", "tf", ".", "identity", "(", "batch_mean", ")", ",", "tf", ".", "identity", "(", "batch_var", ")", "\n", "\n", "", "", "mean", ",", "var", "=", "tf", ".", "cond", "(", "training", ",", "mean_var_with_update", ",", "\n", "lambda", ":", "(", "ema", ".", "average", "(", "batch_mean", ")", ",", "ema", ".", "average", "(", "batch_var", ")", ")", ")", "\n", "normed", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "bottom", ",", "mean", ",", "var", ",", "beta", ",", "gamma", ",", "1e-3", ")", "\n", "\n", "return", "normed", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer": [[188, 263], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.concatenate", "tensorflow.constant", "tensorflow.concat", "tf.concat.get_shape().as_list", "tf.concat.get_shape().as_list", "tensorflow.shape", "tensorflow.tile", "tf.concat.get_shape().as_list", "tensorflow.name_scope", "tensorflow.nn.conv2d", "numpy.expand_dims", "numpy.expand_dims", "utils.get_rhs_dim", "layers._weight_variable_he_normal", "layers._bias_variable", "tensorflow.nn.bias_add", "activation", "tf.concat.get_shape", "tf.concat.get_shape", "numpy.expand_dims", "numpy.expand_dims", "tf.concat.get_shape", "layers._weight_variable_simple", "ValueError"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_rhs_dim", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_he_normal", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._bias_variable", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_simple"], ["", "", "def", "coord_conv2D_layer", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ",", "\n", "coord_multiplier", "=", "0.001", ",", "\n", "add_bias", "=", "True", ")", ":", "\n", "\n", "    ", "'''\n    Standard 2D convolutional layer\n    '''", "\n", "\n", "\n", "\n", "j_range", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "2", "]", "\n", "i_range", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "3", "]", "\n", "\n", "i_matrix", "=", "np", ".", "zeros", "(", "(", "i_range", ",", "j_range", ")", ",", "np", ".", "float32", ")", "\n", "j_matrix", "=", "np", ".", "zeros", "(", "(", "i_range", ",", "j_range", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "k", "in", "range", "(", "i_range", ")", ":", "\n", "        ", "i_matrix", "[", "k", ",", ":", "]", "=", "k", "\n", "", "for", "k", "in", "range", "(", "j_range", ")", ":", "\n", "        ", "j_matrix", "[", ":", ",", "k", "]", "=", "k", "\n", "\n", "\n", "#    max_val = np.max((i_range,j_range))", "\n", "", "i_matrix", "=", "(", "i_matrix", "-", "i_range", "/", "2", ")", "/", "(", "i_range", "/", "2", ")", "\n", "j_matrix", "=", "(", "j_matrix", "-", "j_range", "/", "2", ")", "/", "(", "j_range", "/", "2", ")", "\n", "batch_size", "=", "tf", ".", "shape", "(", "bottom", ")", "[", "0", "]", "\n", "\n", "coord_matrix", "=", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "i_matrix", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "0", ")", ",", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "j_matrix", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "0", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "coord_tensor", "=", "tf", ".", "constant", "(", "coord_matrix", ")", "\n", "coord_tensor", "=", "tf", ".", "tile", "(", "coord_tensor", ",", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", "*", "coord_multiplier", "\n", "\n", "\n", "\n", "bottom", "=", "tf", ".", "concat", "(", "[", "bottom", ",", "coord_tensor", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "bottom_num_filters", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "weight_shape", "=", "[", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "bottom_num_filters", ",", "num_filters", "]", "\n", "bias_shape", "=", "[", "num_filters", "]", "\n", "\n", "strides_augm", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "1", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "\n", "        ", "if", "weight_init", "==", "'he_normal'", ":", "\n", "            ", "N", "=", "utils", ".", "get_rhs_dim", "(", "bottom", ")", "\n", "weights", "=", "_weight_variable_he_normal", "(", "weight_shape", ",", "N", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "elif", "weight_init", "==", "'simple'", ":", "\n", "            ", "weights", "=", "_weight_variable_simple", "(", "weight_shape", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown weight initialisation method %s'", "%", "weight_init", ")", "\n", "\n", "\n", "\n", "", "op", "=", "tf", ".", "nn", ".", "conv2d", "(", "bottom", ",", "filter", "=", "weights", ",", "strides", "=", "strides_augm", ",", "padding", "=", "padding", ")", "\n", "if", "add_bias", ":", "\n", "            ", "biases", "=", "_bias_variable", "(", "bias_shape", ",", "name", "=", "name", "+", "'_b'", ")", "\n", "op", "=", "tf", ".", "nn", ".", "bias_add", "(", "op", ",", "biases", ")", "\n", "#            tf.summary.histogram(biases.name, biases)", "\n", "", "if", "activation", "!=", "None", ":", "\n", "\n", "            ", "op", "=", "activation", "(", "op", ")", "\n", "\n", "# Tensorboard variables", "\n", "#        tf.summary.histogram(weights.name, weights)", "\n", "\n", "#        tf.summary.histogram(op.op.name + '/activations', op)", "\n", "\n", "", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer": [[264, 312], ["bottom.get_shape().as_list", "tensorflow.name_scope", "tensorflow.nn.conv2d", "utils.get_rhs_dim", "layers._weight_variable_he_normal", "layers._bias_variable", "tensorflow.nn.bias_add", "activation", "bottom.get_shape", "layers._weight_variable_simple", "ValueError"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_rhs_dim", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_he_normal", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._bias_variable", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_simple"], ["", "", "def", "conv2D_layer", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ",", "\n", "add_bias", "=", "True", ")", ":", "\n", "\n", "    ", "'''\n    Standard 2D convolutional layer\n    '''", "\n", "\n", "bottom_num_filters", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "weight_shape", "=", "[", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "bottom_num_filters", ",", "num_filters", "]", "\n", "bias_shape", "=", "[", "num_filters", "]", "\n", "\n", "strides_augm", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "1", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "\n", "        ", "if", "weight_init", "==", "'he_normal'", ":", "\n", "            ", "N", "=", "utils", ".", "get_rhs_dim", "(", "bottom", ")", "\n", "weights", "=", "_weight_variable_he_normal", "(", "weight_shape", ",", "N", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "elif", "weight_init", "==", "'simple'", ":", "\n", "            ", "weights", "=", "_weight_variable_simple", "(", "weight_shape", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown weight initialisation method %s'", "%", "weight_init", ")", "\n", "\n", "\n", "\n", "", "op", "=", "tf", ".", "nn", ".", "conv2d", "(", "bottom", ",", "filter", "=", "weights", ",", "strides", "=", "strides_augm", ",", "padding", "=", "padding", ")", "\n", "if", "add_bias", ":", "\n", "            ", "biases", "=", "_bias_variable", "(", "bias_shape", ",", "name", "=", "name", "+", "'_b'", ")", "\n", "op", "=", "tf", ".", "nn", ".", "bias_add", "(", "op", ",", "biases", ")", "\n", "#            tf.summary.histogram(biases.name, biases)", "\n", "", "if", "activation", "!=", "None", ":", "\n", "\n", "            ", "op", "=", "activation", "(", "op", ")", "\n", "\n", "# Tensorboard variables", "\n", "#        tf.summary.histogram(weights.name, weights)", "\n", "\n", "#        tf.summary.histogram(op.op.name + '/activations', op)", "\n", "\n", "", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv3D_layer": [[314, 356], ["bottom.get_shape().as_list", "tensorflow.name_scope", "layers._bias_variable", "tensorflow.nn.conv3d", "tensorflow.nn.bias_add", "activation", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "utils.get_rhs_dim", "layers._weight_variable_he_normal", "bottom.get_shape", "layers._weight_variable_simple", "ValueError"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._bias_variable", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_rhs_dim", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_he_normal", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_simple"], ["", "", "def", "conv3D_layer", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ")", ":", "\n", "\n", "    ", "'''\n    Standard 3D convolutional layer\n    '''", "\n", "\n", "bottom_num_filters", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "weight_shape", "=", "[", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "kernel_size", "[", "2", "]", ",", "bottom_num_filters", ",", "num_filters", "]", "\n", "bias_shape", "=", "[", "num_filters", "]", "\n", "\n", "strides_augm", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "strides", "[", "2", "]", ",", "1", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "\n", "        ", "if", "weight_init", "==", "'he_normal'", ":", "\n", "            ", "N", "=", "utils", ".", "get_rhs_dim", "(", "bottom", ")", "\n", "weights", "=", "_weight_variable_he_normal", "(", "weight_shape", ",", "N", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "elif", "weight_init", "==", "'simple'", ":", "\n", "            ", "weights", "=", "_weight_variable_simple", "(", "weight_shape", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown weight initialisation method %s'", "%", "weight_init", ")", "\n", "\n", "", "biases", "=", "_bias_variable", "(", "bias_shape", ",", "name", "=", "name", "+", "'_b'", ")", "\n", "\n", "op", "=", "tf", ".", "nn", ".", "conv3d", "(", "bottom", ",", "filter", "=", "weights", ",", "strides", "=", "strides_augm", ",", "padding", "=", "padding", ")", "\n", "op", "=", "tf", ".", "nn", ".", "bias_add", "(", "op", ",", "biases", ")", "\n", "op", "=", "activation", "(", "op", ")", "\n", "\n", "# Tensorboard variables", "\n", "tf", ".", "summary", ".", "histogram", "(", "weights", ".", "name", ",", "weights", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "biases", ".", "name", ",", "biases", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "op", ".", "op", ".", "name", "+", "'/activations'", ",", "op", ")", "\n", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.deconv2D_layer": [[358, 415], ["bottom.get_shape().as_list", "logging.error", "bottom.get_shape().as_list", "str", "tensorflow.stack", "tensorflow.name_scope", "layers._bias_variable", "tensorflow.nn.conv2d_transpose", "tensorflow.nn.bias_add", "activation", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "bottom.get_shape", "utils.get_rhs_dim", "layers._weight_variable_he_normal", "bottom.get_shape", "layers._weight_variable_simple", "tensorflow.shape", "layers._weight_variable_bilinear", "ValueError"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._bias_variable", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_rhs_dim", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_he_normal", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_simple", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_bilinear"], ["", "", "def", "deconv2D_layer", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "output_shape", "=", "None", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ")", ":", "\n", "\n", "    ", "'''\n    Standard 2D transpose (also known as deconvolution) layer. Default behaviour upsamples the input by a\n    factor of 2. \n    '''", "\n", "bottom_num_filters", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "bottom_shape", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "logging", ".", "error", "(", "str", "(", "bottom_shape", ")", ")", "\n", "if", "output_shape", "is", "None", ":", "\n", "\n", "        ", "output_shape", "=", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "bottom", ")", "[", "0", "]", ",", "bottom_shape", "[", "1", "]", "*", "strides", "[", "0", "]", ",", "bottom_shape", "[", "2", "]", "*", "strides", "[", "1", "]", ",", "num_filters", "]", ")", "\n", "\n", "#         = tf.stack([bottom_shape[0], bottom_shape[1]*strides[0], bottom_shape[2]*strides[1], num_filters])", "\n", "\n", "#    bottom_num_filters = bottom_shape[3]", "\n", "\n", "", "weight_shape", "=", "[", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "num_filters", ",", "bottom_num_filters", "]", "\n", "bias_shape", "=", "[", "num_filters", "]", "\n", "strides_augm", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "1", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "\n", "        ", "if", "weight_init", "==", "'he_normal'", ":", "\n", "            ", "N", "=", "utils", ".", "get_rhs_dim", "(", "bottom", ")", "\n", "weights", "=", "_weight_variable_he_normal", "(", "weight_shape", ",", "N", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "elif", "weight_init", "==", "'simple'", ":", "\n", "            ", "weights", "=", "_weight_variable_simple", "(", "weight_shape", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "elif", "weight_init", "==", "'bilinear'", ":", "\n", "            ", "weights", "=", "_weight_variable_bilinear", "(", "weight_shape", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown weight initialisation method %s'", "%", "weight_init", ")", "\n", "\n", "", "biases", "=", "_bias_variable", "(", "bias_shape", ",", "name", "=", "name", "+", "'_b'", ")", "\n", "\n", "op", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "bottom", ",", "\n", "filter", "=", "weights", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "strides_augm", ",", "\n", "padding", "=", "padding", ")", "\n", "op", "=", "tf", ".", "nn", ".", "bias_add", "(", "op", ",", "biases", ")", "\n", "op", "=", "activation", "(", "op", ")", "\n", "\n", "# Tensorboard variables", "\n", "tf", ".", "summary", ".", "histogram", "(", "weights", ".", "name", ",", "weights", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "biases", ".", "name", ",", "biases", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "op", ".", "op", ".", "name", "+", "'/activations'", ",", "op", ")", "\n", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.deconv3D_layer": [[417, 473], ["bottom.get_shape().as_list", "tensorflow.stack", "tensorflow.name_scope", "layers._bias_variable", "tensorflow.nn.conv3d_transpose", "tensorflow.nn.bias_add", "activation", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "bottom.get_shape", "utils.get_rhs_dim", "layers._weight_variable_he_normal", "layers._weight_variable_simple", "layers._weight_variable_bilinear", "ValueError"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._bias_variable", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_rhs_dim", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_he_normal", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_simple", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_bilinear"], ["", "", "def", "deconv3D_layer", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ",", "4", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "output_shape", "=", "None", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ")", ":", "\n", "\n", "    ", "'''\n    Standard 2D transpose (also known as deconvolution) layer. Default behaviour upsamples the input by a\n    factor of 2. \n    '''", "\n", "\n", "bottom_shape", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n", "if", "output_shape", "is", "None", ":", "\n", "        ", "output_shape", "=", "tf", ".", "stack", "(", "[", "bottom_shape", "[", "0", "]", ",", "bottom_shape", "[", "1", "]", "*", "strides", "[", "0", "]", ",", "bottom_shape", "[", "2", "]", "*", "strides", "[", "1", "]", ",", "bottom_shape", "[", "3", "]", "*", "strides", "[", "2", "]", ",", "num_filters", "]", ")", "\n", "\n", "", "bottom_num_filters", "=", "bottom_shape", "[", "4", "]", "\n", "\n", "weight_shape", "=", "[", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "kernel_size", "[", "2", "]", ",", "num_filters", ",", "bottom_num_filters", "]", "\n", "\n", "bias_shape", "=", "[", "num_filters", "]", "\n", "\n", "strides_augm", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "strides", "[", "2", "]", ",", "1", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "\n", "        ", "if", "weight_init", "==", "'he_normal'", ":", "\n", "            ", "N", "=", "utils", ".", "get_rhs_dim", "(", "bottom", ")", "\n", "weights", "=", "_weight_variable_he_normal", "(", "weight_shape", ",", "N", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "elif", "weight_init", "==", "'simple'", ":", "\n", "            ", "weights", "=", "_weight_variable_simple", "(", "weight_shape", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "elif", "weight_init", "==", "'bilinear'", ":", "\n", "            ", "weights", "=", "_weight_variable_bilinear", "(", "weight_shape", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown weight initialisation method %s'", "%", "weight_init", ")", "\n", "\n", "", "biases", "=", "_bias_variable", "(", "bias_shape", ",", "name", "=", "name", "+", "'_b'", ")", "\n", "\n", "op", "=", "tf", ".", "nn", ".", "conv3d_transpose", "(", "bottom", ",", "\n", "filter", "=", "weights", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "strides_augm", ",", "\n", "padding", "=", "padding", ")", "\n", "op", "=", "tf", ".", "nn", ".", "bias_add", "(", "op", ",", "biases", ")", "\n", "op", "=", "activation", "(", "op", ")", "\n", "\n", "# Tensorboard variables", "\n", "tf", ".", "summary", ".", "histogram", "(", "weights", ".", "name", ",", "weights", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "biases", ".", "name", ",", "biases", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "op", ".", "op", ".", "name", "+", "'/activations'", ",", "op", ")", "\n", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_dilated_layer": [[475, 517], ["bottom.get_shape().as_list", "tensorflow.variable_scope", "layers._bias_variable", "tensorflow.nn.atrous_conv2d", "tensorflow.nn.bias_add", "activation", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "utils.get_rhs_dim", "layers._weight_variable_he_normal", "bottom.get_shape", "layers._weight_variable_simple", "ValueError"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._bias_variable", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_rhs_dim", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_he_normal", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_simple"], ["", "", "def", "conv2D_dilated_layer", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "rate", "=", "1", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ")", ":", "\n", "\n", "    ", "'''\n    2D dilated convolution layer. This layer can be used to increase the receptive field of a network. \n    It is described in detail in this paper: Yu et al, Multi-Scale Context Aggregation by Dilated Convolutions, \n    2015 (https://arxiv.org/pdf/1511.07122.pdf) \n    '''", "\n", "\n", "bottom_num_filters", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "\n", "weight_shape", "=", "[", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "bottom_num_filters", ",", "num_filters", "]", "\n", "bias_shape", "=", "[", "num_filters", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "        ", "if", "weight_init", "==", "'he_normal'", ":", "\n", "            ", "N", "=", "utils", ".", "get_rhs_dim", "(", "bottom", ")", "\n", "weights", "=", "_weight_variable_he_normal", "(", "weight_shape", ",", "N", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "elif", "weight_init", "==", "'simple'", ":", "\n", "            ", "weights", "=", "_weight_variable_simple", "(", "weight_shape", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown weight initialisation method %s'", "%", "weight_init", ")", "\n", "\n", "", "biases", "=", "_bias_variable", "(", "bias_shape", ",", "name", "=", "name", "+", "'_b'", ")", "\n", "\n", "op", "=", "tf", ".", "nn", ".", "atrous_conv2d", "(", "bottom", ",", "filters", "=", "weights", ",", "rate", "=", "rate", ",", "padding", "=", "padding", ")", "\n", "op", "=", "tf", ".", "nn", ".", "bias_add", "(", "op", ",", "biases", ")", "\n", "op", "=", "activation", "(", "op", ")", "\n", "\n", "# Tensorboard variables", "\n", "tf", ".", "summary", ".", "histogram", "(", "weights", ".", "name", ",", "weights", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "biases", ".", "name", ",", "biases", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "op", ".", "op", ".", "name", "+", "'/activations'", ",", "op", ")", "\n", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_dense_layer": [[518, 579], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.concatenate", "numpy.tile", "tensorflow.constant", "tensorflow.concat", "utils.flatten", "utils.get_rhs_dim", "tf.concat.get_shape().as_list", "tf.concat.get_shape().as_list", "tf.concat.get_shape().as_list", "tensorflow.name_scope", "layers._bias_variable", "tensorflow.matmul", "tensorflow.nn.bias_add", "activation", "numpy.expand_dims", "numpy.expand_dims", "layers._weight_variable_he_normal", "tf.concat.get_shape", "tf.concat.get_shape", "tf.concat.get_shape", "numpy.expand_dims", "numpy.expand_dims", "layers._weight_variable_simple", "ValueError"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.flatten", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_rhs_dim", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._bias_variable", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_he_normal", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_simple"], ["", "", "def", "coord_dense_layer", "(", "bottom", ",", "\n", "name", ",", "\n", "hidden_units", "=", "512", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "weight_init", "=", "'he_normal'", ")", ":", "\n", "\n", "    ", "'''\n    Dense a.k.a. fully connected layer\n    '''", "\n", "j_range", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "2", "]", "\n", "i_range", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "3", "]", "\n", "\n", "i_matrix", "=", "np", ".", "zeros", "(", "(", "i_range", ",", "j_range", ")", ",", "np", ".", "float32", ")", "\n", "j_matrix", "=", "np", ".", "zeros", "(", "(", "i_range", ",", "j_range", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "k", "in", "range", "(", "i_range", ")", ":", "\n", "        ", "i_matrix", "[", "k", ",", ":", "]", "=", "k", "\n", "", "for", "k", "in", "range", "(", "j_range", ")", ":", "\n", "        ", "j_matrix", "[", ":", ",", "k", "]", "=", "k", "\n", "\n", "\n", "#    max_val = np.max((i_range,j_range))", "\n", "", "i_matrix", "=", "(", "i_matrix", "-", "(", "i_range", "-", "1", ")", "/", "2", ")", "/", "(", "(", "i_range", "-", "1", ")", "/", "2", ")", "\n", "j_matrix", "=", "(", "j_matrix", "-", "(", "j_range", "-", "1", ")", "/", "2", ")", "/", "(", "(", "j_range", "-", "1", ")", "/", "2", ")", "\n", "batch_size", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "\n", "\n", "coord_matrix", "=", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "i_matrix", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "0", ")", ",", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "j_matrix", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "0", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "coord_matrix", "=", "np", ".", "tile", "(", "coord_matrix", ",", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "coord_tensor", "=", "tf", ".", "constant", "(", "coord_matrix", ")", "\n", "\n", "bottom", "=", "tf", ".", "concat", "(", "[", "bottom", ",", "coord_tensor", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "bottom_flat", "=", "utils", ".", "flatten", "(", "bottom", ")", "\n", "bottom_rhs_dim", "=", "utils", ".", "get_rhs_dim", "(", "bottom_flat", ")", "\n", "\n", "weight_shape", "=", "[", "bottom_rhs_dim", ",", "hidden_units", "]", "\n", "bias_shape", "=", "[", "hidden_units", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "\n", "        ", "if", "weight_init", "==", "'he_normal'", ":", "\n", "            ", "N", "=", "bottom_rhs_dim", "\n", "weights", "=", "_weight_variable_he_normal", "(", "weight_shape", ",", "N", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "elif", "weight_init", "==", "'simple'", ":", "\n", "            ", "weights", "=", "_weight_variable_simple", "(", "weight_shape", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown weight initialisation method %s'", "%", "weight_init", ")", "\n", "\n", "", "biases", "=", "_bias_variable", "(", "bias_shape", ",", "name", "=", "name", "+", "'_b'", ")", "\n", "\n", "op", "=", "tf", ".", "matmul", "(", "bottom_flat", ",", "weights", ")", "\n", "op", "=", "tf", ".", "nn", ".", "bias_add", "(", "op", ",", "biases", ")", "\n", "op", "=", "activation", "(", "op", ")", "\n", "\n", "# Tensorboard variables", "\n", "#        tf.summary.histogram(weights.name, weights)", "\n", "#        tf.summary.histogram(biases.name, biases)", "\n", "#        tf.summary.histogram(op.op.name + '/activations', op)", "\n", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.dense_layer": [[580, 618], ["bottom.get_shape().as_list", "tensorflow.name_scope", "tensorflow.matmul", "activation", "layers._weight_variable_he_normal", "bottom.get_shape", "layers._weight_variable_simple", "ValueError"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_he_normal", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_simple"], ["", "", "def", "dense_layer", "(", "bottom", ",", "\n", "name", ",", "\n", "hidden_units", "=", "512", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "weight_init", "=", "'he_normal'", ")", ":", "\n", "\n", "    ", "'''\n    Dense a.k.a. fully connected layer\n    '''", "\n", "\n", "#    bottom_flat = utils.flatten(bottom)", "\n", "#    bottom_rhs_dim = utils.get_rhs_dim(bottom_flat)", "\n", "bottom_rhs_dim", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "weight_shape", "=", "[", "bottom_rhs_dim", ",", "hidden_units", "]", "\n", "#    bias_shape = [hidden_units]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "\n", "        ", "if", "weight_init", "==", "'he_normal'", ":", "\n", "            ", "N", "=", "bottom_rhs_dim", "\n", "weights", "=", "_weight_variable_he_normal", "(", "weight_shape", ",", "N", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "elif", "weight_init", "==", "'simple'", ":", "\n", "            ", "weights", "=", "_weight_variable_simple", "(", "weight_shape", ",", "name", "=", "name", "+", "'_w'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown weight initialisation method %s'", "%", "weight_init", ")", "\n", "\n", "#        biases = _bias_variable(bias_shape, name=name + '_b')", "\n", "\n", "", "op", "=", "tf", ".", "matmul", "(", "bottom", ",", "weights", ")", "\n", "#        op = tf.nn.bias_add(op, biases)", "\n", "op", "=", "activation", "(", "op", ")", "\n", "\n", "# Tensorboard variables", "\n", "#        tf.summary.histogram(weights.name, weights)", "\n", "#        tf.summary.histogram(biases.name, biases)", "\n", "#        tf.summary.histogram(op.op.name + '/activations', op)", "\n", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.pixelShuffler": [[619, 638], ["tensorflow.shape", "tensorflow.split", "tensorflow.concat", "inputs.get_shape().as_list", "layers.phaseShift", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.phaseShift"], ["", "", "def", "pixelShuffler", "(", "inputs", ",", "scale", "=", "2", ")", ":", "\n", "    ", "size", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "batch_size", "=", "size", "[", "0", "]", "\n", "h", "=", "size", "[", "1", "]", "\n", "w", "=", "size", "[", "2", "]", "\n", "c", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "# Get the target channel size", "\n", "channel_target", "=", "c", "//", "(", "scale", "*", "scale", ")", "\n", "channel_factor", "=", "c", "//", "channel_target", "\n", "\n", "shape_1", "=", "[", "batch_size", ",", "h", ",", "w", ",", "channel_factor", "//", "scale", ",", "channel_factor", "//", "scale", "]", "\n", "shape_2", "=", "[", "batch_size", ",", "h", "*", "scale", ",", "w", "*", "scale", ",", "1", "]", "\n", "\n", "# Reshape and transpose for periodic shuffling for each channel", "\n", "input_split", "=", "tf", ".", "split", "(", "inputs", ",", "channel_target", ",", "axis", "=", "3", ")", "\n", "output", "=", "tf", ".", "concat", "(", "[", "phaseShift", "(", "x", ",", "scale", ",", "shape_1", ",", "shape_2", ")", "for", "x", "in", "input_split", "]", ",", "axis", "=", "3", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.phaseShift": [[640, 646], ["tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape"], "function", ["None"], ["", "def", "phaseShift", "(", "inputs", ",", "scale", ",", "shape_1", ",", "shape_2", ")", ":", "\n", "# Tackle the condition when the batch is None", "\n", "    ", "X", "=", "tf", ".", "reshape", "(", "inputs", ",", "shape_1", ")", "\n", "X", "=", "tf", ".", "transpose", "(", "X", ",", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", "]", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "X", ",", "shape_2", ")", "\n", "### BATCH_NORM SHORTCUTS #####################################################################################", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.residual_block_bn": [[647, 713], ["tensorflow.constant", "bottom.get_shape().as_list", "layers.coord_conv2D_layer", "activation", "layers.coord_conv2D_layer", "tensorflow.contrib.layers.layer_norm", "bottom.get_shape", "activation"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.coord_conv2D_layer"], ["", "def", "residual_block_bn", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ",", "\n", "training", "=", "tf", ".", "constant", "(", "False", ",", "dtype", "=", "tf", ".", "bool", ")", ",", "reuse", "=", "False", ",", "skip_first", "=", "True", ",", "add_last", "=", "True", ")", ":", "\n", "    ", "'''\n    Shortcut for batch normalised 2D convolutional layer\n    '''", "\n", "bottom_shape", "=", "bottom", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "relu", "=", "bottom", "\n", "\n", "\n", "\n", "\n", "conv", "=", "coord_conv2D_layer", "(", "bottom", "=", "activation", "(", "relu", ")", ",", "\n", "name", "=", "name", "+", "'_a'", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "strides", "=", "strides", ",", "\n", "activation", "=", "linear_activation", ",", "\n", "padding", "=", "padding", ",", "\n", "weight_init", "=", "weight_init", ")", "\n", "\n", "#    temp = tf.contrib.layers.layer_norm(conv,reuse=reuse,scope=name+'_l1')", "\n", "relu", "=", "activation", "(", "conv", ")", "\n", "conv", "=", "coord_conv2D_layer", "(", "bottom", "=", "relu", ",", "\n", "name", "=", "name", "+", "'_b'", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "linear_activation", ",", "\n", "padding", "=", "padding", ",", "\n", "weight_init", "=", "weight_init", ")", "\n", "conv", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "conv", "+", "bottom", ",", "reuse", "=", "reuse", ",", "scope", "=", "name", "+", "'_l2'", ")", "\n", "\n", "#    upscaled = conv2D_layer(bottom=bottom,", "\n", "#                    name=name+'_u',", "\n", "#                    kernel_size=(1,1),", "\n", "#                    num_filters=num_filters,", "\n", "#                    strides=(1,1),", "\n", "#                    activation=linear_activation,", "\n", "#                    padding=padding,", "\n", "#                    weight_init=weight_init)", "\n", "\n", "\n", "\n", "#    if ((strides[0] != 1) | (bottom_shape[-1] != num_filters)):", "\n", "#        bottom = coord_conv2D_layer(bottom=bottom,", "\n", "#                name=name+'_u',", "\n", "#                kernel_size=(3,3),", "\n", "#                num_filters=num_filters,", "\n", "#                strides=strides,", "\n", "#                activation=linear_activation,", "\n", "#                padding=padding,", "\n", "#                weight_init=weight_init)", "\n", "\n", "#    son= conv + bottom", "\n", "\n", "#    if add_last:", "\n", "#        son = tf.contrib.layers.layer_norm(son )", "\n", "#        son = activation(son)", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer_bn": [[714, 742], ["tensorflow.constant", "layers.conv2D_layer", "layers.batch_norm", "activation"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.batch_norm"], ["", "def", "conv2D_layer_bn", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ",", "\n", "training", "=", "tf", ".", "constant", "(", "False", ",", "dtype", "=", "tf", ".", "bool", ")", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "'''\n    Shortcut for batch normalised 2D convolutional layer\n    '''", "\n", "\n", "conv", "=", "conv2D_layer", "(", "bottom", "=", "bottom", ",", "\n", "name", "=", "name", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "strides", "=", "strides", ",", "\n", "activation", "=", "linear_activation", ",", "\n", "padding", "=", "padding", ",", "\n", "weight_init", "=", "weight_init", ",", "add_bias", "=", "False", ")", "\n", "\n", "#    conv_bn = batch_normalisation_layer(conv, name + '_bn', training)", "\n", "conv_bn", "=", "batch_norm", "(", "conv", ",", "training", ",", "reuse", ",", "name", "+", "'_bn'", ",", "scale", "=", "True", ")", "\n", "\n", "relu", "=", "activation", "(", "conv_bn", ")", "\n", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv3D_layer_bn": [[744, 772], ["tensorflow.constant", "layers.conv3D_layer", "layers.batch_normalisation_layer", "activation"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv3D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.batch_normalisation_layer"], ["", "def", "conv3D_layer_bn", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "strides", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ",", "\n", "training", "=", "tf", ".", "constant", "(", "False", ",", "dtype", "=", "tf", ".", "bool", ")", ")", ":", "\n", "\n", "    ", "'''\n    Shortcut for batch normalised 3D convolutional layer\n    '''", "\n", "\n", "conv", "=", "conv3D_layer", "(", "bottom", "=", "bottom", ",", "\n", "name", "=", "name", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "strides", "=", "strides", ",", "\n", "activation", "=", "linear_activation", ",", "\n", "padding", "=", "padding", ",", "\n", "weight_init", "=", "weight_init", ")", "\n", "\n", "conv_bn", "=", "batch_normalisation_layer", "(", "conv", ",", "name", "+", "'_bn'", ",", "training", ")", "\n", "\n", "relu", "=", "activation", "(", "conv_bn", ")", "\n", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.deconv2D_layer_bn": [[773, 802], ["tensorflow.constant", "layers.deconv2D_layer", "layers.batch_norm", "activation"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.deconv2D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.batch_norm"], ["", "def", "deconv2D_layer_bn", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "\n", "output_shape", "=", "None", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ",", "\n", "training", "=", "tf", ".", "constant", "(", "True", ",", "dtype", "=", "tf", ".", "bool", ")", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "'''\n    Shortcut for batch normalised 2D transposed convolutional layer\n    '''", "\n", "\n", "deco", "=", "deconv2D_layer", "(", "bottom", "=", "bottom", ",", "\n", "name", "=", "name", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "strides", "=", "strides", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "activation", "=", "linear_activation", ",", "\n", "padding", "=", "padding", ",", "\n", "weight_init", "=", "weight_init", ")", "\n", "\n", "deco_bn", "=", "batch_norm", "(", "deco", ",", "training", ",", "reuse", ",", "name", "+", "'_bn'", ",", "scale", "=", "True", ")", "\n", "\n", "relu", "=", "activation", "(", "deco_bn", ")", "\n", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.deconv3D_layer_bn": [[804, 835], ["tensorflow.constant", "layers.deconv3D_layer", "layers.batch_normalisation_layer", "activation"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.deconv3D_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.batch_normalisation_layer"], ["", "def", "deconv3D_layer_bn", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "4", ",", "4", ",", "4", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "output_shape", "=", "None", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ",", "\n", "training", "=", "tf", ".", "constant", "(", "True", ",", "dtype", "=", "tf", ".", "bool", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "    ", "'''\n    Shortcut for batch normalised 3D transposed convolutional layer\n    '''", "\n", "\n", "deco", "=", "deconv3D_layer", "(", "bottom", "=", "bottom", ",", "\n", "name", "=", "name", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "strides", "=", "strides", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "activation", "=", "linear_activation", ",", "\n", "padding", "=", "padding", ",", "\n", "weight_init", "=", "weight_init", ")", "\n", "\n", "deco_bn", "=", "batch_normalisation_layer", "(", "deco", ",", "name", "+", "'_bn'", ",", "training", "=", "training", ")", "\n", "\n", "relu", "=", "activation", "(", "deco_bn", ")", "\n", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_dilated_layer_bn": [[837, 865], ["tensorflow.constant", "layers.conv2D_dilated_layer", "layers.batch_normalisation_layer", "activation"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.conv2D_dilated_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.batch_normalisation_layer"], ["", "def", "conv2D_dilated_layer_bn", "(", "bottom", ",", "\n", "name", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "num_filters", "=", "32", ",", "\n", "rate", "=", "1", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "weight_init", "=", "'he_normal'", ",", "\n", "training", "=", "tf", ".", "constant", "(", "True", ",", "dtype", "=", "tf", ".", "bool", ")", ")", ":", "\n", "\n", "    ", "'''\n    Shortcut for batch normalised 2D dilated convolutional layer\n    '''", "\n", "\n", "conv", "=", "conv2D_dilated_layer", "(", "bottom", "=", "bottom", ",", "\n", "name", "=", "name", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "num_filters", "=", "num_filters", ",", "\n", "rate", "=", "rate", ",", "\n", "activation", "=", "linear_activation", ",", "\n", "padding", "=", "padding", ",", "\n", "weight_init", "=", "weight_init", ")", "\n", "\n", "conv_bn", "=", "batch_normalisation_layer", "(", "conv", ",", "name", "+", "'_bn'", ",", "training", "=", "training", ")", "\n", "\n", "relu", "=", "activation", "(", "conv_bn", ")", "\n", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.dense_layer_bn": [[868, 889], ["tensorflow.constant", "layers.dense_layer", "layers.batch_normalisation_layer", "activation"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.dense_layer", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers.batch_normalisation_layer"], ["", "def", "dense_layer_bn", "(", "bottom", ",", "\n", "name", ",", "\n", "hidden_units", "=", "512", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "weight_init", "=", "'he_normal'", ",", "\n", "training", "=", "tf", ".", "constant", "(", "True", ",", "dtype", "=", "tf", ".", "bool", ")", ")", ":", "\n", "\n", "    ", "'''\n    Shortcut for batch normalised 2D dilated convolutional layer\n    '''", "\n", "\n", "linact", "=", "dense_layer", "(", "bottom", "=", "bottom", ",", "\n", "name", "=", "name", ",", "\n", "hidden_units", "=", "hidden_units", ",", "\n", "activation", "=", "linear_activation", ",", "\n", "weight_init", "=", "weight_init", ")", "\n", "\n", "batchnorm", "=", "batch_normalisation_layer", "(", "linact", ",", "name", "+", "'_bn'", ",", "training", "=", "training", ")", "\n", "relu", "=", "activation", "(", "batchnorm", ")", "\n", "\n", "return", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_simple": [[892, 903], ["tensorflow.truncated_normal", "tensorflow.add_to_collection", "tensorflow.Variable", "tensorflow.get_variable"], "function", ["None"], ["", "def", "_weight_variable_simple", "(", "shape", ",", "stddev", "=", "0.02", ",", "name", "=", "None", ")", ":", "\n", "\n", "    ", "initial", "=", "tf", ".", "truncated_normal", "(", "shape", ",", "stddev", "=", "stddev", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "name", "is", "None", ":", "\n", "        ", "weight", "=", "tf", ".", "Variable", "(", "initial", ")", "\n", "", "else", ":", "\n", "        ", "weight", "=", "tf", ".", "get_variable", "(", "name", ",", "initializer", "=", "initial", ")", "\n", "\n", "", "tf", ".", "add_to_collection", "(", "'weight_variables'", ",", "weight", ")", "\n", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_he_normal": [[904, 922], ["tensorflow.truncated_normal", "tensorflow.add_to_collection", "math.sqrt", "math.sqrt", "tensorflow.Variable", "tensorflow.get_variable", "float", "float"], "function", ["None"], ["", "def", "_weight_variable_he_normal", "(", "shape", ",", "N", ",", "dense_layer", "=", "False", ",", "name", "=", "None", ")", ":", "\n", "\n", "    ", "if", "dense_layer", ":", "\n", "\n", "        ", "stddev", "=", "math", ".", "sqrt", "(", "1.0", "/", "float", "(", "N", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "stddev", "=", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "N", ")", ")", "\n", "\n", "", "initial", "=", "tf", ".", "truncated_normal", "(", "shape", ",", "stddev", "=", "stddev", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "name", "is", "None", ":", "\n", "        ", "weight", "=", "tf", ".", "Variable", "(", "initial", ")", "\n", "", "else", ":", "\n", "        ", "weight", "=", "tf", ".", "get_variable", "(", "name", ",", "initializer", "=", "initial", ")", "\n", "\n", "", "tf", ".", "add_to_collection", "(", "'weight_variables'", ",", "weight", ")", "\n", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._bias_variable": [[924, 931], ["tensorflow.constant", "tensorflow.Variable", "tensorflow.get_variable"], "function", ["None"], ["", "def", "_bias_variable", "(", "shape", ",", "name", "=", "None", ",", "init_value", "=", "0.0", ")", ":", "\n", "\n", "    ", "initial", "=", "tf", ".", "constant", "(", "init_value", ",", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "name", "is", "None", ":", "\n", "        ", "return", "tf", ".", "Variable", "(", "initial", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "get_variable", "(", "name", ",", "initializer", "=", "initial", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._weight_variable_bilinear": [[933, 945], ["layers._bilinear_upsample_weights", "tensorflow.constant", "tensorflow.Variable", "tensorflow.get_variable"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._bilinear_upsample_weights"], ["", "", "def", "_weight_variable_bilinear", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "'''\n    Initialise weights with a billinear interpolation filter for upsampling\n    '''", "\n", "\n", "weights", "=", "_bilinear_upsample_weights", "(", "shape", ")", "\n", "initial", "=", "tf", ".", "constant", "(", "weights", ",", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "if", "name", "is", "None", ":", "\n", "        ", "return", "tf", ".", "Variable", "(", "initial", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "get_variable", "(", "name", ",", "initializer", "=", "initial", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._upsample_filt": [[947, 959], ["abs", "abs"], "function", ["None"], ["", "", "def", "_upsample_filt", "(", "size", ")", ":", "\n", "    ", "'''\n    Make a 2D bilinear kernel suitable for upsampling of the given (h, w) size.\n    '''", "\n", "factor", "=", "(", "size", "+", "1", ")", "//", "2", "\n", "if", "size", "%", "2", "==", "1", ":", "\n", "        ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "        ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "size", ",", ":", "size", "]", "\n", "return", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._bilinear_upsample_weights": [[961, 980], ["numpy.zeros", "layers._upsample_filt", "range", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.layers._upsample_filt"], ["", "def", "_bilinear_upsample_weights", "(", "shape", ")", ":", "\n", "    ", "'''\n    Create weights matrix for transposed convolution with bilinear filter\n    initialization.\n    '''", "\n", "\n", "if", "not", "shape", "[", "0", "]", "==", "shape", "[", "1", "]", ":", "raise", "ValueError", "(", "'kernel is not square'", ")", "\n", "if", "not", "shape", "[", "2", "]", "==", "shape", "[", "3", "]", ":", "raise", "ValueError", "(", "'input and output featuremaps must have the same size'", ")", "\n", "\n", "kernel_size", "=", "shape", "[", "0", "]", "\n", "num_feature_maps", "=", "shape", "[", "2", "]", "\n", "\n", "weights", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "upsample_kernel", "=", "_upsample_filt", "(", "kernel_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_feature_maps", ")", ":", "\n", "        ", "weights", "[", ":", ",", ":", ",", "i", ",", "i", "]", "=", "upsample_kernel", "\n", "\n", "", "return", "weights", "", "", ""]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.decode_binary_labels": [[120, 123], ["numpy.power", "numpy.uint8", "numpy.arange", "numpy.expand_dims", "numpy.reshape"], "function", ["None"], ["def", "decode_binary_labels", "(", "labels", ",", "nclass", ")", ":", "\n", "    ", "bits", "=", "np", ".", "power", "(", "2", ",", "np", ".", "arange", "(", "nclass", ")", ")", "\n", "return", "np", ".", "uint8", "(", "(", "np", ".", "expand_dims", "(", "labels", ",", "axis", "=", "-", "1", ")", "&", "np", ".", "reshape", "(", "bits", ",", "(", "1", ",", "1", ",", "-", "1", ")", ")", ")", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.list_directories": [[124, 126], ["os.listdir", "os.path.isdir", "os.path.join"], "function", ["None"], ["", "def", "list_directories", "(", "path", ")", ":", "\n", "     ", "return", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "path", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.get_clipped_grads": [[128, 139], ["logging.error", "capped_gvs.append", "tensorflow.clip_by_value", "str"], "function", ["None"], ["", "def", "get_clipped_grads", "(", "gvs", ")", ":", "\n", "\n", "    ", "capped_gvs", "=", "[", "]", "\n", "for", "grad", ",", "var", "in", "gvs", ":", "\n", "        ", "if", "grad", "==", "None", ":", "\n", "            ", "logging", ".", "error", "(", "'VAR '", "+", "str", "(", "var", ")", "+", "' NONE GRAD'", ")", "\n", "", "else", ":", "\n", "\n", "\n", "            ", "capped_gvs", ".", "append", "(", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "10.", ",", "10.", ")", ",", "var", ")", ")", "\n", "", "", "return", "capped_gvs", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.single_process": [[142, 190], ["PIL.Image.open", "Image.open.load", "numpy.flipud", "argoverse_train.decode_binary_labels", "numpy.concatenate", "utils.argoverse_project_to_image", "cv2.warpPerspective", "numpy.uint8", "numpy.array", "utils.argoverse_tensorflow_project_to_ground", "utils.argoverse_tensorflow_project_to_ground", "utils.argoverse_tensorflow_project_to_ground", "utils.argoverse_project_to_ground", "numpy.uint8", "cv2.resize", "numpy.array", "numpy.zeros_like", "numpy.float32", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.squeeze", "numpy.float32", "PIL.Image.open", "numpy.copy", "numpy.copy", "cv2.resize", "numpy.reshape", "numpy.reshape", "numpy.reshape", "int", "int", "int", "int", "int", "int", "numpy.copy", "int", "int", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.decode_binary_labels", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_project_to_image", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_project_to_ground"], ["", "def", "single_process", "(", "pair", ")", ":", "\n", "\n", "\n", "    ", "camera_channel", "=", "'ring_front_center'", "\n", "image_path", ",", "label_path", ",", "vis_mask", ",", "calib_cur", ",", "pose_ref", ",", "pose_cur", ",", "is_reference_sample", "=", "pair", "\n", "\n", "calib_ref", "=", "calib_cur", "\n", "cam_intrinsic", "=", "calib_cur", ".", "K", "[", ":", ",", ":", "3", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img", ".", "load", "(", ")", "\n", "\n", "encoded_labels", "=", "np", ".", "flipud", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "label_path", ")", ",", "np", ".", "int32", ")", ")", "\n", "\n", "num_class", "=", "exp_config", ".", "num_bev_classes", "\n", "bev_labels", "=", "decode_binary_labels", "(", "encoded_labels", ",", "num_class", "+", "1", ")", "\n", "\n", "bev_labels", "=", "np", ".", "concatenate", "(", "[", "np", ".", "copy", "(", "bev_labels", "[", "...", ",", ":", "exp_config", ".", "num_bev_classes", "]", ")", ",", "np", ".", "copy", "(", "vis_mask", ")", ",", "vis_mask", "*", "(", "1", "-", "np", ".", "copy", "(", "np", ".", "expand_dims", "(", "bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "]", ",", "axis", "=", "-", "1", ")", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "to_image_transform", "=", "utils", ".", "argoverse_project_to_image", "(", "exp_config", ",", "np", ".", "zeros_like", "(", "bev_labels", ")", ",", "calib_ref", ")", "\n", "\n", "image_labels", "=", "cv2", ".", "warpPerspective", "(", "np", ".", "float32", "(", "bev_labels", ")", ",", "to_image_transform", ",", "exp_config", ".", "original_image_size", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "image_labels", "=", "np", ".", "uint8", "(", "image_labels", ">", "0.3", ")", "\n", "\n", "# image_objects= cv2.resize(image_objects,(int(exp_config.camera_image_patch_size[1]/4),int(exp_config.camera_image_patch_size[0]/4)), interpolation = cv2.INTER_LINEAR)", "\n", "\n", "\n", "# save_array(np.expand_dims(image_labels,axis=0),'temp_res',is_rgb=False)", "\n", "image", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "\n", "warp_trans1", "=", "utils", ".", "argoverse_tensorflow_project_to_ground", "(", "exp_config", ",", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "4", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "4", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "pose_ref", ",", "calib_ref", ",", "pose_cur", ",", "calib_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "warp_trans2", "=", "utils", ".", "argoverse_tensorflow_project_to_ground", "(", "exp_config", ",", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "8", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "8", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "pose_ref", ",", "calib_ref", ",", "pose_cur", ",", "calib_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "warp_trans3", "=", "utils", ".", "argoverse_tensorflow_project_to_ground", "(", "exp_config", ",", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "16", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "16", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "pose_ref", ",", "calib_ref", ",", "pose_cur", ",", "calib_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "\n", "\n", "\n", "warped_img", ",", "warped_cover", ",", "coordinate_transform", "=", "utils", ".", "argoverse_project_to_ground", "(", "image", ",", "image_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "]", ",", "calib_ref", ",", "pose_ref", ",", "calib_cur", ",", "pose_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "if", "is_reference_sample", ":", "\n", "        ", "padded_vis_mask", "=", "np", ".", "zeros", "(", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ")", "\n", "padded_vis_mask", "[", "50", ":", "-", "50", ",", "48", ":", "-", "48", "]", "=", "np", ".", "squeeze", "(", "vis_mask", ")", "\n", "warped_cover", "=", "padded_vis_mask", "\n", "# save_array(np.expand_dims(image_labels,axis=0),'pre_resize',is_rgb=False)", "\n", "", "new_sizes", "=", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ")", "\n", "cropped_label", "=", "np", ".", "uint8", "(", "cv2", ".", "resize", "(", "image_labels", ",", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ">", "0.5", ")", "\n", "cropped_img", "=", "cv2", ".", "resize", "(", "image", ",", "new_sizes", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# save_array(np.expand_dims(cropped_label,axis=0),'temp_res',is_rgb=False)", "\n", "return", "(", "cropped_img", ",", "cropped_label", ",", "np", ".", "float32", "(", "warped_cover", ")", ",", "warped_img", ",", "coordinate_transform", ",", "np", ".", "reshape", "(", "warp_trans1", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ",", "np", ".", "reshape", "(", "warp_trans2", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ",", "np", ".", "reshape", "(", "warp_trans3", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ",", "bev_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.inception_preprocess": [[192, 198], ["numpy.float32"], "function", ["None"], ["", "def", "inception_preprocess", "(", "image", ")", ":", "\n", "    ", "image", "=", "np", ".", "float32", "(", "image", ")", "/", "255", "\n", "image", "=", "image", "-", "0.5", "\n", "image", "=", "image", "*", "2", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.inverse_inception_preprocess": [[200, 206], ["numpy.float32"], "function", ["None"], ["", "def", "inverse_inception_preprocess", "(", "image", ")", ":", "\n", "    ", "image", "=", "np", ".", "float32", "(", "image", ")", "/", "2", "\n", "image", "=", "image", "+", "0.5", "\n", "image", "=", "image", "*", "255", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.write_to_txt_file": [[207, 213], ["open", "open.close", "open.write", "open.write"], "function", ["None"], ["", "def", "write_to_txt_file", "(", "path", ",", "strings_list", ")", ":", "\n", "    ", "file1", "=", "open", "(", "path", ",", "\"a\"", ")", "\n", "for", "L", "in", "strings_list", ":", "\n", "        ", "file1", ".", "write", "(", "L", ")", "\n", "file1", ".", "write", "(", "\"\\n\"", ")", "\n", "", "file1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.write_variables_to_txt_file": [[215, 221], ["open", "open.close", "open.write", "open.write", "str"], "function", ["None"], ["", "def", "write_variables_to_txt_file", "(", "path", ",", "strings_list", ")", ":", "\n", "    ", "file1", "=", "open", "(", "path", ",", "\"a\"", ")", "\n", "for", "L", "in", "strings_list", ":", "\n", "        ", "file1", ".", "write", "(", "str", "(", "L", ")", ")", "\n", "file1", ".", "write", "(", "\"\\n\"", ")", "\n", "", "file1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.read_from_txt_file": [[222, 231], ["range", "open", "t.readlines", "len"], "function", ["None"], ["", "def", "read_from_txt_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "t", ":", "\n", "        ", "txt", "=", "t", ".", "readlines", "(", ")", "\n", "", "for", "k", "in", "range", "(", "len", "(", "txt", ")", ")", ":", "\n", "        ", "if", "'\\n'", "in", "txt", "[", "k", "]", ":", "\n", "\n", "            ", "txt", "[", "k", "]", "=", "txt", "[", "k", "]", "[", "0", ":", "-", "1", "]", "\n", "\n", "", "", "return", "txt", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.run_training": [[232, 768], ["logging.error", "logging.error", "logging.info", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "deeplab.common.ModelOptions", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.constant", "mem_net.image_encoder", "mem_net.compat_my_side_decoder", "range", "mem_net.my_object_side_decoder", "tensorflow.constant", "mem_net.classwise_object_loss", "mem_net.argoverse_contrastive_sigmoid_loss", "mem_net.occlusion_loss", "tensorflow.contrib.image.transform", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.contrib.image.transform", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.image.resize", "logging.error", "tensorflow.contrib.image.transform", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.contrib.image.transform", "logging.error", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.concat", "mem_net.my_bev_object_decoder", "tensorflow.constant", "tensorflow.constant", "tensorflow.concat", "mem_net.classwise_modified_bev_object_loss", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.get_collection", "logging.error", "logging.error", "tensorflow.train.AdamOptimizer", "tensorflow.get_collection", "tensorflow.get_collection", "logging.error", "logging.error", "logging.error", "tf.train.AdamOptimizer.compute_gradients", "argoverse_train.get_clipped_grads", "tf.train.AdamOptimizer.apply_gradients", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.global_variables_initializer", "sess.run", "sess.run", "range", "str", "str", "int", "int", "len", "reference_image_endpoints.append", "tensorflow.slice", "numpy.expand_dims", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.concat", "numpy.expand_dims", "numpy.expand_dims", "str", "tensorflow.add_n", "len", "dict", "tensorflow.train.Saver", "tf.train.Saver.restore", "mem_net.interp_surgery", "logging.error", "random.shuffle", "range", "numpy.ones", "tensorflow.slice", "numpy.expand_dims", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "int", "int", "int", "int", "str", "tensorflow.slice", "tensorflow.slice", "int", "int", "tensorflow.slice", "str", "tensorflow.slice", "int", "int", "numpy.expand_dims", "numpy.expand_dims", "var.op.name.split", "l2_loss_vars.append", "dict", "tensorflow.train.Saver", "non_decoder_vars.append", "str", "str", "str", "os.path.join", "tf.train.Saver.restore", "os.path.join", "tf.train.Saver.restore", "tensorflow.global_variables", "generators_list.append", "int", "int", "numpy.max", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "tensorflow.reduce_mean", "tensorflow.nn.l2_loss", "to_load_vars.append", "restored_vars.append", "new_vars.append", "print", "numpy.sum", "numpy.sum", "str", "background_generator.BackgroundGenerator", "int", "int", "int", "restored_vars.append", "new_vars.append", "backbone_optimizer_variables.append", "optimizer_variables.append", "argoverse_train.iterate_minibatches", "range", "numpy.squeeze", "numpy.zeros", "numpy.zeros", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.clip", "sess.run", "logging.error", "str", "logging.error", "optimizer_variables.append", "numpy.prod", "numpy.prod", "generators_list[].next", "tf.train.Saver.save", "numpy.expand_dims", "sess.run", "recon_loss_value_list.append", "reg_loss_value_list.append", "occ_loss_value_list.append", "side_loss_value_list.append", "side_occ_loss_value_list.append", "side_recon_loss_value_list.append", "side_obj_loss_value_list.append", "loss_value_list.append", "seg_v_list0.append", "argoverse_train.do_eval", "numpy.mean", "logging.error", "var.op.name.replace", "backbone_optimizer_variables.append", "optimizer_variables.append", "logging.error", "v.get_shape().as_list", "v.get_shape().as_list", "os.path.join", "int", "int", "int", "int", "numpy.sum", "numpy.array", "numpy.copy", "logging.error", "tf.train.Saver.save", "str", "var.op.name.replace", "backbone_optimizer_variables.append", "optimizer_variables.append", "str", "str", "os.path.join", "var.op.name.replace", "str", "v.get_shape", "v.get_shape", "str", "numpy.uint8", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.image_encoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.compat_my_side_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_object_side_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.classwise_object_loss", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.argoverse_contrastive_sigmoid_loss", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.occlusion_loss", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_bev_object_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.classwise_modified_bev_object_loss", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.get_clipped_grads", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.interp_surgery", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.iterate_minibatches", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.next", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.do_eval"], ["", "def", "run_training", "(", "continue_run", ")", ":", "\n", "\n", "    ", "logging", ".", "error", "(", "'EXPERIMENT : '", "+", "str", "(", "exp_config", ".", "experiment_name", ")", ")", "\n", "logging", ".", "error", "(", "'THIS IS : '", "+", "str", "(", "log_dir", ")", ")", "\n", "\n", "val_tokens", "=", "token_splits", ".", "VAL_LOGS", "\n", "train_tokens", "=", "token_splits", ".", "TRAIN_LOGS", "\n", "\n", "\n", "logging", ".", "info", "(", "'EXPERIMENT NAME: %s'", "%", "exp_config", ".", "experiment_name", ")", "\n", "\n", "\n", "\n", "# Tell TensorFlow that the model will be built into the default Graph.", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "#        with tf.Graph().as_default():", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "# Generate placeholders for the images and labels.", "\n", "\n", "\n", "        ", "\"\"\"         \n        Note that the first frame mask is returned as float32 while the others as uint8. This is because the first frame mask\n        is not used in loss calculations and only concatenated with the image in memory encoding. While the other masks\n        are NOT used in memory encoding and only used in loss calculations. So for tf.one_hot to work they are uint8.\n        \"\"\"", "\n", "\n", "learning_rate_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ")", "\n", "training_time_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "\n", "my_training_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "\n", "\n", "# Build a Graph that computes predictions from the inference model.", "\n", "my_model_options", "=", "common", ".", "ModelOptions", "(", "{", "common", ".", "OUTPUT_TYPE", ":", "10", "}", ",", "crop_size", "=", "exp_config", ".", "camera_image_patch_size", ",", "atrous_rates", "=", "[", "6", ",", "12", ",", "18", "]", ")", "\n", "\n", "image_tensor_shape", "=", "[", "n_frames_per_seq", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "3", "]", "\n", "image_mask_tensor_shape", "=", "[", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "total_label_slices", "]", "\n", "# mask_tensor_shape = [n_seqs,exp_config.patch_size[1],exp_config.patch_size[0],exp_config.num_bev_classes + 1]", "\n", "\n", "images_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "image_tensor_shape", ",", "name", "=", "'images'", ")", "\n", "\n", "image_labels_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "image_mask_tensor_shape", ",", "name", "=", "'image_labels'", ")", "\n", "image_objects_label_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "1", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "exp_config", ".", "num_object_classes", "+", "1", "]", ",", "name", "=", "'image_object_labels'", ")", "\n", "\n", "separate_covers_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", "]", ",", "name", "=", "'separate_covers'", ")", "\n", "\n", "bev_transforms_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "np", ".", "max", "(", "[", "1", ",", "n_seqs", "-", "1", "]", ")", ",", "8", "]", ",", "name", "=", "'bev_transforms'", ")", "\n", "\n", "ground_transforms_placeholder1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms1'", ")", "\n", "\n", "ground_transforms_placeholder2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms2'", ")", "\n", "\n", "ground_transforms_placeholder3", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms3'", ")", "\n", "\n", "\n", "coordinate_ground_transforms_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "3", ",", "3", "]", ",", "name", "=", "'coordinate_ground_transforms'", ")", "\n", "\n", "\n", "\n", "ref_bev_labels_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "exp_config", ".", "label_patch_size", "[", "1", "]", ",", "exp_config", ".", "label_patch_size", "[", "0", "]", ",", "exp_config", ".", "num_bev_classes", "+", "2", "]", ",", "name", "=", "'ref_bev_labels'", ")", "\n", "\n", "\n", "\n", "no_mask_tensor", "=", "tf", ".", "constant", "(", "-", "np", ".", "ones", "(", "(", "1", ",", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "exp_config", ".", "feature_downsample", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "exp_config", ".", "feature_downsample", ")", ",", "int", "(", "exp_config", ".", "num_classes", "+", "1", ")", ")", ",", "np", ".", "float32", ")", ")", "\n", "\n", "'''\n        Extract features from the CAMERA IMAGE\n        '''", "\n", "\n", "image_total_backbone_out", ",", "image_total_relative_endpoints", ",", "image_total_end_points", "=", "mem_net", ".", "image_encoder", "(", "images_placeholder", ",", "no_mask_tensor", ",", "my_model_options", ",", "downsample_stages", "=", "4", ",", "use_deeplab", "=", "use_deeplab", ",", "is_training", "=", "training_time_placeholder", ",", "reuse", "=", "False", ")", "\n", "#            image_total_backbone_out = mem_net.my_image_decoder(image_total_relative_endpoints,image_total_backbone_out,reuse=False)", "\n", "\n", "\n", "total_input_image", "=", "image_total_backbone_out", "\n", "\n", "side_mask_logits", ",", "side_occ_est_logits", ",", "side_masks", ",", "side_occ_softmaxed", "=", "mem_net", ".", "compat_my_side_decoder", "(", "image_total_relative_endpoints", ",", "total_input_image", ",", "num_classes", "=", "1", ",", "reuse", "=", "False", ")", "\n", "\n", "reference_image_endpoints", "=", "[", "]", "\n", "for", "endi", "in", "range", "(", "len", "(", "image_total_relative_endpoints", ")", ")", ":", "\n", "            ", "reference_image_endpoints", ".", "append", "(", "tf", ".", "slice", "(", "image_total_relative_endpoints", "[", "endi", "]", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ")", "\n", "\n", "", "side_obj_logits", ",", "side_obj_softmaxed", "=", "mem_net", ".", "my_object_side_decoder", "(", "reference_image_endpoints", ",", "tf", ".", "slice", "(", "total_input_image", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "exp_config", ",", "reuse", "=", "False", ")", "\n", "\n", "alpha_pos", "=", "tf", ".", "constant", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "exp_config", ".", "image_object_positive_weights", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "\n", "side_obj_loss", ",", "_", "=", "mem_net", ".", "classwise_object_loss", "(", "side_obj_softmaxed", ",", "image_objects_label_placeholder", ",", "tf", ".", "slice", "(", "image_labels_placeholder", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "exp_config", ".", "num_classes", "+", "1", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "exp_config", ",", "alpha_pos", ",", "weight", "=", "True", ",", "weight_vector", "=", "None", ",", "focal", "=", "True", ")", "\n", "\n", "side_seg_loss0", ",", "side_alpha0", "=", "mem_net", ".", "argoverse_contrastive_sigmoid_loss", "(", "side_masks", ",", "image_labels_placeholder", ",", "exp_config", ",", "weight", "=", "True", ")", "\n", "\n", "\n", "\n", "side_occ_loss0", "=", "mem_net", ".", "occlusion_loss", "(", "side_occ_est_logits", ",", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "image_labels_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "exp_config", ".", "num_classes", "+", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "projected_estimates", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "tf", ".", "concat", "(", "[", "side_masks", ",", "side_occ_softmaxed", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform'", "\n", ")", "\n", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "combined_projected_estimates", "=", "tf", ".", "reduce_max", "(", "projected_estimates", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "projected_obj_estimates", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "side_obj_softmaxed", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "reference_frame_index", ",", "0", "]", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform'", "\n", ")", "\n", "projected_obj_estimates", "=", "projected_obj_estimates", "*", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "combined_projected_estimates", "=", "tf", ".", "concat", "(", "[", "combined_projected_estimates", ",", "projected_obj_estimates", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "resized_combined_projected_estimates", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_projected_estimates", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "8", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "8", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "bigger_resized_combined_projected_estimates", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_projected_estimates", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "4", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'bigger_projected_estimates_resize'", ")", "\n", "\n", "logging", ".", "error", "(", "'BIGGER PROJ '", "+", "str", "(", "bigger_resized_combined_projected_estimates", ")", ")", "\n", "\n", "'''\n        Scale the coordinates to the original image so that the transformation is compatible\n        '''", "\n", "\n", "\n", "all_bev_total_backbone_out", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "image_total_relative_endpoints", "[", "0", "]", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder2", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform_end1'", "\n", ")", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "# combined_back_out = tf.reduce_max(tf.slice(all_bev_total_backbone_out,[0,0,0,0],[-1,-1,-1,128])*cur_separate_covers,axis=0,keepdims=True)", "\n", "\n", "# combined_back_out = tf.concat([tf.tile(combined_back_out,[num_frames,1,1,1]),tf.slice(all_bev_total_backbone_out,[0,0,0,128],[-1,-1,-1,-1])],axis=-1)", "\n", "\n", "combined_back_out", "=", "tf", ".", "reduce_max", "(", "all_bev_total_backbone_out", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "combined_back_out", "=", "tf", ".", "concat", "(", "[", "combined_back_out", ",", "tf", ".", "slice", "(", "all_bev_total_backbone_out", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "bev_total_backbone_out", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_back_out", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "8", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "8", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "all_bev_end2", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "image_total_relative_endpoints", "[", "1", "]", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform_end2'", "\n", ")", "\n", "\n", "logging", ".", "error", "(", "'ENDPOINT WARPED '", "+", "str", "(", "all_bev_end2", ")", ")", "\n", "\n", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "combined_end", "=", "tf", ".", "reduce_max", "(", "all_bev_end2", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "combined_end", "=", "tf", ".", "concat", "(", "[", "combined_end", ",", "tf", ".", "slice", "(", "all_bev_end2", ",", "[", "reference_frame_index", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "combined_end", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_end", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "4", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "bev_total_relative_endpoints", "=", "[", "tf", ".", "concat", "(", "[", "combined_end", ",", "bigger_resized_combined_projected_estimates", "]", ",", "axis", "=", "-", "1", ")", "]", "\n", "\n", "total_input", "=", "tf", ".", "concat", "(", "[", "resized_combined_projected_estimates", ",", "bev_total_backbone_out", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "static_logits", ",", "static_masks", ",", "object_logits", ",", "object_masks", "=", "mem_net", ".", "my_bev_object_decoder", "(", "bev_total_relative_endpoints", ",", "total_input", ",", "exp_config", ",", "reuse", "=", "False", ")", "\n", "\n", "alpha_pos", "=", "tf", ".", "constant", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "exp_config", ".", "bev_positive_weights", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "tf", ".", "float32", ")", "\n", "alpha_neg", "=", "tf", ".", "constant", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "exp_config", ".", "bev_negative_weights", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "masks", "=", "tf", ".", "concat", "(", "[", "static_masks", ",", "object_masks", "]", ",", "axis", "=", "-", "1", ")", "\n", "seg_loss0", ",", "alpha0", "=", "mem_net", ".", "classwise_modified_bev_object_loss", "(", "masks", ",", "ref_bev_labels_placeholder", ",", "None", ",", "exp_config", ",", "alpha_pos", ",", "alpha_neg", ",", "weight", "=", "True", ")", "\n", "\n", "\n", "'''\n        LOSSES ADDED\n        '''", "\n", "mean_side_seg_loss0", "=", "tf", ".", "reduce_mean", "(", "side_seg_loss0", ")", "\n", "mean_side_obj_loss", "=", "tf", ".", "reduce_mean", "(", "side_obj_loss", ")", "\n", "mean_seg_loss0", "=", "tf", ".", "reduce_mean", "(", "seg_loss0", ")", "\n", "#            mean_seg_loss1 = tf.reduce_mean(seg_loss1)", "\n", "\n", "occ_loss", "=", "tf", ".", "constant", "(", "0", ")", "\n", "\n", "recon_loss", "=", "mean_seg_loss0", "\n", "\n", "side_loss", "=", "mean_side_seg_loss0", "+", "0.001", "*", "tf", ".", "reduce_mean", "(", "side_occ_loss0", ")", "+", "2", "*", "mean_side_obj_loss", "\n", "l2_loss_vars", "=", "[", "]", "\n", "trainable_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ")", "\n", "for", "var", "in", "trainable_vars", ":", "\n", "            ", "cur_name", "=", "var", ".", "op", ".", "name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "not", "(", "(", "'bias'", "in", "cur_name", ")", "|", "(", "'_b'", "in", "cur_name", ")", "|", "(", "'gamma'", "in", "var", ".", "op", ".", "name", ")", "|", "(", "'beta'", "in", "var", ".", "op", ".", "name", ")", ")", ":", "\n", "                ", "l2_loss_vars", ".", "append", "(", "var", ")", "\n", "\n", "", "", "logging", ".", "error", "(", "'L2 vars'", ")", "\n", "logging", ".", "error", "(", "str", "(", "l2_loss_vars", ")", ")", "\n", "lossL2", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", "for", "v", "in", "l2_loss_vars", "]", ")", "/", "len", "(", "l2_loss_vars", ")", "\n", "loss", "=", "recon_loss", "+", "0.0002", "*", "lossL2", "+", "0.5", "*", "side_loss", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate_placeholder", ")", "\n", "\n", "\n", "all_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", "\n", "trainable_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ")", "\n", "optimizer_variables", "=", "[", "]", "\n", "\n", "backbone_optimizer_variables", "=", "[", "]", "\n", "to_load_vars", "=", "[", "]", "\n", "\n", "for", "var", "in", "all_vars", ":", "\n", "\n", "          ", "if", "'my_bev_object_decoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "              ", "if", "'processed_endpoint_init_conv'", "in", "var", ".", "op", ".", "name", ":", "\n", "                  ", "continue", "\n", "\n", "", "else", ":", "\n", "                  ", "to_load_vars", ".", "append", "(", "var", ")", "\n", "", "", "elif", "'disc'", "in", "var", ".", "op", ".", "name", ":", "\n", "            ", "continue", "\n", "\n", "\n", "\n", "\n", "", "", "if", "use_deeplab", ":", "\n", "            ", "if", "starting_from_cityscapes", ":", "\n", "                ", "query_variables_to_restore", "=", "dict", "(", ")", "\n", "\n", "restored_vars", "=", "[", "]", "\n", "new_vars", "=", "[", "]", "\n", "\n", "for", "var", "in", "all_vars", ":", "\n", "\n", "                  ", "if", "'image_encoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "                      ", "restored_vars", ".", "append", "(", "var", ".", "op", ".", "name", ")", "\n", "\n", "if", "'mem_net_backbone'", "in", "var", ".", "op", ".", "name", ":", "\n", "\n", "                          ", "query_variables_to_restore", "[", "var", ".", "op", ".", "name", ".", "replace", "(", "'image_encoder/mem_net_backbone/'", ",", "''", ")", "]", "=", "var", "\n", "", "elif", "'pretrained_decoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "                          ", "query_variables_to_restore", "[", "var", ".", "op", ".", "name", ".", "replace", "(", "'memory_encoder/pretrained_decoder/'", ",", "''", ")", "]", "=", "var", "\n", "\n", "\n", "", "", "else", ":", "\n", "                      ", "new_vars", ".", "append", "(", "var", ")", "\n", "#                      trainable_new_vars.append(var)", "\n", "", "", "imagenet_query_saver", "=", "tf", ".", "train", ".", "Saver", "(", "query_variables_to_restore", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "image_variables_to_restore", "=", "dict", "(", ")", "\n", "# bev_variables_to_restore = dict()", "\n", "restored_vars", "=", "[", "]", "\n", "new_vars", "=", "[", "]", "\n", "for", "var", "in", "all_vars", ":", "\n", "\n", "              ", "if", "'resnet_backbone'", "in", "var", ".", "op", ".", "name", ":", "\n", "                  ", "restored_vars", ".", "append", "(", "var", ".", "op", ".", "name", ")", "\n", "\n", "if", "'image_encoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "                      ", "image_variables_to_restore", "[", "var", ".", "op", ".", "name", ".", "replace", "(", "'image_encoder/resnet_backbone/'", ",", "''", ")", "]", "=", "var", "\n", "#                      else:", "\n", "#                          if not ('backbone_combine_conv' in var.op.name):", "\n", "#                              bev_variables_to_restore[var.op.name.replace('bev_encoder/resnet_backbone/', '')]=var", "\n", "", "", "else", ":", "\n", "                  ", "new_vars", ".", "append", "(", "var", ")", "\n", "#                      trainable_new_vars.append(var)", "\n", "", "", "imagenet_image_saver", "=", "tf", ".", "train", ".", "Saver", "(", "image_variables_to_restore", ")", "\n", "#                imagenet_bev_saver = tf.train.Saver(bev_variables_to_restore)", "\n", "\n", "\n", "", "non_decoder_vars", "=", "[", "]", "\n", "for", "var", "in", "all_vars", ":", "\n", "            ", "if", "(", "not", "(", "'my_bev_object_decoder'", "in", "var", ".", "op", ".", "name", ")", ")", ":", "\n", "                ", "non_decoder_vars", ".", "append", "(", "var", ")", "\n", "\n", "", "", "for", "var", "in", "trainable_vars", ":", "\n", "\n", "            ", "if", "'BatchNorm'", "in", "var", ".", "op", ".", "name", ":", "\n", "#                        print('Batch norm variable : '  + str(var))", "\n", "                ", "continue", "\n", "\n", "\n", "\n", "", "elif", "'upscale'", "in", "var", ".", "op", ".", "name", ":", "\n", "                ", "print", "(", "'Upscale variable : '", "+", "str", "(", "var", ")", ")", "\n", "\n", "", "elif", "'bev_encoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "                ", "backbone_optimizer_variables", ".", "append", "(", "var", ")", "\n", "optimizer_variables", ".", "append", "(", "var", ")", "\n", "", "elif", "'image_encoder'", "in", "var", ".", "op", ".", "name", ":", "\n", "\n", "                ", "if", "use_deeplab", ":", "\n", "                    ", "if", "'exit'", "in", "var", ".", "op", ".", "name", ":", "\n", "                        ", "backbone_optimizer_variables", ".", "append", "(", "var", ")", "\n", "optimizer_variables", ".", "append", "(", "var", ")", "\n", "", "", "else", ":", "\n", "                    ", "backbone_optimizer_variables", ".", "append", "(", "var", ")", "\n", "optimizer_variables", ".", "append", "(", "var", ")", "\n", "logging", ".", "error", "(", "'BACKBONE VAR'", "+", "str", "(", "var", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "logging", ".", "error", "(", "'NON BACKBONE VAR '", "+", "str", "(", "var", ")", ")", "\n", "optimizer_variables", ".", "append", "(", "var", ")", "\n", "\n", "", "", "logging", ".", "error", "(", "'NON DECODER VARS '", "+", "str", "(", "non_decoder_vars", ")", ")", "\n", "logging", ".", "error", "(", "'NUMBER OF ALL PARAMETERS: '", "+", "str", "(", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "for", "v", "in", "optimizer_variables", "]", ")", ")", ")", "\n", "logging", ".", "error", "(", "'NUMBER OF BACKBONE PARAMETERS: '", "+", "str", "(", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "for", "v", "in", "backbone_optimizer_variables", "]", ")", ")", ")", "\n", "\n", "# to_load_saver = tf.train.Saver(var_list=to_load_vars,max_to_keep=2)", "\n", "\n", "gvs", "=", "optimizer", ".", "compute_gradients", "(", "loss", ",", "var_list", "=", "optimizer_variables", ")", "\n", "\n", "capped_gvs", "=", "get_clipped_grads", "(", "gvs", ")", "\n", "\n", "network_train_op_total", "=", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ")", "\n", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "2", ")", "\n", "\n", "saver_best_loss", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "2", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "\n", "if", "use_deeplab", "&", "starting_from_cityscapes", ":", "\n", "            ", "load_path", "=", "'/scratch_net/catweazle/cany/cityscapes_deeplab/model.ckpt'", "\n", "\n", "imagenet_query_saver", ".", "restore", "(", "sess", ",", "load_path", ")", "\n", "\n", "", "elif", "starting_from_imagenet", ":", "\n", "            ", "load_path1", "=", "os", ".", "path", ".", "join", "(", "'/scratch_net/catweazle/cany/resnet50/resnet_v1_50_2016_08_28/resnet_v1_50_1.ckpt'", ")", "\n", "\n", "imagenet_image_saver", ".", "restore", "(", "sess", ",", "load_path1", ")", "\n", "#       ", "\n", "", "else", ":", "\n", "\n", "            ", "load_path", "=", "os", ".", "path", ".", "join", "(", "'/scratch_net/catweazle/cany/argoverse_classwise/logdir'", ",", "'checkpoints/keep2'", ",", "'best-16-9999'", ")", "\n", "\n", "saver", ".", "restore", "(", "sess", ",", "load_path", ")", "\n", "# to_load_saver.restore(sess,load_path)", "\n", "", "sess", ".", "run", "(", "mem_net", ".", "interp_surgery", "(", "tf", ".", "global_variables", "(", ")", ")", ")", "\n", "\n", "\n", "init_step", "=", "0", "\n", "\n", "\n", "time2", "=", "0", "\n", "time3", "=", "0", "\n", "start_epoch", "=", "0", "\n", "step", "=", "init_step", "\n", "curr_lr", "=", "exp_config", ".", "learning_rate", "\n", "\n", "\n", "curr_lr", "=", "1e-06", "\n", "\n", "\n", "max_epoch", "=", "3000", "\n", "best_mean", "=", "0.16", "\n", "\n", "#            i1_value_list = []", "\n", "#            i2_value_list = []", "\n", "loss_value_list", "=", "[", "]", "\n", "occ_loss_value_list", "=", "[", "]", "\n", "recon_loss_value_list", "=", "[", "]", "\n", "reg_loss_value_list", "=", "[", "]", "\n", "\n", "side_loss_value_list", "=", "[", "]", "\n", "side_occ_loss_value_list", "=", "[", "]", "\n", "side_recon_loss_value_list", "=", "[", "]", "\n", "side_obj_loss_value_list", "=", "[", "]", "\n", "seg_v_list0", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "max_epoch", ")", ":", "\n", "\n", "\n", "            ", "if", "epoch", "%", "10", "==", "0", ":", "\n", "                ", "curr_lr", "=", "0.9", "*", "curr_lr", "\n", "\n", "", "logging", ".", "error", "(", "'EPOCH : '", "+", "str", "(", "epoch", ")", ")", "\n", "# Update learning rate if necessary", "\n", "\n", "random", ".", "shuffle", "(", "train_frame_list", ")", "\n", "\n", "generators_list", "=", "[", "]", "\n", "\n", "max_interval_between_frames", "=", "15", "\n", "for", "k", "in", "range", "(", "BATCH_SIZE", ")", ":", "\n", "                ", "generators_list", ".", "append", "(", "BackgroundGenerator", "(", "iterate_minibatches", "(", "train_frame_list", ",", "max_interval_between_frames", ",", "reference_frame_index", "=", "reference_frame_index", ",", "n_frames_per_seq", "=", "n_frames_per_seq", ",", "\n", "batch_size", "=", "BATCH_SIZE", ")", ")", ")", "\n", "\n", "try", ":", "\n", "                    ", "end_of_epoch", "=", "False", "\n", "while", "(", "not", "end_of_epoch", ")", ":", "\n", "                            ", "end_of_epoch", "=", "False", "\n", "#                    ", "\n", "for", "k", "in", "range", "(", "BATCH_SIZE", ")", ":", "\n", "                                ", "temp_next", "=", "generators_list", "[", "k", "]", ".", "next", "(", ")", "\n", "if", "temp_next", "==", "None", ":", "\n", "                                    ", "end_of_epoch", "=", "True", "\n", "break", "\n", "\n", "", "else", ":", "\n", "\n", "                                    ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_transforms", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_ref_bev_labels", ",", "all_bev_labels", "=", "temp_next", "\n", "\n", "\n", "", "", "if", "end_of_epoch", ":", "\n", "#                        ", "\n", "                                ", "break", "\n", "\n", "", "if", "step", "%", "5000", "==", "4999", ":", "\n", "                                ", "saver", ".", "save", "(", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\n", "'checkpoints'", ",", "\n", "'routine'", ")", ",", "\n", "global_step", "=", "step", ")", "\n", "\n", "\n", "", "batch_bev_images", "=", "np", ".", "squeeze", "(", "batch_bev_images", ")", "\n", "\n", "to_feed_image_labels", "=", "np", ".", "zeros", "(", "(", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "total_label_slices", ")", ",", "np", ".", "uint8", ")", "\n", "to_feed_image_object_labels", "=", "np", ".", "zeros", "(", "(", "1", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "exp_config", ".", "num_object_classes", "+", "1", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "to_feed_image_labels", "[", "...", ",", "0", "]", "=", "np", ".", "copy", "(", "batch_label", "[", "...", ",", "0", "]", ")", "\n", "to_feed_image_labels", "[", "...", ",", "1", ":", "]", "=", "np", ".", "copy", "(", "batch_label", "[", "...", ",", "exp_config", ".", "num_bev_classes", ":", "]", ")", "\n", "\n", "to_feed_image_object_labels", "[", "...", ",", ":", "exp_config", ".", "num_object_classes", "]", "=", "np", ".", "copy", "(", "np", ".", "expand_dims", "(", "batch_label", "[", "reference_frame_index", ",", "...", ",", "1", ":", "exp_config", ".", "num_bev_classes", "]", ",", "axis", "=", "0", ")", ")", "\n", "to_feed_image_object_labels", "[", "...", ",", "-", "1", "]", "=", "np", ".", "clip", "(", "1", "-", "np", ".", "sum", "(", "to_feed_image_object_labels", ",", "axis", "=", "-", "1", ")", ",", "0", ",", "1", ")", "\n", "\n", "feed_dict", "=", "{", "\n", "\n", "learning_rate_placeholder", ":", "curr_lr", ",", "\n", "training_time_placeholder", ":", "True", ",", "\n", "my_training_placeholder", ":", "True", ",", "\n", "\n", "images_placeholder", ":", "batch_image", ",", "\n", "\n", "image_labels_placeholder", ":", "to_feed_image_labels", ",", "\n", "image_objects_label_placeholder", ":", "to_feed_image_object_labels", ",", "\n", "bev_transforms_placeholder", ":", "batch_transforms", ",", "\n", "separate_covers_placeholder", ":", "batch_separate_covers", ",", "\n", "ground_transforms_placeholder1", ":", "batch_tf_transforms1", ",", "\n", "ground_transforms_placeholder2", ":", "batch_tf_transforms2", ",", "\n", "ground_transforms_placeholder3", ":", "batch_tf_transforms3", ",", "\n", "coordinate_ground_transforms_placeholder", ":", "batch_coordinate_transforms", ",", "\n", "\n", "\n", "ref_bev_labels_placeholder", ":", "batch_ref_bev_labels", "\n", "\n", "\n", "}", "\n", "\n", "\n", "_", "=", "sess", ".", "run", "(", "network_train_op_total", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "\n", "if", "step", "%", "100", "==", "0", ":", "\n", "\n", "\n", "\n", "                                ", "loss_value", ",", "side_obj_v", ",", "recon_v", ",", "occ_v", ",", "reg_v", ",", "seg_loss_v0", ",", "mean_side_seg_loss0_v", ",", "side_occ_loss0_v", ",", "side_loss_v", "=", "sess", ".", "run", "(", "[", "loss", ",", "side_obj_loss", ",", "recon_loss", ",", "occ_loss", ",", "lossL2", ",", "mean_seg_loss0", ",", "mean_side_seg_loss0", ",", "side_occ_loss0", ",", "side_loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "#                           ", "\n", "\n", "recon_loss_value_list", ".", "append", "(", "recon_v", ")", "\n", "reg_loss_value_list", ".", "append", "(", "reg_v", ")", "\n", "occ_loss_value_list", ".", "append", "(", "occ_v", ")", "\n", "\n", "side_loss_value_list", ".", "append", "(", "side_loss_v", ")", "\n", "side_occ_loss_value_list", ".", "append", "(", "side_occ_loss0_v", ")", "\n", "side_recon_loss_value_list", ".", "append", "(", "mean_side_seg_loss0_v", ")", "\n", "side_obj_loss_value_list", ".", "append", "(", "side_obj_v", ")", "\n", "#                            side_loss_value_list.append(side_recon_v)", "\n", "loss_value_list", ".", "append", "(", "loss_value", ")", "\n", "\n", "seg_v_list0", ".", "append", "(", "seg_loss_v0", ")", "\n", "#                     ", "\n", "\n", "\n", "", "if", "step", "%", "exp_config", ".", "val_eval_frequency", "==", "(", "exp_config", ".", "val_eval_frequency", "-", "1", ")", ":", "\n", "\n", "                                  ", "val_res", "=", "do_eval", "(", "sess", ",", "val_tokens", ",", "\n", "my_training_placeholder", ",", "\n", "\n", "images_placeholder", ",", "\n", "\n", "image_labels_placeholder", ",", "\n", "\n", "bev_transforms_placeholder", ",", "\n", "separate_covers_placeholder", ",", "\n", "ground_transforms_placeholder1", ",", "\n", "ground_transforms_placeholder2", ",", "\n", "ground_transforms_placeholder3", ",", "\n", "coordinate_ground_transforms_placeholder", ",", "\n", "\n", "\n", "projected_obj_estimates", ",", "\n", "masks", ",", "\n", "side_masks", ",", "side_occ_softmaxed", ",", "side_obj_softmaxed", ",", "\n", "projected_estimates", ",", "\n", "\n", "combined_projected_estimates", ",", "\n", "step", ",", "training_time_placeholder", ",", "val_folder_path", "=", "validation_res_path", ")", "\n", "overall_mean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "val_res", ")", ")", "\n", "logging", ".", "error", "(", "'Overall mean : '", "+", "str", "(", "overall_mean", ")", ")", "\n", "\n", "if", "overall_mean", ">", "best_mean", ":", "\n", "                                      ", "best_mean", "=", "np", ".", "copy", "(", "overall_mean", ")", "\n", "logging", ".", "error", "(", "'New best'", ")", "\n", "saver_best_loss", ".", "save", "(", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\n", "'checkpoints'", ",", "\n", "'best-'", "+", "str", "(", "np", ".", "uint8", "(", "np", ".", "floor", "(", "overall_mean", "*", "100", ")", ")", ")", ")", ",", "\n", "global_step", "=", "step", ")", "\n", "# ####                            ", "\n", "#                                ", "\n", "\n", "\n", "", "", "step", "=", "step", "+", "1", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "\n", "                    ", "logging", ".", "error", "(", "'MAIN LOOP EXCEPTION '", "+", "str", "(", "e", ")", ")", "\n", "\n", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.standard_iterate_minibatches": [[771, 907], ["train_loader.get", "multiprocessing.dummy.Pool", "numpy.copy", "random.randint", "frame_ids.append", "frame_ids.append", "random.randint", "frame_ids.append", "str", "os.path.join", "numpy.flipud", "argoverse_train.decode_binary_labels", "train_loader.get_calibration", "utils.argoverse_project_to_image", "numpy.copy", "numpy.expand_dims", "numpy.concatenate", "numpy.copy", "range", "multiprocessing.dummy.Pool.map", "multiprocessing.dummy.Pool.close", "multiprocessing.dummy.Pool.join", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "numpy.ones", "numpy.zeros", "range", "numpy.max", "numpy.min", "numpy.min", "numpy.copy", "numpy.array", "numpy.zeros_like", "numpy.uint8", "range", "len", "numpy.copy", "numpy.expand_dims", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.zeros", "numpy.expand_dims", "multiprocessing.dummy.Pool.close", "multiprocessing.dummy.Pool.join", "logging.error", "PIL.Image.open", "numpy.flipud", "numpy.copy", "numpy.copy", "train_loader.get.get_pose", "str", "numpy.copy", "os.path.join", "os.path.join", "pairs.append", "int", "int", "numpy.copy", "numpy.copy", "numpy.copy", "str", "utils.get_visible_mask", "numpy.copy", "numpy.copy", "numpy.copy", "str", "str", "numpy.copy", "train_loader.get.get_pose", "int", "int", "int", "int", "int", "int", "numpy.expand_dims", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.decode_binary_labels", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_project_to_image", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.get_visible_mask"], ["", "", "", "", "", "def", "standard_iterate_minibatches", "(", "my_scene", ",", "chosen_frame", ",", "max_interval_between_frames", ",", "\n", "reference_frame_index", ",", "\n", "\n", "n_frames_per_seq", "=", "3", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "\n", "    ", "n_seqs", "=", "n_frames_per_seq", "-", "num_frames", "+", "1", "\n", "try", ":", "\n", "\n", "\n", "        ", "camera", "=", "\"ring_front_center\"", "\n", "scene", "=", "train_loader", ".", "get", "(", "my_scene", ")", "\n", "\n", "pool", "=", "ThreadPool", "(", "n_seqs", "*", "num_frames", ")", "\n", "\n", "n_frames_in_scene", "=", "scene", ".", "num_lidar_frame", "\n", "\n", "# logging.error('NUM FRAMES ' + str(n_frames_in_scene))", "\n", "# logging.error('NUM FRAMES ' + str(n_frames_in_scene))", "\n", "seq_length", "=", "np", ".", "copy", "(", "n_frames_in_scene", ")", "\n", "frame_ids", "=", "[", "]", "\n", "# logging.error('FIRST FRAME TO GET')", "\n", "first_frame", "=", "random", ".", "randint", "(", "np", ".", "max", "(", "[", "0", ",", "chosen_frame", "-", "max_interval_between_frames", "]", ")", ",", "chosen_frame", ")", "\n", "# logging.error('FIRST FRAME GOT')", "\n", "frame_ids", ".", "append", "(", "first_frame", ")", "\n", "frame_ids", ".", "append", "(", "chosen_frame", ")", "\n", "last_frame", "=", "random", ".", "randint", "(", "np", ".", "min", "(", "[", "seq_length", "-", "1", ",", "chosen_frame", "]", ")", ",", "np", ".", "min", "(", "[", "chosen_frame", "+", "max_interval_between_frames", ",", "seq_length", "-", "1", "]", ")", ")", "\n", "frame_ids", ".", "append", "(", "last_frame", ")", "\n", "\n", "pairs", "=", "[", "]", "\n", "\n", "\n", "timestamp", "=", "str", "(", "np", ".", "copy", "(", "train_loader", ".", "_image_timestamp_list_sync", "[", "my_scene", "]", "[", "camera", "]", "[", "frame_ids", "[", "reference_frame_index", "]", "]", ")", ")", "\n", "# logging.error('TIMESTAMP GET')", "\n", "# logging.error('TIME S ' + timestamp)", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "exp_config", ".", "argo_labels_path", ",", "\n", "my_scene", ",", "camera", ",", "\n", "str", "(", "camera", ")", "+", "'_'", "+", "str", "(", "timestamp", ")", "+", "'.png'", ")", "\n", "\n", "encoded_labels", "=", "np", ".", "flipud", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "output_path", ")", ",", "np", ".", "int32", ")", ")", "\n", "# logging.error('ENCODED LABELS SHAPE ' + str(encoded_labels.shape))", "\n", "num_class", "=", "exp_config", ".", "num_bev_classes", "\n", "bev_labels", "=", "decode_binary_labels", "(", "encoded_labels", ",", "num_class", "+", "1", ")", "\n", "# mask = ~labels[...,-1]", "\n", "\n", "# labels = labels[...,:-1]", "\n", "calib_cur", "=", "train_loader", ".", "get_calibration", "(", "camera", ",", "my_scene", ")", "\n", "calib_ref", "=", "calib_cur", "\n", "to_image_transform", "=", "utils", ".", "argoverse_project_to_image", "(", "exp_config", ",", "np", ".", "zeros_like", "(", "bev_labels", ")", ",", "calib_ref", ")", "\n", "\n", "# image_objects = cv2.warpPerspective(np.squeeze(bev_labels[...,-1]),to_image_transform,exp_config.original_image_size,flags=cv2.INTER_LINEAR)", "\n", "# image_objects= cv2.resize(image_objects,(int(exp_config.camera_image_patch_size[1]/4),int(exp_config.camera_image_patch_size[0]/4)), interpolation = cv2.INTER_LINEAR)", "\n", "# vis_mask = np.float32(image_objects > 0.5)", "\n", "vis_mask", "=", "np", ".", "copy", "(", "np", ".", "uint8", "(", "np", ".", "flipud", "(", "utils", ".", "get_visible_mask", "(", "calib_cur", ".", "K", ",", "calib_cur", ".", "camera_config", ".", "img_width", ",", "\n", "exp_config", ".", "map_extents", ",", "exp_config", ".", "resolution", ")", ")", ")", ")", "\n", "\n", "# logging.error('VIS MASK SHAPE ' + str(vis_mask.shape))", "\n", "# logging.error('BEV LABELS SHAPE ' + str(bev_labels.shape))        ", "\n", "vis_mask", "=", "np", ".", "expand_dims", "(", "vis_mask", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "bev_labels", "=", "np", ".", "concatenate", "(", "[", "np", ".", "copy", "(", "bev_labels", "[", "...", ",", ":", "exp_config", ".", "num_bev_classes", "]", ")", ",", "np", ".", "copy", "(", "vis_mask", ")", ",", "vis_mask", "*", "(", "1", "-", "np", ".", "copy", "(", "np", ".", "expand_dims", "(", "bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "]", ",", "axis", "=", "-", "1", ")", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# logging.error('ABOUT TO GET POSE')", "\n", "pose_ref", "=", "np", ".", "copy", "(", "scene", ".", "get_pose", "(", "frame_ids", "[", "reference_frame_index", "]", ")", ".", "transform_matrix", ")", "\n", "# logging.error('GOT POSE')", "\n", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "                ", "timestamp", "=", "str", "(", "np", ".", "copy", "(", "train_loader", ".", "_image_timestamp_list_sync", "[", "my_scene", "]", "[", "camera", "]", "[", "frame_ids", "[", "m", "]", "]", ")", ")", "\n", "# logging.error('TIME ' + str(m) + ' ' + timestamp)", "\n", "pose_cur", "=", "np", ".", "copy", "(", "scene", ".", "get_pose", "(", "frame_ids", "[", "m", "]", ")", ".", "transform_matrix", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "exp_config", ".", "argo_labels_path", ",", "\n", "my_scene", ",", "camera", ",", "\n", "str", "(", "camera", ")", "+", "'_'", "+", "str", "(", "timestamp", ")", "+", "'.png'", ")", "\n", "\n", "image_string", "=", "os", ".", "path", ".", "join", "(", "exp_config", ".", "argo_track_path", ",", "my_scene", ",", "'ring_front_center'", ",", "'ring_front_center_'", "+", "str", "(", "timestamp", ")", "+", "'.jpg'", ")", "\n", "\n", "\n", "pairs", ".", "append", "(", "(", "image_string", ",", "output_path", ",", "vis_mask", ",", "calib_cur", ",", "pose_ref", ",", "pose_cur", ",", "m", "==", "reference_frame_index", ")", ")", "\n", "\n", "\n", "# logging.error('GIVEN TO POOL')", "\n", "", "", "results", "=", "pool", ".", "map", "(", "single_process", ",", "pairs", ")", "\n", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "#        logging.error('Results shape : ' + str(len(results)))", "\n", "\n", "seq_images_ar", "=", "np", ".", "zeros", "(", "(", "n_frames_per_seq", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "seq_labels_ar", "=", "np", ".", "ones", "(", "(", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "exp_config", ".", "num_bev_classes", "+", "2", ")", ",", "np", ".", "float32", ")", "\n", "\n", "bev_transforms_ar1", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar2", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar3", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "coordinate_transforms_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "bev_images_ar", "=", "np", ".", "zeros", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "\n", "bev_covers_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "\n", "all_bev_labels_ar", "=", "np", ".", "zeros", "(", "(", "num_frames", ",", "196", ",", "200", ",", "exp_config", ".", "num_bev_classes", "+", "2", ")", ",", "np", ".", "float32", ")", "\n", "\n", "#        logging.error('PROJECT TO GROUND ENDED')", "\n", "for", "k", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "            ", "temp_res", "=", "results", "[", "k", "]", "\n", "\n", "if", "k", "<", "num_frames", ":", "\n", "\n", "                ", "seq_images_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "", "elif", "k", ">=", "(", "n_seqs", "*", "num_frames", "-", "(", "n_seqs", "-", "1", ")", ")", ":", "\n", "                ", "seq_images_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "#                logging.error('RETURNED GRID SHAPE ' + str(temp_res[3].shape))", "\n", "", "bev_images_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "3", "]", ")", "\n", "\n", "bev_covers_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "copy", "(", "temp_res", "[", "2", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "bev_transforms_ar1", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "5", "]", ")", "\n", "bev_transforms_ar2", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "6", "]", ")", "\n", "bev_transforms_ar3", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "7", "]", ")", "\n", "coordinate_transforms_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "4", "]", ")", "\n", "all_bev_labels_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "8", "]", ")", "\n", "\n", "", "return", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_covers_ar", ",", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", ",", "bev_transforms_ar1", ",", "bev_transforms_ar2", ",", "bev_transforms_ar3", ",", "coordinate_transforms_ar", ",", "np", ".", "expand_dims", "(", "bev_labels", ",", "axis", "=", "0", ")", ",", "to_image_transform", ",", "all_bev_labels_ar", ",", "True", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "logging", ".", "error", "(", "'ITERATE MINI BATCHES Exception '", "+", "str", "(", "e", ")", ")", "\n", "# exc_type, exc_obj, exc_tb = sys.exc_info()", "\n", "# fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]", "\n", "# logging.error(str(exc_type, fname, exc_tb.tb_lineno))", "\n", "return", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.iterate_minibatches": [[908, 958], ["len", "range", "numpy.min", "numpy.sum", "int", "argoverse_train.standard_iterate_minibatches", "numpy.where"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.standard_iterate_minibatches"], ["", "", "def", "iterate_minibatches", "(", "train_tokens", ",", "max_interval_between_frames", ",", "reference_frame_index", ",", "n_frames_per_seq", "=", "3", ",", "\n", "batch_size", "=", "BATCH_SIZE", ")", ":", "\n", "    ", "'''\n    Function to create mini batches from the dataset of a certain batch size \n    Returns tuple of   ( t x n x h x w x 3, t x n x h x w x 1)  where t is  n_frames_per_seq and n is batch size\n    This way it is easier to slice per frame number    \n    '''", "\n", "\n", "n_videos", "=", "len", "(", "train_tokens", ")", "\n", "\n", "\n", "\n", "\n", "for", "b_i", "in", "range", "(", "0", ",", "n_videos", ",", "batch_size", ")", ":", "\n", "\n", "        ", "if", "b_i", "+", "batch_size", ">", "n_videos", ":", "\n", "            ", "continue", "\n", "\n", "", "\"\"\"\n        Which video sequences will be in this batch\n        \"\"\"", "\n", "\n", "\n", "cur_frame", "=", "train_tokens", "[", "b_i", "]", "\n", "\n", "indi", "=", "all_frames_cumulative", ">", "cur_frame", "\n", "selected_seq", "=", "np", ".", "min", "(", "np", ".", "where", "(", "indi", ")", "[", "0", "]", ")", "\n", "\n", "\n", "temp_sum", "=", "np", ".", "sum", "(", "all_frames_list", "[", ":", "selected_seq", "]", ")", "\n", "\n", "frame_id", "=", "int", "(", "cur_frame", "-", "temp_sum", ")", "\n", "\n", "\n", "\n", "my_token", "=", "token_splits", ".", "TRAIN_LOGS", "[", "selected_seq", "]", "\n", "\n", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_covers_ar", ",", "transforms_ar", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "coordinate_transforms_ar", ",", "real_ref_bev_labels", ",", "to_image_transform", ",", "all_bev_labels_ar", ",", "went_well", "=", "standard_iterate_minibatches", "(", "my_token", ",", "frame_id", ",", "max_interval_between_frames", ",", "\n", "\n", "reference_frame_index", ",", "\n", "n_frames_per_seq", "=", "n_frames_per_seq", ",", "\n", "batch_size", "=", "batch_size", "\n", ")", "\n", "\n", "\n", "if", "not", "went_well", ":", "\n", "            ", "continue", "\n", "\n", "\n", "", "yield", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "transforms_ar", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "bev_covers_ar", ",", "coordinate_transforms_ar", ",", "real_ref_bev_labels", ",", "all_bev_labels_ar", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.eval_iterator": [[959, 1084], ["train_loader.get", "multiprocessing.dummy.Pool", "frame_ids.append", "str", "os.path.join", "numpy.flipud", "argoverse_train.decode_binary_labels", "train_loader.get_calibration", "utils.argoverse_project_to_image", "numpy.copy", "numpy.expand_dims", "numpy.concatenate", "numpy.copy", "range", "multiprocessing.dummy.Pool.map", "multiprocessing.dummy.Pool.close", "multiprocessing.dummy.Pool.join", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "numpy.ones", "numpy.zeros", "range", "range", "range", "numpy.copy", "numpy.array", "numpy.zeros_like", "numpy.uint8", "range", "len", "numpy.copy", "numpy.expand_dims", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.zeros", "numpy.expand_dims", "frame_ids.append", "frame_ids.append", "PIL.Image.open", "numpy.flipud", "train_loader.get.get_pose", "str", "numpy.copy", "os.path.join", "os.path.join", "pairs.append", "int", "int", "numpy.copy", "numpy.copy", "numpy.copy", "str", "utils.get_visible_mask", "numpy.copy", "numpy.copy", "numpy.copy", "str", "numpy.expand_dims", "train_loader.get.get_pose", "int", "int", "int", "int", "int", "int", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.decode_binary_labels", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_project_to_image", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.get_visible_mask"], ["", "", "def", "eval_iterator", "(", "my_scene", ",", "cur_index", ",", "single_frame", "=", "False", ")", ":", "\n", "\n", "    ", "n_seqs", "=", "1", "\n", "\n", "\n", "\n", "camera", "=", "\"ring_front_center\"", "\n", "scene", "=", "train_loader", ".", "get", "(", "my_scene", ")", "\n", "\n", "pool", "=", "ThreadPool", "(", "n_seqs", "*", "num_frames", ")", "\n", "\n", "n_frames_in_scene", "=", "scene", ".", "num_lidar_frame", "\n", "# logging.error('NUM FRAMES ' + str(n_frames_in_scene))", "\n", "seq_length", "=", "n_frames_in_scene", "\n", "frame_ids", "=", "[", "]", "\n", "first_frame", "=", "cur_index", "\n", "\n", "frame_ids", ".", "append", "(", "first_frame", ")", "\n", "\n", "# logging.error('LEN IMAGES ' + str(len(all_images_list)))", "\n", "\n", "if", "single_frame", ":", "\n", "\n", "        ", "for", "frame_number", "in", "range", "(", "1", ",", "n_frames_per_seq", ")", ":", "\n", "            ", "frame_ids", ".", "append", "(", "first_frame", ")", "\n", "", "", "else", ":", "\n", "\n", "        ", "for", "frame_number", "in", "range", "(", "1", ",", "n_frames_per_seq", ")", ":", "\n", "            ", "frame_ids", ".", "append", "(", "first_frame", "+", "frame_number", ")", "\n", "\n", "", "", "pairs", "=", "[", "]", "\n", "\n", "\n", "timestamp", "=", "str", "(", "np", ".", "copy", "(", "train_loader", ".", "_image_timestamp_list_sync", "[", "my_scene", "]", "[", "camera", "]", "[", "frame_ids", "[", "reference_frame_index", "]", "]", ")", ")", "\n", "\n", "# logging.error('TIME S ' + timestamp)", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "exp_config", ".", "argo_labels_path", ",", "\n", "my_scene", ",", "camera", ",", "\n", "str", "(", "camera", ")", "+", "'_'", "+", "str", "(", "timestamp", ")", "+", "'.png'", ")", "\n", "\n", "encoded_labels", "=", "np", ".", "flipud", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "output_path", ")", ",", "np", ".", "int32", ")", ")", "\n", "# logging.error('ENCODED LABELS SHAPE ' + str(encoded_labels.shape))", "\n", "num_class", "=", "exp_config", ".", "num_bev_classes", "\n", "bev_labels", "=", "decode_binary_labels", "(", "encoded_labels", ",", "num_class", "+", "1", ")", "\n", "# mask = ~labels[...,-1]", "\n", "\n", "# labels = labels[...,:-1]", "\n", "calib_cur", "=", "train_loader", ".", "get_calibration", "(", "camera", ",", "my_scene", ")", "\n", "calib_ref", "=", "calib_cur", "\n", "to_image_transform", "=", "utils", ".", "argoverse_project_to_image", "(", "exp_config", ",", "np", ".", "zeros_like", "(", "bev_labels", ")", ",", "calib_ref", ")", "\n", "\n", "# image_objects = cv2.warpPerspective(np.squeeze(bev_labels[...,-1]),to_image_transform,exp_config.original_image_size,flags=cv2.INTER_LINEAR)", "\n", "# image_objects= cv2.resize(image_objects,(int(exp_config.camera_image_patch_size[1]/4),int(exp_config.camera_image_patch_size[0]/4)), interpolation = cv2.INTER_LINEAR)", "\n", "# vis_mask = np.float32(image_objects > 0.5)", "\n", "vis_mask", "=", "np", ".", "copy", "(", "np", ".", "uint8", "(", "np", ".", "flipud", "(", "utils", ".", "get_visible_mask", "(", "calib_cur", ".", "K", ",", "calib_cur", ".", "camera_config", ".", "img_width", ",", "\n", "exp_config", ".", "map_extents", ",", "exp_config", ".", "resolution", ")", ")", ")", ")", "\n", "\n", "# logging.error('VIS MASK SHAPE ' + str(vis_mask.shape))", "\n", "# logging.error('BEV LABELS SHAPE ' + str(bev_labels.shape))        ", "\n", "vis_mask", "=", "np", ".", "expand_dims", "(", "vis_mask", ",", "axis", "=", "-", "1", ")", "\n", "bev_labels", "=", "np", ".", "concatenate", "(", "[", "bev_labels", "[", "...", ",", ":", "exp_config", ".", "num_bev_classes", "]", ",", "vis_mask", ",", "vis_mask", "*", "(", "1", "-", "np", ".", "expand_dims", "(", "bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "]", ",", "axis", "=", "-", "1", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "pose_ref", "=", "np", ".", "copy", "(", "scene", ".", "get_pose", "(", "frame_ids", "[", "reference_frame_index", "]", ")", ".", "transform_matrix", ")", "\n", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "            ", "timestamp", "=", "str", "(", "np", ".", "copy", "(", "train_loader", ".", "_image_timestamp_list_sync", "[", "my_scene", "]", "[", "camera", "]", "[", "frame_ids", "[", "m", "]", "]", ")", ")", "\n", "# logging.error('TIME ' + str(m) + ' ' + timestamp)", "\n", "pose_cur", "=", "np", ".", "copy", "(", "scene", ".", "get_pose", "(", "frame_ids", "[", "m", "]", ")", ".", "transform_matrix", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "exp_config", ".", "argo_labels_path", ",", "\n", "my_scene", ",", "camera", ",", "\n", "str", "(", "camera", ")", "+", "'_'", "+", "str", "(", "timestamp", ")", "+", "'.png'", ")", "\n", "\n", "image_string", "=", "os", ".", "path", ".", "join", "(", "exp_config", ".", "argo_track_path", ",", "my_scene", ",", "'ring_front_center'", ",", "'ring_front_center_'", "+", "str", "(", "timestamp", ")", "+", "'.jpg'", ")", "\n", "\n", "\n", "pairs", ".", "append", "(", "(", "image_string", ",", "output_path", ",", "vis_mask", ",", "calib_cur", ",", "pose_ref", ",", "pose_cur", ",", "m", "==", "reference_frame_index", ")", ")", "\n", "\n", "\n", "\n", "", "", "results", "=", "pool", ".", "map", "(", "single_process", ",", "pairs", ")", "\n", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "#        logging.error('Results shape : ' + str(len(results)))", "\n", "\n", "seq_images_ar", "=", "np", ".", "zeros", "(", "(", "n_frames_per_seq", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "seq_labels_ar", "=", "np", ".", "ones", "(", "(", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "exp_config", ".", "num_bev_classes", "+", "2", ")", ",", "np", ".", "float32", ")", "\n", "\n", "bev_transforms_ar1", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar2", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar3", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "coordinate_transforms_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "bev_images_ar", "=", "np", ".", "zeros", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "\n", "bev_covers_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "\n", "all_bev_labels_ar", "=", "np", ".", "zeros", "(", "(", "num_frames", ",", "196", ",", "200", ",", "exp_config", ".", "num_bev_classes", "+", "2", ")", ",", "np", ".", "float32", ")", "\n", "\n", "#        logging.error('PROJECT TO GROUND ENDED')", "\n", "for", "k", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "        ", "temp_res", "=", "results", "[", "k", "]", "\n", "\n", "if", "k", "<", "num_frames", ":", "\n", "\n", "            ", "seq_images_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "", "elif", "k", ">=", "(", "n_seqs", "*", "num_frames", "-", "(", "n_seqs", "-", "1", ")", ")", ":", "\n", "            ", "seq_images_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "#                logging.error('RETURNED GRID SHAPE ' + str(temp_res[3].shape))", "\n", "", "bev_images_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "3", "]", ")", "\n", "\n", "bev_covers_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "copy", "(", "temp_res", "[", "2", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "bev_transforms_ar1", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "5", "]", ")", "\n", "bev_transforms_ar2", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "6", "]", ")", "\n", "bev_transforms_ar3", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "7", "]", ")", "\n", "coordinate_transforms_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "4", "]", ")", "\n", "all_bev_labels_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "8", "]", ")", "\n", "\n", "", "return", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_covers_ar", ",", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", ",", "bev_transforms_ar1", ",", "bev_transforms_ar2", ",", "bev_transforms_ar3", ",", "coordinate_transforms_ar", ",", "np", ".", "expand_dims", "(", "bev_labels", ",", "axis", "=", "0", ")", ",", "to_image_transform", ",", "all_bev_labels_ar", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.overall_eval_iterator": [[1085, 1126], ["argoverse_train.eval_iterator", "numpy.squeeze", "range", "numpy.stack", "numpy.clip", "numpy.float32", "range", "numpy.concatenate", "numpy.zeros_like", "range", "total_img_list.append", "numpy.sum", "to_return_bev_images_list.append"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.eval_iterator"], ["", "def", "overall_eval_iterator", "(", "my_scene", ",", "cur_index", ",", "single_frame", "=", "False", ")", ":", "\n", "\n", "# logging.error('SINGLE FRAME ' + str(single_frame))", "\n", "\n", "\n", "    ", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_covers_ar", ",", "_", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "coordinate_transforms_ar", ",", "real_ref_bev_labels", ",", "to_image_transform", ",", "all_bev_labels_ar", ",", "went_well", "=", "eval_iterator", "(", "my_scene", ",", "cur_index", ",", "single_frame", "=", "single_frame", ")", "\n", "\n", "\n", "squeezed_bev_covers_ar", "=", "np", ".", "squeeze", "(", "bev_covers_ar", ",", "axis", "=", "-", "1", ")", "\n", "\n", "total_img_list", "=", "[", "]", "\n", "# total_labels_list=[]", "\n", "\n", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "total_img", "=", "np", ".", "zeros_like", "(", "bev_images_ar", "[", "0", ",", "0", ",", "...", "]", ")", "\n", "\n", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "            ", "total_img", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "=", "bev_images_ar", "[", "k", ",", "m", ",", "...", "]", "[", "squeezed_bev_covers_ar", "[", "k", ",", "m", ",", "...", "]", ">", "0.5", ",", ":", "]", "\n", "# total_labels[squeezed_bev_covers_ar[k,m,...]>0.5,:] = bev_labels_ar[k,m,...][squeezed_bev_covers_ar[k,m,...]>0.5,:]", "\n", "\n", "", "total_img_list", ".", "append", "(", "total_img", ")", "\n", "# total_labels_list.append(total_labels)", "\n", "\n", "", "fin_bev_images", "=", "np", ".", "stack", "(", "total_img_list", ",", "axis", "=", "0", ")", "\n", "# fin_bev_labels = np.stack(total_labels_list,axis=0)", "\n", "fin_covers", "=", "np", ".", "clip", "(", "np", ".", "sum", "(", "bev_covers_ar", ",", "axis", "=", "1", ")", ",", "0", ",", "1", ")", "\n", "\n", "my_area", "=", "np", ".", "float32", "(", "bev_covers_ar", ">", "0.5", ")", "\n", "\n", "#        logging.error('BEV IMAGES MAX ' + str(np.max(bev_images_ar))+ ' MIN ' + str(np.min(bev_images_ar)))", "\n", "\n", "separate_bev_images", "=", "my_area", "*", "bev_images_ar", "\n", "\n", "to_return_bev_images_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "num_frames", ")", ":", "\n", "        ", "to_return_bev_images_list", ".", "append", "(", "separate_bev_images", "[", ":", ",", "k", ",", "...", "]", ")", "\n", "\n", "", "to_return_bev_images", "=", "np", ".", "concatenate", "(", "to_return_bev_images_list", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "seq_images_ar", ",", "seq_labels_ar", ",", "fin_bev_images", ",", "fin_covers", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "bev_covers_ar", ",", "coordinate_transforms_ar", ",", "to_return_bev_images", ",", "real_ref_bev_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.do_eval": [[1130, 1299], ["logging.error", "numpy.concatenate", "numpy.mean", "logging.error", "res_strings.append", "argoverse_train.write_to_txt_file", "train_loader.get", "range", "numpy.array", "all_j1s.append", "res_strings.append", "logging.error", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "os.path.join", "os.path.exists", "os.makedirs", "sess.run", "numpy.squeeze", "numpy.uint8", "range", "scene_results.append", "numpy.squeeze", "str", "str", "os.path.join", "os.path.join", "argoverse_train.overall_eval_iterator", "numpy.zeros", "utils.get_all_stats", "sample_results.append", "numpy.array", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "argoverse_train.overall_eval_iterator", "argoverse_train.overall_eval_iterator", "numpy.squeeze", "numpy.uint8", "numpy.squeeze", "str", "numpy.mean", "numpy.sum", "numpy.sum", "str", "int", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.write_to_txt_file", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_all_stats", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator"], ["", "def", "do_eval", "(", "sess", ",", "val_tokens", ",", "\n", "my_training_placeholder", ",", "\n", "\n", "images_placeholder", ",", "\n", "\n", "image_labels_placeholder", ",", "\n", "bev_transforms_placeholder", ",", "\n", "\n", "separate_covers_placeholder", ",", "\n", "ground_transforms_placeholder1", ",", "\n", "ground_transforms_placeholder2", ",", "\n", "ground_transforms_placeholder3", ",", "\n", "coordinate_ground_transforms_placeholder", ",", "\n", "\n", "projected_obj_estimates", ",", "\n", "masks", ",", "\n", "side_masks", ",", "side_occ_masks", ",", "side_obj_softmaxed", ",", "\n", "projected_estimates", ",", "\n", "\n", "combined_projected_estimates", ",", "\n", "iteration", ",", "training_time_placeholder", ",", "val_folder_path", "=", "validation_res_path", ")", ":", "\n", "\n", "    ", "'''\n    Function for running the evaluations every X iterations on the training and validation sets. \n    :param sess: The current tf session \n    :param eval_loss: The placeholder containing the eval loss\n    :param images_placeholder: Placeholder for the images\n    :param labels_placeholder: Placeholder for the masks\n    :param training_time_placeholder: Placeholder toggling the training/testing mode. \n    :param images: A numpy array or h5py dataset containing the images\n    :param labels: A numpy array or h45py dataset containing the corresponding labels \n    :param batch_size: The batch_size to use. \n    :return: The average loss (as defined in the experiment), and the average dice over all `images`. \n    '''", "\n", "logging", ".", "error", "(", "'Started evaluation'", ")", "\n", "\n", "\n", "res_strings", "=", "[", "]", "\n", "all_j1s", "=", "[", "]", "\n", "occ_all_j1s", "=", "[", "]", "\n", "\n", "\n", "for", "my_scene_token", "in", "val_tokens", ":", "\n", "\n", "        ", "scene_results", "=", "[", "]", "\n", "occ_scene_results", "=", "[", "]", "\n", "# current_dir = os.path.join(target_dir,'scene'+my_scene_token)", "\n", "\n", "# images = sorted(glob.glob(os.path.join(current_dir,'img*.png')))", "\n", "# labels = sorted(glob.glob(os.path.join(current_dir,'label*.png')))", "\n", "name_of_seq", "=", "my_scene_token", "\n", "\n", "# scene_token = current_dir.split('/')[-1][5:]", "\n", "\n", "# my_scene = nusc.get('scene', scene_token)", "\n", "scene", "=", "train_loader", ".", "get", "(", "my_scene_token", ")", "\n", "# logging.error('SCENE ' + my_scene_token)", "\n", "n_frames_in_scene", "=", "scene", ".", "num_lidar_frame", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "validation_res_path", ",", "name_of_seq", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "validation_res_path", ",", "name_of_seq", ")", ")", "\n", "\n", "\n", "\n", "", "for", "frame_number", "in", "range", "(", "0", ",", "n_frames_in_scene", ",", "10", ")", ":", "\n", "#            logging.error('FRAME NUMBER ' + str(frame_number))", "\n", "\n", "            ", "if", "frame_number", "<", "reference_frame_index", ":", "\n", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_covers", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "frame_number", ",", "single_frame", "=", "True", ")", "\n", "", "elif", "(", "frame_number", ">=", "(", "n_frames_in_scene", "-", "(", "num_frames", "-", "reference_frame_index", "-", "1", ")", ")", ")", ":", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_covers", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "frame_number", ",", "single_frame", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "batch_image", ",", "batch_label", ",", "batch_bev_images", ",", "batch_bev_covers", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_channel_bev_images", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "int", "(", "frame_number", "-", "reference_frame_index", ")", ",", "single_frame", "=", "False", ")", "\n", "\n", "\n", "\n", "# logging.error('WE GOT THE STUFF')", "\n", "", "feed_dict", "=", "{", "\n", "\n", "\n", "training_time_placeholder", ":", "False", ",", "\n", "my_training_placeholder", ":", "False", ",", "\n", "\n", "images_placeholder", ":", "batch_image", ",", "\n", "\n", "bev_transforms_placeholder", ":", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", ",", "\n", "\n", "separate_covers_placeholder", ":", "batch_separate_covers", ",", "\n", "ground_transforms_placeholder1", ":", "batch_tf_transforms1", ",", "\n", "ground_transforms_placeholder2", ":", "batch_tf_transforms2", ",", "\n", "ground_transforms_placeholder3", ":", "batch_tf_transforms3", ",", "\n", "coordinate_ground_transforms_placeholder", ":", "batch_coordinate_transforms", ",", "\n", "\n", "\n", "}", "\n", "\n", "masks_v", ",", "side_masks_v", ",", "side_occ_masks_v", ",", "projected_estimates_v", ",", "combined_projected_estimates_v", ",", "side_obj_softmaxed_v", ",", "projected_obj_v", "=", "sess", ".", "run", "(", "[", "masks", ",", "\n", "side_masks", ",", "side_occ_masks", ",", "projected_estimates", ",", "\n", "combined_projected_estimates", ",", "side_obj_softmaxed", ",", "projected_obj_estimates", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "#            logging.error('DEC OUTPUT ' + str(temp_dec_output.shape))", "\n", "\n", "\n", "# hard_estimate_list = []", "\n", "sample_results", "=", "[", "]", "\n", "squeezed_masks", "=", "np", ".", "squeeze", "(", "masks_v", ")", "\n", "\n", "hard_estimates", "=", "np", ".", "uint8", "(", "squeezed_masks", "[", "...", ",", ":", "exp_config", ".", "num_bev_classes", "]", ">", "0.45", ")", "\n", "\n", "\n", "for", "k", "in", "range", "(", "exp_config", ".", "num_bev_classes", ")", ":", "\n", "# bev_estimate = np.squeeze(masks_v[...,k])", "\n", "# hard_estimate_list.append(np.uint8(bev_estimate > 0.5))", "\n", "                ", "all_stats", ",", "void_pixels", "=", "utils", ".", "get_all_stats", "(", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "k", "]", ")", ",", "np", ".", "uint8", "(", "hard_estimates", "[", "...", ",", "k", "]", ")", ",", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "+", "1", "]", ")", ",", "mask_iou", "=", "exp_config", ".", "use_occlusion", ")", "\n", "sample_results", ".", "append", "(", "all_stats", ")", "\n", "\n", "", "scene_results", ".", "append", "(", "np", ".", "array", "(", "sample_results", ")", ")", "\n", "# occ_scene_results.append(occ_all_stats)", "\n", "\n", "\n", "\n", "", "seq_j1", "=", "np", ".", "array", "(", "scene_results", ")", "\n", "\n", "# logging.error('SEQ J SHAPE ' + str(seq_j1.shape))", "\n", "all_j1s", ".", "append", "(", "np", ".", "squeeze", "(", "seq_j1", ")", ")", "\n", "\n", "temp_string", "=", "\"Iteration : \"", "+", "str", "(", "iteration", ")", "+", "\" : Scene \"", "+", "str", "(", "my_scene_token", ")", "+", "\" - j1: \"", "+", "str", "(", "np", ".", "mean", "(", "seq_j1", ",", "axis", "=", "0", ")", "[", "...", ",", "0", "]", ")", "\n", "\n", "\n", "res_strings", ".", "append", "(", "temp_string", ")", "\n", "logging", ".", "error", "(", "temp_string", ")", "\n", "\n", "\n", "", "tot_j1", "=", "np", ".", "concatenate", "(", "all_j1s", ",", "axis", "=", "0", ")", "\n", "\n", "j", "=", "tot_j1", "[", "...", ",", "0", "]", "\n", "union", "=", "tot_j1", "[", "...", ",", "1", "]", "\n", "tp", "=", "tot_j1", "[", "...", ",", "2", "]", "\n", "fp", "=", "tot_j1", "[", "...", ",", "3", "]", "\n", "fn", "=", "tot_j1", "[", "...", ",", "4", "]", "\n", "tn", "=", "tot_j1", "[", "...", ",", "5", "]", "\n", "gt_exists", "=", "tot_j1", "[", "...", ",", "-", "1", "]", "\n", "\n", "\n", "tp_rate", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "fp_rate", "=", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "tn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "\n", "tp_rate", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "fp_rate", "=", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "tn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "precision", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "take_all_j", "=", "np", ".", "mean", "(", "j", ",", "axis", "=", "0", ")", "\n", "confuse_iou", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "temp_string", "=", "'Bev framewise j : '", "+", "str", "(", "take_all_j", ")", "+", "' , Bev confuse j : '", "+", "str", "(", "confuse_iou", ")", "+", "'\\n'", "+", "' Bev tp_rate : '", "+", "str", "(", "tp_rate", ")", "+", "' Bev fp_rate : '", "+", "str", "(", "fp_rate", ")", "+", "' Bev precision : '", "+", "str", "(", "precision", ")", "+", "'\\n'", "\n", "\n", "\n", "logging", ".", "error", "(", "temp_string", ")", "\n", "res_strings", ".", "append", "(", "temp_string", ")", "\n", "write_to_txt_file", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val_results.txt'", ")", ",", "res_strings", ")", "\n", "return", "confuse_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_train.main": [[1301, 1312], ["shutil.copy", "argoverse_train.run_training", "tensorflow.gfile.Exists", "tensorflow.gfile.MakeDirs"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.run_training"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "continue_run", "=", "True", "\n", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "log_dir", ")", ":", "\n", "        ", "tf", ".", "gfile", ".", "MakeDirs", "(", "log_dir", ")", "\n", "continue_run", "=", "False", "\n", "\n", "# Copy experiment config file", "\n", "", "shutil", ".", "copy", "(", "exp_config", ".", "__file__", ",", "log_dir", ")", "\n", "\n", "run_training", "(", "continue_run", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_nuscenes_labels.process_scene": [[22, 32], ["logging.error", "nuscenes.get", "dataset.iterate_samples", "make_nuscenes_labels.process_sample", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.iterate_samples", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_nuscenes_labels.process_sample"], ["def", "process_scene", "(", "nuscenes", ",", "map_data", ",", "scene", ",", "config", ")", ":", "\n", "    ", "logging", ".", "error", "(", "'PROCESSING SCENE '", "+", "str", "(", "scene", "[", "'name'", "]", ")", ")", "\n", "# Get the map corresponding to the current sample data", "\n", "log", "=", "nuscenes", ".", "get", "(", "'log'", ",", "scene", "[", "'log_token'", "]", ")", "\n", "scene_map_data", "=", "map_data", "[", "log", "[", "'location'", "]", "]", "\n", "\n", "# Iterate over samples", "\n", "first_sample_token", "=", "scene", "[", "'first_sample_token'", "]", "\n", "for", "sample", "in", "nusc_utils", ".", "iterate_samples", "(", "nuscenes", ",", "first_sample_token", ")", ":", "\n", "        ", "process_sample", "(", "nuscenes", ",", "scene_map_data", ",", "sample", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_nuscenes_labels.process_sample": [[34, 48], ["nuscenes.get", "dataset.load_point_cloud", "dataset.get_sensor_transform", "dataset.utils.transform", "nuscenes.get", "make_nuscenes_labels.process_sample_data"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.load_point_cloud", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_sensor_transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_nuscenes_labels.process_sample_data"], ["", "", "def", "process_sample", "(", "nuscenes", ",", "map_data", ",", "sample", ",", "config", ")", ":", "\n", "\n", "# Load the lidar point cloud associated with this sample", "\n", "    ", "lidar_data", "=", "nuscenes", ".", "get", "(", "'sample_data'", ",", "sample", "[", "'data'", "]", "[", "'LIDAR_TOP'", "]", ")", "\n", "lidar_pcl", "=", "nusc_utils", ".", "load_point_cloud", "(", "nuscenes", ",", "lidar_data", ")", "\n", "\n", "# Transform points into world coordinate system", "\n", "lidar_transform", "=", "nusc_utils", ".", "get_sensor_transform", "(", "nuscenes", ",", "lidar_data", ")", "\n", "lidar_pcl", "=", "transform", "(", "lidar_transform", ",", "lidar_pcl", ")", "\n", "\n", "# Iterate over sample data", "\n", "for", "camera", "in", "nusc_utils", ".", "CAMERA_NAMES", ":", "\n", "        ", "sample_data", "=", "nuscenes", ".", "get", "(", "'sample_data'", ",", "sample", "[", "'data'", "]", "[", "camera", "]", ")", "\n", "process_sample_data", "(", "nuscenes", ",", "map_data", ",", "sample_data", ",", "lidar_pcl", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_nuscenes_labels.process_sample_data": [[50, 86], ["dataset.get_map_masks", "dataset.get_object_masks", "numpy.concatenate", "nuscenes.get", "numpy.array", "dataset.get_sensor_transform", "dataset.utils.transform", "dataset.utils.get_occlusion_mask", "dataset.utils.encode_binary_labels", "os.path.join", "PIL.Image.fromarray().save", "dataset.utils.get_visible_mask", "numpy.linalg.inv", "PIL.Image.fromarray", "dataset.utils.encode_binary_labels.astype"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_map_masks", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_object_masks", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_sensor_transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.get_occlusion_mask", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.encode_binary_labels", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.get_visible_mask"], ["", "", "def", "process_sample_data", "(", "nuscenes", ",", "map_data", ",", "sample_data", ",", "lidar", ",", "config", ")", ":", "\n", "\n", "# Render static road geometry masks", "\n", "    ", "map_masks", "=", "nusc_utils", ".", "get_map_masks", "(", "nuscenes", ",", "\n", "map_data", ",", "\n", "sample_data", ",", "\n", "config", ".", "map_extents", ",", "\n", "config", ".", "map_resolution", ")", "\n", "\n", "# Render dynamic object masks", "\n", "obj_masks", "=", "nusc_utils", ".", "get_object_masks", "(", "nuscenes", ",", "\n", "sample_data", ",", "\n", "config", ".", "map_extents", ",", "\n", "config", ".", "map_resolution", ")", "\n", "masks", "=", "np", ".", "concatenate", "(", "[", "map_masks", ",", "obj_masks", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Ignore regions of the BEV which are outside the image", "\n", "sensor", "=", "nuscenes", ".", "get", "(", "'calibrated_sensor'", ",", "\n", "sample_data", "[", "'calibrated_sensor_token'", "]", ")", "\n", "intrinsics", "=", "np", ".", "array", "(", "sensor", "[", "'camera_intrinsic'", "]", ")", "\n", "masks", "[", "-", "1", "]", "|=", "~", "get_visible_mask", "(", "intrinsics", ",", "sample_data", "[", "'width'", "]", ",", "\n", "config", ".", "map_extents", ",", "config", ".", "map_resolution", ")", "\n", "\n", "# Transform lidar points into camera coordinates", "\n", "cam_transform", "=", "nusc_utils", ".", "get_sensor_transform", "(", "nuscenes", ",", "sample_data", ")", "\n", "cam_points", "=", "transform", "(", "np", ".", "linalg", ".", "inv", "(", "cam_transform", ")", ",", "lidar", ")", "\n", "masks", "[", "-", "1", "]", "|=", "get_occlusion_mask", "(", "cam_points", ",", "config", ".", "map_extents", ",", "\n", "config", ".", "map_resolution", ")", "\n", "\n", "# Encode masks as integer bitmask", "\n", "labels", "=", "encode_binary_labels", "(", "masks", ")", "\n", "\n", "# Save outputs to disk", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "output_root", ",", "\n", "sample_data", "[", "'token'", "]", "+", "'.png'", ")", "\n", "Image", ".", "fromarray", "(", "labels", ".", "astype", "(", "np", ".", "int32", ")", ",", "mode", "=", "'I'", ")", ".", "save", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.make_nuscenes_labels.load_map_data": [[88, 122], ["nuscenes.map_expansion.map_api.NuScenesMap", "collections.OrderedDict", "getattr", "list", "shapely.strtree.STRtree", "nuscenes.map_expansion.map_api.NuScenesMap.extract_polygon", "nuscenes.map_expansion.map_api.NuScenesMap.extract_polygon", "list.append", "list.append"], "function", ["None"], ["", "def", "load_map_data", "(", "dataroot", ",", "location", ")", ":", "\n", "\n", "# Load the NuScenes map object", "\n", "    ", "nusc_map", "=", "NuScenesMap", "(", "dataroot", ",", "location", ")", "\n", "\n", "map_data", "=", "OrderedDict", "(", ")", "\n", "for", "layer", "in", "nusc_utils", ".", "STATIC_CLASSES", ":", "\n", "\n", "# Retrieve all data associated with the current layer", "\n", "        ", "records", "=", "getattr", "(", "nusc_map", ",", "layer", ")", "\n", "polygons", "=", "list", "(", ")", "\n", "\n", "# Drivable area records can contain multiple polygons", "\n", "if", "layer", "==", "'drivable_area'", ":", "\n", "            ", "for", "record", "in", "records", ":", "\n", "\n", "# Convert each entry in the record into a shapely object", "\n", "                ", "for", "token", "in", "record", "[", "'polygon_tokens'", "]", ":", "\n", "                    ", "poly", "=", "nusc_map", ".", "extract_polygon", "(", "token", ")", "\n", "if", "poly", ".", "is_valid", ":", "\n", "                        ", "polygons", ".", "append", "(", "poly", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "record", "in", "records", ":", "\n", "\n", "# Convert each entry in the record into a shapely object", "\n", "                ", "poly", "=", "nusc_map", ".", "extract_polygon", "(", "record", "[", "'polygon_token'", "]", ")", "\n", "if", "poly", ".", "is_valid", ":", "\n", "                    ", "polygons", ".", "append", "(", "poly", ")", "\n", "\n", "\n", "# Store as an R-Tree for fast intersection queries", "\n", "", "", "", "map_data", "[", "layer", "]", "=", "STRtree", "(", "polygons", ")", "\n", "\n", "", "return", "map_data", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_batch_size": [[23, 25], ["tensorflow.cast", "tensorflow.shape"], "function", ["None"], ["def", "get_batch_size", "(", "inputs", ")", ":", "\n", "    ", "return", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "", "def", "flatten", "(", "tensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.flatten": [[25, 34], ["tensorflow.reshape", "tensor.get_shape().as_list", "tensor.get_shape"], "function", ["None"], ["", "def", "flatten", "(", "tensor", ")", ":", "\n", "    ", "'''\n    Flatten the last N-1 dimensions of a tensor only keeping the first one, which is typically \n    equal to the number of batches. \n    Example: A tensor of shape [10, 200, 200, 32] becomes [10, 1280000] \n    '''", "\n", "#    rhs_dim = get_rhs_dim(tensor)", "\n", "rhs_dim", "=", "tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "return", "tf", ".", "reshape", "(", "tensor", ",", "[", "-", "1", ",", "rhs_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_rhs_dim": [[35, 42], ["tensor.get_shape().as_list", "numpy.prod", "tensor.get_shape"], "function", ["None"], ["", "def", "get_rhs_dim", "(", "tensor", ")", ":", "\n", "    ", "'''\n    Get the multiplied dimensions of the last N-1 dimensions of a tensor. \n    I.e. an input tensor with shape [10, 200, 200, 32] leads to an output of 1280000 \n    '''", "\n", "shape", "=", "tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "return", "np", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_all_stats": [[44, 79], ["annotation.astype.astype", "segmentation.astype.astype", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.sum", "numpy.sum", "numpy.float32", "numpy.float32", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.array", "numpy.sum", "numpy.isclose", "numpy.isclose", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not"], "function", ["None"], ["", "def", "get_all_stats", "(", "annotation", ",", "segmentation", ",", "tot_mask", ",", "mask_iou", "=", "True", ")", ":", "\n", "\n", "    ", "void_pixels", "=", "1", "-", "tot_mask", "\n", "\n", "#    annotation = annotation.astype(np.bool)& void_pixels", "\n", "#    segmentation = segmentation.astype(np.bool)& void_pixels", "\n", "annotation", "=", "annotation", ".", "astype", "(", "np", ".", "bool", ")", "\n", "segmentation", "=", "segmentation", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "tp", "=", "np", ".", "float32", "(", "np", ".", "sum", "(", "(", "segmentation", "&", "annotation", ")", "&", "void_pixels", ")", ")", "\n", "fp", "=", "np", ".", "float32", "(", "np", ".", "sum", "(", "(", "segmentation", "&", "np", ".", "logical_not", "(", "annotation", ")", ")", "&", "void_pixels", ")", ")", "\n", "\n", "fn", "=", "np", ".", "float32", "(", "np", ".", "sum", "(", "(", "np", ".", "logical_not", "(", "segmentation", ")", "&", "annotation", ")", "&", "void_pixels", ")", ")", "\n", "tn", "=", "np", ".", "float32", "(", "np", ".", "sum", "(", "(", "np", ".", "logical_not", "(", "segmentation", ")", "&", "np", ".", "logical_not", "(", "annotation", ")", ")", "&", "void_pixels", ")", ")", "\n", "\n", "gt_exists", "=", "np", ".", "float32", "(", "np", ".", "sum", "(", "annotation", "&", "void_pixels", ")", ">", "0", ")", "\n", "\n", "\n", "inters", "=", "np", ".", "sum", "(", "(", "segmentation", "&", "annotation", ")", "&", "void_pixels", ")", "\n", "union", "=", "np", ".", "sum", "(", "(", "segmentation", "|", "annotation", ")", "&", "void_pixels", ")", "\n", "\n", "j", "=", "inters", "/", "union", "\n", "\n", "#    logging.error('J '  + str(j))", "\n", "#    logging.error('UNION '  + str(np.isclose(union, 0)))", "\n", "if", "j", ".", "ndim", "==", "0", ":", "\n", "        ", "j", "=", "1", "if", "np", ".", "isclose", "(", "union", ",", "0", ")", "else", "j", "\n", "", "else", ":", "\n", "        ", "j", "[", "np", ".", "isclose", "(", "union", ",", "0", ")", "]", "=", "1", "\n", "\n", "", "j", "=", "np", ".", "float32", "(", "j", ")", "\n", "\n", "#    logging.error('J '  + str(j))", "\n", "union", "=", "np", ".", "float32", "(", "union", ")", "\n", "return", "np", ".", "array", "(", "[", "j", ",", "union", ",", "tp", ",", "fp", ",", "fn", ",", "tn", ",", "gt_exists", "]", ")", ",", "void_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_confusion": [[81, 103], ["annotation.astype.astype", "segmentation.astype.astype", "range", "numpy.array", "range", "temp_confuse.append", "whole_confuse.append", "temp_confuse.append", "numpy.float32", "numpy.squeeze", "numpy.clip", "numpy.float32", "numpy.sum", "numpy.array", "numpy.sum", "numpy.sum", "numpy.float32"], "function", ["None"], ["", "def", "get_confusion", "(", "exp_config", ",", "annotation", ",", "segmentation", ",", "tot_mask", ",", "mask_iou", "=", "True", ")", ":", "\n", "\n", "    ", "void_pixels", "=", "1", "-", "tot_mask", "\n", "bg", "=", "(", "1", "-", "np", ".", "clip", "(", "np", ".", "sum", "(", "np", ".", "float32", "(", "annotation", "[", "...", ",", ":", "exp_config", ".", "num_object_classes", "]", ")", ",", "axis", "=", "-", "1", ")", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "#    annotation = annotation.astype(np.bool)& void_pixels", "\n", "#    segmentation = segmentation.astype(np.bool)& void_pixels", "\n", "annotation", "=", "annotation", ".", "astype", "(", "np", ".", "bool", ")", "\n", "segmentation", "=", "segmentation", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "whole_confuse", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "exp_config", ".", "num_object_classes", "+", "1", ")", ":", "\n", "        ", "temp_confuse", "=", "[", "]", "\n", "cur_est", "=", "segmentation", "[", "...", ",", "k", "]", "\n", "for", "m", "in", "range", "(", "exp_config", ".", "num_object_classes", ")", ":", "\n", "            ", "temp_confuse", ".", "append", "(", "np", ".", "float32", "(", "np", ".", "sum", "(", "(", "cur_est", "&", "annotation", "[", "...", ",", "m", "]", ")", "&", "void_pixels", ")", ")", ")", "\n", "\n", "", "temp_confuse", ".", "append", "(", "np", ".", "float32", "(", "np", ".", "sum", "(", "(", "cur_est", "&", "bg", ")", "&", "void_pixels", ")", ")", ")", "\n", "\n", "whole_confuse", ".", "append", "(", "np", ".", "squeeze", "(", "np", ".", "array", "(", "temp_confuse", ")", ")", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "whole_confuse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_project_to_image": [[106, 139], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.float32", "numpy.stack", "calib_ref.project_ego_to_image", "cv2.getPerspectiveTransform", "numpy.float32", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.copy"], "function", ["None"], ["", "def", "argoverse_project_to_image", "(", "exp_config", ",", "bev_image", ",", "calib_ref", ")", ":", "\n", "\n", "    ", "sample_point1", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "bev_image", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "2", "*", "bev_image", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "0", "]", ",", "np", ".", "float32", ")", "\n", "sample_point2", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "bev_image", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "2", "*", "bev_image", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "0", "]", ",", "np", ".", "float32", ")", "\n", "sample_point3", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "bev_image", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "bev_image", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "0", "]", ",", "np", ".", "float32", ")", "\n", "sample_point4", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "bev_image", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "bev_image", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "0", "]", ",", "np", ".", "float32", ")", "\n", "\n", "sample_points", "=", "np", ".", "stack", "(", "[", "sample_point1", ",", "sample_point2", ",", "sample_point3", ",", "sample_point4", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "source_points", "=", "np", ".", "float32", "(", "np", ".", "copy", "(", "sample_points", "[", "0", ":", "2", ",", ":", "]", ")", ".", "T", ")", "\n", "\n", "sample_points", "[", "1", ",", ":", "]", "=", "bev_image", ".", "shape", "[", "0", "]", "-", "sample_points", "[", "1", ",", ":", "]", "\n", "\n", "sample_points", "[", "0", ",", ":", "]", "=", "-", "(", "sample_points", "[", "0", ",", ":", "]", "-", "bev_image", ".", "shape", "[", "1", "]", "/", "2", ")", "*", "exp_config", ".", "resolution", "\n", "sample_points", "[", "1", ",", ":", "]", "=", "sample_points", "[", "1", ",", ":", "]", "*", "exp_config", ".", "resolution", "\n", "\n", "# sample_points[2,:]", "\n", "sample_points", "=", "np", ".", "stack", "(", "[", "sample_points", "[", "1", ",", ":", "]", ",", "sample_points", "[", "0", ",", ":", "]", ",", "sample_points", "[", "2", ",", ":", "]", "]", ")", "\n", "\n", "cor_points", "=", "calib_ref", ".", "project_ego_to_image", "(", "sample_points", ".", "T", ")", "\n", "\n", "\n", "# logging.error('COR POINTS ' + str(cor_points))", "\n", "\n", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "source_points", ",", "np", ".", "float32", "(", "cor_points", "[", ":", ",", ":", "2", "]", ")", ")", "\n", "# modified_transform=estimated_transform", "\n", "# total_image_size = (1920,1200)", "\n", "# warped_label = cv2.warpPerspective(bev_image,modified_transform,total_image_size,flags=cv2.INTER_LINEAR)", "\n", "\n", "\n", "\n", "return", "estimated_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_project_to_ground": [[141, 253], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.float32", "numpy.copy", "numpy.float32", "numpy.zeros", "numpy.float32", "numpy.float32", "numpy.copy", "cv2.getPerspectiveTransform", "numpy.eye", "numpy.dot", "cv2.warpPerspective", "cv2.warpPerspective", "numpy.copy", "numpy.float32", "numpy.ones", "numpy.matmul", "numpy.matmul", "calib_ref.project_ego_to_cam", "numpy.zeros", "numpy.float32", "numpy.float32", "numpy.copy", "cv2.getPerspectiveTransform", "numpy.eye", "numpy.dot", "cv2.warpPerspective", "cv2.warpPerspective", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.abs", "calib_ref.project_image_to_cam", "numpy.abs", "calib_cur.project_image_to_ego", "numpy.linalg.inv"], "function", ["None"], ["", "def", "argoverse_project_to_ground", "(", "exp_config", ",", "image1", ",", "label", ",", "calib_ref", ",", "pose_ref", ",", "calib_cur", ",", "pose_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "False", ")", ":", "\n", "# extents = exp_config.extents", "\n", "# resolution = exp_config.resolution", "\n", "# image1 = image1*vis_mask", "\n", "#    image2 = image2*vis_mask", "\n", "\n", "# covered_region = np.ones_like(image1) * vis_mask", "\n", "\n", "    ", "extents", "=", "exp_config", ".", "extents", "\n", "resolution", "=", "exp_config", ".", "resolution", "\n", "\n", "\n", "\n", "total_image_size", "=", "exp_config", ".", "total_image_size", "\n", "\n", "# Get rasterised map", "\n", "\n", "sample_point1", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point2", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point3", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point4", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "\n", "base_sample_points", "=", "np", ".", "stack", "(", "[", "sample_point1", ",", "sample_point2", ",", "sample_point3", ",", "sample_point4", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "source_points", "=", "np", ".", "float32", "(", "base_sample_points", "[", "0", ":", "2", ",", ":", "]", ".", "T", ")", "\n", "\n", "\n", "\n", "if", "reference_frame", ":", "\n", "        ", "camera_height", "=", "calib_ref", ".", "T", "[", "1", "]", "\n", "sample_points", "=", "np", ".", "copy", "(", "base_sample_points", ")", "\n", "sample_points", "[", "-", "1", ",", ":", "]", "=", "cam_intrinsic", "[", "0", ",", "0", "]", "*", "camera_height", "/", "(", "np", ".", "abs", "(", "base_sample_points", "[", "1", ",", ":", "]", "-", "cam_intrinsic", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "sample_points", "=", "sample_points", ".", "T", "\n", "#First project image to ego    ", "\n", "cor_cam_points", "=", "np", ".", "float32", "(", "calib_ref", ".", "project_image_to_cam", "(", "sample_points", ")", ")", "\n", "\n", "#        to_estimate_cor_cam_points = cor_cam_points[:,:2]", "\n", "\n", "to_estimate_cor_cam_points", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ",", "np", ".", "float32", ")", "\n", "to_estimate_cor_cam_points", "[", ":", ",", "0", "]", "=", "np", ".", "float32", "(", "cor_cam_points", "[", ":", ",", "0", "]", ")", "\n", "to_estimate_cor_cam_points", "[", ":", ",", "1", "]", "=", "np", ".", "float32", "(", "cor_cam_points", "[", ":", ",", "2", "]", ")", "\n", "\n", "corresponding_points", "=", "np", ".", "copy", "(", "to_estimate_cor_cam_points", ")", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "(", "corresponding_points", "[", ":", ",", "0", "]", "+", "extents", "[", "1", "]", ")", "/", "resolution", "\n", "my_ys", "=", "corresponding_points", "[", ":", ",", "1", "]", "\n", "my_ys", "=", "my_ys", "-", "extents", "[", "2", "]", "\n", "my_ys", "=", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "-", "my_ys", "/", "resolution", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "my_ys", "\n", "\n", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "source_points", ",", "corresponding_points", ")", "\n", "\n", "modified_transform", "=", "estimated_transform", "\n", "translation_matrix", "=", "np", ".", "eye", "(", "3", ")", "\n", "\n", "extra_space", "=", "exp_config", ".", "extra_space", "\n", "\n", "translation_matrix", "[", "0", ",", "-", "1", "]", "=", "extra_space", "[", "0", "]", "/", "2", "\n", "translation_matrix", "[", "1", ",", "-", "1", "]", "=", "extra_space", "[", "1", "]", "/", "2", "\n", "\n", "modified_transform", "=", "np", ".", "dot", "(", "translation_matrix", ",", "modified_transform", ")", "\n", "warped_image_ref", "=", "cv2", ".", "warpPerspective", "(", "image1", ",", "modified_transform", ",", "total_image_size", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# warped_covered = cv2.warpPerspective(covered_region,modified_transform,total_image_size,flags=cv2.INTER_LINEAR)", "\n", "warped_label", "=", "cv2", ".", "warpPerspective", "(", "label", ",", "modified_transform", ",", "total_image_size", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "warped_image_ref", ",", "warped_label", ",", "modified_transform", "\n", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "camera_height", "=", "calib_ref", ".", "T", "[", "1", "]", "\n", "sample_points", "=", "np", ".", "copy", "(", "base_sample_points", ")", "\n", "sample_points", "[", "-", "1", ",", ":", "]", "=", "cam_intrinsic", "[", "0", ",", "0", "]", "*", "camera_height", "/", "(", "np", ".", "abs", "(", "base_sample_points", "[", "1", ",", ":", "]", "-", "cam_intrinsic", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "sample_points", "=", "sample_points", ".", "T", "\n", "#First project image to ego    ", "\n", "cor_ego_points", "=", "np", ".", "float32", "(", "calib_cur", ".", "project_image_to_ego", "(", "sample_points", ")", ")", "\n", "temp_points", "=", "np", ".", "ones", "(", "(", "4", ",", "4", ")", ",", "np", ".", "float32", ")", "\n", "temp_points", "[", ":", ",", ":", "3", "]", "=", "cor_ego_points", "\n", "cor_map_points", "=", "np", ".", "matmul", "(", "pose_cur", ",", "temp_points", ".", "T", ")", "\n", "\n", "cor_new_ego_points", "=", "np", ".", "matmul", "(", "np", ".", "linalg", ".", "inv", "(", "pose_ref", ")", ",", "cor_map_points", ")", "\n", "\n", "cor_cam_points", "=", "calib_ref", ".", "project_ego_to_cam", "(", "cor_new_ego_points", ".", "T", "[", ":", ",", ":", "3", "]", ")", "\n", "\n", "to_estimate_cor_cam_points", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ",", "np", ".", "float32", ")", "\n", "to_estimate_cor_cam_points", "[", ":", ",", "0", "]", "=", "np", ".", "float32", "(", "cor_cam_points", "[", ":", ",", "0", "]", ")", "\n", "to_estimate_cor_cam_points", "[", ":", ",", "1", "]", "=", "np", ".", "float32", "(", "cor_cam_points", "[", ":", ",", "2", "]", ")", "\n", "\n", "corresponding_points", "=", "np", ".", "copy", "(", "to_estimate_cor_cam_points", ")", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "(", "corresponding_points", "[", ":", ",", "0", "]", "+", "extents", "[", "1", "]", ")", "/", "resolution", "\n", "my_ys", "=", "corresponding_points", "[", ":", ",", "1", "]", "\n", "my_ys", "=", "my_ys", "-", "extents", "[", "2", "]", "\n", "my_ys", "=", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "-", "my_ys", "/", "resolution", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "my_ys", "\n", "\n", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "source_points", ",", "corresponding_points", ")", "\n", "\n", "modified_transform", "=", "estimated_transform", "\n", "translation_matrix", "=", "np", ".", "eye", "(", "3", ")", "\n", "\n", "extra_space", "=", "exp_config", ".", "extra_space", "\n", "\n", "translation_matrix", "[", "0", ",", "-", "1", "]", "=", "extra_space", "[", "0", "]", "/", "2", "\n", "translation_matrix", "[", "1", ",", "-", "1", "]", "=", "extra_space", "[", "1", "]", "/", "2", "\n", "\n", "modified_transform", "=", "np", ".", "dot", "(", "translation_matrix", ",", "modified_transform", ")", "\n", "warped_image_dest", "=", "cv2", ".", "warpPerspective", "(", "image1", ",", "modified_transform", ",", "total_image_size", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# warped_covered = cv2.warpPerspective(covered_region,modified_transform,total_image_size,flags=cv2.INTER_LINEAR)", "\n", "warped_label", "=", "cv2", ".", "warpPerspective", "(", "label", ",", "modified_transform", ",", "total_image_size", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "warped_image_dest", ",", "warped_label", ",", "modified_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_tensorflow_project_to_ground": [[256, 352], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.float32", "numpy.copy", "numpy.float32", "numpy.zeros", "numpy.float32", "numpy.float32", "numpy.copy", "cv2.getPerspectiveTransform", "numpy.copy", "numpy.float32", "numpy.ones", "numpy.matmul", "numpy.matmul", "calib_ref.project_ego_to_cam", "numpy.zeros", "numpy.float32", "numpy.float32", "numpy.copy", "cv2.getPerspectiveTransform", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.abs", "calib_ref.project_image_to_cam", "numpy.abs", "calib_cur.project_image_to_ego", "numpy.linalg.inv"], "function", ["None"], ["", "", "def", "argoverse_tensorflow_project_to_ground", "(", "exp_config", ",", "image1", ",", "source_image1", ",", "pose_ref", ",", "calib_ref", ",", "pose_cur", ",", "calib_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "False", ")", ":", "\n", "\n", "    ", "extents", "=", "exp_config", ".", "project_extents", "\n", "resolution", "=", "exp_config", ".", "project_resolution", "\n", "\n", "extra_space", "=", "exp_config", ".", "project_extra_space", "\n", "\n", "\n", "sample_point1", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point2", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point3", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point4", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "\n", "base_sample_points", "=", "np", ".", "stack", "(", "[", "sample_point1", ",", "sample_point2", ",", "sample_point3", ",", "sample_point4", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "source_sample_point1", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "source_image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "source_image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "source_sample_point2", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "source_image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "source_image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "source_sample_point3", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "source_image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "source_image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "source_sample_point4", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "source_image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "source_image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "\n", "source_base_sample_points", "=", "np", ".", "stack", "(", "[", "source_sample_point1", ",", "source_sample_point2", ",", "source_sample_point3", ",", "source_sample_point4", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "source_points", "=", "np", ".", "float32", "(", "source_base_sample_points", "[", "0", ":", "2", ",", ":", "]", ".", "T", ")", "\n", "\n", "\n", "if", "reference_frame", ":", "\n", "        ", "camera_height", "=", "calib_ref", ".", "T", "[", "1", "]", "\n", "sample_points", "=", "np", ".", "copy", "(", "base_sample_points", ")", "\n", "sample_points", "[", "-", "1", ",", ":", "]", "=", "cam_intrinsic", "[", "0", ",", "0", "]", "*", "camera_height", "/", "(", "np", ".", "abs", "(", "base_sample_points", "[", "1", ",", ":", "]", "-", "cam_intrinsic", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "sample_points", "=", "sample_points", ".", "T", "\n", "#First project image to ego    ", "\n", "cor_cam_points", "=", "np", ".", "float32", "(", "calib_ref", ".", "project_image_to_cam", "(", "sample_points", ")", ")", "\n", "\n", "#        to_estimate_cor_cam_points = cor_cam_points[:,:2]", "\n", "\n", "to_estimate_cor_cam_points", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ",", "np", ".", "float32", ")", "\n", "to_estimate_cor_cam_points", "[", ":", ",", "0", "]", "=", "np", ".", "float32", "(", "cor_cam_points", "[", ":", ",", "0", "]", ")", "\n", "to_estimate_cor_cam_points", "[", ":", ",", "1", "]", "=", "np", ".", "float32", "(", "cor_cam_points", "[", ":", ",", "2", "]", ")", "\n", "\n", "corresponding_points", "=", "np", ".", "copy", "(", "to_estimate_cor_cam_points", ")", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "(", "corresponding_points", "[", ":", ",", "0", "]", "+", "extents", "[", "1", "]", ")", "/", "resolution", "\n", "my_ys", "=", "corresponding_points", "[", ":", ",", "1", "]", "\n", "my_ys", "=", "my_ys", "-", "extents", "[", "2", "]", "\n", "my_ys", "=", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "-", "my_ys", "/", "resolution", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "my_ys", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "corresponding_points", "[", ":", ",", "0", "]", "+", "extra_space", "[", "0", "]", "/", "2", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "corresponding_points", "[", ":", ",", "1", "]", "+", "extra_space", "[", "1", "]", "/", "2", "\n", "\n", "\n", "#        ", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "corresponding_points", ",", "source_points", ")", "\n", "\n", "#        warped_image_ref = cv2.warpPerspective(image1,modified_transform,(400,400))", "\n", "\n", "return", "estimated_transform", "\n", "\n", "'''\n        HANDLE SECOND IMAGE\n        '''", "\n", "\n", "", "else", ":", "\n", "        ", "camera_height", "=", "calib_ref", ".", "T", "[", "1", "]", "\n", "sample_points", "=", "np", ".", "copy", "(", "base_sample_points", ")", "\n", "sample_points", "[", "-", "1", ",", ":", "]", "=", "cam_intrinsic", "[", "0", ",", "0", "]", "*", "camera_height", "/", "(", "np", ".", "abs", "(", "base_sample_points", "[", "1", ",", ":", "]", "-", "cam_intrinsic", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "sample_points", "=", "sample_points", ".", "T", "\n", "#First project image to ego    ", "\n", "cor_ego_points", "=", "np", ".", "float32", "(", "calib_cur", ".", "project_image_to_ego", "(", "sample_points", ")", ")", "\n", "temp_points", "=", "np", ".", "ones", "(", "(", "4", ",", "4", ")", ",", "np", ".", "float32", ")", "\n", "temp_points", "[", ":", ",", ":", "3", "]", "=", "cor_ego_points", "\n", "cor_map_points", "=", "np", ".", "matmul", "(", "pose_cur", ",", "temp_points", ".", "T", ")", "\n", "\n", "cor_new_ego_points", "=", "np", ".", "matmul", "(", "np", ".", "linalg", ".", "inv", "(", "pose_ref", ")", ",", "cor_map_points", ")", "\n", "\n", "cor_cam_points", "=", "calib_ref", ".", "project_ego_to_cam", "(", "cor_new_ego_points", ".", "T", "[", ":", ",", ":", "3", "]", ")", "\n", "\n", "to_estimate_cor_cam_points", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ",", "np", ".", "float32", ")", "\n", "to_estimate_cor_cam_points", "[", ":", ",", "0", "]", "=", "np", ".", "float32", "(", "cor_cam_points", "[", ":", ",", "0", "]", ")", "\n", "to_estimate_cor_cam_points", "[", ":", ",", "1", "]", "=", "np", ".", "float32", "(", "cor_cam_points", "[", ":", ",", "2", "]", ")", "\n", "\n", "corresponding_points", "=", "np", ".", "copy", "(", "to_estimate_cor_cam_points", ")", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "(", "corresponding_points", "[", ":", ",", "0", "]", "+", "extents", "[", "1", "]", ")", "/", "resolution", "\n", "my_ys", "=", "corresponding_points", "[", ":", ",", "1", "]", "\n", "my_ys", "=", "my_ys", "-", "extents", "[", "2", "]", "\n", "my_ys", "=", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "-", "my_ys", "/", "resolution", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "my_ys", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "corresponding_points", "[", ":", ",", "0", "]", "+", "extra_space", "[", "0", "]", "/", "2", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "corresponding_points", "[", ":", ",", "1", "]", "+", "extra_space", "[", "1", "]", "/", "2", "\n", "\n", "#        ", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "corresponding_points", ",", "source_points", ")", "\n", "#        ", "\n", "\n", "\n", "return", "estimated_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_to_ground": [[355, 473], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.float32", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.array().reshape", "numpy.array().reshape", "numpy.linalg.inv", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.float32", "cv2.getPerspectiveTransform", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.float32", "cv2.getPerspectiveTransform", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "numpy.array", "numpy.array", "pyquaternion.Quaternion", "numpy.array", "numpy.array", "numpy.abs", "numpy.dot", "numpy.abs", "numpy.dot", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "tensorflow_project_to_ground", "(", "exp_config", ",", "image1", ",", "source_image1", ",", "pose1", ",", "cs1", ",", "pose2", ",", "cs2", ",", "cam_intrinsic", ",", "reference_frame", "=", "False", ",", "grid", "=", "False", ")", ":", "\n", "\n", "    ", "extents", "=", "exp_config", ".", "project_extents", "\n", "resolution", "=", "exp_config", ".", "project_resolution", "\n", "\n", "extra_space", "=", "exp_config", ".", "project_extra_space", "\n", "\n", "sample_point1", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point2", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point3", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point4", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "\n", "base_sample_points", "=", "np", ".", "stack", "(", "[", "sample_point1", ",", "sample_point2", ",", "sample_point3", ",", "sample_point4", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "source_sample_point1", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "source_image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "source_image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "source_sample_point2", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "source_image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "source_image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "source_sample_point3", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "source_image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "source_image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "source_sample_point4", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "source_image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "source_image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "\n", "source_base_sample_points", "=", "np", ".", "stack", "(", "[", "source_sample_point1", ",", "source_sample_point2", ",", "source_sample_point3", ",", "source_sample_point4", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "source_points", "=", "np", ".", "float32", "(", "source_base_sample_points", "[", "0", ":", "2", ",", ":", "]", ".", "T", ")", "\n", "\n", "inverse_intrinsic", "=", "np", ".", "linalg", ".", "inv", "(", "cam_intrinsic", ")", "\n", "\n", "pr", "=", "Quaternion", "(", "pose1", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "pr2", "=", "Quaternion", "(", "pose2", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "\n", "inverse_pr2", "=", "np", ".", "linalg", ".", "inv", "(", "pr2", ")", "\n", "pt", "=", "np", ".", "array", "(", "pose1", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "pt2", "=", "np", ".", "array", "(", "pose2", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "cr", "=", "Quaternion", "(", "cs1", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "\n", "inverse_cr", "=", "np", ".", "linalg", ".", "inv", "(", "cr", ")", "\n", "\n", "\n", "ct", "=", "np", ".", "array", "(", "cs1", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "ct2", "=", "np", ".", "array", "(", "cs2", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "#    coef_matrix = np.dot(inverse_cr,inverse_intrinsic)", "\n", "coef_matrix", "=", "np", ".", "dot", "(", "inverse_cr", ",", "inverse_intrinsic", ")", "\n", "trans1", "=", "ct", "\n", "\n", "\n", "trans2", "=", "pt", "\n", "if", "reference_frame", ":", "\n", "        ", "sample_points", "=", "base_sample_points", "*", "cam_intrinsic", "[", "0", ",", "0", "]", "*", "np", ".", "array", "(", "cs1", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "[", "-", "1", "]", "/", "(", "np", ".", "abs", "(", "base_sample_points", "[", "1", ",", ":", "]", "-", "cam_intrinsic", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "\n", "\n", "\n", "prenorm_corresponding_points", "=", "np", ".", "dot", "(", "coef_matrix", ",", "sample_points", ")", "+", "trans1", "\n", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "=", "-", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "\n", "corresponding_points", "=", "prenorm_corresponding_points", "[", "0", ":", "2", ",", ":", "]", "\n", "#    corresponding_points[2,:] = 0.0", "\n", "\n", "\n", "corresponding_points", "=", "np", ".", "float32", "(", "corresponding_points", ".", "T", ")", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "(", "corresponding_points", "[", ":", ",", "0", "]", "+", "extents", "[", "1", "]", ")", "/", "resolution", "\n", "my_ys", "=", "corresponding_points", "[", ":", ",", "1", "]", "\n", "my_ys", "=", "my_ys", "-", "extents", "[", "2", "]", "\n", "my_ys", "=", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "-", "my_ys", "/", "resolution", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "my_ys", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "corresponding_points", "[", ":", ",", "0", "]", "+", "extra_space", "[", "0", "]", "/", "2", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "corresponding_points", "[", ":", ",", "1", "]", "+", "extra_space", "[", "1", "]", "/", "2", "\n", "\n", "\n", "#        ", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "corresponding_points", ",", "source_points", ")", "\n", "\n", "#        warped_image_ref = cv2.warpPerspective(image1,modified_transform,(400,400))", "\n", "\n", "return", "estimated_transform", "\n", "\n", "'''\n        HANDLE SECOND IMAGE\n        '''", "\n", "\n", "", "else", ":", "\n", "        ", "sample_points", "=", "base_sample_points", "*", "cam_intrinsic", "[", "0", ",", "0", "]", "*", "np", ".", "array", "(", "cs2", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "[", "-", "1", "]", "/", "(", "np", ".", "abs", "(", "base_sample_points", "[", "1", ",", ":", "]", "-", "cam_intrinsic", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "\n", "coef_matrix", "=", "np", ".", "dot", "(", "inverse_pr2", ",", "np", ".", "dot", "(", "inverse_cr", ",", "inverse_intrinsic", ")", ")", "\n", "\n", "trans1", "=", "np", ".", "dot", "(", "inverse_pr2", ",", "ct2", ")", "\n", "\n", "trans2", "=", "pt2", "-", "pt", "\n", "\n", "prenorm_corresponding_points", "=", "np", ".", "dot", "(", "pr", ",", "np", ".", "dot", "(", "coef_matrix", ",", "sample_points", ")", "+", "trans1", "+", "trans2", ")", "\n", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "=", "-", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "\n", "corresponding_points", "=", "prenorm_corresponding_points", "[", "0", ":", "2", ",", ":", "]", "\n", "#    corresponding_points[2,:] = 0.0", "\n", "\n", "\n", "\n", "corresponding_points", "=", "np", ".", "float32", "(", "corresponding_points", ".", "T", ")", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "(", "corresponding_points", "[", ":", ",", "0", "]", "+", "extents", "[", "1", "]", ")", "/", "resolution", "\n", "my_ys", "=", "corresponding_points", "[", ":", ",", "1", "]", "\n", "my_ys", "=", "my_ys", "-", "extents", "[", "2", "]", "\n", "my_ys", "=", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "-", "my_ys", "/", "resolution", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "my_ys", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "corresponding_points", "[", ":", ",", "0", "]", "+", "extra_space", "[", "0", "]", "/", "2", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "corresponding_points", "[", ":", ",", "1", "]", "+", "extra_space", "[", "1", "]", "/", "2", "\n", "\n", "\n", "#        ", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "corresponding_points", ",", "source_points", ")", "\n", "#        ", "\n", "\n", "\n", "return", "estimated_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.project_to_ground": [[474, 622], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.float32", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.array().reshape", "numpy.array().reshape", "numpy.linalg.inv", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.ones_like", "numpy.float32", "cv2.getPerspectiveTransform", "numpy.copy", "numpy.eye", "numpy.dot", "cv2.warpPerspective", "cv2.warpPerspective", "cv2.warpPerspective", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.float32", "cv2.getPerspectiveTransform", "numpy.copy", "numpy.eye", "numpy.dot", "cv2.warpPerspective", "cv2.warpPerspective", "cv2.warpPerspective", "int", "int", "int", "int", "int", "int", "int", "int", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "numpy.array", "numpy.array", "pyquaternion.Quaternion", "numpy.array", "numpy.array", "numpy.abs", "numpy.dot", "numpy.abs", "numpy.dot", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "project_to_ground", "(", "exp_config", ",", "image1", ",", "label1", ",", "pose1", ",", "cs1", ",", "pose2", ",", "cs2", ",", "cam_intrinsic", ",", "vis_mask", ",", "reference_frame", "=", "False", ",", "grid", "=", "False", ")", ":", "\n", "\n", "    ", "image1", "=", "image1", "*", "vis_mask", "\n", "#    image2 = image2*vis_mask", "\n", "\n", "covered_region", "=", "np", ".", "ones_like", "(", "image1", ")", "*", "vis_mask", "\n", "\n", "sample_point1", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point2", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "7", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point3", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point4", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "\n", "base_sample_points", "=", "np", ".", "stack", "(", "[", "sample_point1", ",", "sample_point2", ",", "sample_point3", ",", "sample_point4", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "source_points", "=", "np", ".", "float32", "(", "base_sample_points", "[", "0", ":", "2", ",", ":", "]", ".", "T", ")", "\n", "\n", "inverse_intrinsic", "=", "np", ".", "linalg", ".", "inv", "(", "cam_intrinsic", ")", "\n", "\n", "pr", "=", "Quaternion", "(", "pose1", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "pr2", "=", "Quaternion", "(", "pose2", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "\n", "inverse_pr2", "=", "np", ".", "linalg", ".", "inv", "(", "pr2", ")", "\n", "pt", "=", "np", ".", "array", "(", "pose1", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "pt2", "=", "np", ".", "array", "(", "pose2", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "cr", "=", "Quaternion", "(", "cs1", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "\n", "inverse_cr", "=", "np", ".", "linalg", ".", "inv", "(", "cr", ")", "\n", "\n", "\n", "ct", "=", "np", ".", "array", "(", "cs1", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "ct2", "=", "np", ".", "array", "(", "cs2", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "#    coef_matrix = np.dot(inverse_cr,inverse_intrinsic)", "\n", "coef_matrix", "=", "np", ".", "dot", "(", "inverse_cr", ",", "inverse_intrinsic", ")", "\n", "trans1", "=", "ct", "\n", "\n", "\n", "trans2", "=", "pt", "\n", "\n", "total_image_size", "=", "exp_config", ".", "total_image_size", "\n", "\n", "if", "reference_frame", ":", "\n", "        ", "sample_points", "=", "base_sample_points", "*", "cam_intrinsic", "[", "0", ",", "0", "]", "*", "np", ".", "array", "(", "cs1", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "[", "-", "1", "]", "/", "(", "np", ".", "abs", "(", "base_sample_points", "[", "1", ",", ":", "]", "-", "cam_intrinsic", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "\n", "\n", "\n", "prenorm_corresponding_points", "=", "np", ".", "dot", "(", "coef_matrix", ",", "sample_points", ")", "+", "trans1", "\n", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "=", "-", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "\n", "corresponding_points", "=", "prenorm_corresponding_points", "[", "0", ":", "2", ",", ":", "]", "\n", "#    corresponding_points[2,:] = 0.0", "\n", "\n", "extents", "=", "exp_config", ".", "extents", "\n", "resolution", "=", "exp_config", ".", "resolution", "\n", "\n", "\n", "corresponding_points", "=", "np", ".", "float32", "(", "corresponding_points", ".", "T", ")", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "(", "corresponding_points", "[", ":", ",", "0", "]", "+", "extents", "[", "1", "]", ")", "/", "resolution", "\n", "my_ys", "=", "corresponding_points", "[", ":", ",", "1", "]", "\n", "my_ys", "=", "my_ys", "-", "extents", "[", "2", "]", "\n", "my_ys", "=", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "-", "my_ys", "/", "resolution", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "my_ys", "\n", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "source_points", ",", "corresponding_points", ")", "\n", "\n", "modified_transform", "=", "np", ".", "copy", "(", "estimated_transform", ")", "\n", "#        ", "\n", "translation_matrix", "=", "np", ".", "eye", "(", "3", ")", "\n", "\n", "extra_space", "=", "exp_config", ".", "extra_space", "\n", "\n", "translation_matrix", "[", "0", ",", "-", "1", "]", "=", "extra_space", "[", "0", "]", "/", "2", "\n", "translation_matrix", "[", "1", ",", "-", "1", "]", "=", "extra_space", "[", "1", "]", "/", "2", "\n", "\n", "modified_transform", "=", "np", ".", "dot", "(", "translation_matrix", ",", "modified_transform", ")", "\n", "\n", "#        logging.error('PROJECT TO GROUND REF TRANS FOUND')", "\n", "\n", "warped_image_ref", "=", "cv2", ".", "warpPerspective", "(", "image1", ",", "modified_transform", ",", "total_image_size", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "warped_covered", "=", "cv2", ".", "warpPerspective", "(", "covered_region", ",", "modified_transform", ",", "total_image_size", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "warped_label", "=", "cv2", ".", "warpPerspective", "(", "label1", ",", "modified_transform", ",", "total_image_size", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "\n", "#        logging.error('PROJECT TO GROUND REF WARPED')", "\n", "\n", "return", "warped_image_ref", ",", "warped_covered", ",", "warped_label", ",", "modified_transform", "\n", "\n", "'''\n        HANDLE SECOND IMAGE\n        '''", "\n", "\n", "", "else", ":", "\n", "        ", "sample_points", "=", "base_sample_points", "*", "cam_intrinsic", "[", "0", ",", "0", "]", "*", "np", ".", "array", "(", "cs2", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "[", "-", "1", "]", "/", "(", "np", ".", "abs", "(", "base_sample_points", "[", "1", ",", ":", "]", "-", "cam_intrinsic", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "\n", "coef_matrix", "=", "np", ".", "dot", "(", "inverse_pr2", ",", "np", ".", "dot", "(", "inverse_cr", ",", "inverse_intrinsic", ")", ")", "\n", "\n", "trans1", "=", "np", ".", "dot", "(", "inverse_pr2", ",", "ct2", ")", "\n", "\n", "trans2", "=", "pt2", "-", "pt", "\n", "\n", "prenorm_corresponding_points", "=", "np", ".", "dot", "(", "pr", ",", "np", ".", "dot", "(", "coef_matrix", ",", "sample_points", ")", "+", "trans1", "+", "trans2", ")", "\n", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "=", "-", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "\n", "corresponding_points", "=", "prenorm_corresponding_points", "[", "0", ":", "2", ",", ":", "]", "\n", "#    corresponding_points[2,:] = 0.0", "\n", "\n", "extents", "=", "exp_config", ".", "extents", "\n", "resolution", "=", "exp_config", ".", "resolution", "\n", "\n", "\n", "corresponding_points", "=", "np", ".", "float32", "(", "corresponding_points", ".", "T", ")", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "(", "corresponding_points", "[", ":", ",", "0", "]", "+", "extents", "[", "1", "]", ")", "/", "resolution", "\n", "my_ys", "=", "corresponding_points", "[", ":", ",", "1", "]", "\n", "my_ys", "=", "my_ys", "-", "extents", "[", "2", "]", "\n", "my_ys", "=", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "-", "my_ys", "/", "resolution", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "my_ys", "\n", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "source_points", ",", "corresponding_points", ")", "\n", "\n", "modified_transform", "=", "np", ".", "copy", "(", "estimated_transform", ")", "\n", "#        ", "\n", "translation_matrix", "=", "np", ".", "eye", "(", "3", ")", "\n", "\n", "\n", "extra_space", "=", "exp_config", ".", "extra_space", "\n", "\n", "translation_matrix", "[", "0", ",", "-", "1", "]", "=", "extra_space", "[", "0", "]", "/", "2", "\n", "translation_matrix", "[", "1", ",", "-", "1", "]", "=", "extra_space", "[", "1", "]", "/", "2", "\n", "\n", "modified_transform", "=", "np", ".", "dot", "(", "translation_matrix", ",", "modified_transform", ")", "\n", "\n", "\n", "#        logging.error('PROJECT TO GROUND DEST TRANS FOUND')", "\n", "\n", "\n", "warped_image_dest", "=", "cv2", ".", "warpPerspective", "(", "image1", ",", "modified_transform", ",", "total_image_size", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "warped_covered", "=", "cv2", ".", "warpPerspective", "(", "covered_region", ",", "modified_transform", ",", "total_image_size", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "warped_label", "=", "cv2", ".", "warpPerspective", "(", "label1", ",", "modified_transform", ",", "total_image_size", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "\n", "#        logging.error('PROJECT TO GROUND DEST WARPED')", "\n", "\n", "return", "warped_image_dest", ",", "warped_covered", ",", "warped_label", ",", "modified_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_bev_to_bev": [[623, 713], ["nusc.get", "nusc.get", "nusc.get", "nusc.get", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.copy", "numpy.copy", "numpy.linalg.inv", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.float32", "cv2.getPerspectiveTransform", "numpy.float32", "numpy.stack", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "numpy.array", "numpy.array", "numpy.dot", "numpy.ones_like"], "function", ["None"], ["", "", "def", "tensorflow_project_bev_to_bev", "(", "nusc", ",", "exp_config", ",", "cur_sample", ",", "next_sample", ")", ":", "\n", "\n", "    ", "camera_channel", "=", "'CAM_FRONT'", "\n", "cam_token_ref", "=", "next_sample", "[", "'data'", "]", "[", "camera_channel", "]", "\n", "cam_record_ref", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_ref", ")", "\n", "\n", "\n", "pose1", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "cam_record_ref", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "'''\n    '''", "\n", "cam_token_cur", "=", "cur_sample", "[", "'data'", "]", "[", "camera_channel", "]", "\n", "cam_record_cur", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_cur", ")", "\n", "\n", "pose2", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "cam_record_cur", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "'''\n    MAPS BEV IMAGE2 to BEV IMAGE1\n    '''", "\n", "\n", "extents", "=", "exp_config", ".", "extents", "\n", "resolution", "=", "exp_config", ".", "resolution", "\n", "extra_space", "=", "exp_config", ".", "extra_space", "\n", "\n", "image1", "=", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "total_image_size", "[", "1", "]", "/", "exp_config", ".", "feature_downsample", ")", ",", "int", "(", "exp_config", ".", "total_image_size", "[", "0", "]", "/", "exp_config", ".", "feature_downsample", ")", ")", ")", "\n", "\n", "sample_point1", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "3", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point2", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "3", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point3", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "5", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point4", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "5", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "\n", "base_sample_points", "=", "np", ".", "stack", "(", "[", "sample_point1", ",", "sample_point2", ",", "sample_point3", ",", "sample_point4", "]", ",", "axis", "=", "-", "1", ")", "\n", "source_points", "=", "np", ".", "copy", "(", "np", ".", "float32", "(", "base_sample_points", "[", "0", ":", "2", ",", ":", "]", ".", "T", ")", ")", "\n", "\n", "base_sample_points", "[", "0", ":", "2", ",", ":", "]", "=", "base_sample_points", "[", "0", ":", "2", ",", ":", "]", "-", "extra_space", "[", "0", "]", "/", "2", "/", "exp_config", ".", "feature_downsample", "\n", "\n", "my_x", "=", "base_sample_points", "[", "0", ",", ":", "]", "\n", "my_y", "=", "base_sample_points", "[", "1", ",", ":", "]", "\n", "\n", "my_x", "=", "my_x", "*", "resolution", "*", "exp_config", ".", "feature_downsample", "+", "extents", "[", "0", "]", "\n", "my_y", "=", "(", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "/", "exp_config", ".", "feature_downsample", "-", "my_y", ")", "*", "resolution", "*", "exp_config", ".", "feature_downsample", "+", "extents", "[", "2", "]", "\n", "\n", "real_sample_points", "=", "np", ".", "copy", "(", "np", ".", "stack", "(", "[", "my_x", ",", "my_y", ",", "np", ".", "ones_like", "(", "my_x", ")", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "pr", "=", "Quaternion", "(", "pose1", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "pr2", "=", "Quaternion", "(", "pose2", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "\n", "inverse_pr2", "=", "np", ".", "linalg", ".", "inv", "(", "pr2", ")", "\n", "pt", "=", "np", ".", "array", "(", "pose1", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "pt2", "=", "np", ".", "array", "(", "pose2", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "\n", "\n", "coef_matrix", "=", "inverse_pr2", "\n", "trans2", "=", "pt2", "-", "pt", "\n", "\n", "\n", "\n", "real_sample_points", "[", "2", ",", ":", "]", "=", "real_sample_points", "[", "0", ",", ":", "]", "\n", "real_sample_points", "[", "0", ",", ":", "]", "=", "real_sample_points", "[", "1", ",", ":", "]", "\n", "real_sample_points", "[", "1", ",", ":", "]", "=", "-", "real_sample_points", "[", "2", ",", ":", "]", "\n", "\n", "real_sample_points", "[", "2", ",", ":", "]", "=", "1", "\n", "\n", "prenorm_corresponding_points", "=", "np", ".", "dot", "(", "pr", ",", "np", ".", "dot", "(", "coef_matrix", ",", "real_sample_points", ")", "+", "trans2", ")", "\n", "\n", "#    norm_const = np.copy(prenorm_corresponding_points[2,:])", "\n", "\n", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "=", "-", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "\n", "corresponding_points", "=", "prenorm_corresponding_points", "[", "0", ":", "2", ",", ":", "]", "\n", "#    corresponding_points[2,:] = 0.0", "\n", "\n", "corresponding_points", "=", "np", ".", "float32", "(", "corresponding_points", ".", "T", ")", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "(", "corresponding_points", "[", ":", ",", "0", "]", "+", "extents", "[", "1", "]", ")", "/", "resolution", "/", "exp_config", ".", "feature_downsample", "\n", "my_ys", "=", "corresponding_points", "[", ":", ",", "1", "]", "\n", "my_ys", "=", "my_ys", "-", "extents", "[", "2", "]", "\n", "my_ys", "=", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "/", "exp_config", ".", "feature_downsample", "-", "my_ys", "/", "resolution", "/", "exp_config", ".", "feature_downsample", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "my_ys", "\n", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "corresponding_points", "[", ":", ",", "0", "]", "+", "extra_space", "[", "0", "]", "/", "2", "/", "exp_config", ".", "feature_downsample", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "corresponding_points", "[", ":", ",", "1", "]", "+", "extra_space", "[", "1", "]", "/", "2", "/", "exp_config", ".", "feature_downsample", "\n", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "corresponding_points", ",", "source_points", ")", "\n", "\n", "\n", "return", "estimated_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.project_bev_to_bev": [[714, 805], ["nusc.get", "nusc.get", "nusc.get", "nusc.get", "numpy.zeros_like", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.copy", "numpy.copy", "numpy.linalg.inv", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.float32", "cv2.getPerspectiveTransform", "numpy.float32", "numpy.stack", "int", "int", "int", "int", "int", "int", "int", "int", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "numpy.array", "numpy.array", "numpy.dot", "numpy.ones_like"], "function", ["None"], ["", "def", "project_bev_to_bev", "(", "nusc", ",", "exp_config", ",", "cur_sample", ",", "next_sample", ",", "cur_label", ",", "next_label", ")", ":", "\n", "\n", "    ", "camera_channel", "=", "'CAM_FRONT'", "\n", "cam_token_ref", "=", "next_sample", "[", "'data'", "]", "[", "camera_channel", "]", "\n", "cam_record_ref", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_ref", ")", "\n", "\n", "pose1", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "cam_record_ref", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "'''\n    '''", "\n", "cam_token_cur", "=", "cur_sample", "[", "'data'", "]", "[", "camera_channel", "]", "\n", "cam_record_cur", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token_cur", ")", "\n", "\n", "pose2", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "cam_record_cur", "[", "'ego_pose_token'", "]", ")", "\n", "\n", "'''\n    MAPS BEV IMAGE2 to BEV IMAGE1\n    '''", "\n", "\n", "extents", "=", "exp_config", ".", "extents", "\n", "resolution", "=", "exp_config", ".", "resolution", "\n", "extra_space", "=", "exp_config", ".", "extra_space", "\n", "\n", "#    image1 = np.zeros((int(exp_config.total_image_size[1]/exp_config.feature_downsample),int(exp_config.total_image_size[0]/exp_config.feature_downsample)))", "\n", "#   ", "\n", "image1", "=", "np", ".", "zeros_like", "(", "cur_label", ")", "\n", "\n", "sample_point1", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "3", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point2", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "3", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point3", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "5", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "sample_point4", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "5", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "1", "]", ",", "np", ".", "float32", ")", "\n", "\n", "base_sample_points", "=", "np", ".", "stack", "(", "[", "sample_point1", ",", "sample_point2", ",", "sample_point3", ",", "sample_point4", "]", ",", "axis", "=", "-", "1", ")", "\n", "source_points", "=", "np", ".", "copy", "(", "np", ".", "float32", "(", "base_sample_points", "[", "0", ":", "2", ",", ":", "]", ".", "T", ")", ")", "\n", "\n", "base_sample_points", "[", "0", ":", "2", ",", ":", "]", "=", "base_sample_points", "[", "0", ":", "2", ",", ":", "]", "-", "extra_space", "[", "0", "]", "/", "2", "\n", "\n", "my_x", "=", "base_sample_points", "[", "0", ",", ":", "]", "\n", "my_y", "=", "base_sample_points", "[", "1", ",", ":", "]", "\n", "\n", "my_x", "=", "my_x", "*", "resolution", "*", "exp_config", ".", "feature_downsample", "+", "extents", "[", "0", "]", "\n", "my_y", "=", "(", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "/", "exp_config", ".", "feature_downsample", "-", "my_y", ")", "*", "resolution", "*", "exp_config", ".", "feature_downsample", "+", "extents", "[", "2", "]", "\n", "\n", "real_sample_points", "=", "np", ".", "copy", "(", "np", ".", "stack", "(", "[", "my_x", ",", "my_y", ",", "np", ".", "ones_like", "(", "my_x", ")", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "pr", "=", "Quaternion", "(", "pose1", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "pr2", "=", "Quaternion", "(", "pose2", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "\n", "inverse_pr2", "=", "np", ".", "linalg", ".", "inv", "(", "pr2", ")", "\n", "pt", "=", "np", ".", "array", "(", "pose1", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "pt2", "=", "np", ".", "array", "(", "pose2", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "\n", "\n", "coef_matrix", "=", "inverse_pr2", "\n", "trans2", "=", "pt2", "-", "pt", "\n", "\n", "\n", "\n", "real_sample_points", "[", "2", ",", ":", "]", "=", "real_sample_points", "[", "0", ",", ":", "]", "\n", "real_sample_points", "[", "0", ",", ":", "]", "=", "real_sample_points", "[", "1", ",", ":", "]", "\n", "real_sample_points", "[", "1", ",", ":", "]", "=", "-", "real_sample_points", "[", "2", ",", ":", "]", "\n", "\n", "real_sample_points", "[", "2", ",", ":", "]", "=", "1", "\n", "\n", "prenorm_corresponding_points", "=", "np", ".", "dot", "(", "pr", ",", "np", ".", "dot", "(", "coef_matrix", ",", "real_sample_points", ")", "+", "trans2", ")", "\n", "\n", "#    norm_const = np.copy(prenorm_corresponding_points[2,:])", "\n", "\n", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "0", ",", ":", "]", "=", "-", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "\n", "prenorm_corresponding_points", "[", "1", ",", ":", "]", "=", "prenorm_corresponding_points", "[", "2", ",", ":", "]", "\n", "corresponding_points", "=", "prenorm_corresponding_points", "[", "0", ":", "2", ",", ":", "]", "\n", "#    corresponding_points[2,:] = 0.0", "\n", "\n", "corresponding_points", "=", "np", ".", "float32", "(", "corresponding_points", ".", "T", ")", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "(", "corresponding_points", "[", ":", ",", "0", "]", "+", "extents", "[", "1", "]", ")", "/", "resolution", "/", "exp_config", ".", "feature_downsample", "\n", "my_ys", "=", "corresponding_points", "[", ":", ",", "1", "]", "\n", "my_ys", "=", "my_ys", "-", "extents", "[", "2", "]", "\n", "my_ys", "=", "(", "extents", "[", "3", "]", "-", "extents", "[", "2", "]", ")", "/", "resolution", "/", "exp_config", ".", "feature_downsample", "-", "my_ys", "/", "resolution", "/", "exp_config", ".", "feature_downsample", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "my_ys", "\n", "\n", "\n", "corresponding_points", "[", ":", ",", "0", "]", "=", "corresponding_points", "[", ":", ",", "0", "]", "+", "extra_space", "[", "0", "]", "/", "2", "/", "exp_config", ".", "feature_downsample", "\n", "corresponding_points", "[", ":", ",", "1", "]", "=", "corresponding_points", "[", ":", ",", "1", "]", "+", "extra_space", "[", "1", "]", "/", "2", "/", "exp_config", ".", "feature_downsample", "\n", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "corresponding_points", ",", "source_points", ")", "\n", "\n", "\n", "return", "estimated_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.iou_calculator": [[808, 832], ["annotation.astype.astype", "segmentation.astype.astype", "numpy.sum", "numpy.sum", "numpy.isclose", "numpy.isclose"], "function", ["None"], ["", "def", "iou_calculator", "(", "annotation", ",", "segmentation", ",", "vis_mask", ",", "occ_mask", ",", "mask_iou", "=", "False", ",", "void_pixels", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    annotation : gt mask\n    segmentation : method estimate\n    \"\"\"", "\n", "#   ", "\n", "if", "mask_iou", ":", "\n", "        ", "void_pixels", "=", "~", "(", "(", "occ_mask", ">", "0.5", ")", "|", "(", "vis_mask", "<", "0.5", ")", ")", "\n", "", "else", ":", "\n", "        ", "void_pixels", "=", "vis_mask", ">", "0.5", "\n", "\n", "\n", "", "annotation", "=", "annotation", ".", "astype", "(", "np", ".", "bool", ")", "\n", "segmentation", "=", "segmentation", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "inters", "=", "np", ".", "sum", "(", "(", "segmentation", "&", "annotation", ")", "&", "void_pixels", ")", "\n", "union", "=", "np", ".", "sum", "(", "(", "segmentation", "|", "annotation", ")", "&", "void_pixels", ")", "\n", "\n", "j", "=", "inters", "/", "union", "\n", "if", "j", ".", "ndim", "==", "0", ":", "\n", "        ", "j", "=", "1", "if", "np", ".", "isclose", "(", "union", ",", "0", ")", "else", "j", "\n", "", "else", ":", "\n", "        ", "j", "[", "np", ".", "isclose", "(", "union", ",", "0", ")", "]", "=", "1", "\n", "", "return", "j", ",", "void_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.train_saver": [[835, 868], ["numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "len", "range", "numpy.squeeze", "PIL.Image.fromarray", "Image.fromarray.save", "utils.binary_to_png_convert", "PIL.Image.fromarray", "Image.fromarray.save", "PIL.Image.fromarray", "Image.fromarray.save", "utils.binary_to_png_convert", "PIL.Image.fromarray", "Image.fromarray.save", "numpy.uint8", "os.path.join", "numpy.squeeze", "os.path.join", "numpy.uint8", "os.path.join", "numpy.squeeze", "os.path.join", "numpy.squeeze", "numpy.uint8", "numpy.squeeze", "numpy.uint8", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.binary_to_png_convert", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.binary_to_png_convert"], ["", "def", "train_saver", "(", "exp_config", ",", "log_dir", ",", "batch_image", ",", "batch_label", ",", "batch_dilated_label", ")", ":", "\n", "\n", "#    logging.error('TRAIN SAVER : ' + str(batch_image.shape))", "\n", "    ", "batch_image", "=", "np", ".", "squeeze", "(", "batch_image", ")", "\n", "batch_label", "=", "np", ".", "squeeze", "(", "batch_label", ")", "\n", "batch_dilated_label", "=", "np", ".", "squeeze", "(", "batch_dilated_label", ")", "\n", "n_images", "=", "batch_image", ".", "shape", "[", "0", "]", "\n", "\n", "if", "len", "(", "batch_image", ".", "shape", ")", ">", "3", ":", "\n", "\n", "        ", "for", "k", "in", "range", "(", "n_images", ")", ":", "\n", "            ", "query_image", "=", "batch_image", "[", "k", ",", "...", "]", "\n", "corrected_img", "=", "(", "query_image", "+", "1", ")", "/", "2", "*", "255", "\n", "img_png", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np", ".", "squeeze", "(", "corrected_img", ")", ")", ")", "\n", "img_png", ".", "save", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'train_frame_'", "+", "str", "(", "k", ")", "+", "'_image'", "+", "'.png'", ")", ")", "\n", "\n", "\n", "label", "=", "binary_to_png_convert", "(", "batch_label", "[", "k", ",", "...", ",", "0", ":", "exp_config", ".", "num_classes", "]", ")", "\n", "img_png", "=", "Image", ".", "fromarray", "(", "np", ".", "squeeze", "(", "np", ".", "uint8", "(", "label", ")", ")", ")", "\n", "img_png", ".", "save", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'train_frame_'", "+", "str", "(", "k", ")", "+", "'_label'", "+", "'.png'", ")", ")", "\n", "\n", "\n", "\n", "", "", "else", ":", "\n", "        ", "query_image", "=", "np", ".", "squeeze", "(", "batch_image", ")", "\n", "corrected_img", "=", "(", "query_image", "+", "1", ")", "/", "2", "*", "255", "\n", "img_png", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np", ".", "squeeze", "(", "corrected_img", ")", ")", ")", "\n", "img_png", ".", "save", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'train_frame_'", "+", "str", "(", "k", ")", "+", "'_image'", "+", "'.png'", ")", ")", "\n", "\n", "\n", "label", "=", "binary_to_png_convert", "(", "batch_label", "[", "...", ",", "0", ":", "exp_config", ".", "num_classes", "]", ")", "\n", "img_png", "=", "Image", ".", "fromarray", "(", "np", ".", "squeeze", "(", "np", ".", "uint8", "(", "label", ")", ")", ")", "\n", "img_png", ".", "save", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'train_frame_'", "+", "str", "(", "k", ")", "+", "'_label'", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils._clip_points_behind_camera": [[871, 936], ["range", "numpy.array().transpose", "np.array().transpose.append", "indices_clipped.append", "numpy.array", "all", "np.array().transpose.append", "indices_clipped.append", "np.array().transpose.append", "len", "numpy.abs", "np.array().transpose.append", "np.array().transpose.append", "all", "len"], "function", ["None"], ["", "", "def", "_clip_points_behind_camera", "(", "points", ",", "near_plane", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Perform clipping on polygons that are partially behind the camera.\n        This method is necessary as the projection does not work for points behind the camera.\n        Hence we compute the line between the point and the camera and follow that line until we hit the near plane of\n        the camera. Then we use that point.\n        :param points: <np.float32: 3, n> Matrix of points, where each point (x, y, z) is along each column.\n        :param near_plane: If we set the near_plane distance of the camera to 0 then some points will project to\n            infinity. Therefore we need to clip these points at the near plane.\n        :return: The clipped version of the polygon. This may have fewer points than the original polygon if some lines\n            were entirely behind the polygon.\n        \"\"\"", "\n", "points_clipped", "=", "[", "]", "\n", "indices_clipped", "=", "[", "]", "\n", "# Loop through each line on the polygon.", "\n", "# For each line where exactly 1 endpoints is behind the camera, move the point along the line until", "\n", "# it hits the near plane of the camera (clipping).", "\n", "assert", "points", ".", "shape", "[", "0", "]", "==", "3", "\n", "point_count", "=", "points", ".", "shape", "[", "1", "]", "\n", "for", "line_1", "in", "range", "(", "point_count", ")", ":", "\n", "            ", "line_2", "=", "(", "line_1", "+", "1", ")", "%", "point_count", "\n", "point_1", "=", "points", "[", ":", ",", "line_1", "]", "\n", "point_2", "=", "points", "[", ":", ",", "line_2", "]", "\n", "z_1", "=", "point_1", "[", "2", "]", "\n", "z_2", "=", "point_2", "[", "2", "]", "\n", "\n", "if", "z_1", ">=", "near_plane", "and", "z_2", ">=", "near_plane", ":", "\n", "# Both points are in front.", "\n", "# Add both points unless the first is already added.", "\n", "                ", "if", "len", "(", "points_clipped", ")", "==", "0", "or", "all", "(", "points_clipped", "[", "-", "1", "]", "!=", "point_1", ")", ":", "\n", "                    ", "points_clipped", ".", "append", "(", "point_1", ")", "\n", "indices_clipped", ".", "append", "(", "line_1", ")", "\n", "", "points_clipped", ".", "append", "(", "point_2", ")", "\n", "indices_clipped", ".", "append", "(", "line_2", ")", "\n", "", "elif", "z_1", "<", "near_plane", "and", "z_2", "<", "near_plane", ":", "\n", "# Both points are in behind.", "\n", "# Don't add anything.", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "# One point is in front, one behind.", "\n", "# By convention pointA is behind the camera and pointB in front.", "\n", "                ", "if", "z_1", "<=", "z_2", ":", "\n", "                    ", "point_a", "=", "points", "[", ":", ",", "line_1", "]", "\n", "point_b", "=", "points", "[", ":", ",", "line_2", "]", "\n", "", "else", ":", "\n", "                    ", "point_a", "=", "points", "[", ":", ",", "line_2", "]", "\n", "point_b", "=", "points", "[", ":", ",", "line_1", "]", "\n", "", "z_a", "=", "point_a", "[", "2", "]", "\n", "z_b", "=", "point_b", "[", "2", "]", "\n", "\n", "# Clip line along near plane.", "\n", "pointdiff", "=", "point_b", "-", "point_a", "\n", "alpha", "=", "(", "near_plane", "-", "z_b", ")", "/", "(", "z_a", "-", "z_b", ")", "\n", "clipped", "=", "point_a", "+", "(", "1", "-", "alpha", ")", "*", "pointdiff", "\n", "assert", "np", ".", "abs", "(", "clipped", "[", "2", "]", "-", "near_plane", ")", "<", "1e-6", "\n", "\n", "# Add the first point (if valid and not duplicate), the clipped point and the second point (if valid).", "\n", "if", "z_1", ">=", "near_plane", "and", "(", "len", "(", "points_clipped", ")", "==", "0", "or", "all", "(", "points_clipped", "[", "-", "1", "]", "!=", "point_1", ")", ")", ":", "\n", "                    ", "points_clipped", ".", "append", "(", "point_1", ")", "\n", "", "points_clipped", ".", "append", "(", "clipped", ")", "\n", "if", "z_2", ">=", "near_plane", ":", "\n", "                    ", "points_clipped", ".", "append", "(", "point_2", ")", "\n", "\n", "", "", "", "points_clipped", "=", "np", ".", "array", "(", "points_clipped", ")", ".", "transpose", "(", ")", "\n", "return", "points_clipped", ",", "indices_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.view_points": [[937, 974], ["numpy.eye", "numpy.concatenate", "numpy.dot", "numpy.ones", "points[].repeat().reshape", "points[].repeat"], "function", ["None"], ["", "def", "view_points", "(", "points", ",", "view", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    This is a helper class that maps 3d points to a 2d plane. It can be used to implement both perspective and\n    orthographic projections. It first applies the dot product between the points and the view. By convention,\n    the view should be such that the data is projected onto the first 2 axis. It then optionally applies a\n    normalization along the third dimension.\n    For a perspective projection the view should be a 3x3 camera matrix, and normalize=True\n    For an orthographic projection with translation the view is a 3x4 matrix and normalize=False\n    For an orthographic projection without translation the view is a 3x3 matrix (optionally 3x4 with last columns\n     all zeros) and normalize=False\n    :param points: <np.float32: 3, n> Matrix of points, where each point (x, y, z) is along each column.\n    :param view: <np.float32: n, n>. Defines an arbitrary projection (n <= 4).\n        The projection should be such that the corners are projected onto the first 2 axis.\n    :param normalize: Whether to normalize the remaining coordinate (along the third axis).\n    :return: <np.float32: 3, n>. Mapped point. If normalize=False, the third coordinate is the height.\n    \"\"\"", "\n", "\n", "assert", "view", ".", "shape", "[", "0", "]", "<=", "4", "\n", "assert", "view", ".", "shape", "[", "1", "]", "<=", "4", "\n", "assert", "points", ".", "shape", "[", "0", "]", "==", "3", "\n", "\n", "viewpad", "=", "np", ".", "eye", "(", "4", ")", "\n", "viewpad", "[", ":", "view", ".", "shape", "[", "0", "]", ",", ":", "view", ".", "shape", "[", "1", "]", "]", "=", "view", "\n", "\n", "nbr_points", "=", "points", ".", "shape", "[", "1", "]", "\n", "\n", "# Do operation in homogenous coordinates.", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "points", ",", "np", ".", "ones", "(", "(", "1", ",", "nbr_points", ")", ")", ")", ")", "\n", "points", "=", "np", ".", "dot", "(", "viewpad", ",", "points", ")", "\n", "points", "=", "points", "[", ":", "3", ",", ":", "]", "\n", "\n", "\n", "norm_const", "=", "points", "[", "2", ":", "3", ",", ":", "]", "\n", "if", "normalize", ":", "\n", "        ", "points", "=", "points", "/", "points", "[", "2", ":", "3", ",", ":", "]", ".", "repeat", "(", "3", ",", "0", ")", ".", "reshape", "(", "3", ",", "nbr_points", ")", "\n", "\n", "", "return", "points", ",", "norm_const", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.project_to_image": [[975, 1023], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.float32", "numpy.stack", "numpy.array().reshape", "numpy.dot", "utils.view_points", "cv2.getPerspectiveTransform", "numpy.float32", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.copy", "pyquaternion.Quaternion", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.view_points"], ["", "def", "project_to_image", "(", "exp_config", ",", "image1", ",", "cs1", ",", "cam_intrinsic", ")", ":", "\n", "\n", "    ", "sample_point1", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "2", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "0", "]", ",", "np", ".", "float32", ")", "\n", "sample_point2", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "2", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "0", "]", ",", "np", ".", "float32", ")", "\n", "sample_point3", "=", "np", ".", "array", "(", "[", "int", "(", "3", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "0", "]", ",", "np", ".", "float32", ")", "\n", "sample_point4", "=", "np", ".", "array", "(", "[", "int", "(", "5", "*", "image1", ".", "shape", "[", "1", "]", "/", "8", ")", ",", "int", "(", "6", "*", "image1", ".", "shape", "[", "0", "]", "/", "8", ")", ",", "0", "]", ",", "np", ".", "float32", ")", "\n", "\n", "sample_points", "=", "np", ".", "stack", "(", "[", "sample_point1", ",", "sample_point2", ",", "sample_point3", ",", "sample_point4", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "source_points", "=", "np", ".", "float32", "(", "np", ".", "copy", "(", "sample_points", "[", "0", ":", "2", ",", ":", "]", ")", ".", "T", ")", "\n", "\n", "sample_points", "[", "1", ",", ":", "]", "=", "image1", ".", "shape", "[", "0", "]", "-", "sample_points", "[", "1", ",", ":", "]", "\n", "\n", "sample_points", "[", "0", ",", ":", "]", "=", "-", "(", "sample_points", "[", "0", ",", ":", "]", "-", "image1", ".", "shape", "[", "1", "]", "/", "2", ")", "*", "exp_config", ".", "resolution", "\n", "sample_points", "[", "1", ",", ":", "]", "=", "sample_points", "[", "1", ",", ":", "]", "*", "exp_config", ".", "resolution", "\n", "sample_points", "=", "np", ".", "stack", "(", "[", "sample_points", "[", "1", ",", ":", "]", ",", "sample_points", "[", "0", ",", ":", "]", ",", "sample_points", "[", "2", ",", ":", "]", "]", ")", "\n", "\n", "\n", "cr", "=", "Quaternion", "(", "cs1", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", "\n", "# cr = Quaternion([0.4998015430569128, -0.5030316162024876, 0.4997798114386805, -0.49737083824542755]).rotation_matrix.T", "\n", "# inverse_cr = np.linalg.inv(cr)", "\n", "\n", "# ct = np.array([1.70079118954, 0.0159456324149, 1.51095763913]).reshape((-1, 1))", "\n", "ct", "=", "np", ".", "array", "(", "cs1", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "\n", "# sample_points = base_sample_points.T", "\n", "\n", "# Transform into the camera.", "\n", "points", "=", "sample_points", "-", "ct", "\n", "points", "=", "np", ".", "dot", "(", "cr", ",", "points", ")", "\n", "\n", "\n", "# points,_ = _clip_points_behind_camera(points, near_plane)", "\n", "\n", "camera_points", ",", "norm_const", "=", "view_points", "(", "points", ",", "cam_intrinsic", ",", "normalize", "=", "True", ")", "\n", "\n", "\n", "\n", "estimated_transform", "=", "cv2", ".", "getPerspectiveTransform", "(", "source_points", ",", "np", ".", "float32", "(", "camera_points", ".", "T", "[", ":", ",", ":", "2", "]", ")", ")", "\n", "\n", "\n", "# total_image_size=exp_config.original_image_size", "\n", "# warped_image_ref = cv2.warpPerspective(image1,estimated_transform,total_image_size,flags=cv2.INTER_LINEAR)", "\n", "\n", "#        logging.error('PROJECT TO GROUND REF WARPED')", "\n", "\n", "return", "estimated_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.binary_to_png_convert": [[1027, 1037], ["numpy.squeeze", "numpy.ones", "range", "numpy.uint8", "int", "numpy.squeeze", "int", "numpy.sum"], "function", ["None"], ["", "def", "binary_to_png_convert", "(", "exp_config", ",", "label", ")", ":", "\n", "\n", "    ", "label", "=", "np", ".", "squeeze", "(", "label", ")", "\n", "label_creator_array", "=", "np", ".", "ones", "(", "(", "label", ".", "shape", "[", "0", "]", ",", "label", ".", "shape", "[", "1", "]", ",", "int", "(", "exp_config", ".", "num_classes", ")", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "k", "in", "range", "(", "int", "(", "exp_config", ".", "num_classes", ")", ")", ":", "\n", "        ", "label_creator_array", "[", "...", ",", "k", "]", "=", "2", "**", "(", "k", "+", "1", ")", "\n", "\n", "", "png_label", "=", "np", ".", "uint8", "(", "np", ".", "squeeze", "(", "np", ".", "sum", "(", "label", "*", "label_creator_array", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "return", "png_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.png_to_binary": [[1039, 1051], ["numpy.ones", "numpy.copy", "range", "numpy.copy", "int", "int", "int", "int"], "function", ["None"], ["", "def", "png_to_binary", "(", "cropped_label", ",", "total_label_slices", ")", ":", "\n", "    ", "temp_label", "=", "np", ".", "ones", "(", "(", "cropped_label", ".", "shape", "[", "0", "]", ",", "cropped_label", ".", "shape", "[", "1", "]", ",", "int", "(", "total_label_slices", ")", ")", ")", "\n", "\n", "rem", "=", "np", ".", "copy", "(", "cropped_label", ")", "\n", "for", "k", "in", "range", "(", "total_label_slices", ")", ":", "\n", "        ", "temp_rem", "=", "rem", "//", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "#        logging.error('TEMP REM SHAPE : ' + str(temp_rem.shape))", "\n", "\n", "temp_label", "[", ":", ",", ":", ",", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", "]", "=", "np", ".", "copy", "(", "temp_rem", ")", "\n", "\n", "rem", "=", "rem", "%", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "", "return", "temp_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.png_to_binary_with_ones": [[1053, 1062], ["numpy.ones", "numpy.copy", "range", "int", "int", "int", "int"], "function", ["None"], ["", "def", "png_to_binary_with_ones", "(", "exp_config", ",", "cropped_label", ")", ":", "\n", "    ", "temp_label", "=", "np", ".", "ones", "(", "(", "cropped_label", ".", "shape", "[", "0", "]", ",", "cropped_label", ".", "shape", "[", "1", "]", ",", "int", "(", "exp_config", ".", "num_classes", "+", "1", ")", ")", ")", "\n", "\n", "rem", "=", "np", ".", "copy", "(", "cropped_label", ")", "\n", "for", "k", "in", "range", "(", "exp_config", ".", "num_classes", ")", ":", "\n", "        ", "temp_label", "[", ":", ",", ":", ",", "int", "(", "exp_config", ".", "num_classes", "-", "k", "-", "1", ")", "]", "=", "rem", "//", "(", "2", "**", "int", "(", "exp_config", ".", "num_classes", "-", "k", "-", "1", ")", ")", "\n", "\n", "rem", "=", "rem", "%", "(", "2", "**", "int", "(", "exp_config", ".", "num_classes", "-", "k", "-", "1", ")", ")", "\n", "", "return", "temp_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.inception_preprocess": [[1063, 1069], ["numpy.float32"], "function", ["None"], ["", "def", "inception_preprocess", "(", "image", ")", ":", "\n", "    ", "image", "=", "np", ".", "float32", "(", "image", ")", "/", "255", "\n", "image", "=", "image", "-", "0.5", "\n", "image", "=", "image", "*", "2", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.inverse_inception_preprocess": [[1071, 1077], ["numpy.float32"], "function", ["None"], ["", "def", "inverse_inception_preprocess", "(", "image", ")", ":", "\n", "    ", "image", "=", "np", ".", "float32", "(", "image", ")", "/", "2", "\n", "image", "=", "image", "+", "0.5", "\n", "image", "=", "image", "*", "255", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.write_to_txt_file": [[1078, 1084], ["open", "open.close", "open.write", "open.write"], "function", ["None"], ["", "def", "write_to_txt_file", "(", "path", ",", "strings_list", ")", ":", "\n", "    ", "file1", "=", "open", "(", "path", ",", "\"a\"", ")", "\n", "for", "L", "in", "strings_list", ":", "\n", "        ", "file1", ".", "write", "(", "L", ")", "\n", "file1", ".", "write", "(", "\"\\n\"", ")", "\n", "", "file1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.write_variables_to_txt_file": [[1086, 1092], ["open", "open.close", "open.write", "open.write", "str"], "function", ["None"], ["", "def", "write_variables_to_txt_file", "(", "path", ",", "strings_list", ")", ":", "\n", "    ", "file1", "=", "open", "(", "path", ",", "\"a\"", ")", "\n", "for", "L", "in", "strings_list", ":", "\n", "        ", "file1", ".", "write", "(", "str", "(", "L", ")", ")", "\n", "file1", ".", "write", "(", "\"\\n\"", ")", "\n", "", "file1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.read_from_txt_file": [[1093, 1102], ["range", "open", "t.readlines", "len"], "function", ["None"], ["", "def", "read_from_txt_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "t", ":", "\n", "        ", "txt", "=", "t", ".", "readlines", "(", ")", "\n", "", "for", "k", "in", "range", "(", "len", "(", "txt", ")", ")", ":", "\n", "        ", "if", "'\\n'", "in", "txt", "[", "k", "]", ":", "\n", "\n", "            ", "txt", "[", "k", "]", "=", "txt", "[", "k", "]", "[", "0", ":", "-", "1", "]", "\n", "\n", "", "", "return", "txt", "\n", "", "def", "get_image_and_label", "(", "target_dir", ",", "my_scene", ",", "ind", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_image_and_label": [[1102, 1126], ["os.path.join", "sorted", "sorted", "PIL.Image.open", "Image.open.load", "PIL.Image.open", "np.array.load", "numpy.array", "numpy.array", "glob.glob", "glob.glob", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "get_image_and_label", "(", "target_dir", ",", "my_scene", ",", "ind", ")", ":", "\n", "\n", "    ", "current_dir", "=", "os", ".", "path", ".", "join", "(", "target_dir", ",", "my_scene", ")", "\n", "\n", "\n", "\n", "all_images_list", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'img*.png'", ")", ")", ")", "\n", "all_labels_list", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "current_dir", ",", "'label*.png'", ")", ")", ")", "\n", "\n", "\n", "img", "=", "Image", ".", "open", "(", "all_images_list", "[", "ind", "]", ")", "\n", "img", ".", "load", "(", ")", "\n", "label", "=", "Image", ".", "open", "(", "all_labels_list", "[", "ind", "]", ")", "\n", "label", ".", "load", "(", ")", "\n", "\n", "image", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "label", "=", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "#    plt.imshow(image)", "\n", "#    plt.imshow(label)", "\n", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_visible_mask": [[1128, 1140], ["numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "get_visible_mask", "(", "instrinsics", ",", "image_width", ",", "extents", ",", "resolution", ")", ":", "\n", "\n", "# Get calibration parameters", "\n", "    ", "fu", ",", "cu", "=", "instrinsics", "[", "0", ",", "0", "]", ",", "instrinsics", "[", "0", ",", "2", "]", "\n", "\n", "# Construct a grid of image coordinates", "\n", "x1", ",", "z1", ",", "x2", ",", "z2", "=", "extents", "\n", "x", ",", "z", "=", "np", ".", "arange", "(", "x1", ",", "x2", ",", "resolution", ")", ",", "np", ".", "arange", "(", "z1", ",", "z2", ",", "resolution", ")", "\n", "ucoords", "=", "x", "/", "z", "[", ":", ",", "None", "]", "*", "fu", "+", "cu", "\n", "\n", "# Return all points which lie within the camera bounds", "\n", "return", "(", "ucoords", ">=", "0", ")", "&", "(", "ucoords", "<", "image_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.single_image_vgg_preprocess": [[1188, 1207], ["numpy.array", "numpy.array", "utils.png_to_binary_with_ones", "numpy.zeros", "numpy.zeros", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.png_to_binary_with_ones"], ["", "def", "single_image_vgg_preprocess", "(", "orig_img", ",", "orig_label", ")", ":", "\n", "    ", "means_image", "=", "np", ".", "array", "(", "[", "123.68", ",", "116.779", ",", "103.939", "]", ",", "dtype", "=", "np", ".", "single", ")", "\n", "original_size", "=", "orig_label", ".", "size", "\n", "\n", "\n", "orig_img", "=", "np", ".", "array", "(", "orig_img", ",", "dtype", "=", "np", ".", "float32", ")", "-", "means_image", "\n", "\n", "\n", "orig_label", "=", "np", ".", "array", "(", "orig_label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "orig_label", "=", "png_to_binary_with_ones", "(", "orig_label", ")", "\n", "\n", "to_feed_image", "=", "np", ".", "zeros", "(", "(", "912", ",", "1600", ",", "3", ")", ")", "\n", "to_feed_label", "=", "np", ".", "zeros", "(", "(", "912", ",", "1600", ",", "orig_label", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "to_feed_image", "[", "6", ":", "906", ",", ":", ",", ":", "]", "=", "orig_img", "\n", "to_feed_label", "[", "6", ":", "906", ",", ":", ",", ":", "]", "=", "orig_label", "\n", "to_feed_label", "[", "...", ",", "-", "1", "]", "=", "1", "\n", "\n", "return", "original_size", ",", "orig_img", ",", "orig_label", ",", "to_feed_image", ",", "to_feed_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.write_results_to_folder": [[1208, 1219], ["os.path.join", "len", "str", "range", "PIL.Image.fromarray", "Image.fromarray.save", "os.path.exists", "os.makedirs", "str", "to_eval_estimates.astype", "os.path.join"], "function", ["None"], ["", "def", "write_results_to_folder", "(", "validation_res_path", ",", "name_of_seq", ",", "frame_number", ",", "to_eval_estimates", ")", ":", "\n", "\n", "    ", "root_folder", "=", "os", ".", "path", ".", "join", "(", "validation_res_path", ",", "name_of_seq", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root_folder", ")", "\n", "", "len_of_number", "=", "len", "(", "str", "(", "frame_number", ")", ")", "\n", "init_str", "=", "str", "(", "frame_number", ")", "\n", "for", "k", "in", "range", "(", "5", "-", "len_of_number", ")", ":", "\n", "        ", "init_str", "=", "'0'", "+", "init_str", "\n", "", "img_png", "=", "Image", ".", "fromarray", "(", "to_eval_estimates", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "img_png", ".", "save", "(", "os", ".", "path", ".", "join", "(", "root_folder", ",", "init_str", "+", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.single_image_inception_preprocess": [[1220, 1253], ["numpy.array", "numpy.array", "cv2.resize", "numpy.zeros", "numpy.copy", "range", "numpy.copy", "int", "int", "int"], "function", ["None"], ["", "def", "single_image_inception_preprocess", "(", "exp_config", ",", "total_label_slices", ",", "use_deeplab", ",", "orig_img", ",", "orig_label", ")", ":", "\n", "\n", "    ", "orig_img", "=", "np", ".", "array", "(", "orig_img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "orig_label", "=", "np", ".", "array", "(", "orig_label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "new_sizes", "=", "(", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ")", "\n", "#    cropped_label = cv2.resize(orig_label,new_sizes, interpolation = cv2.INTER_NEAREST)", "\n", "cropped_img", "=", "cv2", ".", "resize", "(", "orig_img", ",", "new_sizes", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "temp_label", "=", "np", ".", "zeros", "(", "(", "orig_label", ".", "shape", "[", "0", "]", ",", "orig_label", ".", "shape", "[", "1", "]", ",", "total_label_slices", ")", ")", "\n", "\n", "rem", "=", "np", ".", "copy", "(", "orig_label", ")", "\n", "#    logging.error('Rem shape ' + str(rem.shape))", "\n", "for", "k", "in", "range", "(", "total_label_slices", ")", ":", "\n", "\n", "        ", "temp_rem", "=", "rem", "//", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "#        logging.error('TEMP REM SHAPE : ' + str(temp_rem.shape))", "\n", "\n", "temp_label", "[", ":", ",", ":", ",", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", "]", "=", "np", ".", "copy", "(", "temp_rem", ")", "\n", "\n", "rem", "=", "rem", "%", "(", "2", "**", "int", "(", "total_label_slices", "-", "k", "-", "1", ")", ")", "\n", "\n", "#    pre_img=cropped_img- means_image", "\n", "#    pre_img = inception_preprocess(cropped_img)", "\n", "\n", "", "if", "not", "use_deeplab", ":", "\n", "        ", "pre_img", "=", "cropped_img", "-", "means_image", "\n", "", "else", ":", "\n", "        ", "pre_img", "=", "cropped_img", "\n", "#    pre_img = cropped_img", "\n", "\n", "", "return", "orig_img", ",", "orig_label", ",", "pre_img", ",", "temp_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_label_mask": [[1255, 1263], ["None"], "function", ["None"], ["", "def", "get_label_mask", "(", "exp_config", ",", "ar", ")", ":", "\n", "\n", "    ", "vis_mask", "=", "ar", "[", "...", ",", "exp_config", ".", "num_classes", "]", "\n", "occ_mask", "=", "ar", "[", "...", ",", "exp_config", ".", "num_classes", "+", "1", "]", "\n", "\n", "tot_mask", "=", "occ_mask", "*", "vis_mask", "\n", "\n", "return", "tot_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.expand_image": [[1266, 1278], ["len", "numpy.zeros", "numpy.zeros", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "expand_image", "(", "img", ",", "new_sizes", ",", "left_up", ")", ":", "\n", "\n", "    ", "if", "len", "(", "img", ".", "shape", ")", "==", "3", ":", "\n", "\n", "        ", "new_img", "=", "np", ".", "zeros", "(", "(", "new_sizes", "[", "0", "]", ",", "new_sizes", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", ",", "img", ".", "dtype", ")", "\n", "new_img", "[", "int", "(", "left_up", "[", "0", "]", ")", ":", "int", "(", "left_up", "[", "0", "]", "+", "img", ".", "shape", "[", "0", "]", ")", ",", "int", "(", "left_up", "[", "1", "]", ")", ":", "int", "(", "left_up", "[", "1", "]", "+", "img", ".", "shape", "[", "1", "]", ")", ",", ":", "]", "=", "img", "\n", "", "else", ":", "\n", "        ", "new_img", "=", "np", ".", "zeros", "(", "(", "new_sizes", "[", "0", "]", ",", "new_sizes", "[", "1", "]", ")", ",", "img", ".", "dtype", ")", "\n", "new_img", "[", "int", "(", "left_up", "[", "0", "]", ")", ":", "int", "(", "left_up", "[", "0", "]", "+", "img", ".", "shape", "[", "0", "]", ")", ",", "int", "(", "left_up", "[", "1", "]", ")", ":", "int", "(", "left_up", "[", "1", "]", "+", "img", ".", "shape", "[", "1", "]", ")", "]", "=", "img", "\n", "\n", "\n", "", "return", "new_img", "\n", "", ""]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.decode_binary_labels": [[92, 95], ["numpy.power", "numpy.uint8", "numpy.arange", "numpy.expand_dims", "numpy.reshape"], "function", ["None"], ["def", "decode_binary_labels", "(", "labels", ",", "nclass", ")", ":", "\n", "    ", "bits", "=", "np", ".", "power", "(", "2", ",", "np", ".", "arange", "(", "nclass", ")", ")", "\n", "return", "np", ".", "uint8", "(", "(", "np", ".", "expand_dims", "(", "labels", ",", "axis", "=", "-", "1", ")", "&", "np", ".", "reshape", "(", "bits", ",", "(", "1", ",", "1", ",", "-", "1", ")", ")", ")", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.list_directories": [[96, 98], ["os.listdir", "os.path.isdir", "os.path.join"], "function", ["None"], ["", "def", "list_directories", "(", "path", ")", ":", "\n", "     ", "return", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "path", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.get_clipped_grads": [[100, 111], ["logging.error", "capped_gvs.append", "tensorflow.clip_by_value", "str"], "function", ["None"], ["", "def", "get_clipped_grads", "(", "gvs", ")", ":", "\n", "\n", "    ", "capped_gvs", "=", "[", "]", "\n", "for", "grad", ",", "var", "in", "gvs", ":", "\n", "        ", "if", "grad", "==", "None", ":", "\n", "            ", "logging", ".", "error", "(", "'VAR '", "+", "str", "(", "var", ")", "+", "' NONE GRAD'", ")", "\n", "", "else", ":", "\n", "\n", "\n", "            ", "capped_gvs", ".", "append", "(", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "10.", ",", "10.", ")", ",", "var", ")", ")", "\n", "", "", "return", "capped_gvs", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.single_process": [[114, 161], ["PIL.Image.open", "Image.open.load", "numpy.flipud", "argoverse_test.decode_binary_labels", "numpy.concatenate", "utils.project_to_image", "cv2.warpPerspective", "numpy.uint8", "numpy.array", "utils.tensorflow_project_to_ground", "utils.tensorflow_project_to_ground", "utils.tensorflow_project_to_ground", "utils.argoverse_project_to_ground", "numpy.uint8", "cv2.resize", "numpy.array", "numpy.zeros_like", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.squeeze", "numpy.float32", "PIL.Image.open", "numpy.copy", "numpy.copy", "cv2.resize", "numpy.reshape", "numpy.reshape", "numpy.reshape", "int", "int", "int", "int", "int", "int", "numpy.copy", "int", "int", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.decode_binary_labels", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.project_to_image", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.tensorflow_project_to_ground", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_project_to_ground"], ["", "def", "single_process", "(", "pair", ")", ":", "\n", "\n", "\n", "    ", "camera_channel", "=", "'ring_front_center'", "\n", "image_path", ",", "label_path", ",", "vis_mask", ",", "calib_cur", ",", "pose_ref", ",", "pose_cur", ",", "is_reference_sample", "=", "pair", "\n", "\n", "calib_ref", "=", "calib_cur", "\n", "cam_intrinsic", "=", "calib_cur", ".", "K", "[", ":", ",", ":", "3", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "img", ".", "load", "(", ")", "\n", "\n", "\n", "encoded_labels", "=", "np", ".", "flipud", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "label_path", ")", ",", "np", ".", "int32", ")", ")", "\n", "\n", "num_class", "=", "exp_config", ".", "num_bev_classes", "\n", "bev_labels", "=", "decode_binary_labels", "(", "encoded_labels", ",", "num_class", "+", "1", ")", "\n", "# vis_mask[:-100,:] = 0", "\n", "bev_labels", "=", "np", ".", "concatenate", "(", "[", "np", ".", "copy", "(", "bev_labels", "[", "...", ",", ":", "exp_config", ".", "num_bev_classes", "]", ")", ",", "np", ".", "copy", "(", "vis_mask", ")", ",", "vis_mask", "*", "(", "1", "-", "np", ".", "copy", "(", "np", ".", "expand_dims", "(", "bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "]", ",", "axis", "=", "-", "1", ")", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "to_image_transform", "=", "utils", ".", "project_to_image", "(", "exp_config", ",", "np", ".", "zeros_like", "(", "bev_labels", ")", ",", "calib_ref", ")", "\n", "\n", "image_labels", "=", "cv2", ".", "warpPerspective", "(", "bev_labels", ",", "to_image_transform", ",", "exp_config", ".", "original_image_size", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "# image_objects= cv2.resize(image_objects,(int(exp_config.camera_image_patch_size[1]/4),int(exp_config.camera_image_patch_size[0]/4)), interpolation = cv2.INTER_LINEAR)", "\n", "image_labels", "=", "np", ".", "uint8", "(", "image_labels", ">", "0.3", ")", "\n", "\n", "\n", "image", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "\n", "warp_trans1", "=", "utils", ".", "tensorflow_project_to_ground", "(", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "4", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "4", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "pose_ref", ",", "calib_ref", ",", "pose_cur", ",", "calib_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "warp_trans2", "=", "utils", ".", "tensorflow_project_to_ground", "(", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "8", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "8", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "pose_ref", ",", "calib_ref", ",", "pose_cur", ",", "calib_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "warp_trans3", "=", "utils", ".", "tensorflow_project_to_ground", "(", "image", ",", "np", ".", "zeros", "(", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "(", "16", "*", "exp_config", ".", "downsample_ratio", ")", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "(", "16", "*", "exp_config", ".", "downsample_ratio", ")", ")", ")", ")", ",", "pose_ref", ",", "calib_ref", ",", "pose_cur", ",", "calib_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "\n", "\n", "\n", "warped_img", ",", "warped_cover", ",", "coordinate_transform", "=", "utils", ".", "argoverse_project_to_ground", "(", "exp_config", ",", "image", ",", "image_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "]", ",", "calib_ref", ",", "pose_ref", ",", "calib_cur", ",", "pose_cur", ",", "cam_intrinsic", ",", "reference_frame", "=", "is_reference_sample", ")", "\n", "if", "is_reference_sample", ":", "\n", "        ", "padded_vis_mask", "=", "np", ".", "zeros", "(", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ")", "\n", "padded_vis_mask", "[", "50", ":", "-", "50", ",", "48", ":", "-", "48", "]", "=", "np", ".", "squeeze", "(", "vis_mask", ")", "\n", "warped_cover", "=", "padded_vis_mask", "\n", "# save_array(np.expand_dims(image_labels,axis=0),'pre_resize',is_rgb=False)", "\n", "", "new_sizes", "=", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ")", "\n", "cropped_label", "=", "np", ".", "uint8", "(", "cv2", ".", "resize", "(", "image_labels", ",", "(", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ">", "0.5", ")", "\n", "cropped_img", "=", "cv2", ".", "resize", "(", "image", ",", "new_sizes", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# save_array(np.expand_dims(cropped_label,axis=0),'temp_res',is_rgb=False)", "\n", "return", "(", "cropped_img", ",", "cropped_label", ",", "np", ".", "float32", "(", "warped_cover", ")", ",", "warped_img", ",", "coordinate_transform", ",", "np", ".", "reshape", "(", "warp_trans1", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ",", "np", ".", "reshape", "(", "warp_trans2", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ",", "np", ".", "reshape", "(", "warp_trans3", ",", "[", "-", "1", "]", ")", "[", "0", ":", "8", "]", ",", "bev_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.inception_preprocess": [[163, 169], ["numpy.float32"], "function", ["None"], ["", "def", "inception_preprocess", "(", "image", ")", ":", "\n", "    ", "image", "=", "np", ".", "float32", "(", "image", ")", "/", "255", "\n", "image", "=", "image", "-", "0.5", "\n", "image", "=", "image", "*", "2", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.inverse_inception_preprocess": [[171, 177], ["numpy.float32"], "function", ["None"], ["", "def", "inverse_inception_preprocess", "(", "image", ")", ":", "\n", "    ", "image", "=", "np", ".", "float32", "(", "image", ")", "/", "2", "\n", "image", "=", "image", "+", "0.5", "\n", "image", "=", "image", "*", "255", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.write_to_txt_file": [[178, 184], ["open", "open.close", "open.write", "open.write"], "function", ["None"], ["", "def", "write_to_txt_file", "(", "path", ",", "strings_list", ")", ":", "\n", "    ", "file1", "=", "open", "(", "path", ",", "\"a\"", ")", "\n", "for", "L", "in", "strings_list", ":", "\n", "        ", "file1", ".", "write", "(", "L", ")", "\n", "file1", ".", "write", "(", "\"\\n\"", ")", "\n", "", "file1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.write_variables_to_txt_file": [[186, 192], ["open", "open.close", "open.write", "open.write", "str"], "function", ["None"], ["", "def", "write_variables_to_txt_file", "(", "path", ",", "strings_list", ")", ":", "\n", "    ", "file1", "=", "open", "(", "path", ",", "\"a\"", ")", "\n", "for", "L", "in", "strings_list", ":", "\n", "        ", "file1", ".", "write", "(", "str", "(", "L", ")", ")", "\n", "file1", ".", "write", "(", "\"\\n\"", ")", "\n", "", "file1", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.read_from_txt_file": [[193, 202], ["range", "open", "t.readlines", "len"], "function", ["None"], ["", "def", "read_from_txt_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "t", ":", "\n", "        ", "txt", "=", "t", ".", "readlines", "(", ")", "\n", "", "for", "k", "in", "range", "(", "len", "(", "txt", ")", ")", ":", "\n", "        ", "if", "'\\n'", "in", "txt", "[", "k", "]", ":", "\n", "\n", "            ", "txt", "[", "k", "]", "=", "txt", "[", "k", "]", "[", "0", ":", "-", "1", "]", "\n", "\n", "", "", "return", "txt", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.run_training": [[203, 416], ["logging.error", "logging.error", "logging.info", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "deeplab.common.ModelOptions", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.constant", "mem_net.image_encoder", "mem_net.compat_my_side_decoder", "range", "mem_net.my_object_side_decoder", "tensorflow.contrib.image.transform", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.contrib.image.transform", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.image.resize", "logging.error", "tensorflow.contrib.image.transform", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.contrib.image.transform", "logging.error", "tensorflow.squeeze", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.image.resize", "tensorflow.concat", "mem_net.my_bev_object_decoder", "tensorflow.concat", "tensorflow.train.Saver", "tensorflow.global_variables_initializer", "sess.run", "tf.train.Saver.restore", "sess.run", "argoverse_test.do_eval", "numpy.mean", "logging.error", "str", "str", "int", "int", "len", "reference_image_endpoints.append", "tensorflow.slice", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.concat", "mem_net.interp_surgery", "numpy.array", "numpy.ones", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "int", "int", "int", "int", "str", "tensorflow.slice", "tensorflow.slice", "int", "int", "tensorflow.slice", "str", "tensorflow.slice", "int", "int", "tensorflow.global_variables", "str", "numpy.max", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.image_encoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.compat_my_side_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_object_side_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.my_bev_object_decoder", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.do_eval", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.mem_net.interp_surgery"], ["", "def", "run_training", "(", "continue_run", ")", ":", "\n", "\n", "#    train_file ='C:\\\\winpython\\\\WPy-3670\\\\codes\\\\davis2017\\\\DAVIS\\\\ImageSets\\\\2017\\\\train.txt'", "\n", "#    data_images_path ='C:\\\\winpython\\\\WPy-3670\\\\codes\\\\davis2017\\\\DAVIS\\\\JPEGImages\\\\480p\\\\drone'", "\n", "\n", "\n", "    ", "logging", ".", "error", "(", "'EXPERIMENT : '", "+", "str", "(", "exp_config", ".", "experiment_name", ")", ")", "\n", "logging", ".", "error", "(", "'THIS IS : '", "+", "str", "(", "log_dir", ")", ")", "\n", "\n", "val_tokens", "=", "token_splits", ".", "VAL_LOGS", "\n", "\n", "logging", ".", "info", "(", "'EXPERIMENT NAME: %s'", "%", "exp_config", ".", "experiment_name", ")", "\n", "\n", "\n", "\n", "# Tell TensorFlow that the model will be built into the default Graph.", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "#        with tf.Graph().as_default():", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "# Generate placeholders for the images and labels.", "\n", "\n", "\n", "\n", "        ", "training_time_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "\n", "\n", "my_training_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "\n", "num_frames", "=", "None", "\n", "n_frames_per_seq", "=", "None", "\n", "\n", "reference_frame_index_pl", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "]", ")", "\n", "\n", "\n", "# Build a Graph that computes predictions from the inference model.", "\n", "my_model_options", "=", "common", ".", "ModelOptions", "(", "{", "common", ".", "OUTPUT_TYPE", ":", "10", "}", ",", "crop_size", "=", "exp_config", ".", "camera_image_patch_size", ",", "atrous_rates", "=", "[", "6", ",", "12", ",", "18", "]", ")", "\n", "\n", "image_tensor_shape", "=", "[", "n_frames_per_seq", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "3", "]", "\n", "image_mask_tensor_shape", "=", "[", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "total_label_slices", "]", "\n", "# mask_tensor_shape = [n_seqs,exp_config.patch_size[1],exp_config.patch_size[0],exp_config.num_bev_classes + 1]", "\n", "\n", "images_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "image_tensor_shape", ",", "name", "=", "'images'", ")", "\n", "\n", "image_labels_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "image_mask_tensor_shape", ",", "name", "=", "'image_labels'", ")", "\n", "\n", "separate_covers_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", "]", ",", "name", "=", "'separate_covers'", ")", "\n", "\n", "bev_transforms_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "np", ".", "max", "(", "[", "1", ",", "n_seqs", "-", "1", "]", ")", ",", "8", "]", ",", "name", "=", "'bev_transforms'", ")", "\n", "\n", "ground_transforms_placeholder1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms1'", ")", "\n", "\n", "ground_transforms_placeholder2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms2'", ")", "\n", "\n", "ground_transforms_placeholder3", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "8", "]", ",", "name", "=", "'ground_transforms3'", ")", "\n", "\n", "\n", "coordinate_ground_transforms_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "n_seqs", ",", "num_frames", ",", "3", ",", "3", "]", ",", "name", "=", "'coordinate_ground_transforms'", ")", "\n", "\n", "\n", "no_mask_tensor", "=", "tf", ".", "constant", "(", "-", "np", ".", "ones", "(", "(", "1", ",", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "exp_config", ".", "feature_downsample", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "exp_config", ".", "feature_downsample", ")", ",", "int", "(", "exp_config", ".", "num_classes", "+", "1", ")", ")", ",", "np", ".", "float32", ")", ")", "\n", "\n", "'''\n        Extract features from the CAMERA IMAGE\n        '''", "\n", "\n", "image_total_backbone_out", ",", "image_total_relative_endpoints", ",", "image_total_end_points", "=", "mem_net", ".", "image_encoder", "(", "images_placeholder", ",", "no_mask_tensor", ",", "my_model_options", ",", "downsample_stages", "=", "4", ",", "use_deeplab", "=", "use_deeplab", ",", "is_training", "=", "training_time_placeholder", ",", "reuse", "=", "False", ")", "\n", "#            image_total_backbone_out = mem_net.my_image_decoder(image_total_relative_endpoints,image_total_backbone_out,reuse=False)", "\n", "\n", "\n", "total_input_image", "=", "image_total_backbone_out", "\n", "\n", "side_mask_logits", ",", "side_occ_est_logits", ",", "side_masks", ",", "side_occ_softmaxed", "=", "mem_net", ".", "compat_my_side_decoder", "(", "image_total_relative_endpoints", ",", "total_input_image", ",", "num_classes", "=", "1", ",", "reuse", "=", "False", ")", "\n", "\n", "reference_image_endpoints", "=", "[", "]", "\n", "for", "endi", "in", "range", "(", "len", "(", "image_total_relative_endpoints", ")", ")", ":", "\n", "            ", "reference_image_endpoints", ".", "append", "(", "tf", ".", "slice", "(", "image_total_relative_endpoints", "[", "endi", "]", ",", "[", "reference_frame_index_pl", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ")", "\n", "\n", "", "side_obj_logits", ",", "side_obj_softmaxed", "=", "mem_net", ".", "my_object_side_decoder", "(", "reference_image_endpoints", ",", "tf", ".", "slice", "(", "total_input_image", ",", "[", "reference_frame_index_pl", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "exp_config", ",", "reuse", "=", "False", ")", "\n", "# logging.error('SIDE OCC LOGITS ' + str(side_obj_))", "\n", "# logging.error('SIDE OCC LABELS ' + str(tf.squeeze(tf.slice(image_labels_placeholder,[0,0,0,exp_config.num_classes+1],[-1,-1,-1,-1]),axis=-1)))", "\n", "\n", "projected_estimates", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "tf", ".", "concat", "(", "[", "side_masks", ",", "side_occ_softmaxed", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform'", "\n", ")", "\n", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "combined_projected_estimates", "=", "tf", ".", "reduce_max", "(", "projected_estimates", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "projected_obj_estimates", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "side_obj_softmaxed", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "reference_frame_index_pl", ",", "0", "]", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform'", "\n", ")", "\n", "projected_obj_estimates", "=", "projected_obj_estimates", "*", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "reference_frame_index_pl", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "combined_projected_estimates", "=", "tf", ".", "concat", "(", "[", "combined_projected_estimates", ",", "projected_obj_estimates", "]", ",", "axis", "=", "-", "1", ")", "\n", "resized_combined_projected_estimates", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_projected_estimates", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "8", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "8", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "bigger_resized_combined_projected_estimates", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_projected_estimates", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "4", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'bigger_projected_estimates_resize'", ")", "\n", "\n", "logging", ".", "error", "(", "'BIGGER PROJ '", "+", "str", "(", "bigger_resized_combined_projected_estimates", ")", ")", "\n", "\n", "'''\n        Scale the coordinates to the original image so that the transformation is compatible\n        '''", "\n", "\n", "\n", "all_bev_total_backbone_out", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "image_total_relative_endpoints", "[", "0", "]", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder2", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform_end1'", "\n", ")", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "# combined_back_out = tf.reduce_max(tf.slice(all_bev_total_backbone_out,[0,0,0,0],[-1,-1,-1,128])*cur_separate_covers,axis=0,keepdims=True)", "\n", "\n", "# combined_back_out = tf.concat([tf.tile(combined_back_out,[num_frames,1,1,1]),tf.slice(all_bev_total_backbone_out,[0,0,0,128],[-1,-1,-1,-1])],axis=-1)", "\n", "\n", "combined_back_out", "=", "tf", ".", "reduce_max", "(", "all_bev_total_backbone_out", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "combined_back_out", "=", "tf", ".", "concat", "(", "[", "combined_back_out", ",", "tf", ".", "slice", "(", "all_bev_total_backbone_out", ",", "[", "reference_frame_index_pl", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "bev_total_backbone_out", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_back_out", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "8", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "8", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "all_bev_end2", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "\n", "image_total_relative_endpoints", "[", "1", "]", ",", "\n", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "ground_transforms_placeholder1", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", ",", "\n", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "(", "exp_config", ".", "project_patch_size", "[", "1", "]", ",", "exp_config", ".", "project_patch_size", "[", "0", "]", ")", ",", "\n", "name", "=", "'tensorflow_ground_transform_end2'", "\n", ")", "\n", "\n", "logging", ".", "error", "(", "'ENDPOINT WARPED '", "+", "str", "(", "all_bev_end2", ")", ")", "\n", "\n", "\n", "cur_separate_covers", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "separate_covers_placeholder", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# combined_end = tf.reduce_max(tf.slice(all_bev_end2,[0,0,0,0],[-1,-1,-1,128])*cur_separate_covers,axis=0,keepdims=True)", "\n", "\n", "# combined_end = tf.concat([tf.tile(combined_end,[num_frames,1,1,1]),tf.slice(all_bev_end2,[0,0,0,128],[-1,-1,-1,-1])],axis=-1)", "\n", "\n", "combined_end", "=", "tf", ".", "reduce_max", "(", "all_bev_end2", "*", "cur_separate_covers", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "combined_end", "=", "tf", ".", "concat", "(", "[", "combined_end", ",", "tf", ".", "slice", "(", "all_bev_end2", ",", "[", "reference_frame_index_pl", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# combined_end = tf.reduce_max( all_bev_end2*cur_separate_covers,axis=0,keepdims=True)", "\n", "\n", "combined_end", "=", "tf", ".", "image", ".", "resize", "(", "\n", "combined_end", ",", "[", "int", "(", "exp_config", ".", "patch_size", "[", "1", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "patch_size", "[", "0", "]", "/", "4", ")", "]", ",", "method", "=", "'bilinear'", ",", "name", "=", "'projected_estimates_resize'", ")", "\n", "\n", "bev_total_relative_endpoints", "=", "[", "tf", ".", "concat", "(", "[", "combined_end", ",", "bigger_resized_combined_projected_estimates", "]", ",", "axis", "=", "-", "1", ")", "]", "\n", "\n", "\n", "\n", "total_input", "=", "tf", ".", "concat", "(", "[", "resized_combined_projected_estimates", ",", "bev_total_backbone_out", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "\n", "static_logits", ",", "static_masks", ",", "object_logits", ",", "object_masks", "=", "mem_net", ".", "my_bev_object_decoder", "(", "bev_total_relative_endpoints", ",", "total_input", ",", "exp_config", ",", "reuse", "=", "False", ")", "\n", "\n", "masks", "=", "tf", ".", "concat", "(", "[", "static_masks", ",", "object_masks", "]", ",", "axis", "=", "-", "1", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "2", ")", "\n", "\n", "# saver_best_loss = tf.train.Saver(max_to_keep=2)", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "\n", "load_path", "=", "exp_config", ".", "load_path", "\n", "\n", "saver", ".", "restore", "(", "sess", ",", "load_path", ")", "\n", "# to_load_saver.restore(sess,load_path)", "\n", "sess", ".", "run", "(", "mem_net", ".", "interp_surgery", "(", "tf", ".", "global_variables", "(", ")", ")", ")", "\n", "\n", "\n", "\n", "val_res", "=", "do_eval", "(", "sess", ",", "val_tokens", ",", "\n", "my_training_placeholder", ",", "\n", "\n", "images_placeholder", ",", "\n", "\n", "image_labels_placeholder", ",", "\n", "\n", "bev_transforms_placeholder", ",", "\n", "separate_covers_placeholder", ",", "\n", "ground_transforms_placeholder1", ",", "\n", "ground_transforms_placeholder2", ",", "\n", "ground_transforms_placeholder3", ",", "\n", "coordinate_ground_transforms_placeholder", ",", "\n", "\n", "\n", "projected_obj_estimates", ",", "\n", "masks", ",", "\n", "side_masks", ",", "side_occ_softmaxed", ",", "side_obj_softmaxed", ",", "\n", "projected_estimates", ",", "\n", "reference_frame_index_pl", ",", "\n", "combined_projected_estimates", ",", "\n", "0", ",", "training_time_placeholder", ",", "val_folder_path", "=", "validation_res_path", ")", "\n", "overall_mean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "val_res", ")", ")", "\n", "logging", ".", "error", "(", "'Overall mean : '", "+", "str", "(", "overall_mean", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.eval_iterator": [[419, 554], ["train_loader.get", "multiprocessing.dummy.Pool", "frame_ids.append", "str", "os.path.join", "numpy.flipud", "argoverse_test.decode_binary_labels", "train_loader.get_calibration", "utils.argoverse_project_to_image", "numpy.copy", "numpy.expand_dims", "numpy.concatenate", "numpy.copy", "range", "multiprocessing.dummy.Pool.map", "multiprocessing.dummy.Pool.close", "multiprocessing.dummy.Pool.join", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "numpy.ones", "numpy.zeros", "range", "range", "range", "numpy.copy", "numpy.array", "numpy.zeros_like", "numpy.uint8", "range", "len", "numpy.copy", "numpy.expand_dims", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.zeros", "numpy.expand_dims", "frame_ids.append", "frame_ids.append", "PIL.Image.open", "numpy.flipud", "train_loader.get.get_pose", "str", "numpy.copy", "os.path.join", "os.path.join", "pairs.append", "int", "int", "numpy.copy", "numpy.copy", "numpy.copy", "str", "utils.get_visible_mask", "numpy.copy", "numpy.copy", "numpy.copy", "str", "numpy.expand_dims", "train_loader.get.get_pose", "int", "int", "int", "int", "int", "int", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.decode_binary_labels", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.argoverse_project_to_image", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.get_visible_mask"], ["", "", "def", "eval_iterator", "(", "ref_id", ",", "frame_interval", ",", "n_frames_per_seq", ",", "my_scene", ",", "cur_index", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "False", ")", ":", "\n", "\n", "    ", "num_frames", "=", "n_frames_per_seq", "\n", "\n", "n_seqs", "=", "1", "\n", "\n", "\n", "camera", "=", "\"ring_front_center\"", "\n", "scene", "=", "train_loader", ".", "get", "(", "my_scene", ")", "\n", "\n", "pool", "=", "ThreadPool", "(", "n_seqs", "*", "num_frames", ")", "\n", "\n", "frame_ids", "=", "[", "]", "\n", "first_frame", "=", "cur_index", "\n", "\n", "frame_ids", ".", "append", "(", "first_frame", ")", "\n", "\n", "# logging.error('LEN IMAGES ' + str(len(all_images_list)))", "\n", "\n", "\n", "if", "single_frame", ":", "\n", "\n", "        ", "for", "frame_number", "in", "range", "(", "1", ",", "n_frames_per_seq", ")", ":", "\n", "            ", "frame_ids", ".", "append", "(", "first_frame", ")", "\n", "#            logging.error('ENTERED SINGLE FRAME ' + str(frame_ids))", "\n", "\n", "", "", "else", ":", "\n", "# if apply_interval:", "\n", "        ", "for", "frame_number", "in", "range", "(", "1", ",", "n_frames_per_seq", ")", ":", "\n", "            ", "frame_ids", ".", "append", "(", "first_frame", "+", "frame_interval", "*", "frame_number", ")", "\n", "\n", "\n", "# else:    ", "\n", "#     for frame_number in range(1,n_frames_per_seq):", "\n", "#         frame_ids.append(first_frame + frame_number)", "\n", "\n", "", "", "pairs", "=", "[", "]", "\n", "\n", "# logging.error('SCENE ' + my_scene)", "\n", "# logging.error('FRAMES ' + str(frame_ids))", "\n", "\n", "\n", "\n", "timestamp", "=", "str", "(", "np", ".", "copy", "(", "train_loader", ".", "_image_timestamp_list_sync", "[", "my_scene", "]", "[", "camera", "]", "[", "frame_ids", "[", "ref_id", "]", "]", ")", ")", "\n", "\n", "# logging.error('TIME S ' + timestamp)", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "exp_config", ".", "argo_labels_path", ",", "\n", "my_scene", ",", "camera", ",", "\n", "str", "(", "camera", ")", "+", "'_'", "+", "str", "(", "timestamp", ")", "+", "'.png'", ")", "\n", "\n", "encoded_labels", "=", "np", ".", "flipud", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "output_path", ")", ",", "np", ".", "int32", ")", ")", "\n", "# logging.error('ENCODED LABELS SHAPE ' + str(encoded_labels.shape))", "\n", "num_class", "=", "exp_config", ".", "num_bev_classes", "\n", "bev_labels", "=", "decode_binary_labels", "(", "encoded_labels", ",", "num_class", "+", "1", ")", "\n", "# mask = ~labels[...,-1]", "\n", "\n", "# labels = labels[...,:-1]", "\n", "calib_cur", "=", "train_loader", ".", "get_calibration", "(", "camera", ",", "my_scene", ")", "\n", "calib_ref", "=", "calib_cur", "\n", "to_image_transform", "=", "utils", ".", "argoverse_project_to_image", "(", "exp_config", ",", "np", ".", "zeros_like", "(", "bev_labels", ")", ",", "calib_ref", ")", "\n", "\n", "# image_objects = cv2.warpPerspective(np.squeeze(bev_labels[...,-1]),to_image_transform,exp_config.original_image_size,flags=cv2.INTER_LINEAR)", "\n", "# image_objects= cv2.resize(image_objects,(int(exp_config.camera_image_patch_size[1]/4),int(exp_config.camera_image_patch_size[0]/4)), interpolation = cv2.INTER_LINEAR)", "\n", "# vis_mask = np.float32(image_objects > 0.5)", "\n", "vis_mask", "=", "np", ".", "copy", "(", "np", ".", "uint8", "(", "np", ".", "flipud", "(", "utils", ".", "get_visible_mask", "(", "calib_cur", ".", "K", ",", "calib_cur", ".", "camera_config", ".", "img_width", ",", "\n", "exp_config", ".", "map_extents", ",", "exp_config", ".", "resolution", ")", ")", ")", ")", "\n", "\n", "# logging.error('VIS MASK SHAPE ' + str(vis_mask.shape))", "\n", "# logging.error('BEV LABELS SHAPE ' + str(bev_labels.shape))        ", "\n", "vis_mask", "=", "np", ".", "expand_dims", "(", "vis_mask", ",", "axis", "=", "-", "1", ")", "\n", "bev_labels", "=", "np", ".", "concatenate", "(", "[", "bev_labels", "[", "...", ",", ":", "exp_config", ".", "num_bev_classes", "]", ",", "vis_mask", ",", "vis_mask", "*", "(", "1", "-", "np", ".", "expand_dims", "(", "bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "]", ",", "axis", "=", "-", "1", ")", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "pose_ref", "=", "np", ".", "copy", "(", "scene", ".", "get_pose", "(", "frame_ids", "[", "ref_id", "]", ")", ".", "transform_matrix", ")", "\n", "for", "k", "in", "range", "(", "n_seqs", ")", ":", "\n", "        ", "for", "m", "in", "range", "(", "num_frames", ")", ":", "\n", "            ", "timestamp", "=", "str", "(", "np", ".", "copy", "(", "train_loader", ".", "_image_timestamp_list_sync", "[", "my_scene", "]", "[", "camera", "]", "[", "frame_ids", "[", "m", "]", "]", ")", ")", "\n", "# logging.error('TIME ' + str(m) + ' ' + timestamp)", "\n", "pose_cur", "=", "np", ".", "copy", "(", "scene", ".", "get_pose", "(", "frame_ids", "[", "m", "]", ")", ".", "transform_matrix", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "exp_config", ".", "argo_labels_path", ",", "\n", "my_scene", ",", "camera", ",", "\n", "str", "(", "camera", ")", "+", "'_'", "+", "str", "(", "timestamp", ")", "+", "'.png'", ")", "\n", "\n", "image_string", "=", "os", ".", "path", ".", "join", "(", "exp_config", ".", "argo_track_path", ",", "my_scene", ",", "'ring_front_center'", ",", "'ring_front_center_'", "+", "str", "(", "timestamp", ")", "+", "'.jpg'", ")", "\n", "\n", "\n", "pairs", ".", "append", "(", "(", "image_string", ",", "output_path", ",", "vis_mask", ",", "calib_cur", ",", "pose_ref", ",", "pose_cur", ",", "m", "==", "ref_id", ")", ")", "\n", "\n", "\n", "\n", "", "", "results", "=", "pool", ".", "map", "(", "single_process", ",", "pairs", ")", "\n", "\n", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "#        logging.error('Results shape : ' + str(len(results)))", "\n", "\n", "seq_images_ar", "=", "np", ".", "zeros", "(", "(", "n_frames_per_seq", ",", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", ",", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "seq_labels_ar", "=", "np", ".", "ones", "(", "(", "n_frames_per_seq", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "0", "]", "/", "4", ")", ",", "int", "(", "exp_config", ".", "camera_image_patch_size", "[", "1", "]", "/", "4", ")", ",", "exp_config", ".", "num_bev_classes", "+", "2", ")", ",", "np", ".", "float32", ")", "\n", "\n", "bev_transforms_ar1", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar2", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "bev_transforms_ar3", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "8", ")", ",", "np", ".", "float32", ")", "\n", "coordinate_transforms_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "bev_images_ar", "=", "np", ".", "zeros", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "\n", "bev_covers_ar", "=", "np", ".", "ones", "(", "(", "n_seqs", ",", "num_frames", ",", "exp_config", ".", "patch_size", "[", "1", "]", ",", "exp_config", ".", "patch_size", "[", "0", "]", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "\n", "all_bev_labels_ar", "=", "np", ".", "zeros", "(", "(", "num_frames", ",", "196", ",", "200", ",", "exp_config", ".", "num_bev_classes", "+", "2", ")", ",", "np", ".", "float32", ")", "\n", "\n", "#        logging.error('PROJECT TO GROUND ENDED')", "\n", "for", "k", "in", "range", "(", "len", "(", "results", ")", ")", ":", "\n", "        ", "temp_res", "=", "results", "[", "k", "]", "\n", "\n", "if", "k", "<", "num_frames", ":", "\n", "\n", "            ", "seq_images_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "", "elif", "k", ">=", "(", "n_seqs", "*", "num_frames", "-", "(", "n_seqs", "-", "1", ")", ")", ":", "\n", "            ", "seq_images_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "0", "]", ")", "\n", "seq_labels_ar", "[", "k", "-", "(", "num_frames", "-", "1", ")", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "1", "]", ")", "\n", "\n", "#                logging.error('RETURNED GRID SHAPE ' + str(temp_res[3].shape))", "\n", "", "bev_images_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "3", "]", ")", "\n", "\n", "bev_covers_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "copy", "(", "temp_res", "[", "2", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "bev_transforms_ar1", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "5", "]", ")", "\n", "bev_transforms_ar2", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "6", "]", ")", "\n", "bev_transforms_ar3", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "7", "]", ")", "\n", "coordinate_transforms_ar", "[", "int", "(", "k", "//", "num_frames", ")", ",", "k", "%", "num_frames", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "4", "]", ")", "\n", "all_bev_labels_ar", "[", "k", ",", "...", "]", "=", "np", ".", "copy", "(", "temp_res", "[", "8", "]", ")", "\n", "\n", "", "return", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_covers_ar", ",", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", ",", "bev_transforms_ar1", ",", "bev_transforms_ar2", ",", "bev_transforms_ar3", ",", "coordinate_transforms_ar", ",", "np", ".", "expand_dims", "(", "bev_labels", ",", "axis", "=", "0", ")", ",", "to_image_transform", ",", "all_bev_labels_ar", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator": [[555, 561], ["argoverse_test.eval_iterator"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.eval_iterator"], ["", "def", "overall_eval_iterator", "(", "ref_id", ",", "frame_interval", ",", "n_frames_per_seq", ",", "my_scene", ",", "cur_index", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "False", ")", ":", "\n", "\n", "    ", "seq_images_ar", ",", "seq_labels_ar", ",", "bev_images_ar", ",", "bev_covers_ar", ",", "_", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "coordinate_transforms_ar", ",", "real_ref_bev_labels", ",", "to_image_transform", ",", "all_bev_labels_ar", ",", "went_well", "=", "eval_iterator", "(", "ref_id", ",", "frame_interval", ",", "n_frames_per_seq", ",", "my_scene", ",", "cur_index", ",", "single_frame", "=", "single_frame", ",", "apply_interval", "=", "apply_interval", ")", "\n", "\n", "\n", "return", "seq_images_ar", ",", "tf_transforms1", ",", "tf_transforms2", ",", "tf_transforms3", ",", "bev_covers_ar", ",", "coordinate_transforms_ar", ",", "real_ref_bev_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.do_eval": [[564, 781], ["logging.error", "numpy.concatenate", "numpy.concatenate", "numpy.sum", "logging.error", "res_strings.append", "argoverse_test.write_to_txt_file", "train_loader.get", "logging.error", "range", "numpy.array", "numpy.array", "all_static_j1s.append", "all_object_j1s.append", "res_strings.append", "logging.error", "argoverse_test.write_to_txt_file", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "str", "os.path.join", "os.path.exists", "os.makedirs", "sess.run", "numpy.squeeze", "numpy.uint8", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "utils.get_confusion", "range", "scene_static_results.append", "scene_object_results.append", "numpy.squeeze", "numpy.squeeze", "str", "os.path.join", "os.path.join", "os.path.join", "str", "argoverse_test.overall_eval_iterator", "numpy.zeros", "numpy.int32", "numpy.uint8", "numpy.clip", "numpy.squeeze", "numpy.squeeze", "utils.get_all_stats", "sample_results.append", "numpy.array", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "argoverse_test.overall_eval_iterator", "numpy.sum", "numpy.squeeze", "numpy.squeeze", "str", "numpy.sum", "numpy.sum", "str", "argoverse_test.overall_eval_iterator", "argoverse_test.overall_eval_iterator", "str", "range", "argoverse_test.overall_eval_iterator", "str", "argoverse_test.overall_eval_iterator", "argoverse_test.overall_eval_iterator", "int", "int", "str", "str"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.write_to_txt_file", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.write_to_txt_file", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.background_generator.BackgroundGenerator.run", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_confusion", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.get_all_stats", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.overall_eval_iterator"], ["", "def", "do_eval", "(", "sess", ",", "val_tokens", ",", "\n", "my_training_placeholder", ",", "\n", "\n", "images_placeholder", ",", "\n", "\n", "image_labels_placeholder", ",", "\n", "bev_transforms_placeholder", ",", "\n", "\n", "separate_covers_placeholder", ",", "\n", "ground_transforms_placeholder1", ",", "\n", "ground_transforms_placeholder2", ",", "\n", "ground_transforms_placeholder3", ",", "\n", "coordinate_ground_transforms_placeholder", ",", "\n", "\n", "projected_obj_estimates", ",", "\n", "\n", "masks", ",", "\n", "side_masks", ",", "side_occ_masks", ",", "side_obj_softmaxed", ",", "\n", "projected_estimates", ",", "\n", "reference_frame_index_pl", ",", "\n", "combined_projected_estimates", ",", "\n", "iteration", ",", "training_time_placeholder", ",", "val_folder_path", "=", "validation_res_path", ")", ":", "\n", "\n", "\n", "    ", "logging", ".", "error", "(", "'Started evaluation'", ")", "\n", "\n", "\n", "res_strings", "=", "[", "]", "\n", "\n", "all_static_j1s", "=", "[", "]", "\n", "all_object_j1s", "=", "[", "]", "\n", "\n", "for", "my_scene_token", "in", "val_tokens", ":", "\n", "\n", "        ", "scene_static_results", "=", "[", "]", "\n", "scene_object_results", "=", "[", "]", "\n", "\n", "name_of_seq", "=", "my_scene_token", "\n", "\n", "\n", "scene", "=", "train_loader", ".", "get", "(", "my_scene_token", ")", "\n", "# logging.error('SCENE ' + my_scene_token)", "\n", "n_frames_in_scene", "=", "scene", ".", "num_lidar_frame", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "validation_res_path", ",", "name_of_seq", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "validation_res_path", ",", "name_of_seq", ")", ")", "\n", "", "logging", ".", "error", "(", "'N FRAMES  '", "+", "str", "(", "n_frames_in_scene", ")", ")", "\n", "\n", "\n", "for", "frame_number", "in", "range", "(", "n_frames_in_scene", ")", ":", "\n", "#            logging.error('FRAME NUMBER ' + str(frame_number))", "\n", "            ", "if", "single_frame_experiment", ":", "\n", "                ", "batch_image", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "my_scene_token", ",", "frame_number", ",", "single_frame", "=", "True", ",", "apply_interval", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "if", "frame_number", "<", "frame_interval", "*", "reference_frame_index", ":", "\n", "\n", "                    ", "ref_ind", "=", "0", "\n", "batch_image", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "ref_ind", ",", "frame_interval", ",", "num_frames", ",", "my_scene_token", ",", "frame_number", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "True", ")", "\n", "\n", "", "elif", "(", "frame_number", "==", "(", "n_frames_in_scene", "-", "1", ")", ")", ":", "\n", "#", "\n", "                    ", "ref_ind", "=", "0", "\n", "batch_image", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "ref_ind", ",", "1", ",", "3", ",", "my_scene_token", ",", "frame_number", ",", "single_frame", "=", "True", ",", "apply_interval", "=", "False", ")", "\n", "\n", "", "elif", "(", "frame_number", ">=", "(", "n_frames_in_scene", "-", "(", "num_frames", "-", "reference_frame_index", "-", "1", ")", ")", ")", ":", "\n", "\n", "\n", "                    ", "ref_ind", "=", "0", "\n", "n_frames", "=", "n_frames_in_scene", "-", "frame_number", "\n", "batch_image", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "ref_ind", ",", "1", ",", "n_frames", ",", "my_scene_token", ",", "frame_number", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "False", ")", "\n", "\n", "", "elif", "(", "frame_number", ">=", "(", "n_frames_in_scene", "-", "frame_interval", "*", "(", "num_frames", "-", "reference_frame_index", "-", "1", ")", ")", ")", ":", "\n", "\n", "\n", "                    ", "for", "te", "in", "range", "(", "num_frames", "-", "reference_frame_index", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                        ", "if", "frame_number", "+", "frame_interval", "*", "te", "<", "(", "n_frames_in_scene", ")", ":", "\n", "                            ", "break", "\n", "\n", "\n", "\n", "", "", "if", "te", "==", "0", ":", "\n", "                        ", "ref_ind", "=", "0", "\n", "batch_image", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "ref_ind", ",", "1", ",", "2", ",", "my_scene_token", ",", "frame_number", ",", "single_frame", "=", "True", ",", "apply_interval", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "ref_ind", "=", "reference_frame_index", "\n", "batch_image", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "ref_ind", ",", "frame_interval", ",", "reference_frame_index", "+", "te", ",", "my_scene_token", ",", "int", "(", "frame_number", "-", "frame_interval", "*", "reference_frame_index", ")", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "False", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "# logging.error('MULTI FRAME YES INTERVAL ' + str(int(frame_number - frame_interval*reference_frame_index)))", "\n", "\n", "                    ", "ref_ind", "=", "reference_frame_index", "\n", "batch_image", ",", "batch_tf_transforms1", ",", "batch_tf_transforms2", ",", "batch_tf_transforms3", ",", "batch_separate_covers", ",", "batch_coordinate_transforms", ",", "batch_ref_bev_labels", "=", "overall_eval_iterator", "(", "ref_ind", ",", "frame_interval", ",", "num_frames", ",", "my_scene_token", ",", "int", "(", "frame_number", "-", "frame_interval", "*", "reference_frame_index", ")", ",", "single_frame", "=", "False", ",", "apply_interval", "=", "True", ")", "\n", "\n", "# logging.error('WE GOT THE STUFF')", "\n", "", "", "feed_dict", "=", "{", "\n", "\n", "\n", "training_time_placeholder", ":", "False", ",", "\n", "my_training_placeholder", ":", "False", ",", "\n", "\n", "images_placeholder", ":", "batch_image", ",", "\n", "\n", "bev_transforms_placeholder", ":", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", ",", "\n", "reference_frame_index_pl", ":", "np", ".", "int32", "(", "ref_ind", ")", ",", "\n", "separate_covers_placeholder", ":", "batch_separate_covers", ",", "\n", "ground_transforms_placeholder1", ":", "batch_tf_transforms1", ",", "\n", "ground_transforms_placeholder2", ":", "batch_tf_transforms2", ",", "\n", "ground_transforms_placeholder3", ":", "batch_tf_transforms3", ",", "\n", "coordinate_ground_transforms_placeholder", ":", "batch_coordinate_transforms", ",", "\n", "\n", "\n", "}", "\n", "\n", "masks_v", ",", "side_masks_v", ",", "side_occ_masks_v", ",", "projected_estimates_v", ",", "combined_projected_estimates_v", ",", "side_obj_softmaxed_v", ",", "projected_obj_v", "=", "sess", ".", "run", "(", "[", "masks", ",", "\n", "side_masks", ",", "side_occ_masks", ",", "projected_estimates", ",", "\n", "combined_projected_estimates", ",", "side_obj_softmaxed", ",", "projected_obj_estimates", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "#            logging.error('DEC OUTPUT ' + str(temp_dec_output.shape))", "\n", "\n", "thresh_list", "=", "[", "0.5", ",", "0.55", ",", "0.45", ",", "0.7", ",", "0.5", ",", "0.1", ",", "0.25", ",", "0.5", "]", "\n", "\n", "sample_results", "=", "[", "]", "\n", "squeezed_masks", "=", "np", ".", "squeeze", "(", "masks_v", ")", "\n", "static_estimates", "=", "np", ".", "uint8", "(", "squeezed_masks", "[", "...", ",", ":", "exp_config", ".", "num_static_classes", "]", ">", "thresh_list", "[", "0", "]", ")", "\n", "\n", "temp_object_estimates", "=", "squeezed_masks", "[", "...", ",", "exp_config", ".", "num_static_classes", ":", "exp_config", ".", "num_bev_classes", "]", "\n", "\n", "# logging.error('TEMP OBJ ' + str(temp_object_estimates))", "\n", "\n", "object_estimates", "=", "np", ".", "zeros", "(", "(", "temp_object_estimates", ".", "shape", "[", "0", "]", ",", "temp_object_estimates", ".", "shape", "[", "1", "]", ",", "exp_config", ".", "num_object_classes", ")", ")", "\n", "for", "k", "in", "range", "(", "exp_config", ".", "num_object_classes", ")", ":", "\n", "                ", "object_estimates", "[", "...", ",", "k", "]", "=", "np", ".", "uint8", "(", "temp_object_estimates", "[", "...", ",", "k", "]", ">", "(", "thresh_list", "[", "k", "+", "1", "]", ")", ")", "\n", "\n", "", "bg_estimate", "=", "1", "-", "np", ".", "clip", "(", "np", ".", "sum", "(", "object_estimates", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "0", ",", "1", ")", "\n", "\n", "hard_estimates", "=", "np", ".", "concatenate", "(", "[", "static_estimates", ",", "object_estimates", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "object_estimates", "=", "np", ".", "concatenate", "(", "[", "object_estimates", ",", "bg_estimate", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "object_stats", "=", "utils", ".", "get_confusion", "(", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "exp_config", ".", "num_static_classes", ":", "exp_config", ".", "num_bev_classes", "]", ")", ",", "object_estimates", ",", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "+", "1", "]", ")", ",", "mask_iou", "=", "exp_config", ".", "use_occlusion", ")", "\n", "\n", "\n", "\n", "for", "k", "in", "range", "(", "exp_config", ".", "num_bev_classes", ")", ":", "\n", "\n", "                ", "all_stats", ",", "void_pixels", "=", "utils", ".", "get_all_stats", "(", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "k", "]", ")", ",", "hard_estimates", "[", "...", ",", "k", "]", ",", "np", ".", "squeeze", "(", "batch_ref_bev_labels", "[", "...", ",", "exp_config", ".", "num_bev_classes", "+", "1", "]", ")", ",", "mask_iou", "=", "exp_config", ".", "use_occlusion", ")", "\n", "sample_results", ".", "append", "(", "all_stats", ")", "\n", "\n", "\n", "", "scene_static_results", ".", "append", "(", "np", ".", "array", "(", "sample_results", ")", ")", "\n", "scene_object_results", ".", "append", "(", "object_stats", ")", "\n", "# occ_scene_results.append(occ_all_stats)", "\n", "\n", "\n", "\n", "", "seq_static_j1", "=", "np", ".", "array", "(", "scene_static_results", ")", "\n", "seq_object_j1", "=", "np", ".", "array", "(", "scene_object_results", ")", "\n", "\n", "\n", "all_static_j1s", ".", "append", "(", "np", ".", "squeeze", "(", "seq_static_j1", ")", ")", "\n", "all_object_j1s", ".", "append", "(", "np", ".", "squeeze", "(", "seq_object_j1", ")", ")", "\n", "\n", "\n", "\n", "\n", "temp_res", "=", "seq_static_j1", "[", "...", ",", "2", "]", "/", "(", "seq_static_j1", "[", "...", ",", "2", "]", "+", "seq_static_j1", "[", "...", ",", "3", "]", "+", "seq_static_j1", "[", "...", ",", "4", "]", "+", "0.0001", ")", "\n", "\n", "\n", "temp_string", "=", "\"Iteration : \"", "+", "str", "(", "iteration", ")", "+", "\" : Scene \"", "+", "str", "(", "my_scene_token", ")", "+", "\" - j1: \"", "+", "str", "(", "np", ".", "mean", "(", "temp_res", ",", "axis", "=", "0", ")", ")", "\n", "# temp_string = \" : Scene \" + str(my_scene_token)+' best res : '+str(np.max(np.sum(temp_res,axis=-1)/np.sum(exists,axis=-1),axis=0)) + ' at ' +str(frame_numbers_list[np.argmax(np.sum(temp_res,axis=-1)/np.sum(exists,axis=-1),axis=0)]) ", "\n", "\n", "\n", "\n", "res_strings", ".", "append", "(", "temp_string", ")", "\n", "logging", ".", "error", "(", "temp_string", ")", "\n", "write_to_txt_file", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val_results.txt'", ")", ",", "[", "temp_string", "]", ")", "\n", "\n", "# to_return = all_j1s", "\n", "\n", "# logging.error('ALL J1 ' + str(all_j1s))", "\n", "", "tot_static_j1", "=", "np", ".", "concatenate", "(", "all_static_j1s", ",", "axis", "=", "0", ")", "\n", "tot_object_j1", "=", "np", ".", "concatenate", "(", "all_object_j1s", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "tp", "=", "tot_static_j1", "[", "...", ",", "2", "]", "\n", "fp", "=", "tot_static_j1", "[", "...", ",", "3", "]", "\n", "fn", "=", "tot_static_j1", "[", "...", ",", "4", "]", "\n", "tn", "=", "tot_static_j1", "[", "...", ",", "5", "]", "\n", "\n", "tp_rate", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "fp_rate", "=", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "tn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "tp_rate", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "fp_rate", "=", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "tn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "precision", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "# take_all_j = np.mean(j,axis=0)", "\n", "confuse_iou", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "/", "(", "np", ".", "sum", "(", "tp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fp", ",", "axis", "=", "0", ")", "+", "np", ".", "sum", "(", "fn", ",", "axis", "=", "0", ")", "+", "0.0001", ")", "\n", "\n", "\n", "object_raw", "=", "np", ".", "sum", "(", "tot_object_j1", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "temp_string", "=", "'Static j : '", "+", "str", "(", "confuse_iou", ")", "+", "'\\n'", "+", "' Static tp_rate : '", "+", "str", "(", "tp_rate", ")", "+", "'\\n'", "+", "' Static fp_rate : '", "+", "str", "(", "fp_rate", ")", "+", "'\\n'", "+", "' Static precision : '", "+", "str", "(", "precision", ")", "+", "'\\n'", "+", "'Object confuse : '", "+", "str", "(", "object_raw", ")", "\n", "\n", "logging", ".", "error", "(", "temp_string", ")", "\n", "res_strings", ".", "append", "(", "temp_string", ")", "\n", "write_to_txt_file", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'confuse_results.txt'", ")", ",", "res_strings", ")", "\n", "return", "confuse_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.main": [[782, 793], ["shutil.copy", "argoverse_test.run_training", "tensorflow.gfile.Exists", "tensorflow.gfile.MakeDirs"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.argoverse_test.run_training"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "continue_run", "=", "True", "\n", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "log_dir", ")", ":", "\n", "        ", "tf", ".", "gfile", ".", "MakeDirs", "(", "log_dir", ")", "\n", "continue_run", "=", "False", "\n", "\n", "# Copy experiment config file", "\n", "", "shutil", ".", "copy", "(", "exp_config", ".", "__file__", ",", "log_dir", ")", "\n", "\n", "run_training", "(", "continue_run", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.get_whole_mask": [[26, 35], ["numpy.ones", "range", "len", "nuscenes_helper.get_mask"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.get_mask"], ["def", "get_whole_mask", "(", "cur_list", ",", "img_size", ")", ":", "\n", "\n", "    ", "mask", "=", "np", ".", "ones", "(", "img_size", ",", "np", ".", "uint8", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "cur_list", ")", ")", ":", "\n", "        ", "temp_mask", "=", "1", "-", "get_mask", "(", "cur_list", "[", "k", "]", ",", "img_size", ")", "\n", "mask", "=", "mask", "*", "temp_mask", "\n", "\n", "", "return", "1", "-", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.get_mask": [[36, 57], ["numpy.array", "numpy.zeros", "skimage.draw.polygon", "tuple"], "function", ["None"], ["", "def", "get_mask", "(", "corners", ",", "img_size", ")", ":", "\n", "\n", "\n", "    ", "corners_ar", "=", "np", ".", "array", "(", "corners", ")", "\n", "\n", "\n", "\n", "corners_ar", "=", "corners_ar", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "img_size", ",", "np", ".", "uint8", ")", "\n", "\n", "#    logging.error('About to get the polygon')", "\n", "\n", "rr", ",", "cc", "=", "skimage_polygon", "(", "corners_ar", "[", ":", ",", "0", "]", ",", "corners_ar", "[", ":", ",", "1", "]", ",", "shape", "=", "tuple", "(", "img_size", ")", ")", "\n", "\n", "\n", "#    logging.error('Polygon obtained')", "\n", "mask", "[", "rr", ",", "cc", "]", "=", "1", "\n", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.get_image_and_mask": [[60, 87], ["nuscenes_helper.render_map_in_image", "numpy.zeros", "range", "len", "len", "numpy.zeros", "nuscenes_helper.get_whole_mask", "numpy.float32", "len", "numpy.zeros", "nuscenes_helper.get_whole_mask", "len", "len"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.render_map_in_image", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.get_whole_mask", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.get_whole_mask"], ["", "def", "get_image_and_mask", "(", "nusc", ",", "sample_token", ",", "map_api", ",", "layer_names", "=", "[", "'drivable_area'", ",", "'ped_crossing'", ",", "'walkway'", ",", "'carpark_area'", ",", "'road_segment'", ",", "'lane'", "]", ",", "camera_channel", "=", "'CAM_FRONT'", ")", ":", "\n", "\n", "    ", "np_img", ",", "vertices_per_layer", ",", "my_lidar_mask", "=", "render_map_in_image", "(", "nusc", ",", "map_api", ",", "sample_token", ",", "layer_names", "=", "layer_names", ",", "camera_channel", "=", "camera_channel", ")", "\n", "\n", "#    logging.error('Image and map are rendered')", "\n", "\n", "total_mask", "=", "np", ".", "zeros", "(", "(", "np_img", ".", "shape", "[", "0", "]", ",", "np_img", ".", "shape", "[", "1", "]", ",", "len", "(", "layer_names", ")", "+", "2", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "layer_names", ")", ")", ":", "\n", "        ", "layer_name", "=", "layer_names", "[", "k", "]", "\n", "cur_list", "=", "vertices_per_layer", "[", "layer_name", "]", "\n", "if", "len", "(", "cur_list", ")", "<", "1", ":", "\n", "            ", "layer_mask", "=", "np", ".", "zeros", "(", "(", "np_img", ".", "shape", "[", "0", "]", ",", "np_img", ".", "shape", "[", "1", "]", ")", ",", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "layer_mask", "=", "get_whole_mask", "(", "cur_list", ",", "np_img", ".", "shape", "[", "0", ":", "2", "]", ")", "\n", "", "total_mask", "[", ":", ",", ":", ",", "k", "]", "=", "layer_mask", "\n", "\n", "", "layer_name", "=", "'visible'", "\n", "cur_list", "=", "vertices_per_layer", "[", "layer_name", "]", "\n", "if", "len", "(", "cur_list", ")", "<", "1", ":", "\n", "        ", "layer_mask", "=", "np", ".", "zeros", "(", "(", "np_img", ".", "shape", "[", "0", "]", ",", "np_img", ".", "shape", "[", "1", "]", ")", ",", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "layer_mask", "=", "get_whole_mask", "(", "cur_list", ",", "np_img", ".", "shape", "[", "0", ":", "2", "]", ")", "\n", "", "total_mask", "[", ":", ",", ":", ",", "len", "(", "layer_names", ")", "]", "=", "layer_mask", "\n", "\n", "total_mask", "[", ":", ",", ":", ",", "-", "1", "]", "=", "my_lidar_mask", "\n", "return", "np", ".", "float32", "(", "np_img", ")", ",", "total_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.view_points": [[88, 125], ["numpy.eye", "numpy.concatenate", "numpy.dot", "numpy.ones", "points[].repeat().reshape", "points[].repeat"], "function", ["None"], ["", "def", "view_points", "(", "points", ",", "view", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    This is a helper class that maps 3d points to a 2d plane. It can be used to implement both perspective and\n    orthographic projections. It first applies the dot product between the points and the view. By convention,\n    the view should be such that the data is projected onto the first 2 axis. It then optionally applies a\n    normalization along the third dimension.\n    For a perspective projection the view should be a 3x3 camera matrix, and normalize=True\n    For an orthographic projection with translation the view is a 3x4 matrix and normalize=False\n    For an orthographic projection without translation the view is a 3x3 matrix (optionally 3x4 with last columns\n     all zeros) and normalize=False\n    :param points: <np.float32: 3, n> Matrix of points, where each point (x, y, z) is along each column.\n    :param view: <np.float32: n, n>. Defines an arbitrary projection (n <= 4).\n        The projection should be such that the corners are projected onto the first 2 axis.\n    :param normalize: Whether to normalize the remaining coordinate (along the third axis).\n    :return: <np.float32: 3, n>. Mapped point. If normalize=False, the third coordinate is the height.\n    \"\"\"", "\n", "\n", "assert", "view", ".", "shape", "[", "0", "]", "<=", "4", "\n", "assert", "view", ".", "shape", "[", "1", "]", "<=", "4", "\n", "assert", "points", ".", "shape", "[", "0", "]", "==", "3", "\n", "\n", "viewpad", "=", "np", ".", "eye", "(", "4", ")", "\n", "viewpad", "[", ":", "view", ".", "shape", "[", "0", "]", ",", ":", "view", ".", "shape", "[", "1", "]", "]", "=", "view", "\n", "\n", "nbr_points", "=", "points", ".", "shape", "[", "1", "]", "\n", "\n", "# Do operation in homogenous coordinates.", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "points", ",", "np", ".", "ones", "(", "(", "1", ",", "nbr_points", ")", ")", ")", ")", "\n", "points", "=", "np", ".", "dot", "(", "viewpad", ",", "points", ")", "\n", "points", "=", "points", "[", ":", "3", ",", ":", "]", "\n", "\n", "\n", "norm_const", "=", "points", "[", "2", ":", "3", ",", ":", "]", "\n", "if", "normalize", ":", "\n", "        ", "points", "=", "points", "/", "points", "[", "2", ":", "3", ",", ":", "]", ".", "repeat", "(", "3", ",", "0", ")", ".", "reshape", "(", "3", ",", "nbr_points", ")", "\n", "\n", "", "return", "points", ",", "norm_const", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper._clip_points_behind_camera": [[128, 193], ["range", "numpy.array().transpose", "np.array().transpose.append", "indices_clipped.append", "numpy.array", "all", "np.array().transpose.append", "indices_clipped.append", "np.array().transpose.append", "len", "numpy.abs", "np.array().transpose.append", "np.array().transpose.append", "all", "len"], "function", ["None"], ["", "def", "_clip_points_behind_camera", "(", "points", ",", "near_plane", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Perform clipping on polygons that are partially behind the camera.\n        This method is necessary as the projection does not work for points behind the camera.\n        Hence we compute the line between the point and the camera and follow that line until we hit the near plane of\n        the camera. Then we use that point.\n        :param points: <np.float32: 3, n> Matrix of points, where each point (x, y, z) is along each column.\n        :param near_plane: If we set the near_plane distance of the camera to 0 then some points will project to\n            infinity. Therefore we need to clip these points at the near plane.\n        :return: The clipped version of the polygon. This may have fewer points than the original polygon if some lines\n            were entirely behind the polygon.\n        \"\"\"", "\n", "points_clipped", "=", "[", "]", "\n", "indices_clipped", "=", "[", "]", "\n", "# Loop through each line on the polygon.", "\n", "# For each line where exactly 1 endpoints is behind the camera, move the point along the line until", "\n", "# it hits the near plane of the camera (clipping).", "\n", "assert", "points", ".", "shape", "[", "0", "]", "==", "3", "\n", "point_count", "=", "points", ".", "shape", "[", "1", "]", "\n", "for", "line_1", "in", "range", "(", "point_count", ")", ":", "\n", "            ", "line_2", "=", "(", "line_1", "+", "1", ")", "%", "point_count", "\n", "point_1", "=", "points", "[", ":", ",", "line_1", "]", "\n", "point_2", "=", "points", "[", ":", ",", "line_2", "]", "\n", "z_1", "=", "point_1", "[", "2", "]", "\n", "z_2", "=", "point_2", "[", "2", "]", "\n", "\n", "if", "z_1", ">=", "near_plane", "and", "z_2", ">=", "near_plane", ":", "\n", "# Both points are in front.", "\n", "# Add both points unless the first is already added.", "\n", "                ", "if", "len", "(", "points_clipped", ")", "==", "0", "or", "all", "(", "points_clipped", "[", "-", "1", "]", "!=", "point_1", ")", ":", "\n", "                    ", "points_clipped", ".", "append", "(", "point_1", ")", "\n", "indices_clipped", ".", "append", "(", "line_1", ")", "\n", "", "points_clipped", ".", "append", "(", "point_2", ")", "\n", "indices_clipped", ".", "append", "(", "line_2", ")", "\n", "", "elif", "z_1", "<", "near_plane", "and", "z_2", "<", "near_plane", ":", "\n", "# Both points are in behind.", "\n", "# Don't add anything.", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "# One point is in front, one behind.", "\n", "# By convention pointA is behind the camera and pointB in front.", "\n", "                ", "if", "z_1", "<=", "z_2", ":", "\n", "                    ", "point_a", "=", "points", "[", ":", ",", "line_1", "]", "\n", "point_b", "=", "points", "[", ":", ",", "line_2", "]", "\n", "", "else", ":", "\n", "                    ", "point_a", "=", "points", "[", ":", ",", "line_2", "]", "\n", "point_b", "=", "points", "[", ":", ",", "line_1", "]", "\n", "", "z_a", "=", "point_a", "[", "2", "]", "\n", "z_b", "=", "point_b", "[", "2", "]", "\n", "\n", "# Clip line along near plane.", "\n", "pointdiff", "=", "point_b", "-", "point_a", "\n", "alpha", "=", "(", "near_plane", "-", "z_b", ")", "/", "(", "z_a", "-", "z_b", ")", "\n", "clipped", "=", "point_a", "+", "(", "1", "-", "alpha", ")", "*", "pointdiff", "\n", "assert", "np", ".", "abs", "(", "clipped", "[", "2", "]", "-", "near_plane", ")", "<", "1e-6", "\n", "\n", "# Add the first point (if valid and not duplicate), the clipped point and the second point (if valid).", "\n", "if", "z_1", ">=", "near_plane", "and", "(", "len", "(", "points_clipped", ")", "==", "0", "or", "all", "(", "points_clipped", "[", "-", "1", "]", "!=", "point_1", ")", ")", ":", "\n", "                    ", "points_clipped", ".", "append", "(", "point_1", ")", "\n", "", "points_clipped", ".", "append", "(", "clipped", ")", "\n", "if", "z_2", ">=", "near_plane", ":", "\n", "                    ", "points_clipped", ".", "append", "(", "point_2", ")", "\n", "\n", "", "", "", "points_clipped", "=", "np", ".", "array", "(", "points_clipped", ")", ".", "transpose", "(", ")", "\n", "return", "points_clipped", ",", "indices_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.render_polygon": [[209, 213], ["numpy.ascontiguousarray().round().astype", "cv2.fillConvexPoly", "numpy.array", "numpy.ascontiguousarray().round", "numpy.ascontiguousarray", "skimage.draw.polygon.exterior.coords"], "function", ["None"], ["def", "render_polygon", "(", "mask", ",", "polygon", ",", "extents", ",", "resolution", ",", "value", "=", "1", ")", ":", "\n", "    ", "polygon", "=", "(", "polygon", "-", "np", ".", "array", "(", "extents", "[", ":", "2", "]", ")", ")", "/", "resolution", "\n", "polygon", "=", "np", ".", "ascontiguousarray", "(", "polygon", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "mask", ",", "polygon", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.render_shapely_polygon": [[215, 230], ["nuscenes_helper.render_polygon", "nuscenes_helper.render_polygon", "nuscenes_helper.render_shapely_polygon"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.render_polygon", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.render_polygon", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.render_shapely_polygon"], ["", "def", "render_shapely_polygon", "(", "mask", ",", "polygon", ",", "extents", ",", "resolution", ")", ":", "\n", "\n", "    ", "if", "polygon", ".", "geom_type", "==", "'Polygon'", ":", "\n", "\n", "# Render exteriors", "\n", "        ", "render_polygon", "(", "mask", ",", "polygon", ".", "exterior", ".", "coords", ",", "extents", ",", "resolution", ",", "1", ")", "\n", "\n", "# Render interiors", "\n", "for", "hole", "in", "polygon", ".", "interiors", ":", "\n", "            ", "render_polygon", "(", "mask", ",", "hole", ".", "coords", ",", "extents", ",", "resolution", ",", "0", ")", "\n", "\n", "# Handle the case of compound shapes", "\n", "", "", "else", ":", "\n", "        ", "for", "poly", "in", "polygon", ":", "\n", "            ", "render_shapely_polygon", "(", "mask", ",", "poly", ",", "extents", ",", "resolution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.expand_image": [[233, 238], ["numpy.zeros", "int", "int", "int", "int"], "function", ["None"], ["", "", "", "def", "expand_image", "(", "img", ",", "new_sizes", ",", "left_up", ")", ":", "\n", "\n", "    ", "new_img", "=", "np", ".", "zeros", "(", "(", "new_sizes", "[", "0", "]", ",", "new_sizes", "[", "1", "]", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "new_img", "[", "int", "(", "left_up", "[", "0", "]", ")", ":", "int", "(", "left_up", "[", "0", "]", "+", "img", ".", "shape", "[", "0", "]", ")", ",", "int", "(", "left_up", "[", "1", "]", ")", ":", "int", "(", "left_up", "[", "1", "]", "+", "img", ".", "shape", "[", "1", "]", ")", ",", ":", "]", "=", "img", "\n", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.render_map_in_image": [[241, 731], ["dict", "nusc.get", "nusc.get", "nusc.get", "nusc.get", "nusc.get_sample_data_path", "PIL.Image.open", "numpy.array", "nusc.get", "numpy.array", "nusc.get", "map_api.get_records_in_patch", "shapely.geometry.box", "numpy.array().reshape", "numpy.array", "numpy.vstack", "nuscenes_helper.view_points", "numpy.ones", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "layer_list.append", "numpy.array", "numpy.vstack", "numpy.dot", "numpy.array().reshape", "numpy.dot", "shapely.geometry.Polygon", "nuscenes_helper.lidar_func", "nuscenes_helper.get_occlusion_mask", "nuscenes_helper.view_points", "numpy.ones", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.zeros", "range", "range", "print", "numpy.array", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.array().reshape", "numpy.squeeze", "numpy.array", "numpy.clip", "numpy.clip", "shapely.geometry.Point", "lidar_poly_points.append", "numpy.array", "zip", "numpy.zeros", "numpy.array", "zip", "int", "int", "map_api.get", "numpy.ones", "numpy.array", "numpy.array().reshape", "int", "int", "int", "int", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "map_api.extract_polygon", "hasattr", "hasattr", "shapely.geometry.Polygon.intersects", "numpy.array", "logging.error", "logging.error", "shapely.geometry.Polygon.intersection", "hasattr", "logging.error", "numpy.array", "numpy.vstack", "numpy.dot", "numpy.dot", "numpy.copy", "numpy.all", "nuscenes_helper.view_points", "numpy.ones", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "shapely.geometry.Polygon", "layer_list.append", "str", "str", "str", "numpy.array", "numpy.vstack", "numpy.dot", "numpy.dot", "numpy.copy", "numpy.all", "nuscenes_helper.view_points", "numpy.ones", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "shapely.geometry.Polygon", "layer_list.append", "range", "numpy.zeros", "numpy.array().reshape", "numpy.array().reshape", "nuscenes_helper._clip_points_behind_camera", "numpy.any", "numpy.all", "numpy.any", "numpy.array", "hasattr", "hasattr", "range", "numpy.zeros", "numpy.array().reshape", "numpy.array().reshape", "nuscenes_helper._clip_points_behind_camera", "numpy.any", "numpy.all", "numpy.any", "numpy.array", "len", "warped_polygon_proj.intersection.contains", "len", "numpy.ones", "numpy.array", "range", "len", "numpy.logical_not", "numpy.logical_not", "zip", "len", "temp_poly.contains", "len", "numpy.ones", "numpy.array", "range", "len", "numpy.logical_not", "numpy.logical_not", "zip", "heights_list.append", "selected_lidars_list.append", "numpy.argmin", "numpy.array", "pyquaternion.Quaternion", "numpy.array", "pyquaternion.Quaternion", "heights_list.append", "selected_lidars_list.append", "numpy.argmin", "numpy.array", "pyquaternion.Quaternion", "numpy.array", "pyquaternion.Quaternion", "numpy.squeeze", "numpy.square", "numpy.square", "numpy.squeeze", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.view_points", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.lidar_func", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.get_occlusion_mask", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.view_points", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.view_points", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.view_points", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper._clip_points_behind_camera", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper._clip_points_behind_camera"], ["", "def", "render_map_in_image", "(", "nusc", ",", "map_api", ",", "sample_token", ",", "layer_names", ",", "\n", "camera_channel", ":", "str", "=", "'CAM_FRONT'", ",", "\n", "alpha", ":", "float", "=", "0.3", ",", "\n", "patch_radius", ":", "float", "=", "1000", ",", "\n", "min_polygon_area", ":", "float", "=", "1000", ",", "\n", "render_behind_cam", ":", "bool", "=", "True", ",", "\n", "render_outside_im", ":", "bool", "=", "True", ",", "\n", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", "out_path", ":", "str", "=", "None", ")", "->", "None", ":", "\n", "\n", "\n", "        ", "near_plane", "=", "1", "\n", "min_dist", "=", "1.0", "\n", "lidar_dist_thresh", "=", "1", "\n", "lidar_height_thresh", "=", "1", "\n", "apply_lidar_aligment", "=", "True", "\n", "vertices_per_layer", "=", "dict", "(", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Warning: Note that the projections are not always accurate as the localization is in 2d.'", ")", "\n", "\n", "# Default layers.", "\n", "\n", "#        layer_names = ['drivable_area']", "\n", "#        layer_names = ['walkway','drivable_area']", "\n", "\n", "\n", "\n", "# Check layers whether we can render them.", "\n", "", "for", "layer_name", "in", "layer_names", ":", "\n", "            ", "assert", "layer_name", "in", "map_api", ".", "non_geometric_polygon_layers", ",", "'Error: Can only render non-geometry polygons: %s'", "%", "layer_names", "\n", "\n", "# Check that NuScenesMap was loaded for the correct location.", "\n", "", "sample_record", "=", "nusc", ".", "get", "(", "'sample'", ",", "sample_token", ")", "\n", "scene_record", "=", "nusc", ".", "get", "(", "'scene'", ",", "sample_record", "[", "'scene_token'", "]", ")", "\n", "log_record", "=", "nusc", ".", "get", "(", "'log'", ",", "scene_record", "[", "'log_token'", "]", ")", "\n", "log_location", "=", "log_record", "[", "'location'", "]", "\n", "assert", "map_api", ".", "map_name", "==", "log_location", ",", "'Error: NuScenesMap loaded for location %s, should be %s!'", "%", "(", "map_api", ".", "map_name", ",", "log_location", ")", "\n", "\n", "# Grab the front camera image and intrinsics.", "\n", "cam_token", "=", "sample_record", "[", "'data'", "]", "[", "camera_channel", "]", "\n", "cam_record", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "cam_token", ")", "\n", "cam_path", "=", "nusc", ".", "get_sample_data_path", "(", "cam_token", ")", "\n", "im", "=", "Image", ".", "open", "(", "cam_path", ")", "\n", "#        im = Image.open(cam_path)", "\n", "np_img", "=", "np", ".", "array", "(", "im", ",", "np", ".", "uint8", ")", "\n", "\n", "im_size", "=", "im", ".", "size", "\n", "cs_record", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "cam_record", "[", "'calibrated_sensor_token'", "]", ")", "\n", "cam_intrinsic", "=", "np", ".", "array", "(", "cs_record", "[", "'camera_intrinsic'", "]", ")", "\n", "\n", "# Retrieve the current map.", "\n", "poserecord", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "cam_record", "[", "'ego_pose_token'", "]", ")", "\n", "ego_pose", "=", "poserecord", "[", "'translation'", "]", "\n", "box_coords", "=", "(", "\n", "ego_pose", "[", "0", "]", "-", "patch_radius", ",", "\n", "ego_pose", "[", "1", "]", "-", "patch_radius", ",", "\n", "ego_pose", "[", "0", "]", "+", "patch_radius", ",", "\n", "ego_pose", "[", "1", "]", "+", "patch_radius", ",", "\n", ")", "\n", "records_in_patch", "=", "map_api", ".", "get_records_in_patch", "(", "box_coords", ",", "layer_names", ",", "'intersect'", ")", "\n", "\n", "# Init axes.", "\n", "#        fig = plt.figure(figsize=(9, 16))", "\n", "#        ax = fig.add_axes([0, 0, 1, 1])", "\n", "#        ax.set_xlim(0, im_size[0])", "\n", "#        ax.set_ylim(0, im_size[1])", "\n", "#        ax.imshow(im)", "\n", "#        ax.invert_yaxis()", "\n", "extents", "=", "[", "-", "25.", ",", "1.", ",", "25.", ",", "50.", "]", "\n", "resolution", "=", "0.25", "\n", "\n", "map_patch", "=", "box", "(", "*", "extents", ")", "\n", "\n", "my_cam_trans", "=", "np", ".", "array", "(", "cs_record", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "patch_points", "=", "np", ".", "array", "(", "map_patch", ".", "exterior", ".", "xy", ")", "\n", "patch_points", "=", "np", ".", "vstack", "(", "(", "patch_points", "[", "0", ",", "...", "]", ",", "np", ".", "ones", "(", "(", "1", ",", "patch_points", ".", "shape", "[", "1", "]", ")", ")", "*", "my_cam_trans", "[", "2", "]", ",", "patch_points", "[", "1", ",", "...", "]", ",", ")", ")", "\n", "\n", "\n", "points", ",", "norm_const", "=", "view_points", "(", "patch_points", ",", "cam_intrinsic", ",", "normalize", "=", "True", ")", "\n", "\n", "# Skip polygons where all points are outside the image.", "\n", "# Leave a margin of 1 pixel for aesthetic reasons.", "\n", "inside", "=", "np", ".", "ones", "(", "points", ".", "shape", "[", "1", "]", ",", "dtype", "=", "bool", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "0", ",", ":", "]", ">", "1", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "0", ",", ":", "]", "<", "im_size", "[", "0", "]", "-", "1", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "1", ",", ":", "]", ">", "1", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "1", ",", ":", "]", "<", "im_size", "[", "1", "]", "-", "1", ")", "\n", "\n", "\n", "points", "=", "points", "[", ":", "2", ",", ":", "]", "\n", "points", "=", "[", "(", "p0", ",", "p1", ")", "for", "(", "p0", ",", "p1", ")", "in", "zip", "(", "points", "[", "0", "]", ",", "points", "[", "1", "]", ")", "]", "\n", "#        label = 'visible'", "\n", "#        polygon_proj = Polygon(points)", "\n", "#        ax.add_patch(descartes.PolygonPatch(polygon_proj, fc=color_map[layer_name], alpha=alpha,", "\n", "#                                                                    label=label))", "\n", "\n", "layer_list", "=", "[", "]", "\n", "layer_list", ".", "append", "(", "np", ".", "array", "(", "points", ")", ")", "\n", "vertices_per_layer", "[", "'visible'", "]", "=", "layer_list", "\n", "\n", "patch_points", "=", "np", ".", "array", "(", "map_patch", ".", "exterior", ".", "xy", ")", "\n", "patch_points", "=", "np", ".", "vstack", "(", "(", "patch_points", "[", "0", ",", "...", "]", ",", "np", ".", "zeros", "(", "(", "1", ",", "patch_points", ".", "shape", "[", "1", "]", ")", ")", ",", "patch_points", "[", "1", ",", "...", "]", ")", ")", "\n", "\n", "warped_points", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "Quaternion", "(", "cs_record", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", ")", ",", "patch_points", ")", "\n", "\n", "my_cam_trans", "=", "np", ".", "array", "(", "cs_record", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "#                    my_cam_trans[-1] = 0", "\n", "warped_points", "=", "warped_points", "+", "my_cam_trans", "\n", "warped_points", "[", "2", ",", "...", "]", "=", "0", "\n", "\n", "warped_points", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "Quaternion", "(", "poserecord", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", ")", ",", "warped_points", ")", "\n", "warped_points", "=", "warped_points", "+", "np", ".", "array", "(", "poserecord", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "warped_poly_points", "=", "[", "(", "p0", ",", "p1", ")", "for", "(", "p0", ",", "p1", ")", "in", "zip", "(", "warped_points", "[", "0", "]", ",", "warped_points", "[", "1", "]", ")", "]", "\n", "warped_polygon_proj", "=", "Polygon", "(", "warped_poly_points", ")", "\n", "\n", "\n", "\n", "my_pc_points", ",", "bev_lidar_points", "=", "lidar_func", "(", "sample_record", ",", "nusc", ")", "\n", "bev_lidar_points", "=", "bev_lidar_points", "[", ":", ",", "bev_lidar_points", "[", "2", ",", ":", "]", "<", "lidar_height_thresh", "]", "\n", "cropped_lidar_points", "=", "my_pc_points", "[", ":", ",", "my_pc_points", "[", "2", ",", ":", "]", ">", "0", "]", "\n", "#        occluded = get_occlusion_mask(np.transpose(my_pc_points,[1,0]), extents, resolution)", "\n", "selected_lidar", "=", "get_occlusion_mask", "(", "cropped_lidar_points", ",", "extents", ",", "resolution", ",", "np", ".", "squeeze", "(", "np", ".", "array", "(", "cs_record", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "[", "-", "1", "]", ")", ")", "\n", "points", ",", "_", "=", "view_points", "(", "selected_lidar", "[", ":", "3", ",", ":", "]", ",", "np", ".", "array", "(", "cs_record", "[", "'camera_intrinsic'", "]", ")", ",", "normalize", "=", "True", ")", "\n", "\n", "\n", "\n", "\n", "depths", "=", "selected_lidar", "[", "2", ",", ":", "]", "\n", "#        min_dist", "\n", "# Remove points that are either outside or behind the camera. Leave a margin of 1 pixel for aesthetic reasons.", "\n", "# Also make sure points are at least 1m in front of the camera to avoid seeing the lidar points on the camera", "\n", "# casing for non-keyframes which are slightly out of sync.", "\n", "\n", "#        intensities = selected_lidar[3, :]", "\n", "#        intensities = (intensities - np.min(intensities)) / (np.max(intensities) - np.min(intensities))", "\n", "#        intensities = intensities ** 0.1", "\n", "#        intensities = np.maximum(0, intensities - 0.5)", "\n", "#        coloring = intensities", "\n", "#        dot_size = 5", "\n", "mask", "=", "np", ".", "ones", "(", "depths", ".", "shape", "[", "0", "]", ",", "dtype", "=", "bool", ")", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "depths", ">", "min_dist", ")", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "points", "[", "0", ",", ":", "]", ">", "1", ")", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "points", "[", "0", ",", ":", "]", "<", "im", ".", "size", "[", "0", "]", "-", "1", ")", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "points", "[", "1", ",", ":", "]", ">", "1", ")", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "points", "[", "1", ",", ":", "]", "<", "im", ".", "size", "[", "1", "]", "-", "1", ")", "\n", "points", "=", "points", "[", ":", ",", "mask", "]", "\n", "\n", "my_lidar_mask", "=", "np", ".", "zeros", "(", "(", "im_size", "[", "1", "]", ",", "im_size", "[", "0", "]", ")", ")", "\n", "lidar_mask_res", "=", "50", "\n", "for", "k", "in", "range", "(", "points", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "row_start", "=", "int", "(", "points", "[", "1", ",", "k", "]", "//", "lidar_mask_res", ")", "*", "lidar_mask_res", "\n", "row_end", "=", "np", ".", "clip", "(", "int", "(", "(", "points", "[", "1", ",", "k", "]", "//", "lidar_mask_res", ")", "+", "1", ")", "*", "lidar_mask_res", ",", "0", ",", "im_size", "[", "1", "]", ")", "\n", "\n", "col_start", "=", "int", "(", "points", "[", "0", ",", "k", "]", "//", "lidar_mask_res", ")", "*", "lidar_mask_res", "\n", "col_end", "=", "np", ".", "clip", "(", "int", "(", "(", "points", "[", "0", ",", "k", "]", "//", "lidar_mask_res", ")", "+", "1", ")", "*", "lidar_mask_res", ",", "0", ",", "im_size", "[", "0", "]", ")", "\n", "\n", "my_lidar_mask", "[", "row_start", ":", "row_end", ",", "col_start", ":", "col_end", "]", "=", "1", "\n", "\n", "\n", "", "my_lidar_mask", "[", "-", "200", ":", ",", "int", "(", "im_size", "[", "0", "]", "/", "2", "-", "100", ")", ":", "int", "(", "im_size", "[", "0", "]", "/", "2", "+", "100", ")", "]", "=", "1", "\n", "\n", "#        coloring = coloring[mask]", "\n", "\n", "\n", "#        plt.scatter(points[0, :], points[1, :], c=coloring, s=dot_size)", "\n", "\n", "\n", "# Retrieve and render each record.", "\n", "\n", "\n", "lidar_poly_points", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "bev_lidar_points", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "lid_po", "=", "Point", "(", "bev_lidar_points", "[", "0", ",", "k", "]", ",", "bev_lidar_points", "[", "1", ",", "k", "]", ")", "\n", "lidar_poly_points", ".", "append", "(", "lid_po", ")", "\n", "\n", "", "for", "layer_name", "in", "layer_names", ":", "\n", "\n", "            ", "layer_list", "=", "[", "]", "\n", "for", "token", "in", "records_in_patch", "[", "layer_name", "]", ":", "\n", "\n", "\n", "\n", "                    ", "record", "=", "map_api", ".", "get", "(", "layer_name", ",", "token", ")", "\n", "if", "layer_name", "==", "'drivable_area'", ":", "\n", "                        ", "polygon_tokens", "=", "record", "[", "'polygon_tokens'", "]", "\n", "", "else", ":", "\n", "                        ", "polygon_tokens", "=", "[", "record", "[", "'polygon_token'", "]", "]", "\n", "\n", "", "for", "polygon_token", "in", "polygon_tokens", ":", "\n", "\n", "                        ", "try", ":", "\n", "                            ", "polygon", "=", "map_api", ".", "extract_polygon", "(", "polygon_token", ")", "\n", "\n", "#                            map_patch = box(*extents)", "\n", "#                            patch_points = np.array(map_patch.exterior.xy)", "\n", "#                            patch_points = np.vstack((patch_points[0,...], np.zeros((1, patch_points.shape[1])),patch_points[1,...]))", "\n", "#                            ", "\n", "#                            warped_points = np.dot(np.linalg.inv(Quaternion(cs_record['rotation']).rotation_matrix.T), patch_points)", "\n", "#                            ", "\n", "#                            my_cam_trans = np.array(cs_record['translation']).reshape((-1, 1))", "\n", "#        #                    my_cam_trans[-1] = 0", "\n", "#                            warped_points = warped_points + my_cam_trans", "\n", "#                            warped_points[2,...] = 0", "\n", "#                            ", "\n", "#                            warped_points = np.dot(np.linalg.inv(Quaternion(poserecord['rotation']).rotation_matrix.T), warped_points)", "\n", "#                            warped_points = warped_points + np.array(poserecord['translation']).reshape((-1, 1))", "\n", "#                            ", "\n", "#                            warped_poly_points = [(p0, p1) for (p0, p1) in zip(warped_points[0], warped_points[1])]", "\n", "#                            warped_polygon_proj = Polygon(warped_poly_points)", "\n", "\n", "if", "hasattr", "(", "polygon", ",", "'geoms'", ")", ":", "\n", "                                ", "logging", ".", "error", "(", "\"POLYGON HAS GEOMS \"", "+", "str", "(", "hasattr", "(", "polygon", ",", "'geoms'", ")", ")", ")", "\n", "", "if", "hasattr", "(", "warped_polygon_proj", ",", "'geoms'", ")", ":", "\n", "                                ", "logging", ".", "error", "(", "\"WARPED POLYGON HAS GEOMS \"", "+", "str", "(", "hasattr", "(", "warped_polygon_proj", ",", "'geoms'", ")", ")", ")", "\n", "\n", "\n", "", "if", "warped_polygon_proj", ".", "intersects", "(", "polygon", ")", ":", "\n", "#                        break", "\n", "                                ", "inter", "=", "warped_polygon_proj", ".", "intersection", "(", "polygon", ")", "\n", "#                                inter=polygon", "\n", "\n", "if", "hasattr", "(", "inter", ",", "'geoms'", ")", ":", "\n", "                                    ", "for", "temp_poly", "in", "inter", ".", "geoms", ":", "\n", "#                                        ", "\n", "#                                        ", "\n", "#                                        ", "\n", "\n", "                                        ", "points", "=", "np", ".", "array", "(", "temp_poly", ".", "exterior", ".", "xy", ")", "\n", "\n", "if", "apply_lidar_aligment", ":", "\n", "                                            ", "heights_list", "=", "[", "]", "\n", "selected_lidars_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "lidar_poly_points", ")", ")", ":", "\n", "                                                ", "lid_po", "=", "lidar_poly_points", "[", "k", "]", "\n", "if", "temp_poly", ".", "contains", "(", "lid_po", ")", ":", "\n", "                                                    ", "selected_height", "=", "bev_lidar_points", "[", "2", ",", "k", "]", "\n", "\n", "heights_list", ".", "append", "(", "selected_height", ")", "\n", "selected_lidars_list", ".", "append", "(", "np", ".", "squeeze", "(", "bev_lidar_points", "[", ":", ",", "k", "]", ")", ")", "\n", "#                                ", "\n", "#                                lidar_dist = np.square(points[0,k]-bev_lidar_points[0,:])+np.square(points[1,k]-bev_lidar_points[1,:])", "\n", "#                                ", "\n", "#                                nearest_lidar = np.argmin(lidar_dist)", "\n", "\n", "#                                nearest_dist = lidar_dist[nearest_lidar]", "\n", "#                                if nearest_dist < lidar_dist_thresh:", "\n", "#                                    selected_height = bev_lidar_points[2,nearest_lidar]", "\n", "#                                    heights_list.append(selected_height)", "\n", "\n", "\n", "#                                heights[:,k]=selected_height", "\n", "\n", "", "", "if", "len", "(", "heights_list", ")", ">", "0", ":", "\n", "                                                ", "heights", "=", "np", ".", "ones", "(", "(", "1", ",", "points", ".", "shape", "[", "1", "]", ")", ")", "\n", "selected_lidars", "=", "np", ".", "array", "(", "selected_lidars_list", ")", "\n", "for", "k", "in", "range", "(", "points", ".", "shape", "[", "1", "]", ")", ":", "\n", "                                                    ", "lidar_dist", "=", "np", ".", "square", "(", "points", "[", "0", ",", "k", "]", "-", "selected_lidars", "[", ":", ",", "0", "]", ")", "+", "np", ".", "square", "(", "points", "[", "1", ",", "k", "]", "-", "selected_lidars", "[", ":", ",", "1", "]", ")", "\n", "#                                ", "\n", "nearest_lidar", "=", "np", ".", "argmin", "(", "lidar_dist", ")", "\n", "\n", "\n", "selected_height", "=", "heights_list", "[", "nearest_lidar", "]", "\n", "\n", "\n", "heights", "[", ":", ",", "k", "]", "=", "selected_height", "\n", "\n", "\n", "\n", "#                                        heights = np.ones((1,points.shape[1]))*np.mean(heights_list)", "\n", "", "", "else", ":", "\n", "                                                ", "continue", "\n", "", "", "else", ":", "\n", "                                            ", "heights", "=", "np", ".", "zeros", "(", "(", "1", ",", "points", ".", "shape", "[", "1", "]", ")", ")", "\n", "#                                points = np.vstack((points, np.zeros((1, points.shape[1]))))", "\n", "", "points", "=", "np", ".", "vstack", "(", "(", "points", ",", "heights", ")", ")", "\n", "\n", "# Transform into the ego vehicle frame for the timestamp of the image.", "\n", "points", "=", "points", "-", "np", ".", "array", "(", "poserecord", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "points", "=", "np", ".", "dot", "(", "Quaternion", "(", "poserecord", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", ",", "points", ")", "\n", "\n", "# Transform into the camera.", "\n", "points", "=", "points", "-", "np", ".", "array", "(", "cs_record", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "points", "=", "np", ".", "dot", "(", "Quaternion", "(", "cs_record", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", ",", "points", ")", "\n", "\n", "\n", "\n", "camera_points", "=", "np", ".", "copy", "(", "points", ")", "\n", "\n", "# Remove points that are partially behind the camera.", "\n", "depths", "=", "points", "[", "2", ",", ":", "]", "\n", "#                    behind = ((depths < near_plane) | (depths > 25*np.sqrt(2)))", "\n", "behind", "=", "depths", "<", "near_plane", "\n", "if", "np", ".", "all", "(", "behind", ")", ":", "\n", "                                            ", "continue", "\n", "\n", "", "if", "render_behind_cam", ":", "\n", "# Perform clipping on polygons that are partially behind the camera.", "\n", "                                            ", "points", ",", "_", "=", "_clip_points_behind_camera", "(", "points", ",", "near_plane", ")", "\n", "", "elif", "np", ".", "any", "(", "behind", ")", ":", "\n", "# Otherwise ignore any polygon that is partially behind the camera.", "\n", "                                            ", "continue", "\n", "\n", "# Ignore polygons with less than 3 points after clipping.", "\n", "", "if", "len", "(", "points", ")", "==", "0", "or", "points", ".", "shape", "[", "1", "]", "<", "3", ":", "\n", "                                            ", "continue", "\n", "\n", "# Take the actual picture (matrix multiplication with camera-matrix + renormalization).", "\n", "", "points", ",", "norm_const", "=", "view_points", "(", "points", ",", "cam_intrinsic", ",", "normalize", "=", "True", ")", "\n", "\n", "# Skip polygons where all points are outside the image.", "\n", "# Leave a margin of 1 pixel for aesthetic reasons.", "\n", "inside", "=", "np", ".", "ones", "(", "points", ".", "shape", "[", "1", "]", ",", "dtype", "=", "bool", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "0", ",", ":", "]", ">", "1", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "0", ",", ":", "]", "<", "im", ".", "size", "[", "0", "]", "-", "1", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "1", ",", ":", "]", ">", "1", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "1", ",", ":", "]", "<", "im", ".", "size", "[", "1", "]", "-", "1", ")", "\n", "if", "render_outside_im", ":", "\n", "                                            ", "if", "np", ".", "all", "(", "np", ".", "logical_not", "(", "inside", ")", ")", ":", "\n", "                                                ", "continue", "\n", "", "", "else", ":", "\n", "                                            ", "if", "np", ".", "any", "(", "np", ".", "logical_not", "(", "inside", ")", ")", ":", "\n", "                                                ", "continue", "\n", "\n", "", "", "points", "=", "points", "[", ":", "2", ",", ":", "]", "\n", "points", "=", "[", "(", "p0", ",", "p1", ")", "for", "(", "p0", ",", "p1", ")", "in", "zip", "(", "points", "[", "0", "]", ",", "points", "[", "1", "]", ")", "]", "\n", "polygon_proj", "=", "Polygon", "(", "points", ")", "\n", "#                                polygon_proj = polygon_proj.intersection(non_occ_polygon_proj)", "\n", "# Filter small polygons", "\n", "if", "polygon_proj", ".", "area", "<", "min_polygon_area", ":", "\n", "                                            ", "continue", "\n", "", "layer_list", ".", "append", "(", "np", ".", "array", "(", "points", ")", ")", "\n", "#                                label = layer_name", "\n", "#                                ax.add_patch(descartes.PolygonPatch(polygon_proj, fc=color_map[layer_name], alpha=alpha,", "\n", "#                                                                    label=label))", "\n", "\n", "", "", "else", ":", "\n", "                                    ", "points", "=", "np", ".", "array", "(", "inter", ".", "exterior", ".", "xy", ")", "\n", "\n", "#                            heights = np.zeros((1,points.shape[1]),np.float32)", "\n", "\n", "if", "apply_lidar_aligment", ":", "\n", "                                        ", "heights_list", "=", "[", "]", "\n", "selected_lidars_list", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "lidar_poly_points", ")", ")", ":", "\n", "                                            ", "lid_po", "=", "lidar_poly_points", "[", "k", "]", "\n", "if", "inter", ".", "contains", "(", "lid_po", ")", ":", "\n", "                                                ", "selected_height", "=", "bev_lidar_points", "[", "2", ",", "k", "]", "\n", "\n", "heights_list", ".", "append", "(", "selected_height", ")", "\n", "selected_lidars_list", ".", "append", "(", "np", ".", "squeeze", "(", "bev_lidar_points", "[", ":", ",", "k", "]", ")", ")", "\n", "#                                ", "\n", "#                                lidar_dist = np.square(points[0,k]-bev_lidar_points[0,:])+np.square(points[1,k]-bev_lidar_points[1,:])", "\n", "#                                ", "\n", "#                                nearest_lidar = np.argmin(lidar_dist)", "\n", "\n", "#                                nearest_dist = lidar_dist[nearest_lidar]", "\n", "#                                if nearest_dist < lidar_dist_thresh:", "\n", "#                                    selected_height = bev_lidar_points[2,nearest_lidar]", "\n", "#                                    heights_list.append(selected_height)", "\n", "\n", "\n", "#                                heights[:,k]=selected_height", "\n", "\n", "", "", "if", "len", "(", "heights_list", ")", ">", "0", ":", "\n", "                                            ", "heights", "=", "np", ".", "ones", "(", "(", "1", ",", "points", ".", "shape", "[", "1", "]", ")", ")", "\n", "selected_lidars", "=", "np", ".", "array", "(", "selected_lidars_list", ")", "\n", "for", "k", "in", "range", "(", "points", ".", "shape", "[", "1", "]", ")", ":", "\n", "                                                ", "lidar_dist", "=", "np", ".", "square", "(", "points", "[", "0", ",", "k", "]", "-", "selected_lidars", "[", ":", ",", "0", "]", ")", "+", "np", ".", "square", "(", "points", "[", "1", ",", "k", "]", "-", "selected_lidars", "[", ":", ",", "1", "]", ")", "\n", "#                                ", "\n", "nearest_lidar", "=", "np", ".", "argmin", "(", "lidar_dist", ")", "\n", "\n", "\n", "selected_height", "=", "heights_list", "[", "nearest_lidar", "]", "\n", "\n", "\n", "heights", "[", ":", ",", "k", "]", "=", "selected_height", "\n", "", "", "else", ":", "\n", "                                            ", "continue", "\n", "\n", "#                                heights = np.zeros((1,points.shape[1]))", "\n", "#                                selected_heights=[]", "\n", "#                                for k in range(points.shape[1]):", "\n", "#                                    lidar_dist = np.square(points[0,k]-bev_lidar_points[0,:])+np.square(points[1,k]-bev_lidar_points[1,:])", "\n", "##                                ", "\n", "#                                    nearest_lidar = np.argmin(lidar_dist)", "\n", "#                                    ", "\n", "#                                    selected_lidar = bev_lidar_points[:,nearest_lidar]", "\n", "#                                    if selected_lidar[2] < lidar_height_thresh:", "\n", "#                                 ", "\n", "#                                        selected_heights.append(selected_lidar[2])  ", "\n", "#                                 ", "\n", "#                                    ", "\n", "#                                        heights[:,k]=selected_lidar[2]", "\n", "#                                    ", "\n", "#                                    ", "\n", "##                                        heights = np.ones((1,points.shape[1]))*np.mean(heights_list)", "\n", "#                                if len(selected_heights) < 1:", "\n", "#                                    continue", "\n", "\n", "", "", "else", ":", "\n", "                                        ", "heights", "=", "np", ".", "zeros", "(", "(", "1", ",", "points", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "#                                points = np.vstack((points, np.zeros((1, points.shape[1]))))", "\n", "", "points", "=", "np", ".", "vstack", "(", "(", "points", ",", "heights", ")", ")", "\n", "\n", "#                            points = np.vstack((points, np.zeros((1, points.shape[1]))))", "\n", "\n", "# Transform into the ego vehicle frame for the timestamp of the image.", "\n", "points", "=", "points", "-", "np", ".", "array", "(", "poserecord", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "points", "=", "np", ".", "dot", "(", "Quaternion", "(", "poserecord", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", ",", "points", ")", "\n", "\n", "# Transform into the camera.", "\n", "points", "=", "points", "-", "np", ".", "array", "(", "cs_record", "[", "'translation'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "points", "=", "np", ".", "dot", "(", "Quaternion", "(", "cs_record", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", ",", "points", ")", "\n", "\n", "camera_points", "=", "np", ".", "copy", "(", "points", ")", "\n", "# Remove points that are partially behind the camera.", "\n", "depths", "=", "points", "[", "2", ",", ":", "]", "\n", "#                    behind = ((depths < near_plane) | (depths > 25*np.sqrt(2)))", "\n", "behind", "=", "depths", "<", "near_plane", "\n", "if", "np", ".", "all", "(", "behind", ")", ":", "\n", "                                        ", "continue", "\n", "\n", "", "if", "render_behind_cam", ":", "\n", "# Perform clipping on polygons that are partially behind the camera.", "\n", "                                        ", "points", ",", "_", "=", "_clip_points_behind_camera", "(", "points", ",", "near_plane", ")", "\n", "", "elif", "np", ".", "any", "(", "behind", ")", ":", "\n", "# Otherwise ignore any polygon that is partially behind the camera.", "\n", "                                        ", "continue", "\n", "\n", "# Ignore polygons with less than 3 points after clipping.", "\n", "", "if", "len", "(", "points", ")", "==", "0", "or", "points", ".", "shape", "[", "1", "]", "<", "3", ":", "\n", "                                        ", "continue", "\n", "\n", "# Take the actual picture (matrix multiplication with camera-matrix + renormalization).", "\n", "", "points", ",", "norm_const", "=", "view_points", "(", "points", ",", "cam_intrinsic", ",", "normalize", "=", "True", ")", "\n", "\n", "# Skip polygons where all points are outside the image.", "\n", "# Leave a margin of 1 pixel for aesthetic reasons.", "\n", "inside", "=", "np", ".", "ones", "(", "points", ".", "shape", "[", "1", "]", ",", "dtype", "=", "bool", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "0", ",", ":", "]", ">", "1", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "0", ",", ":", "]", "<", "im", ".", "size", "[", "0", "]", "-", "1", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "1", ",", ":", "]", ">", "1", ")", "\n", "inside", "=", "np", ".", "logical_and", "(", "inside", ",", "points", "[", "1", ",", ":", "]", "<", "im", ".", "size", "[", "1", "]", "-", "1", ")", "\n", "if", "render_outside_im", ":", "\n", "                                        ", "if", "np", ".", "all", "(", "np", ".", "logical_not", "(", "inside", ")", ")", ":", "\n", "                                            ", "continue", "\n", "", "", "else", ":", "\n", "                                        ", "if", "np", ".", "any", "(", "np", ".", "logical_not", "(", "inside", ")", ")", ":", "\n", "                                            ", "continue", "\n", "\n", "", "", "points", "=", "points", "[", ":", "2", ",", ":", "]", "\n", "points", "=", "[", "(", "p0", ",", "p1", ")", "for", "(", "p0", ",", "p1", ")", "in", "zip", "(", "points", "[", "0", "]", ",", "points", "[", "1", "]", ")", "]", "\n", "polygon_proj", "=", "Polygon", "(", "points", ")", "\n", "\n", "\n", "#                            polygon_proj = polygon_proj.intersection(non_occ_polygon_proj)", "\n", "# Filter small polygons", "\n", "if", "polygon_proj", ".", "area", "<", "min_polygon_area", ":", "\n", "                                        ", "continue", "\n", "\n", "", "layer_list", ".", "append", "(", "np", ".", "array", "(", "points", ")", ")", "\n", "", "label", "=", "layer_name", "\n", "#                                ax.add_patch(descartes.PolygonPatch(polygon_proj, fc=color_map[layer_name], alpha=alpha,", "\n", "#                                                                    label=label))", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "\n", "                            ", "logging", ".", "error", "(", "str", "(", "e", ")", ")", "\n", "continue", "\n", "", "", "", "vertices_per_layer", "[", "layer_name", "]", "=", "layer_list", "\n", "\n", "#                        break", "\n", "\n", "# Display the image.", "\n", "#        plt.axis('off')", "\n", "#        ax.invert_yaxis()", "\n", "\n", "#        plt.tight_layout()", "\n", "#        plt.savefig('/home/cany/mapmaker/no_alignment_narrow.png', bbox_inches='tight', pad_inches=0)", "\n", "#        if out_path is not None:", "\n", "#            plt.tight_layout()", "\n", "#            plt.savefig(out_path, bbox_inches='tight', pad_inches=0)", "\n", "\n", "", "return", "np_img", ",", "vertices_per_layer", ",", "my_lidar_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.load_point_cloud": [[732, 738], ["os.path.join", "nuscenes.utils.data_classes.LidarPointCloud.from_file"], "function", ["None"], ["", "def", "load_point_cloud", "(", "nuscenes", ",", "pointsensor", ")", ":", "\n", "\n", "# Load point cloud", "\n", "    ", "lidar_path", "=", "os", ".", "path", ".", "join", "(", "nuscenes", ".", "dataroot", ",", "pointsensor", "[", "'filename'", "]", ")", "\n", "pcl", "=", "LidarPointCloud", ".", "from_file", "(", "lidar_path", ")", "\n", "return", "pcl", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.signedVolume": [[741, 747], ["numpy.sum", "numpy.cross"], "function", ["None"], ["", "def", "signedVolume", "(", "a", ",", "b", ",", "c", ",", "d", ")", ":", "\n", "    ", "\"\"\"Computes the signed volume of a series of tetrahedrons defined by the vertices in \n    a, b c and d. The ouput is an SxT array which gives the signed volume of the tetrahedron defined\n    by the line segment 's' and two vertices of the triangle 't'.\"\"\"", "\n", "\n", "return", "np", ".", "sum", "(", "(", "a", "-", "d", ")", "*", "np", ".", "cross", "(", "b", "-", "d", ",", "c", "-", "d", ")", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.segmentsIntersectTriangles": [[748, 778], ["numpy.cross", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.sign", "numpy.logical_and", "numpy.linalg.norm", "numpy.sum", "numpy.sum", "nuscenes_helper.signedVolume", "nuscenes_helper.signedVolume", "nuscenes_helper.signedVolume"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.signedVolume", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.signedVolume", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.signedVolume"], ["", "def", "segmentsIntersectTriangles", "(", "s", ",", "t", ")", ":", "\n", "    ", "\"\"\"For each line segment in 's', this function computes whether it intersects any of the triangles\n    given in 't'.\n    \n    s : 2xSx3\n    t : 3XTX3\n    \"\"\"", "\n", "# compute the normals to each triangle", "\n", "normals", "=", "np", ".", "cross", "(", "t", "[", "2", "]", "-", "t", "[", "0", "]", ",", "t", "[", "2", "]", "-", "t", "[", "1", "]", ")", "\n", "normals", "/=", "np", ".", "linalg", ".", "norm", "(", "normals", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "# get sign of each segment endpoint, if the sign changes then we know this segment crosses the", "\n", "# plane which contains a triangle. If the value is zero the endpoint of the segment lies on the ", "\n", "# plane.", "\n", "# s[i][:, np.newaxis] - t[j] -> S x T x 3 array", "\n", "sign1", "=", "np", ".", "sign", "(", "np", ".", "sum", "(", "normals", "*", "(", "s", "[", "0", "]", "[", ":", ",", "np", ".", "newaxis", "]", "-", "t", "[", "2", "]", ")", ",", "axis", "=", "2", ")", ")", "# S x T", "\n", "sign2", "=", "np", ".", "sign", "(", "np", ".", "sum", "(", "normals", "*", "(", "s", "[", "1", "]", "[", ":", ",", "np", ".", "newaxis", "]", "-", "t", "[", "2", "]", ")", ",", "axis", "=", "2", ")", ")", "# S x T", "\n", "\n", "# determine segments which cross the plane of a triangle. 1 if the sign of the end points of s is ", "\n", "# different AND one of end points of s is not a vertex of t", "\n", "cross", "=", "(", "sign1", "!=", "sign2", ")", "*", "(", "sign1", "!=", "0", ")", "*", "(", "sign2", "!=", "0", ")", "# S x T ", "\n", "\n", "# get signed volumes", "\n", "v1", "=", "np", ".", "sign", "(", "signedVolume", "(", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "s", "[", "0", "]", "[", ":", ",", "np", ".", "newaxis", "]", ",", "s", "[", "1", "]", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", "# S x T", "\n", "v2", "=", "np", ".", "sign", "(", "signedVolume", "(", "t", "[", "1", "]", ",", "t", "[", "2", "]", ",", "s", "[", "0", "]", "[", ":", ",", "np", ".", "newaxis", "]", ",", "s", "[", "1", "]", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", "# S x T", "\n", "v3", "=", "np", ".", "sign", "(", "signedVolume", "(", "t", "[", "2", "]", ",", "t", "[", "0", "]", ",", "s", "[", "0", "]", "[", ":", ",", "np", ".", "newaxis", "]", ",", "s", "[", "1", "]", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", "# S x T", "\n", "\n", "same_volume", "=", "np", ".", "logical_and", "(", "(", "v1", "==", "v2", ")", ",", "(", "v2", "==", "v3", ")", ")", "# 1 if s and t have same sign in v1, v2 and v3", "\n", "\n", "return", "cross", "*", "same_volume", ">", "0", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.get_occlusion_mask": [[780, 846], ["numpy.copy", "numpy.arange", "numpy.arange", "numpy.flip", "numpy.squeeze", "range", "numpy.zeros", "range", "len", "numpy.any", "len", "numpy.any", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs"], "function", ["None"], ["", "def", "get_occlusion_mask", "(", "lidar_points", ",", "extents", ",", "resolution", ",", "lidar_height", ")", ":", "\n", "\n", "    ", "orig_lidar_points", "=", "np", ".", "copy", "(", "lidar_points", ")", "\n", "\n", "#    my_points = lidar_points[0::2]", "\n", "ground_points", "=", "lidar_points", "[", "1", ",", ":", "]", ">", "(", "lidar_height", "-", "0.3", ")", "\n", "\n", "lidar_points", "=", "lidar_points", "[", ":", ",", "ground_points", "]", "\n", "my_points_x", "=", "lidar_points", "[", "0", "]", "\n", "my_points_z", "=", "lidar_points", "[", "2", "]", "\n", "\n", "my_slopes", "=", "my_points_z", "/", "my_points_x", "\n", "\n", "x1", ",", "z1", ",", "x2", ",", "z2", "=", "extents", "\n", "\n", "x", "=", "np", ".", "arange", "(", "x1", "-", "resolution", ",", "x2", "+", "resolution", ",", "resolution", ")", "\n", "z", "=", "np", ".", "arange", "(", "z1", "-", "resolution", ",", "z2", "+", "resolution", ",", "resolution", ")", "\n", "z", "=", "np", ".", "flip", "(", "z", ")", "\n", "\n", "#    & (my_points_z <= z_max)", "\n", "my_mask", "=", "np", ".", "squeeze", "(", "np", ".", "zeros", "(", "(", "lidar_points", ".", "shape", "[", "1", "]", ",", "1", ")", ")", ")", "\n", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "x", ")", "-", "2", ")", ":", "\n", "        ", "cur_k", "=", "k", "+", "1", "\n", "for", "m", "in", "range", "(", "len", "(", "z", ")", "-", "2", ")", ":", "\n", "            ", "cur_m", "=", "m", "+", "1", "\n", "x_min", "=", "(", "x", "[", "cur_k", "-", "1", "]", "+", "x", "[", "cur_k", "]", ")", "/", "2", "\n", "x_max", "=", "(", "x", "[", "cur_k", "]", "+", "x", "[", "cur_k", "+", "1", "]", ")", "/", "2", "\n", "z_max", "=", "(", "z", "[", "cur_m", "-", "1", "]", "+", "z", "[", "cur_m", "]", ")", "/", "2", "\n", "z_min", "=", "(", "z", "[", "cur_m", "]", "+", "z", "[", "cur_m", "+", "1", "]", ")", "/", "2", "\n", "\n", "if", "x_max", "<", "0", ":", "\n", "                ", "min_slope", "=", "z_max", "/", "x_max", "\n", "max_slope", "=", "z_min", "/", "x_min", "\n", "", "else", ":", "\n", "\n", "                ", "min_slope", "=", "z_min", "/", "x_max", "\n", "max_slope", "=", "z_max", "/", "x_min", "\n", "\n", "#            if ((min_slope < 0) & (max_slope < 0)):", "\n", "#                temp = np.copy(min_slope)", "\n", "#                min_slope=np.copy(max_slope)", "\n", "#                max_slope = temp", "\n", "#            ", "\n", "#            elif ((min_slope > 0) & (max_slope < 0)):", "\n", "#                ", "\n", "#                temp = np.copy(min_slope)", "\n", "#                min_slope=np.copy(max_slope)", "\n", "#                max_slope = temp", "\n", "\n", "\n", "\n", "", "slope_cond", "=", "(", "my_slopes", "<=", "max_slope", ")", "&", "(", "my_slopes", ">=", "min_slope", ")", "\n", "#            logging.error('MIN SLOPE : ' + str(min_slope) + ' MAX SLOPE : ' + str(max_slope)+' COND : ' + str(np.any(slope_cond)))", "\n", "if", "np", ".", "any", "(", "slope_cond", ")", ":", "\n", "\n", "\n", "\n", "                ", "selected_x", "=", "my_points_x", "[", "slope_cond", "]", "\n", "selected_z", "=", "my_points_z", "[", "slope_cond", "]", "\n", "#                if np.any((my_points_x >= x_min) & (my_points_x <= x_max) & (my_points_z >= z_min)  & (my_points_z <= z_max)):", "\n", "if", "np", ".", "any", "(", "(", "np", ".", "abs", "(", "selected_x", ")", ">=", "np", ".", "abs", "(", "x_min", ")", ")", "&", "(", "selected_z", ">=", "z_min", ")", ")", ":", "\n", "                    ", "my_mask", "[", "(", "np", ".", "abs", "(", "my_points_x", ")", ">=", "np", ".", "abs", "(", "x_min", ")", ")", "&", "(", "my_points_z", ">=", "z_min", ")", "&", "slope_cond", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "lidar_points", "[", ":", ",", "my_mask", ">", "0.5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.get_lidar_map": [[848, 887], ["numpy.arange", "numpy.arange", "numpy.flip", "numpy.zeros", "range", "range", "len", "numpy.any", "len", "len", "len"], "function", ["None"], ["", "def", "get_lidar_map", "(", "lidar_points", ",", "extents", ",", "resolution", ",", "lidar_height", ")", ":", "\n", "\n", "#    my_points = lidar_points[0::2]", "\n", "\n", "    ", "ground_points", "=", "lidar_points", "[", "1", ",", ":", "]", ">", "(", "lidar_height", "-", "1", ")", "\n", "\n", "lidar_points", "=", "lidar_points", "[", ":", ",", "ground_points", "]", "\n", "\n", "my_points_x", "=", "lidar_points", "[", "0", "]", "\n", "my_points_z", "=", "lidar_points", "[", "2", "]", "\n", "\n", "my_slopes", "=", "my_points_z", "/", "my_points_x", "\n", "\n", "x1", ",", "z1", ",", "x2", ",", "z2", "=", "extents", "\n", "\n", "x", "=", "np", ".", "arange", "(", "x1", "-", "resolution", ",", "x2", "+", "resolution", ",", "resolution", ")", "\n", "z", "=", "np", ".", "arange", "(", "z1", "-", "resolution", ",", "z2", "+", "resolution", ",", "resolution", ")", "\n", "z", "=", "np", ".", "flip", "(", "z", ")", "\n", "\n", "#    & (my_points_z <= z_max)", "\n", "my_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "z", ")", "-", "2", ",", "len", "(", "x", ")", "-", "2", ")", ")", "\n", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "x", ")", "-", "2", ")", ":", "\n", "        ", "cur_k", "=", "k", "+", "1", "\n", "for", "m", "in", "range", "(", "len", "(", "z", ")", "-", "2", ")", ":", "\n", "            ", "cur_m", "=", "m", "+", "1", "\n", "x_min", "=", "(", "x", "[", "cur_k", "-", "1", "]", "+", "x", "[", "cur_k", "]", ")", "/", "2", "\n", "x_max", "=", "(", "x", "[", "cur_k", "]", "+", "x", "[", "cur_k", "+", "1", "]", ")", "/", "2", "\n", "z_max", "=", "(", "z", "[", "cur_m", "-", "1", "]", "+", "z", "[", "cur_m", "]", ")", "/", "2", "\n", "z_min", "=", "(", "z", "[", "cur_m", "]", "+", "z", "[", "cur_m", "+", "1", "]", ")", "/", "2", "\n", "\n", "\n", "\n", "if", "np", ".", "any", "(", "(", "my_points_x", ">=", "x_min", ")", "&", "(", "my_points_x", "<=", "x_max", ")", "&", "(", "my_points_z", ">=", "z_min", ")", "&", "(", "my_points_z", "<=", "z_max", ")", ")", ":", "\n", "#                if np.any((np.abs(selected_x) >= np.abs(x_min)) & (selected_z >= z_min) ):", "\n", "                ", "my_mask", "[", "m", ",", "k", "]", "=", "1", "\n", "\n", "", "", "", "return", "my_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_helper.lidar_func": [[888, 919], ["nusc.get", "nuscenes.get", "nuscenes_helper.load_point_cloud", "nusc.get", "load_point_cloud.rotate", "load_point_cloud.translate", "nusc.get", "load_point_cloud.rotate", "load_point_cloud.translate", "numpy.copy", "nusc.get", "load_point_cloud.translate", "load_point_cloud.rotate", "nusc.get", "load_point_cloud.translate", "load_point_cloud.rotate", "numpy.array", "numpy.array", "numpy.copy", "pyquaternion.Quaternion", "pyquaternion.Quaternion", "numpy.array", "numpy.array", "pyquaternion.Quaternion", "pyquaternion.Quaternion"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.load_point_cloud"], ["", "def", "lidar_func", "(", "sample", ",", "nuscenes", ")", ":", "\n", "\n", "    ", "nusc", "=", "nuscenes", "\n", "\n", "cam", "=", "nusc", ".", "get", "(", "'sample_data'", ",", "sample", "[", "'data'", "]", "[", "'CAM_FRONT'", "]", ")", "\n", "pointsensor", "=", "nuscenes", ".", "get", "(", "'sample_data'", ",", "sample", "[", "'data'", "]", "[", "'LIDAR_TOP'", "]", ")", "\n", "pc", "=", "load_point_cloud", "(", "nuscenes", ",", "pointsensor", ")", "\n", "\n", "\n", "cs_record", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "pointsensor", "[", "'calibrated_sensor_token'", "]", ")", "\n", "pc", ".", "rotate", "(", "Quaternion", "(", "cs_record", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ")", "\n", "pc", ".", "translate", "(", "np", ".", "array", "(", "cs_record", "[", "'translation'", "]", ")", ")", "\n", "\n", "# Second step: transform to the global frame.", "\n", "poserecord", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "pointsensor", "[", "'ego_pose_token'", "]", ")", "\n", "pc", ".", "rotate", "(", "Quaternion", "(", "poserecord", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ")", "\n", "pc", ".", "translate", "(", "np", ".", "array", "(", "poserecord", "[", "'translation'", "]", ")", ")", "\n", "\n", "bev_lidar", "=", "np", ".", "copy", "(", "pc", ".", "points", ")", "\n", "\n", "# Third step: transform into the ego vehicle frame for the timestamp of the image.", "\n", "poserecord", "=", "nusc", ".", "get", "(", "'ego_pose'", ",", "cam", "[", "'ego_pose_token'", "]", ")", "\n", "pc", ".", "translate", "(", "-", "np", ".", "array", "(", "poserecord", "[", "'translation'", "]", ")", ")", "\n", "pc", ".", "rotate", "(", "Quaternion", "(", "poserecord", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", ")", "\n", "\n", "# Fourth step: transform into the camera.", "\n", "cs_record", "=", "nusc", ".", "get", "(", "'calibrated_sensor'", ",", "cam", "[", "'calibrated_sensor_token'", "]", ")", "\n", "pc", ".", "translate", "(", "-", "np", ".", "array", "(", "cs_record", "[", "'translation'", "]", ")", ")", "\n", "pc", ".", "rotate", "(", "Quaternion", "(", "cs_record", "[", "'rotation'", "]", ")", ".", "rotation_matrix", ".", "T", ")", "\n", "\n", "return", "np", ".", "copy", "(", "pc", ".", "points", ")", ",", "bev_lidar", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.argoverse_utils.argoverse_name_to_class_id": [[33, 38], ["ARGOVERSE_CLASS_NAMES.index"], "function", ["None"], ["def", "argoverse_name_to_class_id", "(", "name", ")", ":", "\n", "    ", "if", "name", "in", "ARGOVERSE_CLASS_MAPPING", ":", "\n", "        ", "return", "ARGOVERSE_CLASS_NAMES", ".", "index", "(", "ARGOVERSE_CLASS_MAPPING", "[", "name", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.argoverse_utils.get_object_masks": [[40, 66], ["int", "int", "len", "numpy.zeros", "scene.get_calibration", "scene.get_label_object", "np.zeros.astype", "argoverse_utils.argoverse_name_to_class_id", "dataset.utils.render_polygon", "obj.as_2d_bbox", "scene.get_calibration.project_ego_to_cam"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.argoverse_utils.argoverse_name_to_class_id", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.render_polygon"], ["", "", "def", "get_object_masks", "(", "scene", ",", "camera", ",", "frame", ",", "extents", ",", "resolution", ")", ":", "\n", "\n", "# Get the dimensions of the birds-eye-view mask", "\n", "    ", "x1", ",", "z1", ",", "x2", ",", "z2", "=", "extents", "\n", "mask_width", "=", "int", "(", "(", "x2", "-", "x1", ")", "/", "resolution", ")", "\n", "mask_height", "=", "int", "(", "(", "z2", "-", "z1", ")", "/", "resolution", ")", "\n", "\n", "# Initialise masks", "\n", "num_class", "=", "len", "(", "ARGOVERSE_CLASS_NAMES", ")", "\n", "masks", "=", "np", ".", "zeros", "(", "(", "num_class", "+", "1", ",", "mask_height", ",", "mask_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Get calibration information", "\n", "calib", "=", "scene", ".", "get_calibration", "(", "camera", ")", "\n", "\n", "# Iterate over objects in the scene", "\n", "for", "obj", "in", "scene", ".", "get_label_object", "(", "frame", ")", ":", "\n", "\n", "# Get the bounding box and convert into camera coordinates", "\n", "        ", "bbox", "=", "obj", ".", "as_2d_bbox", "(", ")", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", "\n", "cam_bbox", "=", "calib", ".", "project_ego_to_cam", "(", "bbox", ")", "[", ":", ",", "[", "0", ",", "2", "]", "]", "\n", "\n", "# Render the bounding box to the appropriate mask layer", "\n", "class_id", "=", "argoverse_name_to_class_id", "(", "obj", ".", "label_class", ")", "\n", "render_polygon", "(", "masks", "[", "class_id", "]", ",", "cam_bbox", ",", "extents", ",", "resolution", ")", "\n", "\n", "", "return", "masks", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.argoverse_utils.get_map_mask": [[68, 96], ["int", "int", "map_data.get_rasterized_driveable_area", "numpy.matmul", "numpy.matmul", "numpy.array", "numpy.matmul", "scene.get_calibration", "scene.get_pose", "numpy.linalg.inv", "scipy.ndimage.affine_transform"], "function", ["None"], ["", "def", "get_map_mask", "(", "scene", ",", "camera", ",", "frame", ",", "map_data", ",", "extents", ",", "resolution", ")", ":", "\n", "\n", "# Get the dimensions of the birds-eye-view mask", "\n", "    ", "x1", ",", "z1", ",", "x2", ",", "z2", "=", "extents", "\n", "mask_width", "=", "int", "(", "(", "x2", "-", "x1", ")", "/", "resolution", ")", "\n", "mask_height", "=", "int", "(", "(", "z2", "-", "z1", ")", "/", "resolution", ")", "\n", "\n", "# Get rasterised map", "\n", "city_mask", ",", "map_tfm", "=", "map_data", ".", "get_rasterized_driveable_area", "(", "scene", ".", "city_name", ")", "\n", "\n", "# Get 3D transform from camera to world coordinates", "\n", "extrinsic", "=", "scene", ".", "get_calibration", "(", "camera", ")", ".", "extrinsic", "\n", "pose", "=", "scene", ".", "get_pose", "(", "frame", ")", ".", "transform_matrix", "\n", "cam_to_world_tfm", "=", "np", ".", "matmul", "(", "pose", ",", "np", ".", "linalg", ".", "inv", "(", "extrinsic", ")", ")", "\n", "\n", "# Get 2D affine transform from camera to map coordinates", "\n", "cam_to_map_tfm", "=", "np", ".", "matmul", "(", "map_tfm", ",", "cam_to_world_tfm", "[", "[", "0", ",", "1", ",", "3", "]", "]", ")", "\n", "\n", "# Get 2D affine transform from BEV coords to map coords", "\n", "bev_to_cam_tfm", "=", "np", ".", "array", "(", "[", "[", "resolution", ",", "0", ",", "x1", "]", ",", "\n", "[", "0", ",", "resolution", ",", "z1", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "bev_to_map_tfm", "=", "np", ".", "matmul", "(", "cam_to_map_tfm", "[", ":", ",", "[", "0", ",", "2", ",", "3", "]", "]", ",", "bev_to_cam_tfm", ")", "\n", "\n", "# Warp map image to bev coordinate system", "\n", "mask", "=", "affine_transform", "(", "city_mask", ",", "bev_to_map_tfm", "[", "[", "1", ",", "0", "]", "]", ",", "\n", "output_shape", "=", "(", "mask_width", ",", "mask_height", ")", ")", ".", "T", "\n", "return", "mask", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.iterate_samples": [[30, 36], ["nuscenes.get"], "function", ["None"], ["def", "iterate_samples", "(", "nuscenes", ",", "start_token", ")", ":", "\n", "    ", "sample_token", "=", "start_token", "\n", "while", "sample_token", "!=", "''", ":", "\n", "        ", "sample", "=", "nuscenes", ".", "get", "(", "'sample'", ",", "sample_token", ")", "\n", "yield", "sample", "\n", "sample_token", "=", "sample", "[", "'next'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_map_masks": [[38, 45], ["numpy.stack", "nuscenes_utils.get_layer_mask", "map_data.items"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_layer_mask"], ["", "", "def", "get_map_masks", "(", "nuscenes", ",", "map_data", ",", "sample_data", ",", "extents", ",", "resolution", ")", ":", "\n", "\n", "# Render each layer sequentially", "\n", "    ", "layers", "=", "[", "get_layer_mask", "(", "nuscenes", ",", "polys", ",", "sample_data", ",", "extents", ",", "\n", "resolution", ")", "for", "layer", ",", "polys", "in", "map_data", ".", "items", "(", ")", "]", "\n", "\n", "return", "np", ".", "stack", "(", "layers", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_layer_mask": [[47, 77], ["numpy.linalg.inv", "shapely.geometry.box", "dataset.utils.transform_polygon", "numpy.zeros", "polygons.query", "np.zeros.astype", "dataset.utils.transform_polygon.intersection", "dataset.utils.transform_polygon", "nuscenes_utils.get_sensor_transform", "int", "int", "nuscenes_utils.render_shapely_polygon"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform_polygon", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform_polygon", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_sensor_transform", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.render_shapely_polygon"], ["", "def", "get_layer_mask", "(", "nuscenes", ",", "polygons", ",", "sample_data", ",", "extents", ",", "resolution", ")", ":", "\n", "\n", "# Get the 2D affine transform from bev coords to map coords", "\n", "    ", "tfm", "=", "get_sensor_transform", "(", "nuscenes", ",", "sample_data", ")", "[", "[", "0", ",", "1", ",", "3", "]", "]", "[", ":", ",", "[", "0", ",", "2", ",", "3", "]", "]", "\n", "inv_tfm", "=", "np", ".", "linalg", ".", "inv", "(", "tfm", ")", "\n", "\n", "# Create a patch representing the birds-eye-view region in map coordinates", "\n", "map_patch", "=", "geometry", ".", "box", "(", "*", "extents", ")", "\n", "map_patch", "=", "transform_polygon", "(", "map_patch", ",", "tfm", ")", "\n", "\n", "# Initialise the map mask", "\n", "x1", ",", "z1", ",", "x2", ",", "z2", "=", "extents", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "int", "(", "(", "z2", "-", "z1", ")", "/", "resolution", ")", ",", "int", "(", "(", "x2", "-", "x1", ")", "/", "resolution", ")", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Find all polygons which intersect with the area of interest", "\n", "for", "polygon", "in", "polygons", ".", "query", "(", "map_patch", ")", ":", "\n", "\n", "        ", "polygon", "=", "polygon", ".", "intersection", "(", "map_patch", ")", "\n", "\n", "# Transform into map coordinates", "\n", "polygon", "=", "transform_polygon", "(", "polygon", ",", "inv_tfm", ")", "\n", "\n", "# Render the polygon to the mask", "\n", "try", ":", "\n", "            ", "render_shapely_polygon", "(", "mask", ",", "polygon", ",", "extents", ",", "resolution", ")", "\n", "", "except", ":", "\n", "\n", "            ", "continue", "\n", "", "", "return", "mask", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_object_masks": [[81, 110], ["int", "int", "numpy.zeros", "numpy.linalg.inv", "nuscenes.get_boxes", "np.zeros.astype", "len", "nuscenes.eval.detection.utils.category_to_detection_name", "dataset.utils.render_polygon", "nuscenes_utils.get_sensor_transform", "nuscenes.eval.detection.constants.DETECTION_NAMES.index", "box.bottom_corners", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.render_polygon", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_sensor_transform"], ["", "def", "get_object_masks", "(", "nuscenes", ",", "sample_data", ",", "extents", ",", "resolution", ")", ":", "\n", "\n", "# Initialize object masks", "\n", "    ", "nclass", "=", "len", "(", "DETECTION_NAMES", ")", "+", "1", "\n", "grid_width", "=", "int", "(", "(", "extents", "[", "2", "]", "-", "extents", "[", "0", "]", ")", "/", "resolution", ")", "\n", "grid_height", "=", "int", "(", "(", "extents", "[", "3", "]", "-", "extents", "[", "1", "]", ")", "/", "resolution", ")", "\n", "masks", "=", "np", ".", "zeros", "(", "(", "nclass", ",", "grid_height", ",", "grid_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Get the 2D affine transform from bev coords to map coords", "\n", "tfm", "=", "get_sensor_transform", "(", "nuscenes", ",", "sample_data", ")", "[", "[", "0", ",", "1", ",", "3", "]", "]", "[", ":", ",", "[", "0", ",", "2", ",", "3", "]", "]", "\n", "inv_tfm", "=", "np", ".", "linalg", ".", "inv", "(", "tfm", ")", "\n", "\n", "for", "box", "in", "nuscenes", ".", "get_boxes", "(", "sample_data", "[", "'token'", "]", ")", ":", "\n", "\n", "# Get the index of the class", "\n", "        ", "det_name", "=", "category_to_detection_name", "(", "box", ".", "name", ")", "\n", "if", "det_name", "not", "in", "DETECTION_NAMES", ":", "\n", "            ", "class_id", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "class_id", "=", "DETECTION_NAMES", ".", "index", "(", "det_name", ")", "\n", "\n", "# Get bounding box coordinates in the grid coordinate frame", "\n", "", "bbox", "=", "box", ".", "bottom_corners", "(", ")", "[", ":", "2", "]", "\n", "local_bbox", "=", "np", ".", "dot", "(", "inv_tfm", "[", ":", "2", ",", ":", "2", "]", ",", "bbox", ")", ".", "T", "+", "inv_tfm", "[", ":", "2", ",", "2", "]", "\n", "\n", "# Render the rotated bounding box to the mask", "\n", "render_polygon", "(", "masks", "[", "class_id", "]", ",", "local_bbox", ",", "extents", ",", "resolution", ")", "\n", "\n", "", "return", "masks", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.get_sensor_transform": [[112, 124], ["nuscenes.get", "nuscenes_utils.make_transform_matrix", "nuscenes.get", "nuscenes_utils.make_transform_matrix", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.make_transform_matrix", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.make_transform_matrix"], ["", "def", "get_sensor_transform", "(", "nuscenes", ",", "sample_data", ")", ":", "\n", "\n", "# Load sensor transform data", "\n", "    ", "sensor", "=", "nuscenes", ".", "get", "(", "\n", "'calibrated_sensor'", ",", "sample_data", "[", "'calibrated_sensor_token'", "]", ")", "\n", "sensor_tfm", "=", "make_transform_matrix", "(", "sensor", ")", "\n", "\n", "# Load ego pose data", "\n", "pose", "=", "nuscenes", ".", "get", "(", "'ego_pose'", ",", "sample_data", "[", "'ego_pose_token'", "]", ")", "\n", "pose_tfm", "=", "make_transform_matrix", "(", "pose", ")", "\n", "\n", "return", "np", ".", "dot", "(", "pose_tfm", ",", "sensor_tfm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.load_point_cloud": [[126, 132], ["os.path.join", "nuscenes.utils.data_classes.LidarPointCloud.from_file"], "function", ["None"], ["", "def", "load_point_cloud", "(", "nuscenes", ",", "sample_data", ")", ":", "\n", "\n", "# Load point cloud", "\n", "    ", "lidar_path", "=", "os", ".", "path", ".", "join", "(", "nuscenes", ".", "dataroot", ",", "sample_data", "[", "'filename'", "]", ")", "\n", "pcl", "=", "LidarPointCloud", ".", "from_file", "(", "lidar_path", ")", "\n", "return", "pcl", ".", "points", "[", ":", "3", ",", ":", "]", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.make_transform_matrix": [[134, 142], ["numpy.eye", "numpy.array", "pyquaternion.Quaternion"], "function", ["None"], ["", "def", "make_transform_matrix", "(", "record", ")", ":", "\n", "    ", "\"\"\"\n    Create a 4x4 transform matrix from a calibrated_sensor or ego_pose record\n    \"\"\"", "\n", "transform", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform", "[", ":", "3", ",", ":", "3", "]", "=", "Quaternion", "(", "record", "[", "'rotation'", "]", ")", ".", "rotation_matrix", "\n", "transform", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "record", "[", "'translation'", "]", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.render_shapely_polygon": [[144, 162], ["dataset.utils.render_polygon", "dataset.utils.render_polygon", "nuscenes_utils.render_shapely_polygon"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.render_polygon", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.render_polygon", "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.nuscenes_utils.render_shapely_polygon"], ["", "def", "render_shapely_polygon", "(", "mask", ",", "polygon", ",", "extents", ",", "resolution", ")", ":", "\n", "\n", "\n", "    ", "if", "polygon", ".", "geom_type", "==", "'Polygon'", ":", "\n", "# logging.error('EXTERIOR ' + str(polygon.exterior.coords))", "\n", "# Render exteriors", "\n", "        ", "render_polygon", "(", "mask", ",", "polygon", ".", "exterior", ".", "coords", ",", "extents", ",", "resolution", ",", "1", ")", "\n", "\n", "# Render interiors", "\n", "for", "hole", "in", "polygon", ".", "interiors", ":", "\n", "            ", "render_polygon", "(", "mask", ",", "hole", ".", "coords", ",", "extents", ",", "resolution", ",", "0", ")", "\n", "\n", "# Handle the case of compound shapes", "\n", "", "", "else", ":", "\n", "\n", "\n", "        ", "for", "poly", "in", "polygon", ":", "\n", "            ", "render_shapely_polygon", "(", "mask", ",", "poly", ",", "extents", ",", "resolution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.decode_binary_labels": [[6, 9], ["torch.pow", "torch.arange", "torch.pow.view"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "import", "os", "\n", "import", "glob", "\n", "import", "tensorflow", "as", "tf", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.encode_binary_labels": [[11, 14], ["numpy.power", "numpy.arange", "len", "masks.astype", "np.power.reshape"], "function", ["None"], ["import", "cv2", "\n", "#import sys", "\n", "#from skimage import measure, transform", "\n", "import", "copy", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform": [[16, 20], ["numpy.dot"], "function", ["None"], ["from", "PIL", "import", "Image", "\n", "from", "pyquaternion", "import", "Quaternion", "\n", "\n", "\n", "means_image", "=", "np", ".", "array", "(", "[", "123.68", ",", "116.779", ",", "103.939", "]", ",", "dtype", "=", "np", ".", "single", ")", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.transform_polygon": [[22, 28], ["shapely.affinity.affine_transform", "affine.flatten"], "function", ["home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.None.utils.flatten"], ["\n", "def", "get_batch_size", "(", "inputs", ")", ":", "\n", "    ", "return", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "", "def", "flatten", "(", "tensor", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.render_polygon": [[30, 37], ["numpy.ascontiguousarray().round().astype", "cv2.fillConvexPoly", "numpy.array", "numpy.ascontiguousarray().round", "numpy.ascontiguousarray"], "function", ["None"], ["\n", "#    rhs_dim = get_rhs_dim(tensor)", "\n", "rhs_dim", "=", "tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "return", "tf", ".", "reshape", "(", "tensor", ",", "[", "-", "1", ",", "rhs_dim", "]", ")", "\n", "\n", "", "def", "get_rhs_dim", "(", "tensor", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.get_visible_mask": [[39, 51], ["numpy.arange", "numpy.arange"], "function", ["None"], ["\n", "shape", "=", "tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "return", "np", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", "\n", "\n", "\n", "", "def", "get_all_stats", "(", "annotation", ",", "segmentation", ",", "tot_mask", ",", "mask_iou", "=", "True", ")", ":", "\n", "\n", "    ", "void_pixels", "=", "1", "-", "tot_mask", "\n", "\n", "#    annotation = annotation.astype(np.bool)& void_pixels", "\n", "#    segmentation = segmentation.astype(np.bool)& void_pixels", "\n", "annotation", "=", "annotation", ".", "astype", "(", "np", ".", "bool", ")", "\n", "segmentation", "=", "segmentation", ".", "astype", "(", "np", ".", "bool", ")", "\n"]], "home.repos.pwc.inspect_result.ybarancan_bev_feat_stitch.dataset.utils.get_occlusion_mask": [[53, 85], ["int", "numpy.round", "numpy.zeros", "numpy.maximum.at", "numpy.arange", "numpy.round().astype", "np.round.astype", "numpy.arange", "numpy.round"], "function", ["None"], ["tp", "=", "np", ".", "float32", "(", "np", ".", "sum", "(", "(", "segmentation", "&", "annotation", ")", "&", "void_pixels", ")", ")", "\n", "fp", "=", "np", ".", "float32", "(", "np", ".", "sum", "(", "(", "segmentation", "&", "np", ".", "logical_not", "(", "annotation", ")", ")", "&", "void_pixels", ")", ")", "\n", "\n", "fn", "=", "np", ".", "float32", "(", "np", ".", "sum", "(", "(", "np", ".", "logical_not", "(", "segmentation", ")", "&", "annotation", ")", "&", "void_pixels", ")", ")", "\n", "tn", "=", "np", ".", "float32", "(", "np", ".", "sum", "(", "(", "np", ".", "logical_not", "(", "segmentation", ")", "&", "np", ".", "logical_not", "(", "annotation", ")", ")", "&", "void_pixels", ")", ")", "\n", "\n", "gt_exists", "=", "np", ".", "float32", "(", "np", ".", "sum", "(", "annotation", "&", "void_pixels", ")", ">", "0", ")", "\n", "\n", "\n", "inters", "=", "np", ".", "sum", "(", "(", "segmentation", "&", "annotation", ")", "&", "void_pixels", ")", "\n", "union", "=", "np", ".", "sum", "(", "(", "segmentation", "|", "annotation", ")", "&", "void_pixels", ")", "\n", "\n", "j", "=", "inters", "/", "union", "\n", "\n", "#    logging.error('J '  + str(j))", "\n", "#    logging.error('UNION '  + str(np.isclose(union, 0)))", "\n", "if", "j", ".", "ndim", "==", "0", ":", "\n", "        ", "j", "=", "1", "if", "np", ".", "isclose", "(", "union", ",", "0", ")", "else", "j", "\n", "", "else", ":", "\n", "        ", "j", "[", "np", ".", "isclose", "(", "union", ",", "0", ")", "]", "=", "1", "\n", "\n", "", "j", "=", "np", ".", "float32", "(", "j", ")", "\n", "\n", "#    logging.error('J '  + str(j))", "\n", "union", "=", "np", ".", "float32", "(", "union", ")", "\n", "return", "np", ".", "array", "(", "[", "j", ",", "union", ",", "tp", ",", "fp", ",", "fn", ",", "tn", ",", "gt_exists", "]", ")", ",", "void_pixels", "\n", "\n", "\n", "", "def", "get_confusion", "(", "exp_config", ",", "annotation", ",", "segmentation", ",", "tot_mask", ",", "mask_iou", "=", "True", ")", ":", "\n", "\n", "    ", "void_pixels", "=", "1", "-", "tot_mask", "\n", "bg", "=", "(", "1", "-", "np", ".", "clip", "(", "np", ".", "sum", "(", "np", ".", "float32", "(", "annotation", "[", "...", ",", ":", "exp_config", ".", "num_object_classes", "]", ")", ",", "axis", "=", "-", "1", ")", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n"]]}