{"home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.train.parse_args": [[22, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work-dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume-from'", ",", "\n", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether not to evaluate the checkpoint during training'", ")", "\n", "group_gpus", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group_gpus", ".", "add_argument", "(", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "group_gpus", ".", "add_argument", "(", "'--gpu-ids'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ids of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file (deprecate), '", "\n", "'change to --cfg-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "if", "args", ".", "options", "and", "args", ".", "cfg_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --cfg-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --cfg-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --cfg-options'", ")", "\n", "args", ".", "cfg_options", "=", "args", ".", "options", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.train.main": [[84, 192], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmdet.utils.get_root_logger", "dict", "mmdet.utils.collect_env", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "os.basename", "mmdet.models.build_detector", "mmdet.models.build_detector.init_weights", "mmdet.apis.train_detector", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "os.abspath", "os.join", "time.localtime", "mmdet.utils.get_root_logger.info", "mmdet.apis.set_random_seed", "mmdet.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "Config.fromfile.get", "Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.utils.collect_env.items", "hook.copy", "hook.copy.pop", "HOOKS.get", "hasattr", "os.splitext", "mmcv.build_from_cfg", "mmcv.build_from_cfg.after_build_model", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.test.parse_args", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.after_build_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "gpu_ids", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "range", "(", "1", ")", "if", "args", ".", "gpus", "is", "None", "else", "range", "(", "args", ".", "gpus", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "# re-set gpu_ids with distributed training mode", "\n", "_", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "f'{k}: {v}'", ")", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "meta", "[", "'config'", "]", "=", "cfg", ".", "pretty_text", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Set random seed to {args.seed}, '", "\n", "f'deterministic: {args.deterministic}'", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "meta", "[", "'exp_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "\n", "if", "'custom_hooks'", "in", "cfg", ":", "\n", "        ", "for", "hook", "in", "cfg", ".", "custom_hooks", ":", "\n", "            ", "if", "hook", ".", "type", "==", "'FisherPruningHook'", ":", "\n", "                ", "hook_cfg", "=", "hook", ".", "copy", "(", ")", "\n", "hook_cfg", ".", "pop", "(", "'priority'", ",", "None", ")", "\n", "from", "mmcv", ".", "runner", ".", "hooks", "import", "HOOKS", "\n", "hook_cls", "=", "HOOKS", ".", "get", "(", "hook_cfg", "[", "'type'", "]", ")", "\n", "if", "hasattr", "(", "hook_cls", ",", "'after_build_model'", ")", ":", "\n", "                    ", "pruning_hook", "=", "mmcv", ".", "build_from_cfg", "(", "hook_cfg", ",", "HOOKS", ")", "\n", "pruning_hook", ".", "after_build_model", "(", "model", ")", "\n", "\n", "", "", "", "", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "val_dataset", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "val", ")", "\n", "val_dataset", ".", "pipeline", "=", "cfg", ".", "data", ".", "train", ".", "pipeline", "\n", "datasets", ".", "append", "(", "build_dataset", "(", "val_dataset", ")", ")", "\n", "", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmdet version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "mmdet_version", "=", "__version__", "+", "\n", "get_git_hash", "(", ")", "[", ":", "7", "]", ",", "\n", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "model", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "train_detector", "(", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "(", "not", "args", ".", "no_validate", ")", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.test.parse_args": [[22, 102], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMDet test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--work-dir'", ",", "\n", "help", "=", "'the directory to save the file containing evaluation metrics'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fuse-conv-bn'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to fuse conv and bn, this will slightly increase'", "\n", "'the inference speed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., \"bbox\",'", "\n", "' \"segm\", \"proposal\" for COCO, and \"mAP\", \"recall\" for PASCAL VOC'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--show-dir'", ",", "\n", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "'--show-score-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.3", ",", "\n", "help", "=", "'score threshold (default: 0.3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu-collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple '", "\n", "'workers, available when gpu-collect is not specified'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function (deprecate), '", "\n", "'change to --eval-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function'", ")", "\n", "parser", ".", "add_argument", "(", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "if", "args", ".", "options", "and", "args", ".", "eval_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --eval-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --eval-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --eval-options'", ")", "\n", "args", ".", "eval_options", "=", "args", ".", "options", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.test.main": [[104, 244], ["test.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "Config.fromfile.model.get", "isinstance", "mmcv.runner.get_dist_info", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "isinstance", "Config.fromfile.data.test.pop", "isinstance", "mmcv.runner.init_dist", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "mmcv.runner.wrap_fp16_model", "mmcv.cnn.fuse_conv_bn", "mmcv.runner.load_checkpoint.get", "mmcv.parallel.MMDataParallel", "mmdet.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmdet.apis.multi_gpu_test", "parse_args.out.endswith", "Config.fromfile.model.neck.get", "mmdet.datasets.replace_ImageToTensor", "max", "os.abspath", "time.localtime", "Config.fromfile.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmdet.datasets.build_dataset.format_results", "Config.fromfile.get().copy", "cfg.get().copy.update", "mmdet.datasets.build_dataset.evaluate", "print", "dict", "neck_cfg.get", "Config.fromfile.model.neck.rfp_backbone.get", "hook.copy", "hook.copy.pop", "HOOKS.get", "hasattr", "cfg.get().copy.pop", "dict", "mmcv.dump", "neck_cfg.rfp_backbone.get", "ds_cfg.pop", "mmdet.datasets.replace_ImageToTensor", "mmcv.build_from_cfg", "mmcv.build_from_cfg.after_build_model", "torch.cuda.current_device", "Config.fromfile.get"], "function", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.test.parse_args", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.after_build_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "eval", "or", "args", ".", "format_only", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save/eval/format/show the '", "\n", "'results / save the results) with the argument \"--out\", \"--eval\"'", "\n", "', \"--format-only\", \"--show\" or \"--show-dir\"'", ")", "\n", "\n", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "        ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "if", "cfg", ".", "model", ".", "get", "(", "'neck'", ")", ":", "\n", "        ", "if", "isinstance", "(", "cfg", ".", "model", ".", "neck", ",", "list", ")", ":", "\n", "            ", "for", "neck_cfg", "in", "cfg", ".", "model", ".", "neck", ":", "\n", "                ", "if", "neck_cfg", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "                    ", "if", "neck_cfg", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                        ", "neck_cfg", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "", "", "", "", "elif", "cfg", ".", "model", ".", "neck", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "            ", "if", "cfg", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                ", "cfg", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "\n", "# in case the test dataset is concatenated", "\n", "", "", "", "samples_per_gpu", "=", "1", "\n", "if", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "dict", ")", ":", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "samples_per_gpu", "=", "cfg", ".", "data", ".", "test", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "# Replace 'ImageToTensor' to 'DefaultFormatBundle'", "\n", "            ", "cfg", ".", "data", ".", "test", ".", "pipeline", "=", "replace_ImageToTensor", "(", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", ")", "\n", "", "", "elif", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "list", ")", ":", "\n", "        ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "            ", "ds_cfg", ".", "test_mode", "=", "True", "\n", "", "samples_per_gpu", "=", "max", "(", "\n", "[", "ds_cfg", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", "]", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "            ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "                ", "ds_cfg", ".", "pipeline", "=", "replace_ImageToTensor", "(", "ds_cfg", ".", "pipeline", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "# allows not to create", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "args", ".", "work_dir", ")", ")", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "json_file", "=", "osp", ".", "join", "(", "args", ".", "work_dir", ",", "f'eval_{timestamp}.json'", ")", "\n", "\n", "# build the dataloader", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "dataset", ",", "\n", "samples_per_gpu", "=", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "\n", "if", "'custom_hooks'", "in", "cfg", ":", "\n", "        ", "for", "hook", "in", "cfg", ".", "custom_hooks", ":", "\n", "            ", "if", "hook", ".", "type", "==", "'FisherPruningHook'", ":", "\n", "                ", "hook_cfg", "=", "hook", ".", "copy", "(", ")", "\n", "hook_cfg", ".", "pop", "(", "'priority'", ",", "None", ")", "\n", "from", "mmcv", ".", "runner", ".", "hooks", "import", "HOOKS", "\n", "hook_cls", "=", "HOOKS", ".", "get", "(", "hook_cfg", "[", "'type'", "]", ")", "\n", "if", "hasattr", "(", "hook_cls", ",", "'after_build_model'", ")", ":", "\n", "                    ", "pruning_hook", "=", "mmcv", ".", "build_from_cfg", "(", "hook_cfg", ",", "HOOKS", ")", "\n", "pruning_hook", ".", "after_build_model", "(", "model", ")", "\n", "\n", "", "", "", "", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "args", ".", "fuse_conv_bn", ":", "\n", "        ", "model", "=", "fuse_conv_bn", "(", "model", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "args", ".", "show_dir", ",", "\n", "args", ".", "show_score_thr", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "args", ".", "out", ":", "\n", "            ", "print", "(", "f'\\nwriting results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "", "kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "if", "args", ".", "format_only", ":", "\n", "            ", "dataset", ".", "format_results", "(", "outputs", ",", "**", "kwargs", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "            ", "eval_kwargs", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", ".", "copy", "(", ")", "\n", "# hard-code way to remove EvalHook args", "\n", "for", "key", "in", "[", "\n", "'interval'", ",", "'tmpdir'", ",", "'start'", ",", "'gpu_collect'", ",", "'save_best'", ",", "\n", "'rule'", "\n", "]", ":", "\n", "                ", "eval_kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "", "eval_kwargs", ".", "update", "(", "dict", "(", "metric", "=", "args", ".", "eval", ",", "**", "kwargs", ")", ")", "\n", "metric", "=", "dataset", ".", "evaluate", "(", "outputs", ",", "**", "eval_kwargs", ")", "\n", "print", "(", "metric", ")", "\n", "metric_dict", "=", "dict", "(", "config", "=", "args", ".", "config", ",", "metric", "=", "metric", ")", "\n", "if", "args", ".", "work_dir", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "                ", "mmcv", ".", "dump", "(", "metric_dict", ",", "json_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.__init__": [[52, 104], ["range", "range", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "torch.__version__.startswith", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pruning", "=", "True", ",", "\n", "delta", "=", "'acts'", ",", "\n", "batch_size", "=", "2", ",", "\n", "interval", "=", "10", ",", "\n", "deploy_from", "=", "None", ",", "\n", "save_flops_thr", "=", "[", "0.75", ",", "0.5", ",", "0.25", "]", ",", "\n", "save_acts_thr", "=", "[", "0.75", ",", "0.5", ",", "0.25", "]", ",", "\n", ")", ":", "\n", "\n", "        ", "assert", "delta", "in", "(", "'acts'", ",", "'flops'", ")", "\n", "self", ".", "pruning", "=", "pruning", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "# The key of self.input is conv module, and value of it", "\n", "# is list of conv' input_features in forward process", "\n", "self", ".", "conv_inputs", "=", "{", "}", "\n", "# The key of self.flops is conv module, and value of it", "\n", "# is the summation of conv's flops in forward process", "\n", "self", ".", "flops", "=", "{", "}", "\n", "# The key of self.acts is conv module, and value of it", "\n", "# is number of all the out feature's activations(N*C*H*W)", "\n", "# in forward process", "\n", "self", ".", "acts", "=", "{", "}", "\n", "# The key of self.temp_fisher_info is conv module, and value", "\n", "# is a temporary variable used to estimate fisher.", "\n", "self", ".", "temp_fisher_info", "=", "{", "}", "\n", "\n", "# The key of self.batch_fishers is conv module, and value", "\n", "# is the estimation of fisher by single batch.", "\n", "self", ".", "batch_fishers", "=", "{", "}", "\n", "\n", "# The key of self.accum_fishers is conv module, and value", "\n", "# is the estimation of parameter's fisher by all the batch", "\n", "# during number of self.interval iterations.", "\n", "self", ".", "accum_fishers", "=", "{", "}", "\n", "self", ".", "channels", "=", "0", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "deploy_from", "=", "deploy_from", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "save_acts_thr", ")", "-", "1", ")", ":", "\n", "            ", "assert", "save_acts_thr", "[", "i", "]", ">", "save_acts_thr", "[", "i", "+", "1", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "save_flops_thr", ")", "-", "1", ")", ":", "\n", "            ", "assert", "save_flops_thr", "[", "i", "]", ">", "save_flops_thr", "[", "i", "+", "1", "]", "\n", "\n", "", "self", ".", "save_flops_thr", "=", "save_flops_thr", "\n", "self", ".", "save_acts_thr", "=", "save_acts_thr", "\n", "if", "self", ".", "pruning", ":", "\n", "            ", "assert", "torch", ".", "__version__", ".", "startswith", "(", "'1.3'", ")", ",", "(", "\n", "'Due to the frequent changes of the autograd '", "\n", "'interface, we only guarantee it works well in pytorch==1.3.'", ")", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.after_build_model": [[106, 120], ["model.named_modules", "mmcv.runner.checkpoint.load_checkpoint", "fisher_pruning.deploy_pruning", "fisher_pruning.add_pruning_attrs"], "methods", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.deploy_pruning", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.add_pruning_attrs"], ["", "", "def", "after_build_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"Remove all pruned channels in finetune stage.\n\n        We add this function to ensure that this happens before DDP's\n        optimizer's initialization\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "pruning", ":", "\n", "            ", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "add_pruning_attrs", "(", "module", ")", "\n", "", "assert", "self", ".", "deploy_from", ",", "'You have to give a ckpt'", "'containing the structure information of the pruning model'", "\n", "load_checkpoint", "(", "model", ",", "self", ".", "deploy_from", ")", "\n", "deploy_pruning", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.before_run": [[121, 167], ["collections.OrderedDict", "collections.OrderedDict", "runner.model.named_modules", "fisher_pruning.FisherPruningHook.print_model", "isinstance", "isinstance", "model.eval", "fisher_pruning.FisherPruningHook.set_group_masks", "model.train", "fisher_pruning.FisherPruningHook.construct_outchannel_masks", "fisher_pruning.FisherPruningHook.conv_names.items", "fisher_pruning.FisherPruningHook.register_hooks", "fisher_pruning.FisherPruningHook.init_flops_acts", "fisher_pruning.FisherPruningHook.init_temp_fishers", "fisher_pruning.add_pruning_attrs", "conv.weight.data.new_zeros", "conv.weight.data.new_zeros", "conv.weight.data.new_zeros", "conv.weight.data.new_zeros"], "methods", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.print_model", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.set_group_masks", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.construct_outchannel_masks", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.register_hooks", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.init_flops_acts", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.init_temp_fishers", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.add_pruning_attrs"], ["", "", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Initialize the relevant variables(fisher, flops and acts) for\n        calculating the importance of the channel, and use the layer-grouping\n        algorithm to make the coupled module shared the mask of input\n        channel.\"\"\"", "\n", "\n", "self", ".", "conv_names", "=", "OrderedDict", "(", ")", "\n", "self", ".", "bn_names", "=", "OrderedDict", "(", ")", "\n", "self", ".", "logger", "=", "runner", ".", "logger", "\n", "\n", "for", "n", ",", "m", "in", "runner", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "self", ".", "pruning", ":", "\n", "                ", "add_pruning_attrs", "(", "m", ",", "pruning", "=", "self", ".", "pruning", ")", "\n", "", "if", "isinstance", "(", "m", ",", "Conv2d", ")", ":", "\n", "                ", "m", ".", "name", "=", "n", "\n", "self", ".", "conv_names", "[", "m", "]", "=", "n", "\n", "", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                ", "m", ".", "name", "=", "n", "\n", "self", ".", "bn_names", "[", "m", "]", "=", "n", "\n", "\n", "", "", "model", "=", "runner", ".", "model", "\n", "\n", "if", "self", ".", "pruning", ":", "\n", "# divide the conv to several group and all convs in same", "\n", "# group used same input at least once in model's", "\n", "# forward process.", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "self", ".", "set_group_masks", "(", "model", ")", "\n", "model", ".", "train", "(", ")", "\n", "self", ".", "construct_outchannel_masks", "(", ")", "\n", "for", "conv", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "conv_inputs", "[", "conv", "]", "=", "[", "]", "\n", "self", ".", "temp_fisher_info", "[", "conv", "]", "=", "conv", ".", "weight", ".", "data", ".", "new_zeros", "(", "\n", "self", ".", "batch_size", ",", "conv", ".", "in_channels", ")", "\n", "self", ".", "accum_fishers", "[", "conv", "]", "=", "conv", ".", "weight", ".", "data", ".", "new_zeros", "(", "\n", "conv", ".", "in_channels", ")", "\n", "", "for", "group_id", "in", "self", ".", "groups", ":", "\n", "                ", "module", "=", "self", ".", "groups", "[", "group_id", "]", "[", "0", "]", "\n", "self", ".", "temp_fisher_info", "[", "group_id", "]", "=", "conv", ".", "weight", ".", "data", ".", "new_zeros", "(", "\n", "self", ".", "batch_size", ",", "module", ".", "in_channels", ")", "\n", "self", ".", "accum_fishers", "[", "group_id", "]", "=", "conv", ".", "weight", ".", "data", ".", "new_zeros", "(", "\n", "module", ".", "in_channels", ")", "\n", "", "self", ".", "register_hooks", "(", ")", "\n", "self", ".", "init_flops_acts", "(", ")", "\n", "self", ".", "init_temp_fishers", "(", ")", "\n", "", "self", ".", "print_model", "(", "runner", ",", "print_flops_acts", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.after_train_iter": [[168, 181], ["fisher_pruning.FisherPruningHook.group_fishers", "fisher_pruning.FisherPruningHook.accumulate_fishers", "fisher_pruning.FisherPruningHook.init_temp_fishers", "fisher_pruning.FisherPruningHook.every_n_iters", "fisher_pruning.FisherPruningHook.init_flops_acts", "fisher_pruning.FisherPruningHook.reduce_fishers", "fisher_pruning.FisherPruningHook.channel_prune", "fisher_pruning.FisherPruningHook.init_accum_fishers", "fisher_pruning.FisherPruningHook.print_model"], "methods", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.group_fishers", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.accumulate_fishers", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.init_temp_fishers", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.init_flops_acts", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.reduce_fishers", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.channel_prune", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.init_accum_fishers", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.print_model"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "pruning", ":", "\n", "            ", "return", "\n", "", "self", ".", "group_fishers", "(", ")", "\n", "if", "runner", ".", "world_size", ">", "1", ":", "\n", "            ", "self", ".", "reduce_fishers", "(", ")", "\n", "", "self", ".", "accumulate_fishers", "(", ")", "\n", "self", ".", "init_temp_fishers", "(", ")", "\n", "if", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "self", ".", "channel_prune", "(", ")", "\n", "self", ".", "init_accum_fishers", "(", ")", "\n", "self", ".", "print_model", "(", "runner", ",", "print_channel", "=", "False", ")", "\n", "", "self", ".", "init_flops_acts", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.print_model": [[182, 222], ["fisher_pruning.FisherPruningHook.compute_flops_acts", "runner.logger.info", "len", "len", "fisher_pruning.FisherPruningHook.conv_names.items", "int", "int", "runner.logger.info", "fisher_pruning.FisherPruningHook.save_flops_thr.pop", "os.join", "mmcv.runner.checkpoint.save_checkpoint", "fisher_pruning.FisherPruningHook.save_acts_thr.pop", "os.join", "mmcv.runner.checkpoint.save_checkpoint", "module.in_mask.sum().cpu().numpy", "module.out_mask.sum().cpu().numpy", "module.in_mask.sum().cpu", "module.out_mask.sum().cpu", "module.in_mask.sum", "module.out_mask.sum"], "methods", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.compute_flops_acts"], ["", "@", "master_only", "\n", "def", "print_model", "(", "self", ",", "runner", ",", "print_flops_acts", "=", "True", ",", "print_channel", "=", "True", ")", ":", "\n", "        ", "\"\"\"Print the related information of the current model.\n\n        Args:\n            runner (Runner): Runner in mmcv\n            print_flops_acts (bool): Print the remained percentage of\n                flops and acts\n            print_channel (bool): Print information about\n                the number of reserved channels.\n        \"\"\"", "\n", "\n", "if", "print_flops_acts", ":", "\n", "            ", "flops", ",", "acts", "=", "self", ".", "compute_flops_acts", "(", ")", "\n", "runner", ".", "logger", ".", "info", "(", "'Flops: {:.2f}%, Acts: {:.2f}%'", ".", "format", "(", "\n", "flops", "*", "100", ",", "acts", "*", "100", ")", ")", "\n", "if", "len", "(", "self", ".", "save_flops_thr", ")", ":", "\n", "                ", "flops_thr", "=", "self", ".", "save_flops_thr", "[", "0", "]", "\n", "if", "flops", "<", "flops_thr", ":", "\n", "                    ", "self", ".", "save_flops_thr", ".", "pop", "(", "0", ")", "\n", "path", "=", "osp", ".", "join", "(", "\n", "runner", ".", "work_dir", ",", "'flops_{:.0f}_acts_{:.0f}.pth'", ".", "format", "(", "\n", "flops", "*", "100", ",", "acts", "*", "100", ")", ")", "\n", "save_checkpoint", "(", "runner", ".", "model", ",", "filename", "=", "path", ")", "\n", "", "", "if", "len", "(", "self", ".", "save_acts_thr", ")", ":", "\n", "                ", "acts_thr", "=", "self", ".", "save_acts_thr", "[", "0", "]", "\n", "if", "acts", "<", "acts_thr", ":", "\n", "                    ", "self", ".", "save_acts_thr", ".", "pop", "(", "0", ")", "\n", "path", "=", "osp", ".", "join", "(", "\n", "runner", ".", "work_dir", ",", "'acts_{:.0f}_flops_{:.0f}.pth'", ".", "format", "(", "\n", "acts", "*", "100", ",", "flops", "*", "100", ")", ")", "\n", "save_checkpoint", "(", "runner", ".", "model", ",", "filename", "=", "path", ")", "\n", "", "", "", "if", "print_channel", ":", "\n", "            ", "for", "module", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "                ", "chans_i", "=", "int", "(", "module", ".", "in_mask", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "chans_o", "=", "int", "(", "module", ".", "out_mask", ".", "sum", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "runner", ".", "logger", ".", "info", "(", "\n", "'{}: input_channels: {}/{}, out_channels: {}/{}'", ".", "format", "(", "\n", "name", ",", "chans_i", ",", "module", ".", "in_channels", ",", "chans_o", ",", "\n", "module", ".", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.compute_flops_acts": [[223, 240], ["fisher_pruning.FisherPruningHook.conv_names.items", "o_mask.sum", "flops.cpu().numpy", "acts.cpu().numpy", "i_mask.sum", "o_mask.sum", "o_mask.numel", "i_mask.numel", "o_mask.numel", "flops.cpu", "acts.cpu"], "methods", ["None"], ["", "", "", "def", "compute_flops_acts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computing the flops and activation remains.\"\"\"", "\n", "flops", "=", "0", "\n", "max_flops", "=", "0", "\n", "acts", "=", "0", "\n", "max_acts", "=", "0", "\n", "for", "module", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "            ", "max_flop", "=", "self", ".", "flops", "[", "module", "]", "\n", "i_mask", "=", "module", ".", "in_mask", "\n", "o_mask", "=", "module", ".", "out_mask", "\n", "flops", "+=", "max_flop", "/", "(", "i_mask", ".", "numel", "(", ")", "*", "o_mask", ".", "numel", "(", ")", ")", "*", "(", "\n", "i_mask", ".", "sum", "(", ")", "*", "o_mask", ".", "sum", "(", ")", ")", "\n", "max_flops", "+=", "max_flop", "\n", "max_act", "=", "self", ".", "acts", "[", "module", "]", "\n", "acts", "+=", "max_act", "/", "o_mask", ".", "numel", "(", ")", "*", "o_mask", ".", "sum", "(", ")", "\n", "max_acts", "+=", "max_act", "\n", "", "return", "flops", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "max_flops", ",", "acts", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "max_acts", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.init_accum_fishers": [[241, 247], ["fisher_pruning.FisherPruningHook.conv_names.items", "fisher_pruning.FisherPruningHook.accum_fishers[].zero_", "fisher_pruning.FisherPruningHook.accum_fishers[].zero_"], "methods", ["None"], ["", "def", "init_accum_fishers", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear accumulated fisher info.\"\"\"", "\n", "for", "module", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "accum_fishers", "[", "module", "]", ".", "zero_", "(", ")", "\n", "", "for", "group", "in", "self", ".", "groups", ":", "\n", "            ", "self", ".", "accum_fishers", "[", "group", "]", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.find_pruning_channel": [[248, 276], ["in_mask.nonzero().view", "fisher.min", "fisher.sum", "in_mask.sum", "in_mask.nonzero"], "methods", ["None"], ["", "", "def", "find_pruning_channel", "(", "self", ",", "module", ",", "fisher", ",", "in_mask", ",", "info", ")", ":", "\n", "        ", "\"\"\"Find the the channel of a model to pruning.\n\n        Args:\n            module (nn.Conv | int ): Conv module of model or idx of self.group\n            fisher(Tensor): the fisher information of module's in_mask\n            in_mask (Tensor): the squeeze in_mask of modules\n            info (dict): store the channel of which module need to pruning\n                module: the module has channel need to pruning\n                channel: the index of channel need to pruning\n                min : the value of fisher / delta\n\n        Returns:\n            dict: store the current least important channel\n                module: the module has channel need to be pruned\n                channel: the index of channel need be to pruned\n                min : the value of fisher / delta\n        \"\"\"", "\n", "module_info", "=", "{", "}", "\n", "if", "fisher", ".", "sum", "(", ")", ">", "0", "and", "in_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "nonzero", "=", "in_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "fisher", "=", "fisher", "[", "nonzero", "]", "\n", "min_value", ",", "argmin", "=", "fisher", ".", "min", "(", "dim", "=", "0", ")", "\n", "if", "min_value", "<", "info", "[", "'min'", "]", ":", "\n", "                ", "module_info", "[", "'module'", "]", "=", "module", "\n", "module_info", "[", "'channel'", "]", "=", "nonzero", "[", "argmin", "]", "\n", "module_info", "[", "'min'", "]", "=", "min_value", "\n", "", "", "return", "module_info", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.single_prune": [[277, 321], ["fisher_pruning.FisherPruningHook.conv_names.items", "module.in_mask.view", "info.update", "fisher_pruning.FisherPruningHook.find_pruning_channel", "float", "float", "module.out_mask.sum", "max", "ancestor.in_mask.sum"], "methods", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.find_pruning_channel"], ["", "def", "single_prune", "(", "self", ",", "info", ",", "exclude", "=", "None", ")", ":", "\n", "        ", "\"\"\"Find the channel with smallest fisher / delta in modules not in\n        group.\n\n        Args:\n            info (dict): Store the channel of which module need\n                to pruning\n                module: the module has channel need to pruning\n                channel: the index of channel need to pruning\n                min : the value of fisher / delta\n            exclude (list): List contains all modules in group.\n                Default: None\n\n        Returns:\n            dict: store the channel of which module need to be pruned\n                module: the module has channel need to be pruned\n                channel: the index of channel need be to pruned\n                min : the value of fisher / delta\n        \"\"\"", "\n", "\n", "for", "module", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "            ", "if", "exclude", "is", "not", "None", "and", "module", "in", "exclude", ":", "\n", "                ", "continue", "\n", "", "fisher", "=", "self", ".", "accum_fishers", "[", "module", "]", "\n", "in_mask", "=", "module", ".", "in_mask", ".", "view", "(", "-", "1", ")", "\n", "ancestors", "=", "self", ".", "conv2ancest", "[", "module", "]", "\n", "if", "self", ".", "delta", "==", "'flops'", ":", "\n", "# delta_flops is a value indicate how much flops is", "\n", "# reduced in entire forward process after we set a", "\n", "# zero in `in_mask` of a specific conv_module.", "\n", "                ", "delta_flops", "=", "self", ".", "flops", "[", "module", "]", "*", "module", ".", "out_mask", ".", "sum", "(", ")", "/", "(", "\n", "module", ".", "in_channels", "*", "module", ".", "out_channels", ")", "\n", "for", "ancestor", "in", "ancestors", ":", "\n", "                    ", "delta_flops", "+=", "self", ".", "flops", "[", "ancestor", "]", "*", "ancestor", ".", "in_mask", ".", "sum", "(", "\n", ")", "/", "(", "ancestor", ".", "in_channels", "*", "ancestor", ".", "out_channels", ")", "\n", "", "fisher", "/=", "(", "float", "(", "delta_flops", ")", "/", "1e9", ")", "\n", "", "if", "self", ".", "delta", "==", "'acts'", ":", "\n", "                ", "delta_acts", "=", "0", "\n", "for", "ancestor", "in", "ancestors", ":", "\n", "                    ", "delta_acts", "+=", "self", ".", "acts", "[", "ancestor", "]", "/", "ancestor", ".", "out_channels", "\n", "", "fisher", "/=", "(", "float", "(", "max", "(", "delta_acts", ",", "1.", ")", ")", "/", "1e6", ")", "\n", "", "info", ".", "update", "(", "\n", "self", ".", "find_pruning_channel", "(", "module", ",", "fisher", ",", "in_mask", ",", "info", ")", ")", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.channel_prune": [[322, 343], ["info.update", "isinstance", "fisher_pruning.FisherPruningHook.single_prune", "[].in_mask.view", "fisher_pruning.FisherPruningHook.accum_fishers[].double", "info.update", "float", "fisher_pruning.FisherPruningHook.find_pruning_channel", "float"], "methods", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.single_prune", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.find_pruning_channel"], ["", "def", "channel_prune", "(", "self", ")", ":", "\n", "        ", "\"\"\"Select the channel in model with smallest fisher / delta set\n        corresponding in_mask 0.\"\"\"", "\n", "\n", "info", "=", "{", "'module'", ":", "None", ",", "'channel'", ":", "None", ",", "'min'", ":", "1e9", "}", "\n", "info", ".", "update", "(", "self", ".", "single_prune", "(", "info", ",", "self", ".", "group_modules", ")", ")", "\n", "for", "group", "in", "self", ".", "groups", ":", "\n", "            ", "in_mask", "=", "self", ".", "groups", "[", "group", "]", "[", "0", "]", ".", "in_mask", ".", "view", "(", "-", "1", ")", "\n", "fisher", "=", "self", ".", "accum_fishers", "[", "group", "]", ".", "double", "(", ")", "\n", "if", "self", ".", "delta", "==", "'flops'", ":", "\n", "                ", "fisher", "/=", "float", "(", "self", ".", "flops", "[", "group", "]", "/", "1e9", ")", "\n", "", "elif", "self", ".", "delta", "==", "'acts'", ":", "\n", "                ", "fisher", "/=", "float", "(", "self", ".", "acts", "[", "group", "]", "/", "1e6", ")", "\n", "", "info", ".", "update", "(", "self", ".", "find_pruning_channel", "(", "group", ",", "fisher", ",", "in_mask", ",", "\n", "info", ")", ")", "\n", "", "module", ",", "channel", "=", "info", "[", "'module'", "]", ",", "info", "[", "'channel'", "]", "\n", "if", "isinstance", "(", "module", ",", "int", ")", ":", "\n", "            ", "for", "m", "in", "self", ".", "groups", "[", "module", "]", ":", "\n", "                ", "m", ".", "in_mask", "[", "0", ",", "channel", "]", "=", "0", "\n", "", "", "elif", "module", "is", "not", "None", ":", "\n", "            ", "module", ".", "in_mask", "[", "0", ",", "channel", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.accumulate_fishers": [[344, 351], ["fisher_pruning.FisherPruningHook.conv_names.items"], "methods", ["None"], ["", "", "def", "accumulate_fishers", "(", "self", ")", ":", "\n", "        ", "\"\"\"Accumulate all the fisher during self.interval iterations.\"\"\"", "\n", "\n", "for", "module", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "accum_fishers", "[", "module", "]", "+=", "self", ".", "batch_fishers", "[", "module", "]", "\n", "", "for", "group", "in", "self", ".", "groups", ":", "\n", "            ", "self", ".", "accum_fishers", "[", "group", "]", "+=", "self", ".", "batch_fishers", "[", "group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.reduce_fishers": [[352, 358], ["fisher_pruning.FisherPruningHook.conv_names.items", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce"], "methods", ["None"], ["", "", "def", "reduce_fishers", "(", "self", ")", ":", "\n", "        ", "\"\"\"Collect fisher from all rank.\"\"\"", "\n", "for", "module", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "self", ".", "batch_fishers", "[", "module", "]", ")", "\n", "", "for", "group", "in", "self", ".", "groups", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "self", ".", "batch_fishers", "[", "group", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.group_fishers": [[359, 383], ["fisher_pruning.FisherPruningHook.conv_names.items", "module.out_mask.sum", "module.in_mask.sum"], "methods", ["None"], ["", "", "def", "group_fishers", "(", "self", ")", ":", "\n", "        ", "\"\"\"Accumulate all module.in_mask's fisher and flops in same group.\"\"\"", "\n", "for", "group", "in", "self", ".", "groups", ":", "\n", "            ", "self", ".", "flops", "[", "group", "]", "=", "0", "\n", "self", ".", "acts", "[", "group", "]", "=", "0", "\n", "for", "module", "in", "self", ".", "groups", "[", "group", "]", ":", "\n", "                ", "module_fisher", "=", "self", ".", "temp_fisher_info", "[", "module", "]", "\n", "self", ".", "temp_fisher_info", "[", "group", "]", "+=", "module_fisher", "\n", "delta_flops", "=", "self", ".", "flops", "[", "module", "]", "//", "module", ".", "in_channels", "//", "module", ".", "out_channels", "*", "module", ".", "out_mask", ".", "sum", "(", ")", "\n", "self", ".", "flops", "[", "group", "]", "+=", "delta_flops", "\n", "\n", "", "self", ".", "batch_fishers", "[", "group", "]", "=", "(", "\n", "self", ".", "temp_fisher_info", "[", "group", "]", "**", "2", ")", ".", "sum", "(", "0", ")", "\n", "\n", "for", "module", "in", "self", ".", "ancest", "[", "group", "]", ":", "\n", "                ", "delta_flops", "=", "self", ".", "flops", "[", "module", "]", "//", "module", ".", "out_channels", "//", "module", ".", "in_channels", "*", "module", ".", "in_mask", ".", "sum", "(", ")", "\n", "self", ".", "flops", "[", "group", "]", "+=", "delta_flops", "\n", "acts", "=", "self", ".", "acts", "[", "module", "]", "//", "module", ".", "out_channels", "\n", "self", ".", "acts", "[", "group", "]", "+=", "acts", "\n", "", "", "for", "module", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "batch_fishers", "[", "module", "]", "=", "(", "\n", "self", ".", "temp_fisher_info", "[", "module", "]", "**", "2", ")", ".", "sum", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.init_flops_acts": [[384, 389], ["fisher_pruning.FisherPruningHook.conv_names.items"], "methods", ["None"], ["", "", "def", "init_flops_acts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear the flops and acts of model in last iter.\"\"\"", "\n", "for", "module", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "flops", "[", "module", "]", "=", "0", "\n", "self", ".", "acts", "[", "module", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.init_temp_fishers": [[390, 396], ["fisher_pruning.FisherPruningHook.conv_names.items", "fisher_pruning.FisherPruningHook.temp_fisher_info[].zero_", "fisher_pruning.FisherPruningHook.temp_fisher_info[].zero_"], "methods", ["None"], ["", "", "def", "init_temp_fishers", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clear fisher info of single conv and group.\"\"\"", "\n", "for", "module", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "temp_fisher_info", "[", "module", "]", ".", "zero_", "(", ")", "\n", "", "for", "group", "in", "self", ".", "groups", ":", "\n", "            ", "self", ".", "temp_fisher_info", "[", "group", "]", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.register_hooks": [[397, 402], ["fisher_pruning.FisherPruningHook.conv_names.items", "module.register_forward_hook", "module.register_backward_hook"], "methods", ["None"], ["", "", "def", "register_hooks", "(", "self", ")", ":", "\n", "        ", "\"\"\"Register forward and backward hook to Conv module.\"\"\"", "\n", "for", "module", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "            ", "module", ".", "register_forward_hook", "(", "self", ".", "save_input_forward_hook", ")", "\n", "module", ".", "register_backward_hook", "(", "self", ".", "compute_fisher_backward_hook", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.save_input_forward_hook": [[403, 422], ["numpy.prod", "numpy.prod", "fisher_pruning.FisherPruningHook.conv_inputs[].append"], "methods", ["None"], ["", "", "def", "save_input_forward_hook", "(", "self", ",", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Save the input and flops and acts for computing fisher and flops or\n        acts.\n\n        Args:\n            module (nn.Module): the module of register hook\n            inputs (tuple): input of module\n            outputs (tuple): out of module\n        \"\"\"", "\n", "\n", "n", ",", "oc", ",", "oh", ",", "ow", "=", "outputs", ".", "shape", "\n", "ic", "=", "module", ".", "in_channels", "//", "module", ".", "groups", "\n", "kh", ",", "kw", "=", "module", ".", "kernel_size", "\n", "self", ".", "flops", "[", "module", "]", "+=", "np", ".", "prod", "(", "[", "n", ",", "oc", ",", "oh", ",", "ow", ",", "ic", ",", "kh", ",", "kw", "]", ")", "\n", "self", ".", "acts", "[", "module", "]", "+=", "np", ".", "prod", "(", "[", "n", ",", "oc", ",", "oh", ",", "ow", "]", ")", "\n", "# a conv module may has several inputs in graph,for example", "\n", "# head in Retinanet", "\n", "if", "inputs", "[", "0", "]", ".", "requires_grad", ":", "\n", "            ", "self", ".", "conv_inputs", "[", "module", "]", ".", "append", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.compute_fisher_backward_hook": [[423, 445], ["fisher_pruning.FisherPruningHook.compute_fisher_backward_hook.compute_fisher"], "methods", ["None"], ["", "", "def", "compute_fisher_backward_hook", "(", "self", ",", "module", ",", "grad_input", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            module (nn.Module): module register hooks\n            grad_input (tuple): tuple contains grad of input and parameters,\n                grad_input[0]is the grad of input in Pytorch 1.3, it seems\n                has changed in Higher version\n        \"\"\"", "\n", "def", "compute_fisher", "(", "input", ",", "grad_input", ",", "layer_name", ")", ":", "\n", "            ", "grads", "=", "input", "*", "grad_input", "\n", "if", "layer_name", "==", "'Conv2d'", ":", "\n", "                ", "grads", "=", "grads", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "", "return", "grads", "\n", "\n", "", "if", "module", "in", "self", ".", "conv_names", "and", "grad_input", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "layer_name", "=", "type", "(", "module", ")", ".", "__name__", "\n", "feature", "=", "self", ".", "conv_inputs", "[", "module", "]", ".", "pop", "(", "-", "1", ")", "[", "0", "]", "\n", "grad_feature", "=", "grad_input", "[", "0", "]", "\n", "# avoid that last batch is't full,", "\n", "# but actually it's always full in mmdetection.", "\n", "self", ".", "temp_fisher_info", "[", "module", "]", "[", ":", "grad_input", "[", "0", "]", ".", "size", "(", "0", ")", "]", "+=", "compute_fisher", "(", "feature", ",", "grad_feature", ",", "layer_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.construct_outchannel_masks": [[446, 468], ["fisher_pruning.FisherPruningHook.conv_names.items", "fisher_pruning.FisherPruningHook.bn_names.items", "fisher_pruning.FisherPruningHook.conv2ancest.items", "conv.register_buffer", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "def", "construct_outchannel_masks", "(", "self", ")", ":", "\n", "        ", "\"\"\"Register the `input_mask` of one conv to it's nearest ancestor conv,\n        and name it as `out_mask`, which means the actually number of output\n        feature map after pruning.\"\"\"", "\n", "\n", "for", "conv", ",", "name", "in", "self", ".", "conv_names", ".", "items", "(", ")", ":", "\n", "            ", "assigned", "=", "False", "\n", "for", "m", ",", "ancest", "in", "self", ".", "conv2ancest", ".", "items", "(", ")", ":", "\n", "                ", "if", "conv", "in", "ancest", ":", "\n", "                    ", "conv", ".", "out_mask", "=", "m", ".", "in_mask", "\n", "assigned", "=", "True", "\n", "break", "\n", "# may be the last conv of network", "\n", "", "", "if", "not", "assigned", ":", "\n", "                ", "conv", ".", "register_buffer", "(", "\n", "'out_mask'", ",", "\n", "torch", ".", "ones", "(", "(", "1", ",", "conv", ".", "out_channels", ",", "1", ",", "1", ")", ",", "\n", "dtype", "=", "torch", ".", "bool", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "", "", "for", "bn", ",", "name", "in", "self", ".", "bn_names", ".", "items", "(", ")", ":", "\n", "            ", "conv_module", "=", "self", ".", "bn2ancest", "[", "bn", "]", "[", "0", "]", "\n", "bn", ".", "out_mask", "=", "conv_module", ".", "out_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.make_groups": [[469, 512], ["reversed", "fisher_pruning.FisherPruningHook.conv_names.items", "set", "set", "len", "fisher_pruning.FisherPruningHook.groups.items", "len", "groups[].append", "list", "set.intersection", "set.union"], "methods", ["None"], ["", "", "def", "make_groups", "(", "self", ")", ":", "\n", "        ", "\"\"\"The modules (convolutions and BNs) connected to the same conv need\n        to change the channels simultaneously when pruning.\n\n        This function divides all modules into different groups according to\n        the connections.\n        \"\"\"", "\n", "\n", "idx", "=", "-", "1", "\n", "groups", ",", "groups_ancest", "=", "{", "}", ",", "{", "}", "\n", "for", "module", ",", "name", "in", "reversed", "(", "self", ".", "conv_names", ".", "items", "(", ")", ")", ":", "\n", "            ", "added", "=", "False", "\n", "for", "group", "in", "groups", ":", "\n", "                ", "module_ancest", "=", "set", "(", "self", ".", "conv2ancest", "[", "module", "]", ")", "\n", "group_ancest", "=", "set", "(", "groups_ancest", "[", "group", "]", ")", "\n", "if", "len", "(", "module_ancest", ".", "intersection", "(", "group_ancest", ")", ")", ">", "0", ":", "\n", "                    ", "groups", "[", "group", "]", ".", "append", "(", "module", ")", "\n", "groups_ancest", "[", "group", "]", "=", "list", "(", "\n", "module_ancest", ".", "union", "(", "group_ancest", ")", ")", "\n", "added", "=", "True", "\n", "break", "\n", "", "", "if", "not", "added", ":", "\n", "                ", "idx", "+=", "1", "\n", "groups", "[", "idx", "]", "=", "[", "module", "]", "\n", "groups_ancest", "[", "idx", "]", "=", "self", ".", "conv2ancest", "[", "module", "]", "\n", "# key is the ids the group, and value contains all conv", "\n", "# of this group", "\n", "", "", "self", ".", "groups", "=", "{", "}", "\n", "# key is the ids the group, and value contains all nearest", "\n", "# ancestor of this group", "\n", "self", ".", "ancest", "=", "{", "}", "\n", "idx", "=", "0", "\n", "# filter the group with only one conv", "\n", "for", "group", "in", "groups", ":", "\n", "            ", "modules", "=", "groups", "[", "group", "]", "\n", "if", "len", "(", "modules", ")", ">", "1", ":", "\n", "                ", "self", ".", "groups", "[", "idx", "]", "=", "modules", "\n", "self", ".", "ancest", "[", "idx", "]", "=", "groups_ancest", "[", "group", "]", "\n", "idx", "+=", "1", "\n", "# the conv's name in same group, just for debug", "\n", "# TODO remove this", "\n", "", "", "self", ".", "conv_names_group", "=", "[", "[", "item", ".", "name", "for", "item", "in", "v", "]", "\n", "for", "idx", ",", "v", "in", "self", ".", "groups", ".", "items", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.set_group_masks": [[513, 558], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "fisher_pruning.FisherPruningHook.set_group_masks.onestage_wrapper"], "methods", ["None"], ["", "def", "set_group_masks", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"the modules(convolutions and BN) connect to same convolutions need\n        change the out channels at same time when pruning, divide the modules\n        into different groups according to the connection.\n\n        Args:\n            model(nn.Module): the model contains all modules\n        \"\"\"", "\n", "\n", "# TODO: support two stage model", "\n", "net_names", "=", "[", "'backbone'", ",", "'neck'", ",", "'bbox_head'", "]", "\n", "\n", "def", "onestage_wrapper", "(", "x", ")", ":", "\n", "            ", "out", "=", "0.", "\n", "for", "levels", "in", "x", ":", "\n", "                ", "out", "+=", "sum", "(", "[", "level", ".", "sum", "(", ")", "for", "level", "in", "levels", "]", ")", "\n", "", "return", "out", "\n", "\n", "", "inputs", "=", "torch", ".", "zeros", "(", "1", ",", "3", ",", "256", ",", "256", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "name", "in", "net_names", ":", "\n", "            ", "net", "=", "dict", "(", "model", ".", "named_modules", "(", ")", ")", "[", "f'module.{name}'", "]", "\n", "inputs", "=", "net", "(", "inputs", ")", "\n", "", "loss", "=", "onestage_wrapper", "(", "inputs", ")", "\n", "# self.conv2ancest is a dict, key is all conv instance in", "\n", "# model, value is a list which contains all nearest  ancestor", "\n", "# conv, and self.conv_link describe the connection using module", "\n", "# name", "\n", "self", ".", "conv2ancest", "=", "self", ".", "find_module_ancestors", "(", "loss", ",", "NON_PASS", ")", "\n", "self", ".", "conv_link", "=", "{", "\n", "k", ".", "name", ":", "[", "item", ".", "name", "for", "item", "in", "v", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "conv2ancest", ".", "items", "(", ")", "\n", "}", "\n", "# key is bn module, and value is a list of nearest", "\n", "# ancestor convs", "\n", "self", ".", "bn2ancest", "=", "self", ".", "find_module_ancestors", "(", "loss", ",", "BN", ")", "\n", "loss", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "self", ".", "make_groups", "(", ")", "\n", "\n", "# list contains all the convs which are contained in a", "\n", "# group (if more the one conv has same ancestor,", "\n", "# they will be in same group)", "\n", "self", ".", "group_modules", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "groups", ":", "\n", "            ", "self", ".", "group_modules", ".", "extend", "(", "self", ".", "groups", "[", "group", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.find_module_ancestors": [[559, 615], ["fisher_pruning.FisherPruningHook.traverse", "module_names.items", "op2parents.items", "id", "op2module.items", "hasattr", "op2module.items", "id", "op2parents[].extend"], "methods", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.traverse"], ["", "", "def", "find_module_ancestors", "(", "self", ",", "loss", ",", "pattern", ")", ":", "\n", "        ", "\"\"\"find the nearest Convolution of the module\n        matching the pattern\n        Args:\n            loss(Tensor): the output of the network\n            pattern(Tuple[str]): the pattern name\n\n        Returns:\n            dict: the key is the module match the pattern(Conv or Fc),\n             and value is the list of it's nearest ancestor Convolution\n        \"\"\"", "\n", "\n", "# key is the op (indicate a Conv or Fc) and value is a list", "\n", "# contains all the nearest ops (indicate a Conv or Fc)", "\n", "op2parents", "=", "{", "}", "\n", "self", ".", "traverse", "(", "loss", ".", "grad_fn", ",", "op2parents", ",", "pattern", ")", "\n", "\n", "var2module", "=", "{", "}", "\n", "if", "pattern", "is", "BN", ":", "\n", "            ", "module_names", "=", "self", ".", "bn_names", "\n", "", "else", ":", "\n", "            ", "module_names", "=", "self", ".", "conv_names", "\n", "", "for", "module", ",", "name", "in", "module_names", ".", "items", "(", ")", ":", "\n", "            ", "var2module", "[", "id", "(", "module", ".", "weight", ")", "]", "=", "module", "\n", "\n", "# same module may appear several times in computing graph,", "\n", "# so same module can correspond to several op, for example,", "\n", "# different feature pyramid level share heads.", "\n", "# op2module select one op as the flag of module.", "\n", "", "op2module", "=", "{", "}", "\n", "for", "op", ",", "parents", "in", "op2parents", ".", "items", "(", ")", ":", "\n", "# TODO bfs to get variable", "\n", "            ", "var_id", "=", "id", "(", "op", ".", "next_functions", "[", "1", "]", "[", "0", "]", ".", "variable", ")", "\n", "module", "=", "var2module", "[", "var_id", "]", "\n", "exist", "=", "False", "\n", "# may several op link to same module", "\n", "for", "temp_op", ",", "temp_module", "in", "op2module", ".", "items", "(", ")", ":", "\n", "# temp_op(has visited in loop) and op", "\n", "# link to same module, so their should share", "\n", "# all parents, so we need extend the value of", "\n", "# op to value of temp_op", "\n", "                ", "if", "temp_module", "is", "module", ":", "\n", "                    ", "op2parents", "[", "temp_op", "]", ".", "extend", "(", "op2parents", "[", "op", "]", ")", "\n", "exist", "=", "True", "\n", "break", "\n", "", "", "if", "not", "exist", ":", "\n", "                ", "op2module", "[", "op", "]", "=", "module", "\n", "", "", "if", "not", "hasattr", "(", "self", ",", "'conv_module'", ")", ":", "\n", "# save for find bn's ancestor convolutions", "\n", "            ", "self", ".", "conv_module", "=", "op2module", "\n", "", "return", "{", "\n", "module", ":", "[", "\n", "self", ".", "conv_module", "[", "parent", "]", "for", "parent", "in", "op2parents", "[", "op", "]", "\n", "if", "parent", "in", "self", ".", "conv_module", "\n", "]", "\n", "for", "op", ",", "module", "in", "op2module", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.traverse": [[617, 636], ["fisher_pruning.FisherPruningHook.match", "fisher_pruning.FisherPruningHook.dfs", "fisher_pruning.FisherPruningHook.traverse"], "methods", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.match", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.dfs", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.traverse"], ["", "def", "traverse", "(", "self", ",", "op", ",", "op2parents", ",", "pattern", "=", "NON_PASS", ")", ":", "\n", "        ", "\"\"\"to get a dict which can describe the computer Graph,\n\n        Args:\n            op (grad_fn): as a root of DFS\n            op2parents (dict): key is the grad_fn match the patter,and\n                value is first grad_fn match NON_PASS when DFS from Key\n            pattern (Tuple[str]): the patter of grad_fn to match\n        \"\"\"", "\n", "\n", "if", "op", "is", "not", "None", ":", "\n", "            ", "parents", "=", "op", ".", "next_functions", "\n", "if", "parents", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "match", "(", "op", ",", "pattern", ")", ":", "\n", "                    ", "op2parents", "[", "op", "]", "=", "self", ".", "dfs", "(", "parents", "[", "0", "]", "[", "0", "]", ",", "[", "]", ")", "\n", "", "for", "parent", "in", "parents", ":", "\n", "                    ", "parent", "=", "parent", "[", "0", "]", "\n", "if", "parent", "not", "in", "op2parents", ":", "\n", "                        ", "self", ".", "traverse", "(", "parent", ",", "op2parents", ",", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.dfs": [[637, 661], ["visited.append", "fisher_pruning.FisherPruningHook.match", "ret.extend", "fisher_pruning.FisherPruningHook.dfs"], "methods", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.match", "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.dfs"], ["", "", "", "", "", "def", "dfs", "(", "self", ",", "op", ",", "visited", ")", ":", "\n", "        ", "\"\"\"DFS from a op,return all op when find a op match the patter\n        NON_PASS.\n\n        Args:\n            op (grad_fn): the root of DFS\n            visited (list[grad_fn]): contains all op has been visited\n\n        Returns:\n            list : all the ops  match the patter NON_PASS\n        \"\"\"", "\n", "\n", "ret", "=", "[", "]", "\n", "if", "op", "is", "not", "None", ":", "\n", "            ", "visited", ".", "append", "(", "op", ")", "\n", "if", "self", ".", "match", "(", "op", ",", "NON_PASS", ")", ":", "\n", "                ", "return", "[", "op", "]", "\n", "", "parents", "=", "op", ".", "next_functions", "\n", "if", "parents", "is", "not", "None", ":", "\n", "                ", "for", "parent", "in", "parents", ":", "\n", "                    ", "parent", "=", "parent", "[", "0", "]", "\n", "if", "parent", "not", "in", "visited", ":", "\n", "                        ", "ret", ".", "extend", "(", "self", ".", "dfs", "(", "parent", ",", "visited", ")", ")", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.match": [[662, 679], ["re.match", "type"], "methods", ["home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.FisherPruningHook.match"], ["", "def", "match", "(", "self", ",", "op", ",", "op_to_match", ")", ":", "\n", "        ", "\"\"\"Match an operation to a group of operations; In pytorch graph, there\n        may be an additional '0' or '1' (e.g. Addbackward1) after the ops\n        listed above.\n\n        Args:\n            op (grad_fn): the grad_fn to match the pattern\n            op_to_match (list[str]): the pattern need to match\n\n        Returns:\n            bool: return True when match the pattern else False\n        \"\"\"", "\n", "\n", "for", "to_match", "in", "op_to_match", ":", "\n", "            ", "if", "re", ".", "match", "(", "to_match", "+", "'[0-1]?$'", ",", "type", "(", "op", ")", ".", "__name__", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.add_pruning_attrs": [[681, 711], ["module.register_buffer", "module.register_buffer", "types.MethodType", "module.register_buffer", "type", "module.weight.new_ones", "module.weight.new_ones", "torch.conv2d", "type", "module.weight.new_ones", "len"], "function", ["None"], ["", "", "def", "add_pruning_attrs", "(", "module", ",", "pruning", "=", "False", ")", ":", "\n", "    ", "\"\"\"When module is conv, add `finetune` attribute, register `mask` buffer\n    and change the origin `forward` function. When module is BN, add `out_mask`\n    attribute to module.\n\n    Args:\n        conv (nn.Conv2d):  The instance of `torch.nn.Conv2d`\n        pruning (bool): Indicating the state of model which\n            will make conv's forward behave differently.\n    \"\"\"", "\n", "# TODO: mask  change to bool", "\n", "if", "type", "(", "module", ")", ".", "__name__", "==", "'Conv2d'", ":", "\n", "        ", "module", ".", "register_buffer", "(", "\n", "'in_mask'", ",", "module", ".", "weight", ".", "new_ones", "(", "(", "1", ",", "module", ".", "in_channels", ",", "1", ",", "1", ")", ",", ")", ")", "\n", "module", ".", "register_buffer", "(", "\n", "'out_mask'", ",", "module", ".", "weight", ".", "new_ones", "(", "\n", "(", "1", ",", "module", ".", "out_channels", ",", "1", ",", "1", ")", ",", ")", ")", "\n", "module", ".", "finetune", "=", "not", "pruning", "\n", "\n", "def", "modified_forward", "(", "self", ",", "feature", ")", ":", "\n", "            ", "if", "not", "self", ".", "finetune", ":", "\n", "                ", "feature", "=", "feature", "*", "self", ".", "in_mask", "\n", "", "return", "F", ".", "conv2d", "(", "feature", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "", "module", ".", "forward", "=", "MethodType", "(", "modified_forward", ",", "module", ")", "\n", "", "if", "'BatchNorm'", "in", "type", "(", "module", ")", ".", "__name__", ":", "\n", "        ", "module", ".", "register_buffer", "(", "\n", "'out_mask'", ",", "module", ".", "weight", ".", "new_ones", "(", "\n", "(", "1", ",", "len", "(", "module", ".", "weight", ")", ",", "1", ",", "1", ")", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshilong_FisherPruning.tools.fisher_pruning.deploy_pruning": [[713, 740], ["model.named_modules", "module.out_mask.view().bool", "module.in_mask.view().bool", "torch.Parameter", "type", "hasattr", "torch.Parameter", "module.out_mask.view().bool", "torch.Parameter", "torch.Parameter", "module.out_mask.view", "module.in_mask.view", "type", "module.out_mask.view"], "function", ["None"], ["", "", "def", "deploy_pruning", "(", "model", ")", ":", "\n", "    ", "\"\"\"To speed up the finetune process, We change the shape of parameter\n    according to the `in_mask` and `out_mask` in it.\"\"\"", "\n", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "type", "(", "module", ")", ".", "__name__", "==", "'Conv2d'", ":", "\n", "            ", "module", ".", "finetune", "=", "True", "\n", "requires_grad", "=", "module", ".", "weight", ".", "requires_grad", "\n", "out_mask", "=", "module", ".", "out_mask", ".", "view", "(", "-", "1", ")", ".", "bool", "(", ")", "\n", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", "=", "nn", ".", "Parameter", "(", "module", ".", "bias", ".", "data", "[", "out_mask", "]", ")", "\n", "module", ".", "bias", ".", "requires_grad", "=", "requires_grad", "\n", "", "temp_weight", "=", "module", ".", "weight", ".", "data", "[", "out_mask", "]", "\n", "in_mask", "=", "module", ".", "in_mask", ".", "view", "(", "-", "1", ")", ".", "bool", "(", ")", "\n", "module", ".", "weight", "=", "nn", ".", "Parameter", "(", "temp_weight", "[", ":", ",", "in_mask", "]", ".", "data", ")", "\n", "module", ".", "weight", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "elif", "'BatchNorm2d'", "in", "type", "(", "module", ")", ".", "__name__", ":", "\n", "            ", "out_mask", "=", "module", ".", "out_mask", ".", "view", "(", "-", "1", ")", ".", "bool", "(", ")", "\n", "requires_grad", "=", "module", ".", "weight", ".", "requires_grad", "\n", "module", ".", "weight", "=", "nn", ".", "Parameter", "(", "module", ".", "weight", ".", "data", "[", "out_mask", "]", ".", "data", ")", "\n", "module", ".", "bias", "=", "nn", ".", "Parameter", "(", "module", ".", "bias", ".", "data", "[", "out_mask", "]", ".", "data", ")", "\n", "module", ".", "running_mean", "=", "module", ".", "running_mean", "[", "out_mask", "]", "\n", "module", ".", "running_var", "=", "module", ".", "running_var", "[", "out_mask", "]", "\n", "module", ".", "weight", ".", "requires_grad", "=", "requires_grad", "\n", "module", ".", "bias", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", ""]]}