{"home.repos.pwc.inspect_result.NVlabs_SPADE.trainers.pix2pix_trainer.Pix2PixTrainer.__init__": [[17, 32], ["models.pix2pix_model.Pix2PixModel", "len", "models.networks.sync_batchnorm.DataParallelWithCallback", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.create_optimizers"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.create_optimizers"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "pix2pix_model", "=", "Pix2PixModel", "(", "opt", ")", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "pix2pix_model", "=", "DataParallelWithCallback", "(", "self", ".", "pix2pix_model", ",", "\n", "device_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "pix2pix_model_on_one_gpu", "=", "self", ".", "pix2pix_model", ".", "module", "\n", "", "else", ":", "\n", "            ", "self", ".", "pix2pix_model_on_one_gpu", "=", "self", ".", "pix2pix_model", "\n", "\n", "", "self", ".", "generated", "=", "None", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "optimizer_G", ",", "self", ".", "optimizer_D", "=", "self", ".", "pix2pix_model_on_one_gpu", ".", "create_optimizers", "(", "opt", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.trainers.pix2pix_trainer.Pix2PixTrainer.run_generator_one_step": [[33, 41], ["pix2pix_trainer.Pix2PixTrainer.optimizer_G.zero_grad", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model", "sum().mean", "sum().mean.backward", "pix2pix_trainer.Pix2PixTrainer.optimizer_G.step", "sum", "g_losses.values"], "methods", ["None"], ["", "", "def", "run_generator_one_step", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "g_losses", ",", "generated", "=", "self", ".", "pix2pix_model", "(", "data", ",", "mode", "=", "'generator'", ")", "\n", "g_loss", "=", "sum", "(", "g_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "g_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "self", ".", "g_losses", "=", "g_losses", "\n", "self", ".", "generated", "=", "generated", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.trainers.pix2pix_trainer.Pix2PixTrainer.run_discriminator_one_step": [[42, 49], ["pix2pix_trainer.Pix2PixTrainer.optimizer_D.zero_grad", "pix2pix_trainer.Pix2PixTrainer.pix2pix_model", "sum().mean", "sum().mean.backward", "pix2pix_trainer.Pix2PixTrainer.optimizer_D.step", "sum", "pix2pix_trainer.Pix2PixTrainer.values"], "methods", ["None"], ["", "def", "run_discriminator_one_step", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "d_losses", "=", "self", ".", "pix2pix_model", "(", "data", ",", "mode", "=", "'discriminator'", ")", "\n", "d_loss", "=", "sum", "(", "d_losses", ".", "values", "(", ")", ")", ".", "mean", "(", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "self", ".", "d_losses", "=", "d_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_losses": [[50, 52], ["None"], "methods", ["None"], ["", "def", "get_latest_losses", "(", "self", ")", ":", "\n", "        ", "return", "{", "**", "self", ".", "g_losses", ",", "**", "self", ".", "d_losses", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.trainers.pix2pix_trainer.Pix2PixTrainer.get_latest_generated": [[53, 55], ["None"], "methods", ["None"], ["", "def", "get_latest_generated", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "generated", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.trainers.pix2pix_trainer.Pix2PixTrainer.update_learning_rate": [[66, 87], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "opt", ".", "niter", ":", "\n", "            ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "new_lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "", "else", ":", "\n", "            ", "new_lr", "=", "self", ".", "old_lr", "\n", "\n", "", "if", "new_lr", "!=", "self", ".", "old_lr", ":", "\n", "            ", "if", "self", ".", "opt", ".", "no_TTUR", ":", "\n", "                ", "new_lr_G", "=", "new_lr", "\n", "new_lr_D", "=", "new_lr", "\n", "", "else", ":", "\n", "                ", "new_lr_G", "=", "new_lr", "/", "2", "\n", "new_lr_D", "=", "new_lr", "*", "2", "\n", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_D", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr_D", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr_G", "\n", "", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "new_lr", ")", ")", "\n", "self", ".", "old_lr", "=", "new_lr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.trainers.pix2pix_trainer.Pix2PixTrainer.save": [[59, 61], ["pix2pix_trainer.Pix2PixTrainer.pix2pix_model_on_one_gpu.save"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "pix2pix_model_on_one_gpu", ".", "save", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.iter_counter.IterationCounter.__init__": [[13, 31], ["os.path.join", "numpy.loadtxt", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "dataset_size", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "dataset_size", "=", "dataset_size", "\n", "\n", "self", ".", "first_epoch", "=", "1", "\n", "self", ".", "total_epochs", "=", "opt", ".", "niter", "+", "opt", ".", "niter_decay", "\n", "self", ".", "epoch_iter", "=", "0", "# iter number within each epoch", "\n", "self", ".", "iter_record_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ",", "'iter.txt'", ")", "\n", "if", "opt", ".", "isTrain", "and", "opt", ".", "continue_train", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "first_epoch", ",", "self", ".", "epoch_iter", "=", "np", ".", "loadtxt", "(", "\n", "self", ".", "iter_record_path", ",", "delimiter", "=", "','", ",", "dtype", "=", "int", ")", "\n", "print", "(", "'Resuming from epoch %d at iteration %d'", "%", "(", "self", ".", "first_epoch", ",", "self", ".", "epoch_iter", ")", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Could not load iteration record at %s. Starting from beginning.'", "%", "\n", "self", ".", "iter_record_path", ")", "\n", "\n", "", "", "self", ".", "total_steps_so_far", "=", "(", "self", ".", "first_epoch", "-", "1", ")", "*", "dataset_size", "+", "self", ".", "epoch_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.iter_counter.IterationCounter.training_epochs": [[33, 35], ["range"], "methods", ["None"], ["", "def", "training_epochs", "(", "self", ")", ":", "\n", "        ", "return", "range", "(", "self", ".", "first_epoch", ",", "self", ".", "total_epochs", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.iter_counter.IterationCounter.record_epoch_start": [[36, 41], ["time.time", "time.time"], "methods", ["None"], ["", "def", "record_epoch_start", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "epoch_iter", "=", "0", "\n", "self", ".", "last_iter_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "current_epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.iter_counter.IterationCounter.record_one_iteration": [[42, 51], ["time.time"], "methods", ["None"], ["", "def", "record_one_iteration", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# the last remaining batch is dropped (see data/__init__.py),", "\n", "# so we can assume batch size is always opt.batchSize", "\n", "self", ".", "time_per_iter", "=", "(", "current_time", "-", "self", ".", "last_iter_time", ")", "/", "self", ".", "opt", ".", "batchSize", "\n", "self", ".", "last_iter_time", "=", "current_time", "\n", "self", ".", "total_steps_so_far", "+=", "self", ".", "opt", ".", "batchSize", "\n", "self", ".", "epoch_iter", "+=", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.iter_counter.IterationCounter.record_epoch_end": [[52, 61], ["time.time", "print", "numpy.savetxt", "print"], "methods", ["None"], ["", "def", "record_epoch_end", "(", "self", ")", ":", "\n", "        ", "current_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_per_epoch", "=", "current_time", "-", "self", ".", "epoch_start_time", "\n", "print", "(", "'End of epoch %d / %d \\t Time Taken: %d sec'", "%", "\n", "(", "self", ".", "current_epoch", ",", "self", ".", "total_epochs", ",", "self", ".", "time_per_epoch", ")", ")", "\n", "if", "self", ".", "current_epoch", "%", "self", ".", "opt", ".", "save_epoch_freq", "==", "0", ":", "\n", "            ", "np", ".", "savetxt", "(", "self", ".", "iter_record_path", ",", "(", "self", ".", "current_epoch", "+", "1", ",", "0", ")", ",", "\n", "delimiter", "=", "','", ",", "fmt", "=", "'%d'", ")", "\n", "print", "(", "'Saved current iteration count at %s.'", "%", "self", ".", "iter_record_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.iter_counter.IterationCounter.record_current_iter": [[62, 66], ["numpy.savetxt", "print"], "methods", ["None"], ["", "", "def", "record_current_iter", "(", "self", ")", ":", "\n", "        ", "np", ".", "savetxt", "(", "self", ".", "iter_record_path", ",", "(", "self", ".", "current_epoch", ",", "self", ".", "epoch_iter", ")", ",", "\n", "delimiter", "=", "','", ",", "fmt", "=", "'%d'", ")", "\n", "print", "(", "'Saved current iteration count at %s.'", "%", "self", ".", "iter_record_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.iter_counter.IterationCounter.needs_saving": [[67, 69], ["None"], "methods", ["None"], ["", "def", "needs_saving", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "save_latest_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.iter_counter.IterationCounter.needs_printing": [[70, 72], ["None"], "methods", ["None"], ["", "def", "needs_printing", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "print_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.iter_counter.IterationCounter.needs_displaying": [[73, 75], ["None"], "methods", ["None"], ["", "def", "needs_displaying", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "total_steps_so_far", "%", "self", ".", "opt", ".", "display_freq", ")", "<", "self", ".", "opt", ".", "batchSize", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.__init__": [[13, 33], ["web_dir.endswith", "os.path.join", "dominate.document", "os.path.split", "os.makedirs", "os.makedirs", "h1", "len", "os.path.exists", "len", "os.path.exists", "datetime.datetime.now().strftime", "meta", "datetime.datetime.now", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "refresh", "=", "0", ")", ":", "\n", "        ", "if", "web_dir", ".", "endswith", "(", "'.html'", ")", ":", "\n", "            ", "web_dir", ",", "html_name", "=", "os", ".", "path", ".", "split", "(", "web_dir", ")", "\n", "", "else", ":", "\n", "            ", "web_dir", ",", "html_name", "=", "web_dir", ",", "'index.html'", "\n", "", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "html_name", "=", "html_name", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "len", "(", "self", ".", "web_dir", ")", ">", "0", "and", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "len", "(", "self", ".", "web_dir", ")", ">", "0", "and", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "with", "self", ".", "doc", ":", "\n", "            ", "h1", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%I:%M%p on %B %d, %Y\"", ")", ")", "\n", "", "if", "refresh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"refresh\"", ",", "content", "=", "str", "(", "refresh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.get_image_dir": [[34, 36], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.add_header": [[37, 40], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.add_table": [[41, 44], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.add_images": [[45, 56], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "txt.encode", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "512", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "(", "width", ")", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.save": [[57, 62], ["os.path.join", "open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "self", ".", "html_name", ")", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.coco.id2label": [[7, 200], ["None"], "function", ["None"], ["def", "id2label", "(", "id", ")", ":", "\n", "    ", "if", "id", "==", "182", ":", "\n", "        ", "id", "=", "0", "\n", "", "else", ":", "\n", "        ", "id", "=", "id", "+", "1", "\n", "", "labelmap", "=", "{", "0", ":", "'unlabeled'", ",", "\n", "1", ":", "'person'", ",", "\n", "2", ":", "'bicycle'", ",", "\n", "3", ":", "'car'", ",", "\n", "4", ":", "'motorcycle'", ",", "\n", "5", ":", "'airplane'", ",", "\n", "6", ":", "'bus'", ",", "\n", "7", ":", "'train'", ",", "\n", "8", ":", "'truck'", ",", "\n", "9", ":", "'boat'", ",", "\n", "10", ":", "'traffic light'", ",", "\n", "11", ":", "'fire hydrant'", ",", "\n", "12", ":", "'street sign'", ",", "\n", "13", ":", "'stop sign'", ",", "\n", "14", ":", "'parking meter'", ",", "\n", "15", ":", "'bench'", ",", "\n", "16", ":", "'bird'", ",", "\n", "17", ":", "'cat'", ",", "\n", "18", ":", "'dog'", ",", "\n", "19", ":", "'horse'", ",", "\n", "20", ":", "'sheep'", ",", "\n", "21", ":", "'cow'", ",", "\n", "22", ":", "'elephant'", ",", "\n", "23", ":", "'bear'", ",", "\n", "24", ":", "'zebra'", ",", "\n", "25", ":", "'giraffe'", ",", "\n", "26", ":", "'hat'", ",", "\n", "27", ":", "'backpack'", ",", "\n", "28", ":", "'umbrella'", ",", "\n", "29", ":", "'shoe'", ",", "\n", "30", ":", "'eye glasses'", ",", "\n", "31", ":", "'handbag'", ",", "\n", "32", ":", "'tie'", ",", "\n", "33", ":", "'suitcase'", ",", "\n", "34", ":", "'frisbee'", ",", "\n", "35", ":", "'skis'", ",", "\n", "36", ":", "'snowboard'", ",", "\n", "37", ":", "'sports ball'", ",", "\n", "38", ":", "'kite'", ",", "\n", "39", ":", "'baseball bat'", ",", "\n", "40", ":", "'baseball glove'", ",", "\n", "41", ":", "'skateboard'", ",", "\n", "42", ":", "'surfboard'", ",", "\n", "43", ":", "'tennis racket'", ",", "\n", "44", ":", "'bottle'", ",", "\n", "45", ":", "'plate'", ",", "\n", "46", ":", "'wine glass'", ",", "\n", "47", ":", "'cup'", ",", "\n", "48", ":", "'fork'", ",", "\n", "49", ":", "'knife'", ",", "\n", "50", ":", "'spoon'", ",", "\n", "51", ":", "'bowl'", ",", "\n", "52", ":", "'banana'", ",", "\n", "53", ":", "'apple'", ",", "\n", "54", ":", "'sandwich'", ",", "\n", "55", ":", "'orange'", ",", "\n", "56", ":", "'broccoli'", ",", "\n", "57", ":", "'carrot'", ",", "\n", "58", ":", "'hot dog'", ",", "\n", "59", ":", "'pizza'", ",", "\n", "60", ":", "'donut'", ",", "\n", "61", ":", "'cake'", ",", "\n", "62", ":", "'chair'", ",", "\n", "63", ":", "'couch'", ",", "\n", "64", ":", "'potted plant'", ",", "\n", "65", ":", "'bed'", ",", "\n", "66", ":", "'mirror'", ",", "\n", "67", ":", "'dining table'", ",", "\n", "68", ":", "'window'", ",", "\n", "69", ":", "'desk'", ",", "\n", "70", ":", "'toilet'", ",", "\n", "71", ":", "'door'", ",", "\n", "72", ":", "'tv'", ",", "\n", "73", ":", "'laptop'", ",", "\n", "74", ":", "'mouse'", ",", "\n", "75", ":", "'remote'", ",", "\n", "76", ":", "'keyboard'", ",", "\n", "77", ":", "'cell phone'", ",", "\n", "78", ":", "'microwave'", ",", "\n", "79", ":", "'oven'", ",", "\n", "80", ":", "'toaster'", ",", "\n", "81", ":", "'sink'", ",", "\n", "82", ":", "'refrigerator'", ",", "\n", "83", ":", "'blender'", ",", "\n", "84", ":", "'book'", ",", "\n", "85", ":", "'clock'", ",", "\n", "86", ":", "'vase'", ",", "\n", "87", ":", "'scissors'", ",", "\n", "88", ":", "'teddy bear'", ",", "\n", "89", ":", "'hair drier'", ",", "\n", "90", ":", "'toothbrush'", ",", "\n", "91", ":", "'hair brush'", ",", "# Last class of Thing", "\n", "92", ":", "'banner'", ",", "# Beginning of Stuff", "\n", "93", ":", "'blanket'", ",", "\n", "94", ":", "'branch'", ",", "\n", "95", ":", "'bridge'", ",", "\n", "96", ":", "'building-other'", ",", "\n", "97", ":", "'bush'", ",", "\n", "98", ":", "'cabinet'", ",", "\n", "99", ":", "'cage'", ",", "\n", "100", ":", "'cardboard'", ",", "\n", "101", ":", "'carpet'", ",", "\n", "102", ":", "'ceiling-other'", ",", "\n", "103", ":", "'ceiling-tile'", ",", "\n", "104", ":", "'cloth'", ",", "\n", "105", ":", "'clothes'", ",", "\n", "106", ":", "'clouds'", ",", "\n", "107", ":", "'counter'", ",", "\n", "108", ":", "'cupboard'", ",", "\n", "109", ":", "'curtain'", ",", "\n", "110", ":", "'desk-stuff'", ",", "\n", "111", ":", "'dirt'", ",", "\n", "112", ":", "'door-stuff'", ",", "\n", "113", ":", "'fence'", ",", "\n", "114", ":", "'floor-marble'", ",", "\n", "115", ":", "'floor-other'", ",", "\n", "116", ":", "'floor-stone'", ",", "\n", "117", ":", "'floor-tile'", ",", "\n", "118", ":", "'floor-wood'", ",", "\n", "119", ":", "'flower'", ",", "\n", "120", ":", "'fog'", ",", "\n", "121", ":", "'food-other'", ",", "\n", "122", ":", "'fruit'", ",", "\n", "123", ":", "'furniture-other'", ",", "\n", "124", ":", "'grass'", ",", "\n", "125", ":", "'gravel'", ",", "\n", "126", ":", "'ground-other'", ",", "\n", "127", ":", "'hill'", ",", "\n", "128", ":", "'house'", ",", "\n", "129", ":", "'leaves'", ",", "\n", "130", ":", "'light'", ",", "\n", "131", ":", "'mat'", ",", "\n", "132", ":", "'metal'", ",", "\n", "133", ":", "'mirror-stuff'", ",", "\n", "134", ":", "'moss'", ",", "\n", "135", ":", "'mountain'", ",", "\n", "136", ":", "'mud'", ",", "\n", "137", ":", "'napkin'", ",", "\n", "138", ":", "'net'", ",", "\n", "139", ":", "'paper'", ",", "\n", "140", ":", "'pavement'", ",", "\n", "141", ":", "'pillow'", ",", "\n", "142", ":", "'plant-other'", ",", "\n", "143", ":", "'plastic'", ",", "\n", "144", ":", "'platform'", ",", "\n", "145", ":", "'playingfield'", ",", "\n", "146", ":", "'railing'", ",", "\n", "147", ":", "'railroad'", ",", "\n", "148", ":", "'river'", ",", "\n", "149", ":", "'road'", ",", "\n", "150", ":", "'rock'", ",", "\n", "151", ":", "'roof'", ",", "\n", "152", ":", "'rug'", ",", "\n", "153", ":", "'salad'", ",", "\n", "154", ":", "'sand'", ",", "\n", "155", ":", "'sea'", ",", "\n", "156", ":", "'shelf'", ",", "\n", "157", ":", "'sky-other'", ",", "\n", "158", ":", "'skyscraper'", ",", "\n", "159", ":", "'snow'", ",", "\n", "160", ":", "'solid-other'", ",", "\n", "161", ":", "'stairs'", ",", "\n", "162", ":", "'stone'", ",", "\n", "163", ":", "'straw'", ",", "\n", "164", ":", "'structural-other'", ",", "\n", "165", ":", "'table'", ",", "\n", "166", ":", "'tent'", ",", "\n", "167", ":", "'textile-other'", ",", "\n", "168", ":", "'towel'", ",", "\n", "169", ":", "'tree'", ",", "\n", "170", ":", "'vegetable'", ",", "\n", "171", ":", "'wall-brick'", ",", "\n", "172", ":", "'wall-concrete'", ",", "\n", "173", ":", "'wall-other'", ",", "\n", "174", ":", "'wall-panel'", ",", "\n", "175", ":", "'wall-stone'", ",", "\n", "176", ":", "'wall-tile'", ",", "\n", "177", ":", "'wall-wood'", ",", "\n", "178", ":", "'water-other'", ",", "\n", "179", ":", "'waterdrops'", ",", "\n", "180", ":", "'window-blind'", ",", "\n", "181", ":", "'window-other'", ",", "\n", "182", ":", "'wood'", "}", "\n", "if", "id", "in", "labelmap", ":", "\n", "        ", "return", "labelmap", "[", "id", "]", "\n", "", "else", ":", "\n", "        ", "return", "'unknown'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.visualizer.Visualizer.__init__": [[18, 40], ["os.path.join", "tf.summary.FileWriter", "os.path.join", "os.path.join", "print", "util.mkdirs", "os.path.join", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "tf_log", "=", "opt", ".", "isTrain", "and", "opt", ".", "tf_log", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "if", "self", ".", "tf_log", ":", "\n", "            ", "import", "tensorflow", "as", "tf", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'logs'", ")", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "log_dir", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "                ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.visualizer.Visualizer.display_current_results": [[42, 106], ["visualizer.Visualizer.convert_visuals_to_numpy", "visualizer.Visualizer.items", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "visualizer.Visualizer.items", "html.HTML", "range", "html.HTML.save", "scipy.misc.toimage().save", "visualizer.Visualizer.tf.Summary.Image", "img_summaries.append", "isinstance", "html.HTML.add_header", "visualizer.Visualizer.items", "StringIO", "len", "visualizer.Visualizer.tf.Summary.Value", "range", "os.path.join", "util.save_image", "isinstance", "len", "html.HTML.add_images", "int", "html.HTML.add_images", "html.HTML.add_images", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue", "len", "os.path.join", "util.save_image", "len", "range", "ims.append", "txts.append", "links.append", "round", "len", "ims.append", "txts.append", "links.append", "len", "str"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.visualizer.Visualizer.convert_visuals_to_numpy", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.add_header", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.save_image", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.add_images", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.add_images", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.add_images", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.save_image"], ["", "", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "step", ")", ":", "\n", "\n", "## convert tensors to numpy arrays", "\n", "        ", "visuals", "=", "self", ".", "convert_visuals_to_numpy", "(", "visuals", ")", "\n", "\n", "if", "self", ".", "tf_log", ":", "# show images in tensorboard output", "\n", "            ", "img_summaries", "=", "[", "]", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "# Write the image to a string", "\n", "                ", "try", ":", "\n", "                    ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                    ", "s", "=", "BytesIO", "(", ")", "\n", "", "if", "len", "(", "image_numpy", ".", "shape", ")", ">=", "4", ":", "\n", "                    ", "image_numpy", "=", "image_numpy", "[", "0", "]", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "image_numpy", ")", ".", "save", "(", "s", ",", "format", "=", "\"jpeg\"", ")", "\n", "# Create an Image object", "\n", "img_sum", "=", "self", ".", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "height", "=", "image_numpy", ".", "shape", "[", "0", "]", ",", "width", "=", "image_numpy", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "label", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_iter%.3d_%s_%d.png'", "%", "(", "epoch", ",", "step", ",", "label", ",", "i", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", "[", "i", "]", ",", "img_path", ")", "\n", "", "", "else", ":", "\n", "                    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_iter%.3d_%s.png'", "%", "(", "epoch", ",", "step", ",", "label", ")", ")", "\n", "if", "len", "(", "image_numpy", ".", "shape", ")", ">=", "4", ":", "\n", "                        ", "image_numpy", "=", "image_numpy", "[", "0", "]", "\n", "", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "\n", "# update website", "\n", "", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "refresh", "=", "5", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "image_numpy", ",", "list", ")", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "image_numpy", ")", ")", ":", "\n", "                            ", "img_path", "=", "'epoch%.3d_iter%.3d_%s_%d.png'", "%", "(", "n", ",", "step", ",", "label", ",", "i", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", "+", "str", "(", "i", ")", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "'epoch%.3d_iter%.3d_%s.png'", "%", "(", "n", ",", "step", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "if", "len", "(", "ims", ")", "<", "10", ":", "\n", "                    ", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "else", ":", "\n", "                    ", "num", "=", "int", "(", "round", "(", "len", "(", "ims", ")", "/", "2.0", ")", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", ":", "num", "]", ",", "txts", "[", ":", "num", "]", ",", "links", "[", ":", "num", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "webpage", ".", "add_images", "(", "ims", "[", "num", ":", "]", ",", "txts", "[", "num", ":", "]", ",", "links", "[", "num", ":", "]", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.visualizer.Visualizer.plot_current_errors": [[108, 114], ["errors.items", "value.mean().float.mean().float.mean().float", "visualizer.Visualizer.tf.Summary", "visualizer.Visualizer.writer.add_summary", "value.mean().float.mean().float.mean", "visualizer.Visualizer.tf.Summary.Value"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "errors", ",", "step", ")", ":", "\n", "        ", "if", "self", ".", "tf_log", ":", "\n", "            ", "for", "tag", ",", "value", "in", "errors", ".", "items", "(", ")", ":", "\n", "                ", "value", "=", "value", ".", "mean", "(", ")", ".", "float", "(", ")", "\n", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.visualizer.Visualizer.print_current_errors": [[116, 127], ["errors.items", "print", "v.mean().float.mean().float.mean().float", "open", "log_file.write", "v.mean().float.mean().float.mean"], "methods", ["None"], ["", "", "", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "#print(v)", "\n", "#if v != 0:", "\n", "            ", "v", "=", "v", ".", "mean", "(", ")", ".", "float", "(", ")", "\n", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.visualizer.Visualizer.convert_visuals_to_numpy": [[128, 137], ["visuals.items", "util.tensor2label", "util.tensor2im"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tensor2label", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tensor2im"], ["", "", "def", "convert_visuals_to_numpy", "(", "self", ",", "visuals", ")", ":", "\n", "        ", "for", "key", ",", "t", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "tile", "=", "self", ".", "opt", ".", "batchSize", ">", "8", "\n", "if", "'input_label'", "==", "key", ":", "\n", "                ", "t", "=", "util", ".", "tensor2label", "(", "t", ",", "self", ".", "opt", ".", "label_nc", "+", "2", ",", "tile", "=", "tile", ")", "\n", "", "else", ":", "\n", "                ", "t", "=", "util", ".", "tensor2im", "(", "t", ",", "tile", "=", "tile", ")", "\n", "", "visuals", "[", "key", "]", "=", "t", "\n", "", "return", "visuals", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.visualizer.Visualizer.save_images": [[139, 160], ["visualizer.Visualizer.convert_visuals_to_numpy", "webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visualizer.Visualizer.items", "webpage.add_images", "os.path.splitext", "os.path.join", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.visualizer.Visualizer.convert_visuals_to_numpy", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.add_header", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.html.HTML.add_images", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.save_image"], ["", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "visuals", "=", "self", ".", "convert_visuals_to_numpy", "(", "visuals", ")", "\n", "\n", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "os", ".", "path", ".", "join", "(", "label", ",", "'%s.png'", "%", "(", "name", ")", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ",", "create_dir", "=", "True", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.Colorize.__init__": [[263, 266], ["util.labelcolormap", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.labelcolormap"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "35", ")", ":", "\n", "        ", "self", ".", "cmap", "=", "labelcolormap", "(", "n", ")", "\n", "self", ".", "cmap", "=", "torch", ".", "from_numpy", "(", "self", ".", "cmap", "[", ":", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.Colorize.__call__": [[267, 278], ["gray_image.size", "torch.ByteTensor().fill_", "range", "len", "torch.ByteTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "gray_image", ")", ":", "\n", "        ", "size", "=", "gray_image", ".", "size", "(", ")", "\n", "color_image", "=", "torch", ".", "ByteTensor", "(", "3", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "label", "in", "range", "(", "0", ",", "len", "(", "self", ".", "cmap", ")", ")", ":", "\n", "            ", "mask", "=", "(", "label", "==", "gray_image", "[", "0", "]", ")", ".", "cpu", "(", ")", "\n", "color_image", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "0", "]", "\n", "color_image", "[", "1", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "1", "]", "\n", "color_image", "[", "2", "]", "[", "mask", "]", "=", "self", ".", "cmap", "[", "label", "]", "[", "2", "]", "\n", "\n", "", "return", "color_image", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.save_obj": [[18, 21], ["open", "dill.dump"], "function", ["None"], ["def", "save_obj", "(", "obj", ",", "name", ")", ":", "\n", "    ", "with", "open", "(", "name", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.load_obj": [[23, 26], ["open", "dill.load"], "function", ["None"], ["", "", "def", "load_obj", "(", "name", ")", ":", "\n", "    ", "with", "open", "(", "name", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.copyconf": [[32, 38], ["argparse.Namespace", "print", "setattr", "vars"], "function", ["None"], ["", "", "def", "copyconf", "(", "default_opt", ",", "**", "kwargs", ")", ":", "\n", "    ", "conf", "=", "argparse", ".", "Namespace", "(", "**", "vars", "(", "default_opt", ")", ")", "\n", "for", "key", "in", "kwargs", ":", "\n", "        ", "print", "(", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "setattr", "(", "conf", ",", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tile_images": [[40, 60], ["range", "numpy.concatenate", "numpy.concatenate", "np.concatenate.append", "numpy.concatenate", "numpy.zeros", "range"], "function", ["None"], ["", "def", "tile_images", "(", "imgs", ",", "picturesPerRow", "=", "4", ")", ":", "\n", "    ", "\"\"\" Code borrowed from\n    https://stackoverflow.com/questions/26521365/cleanly-tile-numpy-array-of-images-stored-in-a-flattened-1d-format/26521997\n    \"\"\"", "\n", "\n", "# Padding", "\n", "if", "imgs", ".", "shape", "[", "0", "]", "%", "picturesPerRow", "==", "0", ":", "\n", "        ", "rowPadding", "=", "0", "\n", "", "else", ":", "\n", "        ", "rowPadding", "=", "picturesPerRow", "-", "imgs", ".", "shape", "[", "0", "]", "%", "picturesPerRow", "\n", "", "if", "rowPadding", ">", "0", ":", "\n", "        ", "imgs", "=", "np", ".", "concatenate", "(", "[", "imgs", ",", "np", ".", "zeros", "(", "(", "rowPadding", ",", "*", "imgs", ".", "shape", "[", "1", ":", "]", ")", ",", "dtype", "=", "imgs", ".", "dtype", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Tiling Loop (The conditionals are not necessary anymore)", "\n", "", "tiled", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "imgs", ".", "shape", "[", "0", "]", ",", "picturesPerRow", ")", ":", "\n", "        ", "tiled", ".", "append", "(", "np", ".", "concatenate", "(", "[", "imgs", "[", "j", "]", "for", "j", "in", "range", "(", "i", ",", "i", "+", "picturesPerRow", ")", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "tiled", "=", "np", ".", "concatenate", "(", "tiled", ",", "axis", "=", "0", ")", "\n", "return", "tiled", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tensor2im": [[64, 96], ["isinstance", "image_tensor.unsqueeze.detach().cpu().float().numpy", "numpy.clip", "np.clip.astype", "range", "image_tensor.unsqueeze.dim", "range", "numpy.concatenate", "image_tensor.unsqueeze.dim", "image_tensor.unsqueeze.unsqueeze", "len", "np.clip.append", "image_tensor.unsqueeze.size", "util.tensor2im", "np.concatenate.append", "util.tile_images", "image_tensor.unsqueeze.detach().cpu().float", "numpy.transpose", "util.tensor2im", "tensor2im.reshape", "image_tensor.unsqueeze.detach().cpu", "numpy.transpose", "image_tensor.unsqueeze.detach"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tensor2im", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tile_images", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tensor2im"], ["", "def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "normalize", "=", "True", ",", "tile", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "image_tensor", ",", "list", ")", ":", "\n", "        ", "image_numpy", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "image_tensor", ")", ")", ":", "\n", "            ", "image_numpy", ".", "append", "(", "tensor2im", "(", "image_tensor", "[", "i", "]", ",", "imtype", ",", "normalize", ")", ")", "\n", "", "return", "image_numpy", "\n", "\n", "", "if", "image_tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "# transform each image in the batch", "\n", "        ", "images_np", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "image_tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "one_image", "=", "image_tensor", "[", "b", "]", "\n", "one_image_np", "=", "tensor2im", "(", "one_image", ")", "\n", "images_np", ".", "append", "(", "one_image_np", ".", "reshape", "(", "1", ",", "*", "one_image_np", ".", "shape", ")", ")", "\n", "", "images_np", "=", "np", ".", "concatenate", "(", "images_np", ",", "axis", "=", "0", ")", "\n", "if", "tile", ":", "\n", "            ", "images_tiled", "=", "tile_images", "(", "images_np", ")", "\n", "return", "images_tiled", "\n", "", "else", ":", "\n", "            ", "return", "images_np", "\n", "\n", "", "", "if", "image_tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "        ", "image_tensor", "=", "image_tensor", ".", "unsqueeze", "(", "0", ")", "\n", "", "image_numpy", "=", "image_tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "normalize", ":", "\n", "        ", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "", "else", ":", "\n", "        ", "image_numpy", "=", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.0", "\n", "", "image_numpy", "=", "np", ".", "clip", "(", "image_numpy", ",", "0", ",", "255", ")", "\n", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "image_numpy", "[", ":", ",", ":", ",", "0", "]", "\n", "", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tensor2label": [[99, 126], ["label_tensor.cpu().float.cpu().float", "numpy.transpose", "np.transpose.astype", "label_tensor.cpu().float.dim", "range", "numpy.concatenate", "label_tensor.cpu().float.dim", "numpy.zeros", "util.tensor2im", "util.Colorize", "label_tensor.cpu().float.numpy", "label_tensor.cpu().float.size", "util.tensor2label", "np.concatenate.append", "util.tile_images", "label_tensor.cpu().float.cpu", "label_tensor.cpu().float.size", "label_tensor.cpu().float.max", "tensor2label.reshape"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tensor2im", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tensor2label", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.tile_images"], ["", "def", "tensor2label", "(", "label_tensor", ",", "n_label", ",", "imtype", "=", "np", ".", "uint8", ",", "tile", "=", "False", ")", ":", "\n", "    ", "if", "label_tensor", ".", "dim", "(", ")", "==", "4", ":", "\n", "# transform each image in the batch", "\n", "        ", "images_np", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "label_tensor", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "one_image", "=", "label_tensor", "[", "b", "]", "\n", "one_image_np", "=", "tensor2label", "(", "one_image", ",", "n_label", ",", "imtype", ")", "\n", "images_np", ".", "append", "(", "one_image_np", ".", "reshape", "(", "1", ",", "*", "one_image_np", ".", "shape", ")", ")", "\n", "", "images_np", "=", "np", ".", "concatenate", "(", "images_np", ",", "axis", "=", "0", ")", "\n", "if", "tile", ":", "\n", "            ", "images_tiled", "=", "tile_images", "(", "images_np", ")", "\n", "return", "images_tiled", "\n", "", "else", ":", "\n", "            ", "images_np", "=", "images_np", "[", "0", "]", "\n", "return", "images_np", "\n", "\n", "", "", "if", "label_tensor", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "if", "n_label", "==", "0", ":", "\n", "        ", "return", "tensor2im", "(", "label_tensor", ",", "imtype", ")", "\n", "", "label_tensor", "=", "label_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", "\n", "if", "label_tensor", ".", "size", "(", ")", "[", "0", "]", ">", "1", ":", "\n", "        ", "label_tensor", "=", "label_tensor", ".", "max", "(", "0", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "", "label_tensor", "=", "Colorize", "(", "n_label", ")", "(", "label_tensor", ")", "\n", "label_numpy", "=", "np", ".", "transpose", "(", "label_tensor", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "result", "=", "label_numpy", ".", "astype", "(", "imtype", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.save_image": [[128, 139], ["PIL.Image.fromarray", "Image.fromarray.save", "os.makedirs", "len", "numpy.expand_dims", "numpy.repeat", "image_path.replace", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ",", "create_dir", "=", "False", ")", ":", "\n", "    ", "if", "create_dir", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "image_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "", "if", "len", "(", "image_numpy", ".", "shape", ")", "==", "2", ":", "\n", "        ", "image_numpy", "=", "np", ".", "expand_dims", "(", "image_numpy", ",", "axis", "=", "2", ")", "\n", "", "if", "image_numpy", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "repeat", "(", "image_numpy", ",", "3", ",", "2", ")", "\n", "", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "\n", "# save to png", "\n", "image_pil", ".", "save", "(", "image_path", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.mkdirs": [[141, 147], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.mkdir", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.mkdir"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.mkdir": [[149, 152], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.atoi": [[154, 156], ["text.isdigit", "int"], "function", ["None"], ["", "", "def", "atoi", "(", "text", ")", ":", "\n", "    ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.natural_keys": [[158, 165], ["util.atoi", "re.split"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.atoi"], ["", "def", "natural_keys", "(", "text", ")", ":", "\n", "    ", "'''\n    alist.sort(key=natural_keys) sorts in human order\n    http://nedbatchelder.com/blog/200712/human_sorting.html\n    (See Toothy's implementation in the comments)\n    '''", "\n", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "'(\\d+)'", ",", "text", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.natural_sort": [[167, 169], ["items.sort"], "function", ["None"], ["", "def", "natural_sort", "(", "items", ")", ":", "\n", "    ", "items", ".", "sort", "(", "key", "=", "natural_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.str2bool": [[171, 178], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.find_class_in_module": [[180, 193], ["target_cls_name.replace().lower.replace().lower", "importlib.import_module", "importlib.import_module.__dict__.items", "print", "exit", "target_cls_name.replace().lower.replace", "name.lower"], "function", ["None"], ["", "", "def", "find_class_in_module", "(", "target_cls_name", ",", "module", ")", ":", "\n", "    ", "target_cls_name", "=", "target_cls_name", ".", "replace", "(", "'_'", ",", "''", ")", ".", "lower", "(", ")", "\n", "clslib", "=", "importlib", ".", "import_module", "(", "module", ")", "\n", "cls", "=", "None", "\n", "for", "name", ",", "clsobj", "in", "clslib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_cls_name", ":", "\n", "            ", "cls", "=", "clsobj", "\n", "\n", "", "", "if", "cls", "is", "None", ":", "\n", "        ", "print", "(", "\"In %s, there should be a class whose name matches %s in lowercase without underscore(_)\"", "%", "(", "module", ",", "target_cls_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.save_network": [[195, 201], ["os.path.join", "torch.save", "net.cpu().state_dict", "len", "torch.cuda.is_available", "net.cuda", "net.cpu"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "len", "(", "opt", ".", "gpu_ids", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.load_network": [[203, 210], ["os.path.join", "os.path.join", "torch.load", "net.load_state_dict"], "function", ["None"], ["", "", "def", "load_network", "(", "net", ",", "label", ",", "epoch", ",", "opt", ")", ":", "\n", "    ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "label", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_filename", ")", "\n", "weights", "=", "torch", ".", "load", "(", "save_path", ")", "\n", "net", ".", "load_state_dict", "(", "weights", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.uint82bin": [[217, 220], ["str", "range"], "function", ["None"], ["", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "    ", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.labelcolormap": [[222, 260], ["numpy.array", "numpy.zeros", "range", "range", "range", "util.uint82bin", "util.coco.id2label", "numpy.array", "numpy.uint8", "numpy.uint8", "numpy.uint8", "list"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.uint82bin", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.coco.id2label"], ["", "def", "labelcolormap", "(", "N", ")", ":", "\n", "    ", "if", "N", "==", "35", ":", "# cityscape", "\n", "        ", "cmap", "=", "np", ".", "array", "(", "[", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "111", ",", "74", ",", "0", ")", ",", "(", "81", ",", "0", ",", "81", ")", ",", "\n", "(", "128", ",", "64", ",", "128", ")", ",", "(", "244", ",", "35", ",", "232", ")", ",", "(", "250", ",", "170", ",", "160", ")", ",", "(", "230", ",", "150", ",", "140", ")", ",", "(", "70", ",", "70", ",", "70", ")", ",", "(", "102", ",", "102", ",", "156", ")", ",", "(", "190", ",", "153", ",", "153", ")", ",", "\n", "(", "180", ",", "165", ",", "180", ")", ",", "(", "150", ",", "100", ",", "100", ")", ",", "(", "150", ",", "120", ",", "90", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "153", ",", "153", ",", "153", ")", ",", "(", "250", ",", "170", ",", "30", ")", ",", "(", "220", ",", "220", ",", "0", ")", ",", "\n", "(", "107", ",", "142", ",", "35", ")", ",", "(", "152", ",", "251", ",", "152", ")", ",", "(", "70", ",", "130", ",", "180", ")", ",", "(", "220", ",", "20", ",", "60", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "142", ")", ",", "(", "0", ",", "0", ",", "70", ")", ",", "\n", "(", "0", ",", "60", ",", "100", ")", ",", "(", "0", ",", "0", ",", "90", ")", ",", "(", "0", ",", "0", ",", "110", ")", ",", "(", "0", ",", "80", ",", "100", ")", ",", "(", "0", ",", "0", ",", "230", ")", ",", "(", "119", ",", "11", ",", "32", ")", ",", "(", "0", ",", "0", ",", "142", ")", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "0", ",", "0", ",", "0", "\n", "id", "=", "i", "+", "1", "# let's give 0 a color", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                ", "str_id", "=", "uint82bin", "(", "id", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "id", "=", "id", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "\n", "", "if", "N", "==", "182", ":", "# COCO", "\n", "            ", "important_colors", "=", "{", "\n", "'sea'", ":", "(", "54", ",", "62", ",", "167", ")", ",", "\n", "'sky-other'", ":", "(", "95", ",", "219", ",", "255", ")", ",", "\n", "'tree'", ":", "(", "140", ",", "104", ",", "47", ")", ",", "\n", "'clouds'", ":", "(", "170", ",", "170", ",", "170", ")", ",", "\n", "'grass'", ":", "(", "29", ",", "195", ",", "49", ")", "\n", "}", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                ", "name", "=", "util", ".", "coco", ".", "id2label", "(", "i", ")", "\n", "if", "name", "in", "important_colors", ":", "\n", "                    ", "color", "=", "important_colors", "[", "name", "]", "\n", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "list", "(", "color", ")", ")", "\n", "\n", "", "", "", "", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.__init__.find_model_using_name": [[10, 32], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.__init__.get_option_setter": [[34, 37], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.__init__.create_model": [[39, 45], ["__init__.find_model_using_name", "find_model_using_name.", "print", "type"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.modify_commandline_options": [[12, 16], ["models.modify_commandline_options"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "networks", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.__init__": [[17, 36], ["super().__init__", "pix2pix_model.Pix2PixModel.initialize_networks", "pix2pix_model.Pix2PixModel.use_gpu", "pix2pix_model.Pix2PixModel.use_gpu", "models.GANLoss", "torch.nn.L1Loss", "models.VGGLoss", "models.KLDLoss"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.initialize_networks", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.use_gpu", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.use_gpu"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "FloatTensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "use_gpu", "(", ")", "else", "torch", ".", "FloatTensor", "\n", "self", ".", "ByteTensor", "=", "torch", ".", "cuda", ".", "ByteTensor", "if", "self", ".", "use_gpu", "(", ")", "else", "torch", ".", "ByteTensor", "\n", "\n", "self", ".", "netG", ",", "self", ".", "netD", ",", "self", ".", "netE", "=", "self", ".", "initialize_networks", "(", "opt", ")", "\n", "\n", "# set loss functions", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "\n", "opt", ".", "gan_mode", ",", "tensor", "=", "self", ".", "FloatTensor", ",", "opt", "=", "self", ".", "opt", ")", "\n", "self", ".", "criterionFeat", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "if", "not", "opt", ".", "no_vgg_loss", ":", "\n", "                ", "self", ".", "criterionVGG", "=", "networks", ".", "VGGLoss", "(", "self", ".", "opt", ".", "gpu_ids", ")", "\n", "", "if", "opt", ".", "use_vae", ":", "\n", "                ", "self", ".", "KLDLoss", "=", "networks", ".", "KLDLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.forward": [[41, 61], ["pix2pix_model.Pix2PixModel.preprocess_input", "pix2pix_model.Pix2PixModel.compute_generator_loss", "pix2pix_model.Pix2PixModel.compute_discriminator_loss", "pix2pix_model.Pix2PixModel.encode_z", "ValueError", "torch.no_grad", "pix2pix_model.Pix2PixModel.generate_fake"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.preprocess_input", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.compute_generator_loss", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.compute_discriminator_loss", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.encode_z", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.generate_fake"], ["", "", "", "def", "forward", "(", "self", ",", "data", ",", "mode", ")", ":", "\n", "        ", "input_semantics", ",", "real_image", "=", "self", ".", "preprocess_input", "(", "data", ")", "\n", "\n", "if", "mode", "==", "'generator'", ":", "\n", "            ", "g_loss", ",", "generated", "=", "self", ".", "compute_generator_loss", "(", "\n", "input_semantics", ",", "real_image", ")", "\n", "return", "g_loss", ",", "generated", "\n", "", "elif", "mode", "==", "'discriminator'", ":", "\n", "            ", "d_loss", "=", "self", ".", "compute_discriminator_loss", "(", "\n", "input_semantics", ",", "real_image", ")", "\n", "return", "d_loss", "\n", "", "elif", "mode", "==", "'encode_only'", ":", "\n", "            ", "z", ",", "mu", ",", "logvar", "=", "self", ".", "encode_z", "(", "real_image", ")", "\n", "return", "mu", ",", "logvar", "\n", "", "elif", "mode", "==", "'inference'", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "fake_image", ",", "_", "=", "self", ".", "generate_fake", "(", "input_semantics", ",", "real_image", ")", "\n", "", "return", "fake_image", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"|mode| is invalid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.create_optimizers": [[62, 79], ["list", "torch.optim.Adam", "torch.optim.Adam", "pix2pix_model.Pix2PixModel.netG.parameters", "list", "list", "pix2pix_model.Pix2PixModel.netE.parameters", "pix2pix_model.Pix2PixModel.netD.parameters"], "methods", ["None"], ["", "", "def", "create_optimizers", "(", "self", ",", "opt", ")", ":", "\n", "        ", "G_params", "=", "list", "(", "self", ".", "netG", ".", "parameters", "(", ")", ")", "\n", "if", "opt", ".", "use_vae", ":", "\n", "            ", "G_params", "+=", "list", "(", "self", ".", "netE", ".", "parameters", "(", ")", ")", "\n", "", "if", "opt", ".", "isTrain", ":", "\n", "            ", "D_params", "=", "list", "(", "self", ".", "netD", ".", "parameters", "(", ")", ")", "\n", "\n", "", "beta1", ",", "beta2", "=", "opt", ".", "beta1", ",", "opt", ".", "beta2", "\n", "if", "opt", ".", "no_TTUR", ":", "\n", "            ", "G_lr", ",", "D_lr", "=", "opt", ".", "lr", ",", "opt", ".", "lr", "\n", "", "else", ":", "\n", "            ", "G_lr", ",", "D_lr", "=", "opt", ".", "lr", "/", "2", ",", "opt", ".", "lr", "*", "2", "\n", "\n", "", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "G_params", ",", "lr", "=", "G_lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ")", "\n", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "D_params", ",", "lr", "=", "D_lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ")", "\n", "\n", "return", "optimizer_G", ",", "optimizer_D", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.save": [[80, 85], ["util.save_network", "util.save_network", "util.save_network"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.save_network", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.save_network", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.save_network"], ["", "def", "save", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "util", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "util", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "if", "self", ".", "opt", ".", "use_vae", ":", "\n", "            ", "util", ".", "save_network", "(", "self", ".", "netE", ",", "'E'", ",", "epoch", ",", "self", ".", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.initialize_networks": [[90, 103], ["models.define_G", "models.define_D", "models.define_E", "util.load_network", "util.load_network", "util.load_network"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.define_G", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.define_D", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.define_E", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.load_network", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.load_network", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.load_network"], ["", "", "def", "initialize_networks", "(", "self", ",", "opt", ")", ":", "\n", "        ", "netG", "=", "networks", ".", "define_G", "(", "opt", ")", "\n", "netD", "=", "networks", ".", "define_D", "(", "opt", ")", "if", "opt", ".", "isTrain", "else", "None", "\n", "netE", "=", "networks", ".", "define_E", "(", "opt", ")", "if", "opt", ".", "use_vae", "else", "None", "\n", "\n", "if", "not", "opt", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "netG", "=", "util", ".", "load_network", "(", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "                ", "netD", "=", "util", ".", "load_network", "(", "netD", ",", "'D'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "", "if", "opt", ".", "use_vae", ":", "\n", "                ", "netE", "=", "util", ".", "load_network", "(", "netE", ",", "'E'", ",", "opt", ".", "which_epoch", ",", "opt", ")", "\n", "\n", "", "", "return", "netG", ",", "netD", ",", "netE", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.preprocess_input": [[108, 131], ["data[].long", "pix2pix_model.Pix2PixModel.use_gpu", "label_map.size", "pix2pix_model.Pix2PixModel.FloatTensor().zero_", "pix2pix_model.Pix2PixModel.scatter_", "data[].cuda", "data[].cuda", "data[].cuda", "pix2pix_model.Pix2PixModel.get_edges", "torch.cat", "pix2pix_model.Pix2PixModel.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.use_gpu", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.get_edges"], ["", "def", "preprocess_input", "(", "self", ",", "data", ")", ":", "\n", "# move to GPU and change data types", "\n", "        ", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", ".", "long", "(", ")", "\n", "if", "self", ".", "use_gpu", "(", ")", ":", "\n", "            ", "data", "[", "'label'", "]", "=", "data", "[", "'label'", "]", ".", "cuda", "(", ")", "\n", "data", "[", "'instance'", "]", "=", "data", "[", "'instance'", "]", ".", "cuda", "(", ")", "\n", "data", "[", "'image'", "]", "=", "data", "[", "'image'", "]", ".", "cuda", "(", ")", "\n", "\n", "# create one-hot label map", "\n", "", "label_map", "=", "data", "[", "'label'", "]", "\n", "bs", ",", "_", ",", "h", ",", "w", "=", "label_map", ".", "size", "(", ")", "\n", "nc", "=", "self", ".", "opt", ".", "label_nc", "+", "1", "if", "self", ".", "opt", ".", "contain_dontcare_label", "else", "self", ".", "opt", ".", "label_nc", "\n", "input_label", "=", "self", ".", "FloatTensor", "(", "bs", ",", "nc", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "input_semantics", "=", "input_label", ".", "scatter_", "(", "1", ",", "label_map", ",", "1.0", ")", "\n", "\n", "# concatenate instance map if it exists", "\n", "if", "not", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "inst_map", "=", "data", "[", "'instance'", "]", "\n", "instance_edge_map", "=", "self", ".", "get_edges", "(", "inst_map", ")", "\n", "input_semantics", "=", "torch", ".", "cat", "(", "(", "input_semantics", ",", "instance_edge_map", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "input_semantics", ",", "data", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.compute_generator_loss": [[132, 164], ["pix2pix_model.Pix2PixModel.generate_fake", "pix2pix_model.Pix2PixModel.discriminate", "pix2pix_model.Pix2PixModel.criterionGAN", "len", "pix2pix_model.Pix2PixModel.FloatTensor().fill_", "range", "range", "pix2pix_model.Pix2PixModel.criterionVGG", "pix2pix_model.Pix2PixModel.FloatTensor", "len", "pix2pix_model.Pix2PixModel.criterionFeat", "[].detach"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.generate_fake", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.discriminate"], ["", "def", "compute_generator_loss", "(", "self", ",", "input_semantics", ",", "real_image", ")", ":", "\n", "        ", "G_losses", "=", "{", "}", "\n", "\n", "fake_image", ",", "KLD_loss", "=", "self", ".", "generate_fake", "(", "\n", "input_semantics", ",", "real_image", ",", "compute_kld_loss", "=", "self", ".", "opt", ".", "use_vae", ")", "\n", "\n", "if", "self", ".", "opt", ".", "use_vae", ":", "\n", "            ", "G_losses", "[", "'KLD'", "]", "=", "KLD_loss", "\n", "\n", "", "pred_fake", ",", "pred_real", "=", "self", ".", "discriminate", "(", "\n", "input_semantics", ",", "fake_image", ",", "real_image", ")", "\n", "\n", "G_losses", "[", "'GAN'", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ",", "\n", "for_discriminator", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "opt", ".", "no_ganFeat_loss", ":", "\n", "            ", "num_D", "=", "len", "(", "pred_fake", ")", "\n", "GAN_Feat_loss", "=", "self", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "# for each discriminator", "\n", "# last output is the final prediction, so we exclude it", "\n", "                ", "num_intermediate_outputs", "=", "len", "(", "pred_fake", "[", "i", "]", ")", "-", "1", "\n", "for", "j", "in", "range", "(", "num_intermediate_outputs", ")", ":", "# for each layer output", "\n", "                    ", "unweighted_loss", "=", "self", ".", "criterionFeat", "(", "\n", "pred_fake", "[", "i", "]", "[", "j", "]", ",", "pred_real", "[", "i", "]", "[", "j", "]", ".", "detach", "(", ")", ")", "\n", "GAN_Feat_loss", "+=", "unweighted_loss", "*", "self", ".", "opt", ".", "lambda_feat", "/", "num_D", "\n", "", "", "G_losses", "[", "'GAN_Feat'", "]", "=", "GAN_Feat_loss", "\n", "\n", "", "if", "not", "self", ".", "opt", ".", "no_vgg_loss", ":", "\n", "            ", "G_losses", "[", "'VGG'", "]", "=", "self", ".", "criterionVGG", "(", "fake_image", ",", "real_image", ")", "*", "self", ".", "opt", ".", "lambda_vgg", "\n", "\n", "", "return", "G_losses", ",", "fake_image", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.compute_discriminator_loss": [[165, 181], ["pix2pix_model.Pix2PixModel.discriminate", "pix2pix_model.Pix2PixModel.criterionGAN", "pix2pix_model.Pix2PixModel.criterionGAN", "torch.no_grad", "pix2pix_model.Pix2PixModel.generate_fake", "fake_image.detach.detach.detach", "fake_image.detach.detach.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.discriminate", "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.generate_fake"], ["", "def", "compute_discriminator_loss", "(", "self", ",", "input_semantics", ",", "real_image", ")", ":", "\n", "        ", "D_losses", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fake_image", ",", "_", "=", "self", ".", "generate_fake", "(", "input_semantics", ",", "real_image", ")", "\n", "fake_image", "=", "fake_image", ".", "detach", "(", ")", "\n", "fake_image", ".", "requires_grad_", "(", ")", "\n", "\n", "", "pred_fake", ",", "pred_real", "=", "self", ".", "discriminate", "(", "\n", "input_semantics", ",", "fake_image", ",", "real_image", ")", "\n", "\n", "D_losses", "[", "'D_Fake'", "]", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ",", "\n", "for_discriminator", "=", "True", ")", "\n", "D_losses", "[", "'D_real'", "]", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ",", "\n", "for_discriminator", "=", "True", ")", "\n", "\n", "return", "D_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.encode_z": [[182, 186], ["pix2pix_model.Pix2PixModel.netE", "pix2pix_model.Pix2PixModel.reparameterize"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.reparameterize"], ["", "def", "encode_z", "(", "self", ",", "real_image", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "netE", "(", "real_image", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "z", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.generate_fake": [[187, 201], ["pix2pix_model.Pix2PixModel.netG", "pix2pix_model.Pix2PixModel.encode_z", "pix2pix_model.Pix2PixModel.KLDLoss"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.encode_z"], ["", "def", "generate_fake", "(", "self", ",", "input_semantics", ",", "real_image", ",", "compute_kld_loss", "=", "False", ")", ":", "\n", "        ", "z", "=", "None", "\n", "KLD_loss", "=", "None", "\n", "if", "self", ".", "opt", ".", "use_vae", ":", "\n", "            ", "z", ",", "mu", ",", "logvar", "=", "self", ".", "encode_z", "(", "real_image", ")", "\n", "if", "compute_kld_loss", ":", "\n", "                ", "KLD_loss", "=", "self", ".", "KLDLoss", "(", "mu", ",", "logvar", ")", "*", "self", ".", "opt", ".", "lambda_kld", "\n", "\n", "", "", "fake_image", "=", "self", ".", "netG", "(", "input_semantics", ",", "z", "=", "z", ")", "\n", "\n", "assert", "(", "not", "compute_kld_loss", ")", "or", "self", ".", "opt", ".", "use_vae", ",", "\"You cannot compute KLD loss if opt.use_vae == False\"", "\n", "\n", "return", "fake_image", ",", "KLD_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.discriminate": [[205, 220], ["torch.cat", "torch.cat", "torch.cat", "pix2pix_model.Pix2PixModel.netD", "pix2pix_model.Pix2PixModel.divide_pred"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.divide_pred"], ["", "def", "discriminate", "(", "self", ",", "input_semantics", ",", "fake_image", ",", "real_image", ")", ":", "\n", "        ", "fake_concat", "=", "torch", ".", "cat", "(", "[", "input_semantics", ",", "fake_image", "]", ",", "dim", "=", "1", ")", "\n", "real_concat", "=", "torch", ".", "cat", "(", "[", "input_semantics", ",", "real_image", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# In Batch Normalization, the fake and real images are", "\n", "# recommended to be in the same batch to avoid disparate", "\n", "# statistics in fake and real images.", "\n", "# So both fake and real images are fed to D all at once.", "\n", "fake_and_real", "=", "torch", ".", "cat", "(", "[", "fake_concat", ",", "real_concat", "]", ",", "dim", "=", "0", ")", "\n", "\n", "discriminator_out", "=", "self", ".", "netD", "(", "fake_and_real", ")", "\n", "\n", "pred_fake", ",", "pred_real", "=", "self", ".", "divide_pred", "(", "discriminator_out", ")", "\n", "\n", "return", "pred_fake", ",", "pred_real", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.divide_pred": [[222, 236], ["type", "fake.append", "real.append", "pred.size", "pred.size", "tensor.size", "tensor.size"], "methods", ["None"], ["", "def", "divide_pred", "(", "self", ",", "pred", ")", ":", "\n", "# the prediction contains the intermediate outputs of multiscale GAN,", "\n", "# so it's usually a list", "\n", "        ", "if", "type", "(", "pred", ")", "==", "list", ":", "\n", "            ", "fake", "=", "[", "]", "\n", "real", "=", "[", "]", "\n", "for", "p", "in", "pred", ":", "\n", "                ", "fake", ".", "append", "(", "[", "tensor", "[", ":", "tensor", ".", "size", "(", "0", ")", "//", "2", "]", "for", "tensor", "in", "p", "]", ")", "\n", "real", ".", "append", "(", "[", "tensor", "[", "tensor", ".", "size", "(", "0", ")", "//", "2", ":", "]", "for", "tensor", "in", "p", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "fake", "=", "pred", "[", ":", "pred", ".", "size", "(", "0", ")", "//", "2", "]", "\n", "real", "=", "pred", "[", "pred", ".", "size", "(", "0", ")", "//", "2", ":", "]", "\n", "\n", "", "return", "fake", ",", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.get_edges": [[237, 244], ["pix2pix_model.Pix2PixModel.ByteTensor().zero_", "pix2pix_model.Pix2PixModel.float", "pix2pix_model.Pix2PixModel.ByteTensor", "t.size"], "methods", ["None"], ["", "def", "get_edges", "(", "self", ",", "t", ")", ":", "\n", "        ", "edge", "=", "self", ".", "ByteTensor", "(", "t", ".", "size", "(", ")", ")", ".", "zero_", "(", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "=", "edge", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "|", "(", "t", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "=", "edge", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "|", "(", "t", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "!=", "t", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "edge", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.reparameterize": [[245, 249], ["torch.exp", "torch.randn_like", "torch.randn_like.mul"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "std", "=", "torch", ".", "exp", "(", "0.5", "*", "logvar", ")", "\n", "eps", "=", "torch", ".", "randn_like", "(", "std", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", "+", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.models.pix2pix_model.Pix2PixModel.use_gpu": [[250, 252], ["len"], "methods", ["None"], ["", "def", "use_gpu", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.MultiscaleDiscriminator.modify_commandline_options": [[15, 29], ["parser.add_argument", "parser.add_argument", "parser.parse_known_args", "util.find_class_in_module", "util.find_class_in_module.modify_commandline_options"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.find_class_in_module", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--netD_subarch'", ",", "type", "=", "str", ",", "default", "=", "'n_layer'", ",", "\n", "help", "=", "'architecture of each discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of discriminators to be used in multiscale'", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# define properties of each discriminator of the multiscale discriminator", "\n", "subnetD", "=", "util", ".", "find_class_in_module", "(", "opt", ".", "netD_subarch", "+", "'discriminator'", ",", "\n", "'models.networks.discriminator'", ")", "\n", "subnetD", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.MultiscaleDiscriminator.__init__": [[30, 37], ["models.networks.base_network.BaseNetwork.__init__", "range", "discriminator.MultiscaleDiscriminator.create_single_discriminator", "discriminator.MultiscaleDiscriminator.add_module"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.MultiscaleDiscriminator.create_single_discriminator"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_D", ")", ":", "\n", "            ", "subnetD", "=", "self", ".", "create_single_discriminator", "(", "opt", ")", "\n", "self", ".", "add_module", "(", "'discriminator_%d'", "%", "i", ",", "subnetD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.MultiscaleDiscriminator.create_single_discriminator": [[38, 45], ["discriminator.NLayerDiscriminator", "ValueError"], "methods", ["None"], ["", "", "def", "create_single_discriminator", "(", "self", ",", "opt", ")", ":", "\n", "        ", "subarch", "=", "opt", ".", "netD_subarch", "\n", "if", "subarch", "==", "'n_layer'", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "opt", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'unrecognized discriminator subarchitecture %s'", "%", "subarch", ")", "\n", "", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.MultiscaleDiscriminator.downsample": [[46, 50], ["torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "downsample", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "avg_pool2d", "(", "input", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "[", "1", ",", "1", "]", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.MultiscaleDiscriminator.forward": [[53, 64], ["discriminator.MultiscaleDiscriminator.named_children", "D", "result.append", "discriminator.MultiscaleDiscriminator.downsample"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.MultiscaleDiscriminator.downsample"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "get_intermediate_features", "=", "not", "self", ".", "opt", ".", "no_ganFeat_loss", "\n", "for", "name", ",", "D", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "out", "=", "D", "(", "input", ")", "\n", "if", "not", "get_intermediate_features", ":", "\n", "                ", "out", "=", "[", "out", "]", "\n", "", "result", ".", "append", "(", "out", ")", "\n", "input", "=", "self", ".", "downsample", "(", "input", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.NLayerDiscriminator.modify_commandline_options": [[68, 73], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'# layers in each discriminator'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.NLayerDiscriminator.__init__": [[74, 101], ["models.networks.base_network.BaseNetwork.__init__", "int", "discriminator.NLayerDiscriminator.compute_D_input_nc", "models.networks.normalization.get_nonspade_norm_layer", "range", "range", "numpy.ceil", "min", "len", "discriminator.NLayerDiscriminator.add_module", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "models.networks.normalization.get_nonspade_norm_layer.", "torch.LeakyReLU", "torch.LeakyReLU", "str", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.NLayerDiscriminator.compute_D_input_nc", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.normalization.get_nonspade_norm_layer"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "nf", "=", "opt", ".", "ndf", "\n", "input_nc", "=", "self", ".", "compute_D_input_nc", "(", "opt", ")", "\n", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_D", ")", "\n", "sequence", "=", "[", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "]", "]", "\n", "\n", "for", "n", "in", "range", "(", "1", ",", "opt", ".", "n_layers_D", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "stride", "=", "1", "if", "n", "==", "opt", ".", "n_layers_D", "-", "1", "else", "2", "\n", "sequence", "+=", "[", "[", "norm_layer", "(", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padw", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "\n", "]", "]", "\n", "\n", "", "sequence", "+=", "[", "[", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "]", "\n", "\n", "# We divide the layers into groups to extract intermediate layer outputs", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "'model'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.NLayerDiscriminator.compute_D_input_nc": [[102, 109], ["None"], "methods", ["None"], ["", "", "def", "compute_D_input_nc", "(", "self", ",", "opt", ")", ":", "\n", "        ", "input_nc", "=", "opt", ".", "label_nc", "+", "opt", ".", "output_nc", "\n", "if", "opt", ".", "contain_dontcare_label", ":", "\n", "            ", "input_nc", "+=", "1", "\n", "", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "input_nc", "+=", "1", "\n", "", "return", "input_nc", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.discriminator.NLayerDiscriminator.forward": [[110, 121], ["discriminator.NLayerDiscriminator.children", "submodel", "results.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "results", "=", "[", "input", "]", "\n", "for", "submodel", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "intermediate_output", "=", "submodel", "(", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "append", "(", "intermediate_output", ")", "\n", "\n", "", "get_intermediate_features", "=", "not", "self", ".", "opt", ".", "no_ganFeat_loss", "\n", "if", "get_intermediate_features", ":", "\n", "            ", "return", "results", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "results", "[", "-", "1", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.encoder.ConvEncoder.__init__": [[16, 37], ["models.networks.base_network.BaseNetwork.__init__", "int", "models.networks.normalization.get_nonspade_norm_layer", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.normalization.get_nonspade_norm_layer.", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.ceil", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.normalization.get_nonspade_norm_layer.", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.normalization.get_nonspade_norm_layer"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "kw", "=", "3", "\n", "pw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "ndf", "=", "opt", ".", "ngf", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_E", ")", "\n", "self", ".", "layer1", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "3", ",", "ndf", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer2", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "1", ",", "ndf", "*", "2", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer3", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer4", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "self", ".", "layer5", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "if", "opt", ".", "crop_size", ">=", "256", ":", "\n", "            ", "self", ".", "layer6", "=", "norm_layer", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "kw", ",", "stride", "=", "2", ",", "padding", "=", "pw", ")", ")", "\n", "\n", "", "self", ".", "so", "=", "s0", "=", "4", "\n", "self", ".", "fc_mu", "=", "nn", ".", "Linear", "(", "ndf", "*", "8", "*", "s0", "*", "s0", ",", "256", ")", "\n", "self", ".", "fc_var", "=", "nn", ".", "Linear", "(", "ndf", "*", "8", "*", "s0", "*", "s0", ",", "256", ")", "\n", "\n", "self", ".", "actvn", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "False", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.encoder.ConvEncoder.forward": [[38, 56], ["encoder.ConvEncoder.layer1", "encoder.ConvEncoder.layer2", "encoder.ConvEncoder.layer3", "encoder.ConvEncoder.layer4", "encoder.ConvEncoder.layer5", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.view", "encoder.ConvEncoder.fc_mu", "encoder.ConvEncoder.fc_var", "torch.interpolate", "torch.interpolate", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.actvn", "encoder.ConvEncoder.layer6", "encoder.ConvEncoder.size", "encoder.ConvEncoder.size", "encoder.ConvEncoder.size", "encoder.ConvEncoder.actvn"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.actvn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", "2", ")", "!=", "256", "or", "x", ".", "size", "(", "3", ")", "!=", "256", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "256", ",", "256", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "layer3", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "layer4", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "layer5", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "if", "self", ".", "opt", ".", "crop_size", ">=", "256", ":", "\n", "            ", "x", "=", "self", ".", "layer6", "(", "self", ".", "actvn", "(", "x", ")", ")", "\n", "", "x", "=", "self", ".", "actvn", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "mu", "=", "self", ".", "fc_mu", "(", "x", ")", "\n", "logvar", "=", "self", ".", "fc_var", "(", "x", ")", "\n", "\n", "return", "mu", ",", "logvar", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.normalization.SPADE.__init__": [[67, 95], ["torch.Module.__init__", "config_text.startswith", "re.search", "str", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "re.search.group", "re.search.group", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.networks.sync_batchnorm.SynchronizedBatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config_text", ",", "norm_nc", ",", "label_nc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "config_text", ".", "startswith", "(", "'spade'", ")", "\n", "parsed", "=", "re", ".", "search", "(", "'spade(\\D+)(\\d)x\\d'", ",", "config_text", ")", "\n", "param_free_norm_type", "=", "str", "(", "parsed", ".", "group", "(", "1", ")", ")", "\n", "ks", "=", "int", "(", "parsed", ".", "group", "(", "2", ")", ")", "\n", "\n", "if", "param_free_norm_type", "==", "'instance'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'syncbatch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "SynchronizedBatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "elif", "param_free_norm_type", "==", "'batch'", ":", "\n", "            ", "self", ".", "param_free_norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'%s is not a recognized param-free norm type in SPADE'", "\n", "%", "param_free_norm_type", ")", "\n", "\n", "# The dimension of the intermediate embedding space. Yes, hardcoded.", "\n", "", "nhidden", "=", "128", "\n", "\n", "pw", "=", "ks", "//", "2", "\n", "self", ".", "mlp_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "label_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "mlp_beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "norm_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.normalization.SPADE.forward": [[96, 111], ["normalization.SPADE.param_free_norm", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "normalization.SPADE.mlp_shared", "normalization.SPADE.mlp_gamma", "normalization.SPADE.mlp_beta", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "segmap", ")", ":", "\n", "\n", "# Part 1. generate parameter-free normalized activations", "\n", "        ", "normalized", "=", "self", ".", "param_free_norm", "(", "x", ")", "\n", "\n", "# Part 2. produce scaling and bias conditioned on semantic map", "\n", "segmap", "=", "F", ".", "interpolate", "(", "segmap", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "actv", "=", "self", ".", "mlp_shared", "(", "segmap", ")", "\n", "gamma", "=", "self", ".", "mlp_gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "mlp_beta", "(", "actv", ")", "\n", "\n", "# apply scale and bias", "\n", "out", "=", "normalized", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.normalization.get_nonspade_norm_layer": [[16, 51], ["hasattr", "torch.weight.size", "norm_type.startswith", "torch.Sequential", "getattr", "torch", "getattr", "delattr", "torch.register_parameter", "torch.BatchNorm2d", "len", "normalization.get_nonspade_norm_layer.get_out_channel"], "function", ["None"], ["def", "get_nonspade_norm_layer", "(", "opt", ",", "norm_type", "=", "'instance'", ")", ":", "\n", "# helper function to get # output channels of the previous layer", "\n", "    ", "def", "get_out_channel", "(", "layer", ")", ":", "\n", "        ", "if", "hasattr", "(", "layer", ",", "'out_channels'", ")", ":", "\n", "            ", "return", "getattr", "(", "layer", ",", "'out_channels'", ")", "\n", "", "return", "layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "\n", "# this function will be returned", "\n", "", "def", "add_norm_layer", "(", "layer", ")", ":", "\n", "        ", "nonlocal", "norm_type", "\n", "if", "norm_type", ".", "startswith", "(", "'spectral'", ")", ":", "\n", "            ", "layer", "=", "spectral_norm", "(", "layer", ")", "\n", "subnorm_type", "=", "norm_type", "[", "len", "(", "'spectral'", ")", ":", "]", "\n", "\n", "", "if", "subnorm_type", "==", "'none'", "or", "len", "(", "subnorm_type", ")", "==", "0", ":", "\n", "            ", "return", "layer", "\n", "\n", "# remove bias in the previous layer, which is meaningless", "\n", "# since it has no effect after normalization", "\n", "", "if", "getattr", "(", "layer", ",", "'bias'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "delattr", "(", "layer", ",", "'bias'", ")", "\n", "layer", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "if", "subnorm_type", "==", "'batch'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "True", ")", "\n", "", "elif", "subnorm_type", "==", "'sync_batch'", ":", "\n", "            ", "norm_layer", "=", "SynchronizedBatchNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "True", ")", "\n", "", "elif", "subnorm_type", "==", "'instance'", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "InstanceNorm2d", "(", "get_out_channel", "(", "layer", ")", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'normalization layer %s is not recognized'", "%", "subnorm_type", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "layer", ",", "norm_layer", ")", "\n", "\n", "", "return", "add_norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.__init__": [[22, 47], ["torch.Module.__init__", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "opt.norm_G.replace", "models.networks.normalization.SPADE", "models.networks.normalization.SPADE", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "torch", "models.networks.normalization.SPADE", "torch", "torch", "torch", "torch"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fin", ",", "fout", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Attributes", "\n", "self", ".", "learned_shortcut", "=", "(", "fin", "!=", "fout", ")", "\n", "fmiddle", "=", "min", "(", "fin", ",", "fout", ")", "\n", "\n", "# create conv layers", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fmiddle", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "fmiddle", ",", "fout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "conv_s", "=", "nn", ".", "Conv2d", "(", "fin", ",", "fout", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# apply spectral norm if specified", "\n", "", "if", "'spectral'", "in", "opt", ".", "norm_G", ":", "\n", "            ", "self", ".", "conv_0", "=", "spectral_norm", "(", "self", ".", "conv_0", ")", "\n", "self", ".", "conv_1", "=", "spectral_norm", "(", "self", ".", "conv_1", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "                ", "self", ".", "conv_s", "=", "spectral_norm", "(", "self", ".", "conv_s", ")", "\n", "\n", "# define normalization layers", "\n", "", "", "spade_config_str", "=", "opt", ".", "norm_G", ".", "replace", "(", "'spectral'", ",", "''", ")", "\n", "self", ".", "norm_0", "=", "SPADE", "(", "spade_config_str", ",", "fin", ",", "opt", ".", "semantic_nc", ")", "\n", "self", ".", "norm_1", "=", "SPADE", "(", "spade_config_str", ",", "fmiddle", ",", "opt", ".", "semantic_nc", ")", "\n", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "self", ".", "norm_s", "=", "SPADE", "(", "spade_config_str", ",", "fin", ",", "opt", ".", "semantic_nc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.forward": [[50, 59], ["architecture.SPADEResnetBlock.shortcut", "architecture.SPADEResnetBlock.conv_0", "architecture.SPADEResnetBlock.conv_1", "architecture.SPADEResnetBlock.actvn", "architecture.SPADEResnetBlock.actvn", "architecture.SPADEResnetBlock.norm_0", "architecture.SPADEResnetBlock.norm_1"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.shortcut", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.actvn", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.actvn"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "x_s", "=", "self", ".", "shortcut", "(", "x", ",", "seg", ")", "\n", "\n", "dx", "=", "self", ".", "conv_0", "(", "self", ".", "actvn", "(", "self", ".", "norm_0", "(", "x", ",", "seg", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "self", ".", "actvn", "(", "self", ".", "norm_1", "(", "dx", ",", "seg", ")", ")", ")", "\n", "\n", "out", "=", "x_s", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.shortcut": [[60, 66], ["architecture.SPADEResnetBlock.conv_s", "architecture.SPADEResnetBlock.norm_s"], "methods", ["None"], ["", "def", "shortcut", "(", "self", ",", "x", ",", "seg", ")", ":", "\n", "        ", "if", "self", ".", "learned_shortcut", ":", "\n", "            ", "x_s", "=", "self", ".", "conv_s", "(", "self", ".", "norm_s", "(", "x", ",", "seg", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_s", "=", "x", "\n", "", "return", "x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.SPADEResnetBlock.actvn": [[67, 69], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "actvn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.ResnetBlock.__init__": [[74, 84], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "False", ")", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "pw", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "pw", ")", ",", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "kernel_size", ")", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "pw", ")", ",", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "kernel_size", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.ResnetBlock.forward": [[86, 90], ["architecture.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv_block", "(", "x", ")", "\n", "out", "=", "x", "+", "y", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.VGG19.__init__": [[94, 115], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg19", "architecture.VGG19.slice1.add_module", "architecture.VGG19.slice2.add_module", "architecture.VGG19.slice3.add_module", "architecture.VGG19.slice4.add_module", "architecture.VGG19.slice5.add_module", "architecture.VGG19.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "torchvision", ".", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "7", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "7", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "21", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "21", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.architecture.VGG19.forward": [[116, 124], ["architecture.VGG19.slice1", "architecture.VGG19.slice2", "architecture.VGG19.slice3", "architecture.VGG19.slice4", "architecture.VGG19.slice5"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h_relu1", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu2", "=", "self", ".", "slice2", "(", "h_relu1", ")", "\n", "h_relu3", "=", "self", ".", "slice3", "(", "h_relu2", ")", "\n", "h_relu4", "=", "self", ".", "slice4", "(", "h_relu3", ")", "\n", "h_relu5", "=", "self", ".", "slice5", "(", "h_relu4", ")", "\n", "out", "=", "[", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.__init__": [[17, 38], ["torch.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ",", "opt", "=", "None", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_tensor", "=", "None", "\n", "self", ".", "fake_label_tensor", "=", "None", "\n", "self", ".", "zero_tensor", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "self", ".", "opt", "=", "opt", "\n", "if", "gan_mode", "==", "'ls'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'original'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'w'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected gan_mode {}'", ".", "format", "(", "gan_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.get_target_tensor": [[39, 50], ["loss.GANLoss.real_label_tensor.expand_as", "loss.GANLoss.fake_label_tensor.expand_as", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.real_label_tensor.requires_grad_", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.fake_label_tensor.requires_grad_", "loss.GANLoss.Tensor", "loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "if", "self", ".", "real_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "real_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "real_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "fake_label_tensor", "is", "None", ":", "\n", "                ", "self", ".", "fake_label_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "fake_label_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.get_zero_tensor": [[51, 56], ["loss.GANLoss.zero_tensor.expand_as", "loss.GANLoss.Tensor().fill_", "loss.GANLoss.zero_tensor.requires_grad_", "loss.GANLoss.Tensor"], "methods", ["None"], ["", "", "def", "get_zero_tensor", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "zero_tensor", "is", "None", ":", "\n", "            ", "self", ".", "zero_tensor", "=", "self", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "zero_tensor", ".", "requires_grad_", "(", "False", ")", "\n", "", "return", "self", ".", "zero_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.loss": [[57, 83], ["F.binary_cross_entropy_with_logits.GANLoss.get_target_tensor", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "F.binary_cross_entropy_with_logits.GANLoss.get_target_tensor", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "input.mean", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "input.mean", "F.binary_cross_entropy_with_logits.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "F.binary_cross_entropy_with_logits.GANLoss.get_zero_tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.get_target_tensor", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.get_zero_tensor", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.get_zero_tensor"], ["", "def", "loss", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "gan_mode", "==", "'original'", ":", "# cross entropy loss", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target_tensor", ")", "\n", "return", "loss", "\n", "", "elif", "self", ".", "gan_mode", "==", "'ls'", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "F", ".", "mse_loss", "(", "input", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "if", "for_discriminator", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "else", ":", "\n", "                    ", "minval", "=", "torch", ".", "min", "(", "-", "input", "-", "1", ",", "self", ".", "get_zero_tensor", "(", "input", ")", ")", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "minval", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "target_is_real", ",", "\"The generator's hinge loss must be aiming for real\"", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "input", ")", "\n", "", "return", "loss", "\n", "", "else", ":", "\n", "# wgan", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "return", "-", "input", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "input", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.__call__": [[84, 99], ["isinstance", "loss.GANLoss.loss", "isinstance", "loss.GANLoss.loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "loss.GANLoss.size", "loss.GANLoss.view", "len", "loss.GANLoss.size"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.loss", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.GANLoss.loss"], ["", "", "", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "# computing loss is a bit complicated because |input| may not be", "\n", "# a tensor, but list of tensors in case of multiscale discriminator", "\n", "        ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "            ", "loss", "=", "0", "\n", "for", "pred_i", "in", "input", ":", "\n", "                ", "if", "isinstance", "(", "pred_i", ",", "list", ")", ":", "\n", "                    ", "pred_i", "=", "pred_i", "[", "-", "1", "]", "\n", "", "loss_tensor", "=", "self", ".", "loss", "(", "pred_i", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "bs", "=", "1", "if", "len", "(", "loss_tensor", ".", "size", "(", ")", ")", "==", "0", "else", "loss_tensor", ".", "size", "(", "0", ")", "\n", "new_loss", "=", "torch", ".", "mean", "(", "loss_tensor", ".", "view", "(", "bs", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "\n", "loss", "+=", "new_loss", "\n", "", "return", "loss", "/", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "loss", "(", "input", ",", "target_is_real", ",", "for_discriminator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.VGGLoss.__init__": [[103, 108], ["torch.Module.__init__", "models.networks.architecture.VGG19().cuda", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "models.networks.architecture.VGG19"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "VGGLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg", "=", "VGG19", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "weights", "=", "[", "1.0", "/", "32", ",", "1.0", "/", "16", ",", "1.0", "/", "8", ",", "1.0", "/", "4", ",", "1.0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.VGGLoss.forward": [[109, 115], ["range", "loss.VGGLoss.vgg", "loss.VGGLoss.vgg", "len", "loss.VGGLoss.criterion", "y_vgg[].detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_vgg", ",", "y_vgg", "=", "self", ".", "vgg", "(", "x", ")", ",", "self", ".", "vgg", "(", "y", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "x_vgg", ")", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "criterion", "(", "x_vgg", "[", "i", "]", ",", "y_vgg", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.loss.KLDLoss.forward": [[119, 121], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "logvar.exp", "mu.pow"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "return", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mu", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.generator.SPADEGenerator.modify_commandline_options": [[16, 24], ["parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "set_defaults", "(", "norm_G", "=", "'spectralspadesyncbatch3x3'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_upsampling_layers'", ",", "\n", "choices", "=", "(", "'normal'", ",", "'more'", ",", "'most'", ")", ",", "default", "=", "'normal'", ",", "\n", "help", "=", "\"If 'more', adds upsampling layer between the two middle resnet blocks. If 'most', also add one more upsampling + resnet layer at the end of the generator\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.generator.SPADEGenerator.__init__": [[25, 59], ["models.networks.base_network.BaseNetwork.__init__", "generator.SPADEGenerator.compute_latent_vector_size", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "models.networks.architecture.SPADEResnetBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.architecture.SPADEResnetBlock"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.generator.SPADEGenerator.compute_latent_vector_size"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "nf", "=", "opt", ".", "ngf", "\n", "\n", "self", ".", "sw", ",", "self", ".", "sh", "=", "self", ".", "compute_latent_vector_size", "(", "opt", ")", "\n", "\n", "if", "opt", ".", "use_vae", ":", "\n", "# In case of VAE, we will sample from random z vector", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "opt", ".", "z_dim", ",", "16", "*", "nf", "*", "self", ".", "sw", "*", "self", ".", "sh", ")", "\n", "", "else", ":", "\n", "# Otherwise, we make the network deterministic by starting with", "\n", "# downsampled segmentation map instead of random z", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "self", ".", "opt", ".", "semantic_nc", ",", "16", "*", "nf", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "head_0", "=", "SPADEResnetBlock", "(", "16", "*", "nf", ",", "16", "*", "nf", ",", "opt", ")", "\n", "\n", "self", ".", "G_middle_0", "=", "SPADEResnetBlock", "(", "16", "*", "nf", ",", "16", "*", "nf", ",", "opt", ")", "\n", "self", ".", "G_middle_1", "=", "SPADEResnetBlock", "(", "16", "*", "nf", ",", "16", "*", "nf", ",", "opt", ")", "\n", "\n", "self", ".", "up_0", "=", "SPADEResnetBlock", "(", "16", "*", "nf", ",", "8", "*", "nf", ",", "opt", ")", "\n", "self", ".", "up_1", "=", "SPADEResnetBlock", "(", "8", "*", "nf", ",", "4", "*", "nf", ",", "opt", ")", "\n", "self", ".", "up_2", "=", "SPADEResnetBlock", "(", "4", "*", "nf", ",", "2", "*", "nf", ",", "opt", ")", "\n", "self", ".", "up_3", "=", "SPADEResnetBlock", "(", "2", "*", "nf", ",", "1", "*", "nf", ",", "opt", ")", "\n", "\n", "final_nc", "=", "nf", "\n", "\n", "if", "opt", ".", "num_upsampling_layers", "==", "'most'", ":", "\n", "            ", "self", ".", "up_4", "=", "SPADEResnetBlock", "(", "1", "*", "nf", ",", "nf", "//", "2", ",", "opt", ")", "\n", "final_nc", "=", "nf", "//", "2", "\n", "\n", "", "self", ".", "conv_img", "=", "nn", ".", "Conv2d", "(", "final_nc", ",", "3", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.generator.SPADEGenerator.compute_latent_vector_size": [[60, 75], ["round", "ValueError"], "methods", ["None"], ["", "def", "compute_latent_vector_size", "(", "self", ",", "opt", ")", ":", "\n", "        ", "if", "opt", ".", "num_upsampling_layers", "==", "'normal'", ":", "\n", "            ", "num_up_layers", "=", "5", "\n", "", "elif", "opt", ".", "num_upsampling_layers", "==", "'more'", ":", "\n", "            ", "num_up_layers", "=", "6", "\n", "", "elif", "opt", ".", "num_upsampling_layers", "==", "'most'", ":", "\n", "            ", "num_up_layers", "=", "7", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'opt.num_upsampling_layers [%s] not recognized'", "%", "\n", "opt", ".", "num_upsampling_layers", ")", "\n", "\n", "", "sw", "=", "opt", ".", "crop_size", "//", "(", "2", "**", "num_up_layers", ")", "\n", "sh", "=", "round", "(", "sw", "/", "opt", ".", "aspect_ratio", ")", "\n", "\n", "return", "sw", ",", "sh", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.generator.SPADEGenerator.forward": [[76, 119], ["generator.SPADEGenerator.head_0", "generator.SPADEGenerator.up", "generator.SPADEGenerator.G_middle_0", "generator.SPADEGenerator.G_middle_1", "generator.SPADEGenerator.up", "generator.SPADEGenerator.up_0", "generator.SPADEGenerator.up", "generator.SPADEGenerator.up_1", "generator.SPADEGenerator.up", "generator.SPADEGenerator.up_2", "generator.SPADEGenerator.up", "generator.SPADEGenerator.up_3", "generator.SPADEGenerator.conv_img", "torch.tanh", "torch.tanh", "torch.tanh", "generator.SPADEGenerator.fc", "generator.SPADEGenerator.view", "torch.interpolate", "torch.interpolate", "torch.interpolate", "generator.SPADEGenerator.fc", "generator.SPADEGenerator.up", "generator.SPADEGenerator.up", "generator.SPADEGenerator.up_4", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "input.size", "input.get_device"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "z", "=", "None", ")", ":", "\n", "        ", "seg", "=", "input", "\n", "\n", "if", "self", ".", "opt", ".", "use_vae", ":", "\n", "# we sample z from unit normal and reshape the tensor", "\n", "            ", "if", "z", "is", "None", ":", "\n", "                ", "z", "=", "torch", ".", "randn", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "opt", ".", "z_dim", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "input", ".", "get_device", "(", ")", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "z", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "16", "*", "self", ".", "opt", ".", "ngf", ",", "self", ".", "sh", ",", "self", ".", "sw", ")", "\n", "", "else", ":", "\n", "# we downsample segmap and run convolution", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "seg", ",", "size", "=", "(", "self", ".", "sh", ",", "self", ".", "sw", ")", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "head_0", "(", "x", ",", "seg", ")", "\n", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "G_middle_0", "(", "x", ",", "seg", ")", "\n", "\n", "if", "self", ".", "opt", ".", "num_upsampling_layers", "==", "'more'", "or", "self", ".", "opt", ".", "num_upsampling_layers", "==", "'most'", ":", "\n", "            ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "G_middle_1", "(", "x", ",", "seg", ")", "\n", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "up_0", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "up_1", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "up_2", "(", "x", ",", "seg", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "up_3", "(", "x", ",", "seg", ")", "\n", "\n", "if", "self", ".", "opt", ".", "num_upsampling_layers", "==", "'most'", ":", "\n", "            ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "x", "=", "self", ".", "up_4", "(", "x", ",", "seg", ")", "\n", "\n", "", "x", "=", "self", ".", "conv_img", "(", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", ")", "\n", "x", "=", "F", ".", "tanh", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.generator.Pix2PixHDGenerator.modify_commandline_options": [[122, 132], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--resnet_n_downsample'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of downsampling layers in netG'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_n_blocks'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "help", "=", "'number of residual blocks in the global generator network'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_kernel_size'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'kernel size of the resnet block'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_initial_kernel_size'", ",", "type", "=", "int", ",", "default", "=", "7", ",", "\n", "help", "=", "'kernel size of the first convolution'", ")", "\n", "parser", ".", "set_defaults", "(", "norm_G", "=", "'instance'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.generator.Pix2PixHDGenerator.__init__": [[133, 180], ["models.networks.base_network.BaseNetwork.__init__", "models.networks.normalization.get_nonspade_norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "models.networks.normalization.get_nonspade_norm_layer.", "int", "int", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.networks.normalization.get_nonspade_norm_layer.", "models.networks.architecture.ResnetBlock", "models.networks.normalization.get_nonspade_norm_layer.", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.normalization.get_nonspade_norm_layer"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "input_nc", "=", "opt", ".", "label_nc", "+", "(", "1", "if", "opt", ".", "contain_dontcare_label", "else", "0", ")", "+", "(", "0", "if", "opt", ".", "no_instance", "else", "1", ")", "\n", "\n", "norm_layer", "=", "get_nonspade_norm_layer", "(", "opt", ",", "opt", ".", "norm_G", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", "False", ")", "\n", "\n", "model", "=", "[", "]", "\n", "\n", "# initial conv", "\n", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "opt", ".", "resnet_initial_kernel_size", "//", "2", ")", ",", "\n", "norm_layer", "(", "nn", ".", "Conv2d", "(", "input_nc", ",", "opt", ".", "ngf", ",", "\n", "kernel_size", "=", "opt", ".", "resnet_initial_kernel_size", ",", "\n", "padding", "=", "0", ")", ")", ",", "\n", "activation", "]", "\n", "\n", "# downsample", "\n", "mult", "=", "1", "\n", "for", "i", "in", "range", "(", "opt", ".", "resnet_n_downsample", ")", ":", "\n", "            ", "model", "+=", "[", "norm_layer", "(", "nn", ".", "Conv2d", "(", "opt", ".", "ngf", "*", "mult", ",", "opt", ".", "ngf", "*", "mult", "*", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "activation", "]", "\n", "mult", "*=", "2", "\n", "\n", "# resnet blocks", "\n", "", "for", "i", "in", "range", "(", "opt", ".", "resnet_n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "opt", ".", "ngf", "*", "mult", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "activation", "=", "activation", ",", "\n", "kernel_size", "=", "opt", ".", "resnet_kernel_size", ")", "]", "\n", "\n", "# upsample", "\n", "", "for", "i", "in", "range", "(", "opt", ".", "resnet_n_downsample", ")", ":", "\n", "            ", "nc_in", "=", "int", "(", "opt", ".", "ngf", "*", "mult", ")", "\n", "nc_out", "=", "int", "(", "(", "opt", ".", "ngf", "*", "mult", ")", "/", "2", ")", "\n", "model", "+=", "[", "norm_layer", "(", "nn", ".", "ConvTranspose2d", "(", "nc_in", ",", "nc_out", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ")", ",", "\n", "activation", "]", "\n", "mult", "=", "mult", "//", "2", "\n", "\n", "# final output conv", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nc_out", ",", "opt", ".", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.generator.Pix2PixHDGenerator.forward": [[181, 183], ["generator.Pix2PixHDGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "z", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.base_network.BaseNetwork.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.base_network.BaseNetwork.modify_commandline_options": [[14, 17], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.base_network.BaseNetwork.print_network": [[18, 27], ["isinstance", "base_network.BaseNetwork.parameters", "print", "param.numel", "type"], "methods", ["None"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "list", ")", ":", "\n", "            ", "self", "=", "self", "[", "0", "]", "\n", "", "num_params", "=", "0", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'Network [%s] was created. Total number of parameters: %.1f million. '", "\n", "'To see the architecture, do print(network).'", "\n", "%", "(", "type", "(", "self", ")", ".", "__name__", ",", "num_params", "/", "1000000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.base_network.BaseNetwork.init_weights": [[28, 60], ["base_network.BaseNetwork.apply", "base_network.BaseNetwork.children", "hasattr", "classname.find", "m.init_weights", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "m.reset_parameters", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.base_network.BaseNetwork.init_weights"], ["", "def", "init_weights", "(", "self", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier_uniform'", ":", "\n", "                    ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'none'", ":", "# uses pytorch's default init method", "\n", "                    ", "m", ".", "reset_parameters", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n", "# propagate to children", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'init_weights'", ")", ":", "\n", "                ", "m", ".", "init_weights", "(", "init_type", ",", "gain", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.find_network_using_name": [[15, 24], ["util.find_class_in_module", "issubclass"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.find_class_in_module"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.modify_commandline_options": [[26, 38], ["netD_cls.modify_commandline_options.parse_known_args", "__init__.find_network_using_name", "find_network_using_name.modify_commandline_options", "__init__.find_network_using_name", "find_network_using_name.modify_commandline_options", "__init__.find_network_using_name", "find_network_using_name.modify_commandline_options"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.create_network": [[40, 48], ["cls", "cls.print_network", "cls.init_weights", "len", "torch.cuda.is_available", "cls.cuda"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.base_network.BaseNetwork.print_network", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.base_network.BaseNetwork.init_weights"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.define_G": [[50, 53], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.define_D": [[55, 58], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.define_E": [[60, 64], ["__init__.find_network_using_name", "__init__.create_network"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.find_network_using_name", "home.repos.pwc.inspect_result.NVlabs_SPADE.networks.__init__.create_network"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.facades_dataset.FacadesDataset.modify_commandline_options": [[13, 26], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", "=", "Pix2pixDataset", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "set_defaults", "(", "dataroot", "=", "'./dataset/facades/'", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'resize_and_crop'", ")", "\n", "load_size", "=", "286", "if", "is_train", "else", "256", "\n", "parser", ".", "set_defaults", "(", "load_size", "=", "load_size", ")", "\n", "parser", ".", "set_defaults", "(", "crop_size", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "label_nc", "=", "13", ")", "\n", "parser", ".", "set_defaults", "(", "contain_dontcare_label", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "no_instance", "=", "True", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.facades_dataset.FacadesDataset.get_paths": [[27, 40], ["os.path.join", "data.image_folder.make_dataset", "os.path.join", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "root", "=", "opt", ".", "dataroot", "\n", "phase", "=", "'val'", "if", "opt", ".", "phase", "==", "'test'", "else", "opt", ".", "phase", "\n", "\n", "label_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'%s_label'", "%", "phase", ")", "\n", "label_paths", "=", "make_dataset", "(", "label_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'%s_img'", "%", "phase", ")", "\n", "image_paths", "=", "make_dataset", "(", "image_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "\n", "instance_paths", "=", "[", "]", "\n", "\n", "return", "label_paths", ",", "image_paths", ",", "instance_paths", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.custom_dataset.CustomDataset.modify_commandline_options": [[16, 34], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.add_argument", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.add_argument", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.add_argument"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options"], ["@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", "=", "Pix2pixDataset", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'resize_and_crop'", ")", "\n", "load_size", "=", "286", "if", "is_train", "else", "256", "\n", "parser", ".", "set_defaults", "(", "load_size", "=", "load_size", ")", "\n", "parser", ".", "set_defaults", "(", "crop_size", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "label_nc", "=", "13", ")", "\n", "parser", ".", "set_defaults", "(", "contain_dontcare_label", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--label_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the directory that contains label images'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to the directory that contains photo images'", ")", "\n", "parser", ".", "add_argument", "(", "'--instance_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'path to the directory that contains instance maps. Leave black if not exists'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.custom_dataset.CustomDataset.get_paths": [[35, 51], ["data.image_folder.make_dataset", "data.image_folder.make_dataset", "len", "data.image_folder.make_dataset", "len", "len"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "label_dir", "=", "opt", ".", "label_dir", "\n", "label_paths", "=", "make_dataset", "(", "label_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "\n", "image_dir", "=", "opt", ".", "image_dir", "\n", "image_paths", "=", "make_dataset", "(", "image_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "\n", "if", "len", "(", "opt", ".", "instance_dir", ")", ">", "0", ":", "\n", "            ", "instance_dir", "=", "opt", ".", "instance_dir", "\n", "instance_paths", "=", "make_dataset", "(", "instance_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "instance_paths", "=", "[", "]", "\n", "\n", "", "assert", "len", "(", "label_paths", ")", "==", "len", "(", "image_paths", ")", ",", "\"The #images in %s and %s do not match. Is there something wrong?\"", "\n", "\n", "return", "label_paths", ",", "image_paths", ",", "instance_paths", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.ade20k_dataset.ADE20KDataset.modify_commandline_options": [[12, 28], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", "=", "Pix2pixDataset", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'resize_and_crop'", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "load_size", "=", "286", ")", "\n", "", "else", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "load_size", "=", "256", ")", "\n", "", "parser", ".", "set_defaults", "(", "crop_size", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "label_nc", "=", "150", ")", "\n", "parser", ".", "set_defaults", "(", "contain_dontcare_label", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_read", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_write", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "no_instance", "=", "True", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.ade20k_dataset.ADE20KDataset.get_paths": [[29, 47], ["data.image_folder.make_dataset", "p.endswith", "image_paths.append", "p.endswith", "label_paths.append"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "root", "=", "opt", ".", "dataroot", "\n", "phase", "=", "'val'", "if", "opt", ".", "phase", "==", "'test'", "else", "'train'", "\n", "\n", "all_images", "=", "make_dataset", "(", "root", ",", "recursive", "=", "True", ",", "read_cache", "=", "False", ",", "write_cache", "=", "False", ")", "\n", "image_paths", "=", "[", "]", "\n", "label_paths", "=", "[", "]", "\n", "for", "p", "in", "all_images", ":", "\n", "            ", "if", "'_%s_'", "%", "phase", "not", "in", "p", ":", "\n", "                ", "continue", "\n", "", "if", "p", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "                ", "image_paths", ".", "append", "(", "p", ")", "\n", "", "elif", "p", ".", "endswith", "(", "'.png'", ")", ":", "\n", "                ", "label_paths", ".", "append", "(", "p", ")", "\n", "\n", "", "", "instance_paths", "=", "[", "]", "# don't use instance map for ade20k", "\n", "\n", "return", "label_paths", ",", "image_paths", ",", "instance_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.ade20k_dataset.ADE20KDataset.postprocess": [[50, 54], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "label", "=", "input_dict", "[", "'label'", "]", "\n", "label", "=", "label", "-", "1", "\n", "label", "[", "label", "==", "-", "1", "]", "=", "self", ".", "opt", ".", "label_nc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options": [[13, 18], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--no_pairing_check'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If specified, skip sanity check of correct label-image file pairing'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.pix2pix_dataset.Pix2pixDataset.initialize": [[19, 44], ["pix2pix_dataset.Pix2pixDataset.get_paths", "util.natural_sort", "util.natural_sort", "len", "util.natural_sort", "zip", "pix2pix_dataset.Pix2pixDataset.paths_match"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.get_paths", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.natural_sort", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.natural_sort", "home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.natural_sort", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.cityscapes_dataset.CityscapesDataset.paths_match"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "\n", "label_paths", ",", "image_paths", ",", "instance_paths", "=", "self", ".", "get_paths", "(", "opt", ")", "\n", "\n", "util", ".", "natural_sort", "(", "label_paths", ")", "\n", "util", ".", "natural_sort", "(", "image_paths", ")", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "util", ".", "natural_sort", "(", "instance_paths", ")", "\n", "\n", "", "label_paths", "=", "label_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "image_paths", "=", "image_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "instance_paths", "=", "instance_paths", "[", ":", "opt", ".", "max_dataset_size", "]", "\n", "\n", "if", "not", "opt", ".", "no_pairing_check", ":", "\n", "            ", "for", "path1", ",", "path2", "in", "zip", "(", "label_paths", ",", "image_paths", ")", ":", "\n", "                ", "assert", "self", ".", "paths_match", "(", "path1", ",", "path2", ")", ",", "\"The label-image pair (%s, %s) do not look like the right pair because the filenames are quite different. Are you sure about the pairing? Please see data/pix2pix_dataset.py to see what is going on, and use --no_pairing_check to bypass this.\"", "%", "(", "path1", ",", "path2", ")", "\n", "\n", "", "", "self", ".", "label_paths", "=", "label_paths", "\n", "self", ".", "image_paths", "=", "image_paths", "\n", "self", ".", "instance_paths", "=", "instance_paths", "\n", "\n", "size", "=", "len", "(", "self", ".", "label_paths", ")", "\n", "self", ".", "dataset_size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.pix2pix_dataset.Pix2pixDataset.get_paths": [[45, 51], ["None"], "methods", ["None"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "label_paths", "=", "[", "]", "\n", "image_paths", "=", "[", "]", "\n", "instance_paths", "=", "[", "]", "\n", "assert", "False", ",", "\"A subclass of Pix2pixDataset must override self.get_paths(self, opt)\"", "\n", "return", "label_paths", ",", "image_paths", ",", "instance_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.pix2pix_dataset.Pix2pixDataset.paths_match": [[52, 56], ["os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["None"], ["", "def", "paths_match", "(", "self", ",", "path1", ",", "path2", ")", ":", "\n", "        ", "filename1_without_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path1", ")", ")", "[", "0", "]", "\n", "filename2_without_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "path2", ")", ")", "[", "0", "]", "\n", "return", "filename1_without_ext", "==", "filename2_without_ext", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.pix2pix_dataset.Pix2pixDataset.__getitem__": [[57, 99], ["PIL.Image.open", "data.base_dataset.get_params", "data.base_dataset.get_transform", "pix2pix_dataset.Pix2pixDataset.paths_match", "PIL.Image.open", "image.convert.convert.convert", "data.base_dataset.get_transform", "data.base_dataset.get_transform.", "pix2pix_dataset.Pix2pixDataset.postprocess", "data.base_dataset.get_transform.", "PIL.Image.open", "data.base_dataset.get_transform.long", "data.base_dataset.get_transform.", "data.base_dataset.get_transform."], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.get_params", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.cityscapes_dataset.CityscapesDataset.paths_match", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.pix2pix_dataset.Pix2pixDataset.postprocess"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Label Image", "\n", "        ", "label_path", "=", "self", ".", "label_paths", "[", "index", "]", "\n", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "params", "=", "get_params", "(", "self", ".", "opt", ",", "label", ".", "size", ")", "\n", "transform_label", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ",", "method", "=", "Image", ".", "NEAREST", ",", "normalize", "=", "False", ")", "\n", "label_tensor", "=", "transform_label", "(", "label", ")", "*", "255.0", "\n", "label_tensor", "[", "label_tensor", "==", "255", "]", "=", "self", ".", "opt", ".", "label_nc", "# 'unknown' is opt.label_nc", "\n", "\n", "# input image (real images)", "\n", "image_path", "=", "self", ".", "image_paths", "[", "index", "]", "\n", "assert", "self", ".", "paths_match", "(", "label_path", ",", "image_path", ")", ",", "\"The label_path %s and image_path %s don't match.\"", "%", "(", "label_path", ",", "image_path", ")", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "image", "=", "image", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "transform_image", "=", "get_transform", "(", "self", ".", "opt", ",", "params", ")", "\n", "image_tensor", "=", "transform_image", "(", "image", ")", "\n", "\n", "# if using instance maps", "\n", "if", "self", ".", "opt", ".", "no_instance", ":", "\n", "            ", "instance_tensor", "=", "0", "\n", "", "else", ":", "\n", "            ", "instance_path", "=", "self", ".", "instance_paths", "[", "index", "]", "\n", "instance", "=", "Image", ".", "open", "(", "instance_path", ")", "\n", "if", "instance", ".", "mode", "==", "'L'", ":", "\n", "                ", "instance_tensor", "=", "transform_label", "(", "instance", ")", "*", "255", "\n", "instance_tensor", "=", "instance_tensor", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "                ", "instance_tensor", "=", "transform_label", "(", "instance", ")", "\n", "\n", "", "", "input_dict", "=", "{", "'label'", ":", "label_tensor", ",", "\n", "'instance'", ":", "instance_tensor", ",", "\n", "'image'", ":", "image_tensor", ",", "\n", "'path'", ":", "image_path", ",", "\n", "}", "\n", "\n", "# Give subclasses a chance to modify the final output", "\n", "self", ".", "postprocess", "(", "input_dict", ")", "\n", "\n", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.pix2pix_dataset.Pix2pixDataset.postprocess": [[100, 102], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "input_dict", ")", ":", "\n", "        ", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.pix2pix_dataset.Pix2pixDataset.__len__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.BaseDataset.__init__": [[14, 16], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.BaseDataset.modify_commandline_options": [[17, 20], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.BaseDataset.initialize": [[21, 23], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.get_params": [[25, 45], ["random.randint", "random.randint", "numpy.maximum", "numpy.maximum", "random.random", "int", "min", "max"], "function", ["None"], ["", "", "def", "get_params", "(", "opt", ",", "size", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "if", "opt", ".", "preprocess_mode", "==", "'resize_and_crop'", ":", "\n", "        ", "new_h", "=", "new_w", "=", "opt", ".", "load_size", "\n", "", "elif", "opt", ".", "preprocess_mode", "==", "'scale_width_and_crop'", ":", "\n", "        ", "new_w", "=", "opt", ".", "load_size", "\n", "new_h", "=", "opt", ".", "load_size", "*", "h", "//", "w", "\n", "", "elif", "opt", ".", "preprocess_mode", "==", "'scale_shortside_and_crop'", ":", "\n", "        ", "ss", ",", "ls", "=", "min", "(", "w", ",", "h", ")", ",", "max", "(", "w", ",", "h", ")", "# shortside and longside", "\n", "width_is_shorter", "=", "w", "==", "ss", "\n", "ls", "=", "int", "(", "opt", ".", "load_size", "*", "ls", "/", "ss", ")", "\n", "new_w", ",", "new_h", "=", "(", "ss", ",", "ls", ")", "if", "width_is_shorter", "else", "(", "ls", ",", "ss", ")", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_w", "-", "opt", ".", "crop_size", ")", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_h", "-", "opt", ".", "crop_size", ")", ")", "\n", "\n", "flip", "=", "random", ".", "random", "(", ")", ">", "0.5", "\n", "return", "{", "'crop_pos'", ":", "(", "x", ",", "y", ")", ",", "'flip'", ":", "flip", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.get_transform": [[47, 79], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "round", "transform_list.append", "transform_list.append", "torchvision.Resize", "transform_list.append", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Lambda", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Lambda", "transform_list.append", "torchvision.Lambda", "base_dataset.__crop", "base_dataset.__make_power_2", "base_dataset.__resize", "base_dataset.__flip", "base_dataset.__scale_width", "base_dataset.__scale_shortside"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__crop", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__make_power_2", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__resize", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__flip", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__scale_shortside"], ["", "def", "get_transform", "(", "opt", ",", "params", ",", "method", "=", "Image", ".", "BICUBIC", ",", "normalize", "=", "True", ",", "toTensor", "=", "True", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "'resize'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "load_size", ",", "opt", ".", "load_size", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "interpolation", "=", "method", ")", ")", "\n", "", "elif", "'scale_width'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "load_size", ",", "method", ")", ")", ")", "\n", "", "elif", "'scale_shortside'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_shortside", "(", "img", ",", "opt", ".", "load_size", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "'crop'", "in", "opt", ".", "preprocess_mode", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__crop", "(", "img", ",", "params", "[", "'crop_pos'", "]", ",", "opt", ".", "crop_size", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "preprocess_mode", "==", "'none'", ":", "\n", "        ", "base", "=", "32", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__make_power_2", "(", "img", ",", "base", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "preprocess_mode", "==", "'fixed'", ":", "\n", "        ", "w", "=", "opt", ".", "crop_size", "\n", "h", "=", "round", "(", "opt", ".", "crop_size", "/", "opt", ".", "aspect_ratio", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__resize", "(", "img", ",", "w", ",", "h", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__flip", "(", "img", ",", "params", "[", "'flip'", "]", ")", ")", ")", "\n", "\n", "", "if", "toTensor", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.normalize": [[81, 83], ["torchvision.Normalize"], "function", ["None"], ["", "def", "normalize", "(", ")", ":", "\n", "    ", "return", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__resize": [[85, 87], ["img.resize"], "function", ["None"], ["", "def", "__resize", "(", "img", ",", "w", ",", "h", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__make_power_2": [[89, 96], ["int", "int", "img.resize", "round", "round"], "function", ["None"], ["", "def", "__make_power_2", "(", "img", ",", "base", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "h", "=", "int", "(", "round", "(", "oh", "/", "base", ")", "*", "base", ")", "\n", "w", "=", "int", "(", "round", "(", "ow", "/", "base", ")", "*", "base", ")", "\n", "if", "(", "h", "==", "oh", ")", "and", "(", "w", "==", "ow", ")", ":", "\n", "        ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__scale_width": [[98, 105], ["int", "img.resize"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "(", "ow", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "h", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__scale_shortside": [[107, 116], ["int", "img.resize", "min", "max"], "function", ["None"], ["", "def", "__scale_shortside", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "ss", ",", "ls", "=", "min", "(", "ow", ",", "oh", ")", ",", "max", "(", "ow", ",", "oh", ")", "# shortside and longside", "\n", "width_is_shorter", "=", "ow", "==", "ss", "\n", "if", "(", "ss", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "ls", "=", "int", "(", "target_width", "*", "ls", "/", "ss", ")", "\n", "nw", ",", "nh", "=", "(", "ss", ",", "ls", ")", "if", "width_is_shorter", "else", "(", "ls", ",", "ss", ")", "\n", "return", "img", ".", "resize", "(", "(", "nw", ",", "nh", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__crop": [[118, 123], ["img.crop"], "function", ["None"], ["", "def", "__crop", "(", "img", ",", "pos", ",", "size", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "x1", ",", "y1", "=", "pos", "\n", "tw", "=", "th", "=", "size", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.base_dataset.__flip": [[125, 129], ["img.transpose"], "function", ["None"], ["", "def", "__flip", "(", "img", ",", "flip", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.ImageFolder.__init__": [[73, 86], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.ImageFolder.__getitem__": [[87, 96], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.ImageFolder.__len__": [[97, 99], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.is_image_file": [[22, 24], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset_rec": [[26, 34], ["os.path.isdir", "sorted", "os.walk", "image_folder.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.is_image_file"], ["", "def", "make_dataset_rec", "(", "dir", ",", "images", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "dnames", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ",", "followlinks", "=", "True", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset": [[36, 65], ["os.path.join", "os.path.isfile", "image_folder.make_dataset_rec", "sorted", "os.path.join", "os.path.isdir", "os.path.islink", "os.walk", "open", "print", "open", "f.read().splitlines", "image_folder.is_image_file", "f.write", "os.path.join", "f.read().splitlines.append", "f.read"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset_rec", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.is_image_file"], ["", "", "", "", "def", "make_dataset", "(", "dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "False", ",", "write_cache", "=", "False", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "\n", "if", "read_cache", ":", "\n", "        ", "possible_filelist", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'files.list'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "possible_filelist", ")", ":", "\n", "            ", "with", "open", "(", "possible_filelist", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "images", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "return", "images", "\n", "\n", "", "", "", "if", "recursive", ":", "\n", "        ", "make_dataset_rec", "(", "dir", ",", "images", ")", "\n", "", "else", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", "or", "os", ".", "path", ".", "islink", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "dnames", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "            ", "for", "fname", "in", "fnames", ":", "\n", "                ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "", "if", "write_cache", ":", "\n", "        ", "filelist_cache", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "'files.list'", ")", "\n", "with", "open", "(", "filelist_cache", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "path", "in", "images", ":", "\n", "                ", "f", ".", "write", "(", "\"%s\\n\"", "%", "path", ")", "\n", "", "print", "(", "'wrote filelist cache at %s'", "%", "filelist_cache", ")", "\n", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.default_loader": [[67, 69], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.__init__.find_dataset_using_name": [[11, 34], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "ValueError", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.__init__.get_option_setter": [[36, 39], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.__init__.create_dataloader": [[41, 55], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "dataset.initialize", "print", "torch.utils.data.DataLoader", "int", "len", "type"], "function", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.initialize"], []], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.cityscapes_dataset.CityscapesDataset.modify_commandline_options": [[13, 27], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.parse_known_args", "hasattr", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", "=", "Pix2pixDataset", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'fixed'", ")", "\n", "parser", ".", "set_defaults", "(", "load_size", "=", "512", ")", "\n", "parser", ".", "set_defaults", "(", "crop_size", "=", "512", ")", "\n", "parser", ".", "set_defaults", "(", "display_winsize", "=", "512", ")", "\n", "parser", ".", "set_defaults", "(", "label_nc", "=", "35", ")", "\n", "parser", ".", "set_defaults", "(", "aspect_ratio", "=", "2.0", ")", "\n", "parser", ".", "set_defaults", "(", "batchSize", "=", "16", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "hasattr", "(", "opt", ",", "'num_upsampling_layers'", ")", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "num_upsampling_layers", "=", "'more'", ")", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.cityscapes_dataset.CityscapesDataset.get_paths": [[28, 45], ["os.path.join", "data.image_folder.make_dataset", "os.path.join", "data.image_folder.make_dataset", "p.endswith", "p.endswith"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "root", "=", "opt", ".", "dataroot", "\n", "phase", "=", "'val'", "if", "opt", ".", "phase", "==", "'test'", "else", "'train'", "\n", "\n", "label_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'gtFine'", ",", "phase", ")", "\n", "label_paths_all", "=", "make_dataset", "(", "label_dir", ",", "recursive", "=", "True", ")", "\n", "label_paths", "=", "[", "p", "for", "p", "in", "label_paths_all", "if", "p", ".", "endswith", "(", "'_labelIds.png'", ")", "]", "\n", "\n", "image_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'leftImg8bit'", ",", "phase", ")", "\n", "image_paths", "=", "make_dataset", "(", "image_dir", ",", "recursive", "=", "True", ")", "\n", "\n", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "instance_paths", "=", "[", "p", "for", "p", "in", "label_paths_all", "if", "p", ".", "endswith", "(", "'_instanceIds.png'", ")", "]", "\n", "", "else", ":", "\n", "            ", "instance_paths", "=", "[", "]", "\n", "\n", "", "return", "label_paths", ",", "image_paths", ",", "instance_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.cityscapes_dataset.CityscapesDataset.paths_match": [[46, 52], ["os.path.basename", "os.path.basename", "os.path.basename.split", "os.path.basename.split"], "methods", ["None"], ["", "def", "paths_match", "(", "self", ",", "path1", ",", "path2", ")", ":", "\n", "        ", "name1", "=", "os", ".", "path", ".", "basename", "(", "path1", ")", "\n", "name2", "=", "os", ".", "path", ".", "basename", "(", "path2", ")", "\n", "# compare the first 3 components, [city]_[id1]_[id2]", "\n", "return", "'_'", ".", "join", "(", "name1", ".", "split", "(", "'_'", ")", "[", ":", "3", "]", ")", "==", "'_'", ".", "join", "(", "name2", ".", "split", "(", "'_'", ")", "[", ":", "3", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options": [[13, 29], ["data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.add_argument", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults", "data.pix2pix_dataset.Pix2pixDataset.modify_commandline_options.set_defaults"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.modify_commandline_options"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", "=", "Pix2pixDataset", ".", "modify_commandline_options", "(", "parser", ",", "is_train", ")", "\n", "parser", ".", "add_argument", "(", "'--coco_no_portraits'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'resize_and_crop'", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "load_size", "=", "286", ")", "\n", "", "else", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "load_size", "=", "256", ")", "\n", "", "parser", ".", "set_defaults", "(", "crop_size", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "label_nc", "=", "182", ")", "\n", "parser", ".", "set_defaults", "(", "contain_dontcare_label", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_read", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "cache_filelist_write", "=", "True", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.data.coco_dataset.CocoDataset.get_paths": [[30, 66], ["os.path.join", "data.image_folder.make_dataset", "os.path.join", "data.image_folder.make_dataset", "os.path.join", "os.path.isdir", "os.path.join", "os.path.isdir", "os.path.join", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "os.path.join", "os.path.isdir", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.image_folder.make_dataset"], ["", "def", "get_paths", "(", "self", ",", "opt", ")", ":", "\n", "        ", "root", "=", "opt", ".", "dataroot", "\n", "phase", "=", "'val'", "if", "opt", ".", "phase", "==", "'test'", "else", "opt", ".", "phase", "\n", "\n", "label_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'%s_label'", "%", "phase", ")", "\n", "label_paths", "=", "make_dataset", "(", "label_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "\n", "if", "not", "opt", ".", "coco_no_portraits", "and", "opt", ".", "isTrain", ":", "\n", "            ", "label_portrait_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'%s_label_portrait'", "%", "phase", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "label_portrait_dir", ")", ":", "\n", "                ", "label_portrait_paths", "=", "make_dataset", "(", "label_portrait_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "label_paths", "+=", "label_portrait_paths", "\n", "\n", "", "", "image_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'%s_img'", "%", "phase", ")", "\n", "image_paths", "=", "make_dataset", "(", "image_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "\n", "if", "not", "opt", ".", "coco_no_portraits", "and", "opt", ".", "isTrain", ":", "\n", "            ", "image_portrait_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'%s_img_portrait'", "%", "phase", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "image_portrait_dir", ")", ":", "\n", "                ", "image_portrait_paths", "=", "make_dataset", "(", "image_portrait_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "image_paths", "+=", "image_portrait_paths", "\n", "\n", "", "", "if", "not", "opt", ".", "no_instance", ":", "\n", "            ", "instance_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'%s_inst'", "%", "phase", ")", "\n", "instance_paths", "=", "make_dataset", "(", "instance_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "\n", "if", "not", "opt", ".", "coco_no_portraits", "and", "opt", ".", "isTrain", ":", "\n", "                ", "instance_portrait_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'%s_inst_portrait'", "%", "phase", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "instance_portrait_dir", ")", ":", "\n", "                    ", "instance_portrait_paths", "=", "make_dataset", "(", "instance_portrait_dir", ",", "recursive", "=", "False", ",", "read_cache", "=", "True", ")", "\n", "instance_paths", "+=", "instance_portrait_paths", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "instance_paths", "=", "[", "]", "\n", "\n", "", "return", "label_paths", ",", "image_paths", ",", "instance_paths", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.test_options.TestOptions.initialize": [[10, 22], ["base_options.BaseOptions.initialize", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "parser.set_defaults", "float"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'how many test images to run'", ")", "\n", "\n", "parser", ".", "set_defaults", "(", "preprocess_mode", "=", "'scale_width_and_crop'", ",", "crop_size", "=", "256", ",", "load_size", "=", "256", ",", "display_winsize", "=", "256", ")", "\n", "parser", ".", "set_defaults", "(", "serial_batches", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "no_flip", "=", "True", ")", "\n", "parser", ".", "set_defaults", "(", "phase", "=", "'test'", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.train_options.TrainOptions.initialize": [[10, 50], ["base_options.BaseOptions.initialize", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_known_args", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.set_defaults"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "# for displays", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do one epoch and displays at each iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--tf_log'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, use tensorboard logging. Requires tensorflow installed'", ")", "\n", "\n", "# for training", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'# of iter at starting learning rate. This is NOT the total #epochs. Totla #epochs is niter + niter_decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta2'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_TTUR'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use TTUR training scheme'", ")", "\n", "\n", "# the default values for beta1 and beta2 differ by TTUR option", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "opt", ".", "no_TTUR", ":", "\n", "            ", "parser", ".", "set_defaults", "(", "beta1", "=", "0.5", ",", "beta2", "=", "0.999", ")", "\n", "\n", "", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--D_steps_per_G'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of discriminator iterations per generator iterations.'", ")", "\n", "\n", "# for discriminators", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_feat'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_vgg'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for vgg loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_ganFeat_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use discriminator feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_vgg_loss'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* use VGG feature matching loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'hinge'", ",", "help", "=", "'(ls|original|hinge)'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'multiscale'", ",", "help", "=", "'(n_layers|multiscale|image)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_kld'", ",", "type", "=", "float", ",", "default", "=", "0.05", ")", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.__init__": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.initialize": [[20, 71], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "# experiment specifics", "\n", "        ", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'label2coco'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pix2pix'", ",", "help", "=", "'which model to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_G'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_D'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_E'", ",", "type", "=", "str", ",", "default", "=", "'spectralinstance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "\n", "# input/output sizes", "\n", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocess_mode'", ",", "type", "=", "str", ",", "default", "=", "'scale_width_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time.'", ",", "choices", "=", "(", "\"resize_and_crop\"", ",", "\"crop\"", ",", "\"scale_width\"", ",", "\"scale_width_and_crop\"", ",", "\"scale_shortside\"", ",", "\"scale_shortside_and_crop\"", ",", "\"fixed\"", ",", "\"none\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--load_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'Scale images to this size. The final image will be cropped to --crop_size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'Crop to the width of crop_size (after initially scaling the images to load_size.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'The ratio width/height. The final height of the load image will be crop_size/aspect_ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_nc'", ",", "type", "=", "int", ",", "default", "=", "182", ",", "help", "=", "'# of input label classes without unknown class. If you have unknown class as class label, specify --contain_dopntcare_label.'", ")", "\n", "parser", ".", "add_argument", "(", "'--contain_dontcare_label'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if the label map contains dontcare label (dontcare=255)'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "\n", "# for setting inputs", "\n", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "type", "=", "str", ",", "default", "=", "'./datasets/cityscapes/'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'coco'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data argumentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "sys", ".", "maxsize", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_from_opt_file'", ",", "action", "=", "'store_true'", ",", "help", "=", "'load the options from checkpoints and use that as default'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_filelist_write'", ",", "action", "=", "'store_true'", ",", "help", "=", "'saves the current filelist into a text file, so that it loads faster'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_filelist_read'", ",", "action", "=", "'store_true'", ",", "help", "=", "'reads from the file list cache'", ")", "\n", "\n", "# for displays", "\n", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'display window size'", ")", "\n", "\n", "# for generator", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'spade'", ",", "help", "=", "'selects model to use for netG (pix2pixhd | spade)'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'xavier'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_variance'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'variance of the initialization distribution'", ")", "\n", "parser", ".", "add_argument", "(", "'--z_dim'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "\"dimension of the latent z vector\"", ")", "\n", "\n", "# for instance-wise features", "\n", "parser", ".", "add_argument", "(", "'--no_instance'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do *not* add instance map as input'", ")", "\n", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'# of encoder filters in the first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_vae'", ",", "action", "=", "'store_true'", ",", "help", "=", "'enable training with an image encoder.'", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.gather_options": [[72, 102], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_known_args", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize", "base_options.BaseOptions.update_options_from_file"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.NVlabs_SPADE.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.update_options_from_file"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_mode", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_mode", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "opt", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# if there is opt_file, load it.", "\n", "# The previous default options will be overwritten", "\n", "if", "opt", ".", "load_from_opt_file", ":", "\n", "            ", "parser", "=", "self", ".", "update_options_from_file", "(", "parser", ",", "opt", ")", "\n", "\n", "", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "parser", "=", "parser", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.print_options": [[103, 114], ["sorted", "print", "vars().items", "base_options.BaseOptions.parser.get_default", "str", "str", "vars", "str"], "methods", ["None"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.option_file_path": [[115, 121], ["os.path.join", "os.path.join", "util.util.util.mkdirs"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.util.util.mkdirs"], ["", "def", "option_file_path", "(", "self", ",", "opt", ",", "makedir", "=", "False", ")", ":", "\n", "        ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "if", "makedir", ":", "\n", "            ", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt'", ")", "\n", "return", "file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.save_options": [[122, 134], ["base_options.BaseOptions.option_file_path", "open", "sorted", "open", "pickle.dump", "vars().items", "base_options.BaseOptions.parser.get_default", "opt_file.write", "vars", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.option_file_path"], ["", "def", "save_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "option_file_path", "(", "opt", ",", "makedir", "=", "True", ")", "\n", "with", "open", "(", "file_name", "+", "'.txt'", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "                ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                    ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "opt_file", ".", "write", "(", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", ")", "\n", "\n", "", "", "with", "open", "(", "file_name", "+", "'.pkl'", ",", "'wb'", ")", "as", "opt_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "opt", ",", "opt_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.update_options_from_file": [[135, 142], ["base_options.BaseOptions.load_options", "sorted", "vars().items", "hasattr", "getattr", "parser.set_defaults", "vars", "getattr"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.load_options"], ["", "", "def", "update_options_from_file", "(", "self", ",", "parser", ",", "opt", ")", ":", "\n", "        ", "new_opt", "=", "self", ".", "load_options", "(", "opt", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "new_opt", ",", "k", ")", "and", "v", "!=", "getattr", "(", "new_opt", ",", "k", ")", ":", "\n", "                ", "new_val", "=", "getattr", "(", "new_opt", ",", "k", ")", "\n", "parser", ".", "set_defaults", "(", "**", "{", "k", ":", "new_val", "}", ")", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.load_options": [[143, 147], ["base_options.BaseOptions.option_file_path", "pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.option_file_path"], ["", "def", "load_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "file_name", "=", "self", ".", "option_file_path", "(", "opt", ",", "makedir", "=", "False", ")", "\n", "new_opt", "=", "pickle", ".", "load", "(", "open", "(", "file_name", "+", "'.pkl'", ",", "'rb'", ")", ")", "\n", "return", "new_opt", "\n", "\n"]], "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.parse": [[148, 179], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "base_options.BaseOptions.save_options", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.print_options", "home.repos.pwc.inspect_result.NVlabs_SPADE.options.base_options.BaseOptions.save_options"], ["", "def", "parse", "(", "self", ",", "save", "=", "False", ")", ":", "\n", "\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "self", ".", "print_options", "(", "opt", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "self", ".", "save_options", "(", "opt", ")", "\n", "\n", "# Set semantic_nc based on the option.", "\n", "# This will be convenient in many places", "\n", "", "opt", ".", "semantic_nc", "=", "opt", ".", "label_nc", "+", "(", "1", "if", "opt", ".", "contain_dontcare_label", "else", "0", ")", "+", "(", "0", "if", "opt", ".", "no_instance", "else", "1", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "assert", "len", "(", "opt", ".", "gpu_ids", ")", "==", "0", "or", "opt", ".", "batchSize", "%", "len", "(", "opt", ".", "gpu_ids", ")", "==", "0", ",", "\"Batch size %d is wrong. It must be a multiple of # GPUs %d.\"", "%", "(", "opt", ".", "batchSize", ",", "len", "(", "opt", ".", "gpu_ids", ")", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]]}