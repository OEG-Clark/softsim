{"home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nss.main": [[15, 479], ["os.path.isfile", "print", "model.predict", "range", "np.array", "range", "np.int32", "np.asarray", "np.zeros", "np.concatenate", "np.ones", "np.concatenate", "np.concatenate", "np.min", "np.max", "nss.MSCN.scale_features", "sklearn.svm.SVC", "svm.SVC.fit", "nss.MSCN.scale_features", "print", "myModel", "optimizers.SGD", "model.compile", "os.path.isfile", "np.array", "np.save", "np.load", "np.load", "adv_data_f_all.append", "np.where", "len", "np.floor", "os.path.isfile", "random.sample", "np.load.append", "range", "np.save", "np.load", "len", "np.concatenate", "list", "len", "len", "np.load", "nss.MSCN.scale_features", "model.predict", "model.evaluate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.any", "svm.SVC.predict", "svm.SVC.decision_function", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "print", "DATASETS.index", "DATASETS.index", "myModel", "optimizers.SGD", "model.compile", "nss.MSCN.calculate_brisque_features", "parameters.reshape.reshape", "os.path.isfile", "np.array", "np.save", "np.load", "np.load", "model.predict", "success_inds.append", "list", "len", "range", "list", "random.sample", "np.load.append", "os.path.isfile", "np.array", "np.save", "np.load", "np.where", "np.where", "np.isnan", "np.nan_to_num", "len", "list", "list", "len", "results_all.append", "np.any", "svm.SVC.predict", "svm.SVC.decision_function", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "np.any", "svm.SVC.predict", "svm.SVC.decision_function", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "np.load", "nss.MSCN.scale_features", "model.predict", "model.evaluate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.any", "svm.SVC.predict", "svm.SVC.decision_function", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "myModel", "optimizers.SGD", "model.compile", "np.concatenate", "nss.MSCN.calculate_brisque_features", "parameters.reshape.reshape", "model.predict.argmax", "Y_test.argmax", "np.array", "len", "np.where", "len", "np.concatenate", "np.min", "set", "set", "nss.MSCN.calculate_brisque_features", "parameters.reshape.reshape", "np.zeros", "np.ones", "np.zeros", "np.ones", "np.zeros", "np.ones", "np.isnan", "np.nan_to_num", "len", "list", "list", "np.isnan", "np.nan_to_num", "len", "list", "list", "csv.DictWriter.writerow", "os.path.isfile", "np.array", "np.save", "np.load", "np.where", "np.where", "np.isnan", "np.nan_to_num", "len", "list", "list", "len", "results_all.append", "np.any", "svm.SVC.predict", "svm.SVC.decision_function", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "np.any", "svm.SVC.predict", "svm.SVC.decision_function", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "myModel", "optimizers.SGD", "model.compile", "np.concatenate", "set", "set", "range", "np.concatenate", "model.predict.argmax", "Y_test.argmax", "model.predict.argmax", "Y_test.argmax", "len", "len", "len", "len", "len", "len", "nss.MSCN.calculate_brisque_features", "parameters.reshape.reshape", "np.zeros", "np.ones", "np.zeros", "np.ones", "np.zeros", "np.ones", "np.isnan", "np.nan_to_num", "len", "list", "list", "np.isnan", "np.nan_to_num", "len", "list", "list", "csv.DictWriter.writerow", "model.predict.argmax", "Y_test.argmax", "len", "len", "np.concatenate", "model.predict.argmax", "Y_test.argmax", "model.predict.argmax", "Y_test.argmax", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.scale_features", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.scale_features", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.scale_features", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_brisque_features", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.scale_features", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_brisque_features", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_brisque_features", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_brisque_features"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "in", "DATASETS", ",", "\"Dataset parameter must be either 'mnist', 'cifar', 'svhn', or 'tiny'\"", "\n", "ATTACKS", "=", "ATTACK", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "'{}cnn_{}.h5'", ".", "format", "(", "checkpoints_dir", ",", "args", ".", "dataset", ")", ")", ",", "'model file not found... must first train model using train_model.py.'", "\n", "\n", "pgd_per", "=", "pgd_percent", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "\n", "\n", "print", "(", "'Loading the data and model...'", ")", "\n", "# Load the model", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.05", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "# Load the dataset", "\n", "", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "=", "model_class", ".", "x_train", ",", "model_class", ".", "y_train", ",", "model_class", ".", "x_test", ",", "model_class", ".", "y_test", "\n", "\n", "#-----------------------------------------------#", "\n", "#              Train NSS detector               #", "\n", "#-----------------------------------------------# ", "\n", "#extract nss features, from normal images", "\n", "x_train_f_path", "=", "'{}{}_normal_f.npy'", ".", "format", "(", "nss_results_dir", ",", "args", ".", "dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "x_train_f_path", ")", ":", "\n", "        ", "X_train_f", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "img", "in", "X_test", ":", "\n", "# parameters = calculate_ggd_aggd(img,'GGD', kernel_size=7, sigma=7/6)", "\n", "            ", "parameters", "=", "calculate_brisque_features", "(", "img", ")", "\n", "parameters", "=", "parameters", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "if", "X_train_f", ".", "size", "==", "0", ":", "\n", "                ", "X_train_f", "=", "parameters", "\n", "", "else", ":", "\n", "                ", "X_train_f", "=", "np", ".", "concatenate", "(", "(", "X_train_f", ",", "parameters", ")", ",", "axis", "=", "0", ")", "\n", "", "", "np", ".", "save", "(", "x_train_f_path", ",", "X_train_f", ")", "\n", "", "else", ":", "\n", "        ", "X_train_f", "=", "np", ".", "load", "(", "x_train_f_path", ")", "\n", "\n", "\n", "# X_train_f = scale_features(X_train_f)", "\n", "# scaler = MinMaxScaler(feature_range=(-1,1)).fit(X_train_f)", "\n", "# X_train_f = scaler.transform(X_train_f)", "\n", "\n", "", "X_train_f_copy", "=", "X_train_f", "\n", "\n", "#extract nss features, from adversarial images -- PGD", "\n", "pgds", "=", "[", "'pgdi_0.03125'", ",", "'pgdi_0.0625'", ",", "'pgdi_0.125'", ",", "'pgdi_0.25'", ",", "'pgdi_0.3125'", ",", "'pgdi_0.5'", "]", "\n", "adv_data_f_all", "=", "[", "]", "\n", "for", "pgd", "in", "pgds", ":", "\n", "        ", "adv_data", "=", "np", ".", "load", "(", "'%s%s_%s.npy'", "%", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "pgd", ")", ")", "\n", "adv_data_f_path", "=", "'{}{}_{}_f.npy'", ".", "format", "(", "nss_results_dir", ",", "args", ".", "dataset", ",", "pgd", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "adv_data_f_path", ")", ":", "\n", "            ", "adv_data_f", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "img", "in", "adv_data", ":", "\n", "# parameters = calculate_ggd_aggd(img,'GGD', kernel_size=7, sigma=7/6)", "\n", "                ", "parameters", "=", "calculate_brisque_features", "(", "img", ")", "\n", "parameters", "=", "parameters", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "if", "adv_data_f", ".", "size", "==", "0", ":", "\n", "                    ", "adv_data_f", "=", "parameters", "\n", "", "else", ":", "\n", "                    ", "adv_data_f", "=", "np", ".", "concatenate", "(", "(", "adv_data_f", ",", "parameters", ")", ",", "axis", "=", "0", ")", "\n", "", "", "np", ".", "save", "(", "adv_data_f_path", ",", "adv_data_f", ")", "\n", "", "else", ":", "\n", "            ", "adv_data_f", "=", "np", ".", "load", "(", "adv_data_f_path", ")", "\n", "\n", "# adv_data_f = scaler.transform(adv_data_f)", "\n", "", "adv_data_f_all", ".", "append", "(", "adv_data_f", ")", "\n", "\n", "#correctly classified samples", "\n", "", "preds_test", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "inds_correct", "=", "np", ".", "where", "(", "preds_test", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "X_test", "=", "X_test", "[", "inds_correct", "]", "\n", "Y_test", "=", "Y_test", "[", "inds_correct", "]", "\n", "X_train_f", "=", "X_train_f", "[", "inds_correct", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "adv_data_f_all", ")", ")", ":", "\n", "        ", "adv_data_f_all", "[", "i", "]", "=", "adv_data_f_all", "[", "i", "]", "[", "inds_correct", "]", "\n", "\n", "# samples = [200, 200, 300, 100, 100, 100]", "\n", "", "samples", "=", "np", ".", "array", "(", "np", ".", "floor", "(", "np", ".", "array", "(", "pgd_per", ")", "*", "len", "(", "inds_correct", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "inds_file", "=", "'{}{}_inds.npy'", ".", "format", "(", "nss_results_dir", ",", "args", ".", "dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "inds_file", ")", ":", "\n", "        ", "success_inds", "=", "[", "]", "\n", "for", "pgd", "in", "pgds", ":", "\n", "            ", "adv_data", "=", "np", ".", "load", "(", "'%s%s_%s.npy'", "%", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "pgd", ")", ")", "\n", "adv_data", "=", "adv_data", "[", "inds_correct", "]", "\n", "pred_adv", "=", "model", ".", "predict", "(", "adv_data", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "success_inds", ".", "append", "(", "inds_success", ")", "\n", "\n", "", "selected_inds", "=", "[", "]", "\n", "inds", "=", "random", ".", "sample", "(", "list", "(", "success_inds", "[", "0", "]", ")", ",", "samples", "[", "0", "]", ")", "\n", "selected_inds", ".", "append", "(", "inds", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "pgds", ")", ")", ":", "\n", "            ", "all_inds", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "selected_inds", ")", ")", ":", "\n", "                ", "all_inds", "=", "np", ".", "concatenate", "(", "(", "all_inds", ",", "selected_inds", "[", "j", "]", ")", ")", "\n", "\n", "", "allowed_inds", "=", "list", "(", "set", "(", "success_inds", "[", "i", "]", ")", "-", "set", "(", "all_inds", ")", ")", "\n", "inds", "=", "random", ".", "sample", "(", "allowed_inds", ",", "np", ".", "min", "(", "[", "samples", "[", "i", "]", ",", "len", "(", "allowed_inds", ")", "]", ")", ")", "\n", "selected_inds", ".", "append", "(", "inds", ")", "\n", "", "np", ".", "save", "(", "inds_file", ",", "selected_inds", ",", "allow_pickle", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "selected_inds", "=", "np", ".", "load", "(", "inds_file", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "", "train_inds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "selected_inds", ")", ")", ":", "\n", "        ", "train_inds", "=", "np", ".", "concatenate", "(", "(", "train_inds", ",", "selected_inds", "[", "i", "]", ")", ")", "\n", "", "train_inds", "=", "np", ".", "int32", "(", "train_inds", ")", "\n", "test_inds", "=", "np", ".", "asarray", "(", "list", "(", "set", "(", "range", "(", "len", "(", "inds_correct", ")", ")", ")", "-", "set", "(", "train_inds", ")", ")", ")", "\n", "\n", "#train the model", "\n", "x_normal_f", "=", "X_train_f", "[", "train_inds", "]", "\n", "y_normal_f", "=", "np", ".", "zeros", "(", "len", "(", "train_inds", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "x_adv_f", "=", "np", ".", "concatenate", "(", "(", "adv_data_f_all", "[", "0", "]", "[", "selected_inds", "[", "0", "]", "]", ",", "adv_data_f_all", "[", "1", "]", "[", "selected_inds", "[", "1", "]", "]", ",", "adv_data_f_all", "[", "2", "]", "[", "selected_inds", "[", "2", "]", "]", ",", "adv_data_f_all", "[", "3", "]", "[", "selected_inds", "[", "3", "]", "]", ",", "adv_data_f_all", "[", "4", "]", "[", "selected_inds", "[", "4", "]", "]", ",", "adv_data_f_all", "[", "5", "]", "[", "selected_inds", "[", "5", "]", "]", ")", ")", "\n", "y_adv_f", "=", "np", ".", "ones", "(", "len", "(", "train_inds", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "x_train", "=", "np", ".", "concatenate", "(", "(", "x_normal_f", ",", "x_adv_f", ")", ")", "\n", "y_train", "=", "np", ".", "concatenate", "(", "(", "y_normal_f", ",", "y_adv_f", ")", ")", "\n", "\n", "min_", "=", "np", ".", "min", "(", "x_train", ",", "axis", "=", "0", ")", "\n", "max_", "=", "np", ".", "max", "(", "x_train", ",", "axis", "=", "0", ")", "\n", "x_train", "=", "scale_features", "(", "x_train", ",", "min_", ",", "max_", ")", "\n", "\n", "# scaler = MinMaxScaler(feature_range=(-1,1)).fit(x_train)", "\n", "# x_train = scaler.transform(x_train)", "\n", "\n", "# x_normal_f = X_train_f", "\n", "# y_normal_f = np.zeros(len(x_normal_f), dtype=np.uint8)", "\n", "# if args.dataset== 'mnist':", "\n", "#     x_adv_f = adv_data_f_all[3]", "\n", "# else:", "\n", "#     x_adv_f = adv_data_f_all[1]", "\n", "# y_adv_f = np.ones(len(x_adv_f), dtype=np.uint8)", "\n", "# x_train = np.concatenate((x_normal_f, x_adv_f))", "\n", "# y_train = np.concatenate((y_normal_f, y_adv_f))", "\n", "\n", "\n", "#mnist", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "c", "=", "1000000.0", "\n", "g", "=", "1e-08", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "c", "=", "10000", "\n", "g", "=", "1e-05", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "c", "=", "0.1", "\n", "g", "=", "1e-08", "\n", "", "else", ":", "\n", "        ", "c", "=", "10000000000", "\n", "g", "=", "0.0001", "\n", "", "clf", "=", "svm", ".", "SVC", "(", "C", "=", "10", ",", "kernel", "=", "'sigmoid'", ",", "gamma", "=", "0.01", ",", "probability", "=", "True", ",", "random_state", "=", "0", ")", "\n", "clf", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "# pred_train = clf.predict(x_train)", "\n", "# prob_train = clf.predict_proba(x_train)", "\n", "# score_train = clf.score(x_train, y_train)", "\n", "# acc_train, _, fpr_train, _, _, _, _ = evalulate_detection_test(y_train, pred_train)", "\n", "\n", "# #Tuning", "\n", "# C_range = np.logspace(-2, 10, 13)", "\n", "# gamma_range = [1e-05]#np.logspace(-9, 3, 13)", "\n", "# param_grid = dict(gamma=gamma_range, C=C_range)", "\n", "# cv = StratifiedShuffleSplit(n_splits=5, test_size=0.2, random_state=45)", "\n", "# grid = GridSearchCV(svm.SVC(kernel='sigmoid',random_state=45), param_grid=param_grid, cv=cv)", "\n", "# grid.fit(x_train, y_train)", "\n", "# #The best parameters are {'C': 100000.0, 'gamma': 1e-07} with a score of 1.00", "\n", "# print(\"The best parameters are %s with a score of %0.2f\" % (grid.best_params_, grid.best_score_))", "\n", "\n", "#-----------------------------------------------#", "\n", "#                 Evaluate NSS                  #", "\n", "#-----------------------------------------------# ", "\n", "## Evaluate detector -- on adversarial attack", "\n", "Y_test_copy", "=", "Y_test", "\n", "X_test_copy", "=", "X_test", "\n", "X_train_f_copy", "=", "scale_features", "(", "X_train_f_copy", ",", "min_", ",", "max_", ")", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "        ", "Y_test", "=", "Y_test_copy", "\n", "X_test", "=", "X_test_copy", "\n", "X_train_f", "=", "X_train_f_copy", "\n", "results_all", "=", "[", "]", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'%s%s_%s.npy'", "%", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "#get NSS for adv", "\n", "adv_data_f_path", "=", "'{}{}_{}_f.npy'", ".", "format", "(", "nss_results_dir", ",", "args", ".", "dataset", ",", "attack", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "adv_data_f_path", ")", ":", "\n", "            ", "adv_data_f", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "img", "in", "X_test_adv", ":", "\n", "# parameters = calculate_ggd_aggd(img,'GGD', kernel_size=7, sigma=7/6)", "\n", "                ", "parameters", "=", "calculate_brisque_features", "(", "img", ")", "\n", "parameters", "=", "parameters", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "if", "adv_data_f", ".", "size", "==", "0", ":", "\n", "                    ", "adv_data_f", "=", "parameters", "\n", "", "else", ":", "\n", "                    ", "adv_data_f", "=", "np", ".", "concatenate", "(", "(", "adv_data_f", ",", "parameters", ")", ",", "axis", "=", "0", ")", "\n", "", "", "np", ".", "save", "(", "adv_data_f_path", ",", "adv_data_f", ")", "\n", "", "else", ":", "\n", "            ", "adv_data_f", "=", "np", ".", "load", "(", "adv_data_f_path", ")", "\n", "", "adv_data_f", "=", "scale_features", "(", "adv_data_f", ",", "min_", ",", "max_", ")", "\n", "# adv_data_f = scaler.transform(adv_data_f)", "\n", "\n", "if", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "            ", "Y_test", "=", "model_class", ".", "y_test", "[", "0", ":", "2700", "]", "\n", "X_test", "=", "model_class", ".", "x_test", "[", "0", ":", "2700", "]", "\n", "X_train_f", "=", "X_train_f", "[", "0", ":", "2700", "]", "\n", "adv_data_f", "=", "adv_data_f", "[", "0", ":", "2700", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "0", ":", "2700", "]", "\n", "cwi_inds", "=", "inds_correct", "[", "inds_correct", "<", "2700", "]", "\n", "Y_test", "=", "Y_test", "[", "cwi_inds", "]", "\n", "X_test", "=", "X_test", "[", "cwi_inds", "]", "\n", "X_train_f", "=", "X_train_f", "[", "cwi_inds", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "cwi_inds", "]", "\n", "nss_adv", "=", "adv_data_f", "[", "cwi_inds", "]", "\n", "", "else", ":", "\n", "            ", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "nss_adv", "=", "adv_data_f", "[", "inds_correct", "]", "\n", "X_train_f", "=", "X_train_f", "[", "inds_correct", "]", "\n", "\n", "", "pred_adv", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "Y_test", ",", "verbose", "=", "0", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "nss_adv_success", "=", "nss_adv", "[", "inds_success", "]", "\n", "nss_adv_fail", "=", "nss_adv", "[", "inds_fail", "]", "\n", "\n", "# prepare X and Y for detectors", "\n", "X_all", "=", "np", ".", "concatenate", "(", "[", "X_train_f", ",", "nss_adv", "]", ")", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "X_train_f", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "X_train_f", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_success", "=", "np", ".", "concatenate", "(", "[", "X_train_f", "[", "inds_success", "]", ",", "nss_adv_success", "]", ")", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_fail", "=", "np", ".", "concatenate", "(", "[", "X_train_f", "[", "inds_fail", "]", ",", "nss_adv_fail", "]", ")", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "\n", "#For Y_all", "\n", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "X_all", ")", ")", ":", "\n", "            ", "X_all", "=", "np", ".", "nan_to_num", "(", "X_all", ")", "\n", "", "Y_all_pred", "=", "clf", ".", "predict", "(", "X_all", ")", "\n", "Y_all_pred_score", "=", "clf", ".", "decision_function", "(", "X_all", ")", "\n", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "Y_all_pred_score", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "            ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "X_success", ")", ")", ":", "\n", "                ", "X_success", "=", "np", ".", "nan_to_num", "(", "X_success", ")", "\n", "", "Y_success_pred", "=", "clf", ".", "predict", "(", "X_success", ")", "\n", "Y_success_pred_score", "=", "clf", ".", "decision_function", "(", "X_success", ")", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "Y_success_pred_score", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "            ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "X_fail", ")", ")", ":", "\n", "                ", "X_fail", "=", "np", ".", "nan_to_num", "(", "X_fail", ")", "\n", "", "Y_fail_pred", "=", "clf", ".", "predict", "(", "X_fail", ")", "\n", "Y_fail_pred_score", "=", "clf", ".", "decision_function", "(", "X_fail", ")", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "Y_fail_pred_score", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_{}.csv'", ".", "format", "(", "nss_results_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "            ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'{:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n            - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n", "#Gray Box attacls", "\n", "## Evaluate detector -- on adversarial attack", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "        ", "if", "not", "(", "attack", "==", "'hop'", "or", "attack", "==", "'sa'", "or", "attack", "==", "'sta'", "or", "(", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ")", ")", ":", "\n", "            ", "Y_test", "=", "Y_test_copy", "\n", "X_test", "=", "X_test_copy", "\n", "X_train_f", "=", "X_train_f_copy", "\n", "results_all", "=", "[", "]", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'%s%s_%s.npy'", "%", "(", "adv_data_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "#get NSS for adv", "\n", "adv_data_f_path", "=", "'{}{}_{}_f.npy'", ".", "format", "(", "nss_results_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "adv_data_f_path", ")", ":", "\n", "                ", "adv_data_f", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "img", "in", "X_test_adv", ":", "\n", "# parameters = calculate_ggd_aggd(img,'GGD', kernel_size=7, sigma=7/6)", "\n", "                    ", "parameters", "=", "calculate_brisque_features", "(", "img", ")", "\n", "parameters", "=", "parameters", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "if", "adv_data_f", ".", "size", "==", "0", ":", "\n", "                        ", "adv_data_f", "=", "parameters", "\n", "", "else", ":", "\n", "                        ", "adv_data_f", "=", "np", ".", "concatenate", "(", "(", "adv_data_f", ",", "parameters", ")", ",", "axis", "=", "0", ")", "\n", "", "", "np", ".", "save", "(", "adv_data_f_path", ",", "adv_data_f", ")", "\n", "", "else", ":", "\n", "                ", "adv_data_f", "=", "np", ".", "load", "(", "adv_data_f_path", ")", "\n", "\n", "", "adv_data_f", "=", "scale_features", "(", "adv_data_f", ",", "min_", ",", "max_", ")", "\n", "# adv_data_f = scaler.transform(adv_data_f)", "\n", "\n", "if", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "                ", "Y_test", "=", "model_class", ".", "y_test", "[", "0", ":", "2700", "]", "\n", "X_test", "=", "model_class", ".", "x_test", "[", "0", ":", "2700", "]", "\n", "X_train_f", "=", "X_train_f", "[", "0", ":", "2700", "]", "\n", "adv_data_f", "=", "adv_data_f", "[", "0", ":", "2700", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "0", ":", "2700", "]", "\n", "cwi_inds", "=", "inds_correct", "[", "inds_correct", "<", "2700", "]", "\n", "Y_test", "=", "Y_test", "[", "cwi_inds", "]", "\n", "X_test", "=", "X_test", "[", "cwi_inds", "]", "\n", "X_train_f", "=", "X_train_f", "[", "cwi_inds", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "cwi_inds", "]", "\n", "nss_adv", "=", "adv_data_f", "[", "cwi_inds", "]", "\n", "", "else", ":", "\n", "                ", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "nss_adv", "=", "adv_data_f", "[", "inds_correct", "]", "\n", "X_train_f", "=", "X_train_f", "[", "inds_correct", "]", "\n", "\n", "", "pred_adv", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "Y_test", ",", "verbose", "=", "0", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "nss_adv_success", "=", "nss_adv", "[", "inds_success", "]", "\n", "nss_adv_fail", "=", "nss_adv", "[", "inds_fail", "]", "\n", "\n", "# prepare X and Y for detectors", "\n", "X_all", "=", "np", ".", "concatenate", "(", "[", "X_train_f", ",", "nss_adv", "]", ")", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "X_train_f", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "X_train_f", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_success", "=", "np", ".", "concatenate", "(", "[", "X_train_f", "[", "inds_success", "]", ",", "nss_adv_success", "]", ")", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_fail", "=", "np", ".", "concatenate", "(", "[", "X_train_f", "[", "inds_fail", "]", ",", "nss_adv_fail", "]", ")", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "\n", "#For Y_all", "\n", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "X_all", ")", ")", ":", "\n", "                ", "X_all", "=", "np", ".", "nan_to_num", "(", "X_all", ")", "\n", "", "Y_all_pred", "=", "clf", ".", "predict", "(", "X_all", ")", "\n", "Y_all_pred_score", "=", "clf", ".", "decision_function", "(", "X_all", ")", "\n", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "Y_all_pred_score", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "                ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "X_success", ")", ")", ":", "\n", "                    ", "X_success", "=", "np", ".", "nan_to_num", "(", "X_success", ")", "\n", "", "Y_success_pred", "=", "clf", ".", "predict", "(", "X_success", ")", "\n", "Y_success_pred_score", "=", "clf", ".", "decision_function", "(", "X_success", ")", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "Y_success_pred_score", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "                ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "if", "np", ".", "any", "(", "np", ".", "isnan", "(", "X_fail", ")", ")", ":", "\n", "                    ", "X_fail", "=", "np", ".", "nan_to_num", "(", "X_fail", ")", "\n", "", "Y_fail_pred", "=", "clf", ".", "predict", "(", "X_fail", ")", "\n", "Y_fail_pred_score", "=", "clf", ".", "decision_function", "(", "X_fail", ")", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "Y_fail_pred_score", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_gray_{}.csv'", ".", "format", "(", "nss_results_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                    ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'Gray {:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n                - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_kd_bu.main": [[11, 573], ["os.path.isfile", "os.path.isfile", "print", "model.predict", "print", "np.load", "kd_bu.detect.util.get_noisy_samples", "print", "os.path.isfile", "os.path.isfile", "print", "os.path.isfile", "os.path.isfile", "os.path.isfile", "print", "range", "warnings.warn", "range", "print", "model.predict", "preds_test_normal.argmax.argmax", "model.predict", "preds_test_noisy.argmax.argmax", "model.predict", "preds_test_adv.argmax.argmax", "print", "kd_bu.detect.util.score_samples", "kd_bu.detect.util.score_samples", "kd_bu.detect.util.score_samples", "kd_bu.detect.util.normalize_std", "kd_bu.detect.util.normalize_std", "kd_bu.detect.util.train_lr", "model.predict", "preds_test_adv.argmax.argmax", "model.evaluate", "np.concatenate().transpose", "np.concatenate().transpose", "np.concatenate", "np.concatenate", "lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "print", "myModel", "optimizers.SGD", "model.compile", "np.where", "os.path.isfile", "os.path.isfile", "np.load", "kd_bu.detect.util.get_mc_predictions().var().mean", "np.save", "np.load", "kd_bu.detect.util.get_mc_predictions().var().mean", "np.save", "np.load", "kd_bu.detect.util.get_deep_representations", "np.save", "os.path.isfile", "os.path.isfile", "np.load", "kd_bu.detect.util.get_deep_representations", "np.save", "np.load", "kd_bu.detect.util.get_deep_representations", "np.save", "sklearn.neighbors.KernelDensity().fit", "int", "np.where", "np.where", "lr.predict_proba", "len", "list", "list", "len", "results_all.append", "np.concatenate().transpose", "np.concatenate().transpose", "np.concatenate", "np.concatenate", "lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "np.concatenate().transpose", "np.concatenate().transpose", "np.concatenate", "np.concatenate", "lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "print", "DATASETS.index", "myModel", "optimizers.SGD", "model.compile", "np.load", "kd_bu.detect.util.get_mc_predictions().var().mean", "np.save", "np.load", "kd_bu.detect.util.get_mc_predictions().var().mean", "np.save", "np.load", "kd_bu.detect.util.get_deep_representations", "np.save", "np.load", "kd_bu.detect.util.get_deep_representations", "np.save", "np.where", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.zeros", "np.ones", "lr.predict_proba", "len", "list", "list", "lr.predict_proba", "len", "list", "list", "csv.DictWriter.writerow", "np.load", "kd_bu.detect.util.get_noisy_samples", "os.path.isfile", "os.path.isfile", "model.predict", "model.evaluate", "preds_test_adv.argmax.argmax", "kd_bu.detect.util.score_samples", "uncerts_scaler.transform().reshape", "dense_scaler.transform().reshape", "np.concatenate().transpose", "np.concatenate().transpose", "np.concatenate().transpose", "np.concatenate", "np.concatenate", "lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "myModel", "optimizers.SGD", "model.compile", "model.predict.argmax", "Y_test.argmax", "kd_bu.detect.util.get_mc_predictions().var", "kd_bu.detect.util.get_mc_predictions().var", "sklearn.neighbors.KernelDensity", "len", "Y_test[].argmax", "Y_test[].argmax", "len", "len", "np.concatenate", "np.concatenate", "np.zeros", "np.ones", "np.concatenate", "np.concatenate", "np.zeros", "np.ones", "np.load", "kd_bu.detect.util.get_mc_predictions().var().mean", "np.save", "np.load", "kd_bu.detect.util.get_deep_representations", "np.save", "np.where", "np.where", "lr.predict_proba", "len", "list", "list", "len", "results_all.append", "np.concatenate().transpose", "np.concatenate().transpose", "np.concatenate().transpose", "np.concatenate", "np.concatenate", "lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "np.concatenate().transpose", "np.concatenate().transpose", "np.concatenate().transpose", "np.concatenate", "np.concatenate", "lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "myModel", "optimizers.SGD", "model.compile", "kd_bu.detect.util.get_mc_predictions().var", "kd_bu.detect.util.get_mc_predictions().var", "Y_train.argmax", "densities_adv_z[].reshape", "uncerts_adv_z[].reshape", "densities_normal_z[].reshape", "uncerts_normal_z[].reshape", "len", "len", "len", "len", "uncerts_scaler.transform", "dense_scaler.transform", "np.concatenate", "np.concatenate", "np.concatenate", "np.zeros", "np.ones", "lr.predict_proba", "len", "list", "list", "lr.predict_proba", "len", "list", "list", "csv.DictWriter.writerow", "kd_bu.detect.util.get_mc_predictions", "kd_bu.detect.util.get_mc_predictions", "[].reshape", "[].reshape", "[].reshape", "[].reshape", "[].reshape", "[].reshape", "[].reshape", "[].reshape", "kd_bu.detect.util.get_mc_predictions().var", "Y_test.argmax", "Y_test.argmax", "get_mc_predictions().var().mean.reshape", "kd_bu.detect.util.score_samples.reshape", "len", "len", "np.concatenate", "np.concatenate", "np.concatenate", "np.zeros", "np.ones", "np.concatenate", "np.concatenate", "np.concatenate", "np.zeros", "np.ones", "kd_bu.detect.util.get_mc_predictions", "kd_bu.detect.util.get_mc_predictions", "dense_scaler.transform().reshape.reshape", "uncerts_scaler.transform().reshape.reshape", "densities_normal_z.reshape", "uncerts_normal_z.reshape", "densities_noisy_z.reshape", "uncerts_noisy_z.reshape", "len", "len", "len", "len", "kd_bu.detect.util.get_mc_predictions", "densities_adv_z[].reshape", "uncerts_adv_z[].reshape", "densities_normal_z[].reshape", "uncerts_normal_z[].reshape", "densities_noisy_z[].reshape", "uncerts_noisy_z[].reshape", "densities_adv_z[].reshape", "uncerts_adv_z[].reshape", "densities_normal_z[].reshape", "uncerts_normal_z[].reshape", "densities_noisy_z[].reshape", "uncerts_noisy_z[].reshape"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_noisy_samples", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.score_samples", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.score_samples", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.score_samples", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.normalize_std", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.normalize_std", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.train_lr", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_deep_representations", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_deep_representations", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_deep_representations", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_deep_representations", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_deep_representations", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_noisy_samples", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.score_samples", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_deep_representations", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_mc_predictions", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_mc_predictions", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_mc_predictions", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_mc_predictions", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_mc_predictions"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "in", "DATASETS", ",", "\"Dataset parameter must be either {}\"", ".", "format", "(", "DATASETS", ")", "\n", "ATTACKS", "=", "ATTACK", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "\n", "assert", "args", ".", "attack", "in", "ATTACKS", ",", "\"Train attack must be either {}\"", ".", "format", "(", "ATTACKS", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "'{}cnn_{}.h5'", ".", "format", "(", "checkpoints_dir", ",", "args", ".", "dataset", ")", ")", ",", "'model file not found... must first train model'", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", ")", ",", "'adversarial sample file not found... must first craft adversarial samples'", "\n", "print", "(", "'Loading the data and model...'", ")", "\n", "\n", "# Load the model", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.05", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "# Load the dataset", "\n", "", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "=", "model_class", ".", "x_train", ",", "model_class", ".", "y_train", ",", "model_class", ".", "x_test", ",", "model_class", ".", "y_test", "\n", "\n", "if", "args", ".", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "X_test", "=", "X_test", "[", "0", ":", "2700", "]", "\n", "Y_test", "=", "Y_test", "[", "0", ":", "2700", "]", "\n", "\n", "# Refine the normal, noisy and adversarial sets to only include samples for", "\n", "# which the original version was correctly classified by the model", "\n", "", "preds_test", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "inds_correct", "=", "np", ".", "where", "(", "preds_test", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "X_test", "=", "X_test", "[", "inds_correct", "]", "\n", "Y_test", "=", "Y_test", "[", "inds_correct", "]", "\n", "# n_samples = len(inds_correct)", "\n", "\n", "# Check attack type, select adversarial and noisy samples accordingly", "\n", "print", "(", "'Loading noisy and adversarial samples...'", ")", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", ")", "\n", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "# Craft an equal number of noisy samples", "\n", "X_test_noisy", "=", "get_noisy_samples", "(", "X_test", ",", "X_test_adv", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", "\n", "\n", "## Get Bayesian uncertainty scores", "\n", "print", "(", "'Getting Monte Carlo dropout variance predictions...'", ")", "\n", "if", "args", ".", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "uncerts_normal_file", "=", "'{}{}_uncerts_normal_min.npy'", ".", "format", "(", "kd_bu_results_dir", ",", "args", ".", "dataset", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "uncerts_normal_file", ")", ":", "\n", "            ", "uncerts_normal", "=", "np", ".", "load", "(", "uncerts_normal_file", ")", "\n", "", "else", ":", "\n", "            ", "uncerts_normal", "=", "get_mc_predictions", "(", "model", ",", "X_test", ",", "batch_size", "=", "args", ".", "batch_size", ")", ".", "var", "(", "axis", "=", "0", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "np", ".", "save", "(", "uncerts_normal_file", ",", "uncerts_normal", ")", "\n", "", "", "else", ":", "\n", "        ", "uncerts_normal_file", "=", "'{}{}_uncerts_normal.npy'", ".", "format", "(", "kd_bu_results_dir", ",", "args", ".", "dataset", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "uncerts_normal_file", ")", ":", "\n", "            ", "uncerts_normal", "=", "np", ".", "load", "(", "uncerts_normal_file", ")", "\n", "", "else", ":", "\n", "            ", "uncerts_normal", "=", "get_mc_predictions", "(", "model", ",", "X_test", ",", "batch_size", "=", "args", ".", "batch_size", ")", ".", "var", "(", "axis", "=", "0", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "np", ".", "save", "(", "uncerts_normal_file", ",", "uncerts_normal", ")", "\n", "\n", "", "", "uncerts_noisy_file", "=", "'{}{}_{}_uncerts_noisy.npy'", ".", "format", "(", "kd_bu_results_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "uncerts_noisy_file", ")", ":", "\n", "        ", "uncerts_noisy", "=", "np", ".", "load", "(", "uncerts_noisy_file", ")", "\n", "", "else", ":", "\n", "        ", "uncerts_noisy", "=", "get_mc_predictions", "(", "model", ",", "X_test_noisy", ",", "batch_size", "=", "args", ".", "batch_size", ")", ".", "var", "(", "axis", "=", "0", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "np", ".", "save", "(", "uncerts_noisy_file", ",", "uncerts_noisy", ")", "\n", "\n", "", "uncerts_adv_file", "=", "'{}{}_{}_uncerts_adv.npy'", ".", "format", "(", "kd_bu_results_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "uncerts_adv_file", ")", ":", "\n", "        ", "uncerts_adv", "=", "np", ".", "load", "(", "uncerts_adv_file", ")", "\n", "", "else", ":", "\n", "        ", "uncerts_adv", "=", "get_mc_predictions", "(", "model", ",", "X_test_adv", ",", "batch_size", "=", "args", ".", "batch_size", ")", ".", "var", "(", "axis", "=", "0", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "np", ".", "save", "(", "uncerts_adv_file", ",", "uncerts_adv", ")", "\n", "\n", "## Get KDE scores", "\n", "# Get deep feature representations", "\n", "", "print", "(", "'Getting deep feature representations...'", ")", "\n", "X_train_features_file", "=", "'{}{}_dens_xtrain.npy'", ".", "format", "(", "kd_bu_results_dir", ",", "args", ".", "dataset", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "X_train_features_file", ")", ":", "\n", "        ", "X_train_features", "=", "np", ".", "load", "(", "X_train_features_file", ")", "\n", "", "else", ":", "\n", "        ", "X_train_features", "=", "get_deep_representations", "(", "model", ",", "X_train", ",", "batch_size", "=", "args", ".", "batch_size", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "np", ".", "save", "(", "X_train_features_file", ",", "X_train_features", ")", "\n", "\n", "", "if", "args", ".", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "X_test_normal_features_file", "=", "'{}{}_dens_normal_mini.npy'", ".", "format", "(", "kd_bu_results_dir", ",", "args", ".", "dataset", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "X_test_normal_features_file", ")", ":", "\n", "            ", "X_test_normal_features", "=", "np", ".", "load", "(", "X_test_normal_features_file", ")", "\n", "", "else", ":", "\n", "            ", "X_test_normal_features", "=", "get_deep_representations", "(", "model", ",", "X_test", ",", "batch_size", "=", "args", ".", "batch_size", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "np", ".", "save", "(", "X_test_normal_features_file", ",", "X_test_normal_features", ")", "\n", "", "", "else", ":", "\n", "        ", "X_test_normal_features_file", "=", "'{}{}_dens_normal.npy'", ".", "format", "(", "kd_bu_results_dir", ",", "args", ".", "dataset", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "X_test_normal_features_file", ")", ":", "\n", "            ", "X_test_normal_features", "=", "np", ".", "load", "(", "X_test_normal_features_file", ")", "\n", "", "else", ":", "\n", "            ", "X_test_normal_features", "=", "get_deep_representations", "(", "model", ",", "X_test", ",", "batch_size", "=", "args", ".", "batch_size", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "np", ".", "save", "(", "X_test_normal_features_file", ",", "X_test_normal_features", ")", "\n", "\n", "", "", "X_test_noisy_features_file", "=", "'{}{}_{}_dens_noisy.npy'", ".", "format", "(", "kd_bu_results_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "X_test_noisy_features_file", ")", ":", "\n", "        ", "X_test_noisy_features", "=", "np", ".", "load", "(", "X_test_noisy_features_file", ")", "\n", "", "else", ":", "\n", "        ", "X_test_noisy_features", "=", "get_deep_representations", "(", "model", ",", "X_test_noisy", ",", "batch_size", "=", "args", ".", "batch_size", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "np", ".", "save", "(", "X_test_noisy_features_file", ",", "X_test_noisy_features", ")", "\n", "\n", "", "X_test_adv_features_file", "=", "'{}{}_{}_dens_adv.npy'", ".", "format", "(", "kd_bu_results_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "X_test_adv_features_file", ")", ":", "\n", "        ", "X_test_adv_features", "=", "np", ".", "load", "(", "X_test_adv_features_file", ")", "\n", "", "else", ":", "\n", "        ", "X_test_adv_features", "=", "get_deep_representations", "(", "model", ",", "X_test_adv", ",", "batch_size", "=", "args", ".", "batch_size", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "np", ".", "save", "(", "X_test_adv_features_file", ",", "X_test_adv_features", ")", "\n", "\n", "# Train one KDE per class", "\n", "", "print", "(", "'Training KDEs...'", ")", "\n", "class_inds", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "Y_train", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "class_inds", "[", "i", "]", "=", "np", ".", "where", "(", "Y_train", ".", "argmax", "(", "axis", "=", "1", ")", "==", "i", ")", "[", "0", "]", "\n", "", "kdes", "=", "{", "}", "\n", "warnings", ".", "warn", "(", "\"Using pre-set kernel bandwidths that were determined \"", "\n", "\"optimal for the specific CNN models of the paper. If you've \"", "\n", "\"changed your model, you'll need to re-optimize the \"", "\n", "\"bandwidth.\"", ")", "\n", "for", "i", "in", "range", "(", "Y_train", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "kdes", "[", "i", "]", "=", "KernelDensity", "(", "kernel", "=", "'gaussian'", ",", "\n", "bandwidth", "=", "BANDWIDTHS", "[", "args", ".", "dataset", "]", ")", ".", "fit", "(", "X_train_features", "[", "class_inds", "[", "i", "]", "]", ")", "\n", "# Get model predictions", "\n", "", "print", "(", "'Computing model predictions...'", ")", "\n", "preds_test_normal", "=", "model", ".", "predict", "(", "X_test", ",", "verbose", "=", "0", ")", "\n", "preds_test_normal", "=", "preds_test_normal", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "preds_test_noisy", "=", "model", ".", "predict", "(", "X_test_noisy", ")", "\n", "preds_test_noisy", "=", "preds_test_noisy", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "preds_test_adv", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "preds_test_adv", "=", "preds_test_adv", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "\n", "# Get density estimates", "\n", "print", "(", "'computing densities...'", ")", "\n", "densities_normal", "=", "score_samples", "(", "\n", "kdes", ",", "\n", "X_test_normal_features", ",", "\n", "preds_test_normal", "\n", ")", "\n", "densities_noisy", "=", "score_samples", "(", "\n", "kdes", ",", "\n", "X_test_noisy_features", ",", "\n", "preds_test_noisy", "\n", ")", "\n", "densities_adv", "=", "score_samples", "(", "\n", "kdes", ",", "\n", "X_test_adv_features", ",", "\n", "preds_test_adv", "\n", ")", "\n", "\n", "## Z-score the uncertainty and density values", "\n", "uncerts_normal_z", ",", "uncerts_adv_z", ",", "uncerts_noisy_z", ",", "uncerts_scaler", "=", "normalize_std", "(", "\n", "uncerts_normal", ",", "\n", "uncerts_adv", ",", "\n", "uncerts_noisy", "\n", ")", "\n", "densities_normal_z", ",", "densities_adv_z", ",", "densities_noisy_z", ",", "dense_scaler", "=", "normalize_std", "(", "\n", "densities_normal", ",", "\n", "densities_adv", ",", "\n", "densities_noisy", "\n", ")", "\n", "\n", "#70% train  --- 30% test", "\n", "indx_start", "=", "int", "(", "len", "(", "X_test_adv", ")", "*", "0.007", ")", "*", "100", "\n", "\n", "## Build detector", "\n", "values", ",", "labels", ",", "lr", "=", "train_lr", "(", "\n", "densities_pos", "=", "densities_adv_z", "[", ":", "indx_start", "]", ",", "\n", "densities_neg", "=", "np", ".", "concatenate", "(", "(", "densities_normal_z", "[", ":", "indx_start", "]", ",", "densities_noisy_z", "[", ":", "indx_start", "]", ")", ")", ",", "\n", "uncerts_pos", "=", "uncerts_adv_z", "[", ":", "indx_start", "]", ",", "\n", "uncerts_neg", "=", "np", ".", "concatenate", "(", "(", "uncerts_normal_z", "[", ":", "indx_start", "]", ",", "uncerts_noisy_z", "[", ":", "indx_start", "]", ")", ")", "\n", ")", "\n", "\n", "## Evaluate detector on test samples", "\n", "preds_test_adv", "=", "model", ".", "predict", "(", "X_test_adv", "[", "indx_start", ":", "]", ")", "\n", "preds_test_adv", "=", "preds_test_adv", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "_", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", "[", "indx_start", ":", "]", ",", "Y_test", "[", "indx_start", ":", "]", ",", "verbose", "=", "0", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "preds_test_adv", "!=", "Y_test", "[", "indx_start", ":", "]", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "preds_test_adv", "==", "Y_test", "[", "indx_start", ":", "]", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "\n", "#For all", "\n", "values_pos", "=", "np", ".", "concatenate", "(", "(", "densities_adv_z", "[", "indx_start", ":", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_adv_z", "[", "indx_start", ":", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_normal", "=", "np", ".", "concatenate", "(", "(", "densities_normal_z", "[", "indx_start", ":", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_normal_z", "[", "indx_start", ":", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "# values_noise = np.concatenate((densities_noisy_z[indx_start:].reshape((1, -1)), uncerts_noisy_z[indx_start:].reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "# values_neg = np.concatenate((values_normal, values_noise))", "\n", "values_neg", "=", "values_normal", "\n", "values", "=", "np", ".", "concatenate", "(", "(", "values_neg", ",", "values_pos", ")", ")", "\n", "# labels = np.concatenate((np.zeros(len(values_normal)*2), np.ones(len(values_pos))))", "\n", "labels", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "values_normal", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "values_pos", ")", ")", ")", ")", "\n", "\n", "results_all", "=", "[", "]", "\n", "probs", "=", "lr", ".", "predict_proba", "(", "values", ")", "[", ":", ",", "1", "]", "\n", "y_label_pred", "=", "lr", ".", "predict", "(", "values", ")", "\n", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "labels", ",", "y_label_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "labels", ",", "probs", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#Predict Success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "        ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "        ", "values_success_pos", "=", "np", ".", "concatenate", "(", "(", "densities_adv_z", "[", "indx_start", ":", "]", "[", "inds_success", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_adv_z", "[", "indx_start", ":", "]", "[", "inds_success", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_success_normal", "=", "np", ".", "concatenate", "(", "(", "densities_normal_z", "[", "indx_start", ":", "]", "[", "inds_success", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_normal_z", "[", "indx_start", ":", "]", "[", "inds_success", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "# values_success_noise = np.concatenate((densities_noisy_z[indx_start:][inds_success].reshape((1, -1)), uncerts_noisy_z[indx_start:][inds_success].reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "# values_success_neg = np.concatenate((values_success_normal, values_success_noise))", "\n", "values_success_neg", "=", "values_success_normal", "\n", "values_success", "=", "np", ".", "concatenate", "(", "(", "values_success_neg", ",", "values_success_pos", ")", ")", "\n", "# labels_success = np.concatenate((np.zeros(len(inds_success)*2), np.ones(len(inds_success))))", "\n", "labels_success", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ")", ")", ")", "\n", "\n", "probs_success", "=", "lr", ".", "predict_proba", "(", "values_success", ")", "[", ":", ",", "1", "]", "\n", "y_label_pred_success", "=", "lr", ".", "predict", "(", "values_success", ")", "\n", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "labels_success", ",", "y_label_pred_success", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "labels_success", ",", "probs_success", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#Predict Fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "        ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "        ", "values_fail_pos", "=", "np", ".", "concatenate", "(", "(", "densities_adv_z", "[", "indx_start", ":", "]", "[", "inds_fail", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_adv_z", "[", "indx_start", ":", "]", "[", "inds_fail", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_fail_normal", "=", "np", ".", "concatenate", "(", "(", "densities_normal_z", "[", "indx_start", ":", "]", "[", "inds_fail", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_normal_z", "[", "indx_start", ":", "]", "[", "inds_fail", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "# values_fail_noise = np.concatenate((densities_noisy_z[indx_start:][inds_fail].reshape((1, -1)), uncerts_noisy_z[indx_start:][inds_fail].reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "# values_fail_neg = np.concatenate((values_fail_normal, values_fail_noise))", "\n", "values_fail_neg", "=", "values_fail_normal", "\n", "values_fail", "=", "np", ".", "concatenate", "(", "(", "values_fail_neg", ",", "values_fail_pos", ")", ")", "\n", "# labels_fail = np.concatenate((np.zeros(len(inds_fail)*2), np.ones(len(inds_fail))))", "\n", "labels_fail", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ")", ")", ")", "\n", "\n", "probs_fail", "=", "lr", ".", "predict_proba", "(", "values_fail", ")", "[", ":", ",", "1", "]", "\n", "y_label_pred_fail", "=", "lr", ".", "predict", "(", "values_fail", ")", "\n", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "labels_fail", ",", "y_label_pred_fail", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "labels_fail", ",", "probs_fail", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "print", "(", "'{:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n        - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "args", ".", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "import", "csv", "\n", "with", "open", "(", "'{}{}_{}.csv'", ".", "format", "(", "kd_bu_results_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "        ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'Done!'", ")", "\n", "\n", "# #use current detector to predict other attacks", "\n", "# Y_test_copy=Y_test", "\n", "# for attack in ATTACKS:", "\n", "#     Y_test=Y_test_copy", "\n", "#     if attack=='df'  and args.dataset=='tiny':", "\n", "#         Y_test=model_class.y_test[0:2700]", "\n", "#     results_all = []", "\n", "#     #Prepare data", "\n", "#     # Load adversarial samples", "\n", "#     adv_path = '{}{}_{}.npy'.format(adv_data_dir, args.dataset, attack)", "\n", "#     X_test_adv = np.load(adv_path)", "\n", "\n", "#     if attack=='df' and args.dataset=='tiny':", "\n", "#         cwi_inds = inds_correct[inds_correct<2700]", "\n", "#         Y_test = Y_test[cwi_inds]", "\n", "#         X_test_adv = X_test_adv[cwi_inds]", "\n", "#         X_test_noisy = get_noisy_samples(X_test[0:2700][cwi_inds], X_test_adv, args.dataset, attack)", "\n", "#     else:", "\n", "#         X_test_adv = X_test_adv[inds_correct]", "\n", "#         X_test_noisy = get_noisy_samples(X_test, X_test_adv, args.dataset, attack)", "\n", "\n", "#     uncerts_adv_file = '{}{}_{}_uncerts_adv.npy'.format(kd_bu_results_dir, args.dataset, attack)", "\n", "#     if os.path.isfile(uncerts_adv_file):", "\n", "#         uncerts_adv = np.load(uncerts_adv_file)", "\n", "#     else:", "\n", "#         uncerts_adv = get_mc_predictions(model, X_test_adv, batch_size=args.batch_size).var(axis=0).mean(axis=1)", "\n", "#         np.save(uncerts_adv_file, uncerts_adv)", "\n", "\n", "#     X_test_adv_features_file = '{}{}_{}_dens_adv.npy'.format(kd_bu_results_dir, args.dataset, attack)", "\n", "#     if os.path.isfile(X_test_adv_features_file):", "\n", "#         X_test_adv_features = np.load(X_test_adv_features_file)", "\n", "#     else:", "\n", "#         X_test_adv_features = get_deep_representations(model, X_test_adv, batch_size=args.batch_size, dataset=args.dataset)", "\n", "#         np.save(X_test_adv_features_file, X_test_adv_features)", "\n", "\n", "#     # Get model predictions", "\n", "#     preds_test_adv = model.predict(X_test_adv)", "\n", "#     loss, acc_suc = model.evaluate(X_test_adv, Y_test, verbose=0)", "\n", "#     preds_test_adv = preds_test_adv.argmax(axis=1)", "\n", "#     inds_success = np.where(preds_test_adv != Y_test.argmax(axis=1))[0]", "\n", "#     inds_fail = np.where(preds_test_adv == Y_test.argmax(axis=1))[0]", "\n", "\n", "#     # Get density estimates", "\n", "#     densities_adv = score_samples(kdes, X_test_adv_features, preds_test_adv)", "\n", "\n", "#     # Z-score the uncertainty and density values", "\n", "#     uncerts_adv_z = uncerts_scaler.transform(uncerts_adv.reshape((-1,1))).reshape((-1,))", "\n", "#     densities_adv_z = dense_scaler.transform(densities_adv.reshape((-1,1))).reshape((-1,))", "\n", "\n", "#     #Predict all", "\n", "#     values_pos = np.concatenate((densities_adv_z.reshape((1, -1)), uncerts_adv_z.reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "#     values_normal = np.concatenate((densities_normal_z.reshape((1, -1)), uncerts_normal_z.reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "#     values_noise = np.concatenate((densities_noisy_z.reshape((1, -1)), uncerts_noisy_z.reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "#     values_neg = values_normal", "\n", "#     values = np.concatenate((values_neg, values_pos))", "\n", "#     labels = np.concatenate((np.zeros(len(values_normal)), np.ones(len(values_pos))))", "\n", "#     probs = lr.predict_proba(values)[:, 1]", "\n", "#     y_label_pred = lr.predict(values)", "\n", "\n", "#     acc_all, tpr_all, fpr_all, tp_all, ap_all, fb_all, an_all= evalulate_detection_test(labels, y_label_pred)", "\n", "#     fprs_all, tprs_all, thresholds_all = roc_curve(labels, probs)", "\n", "#     roc_auc_all = auc(fprs_all, tprs_all)", "\n", "#     print(\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\".format(100*roc_auc_all, 100*acc_all, 100*fpr_all))", "\n", "\n", "#     curr_result = {'type':'all', 'nsamples': len(inds_correct),\t'acc_suc': acc_suc,\t\\", "\n", "#                     'acc': acc_all, 'tpr': tpr_all, 'fpr': fpr_all, 'tp': tp_all, 'ap': ap_all, 'fb': fb_all, 'an': an_all,\t\\", "\n", "#                     'tprs': list(fprs_all), 'fprs': list(tprs_all),\t'auc': roc_auc_all}", "\n", "#     results_all.append(curr_result)", "\n", "\n", "#     #Predict Success", "\n", "#     if len(inds_success)==0:", "\n", "#         tpr_success=np.nan", "\n", "#         curr_result = {'type':'success', 'nsamples': 0,\t'acc_suc': 0,\t\\", "\n", "#                 'acc': np.nan, 'tpr': np.nan, 'fpr': np.nan, 'tp': np.nan, 'ap': np.nan, 'fb': np.nan, 'an': np.nan,\t\\", "\n", "#                 'tprs': np.nan, 'fprs': np.nan,\t'auc': np.nan}", "\n", "#         results_all.append(curr_result)", "\n", "#     else:", "\n", "#         values_success_pos = np.concatenate((densities_adv_z[inds_success].reshape((1, -1)), uncerts_adv_z[inds_success].reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "#         values_success_normal = np.concatenate((densities_normal_z[inds_success].reshape((1, -1)), uncerts_normal_z[inds_success].reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "#         values_success_noise = np.concatenate((densities_noisy_z[inds_success].reshape((1, -1)), uncerts_noisy_z[inds_success].reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "#         # values_success_neg = np.concatenate((values_success_normal, values_success_noise))", "\n", "#         values_success_neg = values_success_normal", "\n", "#         values_success = np.concatenate((values_success_neg, values_success_pos))", "\n", "#         # labels_success = np.concatenate((np.zeros(len(inds_success)*2), np.ones(len(inds_success))))", "\n", "#         labels_success = np.concatenate((np.zeros(len(inds_success)), np.ones(len(inds_success))))", "\n", "#         probs_success = lr.predict_proba(values_success)[:, 1]", "\n", "#         y_label_pred_success = lr.predict(values_success)", "\n", "\n", "#         accuracy_success, tpr_success, fpr_success, tp_success, ap_success, fb_success, an_success = evalulate_detection_test(labels_success, y_label_pred_success)", "\n", "#         fprs_success, tprs_success, thresholds_success = roc_curve(labels_success, probs_success)", "\n", "#         roc_auc_success = auc(fprs_success, tprs_success)", "\n", "\n", "#         curr_result = {'type':'success', 'nsamples': len(inds_success),\t'acc_suc': 0,\t\\", "\n", "#                 'acc': accuracy_success, 'tpr': tpr_success, 'fpr': fpr_success, 'tp': tp_success, 'ap': ap_success, 'fb': fb_success, 'an': an_success,\t\\", "\n", "#                 'tprs': list(fprs_success), 'fprs': list(tprs_success),\t'auc': roc_auc_success}", "\n", "#         results_all.append(curr_result)", "\n", "\n", "#     #Predict Fail", "\n", "#     if len(inds_fail)==0:", "\n", "#         tpr_fail=np.nan", "\n", "#         curr_result = {'type':'fail', 'nsamples': 0,\t'acc_suc': 0,\t\\", "\n", "#                 'acc': np.nan, 'tpr': np.nan, 'fpr': np.nan, 'tp': np.nan, 'ap': np.nan, 'fb': np.nan, 'an': np.nan,\t\\", "\n", "#                 'tprs': np.nan, 'fprs': np.nan,\t'auc': np.nan}", "\n", "#         results_all.append(curr_result)", "\n", "#     else:", "\n", "#         values_fail_pos = np.concatenate((densities_adv_z[inds_fail].reshape((1, -1)), uncerts_adv_z[inds_fail].reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "#         values_fail_normal = np.concatenate((densities_normal_z[inds_fail].reshape((1, -1)), uncerts_normal_z[inds_fail].reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "#         values_fail_noise = np.concatenate((densities_noisy_z[inds_fail].reshape((1, -1)), uncerts_noisy_z[inds_fail].reshape((1, -1))),  axis=0).transpose([1, 0])", "\n", "#         # values_fail_neg = np.concatenate((values_fail_normal, values_fail_noise))", "\n", "#         values_fail_neg = values_fail_normal", "\n", "#         values_fail = np.concatenate((values_fail_neg, values_fail_pos))", "\n", "#         # labels_fail = np.concatenate((np.zeros(len(inds_fail)*2), np.ones(len(inds_fail))))", "\n", "#         labels_fail = np.concatenate((np.zeros(len(inds_fail)), np.ones(len(inds_fail))))", "\n", "#         probs_fail = lr.predict_proba(values_fail)[:, 1]", "\n", "#         y_label_pred_fail = lr.predict(values_fail)", "\n", "\n", "#         accuracy_fail, tpr_fail, fpr_fail, tp_fail, ap_fail, fb_fail, an_fail = evalulate_detection_test(labels_fail, y_label_pred_fail)", "\n", "#         fprs_fail, tprs_fail, thresholds_fail = roc_curve(labels_fail, probs_fail)", "\n", "#         roc_auc_fail = auc(fprs_fail, tprs_fail)", "\n", "\n", "#         curr_result = {'type':'fail', 'nsamples': len(inds_fail),\t'acc_suc': 0,\t\\", "\n", "#                 'acc': accuracy_fail, 'tpr': tpr_fail, 'fpr': fpr_fail, 'tp': tp_fail, 'ap': ap_fail, 'fb': fb_fail, 'an': an_fail,\t\\", "\n", "#                 'tprs': list(fprs_fail), 'fprs': list(tprs_fail),\t'auc': roc_auc_fail}", "\n", "#         results_all.append(curr_result)", "\n", "\n", "#     print('trained on {} attack and tested on {}- accuracy of pretrained model: {:7.2f}% \\", "\n", "#     - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'.format(args.attack, attack, 100*acc_suc, 100*tpr_success, 100*tpr_fail))", "\n", "\n", "#     import csv", "\n", "#     with open('{}{}_train_{}_test_{}.csv'.format(kd_bu_results_dir, args.dataset, args.attack, attack), 'w', newline='') as csvfile:", "\n", "#         writer = csv.DictWriter(csvfile, fieldnames=fieldnames)", "\n", "#         writer.writeheader()", "\n", "#         for row in results_all:", "\n", "#             writer.writerow(row)", "\n", "\n", "# print('Done!')", "\n", "\n", "#For gray-box attacks", "\n", "if", "not", "(", "args", ".", "attack", "==", "'hop'", "or", "args", ".", "attack", "==", "'sa'", "or", "args", ".", "attack", "==", "'sta'", "or", "(", "args", ".", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ")", ")", ":", "\n", "        ", "for", "attack", "in", "[", "args", ".", "attack", "]", ":", "\n", "            ", "results_all", "=", "[", "]", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "adv_path", "=", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", "\n", "X_test_adv", "=", "np", ".", "load", "(", "adv_path", ")", "\n", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "X_test_noisy", "=", "get_noisy_samples", "(", "X_test", ",", "X_test_adv", ",", "args", ".", "dataset", ",", "attack", ")", "\n", "\n", "uncerts_adv_file", "=", "'{}{}_{}_uncerts_adv.npy'", ".", "format", "(", "kd_bu_results_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "uncerts_adv_file", ")", ":", "\n", "                ", "uncerts_adv", "=", "np", ".", "load", "(", "uncerts_adv_file", ")", "\n", "", "else", ":", "\n", "                ", "uncerts_adv", "=", "get_mc_predictions", "(", "model", ",", "X_test_adv", ",", "batch_size", "=", "args", ".", "batch_size", ")", ".", "var", "(", "axis", "=", "0", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "np", ".", "save", "(", "uncerts_adv_file", ",", "uncerts_adv", ")", "\n", "\n", "", "X_test_adv_features_file", "=", "'{}{}_{}_dens_adv.npy'", ".", "format", "(", "kd_bu_results_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "X_test_adv_features_file", ")", ":", "\n", "                ", "X_test_adv_features", "=", "np", ".", "load", "(", "X_test_adv_features_file", ")", "\n", "", "else", ":", "\n", "                ", "X_test_adv_features", "=", "get_deep_representations", "(", "model", ",", "X_test_adv", ",", "batch_size", "=", "args", ".", "batch_size", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "np", ".", "save", "(", "X_test_adv_features_file", ",", "X_test_adv_features", ")", "\n", "\n", "# Get model predictions", "\n", "", "preds_test_adv", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "Y_test", ",", "verbose", "=", "0", ")", "\n", "preds_test_adv", "=", "preds_test_adv", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "preds_test_adv", "!=", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "preds_test_adv", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "\n", "# Get density estimates", "\n", "densities_adv", "=", "score_samples", "(", "kdes", ",", "X_test_adv_features", ",", "preds_test_adv", ")", "\n", "\n", "# Z-score the uncertainty and density values", "\n", "uncerts_adv_z", "=", "uncerts_scaler", ".", "transform", "(", "uncerts_adv", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "densities_adv_z", "=", "dense_scaler", ".", "transform", "(", "densities_adv", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "\n", "#Predict all", "\n", "values_pos", "=", "np", ".", "concatenate", "(", "(", "densities_adv_z", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_adv_z", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_normal", "=", "np", ".", "concatenate", "(", "(", "densities_normal_z", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_normal_z", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_noise", "=", "np", ".", "concatenate", "(", "(", "densities_noisy_z", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_noisy_z", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_neg", "=", "values_normal", "\n", "values", "=", "np", ".", "concatenate", "(", "(", "values_neg", ",", "values_pos", ")", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "values_normal", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "values_pos", ")", ")", ")", ")", "\n", "probs", "=", "lr", ".", "predict_proba", "(", "values", ")", "[", ":", ",", "1", "]", "\n", "y_label_pred", "=", "lr", ".", "predict", "(", "values", ")", "\n", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "labels", ",", "y_label_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "labels", ",", "probs", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#Predict Success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "                ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "values_success_pos", "=", "np", ".", "concatenate", "(", "(", "densities_adv_z", "[", "inds_success", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_adv_z", "[", "inds_success", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_success_normal", "=", "np", ".", "concatenate", "(", "(", "densities_normal_z", "[", "inds_success", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_normal_z", "[", "inds_success", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_success_noise", "=", "np", ".", "concatenate", "(", "(", "densities_noisy_z", "[", "inds_success", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_noisy_z", "[", "inds_success", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "# values_success_neg = np.concatenate((values_success_normal, values_success_noise))", "\n", "values_success_neg", "=", "values_success_normal", "\n", "values_success", "=", "np", ".", "concatenate", "(", "(", "values_success_neg", ",", "values_success_pos", ")", ")", "\n", "# labels_success = np.concatenate((np.zeros(len(inds_success)*2), np.ones(len(inds_success))))", "\n", "labels_success", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ")", ")", ")", "\n", "probs_success", "=", "lr", ".", "predict_proba", "(", "values_success", ")", "[", ":", ",", "1", "]", "\n", "y_label_pred_success", "=", "lr", ".", "predict", "(", "values_success", ")", "\n", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "labels_success", ",", "y_label_pred_success", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "labels_success", ",", "probs_success", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#Predict Fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "                ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "values_fail_pos", "=", "np", ".", "concatenate", "(", "(", "densities_adv_z", "[", "inds_fail", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_adv_z", "[", "inds_fail", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_fail_normal", "=", "np", ".", "concatenate", "(", "(", "densities_normal_z", "[", "inds_fail", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_normal_z", "[", "inds_fail", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_fail_noise", "=", "np", ".", "concatenate", "(", "(", "densities_noisy_z", "[", "inds_fail", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "uncerts_noisy_z", "[", "inds_fail", "]", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "# values_fail_neg = np.concatenate((values_fail_normal, values_fail_noise))", "\n", "values_fail_neg", "=", "values_fail_normal", "\n", "values_fail", "=", "np", ".", "concatenate", "(", "(", "values_fail_neg", ",", "values_fail_pos", ")", ")", "\n", "# labels_fail = np.concatenate((np.zeros(len(inds_fail)*2), np.ones(len(inds_fail))))", "\n", "labels_fail", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ")", ")", ")", "\n", "probs_fail", "=", "lr", ".", "predict_proba", "(", "values_fail", ")", "[", ":", ",", "1", "]", "\n", "y_label_pred_fail", "=", "lr", ".", "predict", "(", "values_fail", ")", "\n", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "labels_fail", ",", "y_label_pred_fail", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "labels_fail", ",", "probs_fail", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "print", "(", "'Gray-box attack {}- accuracy of pretrained model: {:7.2f}% \\\n            - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "import", "csv", "\n", "with", "open", "(", "'{}{}_gray_{}.csv'", ".", "format", "(", "kd_bu_results_gray_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                    ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_fs.get_distance": [[19, 43], ["model.predict", "np.array", "np.max", "fs.utils.squeeze.bit_depth_py", "vals_squeezed.append", "fs.utils.squeeze.median_filter_py", "vals_squeezed.append", "fs.utils.squeeze.bit_depth_py", "vals_squeezed.append", "fs.utils.squeeze.median_filter_py", "vals_squeezed.append", "fs.utils.squeeze.non_local_means_color_py", "vals_squeezed.append", "np.sum", "np.array.append", "model.predict", "model.predict", "model.predict", "model.predict", "model.predict", "np.abs", "tuple", "range", "len"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bit_depth_py", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.median_filter_py", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bit_depth_py", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.median_filter_py", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.non_local_means_color_py", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["def", "get_distance", "(", "model", ",", "dataset", ",", "X1", ")", ":", "\n", "    ", "X1_pred", "=", "model", ".", "predict", "(", "X1", ")", "\n", "vals_squeezed", "=", "[", "]", "\n", "\n", "if", "dataset", "==", "'mnist'", ":", "\n", "        ", "X1_seqeezed_bit", "=", "bit_depth_py", "(", "X1", ",", "1", ")", "\n", "vals_squeezed", ".", "append", "(", "model", ".", "predict", "(", "X1_seqeezed_bit", ")", ")", "\n", "X1_seqeezed_filter_median", "=", "median_filter_py", "(", "X1", ",", "2", ")", "\n", "vals_squeezed", ".", "append", "(", "model", ".", "predict", "(", "X1_seqeezed_filter_median", ")", ")", "\n", "", "else", ":", "\n", "        ", "X1_seqeezed_bit", "=", "bit_depth_py", "(", "X1", ",", "5", ")", "\n", "vals_squeezed", ".", "append", "(", "model", ".", "predict", "(", "X1_seqeezed_bit", ")", ")", "\n", "X1_seqeezed_filter_median", "=", "median_filter_py", "(", "X1", ",", "2", ")", "\n", "vals_squeezed", ".", "append", "(", "model", ".", "predict", "(", "X1_seqeezed_filter_median", ")", ")", "\n", "X1_seqeezed_filter_local", "=", "non_local_means_color_py", "(", "X1", ",", "13", ",", "3", ",", "2", ")", "\n", "vals_squeezed", ".", "append", "(", "model", ".", "predict", "(", "X1_seqeezed_filter_local", ")", ")", "\n", "\n", "", "dist_array", "=", "[", "]", "\n", "for", "val_squeezed", "in", "vals_squeezed", ":", "\n", "        ", "dist", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "X1_pred", "-", "val_squeezed", ")", ",", "axis", "=", "tuple", "(", "range", "(", "len", "(", "X1_pred", ".", "shape", ")", ")", "[", "1", ":", "]", ")", ")", "\n", "dist_array", ".", "append", "(", "dist", ")", "\n", "\n", "", "dist_array", "=", "np", ".", "array", "(", "dist_array", ")", "\n", "return", "np", ".", "max", "(", "dist_array", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_fs.train_fs": [[44, 51], ["detect_fs.get_distance", "int", "print", "np.ceil", "sorted", "len"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_fs.get_distance", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "train_fs", "(", "model", ",", "dataset", ",", "X1", ",", "train_fpr", ")", ":", "\n", "    ", "distances", "=", "get_distance", "(", "model", ",", "dataset", ",", "X1", ")", "\n", "selected_distance_idx", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "X1", ")", "*", "(", "1", "-", "train_fpr", ")", ")", ")", "\n", "threshold", "=", "sorted", "(", "distances", ")", "[", "selected_distance_idx", "-", "1", "]", "\n", "threshold", "=", "threshold", "\n", "print", "(", "\"Threshold value: %f\"", "%", "threshold", ")", "\n", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_fs.test": [[52, 56], ["detect_fs.get_distance"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_fs.get_distance"], ["", "def", "test", "(", "model", ",", "dataset", ",", "X", ",", "threshold", ")", ":", "\n", "    ", "distances", "=", "get_distance", "(", "model", ",", "dataset", ",", "X", ")", "\n", "Y_pred", "=", "distances", ">", "threshold", "\n", "return", "Y_pred", ",", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_fs.main": [[57, 345], ["os.path.isfile", "print", "print", "model.predict", "fs.datasets.datasets_utils.calculate_accuracy", "print", "random.sample", "list", "print", "detect_fs.train_fs", "print", "myModel", "optimizers.SGD", "model.compile", "np.where", "range", "int", "np.load", "fs.utils.squeeze.reduce_precision_py", "model.evaluate", "model.predict", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "detect_fs.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "print", "DATASETS.index", "myModel", "optimizers.SGD", "model.compile", "len", "set", "set", "len", "np.in1d", "np.where", "np.where", "len", "list", "list", "len", "results_all.append", "detect_fs.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "detect_fs.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "np.load", "fs.utils.squeeze.reduce_precision_py", "model.evaluate", "model.predict", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "detect_fs.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "myModel", "optimizers.SGD", "model.compile", "model.predict.argmax", "Y_test_all.argmax", "len", "range", "np.asarray", "np.zeros", "np.ones", "np.zeros", "np.ones", "np.zeros", "np.ones", "len", "list", "list", "len", "list", "list", "csv.DictWriter.writerow", "np.in1d", "np.where", "np.where", "len", "list", "list", "len", "results_all.append", "detect_fs.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "detect_fs.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "myModel", "optimizers.SGD", "model.compile", "len", "model.predict.argmax", "y_test.argmax", "model.predict.argmax", "y_test.argmax", "len", "len", "len", "len", "len", "len", "np.asarray", "np.zeros", "np.ones", "np.zeros", "np.ones", "np.zeros", "np.ones", "len", "list", "list", "len", "list", "list", "csv.DictWriter.writerow", "np.asarray", "model.predict.argmax", "y_test.argmax", "model.predict.argmax", "y_test.argmax", "len", "len", "len", "len", "len", "len", "np.asarray"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.calculate_accuracy", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_fs.train_fs", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.reduce_precision_py", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.reduce_precision_py", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "in", "DATASETS", ",", "\"Dataset parameter must be either 'mnist', 'cifar', 'svhn', or 'tiny'\"", "\n", "ATTACKS", "=", "ATTACK", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "\n", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "'{}cnn_{}.h5'", ".", "format", "(", "checkpoints_dir", ",", "args", ".", "dataset", ")", ")", ",", "'model file not found... must first train model using train_model.py.'", "\n", "\n", "print", "(", "'Loading the data and model...'", ")", "\n", "# Load the model", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.05", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "# Load the dataset", "\n", "", "X_train_all", ",", "Y_train_all", ",", "X_test_all", ",", "Y_test_all", "=", "model_class", ".", "x_train", ",", "model_class", ".", "y_train", ",", "model_class", ".", "x_test", ",", "model_class", ".", "y_test", "\n", "\n", "#--------------", "\n", "# Evaluate the trained model.", "\n", "# Refine the normal and adversarial sets to only include samples for", "\n", "# which the original version was correctly classified by the model", "\n", "print", "(", "\"Evaluating the pre-trained model...\"", ")", "\n", "Y_pred_all", "=", "model", ".", "predict", "(", "X_test_all", ")", "\n", "accuracy_all", "=", "calculate_accuracy", "(", "Y_pred_all", ",", "Y_test_all", ")", "\n", "print", "(", "'Test accuracy on raw legitimate examples %.4f'", "%", "(", "accuracy_all", ")", ")", "\n", "inds_correct", "=", "np", ".", "where", "(", "Y_pred_all", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test_all", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "X_test", "=", "X_test_all", "[", "inds_correct", "]", "\n", "Y_test", "=", "Y_test_all", "[", "inds_correct", "]", "\n", "Y_pred", "=", "Y_pred_all", "[", "inds_correct", "]", "\n", "indx_train", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "X_test", ")", ")", ",", "int", "(", "len", "(", "X_test", ")", "/", "2", ")", ")", "\n", "indx_test", "=", "list", "(", "set", "(", "range", "(", "0", ",", "len", "(", "X_test", ")", ")", ")", "-", "set", "(", "indx_train", ")", ")", "\n", "print", "(", "\"Number of correctly predict images: %s\"", "%", "(", "len", "(", "inds_correct", ")", ")", ")", "\n", "x_train", "=", "X_test", "[", "indx_train", "]", "\n", "y_train", "=", "Y_test", "[", "indx_train", "]", "\n", "x_test", "=", "X_test", "[", "indx_test", "]", "\n", "y_test", "=", "Y_test", "[", "indx_test", "]", "\n", "#compute thresold - use test data to compute that", "\n", "threshold", "=", "train_fs", "(", "model", ",", "args", ".", "dataset", ",", "x_train", ",", "0.05", ")", "\n", "\n", "Y_test_copy", "=", "Y_test", "\n", "X_test_copy", "=", "X_test", "\n", "y_test_copy", "=", "y_test", "\n", "x_test_copy", "=", "x_test", "\n", "## Evaluate detector", "\n", "#on adversarial attack", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "        ", "Y_test", "=", "Y_test_copy", "\n", "X_test", "=", "X_test_copy", "\n", "y_test", "=", "y_test_copy", "\n", "x_test", "=", "x_test_copy", "\n", "results_all", "=", "[", "]", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "X_test_adv", "=", "reduce_precision_py", "(", "X_test_adv", ",", "256", ")", "\n", "\n", "if", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "            ", "Y_test", "=", "model_class", ".", "y_test", "[", "0", ":", "2700", "]", "\n", "X_test", "=", "model_class", ".", "x_test", "[", "0", ":", "2700", "]", "\n", "cwi_inds", "=", "inds_correct", "[", "inds_correct", "<", "2700", "]", "\n", "Y_test", "=", "Y_test", "[", "cwi_inds", "]", "\n", "X_test", "=", "X_test", "[", "cwi_inds", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "cwi_inds", "]", "\n", "xtest_inds", "=", "np", ".", "asarray", "(", "indx_test", ")", "[", "np", ".", "asarray", "(", "indx_test", ")", "<", "2700", "]", "\n", "xtest_inds", "=", "np", ".", "in1d", "(", "cwi_inds", ",", "xtest_inds", ")", "\n", "x_test", "=", "X_test", "[", "xtest_inds", "]", "\n", "y_test", "=", "Y_test", "[", "xtest_inds", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "xtest_inds", "]", "\n", "", "else", ":", "\n", "            ", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "indx_test", "]", "\n", "\n", "", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "y_test", ",", "verbose", "=", "0", ")", "\n", "X_test_adv_pred", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "==", "y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "# inds_all_not_fail = list(set(range(0, len(inds_correct)))-set(inds_fail))", "\n", "X_test_adv_success", "=", "X_test_adv", "[", "inds_success", "]", "\n", "Y_test_success", "=", "y_test", "[", "inds_success", "]", "\n", "X_test_adv_fail", "=", "X_test_adv", "[", "inds_fail", "]", "\n", "Y_test_fail", "=", "y_test", "[", "inds_fail", "]", "\n", "\n", "# prepare X and Y for detectors", "\n", "X_all", "=", "np", ".", "concatenate", "(", "[", "x_test", ",", "X_test_adv", "]", ")", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "x_test", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "x_test", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_success", "=", "np", ".", "concatenate", "(", "[", "x_test", "[", "inds_success", "]", ",", "X_test_adv_success", "]", ")", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_fail", "=", "np", ".", "concatenate", "(", "[", "x_test", "[", "inds_fail", "]", ",", "X_test_adv_fail", "]", ")", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "\n", "#for Y_all", "\n", "# if attack == ATTACKS[0]:", "\n", "Y_all_pred", ",", "Y_all_pred_score", "=", "test", "(", "model", ",", "args", ".", "dataset", ",", "X_all", ",", "threshold", ")", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "Y_all_pred_score", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "\n", "#for Y_success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "            ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "Y_success_pred", ",", "Y_success_pred_score", "=", "test", "(", "model", ",", "args", ".", "dataset", ",", "X_success", ",", "threshold", ")", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "Y_success_pred_score", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "            ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "Y_fail_pred", ",", "Y_fail_pred_score", "=", "test", "(", "model", ",", "args", ".", "dataset", ",", "X_fail", ",", "threshold", ")", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "Y_fail_pred_score", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_{}.csv'", ".", "format", "(", "fs_results_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "            ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'{:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n            - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n", "#Gray box attacks", "\n", "## Evaluate detector", "\n", "#on adversarial attack", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "        ", "if", "not", "(", "attack", "==", "'hop'", "or", "attack", "==", "'sa'", "or", "attack", "==", "'sta'", "or", "(", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ")", ")", ":", "\n", "            ", "Y_test", "=", "Y_test_copy", "\n", "X_test", "=", "X_test_copy", "\n", "y_test", "=", "y_test_copy", "\n", "x_test", "=", "x_test_copy", "\n", "results_all", "=", "[", "]", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "X_test_adv", "=", "reduce_precision_py", "(", "X_test_adv", ",", "256", ")", "\n", "\n", "if", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "                ", "Y_test", "=", "model_class", ".", "y_test", "[", "0", ":", "2700", "]", "\n", "X_test", "=", "model_class", ".", "x_test", "[", "0", ":", "2700", "]", "\n", "cwi_inds", "=", "inds_correct", "[", "inds_correct", "<", "2700", "]", "\n", "Y_test", "=", "Y_test", "[", "cwi_inds", "]", "\n", "X_test", "=", "X_test", "[", "cwi_inds", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "cwi_inds", "]", "\n", "xtest_inds", "=", "np", ".", "asarray", "(", "indx_test", ")", "[", "np", ".", "asarray", "(", "indx_test", ")", "<", "2700", "]", "\n", "xtest_inds", "=", "np", ".", "in1d", "(", "cwi_inds", ",", "xtest_inds", ")", "\n", "x_test", "=", "X_test", "[", "xtest_inds", "]", "\n", "y_test", "=", "Y_test", "[", "xtest_inds", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "xtest_inds", "]", "\n", "", "else", ":", "\n", "                ", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "indx_test", "]", "\n", "\n", "", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "y_test", ",", "verbose", "=", "0", ")", "\n", "X_test_adv_pred", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "==", "y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "# inds_all_not_fail = list(set(range(0, len(inds_correct)))-set(inds_fail))", "\n", "X_test_adv_success", "=", "X_test_adv", "[", "inds_success", "]", "\n", "Y_test_success", "=", "y_test", "[", "inds_success", "]", "\n", "X_test_adv_fail", "=", "X_test_adv", "[", "inds_fail", "]", "\n", "Y_test_fail", "=", "y_test", "[", "inds_fail", "]", "\n", "\n", "# prepare X and Y for detectors", "\n", "X_all", "=", "np", ".", "concatenate", "(", "[", "x_test", ",", "X_test_adv", "]", ")", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "x_test", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "x_test", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_success", "=", "np", ".", "concatenate", "(", "[", "x_test", "[", "inds_success", "]", ",", "X_test_adv_success", "]", ")", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_fail", "=", "np", ".", "concatenate", "(", "[", "x_test", "[", "inds_fail", "]", ",", "X_test_adv_fail", "]", ")", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "\n", "#for Y_all", "\n", "# if attack == ATTACKS[0]:", "\n", "Y_all_pred", ",", "Y_all_pred_score", "=", "test", "(", "model", ",", "args", ".", "dataset", ",", "X_all", ",", "threshold", ")", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "Y_all_pred_score", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "\n", "#for Y_success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "                ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "Y_success_pred", ",", "Y_success_pred_score", "=", "test", "(", "model", ",", "args", ".", "dataset", ",", "X_success", ",", "threshold", ")", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "Y_success_pred_score", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "                ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "Y_fail_pred", ",", "Y_fail_pred_score", "=", "test", "(", "model", ",", "args", ".", "dataset", ",", "X_fail", ",", "threshold", ")", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "Y_fail_pred_score", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_gray_{}.csv'", ".", "format", "(", "fs_results_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                    ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'Gray {:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n                - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_lid.get_lid": [[11, 34], ["print", "lid.util.get_lids_random_batch", "print", "print", "print", "np.concatenate", "common.util.merge_and_generate_labels"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.get_lids_random_batch", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.merge_and_generate_labels"], ["def", "get_lid", "(", "model", ",", "X_test", ",", "X_test_noisy", ",", "X_test_adv", ",", "k", "=", "10", ",", "batch_size", "=", "100", ",", "dataset", "=", "'mnist'", ")", ":", "\n", "    ", "\"\"\"\n    Get local intrinsic dimensionality\n    :param model: \n    :param X_train: \n    :param Y_train: \n    :param X_test: \n    :param X_test_noisy: \n    :param X_test_adv: \n    :return: artifacts: positive and negative examples with lid values, \n            labels: adversarial (label: 1) and normal/noisy (label: 0) examples\n    \"\"\"", "\n", "print", "(", "'Extract local intrinsic dimensionality: k = %s'", "%", "k", ")", "\n", "lids_normal", ",", "lids_noisy", ",", "lids_adv", "=", "get_lids_random_batch", "(", "model", ",", "X_test", ",", "X_test_noisy", ",", "X_test_adv", ",", "dataset", ",", "k", ",", "batch_size", ")", "\n", "print", "(", "\"lids_normal:\"", ",", "lids_normal", ".", "shape", ")", "\n", "print", "(", "\"lids_noisy:\"", ",", "lids_noisy", ".", "shape", ")", "\n", "print", "(", "\"lids_adv:\"", ",", "lids_adv", ".", "shape", ")", "\n", "\n", "lids_pos", "=", "lids_adv", "\n", "lids_neg", "=", "np", ".", "concatenate", "(", "(", "lids_normal", ",", "lids_noisy", ")", ")", "\n", "artifacts", ",", "labels", "=", "merge_and_generate_labels", "(", "lids_pos", ",", "lids_neg", ")", "\n", "\n", "return", "artifacts", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_lid.main": [[35, 473], ["os.path.isfile", "os.path.isfile", "print", "print", "np.load", "print", "print", "lid.util.get_noisy_samples", "model.predict", "print", "print", "print", "print", "sklearn.preprocessing.MinMaxScaler().fit", "MinMaxScaler().fit.transform", "print", "lid.util.block_split", "print", "print", "print", "lid.util.train_lr", "int", "np.concatenate", "np.concatenate", "model.predict", "model.evaluate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "lid.util.train_lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "print", "myModel", "optimizers.SGD", "model.compile", "np.where", "os.path.isfile", "os.path.isfile", "np.load", "np.load", "detect_lid.get_lid", "np.save", "np.save", "int", "np.where", "np.where", "lid.util.train_lr.predict_proba", "len", "list", "list", "len", "results_all.append", "lid.util.train_lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "lid.util.train_lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "print", "DATASETS.index", "myModel", "optimizers.SGD", "model.compile", "len", "sklearn.preprocessing.MinMaxScaler", "len", "np.zeros", "np.ones", "np.zeros", "np.ones", "lid.util.train_lr.predict_proba", "len", "list", "list", "lid.util.train_lr.predict_proba", "len", "list", "list", "csv.DictWriter.writerow", "np.load", "lid.util.get_noisy_samples", "MinMaxScaler().fit.transform", "model.predict", "model.evaluate", "preds_test_adv.argmax.argmax", "np.concatenate", "np.concatenate", "lid.util.train_lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "myModel", "optimizers.SGD", "model.compile", "model.predict.argmax", "Y_test.argmax", "len", "model.predict.argmax", "Y_test[].argmax", "model.predict.argmax", "Y_test[].argmax", "len", "len", "len", "len", "os.path.isfile", "os.path.isfile", "np.load", "np.load", "detect_lid.get_lid", "np.save", "np.save", "np.where", "np.where", "lid.util.train_lr.predict_proba", "len", "list", "list", "len", "results_all.append", "np.concatenate", "np.concatenate", "lid.util.train_lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "np.concatenate", "np.concatenate", "lid.util.train_lr.predict", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "myModel", "optimizers.SGD", "model.compile", "DATASETS.index", "len", "len", "np.zeros", "np.ones", "lid.util.train_lr.predict_proba", "len", "list", "list", "lid.util.train_lr.predict_proba", "len", "list", "list", "csv.DictWriter.writerow", "Y_test.argmax", "Y_test.argmax", "len", "len", "len", "np.zeros", "np.ones", "np.zeros", "np.ones", "DATASETS.index", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_noisy_samples", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.block_split", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.train_lr", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_lid.get_lid", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_noisy_samples", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_lid.get_lid", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "in", "DATASETS", ",", "\"Dataset parameter must be either {}\"", ".", "format", "(", "DATASETS", ")", "\n", "ATTACKS", "=", "ATTACK", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "\n", "assert", "args", ".", "attack", "in", "ATTACKS", ",", "\"Train attack must be either {}\"", ".", "format", "(", "ATTACKS", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "'{}cnn_{}.h5'", ".", "format", "(", "checkpoints_dir", ",", "args", ".", "dataset", ")", ")", ",", "'model file not found... must first train model'", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", ")", ",", "'adversarial sample file not found... must first craft adversarial samples'", "\n", "\n", "#------generate characteristics", "\n", "print", "(", "'Loading the data and model...'", ")", "\n", "# Load the model", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.05", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "# Load the dataset", "\n", "", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "=", "model_class", ".", "x_train", ",", "model_class", ".", "y_train", ",", "model_class", ".", "x_test", ",", "model_class", ".", "y_test", "\n", "\n", "if", "args", ".", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "X_test", "=", "X_test", "[", "0", ":", "2700", "]", "\n", "Y_test", "=", "Y_test", "[", "0", ":", "2700", "]", "\n", "\n", "# Check attack type, select adversarial and noisy samples accordingly", "\n", "", "print", "(", "'Loading noisy and adversarial samples...'", ")", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", ")", "\n", "print", "(", "\"X_test_adv: \"", ",", "X_test_adv", ".", "shape", ")", "\n", "\n", "# as there are some parameters to tune for noisy example, so put the generation", "\n", "# step here instead of the adversarial step which can take many hours", "\n", "print", "(", "'Crafting %s noisy samples. '", "%", "args", ".", "dataset", ")", "\n", "X_test_noisy", "=", "get_noisy_samples", "(", "X_test", ",", "X_test_adv", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", "\n", "\n", "# Refine the normal, noisy and adversarial sets to only include samples for", "\n", "# which the original version was correctly classified by the model", "\n", "preds_test", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "inds_correct", "=", "np", ".", "where", "(", "preds_test", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "print", "(", "\"Number of correctly predict images: %s\"", "%", "(", "len", "(", "inds_correct", ")", ")", ")", "\n", "\n", "X_test", "=", "X_test", "[", "inds_correct", "]", "\n", "X_test_noisy", "=", "X_test_noisy", "[", "inds_correct", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "Y_test", "=", "Y_test", "[", "inds_correct", "]", "\n", "print", "(", "\"X_test: \"", ",", "X_test", ".", "shape", ")", "\n", "print", "(", "\"X_test_noisy: \"", ",", "X_test_noisy", ".", "shape", ")", "\n", "print", "(", "\"X_test_adv: \"", ",", "X_test_adv", ".", "shape", ")", "\n", "\n", "# extract local intrinsic dimensionality --- load if it existed", "\n", "lid_file_X", "=", "'{}{}_{}_lid_X.npy'", ".", "format", "(", "lid_results_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", "\n", "lid_file_Y", "=", "'{}{}_{}_lid_Y.npy'", ".", "format", "(", "lid_results_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "lid_file_X", ")", "&", "os", ".", "path", ".", "isfile", "(", "lid_file_Y", ")", ":", "\n", "        ", "X", "=", "np", ".", "load", "(", "lid_file_X", ")", "\n", "Y", "=", "np", ".", "load", "(", "lid_file_Y", ")", "\n", "", "else", ":", "\n", "        ", "X", ",", "Y", "=", "get_lid", "(", "model", ",", "X_test", ",", "X_test_noisy", ",", "X_test_adv", ",", "k_nn", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", ",", "args", ".", "batch_size", ",", "args", ".", "dataset", ")", "\n", "np", ".", "save", "(", "lid_file_X", ",", "X", ")", "\n", "np", ".", "save", "(", "lid_file_Y", ",", "Y", ")", "\n", "\n", "", "scaler", "=", "MinMaxScaler", "(", ")", ".", "fit", "(", "X", ")", "\n", "X", "=", "scaler", ".", "transform", "(", "X", ")", "# standarization", "\n", "\n", "print", "(", "\"LID: [characteristic shape: \"", ",", "X", ".", "shape", ",", "\", label shape: \"", ",", "Y", ".", "shape", ")", "\n", "# test attack is the same as training attack", "\n", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "=", "block_split", "(", "X", ",", "Y", ")", "\n", "print", "(", "\"Train data size: \"", ",", "x_train", ".", "shape", ")", "\n", "print", "(", "\"Test data size: \"", ",", "x_test", ".", "shape", ")", "\n", "\n", "## Build detector", "\n", "print", "(", "\"LR Detector on [dataset: %s, train_attack: %s, test_attack: %s] with:\"", "%", "(", "args", ".", "dataset", ",", "args", ".", "attack", ",", "args", ".", "test_attack", ")", ")", "\n", "lr", "=", "train_lr", "(", "x_train", ",", "y_train", ")", "\n", "\n", "\n", "#Split", "\n", "n_samples", "=", "int", "(", "len", "(", "x_test", ")", "/", "3", ")", "\n", "x_normal", "=", "x_test", "[", ":", "n_samples", "]", "\n", "x_noise", "=", "x_test", "[", "n_samples", ":", "n_samples", "*", "2", "]", "\n", "x_adv", "=", "x_test", "[", "n_samples", "*", "2", ":", "]", "\n", "x_test", "=", "np", ".", "concatenate", "(", "[", "x_normal", ",", "x_adv", "]", ")", "\n", "y_normal", "=", "y_test", "[", ":", "n_samples", "]", "\n", "y_noise", "=", "y_test", "[", "n_samples", ":", "n_samples", "*", "2", "]", "\n", "y_adv", "=", "y_test", "[", "n_samples", "*", "2", ":", "]", "\n", "y_test", "=", "np", ".", "concatenate", "(", "[", "y_normal", ",", "y_adv", "]", ")", "\n", "ind_adv_start", "=", "int", "(", "len", "(", "X_test_adv", ")", "*", "0.007", ")", "*", "100", "\n", "pred_adv", "=", "model", ".", "predict", "(", "X_test_adv", "[", "ind_adv_start", ":", "]", ")", "\n", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", "[", "ind_adv_start", ":", "]", ",", "Y_test", "[", "ind_adv_start", ":", "]", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "Y_test", "[", "ind_adv_start", ":", "]", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", "[", "ind_adv_start", ":", "]", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "X_success", "=", "np", ".", "concatenate", "(", "[", "x_normal", "[", "inds_success", "]", ",", "x_adv", "[", "inds_success", "]", "]", ")", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_fail", "=", "np", ".", "concatenate", "(", "[", "x_normal", "[", "inds_fail", "]", ",", "x_adv", "[", "inds_fail", "]", "]", ")", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "# X_success = np.concatenate([x_noise[inds_success], x_normal[inds_success], x_adv[inds_success]])", "\n", "# Y_success = np.concatenate([np.zeros(2*len(inds_success), dtype=bool), np.ones(len(inds_success), dtype=bool)])", "\n", "# X_fail = np.concatenate([x_noise[inds_fail], x_normal[inds_fail], x_adv[inds_fail]])", "\n", "# Y_fail = np.concatenate([np.zeros(2*len(inds_fail), dtype=bool), np.ones(len(inds_fail), dtype=bool)])", "\n", "\n", "## Evaluate detector on adversarial attack", "\n", "y_pred", "=", "lr", ".", "predict_proba", "(", "x_test", ")", "[", ":", ",", "1", "]", "\n", "y_label_pred", "=", "lr", ".", "predict", "(", "x_test", ")", "\n", "\n", "results_all", "=", "[", "]", "\n", "#for Y_all", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "y_test", "[", ":", "]", "[", ":", ",", "0", "]", ",", "y_label_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "y_test", "[", ":", "]", "[", ":", ",", "0", "]", ",", "y_pred", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "        ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "        ", "Y_success_pred_score", "=", "lr", ".", "predict_proba", "(", "X_success", ")", "[", ":", ",", "1", "]", "\n", "Y_success_pred", "=", "lr", ".", "predict", "(", "X_success", ")", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "Y_success_pred_score", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "        ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "        ", "Y_fail_pred_score", "=", "lr", ".", "predict_proba", "(", "X_fail", ")", "[", ":", ",", "1", "]", "\n", "Y_fail_pred", "=", "lr", ".", "predict", "(", "X_fail", ")", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "Y_fail_pred_score", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "print", "(", "'{:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n        - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "args", ".", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "import", "csv", "\n", "with", "open", "(", "'{}{}_{}.csv'", ".", "format", "(", "lid_results_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "        ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'Done!'", ")", "\n", "# import csv", "\n", "# csv.field_size_limit(sys.maxsize)", "\n", "# with open('{}{}_{}.csv'.format(lid_results_dir, args.dataset, args.attack), \"r\") as f:", "\n", "#     reader = csv.DictReader(f)", "\n", "#     a = list(reader)", "\n", "\n", "# #use current detector to predict other attacks", "\n", "# Y_test_copy=Y_test", "\n", "# for attack in ATTACKS:", "\n", "#     Y_test=Y_test_copy", "\n", "#     if attack=='df'  and args.dataset=='tiny':", "\n", "#         Y_test=model_class.y_test[0:2700]", "\n", "#     results_all = []", "\n", "#     #Prepare data", "\n", "#     # Load adversarial samples", "\n", "#     adv_path = '{}{}_{}.npy'.format(adv_data_dir, args.dataset, attack)", "\n", "#     X_test_adv = np.load(adv_path)", "\n", "\n", "#     if attack=='df' and args.dataset=='tiny':", "\n", "#         cwi_inds = inds_correct[inds_correct<2700]", "\n", "#         Y_test = Y_test[cwi_inds]", "\n", "#         X_test_adv = X_test_adv[cwi_inds]", "\n", "#         X_test_noisy = get_noisy_samples(X_test[0:2700][cwi_inds], X_test_adv, args.dataset, attack)", "\n", "#     else:", "\n", "#         X_test_adv = X_test_adv[inds_correct]", "\n", "#         X_test_noisy = get_noisy_samples(X_test, X_test_adv, args.dataset, attack)", "\n", "\n", "#     if attack=='df' and args.dataset=='tiny':", "\n", "#         # extract local intrinsic dimensionality --- load if it existed", "\n", "#         lid_file_X = '{}{}_{}_lid_X.npy'.format(lid_results_dir, args.dataset, attack)", "\n", "#         lid_file_Y = '{}{}_{}_lid_Y.npy'.format(lid_results_dir, args.dataset, attack)", "\n", "#         if os.path.isfile(lid_file_X) & os.path.isfile(lid_file_Y):", "\n", "#             X_adv = np.load(lid_file_X)", "\n", "#             Y_adv = np.load(lid_file_Y)", "\n", "#         else:", "\n", "#             X_adv, Y_adv = get_lid(model, X_test[0:2700][cwi_inds], X_test_noisy, X_test_adv, k_nn[DATASETS.index(args.dataset)], args.batch_size, args.dataset)", "\n", "#             np.save(lid_file_X, X_adv)", "\n", "#             np.save(lid_file_Y, Y_adv)", "\n", "#         X_adv = scaler.transform(X_adv)", "\n", "#     else:", "\n", "#         # extract local intrinsic dimensionality --- load if it existed", "\n", "#         lid_file_X = '{}{}_{}_lid_X.npy'.format(lid_results_dir, args.dataset, attack)", "\n", "#         lid_file_Y = '{}{}_{}_lid_Y.npy'.format(lid_results_dir, args.dataset, attack)", "\n", "#         if os.path.isfile(lid_file_X) & os.path.isfile(lid_file_Y):", "\n", "#             X_adv = np.load(lid_file_X)", "\n", "#             Y_adv = np.load(lid_file_Y)", "\n", "#         else:", "\n", "#             X_adv, Y_adv = get_lid(model, X_test, X_test_noisy, X_test_adv, k_nn[DATASETS.index(args.dataset)], args.batch_size, args.dataset)", "\n", "#             np.save(lid_file_X, X_adv)", "\n", "#             np.save(lid_file_Y, Y_adv)", "\n", "#         X_adv = scaler.transform(X_adv)", "\n", "\n", "#     # Get model predictions", "\n", "#     preds_test_adv = model.predict(X_test_adv)", "\n", "#     _, acc_suc = model.evaluate(X_test_adv, Y_test, verbose=0)", "\n", "#     preds_test_adv = preds_test_adv.argmax(axis=1)", "\n", "#     inds_success = np.where(preds_test_adv != Y_test.argmax(axis=1))[0]", "\n", "#     inds_fail = np.where(preds_test_adv == Y_test.argmax(axis=1))[0]", "\n", "\n", "#     #Predict all", "\n", "#     values_pos = X_adv[:len(inds_correct)]", "\n", "#     values_normal = X[len(inds_correct):len(inds_correct)*2]", "\n", "#     values_neg = values_normal", "\n", "#     values = np.concatenate((values_neg, values_pos))", "\n", "#     labels = np.concatenate((np.zeros(len(values_normal)), np.ones(len(values_pos))))", "\n", "#     probs = lr.predict_proba(values)[:, 1]", "\n", "#     y_label_pred = lr.predict(values)", "\n", "\n", "#     acc_all, tpr_all, fpr_all, tp_all, ap_all, fb_all, an_all= evalulate_detection_test(labels, y_label_pred)", "\n", "#     fprs_all, tprs_all, thresholds_all = roc_curve(labels, probs)", "\n", "#     roc_auc_all = auc(fprs_all, tprs_all)", "\n", "#     print(\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\".format(100*roc_auc_all, 100*acc_all, 100*fpr_all))", "\n", "\n", "#     curr_result = {'type':'all', 'nsamples': len(inds_correct),\t'acc_suc': acc_suc,\t\\", "\n", "#                     'acc': acc_all, 'tpr': tpr_all, 'fpr': fpr_all, 'tp': tp_all, 'ap': ap_all, 'fb': fb_all, 'an': an_all,\t\\", "\n", "#                     'tprs': list(fprs_all), 'fprs': list(tprs_all),\t'auc': roc_auc_all}", "\n", "#     results_all.append(curr_result)", "\n", "\n", "#     #Predict Success", "\n", "#     if len(inds_success)==0:", "\n", "#         tpr_success=np.nan", "\n", "#         curr_result = {'type':'success', 'nsamples': 0,\t'acc_suc': 0,\t\\", "\n", "#                 'acc': np.nan, 'tpr': np.nan, 'fpr': np.nan, 'tp': np.nan, 'ap': np.nan, 'fb': np.nan, 'an': np.nan,\t\\", "\n", "#                 'tprs': np.nan, 'fprs': np.nan,\t'auc': np.nan}", "\n", "#         results_all.append(curr_result)", "\n", "#     else:", "\n", "#         values_success_pos = X_adv[:len(inds_correct)][inds_success]", "\n", "#         values_success_normal = X[len(inds_correct):len(inds_correct)*2][inds_success]", "\n", "#         values_success_neg = values_success_normal", "\n", "#         values_success = np.concatenate((values_success_neg, values_success_pos))", "\n", "#         labels_success = np.concatenate((np.zeros(len(inds_success)), np.ones(len(inds_success))))", "\n", "#         probs_success = lr.predict_proba(values_success)[:, 1]", "\n", "#         y_label_pred_success = lr.predict(values_success)", "\n", "\n", "#         accuracy_success, tpr_success, fpr_success, tp_success, ap_success, fb_success, an_success = evalulate_detection_test(labels_success, y_label_pred_success)", "\n", "#         fprs_success, tprs_success, thresholds_success = roc_curve(labels_success, probs_success)", "\n", "#         roc_auc_success = auc(fprs_success, tprs_success)", "\n", "\n", "#         curr_result = {'type':'success', 'nsamples': len(inds_success),\t'acc_suc': 0,\t\\", "\n", "#                 'acc': accuracy_success, 'tpr': tpr_success, 'fpr': fpr_success, 'tp': tp_success, 'ap': ap_success, 'fb': fb_success, 'an': an_success,\t\\", "\n", "#                 'tprs': list(fprs_success), 'fprs': list(tprs_success),\t'auc': roc_auc_success}", "\n", "#         results_all.append(curr_result)", "\n", "\n", "#     #Predict Fail", "\n", "#     if len(inds_fail)==0:", "\n", "#         tpr_fail=np.nan", "\n", "#         curr_result = {'type':'fail', 'nsamples': 0,\t'acc_suc': 0,\t\\", "\n", "#                 'acc': np.nan, 'tpr': np.nan, 'fpr': np.nan, 'tp': np.nan, 'ap': np.nan, 'fb': np.nan, 'an': np.nan,\t\\", "\n", "#                 'tprs': np.nan, 'fprs': np.nan,\t'auc': np.nan}", "\n", "#         results_all.append(curr_result)", "\n", "#     else:", "\n", "#         values_fail_pos = X_adv[:len(inds_correct)][inds_fail]", "\n", "#         values_fail_normal = X[len(inds_correct):len(inds_correct)*2][inds_fail]", "\n", "#         values_fail_neg = values_fail_normal", "\n", "#         values_fail = np.concatenate((values_fail_neg, values_fail_pos))", "\n", "#         labels_fail = np.concatenate((np.zeros(len(inds_fail)), np.ones(len(inds_fail))))", "\n", "#         probs_fail = lr.predict_proba(values_fail)[:, 1]", "\n", "#         y_label_pred_fail = lr.predict(values_fail)", "\n", "\n", "#         accuracy_fail, tpr_fail, fpr_fail, tp_fail, ap_fail, fb_fail, an_fail = evalulate_detection_test(labels_fail, y_label_pred_fail)", "\n", "#         fprs_fail, tprs_fail, thresholds_fail = roc_curve(labels_fail, probs_fail)", "\n", "#         roc_auc_fail = auc(fprs_fail, tprs_fail)", "\n", "\n", "#         curr_result = {'type':'fail', 'nsamples': len(inds_fail),\t'acc_suc': 0,\t\\", "\n", "#                 'acc': accuracy_fail, 'tpr': tpr_fail, 'fpr': fpr_fail, 'tp': tp_fail, 'ap': ap_fail, 'fb': fb_fail, 'an': an_fail,\t\\", "\n", "#                 'tprs': list(fprs_fail), 'fprs': list(tprs_fail),\t'auc': roc_auc_fail}", "\n", "#         results_all.append(curr_result)", "\n", "\n", "#     print('trained on {} attack and tested on {}- accuracy of pretrained model: {:7.2f}% \\", "\n", "#     - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'.format(args.attack, attack, 100*acc_suc, 100*tpr_success, 100*tpr_fail))", "\n", "\n", "#     import csv", "\n", "#     with open('{}{}_train_{}_test_{}.csv'.format(lid_results_dir, args.dataset, args.attack, attack), 'w', newline='') as csvfile:", "\n", "#         writer = csv.DictWriter(csvfile, fieldnames=fieldnames)", "\n", "#         writer.writeheader()", "\n", "#         for row in results_all:", "\n", "#             writer.writerow(row)", "\n", "\n", "# print('Done!')", "\n", "\n", "#Gray box attacks", "\n", "if", "not", "(", "args", ".", "attack", "==", "'hop'", "or", "args", ".", "attack", "==", "'sa'", "or", "args", ".", "attack", "==", "'sta'", "or", "(", "args", ".", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ")", ")", ":", "\n", "        ", "for", "attack", "in", "[", "args", ".", "attack", "]", ":", "\n", "            ", "results_all", "=", "[", "]", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "adv_path", "=", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", "\n", "X_test_adv", "=", "np", ".", "load", "(", "adv_path", ")", "\n", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "X_test_noisy", "=", "get_noisy_samples", "(", "X_test", ",", "X_test_adv", ",", "args", ".", "dataset", ",", "attack", ")", "\n", "\n", "# extract local intrinsic dimensionality --- load if it existed", "\n", "lid_file_X", "=", "'{}{}_{}_lid_X.npy'", ".", "format", "(", "lid_results_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", "\n", "lid_file_Y", "=", "'{}{}_{}_lid_Y.npy'", ".", "format", "(", "lid_results_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "lid_file_X", ")", "&", "os", ".", "path", ".", "isfile", "(", "lid_file_Y", ")", ":", "\n", "                ", "X_adv", "=", "np", ".", "load", "(", "lid_file_X", ")", "\n", "Y_adv", "=", "np", ".", "load", "(", "lid_file_Y", ")", "\n", "", "else", ":", "\n", "                ", "X_adv", ",", "Y_adv", "=", "get_lid", "(", "model", ",", "X_test", ",", "X_test_noisy", ",", "X_test_adv", ",", "k_nn", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", ",", "args", ".", "batch_size", ",", "args", ".", "dataset", ")", "\n", "np", ".", "save", "(", "lid_file_X", ",", "X_adv", ")", "\n", "np", ".", "save", "(", "lid_file_Y", ",", "Y_adv", ")", "\n", "", "X_adv", "=", "scaler", ".", "transform", "(", "X_adv", ")", "\n", "\n", "# Get model predictions", "\n", "preds_test_adv", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "_", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "Y_test", ",", "verbose", "=", "0", ")", "\n", "preds_test_adv", "=", "preds_test_adv", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "preds_test_adv", "!=", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "preds_test_adv", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "\n", "#Predict all", "\n", "values_pos", "=", "X_adv", "[", ":", "len", "(", "inds_correct", ")", "]", "\n", "values_normal", "=", "X", "[", "len", "(", "inds_correct", ")", ":", "len", "(", "inds_correct", ")", "*", "2", "]", "\n", "values_neg", "=", "values_normal", "\n", "values", "=", "np", ".", "concatenate", "(", "(", "values_neg", ",", "values_pos", ")", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "values_normal", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "values_pos", ")", ")", ")", ")", "\n", "probs", "=", "lr", ".", "predict_proba", "(", "values", ")", "[", ":", ",", "1", "]", "\n", "y_label_pred", "=", "lr", ".", "predict", "(", "values", ")", "\n", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "labels", ",", "y_label_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "labels", ",", "probs", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#Predict Success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "                ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "values_success_pos", "=", "X_adv", "[", ":", "len", "(", "inds_correct", ")", "]", "[", "inds_success", "]", "\n", "values_success_normal", "=", "X", "[", "len", "(", "inds_correct", ")", ":", "len", "(", "inds_correct", ")", "*", "2", "]", "[", "inds_success", "]", "\n", "values_success_neg", "=", "values_success_normal", "\n", "values_success", "=", "np", ".", "concatenate", "(", "(", "values_success_neg", ",", "values_success_pos", ")", ")", "\n", "labels_success", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ")", ")", ")", "\n", "probs_success", "=", "lr", ".", "predict_proba", "(", "values_success", ")", "[", ":", ",", "1", "]", "\n", "y_label_pred_success", "=", "lr", ".", "predict", "(", "values_success", ")", "\n", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "labels_success", ",", "y_label_pred_success", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "labels_success", ",", "probs_success", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#Predict Fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "                ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "values_fail_pos", "=", "X_adv", "[", ":", "len", "(", "inds_correct", ")", "]", "[", "inds_fail", "]", "\n", "values_fail_normal", "=", "X", "[", "len", "(", "inds_correct", ")", ":", "len", "(", "inds_correct", ")", "*", "2", "]", "[", "inds_fail", "]", "\n", "values_fail_neg", "=", "values_fail_normal", "\n", "values_fail", "=", "np", ".", "concatenate", "(", "(", "values_fail_neg", ",", "values_fail_pos", ")", ")", "\n", "labels_fail", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ")", ")", ")", "\n", "probs_fail", "=", "lr", ".", "predict_proba", "(", "values_fail", ")", "[", ":", ",", "1", "]", "\n", "y_label_pred_fail", "=", "lr", ".", "predict", "(", "values_fail", ")", "\n", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "labels_fail", ",", "y_label_pred_fail", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "labels_fail", ",", "probs_fail", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "print", "(", "'Gray-box attack {}- accuracy of pretrained model: {:7.2f}% \\\n                - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "import", "csv", "\n", "with", "open", "(", "'{}{}_gray_{}.csv'", ".", "format", "(", "lid_results_gray_dir", ",", "args", ".", "dataset", ",", "args", ".", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                    ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nic.dense": [[11, 18], ["Sequential", "Sequential.add", "Sequential.add", "Sequential.compile", "Dense", "Activation"], "function", ["None"], ["def", "dense", "(", "input_shape", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Dense", "(", "10", ",", "input_shape", "=", "(", "input_shape", "[", "1", "]", ",", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "'adam'", ",", "loss", "=", "'categorical_crossentropy'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nic.process": [[19, 26], ["range", "len"], "function", ["None"], ["", "def", "process", "(", "Y", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "Y", ")", ")", ":", "\n", "        ", "if", "Y", "[", "i", "]", "==", "1", ":", "\n", "            ", "Y", "[", "i", "]", "=", "0", "\n", "", "elif", "Y", "[", "i", "]", "==", "-", "1", ":", "\n", "            ", "Y", "[", "i", "]", "=", "1", "\n", "", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nic.main": [[27, 538], ["os.path.isfile", "print", "len", "sklearn.decomposition.PCA", "range", "range", "range", "np.asarray", "model.predict", "print", "print", "print", "myModel", "optimizers.SGD", "model.compile", "os.path.isfile", "np.array", "range", "np.array", "range", "np.concatenate", "np.save", "np.load", "os.path.isfile", "random.sample", "np.save", "np.load", "list", "os.path.isfile", "sklearn.svm.OneClassSVM", "time.time", "pickle.load.fit", "pickle.load.predict", "pickle.load.decision_function", "pickle.dumps", "open", "open.write", "open.close", "np.save", "np.save", "time.time", "round", "print", "np.where", "np.array", "range", "np.array", "range", "np.concatenate", "np.load", "model.predict", "model.evaluate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "pickle.load", "pickle.load.predict", "detect_nic.process", "pickle.load.decision_function", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "DATASETS.index", "myModel", "optimizers.SGD", "model.compile", "os.path.isfile", "Model", "Model.predict", "l_out.reshape.reshape", "print", "os.path.isfile", "Model", "Model.predict", "l_out.reshape.reshape", "print", "np.load", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "range", "np.int", "len", "np.where", "np.where", "open", "len", "list", "list", "len", "results_all.append", "pickle.load.predict", "detect_nic.process", "pickle.load.decision_function", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "pickle.load.predict", "detect_nic.process", "pickle.load.decision_function", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "myModel", "optimizers.SGD", "model.compile", "sklearn.decomposition.PCA.fit_transform", "np.save", "np.save", "sklearn.decomposition.PCA.transform", "np.save", "np.save", "os.path.isfile", "Model", "Model.predict", "l_out.reshape.reshape", "print", "DATASETS.index", "np.load", "np.load", "np.min", "thundersvm.OneClassSVM", "time.time", "pickle.load.fit", "pickle.load.predict", "pickle.load.decision_function", "pickle.load.save_to_file", "np.save", "np.save", "time.time", "round", "print", "os.path.isfile", "os.path.isfile", "np.load", "np.load", "np.min", "np.min", "detect_nic.dense", "dense.predict", "detect_nic.dense", "dense.predict", "np.concatenate", "np.save", "sklearn.svm.OneClassSVM", "time.time", "pickle.load.fit", "pickle.load.predict", "pickle.load.decision_function", "pickle.dumps", "open", "open.write", "open.close", "np.save", "np.save", "time.time", "round", "print", "np.load", "np.load().reshape", "len", "set", "set", "model.predict.argmax", "Y_test.argmax", "os.path.isfile", "np.load", "np.concatenate", "os.path.isfile", "np.load", "np.concatenate", "np.zeros", "np.ones", "np.zeros", "np.ones", "np.zeros", "np.ones", "len", "list", "list", "len", "list", "list", "csv.DictWriter.writerow", "myModel", "optimizers.SGD", "model.compile", "model.get_input_at", "model.get_input_at", "sklearn.decomposition.PCA.transform", "np.save", "np.save", "os.path.isfile", "Model", "Model.predict", "l_out.reshape.reshape", "print", "np.concatenate", "np.concatenate", "len", "range", "os.path.isfile", "os.path.isfile", "np.load", "np.min", "thundersvm.OneClassSVM", "pickle.load.load_from_file", "pickle.load.decision_function", "np.save", "os.path.isfile", "np.load", "np.min", "np.load", "np.min", "detect_nic.dense", "dense.predict", "detect_nic.dense", "dense.predict", "np.concatenate", "pickle.load", "pickle.load.decision_function().reshape", "np.save", "model.predict.argmax", "Y_test.argmax", "model.predict.argmax", "Y_test.argmax", "len", "len", "len", "len", "len", "len", "model.get_layer", "model.get_layer", "model.get_input_at", "sklearn.decomposition.PCA.transform", "np.save", "np.save", "np.load", "len", "os.path.isfile", "os.path.isfile", "open", "model.get_layer", "model.get_input_at", "pickle.load.decision_function", "model.get_layer"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nic.process", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nic.process", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nic.process", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nic.dense", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nic.dense", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nic.dense", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_nic.dense", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "in", "DATASETS", ",", "\"Dataset parameter must be either {}\"", ".", "format", "(", "DATASETS", ")", "\n", "ATTACKS", "=", "ATTACK", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "'/home/aaldahdo/detectors/checkpoints/cnn_%s.h5'", "%", "args", ".", "dataset", ")", ",", "'model file not found... must first train model using train_model.py.'", "\n", "\n", "print", "(", "'Loading the data and model...'", ")", "\n", "# Load the model", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.05", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "start_indx", "=", "1", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "start_indx", "=", "1", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "start_indx", "=", "1", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "start_indx", "=", "675", "\n", "\n", "# Load the dataset", "\n", "", "X_train", ",", "_", ",", "X_test", ",", "Y_test", "=", "model_class", ".", "x_train", ",", "model_class", ".", "y_train", ",", "model_class", ".", "x_test", ",", "model_class", ".", "y_test", "\n", "\n", "#-----------------------------------------------#", "\n", "#         Generate layers data Normal           #", "\n", "#       Load it if it is already generated      #", "\n", "#-----------------------------------------------# ", "\n", "n_layers", "=", "len", "(", "model", ".", "layers", ")", "\n", "projector", "=", "PCA", "(", "n_components", "=", "5000", ")", "\n", "#for train", "\n", "for", "l_indx", "in", "range", "(", "start_indx", ",", "n_layers", ")", ":", "\n", "        ", "layer_data_path", "=", "'{}{}_{}_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "layer_data_path", ")", ":", "\n", "            ", "curr_model", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "index", "=", "l_indx", ")", ".", "output", ")", "\n", "l_out", "=", "curr_model", ".", "predict", "(", "X_train", ")", "\n", "l_out", "=", "l_out", ".", "reshape", "(", "(", "X_train", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "if", "l_out", ".", "shape", "[", "1", "]", ">", "5000", ":", "\n", "                ", "reduced_activations", "=", "projector", ".", "fit_transform", "(", "l_out", ")", "\n", "np", ".", "save", "(", "layer_data_path", ",", "reduced_activations", ")", "\n", "", "else", ":", "\n", "                ", "np", ".", "save", "(", "layer_data_path", ",", "l_out", ")", "\n", "", "print", "(", "layer_data_path", ")", "\n", "\n", "#for test", "\n", "# for l_indx in range(start_indx, n_layers):", "\n", "", "layer_data_path", "=", "'{}{}_{}_test.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "if", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "            ", "X_test", "=", "X_test", "[", ":", "10000", "]", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "layer_data_path", ")", ":", "\n", "            ", "curr_model", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "index", "=", "l_indx", ")", ".", "output", ")", "\n", "l_out", "=", "curr_model", ".", "predict", "(", "X_test", ")", "\n", "l_out", "=", "l_out", ".", "reshape", "(", "(", "X_test", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "if", "l_out", ".", "shape", "[", "1", "]", ">", "5000", ":", "\n", "# projector = PCA(n_components=5000)", "\n", "                ", "reduced_activations", "=", "projector", ".", "transform", "(", "l_out", ")", "\n", "np", ".", "save", "(", "layer_data_path", ",", "reduced_activations", ")", "\n", "", "else", ":", "\n", "                ", "np", ".", "save", "(", "layer_data_path", ",", "l_out", ")", "\n", "", "print", "(", "layer_data_path", ")", "\n", "\n", "#-----------------------------------------------#", "\n", "#        Generate layers data Adv attack        #", "\n", "#       Load it if it is already generated      #", "\n", "#-----------------------------------------------# ", "\n", "", "for", "attack", "in", "ATTACKS", ":", "\n", "            ", "X_adv", "=", "np", ".", "load", "(", "'%s%s_%s.npy'", "%", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "if", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "                ", "X_adv", "=", "X_adv", "[", ":", "10000", "]", "\n", "# for l_indx in range(start_indx, n_layers):", "\n", "", "layer_data_path", "=", "'{}{}_{}_{}.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ",", "attack", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "layer_data_path", ")", ":", "\n", "                ", "curr_model", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "index", "=", "l_indx", ")", ".", "output", ")", "\n", "l_out", "=", "curr_model", ".", "predict", "(", "X_adv", ")", "\n", "l_out", "=", "l_out", ".", "reshape", "(", "(", "X_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "if", "l_out", ".", "shape", "[", "1", "]", ">", "5000", ":", "\n", "# projector = PCA(n_components=5000)", "\n", "                    ", "reduced_activations", "=", "projector", ".", "transform", "(", "l_out", ")", "\n", "np", ".", "save", "(", "layer_data_path", ",", "reduced_activations", ")", "\n", "", "else", ":", "\n", "                    ", "np", ".", "save", "(", "layer_data_path", ",", "l_out", ")", "\n", "", "print", "(", "layer_data_path", ")", "\n", "\n", "#-----------------------------------------------#", "\n", "#        Generate layers data gray attack       #", "\n", "#       Load it if it is already generated      #", "\n", "#-----------------------------------------------# ", "\n", "", "", "for", "attack", "in", "ATTACK_GRAY", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", ":", "\n", "            ", "if", "not", "(", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ")", ":", "\n", "                ", "X_adv", "=", "np", ".", "load", "(", "'%s%s_%s.npy'", "%", "(", "adv_data_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "if", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "                    ", "X_adv", "=", "X_adv", "[", ":", "10000", "]", "\n", "# for l_indx in range(start_indx, n_layers):", "\n", "", "layer_data_path", "=", "'{}{}_{}_{}.npy'", ".", "format", "(", "nic_layers_gray_dir", ",", "args", ".", "dataset", ",", "l_indx", ",", "attack", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "layer_data_path", ")", ":", "\n", "                    ", "curr_model", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "index", "=", "l_indx", ")", ".", "output", ")", "\n", "l_out", "=", "curr_model", ".", "predict", "(", "X_adv", ")", "\n", "l_out", "=", "l_out", ".", "reshape", "(", "(", "X_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "if", "l_out", ".", "shape", "[", "1", "]", ">", "5000", ":", "\n", "# projector = PCA(n_components=5000)", "\n", "                        ", "reduced_activations", "=", "projector", ".", "transform", "(", "l_out", ")", "\n", "np", ".", "save", "(", "layer_data_path", ",", "reduced_activations", ")", "\n", "", "else", ":", "\n", "                        ", "np", ".", "save", "(", "layer_data_path", ",", "l_out", ")", "\n", "", "print", "(", "layer_data_path", ")", "\n", "\n", "#-----------------------------------------------#", "\n", "#                  Train PIs                    #", "\n", "#-----------------------------------------------# ", "\n", "", "", "", "", "min_features", "=", "5000", "\n", "for", "l_indx", "in", "range", "(", "start_indx", ",", "n_layers", ")", ":", "\n", "        ", "layer_data_path", "=", "'{}{}_{}_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "model_path", "=", "'{}{}_{}_pi.model'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "pi_predict_normal_path", "=", "'{}{}_{}_pi_predict_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "pi_decision_normal_path", "=", "'{}{}_{}_pi_decision_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "layer_data_path", ")", ":", "\n", "                ", "layer_data", "=", "np", ".", "load", "(", "layer_data_path", ")", "\n", "n_features", "=", "np", ".", "min", "(", "[", "min_features", ",", "layer_data", ".", "shape", "[", "1", "]", "]", ")", "\n", "layer_data", "=", "layer_data", "[", ":", ",", ":", "n_features", "]", "\n", "clf", "=", "OneClassSVM", "(", "nu", "=", "0.01", ",", "kernel", "=", "\"rbf\"", ",", "gamma", "=", "1", ",", "verbose", "=", "True", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "clf", ".", "fit", "(", "layer_data", ")", "\n", "predict_result", "=", "clf", ".", "predict", "(", "layer_data", ")", "\n", "decision_result", "=", "clf", ".", "decision_function", "(", "layer_data", ")", "\n", "#Saving", "\n", "clf", ".", "save_to_file", "(", "model_path", ")", "\n", "np", ".", "save", "(", "pi_predict_normal_path", ",", "predict_result", ")", "\n", "np", ".", "save", "(", "pi_decision_normal_path", ",", "decision_result", ")", "\n", "et", "=", "time", ".", "time", "(", ")", "\n", "t", "=", "round", "(", "(", "et", "-", "st", ")", "/", "60", ",", "2", ")", "\n", "print", "(", "'Training PI on {}, layer {} is completed on {} min(s).'", ".", "format", "(", "args", ".", "dataset", ",", "l_indx", ",", "t", ")", ")", "\n", "\n", "#-----------------------------------------------#", "\n", "#                  Train VIs                    #", "\n", "#-----------------------------------------------# ", "\n", "", "", "", "for", "l_indx", "in", "range", "(", "start_indx", ",", "n_layers", "-", "1", ")", ":", "\n", "        ", "layer_data_path_current", "=", "'{}{}_{}_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "layer_data_path_next", "=", "'{}{}_{}_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", "+", "1", ")", "\n", "model_path", "=", "'{}{}_{}_vi.model'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "vi_train_path", "=", "'{}{}_{}_vi_train.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "vi_predict_normal_path", "=", "'{}{}_{}_vi_predict_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "vi_decision_normal_path", "=", "'{}{}_{}_vi_decision_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "layer_data_path_current", ")", "&", "os", ".", "path", ".", "isfile", "(", "layer_data_path_next", ")", ":", "\n", "                ", "layer_data_current", "=", "np", ".", "load", "(", "layer_data_path_current", ")", "\n", "layer_data_next", "=", "np", ".", "load", "(", "layer_data_path_next", ")", "\n", "n_features_current", "=", "np", ".", "min", "(", "[", "min_features", ",", "layer_data_current", ".", "shape", "[", "1", "]", "]", ")", "\n", "layer_data_current", "=", "layer_data_current", "[", ":", ",", ":", "n_features_current", "]", "\n", "n_features_next", "=", "np", ".", "min", "(", "[", "min_features", ",", "layer_data_next", ".", "shape", "[", "1", "]", "]", ")", "\n", "layer_data_next", "=", "layer_data_next", "[", ":", ",", ":", "n_features_next", "]", "\n", "\n", "model_current", "=", "dense", "(", "layer_data_current", ".", "shape", ")", "\n", "vi_current", "=", "model_current", ".", "predict", "(", "layer_data_current", ")", "\n", "model_next", "=", "dense", "(", "layer_data_next", ".", "shape", ")", "\n", "vi_next", "=", "model_next", ".", "predict", "(", "layer_data_next", ")", "\n", "vi_train", "=", "np", ".", "concatenate", "(", "(", "vi_current", ",", "vi_next", ")", ",", "axis", "=", "1", ")", "\n", "np", ".", "save", "(", "vi_train_path", ",", "vi_train", ")", "\n", "\n", "clf", "=", "svm", ".", "OneClassSVM", "(", "nu", "=", "0.1", ",", "kernel", "=", "\"rbf\"", ",", "gamma", "=", "'scale'", ",", "verbose", "=", "True", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "clf", ".", "fit", "(", "vi_train", ")", "\n", "predict_result", "=", "clf", ".", "predict", "(", "vi_train", ")", "\n", "decision_result", "=", "clf", ".", "decision_function", "(", "vi_train", ")", "\n", "#Saving", "\n", "#clf.save_to_file(model_path)", "\n", "s", "=", "pickle", ".", "dumps", "(", "clf", ")", "\n", "f", "=", "open", "(", "model_path", ",", "\"wb+\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "np", ".", "save", "(", "vi_predict_normal_path", ",", "predict_result", ")", "\n", "np", ".", "save", "(", "vi_decision_normal_path", ",", "decision_result", ")", "\n", "et", "=", "time", ".", "time", "(", ")", "\n", "t", "=", "round", "(", "(", "et", "-", "st", ")", "/", "60", ",", "2", ")", "\n", "print", "(", "'Training VI on {}, layer {} is completed on {} min(s).'", ".", "format", "(", "args", ".", "dataset", ",", "l_indx", ",", "t", ")", ")", "\n", "\n", "#-----------------------------------------------#", "\n", "#                  Train NIC                    #", "\n", "# Train detector -- if already trained, load it #", "\n", "#-----------------------------------------------# ", "\n", "", "", "", "nic_model_path", "=", "'{}{}_nic.model'", ".", "format", "(", "nic_results_dir", ",", "args", ".", "dataset", ")", "\n", "nic_train_path", "=", "'{}{}_nic_train.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ")", "\n", "nic_predict_normal_path", "=", "'{}{}_nic_predict_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ")", "\n", "nic_decision_normal_path", "=", "'{}{}_nic_decision_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "nic_train_path", ")", ":", "\n", "#collect pis", "\n", "        ", "pis", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "l_indx", "in", "range", "(", "start_indx", ",", "n_layers", ")", ":", "\n", "            ", "pi_decision_normal_path", "=", "'{}{}_{}_pi_decision_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pi_decision_normal_path", ")", ":", "\n", "                ", "pi", "=", "np", ".", "load", "(", "pi_decision_normal_path", ")", "\n", "if", "pis", ".", "size", "==", "0", ":", "\n", "                    ", "pis", "=", "pi", "\n", "", "else", ":", "\n", "                    ", "pis", "=", "np", ".", "concatenate", "(", "(", "pis", ",", "pi", ")", ",", "axis", "=", "1", ")", "\n", "#collect pis", "\n", "", "", "", "vis", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "l_indx", "in", "range", "(", "start_indx", ",", "n_layers", "-", "1", ")", ":", "\n", "            ", "vi_decision_normal_path", "=", "'{}{}_{}_vi_decision_normal.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "vi_decision_normal_path", ")", ":", "\n", "                ", "vi", "=", "np", ".", "load", "(", "vi_decision_normal_path", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "if", "vis", ".", "size", "==", "0", ":", "\n", "                    ", "vis", "=", "vi", "\n", "", "else", ":", "\n", "                    ", "vis", "=", "np", ".", "concatenate", "(", "(", "vis", ",", "vi", ")", ",", "axis", "=", "1", ")", "\n", "#nic train data", "\n", "", "", "", "nic_train", "=", "np", ".", "concatenate", "(", "(", "pis", ",", "vis", ")", ",", "axis", "=", "1", ")", "\n", "np", ".", "save", "(", "nic_train_path", ",", "nic_train", ")", "\n", "", "else", ":", "\n", "        ", "nic_train", "=", "np", ".", "load", "(", "nic_train_path", ")", "\n", "\n", "", "train_inds_path", "=", "'{}{}_train_inds.npy'", ".", "format", "(", "nic_results_dir", ",", "args", ".", "dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "train_inds_path", ")", ":", "\n", "        ", "train_inds", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "nic_train", ")", ")", ",", "np", ".", "int", "(", "0.8", "*", "len", "(", "nic_train", ")", ")", ")", "\n", "np", ".", "save", "(", "train_inds_path", ",", "train_inds", ")", "\n", "", "else", ":", "\n", "        ", "train_inds", "=", "np", ".", "load", "(", "train_inds_path", ")", "\n", "", "test_inds", "=", "np", ".", "asarray", "(", "list", "(", "set", "(", "range", "(", "len", "(", "nic_train", ")", ")", ")", "-", "set", "(", "train_inds", ")", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "nic_model_path", ")", ":", "\n", "#train nic", "\n", "        ", "clf", "=", "svm", ".", "OneClassSVM", "(", "nu", "=", "0.1", ",", "kernel", "=", "\"rbf\"", ",", "gamma", "=", "'scale'", ",", "verbose", "=", "True", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "clf", ".", "fit", "(", "nic_train", "[", "train_inds", "]", ")", "\n", "predict_result", "=", "clf", ".", "predict", "(", "nic_train", "[", "train_inds", "]", ")", "\n", "decision_result", "=", "clf", ".", "decision_function", "(", "nic_train", "[", "train_inds", "]", ")", "\n", "#Saving", "\n", "#clf.save_to_file(nic_model_path)", "\n", "s", "=", "pickle", ".", "dumps", "(", "clf", ")", "\n", "f", "=", "open", "(", "nic_model_path", ",", "\"wb+\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "np", ".", "save", "(", "nic_predict_normal_path", ",", "predict_result", ")", "\n", "np", ".", "save", "(", "nic_decision_normal_path", ",", "decision_result", ")", "\n", "et", "=", "time", ".", "time", "(", ")", "\n", "t", "=", "round", "(", "(", "et", "-", "st", ")", "/", "60", ",", "2", ")", "\n", "print", "(", "'Training NIC on {} is completed on {} min(s).'", ".", "format", "(", "args", ".", "dataset", ",", "t", ")", ")", "\n", "\n", "\n", "\n", "# Refine the normal, noisy and adversarial sets to only include samples for", "\n", "# which the original version was correctly classified by the model", "\n", "", "preds_test", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "if", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "Y_test", "=", "Y_test", "[", ":", "10000", "]", "\n", "", "inds_correct", "=", "np", ".", "where", "(", "preds_test", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "print", "(", "\"Number of correctly predict images: %s\"", "%", "(", "len", "(", "inds_correct", ")", ")", ")", "\n", "X_test", "=", "X_test", "[", "inds_correct", "]", "\n", "Y_test", "=", "Y_test", "[", "inds_correct", "]", "\n", "print", "(", "\"X_test: \"", ",", "X_test", ".", "shape", ")", "\n", "\n", "# #-----------------------------------------------#", "\n", "# #              Prepare Test Data                #", "\n", "# #-----------------------------------------------# ", "\n", "# #get pi decision for each layer", "\n", "# #a-load pi_model_normal of the layer, b- load/save the decisions of adv", "\n", "# pis = np.array([])", "\n", "# for l_indx in range(start_indx, n_layers):", "\n", "#     layer_test_path = '{}{}_{}_test.npy'.format(nic_layers_dir, args.dataset, l_indx)", "\n", "#     model_path = '{}{}_{}_pi.model'.format(nic_layers_dir, args.dataset, l_indx)", "\n", "#     pi_decision_test_path = '{}{}_{}_pi_decision_test.npy'.format(nic_layers_dir, args.dataset, l_indx)", "\n", "#     if not os.path.isfile(pi_decision_test_path):", "\n", "#         if os.path.isfile(layer_test_path) & os.path.isfile(model_path):", "\n", "#             layer_data = np.load(layer_test_path)", "\n", "#             n_features = np.min([min_features, layer_data.shape[1]])", "\n", "#             layer_data = layer_data[:,:n_features]", "\n", "#             clf = OneClassSVM(nu=0.01, kernel=\"rbf\", gamma=0.1, verbose=True)", "\n", "#             clf.load_from_file(model_path)", "\n", "#             decision_result = clf.decision_function(layer_data)", "\n", "#             np.save(pi_decision_test_path, decision_result)", "\n", "#     else:", "\n", "#         decision_result = np.load(pi_decision_test_path)", "\n", "\n", "#     if pis.size == 0:", "\n", "#         pis = decision_result", "\n", "#     else:", "\n", "#         pis = np.concatenate((pis, decision_result), axis=1)", "\n", "\n", "# #get vi decision for each layer", "\n", "# #a-load vi_model_normal of the layer, b- load/save the decisions of adv", "\n", "# vis = np.array([])", "\n", "# for l_indx in range(start_indx, n_layers-1):", "\n", "#     layer_test_path_current = '{}{}_{}_test.npy'.format(nic_layers_dir, args.dataset, l_indx)", "\n", "#     layer_test_path_next = '{}{}_{}_test.npy'.format(nic_layers_dir, args.dataset, l_indx+1)", "\n", "#     model_path = '{}{}_{}_vi.model'.format(nic_layers_dir, args.dataset, l_indx)", "\n", "#     vi_decision_test_path = '{}{}_{}_vi_decision_test.npy'.format(nic_layers_dir, args.dataset, l_indx)", "\n", "#     if not os.path.isfile(vi_decision_test_path):", "\n", "#         if os.path.isfile(layer_test_path_current) & os.path.isfile(layer_test_path_next) & os.path.isfile(model_path):", "\n", "#             layer_data_current = np.load(layer_test_path_current)", "\n", "#             n_features = np.min([min_features, layer_data_current.shape[1]])", "\n", "#             layer_data_current = layer_data_current[:,:n_features]", "\n", "#             layer_data_next = np.load(layer_test_path_next)", "\n", "#             n_features = np.min([min_features, layer_data_next.shape[1]])", "\n", "#             layer_data_next = layer_data_next[:,:n_features]", "\n", "#             model_current = dense(layer_data_current.shape)", "\n", "#             vi_current = model_current.predict(layer_data_current)", "\n", "#             model_next = dense(layer_data_next.shape)", "\n", "#             vi_next = model_next.predict(layer_data_next)", "\n", "#             vi_test_train = np.concatenate((vi_current, vi_next), axis=1)", "\n", "\n", "#             clf = pickle.load(open(model_path, 'rb'))", "\n", "#             decision_result = clf.decision_function(vi_test_train).reshape(-1, 1)", "\n", "#             np.save(vi_decision_test_path, decision_result)", "\n", "#     else:", "\n", "#         decision_result = np.load(vi_decision_test_path)", "\n", "\n", "#     if vis.size == 0:", "\n", "#         vis = decision_result", "\n", "#     else:", "\n", "#         vis = np.concatenate((vis, decision_result), axis=1)", "\n", "\n", "# nic_test = np.concatenate((pis, vis), axis=1)", "\n", "nic_test", "=", "nic_train", "[", "test_inds", "]", "\n", "# nic_test_copy=nic_test", "\n", "# nic_test = nic_test[inds_correct]", "\n", "\n", "#-----------------------------------------------#", "\n", "#                 Evaluate NIC                  #", "\n", "#-----------------------------------------------# ", "\n", "## Evaluate detector -- on adversarial attack", "\n", "# Y_test_copy=Y_test", "\n", "# X_test_copy=X_test", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "# Y_test=Y_test_copy", "\n", "# X_test=X_test_copy", "\n", "# nic_test=nic_test_copy", "\n", "# nic_test = nic_test[inds_correct]", "\n", "        ", "results_all", "=", "[", "]", "\n", "\n", "#get pi decision for each layer", "\n", "#a-load pi_model_normal of the layer, b- load/save the decisions of adv", "\n", "pis", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "l_indx", "in", "range", "(", "start_indx", ",", "n_layers", ")", ":", "\n", "            ", "layer_adv_path", "=", "'{}{}_{}_{}.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ",", "attack", ")", "\n", "model_path", "=", "'{}{}_{}_pi.model'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "pi_decision_adv_path", "=", "'{}{}_{}_pi_decision_{}.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ",", "attack", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "pi_decision_adv_path", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "layer_adv_path", ")", "&", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ":", "\n", "                    ", "layer_data", "=", "np", ".", "load", "(", "layer_adv_path", ")", "\n", "n_features", "=", "np", ".", "min", "(", "[", "min_features", ",", "layer_data", ".", "shape", "[", "1", "]", "]", ")", "\n", "layer_data", "=", "layer_data", "[", ":", ",", ":", "n_features", "]", "\n", "clf", "=", "OneClassSVM", "(", "nu", "=", "0.01", ",", "kernel", "=", "\"rbf\"", ",", "gamma", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "clf", ".", "load_from_file", "(", "model_path", ")", "\n", "decision_result", "=", "clf", ".", "decision_function", "(", "layer_data", ")", "\n", "np", ".", "save", "(", "pi_decision_adv_path", ",", "decision_result", ")", "\n", "", "", "else", ":", "\n", "                ", "decision_result", "=", "np", ".", "load", "(", "pi_decision_adv_path", ")", "\n", "\n", "", "if", "pis", ".", "size", "==", "0", ":", "\n", "                ", "pis", "=", "decision_result", "\n", "", "else", ":", "\n", "                ", "pis", "=", "np", ".", "concatenate", "(", "(", "pis", ",", "decision_result", ")", ",", "axis", "=", "1", ")", "\n", "\n", "#get vi decision for each layer", "\n", "#a-load vi_model_normal of the layer, b- load/save the decisions of adv", "\n", "", "", "vis", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "l_indx", "in", "range", "(", "start_indx", ",", "n_layers", "-", "1", ")", ":", "\n", "            ", "layer_adv_path_current", "=", "'{}{}_{}_{}.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ",", "attack", ")", "\n", "layer_adv_path_next", "=", "'{}{}_{}_{}.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", "+", "1", ",", "attack", ")", "\n", "model_path", "=", "'{}{}_{}_vi.model'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ")", "\n", "vi_decision_adv_path", "=", "'{}{}_{}_vi_decision_{}.npy'", ".", "format", "(", "nic_layers_dir", ",", "args", ".", "dataset", ",", "l_indx", ",", "attack", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "vi_decision_adv_path", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "layer_adv_path_current", ")", "&", "os", ".", "path", ".", "isfile", "(", "layer_adv_path_next", ")", "&", "os", ".", "path", ".", "isfile", "(", "model_path", ")", ":", "\n", "                    ", "layer_data_current", "=", "np", ".", "load", "(", "layer_adv_path_current", ")", "\n", "n_features", "=", "np", ".", "min", "(", "[", "min_features", ",", "layer_data_current", ".", "shape", "[", "1", "]", "]", ")", "\n", "layer_data_current", "=", "layer_data_current", "[", ":", ",", ":", "n_features", "]", "\n", "layer_data_next", "=", "np", ".", "load", "(", "layer_adv_path_next", ")", "\n", "n_features", "=", "np", ".", "min", "(", "[", "min_features", ",", "layer_data_next", ".", "shape", "[", "1", "]", "]", ")", "\n", "layer_data_next", "=", "layer_data_next", "[", ":", ",", ":", "n_features", "]", "\n", "model_current", "=", "dense", "(", "layer_data_current", ".", "shape", ")", "\n", "vi_current", "=", "model_current", ".", "predict", "(", "layer_data_current", ")", "\n", "model_next", "=", "dense", "(", "layer_data_next", ".", "shape", ")", "\n", "vi_next", "=", "model_next", ".", "predict", "(", "layer_data_next", ")", "\n", "vi_adv_train", "=", "np", ".", "concatenate", "(", "(", "vi_current", ",", "vi_next", ")", ",", "axis", "=", "1", ")", "\n", "\n", "clf", "=", "pickle", ".", "load", "(", "open", "(", "model_path", ",", "'rb'", ")", ")", "\n", "decision_result", "=", "clf", ".", "decision_function", "(", "vi_adv_train", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "np", ".", "save", "(", "vi_decision_adv_path", ",", "decision_result", ")", "\n", "", "", "else", ":", "\n", "                ", "decision_result", "=", "np", ".", "load", "(", "vi_decision_adv_path", ")", "\n", "\n", "", "if", "vis", ".", "size", "==", "0", ":", "\n", "                ", "vis", "=", "decision_result", "\n", "", "else", ":", "\n", "                ", "vis", "=", "np", ".", "concatenate", "(", "(", "vis", ",", "decision_result", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "nic_adv", "=", "np", ".", "concatenate", "(", "(", "pis", ",", "vis", ")", ",", "axis", "=", "1", ")", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'%s%s_%s.npy'", "%", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "# if attack=='df' and args.dataset=='tiny':", "\n", "#     Y_test=model_class.y_test[0:2700]", "\n", "#     X_test=model_class.x_test[0:2700]", "\n", "#     # nic_test=nic_test_copy[0:2700]", "\n", "#     X_test_adv = X_test_adv[0:2700]", "\n", "#     cwi_inds = inds_correct[inds_correct<2700]", "\n", "#     Y_test = Y_test[cwi_inds]", "\n", "#     X_test = X_test[cwi_inds]", "\n", "#     nic_test = nic_test[cwi_inds]", "\n", "#     nic_adv = nic_adv[cwi_inds]", "\n", "#     X_test_adv = X_test_adv[cwi_inds]", "\n", "# else:", "\n", "nic_adv", "=", "nic_adv", "[", "inds_correct", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "\n", "pred_adv", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "Y_test", ",", "verbose", "=", "0", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "nic_adv_success", "=", "nic_adv", "[", "inds_success", "]", "\n", "nic_adv_fail", "=", "nic_adv", "[", "inds_fail", "]", "\n", "\n", "\n", "# prepare X and Y for detectors", "\n", "X_all", "=", "np", ".", "concatenate", "(", "[", "nic_test", ",", "nic_adv", "]", ")", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "nic_test", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "nic_adv", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_success", "=", "np", ".", "concatenate", "(", "[", "nic_test", ",", "nic_adv_success", "]", ")", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "nic_test", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_fail", "=", "np", ".", "concatenate", "(", "[", "nic_test", ",", "nic_adv_fail", "]", ")", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "nic_test", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "\n", "# --- load nic detector", "\n", "clf", "=", "pickle", ".", "load", "(", "open", "(", "nic_model_path", ",", "'rb'", ")", ")", "\n", "\n", "#For Y_all ", "\n", "Y_all_pred", "=", "clf", ".", "predict", "(", "X_all", ")", "\n", "Y_all_pred", "=", "process", "(", "Y_all_pred", ")", "\n", "Y_all_pred_score", "=", "clf", ".", "decision_function", "(", "X_all", ")", "\n", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "Y_all_pred_score", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "            ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "Y_success_pred", "=", "clf", ".", "predict", "(", "X_success", ")", "\n", "Y_success_pred", "=", "process", "(", "Y_success_pred", ")", "\n", "Y_success_pred_score", "=", "clf", ".", "decision_function", "(", "X_success", ")", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "Y_success_pred_score", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "            ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "Y_fail_pred", "=", "clf", ".", "predict", "(", "X_fail", ")", "\n", "Y_fail_pred", "=", "process", "(", "Y_fail_pred", ")", "\n", "Y_fail_pred_score", "=", "clf", ".", "decision_function", "(", "X_fail", ")", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "Y_fail_pred_score", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_{}.csv'", ".", "format", "(", "nic_results_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "            ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'{:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n            - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.generate_adv.main": [[21, 327], ["print", "art.attacks.evasion.CarliniLInfMethod", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "art.attacks.evasion.CarliniL2Method", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "art.attacks.evasion.DeepFool", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "art.attacks.evasion.SpatialTransformation", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "art.attacks.evasion.SquareAttack", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "common.util.get_next_class", "art.attacks.evasion.HopSkipJump", "np.zeros", "range", "art.attacks.evasion.ZooAttack", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "model", "optimizers.SGD", "classifier.compile", "art.classifiers.KerasClassifier", "art.attacks.evasion.FastGradientMethod", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "art.attacks.evasion.BasicIterativeMethod", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "art.attacks.evasion.ProjectedGradientDescent", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "art.attacks.evasion.ProjectedGradientDescent", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "art.attacks.evasion.ProjectedGradientDescent", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "art.attacks.evasion.ProjectedGradientDescent.generate", "np.save", "print", "model", "optimizers.SGD", "classifier.compile", "art.classifiers.KerasClassifier", "model", "optimizers.SGD", "classifier.compile", "art.classifiers.KerasClassifier", "str", "int", "str", "str", "str", "str", "model", "optimizers.SGD", "classifier.compile", "art.classifiers.KerasClassifier", "model", "optimizers.SGD", "classifier.compile", "art.classifiers.KerasClassifier", "model", "optimizers.SGD", "classifier.compile", "art.classifiers.KerasClassifier", "model", "optimizers.SGD", "classifier.compile", "art.classifiers.KerasClassifier", "model", "optimizers.SGD", "classifier.compile", "art.classifiers.KerasClassifier"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.get_next_class", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "in", "[", "'mnist'", ",", "'cifar'", ",", "'svhn'", ",", "'tiny'", ",", "'tiny_gray'", "]", ",", "\"dataset parameter must be either 'mnist', 'cifar', 'svhn', or 'tiny'\"", "\n", "print", "(", "'Dataset: %s'", "%", "args", ".", "dataset", ")", "\n", "adv_path", "=", "'/home/aaldahdo/detectors/adv_data/'", "\n", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "model", "\n", "model_mnist", "=", "model", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "classifier", "=", "model_mnist", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.05", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "classifier", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "kclassifier", "=", "KerasClassifier", "(", "model", "=", "classifier", ",", "clip_values", "=", "(", "0", ",", "1", ")", ")", "\n", "epsilons", "=", "[", "8", "/", "256", ",", "16", "/", "256", ",", "32", "/", "256", ",", "64", "/", "256", ",", "80", "/", "256", ",", "128", "/", "256", "]", "\n", "epsilons1", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "40", "]", "\n", "epsilons2", "=", "[", "0.125", ",", "0.25", ",", "0.3125", ",", "0.5", ",", "1", ",", "1.5", ",", "2", "]", "\n", "eps_sa", "=", "0.3", "\n", "pa_th", "=", "78", "\n", "# random_restart = 20", "\n", "# x_train = model_mnist.x_train", "\n", "x_test", "=", "model_mnist", ".", "x_test", "\n", "# y_train = model_mnist.y_train", "\n", "y_test", "=", "model_mnist", ".", "y_test", "\n", "y_test_labels", "=", "model_mnist", ".", "y_test_labels", "\n", "translation", "=", "10", "\n", "rotation", "=", "60", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'mnist_gray'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist_gray", "import", "MNISTCNN", "as", "model", "\n", "model_mnist", "=", "model", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "classifier", "=", "model_mnist", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.05", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "classifier", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "kclassifier", "=", "KerasClassifier", "(", "model", "=", "classifier", ",", "clip_values", "=", "(", "0", ",", "1", ")", ")", "\n", "epsilons", "=", "[", "8", "/", "256", ",", "16", "/", "256", ",", "32", "/", "256", ",", "64", "/", "256", ",", "80", "/", "256", ",", "128", "/", "256", "]", "\n", "epsilons1", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "40", "]", "\n", "epsilons2", "=", "[", "0.125", ",", "0.25", ",", "0.3125", ",", "0.5", ",", "1", ",", "1.5", ",", "2", "]", "\n", "eps_sa", "=", "0.3", "\n", "pa_th", "=", "78", "\n", "# random_restart = 20", "\n", "# x_train = model_mnist.x_train", "\n", "x_test", "=", "model_mnist", ".", "x_test", "\n", "# y_train = model_mnist.y_train", "\n", "y_test", "=", "model_mnist", ".", "y_test", "\n", "y_test_labels", "=", "model_mnist", ".", "y_test_labels", "\n", "translation", "=", "10", "\n", "rotation", "=", "60", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "model", "\n", "model_cifar", "=", "model", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "classifier", "=", "model_cifar", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "classifier", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "kclassifier", "=", "KerasClassifier", "(", "model", "=", "classifier", ",", "clip_values", "=", "(", "0", ",", "1", ")", ")", "\n", "epsilons", "=", "[", "8", "/", "256", ",", "16", "/", "256", ",", "32", "/", "256", ",", "64", "/", "256", ",", "80", "/", "256", ",", "128", "/", "256", "]", "\n", "epsilons1", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "40", "]", "\n", "epsilons2", "=", "[", "0.125", ",", "0.25", ",", "0.3125", ",", "0.5", ",", "1", ",", "1.5", ",", "2", "]", "\n", "eps_sa", "=", "0.125", "\n", "pa_th", "=", "100", "\n", "# x_train = model_cifar.x_train", "\n", "x_test", "=", "model_cifar", ".", "x_test", "\n", "# y_train = model_cifar.y_train", "\n", "y_test", "=", "model_cifar", ".", "y_test", "\n", "y_test_labels", "=", "model_cifar", ".", "y_test_labels", "\n", "translation", "=", "8", "\n", "rotation", "=", "30", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar_gray'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10_gray", "import", "CIFAR10CNN", "as", "model", "\n", "model_cifar", "=", "model", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "classifier", "=", "model_cifar", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "classifier", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "kclassifier", "=", "KerasClassifier", "(", "model", "=", "classifier", ",", "clip_values", "=", "(", "0", ",", "1", ")", ")", "\n", "epsilons", "=", "[", "8", "/", "256", ",", "16", "/", "256", ",", "32", "/", "256", ",", "64", "/", "256", ",", "80", "/", "256", ",", "128", "/", "256", "]", "\n", "epsilons1", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "40", "]", "\n", "epsilons2", "=", "[", "0.125", ",", "0.25", ",", "0.3125", ",", "0.5", ",", "1", ",", "1.5", ",", "2", "]", "\n", "eps_sa", "=", "0.125", "\n", "pa_th", "=", "100", "\n", "# x_train = model_cifar.x_train", "\n", "x_test", "=", "model_cifar", ".", "x_test", "\n", "# y_train = model_cifar.y_train", "\n", "y_test", "=", "model_cifar", ".", "y_test", "\n", "y_test_labels", "=", "model_cifar", ".", "y_test_labels", "\n", "translation", "=", "8", "\n", "rotation", "=", "30", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "model", "\n", "model_svhn", "=", "model", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "classifier", "=", "model_svhn", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "classifier", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "kclassifier", "=", "KerasClassifier", "(", "model", "=", "classifier", ",", "clip_values", "=", "(", "0", ",", "1", ")", ")", "\n", "epsilons", "=", "[", "8", "/", "256", ",", "16", "/", "256", ",", "32", "/", "256", ",", "64", "/", "256", ",", "80", "/", "256", ",", "128", "/", "256", "]", "\n", "epsilons1", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "40", "]", "\n", "epsilons2", "=", "[", "0.125", ",", "0.25", ",", "0.3125", ",", "0.5", ",", "1", ",", "1.5", ",", "2", "]", "\n", "eps_sa", "=", "0.125", "\n", "pa_th", "=", "100", "\n", "# x_train = model_svhn.x_train", "\n", "x_test", "=", "model_svhn", ".", "x_test", "\n", "# y_train = model_svhn.y_train", "\n", "y_test", "=", "model_svhn", ".", "y_test", "\n", "y_test_labels", "=", "model_svhn", ".", "y_test_labels", "\n", "translation", "=", "10", "\n", "rotation", "=", "60", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn_gray'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn_gray", "import", "SVHNCNN", "as", "model", "\n", "model_svhn", "=", "model", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "classifier", "=", "model_svhn", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "classifier", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "kclassifier", "=", "KerasClassifier", "(", "model", "=", "classifier", ",", "clip_values", "=", "(", "0", ",", "1", ")", ")", "\n", "epsilons", "=", "[", "8", "/", "256", ",", "16", "/", "256", ",", "32", "/", "256", ",", "64", "/", "256", ",", "80", "/", "256", ",", "128", "/", "256", "]", "\n", "epsilons1", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "40", "]", "\n", "epsilons2", "=", "[", "0.125", ",", "0.25", ",", "0.3125", ",", "0.5", ",", "1", ",", "1.5", ",", "2", "]", "\n", "eps_sa", "=", "0.125", "\n", "pa_th", "=", "100", "\n", "# x_train = model_svhn.x_train", "\n", "x_test", "=", "model_svhn", ".", "x_test", "\n", "# y_train = model_svhn.y_train", "\n", "y_test", "=", "model_svhn", ".", "y_test", "\n", "y_test_labels", "=", "model_svhn", ".", "y_test_labels", "\n", "translation", "=", "10", "\n", "rotation", "=", "60", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "model", "\n", "model_tiny", "=", "model", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "classifier", "=", "model_tiny", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.001", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "classifier", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "kclassifier", "=", "KerasClassifier", "(", "model", "=", "classifier", ",", "clip_values", "=", "(", "0", ",", "1", ")", ")", "\n", "epsilons", "=", "[", "8", "/", "256", ",", "16", "/", "256", ",", "32", "/", "256", ",", "64", "/", "256", ",", "80", "/", "256", ",", "128", "/", "256", "]", "\n", "epsilons1", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "40", "]", "\n", "epsilons2", "=", "[", "0.125", ",", "0.25", ",", "0.3125", ",", "0.5", ",", "1", ",", "1.5", ",", "2", "]", "\n", "eps_sa", "=", "0.125", "\n", "pa_th", "=", "100", "\n", "# x_train = model_tiny.x_train", "\n", "x_test", "=", "model_tiny", ".", "x_test", "\n", "# y_train = model_tiny.y_train", "\n", "y_test", "=", "model_tiny", ".", "y_test", "\n", "y_test_labels", "=", "model_tiny", ".", "y_test_labels", "\n", "translation", "=", "8", "\n", "rotation", "=", "30", "\n", "del", "model_tiny", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny_gray'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny_gray", "import", "TINYCNN", "as", "model", "\n", "model_tiny", "=", "model", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "classifier", "=", "model_tiny", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.001", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "classifier", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "kclassifier", "=", "KerasClassifier", "(", "model", "=", "classifier", ",", "clip_values", "=", "(", "0", ",", "1", ")", ")", "\n", "epsilons", "=", "[", "8", "/", "256", ",", "16", "/", "256", ",", "32", "/", "256", ",", "64", "/", "256", ",", "80", "/", "256", ",", "128", "/", "256", "]", "\n", "epsilons1", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "40", "]", "\n", "epsilons2", "=", "[", "0.125", ",", "0.25", ",", "0.3125", ",", "0.5", ",", "1", ",", "1.5", ",", "2", "]", "\n", "eps_sa", "=", "0.125", "\n", "# x_train = model_tiny.x_train", "\n", "x_test", "=", "model_tiny", ".", "x_test", "\n", "# y_train = model_tiny.y_train", "\n", "y_test", "=", "model_tiny", ".", "y_test", "\n", "y_test_labels", "=", "model_tiny", ".", "y_test_labels", "\n", "translation", "=", "8", "\n", "rotation", "=", "30", "\n", "del", "model_tiny", "\n", "\n", "\n", "# batch_count_start = args.batch_indx", "\n", "# bsize = args.batch_size", "\n", "# batch_count_end = batch_count_start + 1", "\n", "\n", "#FGSM", "\n", "", "for", "e", "in", "epsilons", ":", "\n", "        ", "attack", "=", "FastGradientMethod", "(", "estimator", "=", "kclassifier", ",", "eps", "=", "e", ",", "eps_step", "=", "0.01", ",", "batch_size", "=", "256", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_fgsm_'", "+", "str", "(", "e", ")", "+", "'.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "#BIM", "\n", "", "for", "e", "in", "epsilons", ":", "\n", "        ", "attack", "=", "BasicIterativeMethod", "(", "estimator", "=", "kclassifier", ",", "eps", "=", "e", ",", "eps_step", "=", "0.01", ",", "batch_size", "=", "32", ",", "max_iter", "=", "int", "(", "e", "*", "256", "*", "1.25", ")", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_bim_'", "+", "str", "(", "e", ")", "+", "'.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "#PGD1", "\n", "", "for", "e", "in", "epsilons1", ":", "\n", "        ", "attack", "=", "ProjectedGradientDescent", "(", "estimator", "=", "kclassifier", ",", "norm", "=", "1", ",", "eps", "=", "e", ",", "eps_step", "=", "4", ",", "batch_size", "=", "32", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_pgd1_'", "+", "str", "(", "e", ")", "+", "'.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "#PGD2", "\n", "", "for", "e", "in", "epsilons2", ":", "\n", "        ", "attack", "=", "ProjectedGradientDescent", "(", "estimator", "=", "kclassifier", ",", "norm", "=", "2", ",", "eps", "=", "e", ",", "eps_step", "=", "0.1", ",", "batch_size", "=", "32", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_pgd2_'", "+", "str", "(", "e", ")", "+", "'.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "#PGDInf", "\n", "", "for", "e", "in", "epsilons", ":", "\n", "        ", "attack", "=", "ProjectedGradientDescent", "(", "estimator", "=", "kclassifier", ",", "norm", "=", "np", ".", "inf", ",", "eps", "=", "e", ",", "eps_step", "=", "0.01", ",", "batch_size", "=", "32", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_pgdi_'", "+", "str", "(", "e", ")", "+", "'.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "#CWi", "\n", "", "attack", "=", "CarliniLInfMethod", "(", "classifier", "=", "kclassifier", ",", "max_iter", "=", "200", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_cwi.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "# #CWi", "\n", "# if args.dataset=='tiny':", "\n", "#     for n, x, y in batch(x_test, y_test, batch_size=bsize):", "\n", "#         if n>=batch_count_start*bsize and n<batch_count_end*bsize:", "\n", "#             adv_file_path = adv_path + args.dataset + '_cwi_' + str(batch_count_start) + '.npy'", "\n", "#             if not os.path.isfile(adv_file_path):", "\n", "#                 attack = CarliniLInfMethod(classifier=kclassifier, max_iter=100, batch_size=bsize)", "\n", "#                 adv_data = attack.generate(x=x)", "\n", "#                 np.save(adv_file_path, adv_data)", "\n", "#                 print('Done - {}'.format(adv_file_path))", "\n", "\n", "#CW2 - SLOW", "\n", "attack", "=", "CarliniL2Method", "(", "classifier", "=", "kclassifier", ",", "max_iter", "=", "100", ",", "batch_size", "=", "1", ",", "confidence", "=", "10", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_cw2.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "#DF", "\n", "attack", "=", "DeepFool", "(", "classifier", "=", "kclassifier", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_df.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "# #DF", "\n", "# if args.dataset=='tiny':", "\n", "#     for n, x, y in batch(x_test, y_test, batch_size=bsize):", "\n", "#         if n>=batch_count_start*bsize and n<batch_count_end*bsize:", "\n", "#             attack = DeepFool(classifier=kclassifier, epsilon=9, max_iter=100)", "\n", "#             adv_data = attack.generate(x=x)", "\n", "#             adv_file_path = adv_path + args.dataset + '_df_'+ str(batch_count_start) + '.npy'", "\n", "#             np.save(adv_file_path, adv_data)", "\n", "#             print('Done - {}'.format(adv_file_path))", "\n", "\n", "#Spatial transofrmation attack", "\n", "attack", "=", "SpatialTransformation", "(", "classifier", "=", "kclassifier", ",", "max_translation", "=", "translation", ",", "max_rotation", "=", "rotation", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_sta.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "#Square Attack", "\n", "attack", "=", "SquareAttack", "(", "estimator", "=", "kclassifier", ",", "max_iter", "=", "200", ",", "eps", "=", "eps_sa", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ",", "y", "=", "y_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_sa.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "#HopSkipJump Attack", "\n", "y_test_next", "=", "get_next_class", "(", "y_test", ")", "\n", "attack", "=", "HopSkipJump", "(", "classifier", "=", "kclassifier", ",", "targeted", "=", "False", ",", "max_iter", "=", "0", ",", "max_eval", "=", "100", ",", "init_eval", "=", "10", ")", "\n", "\n", "iter_step", "=", "10", "\n", "adv_data", "=", "np", ".", "zeros", "(", "x_test", ".", "shape", ")", "\n", "# adv_data = adv_data[0:25]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ",", "x_adv_init", "=", "adv_data", ",", "resume", "=", "True", ")", "\n", "attack", ".", "max_iter", "=", "iter_step", "\n", "\n", "# _, acc_normal = classifier.evaluate(x_test[0:25], y_test[0:25])", "\n", "# _, acc_adv = classifier.evaluate(adv_data, y_test[0:25])", "\n", "# print('Normal accuracy - {}\\nAttack accuracy - {}'.format(acc_normal, acc_adv))", "\n", "\n", "# subcount=1", "\n", "# for i in range(0, 25):", "\n", "#     plt.subplot(5,5,subcount)", "\n", "#     if args.dataset=='mnist':", "\n", "#         plt.imshow(adv_data[i][:,:,0])", "\n", "#     else:", "\n", "#         plt.imshow(adv_data[i][:,:,:])", "\n", "#     plt.suptitle(args.dataset+ \" sb\")", "\n", "#     subcount = subcount + 1", "\n", "# plt.show()", "\n", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_hop.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n", "#ZOO attack", "\n", "", "attack", "=", "ZooAttack", "(", "classifier", "=", "kclassifier", ",", "batch_size", "=", "32", ")", "\n", "adv_data", "=", "attack", ".", "generate", "(", "x", "=", "x_test", ",", "y", "=", "y_test", ")", "\n", "adv_file_path", "=", "adv_path", "+", "args", ".", "dataset", "+", "'_zoo.npy'", "\n", "np", ".", "save", "(", "adv_file_path", ",", "adv_data", ")", "\n", "print", "(", "'Done - {}'", ".", "format", "(", "adv_file_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.train_cnn_base.main": [[7, 36], ["print", "model", "model", "model", "model", "model", "model", "model", "model"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "in", "[", "'mnist'", ",", "'cifar'", ",", "'svhn'", ",", "'tiny'", ",", "'tiny_gray'", "]", ",", "\"dataset parameter must be either 'mnist', 'cifar_cnn', 'cifar_densenet', 'svhn', or 'tiny'\"", "\n", "print", "(", "'Data set: %s'", "%", "args", ".", "dataset", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "model", "\n", "model_mnist", "=", "model", "(", "mode", "=", "'train'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ",", "epochs", "=", "args", ".", "epochs", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'mnist_gray'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist_gray", "import", "MNISTCNN", "as", "model", "\n", "model_mnist", "=", "model", "(", "mode", "=", "'train'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ",", "epochs", "=", "args", ".", "epochs", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "model", "\n", "model_cifar", "=", "model", "(", "mode", "=", "'train'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ",", "epochs", "=", "args", ".", "epochs", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar_gray'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10_gray", "import", "CIFAR10CNN", "as", "model", "\n", "model_cifar", "=", "model", "(", "mode", "=", "'train'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ",", "epochs", "=", "args", ".", "epochs", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "model", "\n", "model_svhn", "=", "model", "(", "mode", "=", "'train'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ",", "epochs", "=", "args", ".", "epochs", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn_gray'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn_gray", "import", "SVHNCNN", "as", "model", "\n", "model_svhn", "=", "model", "(", "mode", "=", "'train'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ",", "epochs", "=", "args", ".", "epochs", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "model", "\n", "model_tiny", "=", "model", "(", "mode", "=", "'train'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ",", "epochs", "=", "args", ".", "epochs", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny_gray'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny_gray", "import", "TINYCNN", "as", "model", "\n", "model_tiny", "=", "model", "(", "mode", "=", "'train'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ",", "epochs", "=", "args", ".", "epochs", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test": [[12, 30], ["range", "dic[].mark", "dist_all.append", "pred_labels.append", "len"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.DBDetector.mark"], ["def", "test", "(", "dic", ",", "X", ",", "thrs", ")", ":", "\n", "    ", "dist_all", "=", "[", "]", "\n", "pred_labels", "=", "[", "]", "\n", "for", "d", "in", "dic", ":", "\n", "        ", "m", "=", "dic", "[", "d", "]", ".", "mark", "(", "X", ")", "#m = np.reshape(dic[d].mark(X), (len(X),1))", "\n", "dist_all", ".", "append", "(", "m", ")", "\n", "pred_labels", ".", "append", "(", "m", ">", "thrs", "[", "d", "]", ")", "\n", "\n", "#idx_pass = np.argwhere(marks < thrs[name])", "\n", "", "labels", "=", "pred_labels", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "pred_labels", ")", ")", ":", "\n", "        ", "labels", "=", "labels", "|", "pred_labels", "[", "i", "]", "\n", "\n", "# dist = dist_all[0]", "\n", "# for i in range(1, len(dist_all)):", "\n", "#     dist = np.max(np.concatenate((dist, dist_all[i]), axis=1), axis=1)", "\n", "\n", "", "return", "labels", ",", "dist_all", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.main": [[32, 369], ["os.path.isfile", "print", "magnet.defensive_models.DenoisingAutoEncoder", "magnet.defensive_models.DenoisingAutoEncoder", "os.path.isfile", "os.path.isfile", "model.predict", "print", "print", "magnet.worker.Classifier", "magnet.worker.Operator", "print", "myModel", "optimizers.SGD", "model.compile", "Model", "magnet.defensive_models.DenoisingAutoEncoder.load", "magnet.defensive_models.DenoisingAutoEncoder.train", "magnet.defensive_models.DenoisingAutoEncoder.load", "magnet.defensive_models.DenoisingAutoEncoder.train", "np.where", "dict", "np.load", "model.predict", "model.evaluate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "magnet.worker.AttackData", "magnet.worker.Evaluator", "magnet.worker.Evaluator.operator.get_thrs", "detect_magnet.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "print", "DATASETS.index", "myModel", "optimizers.SGD", "model.compile", "Model", "len", "magnet.worker.AEDetector", "magnet.worker.AEDetector", "magnet.worker.SimpleReformer", "magnet.worker.AEDetector", "magnet.worker.AEDetector", "magnet.worker.SimpleReformer", "magnet.worker.SimpleReformer", "magnet.worker.SimpleReformer", "magnet.worker.DBDetector", "dict", "np.where", "np.where", "np.argmax", "len", "list", "list", "len", "results_all.append", "detect_magnet.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "detect_magnet.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "np.load", "model.predict", "model.evaluate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "magnet.worker.AttackData", "magnet.worker.Evaluator", "magnet.worker.Evaluator.operator.get_thrs", "detect_magnet.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "model.get_input_at", "myModel", "optimizers.SGD", "model.compile", "Model", "model.predict.argmax", "Y_test.argmax", "np.zeros", "np.ones", "np.zeros", "np.ones", "np.zeros", "np.ones", "len", "list", "list", "len", "list", "list", "csv.DictWriter.writerow", "np.where", "np.where", "np.argmax", "len", "list", "list", "len", "results_all.append", "detect_magnet.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "detect_magnet.test", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "model.get_layer", "model.get_input_at", "myModel", "optimizers.SGD", "model.compile", "Model", "model.predict.argmax", "Y_test.argmax", "model.predict.argmax", "Y_test.argmax", "len", "len", "len", "len", "len", "len", "np.zeros", "np.ones", "np.zeros", "np.ones", "np.zeros", "np.ones", "len", "list", "list", "len", "list", "list", "csv.DictWriter.writerow", "model.get_layer", "model.get_input_at", "model.predict.argmax", "Y_test.argmax", "model.predict.argmax", "Y_test.argmax", "len", "len", "len", "len", "len", "len", "model.get_layer", "model.get_input_at", "model.get_layer"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.get_thrs", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.get_thrs", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "in", "DATASETS", ",", "\"Dataset parameter must be either 'mnist', 'cifar', 'svhn', or 'tiny'\"", "\n", "ATTACKS", "=", "ATTACK", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "\n", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "'{}cnn_{}.h5'", ".", "format", "(", "checkpoints_dir", ",", "args", ".", "dataset", ")", ")", ",", "'model file not found... must first train model using train_model.py.'", "\n", "\n", "print", "(", "'Loading the data and model...'", ")", "\n", "# Load the model", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.05", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "modelx", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "'classification_head_before_activation'", ")", ".", "output", ")", "\n", "clip_min", ",", "clip_max", "=", "0", ",", "1", "\n", "v_noise", "=", "0.1", "\n", "p1", "=", "2", "\n", "p2", "=", "1", "\n", "type", "=", "'error'", "\n", "t", "=", "10", "\n", "drop_rate", "=", "{", "\"I\"", ":", "0.001", ",", "\"II\"", ":", "0.001", "}", "\n", "epochs", "=", "100", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "modelx", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "'classification_head_before_softmax'", ")", ".", "output", ")", "\n", "clip_min", ",", "clip_max", "=", "0", ",", "1", "\n", "v_noise", "=", "0.025", "\n", "p1", "=", "1", "\n", "p2", "=", "1", "\n", "type", "=", "'error'", "\n", "t", "=", "40", "\n", "drop_rate", "=", "{", "\"I\"", ":", "0.005", ",", "\"II\"", ":", "0.005", "}", "\n", "epochs", "=", "350", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "modelx", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "'classification_head_before_activation'", ")", ".", "output", ")", "\n", "clip_min", ",", "clip_max", "=", "0", ",", "1", "\n", "v_noise", "=", "0.025", "\n", "p1", "=", "1", "\n", "p2", "=", "1", "\n", "type", "=", "'prob'", "\n", "t", "=", "40", "\n", "drop_rate", "=", "{", "\"I\"", ":", "0.005", ",", "\"II\"", ":", "0.005", "}", "\n", "epochs", "=", "350", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "modelx", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "'classification_head_before_activation'", ")", ".", "output", ")", "\n", "# clip_min, clip_max = -2.117904,2.64", "\n", "clip_min", ",", "clip_max", "=", "0", ",", "1", "\n", "v_noise", "=", "0.025", "\n", "p1", "=", "1", "\n", "p2", "=", "1", "\n", "type", "=", "'error'", "\n", "t", "=", "10", "\n", "drop_rate", "=", "{", "\"I\"", ":", "0.005", ",", "\"II\"", ":", "0.005", "}", "\n", "epochs", "=", "350", "\n", "\n", "# Load the dataset", "\n", "", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "=", "model_class", ".", "x_train", ",", "model_class", ".", "y_train", ",", "model_class", ".", "x_test", ",", "model_class", ".", "y_test", "\n", "val_size", "=", "5000", "\n", "x_val", "=", "X_train", "[", ":", "val_size", ",", ":", ",", ":", ",", ":", "]", "\n", "y_val", "=", "Y_train", "[", ":", "val_size", "]", "\n", "X_train", "=", "X_train", "[", "val_size", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "Y_train", "=", "Y_train", "[", "val_size", ":", "]", "\n", "\n", "#Train detector -- if already trained, load it", "\n", "detector_i_filename", "=", "'{}_magnet_detector_i.h5'", ".", "format", "(", "args", ".", "dataset", ")", "\n", "detector_ii_filename", "=", "'{}_magnet_detector_ii.h5'", ".", "format", "(", "args", ".", "dataset", ")", "\n", "im_dim", "=", "[", "X_train", ".", "shape", "[", "1", "]", ",", "X_train", ".", "shape", "[", "2", "]", ",", "X_train", ".", "shape", "[", "3", "]", "]", "\n", "detector_I", "=", "DAE", "(", "im_dim", ",", "[", "3", ",", "\"average\"", ",", "3", "]", ",", "v_noise", "=", "v_noise", ",", "activation", "=", "\"sigmoid\"", ",", "model_dir", "=", "magnet_results_dir", ",", "reg_strength", "=", "1e-9", ")", "\n", "detector_II", "=", "DAE", "(", "im_dim", ",", "[", "3", "]", ",", "v_noise", "=", "v_noise", ",", "activation", "=", "\"sigmoid\"", ",", "model_dir", "=", "magnet_results_dir", ",", "reg_strength", "=", "1e-9", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "'{}{}'", ".", "format", "(", "magnet_results_dir", ",", "detector_i_filename", ")", ")", ":", "\n", "        ", "detector_I", ".", "load", "(", "detector_i_filename", ")", "\n", "", "else", ":", "\n", "        ", "detector_I", ".", "train", "(", "X_train", ",", "X_test", ",", "detector_i_filename", ",", "clip_min", ",", "clip_max", ",", "num_epochs", "=", "epochs", ",", "batch_size", "=", "256", ",", "if_save", "=", "True", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "'{}{}'", ".", "format", "(", "magnet_results_dir", ",", "detector_ii_filename", ")", ")", ":", "\n", "        ", "detector_II", ".", "load", "(", "detector_ii_filename", ")", "\n", "", "else", ":", "\n", "        ", "detector_II", ".", "train", "(", "X_train", ",", "X_test", ",", "detector_ii_filename", ",", "clip_min", ",", "clip_max", ",", "num_epochs", "=", "epochs", ",", "batch_size", "=", "256", ",", "if_save", "=", "True", ")", "\n", "\n", "# Refine the normal, noisy and adversarial sets to only include samples for", "\n", "# which the original version was correctly classified by the model", "\n", "", "preds_test", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "inds_correct", "=", "np", ".", "where", "(", "preds_test", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "print", "(", "\"Number of correctly predict images: %s\"", "%", "(", "len", "(", "inds_correct", ")", ")", ")", "\n", "X_test", "=", "X_test", "[", "inds_correct", "]", "\n", "Y_test", "=", "Y_test", "[", "inds_correct", "]", "\n", "print", "(", "\"X_test: \"", ",", "X_test", ".", "shape", ")", "\n", "\n", "#Make AEs ready", "\n", "classifier", "=", "Classifier", "(", "modelx", ",", "model_class", ".", "num_classes", ")", "\n", "if", "type", "==", "'error'", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "            ", "detect_I", "=", "AEDetector", "(", "detector_I", ".", "model", ",", "p", "=", "p1", ")", "\n", "detect_II", "=", "AEDetector", "(", "detector_I", ".", "model", ",", "p", "=", "p2", ")", "\n", "reformer", "=", "SimpleReformer", "(", "detector_II", ".", "model", ")", "\n", "", "else", ":", "\n", "            ", "detect_I", "=", "AEDetector", "(", "detector_I", ".", "model", ",", "p", "=", "p1", ")", "\n", "detect_II", "=", "AEDetector", "(", "detector_II", ".", "model", ",", "p", "=", "p2", ")", "\n", "reformer", "=", "SimpleReformer", "(", "detector_I", ".", "model", ")", "\n", "", "detector_dict", "=", "dict", "(", ")", "\n", "detector_dict", "[", "\"I\"", "]", "=", "detect_I", "\n", "detector_dict", "[", "\"II\"", "]", "=", "detect_II", "\n", "", "elif", "type", "==", "'prob'", ":", "\n", "        ", "reformer", "=", "SimpleReformer", "(", "detector_I", ".", "model", ")", "\n", "reformer2", "=", "SimpleReformer", "(", "detector_II", ".", "model", ")", "\n", "detect_I", "=", "DBDetector", "(", "reformer", ",", "reformer2", ",", "classifier", ",", "T", "=", "t", ")", "\n", "detector_dict", "=", "dict", "(", ")", "\n", "detector_dict", "[", "\"I\"", "]", "=", "detect_I", "\n", "\n", "", "operator", "=", "Operator", "(", "x_val", ",", "X_test", ",", "Y_test", ",", "classifier", ",", "detector_dict", ",", "reformer", ")", "\n", "\n", "## Evaluate detector", "\n", "#on adversarial attack", "\n", "Y_test_copy", "=", "Y_test", "\n", "X_test_copy", "=", "X_test", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "        ", "Y_test", "=", "Y_test_copy", "\n", "X_test", "=", "X_test_copy", "\n", "results_all", "=", "[", "]", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "if", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "            ", "Y_test", "=", "model_class", ".", "y_test", "[", "0", ":", "2700", "]", "\n", "X_test", "=", "model_class", ".", "x_test", "[", "0", ":", "2700", "]", "\n", "cwi_inds", "=", "inds_correct", "[", "inds_correct", "<", "2700", "]", "\n", "Y_test", "=", "Y_test", "[", "cwi_inds", "]", "\n", "X_test", "=", "X_test", "[", "cwi_inds", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "cwi_inds", "]", "\n", "", "else", ":", "\n", "            ", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "\n", "", "pred_adv", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "Y_test", ",", "verbose", "=", "0", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "X_test_adv_success", "=", "X_test_adv", "[", "inds_success", "]", "\n", "Y_test_success", "=", "Y_test", "[", "inds_success", "]", "\n", "X_test_adv_fail", "=", "X_test_adv", "[", "inds_fail", "]", "\n", "Y_test_fail", "=", "Y_test", "[", "inds_fail", "]", "\n", "\n", "# prepare X and Y for detectors", "\n", "X_all", "=", "np", ".", "concatenate", "(", "[", "X_test", ",", "X_test_adv", "]", ")", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "X_test", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "X_test", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_success", "=", "np", ".", "concatenate", "(", "[", "X_test", "[", "inds_success", "]", ",", "X_test_adv_success", "]", ")", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_fail", "=", "np", ".", "concatenate", "(", "[", "X_test", "[", "inds_fail", "]", ",", "X_test_adv_fail", "]", ")", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "\n", "# --- get thresholds per detector", "\n", "testAttack", "=", "AttackData", "(", "X_test_adv", ",", "np", ".", "argmax", "(", "Y_test", ",", "axis", "=", "1", ")", ",", "attack", ")", "\n", "evaluator", "=", "Evaluator", "(", "operator", ",", "testAttack", ")", "\n", "thrs", "=", "evaluator", ".", "operator", ".", "get_thrs", "(", "drop_rate", ")", "\n", "\n", "#For Y_all ", "\n", "Y_all_pred", ",", "Y_all_pred_score", "=", "test", "(", "detector_dict", ",", "X_all", ",", "thrs", ")", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "Y_all_pred_score", "[", "0", "]", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "            ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "Y_success_pred", ",", "Y_success_pred_score", "=", "test", "(", "detector_dict", ",", "X_success", ",", "thrs", ")", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "Y_success_pred_score", "[", "0", "]", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "            ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "Y_fail_pred", ",", "Y_fail_pred_score", "=", "test", "(", "detector_dict", ",", "X_fail", ",", "thrs", ")", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "Y_fail_pred_score", "[", "0", "]", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_{}.csv'", ".", "format", "(", "magnet_results_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "            ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'{:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n            - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n", "#Gray box attack ", "\n", "## Evaluate detector", "\n", "#on adversarial attack", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "        ", "if", "not", "(", "attack", "==", "'hop'", "or", "attack", "==", "'sa'", "or", "attack", "==", "'sta'", "or", "(", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ")", ")", ":", "\n", "            ", "Y_test", "=", "Y_test_copy", "\n", "X_test", "=", "X_test_copy", "\n", "results_all", "=", "[", "]", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "if", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "                ", "Y_test", "=", "model_class", ".", "y_test", "[", "0", ":", "2700", "]", "\n", "X_test", "=", "model_class", ".", "x_test", "[", "0", ":", "2700", "]", "\n", "cwi_inds", "=", "inds_correct", "[", "inds_correct", "<", "2700", "]", "\n", "Y_test", "=", "Y_test", "[", "cwi_inds", "]", "\n", "X_test", "=", "X_test", "[", "cwi_inds", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "cwi_inds", "]", "\n", "", "else", ":", "\n", "                ", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "\n", "", "pred_adv", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "Y_test", ",", "verbose", "=", "0", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "pred_adv", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "X_test_adv_success", "=", "X_test_adv", "[", "inds_success", "]", "\n", "Y_test_success", "=", "Y_test", "[", "inds_success", "]", "\n", "X_test_adv_fail", "=", "X_test_adv", "[", "inds_fail", "]", "\n", "Y_test_fail", "=", "Y_test", "[", "inds_fail", "]", "\n", "\n", "# prepare X and Y for detectors", "\n", "X_all", "=", "np", ".", "concatenate", "(", "[", "X_test", ",", "X_test_adv", "]", ")", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "X_test", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "X_test", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_success", "=", "np", ".", "concatenate", "(", "[", "X_test", "[", "inds_success", "]", ",", "X_test_adv_success", "]", ")", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "X_fail", "=", "np", ".", "concatenate", "(", "[", "X_test", "[", "inds_fail", "]", ",", "X_test_adv_fail", "]", ")", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", "]", ")", "\n", "\n", "# --- get thresholds per detector", "\n", "testAttack", "=", "AttackData", "(", "X_test_adv", ",", "np", ".", "argmax", "(", "Y_test", ",", "axis", "=", "1", ")", ",", "attack", ")", "\n", "evaluator", "=", "Evaluator", "(", "operator", ",", "testAttack", ")", "\n", "thrs", "=", "evaluator", ".", "operator", ".", "get_thrs", "(", "drop_rate", ")", "\n", "\n", "#For Y_all ", "\n", "Y_all_pred", ",", "Y_all_pred_score", "=", "test", "(", "detector_dict", ",", "X_all", ",", "thrs", ")", "\n", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "Y_all_pred_score", "[", "0", "]", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_success", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "                ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "Y_success_pred", ",", "Y_success_pred_score", "=", "test", "(", "detector_dict", ",", "X_success", ",", "thrs", ")", "\n", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "Y_success_pred_score", "[", "0", "]", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#for Y_fail", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "                ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "Y_fail_pred", ",", "Y_fail_pred_score", "=", "test", "(", "detector_dict", ",", "X_fail", ",", "thrs", ")", "\n", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "Y_fail_pred_score", "[", "0", "]", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_gray_{}.csv'", ".", "format", "(", "magnet_results_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                    ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'Gray-box attack {}- accuracy of pretrained model: {:7.2f}% \\\n                - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_sfad.selective_loss": [[10, 16], ["K.categorical_crossentropy", "K.repeat_elements", "K.maximum", "K.mean"], "function", ["None"], ["def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "\n", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "model_class_v7b", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "lamda", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_sfad.selective_acc": [[17, 23], ["K.cast", "K.sum", "K.cast", "K.greater", "K.floatx", "K.sum", "K.floatx", "K.cast", "K.equal", "K.floatx", "K.argmax", "K.argmax"], "function", ["None"], ["", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.995", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_sfad.coverage": [[24, 27], ["K.cast", "K.mean", "K.greater", "K.floatx"], "function", ["None"], ["", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.995", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_sfad.main": [[28, 459], ["os.path.isfile", "sfad_classifier_b.model_class.no_defense_model.predict", "np.concatenate", "np.percentile", "np.percentile", "np.percentile", "np.percentile", "np.percentile", "np.percentile", "np.percentile", "np.percentile", "np.array", "print", "os.path.isfile", "sfad_classifier_a", "sfad_classifier_b", "sfad_classifier_b", "np.where", "sfad_classifier_b.model.predict", "np.max", "np.max", "np.max", "np.max", "np.max", "np.logical_and", "np.unique", "np.load", "sfad_classifier_b.model_class.no_defense_model.evaluate", "sfad_classifier_b.model_class.no_defense_model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "np.concatenate", "np.logical_and", "np.array", "np.zeros", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "print", "DATASETS.index", "sfad_classifier_b.model_1.predict", "sfad_classifier_b.model_2.predict", "sfad_classifier_b.model_3.predict", "np.logical_and", "np.logical_and", "enumerate", "enumerate", "enumerate", "np.concatenate", "np.where", "np.where", "len", "l_1.reshape.reshape", "len", "l_2.reshape.reshape", "len", "l_3.reshape.reshape", "sfad_classifier_b.model_1.predict", "sfad_classifier_b.model_2.predict", "sfad_classifier_b.model_3.predict", "sfad_classifier_b.model.predict", "np.logical_and", "np.logical_and", "np.unique", "np.zeros", "np.zeros", "len", "len", "len", "len", "list", "list", "len", "results_all.append", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "np.load", "sfad_classifier_b.model_class.no_defense_model.evaluate", "sfad_classifier_b.model_class.no_defense_model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "np.concatenate", "np.logical_and", "np.array", "np.zeros", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "sfad_b.model_class.no_defense_model.predict.argmax", "np.max", "len", "l_1.reshape.reshape", "len", "l_2.reshape.reshape", "len", "l_3.reshape.reshape", "enumerate", "enumerate", "enumerate", "np.concatenate", "len", "len", "np.zeros", "np.ones", "len", "len", "len", "list", "list", "len", "len", "len", "list", "list", "csv.DictWriter.writerow", "np.where", "np.where", "len", "l_1.reshape.reshape", "len", "l_2.reshape.reshape", "len", "l_3.reshape.reshape", "sfad_classifier_b.model_1.predict", "sfad_classifier_b.model_2.predict", "sfad_classifier_b.model_3.predict", "sfad_classifier_b.model.predict", "np.logical_and", "np.logical_and", "np.unique", "np.zeros", "np.zeros", "len", "len", "len", "len", "list", "list", "len", "results_all.append", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "DATASETS.index", "DATASETS.index", "DATASETS.index", "np.argmax", "np.argmax", "sfad_b.model_class.no_defense_model.predict.argmax", "y_test.argmax", "sfad_b.model_class.no_defense_model.predict.argmax", "y_test.argmax", "sfad_classifier_b.model_class.no_defense_model.get_layer", "sfad_classifier_b.model_class.no_defense_model.get_layer", "sfad_classifier_b.model_class.no_defense_model.get_layer", "np.max", "len", "len", "np.zeros", "np.ones", "np.zeros", "np.ones", "len", "l_1.reshape.reshape", "len", "l_2.reshape.reshape", "len", "l_3.reshape.reshape", "enumerate", "enumerate", "enumerate", "np.concatenate", "len", "len", "np.zeros", "np.ones", "len", "len", "len", "list", "list", "len", "len", "len", "list", "list", "csv.DictWriter.writerow", "np.argmax", "np.argmax", "len", "len", "len", "len", "sfad_b.model_class.no_defense_model.predict.argmax", "y_test.argmax", "sfad_b.model_class.no_defense_model.predict.argmax", "y_test.argmax", "sfad_classifier_b.model_class.no_defense_model.get_layer", "sfad_classifier_b.model_class.no_defense_model.get_layer", "sfad_classifier_b.model_class.no_defense_model.get_layer", "np.max", "len", "len", "np.zeros", "np.ones", "np.zeros", "np.ones", "np.argmax", "np.argmax", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "in", "DATASETS", ",", "\"Dataset parameter must be either 'mnist', 'cifar', 'svhn', or 'tiny'\"", "\n", "ATTACKS", "=", "ATTACK", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "'{}cnn_{}.h5'", ".", "format", "(", "checkpoints_dir", ",", "args", ".", "dataset", ")", ")", ",", "'model file not found... must first train model using train_model.py.'", "\n", "\n", "no_defense_h5", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", "\n", "filename_a", "=", "'sfad_{}_a.h5'", ".", "format", "(", "args", ".", "dataset", ")", "\n", "filename_b", "=", "'sfad_{}_b.h5'", ".", "format", "(", "args", ".", "dataset", ")", "\n", "mode", "=", "'train'", "\n", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "from", "sfad", ".", "sfad_mnist_b", "import", "sfad_b", "as", "sfad_classifier_b", "\n", "from", "sfad", ".", "sfad_mnist_a", "import", "sfad_a", "as", "sfad_classifier_a", "\n", "coverage", "=", "1.0", "\n", "coverage_th_a", "=", "0.995", "\n", "coverage_th_b", "=", "0.7", "\n", "reject_ratio_c", "=", "1.2", "\n", "reject_ratio_s", "=", "6", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "from", "sfad", ".", "sfad_cifar_b", "import", "sfad_b", "as", "sfad_classifier_b", "\n", "from", "sfad", ".", "sfad_cifar_a", "import", "sfad_a", "as", "sfad_classifier_a", "\n", "coverage", "=", "0.9", "\n", "coverage_th_a", "=", "0.9", "\n", "coverage_th_b", "=", "0.7", "\n", "reject_ratio_c", "=", "9", "\n", "reject_ratio_s", "=", "4", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "from", "sfad", ".", "sfad_svhn_b", "import", "sfad_b", "as", "sfad_classifier_b", "\n", "from", "sfad", ".", "sfad_svhn_a", "import", "sfad_a", "as", "sfad_classifier_a", "\n", "coverage", "=", "0.9", "\n", "coverage_th_a", "=", "0.9", "\n", "coverage_th_b", "=", "0.7", "\n", "reject_ratio_c", "=", "3", "\n", "reject_ratio_s", "=", "4", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "from", "sfad", ".", "sfad_tiny_b", "import", "sfad_b", "as", "sfad_classifier_b", "\n", "from", "sfad", ".", "sfad_tiny_a", "import", "sfad_a", "as", "sfad_classifier_a", "\n", "coverage", "=", "0.8", "\n", "coverage_th_a", "=", "0.5", "\n", "coverage_th_b", "=", "0.5", "\n", "reject_ratio_c", "=", "3", "\n", "reject_ratio_s", "=", "2.5", "\n", "\n", "", "detector_b_path", "=", "'{}{}'", ".", "format", "(", "sfad_results_dir", ",", "filename_b", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "detector_b_path", ")", ":", "\n", "        ", "sfad_a", "=", "sfad_classifier_a", "(", "mode", "=", "mode", ",", "no_defense_h5", "=", "no_defense_h5", ",", "filename", "=", "filename_a", ",", "coverage", "=", "coverage", ",", "coverage_th", "=", "coverage_th_a", ")", "\n", "sfad_b", "=", "sfad_classifier_b", "(", "mode", "=", "mode", ",", "no_defense_h5", "=", "no_defense_h5", ",", "filename_a", "=", "filename_a", ",", "filename_b", "=", "filename_b", ",", "coverage", "=", "coverage", ",", "coverage_th", "=", "coverage_th_b", ")", "\n", "", "else", ":", "\n", "        ", "mode", "=", "'load'", "\n", "sfad_b", "=", "sfad_classifier_b", "(", "mode", "=", "mode", ",", "no_defense_h5", "=", "no_defense_h5", ",", "filename_a", "=", "filename_a", ",", "filename_b", "=", "filename_b", ",", "coverage", "=", "coverage", ",", "coverage_th", "=", "coverage_th_b", ")", "\n", "\n", "", "l1_name", "=", "layer_names", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "[", "0", "]", "[", "0", "]", "\n", "l2_name", "=", "layer_names", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "[", "1", "]", "[", "0", "]", "\n", "l3_name", "=", "layer_names", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "[", "2", "]", "[", "0", "]", "\n", "#get correctly classified samples", "\n", "predict_cnn", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "predict", "(", "sfad_b", ".", "model_class", ".", "x_test", ")", "\n", "inds_correct", "=", "np", ".", "where", "(", "predict_cnn", ".", "argmax", "(", "axis", "=", "1", ")", "==", "sfad_b", ".", "y_test_labels", ")", "[", "0", "]", "\n", "\n", "#clean samples and thresholds calculations", "\n", "model_a_1_clean", "=", "sfad_b", ".", "model_1", ".", "predict", "(", "sfad_b", ".", "model_class", ".", "l_1_test", ")", "[", "0", "]", "[", "inds_correct", ",", ":", "]", "\n", "model_a_2_clean", "=", "sfad_b", ".", "model_2", ".", "predict", "(", "sfad_b", ".", "model_class", ".", "l_2_test", ")", "[", "0", "]", "[", "inds_correct", ",", ":", "]", "\n", "model_a_3_clean", "=", "sfad_b", ".", "model_3", ".", "predict", "(", "sfad_b", ".", "model_class", ".", "l_3_test", ")", "[", "0", "]", "[", "inds_correct", ",", ":", "]", "\n", "x_clean", "=", "np", ".", "concatenate", "(", "(", "model_a_1_clean", "[", ":", ",", ":", "-", "1", "]", ",", "model_a_2_clean", "[", ":", ",", ":", "-", "1", "]", ",", "model_a_3_clean", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "model_b_clean", "=", "sfad_b", ".", "model", ".", "predict", "(", "x_clean", ")", "[", "0", "]", "\n", "\n", "#thresholds", "\n", "th_a_1_c", "=", "np", ".", "percentile", "(", "np", ".", "max", "(", "model_a_1_clean", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "1", ")", ",", "reject_ratio_c", ")", "\n", "th_a_2_c", "=", "np", ".", "percentile", "(", "np", ".", "max", "(", "model_a_2_clean", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "1", ")", ",", "reject_ratio_c", ")", "\n", "th_a_3_c", "=", "np", ".", "percentile", "(", "np", ".", "max", "(", "model_a_3_clean", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "1", ")", ",", "reject_ratio_c", ")", "\n", "th_b_c", "=", "np", ".", "percentile", "(", "np", ".", "max", "(", "model_b_clean", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "1", ")", ",", "reject_ratio_c", ")", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "th_c", "=", "th_b_c", "\n", "", "else", ":", "\n", "        ", "th_c", "=", "np", ".", "max", "(", "[", "th_a_1_c", ",", "th_a_2_c", ",", "th_a_3_c", ",", "th_b_c", "]", ")", "\n", "\n", "", "th_a_1_s", "=", "np", ".", "percentile", "(", "model_a_1_clean", "[", ":", ",", "-", "1", "]", ",", "reject_ratio_s", ")", "\n", "th_a_2_s", "=", "np", ".", "percentile", "(", "model_a_2_clean", "[", ":", ",", "-", "1", "]", ",", "reject_ratio_s", ")", "\n", "th_a_3_s", "=", "np", ".", "percentile", "(", "model_a_3_clean", "[", ":", ",", "-", "1", "]", ",", "reject_ratio_s", ")", "\n", "th_b_s", "=", "np", ".", "percentile", "(", "model_b_clean", "[", ":", ",", "-", "1", "]", ",", "reject_ratio_s", ")", "\n", "\n", "#selection detection", "\n", "selecta1", "=", "model_a_1_clean", "[", ":", ",", "-", "1", "]", ">", "th_a_1_s", "\n", "selecta2", "=", "model_a_2_clean", "[", ":", ",", "-", "1", "]", ">", "th_a_2_s", "\n", "selecta3", "=", "model_a_3_clean", "[", ":", ",", "-", "1", "]", ">", "th_a_3_s", "\n", "selectb", "=", "model_b_clean", "[", ":", ",", "-", "1", "]", ">", "th_b_s", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "select", "=", "selectb", "\n", "", "else", ":", "\n", "        ", "select", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "selectb", ",", "selecta1", ")", ",", "np", ".", "logical_and", "(", "selecta2", ",", "selecta3", ")", ")", "\n", "", "select_inds_clean", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "select", ")", "if", "v", "==", "False", "]", "\n", "\n", "#confidense detection", "\n", "reject_inds_clean", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "model_b_clean", ")", "if", "np", ".", "max", "(", "model_b_clean", "[", "i", ",", ":", "-", "1", "]", ")", "<=", "th_c", "]", "\n", "\n", "#ensemble detection", "\n", "ensemble_inds_clean", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "model_b_clean", ")", "if", "np", ".", "argmax", "(", "predict_cnn", "[", "inds_correct", "]", ",", "axis", "=", "1", ")", "[", "i", "]", "!=", "np", ".", "argmax", "(", "model_b_clean", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "1", ")", "[", "i", "]", "]", "\n", "\n", "#all detections", "\n", "reject_all_clean", "=", "np", ".", "array", "(", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "select_inds_clean", ",", "reject_inds_clean", ",", "ensemble_inds_clean", ")", ",", "axis", "=", "0", ")", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "## Evaluate detector - on adversarial attack", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "        ", "results_all", "=", "[", "]", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'%s%s_%s.npy'", "%", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "\n", "if", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "            ", "y_test", "=", "sfad_b", ".", "y_test", "[", "0", ":", "2700", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "0", ":", "2700", "]", "\n", "cwi_inds", "=", "inds_correct", "[", "inds_correct", "<", "2700", "]", "\n", "y_test", "=", "y_test", "[", "cwi_inds", ",", ":", "-", "1", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "cwi_inds", "]", "\n", "", "else", ":", "\n", "            ", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "y_test", "=", "sfad_b", ".", "y_test", "[", "inds_correct", ",", ":", "-", "1", "]", "\n", "\n", "", "loss", ",", "acc_suc", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "evaluate", "(", "X_test_adv", ",", "y_test", ",", "verbose", "=", "0", ")", "\n", "X_test_adv_pred", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "predict", "(", "X_test_adv", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "==", "y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "\n", "intermediate_layer_model", "=", "Model", "(", "inputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "input", ",", "outputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "get_layer", "(", "l1_name", ")", ".", "output", ")", "\n", "l_1", "=", "intermediate_layer_model", ".", "predict", "(", "X_test_adv", ")", "\n", "if", "len", "(", "l_1", ".", "shape", ")", "==", "2", ":", "\n", "            ", "l_1", "=", "l_1", ".", "reshape", "(", "l_1", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "l_1", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "l_1", ".", "shape", ")", "==", "4", ":", "\n", "            ", "l_1", "=", "l_1", ".", "reshape", "(", "l_1", ".", "shape", "[", "0", "]", ",", "l_1", ".", "shape", "[", "1", "]", ",", "l_1", ".", "shape", "[", "2", "]", ",", "l_1", ".", "shape", "[", "3", "]", ")", "\n", "", "intermediate_layer_model", "=", "Model", "(", "inputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "input", ",", "outputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "get_layer", "(", "l2_name", ")", ".", "output", ")", "\n", "l_2", "=", "intermediate_layer_model", ".", "predict", "(", "X_test_adv", ")", "\n", "if", "len", "(", "l_2", ".", "shape", ")", "==", "2", ":", "\n", "            ", "l_2", "=", "l_2", ".", "reshape", "(", "l_2", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "l_2", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "l_2", ".", "shape", ")", "==", "4", ":", "\n", "            ", "l_2", "=", "l_2", ".", "reshape", "(", "l_2", ".", "shape", "[", "0", "]", ",", "l_2", ".", "shape", "[", "1", "]", ",", "l_2", ".", "shape", "[", "2", "]", ",", "l_2", ".", "shape", "[", "3", "]", ")", "\n", "", "intermediate_layer_model", "=", "Model", "(", "inputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "input", ",", "outputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "get_layer", "(", "l3_name", ")", ".", "output", ")", "\n", "l_3", "=", "intermediate_layer_model", ".", "predict", "(", "X_test_adv", ")", "\n", "if", "len", "(", "l_3", ".", "shape", ")", "==", "2", ":", "\n", "            ", "l_3", "=", "l_3", ".", "reshape", "(", "l_3", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "l_3", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "l_1", ".", "shape", ")", "==", "4", ":", "\n", "            ", "l_3", "=", "l_3", ".", "reshape", "(", "l_3", ".", "shape", "[", "0", "]", ",", "l_3", ".", "shape", "[", "1", "]", ",", "l_3", ".", "shape", "[", "2", "]", ",", "l_3", ".", "shape", "[", "3", "]", ")", "\n", "", "model_a_1_adv", "=", "sfad_b", ".", "model_1", ".", "predict", "(", "l_1", ")", "[", "0", "]", "\n", "model_a_2_adv", "=", "sfad_b", ".", "model_2", ".", "predict", "(", "l_2", ")", "[", "0", "]", "\n", "model_a_3_adv", "=", "sfad_b", ".", "model_3", ".", "predict", "(", "l_3", ")", "[", "0", "]", "\n", "x_adv", "=", "np", ".", "concatenate", "(", "(", "model_a_1_adv", "[", ":", ",", ":", "-", "1", "]", ",", "model_a_2_adv", "[", ":", ",", ":", "-", "1", "]", ",", "model_a_3_adv", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "model_b_adv", "=", "sfad_b", ".", "model", ".", "predict", "(", "x_adv", ")", "[", "0", "]", "\n", "#selection detection", "\n", "selecta1", "=", "model_a_1_adv", "[", ":", ",", "-", "1", "]", ">", "th_a_1_s", "\n", "selecta2", "=", "model_a_2_adv", "[", ":", ",", "-", "1", "]", ">", "th_a_2_s", "\n", "selecta3", "=", "model_a_3_adv", "[", ":", ",", "-", "1", "]", ">", "th_a_3_s", "\n", "selectb", "=", "model_b_adv", "[", ":", ",", "-", "1", "]", ">", "th_b_s", "\n", "select", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "selectb", ",", "selecta1", ")", ",", "np", ".", "logical_and", "(", "selecta2", ",", "selecta3", ")", ")", "\n", "# select = np.logical_and(selecta1, np.logical_and(selecta2, selecta3))", "\n", "# select = selectb", "\n", "select_inds_adv", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "select", ")", "if", "v", "==", "False", "]", "\n", "\n", "#confidense detection", "\n", "reject_inds_adv", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "model_b_adv", ")", "if", "np", ".", "max", "(", "model_b_adv", "[", "i", ",", ":", "-", "1", "]", ")", "<=", "th_c", "]", "\n", "\n", "#ensemble detection", "\n", "ensemble_inds_adv", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "model_b_adv", ")", "if", "np", ".", "argmax", "(", "X_test_adv_pred", ",", "axis", "=", "1", ")", "[", "i", "]", "!=", "np", ".", "argmax", "(", "model_b_adv", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "1", ")", "[", "i", "]", "]", "\n", "\n", "#all detections", "\n", "reject_all_adv", "=", "np", ".", "array", "(", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "select_inds_adv", ",", "reject_inds_adv", ",", "ensemble_inds_adv", ")", ",", "axis", "=", "0", ")", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "#evaluation", "\n", "#For Y_all", "\n", "if", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "            ", "y_clean_pred", "=", "np", ".", "zeros", "(", "len", "(", "x_adv", ")", ",", "dtype", "=", "bool", ")", "\n", "#y_clean_pred[reject_all_clean] = True", "\n", "", "else", ":", "\n", "            ", "y_clean_pred", "=", "np", ".", "zeros", "(", "len", "(", "x_adv", ")", ",", "dtype", "=", "bool", ")", "\n", "y_clean_pred", "[", "reject_all_clean", "]", "=", "True", "\n", "", "y_adv_pred", "=", "np", ".", "zeros", "(", "len", "(", "x_adv", ")", ",", "dtype", "=", "bool", ")", "\n", "y_adv_pred", "[", "reject_all_adv", "]", "=", "True", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "x_adv", ")", ",", "dtype", "=", "int", ")", ",", "np", ".", "ones", "(", "len", "(", "x_adv", ")", ",", "dtype", "=", "int", ")", ")", ")", "\n", "Y_all_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_pred", ",", "y_adv_pred", ")", ")", "\n", "# Y_all_pred_score=np.concatenate((model_b_clean[:, -1], model_b_adv[:, -1]))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_all_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "            ", "if", "Y_all_pred", "[", "i", "]", "==", "0", ":", "\n", "                ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "dec", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#For sucsess", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "            ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "y_clean_success_pred", "=", "y_clean_pred", "[", "inds_success", "]", "\n", "y_adv_success_pred", "=", "y_adv_pred", "[", "inds_success", "]", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ")", ")", "\n", "Y_success_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_success_pred", ",", "y_adv_success_pred", ")", ")", "\n", "# Y_success_pred_score=np.concatenate((model_b_clean[inds_success, -1], model_b_adv[inds_success, -1]))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_success_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "                ", "if", "Y_success_pred", "[", "i", "]", "==", "0", ":", "\n", "                    ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "dec", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#For sucsess", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "            ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "y_clean_fail_pred", "=", "y_clean_pred", "[", "inds_fail", "]", "\n", "y_adv_fail_pred", "=", "y_adv_pred", "[", "inds_fail", "]", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ")", ")", "\n", "Y_fail_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_fail_pred", ",", "y_adv_fail_pred", ")", ")", "\n", "# Y_fail_pred_score=np.concatenate((model_b_clean[inds_fail, -1], model_b_adv[inds_fail, -1]))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_fail_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "                ", "if", "Y_fail_pred", "[", "i", "]", "==", "0", ":", "\n", "                    ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "dec", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_{}.csv'", ".", "format", "(", "sfad_results_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "            ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'{:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n            - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n", "## Evaluate detector - on adversarial attack", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "        ", "if", "not", "(", "attack", "==", "'hop'", "or", "attack", "==", "'sa'", "or", "attack", "==", "'sta'", "or", "(", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ")", ")", ":", "\n", "            ", "results_all", "=", "[", "]", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'%s%s_%s.npy'", "%", "(", "adv_data_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "\n", "if", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "                ", "y_test", "=", "sfad_b", ".", "y_test", "[", "0", ":", "2700", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "0", ":", "2700", "]", "\n", "cwi_inds", "=", "inds_correct", "[", "inds_correct", "<", "2700", "]", "\n", "y_test", "=", "y_test", "[", "cwi_inds", ",", ":", "-", "1", "]", "\n", "X_test_adv", "=", "X_test_adv", "[", "cwi_inds", "]", "\n", "", "else", ":", "\n", "                ", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "y_test", "=", "sfad_b", ".", "y_test", "[", "inds_correct", ",", ":", "-", "1", "]", "\n", "\n", "", "loss", ",", "acc_suc", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "evaluate", "(", "X_test_adv", ",", "y_test", ",", "verbose", "=", "0", ")", "\n", "X_test_adv_pred", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "predict", "(", "X_test_adv", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "==", "y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "\n", "intermediate_layer_model", "=", "Model", "(", "inputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "input", ",", "outputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "get_layer", "(", "l1_name", ")", ".", "output", ")", "\n", "l_1", "=", "intermediate_layer_model", ".", "predict", "(", "X_test_adv", ")", "\n", "if", "len", "(", "l_1", ".", "shape", ")", "==", "2", ":", "\n", "                ", "l_1", "=", "l_1", ".", "reshape", "(", "l_1", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "l_1", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "l_1", ".", "shape", ")", "==", "4", ":", "\n", "                ", "l_1", "=", "l_1", ".", "reshape", "(", "l_1", ".", "shape", "[", "0", "]", ",", "l_1", ".", "shape", "[", "1", "]", ",", "l_1", ".", "shape", "[", "2", "]", ",", "l_1", ".", "shape", "[", "3", "]", ")", "\n", "", "intermediate_layer_model", "=", "Model", "(", "inputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "input", ",", "outputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "get_layer", "(", "l2_name", ")", ".", "output", ")", "\n", "l_2", "=", "intermediate_layer_model", ".", "predict", "(", "X_test_adv", ")", "\n", "if", "len", "(", "l_2", ".", "shape", ")", "==", "2", ":", "\n", "                ", "l_2", "=", "l_2", ".", "reshape", "(", "l_2", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "l_2", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "l_2", ".", "shape", ")", "==", "4", ":", "\n", "                ", "l_2", "=", "l_2", ".", "reshape", "(", "l_2", ".", "shape", "[", "0", "]", ",", "l_2", ".", "shape", "[", "1", "]", ",", "l_2", ".", "shape", "[", "2", "]", ",", "l_2", ".", "shape", "[", "3", "]", ")", "\n", "", "intermediate_layer_model", "=", "Model", "(", "inputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "input", ",", "outputs", "=", "sfad_b", ".", "model_class", ".", "no_defense_model", ".", "get_layer", "(", "l3_name", ")", ".", "output", ")", "\n", "l_3", "=", "intermediate_layer_model", ".", "predict", "(", "X_test_adv", ")", "\n", "if", "len", "(", "l_3", ".", "shape", ")", "==", "2", ":", "\n", "                ", "l_3", "=", "l_3", ".", "reshape", "(", "l_3", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "l_3", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "l_1", ".", "shape", ")", "==", "4", ":", "\n", "                ", "l_3", "=", "l_3", ".", "reshape", "(", "l_3", ".", "shape", "[", "0", "]", ",", "l_3", ".", "shape", "[", "1", "]", ",", "l_3", ".", "shape", "[", "2", "]", ",", "l_3", ".", "shape", "[", "3", "]", ")", "\n", "", "model_a_1_adv", "=", "sfad_b", ".", "model_1", ".", "predict", "(", "l_1", ")", "[", "0", "]", "\n", "model_a_2_adv", "=", "sfad_b", ".", "model_2", ".", "predict", "(", "l_2", ")", "[", "0", "]", "\n", "model_a_3_adv", "=", "sfad_b", ".", "model_3", ".", "predict", "(", "l_3", ")", "[", "0", "]", "\n", "x_adv", "=", "np", ".", "concatenate", "(", "(", "model_a_1_adv", "[", ":", ",", ":", "-", "1", "]", ",", "model_a_2_adv", "[", ":", ",", ":", "-", "1", "]", ",", "model_a_3_adv", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "model_b_adv", "=", "sfad_b", ".", "model", ".", "predict", "(", "x_adv", ")", "[", "0", "]", "\n", "#selection detection", "\n", "selecta1", "=", "model_a_1_adv", "[", ":", ",", "-", "1", "]", ">", "th_a_1_s", "\n", "selecta2", "=", "model_a_2_adv", "[", ":", ",", "-", "1", "]", ">", "th_a_2_s", "\n", "selecta3", "=", "model_a_3_adv", "[", ":", ",", "-", "1", "]", ">", "th_a_3_s", "\n", "selectb", "=", "model_b_adv", "[", ":", ",", "-", "1", "]", ">", "th_b_s", "\n", "select", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "selectb", ",", "selecta1", ")", ",", "np", ".", "logical_and", "(", "selecta2", ",", "selecta3", ")", ")", "\n", "# select = np.logical_and(selecta1, np.logical_and(selecta2, selecta3))", "\n", "# select = selectb", "\n", "select_inds_adv", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "select", ")", "if", "v", "==", "False", "]", "\n", "\n", "#confidense detection", "\n", "reject_inds_adv", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "model_b_adv", ")", "if", "np", ".", "max", "(", "model_b_adv", "[", "i", ",", ":", "-", "1", "]", ")", "<=", "th_c", "]", "\n", "\n", "#ensemble detection", "\n", "ensemble_inds_adv", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "model_b_adv", ")", "if", "np", ".", "argmax", "(", "X_test_adv_pred", ",", "axis", "=", "1", ")", "[", "i", "]", "!=", "np", ".", "argmax", "(", "model_b_adv", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "1", ")", "[", "i", "]", "]", "\n", "\n", "#all detections", "\n", "reject_all_adv", "=", "np", ".", "array", "(", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "select_inds_adv", ",", "reject_inds_adv", ",", "ensemble_inds_adv", ")", ",", "axis", "=", "0", ")", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "#evaluation", "\n", "#For Y_all", "\n", "if", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "                ", "y_clean_pred", "=", "np", ".", "zeros", "(", "len", "(", "x_adv", ")", ",", "dtype", "=", "bool", ")", "\n", "#y_clean_pred[reject_all_clean] = True", "\n", "", "else", ":", "\n", "                ", "y_clean_pred", "=", "np", ".", "zeros", "(", "len", "(", "x_adv", ")", ",", "dtype", "=", "bool", ")", "\n", "y_clean_pred", "[", "reject_all_clean", "]", "=", "True", "\n", "", "y_adv_pred", "=", "np", ".", "zeros", "(", "len", "(", "x_adv", ")", ",", "dtype", "=", "bool", ")", "\n", "y_adv_pred", "[", "reject_all_adv", "]", "=", "True", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "x_adv", ")", ",", "dtype", "=", "int", ")", ",", "np", ".", "ones", "(", "len", "(", "x_adv", ")", ",", "dtype", "=", "int", ")", ")", ")", "\n", "Y_all_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_pred", ",", "y_adv_pred", ")", ")", "\n", "# Y_all_pred_score=np.concatenate((model_b_clean[:, -1], model_b_adv[:, -1]))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_all_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "                ", "if", "Y_all_pred", "[", "i", "]", "==", "0", ":", "\n", "                    ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "dec", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#For sucsess", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "                ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "y_clean_success_pred", "=", "y_clean_pred", "[", "inds_success", "]", "\n", "y_adv_success_pred", "=", "y_adv_pred", "[", "inds_success", "]", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ")", ")", "\n", "Y_success_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_success_pred", ",", "y_adv_success_pred", ")", ")", "\n", "# Y_success_pred_score=np.concatenate((model_b_clean[inds_success, -1], model_b_adv[inds_success, -1]))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_success_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "                    ", "if", "Y_success_pred", "[", "i", "]", "==", "0", ":", "\n", "                        ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "dec", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#For sucsess", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "                ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "y_clean_fail_pred", "=", "y_clean_pred", "[", "inds_fail", "]", "\n", "y_adv_fail_pred", "=", "y_adv_pred", "[", "inds_fail", "]", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ")", ")", "\n", "Y_fail_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_fail_pred", ",", "y_adv_fail_pred", ")", ")", "\n", "# Y_fail_pred_score=np.concatenate((model_b_clean[inds_fail, -1], model_b_adv[inds_fail, -1]))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_fail_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "                    ", "if", "Y_fail_pred", "[", "i", "]", "==", "0", ":", "\n", "                        ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "dec", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_{}.csv'", ".", "format", "(", "sfad_results_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                    ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'Gray {:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n                - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_dnr.main": [[10, 381], ["os.path.isfile", "print", "model.predict", "range", "clfs.append", "print", "np.array", "range", "clf.predict", "np.max", "np.percentile", "print", "myModel", "optimizers.SGD", "model.compile", "np.where", "os.path.isfile", "dnr_class", "clfs.append", "pickle.load", "np.array", "layers_data.append", "len", "clf.predict_proba", "np.load", "model.evaluate", "model.predict", "np.array", "range", "np.max", "np.zeros", "np.zeros", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "print", "DATASETS.index", "DATASETS.index", "myModel", "optimizers.SGD", "model.compile", "pickle.load", "open", "Model", "clf.predict_proba", "np.concatenate", "enumerate", "np.where", "np.where", "np.array", "layers_adv.append", "len", "clf.predict_proba", "len", "len", "len", "len", "len", "list", "list", "len", "results_all.append", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "np.load", "model.evaluate", "model.predict", "np.array", "range", "np.max", "np.zeros", "np.zeros", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "print", "results_all.append", "print", "myModel", "optimizers.SGD", "model.compile", "model.predict.argmax", "Y_test.argmax", "open", "Model.predict().reshape", "np.concatenate", "np.max", "Model", "clf.predict_proba", "np.concatenate", "enumerate", "np.zeros", "np.ones", "len", "len", "len", "list", "list", "len", "len", "len", "list", "list", "csv.DictWriter.writerow", "np.where", "np.where", "np.array", "layers_adv.append", "len", "clf.predict_proba", "len", "len", "len", "len", "len", "list", "list", "len", "results_all.append", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "len", "results_all.append", "np.concatenate", "np.concatenate", "np.ones", "range", "common.util.evalulate_detection_test", "roc_curve", "auc", "results_all.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "myModel", "optimizers.SGD", "model.compile", "model.get_input_at", "clf.predict_proba", "model.predict.argmax", "Y_test.argmax", "model.predict.argmax", "Y_test.argmax", "Model.predict().reshape", "np.concatenate", "np.max", "len", "len", "np.zeros", "np.ones", "np.zeros", "np.ones", "Model", "clf.predict_proba", "np.concatenate", "enumerate", "np.zeros", "np.ones", "len", "len", "len", "list", "list", "len", "len", "len", "list", "list", "csv.DictWriter.writerow", "model.get_layer", "Model.predict", "Model.predict().reshape", "model.get_input_at", "clf.predict_proba", "len", "len", "len", "len", "model.predict.argmax", "Y_test.argmax", "model.predict.argmax", "Y_test.argmax", "Model.predict().reshape", "np.concatenate", "np.max", "len", "len", "np.zeros", "np.ones", "np.zeros", "np.ones", "str", "model.get_layer", "Model.predict", "Model.predict().reshape", "model.get_input_at", "clf.predict_proba", "len", "len", "len", "len", "Model.predict", "model.get_layer", "Model.predict", "Model.predict().reshape", "Model.predict", "Model.predict"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "dataset", "in", "DATASETS", ",", "\"Dataset parameter must be either 'mnist', 'cifar', 'svhn', or 'tiny'\"", "\n", "ATTACKS", "=", "ATTACK", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "'{}cnn_{}.h5'", ".", "format", "(", "checkpoints_dir", ",", "args", ".", "dataset", ")", ")", ",", "'model file not found... must first train model using train_model.py.'", "\n", "\n", "layers", "=", "layer_names", "[", "DATASETS", ".", "index", "(", "args", ".", "dataset", ")", "]", "\n", "\n", "print", "(", "'Loading the data and model...'", ")", "\n", "# Load the model", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.05", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "from", "dnr", ".", "dnr_mnist", "import", "DNRMNIST", "as", "dnr_class", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "from", "dnr", ".", "dnr_cifar", "import", "DNRCIFAR", "as", "dnr_class", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'svhn'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "from", "dnr", ".", "dnr_svhn", "import", "DNRSVHN", "as", "dnr_class", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'tiny'", ":", "\n", "        ", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "myModel", "\n", "model_class", "=", "myModel", "(", "mode", "=", "'load'", ",", "filename", "=", "'cnn_{}.h5'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "model", "=", "model_class", ".", "model", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "from", "dnr", ".", "dnr_tiny", "import", "DNRTINY", "as", "dnr_class", "\n", "\n", "# Load the dataset", "\n", "", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "=", "model_class", ".", "x_train", ",", "model_class", ".", "y_train", ",", "model_class", ".", "x_test", ",", "model_class", ".", "y_test", "\n", "\n", "#correctly classified samples", "\n", "predict_cnn", "=", "model", ".", "predict", "(", "X_test", ")", "\n", "inds_correct", "=", "np", ".", "where", "(", "predict_cnn", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "X_test", "=", "X_test", "[", "inds_correct", "]", "\n", "Y_test", "=", "Y_test", "[", "inds_correct", "]", "\n", "\n", "#train and load classifiers", "\n", "detector_path", "=", "'{}dnr_{}.model'", ".", "format", "(", "dnr_results_dir", ",", "args", ".", "dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "detector_path", ")", ":", "\n", "        ", "dnr_class_clf", "=", "dnr_class", "(", "layer_names", "=", "layers", ")", "\n", "\n", "#load classifiers", "\n", "", "clfs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "        ", "clfs", ".", "append", "(", "pickle", ".", "load", "(", "open", "(", "detector_path", "[", ":", "-", "6", "]", "+", "'_'", "+", "str", "(", "i", ")", "+", "'.model'", ",", "'rb'", ")", ")", ")", "\n", "", "clfs", ".", "append", "(", "pickle", ".", "load", "(", "open", "(", "detector_path", ",", "'rb'", ")", ")", ")", "\n", "print", "(", "'Classifiers loaded...'", ")", "\n", "\n", "#get test data for the 3 classifiers and for the combiner classifier", "\n", "#data for the classifiers", "\n", "layers_data", "=", "[", "]", "\n", "clf_outputs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layerx", "in", "layers", ":", "\n", "        ", "current", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layer", "in", "layerx", ":", "\n", "            ", "inter_model", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "layer", ")", ".", "output", ")", "\n", "if", "current", ".", "size", "==", "0", ":", "\n", "                ", "current", "=", "inter_model", ".", "predict", "(", "X_test", ")", ".", "reshape", "(", "(", "X_test", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "current", "=", "np", ".", "concatenate", "(", "(", "current", ",", "inter_model", ".", "predict", "(", "X_test", ")", ".", "reshape", "(", "(", "X_test", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "", "layers_data", ".", "append", "(", "current", ")", "\n", "#data for the combiner", "\n", "", "for", "i", "in", "range", "(", "len", "(", "layers_data", ")", ")", ":", "\n", "        ", "clf", "=", "clfs", "[", "i", "]", "\n", "if", "clf_outputs", ".", "size", "==", "0", ":", "\n", "            ", "clf_outputs", "=", "clf", ".", "predict_proba", "(", "layers_data", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "clf_outputs", "=", "np", ".", "concatenate", "(", "(", "clf_outputs", ",", "clf", ".", "predict_proba", "(", "layers_data", "[", "i", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "#combiner output", "\n", "", "", "clf", "=", "clfs", "[", "-", "1", "]", "\n", "x_test_pred", "=", "clf", ".", "predict", "(", "clf_outputs", ")", "\n", "x_test_score", "=", "np", ".", "max", "(", "clf", ".", "predict_proba", "(", "clf_outputs", ")", ",", "axis", "=", "1", ")", "\n", "\n", "#compute threshold", "\n", "thr", "=", "np", ".", "percentile", "(", "x_test_score", ",", "10", ")", "\n", "\n", "#confidense detection", "\n", "reject_inds_clean", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "x_test_score", ")", "if", "np", ".", "max", "(", "x_test_score", "[", "i", "]", ")", "<=", "thr", "]", "\n", "\n", "## Evaluate detector - on adversarial attack", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "        ", "results_all", "=", "[", "]", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "\n", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "Y_test", ",", "verbose", "=", "0", ")", "\n", "X_test_adv_pred", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "\n", "#get adv data for the 3 classifiers and for the combiner classifier", "\n", "#adv data for the classifiers", "\n", "layers_adv", "=", "[", "]", "\n", "clf_outputs_adv", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layerx", "in", "layers", ":", "\n", "            ", "current", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layer", "in", "layerx", ":", "\n", "                ", "inter_model", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "layer", ")", ".", "output", ")", "\n", "if", "current", ".", "size", "==", "0", ":", "\n", "                    ", "current", "=", "inter_model", ".", "predict", "(", "X_test_adv", ")", ".", "reshape", "(", "(", "X_test_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "current", "=", "np", ".", "concatenate", "(", "(", "current", ",", "inter_model", ".", "predict", "(", "X_test_adv", ")", ".", "reshape", "(", "(", "X_test_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "", "layers_adv", ".", "append", "(", "current", ")", "\n", "#adv data for the combiner", "\n", "", "for", "i", "in", "range", "(", "len", "(", "layers_adv", ")", ")", ":", "\n", "            ", "clf", "=", "clfs", "[", "i", "]", "\n", "if", "clf_outputs_adv", ".", "size", "==", "0", ":", "\n", "                ", "clf_outputs_adv", "=", "clf", ".", "predict_proba", "(", "layers_adv", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "clf_outputs_adv", "=", "np", ".", "concatenate", "(", "(", "clf_outputs_adv", ",", "clf", ".", "predict_proba", "(", "layers_adv", "[", "i", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "#combiner output", "\n", "", "", "clf", "=", "clfs", "[", "-", "1", "]", "\n", "# x_adv_pred = clf.predict(clf_outputs_adv)", "\n", "x_adv_score", "=", "np", ".", "max", "(", "clf", ".", "predict_proba", "(", "clf_outputs_adv", ")", ",", "axis", "=", "1", ")", "\n", "# x_adv_dec = np.max(clf.decision_function(clf_outputs_adv), axis=1)", "\n", "\n", "#confidense detection", "\n", "reject_inds_adv", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "x_adv_score", ")", "if", "np", ".", "max", "(", "x_adv_score", "[", "i", "]", ")", "<=", "thr", "]", "\n", "\n", "#evaluation", "\n", "#For Y_all", "\n", "y_clean_pred", "=", "np", ".", "zeros", "(", "len", "(", "inds_correct", ")", ",", "dtype", "=", "bool", ")", "\n", "y_clean_pred", "[", "reject_inds_clean", "]", "=", "True", "\n", "y_adv_pred", "=", "np", ".", "zeros", "(", "len", "(", "inds_correct", ")", ",", "dtype", "=", "bool", ")", "\n", "y_adv_pred", "[", "reject_inds_adv", "]", "=", "True", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_correct", ")", ",", "dtype", "=", "int", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_correct", ")", ",", "dtype", "=", "int", ")", ")", ")", "\n", "Y_all_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_pred", ",", "y_adv_pred", ")", ")", "\n", "# Y_all_pred_score=np.concatenate((x_test_score, x_adv_score))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_all_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "            ", "if", "Y_all_pred", "[", "i", "]", "==", "False", ":", "\n", "                ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "dec", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#For sucsess", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "            ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "y_clean_success_pred", "=", "y_clean_pred", "[", "inds_success", "]", "\n", "y_adv_success_pred", "=", "y_adv_pred", "[", "inds_success", "]", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ")", ")", "\n", "Y_success_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_success_pred", ",", "y_adv_success_pred", ")", ")", "\n", "# Y_success_pred_score=np.concatenate((x_test_score[inds_success], x_adv_score[inds_success]))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_success_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "                ", "if", "Y_success_pred", "[", "i", "]", "==", "False", ":", "\n", "                    ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "dec", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#For sucsess", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "            ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "            ", "y_clean_fail_pred", "=", "y_clean_pred", "[", "inds_fail", "]", "\n", "y_adv_fail_pred", "=", "y_adv_pred", "[", "inds_fail", "]", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ")", ")", "\n", "Y_fail_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_fail_pred", ",", "y_adv_fail_pred", ")", ")", "\n", "# Y_fail_pred_score=np.concatenate((x_test_score[inds_fail], x_adv_score[inds_fail]))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_fail_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "                ", "if", "Y_fail_pred", "[", "i", "]", "==", "False", ":", "\n", "                    ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "dec", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_{}.csv'", ".", "format", "(", "dnr_results_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "            ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'{:>15} attack - accuracy of pretrained model: {:7.2f}% \\\n            - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n", "# Gray-Box", "\n", "## Evaluate detector - on adversarial attack", "\n", "for", "attack", "in", "ATTACKS", ":", "\n", "        ", "if", "not", "(", "attack", "==", "'hop'", "or", "attack", "==", "'sa'", "or", "attack", "==", "'sta'", "or", "(", "attack", "==", "'df'", "and", "args", ".", "dataset", "==", "'tiny'", ")", ")", ":", "\n", "            ", "results_all", "=", "[", "]", "\n", "\n", "#Prepare data", "\n", "# Load adversarial samples", "\n", "X_test_adv", "=", "np", ".", "load", "(", "'{}{}_{}.npy'", ".", "format", "(", "adv_data_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ")", "\n", "X_test_adv", "=", "X_test_adv", "[", "inds_correct", "]", "\n", "\n", "loss", ",", "acc_suc", "=", "model", ".", "evaluate", "(", "X_test_adv", ",", "Y_test", ",", "verbose", "=", "0", ")", "\n", "X_test_adv_pred", "=", "model", ".", "predict", "(", "X_test_adv", ")", "\n", "inds_success", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "!=", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "inds_fail", "=", "np", ".", "where", "(", "X_test_adv_pred", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y_test", ".", "argmax", "(", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "\n", "#get adv data for the 3 classifiers and for the combiner classifier", "\n", "#adv data for the classifiers", "\n", "layers_adv", "=", "[", "]", "\n", "clf_outputs_adv", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layerx", "in", "layers", ":", "\n", "                ", "current", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layer", "in", "layerx", ":", "\n", "                    ", "inter_model", "=", "Model", "(", "inputs", "=", "model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "model", ".", "get_layer", "(", "layer", ")", ".", "output", ")", "\n", "if", "current", ".", "size", "==", "0", ":", "\n", "                        ", "current", "=", "inter_model", ".", "predict", "(", "X_test_adv", ")", ".", "reshape", "(", "(", "X_test_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                        ", "current", "=", "np", ".", "concatenate", "(", "(", "current", ",", "inter_model", ".", "predict", "(", "X_test_adv", ")", ".", "reshape", "(", "(", "X_test_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "", "layers_adv", ".", "append", "(", "current", ")", "\n", "#adv data for the combiner", "\n", "", "for", "i", "in", "range", "(", "len", "(", "layers_adv", ")", ")", ":", "\n", "                ", "clf", "=", "clfs", "[", "i", "]", "\n", "if", "clf_outputs_adv", ".", "size", "==", "0", ":", "\n", "                    ", "clf_outputs_adv", "=", "clf", ".", "predict_proba", "(", "layers_adv", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "clf_outputs_adv", "=", "np", ".", "concatenate", "(", "(", "clf_outputs_adv", ",", "clf", ".", "predict_proba", "(", "layers_adv", "[", "i", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "#combiner output", "\n", "", "", "clf", "=", "clfs", "[", "-", "1", "]", "\n", "# x_adv_pred = clf.predict(clf_outputs_adv)", "\n", "x_adv_score", "=", "np", ".", "max", "(", "clf", ".", "predict_proba", "(", "clf_outputs_adv", ")", ",", "axis", "=", "1", ")", "\n", "# x_adv_dec = np.max(clf.decision_function(clf_outputs_adv), axis=1)", "\n", "\n", "#confidense detection", "\n", "reject_inds_adv", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "x_adv_score", ")", "if", "np", ".", "max", "(", "x_adv_score", "[", "i", "]", ")", "<=", "thr", "]", "\n", "\n", "#evaluation", "\n", "#For Y_all", "\n", "y_clean_pred", "=", "np", ".", "zeros", "(", "len", "(", "inds_correct", ")", ",", "dtype", "=", "bool", ")", "\n", "y_clean_pred", "[", "reject_inds_clean", "]", "=", "True", "\n", "y_adv_pred", "=", "np", ".", "zeros", "(", "len", "(", "inds_correct", ")", ",", "dtype", "=", "bool", ")", "\n", "y_adv_pred", "[", "reject_inds_adv", "]", "=", "True", "\n", "Y_all", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_correct", ")", ",", "dtype", "=", "int", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_correct", ")", ",", "dtype", "=", "int", ")", ")", ")", "\n", "Y_all_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_pred", ",", "y_adv_pred", ")", ")", "\n", "# Y_all_pred_score=np.concatenate((x_test_score, x_adv_score))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_all_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "                ", "if", "Y_all_pred", "[", "i", "]", "==", "False", ":", "\n", "                    ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "acc_all", ",", "tpr_all", ",", "fpr_all", ",", "tp_all", ",", "ap_all", ",", "fb_all", ",", "an_all", "=", "evalulate_detection_test", "(", "Y_all", ",", "Y_all_pred", ")", "\n", "fprs_all", ",", "tprs_all", ",", "thresholds_all", "=", "roc_curve", "(", "Y_all", ",", "dec", ")", "\n", "roc_auc_all", "=", "auc", "(", "fprs_all", ",", "tprs_all", ")", "\n", "print", "(", "\"AUC: {:.4f}%, Overall accuracy: {:.4f}%, FPR value: {:.4f}%\"", ".", "format", "(", "100", "*", "roc_auc_all", ",", "100", "*", "acc_all", ",", "100", "*", "fpr_all", ")", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'all'", ",", "'nsamples'", ":", "len", "(", "inds_correct", ")", ",", "'acc_suc'", ":", "acc_suc", ",", "'acc'", ":", "acc_all", ",", "'tpr'", ":", "tpr_all", ",", "'fpr'", ":", "fpr_all", ",", "'tp'", ":", "tp_all", ",", "'ap'", ":", "ap_all", ",", "'fb'", ":", "fb_all", ",", "'an'", ":", "an_all", ",", "'tprs'", ":", "list", "(", "fprs_all", ")", ",", "'fprs'", ":", "list", "(", "tprs_all", ")", ",", "'auc'", ":", "roc_auc_all", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#For sucsess", "\n", "if", "len", "(", "inds_success", ")", "==", "0", ":", "\n", "                ", "tpr_success", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "y_clean_success_pred", "=", "y_clean_pred", "[", "inds_success", "]", "\n", "y_adv_success_pred", "=", "y_adv_pred", "[", "inds_success", "]", "\n", "Y_success", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_success", ")", ",", "dtype", "=", "bool", ")", ")", ")", "\n", "Y_success_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_success_pred", ",", "y_adv_success_pred", ")", ")", "\n", "# Y_success_pred_score=np.concatenate((x_test_score[inds_success], x_adv_score[inds_success]))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_success_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "                    ", "if", "Y_success_pred", "[", "i", "]", "==", "False", ":", "\n", "                        ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "accuracy_success", ",", "tpr_success", ",", "fpr_success", ",", "tp_success", ",", "ap_success", ",", "fb_success", ",", "an_success", "=", "evalulate_detection_test", "(", "Y_success", ",", "Y_success_pred", ")", "\n", "fprs_success", ",", "tprs_success", ",", "thresholds_success", "=", "roc_curve", "(", "Y_success", ",", "dec", ")", "\n", "roc_auc_success", "=", "auc", "(", "fprs_success", ",", "tprs_success", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'success'", ",", "'nsamples'", ":", "len", "(", "inds_success", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_success", ",", "'tpr'", ":", "tpr_success", ",", "'fpr'", ":", "fpr_success", ",", "'tp'", ":", "tp_success", ",", "'ap'", ":", "ap_success", ",", "'fb'", ":", "fb_success", ",", "'an'", ":", "an_success", ",", "'tprs'", ":", "list", "(", "fprs_success", ")", ",", "'fprs'", ":", "list", "(", "tprs_success", ")", ",", "'auc'", ":", "roc_auc_success", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "#For sucsess", "\n", "", "if", "len", "(", "inds_fail", ")", "==", "0", ":", "\n", "                ", "tpr_fail", "=", "np", ".", "nan", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "0", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "np", ".", "nan", ",", "'tpr'", ":", "np", ".", "nan", ",", "'fpr'", ":", "np", ".", "nan", ",", "'tp'", ":", "np", ".", "nan", ",", "'ap'", ":", "np", ".", "nan", ",", "'fb'", ":", "np", ".", "nan", ",", "'an'", ":", "np", ".", "nan", ",", "'tprs'", ":", "np", ".", "nan", ",", "'fprs'", ":", "np", ".", "nan", ",", "'auc'", ":", "np", ".", "nan", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "", "else", ":", "\n", "                ", "y_clean_fail_pred", "=", "y_clean_pred", "[", "inds_fail", "]", "\n", "y_adv_fail_pred", "=", "y_adv_pred", "[", "inds_fail", "]", "\n", "Y_fail", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ",", "np", ".", "ones", "(", "len", "(", "inds_fail", ")", ",", "dtype", "=", "bool", ")", ")", ")", "\n", "Y_fail_pred", "=", "np", ".", "concatenate", "(", "(", "y_clean_fail_pred", ",", "y_adv_fail_pred", ")", ")", "\n", "# Y_fail_pred_score=np.concatenate((x_test_score[inds_fail], x_adv_score[inds_fail]))", "\n", "\n", "dec", "=", "np", ".", "ones", "(", "len", "(", "Y_fail_pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dec", ")", ")", ":", "\n", "                    ", "if", "Y_fail_pred", "[", "i", "]", "==", "False", ":", "\n", "                        ", "dec", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "", "accuracy_fail", ",", "tpr_fail", ",", "fpr_fail", ",", "tp_fail", ",", "ap_fail", ",", "fb_fail", ",", "an_fail", "=", "evalulate_detection_test", "(", "Y_fail", ",", "Y_fail_pred", ")", "\n", "fprs_fail", ",", "tprs_fail", ",", "thresholds_fail", "=", "roc_curve", "(", "Y_fail", ",", "dec", ")", "\n", "roc_auc_fail", "=", "auc", "(", "fprs_fail", ",", "tprs_fail", ")", "\n", "\n", "curr_result", "=", "{", "'type'", ":", "'fail'", ",", "'nsamples'", ":", "len", "(", "inds_fail", ")", ",", "'acc_suc'", ":", "0", ",", "'acc'", ":", "accuracy_fail", ",", "'tpr'", ":", "tpr_fail", ",", "'fpr'", ":", "fpr_fail", ",", "'tp'", ":", "tp_fail", ",", "'ap'", ":", "ap_fail", ",", "'fb'", ":", "fb_fail", ",", "'an'", ":", "an_fail", ",", "'tprs'", ":", "list", "(", "fprs_fail", ")", ",", "'fprs'", ":", "list", "(", "tprs_fail", ")", ",", "'auc'", ":", "roc_auc_fail", "}", "\n", "results_all", ".", "append", "(", "curr_result", ")", "\n", "\n", "", "import", "csv", "\n", "with", "open", "(", "'{}{}_gray_{}.csv'", ".", "format", "(", "dnr_results_gray_dir", ",", "args", ".", "dataset", ",", "attack", ")", ",", "'w'", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "                ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "results_all", ":", "\n", "                    ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "print", "(", "'Gray-box attack {}- accuracy of pretrained model: {:7.2f}% \\\n                - detection rates ------ SAEs: {:7.2f}%, FAEs: {:7.2f}%'", ".", "format", "(", "attack", ",", "100", "*", "acc_suc", ",", "100", "*", "tpr_success", ",", "100", "*", "tpr_fail", ")", ")", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.dnr.dnr_svhn.DNRSVHN.__init__": [[7, 45], ["load_svhn_data", "normalize_linear", "toCat_onehot", "svhn_class", "optimizers.SGD", "dnr_svhn.DNRSVHN.svhn_model.compile", "np.array", "dnr_svhn.DNRSVHN.train", "np.array", "dnr_svhn.DNRSVHN.layers_data.append", "Model", "Model.predict().reshape", "np.concatenate", "dnr_svhn.DNRSVHN.svhn_model.get_input_at", "dnr_svhn.DNRSVHN.svhn_model.get_layer", "Model.predict", "Model.predict().reshape", "Model.predict"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_svhn_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["    ", "def", "__init__", "(", "self", ",", "cnn_model", "=", "'cnn_svhn.h5'", ",", "svm_clf_name", "=", "\"dnr_svhn.model\"", ",", "layer_names", "=", "[", "[", "'l_17'", "]", ",", "[", "'l_14'", "]", ",", "[", "'l_10'", "]", "]", ")", ":", "\n", "        ", "self", ".", "cnn_model", "=", "cnn_model", "\n", "self", ".", "svm_clf_name", "=", "svm_clf_name", "\n", "self", ".", "layer_names", "=", "layer_names", "\n", "self", ".", "num_classes", "=", "10", "\n", "\n", "#get data", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_svhn_data", "(", ")", "\n", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "svhn_class", "\n", "svhn_model_class", "=", "svhn_class", "(", "mode", "=", "\"load\"", ",", "filename", "=", "self", ".", "cnn_model", ")", "\n", "self", ".", "svhn_model", "=", "svhn_model_class", ".", "model", "\n", "learning_rate", "=", "0.1", "\n", "lr_decay", "=", "1e-6", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "svhn_model", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "del", "svhn_model_class", "\n", "\n", "#data for the classifiers", "\n", "self", ".", "layers_data", "=", "[", "]", "\n", "self", ".", "clf_outputs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layers", "in", "self", ".", "layer_names", ":", "\n", "            ", "current", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layer", "in", "layers", ":", "\n", "                ", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "svhn_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "svhn_model", ".", "get_layer", "(", "layer", ")", ".", "output", ")", "\n", "if", "current", ".", "size", "==", "0", ":", "\n", "                    ", "current", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", ".", "reshape", "(", "(", "self", ".", "x_train", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "current", "=", "np", ".", "concatenate", "(", "(", "current", ",", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", ".", "reshape", "(", "(", "self", ".", "x_train", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "", "self", ".", "layers_data", ".", "append", "(", "current", ")", "\n", "\n", "", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.dnr.dnr_svhn.DNRSVHN.train": [[46, 73], ["range", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "pickle.dumps", "open", "open.write", "open.close", "print", "len", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "pickle.dumps", "open", "open.write", "open.close", "print", "sklearn.svm.SVC.predict_proba", "np.concatenate", "str", "sklearn.svm.SVC.predict_proba", "str"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers_data", ")", ")", ":", "\n", "            ", "clf", "=", "SVC", "(", "probability", "=", "True", ",", "random_state", "=", "55", ")", "\n", "clf", ".", "fit", "(", "self", ".", "layers_data", "[", "i", "]", ",", "self", ".", "y_train_labels", ")", "\n", "\n", "#save classifiers", "\n", "s", "=", "pickle", ".", "dumps", "(", "clf", ")", "\n", "f", "=", "open", "(", "'{}{}'", ".", "format", "(", "dnr_results_dir", ",", "self", ".", "svm_clf_name", "[", ":", "-", "6", "]", "+", "'_'", "+", "str", "(", "i", "+", "1", ")", "+", "'.model'", ")", ",", "\"wb+\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "'{} classifier training is finished'", ".", "format", "(", "str", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "if", "self", ".", "clf_outputs", ".", "size", "==", "0", ":", "\n", "                    ", "self", ".", "clf_outputs", "=", "clf", ".", "predict_proba", "(", "self", ".", "layers_data", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "clf_outputs", "=", "np", ".", "concatenate", "(", "(", "self", ".", "clf_outputs", ",", "clf", ".", "predict_proba", "(", "self", ".", "layers_data", "[", "i", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "clf", "=", "SVC", "(", "probability", "=", "True", ",", "random_state", "=", "55", ")", "\n", "clf", ".", "fit", "(", "self", ".", "clf_outputs", ",", "self", ".", "y_train_labels", ")", "\n", "\n", "#save classifiers", "\n", "s", "=", "pickle", ".", "dumps", "(", "clf", ")", "\n", "f", "=", "open", "(", "'{}{}'", ".", "format", "(", "dnr_results_dir", ",", "self", ".", "svm_clf_name", ")", ",", "\"wb+\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "'{} classifier training is finished'", ".", "format", "(", "'Combiner'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.dnr.dnr_tiny.DNRTINY.__init__": [[7, 45], ["load_tiny_imagenet_data", "normalize_linear", "toCat_onehot", "tiny_class", "optimizers.SGD", "dnr_tiny.DNRTINY.tiny_model.compile", "np.array", "dnr_tiny.DNRTINY.train", "np.array", "dnr_tiny.DNRTINY.layers_data.append", "Model", "Model.predict().reshape", "np.concatenate", "dnr_tiny.DNRTINY.tiny_model.get_input_at", "dnr_tiny.DNRTINY.tiny_model.get_layer", "Model.predict", "Model.predict().reshape", "Model.predict"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_tiny_imagenet_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["    ", "def", "__init__", "(", "self", ",", "cnn_model", "=", "'cnn_tiny.h5'", ",", "svm_clf_name", "=", "\"dnr_tiny.model\"", ",", "layer_names", "=", "[", "[", "'bn'", "]", ",", "[", "'conv5_block17_0_bn'", "]", ",", "[", "'pool4_bn'", "]", "]", ")", ":", "\n", "        ", "self", ".", "cnn_model", "=", "cnn_model", "\n", "self", ".", "svm_clf_name", "=", "svm_clf_name", "\n", "self", ".", "layer_names", "=", "layer_names", "\n", "self", ".", "num_classes", "=", "200", "\n", "\n", "#get data", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_tiny_imagenet_data", "(", ")", "\n", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "tiny_class", "\n", "tiny_model_class", "=", "tiny_class", "(", "mode", "=", "\"load\"", ",", "filename", "=", "self", ".", "cnn_model", ")", "\n", "self", ".", "tiny_model", "=", "tiny_model_class", ".", "model", "\n", "learning_rate", "=", "0.1", "\n", "lr_decay", "=", "1e-6", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "tiny_model", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "del", "tiny_model_class", "\n", "\n", "#data for the classifiers", "\n", "self", ".", "layers_data", "=", "[", "]", "\n", "self", ".", "clf_outputs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layers", "in", "self", ".", "layer_names", ":", "\n", "            ", "current", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layer", "in", "layers", ":", "\n", "                ", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "tiny_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "tiny_model", ".", "get_layer", "(", "layer", ")", ".", "output", ")", "\n", "if", "current", ".", "size", "==", "0", ":", "\n", "                    ", "current", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", ".", "reshape", "(", "(", "self", ".", "x_train", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "current", "=", "np", ".", "concatenate", "(", "(", "current", ",", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", ".", "reshape", "(", "(", "self", ".", "x_train", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "", "self", ".", "layers_data", ".", "append", "(", "current", ")", "\n", "\n", "", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.dnr.dnr_tiny.DNRTINY.train": [[46, 73], ["print", "range", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "pickle.dumps", "open", "open.write", "open.close", "print", "len", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "pickle.dumps", "open", "open.write", "open.close", "print", "sklearn.svm.SVC.predict_proba", "np.concatenate", "str", "sklearn.svm.SVC.predict_proba", "str"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Strat training ....'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers_data", ")", ")", ":", "\n", "            ", "clf", "=", "SVC", "(", "C", "=", "100", ",", "probability", "=", "True", ",", "random_state", "=", "55", ")", "\n", "clf", ".", "fit", "(", "self", ".", "layers_data", "[", "i", "]", ",", "self", ".", "y_train_labels", ")", "\n", "\n", "#save classifiers", "\n", "s", "=", "pickle", ".", "dumps", "(", "clf", ")", "\n", "f", "=", "open", "(", "'{}{}'", ".", "format", "(", "dnr_results_dir", ",", "self", ".", "svm_clf_name", "[", ":", "-", "6", "]", "+", "'_'", "+", "str", "(", "i", "+", "1", ")", "+", "'.model'", ")", ",", "\"wb+\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "'{} classifier training is finished'", ".", "format", "(", "str", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "if", "self", ".", "clf_outputs", ".", "size", "==", "0", ":", "\n", "                    ", "self", ".", "clf_outputs", "=", "clf", ".", "predict_proba", "(", "self", ".", "layers_data", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "clf_outputs", "=", "np", ".", "concatenate", "(", "(", "self", ".", "clf_outputs", ",", "clf", ".", "predict_proba", "(", "self", ".", "layers_data", "[", "i", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "clf", "=", "SVC", "(", "probability", "=", "True", ",", "random_state", "=", "55", ")", "\n", "clf", ".", "fit", "(", "self", ".", "clf_outputs", ",", "self", ".", "y_train_labels", ")", "\n", "\n", "#save classifiers", "\n", "s", "=", "pickle", ".", "dumps", "(", "clf", ")", "\n", "f", "=", "open", "(", "'{}{}'", ".", "format", "(", "dnr_results_dir", ",", "self", ".", "svm_clf_name", ")", ",", "\"wb+\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "'{} classifier training is finished'", ".", "format", "(", "'Combiner'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.dnr.dnr_cifar.DNRCIFAR.__init__": [[7, 45], ["load_cifar10_data", "normalize_linear", "toCat_onehot", "cifar_class", "optimizers.SGD", "dnr_cifar.DNRCIFAR.cifar_model.compile", "np.array", "dnr_cifar.DNRCIFAR.train", "np.array", "dnr_cifar.DNRCIFAR.layers_data.append", "Model", "Model.predict().reshape", "np.concatenate", "dnr_cifar.DNRCIFAR.cifar_model.get_input_at", "dnr_cifar.DNRCIFAR.cifar_model.get_layer", "Model.predict", "Model.predict().reshape", "Model.predict"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_cifar10_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["    ", "def", "__init__", "(", "self", ",", "cnn_model", "=", "'cnn_cifar.h5'", ",", "svm_clf_name", "=", "\"dnr_cifar.model\"", ",", "layer_names", "=", "[", "[", "'l_31'", "]", ",", "[", "'l_26'", "]", ",", "[", "'l_21'", "]", "]", ")", ":", "\n", "        ", "self", ".", "cnn_model", "=", "cnn_model", "\n", "self", ".", "svm_clf_name", "=", "svm_clf_name", "\n", "self", ".", "layer_names", "=", "layer_names", "\n", "self", ".", "num_classes", "=", "10", "\n", "\n", "#get data", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_cifar10_data", "(", ")", "\n", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "cifar_class", "\n", "cifar_model_class", "=", "cifar_class", "(", "mode", "=", "\"load\"", ",", "filename", "=", "self", ".", "cnn_model", ")", "\n", "self", ".", "cifar_model", "=", "cifar_model_class", ".", "model", "\n", "learning_rate", "=", "0.1", "\n", "lr_decay", "=", "1e-6", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "cifar_model", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "del", "cifar_model_class", "\n", "\n", "#data for the classifiers", "\n", "self", ".", "layers_data", "=", "[", "]", "\n", "self", ".", "clf_outputs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layers", "in", "self", ".", "layer_names", ":", "\n", "            ", "current", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layer", "in", "layers", ":", "\n", "                ", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "cifar_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "cifar_model", ".", "get_layer", "(", "layer", ")", ".", "output", ")", "\n", "if", "current", ".", "size", "==", "0", ":", "\n", "                    ", "current", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", ".", "reshape", "(", "(", "self", ".", "x_train", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "current", "=", "np", ".", "concatenate", "(", "(", "current", ",", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", ".", "reshape", "(", "(", "self", ".", "x_train", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "", "self", ".", "layers_data", ".", "append", "(", "current", ")", "\n", "\n", "", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.dnr.dnr_cifar.DNRCIFAR.train": [[46, 73], ["range", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "pickle.dumps", "open", "open.write", "open.close", "print", "len", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "pickle.dumps", "open", "open.write", "open.close", "print", "sklearn.svm.SVC.predict_proba", "np.concatenate", "str", "sklearn.svm.SVC.predict_proba", "str"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers_data", ")", ")", ":", "\n", "            ", "clf", "=", "SVC", "(", "probability", "=", "True", ",", "random_state", "=", "55", ")", "\n", "clf", ".", "fit", "(", "self", ".", "layers_data", "[", "i", "]", ",", "self", ".", "y_train_labels", ")", "\n", "\n", "#save classifiers", "\n", "s", "=", "pickle", ".", "dumps", "(", "clf", ")", "\n", "f", "=", "open", "(", "'{}{}'", ".", "format", "(", "dnr_results_dir", ",", "self", ".", "svm_clf_name", "[", ":", "-", "6", "]", "+", "'_'", "+", "str", "(", "i", "+", "1", ")", "+", "'.model'", ")", ",", "\"wb+\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "'{} classifier training is finished'", ".", "format", "(", "str", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "if", "self", ".", "clf_outputs", ".", "size", "==", "0", ":", "\n", "                    ", "self", ".", "clf_outputs", "=", "clf", ".", "predict_proba", "(", "self", ".", "layers_data", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "clf_outputs", "=", "np", ".", "concatenate", "(", "(", "self", ".", "clf_outputs", ",", "clf", ".", "predict_proba", "(", "self", ".", "layers_data", "[", "i", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "clf", "=", "SVC", "(", "probability", "=", "True", ",", "random_state", "=", "55", ")", "\n", "clf", ".", "fit", "(", "self", ".", "clf_outputs", ",", "self", ".", "y_train_labels", ")", "\n", "\n", "#save classifiers", "\n", "s", "=", "pickle", ".", "dumps", "(", "clf", ")", "\n", "f", "=", "open", "(", "'{}{}'", ".", "format", "(", "dnr_results_dir", ",", "self", ".", "svm_clf_name", ")", ",", "\"wb+\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "'{} classifier training is finished'", ".", "format", "(", "'Combiner'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.dnr.dnr_mnist.DNRMNIST.__init__": [[7, 45], ["load_mnist_data", "normalize_linear", "toCat_onehot", "mnist_class", "optimizers.SGD", "dnr_mnist.DNRMNIST.mnist_model.compile", "np.array", "dnr_mnist.DNRMNIST.train", "np.array", "dnr_mnist.DNRMNIST.layers_data.append", "Model", "Model.predict().reshape", "np.concatenate", "dnr_mnist.DNRMNIST.mnist_model.get_input_at", "dnr_mnist.DNRMNIST.mnist_model.get_layer", "Model.predict", "Model.predict().reshape", "Model.predict"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_mnist_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["    ", "def", "__init__", "(", "self", ",", "cnn_model", "=", "'cnn_mnist.h5'", ",", "svm_clf_name", "=", "\"dnr_mnist.model\"", ",", "layer_names", "=", "[", "[", "'l_17'", "]", ",", "[", "'l_14'", "]", ",", "[", "'l_10'", "]", "]", ")", ":", "\n", "        ", "self", ".", "cnn_model", "=", "cnn_model", "\n", "self", ".", "svm_clf_name", "=", "svm_clf_name", "\n", "self", ".", "layer_names", "=", "layer_names", "\n", "self", ".", "num_classes", "=", "10", "\n", "\n", "#get data", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_mnist_data", "(", ")", "\n", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "mnist_class", "\n", "mnist_model_class", "=", "mnist_class", "(", "mode", "=", "\"load\"", ",", "filename", "=", "self", ".", "cnn_model", ")", "\n", "self", ".", "mnist_model", "=", "mnist_model_class", ".", "model", "\n", "learning_rate", "=", "0.1", "\n", "lr_decay", "=", "1e-6", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "mnist_model", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "del", "mnist_model_class", "\n", "\n", "#data for the classifiers", "\n", "self", ".", "layers_data", "=", "[", "]", "\n", "self", ".", "clf_outputs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layers", "in", "self", ".", "layer_names", ":", "\n", "            ", "current", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "layer", "in", "layers", ":", "\n", "                ", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "mnist_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "mnist_model", ".", "get_layer", "(", "layer", ")", ".", "output", ")", "\n", "if", "current", ".", "size", "==", "0", ":", "\n", "                    ", "current", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", ".", "reshape", "(", "(", "self", ".", "x_train", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "current", "=", "np", ".", "concatenate", "(", "(", "current", ",", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", ".", "reshape", "(", "(", "self", ".", "x_train", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "", "self", ".", "layers_data", ".", "append", "(", "current", ")", "\n", "\n", "", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.dnr.dnr_mnist.DNRMNIST.train": [[46, 73], ["range", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "pickle.dumps", "open", "open.write", "open.close", "print", "len", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "pickle.dumps", "open", "open.write", "open.close", "print", "sklearn.svm.SVC.predict_proba", "np.concatenate", "str", "sklearn.svm.SVC.predict_proba", "str"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers_data", ")", ")", ":", "\n", "            ", "clf", "=", "SVC", "(", "C", "=", "100", ",", "probability", "=", "True", ",", "random_state", "=", "55", ")", "\n", "clf", ".", "fit", "(", "self", ".", "layers_data", "[", "i", "]", ",", "self", ".", "y_train_labels", ")", "\n", "\n", "#save classifiers", "\n", "s", "=", "pickle", ".", "dumps", "(", "clf", ")", "\n", "f", "=", "open", "(", "'{}{}'", ".", "format", "(", "dnr_results_dir", ",", "self", ".", "svm_clf_name", "[", ":", "-", "6", "]", "+", "'_'", "+", "str", "(", "i", "+", "1", ")", "+", "'.model'", ")", ",", "\"wb+\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "'{} classifier training is finished'", ".", "format", "(", "str", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "if", "self", ".", "clf_outputs", ".", "size", "==", "0", ":", "\n", "                    ", "self", ".", "clf_outputs", "=", "clf", ".", "predict_proba", "(", "self", ".", "layers_data", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "clf_outputs", "=", "np", ".", "concatenate", "(", "(", "self", ".", "clf_outputs", ",", "clf", ".", "predict_proba", "(", "self", ".", "layers_data", "[", "i", "]", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "clf", "=", "SVC", "(", "probability", "=", "True", ",", "random_state", "=", "55", ")", "\n", "clf", ".", "fit", "(", "self", ".", "clf_outputs", ",", "self", ".", "y_train_labels", ")", "\n", "\n", "#save classifiers", "\n", "s", "=", "pickle", ".", "dumps", "(", "clf", ")", "\n", "f", "=", "open", "(", "'{}{}'", ".", "format", "(", "dnr_results_dir", ",", "self", ".", "svm_clf_name", ")", ",", "\"wb+\"", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "'{} classifier training is finished'", ".", "format", "(", "'Combiner'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.scale_features": [[16, 19], ["None"], "function", ["None"], ["def", "scale_features", "(", "features", ",", "min_", ",", "max_", ")", ":", "\n", "\n", "    ", "return", "-", "1", "+", "(", "2.0", "/", "(", "max_", "-", "min_", ")", "*", "(", "features", "-", "min_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.normalize_kernel": [[20, 22], ["numpy.sum"], "function", ["None"], ["", "def", "normalize_kernel", "(", "kernel", ")", ":", "\n", "    ", "return", "kernel", "/", "np", ".", "sum", "(", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.gaussian_kernel2d": [[24, 28], ["MSCN.normalize_kernel", "numpy.indices", "int", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.normalize_kernel"], ["", "def", "gaussian_kernel2d", "(", "n", ",", "sigma", ")", ":", "\n", "    ", "Y", ",", "X", "=", "np", ".", "indices", "(", "(", "n", ",", "n", ")", ")", "-", "int", "(", "n", "/", "2", ")", "\n", "gaussian_kernel", "=", "1", "/", "(", "2", "*", "np", ".", "pi", "*", "sigma", "**", "2", ")", "*", "np", ".", "exp", "(", "-", "(", "X", "**", "2", "+", "Y", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "return", "normalize_kernel", "(", "gaussian_kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.local_mean": [[30, 32], ["scipy.convolve2d"], "function", ["None"], ["", "def", "local_mean", "(", "image", ",", "kernel", ")", ":", "\n", "    ", "return", "signal", ".", "convolve2d", "(", "image", ",", "kernel", ",", "'same'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.local_deviation": [[34, 38], ["scipy.convolve2d", "numpy.sqrt", "numpy.abs", "MSCN.local_mean"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.local_mean"], ["", "def", "local_deviation", "(", "image", ",", "local_mean", ",", "kernel", ")", ":", "\n", "    ", "sigma", "=", "image", "**", "2", "\n", "sigma", "=", "signal", ".", "convolve2d", "(", "sigma", ",", "kernel", ",", "'same'", ")", "\n", "return", "np", ".", "sqrt", "(", "np", ".", "abs", "(", "local_mean", "**", "2", "-", "sigma", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_mscn_coefficients": [[40, 55], ["MSCN.gaussian_kernel2d", "scipy.convolve2d", "MSCN.local_deviation", "skimage.color.rgb2gray", "skimage.color.rgb2gray", "skimage.color.rgb2gray", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.gaussian_kernel2d", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.local_deviation"], ["", "def", "calculate_mscn_coefficients", "(", "img", ",", "kernel_size", ",", "sigma", ")", ":", "\n", "    ", "C", "=", "1", "/", "255", "\n", "\n", "# img = (np.asarray(img) / 255.0).astype(np.float32)", "\n", "# img=np.reshape(img,(np.shape(img)[0],np.shape(img)[1],np.shape(img)[2]))", "\n", "if", "img", ".", "shape", "[", "2", "]", "!=", "1", ":", "\n", "        ", "img", "=", "skimage", ".", "color", ".", "rgb2gray", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "np", ".", "reshape", "(", "img", ",", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "kernel", "=", "gaussian_kernel2d", "(", "kernel_size", ",", "sigma", "=", "sigma", ")", "\n", "local_mean", "=", "signal", ".", "convolve2d", "(", "img", ",", "kernel", ",", "'same'", ")", "\n", "local_var", "=", "local_deviation", "(", "img", ",", "local_mean", ",", "kernel", ")", "\n", "a", "=", "(", "img", "-", "local_mean", ")", "/", "(", "local_var", "+", "C", ")", "\n", "return", "a", "#np.reshape(a, (-1,)) #np.reshape(a,np.shape(img)[0]*np.shape(img)[1]*np.shape(img)[2])", "\n", "", "def", "mscn_histogram", "(", "x", ",", "bins", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.mscn_histogram": [[55, 59], ["numpy.histogram", "x.ravel", "numpy.max"], "function", ["None"], ["", "def", "mscn_histogram", "(", "x", ",", "bins", ")", ":", "\n", "    ", "n", ",", "_", "=", "np", ".", "histogram", "(", "x", ".", "ravel", "(", ")", ",", "bins", "=", "(", "bins", "-", "1", ")", ",", "range", "=", "(", "-", "2.0", ",", "2.0", ")", ")", "\n", "n", "=", "n", "/", "np", ".", "max", "(", "n", ")", "\n", "return", "n", "\n", "", "def", "generalized_gaussian_dist", "(", "x", ",", "alpha", ",", "sigma", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.generalized_gaussian_dist": [[59, 64], ["numpy.sqrt", "numpy.exp", "scipy.gamma", "scipy.gamma", "scipy.gamma", "numpy.abs"], "function", ["None"], ["", "def", "generalized_gaussian_dist", "(", "x", ",", "alpha", ",", "sigma", ")", ":", "\n", "    ", "beta", "=", "sigma", "*", "np", ".", "sqrt", "(", "special", ".", "gamma", "(", "1", "/", "alpha", ")", "/", "special", ".", "gamma", "(", "3", "/", "alpha", ")", ")", "\n", "\n", "coefficient", "=", "alpha", "/", "(", "2", "*", "beta", "*", "special", ".", "gamma", "(", "1", "/", "alpha", ")", ")", "\n", "return", "coefficient", "*", "np", ".", "exp", "(", "-", "(", "np", ".", "abs", "(", "x", ")", "/", "beta", ")", "**", "alpha", ")", "\n", "", "def", "asymmetric_generalized_gaussian", "(", "x", ",", "nu", ",", "sigma_l", ",", "sigma_r", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.asymmetric_generalized_gaussian": [[64, 72], ["numpy.where", "f", "f", "numpy.sqrt", "scipy.gamma", "numpy.exp", "MSCN.asymmetric_generalized_gaussian.beta"], "function", ["None"], ["", "def", "asymmetric_generalized_gaussian", "(", "x", ",", "nu", ",", "sigma_l", ",", "sigma_r", ")", ":", "\n", "    ", "def", "beta", "(", "sigma", ")", ":", "\n", "        ", "return", "sigma", "*", "np", ".", "sqrt", "(", "special", ".", "gamma", "(", "1", "/", "nu", ")", "/", "special", ".", "gamma", "(", "3", "/", "nu", ")", ")", "\n", "\n", "", "coefficient", "=", "nu", "/", "(", "(", "beta", "(", "sigma_l", ")", "+", "beta", "(", "sigma_r", ")", ")", "*", "special", ".", "gamma", "(", "1", "/", "nu", ")", ")", "\n", "f", "=", "lambda", "x", ",", "sigma", ":", "coefficient", "*", "np", ".", "exp", "(", "-", "(", "x", "/", "beta", "(", "sigma", ")", ")", "**", "nu", ")", "\n", "\n", "return", "np", ".", "where", "(", "x", "<", "0", ",", "f", "(", "-", "x", ",", "sigma_l", ")", ",", "f", "(", "x", ",", "sigma_r", ")", ")", "\n", "", "def", "asymmetric_generalized_gaussian_fit", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.asymmetric_generalized_gaussian_fit": [[72, 121], ["MSCN.asymmetric_generalized_gaussian_fit.estimate_alpha"], "function", ["None"], ["", "def", "asymmetric_generalized_gaussian_fit", "(", "x", ")", ":", "\n", "    ", "def", "estimate_phi", "(", "alpha", ")", ":", "\n", "        ", "numerator", "=", "special", ".", "gamma", "(", "2", "/", "alpha", ")", "**", "2", "\n", "denominator", "=", "special", ".", "gamma", "(", "1", "/", "alpha", ")", "*", "special", ".", "gamma", "(", "3", "/", "alpha", ")", "\n", "return", "numerator", "/", "denominator", "\n", "\n", "", "def", "estimate_r_hat", "(", "x", ")", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "x", ".", "shape", ")", "\n", "return", "(", "np", ".", "sum", "(", "np", ".", "abs", "(", "x", ")", ")", "/", "size", ")", "**", "2", "/", "(", "np", ".", "sum", "(", "x", "**", "2", ")", "/", "size", ")", "\n", "\n", "", "def", "estimate_R_hat", "(", "r_hat", ",", "gamma", ")", ":", "\n", "        ", "numerator", "=", "(", "gamma", "**", "3", "+", "1", ")", "*", "(", "gamma", "+", "1", ")", "\n", "denominator", "=", "(", "gamma", "**", "2", "+", "1", ")", "**", "2", "\n", "return", "r_hat", "*", "numerator", "/", "denominator", "\n", "\n", "", "def", "mean_squares_sum", "(", "x", ",", "filter", "=", "lambda", "z", ":", "z", "==", "z", ")", ":", "\n", "        ", "filtered_values", "=", "x", "[", "filter", "(", "x", ")", "]", "\n", "squares_sum", "=", "np", ".", "sum", "(", "filtered_values", "**", "2", ")", "\n", "return", "squares_sum", "/", "(", "(", "filtered_values", ".", "shape", ")", ")", "\n", "\n", "", "def", "estimate_gamma", "(", "x", ")", ":", "\n", "        ", "left_squares", "=", "mean_squares_sum", "(", "x", ",", "lambda", "z", ":", "z", "<", "0", ")", "\n", "right_squares", "=", "mean_squares_sum", "(", "x", ",", "lambda", "z", ":", "z", ">=", "0", ")", "\n", "\n", "return", "np", ".", "sqrt", "(", "left_squares", ")", "/", "np", ".", "sqrt", "(", "right_squares", ")", "\n", "\n", "", "def", "estimate_alpha", "(", "x", ")", ":", "\n", "        ", "r_hat", "=", "estimate_r_hat", "(", "x", ")", "\n", "gamma", "=", "estimate_gamma", "(", "x", ")", "\n", "R_hat", "=", "estimate_R_hat", "(", "r_hat", ",", "gamma", ")", "\n", "\n", "solution", "=", "scipy", ".", "optimize", ".", "root", "(", "lambda", "z", ":", "estimate_phi", "(", "z", ")", "-", "R_hat", ",", "[", "0.2", "]", ")", ".", "x", "\n", "\n", "return", "solution", "[", "0", "]", "\n", "\n", "", "def", "estimate_sigma", "(", "x", ",", "alpha", ",", "filter", "=", "lambda", "z", ":", "z", "<", "0", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "mean_squares_sum", "(", "x", ",", "filter", ")", ")", "\n", "\n", "", "def", "estimate_mean", "(", "alpha", ",", "sigma_l", ",", "sigma_r", ")", ":", "\n", "        ", "return", "(", "sigma_r", "-", "sigma_l", ")", "*", "constant", "*", "(", "special", ".", "gamma", "(", "2", "/", "alpha", ")", "/", "special", ".", "gamma", "(", "1", "/", "alpha", ")", ")", "\n", "\n", "", "alpha", "=", "estimate_alpha", "(", "x", ")", "\n", "sigma_l", "=", "estimate_sigma", "(", "x", ",", "alpha", ",", "lambda", "z", ":", "z", "<", "0", ")", "\n", "sigma_r", "=", "estimate_sigma", "(", "x", ",", "alpha", ",", "lambda", "z", ":", "z", ">=", "0", ")", "\n", "\n", "constant", "=", "np", ".", "sqrt", "(", "special", ".", "gamma", "(", "1", "/", "alpha", ")", "/", "special", ".", "gamma", "(", "3", "/", "alpha", ")", ")", "\n", "mean", "=", "estimate_mean", "(", "alpha", ",", "sigma_l", ",", "sigma_r", ")", "\n", "\n", "return", "alpha", ",", "mean", ",", "sigma_l", ",", "sigma_r", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_ggd_aggd": [[122, 137], ["MSCN.calculate_mscn_coefficients", "MSCN.asymmetric_generalized_gaussian_fit", "numpy.reshape", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_mscn_coefficients", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.asymmetric_generalized_gaussian_fit"], ["", "def", "calculate_ggd_aggd", "(", "image", ",", "coefficients_name", ",", "kernel_size", "=", "7", ",", "sigma", "=", "7", "/", "6", ")", ":", "\n", "    ", "mscn_coefficients", "=", "calculate_mscn_coefficients", "(", "image", ",", "kernel_size", ",", "sigma", ")", "\n", "\n", "alpha", ",", "mean", ",", "sigma_l", ",", "sigma_r", "=", "asymmetric_generalized_gaussian_fit", "(", "mscn_coefficients", ")", "\n", "if", "coefficients_name", "==", "'GGD'", ":", "\n", "       ", "var", "=", "(", "sigma_l", "**", "2", "+", "sigma_r", "**", "2", ")", "/", "2", "\n", "\n", "x", "=", "[", "alpha", ",", "var", "[", "0", "]", "]", "\n", "return", "np", ".", "reshape", "(", "x", ",", "(", "2", ")", ")", "\n", "\n", "", "elif", "coefficients_name", "==", "'AGGD'", ":", "\n", "        ", "x", "=", "[", "alpha", ",", "mean", ",", "sigma_l", "**", "2", ",", "sigma_r", "**", "2", "]", "\n", "return", "np", ".", "reshape", "(", "x", ",", "(", "4", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "mscn_coefficients", "\n", "", "", "def", "calculate_pair_product_coefficients", "(", "mscn_coefficients", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_pair_product_coefficients": [[137, 144], ["collections.OrderedDict"], "function", ["None"], ["", "", "def", "calculate_pair_product_coefficients", "(", "mscn_coefficients", ")", ":", "\n", "    ", "return", "collections", ".", "OrderedDict", "(", "{", "\n", "'GGD'", ":", "mscn_coefficients", ",", "\n", "'horizontal'", ":", "mscn_coefficients", "[", ":", ",", ":", "-", "1", "]", "*", "mscn_coefficients", "[", ":", ",", "1", ":", "]", ",", "\n", "'vertical'", ":", "mscn_coefficients", "[", ":", "-", "1", ",", ":", "]", "*", "mscn_coefficients", "[", "1", ":", ",", ":", "]", ",", "\n", "'main_diagonal'", ":", "mscn_coefficients", "[", ":", "-", "1", ",", ":", "-", "1", "]", "*", "mscn_coefficients", "[", "1", ":", ",", "1", ":", "]", ",", "\n", "'secondary_diagonal'", ":", "mscn_coefficients", "[", "1", ":", ",", ":", "-", "1", "]", "*", "mscn_coefficients", "[", ":", "-", "1", ",", "1", ":", "]", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_brisque_features": [[145, 162], ["MSCN.calculate_mscn_coefficients", "MSCN.calculate_pair_product_coefficients", "list", "numpy.array", "numpy.array", "MSCN.asymmetric_generalized_gaussian_fit", "MSCN.calculate_brisque_features.calculate_features"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_mscn_coefficients", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.calculate_pair_product_coefficients", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.nss.MSCN.asymmetric_generalized_gaussian_fit"], ["", "def", "calculate_brisque_features", "(", "image", ",", "kernel_size", "=", "7", ",", "sigma", "=", "7", "/", "6", ")", ":", "\n", "    ", "def", "calculate_features", "(", "coefficients_name", ",", "coefficients", ",", "accum", "=", "np", ".", "array", "(", "[", "]", ")", ")", ":", "\n", "        ", "alpha", ",", "mean", ",", "sigma_l", ",", "sigma_r", "=", "asymmetric_generalized_gaussian_fit", "(", "coefficients", ")", "\n", "\n", "if", "coefficients_name", "==", "'GGD'", ":", "\n", "            ", "var", "=", "(", "sigma_l", "**", "2", "+", "sigma_r", "**", "2", ")", "/", "2", "\n", "return", "[", "alpha", ",", "var", "[", "0", "]", "]", "\n", "\n", "", "return", "[", "alpha", ",", "mean", "[", "0", "]", ",", "sigma_l", "[", "0", "]", "**", "2", ",", "sigma_r", "[", "0", "]", "**", "2", "]", "\n", "\n", "", "mscn_coefficients", "=", "calculate_mscn_coefficients", "(", "image", ",", "kernel_size", ",", "sigma", ")", "\n", "coefficients", "=", "calculate_pair_product_coefficients", "(", "mscn_coefficients", ")", "\n", "\n", "features", "=", "[", "calculate_features", "(", "name", ",", "coeff", ")", "for", "name", ",", "coeff", "in", "coefficients", ".", "items", "(", ")", "]", "\n", "flatten_features", "=", "list", "(", "chain", ".", "from_iterable", "(", "features", ")", ")", "\n", "\n", "return", "np", ".", "array", "(", "flatten_features", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.AEDetector.__init__": [[25, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_ae", ",", "p", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Error based detector.\n        Marks examples for filtering decisions.\n\n        model_ae: the autoencoder used.\n        p: Distance measure to use.\n        \"\"\"", "\n", "self", ".", "model", "=", "model_ae", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.AEDetector.mark": [[36, 40], ["numpy.abs", "numpy.mean", "numpy.power", "worker.AEDetector.model.predict"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["", "def", "mark", "(", "self", ",", "X", ")", ":", "\n", "        ", "diff", "=", "np", ".", "abs", "(", "X", "-", "self", ".", "model", ".", "predict", "(", "X", ")", ")", "\n", "marks", "=", "np", ".", "mean", "(", "np", ".", "power", "(", "diff", ",", "self", ".", "p", ")", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "return", "marks", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.IdReformer.__init__": [[46, 53], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "\"IdentityFunction\"", ")", ":", "\n", "        ", "\"\"\"\n        Identity reformer.\n        Reforms an example to itself.\n        \"\"\"", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "heal", "=", "lambda", "X", ":", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.IdReformer.print": [[54, 56], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "return", "\"IdReformer:\"", "+", "self", ".", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.SimpleReformer.__init__": [[59, 67], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_ae", ")", ":", "\n", "        ", "\"\"\"\n        Reformer.\n        Reforms examples with autoencoder. Action of reforming is called heal.\n\n        model_ae: the autoencoder used.\n        \"\"\"", "\n", "self", ".", "model", "=", "model_ae", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.SimpleReformer.heal": [[68, 71], ["worker.SimpleReformer.model.predict", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["", "def", "heal", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "model", ".", "predict", "(", "X", ")", "\n", "return", "np", ".", "clip", "(", "X", ",", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.DBDetector.__init__": [[84, 99], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "reconstructor", ",", "prober", ",", "classifier", ",", "option", "=", "\"jsd\"", ",", "T", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Divergence-Based Detector.\n\n        reconstructor: One autoencoder.\n        prober: Another autoencoder.\n        classifier: Classifier object.\n        option: Measure of distance, jsd as default.\n        T: Temperature to soften the classification decision.\n        \"\"\"", "\n", "self", ".", "prober", "=", "prober", "\n", "self", ".", "reconstructor", "=", "reconstructor", "\n", "self", ".", "classifier", "=", "classifier", "\n", "self", ".", "option", "=", "option", "\n", "self", ".", "T", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.DBDetector.mark": [[100, 102], ["worker.DBDetector.mark_jsd"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.DBDetector.mark_jsd"], ["", "def", "mark", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "mark_jsd", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.DBDetector.mark_jsd": [[103, 111], ["worker.DBDetector.prober.heal", "worker.DBDetector.reconstructor.heal", "worker.DBDetector.classifier.classify", "worker.DBDetector.classifier.classify", "numpy.array", "worker.JSD", "range", "len"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.SimpleReformer.heal", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.SimpleReformer.heal", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Classifier.classify", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Classifier.classify", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.JSD"], ["", "def", "mark_jsd", "(", "self", ",", "X", ")", ":", "\n", "        ", "Xp", "=", "self", ".", "prober", ".", "heal", "(", "X", ")", "\n", "Xr", "=", "self", ".", "reconstructor", ".", "heal", "(", "X", ")", "\n", "Pp", "=", "self", ".", "classifier", ".", "classify", "(", "Xp", ",", "option", "=", "\"prob\"", ",", "T", "=", "self", ".", "T", ")", "\n", "Pr", "=", "self", ".", "classifier", ".", "classify", "(", "Xr", ",", "option", "=", "\"prob\"", ",", "T", "=", "self", ".", "T", ")", "\n", "\n", "marks", "=", "[", "(", "JSD", "(", "Pp", "[", "i", "]", ",", "Pr", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "Pr", ")", ")", "]", "\n", "return", "np", ".", "array", "(", "marks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.DBDetector.print": [[112, 114], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "return", "\"Divergence-Based Detector\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Classifier.__init__": [[117, 127], ["keras.models.Sequential", "worker.Classifier.softmax.add", "keras.layers.Lambda", "keras.activations.softmax"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Keras classifier wrapper.\n        Note that the wrapped classifier should spit logits as output.\n\n        classifier_path: Path to Keras classifier file.\n        \"\"\"", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "softmax", "=", "Sequential", "(", ")", "\n", "self", ".", "softmax", ".", "add", "(", "Lambda", "(", "lambda", "X", ":", "softmax", "(", "X", ",", "axis", "=", "1", ")", ",", "input_shape", "=", "(", "num_classes", ",", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Classifier.classify": [[128, 134], ["worker.Classifier.model.predict", "worker.Classifier.softmax.predict", "worker.Classifier.model.predict"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["", "def", "classify", "(", "self", ",", "X", ",", "option", "=", "\"logit\"", ",", "T", "=", "1", ")", ":", "\n", "        ", "if", "option", "==", "\"logit\"", ":", "\n", "            ", "return", "self", ".", "model", ".", "predict", "(", "X", ")", "\n", "", "if", "option", "==", "\"prob\"", ":", "\n", "            ", "logits", "=", "self", ".", "model", ".", "predict", "(", "X", ")", "/", "T", "\n", "return", "self", ".", "softmax", ".", "predict", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Classifier.print": [[135, 137], ["worker.Classifier.path.split"], "methods", ["None"], ["", "", "def", "print", "(", "self", ")", ":", "\n", "        ", "return", "\"Classifier:\"", "+", "self", ".", "path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.__init__": [[140, 157], ["worker.Operator.operate", "worker.AttackData", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.operate"], ["    ", "def", "__init__", "(", "self", ",", "x_val", ",", "x_test", ",", "y_test", ",", "classifier", ",", "det_dict", ",", "reformer", ")", ":", "\n", "        ", "\"\"\"\n        Operator.\n        Describes the classification problem and defense.\n\n        data: Standard problem dataset. Including train, test, and validation.\n        classifier: Target classifier.\n        reformer: Reformer of defense.\n        det_dict: Detector(s) of defense.\n        \"\"\"", "\n", "self", ".", "x_val", "=", "x_val", "\n", "self", ".", "x_test", "=", "x_test", "\n", "self", ".", "y_test", "=", "y_test", "\n", "self", ".", "classifier", "=", "classifier", "\n", "self", ".", "det_dict", "=", "det_dict", "\n", "self", ".", "reformer", "=", "reformer", "\n", "self", ".", "normal", "=", "self", ".", "operate", "(", "AttackData", "(", "self", ".", "x_test", ",", "np", ".", "argmax", "(", "self", ".", "y_test", ",", "axis", "=", "1", ")", ",", "\"Normal\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.get_thrs": [[158, 169], ["dict", "worker.Operator.det_dict.items", "int", "detector.mark", "numpy.sort", "len"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.DBDetector.mark"], ["", "def", "get_thrs", "(", "self", ",", "drop_rate", ")", ":", "\n", "        ", "\"\"\"\n        Get filtering threshold by marking validation set.\n        \"\"\"", "\n", "thrs", "=", "dict", "(", ")", "\n", "for", "name", ",", "detector", "in", "self", ".", "det_dict", ".", "items", "(", ")", ":", "\n", "            ", "num", "=", "int", "(", "len", "(", "self", ".", "x_val", ")", "*", "drop_rate", "[", "name", "]", ")", "\n", "marks", "=", "detector", ".", "mark", "(", "self", ".", "x_val", ")", "\n", "marks", "=", "np", ".", "sort", "(", "marks", ")", "\n", "thrs", "[", "name", "]", "=", "marks", "[", "-", "num", "]", "\n", "", "return", "thrs", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.operate": [[170, 187], ["worker.Operator.reformer.heal", "numpy.argmax", "numpy.argmax", "numpy.array", "worker.Operator.classifier.classify", "worker.Operator.classifier.classify", "list", "zip", "len", "len"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.SimpleReformer.heal", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Classifier.classify", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Classifier.classify"], ["", "def", "operate", "(", "self", ",", "untrusted_obj", ")", ":", "\n", "        ", "\"\"\"\n        For untrusted input(normal or adversarial), classify original input and\n        reformed input. Classifier is unaware of the source of input.\n\n        untrusted_obj: Input data.\n        \"\"\"", "\n", "X", "=", "untrusted_obj", ".", "data", "\n", "Y_true", "=", "untrusted_obj", ".", "labels", "\n", "\n", "X_prime", "=", "self", ".", "reformer", ".", "heal", "(", "X", ")", "\n", "Y", "=", "np", ".", "argmax", "(", "self", ".", "classifier", ".", "classify", "(", "X", ")", ",", "axis", "=", "1", ")", "\n", "Y_judgement", "=", "(", "Y", "==", "Y_true", "[", ":", "len", "(", "X_prime", ")", "]", ")", "\n", "Y_prime", "=", "np", ".", "argmax", "(", "self", ".", "classifier", ".", "classify", "(", "X_prime", ")", ",", "axis", "=", "1", ")", "\n", "Y_prime_judgement", "=", "(", "Y_prime", "==", "Y_true", "[", ":", "len", "(", "X_prime", ")", "]", ")", "\n", "\n", "return", "np", ".", "array", "(", "list", "(", "zip", "(", "Y_judgement", ",", "Y_prime_judgement", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.filter": [[188, 205], ["dict", "numpy.array", "worker.Operator.det_dict.items", "range", "detector.mark", "numpy.argwhere", "len", "numpy.intersect1d", "len"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.DBDetector.mark"], ["", "def", "filter", "(", "self", ",", "X", ",", "thrs", ")", ":", "\n", "        ", "\"\"\"\n        untrusted_obj: Untrusted input to test against.\n        thrs: Thresholds.\n\n        return:\n        all_pass: Index of examples that passed all detectors.\n        collector: Number of examples that escaped each detector.\n        \"\"\"", "\n", "collector", "=", "dict", "(", ")", "\n", "all_pass", "=", "np", ".", "array", "(", "range", "(", "len", "(", "X", ")", ")", ")", "\n", "for", "name", ",", "detector", "in", "self", ".", "det_dict", ".", "items", "(", ")", ":", "\n", "            ", "marks", "=", "detector", ".", "mark", "(", "X", ")", "\n", "idx_pass", "=", "np", ".", "argwhere", "(", "marks", "<", "thrs", "[", "name", "]", ")", "\n", "collector", "[", "name", "]", "=", "len", "(", "idx_pass", ")", "\n", "all_pass", "=", "np", ".", "intersect1d", "(", "all_pass", ",", "idx_pass", ")", "\n", "", "return", "all_pass", ",", "collector", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.print": [[206, 209], ["map", "getattr"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "components", "=", "[", "self", ".", "reformer", ",", "self", ".", "classifier", "]", "\n", "return", "\" \"", ".", "join", "(", "map", "(", "lambda", "obj", ":", "getattr", "(", "obj", ",", "\"print\"", ")", "(", ")", ",", "components", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.AttackData.__init__": [[212, 223], ["isinstance", "utils.load_obj"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.utils.load_obj"], ["    ", "def", "__init__", "(", "self", ",", "examples", ",", "labels", ",", "name", "=", "\"\"", ")", ":", "\n", "        ", "\"\"\"\n        Input data wrapper. May be normal or adversarial.\n\n        examples: Path or object of input examples.\n        labels: Ground truth labels.\n        \"\"\"", "\n", "if", "isinstance", "(", "examples", ",", "str", ")", ":", "self", ".", "data", "=", "utils", ".", "load_obj", "(", "examples", ")", "\n", "else", ":", "self", ".", "data", "=", "examples", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.AttackData.print": [[224, 226], ["None"], "methods", ["None"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "return", "\"Attack:\"", "+", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.__init__": [[229, 243], ["operator.operate"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.operate"], ["    ", "def", "__init__", "(", "self", ",", "operator", ",", "untrusted_data", ",", "graph_dir", "=", "\"./graph\"", ")", ":", "\n", "        ", "\"\"\"\n        Evaluator.\n        For strategy described by operator, conducts tests on untrusted input.\n        Mainly stats and plotting code. Most methods omitted for clarity.\n\n        operator: Operator object.\n        untrusted_data: Input data to test against.\n        graph_dir: Where to spit the graphs.\n        \"\"\"", "\n", "self", ".", "operator", "=", "operator", "\n", "self", ".", "untrusted_data", "=", "untrusted_data", "\n", "self", ".", "graph_dir", "=", "graph_dir", "\n", "self", ".", "data_package", "=", "operator", ".", "operate", "(", "untrusted_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.bind_operator": [[244, 247], ["operator.operate"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.operate"], ["", "def", "bind_operator", "(", "self", ",", "operator", ")", ":", "\n", "        ", "self", ".", "operator", "=", "operator", "\n", "self", ".", "data_package", "=", "operator", ".", "operate", "(", "self", ".", "untrusted_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.load_data": [[248, 251], ["worker.Evaluator.operator.operate"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Operator.operate"], ["", "def", "load_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "untrusted_data", "=", "data", "\n", "self", ".", "data_package", "=", "self", ".", "operator", ".", "operate", "(", "self", ".", "untrusted_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.get_normal_acc": [[252, 272], ["len", "sum", "sum", "sum", "sum"], "methods", ["None"], ["", "def", "get_normal_acc", "(", "self", ",", "normal_all_pass", ")", ":", "\n", "        ", "\"\"\"\n        Break down of who does what in defense. Accuracy of defense on normal\n        input.\n\n        both: Both detectors and reformer take effect\n        det_only: detector(s) take effect\n        ref_only: Only reformer takes effect\n        none: Attack effect with no defense\n        \"\"\"", "\n", "normal_tups", "=", "self", ".", "operator", ".", "normal", "\n", "num_normal", "=", "len", "(", "normal_tups", ")", "\n", "filtered_normal_tups", "=", "normal_tups", "[", "normal_all_pass", "]", "\n", "\n", "both_acc", "=", "sum", "(", "1", "for", "_", ",", "XpC", "in", "filtered_normal_tups", "if", "XpC", ")", "/", "num_normal", "\n", "det_only_acc", "=", "sum", "(", "1", "for", "XC", ",", "XpC", "in", "filtered_normal_tups", "if", "XC", ")", "/", "num_normal", "\n", "ref_only_acc", "=", "sum", "(", "[", "1", "for", "_", ",", "XpC", "in", "normal_tups", "if", "XpC", "]", ")", "/", "num_normal", "\n", "none_acc", "=", "sum", "(", "[", "1", "for", "XC", ",", "_", "in", "normal_tups", "if", "XC", "]", ")", "/", "num_normal", "\n", "\n", "return", "both_acc", ",", "det_only_acc", ",", "ref_only_acc", ",", "none_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.get_attack_acc": [[273, 283], ["len", "sum", "sum", "sum", "sum"], "methods", ["None"], ["", "def", "get_attack_acc", "(", "self", ",", "attack_pass", ")", ":", "\n", "        ", "attack_tups", "=", "self", ".", "data_package", "\n", "num_untrusted", "=", "len", "(", "attack_tups", ")", "\n", "filtered_attack_tups", "=", "attack_tups", "[", "attack_pass", "]", "\n", "\n", "both_acc", "=", "1", "-", "sum", "(", "1", "for", "_", ",", "XpC", "in", "filtered_attack_tups", "if", "not", "XpC", ")", "/", "num_untrusted", "\n", "det_only_acc", "=", "1", "-", "sum", "(", "1", "for", "XC", ",", "XpC", "in", "filtered_attack_tups", "if", "not", "XC", ")", "/", "num_untrusted", "\n", "ref_only_acc", "=", "sum", "(", "[", "1", "for", "_", ",", "XpC", "in", "attack_tups", "if", "XpC", "]", ")", "/", "num_untrusted", "\n", "none_acc", "=", "sum", "(", "[", "1", "for", "XC", ",", "_", "in", "attack_tups", "if", "XC", "]", ")", "/", "num_untrusted", "\n", "return", "both_acc", ",", "det_only_acc", ",", "ref_only_acc", ",", "none_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.plot_various_confidences": [[284, 349], ["matplotlib.figure", "matplotlib.figure", "matplotlib.figure.add_subplot", "utils.load_obj", "magnet.utils.prepare_data", "worker.Evaluator.print"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.utils.load_obj", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.utils.prepare_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "plot_various_confidences", "(", "self", ",", "graph_name", ",", "drop_rate", ",", "\n", "idx_file", "=", "\"example_idx\"", ",", "\n", "confs", "=", "(", "0.0", ",", "10.0", ",", "20.0", ",", "30.0", ",", "40.0", ")", ",", "\n", "get_attack_data_name", "=", "lambda", "c", ":", "\"example_carlini_\"", "+", "str", "(", "c", ")", ")", ":", "\n", "        ", "\"\"\"\n        Test defense performance against Carlini L2 attack of various confidences.\n\n        graph_name: Name of graph file.\n        drop_rate: How many normal examples should each detector drops?\n        idx_file: Index of adversarial examples in standard test set.\n        confs: A series of confidence to test against.\n        get_attack_data_name: Function mapping confidence to corresponding file.\n        \"\"\"", "\n", "pylab", ".", "rcParams", "[", "'figure.figsize'", "]", "=", "6", ",", "4", "\n", "fig", "=", "plt", ".", "figure", "(", "1", ",", "(", "6", ",", "4", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "\n", "idx", "=", "utils", ".", "load_obj", "(", "idx_file", ")", "\n", "X", ",", "_", ",", "Y", "=", "prepare_data", "(", "self", ".", "operator", ".", "data", ",", "idx", ")", "\n", "\n", "det_only", "=", "[", "]", "\n", "ref_only", "=", "[", "]", "\n", "both", "=", "[", "]", "\n", "none", "=", "[", "]", "\n", "\n", "print", "(", "\"\\n==========================================================\"", ")", "\n", "print", "(", "\"Drop Rate:\"", ",", "drop_rate", ")", "\n", "thrs", "=", "self", ".", "operator", ".", "get_thrs", "(", "drop_rate", ")", "\n", "\n", "all_pass", ",", "_", "=", "self", ".", "operator", ".", "filter", "(", "self", ".", "operator", ".", "data", ".", "test_data", ",", "thrs", ")", "\n", "all_on_acc", ",", "_", ",", "_", ",", "_", "=", "self", ".", "get_normal_acc", "(", "all_pass", ")", "\n", "\n", "print", "(", "\"Classification accuracy with all defense on:\"", ",", "all_on_acc", ")", "\n", "\n", "for", "confidence", "in", "confs", ":", "\n", "            ", "f", "=", "get_attack_data_name", "(", "confidence", ")", "\n", "self", ".", "load_data", "(", "AttackData", "(", "f", ",", "Y", ",", "\"Carlini L2 \"", "+", "str", "(", "confidence", ")", ")", ")", "\n", "\n", "print", "(", "\"----------------------------------------------------------\"", ")", "\n", "print", "(", "\"Confidence:\"", ",", "confidence", ")", "\n", "all_pass", ",", "detector_breakdown", "=", "self", ".", "operator", ".", "filter", "(", "self", ".", "untrusted_data", ".", "data", ",", "thrs", ")", "\n", "both_acc", ",", "det_only_acc", ",", "ref_only_acc", ",", "none_acc", "=", "self", ".", "get_attack_acc", "(", "all_pass", ")", "\n", "print", "(", "detector_breakdown", ")", "\n", "both", ".", "append", "(", "both_acc", ")", "\n", "det_only", ".", "append", "(", "det_only_acc", ")", "\n", "ref_only", ".", "append", "(", "ref_only_acc", ")", "\n", "none", ".", "append", "(", "none_acc", ")", "\n", "\n", "", "size", "=", "2.5", "\n", "plt", ".", "plot", "(", "confs", ",", "none", ",", "c", "=", "\"green\"", ",", "label", "=", "\"No fefense\"", ",", "marker", "=", "\"x\"", ",", "markersize", "=", "size", ")", "\n", "plt", ".", "plot", "(", "confs", ",", "det_only", ",", "c", "=", "\"orange\"", ",", "label", "=", "\"With detector\"", ",", "marker", "=", "\"o\"", ",", "markersize", "=", "size", ")", "\n", "plt", ".", "plot", "(", "confs", ",", "ref_only", ",", "c", "=", "\"blue\"", ",", "label", "=", "\"With reformer\"", ",", "marker", "=", "\"^\"", ",", "markersize", "=", "size", ")", "\n", "plt", ".", "plot", "(", "confs", ",", "both", ",", "c", "=", "\"red\"", ",", "label", "=", "\"With detector & reformer\"", ",", "marker", "=", "\"s\"", ",", "markersize", "=", "size", ")", "\n", "\n", "pylab", ".", "legend", "(", "loc", "=", "'lower left'", ",", "bbox_to_anchor", "=", "(", "0.02", ",", "0.1", ")", ",", "prop", "=", "{", "'size'", ":", "8", "}", ")", "\n", "plt", ".", "grid", "(", "linestyle", "=", "'dotted'", ")", "\n", "plt", ".", "xlabel", "(", "r\"Confidence in Carlini $L^2$ attack\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Classification accuracy\"", ")", "\n", "plt", ".", "xlim", "(", "min", "(", "confs", ")", "-", "1.0", ",", "max", "(", "confs", ")", "+", "1.0", ")", "\n", "plt", ".", "ylim", "(", "-", "0.05", ",", "1.05", ")", "\n", "ax", ".", "yaxis", ".", "set_major_formatter", "(", "FuncFormatter", "(", "'{0:.0%}'", ".", "format", ")", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "graph_dir", ",", "graph_name", "+", "\".pdf\"", ")", "\n", "plt", ".", "savefig", "(", "save_path", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print": [[350, 352], ["worker.Evaluator.operator.print", "worker.Evaluator.untrusted_data.print"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "return", "\" \"", ".", "join", "(", "[", "self", ".", "operator", ".", "print", "(", ")", ",", "self", ".", "untrusted_data", ".", "print", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.JSD": [[76, 81], ["numpy.linalg.norm", "numpy.linalg.norm", "scipy.stats.entropy", "scipy.stats.entropy"], "function", ["None"], ["", "", "def", "JSD", "(", "P", ",", "Q", ")", ":", "\n", "    ", "_P", "=", "P", "/", "norm", "(", "P", ",", "ord", "=", "1", ")", "\n", "_Q", "=", "Q", "/", "norm", "(", "Q", ",", "ord", "=", "1", ")", "\n", "_M", "=", "0.5", "*", "(", "_P", "+", "_Q", ")", "\n", "return", "0.5", "*", "(", "entropy", "(", "_P", ",", "_M", ")", "+", "entropy", "(", "_Q", ",", "_M", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.DenoisingAutoEncoder.__init__": [[18, 64], ["keras.layers.Input", "reversed", "keras.models.Model", "isinstance", "isinstance", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.l2", "keras.layers.MaxPooling2D", "print", "exit", "keras.layers.UpSampling2D", "keras.l2", "keras.layers.AveragePooling2D", "keras.l2"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["    ", "def", "__init__", "(", "self", ",", "image_shape", ",", "\n", "structure", ",", "\n", "v_noise", "=", "0.0", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "model_dir", "=", "\"./defensive_models/\"", ",", "\n", "reg_strength", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Denoising autoencoder.\n\n        image_shape: Shape of input image. e.g. 28, 28, 1.\n        structure: Structure of autoencoder.\n        v_noise: Volume of noise while training.\n        activation: What activation function to use.\n        model_dir: Where to save / load model from.\n        reg_strength: Strength of L2 regularization.\n        \"\"\"", "\n", "h", ",", "w", ",", "c", "=", "image_shape", "\n", "self", ".", "image_shape", "=", "image_shape", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "self", ".", "v_noise", "=", "v_noise", "\n", "\n", "input_img", "=", "Input", "(", "shape", "=", "self", ".", "image_shape", ")", "\n", "x", "=", "input_img", "\n", "\n", "for", "layer", "in", "structure", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "int", ")", ":", "\n", "                ", "x", "=", "Conv2D", "(", "layer", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "activation", ",", "padding", "=", "\"same\"", ",", "\n", "activity_regularizer", "=", "regs", ".", "l2", "(", "reg_strength", ")", ")", "(", "x", ")", "\n", "", "elif", "layer", "==", "\"max\"", ":", "\n", "                ", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "elif", "layer", "==", "\"average\"", ":", "\n", "                ", "x", "=", "AveragePooling2D", "(", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "layer", ",", "\"is not recognized!\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "", "for", "layer", "in", "reversed", "(", "structure", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "int", ")", ":", "\n", "                ", "x", "=", "Conv2D", "(", "layer", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "activation", ",", "padding", "=", "\"same\"", ",", "\n", "activity_regularizer", "=", "regs", ".", "l2", "(", "reg_strength", ")", ")", "(", "x", ")", "\n", "", "elif", "layer", "==", "\"max\"", "or", "layer", "==", "\"average\"", ":", "\n", "                ", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "\n", "", "", "decoded", "=", "Conv2D", "(", "c", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'sigmoid'", ",", "padding", "=", "'same'", ",", "\n", "activity_regularizer", "=", "regs", ".", "l2", "(", "reg_strength", ")", ")", "(", "x", ")", "\n", "self", ".", "model", "=", "Model", "(", "input_img", ",", "decoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.DenoisingAutoEncoder.train": [[65, 82], ["defensive_models.DenoisingAutoEncoder.model.compile", "numpy.clip", "defensive_models.DenoisingAutoEncoder.model.fit", "numpy.random.normal", "defensive_models.DenoisingAutoEncoder.model.save", "os.path.join", "numpy.shape"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "x_train", ",", "x_test", ",", "archive_name", ",", "clip_min", ",", "clip_max", ",", "num_epochs", "=", "100", ",", "batch_size", "=", "256", ",", "\n", "if_save", "=", "True", ")", ":", "\n", "        ", "self", ".", "model", ".", "compile", "(", "loss", "=", "'mean_squared_error'", ",", "\n", "metrics", "=", "[", "'mean_squared_error'", "]", ",", "\n", "optimizer", "=", "'adam'", ")", "\n", "\n", "noise", "=", "self", ".", "v_noise", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "np", ".", "shape", "(", "x_train", ")", ")", "\n", "noisy_train_data", "=", "x_train", "+", "noise", "\n", "noisy_train_data", "=", "np", ".", "clip", "(", "noisy_train_data", ",", "clip_min", ",", "clip_max", ")", "\n", "\n", "self", ".", "model", ".", "fit", "(", "noisy_train_data", ",", "x_train", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "validation_data", "=", "(", "x_test", ",", "x_test", ")", ",", "\n", "epochs", "=", "num_epochs", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "if", "if_save", ":", "self", ".", "model", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "archive_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.DenoisingAutoEncoder.load": [[83, 86], ["defensive_models.DenoisingAutoEncoder.model.load_weights", "os.path.join"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "archive_name", ",", "model_dir", "=", "None", ")", ":", "\n", "        ", "if", "model_dir", "is", "None", ":", "model_dir", "=", "self", ".", "model_dir", "\n", "self", ".", "model", ".", "load_weights", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "archive_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.__init__": [[89, 117], ["range", "keras.layers.Input", "keras.models.Model", "defensive_models.DenoisingAutoEncoder", "defensive_models.DenoisingAutoEncoder.train", "pack.append", "DenoisingAutoEncoder.", "keras.layers.merge.Average", "keras.layers.merge.add", "keras.layers.core.Lambda"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "image_shape", ",", "structure", ",", "data", ",", "\n", "v_noise", "=", "0.1", ",", "n_pack", "=", "2", ",", "pre_epochs", "=", "3", ",", "activation", "=", "\"relu\"", ",", "\n", "model_dir", "=", "\"./defensive_models/\"", ")", ":", "\n", "        ", "\"\"\"\n        Train different autoencoders.\n        Demo code for graybox scenario.\n\n        pre_epochs: How many epochs do we train before fine-tuning.\n        n_pack: Number of autoencoders we want to train at once.\n        \"\"\"", "\n", "self", ".", "v_noise", "=", "v_noise", "\n", "self", ".", "n_pack", "=", "n_pack", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "pack", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_pack", ")", ":", "\n", "            ", "dae", "=", "DenoisingAutoEncoder", "(", "image_shape", ",", "structure", ",", "v_noise", "=", "v_noise", ",", "\n", "activation", "=", "activation", ",", "model_dir", "=", "model_dir", ")", "\n", "dae", ".", "train", "(", "data", ",", "\"\"", ",", "if_save", "=", "False", ",", "num_epochs", "=", "pre_epochs", ")", "\n", "pack", ".", "append", "(", "dae", ".", "model", ")", "\n", "\n", "", "shared_input", "=", "Input", "(", "shape", "=", "image_shape", ",", "name", "=", "\"shared_input\"", ")", "\n", "outputs", "=", "[", "dae", "(", "shared_input", ")", "for", "dae", "in", "pack", "]", "\n", "avg_output", "=", "Average", "(", ")", "(", "outputs", ")", "\n", "delta_outputs", "=", "[", "add", "(", "[", "avg_output", ",", "Lambda", "(", "lambda", "x", ":", "-", "x", ")", "(", "output", ")", "]", ")", "\n", "for", "output", "in", "outputs", "]", "\n", "\n", "self", ".", "model", "=", "Model", "(", "inputs", "=", "shared_input", ",", "outputs", "=", "outputs", "+", "delta_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.train": [[118, 140], ["numpy.clip", "defensive_models.PackedAutoEncoder.model.compile", "defensive_models.PackedAutoEncoder.model.fit", "range", "numpy.random.normal", "keras.models.Model", "keras.models.Model.save", "numpy.zeros_like", "numpy.zeros_like", "os.path.join", "numpy.shape", "str"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "data", ",", "archive_name", ",", "alpha", ",", "num_epochs", "=", "10", ",", "batch_size", "=", "128", ")", ":", "\n", "        ", "noise", "=", "self", ".", "v_noise", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "np", ".", "shape", "(", "data", ".", "train_data", ")", ")", "\n", "noisy_train_data", "=", "data", ".", "train_data", "+", "noise", "\n", "noisy_train_data", "=", "np", ".", "clip", "(", "noisy_train_data", ",", "0.0", ",", "1.0", ")", "\n", "\n", "train_zeros", "=", "[", "np", ".", "zeros_like", "(", "data", ".", "train_data", ")", "]", "*", "self", ".", "n_pack", "\n", "val_zeros", "=", "[", "np", ".", "zeros_like", "(", "data", ".", "validation_data", ")", "]", "*", "self", ".", "n_pack", "\n", "\n", "self", ".", "model", ".", "compile", "(", "loss", "=", "\"mean_squared_error\"", ",", "optimizer", "=", "\"adam\"", ",", "\n", "loss_weights", "=", "[", "1.0", "]", "*", "self", ".", "n_pack", "+", "[", "-", "alpha", "]", "*", "self", ".", "n_pack", ")", "\n", "\n", "self", ".", "model", ".", "fit", "(", "noisy_train_data", ",", "\n", "[", "data", ".", "train_data", "]", "*", "self", ".", "n_pack", "+", "train_zeros", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "validation_data", "=", "(", "data", ".", "validation_data", ",", "\n", "[", "data", ".", "validation_data", "]", "*", "self", ".", "n_pack", "+", "val_zeros", ")", ",", "\n", "epochs", "=", "num_epochs", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_pack", ")", ":", "\n", "            ", "model", "=", "Model", "(", "self", ".", "model", ".", "input", ",", "self", ".", "model", ".", "outputs", "[", "i", "]", ")", "\n", "model", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "archive_name", "+", "\"_\"", "+", "str", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load": [[141, 144], ["defensive_models.PackedAutoEncoder.model.load_weights", "os.path.join"], "methods", ["None"], ["", "", "def", "load", "(", "self", ",", "archive_name", ",", "model_dir", "=", "None", ")", ":", "\n", "        ", "if", "model_dir", "is", "None", ":", "model_dir", "=", "self", ".", "model_dir", "\n", "self", ".", "model", ".", "load_weights", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "archive_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.utils.prepare_data": [[13, 22], ["numpy.argmax"], "function", ["None"], ["def", "prepare_data", "(", "dataset", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n    Extract data from index.\n\n    dataset: Full, working dataset. Such as MNIST().\n    idx: Index of test examples that we care about.\n    return: X, targets, Y\n    \"\"\"", "\n", "return", "dataset", ".", "test_data", "[", "idx", "]", ",", "dataset", ".", "test_labels", "[", "idx", "]", ",", "np", ".", "argmax", "(", "dataset", ".", "test_labels", "[", "idx", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.utils.save_obj": [[24, 27], ["open", "pickle.dump", "os.path.join"], "function", ["None"], ["", "def", "save_obj", "(", "obj", ",", "name", ",", "directory", "=", "'./attack_data/'", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "name", "+", "'.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.utils.load_obj": [[29, 33], ["name.endswith", "open", "pickle.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.defensive_models.PackedAutoEncoder.load"], ["", "", "def", "load_obj", "(", "name", ",", "directory", "=", "'./attack_data/'", ")", ":", "\n", "    ", "if", "name", ".", "endswith", "(", "\".pkl\"", ")", ":", "name", "=", "name", "[", ":", "-", "4", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "name", "+", "'.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_svhn_gray.SVHNCNN.__init__": [[6, 36], ["load_svhn_data", "toCat_onehot", "cnn_svhn_gray.SVHNCNN.build_model", "normalize_mean", "normalize_linear", "cnn_svhn_gray.SVHNCNN.train", "cnn_svhn_gray.SVHNCNN.model.load_weights", "Exception"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_svhn_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "filename", "=", "\"cnn_svhn.h5\"", ",", "normalize_mean", "=", "False", ",", "epochs", "=", "50", ",", "batch_size", "=", "128", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "#train or load", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "normalize_mean", "=", "normalize_mean", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "#====================== load data ========================", "\n", "self", ".", "num_classes", "=", "10", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_svhn_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "#====================== Model =============================", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"{}{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "'gray/'", ",", "self", ".", "filename", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_svhn_gray.SVHNCNN.build_model": [[37, 76], ["Input", "Model", "Conv2D", "Activation", "Conv2D", "Activation", "MaxPooling2D", "Conv2D", "Activation", "Conv2D", "Activation", "MaxPooling2D", "Flatten", "Dense", "Activation", "Dropout", "Dense", "Activation", "Dropout", "Dense", "Activation", "l2", "l2", "l2", "l2", "l2", "l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.3", "\n", "\n", "#================= Input ============================", "\n", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ",", "name", "=", "'l_0'", ")", "\n", "\n", "#================= CONV ============================", "\n", "task0", "=", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_1'", ")", "(", "input", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_2'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_3'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_4'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_5'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_6'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_7'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_8'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_9'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_10'", ")", "(", "task0", ")", "\n", "\n", "#================= Dense ============================", "\n", "task0", "=", "Flatten", "(", "name", "=", "'l_11'", ")", "(", "task0", ")", "\n", "task0", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_12'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_13'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ",", "name", "=", "'l_14'", ")", "(", "task0", ")", "\n", "task0", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_15'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_16'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ",", "name", "=", "'l_17'", ")", "(", "task0", ")", "\n", "\n", "#================= Output - classification head ============================", "\n", "classification_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "\"classification_head_before_activation\"", ")", "(", "task0", ")", "\n", "classification_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "\"classification_head\"", ")", "(", "classification_output", ")", "\n", "\n", "#================= The final model ============================", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "classification_output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_svhn_gray.SVHNCNN.train": [[77, 118], ["LearningRateScheduler", "ModelCheckpoint", "ImageDataGenerator", "ImageDataGenerator.fit", "optimizers.SGD", "model.compile", "model.fit_generator", "ImageDataGenerator.flow", "open", "pickle.dump"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "50", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "LearningRateScheduler", "(", "lr_scheduler", ",", "verbose", "=", "1", ")", "\n", "weights_file", "=", "\"{}{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "\"gray/\"", ",", "self", ".", "filename", ")", "\n", "model_checkpoint", "=", "ModelCheckpoint", "(", "weights_file", ",", "monitor", "=", "'val_accuracy'", ",", "save_best_only", "=", "True", ",", "verbose", "=", "1", ")", "\n", "callbacks", "=", "[", "reduce_lr", ",", "model_checkpoint", "]", "\n", "\n", "#================= Data augmentation =========================", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ")", "# randomly flip images", "\n", "\n", "#================= Train =========================", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "datagen", ".", "flow", "(", "self", ".", "x_train", ",", "y", "=", "self", ".", "y_train", ",", "batch_size", "=", "self", ".", "batch_size", ")", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "callbacks", "=", "callbacks", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", ")", "\n", "\n", "#================= Save model and history =========================", "\n", "with", "open", "(", "\"{}{}{}_history.pkl\"", ".", "format", "(", "checkpoints_dir", ",", "\"gray/\"", ",", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "# model.save_weights(weights_file)", "\n", "\n", "", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_mnist.MNISTCNN.__init__": [[6, 36], ["load_mnist_data", "toCat_onehot", "cnn_mnist.MNISTCNN.build_model", "normalize_mean", "normalize_linear", "cnn_mnist.MNISTCNN.train", "cnn_mnist.MNISTCNN.model.load_weights", "Exception"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_mnist_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "filename", "=", "\"cnn_mnist.h5\"", ",", "normalize_mean", "=", "False", ",", "epochs", "=", "50", ",", "batch_size", "=", "128", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "#train or load", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "normalize_mean", "=", "normalize_mean", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "#====================== load data ========================", "\n", "self", ".", "num_classes", "=", "10", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_mnist_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "#====================== Model =============================", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_mnist.MNISTCNN.build_model": [[37, 76], ["Input", "Model", "Conv2D", "Activation", "Conv2D", "Activation", "MaxPooling2D", "Conv2D", "Activation", "Conv2D", "Activation", "MaxPooling2D", "Flatten", "Dense", "Activation", "Dropout", "Dense", "Activation", "Dense", "Activation", "l2", "l2", "l2", "l2", "l2", "l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.3", "\n", "\n", "#================= Input ============================", "\n", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ",", "name", "=", "'l_0'", ")", "\n", "\n", "#================= CONV ============================", "\n", "task0", "=", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_1'", ")", "(", "input", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_2'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_3'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_4'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_5'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_6'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_7'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_8'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_9'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_10'", ")", "(", "task0", ")", "#l_3 = task0", "\n", "\n", "#================= Dense ============================", "\n", "task0", "=", "Flatten", "(", "name", "=", "'l_11'", ")", "(", "task0", ")", "\n", "task0", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_12'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_13'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ",", "name", "=", "'l_14'", ")", "(", "task0", ")", "\n", "task0", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_15'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_16'", ")", "(", "task0", ")", "\n", "# task0 = Dropout(basic_dropout_rate + 0.2, name='l_17')(task0) ", "\n", "\n", "#================= Output - classification head ============================", "\n", "classification_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "\"classification_head_before_activation\"", ")", "(", "task0", ")", "\n", "classification_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "\"classification_head\"", ")", "(", "classification_output", ")", "\n", "\n", "#================= The final model ============================", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "classification_output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_mnist.MNISTCNN.train": [[77, 118], ["LearningRateScheduler", "ModelCheckpoint", "ImageDataGenerator", "ImageDataGenerator.fit", "optimizers.SGD", "model.compile", "model.fit_generator", "ImageDataGenerator.flow", "open", "pickle.dump"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "learning_rate", "=", "0.05", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "5", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "weights_file", "=", "\"{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", ")", "\n", "model_checkpoint", "=", "ModelCheckpoint", "(", "weights_file", ",", "monitor", "=", "'val_accuracy'", ",", "save_best_only", "=", "True", ",", "verbose", "=", "1", ")", "\n", "callbacks", "=", "[", "reduce_lr", ",", "model_checkpoint", "]", "\n", "\n", "#================= Data augmentation =========================", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ")", "# randomly flip images", "\n", "\n", "#================= Train =========================", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "datagen", ".", "flow", "(", "self", ".", "x_train", ",", "y", "=", "self", ".", "y_train", ",", "batch_size", "=", "self", ".", "batch_size", ")", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "callbacks", "=", "callbacks", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", ")", "\n", "\n", "#================= Save model and history =========================", "\n", "with", "open", "(", "\"{}{}_history.pkl\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "# model.save_weights(weights_file)", "\n", "\n", "", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_mnist_gray.MNISTCNN.__init__": [[6, 36], ["load_mnist_data", "toCat_onehot", "cnn_mnist_gray.MNISTCNN.build_model", "normalize_mean", "normalize_linear", "cnn_mnist_gray.MNISTCNN.train", "cnn_mnist_gray.MNISTCNN.model.load_weights", "Exception"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_mnist_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "filename", "=", "\"cnn_mnist.h5\"", ",", "normalize_mean", "=", "False", ",", "epochs", "=", "50", ",", "batch_size", "=", "128", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "#train or load", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "normalize_mean", "=", "normalize_mean", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "#====================== load data ========================", "\n", "self", ".", "num_classes", "=", "10", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_mnist_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "#====================== Model =============================", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_mnist_gray.MNISTCNN.build_model": [[37, 76], ["Input", "Model", "Conv2D", "Activation", "Conv2D", "Activation", "MaxPooling2D", "Conv2D", "Activation", "Conv2D", "Activation", "MaxPooling2D", "Flatten", "Dense", "Activation", "Dropout", "Dense", "Activation", "Dropout", "Dense", "Activation", "l2", "l2", "l2", "l2", "l2", "l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.3", "\n", "\n", "#================= Input ============================", "\n", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ",", "name", "=", "'l_0'", ")", "\n", "\n", "#================= CONV ============================", "\n", "task0", "=", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_1'", ")", "(", "input", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_2'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_3'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_4'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_5'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_6'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_7'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_8'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_9'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_10'", ")", "(", "task0", ")", "#l_3 = task0", "\n", "\n", "#================= Dense ============================", "\n", "task0", "=", "Flatten", "(", "name", "=", "'l_11'", ")", "(", "task0", ")", "\n", "task0", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_12'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_13'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ",", "name", "=", "'l_14'", ")", "(", "task0", ")", "\n", "task0", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_15'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_16'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ",", "name", "=", "'l_17'", ")", "(", "task0", ")", "\n", "\n", "#================= Output - classification head ============================", "\n", "classification_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "\"classification_head_before_activation\"", ")", "(", "task0", ")", "\n", "classification_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "\"classification_head\"", ")", "(", "classification_output", ")", "\n", "\n", "#================= The final model ============================", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "classification_output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_mnist_gray.MNISTCNN.train": [[77, 118], ["LearningRateScheduler", "ModelCheckpoint", "ImageDataGenerator", "ImageDataGenerator.fit", "optimizers.SGD", "model.compile", "model.fit_generator", "ImageDataGenerator.flow", "open", "pickle.dump"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "learning_rate", "=", "0.05", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "5", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "weights_file", "=", "\"{}{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "\"gray/\"", ",", "self", ".", "filename", ")", "\n", "model_checkpoint", "=", "ModelCheckpoint", "(", "weights_file", ",", "monitor", "=", "'val_accuracy'", ",", "save_best_only", "=", "True", ",", "verbose", "=", "1", ")", "\n", "callbacks", "=", "[", "reduce_lr", ",", "model_checkpoint", "]", "\n", "\n", "#================= Data augmentation =========================", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ")", "# randomly flip images", "\n", "\n", "#================= Train =========================", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "datagen", ".", "flow", "(", "self", ".", "x_train", ",", "y", "=", "self", ".", "y_train", ",", "batch_size", "=", "self", ".", "batch_size", ")", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "callbacks", "=", "callbacks", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", ")", "\n", "\n", "#================= Save model and history =========================", "\n", "with", "open", "(", "\"{}{}{}_history.pkl\"", ".", "format", "(", "checkpoints_dir", ",", "\"gray/\"", ",", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "# model.save_weights(weights_file)", "\n", "\n", "", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_svhn.SVHNCNN.__init__": [[6, 36], ["load_svhn_data", "toCat_onehot", "cnn_svhn.SVHNCNN.build_model", "normalize_mean", "normalize_linear", "cnn_svhn.SVHNCNN.train", "cnn_svhn.SVHNCNN.model.load_weights", "Exception"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_svhn_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "filename", "=", "\"cnn_svhn.h5\"", ",", "normalize_mean", "=", "False", ",", "epochs", "=", "50", ",", "batch_size", "=", "128", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "#train or load", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "normalize_mean", "=", "normalize_mean", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "#====================== load data ========================", "\n", "self", ".", "num_classes", "=", "10", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_svhn_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "#====================== Model =============================", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_svhn.SVHNCNN.build_model": [[37, 76], ["Input", "Model", "Conv2D", "Activation", "Conv2D", "Activation", "MaxPooling2D", "Conv2D", "Activation", "Conv2D", "Activation", "MaxPooling2D", "Flatten", "Dense", "Activation", "Dropout", "Dense", "Activation", "Dense", "Activation", "l2", "l2", "l2", "l2", "l2", "l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.3", "\n", "\n", "#================= Input ============================", "\n", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ",", "name", "=", "'l_0'", ")", "\n", "\n", "#================= CONV ============================", "\n", "task0", "=", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_1'", ")", "(", "input", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_2'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_3'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_4'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_5'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_6'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_7'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_8'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_9'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_10'", ")", "(", "task0", ")", "\n", "\n", "#================= Dense ============================", "\n", "task0", "=", "Flatten", "(", "name", "=", "'l_11'", ")", "(", "task0", ")", "\n", "task0", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_12'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_13'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ",", "name", "=", "'l_14'", ")", "(", "task0", ")", "\n", "task0", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_15'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_16'", ")", "(", "task0", ")", "\n", "#task0 = Dropout(basic_dropout_rate + 0.2, name='l_17')(task0) ", "\n", "\n", "#================= Output - classification head ============================", "\n", "classification_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "\"classification_head_before_activation\"", ")", "(", "task0", ")", "\n", "classification_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "\"classification_head\"", ")", "(", "classification_output", ")", "\n", "\n", "#================= The final model ============================", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "classification_output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_svhn.SVHNCNN.train": [[77, 119], ["LearningRateScheduler", "ImageDataGenerator", "ImageDataGenerator.fit", "optimizers.SGD", "model.compile", "model.fit_generator", "model.save_weights", "ImageDataGenerator.flow", "open", "pickle.dump"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "50", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "LearningRateScheduler", "(", "lr_scheduler", ",", "verbose", "=", "1", ")", "\n", "weights_file", "=", "\"{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", ")", "\n", "#model_checkpoint = ModelCheckpoint(weights_file, monitor='val_accuracy', save_best_only=True, verbose=1)", "\n", "#callbacks=[reduce_lr, model_checkpoint]", "\n", "callbacks", "=", "[", "reduce_lr", "]", "\n", "\n", "#================= Data augmentation =========================", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ")", "# randomly flip images", "\n", "\n", "#================= Train =========================", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "datagen", ".", "flow", "(", "self", ".", "x_train", ",", "y", "=", "self", ".", "y_train", ",", "batch_size", "=", "self", ".", "batch_size", ")", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "callbacks", "=", "callbacks", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", ")", "\n", "\n", "#================= Save model and history =========================", "\n", "with", "open", "(", "\"{}{}_history.pkl\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model", ".", "save_weights", "(", "weights_file", ")", "\n", "\n", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_cifar10_gray.CIFAR10CNN.__init__": [[6, 36], ["load_cifar10_data", "toCat_onehot", "cnn_cifar10_gray.CIFAR10CNN.build_model", "normalize_mean", "normalize_linear", "cnn_cifar10_gray.CIFAR10CNN.train", "cnn_cifar10_gray.CIFAR10CNN.model.load_weights", "Exception"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_cifar10_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "filename", "=", "\"cnn_cifar10.h5\"", ",", "norm_mean", "=", "False", ",", "epochs", "=", "100", ",", "batch_size", "=", "32", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "#train or load", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "norm_mean", "=", "norm_mean", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "#====================== load data ========================", "\n", "self", ".", "num_classes", "=", "10", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_cifar10_data", "(", ")", "\n", "if", "self", ".", "norm_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "#====================== Model =============================", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_cifar10_gray.CIFAR10CNN.build_model": [[37, 94], ["Input", "Model", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "MaxPooling2D", "Dropout", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "MaxPooling2D", "Dropout", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "MaxPooling2D", "Dropout", "Conv2D", "BatchNormalization", "Activation", "MaxPooling2D", "Dropout", "Flatten", "Dense", "Dropout", "Dense", "Activation", "l2", "l2", "l2", "l2", "l2", "l2", "l2", "l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.1", "\n", "\n", "#================= Input ============================", "\n", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ",", "name", "=", "'l_0'", ")", "\n", "\n", "#================= CONV ============================", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_1'", ")", "(", "input", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_2'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_3'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_4'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_5'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_6'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_7'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", ",", "name", "=", "'l_8'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_9'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_10'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_11'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_12'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_13'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_14'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_15'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ",", "name", "=", "'l_16'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_17'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_18'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_19'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_20'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_21'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_22'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_23'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ",", "name", "=", "'l_24'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_25'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_26'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_27'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_28'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.3", ",", "name", "=", "'l_29'", ")", "(", "task0", ")", "\n", "\n", "#================= Dense ============================", "\n", "task0", "=", "Flatten", "(", "name", "=", "'l_30'", ")", "(", "task0", ")", "\n", "task0", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_31'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.3", ",", "name", "=", "'l_32'", ")", "(", "task0", ")", "\n", "\n", "#================= Output - classification head ============================", "\n", "classification_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "\"classification_head_before_softmax\"", ")", "(", "task0", ")", "\n", "classification_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "\"classification_head\"", ")", "(", "classification_output", ")", "\n", "\n", "#================= The final model ============================", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "classification_output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_cifar10_gray.CIFAR10CNN.train": [[95, 136], ["LearningRateScheduler", "ModelCheckpoint", "ImageDataGenerator", "ImageDataGenerator.fit", "optimizers.SGD", "model.compile", "model.fit_generator", "ImageDataGenerator.flow", "open", "pickle.dump"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "30", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "weights_file", "=", "\"{}{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "\"gray/\"", ",", "self", ".", "filename", ")", "\n", "model_checkpoint", "=", "ModelCheckpoint", "(", "weights_file", ",", "monitor", "=", "'val_accuracy'", ",", "save_best_only", "=", "True", ",", "verbose", "=", "1", ")", "\n", "callbacks", "=", "[", "reduce_lr", ",", "model_checkpoint", "]", "\n", "\n", "#================= Data augmentation =========================", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ")", "# randomly flip images", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "\n", "#================= Train =========================", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "datagen", ".", "flow", "(", "self", ".", "x_train", ",", "y", "=", "self", ".", "y_train", ",", "batch_size", "=", "self", ".", "batch_size", ")", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "callbacks", "=", "callbacks", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", ")", "\n", "\n", "#================= Save model and history =========================", "\n", "with", "open", "(", "\"{}{}{}_history.pkl\"", ".", "format", "(", "checkpoints_dir", ",", "\"gray/\"", ",", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "# # model.save_weights(weights_file)", "\n", "\n", "", "return", "model", "", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_tiny.TINYCNN.__init__": [[9, 41], ["load_tiny_imagenet_data", "normalize_linear", "toCat_onehot", "cnn_tiny.TINYCNN.build_model", "sklearn.utils.shuffle", "cnn_tiny.TINYCNN.train", "cnn_tiny.TINYCNN.model.load_weights", "Exception"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_tiny_imagenet_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "filename", "=", "\"cnn_tiny.h5\"", ",", "epochs", "=", "300", ",", "batch_size", "=", "128", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "#train or load", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "#====================== load data ========================", "\n", "self", ".", "num_classes", "=", "200", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_tiny_imagenet_data", "(", ")", "\n", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "y_train", "=", "shuffle", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", "\n", "# self.x_train = pre_dense(self.x_train)", "\n", "# self.x_test = pre_dense(self.x_test)", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "#====================== Model =============================", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "# if os.path.isfile(\"checkpoints/{}\".format(self.filename)):", "\n", "#     self.model.load_weights(\"checkpoints/{}\".format(self.filename))", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_tiny.TINYCNN.build_model": [[42, 61], ["keras.applications.densenet.DenseNet201", "Model", "GlobalAveragePooling2D", "Dense", "Activation"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "weight_decay", "=", "0.001", "\n", "\n", "#================= Dense ============================", "\n", "base_model", "=", "DenseNet201", "(", "weights", "=", "'imagenet'", ",", "input_shape", "=", "(", "self", ".", "input_shape", ")", ",", "include_top", "=", "False", ")", "\n", "# base_model = ResNet50V2(weights='imagenet', include_top=False)", "\n", "x", "=", "base_model", ".", "output", "\n", "x", "=", "GlobalAveragePooling2D", "(", ")", "(", "x", ")", "\n", "\n", "#================= Output - classification head ============================", "\n", "classification_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "\"classification_head_before_activation\"", ")", "(", "x", ")", "\n", "classification_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "\"classification_head\"", ")", "(", "classification_output", ")", "\n", "\n", "#================= The final model ============================", "\n", "for", "layer", "in", "base_model", ".", "layers", ":", "\n", "            ", "layer", ".", "trainable", "=", "True", "\n", "", "model", "=", "Model", "(", "inputs", "=", "base_model", ".", "input", ",", "outputs", "=", "classification_output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_tiny.TINYCNN.train": [[62, 105], ["LearningRateScheduler", "ModelCheckpoint", "CSVLogger", "ImageDataGenerator", "ImageDataGenerator.fit", "optimizers.SGD", "model.compile", "model.fit_generator", "ImageDataGenerator.flow", "np.power", "np.floor"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "initial_lrate", "=", "0.001", "#0.01#0.001#0.0005", "\n", "drop", "=", "0.5", "\n", "epochs_drop", "=", "30", "\n", "lrate", "=", "initial_lrate", "*", "np", ".", "power", "(", "drop", ",", "np", ".", "floor", "(", "(", "1", "+", "epoch", ")", "/", "epochs_drop", ")", ")", "\n", "return", "lrate", "\n", "", "reduce_lr", "=", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "weights_file", "=", "\"{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", ")", "\n", "model_checkpoint", "=", "ModelCheckpoint", "(", "weights_file", ",", "monitor", "=", "'val_accuracy'", ",", "save_best_only", "=", "True", ",", "verbose", "=", "1", ")", "\n", "csv_logger", "=", "CSVLogger", "(", "\"{}{}_history.csv\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "append", "=", "True", ")", "\n", "callbacks", "=", "[", "reduce_lr", ",", "model_checkpoint", ",", "csv_logger", "]", "\n", "\n", "#================= Data augmentation =========================", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ")", "# randomly flip images", "\n", "\n", "#================= Train =========================", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "opt", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "opt", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "datagen", ".", "flow", "(", "self", ".", "x_train", ",", "y", "=", "self", ".", "y_train", ",", "batch_size", "=", "self", ".", "batch_size", ")", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "callbacks", "=", "callbacks", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", ")", "\n", "\n", "# #================= Save model and history =========================", "\n", "# with open(\"{}{}_history.pkl\".format(checkpoints_dir, self.filename[:-3]), 'wb') as handle:", "\n", "#     pickle.dump(historytemp.history, handle, protocol=pickle.HIGHEST_PROTOCOL)", "\n", "\n", "# model.save_weights(weights_file)", "\n", "\n", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_cifar10.CIFAR10CNN.__init__": [[6, 36], ["load_cifar10_data", "toCat_onehot", "cnn_cifar10.CIFAR10CNN.build_model", "normalize_mean", "normalize_linear", "cnn_cifar10.CIFAR10CNN.train", "cnn_cifar10.CIFAR10CNN.model.load_weights", "Exception"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_cifar10_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "filename", "=", "\"cnn_cifar10.h5\"", ",", "norm_mean", "=", "False", ",", "epochs", "=", "100", ",", "batch_size", "=", "32", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "#train or load", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "norm_mean", "=", "norm_mean", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "#====================== load data ========================", "\n", "self", ".", "num_classes", "=", "10", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_cifar10_data", "(", ")", "\n", "if", "self", ".", "norm_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "#====================== Model =============================", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_cifar10.CIFAR10CNN.build_model": [[37, 94], ["Input", "Model", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "MaxPooling2D", "Dropout", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "MaxPooling2D", "Dropout", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "MaxPooling2D", "Dropout", "Conv2D", "BatchNormalization", "Activation", "MaxPooling2D", "Dropout", "Flatten", "Dense", "Dense", "Activation", "l2", "l2", "l2", "l2", "l2", "l2", "l2", "l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.1", "\n", "\n", "#================= Input ============================", "\n", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ",", "name", "=", "'l_0'", ")", "\n", "\n", "#================= CONV ============================", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_1'", ")", "(", "input", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_2'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_3'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_4'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_5'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_6'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_7'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", ",", "name", "=", "'l_8'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_9'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_10'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_11'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_12'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_13'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_14'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_15'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ",", "name", "=", "'l_16'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_17'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_18'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_19'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_20'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_21'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_22'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_23'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ",", "name", "=", "'l_24'", ")", "(", "task0", ")", "\n", "\n", "task0", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_25'", ")", "(", "task0", ")", "\n", "task0", "=", "BatchNormalization", "(", "name", "=", "'l_26'", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ",", "name", "=", "'l_27'", ")", "(", "task0", ")", "\n", "task0", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'l_28'", ")", "(", "task0", ")", "\n", "task0", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.3", ",", "name", "=", "'l_29'", ")", "(", "task0", ")", "\n", "\n", "#================= Dense ============================", "\n", "task0", "=", "Flatten", "(", "name", "=", "'l_30'", ")", "(", "task0", ")", "\n", "task0", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "l2", "(", "weight_decay", ")", ",", "name", "=", "'l_31'", ")", "(", "task0", ")", "\n", "#task0 = Dropout(basic_dropout_rate + 0.3, name='l_32')(task0)", "\n", "\n", "#================= Output - classification head ============================", "\n", "classification_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "\"classification_head_before_softmax\"", ")", "(", "task0", ")", "\n", "classification_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "\"classification_head\"", ")", "(", "classification_output", ")", "\n", "\n", "#================= The final model ============================", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "classification_output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_cifar10.CIFAR10CNN.train": [[95, 136], ["LearningRateScheduler", "ModelCheckpoint", "ImageDataGenerator", "ImageDataGenerator.fit", "optimizers.SGD", "model.compile", "model.fit_generator", "ImageDataGenerator.flow", "open", "pickle.dump"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "30", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "weights_file", "=", "\"{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", ")", "\n", "model_checkpoint", "=", "ModelCheckpoint", "(", "weights_file", ",", "monitor", "=", "'val_accuracy'", ",", "save_best_only", "=", "True", ",", "verbose", "=", "1", ")", "\n", "callbacks", "=", "[", "reduce_lr", ",", "model_checkpoint", "]", "\n", "\n", "#================= Data augmentation =========================", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ")", "# randomly flip images", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "\n", "#================= Train =========================", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "datagen", ".", "flow", "(", "self", ".", "x_train", ",", "y", "=", "self", ".", "y_train", ",", "batch_size", "=", "self", ".", "batch_size", ")", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "callbacks", "=", "callbacks", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", ")", "\n", "\n", "#================= Save model and history =========================", "\n", "with", "open", "(", "\"{}{}_history.pkl\"", ".", "format", "(", "checkpoints_dir", ",", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "# # model.save_weights(weights_file)", "\n", "\n", "", "return", "model", "", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_tiny_gray.TINYCNN.__init__": [[9, 41], ["load_tiny_imagenet_data", "normalize_linear", "toCat_onehot", "cnn_tiny_gray.TINYCNN.build_model", "sklearn.utils.shuffle", "cnn_tiny_gray.TINYCNN.train", "cnn_tiny_gray.TINYCNN.model.load_weights", "Exception"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_tiny_imagenet_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "filename", "=", "\"cnn_tiny.h5\"", ",", "epochs", "=", "300", ",", "batch_size", "=", "128", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "#train or load", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "#====================== load data ========================", "\n", "self", ".", "num_classes", "=", "200", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_tiny_imagenet_data", "(", ")", "\n", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "y_train", "=", "shuffle", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", "\n", "# self.x_train = pre_dense(self.x_train)", "\n", "# self.x_test = pre_dense(self.x_test)", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train_labels", "=", "self", ".", "y_train", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n", "#====================== Model =============================", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "# if os.path.isfile(\"checkpoints/{}\".format(self.filename)):", "\n", "#     self.model.load_weights(\"checkpoints/{}\".format(self.filename))", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"{}{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "\"gray/\"", ",", "self", ".", "filename", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_tiny_gray.TINYCNN.build_model": [[42, 61], ["keras.applications.resnet_v2.ResNet50V2", "Model", "GlobalAveragePooling2D", "Dense", "Activation"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "weight_decay", "=", "0.001", "\n", "\n", "#================= Dense ============================", "\n", "base_model", "=", "ResNet50V2", "(", "weights", "=", "'imagenet'", ",", "input_shape", "=", "(", "self", ".", "input_shape", ")", ",", "include_top", "=", "False", ")", "\n", "# base_model = ResNet50V2(weights='imagenet', include_top=False)", "\n", "x", "=", "base_model", ".", "output", "\n", "x", "=", "GlobalAveragePooling2D", "(", ")", "(", "x", ")", "\n", "\n", "#================= Output - classification head ============================", "\n", "classification_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "\"classification_head_before_activation\"", ")", "(", "x", ")", "\n", "classification_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "\"classification_head\"", ")", "(", "classification_output", ")", "\n", "\n", "#================= The final model ============================", "\n", "for", "layer", "in", "base_model", ".", "layers", ":", "\n", "            ", "layer", ".", "trainable", "=", "True", "\n", "", "model", "=", "Model", "(", "inputs", "=", "base_model", ".", "input", ",", "outputs", "=", "classification_output", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.cnn.cnn_tiny_gray.TINYCNN.train": [[62, 105], ["LearningRateScheduler", "ModelCheckpoint", "CSVLogger", "ImageDataGenerator", "ImageDataGenerator.fit", "optimizers.SGD", "model.compile", "model.fit_generator", "ImageDataGenerator.flow", "np.power", "np.floor"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "#================= Settings =========================", "\n", "        ", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "initial_lrate", "=", "0.001", "#0.01#0.001#0.0005", "\n", "drop", "=", "0.5", "\n", "epochs_drop", "=", "30", "\n", "lrate", "=", "initial_lrate", "*", "np", ".", "power", "(", "drop", ",", "np", ".", "floor", "(", "(", "1", "+", "epoch", ")", "/", "epochs_drop", ")", ")", "\n", "return", "lrate", "\n", "", "reduce_lr", "=", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "weights_file", "=", "\"{}{}{}\"", ".", "format", "(", "checkpoints_dir", ",", "\"gray/\"", ",", "self", ".", "filename", ")", "\n", "model_checkpoint", "=", "ModelCheckpoint", "(", "weights_file", ",", "monitor", "=", "'val_accuracy'", ",", "save_best_only", "=", "True", ",", "verbose", "=", "1", ")", "\n", "csv_logger", "=", "CSVLogger", "(", "\"{}{}{}_history.csv\"", ".", "format", "(", "checkpoints_dir", ",", "\"gray/\"", ",", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "append", "=", "True", ")", "\n", "callbacks", "=", "[", "reduce_lr", ",", "model_checkpoint", ",", "csv_logger", "]", "\n", "\n", "#================= Data augmentation =========================", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ")", "# randomly flip images", "\n", "\n", "#================= Train =========================", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "opt", "=", "optimizers", ".", "SGD", "(", "lr", "=", "0", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "categorical_crossentropy", ",", "optimizer", "=", "opt", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "datagen", ".", "flow", "(", "self", ".", "x_train", ",", "y", "=", "self", ".", "y_train", ",", "batch_size", "=", "self", ".", "batch_size", ")", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "callbacks", "=", "callbacks", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", ")", "\n", "\n", "# #================= Save model and history =========================", "\n", "# with open(\"{}{}_history.pkl\".format(checkpoints_dir, self.filename[:-3]), 'wb') as handle:", "\n", "#     pickle.dump(historytemp.history, handle, protocol=pickle.HIGHEST_PROTOCOL)", "\n", "\n", "# model.save_weights(weights_file)", "\n", "\n", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.get_data": [[90, 148], ["np.transpose.astype", "np.transpose.astype", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "print", "print", "print", "print", "keras.datasets.mnist.load_data", "np.transpose.reshape", "np.transpose.reshape", "keras.datasets.cifar10.load_data", "scipy.loadmat", "scipy.loadmat", "numpy.transpose", "numpy.transpose", "os.path.isfile", "print", "subprocess.call", "os.path.isfile", "print", "subprocess.call", "os.path.join", "os.path.join", "numpy.reshape", "numpy.reshape", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.load_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.load_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["def", "get_data", "(", "dataset", "=", "'mnist'", ")", ":", "\n", "    ", "\"\"\"\n    images in [-0.5, 0.5] (instead of [0, 1]) which suits C&W attack and generally gives better performance\n    \n    :param dataset:\n    :return: \n    \"\"\"", "\n", "assert", "dataset", "in", "[", "'mnist'", ",", "'cifar'", ",", "'svhn'", "]", ",", "\"dataset parameter must be either 'mnist' 'cifar' or 'svhn'\"", "\n", "if", "dataset", "==", "'mnist'", ":", "\n", "# the data, shuffled and split between train and test sets", "\n", "        ", "(", "X_train", ",", "y_train", ")", ",", "(", "X_test", ",", "y_test", ")", "=", "mnist", ".", "load_data", "(", ")", "\n", "# reshape to (n_samples, 28, 28, 1)", "\n", "X_train", "=", "X_train", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", "\n", "X_test", "=", "X_test", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", "\n", "", "elif", "dataset", "==", "'cifar'", ":", "\n", "# the data, shuffled and split between train and test sets", "\n", "        ", "(", "X_train", ",", "y_train", ")", ",", "(", "X_test", ",", "y_test", ")", "=", "cifar10", ".", "load_data", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "\"svhn_train.mat\"", ")", ")", ":", "\n", "            ", "print", "(", "'Downloading SVHN train set...'", ")", "\n", "call", "(", "\n", "\"curl -o ../data/svhn_train.mat \"", "\n", "\"http://ufldl.stanford.edu/housenumbers/train_32x32.mat\"", ",", "\n", "shell", "=", "True", "\n", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "\"svhn_test.mat\"", ")", ")", ":", "\n", "            ", "print", "(", "'Downloading SVHN test set...'", ")", "\n", "call", "(", "\n", "\"curl -o ../data/svhn_test.mat \"", "\n", "\"http://ufldl.stanford.edu/housenumbers/test_32x32.mat\"", ",", "\n", "shell", "=", "True", "\n", ")", "\n", "", "train", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "'svhn_train.mat'", ")", ")", "\n", "test", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "'svhn_test.mat'", ")", ")", "\n", "X_train", "=", "np", ".", "transpose", "(", "train", "[", "'X'", "]", ",", "axes", "=", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "X_test", "=", "np", ".", "transpose", "(", "test", "[", "'X'", "]", ",", "axes", "=", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "# reshape (n_samples, 1) to (n_samples,) and change 1-index", "\n", "# to 0-index", "\n", "y_train", "=", "np", ".", "reshape", "(", "train", "[", "'y'", "]", ",", "(", "-", "1", ",", ")", ")", "-", "1", "\n", "y_test", "=", "np", ".", "reshape", "(", "test", "[", "'y'", "]", ",", "(", "-", "1", ",", ")", ")", "-", "1", "\n", "\n", "# cast pixels to floats, normalize to [0, 1] range", "\n", "", "X_train", "=", "X_train", ".", "astype", "(", "'float32'", ")", "\n", "X_test", "=", "X_test", ".", "astype", "(", "'float32'", ")", "\n", "X_train", "=", "(", "X_train", "/", "255.0", ")", "-", "(", "1.0", "-", "CLIP_MAX", ")", "\n", "X_test", "=", "(", "X_test", "/", "255.0", ")", "-", "(", "1.0", "-", "CLIP_MAX", ")", "\n", "\n", "# one-hot-encode the labels", "\n", "Y_train", "=", "np_utils", ".", "to_categorical", "(", "y_train", ",", "10", ")", "\n", "Y_test", "=", "np_utils", ".", "to_categorical", "(", "y_test", ",", "10", ")", "\n", "\n", "print", "(", "\"X_train:\"", ",", "X_train", ".", "shape", ")", "\n", "print", "(", "\"Y_train:\"", ",", "Y_train", ".", "shape", ")", "\n", "print", "(", "\"X_test:\"", ",", "X_test", ".", "shape", ")", "\n", "print", "(", "\"Y_test\"", ",", "Y_test", ".", "shape", ")", "\n", "\n", "return", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.get_model": [[149, 251], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.layers.Conv2D", "keras.layers.Activation", "BatchNormalization", "keras.layers.Conv2D", "keras.layers.Activation", "BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Activation", "BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "BatchNormalization", "keras.layers.Conv2D", "keras.layers.Activation", "BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "BatchNormalization", "keras.layers.Conv2D", "keras.layers.Activation", "BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "BatchNormalization", "keras.layers.Conv2D", "keras.layers.Activation", "BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Flatten", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Conv2D", "keras.layers.Activation", "BatchNormalization", "keras.layers.Conv2D", "keras.layers.Activation", "BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Activation", "BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "function", ["None"], ["", "def", "get_model", "(", "dataset", "=", "'mnist'", ",", "softmax", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Takes in a parameter indicating which model type to use ('mnist',\n    'cifar' or 'svhn') and returns the appropriate Keras model.\n    :param dataset: A string indicating which dataset we are building\n                    a model for.\n    :param softmax: if add softmax to the last layer.\n    :return: The model; a Keras 'Sequential' instance.\n    \"\"\"", "\n", "assert", "dataset", "in", "[", "'mnist'", ",", "'cifar'", ",", "'svhn'", "]", ",", "\"dataset parameter must be either 'mnist' 'cifar' or 'svhn'\"", "\n", "if", "dataset", "==", "'mnist'", ":", "\n", "# MNIST model: 0, 2, 7, 10", "\n", "        ", "layers", "=", "[", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'valid'", ",", "input_shape", "=", "(", "28", ",", "28", ",", "1", ")", ")", ",", "# 0", "\n", "Activation", "(", "'relu'", ")", ",", "# 1", "\n", "BatchNormalization", "(", ")", ",", "# 2", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ",", "# 3", "\n", "Activation", "(", "'relu'", ")", ",", "# 4", "\n", "BatchNormalization", "(", ")", ",", "# 5", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 6", "\n", "Dropout", "(", "0.5", ")", ",", "# 7", "\n", "Flatten", "(", ")", ",", "# 8", "\n", "Dense", "(", "128", ")", ",", "# 9            ", "\n", "Activation", "(", "'relu'", ")", ",", "# 10", "\n", "BatchNormalization", "(", ")", ",", "# 11", "\n", "Dropout", "(", "0.5", ")", ",", "# 12", "\n", "Dense", "(", "10", ")", ",", "# 13", "\n", "]", "\n", "", "elif", "dataset", "==", "'cifar'", ":", "\n", "# CIFAR-10 model", "\n", "        ", "layers", "=", "[", "\n", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "input_shape", "=", "(", "32", ",", "32", ",", "3", ")", ")", ",", "# 0", "\n", "Activation", "(", "'relu'", ")", ",", "# 1", "\n", "BatchNormalization", "(", ")", ",", "# 2", "\n", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 3", "\n", "Activation", "(", "'relu'", ")", ",", "# 4", "\n", "BatchNormalization", "(", ")", ",", "# 5", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 6", "\n", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 7", "\n", "Activation", "(", "'relu'", ")", ",", "# 8", "\n", "BatchNormalization", "(", ")", ",", "# 9", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 10", "\n", "Activation", "(", "'relu'", ")", ",", "# 11", "\n", "BatchNormalization", "(", ")", ",", "# 12", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 13", "\n", "\n", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 14", "\n", "Activation", "(", "'relu'", ")", ",", "# 15", "\n", "BatchNormalization", "(", ")", ",", "# 16", "\n", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 17", "\n", "Activation", "(", "'relu'", ")", ",", "# 18", "\n", "BatchNormalization", "(", ")", ",", "# 19", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 20", "\n", "\n", "Flatten", "(", ")", ",", "# 21", "\n", "Dropout", "(", "0.5", ")", ",", "# 22", "\n", "\n", "Dense", "(", "1024", ",", "kernel_regularizer", "=", "l2", "(", "0.01", ")", ",", "bias_regularizer", "=", "l2", "(", "0.01", ")", ")", ",", "# 23", "\n", "Activation", "(", "'relu'", ")", ",", "# 24", "\n", "BatchNormalization", "(", ")", ",", "# 25", "\n", "Dropout", "(", "0.5", ")", ",", "# 26", "\n", "Dense", "(", "512", ",", "kernel_regularizer", "=", "l2", "(", "0.01", ")", ",", "bias_regularizer", "=", "l2", "(", "0.01", ")", ")", ",", "# 27", "\n", "Activation", "(", "'relu'", ")", ",", "# 28", "\n", "BatchNormalization", "(", ")", ",", "# 29", "\n", "Dropout", "(", "0.5", ")", ",", "# 30", "\n", "Dense", "(", "10", ")", ",", "# 31", "\n", "]", "\n", "", "else", ":", "\n", "# SVHN model", "\n", "        ", "layers", "=", "[", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'valid'", ",", "input_shape", "=", "(", "32", ",", "32", ",", "3", ")", ")", ",", "# 0", "\n", "Activation", "(", "'relu'", ")", ",", "# 1", "\n", "BatchNormalization", "(", ")", ",", "# 2", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ",", "# 3", "\n", "Activation", "(", "'relu'", ")", ",", "# 4", "\n", "BatchNormalization", "(", ")", ",", "# 5", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 6", "\n", "\n", "Dropout", "(", "0.5", ")", ",", "# 7", "\n", "Flatten", "(", ")", ",", "# 8", "\n", "\n", "Dense", "(", "512", ")", ",", "# 9", "\n", "Activation", "(", "'relu'", ")", ",", "# 10", "\n", "BatchNormalization", "(", ")", ",", "# 11", "\n", "Dropout", "(", "0.5", ")", ",", "# 12", "\n", "\n", "Dense", "(", "128", ")", ",", "# 13", "\n", "Activation", "(", "'relu'", ")", ",", "# 14", "\n", "BatchNormalization", "(", ")", ",", "# 15", "\n", "Dropout", "(", "0.5", ")", ",", "# 16", "\n", "Dense", "(", "10", ")", ",", "# 17", "\n", "]", "\n", "\n", "", "model", "=", "Sequential", "(", ")", "\n", "for", "layer", "in", "layers", ":", "\n", "        ", "model", ".", "add", "(", "layer", ")", "\n", "", "if", "softmax", ":", "\n", "        ", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.cross_entropy": [[252, 254], ["tensorflow.nn.softmax_cross_entropy_with_logits"], "function", ["None"], ["", "def", "cross_entropy", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "y_true", ",", "logits", "=", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.lid_term": [[255, 283], ["tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.sqrt", "tensorflow.nn.top_k", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.log", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.transpose"], "function", ["None"], ["", "def", "lid_term", "(", "logits", ",", "batch_size", "=", "100", ")", ":", "\n", "    ", "\"\"\"Calculate LID loss term for a minibatch of logits\n\n    :param logits: \n    :return: \n    \"\"\"", "\n", "# y_pred = tf.nn.softmax(logits)", "\n", "y_pred", "=", "logits", "\n", "\n", "# calculate pairwise distance", "\n", "r", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "y_pred", ")", ",", "axis", "=", "1", ")", "\n", "# turn r into column vector", "\n", "r", "=", "tf", ".", "reshape", "(", "r", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "D", "=", "r", "-", "2", "*", "tf", ".", "matmul", "(", "y_pred", ",", "tf", ".", "transpose", "(", "y_pred", ")", ")", "+", "tf", ".", "transpose", "(", "r", ")", "\n", "\n", "# find the k nearest neighbor", "\n", "D1", "=", "tf", ".", "sqrt", "(", "D", "+", "1e-9", ")", "\n", "D2", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "D1", ",", "k", "=", "21", ",", "sorted", "=", "True", ")", "\n", "D3", "=", "-", "D2", "[", ":", ",", "1", ":", "]", "\n", "\n", "m", "=", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "tf", ".", "transpose", "(", "D3", ")", ",", "1.0", "/", "D3", "[", ":", ",", "-", "1", "]", ")", ")", "\n", "v_log", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "m", "+", "1e-9", ")", ",", "axis", "=", "1", ")", "# to avoid nan", "\n", "lids", "=", "-", "20", "/", "v_log", "\n", "\n", "## batch normalize lids", "\n", "# lids = tf.nn.l2_normalize(lids, dim=0, epsilon=1e-12)", "\n", "\n", "return", "lids", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.lid_adv_term": [[284, 319], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.sqrt", "tensorflow.nn.top_k", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.nn.l2_normalize", "tensorflow.square", "tensorflow.square", "tensorflow.multiply", "tensorflow.log", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.transpose"], "function", ["None"], ["", "def", "lid_adv_term", "(", "clean_logits", ",", "adv_logits", ",", "batch_size", "=", "100", ")", ":", "\n", "    ", "\"\"\"Calculate LID loss term for a minibatch of advs logits\n\n    :param logits: clean logits\n    :param A_logits: adversarial logits\n    :return: \n    \"\"\"", "\n", "# y_pred = tf.nn.softmax(logits)", "\n", "c_pred", "=", "tf", ".", "reshape", "(", "clean_logits", ",", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "a_pred", "=", "tf", ".", "reshape", "(", "adv_logits", ",", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "\n", "# calculate pairwise distance", "\n", "r_a", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "a_pred", ")", ",", "axis", "=", "1", ")", "\n", "# turn r_a into column vector", "\n", "r_a", "=", "tf", ".", "reshape", "(", "r_a", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "r_c", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "c_pred", ")", ",", "axis", "=", "1", ")", "\n", "# turn r_c into row vector", "\n", "r_c", "=", "tf", ".", "reshape", "(", "r_c", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "\n", "D", "=", "r_a", "-", "2", "*", "tf", ".", "matmul", "(", "a_pred", ",", "tf", ".", "transpose", "(", "c_pred", ")", ")", "+", "r_c", "\n", "\n", "# find the k nearest neighbor", "\n", "D1", "=", "tf", ".", "sqrt", "(", "D", "+", "1e-9", ")", "\n", "D2", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "D1", ",", "k", "=", "21", ",", "sorted", "=", "True", ")", "\n", "D3", "=", "-", "D2", "[", ":", ",", "1", ":", "]", "\n", "\n", "m", "=", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "tf", ".", "transpose", "(", "D3", ")", ",", "1.0", "/", "D3", "[", ":", ",", "-", "1", "]", ")", ")", "\n", "v_log", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "m", "+", "1e-9", ")", ",", "axis", "=", "1", ")", "# to avoid nan", "\n", "lids", "=", "-", "20", "/", "v_log", "\n", "\n", "## batch normalize lids", "\n", "lids", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "lids", ",", "dim", "=", "0", ",", "epsilon", "=", "1e-12", ")", "\n", "\n", "return", "lids", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.flip": [[320, 335], ["numpy.copy", "numpy.random.choice", "numpy.reshape", "numpy.reshape", "numpy.where"], "function", ["None"], ["", "def", "flip", "(", "x", ",", "nb_diff", ")", ":", "\n", "    ", "\"\"\"\n    Helper function for get_noisy_samples\n    :param x:\n    :param nb_diff:\n    :return:\n    \"\"\"", "\n", "original_shape", "=", "x", ".", "shape", "\n", "x", "=", "np", ".", "copy", "(", "np", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", ")", ")", ")", "\n", "candidate_inds", "=", "np", ".", "where", "(", "x", "<", "CLIP_MAX", ")", "[", "0", "]", "\n", "# assert candidate_inds.shape[0] >= nb_diff", "\n", "inds", "=", "np", ".", "random", ".", "choice", "(", "candidate_inds", ",", "nb_diff", ")", "\n", "x", "[", "inds", "]", "=", "CLIP_MAX", "\n", "\n", "return", "np", ".", "reshape", "(", "x", ",", "original_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.get_noisy_samples": [[374, 417], ["numpy.minimum", "numpy.maximum", "numpy.random.normal"], "function", ["None"], ["", "def", "get_noisy_samples", "(", "X_test", ",", "X_test_adv", ",", "dataset", ",", "attack", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    :param X_test:\n    :param X_test_adv:\n    :param dataset:\n    :param attack:\n    :return:\n    \"\"\"", "\n", "# if attack.startswith('fgsm') or attack.startswith('pgdi') or attack.startswith('hca') or attack.startswith('bim'):", "\n", "#     # warnings.warn(\"Using pre-set Gaussian scale sizes to craft noisy \"", "\n", "#     #               \"samples. If you've altered the eps/eps-iter parameters \"", "\n", "#     #               \"of the attacks used, you'll need to update these. In \"", "\n", "#     #               \"the future, scale sizes will be inferred automatically \"", "\n", "#     #               \"from the adversarial samples.\")", "\n", "#     # Add Gaussian noise to the samples", "\n", "#     X_test_noisy = np.minimum(", "\n", "#         np.maximum(", "\n", "#             X_test + np.random.normal(loc=0, scale=STDEVS[dataset][attack],", "\n", "#                                       size=X_test.shape),", "\n", "#             0", "\n", "#         ),", "\n", "#         1", "\n", "#     )", "\n", "# else:", "\n", "#     X_test_noisy = np.zeros_like(X_test)", "\n", "#     for i in range(len(X_test)):", "\n", "#         # Count the number of pixels that are different", "\n", "#         nb_diff = len(np.where(X_test[i] != X_test_adv[i])[0])", "\n", "#         # Randomly flip an equal number of pixels (flip means move to max", "\n", "#         # value of 1)", "\n", "#         X_test_noisy[i] = flip(X_test[i], nb_diff)", "\n", "\n", "X_test_noisy", "=", "np", ".", "minimum", "(", "\n", "np", ".", "maximum", "(", "\n", "X_test", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "STDEVS", "[", "dataset", "]", "[", "attack", "]", ",", "\n", "size", "=", "X_test", ".", "shape", ")", ",", "\n", "0", "\n", ")", ",", "\n", "1", "\n", ")", "\n", "\n", "return", "X_test_noisy", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.get_mc_predictions": [[418, 446], ["keras.function", "tqdm.tqdm", "numpy.asarray", "int", "numpy.zeros", "range", "range", "preds_mc.append", "keras.learning_phase", "numpy.ceil", "util.get_mc_predictions.predict"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["", "def", "get_mc_predictions", "(", "model", ",", "X", ",", "nb_iter", "=", "50", ",", "batch_size", "=", "256", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    :param model:\n    :param X:\n    :param nb_iter:\n    :param batch_size:\n    :return:\n    \"\"\"", "\n", "output_dim", "=", "model", ".", "layers", "[", "-", "1", "]", ".", "output", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "get_output", "=", "K", ".", "function", "(", "\n", "[", "model", ".", "layers", "[", "0", "]", ".", "input", ",", "K", ".", "learning_phase", "(", ")", "]", ",", "\n", "[", "model", ".", "layers", "[", "-", "1", "]", ".", "output", "]", "\n", ")", "\n", "\n", "def", "predict", "(", ")", ":", "\n", "        ", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "X", ".", "shape", "[", "0", "]", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "output", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "X", ")", ",", "output_dim", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "output", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "=", "get_output", "(", "[", "X", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ",", "1", "]", ")", "[", "0", "]", "\n", "", "return", "output", "\n", "\n", "", "preds_mc", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "nb_iter", ")", ")", ":", "\n", "        ", "preds_mc", ".", "append", "(", "predict", "(", ")", ")", "\n", "\n", "", "return", "np", ".", "asarray", "(", "preds_mc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.get_deep_representations": [[448, 470], ["keras.function", "int", "numpy.zeros", "range", "numpy.ceil", "keras.learning_phase", "K.function.", "float", "len"], "function", ["None"], ["", "def", "get_deep_representations", "(", "model", ",", "X", ",", "batch_size", "=", "256", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    :param model:\n    :param X:\n    :param batch_size:\n    :return:\n    \"\"\"", "\n", "# last hidden layer is always at index -4", "\n", "output_dim", "=", "model", ".", "layers", "[", "-", "4", "]", ".", "output", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "get_encoding", "=", "K", ".", "function", "(", "\n", "[", "model", ".", "layers", "[", "0", "]", ".", "input", ",", "K", ".", "learning_phase", "(", ")", "]", ",", "\n", "[", "model", ".", "layers", "[", "-", "4", "]", ".", "output", "]", "\n", ")", "\n", "\n", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "X", ".", "shape", "[", "0", "]", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "output", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "X", ")", ",", "output_dim", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "output", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "=", "get_encoding", "(", "[", "X", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ",", "0", "]", ")", "[", "0", "]", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.get_layer_wise_activations": [[471, 497], ["acts.extend", "acts.extend", "acts.extend", "acts.extend"], "function", ["None"], ["", "def", "get_layer_wise_activations", "(", "model", ",", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    Get the deep activation outputs.\n    :param model:\n    :param dataset: 'mnist', 'cifar', 'svhn', has different submanifolds architectures  \n    :return: \n    \"\"\"", "\n", "assert", "dataset", "in", "[", "'mnist'", ",", "'cifar'", ",", "'svhn'", ",", "'tiny'", "]", ",", "\"dataset parameter must be either 'mnist' 'cifar' or 'svhn'\"", "\n", "if", "dataset", "==", "'mnist'", ":", "\n", "# mnist model", "\n", "        ", "acts", "=", "[", "model", ".", "layers", "[", "0", "]", ".", "input", "]", "\n", "acts", ".", "extend", "(", "[", "layer", ".", "output", "for", "layer", "in", "model", ".", "layers", "]", ")", "\n", "", "elif", "dataset", "==", "'cifar'", ":", "\n", "# cifar-10 model", "\n", "        ", "acts", "=", "[", "model", ".", "layers", "[", "0", "]", ".", "input", "]", "\n", "acts", ".", "extend", "(", "[", "layer", ".", "output", "for", "layer", "in", "model", ".", "layers", "]", ")", "\n", "", "elif", "dataset", "==", "'svhn'", ":", "\n", "# svhn model", "\n", "        ", "acts", "=", "[", "model", ".", "layers", "[", "0", "]", ".", "input", "]", "\n", "acts", ".", "extend", "(", "[", "layer", ".", "output", "for", "layer", "in", "model", ".", "layers", "]", ")", "\n", "", "else", ":", "\n", "# tiny model", "\n", "        ", "acts", "=", "[", "model", ".", "layers", "[", "0", "]", ".", "input", "]", "\n", "acts", ".", "extend", "(", "[", "layer", ".", "output", "for", "layer", "in", "model", ".", "layers", "[", "-", "50", ":", "]", "]", ")", "\n", "", "return", "acts", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.mle_single": [[499, 513], ["numpy.asarray", "numpy.asarray", "min", "scipy.spatial.distance.cdist", "numpy.apply_along_axis", "x.reshape.reshape", "numpy.apply_along_axis", "len", "numpy.sum", "numpy.log"], "function", ["None"], ["", "def", "mle_single", "(", "data", ",", "x", ",", "k", "=", "20", ")", ":", "\n", "    ", "data", "=", "np", ".", "asarray", "(", "data", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "x", "=", "np", ".", "asarray", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# print('x.ndim',x.ndim)", "\n", "if", "x", ".", "ndim", "==", "1", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "(", "-", "1", ",", "x", ".", "shape", "[", "0", "]", ")", ")", "\n", "# dim = x.shape[1]", "\n", "\n", "", "k", "=", "min", "(", "k", ",", "len", "(", "data", ")", "-", "1", ")", "\n", "f", "=", "lambda", "v", ":", "-", "k", "/", "np", ".", "sum", "(", "np", ".", "log", "(", "v", "/", "v", "[", "-", "1", "]", ")", ")", "\n", "a", "=", "cdist", "(", "x", ",", "data", ")", "\n", "a", "=", "np", ".", "apply_along_axis", "(", "np", ".", "sort", ",", "axis", "=", "1", ",", "arr", "=", "a", ")", "[", ":", ",", "1", ":", "k", "+", "1", "]", "\n", "a", "=", "np", ".", "apply_along_axis", "(", "f", ",", "axis", "=", "1", ",", "arr", "=", "a", ")", "\n", "return", "a", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.mle_batch": [[515, 525], ["numpy.asarray", "numpy.asarray", "min", "scipy.spatial.distance.cdist", "numpy.apply_along_axis", "numpy.apply_along_axis", "len", "numpy.sum", "numpy.log"], "function", ["None"], ["", "def", "mle_batch", "(", "data", ",", "batch", ",", "k", ")", ":", "\n", "    ", "data", "=", "np", ".", "asarray", "(", "data", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "batch", "=", "np", ".", "asarray", "(", "batch", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "k", "=", "min", "(", "k", ",", "len", "(", "data", ")", "-", "1", ")", "\n", "f", "=", "lambda", "v", ":", "-", "k", "/", "np", ".", "sum", "(", "np", ".", "log", "(", "v", "/", "v", "[", "-", "1", "]", ")", ")", "\n", "a", "=", "cdist", "(", "batch", ",", "data", ")", "\n", "a", "=", "np", ".", "apply_along_axis", "(", "np", ".", "sort", ",", "axis", "=", "1", ",", "arr", "=", "a", ")", "[", ":", ",", "1", ":", "k", "+", "1", "]", "\n", "a", "=", "np", ".", "apply_along_axis", "(", "f", ",", "axis", "=", "1", ",", "arr", "=", "a", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.kmean_batch": [[527, 537], ["numpy.asarray", "numpy.asarray", "min", "scipy.spatial.distance.cdist", "numpy.apply_along_axis", "numpy.mean", "numpy.apply_along_axis", "len"], "function", ["None"], ["", "def", "kmean_batch", "(", "data", ",", "batch", ",", "k", ")", ":", "\n", "    ", "data", "=", "np", ".", "asarray", "(", "data", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "batch", "=", "np", ".", "asarray", "(", "batch", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "k", "=", "min", "(", "k", ",", "len", "(", "data", ")", "-", "1", ")", "\n", "f", "=", "lambda", "v", ":", "np", ".", "mean", "(", "v", ")", "\n", "a", "=", "cdist", "(", "batch", ",", "data", ")", "\n", "a", "=", "np", ".", "apply_along_axis", "(", "np", ".", "sort", ",", "axis", "=", "1", ",", "arr", "=", "a", ")", "[", ":", ",", "1", ":", "k", "+", "1", "]", "\n", "a", "=", "np", ".", "apply_along_axis", "(", "f", ",", "axis", "=", "1", ",", "arr", "=", "a", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.kmean_pca_batch": [[539, 548], ["numpy.asarray", "numpy.asarray", "numpy.zeros", "numpy.arange", "numpy.concatenate", "sklearn.decomposition.PCA().fit_transform", "util.kmean_batch", "sklearn.decomposition.PCA"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.kmean_batch"], ["", "def", "kmean_pca_batch", "(", "data", ",", "batch", ",", "k", "=", "10", ")", ":", "\n", "    ", "data", "=", "np", ".", "asarray", "(", "data", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "batch", "=", "np", ".", "asarray", "(", "batch", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a", "=", "np", ".", "zeros", "(", "batch", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "concatenate", "(", "(", "data", ",", "[", "batch", "[", "i", "]", "]", ")", ")", "\n", "tmp_pca", "=", "PCA", "(", "n_components", "=", "2", ")", ".", "fit_transform", "(", "tmp", ")", "\n", "a", "[", "i", "]", "=", "kmean_batch", "(", "tmp_pca", "[", ":", "-", "1", "]", ",", "tmp_pca", "[", "-", "1", "]", ",", "k", "=", "k", ")", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.get_lids_random_batch": [[549, 617], ["len", "print", "int", "tqdm.tqdm", "numpy.asarray", "numpy.asarray", "numpy.asarray", "keras.function", "numpy.minimum", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.ceil", "range", "util.get_lids_random_batch.estimate"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "get_lids_random_batch", "(", "model", ",", "X", ",", "X_noisy", ",", "X_adv", ",", "dataset", ",", "k", "=", "10", ",", "batch_size", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Get the local intrinsic dimensionality of each Xi in X_adv\n    estimated by k close neighbours in the random batch it lies in.\n    :param model:\n    :param X: normal images\n    :param X_noisy: noisy images\n    :param X_adv: advserial images    \n    :param dataset: 'mnist', 'cifar', 'svhn', has different DNN architectures  \n    :param k: the number of nearest neighbours for LID estimation  \n    :param batch_size: default 100\n    :return: lids: LID of normal images of shape (num_examples, lid_dim)\n            lids_adv: LID of advs images of shape (num_examples, lid_dim)\n    \"\"\"", "\n", "# get deep representations", "\n", "funcs", "=", "[", "K", ".", "function", "(", "[", "model", ".", "layers", "[", "0", "]", ".", "input", ",", "K", ".", "learning_phase", "(", ")", "]", ",", "[", "out", "]", ")", "\n", "for", "out", "in", "get_layer_wise_activations", "(", "model", ",", "dataset", ")", "]", "\n", "lid_dim", "=", "len", "(", "funcs", ")", "\n", "print", "(", "\"Number of layers to estimate: \"", ",", "lid_dim", ")", "\n", "\n", "def", "estimate", "(", "i_batch", ")", ":", "\n", "        ", "start", "=", "i_batch", "*", "batch_size", "\n", "end", "=", "np", ".", "minimum", "(", "len", "(", "X", ")", ",", "(", "i_batch", "+", "1", ")", "*", "batch_size", ")", "\n", "n_feed", "=", "end", "-", "start", "\n", "lid_batch", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_feed", ",", "lid_dim", ")", ")", "\n", "lid_batch_adv", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_feed", ",", "lid_dim", ")", ")", "\n", "lid_batch_noisy", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_feed", ",", "lid_dim", ")", ")", "\n", "for", "i", ",", "func", "in", "enumerate", "(", "funcs", ")", ":", "\n", "            ", "X_act", "=", "func", "(", "[", "X", "[", "start", ":", "end", "]", ",", "0", "]", ")", "[", "0", "]", "\n", "X_act", "=", "np", ".", "asarray", "(", "X_act", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "n_feed", ",", "-", "1", ")", ")", "\n", "# print(\"X_act: \", X_act.shape)", "\n", "\n", "X_adv_act", "=", "func", "(", "[", "X_adv", "[", "start", ":", "end", "]", ",", "0", "]", ")", "[", "0", "]", "\n", "X_adv_act", "=", "np", ".", "asarray", "(", "X_adv_act", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "n_feed", ",", "-", "1", ")", ")", "\n", "# print(\"X_adv_act: \", X_adv_act.shape)", "\n", "\n", "X_noisy_act", "=", "func", "(", "[", "X_noisy", "[", "start", ":", "end", "]", ",", "0", "]", ")", "[", "0", "]", "\n", "X_noisy_act", "=", "np", ".", "asarray", "(", "X_noisy_act", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "n_feed", ",", "-", "1", ")", ")", "\n", "# print(\"X_noisy_act: \", X_noisy_act.shape)", "\n", "\n", "# random clean samples", "\n", "# Maximum likelihood estimation of local intrinsic dimensionality (LID)", "\n", "lid_batch", "[", ":", ",", "i", "]", "=", "mle_batch", "(", "X_act", ",", "X_act", ",", "k", "=", "k", ")", "\n", "# print(\"lid_batch: \", lid_batch.shape)", "\n", "lid_batch_adv", "[", ":", ",", "i", "]", "=", "mle_batch", "(", "X_act", ",", "X_adv_act", ",", "k", "=", "k", ")", "\n", "# print(\"lid_batch_adv: \", lid_batch_adv.shape)", "\n", "lid_batch_noisy", "[", ":", ",", "i", "]", "=", "mle_batch", "(", "X_act", ",", "X_noisy_act", ",", "k", "=", "k", ")", "\n", "# print(\"lid_batch_noisy: \", lid_batch_noisy.shape)", "\n", "", "return", "lid_batch", ",", "lid_batch_noisy", ",", "lid_batch_adv", "\n", "\n", "", "lids", "=", "[", "]", "\n", "lids_adv", "=", "[", "]", "\n", "lids_noisy", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "X", ".", "shape", "[", "0", "]", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "for", "i_batch", "in", "tqdm", "(", "range", "(", "n_batches", ")", ")", ":", "\n", "        ", "lid_batch", ",", "lid_batch_noisy", ",", "lid_batch_adv", "=", "estimate", "(", "i_batch", ")", "\n", "lids", ".", "extend", "(", "lid_batch", ")", "\n", "lids_adv", ".", "extend", "(", "lid_batch_adv", ")", "\n", "lids_noisy", ".", "extend", "(", "lid_batch_noisy", ")", "\n", "# print(\"lids: \", lids.shape)", "\n", "# print(\"lids_adv: \", lids_noisy.shape)", "\n", "# print(\"lids_noisy: \", lids_noisy.shape)", "\n", "\n", "", "lids", "=", "np", ".", "asarray", "(", "lids", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "lids_noisy", "=", "np", ".", "asarray", "(", "lids_noisy", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "lids_adv", "=", "np", ".", "asarray", "(", "lids_adv", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "lids", ",", "lids_noisy", ",", "lids_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.get_kmeans_random_batch": [[618, 696], ["len", "print", "int", "tqdm.tqdm", "numpy.asarray", "numpy.asarray", "numpy.asarray", "keras.function", "numpy.minimum", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.ceil", "range", "util.get_lids_random_batch.estimate"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "get_kmeans_random_batch", "(", "model", ",", "X", ",", "X_noisy", ",", "X_adv", ",", "dataset", ",", "k", "=", "10", ",", "batch_size", "=", "100", ",", "pca", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Get the mean distance of each Xi in X_adv to its k nearest neighbors.\n\n    :param model:\n    :param X: normal images\n    :param X_noisy: noisy images\n    :param X_adv: advserial images    \n    :param dataset: 'mnist', 'cifar', 'svhn', has different DNN architectures  \n    :param k: the number of nearest neighbours for LID estimation  \n    :param batch_size: default 100\n    :param pca: using pca or not, if True, apply pca to the referenced sample and a \n            minibatch of normal samples, then compute the knn mean distance of the referenced sample.\n    :return: kms_normal: kmean of normal images (num_examples, 1)\n            kms_noisy: kmean of normal images (num_examples, 1)\n            kms_adv: kmean of adv images (num_examples, 1)\n    \"\"\"", "\n", "# get deep representations", "\n", "funcs", "=", "[", "K", ".", "function", "(", "[", "model", ".", "layers", "[", "0", "]", ".", "input", ",", "K", ".", "learning_phase", "(", ")", "]", ",", "[", "model", ".", "layers", "[", "-", "2", "]", ".", "output", "]", ")", "]", "\n", "km_dim", "=", "len", "(", "funcs", ")", "\n", "print", "(", "\"Number of layers to use: \"", ",", "km_dim", ")", "\n", "\n", "def", "estimate", "(", "i_batch", ")", ":", "\n", "        ", "start", "=", "i_batch", "*", "batch_size", "\n", "end", "=", "np", ".", "minimum", "(", "len", "(", "X", ")", ",", "(", "i_batch", "+", "1", ")", "*", "batch_size", ")", "\n", "n_feed", "=", "end", "-", "start", "\n", "km_batch", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_feed", ",", "km_dim", ")", ")", "\n", "km_batch_adv", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_feed", ",", "km_dim", ")", ")", "\n", "km_batch_noisy", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_feed", ",", "km_dim", ")", ")", "\n", "for", "i", ",", "func", "in", "enumerate", "(", "funcs", ")", ":", "\n", "            ", "X_act", "=", "func", "(", "[", "X", "[", "start", ":", "end", "]", ",", "0", "]", ")", "[", "0", "]", "\n", "X_act", "=", "np", ".", "asarray", "(", "X_act", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "n_feed", ",", "-", "1", ")", ")", "\n", "# print(\"X_act: \", X_act.shape)", "\n", "\n", "X_adv_act", "=", "func", "(", "[", "X_adv", "[", "start", ":", "end", "]", ",", "0", "]", ")", "[", "0", "]", "\n", "X_adv_act", "=", "np", ".", "asarray", "(", "X_adv_act", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "n_feed", ",", "-", "1", ")", ")", "\n", "# print(\"X_adv_act: \", X_adv_act.shape)", "\n", "\n", "X_noisy_act", "=", "func", "(", "[", "X_noisy", "[", "start", ":", "end", "]", ",", "0", "]", ")", "[", "0", "]", "\n", "X_noisy_act", "=", "np", ".", "asarray", "(", "X_noisy_act", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "n_feed", ",", "-", "1", ")", ")", "\n", "# print(\"X_noisy_act: \", X_noisy_act.shape)", "\n", "\n", "# Maximum likelihood estimation of local intrinsic dimensionality (LID)", "\n", "if", "pca", ":", "\n", "                ", "km_batch", "[", ":", ",", "i", "]", "=", "kmean_pca_batch", "(", "X_act", ",", "X_act", ",", "k", "=", "k", ")", "\n", "", "else", ":", "\n", "                ", "km_batch", "[", ":", ",", "i", "]", "=", "kmean_batch", "(", "X_act", ",", "X_act", ",", "k", "=", "k", ")", "\n", "# print(\"lid_batch: \", lid_batch.shape)", "\n", "", "if", "pca", ":", "\n", "                ", "km_batch_adv", "[", ":", ",", "i", "]", "=", "kmean_pca_batch", "(", "X_act", ",", "X_adv_act", ",", "k", "=", "k", ")", "\n", "", "else", ":", "\n", "                ", "km_batch_adv", "[", ":", ",", "i", "]", "=", "kmean_batch", "(", "X_act", ",", "X_adv_act", ",", "k", "=", "k", ")", "\n", "# print(\"lid_batch_adv: \", lid_batch_adv.shape)", "\n", "", "if", "pca", ":", "\n", "                ", "km_batch_noisy", "[", ":", ",", "i", "]", "=", "kmean_pca_batch", "(", "X_act", ",", "X_noisy_act", ",", "k", "=", "k", ")", "\n", "", "else", ":", "\n", "                ", "km_batch_noisy", "[", ":", ",", "i", "]", "=", "kmean_batch", "(", "X_act", ",", "X_noisy_act", ",", "k", "=", "k", ")", "\n", "# print(\"lid_batch_noisy: \", lid_batch_noisy.shape)", "\n", "", "", "return", "km_batch", ",", "km_batch_noisy", ",", "km_batch_adv", "\n", "\n", "", "kms", "=", "[", "]", "\n", "kms_adv", "=", "[", "]", "\n", "kms_noisy", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "X", ".", "shape", "[", "0", "]", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "for", "i_batch", "in", "tqdm", "(", "range", "(", "n_batches", ")", ")", ":", "\n", "        ", "km_batch", ",", "km_batch_noisy", ",", "km_batch_adv", "=", "estimate", "(", "i_batch", ")", "\n", "kms", ".", "extend", "(", "km_batch", ")", "\n", "kms_adv", ".", "extend", "(", "km_batch_adv", ")", "\n", "kms_noisy", ".", "extend", "(", "km_batch_noisy", ")", "\n", "# print(\"kms: \", kms.shape)", "\n", "# print(\"kms_adv: \", kms_noisy.shape)", "\n", "# print(\"kms_noisy: \", kms_noisy.shape)", "\n", "\n", "", "kms", "=", "np", ".", "asarray", "(", "kms", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "kms_noisy", "=", "np", ".", "asarray", "(", "kms_noisy", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "kms_adv", "=", "np", ".", "asarray", "(", "kms_adv", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "kms", ",", "kms_noisy", ",", "kms_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.score_point": [[697, 706], ["kde.score_samples", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.score_samples"], ["", "def", "score_point", "(", "tup", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    :param tup:\n    :return:\n    \"\"\"", "\n", "x", ",", "kde", "=", "tup", "\n", "\n", "return", "kde", ".", "score_samples", "(", "np", ".", "reshape", "(", "x", ",", "(", "1", ",", "-", "1", ")", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.score_samples": [[708, 731], ["numpy.asarray", "mp.Pool.close", "mp.Pool.join", "multiprocessing.Pool", "multiprocessing.Pool", "mp.Pool.map", "zip"], "function", ["None"], ["", "def", "score_samples", "(", "kdes", ",", "samples", ",", "preds", ",", "n_jobs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    :param kdes:\n    :param samples:\n    :param preds:\n    :param n_jobs:\n    :return:\n    \"\"\"", "\n", "if", "n_jobs", "is", "not", "None", ":", "\n", "        ", "p", "=", "mp", ".", "Pool", "(", "n_jobs", ")", "\n", "", "else", ":", "\n", "        ", "p", "=", "mp", ".", "Pool", "(", ")", "\n", "", "results", "=", "np", ".", "asarray", "(", "\n", "p", ".", "map", "(", "\n", "score_point", ",", "\n", "[", "(", "x", ",", "kdes", "[", "i", "]", ")", "for", "x", ",", "i", "in", "zip", "(", "samples", ",", "preds", ")", "]", "\n", ")", "\n", ")", "\n", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.normalize": [[733, 745], ["len", "sklearn.preprocessing.scale", "numpy.concatenate"], "function", ["None"], ["", "def", "normalize", "(", "normal", ",", "adv", ",", "noisy", ")", ":", "\n", "    ", "\"\"\"Z-score normalisation\n    TODO\n    :param normal:\n    :param adv:\n    :param noisy:\n    :return:\n    \"\"\"", "\n", "n_samples", "=", "len", "(", "normal", ")", "\n", "total", "=", "scale", "(", "np", ".", "concatenate", "(", "(", "normal", ",", "adv", ",", "noisy", ")", ")", ")", "\n", "\n", "return", "total", "[", ":", "n_samples", "]", ",", "total", "[", "n_samples", ":", "2", "*", "n_samples", "]", ",", "total", "[", "2", "*", "n_samples", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.train_lr": [[747, 756], ["sklearn.linear_model.LogisticRegressionCV().fit", "sklearn.linear_model.LogisticRegressionCV"], "function", ["None"], ["", "def", "train_lr", "(", "X", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    :param X: the data samples\n    :param y: the labels\n    :return:\n    \"\"\"", "\n", "lr", "=", "LogisticRegressionCV", "(", "n_jobs", "=", "-", "1", ",", "max_iter", "=", "1000", ")", ".", "fit", "(", "X", ",", "y", ")", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.train_lr_rfeinman": [[758, 783], ["numpy.concatenate().transpose", "numpy.concatenate().transpose", "numpy.concatenate", "numpy.concatenate", "sklearn.linear_model.LogisticRegressionCV().fit", "numpy.concatenate", "numpy.concatenate", "numpy.zeros_like", "numpy.ones_like", "sklearn.linear_model.LogisticRegressionCV", "densities_neg.reshape", "uncerts_neg.reshape", "densities_pos.reshape", "uncerts_pos.reshape"], "function", ["None"], ["", "def", "train_lr_rfeinman", "(", "densities_pos", ",", "densities_neg", ",", "uncerts_pos", ",", "uncerts_neg", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    :param densities_pos:\n    :param densities_neg:\n    :param uncerts_pos:\n    :param uncerts_neg:\n    :return:\n    \"\"\"", "\n", "values_neg", "=", "np", ".", "concatenate", "(", "\n", "(", "densities_neg", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "\n", "uncerts_neg", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "\n", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "values_pos", "=", "np", ".", "concatenate", "(", "\n", "(", "densities_pos", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ",", "\n", "uncerts_pos", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", ")", ",", "\n", "axis", "=", "0", ")", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "\n", "values", "=", "np", ".", "concatenate", "(", "(", "values_neg", ",", "values_pos", ")", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "\n", "(", "np", ".", "zeros_like", "(", "densities_neg", ")", ",", "np", ".", "ones_like", "(", "densities_pos", ")", ")", ")", "\n", "\n", "lr", "=", "LogisticRegressionCV", "(", "n_jobs", "=", "-", "1", ")", ".", "fit", "(", "values", ",", "labels", ")", "\n", "\n", "return", "values", ",", "labels", ",", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.compute_roc": [[785, 806], ["sklearn.metrics.roc_curve", "sklearn.metrics.roc_auc_score", "matplotlib.figure", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show"], "function", ["None"], ["", "def", "compute_roc", "(", "y_true", ",", "y_pred", ",", "plot", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    :param y_true: ground truth\n    :param y_pred: predictions\n    :param plot:\n    :return:\n    \"\"\"", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "y_true", ",", "y_pred", ")", "\n", "auc_score", "=", "roc_auc_score", "(", "y_true", ",", "y_pred", ")", "\n", "if", "plot", ":", "\n", "        ", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "6", ")", ")", "\n", "plt", ".", "plot", "(", "fpr", ",", "tpr", ",", "color", "=", "'blue'", ",", "\n", "label", "=", "'ROC (AUC = %0.4f)'", "%", "auc_score", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "title", "(", "\"ROC Curve\"", ")", "\n", "plt", ".", "xlabel", "(", "\"FPR\"", ")", "\n", "plt", ".", "ylabel", "(", "\"TPR\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "fpr", ",", "tpr", ",", "auc_score", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.compute_roc_rfeinman": [[808, 831], ["numpy.concatenate", "numpy.concatenate", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "matplotlib.figure", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.zeros_like", "numpy.ones_like"], "function", ["None"], ["", "def", "compute_roc_rfeinman", "(", "probs_neg", ",", "probs_pos", ",", "plot", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    :param probs_neg:\n    :param probs_pos:\n    :param plot:\n    :return:\n    \"\"\"", "\n", "probs", "=", "np", ".", "concatenate", "(", "(", "probs_neg", ",", "probs_pos", ")", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros_like", "(", "probs_neg", ")", ",", "np", ".", "ones_like", "(", "probs_pos", ")", ")", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "labels", ",", "probs", ")", "\n", "auc_score", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "if", "plot", ":", "\n", "        ", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "6", ")", ")", "\n", "plt", ".", "plot", "(", "fpr", ",", "tpr", ",", "color", "=", "'blue'", ",", "\n", "label", "=", "'ROC (AUC = %0.4f)'", "%", "auc_score", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "title", "(", "\"ROC Curve\"", ")", "\n", "plt", ".", "xlabel", "(", "\"FPR\"", ")", "\n", "plt", ".", "ylabel", "(", "\"TPR\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "return", "fpr", ",", "tpr", ",", "auc_score", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.random_split": [[832, 849], ["print", "int", "numpy.random.permutation"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "random_split", "(", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\"\n    Random split the data into 80% for training and 20% for testing\n    :param X: \n    :param Y: \n    :return: \n    \"\"\"", "\n", "print", "(", "\"random split 80%, 20% for training and testing\"", ")", "\n", "num_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "num_train", "=", "int", "(", "num_samples", "*", "0.8", ")", "\n", "rand_pert", "=", "np", ".", "random", ".", "permutation", "(", "num_samples", ")", "\n", "X", "=", "X", "[", "rand_pert", "]", "\n", "Y", "=", "Y", "[", "rand_pert", "]", "\n", "X_train", ",", "X_test", "=", "X", "[", ":", "num_train", "]", ",", "X", "[", "num_train", ":", "]", "\n", "Y_train", ",", "Y_test", "=", "Y", "[", ":", "num_train", "]", ",", "Y", "[", "num_train", ":", "]", "\n", "\n", "return", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.lid.util.block_split": [[850, 873], ["print", "int", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "int"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "block_split", "(", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\"\n    Split the data into 80% for training and 20% for testing\n    in a block size of 100.\n    :param X: \n    :param Y: \n    :return: \n    \"\"\"", "\n", "print", "(", "\"Isolated split 80%, 20% for training and testing\"", ")", "\n", "num_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "partition", "=", "int", "(", "num_samples", "/", "3", ")", "\n", "X_adv", ",", "Y_adv", "=", "X", "[", ":", "partition", "]", ",", "Y", "[", ":", "partition", "]", "\n", "X_norm", ",", "Y_norm", "=", "X", "[", "partition", ":", "2", "*", "partition", "]", ",", "Y", "[", "partition", ":", "2", "*", "partition", "]", "\n", "X_noisy", ",", "Y_noisy", "=", "X", "[", "2", "*", "partition", ":", "]", ",", "Y", "[", "2", "*", "partition", ":", "]", "\n", "num_train", "=", "int", "(", "partition", "*", "0.007", ")", "*", "100", "\n", "\n", "X_train", "=", "np", ".", "concatenate", "(", "(", "X_norm", "[", ":", "num_train", "]", ",", "X_noisy", "[", ":", "num_train", "]", ",", "X_adv", "[", ":", "num_train", "]", ")", ")", "\n", "Y_train", "=", "np", ".", "concatenate", "(", "(", "Y_norm", "[", ":", "num_train", "]", ",", "Y_noisy", "[", ":", "num_train", "]", ",", "Y_adv", "[", ":", "num_train", "]", ")", ")", "\n", "\n", "X_test", "=", "np", ".", "concatenate", "(", "(", "X_norm", "[", "num_train", ":", "]", ",", "X_noisy", "[", "num_train", ":", "]", ",", "X_adv", "[", "num_train", ":", "]", ")", ")", "\n", "Y_test", "=", "np", ".", "concatenate", "(", "(", "Y_norm", "[", "num_train", ":", "]", ",", "Y_noisy", "[", "num_train", ":", "]", ",", "Y_adv", "[", "num_train", ":", "]", ")", ")", "\n", "\n", "return", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_data": [[66, 123], ["np.transpose.astype", "np.transpose.astype", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "print", "print", "print", "print", "keras.datasets.mnist.load_data", "np.transpose.reshape", "np.transpose.reshape", "keras.datasets.cifar10.load_data", "scipy.loadmat", "scipy.loadmat", "numpy.transpose", "numpy.transpose", "os.path.isfile", "print", "subprocess.call", "os.path.isfile", "print", "subprocess.call", "numpy.reshape", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.load_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.load_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["'hca_0.03125'", ":", "0.03125", ",", "'hca_0.0625'", ":", "0.0625", ",", "'hca_0.125'", ":", "0.125", ",", "'hca_0.25'", ":", "0.25", ",", "'hca_0.3125'", ":", "0.3125", ",", "'hca_0.5'", ":", "0.5", ",", "'sa'", ":", "0.125", ",", "'sta'", ":", "0.125", ",", "'hop'", ":", "0.125", "\n", "}", ",", "\n", "'tiny'", ":", "{", "'fgsm_0.03125'", ":", "0.03125", ",", "'fgsm_0.0625'", ":", "0.0625", ",", "'fgsm_0.125'", ":", "0.125", ",", "'fgsm_0.25'", ":", "0.25", ",", "'fgsm_0.3125'", ":", "0.3125", ",", "'fgsm_0.5'", ":", "0.5", ",", "'bim_0.03125'", ":", "0.03125", ",", "'bim_0.0625'", ":", "0.0625", ",", "'bim_0.125'", ":", "0.125", ",", "'bim_0.25'", ":", "0.25", ",", "'bim_0.3125'", ":", "0.3125", ",", "'bim_0.5'", ":", "0.5", ",", "'pgd1_5'", ":", "0.03125", ",", "'pgd1_10'", ":", "0.0625", ",", "'pgd1_15'", ":", "0.125", ",", "'pgd1_20'", ":", "0.125", ",", "'pgd1_25'", ":", "0.125", ",", "'pgd1_30'", ":", "0.25", ",", "'pgd1_40'", ":", "0.3125", ",", "'pgd2_0.25'", ":", "0.03125", ",", "'pgd2_0.3125'", ":", "0.0625", ",", "'pgd2_0.5'", ":", "0.125", ",", "'pgd2_1'", ":", "0.125", ",", "'pgd2_1.5'", ":", "0.25", ",", "'pgd2_2'", ":", "0.3125", ",", "'pgdi_0.03125'", ":", "0.03125", ",", "'pgdi_0.0625'", ":", "0.0625", ",", "'pgdi_0.125'", ":", "0.125", ",", "'pgdi_0.25'", ":", "0.25", ",", "'pgdi_0.3125'", ":", "0.3125", ",", "'pgdi_0.5'", ":", "0.5", ",", "'cwi'", ":", "0.125", ",", "'df'", ":", "0.125", ",", "'hca_0.03125'", ":", "0.03125", ",", "'hca_0.0625'", ":", "0.0625", ",", "'hca_0.125'", ":", "0.125", ",", "'hca_0.25'", ":", "0.25", ",", "'hca_0.3125'", ":", "0.3125", ",", "'hca_0.5'", ":", "0.5", ",", "'sa'", ":", "0.125", ",", "'sta'", ":", "0.125", ",", "'hop'", ":", "0.125", "\n", "}", ",", "\n", "}", "\n", "\n", "CLIP_MIN", "=", "0.0", "\n", "CLIP_MAX", "=", "1.0", "\n", "# CLIP_MIN = -0.5", "\n", "# CLIP_MAX = 0.5", "\n", "PATH_DATA", "=", "\"data/\"", "\n", "\n", "# Set random seed", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "\n", "def", "get_data", "(", "dataset", "=", "'mnist'", ")", ":", "\n", "    ", "\"\"\"\n    images in [-0.5, 0.5] (instead of [0, 1]) which suits C&W attack and generally gives better performance\n    \n    :param dataset:\n    :return: \n    \"\"\"", "\n", "assert", "dataset", "in", "[", "'mnist'", ",", "'cifar'", ",", "'svhn'", "]", ",", "\"dataset parameter must be either 'mnist' 'cifar' or 'svhn'\"", "\n", "if", "dataset", "==", "'mnist'", ":", "\n", "# the data, shuffled and split between train and test sets", "\n", "        ", "(", "X_train", ",", "y_train", ")", ",", "(", "X_test", ",", "y_test", ")", "=", "mnist", ".", "load_data", "(", ")", "\n", "# reshape to (n_samples, 28, 28, 1)", "\n", "X_train", "=", "X_train", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", "\n", "X_test", "=", "X_test", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", "\n", "", "elif", "dataset", "==", "'cifar'", ":", "\n", "# the data, shuffled and split between train and test sets", "\n", "        ", "(", "X_train", ",", "y_train", ")", ",", "(", "X_test", ",", "y_test", ")", "=", "cifar10", ".", "load_data", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "\"svhn_train.mat\"", ")", ")", ":", "\n", "            ", "print", "(", "'Downloading SVHN train set...'", ")", "\n", "call", "(", "\n", "\"curl -o ../data/svhn_train.mat \"", "\n", "\"http://ufldl.stanford.edu/housenumbers/train_32x32.mat\"", ",", "\n", "shell", "=", "True", "\n", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "\"svhn_test.mat\"", ")", ")", ":", "\n", "            ", "print", "(", "'Downloading SVHN test set...'", ")", "\n", "call", "(", "\n", "\"curl -o ../data/svhn_test.mat \"", "\n", "\"http://ufldl.stanford.edu/housenumbers/test_32x32.mat\"", ",", "\n", "shell", "=", "True", "\n", ")", "\n", "", "train", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "'svhn_train.mat'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_model": [[125, 205], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Flatten", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "function", ["None"], ["X_train", "=", "np", ".", "transpose", "(", "train", "[", "'X'", "]", ",", "axes", "=", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "X_test", "=", "np", ".", "transpose", "(", "test", "[", "'X'", "]", ",", "axes", "=", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "# reshape (n_samples, 1) to (n_samples,) and change 1-index", "\n", "# to 0-index", "\n", "y_train", "=", "np", ".", "reshape", "(", "train", "[", "'y'", "]", ",", "(", "-", "1", ",", ")", ")", "-", "1", "\n", "y_test", "=", "np", ".", "reshape", "(", "test", "[", "'y'", "]", ",", "(", "-", "1", ",", ")", ")", "-", "1", "\n", "\n", "# cast pixels to floats, normalize to [0, 1] range", "\n", "", "X_train", "=", "X_train", ".", "astype", "(", "'float32'", ")", "\n", "X_test", "=", "X_test", ".", "astype", "(", "'float32'", ")", "\n", "X_train", "=", "(", "X_train", "/", "255.0", ")", "-", "(", "1.0", "-", "CLIP_MAX", ")", "\n", "X_test", "=", "(", "X_test", "/", "255.0", ")", "-", "(", "1.0", "-", "CLIP_MAX", ")", "\n", "\n", "# one-hot-encode the labels", "\n", "Y_train", "=", "np_utils", ".", "to_categorical", "(", "y_train", ",", "10", ")", "\n", "Y_test", "=", "np_utils", ".", "to_categorical", "(", "y_test", ",", "10", ")", "\n", "\n", "print", "(", "\"X_train:\"", ",", "X_train", ".", "shape", ")", "\n", "print", "(", "\"Y_train:\"", ",", "Y_train", ".", "shape", ")", "\n", "print", "(", "\"X_test:\"", ",", "X_test", ".", "shape", ")", "\n", "print", "(", "\"Y_test\"", ",", "Y_test", ".", "shape", ")", "\n", "\n", "return", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "\n", "\n", "", "def", "get_model", "(", "dataset", "=", "'mnist'", ",", "softmax", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Takes in a parameter indicating which model type to use ('mnist',\n    'cifar' or 'svhn') and returns the appropriate Keras model.\n    :param dataset: A string indicating which dataset we are building\n                    a model for.\n    :param softmax: if add softmax to the last layer.\n    :return: The model; a Keras 'Sequential' instance.\n    \"\"\"", "\n", "assert", "dataset", "in", "[", "'mnist'", ",", "'cifar'", ",", "'svhn'", "]", ",", "\"dataset parameter must be either 'mnist' 'cifar' or 'svhn'\"", "\n", "if", "dataset", "==", "'mnist'", ":", "\n", "# MNIST model: 0, 2, 7, 10", "\n", "        ", "layers", "=", "[", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'valid'", ",", "input_shape", "=", "(", "28", ",", "28", ",", "1", ")", ")", ",", "# 0", "\n", "Activation", "(", "'relu'", ")", ",", "# 1", "\n", "BatchNormalization", "(", ")", ",", "# 2", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ",", "# 3", "\n", "Activation", "(", "'relu'", ")", ",", "# 4", "\n", "BatchNormalization", "(", ")", ",", "# 5", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 6", "\n", "Dropout", "(", "0.5", ")", ",", "# 7", "\n", "Flatten", "(", ")", ",", "# 8", "\n", "Dense", "(", "128", ")", ",", "# 9            ", "\n", "Activation", "(", "'relu'", ")", ",", "# 10", "\n", "BatchNormalization", "(", ")", ",", "# 11", "\n", "Dropout", "(", "0.5", ")", ",", "# 12", "\n", "Dense", "(", "10", ")", ",", "# 13", "\n", "]", "\n", "", "elif", "dataset", "==", "'cifar'", ":", "\n", "# CIFAR-10 model", "\n", "        ", "layers", "=", "[", "\n", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "input_shape", "=", "(", "32", ",", "32", ",", "3", ")", ")", ",", "# 0", "\n", "Activation", "(", "'relu'", ")", ",", "# 1", "\n", "BatchNormalization", "(", ")", ",", "# 2", "\n", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 3", "\n", "Activation", "(", "'relu'", ")", ",", "# 4", "\n", "BatchNormalization", "(", ")", ",", "# 5", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 6", "\n", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 7", "\n", "Activation", "(", "'relu'", ")", ",", "# 8", "\n", "BatchNormalization", "(", ")", ",", "# 9", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 10", "\n", "Activation", "(", "'relu'", ")", ",", "# 11", "\n", "BatchNormalization", "(", ")", ",", "# 12", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 13", "\n", "\n", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 14", "\n", "Activation", "(", "'relu'", ")", ",", "# 15", "\n", "BatchNormalization", "(", ")", ",", "# 16", "\n", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 17", "\n", "Activation", "(", "'relu'", ")", ",", "# 18", "\n", "BatchNormalization", "(", ")", ",", "# 19", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 20", "\n", "\n", "Flatten", "(", ")", ",", "# 21", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.flip": [[207, 222], ["numpy.copy", "numpy.random.choice", "numpy.reshape", "numpy.reshape", "numpy.where"], "function", ["None"], ["\n", "Dense", "(", "1024", ",", "kernel_regularizer", "=", "l2", "(", "0.01", ")", ",", "bias_regularizer", "=", "l2", "(", "0.01", ")", ")", ",", "# 23", "\n", "Activation", "(", "'relu'", ")", ",", "# 24", "\n", "BatchNormalization", "(", ")", ",", "# 25", "\n", "Dropout", "(", "0.5", ")", ",", "# 26", "\n", "Dense", "(", "512", ",", "kernel_regularizer", "=", "l2", "(", "0.01", ")", ",", "bias_regularizer", "=", "l2", "(", "0.01", ")", ")", ",", "# 27", "\n", "Activation", "(", "'relu'", ")", ",", "# 28", "\n", "BatchNormalization", "(", ")", ",", "# 29", "\n", "Dropout", "(", "0.5", ")", ",", "# 30", "\n", "Dense", "(", "10", ")", ",", "# 31", "\n", "]", "\n", "", "else", ":", "\n", "# SVHN model", "\n", "        ", "layers", "=", "[", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'valid'", ",", "input_shape", "=", "(", "32", ",", "32", ",", "3", ")", ")", ",", "# 0", "\n", "Activation", "(", "'relu'", ")", ",", "# 1", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_noisy_samples": [[224, 267], ["numpy.minimum", "numpy.maximum", "numpy.random.normal"], "function", ["None"], ["Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ",", "# 3", "\n", "Activation", "(", "'relu'", ")", ",", "# 4", "\n", "BatchNormalization", "(", ")", ",", "# 5", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 6", "\n", "\n", "Dropout", "(", "0.5", ")", ",", "# 7", "\n", "Flatten", "(", ")", ",", "# 8", "\n", "\n", "Dense", "(", "512", ")", ",", "# 9", "\n", "Activation", "(", "'relu'", ")", ",", "# 10", "\n", "BatchNormalization", "(", ")", ",", "# 11", "\n", "Dropout", "(", "0.5", ")", ",", "# 12", "\n", "\n", "Dense", "(", "128", ")", ",", "# 13", "\n", "Activation", "(", "'relu'", ")", ",", "# 14", "\n", "BatchNormalization", "(", ")", ",", "# 15", "\n", "Dropout", "(", "0.5", ")", ",", "# 16", "\n", "Dense", "(", "10", ")", ",", "# 17", "\n", "]", "\n", "\n", "", "model", "=", "Sequential", "(", ")", "\n", "for", "layer", "in", "layers", ":", "\n", "        ", "model", ".", "add", "(", "layer", ")", "\n", "", "if", "softmax", ":", "\n", "        ", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "\n", "", "return", "model", "\n", "\n", "", "def", "cross_entropy", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "y_true", ",", "logits", "=", "y_pred", ")", "\n", "\n", "", "def", "lid_term", "(", "logits", ",", "batch_size", "=", "100", ")", ":", "\n", "    ", "\"\"\"Calculate LID loss term for a minibatch of logits\n\n    :param logits: \n    :return: \n    \"\"\"", "\n", "# y_pred = tf.nn.softmax(logits)", "\n", "y_pred", "=", "logits", "\n", "\n", "# calculate pairwise distance", "\n", "r", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "y_pred", ")", ",", "axis", "=", "1", ")", "\n", "# turn r into column vector", "\n", "r", "=", "tf", ".", "reshape", "(", "r", ",", "[", "-", "1", ",", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_mc_predictions": [[269, 297], ["keras.function", "tqdm.tqdm", "numpy.asarray", "int", "numpy.zeros", "range", "range", "preds_mc.append", "keras.learning_phase", "numpy.ceil", "util.get_mc_predictions.predict"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["\n", "# find the k nearest neighbor", "\n", "D1", "=", "tf", ".", "sqrt", "(", "D", "+", "1e-9", ")", "\n", "D2", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "D1", ",", "k", "=", "21", ",", "sorted", "=", "True", ")", "\n", "D3", "=", "-", "D2", "[", ":", ",", "1", ":", "]", "\n", "\n", "m", "=", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "tf", ".", "transpose", "(", "D3", ")", ",", "1.0", "/", "D3", "[", ":", ",", "-", "1", "]", ")", ")", "\n", "v_log", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "m", "+", "1e-9", ")", ",", "axis", "=", "1", ")", "# to avoid nan", "\n", "lids", "=", "-", "20", "/", "v_log", "\n", "\n", "## batch normalize lids", "\n", "# lids = tf.nn.l2_normalize(lids, dim=0, epsilon=1e-12)", "\n", "\n", "return", "lids", "\n", "\n", "", "def", "lid_adv_term", "(", "clean_logits", ",", "adv_logits", ",", "batch_size", "=", "100", ")", ":", "\n", "    ", "\"\"\"Calculate LID loss term for a minibatch of advs logits\n\n    :param logits: clean logits\n    :param A_logits: adversarial logits\n    :return: \n    \"\"\"", "\n", "# y_pred = tf.nn.softmax(logits)", "\n", "c_pred", "=", "tf", ".", "reshape", "(", "clean_logits", ",", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "a_pred", "=", "tf", ".", "reshape", "(", "adv_logits", ",", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "\n", "# calculate pairwise distance", "\n", "r_a", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "a_pred", ")", ",", "axis", "=", "1", ")", "\n", "# turn r_a into column vector", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.get_deep_representations": [[299, 329], ["int", "numpy.zeros", "range", "keras.function", "keras.function", "numpy.ceil", "K.function.", "keras.learning_phase", "keras.learning_phase", "float", "len"], "function", ["None"], ["\n", "r_c", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "c_pred", ")", ",", "axis", "=", "1", ")", "\n", "# turn r_c into row vector", "\n", "r_c", "=", "tf", ".", "reshape", "(", "r_c", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "\n", "D", "=", "r_a", "-", "2", "*", "tf", ".", "matmul", "(", "a_pred", ",", "tf", ".", "transpose", "(", "c_pred", ")", ")", "+", "r_c", "\n", "\n", "# find the k nearest neighbor", "\n", "D1", "=", "tf", ".", "sqrt", "(", "D", "+", "1e-9", ")", "\n", "D2", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "D1", ",", "k", "=", "21", ",", "sorted", "=", "True", ")", "\n", "D3", "=", "-", "D2", "[", ":", ",", "1", ":", "]", "\n", "\n", "m", "=", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "tf", ".", "transpose", "(", "D3", ")", ",", "1.0", "/", "D3", "[", ":", ",", "-", "1", "]", ")", ")", "\n", "v_log", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "m", "+", "1e-9", ")", ",", "axis", "=", "1", ")", "# to avoid nan", "\n", "lids", "=", "-", "20", "/", "v_log", "\n", "\n", "## batch normalize lids", "\n", "lids", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "lids", ",", "dim", "=", "0", ",", "epsilon", "=", "1e-12", ")", "\n", "\n", "return", "lids", "\n", "\n", "", "def", "flip", "(", "x", ",", "nb_diff", ")", ":", "\n", "    ", "\"\"\"\n    Helper function for get_noisy_samples\n    :param x:\n    :param nb_diff:\n    :return:\n    \"\"\"", "\n", "original_shape", "=", "x", ".", "shape", "\n", "x", "=", "np", ".", "copy", "(", "np", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", ")", ")", ")", "\n", "candidate_inds", "=", "np", ".", "where", "(", "x", "<", "CLIP_MAX", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.score_point": [[331, 340], ["kde.score_samples", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.score_samples"], ["inds", "=", "np", ".", "random", ".", "choice", "(", "candidate_inds", ",", "nb_diff", ")", "\n", "x", "[", "inds", "]", "=", "CLIP_MAX", "\n", "\n", "return", "np", ".", "reshape", "(", "x", ",", "original_shape", ")", "\n", "\n", "\n", "# def get_noisy_samples(X_test, X_test_adv, dataset, attack):", "\n", "#     \"\"\"", "\n", "#     TODO", "\n", "#     :param X_test:", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.score_samples": [[342, 365], ["numpy.asarray", "mp.Pool.close", "mp.Pool.join", "multiprocessing.Pool", "multiprocessing.Pool", "mp.Pool.map", "zip"], "function", ["None"], ["#     :param dataset:", "\n", "#     :param attack:", "\n", "#     :return:", "\n", "#     \"\"\"", "\n", "#     if attack in ['jsma', 'cw-l0']:", "\n", "#         X_test_noisy = np.zeros_like(X_test)", "\n", "#         for i in range(len(X_test)):", "\n", "#             # Count the number of pixels that are different", "\n", "#             nb_diff = len(np.where(X_test[i] != X_test_adv[i])[0])", "\n", "#             # Randomly flip an equal number of pixels (flip means move to max", "\n", "#             # value of 1)", "\n", "#             X_test_noisy[i] = flip(X_test[i], nb_diff)", "\n", "#     else:", "\n", "#         # warnings.warn(\"Important: using pre-set Gaussian scale sizes to craft noisy \"", "\n", "#         #               \"samples. You will definitely need to manually tune the scale \"", "\n", "#         #               \"according to the L2 print below, otherwise the result \"", "\n", "#         #               \"will inaccurate. In future scale sizes will be inferred \"", "\n", "#         #               \"automatically. For now, manually tune the scales around \"", "\n", "#         #               \"mnist: L2/20.0, cifar: L2/54.0, svhn: L2/60.0\")", "\n", "#         # Add Gaussian noise to the samples", "\n", "#         # print(STDEVS[dataset][attack])", "\n", "#         X_test_noisy = np.minimum(", "\n", "#             np.maximum(", "\n", "#                 X_test + np.random.normal(loc=0, scale=STDEVS[dataset][attack],", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.normalize": [[367, 379], ["len", "sklearn.preprocessing.scale", "numpy.concatenate"], "function", ["None"], ["#                 CLIP_MIN", "\n", "#             ),", "\n", "#             CLIP_MAX", "\n", "#         )", "\n", "\n", "#     return X_test_noisy", "\n", "\n", "", "def", "get_noisy_samples", "(", "X_test", ",", "X_test_adv", ",", "dataset", ",", "attack", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.normalize_std": [[380, 395], ["len", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit_transform", "total.reshape.reshape", "numpy.concatenate().reshape", "numpy.concatenate"], "function", ["None"], ["\n", "# if attack.startswith('fgsm') or attack.startswith('pgdi') or attack.startswith('hca') or attack.startswith('bim'):", "\n", "#     # warnings.warn(\"Using pre-set Gaussian scale sizes to craft noisy \"", "\n", "#     #               \"samples. If you've altered the eps/eps-iter parameters \"", "\n", "#     #               \"of the attacks used, you'll need to update these. In \"", "\n", "#     #               \"the future, scale sizes will be inferred automatically \"", "\n", "#     #               \"from the adversarial samples.\")", "\n", "#     # Add Gaussian noise to the samples", "\n", "#     X_test_noisy = np.minimum(", "\n", "#         np.maximum(", "\n", "#             X_test + np.random.normal(loc=0, scale=STDEVS[dataset][attack],", "\n", "#                                       size=X_test.shape),", "\n", "#             0", "\n", "#         ),", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.train_lr": [[397, 422], ["numpy.concatenate().transpose", "numpy.concatenate().transpose", "numpy.concatenate", "numpy.concatenate", "sklearn.linear_model.LogisticRegressionCV().fit", "numpy.concatenate", "numpy.concatenate", "numpy.zeros_like", "numpy.ones_like", "sklearn.linear_model.LogisticRegressionCV", "densities_neg.reshape", "uncerts_neg.reshape", "densities_pos.reshape", "uncerts_pos.reshape"], "function", ["None"], ["#     )", "\n", "# else:", "\n", "#     X_test_noisy = np.zeros_like(X_test)", "\n", "#     for i in range(len(X_test)):", "\n", "#         # Count the number of pixels that are different", "\n", "#         nb_diff = len(np.where(X_test[i] != X_test_adv[i])[0])", "\n", "#         # Randomly flip an equal number of pixels (flip means move to max", "\n", "#         # value of 1)", "\n", "#         X_test_noisy[i] = flip(X_test[i], nb_diff)", "\n", "\n", "X_test_noisy", "=", "np", ".", "minimum", "(", "\n", "np", ".", "maximum", "(", "\n", "X_test", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "STDEVS", "[", "dataset", "]", "[", "attack", "]", ",", "\n", "size", "=", "X_test", ".", "shape", ")", ",", "\n", "0", "\n", ")", ",", "\n", "1", "\n", ")", "\n", "\n", "return", "X_test_noisy", "\n", "\n", "", "def", "get_mc_predictions", "(", "model", ",", "X", ",", "nb_iter", "=", "50", ",", "batch_size", "=", "256", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detect.util.compute_roc": [[424, 447], ["numpy.concatenate", "numpy.concatenate", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "matplotlib.figure", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "numpy.zeros_like", "numpy.ones_like"], "function", ["None"], ["\n", "output_dim", "=", "model", ".", "layers", "[", "-", "1", "]", ".", "output", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "get_output", "=", "K", ".", "function", "(", "\n", "[", "model", ".", "layers", "[", "0", "]", ".", "input", ",", "K", ".", "learning_phase", "(", ")", "]", ",", "\n", "[", "model", ".", "layers", "[", "-", "1", "]", ".", "output", "]", "\n", ")", "\n", "\n", "def", "predict", "(", ")", ":", "\n", "        ", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "X", ".", "shape", "[", "0", "]", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "output", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "X", ")", ",", "output_dim", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "output", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "=", "get_output", "(", "[", "X", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ",", "1", "]", ")", "[", "0", "]", "\n", "", "return", "output", "\n", "\n", "", "preds_mc", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "nb_iter", ")", ")", ":", "\n", "        ", "preds_mc", ".", "append", "(", "predict", "(", ")", ")", "\n", "\n", "", "return", "np", ".", "asarray", "(", "preds_mc", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.pad_amount": [[5, 11], ["None"], "function", ["None"], ["def", "pad_amount", "(", "k", ")", ":", "\n", "    ", "added", "=", "k", "-", "1", "\n", "# note: this imitates scipy, which puts more at the beginning", "\n", "end", "=", "added", "//", "2", "\n", "start", "=", "added", "-", "end", "\n", "return", "[", "start", ",", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.neighborhood": [[12, 24], ["tensorflow.shape", "tensorflow.pad", "tensorflow.reshape", "tensorflow.extract_image_patches", "median.pad_amount", "median.pad_amount"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.pad_amount", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.pad_amount"], ["", "def", "neighborhood", "(", "x", ",", "kh", ",", "kw", ")", ":", "\n", "# input: N, H, W, C", "\n", "# output: N, H, W, KH, KW, C", "\n", "# padding is REFLECT", "\n", "    ", "xs", "=", "tf", ".", "shape", "(", "x", ")", "\n", "x_pad", "=", "tf", ".", "pad", "(", "x", ",", "(", "[", "0", ",", "0", "]", ",", "pad_amount", "(", "kh", ")", ",", "pad_amount", "(", "kw", ")", ",", "[", "0", ",", "0", "]", ")", ",", "'SYMMETRIC'", ")", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "extract_image_patches", "(", "x_pad", ",", "\n", "[", "1", ",", "kh", ",", "kw", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "'VALID'", ")", ",", "\n", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "kh", ",", "kw", ",", "xs", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_filter": [[25, 41], ["tensorflow.shape", "median.neighborhood", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.nn.top_k", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.neighborhood"], ["", "def", "median_filter", "(", "x", ",", "kh", ",", "kw", "=", "-", "1", ")", ":", "\n", "    ", "if", "kw", "==", "-", "1", ":", "\n", "        ", "kw", "=", "kh", "\n", "", "neigh_size", "=", "kh", "*", "kw", "\n", "xs", "=", "tf", ".", "shape", "(", "x", ")", "\n", "# get neighborhoods in shape (whatever, neigh_size)", "\n", "x_neigh", "=", "neighborhood", "(", "x", ",", "kh", ",", "kw", ")", "\n", "x_neigh", "=", "tf", ".", "transpose", "(", "x_neigh", ",", "(", "0", ",", "1", ",", "2", ",", "5", ",", "3", ",", "4", ")", ")", "# N, H, W, C, KH, KW", "\n", "x_neigh", "=", "tf", ".", "reshape", "(", "x_neigh", ",", "(", "-", "1", ",", "neigh_size", ")", ")", "\n", "# note: this imitates scipy, which doesn't average with an even number of elements", "\n", "# get half, but rounded up", "\n", "rank", "=", "neigh_size", "-", "neigh_size", "//", "2", "\n", "x_top", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "x_neigh", ",", "rank", ")", "\n", "# bottom of top half should be middle", "\n", "x_mid", "=", "x_top", "[", ":", ",", "-", "1", "]", "\n", "return", "tf", ".", "reshape", "(", "x_mid", ",", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_filter_no_reshape": [[42, 57], ["tensorflow.shape", "median.neighborhood", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.nn.top_k"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.neighborhood"], ["", "def", "median_filter_no_reshape", "(", "x", ",", "kh", ",", "kw", ")", ":", "\n", "    ", "neigh_size", "=", "kh", "*", "kw", "\n", "xs", "=", "tf", ".", "shape", "(", "x", ")", "\n", "# get neighborhoods in shape (whatever, neigh_size)", "\n", "x_neigh", "=", "neighborhood", "(", "x", ",", "kh", ",", "kw", ")", "\n", "x_neigh", "=", "tf", ".", "transpose", "(", "x_neigh", ",", "(", "0", ",", "1", ",", "2", ",", "5", ",", "3", ",", "4", ")", ")", "# N, H, W, C, KH, KW", "\n", "x_neigh", "=", "tf", ".", "reshape", "(", "x_neigh", ",", "(", "-", "1", ",", "neigh_size", ")", ")", "\n", "# note: this imitates scipy, which doesn't average with an even number of elements", "\n", "# get half, but rounded up", "\n", "rank", "=", "neigh_size", "-", "neigh_size", "//", "2", "\n", "x_top", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "x_neigh", ",", "rank", ")", "\n", "# bottom of top half should be middle", "\n", "x_mid", "=", "x_top", "[", ":", ",", "-", "1", "]", "\n", "# return tf.reshape(x_mid, (xs[0], xs[1], xs[2], xs[3]))", "\n", "return", "x_mid", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_random_filter": [[58, 73], ["tensorflow.shape", "median.neighborhood", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.cast", "tensorflow.nn.top_k", "tensorflow.reshape", "tensorflow.truncated_normal"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.neighborhood"], ["", "def", "median_random_filter", "(", "x", ",", "kh", ",", "kw", ")", ":", "\n", "    ", "neigh_size", "=", "kh", "*", "kw", "\n", "xs", "=", "tf", ".", "shape", "(", "x", ")", "\n", "# get neighborhoods in shape (whatever, neigh_size)", "\n", "x_neigh", "=", "neighborhood", "(", "x", ",", "kh", ",", "kw", ")", "\n", "x_neigh", "=", "tf", ".", "transpose", "(", "x_neigh", ",", "(", "0", ",", "1", ",", "2", ",", "5", ",", "3", ",", "4", ")", ")", "# N, H, W, C, KH, KW", "\n", "x_neigh", "=", "tf", ".", "reshape", "(", "x_neigh", ",", "(", "-", "1", ",", "neigh_size", ")", ")", "\n", "# note: this imitates scipy, which doesn't average with an even number of elements", "\n", "# get half, but rounded up", "\n", "rank", "=", "neigh_size", "-", "neigh_size", "//", "2", "\n", "rand_int", "=", "tf", ".", "cast", "(", "tf", ".", "truncated_normal", "(", "[", "1", "]", ",", "mean", "=", "0", ",", "stddev", "=", "neigh_size", "/", "4", ")", "[", "0", "]", ",", "tf", ".", "int32", ")", "\n", "x_top", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "x_neigh", ",", "rank", "+", "rand_int", ")", "\n", "# bottom of top half should be middle", "\n", "x_mid", "=", "x_top", "[", ":", ",", "-", "1", "]", "\n", "return", "tf", ".", "reshape", "(", "x_mid", ",", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_random_filter_no_reshape": [[74, 89], ["tensorflow.shape", "median.neighborhood", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.cast", "tensorflow.nn.top_k", "tensorflow.truncated_normal"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.neighborhood"], ["", "def", "median_random_filter_no_reshape", "(", "x", ",", "kh", ",", "kw", ")", ":", "\n", "    ", "neigh_size", "=", "kh", "*", "kw", "\n", "xs", "=", "tf", ".", "shape", "(", "x", ")", "\n", "# get neighborhoods in shape (whatever, neigh_size)", "\n", "x_neigh", "=", "neighborhood", "(", "x", ",", "kh", ",", "kw", ")", "\n", "x_neigh", "=", "tf", ".", "transpose", "(", "x_neigh", ",", "(", "0", ",", "1", ",", "2", ",", "5", ",", "3", ",", "4", ")", ")", "# N, H, W, C, KH, KW", "\n", "x_neigh", "=", "tf", ".", "reshape", "(", "x_neigh", ",", "(", "-", "1", ",", "neigh_size", ")", ")", "\n", "# note: this imitates scipy, which doesn't average with an even number of elements", "\n", "# get half, but rounded up", "\n", "rank", "=", "neigh_size", "-", "neigh_size", "//", "2", "\n", "rand_int", "=", "tf", ".", "cast", "(", "tf", ".", "truncated_normal", "(", "[", "1", "]", ",", "mean", "=", "0", ",", "stddev", "=", "neigh_size", "/", "4", ")", "[", "0", "]", ",", "tf", ".", "int32", ")", "\n", "x_top", ",", "_", "=", "tf", ".", "nn", ".", "top_k", "(", "x_neigh", ",", "rank", "+", "rand_int", ")", "\n", "# bottom of top half should be middle", "\n", "x_mid", "=", "x_top", "[", ":", ",", "-", "1", "]", "\n", "return", "x_mid", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_random_pos_size_filter": [[90, 116], ["median.median_random_filter_no_reshape", "median.median_random_filter_no_reshape", "median.median_random_filter_no_reshape", "tensorflow.shape", "tensorflow.squeeze", "tensorflow.zeros", "tensorflow.ones", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.add_n", "tensorflow.reshape", "tensorflow.multinomial", "tensorflow.ones", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.log", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_random_filter_no_reshape", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_random_filter_no_reshape", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_random_filter_no_reshape"], ["", "def", "median_random_pos_size_filter", "(", "x", ",", "kh", ",", "kw", ")", ":", "\n", "    ", "pass", "\n", "# Get two/multiple x_mid, randomly select from one .", "\n", "s0", "=", "median_random_filter_no_reshape", "(", "x", ",", "2", ",", "2", ")", "\n", "s1", "=", "median_random_filter_no_reshape", "(", "x", ",", "3", ",", "3", ")", "\n", "s2", "=", "median_random_filter_no_reshape", "(", "x", ",", "4", ",", "4", ")", "\n", "\n", "xs", "=", "tf", ".", "shape", "(", "x", ")", "\n", "nb_pixels", "=", "xs", "[", "0", "]", "*", "xs", "[", "1", "]", "*", "xs", "[", "2", "]", "*", "xs", "[", "3", "]", "\n", "samples_mnd", "=", "tf", ".", "squeeze", "(", "tf", ".", "multinomial", "(", "tf", ".", "log", "(", "[", "[", "10.", ",", "10.", ",", "10.", "]", "]", ")", ",", "nb_pixels", ")", ")", "\n", "\n", "# return tf.constant([0]*nb_pixels, dtype=tf.int64)", "\n", "zeros", "=", "tf", ".", "zeros", "(", "[", "nb_pixels", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "ones", "=", "tf", ".", "ones", "(", "[", "nb_pixels", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "twos", "=", "tf", ".", "ones", "(", "[", "nb_pixels", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "*", "2", "\n", "# tmp = tf.cast(tf.equal(samples_mnd, tf.zeros([nb_pixels], dtype=tf.int64)), tf.int64)", "\n", "# return zeros, ones, twos", "\n", "\n", "selected_0", "=", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "samples_mnd", ",", "zeros", ")", ",", "tf", ".", "float32", ")", "\n", "selected_1", "=", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "samples_mnd", ",", "ones", ")", ",", "tf", ".", "float32", ")", "\n", "selected_2", "=", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "samples_mnd", ",", "twos", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "# return s0, selected_0", "\n", "x_mid", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "multiply", "(", "s0", ",", "selected_0", ")", ",", "tf", ".", "multiply", "(", "s1", ",", "selected_1", ")", ",", "tf", ".", "multiply", "(", "s2", ",", "selected_2", ")", "]", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "x_mid", ",", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_random_size_filter": [[118, 145], ["median.median_filter_no_reshape", "median.median_filter_no_reshape", "tensorflow.shape", "tensorflow.squeeze", "tensorflow.zeros", "tensorflow.ones", "tensorflow.cast", "tensorflow.cast", "tensorflow.add_n", "tensorflow.reshape", "tensorflow.multinomial", "tensorflow.equal", "tensorflow.equal", "tensorflow.log", "tensorflow.multiply", "tensorflow.multiply"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_filter_no_reshape", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_filter_no_reshape"], ["", "def", "median_random_size_filter", "(", "x", ",", "kh", ",", "kw", ")", ":", "\n", "    ", "pass", "\n", "# Get two/multiple x_mid, randomly select from one .", "\n", "s0", "=", "median_filter_no_reshape", "(", "x", ",", "2", ",", "2", ")", "\n", "s1", "=", "median_filter_no_reshape", "(", "x", ",", "3", ",", "3", ")", "\n", "# s2 = median_filter_no_reshape(x, 4, 4)", "\n", "\n", "xs", "=", "tf", ".", "shape", "(", "x", ")", "\n", "nb_pixels", "=", "xs", "[", "0", "]", "*", "xs", "[", "1", "]", "*", "xs", "[", "2", "]", "*", "xs", "[", "3", "]", "\n", "samples_mnd", "=", "tf", ".", "squeeze", "(", "tf", ".", "multinomial", "(", "tf", ".", "log", "(", "[", "[", "10.", ",", "10.", "]", "]", ")", ",", "nb_pixels", ")", ")", "\n", "\n", "# return tf.constant([0]*nb_pixels, dtype=tf.int64)", "\n", "zeros", "=", "tf", ".", "zeros", "(", "[", "nb_pixels", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "ones", "=", "tf", ".", "ones", "(", "[", "nb_pixels", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "# twos = tf.ones([nb_pixels], dtype=tf.int64)*2", "\n", "# tmp = tf.cast(tf.equal(samples_mnd, tf.zeros([nb_pixels], dtype=tf.int64)), tf.int64)", "\n", "# return zeros, ones, twos", "\n", "\n", "selected_0", "=", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "samples_mnd", ",", "zeros", ")", ",", "tf", ".", "float64", ")", "\n", "selected_1", "=", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "samples_mnd", ",", "ones", ")", ",", "tf", ".", "float64", ")", "\n", "# selected_2 = tf.cast(tf.equal(samples_mnd, twos), tf.float32)", "\n", "\n", "# return s0, selected_0", "\n", "# x_mid = tf.add_n( [tf.multiply(s0, selected_0), tf.multiply(s1, selected_1), tf.multiply(s2, selected_2)] )", "\n", "x_mid", "=", "tf", ".", "add_n", "(", "[", "tf", ".", "multiply", "(", "s0", ",", "selected_0", ")", ",", "tf", ".", "multiply", "(", "s1", ",", "selected_1", ")", "]", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "x_mid", ",", "(", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.output.disablePrint": [[5, 10], ["sys.stdout.flush", "open"], "function", ["None"], ["def", "disablePrint", "(", "log_fpath", "=", "None", ")", ":", "\n", "    ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "if", "log_fpath", "is", "None", ":", "\n", "        ", "log_fpath", "=", "os", ".", "devnull", "\n", "", "sys", ".", "stdout", "=", "open", "(", "log_fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.output.enablePrint": [[12, 17], ["sys.stdout.flush", "log_f.close"], "function", ["None"], ["", "def", "enablePrint", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "log_f", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "sys", ".", "__stdout__", "\n", "log_f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.output.write_to_csv": [[19, 25], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerow"], "function", ["None"], ["", "def", "write_to_csv", "(", "li", ",", "fpath", ",", "fieldnames", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "di", "in", "li", ":", "\n", "            ", "writer", ".", "writerow", "(", "di", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.output.formatter": [[27, 29], ["None"], "function", ["None"], ["", "", "", "def", "formatter", "(", "start", ",", "end", ",", "step", ")", ":", "\n", "    ", "return", "'{}-{}:{}'", ".", "format", "(", "start", ",", "end", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.output.format_number_range": [[31, 61], ["len", "range", "result.append", "result.append", "result.append", "str", "result.append", "str", "result.append", "output.formatter", "output.formatter", "map"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.output.formatter", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.output.formatter"], ["", "def", "format_number_range", "(", "lst", ")", ":", "\n", "    ", "\"\"\"\n    Format a list of numbers to a string of ranges.\n    Source: https://stackoverflow.com/a/9855078\n    \"\"\"", "\n", "n", "=", "len", "(", "lst", ")", "\n", "result", "=", "[", "]", "\n", "scan", "=", "0", "\n", "while", "n", "-", "scan", ">", "2", ":", "\n", "        ", "step", "=", "lst", "[", "scan", "+", "1", "]", "-", "lst", "[", "scan", "]", "\n", "if", "lst", "[", "scan", "+", "2", "]", "-", "lst", "[", "scan", "+", "1", "]", "!=", "step", ":", "\n", "            ", "result", ".", "append", "(", "str", "(", "lst", "[", "scan", "]", ")", ")", "\n", "scan", "+=", "1", "\n", "continue", "\n", "\n", "", "for", "j", "in", "range", "(", "scan", "+", "2", ",", "n", "-", "1", ")", ":", "\n", "            ", "if", "lst", "[", "j", "+", "1", "]", "-", "lst", "[", "j", "]", "!=", "step", ":", "\n", "                ", "result", ".", "append", "(", "formatter", "(", "lst", "[", "scan", "]", ",", "lst", "[", "j", "]", ",", "step", ")", ")", "\n", "scan", "=", "j", "+", "1", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "result", ".", "append", "(", "formatter", "(", "lst", "[", "scan", "]", ",", "lst", "[", "-", "1", "]", ",", "step", ")", ")", "\n", "return", "','", ".", "join", "(", "result", ")", "\n", "\n", "", "", "if", "n", "-", "scan", "==", "1", ":", "\n", "        ", "result", ".", "append", "(", "str", "(", "lst", "[", "scan", "]", ")", ")", "\n", "", "elif", "n", "-", "scan", "==", "2", ":", "\n", "        ", "result", ".", "append", "(", "','", ".", "join", "(", "map", "(", "str", ",", "lst", "[", "scan", ":", "]", ")", ")", ")", "\n", "\n", "", "return", "','", ".", "join", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.output.save_task_descriptor": [[63, 72], ["os.path.join", "output.write_to_csv"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.output.write_to_csv"], ["", "def", "save_task_descriptor", "(", "result_folder", ",", "to_csv", ")", ":", "\n", "    ", "task", "=", "to_csv", "[", "0", "]", "\n", "fname", "=", "\"%s_%d_%s_%s_task_desc.csv\"", "%", "(", "task", "[", "'dataset_name'", "]", ",", "task", "[", "'test_set_selected_length'", "]", ",", "task", "[", "'test_set_selected_idx_hash'", "]", "[", ":", "5", "]", ",", "task", "[", "'model_name'", "]", ")", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "result_folder", ",", "fname", ")", "\n", "\n", "fieldnames", "=", "[", "'dataset_name'", ",", "'model_name'", ",", "'accuracy_test'", ",", "'mean_confidence_test'", ",", "'test_set_selected_length'", ",", "'test_set_selected_idx_ranges'", ",", "'test_set_selected_idx_hash'", ",", "'accuracy_test_selected'", ",", "'mean_confidence_test_selected'", "]", "\n", "write_to_csv", "(", "to_csv", ",", "fpath", ",", "fieldnames", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.reduce_precision_py": [[11, 23], ["numpy.rint"], "function", ["None"], ["def", "reduce_precision_py", "(", "x", ",", "npp", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the precision of image, the numpy version.\n    :param x: a float tensor, which has been scaled to [0, 1].\n    :param npp: number of possible values per pixel. E.g. it's 256 for 8-bit gray-scale image, and 2 for binarized image.\n    :return: a tensor representing image(s) with lower precision.\n    \"\"\"", "\n", "# Note: 0 is a possible value too.", "\n", "npp_int", "=", "npp", "-", "1", "\n", "x_int", "=", "np", ".", "rint", "(", "x", "*", "npp_int", ")", "\n", "x_float", "=", "x_int", "/", "npp_int", "\n", "return", "x_float", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.reduce_precision_tf": [[24, 32], ["tensorflow.rint", "tensorflow.div", "tensorflow.multiply"], "function", ["None"], ["", "def", "reduce_precision_tf", "(", "x", ",", "npp", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the precision of image, the tensorflow version.\n    \"\"\"", "\n", "npp_int", "=", "npp", "-", "1", "\n", "x_int", "=", "tf", ".", "rint", "(", "tf", ".", "multiply", "(", "x", ",", "npp_int", ")", ")", "\n", "x_float", "=", "tf", ".", "div", "(", "x_int", ",", "npp_int", ")", "\n", "return", "x_float", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bit_depth_py": [[34, 37], ["squeeze.reduce_precision_py"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.reduce_precision_py"], ["", "def", "bit_depth_py", "(", "x", ",", "bits", ")", ":", "\n", "    ", "precisions", "=", "2", "**", "bits", "\n", "return", "reduce_precision_py", "(", "x", ",", "precisions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bit_depth_tf": [[38, 41], ["squeeze.reduce_precision_tf"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.reduce_precision_tf"], ["", "def", "bit_depth_tf", "(", "x", ",", "bits", ")", ":", "\n", "    ", "precisions", "=", "2", "**", "bits", "\n", "return", "reduce_precision_tf", "(", "x", ",", "precisions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bit_depth_random_py": [[42, 49], ["numpy.add", "squeeze.bit_depth_py", "numpy.zeros", "numpy.random.normal"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bit_depth_py"], ["", "def", "bit_depth_random_py", "(", "x", ",", "bits", ",", "stddev", ")", ":", "\n", "    ", "if", "stddev", "==", "0.", ":", "\n", "        ", "rand_array", "=", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "rand_array", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.", ",", "scale", "=", "stddev", ",", "size", "=", "x", ".", "shape", ")", "\n", "", "x_random", "=", "np", ".", "add", "(", "x", ",", "rand_array", ")", "\n", "return", "bit_depth_py", "(", "x_random", ",", "bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bit_depth_random_tf": [[50, 54], ["tensorflow.random_normal", "tensorflow.add", "squeeze.bit_depth_tf", "x.get_shape"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bit_depth_tf"], ["", "def", "bit_depth_random_tf", "(", "x", ",", "bits", ",", "stddev", ")", ":", "\n", "    ", "rand_ts", "=", "tf", ".", "random_normal", "(", "x", ".", "get_shape", "(", ")", ",", "mean", "=", "0", ",", "stddev", "=", "stddev", ")", "\n", "x_random", "=", "tf", ".", "add", "(", "x", ",", "rand_tf", ")", "\n", "return", "bit_depth_tf", "(", "x_random", ",", "bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.binary_filter_tf": [[55, 58], ["tensorflow.nn.relu", "tensorflow.sign"], "function", ["None"], ["", "def", "binary_filter_tf", "(", "x", ",", "threshold", ")", ":", "\n", "    ", "x_bin", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "sign", "(", "x", "-", "threshold", ")", ")", "\n", "return", "x_bin", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.binary_filter_py": [[59, 62], ["numpy.maximum", "numpy.sign"], "function", ["None"], ["", "def", "binary_filter_py", "(", "x", ",", "threshold", ")", ":", "\n", "    ", "x_bin", "=", "np", ".", "maximum", "(", "np", ".", "sign", "(", "x", "-", "threshold", ")", ",", "0", ")", "\n", "return", "x_bin", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.binary_random_filter_tf": [[63, 67], ["tensorflow.random_normal", "tensorflow.nn.relu", "x.get_shape", "tensorflow.sign", "tensorflow.add"], "function", ["None"], ["", "def", "binary_random_filter_tf", "(", "x", ",", "threshold", ",", "stddev", "=", "0.125", ")", ":", "\n", "    ", "rand_ts", "=", "tf", ".", "random_normal", "(", "x", ".", "get_shape", "(", ")", ",", "mean", "=", "0", ",", "stddev", "=", "stddev", ")", "\n", "x_bin", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "sign", "(", "tf", ".", "add", "(", "x", ",", "rand_ts", ")", "-", "threshold", ")", ")", "\n", "return", "x_bin", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.binary_random_filter_py": [[68, 75], ["numpy.maximum", "numpy.zeros", "numpy.random.normal", "numpy.sign", "numpy.add"], "function", ["None"], ["", "def", "binary_random_filter_py", "(", "x", ",", "threshold", ",", "stddev", "=", "0.125", ")", ":", "\n", "    ", "if", "stddev", "==", "0.", ":", "\n", "        ", "rand_array", "=", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "rand_array", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.", ",", "scale", "=", "stddev", ",", "size", "=", "x", ".", "shape", ")", "\n", "", "x_bin", "=", "np", ".", "maximum", "(", "np", ".", "sign", "(", "np", ".", "add", "(", "x", ",", "rand_array", ")", "-", "threshold", ")", ",", "0", ")", "\n", "return", "x_bin", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.median_filter_py": [[77, 88], ["scipy.ndimage.filters.median_filter"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_filter"], ["", "def", "median_filter_py", "(", "x", ",", "width", ",", "height", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Median smoothing by Scipy.\n    :param x: a tensor of image(s)\n    :param width: the width of the sliding window (number of pixels)\n    :param height: the height of the window. The same as width by default.\n    :return: a modified tensor with the same shape as x.\n    \"\"\"", "\n", "if", "height", "==", "-", "1", ":", "\n", "        ", "height", "=", "width", "\n", "", "return", "ndimage", ".", "filters", ".", "median_filter", "(", "x", ",", "size", "=", "(", "1", ",", "width", ",", "height", ",", "1", ")", ",", "mode", "=", "'reflect'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.median_random_filter_py": [[89, 97], ["tensorflow.initialize_all_variables", "tensorflow.Session", "sess.run", "tensorflow.constant", "median.median_random_filter", "median.median_random_filter.eval"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_random_filter"], ["", "def", "median_random_filter_py", "(", "x", ",", "width", ",", "height", "=", "-", "1", ")", ":", "\n", "# assert False", "\n", "    ", "init_op", "=", "tf", ".", "initialize_all_variables", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "init_op", ")", "\n", "x", "=", "tf", ".", "constant", "(", "x", ")", "\n", "res", "=", "median_random_filter_tf", "(", "x", ",", "width", ",", "height", ")", "\n", "return", "res", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.median_random_pos_size_filter_py": [[98, 106], ["tensorflow.initialize_all_variables", "tensorflow.Session", "sess.run", "tensorflow.constant", "median.median_random_pos_size_filter", "median.median_random_pos_size_filter.eval"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_random_pos_size_filter"], ["", "", "def", "median_random_pos_size_filter_py", "(", "x", ",", "width", ",", "height", "=", "-", "1", ")", ":", "\n", "# assert False", "\n", "    ", "init_op", "=", "tf", ".", "initialize_all_variables", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "init_op", ")", "\n", "x", "=", "tf", ".", "constant", "(", "x", ")", "\n", "res", "=", "median_random_pos_size_filter_tf", "(", "x", ",", "width", ",", "height", ")", "\n", "return", "res", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.median_random_size_filter_py": [[107, 115], ["tensorflow.global_variables_initializer", "tensorflow.Session", "sess.run", "tensorflow.constant", "median.median_random_size_filter", "median.median_random_size_filter.eval"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.median.median_random_size_filter"], ["", "", "def", "median_random_size_filter_py", "(", "x", ",", "width", ",", "height", "=", "-", "1", ")", ":", "\n", "# assert False", "\n", "    ", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "init_op", ")", "\n", "x", "=", "tf", ".", "constant", "(", "x", ")", "\n", "res", "=", "median_random_size_filter_tf", "(", "x", ",", "width", ",", "height", ")", "\n", "return", "res", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.opencv_wrapper": [[119, 139], ["numpy.stack", "numpy.squeeze", "numpy.clip().astype", "opencv_func", "np.expand_dims.append", "numpy.expand_dims", "type", "opencv_func.astype", "numpy.clip", "numpy.rint"], "function", ["None"], ["", "", "def", "opencv_wrapper", "(", "imgs", ",", "opencv_func", ",", "argv", ")", ":", "\n", "    ", "ret_imgs", "=", "[", "]", "\n", "imgs_copy", "=", "imgs", "\n", "\n", "if", "imgs", ".", "shape", "[", "3", "]", "==", "1", ":", "\n", "        ", "imgs_copy", "=", "np", ".", "squeeze", "(", "imgs", ")", "\n", "\n", "", "for", "img", "in", "imgs_copy", ":", "\n", "        ", "img_uint8", "=", "np", ".", "clip", "(", "np", ".", "rint", "(", "img", "*", "255", ")", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "ret_img", "=", "opencv_func", "(", "*", "[", "img_uint8", "]", "+", "argv", ")", "\n", "if", "type", "(", "ret_img", ")", "==", "tuple", ":", "\n", "            ", "ret_img", "=", "ret_img", "[", "1", "]", "\n", "", "ret_img", "=", "ret_img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "ret_imgs", ".", "append", "(", "ret_img", ")", "\n", "", "ret_imgs", "=", "np", ".", "stack", "(", "ret_imgs", ")", "\n", "\n", "if", "imgs", ".", "shape", "[", "3", "]", "==", "1", ":", "\n", "        ", "ret_imgs", "=", "np", ".", "expand_dims", "(", "ret_imgs", ",", "axis", "=", "3", ")", "\n", "\n", "", "return", "ret_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.adaptive_binarize_py": [[142, 149], ["squeeze.opencv_wrapper"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.opencv_wrapper"], ["", "def", "adaptive_binarize_py", "(", "x", ",", "block_size", "=", "5", ",", "C", "=", "33.8", ")", ":", "\n", "    ", "\"Works like an edge detector.\"", "\n", "# ADAPTIVE_THRESH_GAUSSIAN_C, ADAPTIVE_THRESH_MEAN_C", "\n", "# THRESH_BINARY, THRESH_BINARY_INV", "\n", "import", "cv2", "\n", "ret_imgs", "=", "opencv_wrapper", "(", "x", ",", "cv2", ".", "adaptiveThreshold", ",", "[", "255", ",", "cv2", ".", "ADAPTIVE_THRESH_GAUSSIAN_C", ",", "cv2", ".", "THRESH_BINARY_INV", ",", "block_size", ",", "C", "]", ")", "\n", "return", "ret_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.otsu_binarize_py": [[150, 156], ["squeeze.opencv_wrapper"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.opencv_wrapper"], ["", "def", "otsu_binarize_py", "(", "x", ")", ":", "\n", "# func = lambda img: cv2.threshold(img, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)[1]", "\n", "# return opencv_binarize(x, func)", "\n", "    ", "import", "cv2", "\n", "ret_imgs", "=", "opencv_wrapper", "(", "x", ",", "cv2", ".", "threshold", ",", "[", "0", ",", "255", ",", "cv2", ".", "THRESH_BINARY", "+", "cv2", ".", "THRESH_OTSU", "]", ")", "\n", "return", "ret_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.non_local_means_color_py": [[159, 163], ["squeeze.opencv_wrapper"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.opencv_wrapper"], ["", "def", "non_local_means_color_py", "(", "imgs", ",", "search_window", ",", "block_size", ",", "photo_render", ")", ":", "\n", "    ", "import", "cv2", "\n", "ret_imgs", "=", "opencv_wrapper", "(", "imgs", ",", "cv2", ".", "fastNlMeansDenoisingColored", ",", "[", "None", ",", "photo_render", ",", "photo_render", ",", "block_size", ",", "search_window", "]", ")", "\n", "return", "ret_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.non_local_means_color_tf": [[164, 168], ["tensorflow.py_func", "squeeze.non_local_means_color_py"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.non_local_means_color_py"], ["", "def", "non_local_means_color_tf", "(", "imgs", ",", "search_window", ",", "block_size", ",", "photo_render", ")", ":", "\n", "    ", "my_func", "=", "lambda", "x", ":", "non_local_means_color_py", "(", "x", ",", "search_window", ",", "block_size", ",", "photo_render", ")", "\n", "y", "=", "tf", ".", "py_func", "(", "my_func", ",", "[", "imgs", "]", ",", "tf", ".", "float32", ",", "stateful", "=", "False", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.non_local_means_bw_py": [[169, 173], ["squeeze.opencv_wrapper"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.opencv_wrapper"], ["", "def", "non_local_means_bw_py", "(", "imgs", ",", "search_window", ",", "block_size", ",", "photo_render", ")", ":", "\n", "    ", "import", "cv2", "\n", "ret_imgs", "=", "opencv_wrapper", "(", "imgs", ",", "cv2", ".", "fastNlMeansDenoising", ",", "[", "None", ",", "photo_render", ",", "block_size", ",", "search_window", "]", ")", "\n", "return", "ret_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.non_local_means_bw_tf": [[174, 178], ["tensorflow.py_func", "squeeze.non_local_means_bw_py"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.non_local_means_bw_py"], ["", "def", "non_local_means_bw_tf", "(", "imgs", ",", "search_window", ",", "block_size", ",", "photo_render", ")", ":", "\n", "    ", "my_func", "=", "lambda", "x", ":", "non_local_means_bw_py", "(", "x", ",", "search_window", ",", "block_size", ",", "photo_render", ")", "\n", "y", "=", "tf", ".", "py_func", "(", "my_func", ",", "[", "imgs", "]", ",", "tf", ".", "float32", ",", "stateful", "=", "False", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bilateral_filter_py": [[180, 193], ["squeeze.opencv_wrapper"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.opencv_wrapper"], ["", "def", "bilateral_filter_py", "(", "imgs", ",", "d", ",", "sigmaSpace", ",", "sigmaColor", ")", ":", "\n", "    ", "\"\"\"\n    :param d: Diameter of each pixel neighborhood that is used during filtering. \n        If it is non-positive, it is computed from sigmaSpace.\n    :param sigmaSpace: Filter sigma in the coordinate space. \n        A larger value of the parameter means that farther pixels will influence each other as long as their colors are close enough (see sigmaColor ). \n        When d>0, it specifies the neighborhood size regardless of sigmaSpace. \n        Otherwise, d is proportional to sigmaSpace.\n    :param sigmaColor: Filter sigma in the color space. \n        A larger value of the parameter means that farther colors within the pixel neighborhood (see sigmaSpace) will be mixed together, resulting in larger areas of semi-equal color.\n    \"\"\"", "\n", "import", "cv2", "\n", "return", "opencv_wrapper", "(", "imgs", ",", "cv2", ".", "bilateralFilter", ",", "[", "d", ",", "sigmaColor", ",", "sigmaSpace", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bilateral_filter_tf": [[194, 198], ["tensorflow.py_func", "squeeze.bilateral_filter_py"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.bilateral_filter_py"], ["", "def", "bilateral_filter_tf", "(", "imgs", ",", "d", ",", "sigmaSpace", ",", "sigmaColor", ")", ":", "\n", "    ", "my_func", "=", "lambda", "x", ":", "bilateral_filter_py", "(", "x", ",", "d", ",", "sigmaSpace", ",", "sigmaColor", ")", "\n", "y", "=", "tf", ".", "py_func", "(", "my_func", ",", "[", "imgs", "]", ",", "tf", ".", "float32", ",", "stateful", "=", "False", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.adaptive_bilateral_filter_py": [[203, 206], ["squeeze.opencv_wrapper"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.opencv_wrapper"], ["", "def", "adaptive_bilateral_filter_py", "(", "imgs", ",", "ksize", ",", "sigmaSpace", ",", "maxSigmaColor", "=", "20.0", ")", ":", "\n", "    ", "import", "cv2", "\n", "return", "opencv_wrapper", "(", "imgs", ",", "cv2", ".", "adaptiveBilateralFilter", ",", "[", "(", "ksize", ",", "ksize", ")", ",", "sigmaSpace", ",", "maxSigmaColor", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.adaptive_bilateral_filter_tf": [[207, 211], ["tensorflow.py_func", "squeeze.adaptive_bilateral_filter_py"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.adaptive_bilateral_filter_py"], ["", "def", "adaptive_bilateral_filter_tf", "(", "imgs", ",", "ksize", ",", "sigmaSpace", ",", "maxSigmaColor", "=", "20.0", ")", ":", "\n", "    ", "my_func", "=", "lambda", "x", ":", "adaptive_bilateral_filter_py", "(", "x", ",", "ksize", ",", "sigmaSpace", ",", "maxSigmaColor", ")", "\n", "y", "=", "tf", ".", "py_func", "(", "my_func", ",", "[", "imgs", "]", ",", "tf", ".", "float32", ",", "stateful", "=", "False", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.isfloat": [[234, 240], ["float"], "function", ["None"], ["def", "isfloat", "(", "value", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "float", "(", "value", ")", "\n", "return", "True", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.parse_params": [[241, 255], ["params_str.split", "float.strip", "float.isdigit", "params.append", "int", "squeeze.isfloat", "float"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.isfloat"], ["", "", "def", "parse_params", "(", "params_str", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "\n", "for", "param", "in", "params_str", ".", "split", "(", "'_'", ")", ":", "\n", "        ", "param", "=", "param", ".", "strip", "(", ")", "\n", "if", "param", ".", "isdigit", "(", ")", ":", "\n", "            ", "param", "=", "int", "(", "param", ")", "\n", "", "elif", "isfloat", "(", "param", ")", ":", "\n", "            ", "param", "=", "float", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "", "params", ".", "append", "(", "param", ")", "\n", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.get_squeezer_by_name": [[256, 287], ["Exception", "name.startswith", "squeeze.parse_params", "len", "globals"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.parse_params"], ["", "def", "get_squeezer_by_name", "(", "name", ",", "func_type", ")", ":", "\n", "    ", "squeezer_list", "=", "[", "'none'", ",", "\n", "'bit_depth_random'", ",", "\n", "'bit_depth'", ",", "\n", "'binary_filter'", ",", "\n", "'binary_random_filter'", ",", "\n", "'adaptive_binarize'", ",", "\n", "'otsu_binarize'", ",", "\n", "'median_filter'", ",", "\n", "'median_random_filter'", ",", "\n", "'median_random_size_filter'", ",", "\n", "'non_local_means_bw'", ",", "\n", "'non_local_means_color'", ",", "\n", "'adaptive_bilateral_filter'", ",", "\n", "'bilateral_filter'", ",", "\n", "'magnet_mnist'", ",", "\n", "'magnet_cifar10'", ",", "\n", "]", "\n", "\n", "for", "squeezer_name", "in", "squeezer_list", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "squeezer_name", ")", ":", "\n", "            ", "func_name", "=", "\"%s_py\"", "%", "squeezer_name", "if", "func_type", "==", "'python'", "else", "\"%s_tf\"", "%", "squeezer_name", "\n", "params_str", "=", "name", "[", "len", "(", "squeezer_name", ")", ":", "]", "\n", "\n", "# Return a list", "\n", "args", "=", "parse_params", "(", "params_str", ")", "\n", "# print (\"params_str: %s, args: %s\" % (params_str, args))", "\n", "\n", "return", "lambda", "x", ":", "globals", "(", ")", "[", "func_name", "]", "(", "*", "(", "[", "x", "]", "+", "args", ")", ")", "\n", "\n", "", "", "raise", "Exception", "(", "'Unknown squeezer name: %s'", "%", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.get_sequential_squeezers_by_name": [[288, 300], ["squeezers_name.split", "squeeze.get_squeezer_by_name", "get_squeezer_by_name.", "get_squeezer_by_name.", "old_func"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.squeeze.get_squeezer_by_name"], ["", "def", "get_sequential_squeezers_by_name", "(", "squeezers_name", ")", ":", "\n", "# example_squeezers_name = \"binary_filter_0.5,median_smoothing_2_2\"", "\n", "    ", "squeeze_func", "=", "None", "\n", "for", "squeezer_name", "in", "squeezers_name", ".", "split", "(", "','", ")", ":", "\n", "        ", "squeezer", "=", "get_squeezer_by_name", "(", "squeezer_name", ",", "'python'", ")", "\n", "\n", "if", "squeeze_func", "==", "None", ":", "\n", "            ", "squeeze_func", "=", "lambda", "x", ":", "squeezer", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "old_func", "=", "squeeze_func", "\n", "squeeze_func", "=", "lambda", "x", ":", "squeezer", "(", "old_func", "(", "x", ")", ")", "\n", "", "", "return", "squeeze_func", "\n", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.get_next_class": [[8, 13], ["numpy.argmax", "numpy.eye"], "function", ["None"], ["def", "get_next_class", "(", "Y_test", ")", ":", "\n", "    ", "num_classes", "=", "Y_test", ".", "shape", "[", "1", "]", "\n", "Y_test_labels", "=", "np", ".", "argmax", "(", "Y_test", ",", "axis", "=", "1", ")", "\n", "Y_test_labels", "=", "(", "Y_test_labels", "+", "1", ")", "%", "num_classes", "\n", "return", "np", ".", "eye", "(", "num_classes", ")", "[", "Y_test_labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.get_least_likely_class": [[14, 18], ["numpy.argmin", "numpy.eye"], "function", ["None"], ["", "def", "get_least_likely_class", "(", "Y_pred", ")", ":", "\n", "    ", "num_classes", "=", "Y_pred", ".", "shape", "[", "1", "]", "\n", "Y_target_labels", "=", "np", ".", "argmin", "(", "Y_pred", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "eye", "(", "num_classes", ")", "[", "Y_target_labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.get_first_n_examples_id_each_class": [[19, 35], ["numpy.argmax", "range", "functools.reduce", "numpy.array", "zip", "numpy.where", "len", "functools.reduce.append", "list"], "function", ["None"], ["", "def", "get_first_n_examples_id_each_class", "(", "Y_test", ",", "n", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Only return the classes with samples.\n    \"\"\"", "\n", "num_classes", "=", "Y_test", ".", "shape", "[", "1", "]", "\n", "Y_test_labels", "=", "np", ".", "argmax", "(", "Y_test", ",", "axis", "=", "1", ")", "\n", "\n", "selected_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "loc", "=", "np", ".", "where", "(", "Y_test_labels", "==", "i", ")", "[", "0", "]", "\n", "if", "len", "(", "loc", ")", ">", "0", ":", "\n", "            ", "selected_idx", ".", "append", "(", "list", "(", "loc", "[", ":", "n", "]", ")", ")", "\n", "\n", "", "", "selected_idx", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "zip", "(", "*", "selected_idx", ")", ")", "\n", "\n", "return", "np", ".", "array", "(", "selected_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.get_first_example_id_each_class": [[36, 38], ["datasets_utils.get_first_n_examples_id_each_class"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.get_first_n_examples_id_each_class"], ["", "def", "get_first_example_id_each_class", "(", "Y_test", ")", ":", "\n", "    ", "return", "get_first_n_examples_id_each_class", "(", "Y_test", ",", "n", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.get_correct_prediction_idx": [[39, 50], ["numpy.argmax", "numpy.argmax", "numpy.where"], "function", ["None"], ["", "def", "get_correct_prediction_idx", "(", "Y_pred", ",", "Y_label", ")", ":", "\n", "    ", "\"\"\"\n    Get the index of the correct predicted samples.\n    :param Y_pred: softmax output, probability matrix.\n    :param Y_label: groundtruth classes in shape (#samples, #classes)\n    :return: the index of samples being corrected predicted.\n    \"\"\"", "\n", "pred_classes", "=", "np", ".", "argmax", "(", "Y_pred", ",", "axis", "=", "1", ")", "\n", "labels_classes", "=", "np", ".", "argmax", "(", "Y_label", ",", "axis", "=", "1", ")", "\n", "\n", "return", "np", ".", "where", "(", "pred_classes", "==", "labels_classes", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.calculate_mean_confidence": [[52, 66], ["numpy.multiply", "numpy.max", "numpy.mean", "len", "len"], "function", ["None"], ["", "def", "calculate_mean_confidence", "(", "Y_pred", ",", "Y_target", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the mean confidence on target classes.\n    :param Y_pred: softmax output\n    :param Y_target: target classes in shape (#samples, #classes)\n    :return: the mean confidence.\n    \"\"\"", "\n", "assert", "len", "(", "Y_pred", ")", "==", "len", "(", "Y_target", ")", "\n", "confidence", "=", "np", ".", "multiply", "(", "Y_pred", ",", "Y_target", ")", "\n", "confidence", "=", "np", ".", "max", "(", "confidence", ",", "axis", "=", "1", ")", "\n", "\n", "mean_confidence", "=", "np", ".", "mean", "(", "confidence", ")", "\n", "\n", "return", "mean_confidence", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.get_match_pred_vec": [[67, 72], ["numpy.argmax", "numpy.argmax", "len", "len"], "function", ["None"], ["", "def", "get_match_pred_vec", "(", "Y_pred", ",", "Y_label", ")", ":", "\n", "    ", "assert", "len", "(", "Y_pred", ")", "==", "len", "(", "Y_label", ")", "\n", "Y_pred_class", "=", "np", ".", "argmax", "(", "Y_pred", ",", "axis", "=", "1", ")", "\n", "Y_label_class", "=", "np", ".", "argmax", "(", "Y_label", ",", "axis", "=", "1", ")", "\n", "return", "Y_pred_class", "==", "Y_label_class", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.calculate_accuracy": [[74, 80], ["datasets_utils.get_match_pred_vec", "numpy.sum", "float", "len"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.get_match_pred_vec"], ["", "def", "calculate_accuracy", "(", "Y_pred", ",", "Y_label", ")", ":", "\n", "    ", "match_pred_vec", "=", "get_match_pred_vec", "(", "Y_pred", ",", "Y_label", ")", "\n", "\n", "accuracy", "=", "np", ".", "sum", "(", "match_pred_vec", ")", "/", "float", "(", "len", "(", "Y_label", ")", ")", "\n", "# pdb.set_trace()", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.calculate_mean_distance": [[82, 96], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.split", "numpy.sum", "functools.reduce", "numpy.mean", "numpy.max", "numpy.sum", "numpy.sum", "range", "numpy.abs", "range", "range", "len", "len", "len"], "function", ["None"], ["", "def", "calculate_mean_distance", "(", "X1", ",", "X2", ")", ":", "\n", "    ", "img_size", "=", "X1", ".", "shape", "[", "1", "]", "*", "X1", ".", "shape", "[", "2", "]", "\n", "nb_channels", "=", "X1", ".", "shape", "[", "3", "]", "\n", "\n", "mean_l2_dist", "=", "np", ".", "mean", "(", "[", "np", ".", "sum", "(", "(", "X1", "[", "i", "]", "-", "X2", "[", "i", "]", ")", "**", "2", ")", "**", ".5", "for", "i", "in", "range", "(", "len", "(", "X1", ")", ")", "]", ")", "\n", "mean_li_dist", "=", "np", ".", "mean", "(", "[", "np", ".", "max", "(", "np", ".", "abs", "(", "X1", "[", "i", "]", "-", "X2", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "X1", ")", ")", "]", ")", "\n", "mean_l0_dist_value", "=", "np", ".", "mean", "(", "[", "np", ".", "sum", "(", "X1", "[", "i", "]", "-", "X2", "[", "i", "]", "!=", "0", ")", "for", "i", "in", "range", "(", "len", "(", "X1", ")", ")", "]", ")", "\n", "mean_l0_dist_value", "=", "mean_l0_dist_value", "/", "(", "img_size", "*", "nb_channels", ")", "\n", "\n", "diff_channel_list", "=", "np", ".", "split", "(", "X1", "-", "X2", "!=", "0", ",", "nb_channels", ",", "axis", "=", "3", ")", "\n", "l0_channel_dependent_list", "=", "np", ".", "sum", "(", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "|", "y", ",", "diff_channel_list", ")", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "mean_l0_dist_pixel", "=", "np", ".", "mean", "(", "l0_channel_dependent_list", ")", "/", "img_size", "\n", "\n", "return", "mean_l2_dist", ",", "mean_li_dist", ",", "mean_l0_dist_value", ",", "mean_l0_dist_pixel", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.evaluate_adversarial_examples": [[98, 126], ["datasets_utils.calculate_accuracy", "datasets_utils.get_match_pred_vec", "datasets_utils.calculate_mean_confidence", "datasets_utils.calculate_mean_distance", "print", "print", "print", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.calculate_accuracy", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.get_match_pred_vec", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.calculate_mean_confidence", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.calculate_mean_distance", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["", "def", "evaluate_adversarial_examples", "(", "X_test", ",", "Y_test", ",", "X_test_adv", ",", "Y_test_target", ",", "targeted", ",", "Y_test_adv_pred", ")", ":", "\n", "    ", "success_rate", "=", "calculate_accuracy", "(", "Y_test_adv_pred", ",", "Y_test_target", ")", "\n", "success_idx", "=", "get_match_pred_vec", "(", "Y_test_adv_pred", ",", "Y_test_target", ")", "\n", "\n", "if", "targeted", "is", "False", ":", "\n", "        ", "success_rate", "=", "1", "-", "success_rate", "\n", "success_idx", "=", "np", ".", "logical_not", "(", "success_idx", ")", "\n", "\n", "# Calculate the mean confidence of the successful adversarial examples.", "\n", "", "mean_conf", "=", "calculate_mean_confidence", "(", "Y_test_adv_pred", "[", "success_idx", "]", ",", "Y_test_target", "[", "success_idx", "]", ")", "\n", "if", "targeted", "is", "False", ":", "\n", "        ", "mean_conf", "=", "1", "-", "mean_conf", "\n", "\n", "", "mean_l2_dist", ",", "mean_li_dist", ",", "mean_l0_dist_value", ",", "mean_l0_dist_pixel", "=", "calculate_mean_distance", "(", "X_test", "[", "success_idx", "]", ",", "X_test_adv", "[", "success_idx", "]", ")", "\n", "# print (\"\\n---Attack: %s\" % attack_string)", "\n", "print", "(", "\"Success rate: %.2f%%, Mean confidence of SAEs: %.2f%%\"", "%", "(", "success_rate", "*", "100", ",", "mean_conf", "*", "100", ")", ")", "\n", "print", "(", "\"### Statistics of the SAEs:\"", ")", "\n", "print", "(", "\"L2 dist: %.4f, Li dist: %.4f, L0 dist_value: %.1f%%, L0 dist_pixel: %.1f%%\"", "%", "(", "mean_l2_dist", ",", "mean_li_dist", ",", "mean_l0_dist_value", "*", "100", ",", "mean_l0_dist_pixel", "*", "100", ")", ")", "\n", "\n", "rec", "=", "{", "}", "\n", "rec", "[", "'success_rate'", "]", "=", "success_rate", "\n", "rec", "[", "'mean_confidence'", "]", "=", "mean_conf", "\n", "rec", "[", "'mean_l2_dist'", "]", "=", "mean_l2_dist", "\n", "rec", "[", "'mean_li_dist'", "]", "=", "mean_li_dist", "\n", "rec", "[", "'mean_l0_dist_value'", "]", "=", "mean_l0_dist_value", "\n", "rec", "[", "'mean_l0_dist_pixel'", "]", "=", "mean_l0_dist_pixel", "\n", "\n", "return", "rec", "\n", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.__init__": [[15, 17], ["model.predict"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "rc_name", ")", ":", "\n", "        ", "self", ".", "model_predict", "=", "lambda", "x", ":", "model", ".", "predict", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict": [[18, 20], ["base.RobustClassifierBase.model_predict"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "model_predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.get_robust_classifier_by_name": [[24, 34], ["rc_name.startswith", "rc_name.startswith", "base.RobustClassifierBase", "rc_name.startswith", "feature_squeezing.FeatureSqueezingRC", "rc_name.startswith", "MagNetRC", "Exception"], "function", ["None"], ["def", "get_robust_classifier_by_name", "(", "model", ",", "rc_name", ")", ":", "\n", "    ", "if", "rc_name", ".", "startswith", "(", "'Base'", ")", "or", "rc_name", ".", "startswith", "(", "'none'", ")", ":", "\n", "        ", "rc", "=", "RobustClassifierBase", "(", "model", ",", "rc_name", ")", "\n", "", "elif", "rc_name", ".", "startswith", "(", "\"FeatureSqueezing\"", ")", ":", "\n", "        ", "rc", "=", "FeatureSqueezingRC", "(", "model", ",", "rc_name", ")", "\n", "", "elif", "rc_name", ".", "startswith", "(", "\"MagNet\"", ")", ":", "\n", "        ", "rc", "=", "MagNetRC", "(", "model", ",", "rc_name", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown robust classifier [%s]\"", "%", "rc", ")", "\n", "", "return", "rc", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.evaluate_robustness": [[35, 85], ["os.path.join", "print", "os.path.isdir", "os.makedirs", "hashlib.sha1().hexdigest", "ele.strip", "base.get_robust_classifier_by_name", "datasets.calculate_accuracy", "os.path.join", "enumerate", "accuracy_rows.append", "open", "csv.DictWriter", "csv.DictWriter.writeheader", "params_str.split", "get_robust_classifier_by_name.predict", "hasattr", "datasets.calculate_accuracy", "len", "datasets.visualization.show_imgs_in_rows", "csv.DictWriter.writerow", "hashlib.sha1", "ele.strip", "len", "get_robust_classifier_by_name.visualize_and_predict", "map", "get_robust_classifier_by_name.predict", "params_str.encode", "len"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.get_robust_classifier_by_name", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.calculate_accuracy", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.datasets.datasets_utils.calculate_accuracy", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict"], ["", "def", "evaluate_robustness", "(", "params_str", ",", "model", ",", "Y", ",", "X", ",", "Y_adv", ",", "attack_string_list", ",", "X_adv_list", ",", "fname_prefix", ",", "selected_idx_vis", ",", "result_folder", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "result_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_folder", ")", "\n", "", "robustness_string_hash", "=", "hashlib", ".", "sha1", "(", "params_str", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "[", ":", "5", "]", "\n", "csv_fname", "=", "\"%s_%s.csv\"", "%", "(", "fname_prefix", ",", "robustness_string_hash", ")", "\n", "csv_fpath", "=", "os", ".", "path", ".", "join", "(", "result_folder", ",", "csv_fname", ")", "\n", "print", "(", "\"Saving robustness test results at %s\"", "%", "csv_fpath", ")", "\n", "\n", "RC_names", "=", "[", "ele", ".", "strip", "(", ")", "for", "ele", "in", "params_str", ".", "split", "(", "';'", ")", "if", "ele", ".", "strip", "(", ")", "!=", "''", "]", "\n", "\n", "accuracy_rows", "=", "[", "]", "\n", "fieldnames", "=", "[", "'RobustClassifier'", ",", "'legitimate_%d'", "%", "len", "(", "X", ")", "]", "+", "attack_string_list", "\n", "\n", "selected_idx_vis", "=", "selected_idx_vis", "[", ":", "10", "]", "\n", "legitimate_examples", "=", "X", "[", "selected_idx_vis", "]", "\n", "\n", "for", "RC_name", "in", "RC_names", ":", "\n", "        ", "rc", "=", "get_robust_classifier_by_name", "(", "model", ",", "RC_name", ")", "\n", "accuracy_rec", "=", "{", "}", "\n", "accuracy_rec", "[", "'RobustClassifier'", "]", "=", "RC_name", "\n", "\n", "accuracy", "=", "calculate_accuracy", "(", "rc", ".", "predict", "(", "X", ")", ",", "Y", ")", "\n", "accuracy_rec", "[", "'legitimate_%d'", "%", "len", "(", "X", ")", "]", "=", "accuracy", "\n", "\n", "img_fpath", "=", "os", ".", "path", ".", "join", "(", "result_folder", ",", "'%s_%s.png'", "%", "(", "fname_prefix", ",", "RC_name", ")", ")", "\n", "rows", "=", "[", "legitimate_examples", "]", "\n", "\n", "for", "i", ",", "attack_name", "in", "enumerate", "(", "attack_string_list", ")", ":", "\n", "            ", "X_adv", "=", "X_adv_list", "[", "i", "]", "\n", "if", "hasattr", "(", "rc", ",", "'visualize_and_predict'", ")", ":", "\n", "                ", "X_adv_filtered", ",", "Y_pred_adv", "=", "rc", ".", "visualize_and_predict", "(", "X_adv", ")", "\n", "rows", "+=", "map", "(", "lambda", "x", ":", "x", "[", "selected_idx_vis", "]", ",", "[", "X_adv", ",", "X_adv_filtered", "]", ")", "\n", "", "else", ":", "\n", "                ", "Y_pred_adv", "=", "rc", ".", "predict", "(", "X_adv", ")", "\n", "", "accuracy", "=", "calculate_accuracy", "(", "Y_pred_adv", ",", "Y_adv", ")", "\n", "accuracy_rec", "[", "attack_name", "]", "=", "accuracy", "\n", "\n", "", "accuracy_rows", ".", "append", "(", "accuracy_rec", ")", "\n", "\n", "# Visualize the filtered images.", "\n", "if", "len", "(", "rows", ")", ">", "1", ":", "\n", "            ", "show_imgs_in_rows", "(", "rows", ",", "img_fpath", ")", "\n", "\n", "# Output in a CSV file.", "\n", "", "", "import", "csv", "\n", "with", "open", "(", "csv_fpath", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "accuracy_rows", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.__init__": [[59, 69], ["os.path.join", "os.path.isdir", "os.makedirs"], "methods", ["None"], ["img_fpath", "=", "os", ".", "path", ".", "join", "(", "result_folder", ",", "'%s_%s.png'", "%", "(", "fname_prefix", ",", "RC_name", ")", ")", "\n", "rows", "=", "[", "legitimate_examples", "]", "\n", "\n", "for", "i", ",", "attack_name", "in", "enumerate", "(", "attack_string_list", ")", ":", "\n", "            ", "X_adv", "=", "X_adv_list", "[", "i", "]", "\n", "if", "hasattr", "(", "rc", ",", "'visualize_and_predict'", ")", ":", "\n", "                ", "X_adv_filtered", ",", "Y_pred_adv", "=", "rc", ".", "visualize_and_predict", "(", "X_adv", ")", "\n", "rows", "+=", "map", "(", "lambda", "x", ":", "x", "[", "selected_idx_vis", "]", ",", "[", "X_adv", ",", "X_adv_filtered", "]", ")", "\n", "", "else", ":", "\n", "                ", "Y_pred_adv", "=", "rc", ".", "predict", "(", "X_adv", ")", "\n", "", "accuracy", "=", "calculate_accuracy", "(", "Y_pred_adv", ",", "Y_adv", ")", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_attack_id": [[70, 72], ["None"], "methods", ["None"], ["accuracy_rec", "[", "attack_name", "]", "=", "accuracy", "\n", "\n", "", "accuracy_rows", ".", "append", "(", "accuracy_rec", ")", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.build_detection_dataset": [[73, 151], ["enumerate", "numpy.concatenate", "numpy.concatenate", "os.path.join", "os.path.isfile", "random.seed", "len", "random.sample", "list", "enumerate", "enumerate", "tinydb.TinyDB", "tinydb.Query", "range", "tinydb.TinyDB", "tinydb.Query", "print", "print", "range", "int", "list", "len", "len", "len", "len", "len", "len", "len", "base.DetectionEvaluator.db.insert", "len", "range", "numpy.argmax", "numpy.argmax", "list", "len", "numpy.argmax", "numpy.argmax", "list", "list", "numpy.argmax", "numpy.argmax", "len", "len", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["\n", "# Visualize the filtered images.", "\n", "if", "len", "(", "rows", ")", ">", "1", ":", "\n", "            ", "show_imgs_in_rows", "(", "rows", ",", "img_fpath", ")", "\n", "\n", "# Output in a CSV file.", "\n", "", "", "import", "csv", "\n", "with", "open", "(", "csv_fpath", ",", "'w'", ")", "as", "csvfile", ":", "\n", "        ", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "for", "row", "in", "accuracy_rows", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_data_from_db_records": [[152, 159], ["numpy.array", "len", "numpy.array"], "methods", ["None"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_training_testing_data": [[160, 171], ["db.search", "base.DetectionEvaluator.get_data_from_db_records", "db.search", "base.DetectionEvaluator.get_data_from_db_records"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_data_from_db_records", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_data_from_db_records"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_adversarial_data": [[172, 205], ["functools.reduce", "db.search", "base.DetectionEvaluator.get_data_from_db_records", "conditions_and.append", "conditions_and.append", "base.DetectionEvaluator.get_attack_id", "conditions_and.append", "conditions_and.append", "conditions_and.append", "db.search"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_data_from_db_records", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_attack_id"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_sae_testing_data": [[206, 208], ["base.DetectionEvaluator.get_adversarial_data"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_adversarial_data"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_sae_data": [[209, 211], ["base.DetectionEvaluator.get_adversarial_data"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_adversarial_data"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_fae_testing_data": [[212, 214], ["base.DetectionEvaluator.get_adversarial_data"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_adversarial_data"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_fae_data": [[215, 217], ["base.DetectionEvaluator.get_adversarial_data"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_adversarial_data"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_all_non_fae_testing_data": [[218, 220], ["base.DetectionEvaluator.get_adversarial_data"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_adversarial_data"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_all_non_fae_data": [[221, 223], ["base.DetectionEvaluator.get_adversarial_data"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_adversarial_data"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_detector_by_name": [[224, 237], ["detector_name.startswith", "feature_squeezing.FeatureSqueezingDetector", "detector_name.startswith", "MagNetDetectorMNIST", "MagNetDetectorCIFAR"], "methods", ["None"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.evaluate_detections": [[238, 323], ["base.DetectionEvaluator.get_training_testing_data", "utils.output.write_to_csv", "ele.strip", "base.DetectionEvaluator.get_detector_by_name", "base.DetectionEvaluator.train", "base.DetectionEvaluator.test", "base.evalulate_detection_test", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "print", "print", "hasattr", "to_csv.append", "print", "base.DetectionEvaluator.test", "base.evalulate_detection_test", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "print", "params_str.split", "print", "print", "float", "base.DetectionEvaluator.get_all_non_fae_testing_data", "base.DetectionEvaluator.get_all_non_fae_data", "base.DetectionEvaluator.get_fae_testing_data", "base.DetectionEvaluator.get_fae_data", "base.DetectionEvaluator.test", "base.evalulate_detection_test", "print", "ele.strip", "base.DetectionEvaluator.get_sae_testing_data", "base.DetectionEvaluator.get_sae_data", "base.DetectionEvaluator.test", "base.evalulate_detection_test", "print", "len", "len", "detector_name.split"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_training_testing_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.utils.output.write_to_csv", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_detector_by_name", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_all_non_fae_testing_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_all_non_fae_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_fae_testing_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_fae_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_sae_testing_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.DetectionEvaluator.get_sae_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.None.detect_magnet.test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], []], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.get_tpr_fpr": [[23, 34], ["numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and"], "function", ["None"], ["\n", "def", "get_robust_classifier_by_name", "(", "model", ",", "rc_name", ")", ":", "\n", "    ", "if", "rc_name", ".", "startswith", "(", "'Base'", ")", "or", "rc_name", ".", "startswith", "(", "'none'", ")", ":", "\n", "        ", "rc", "=", "RobustClassifierBase", "(", "model", ",", "rc_name", ")", "\n", "", "elif", "rc_name", ".", "startswith", "(", "\"FeatureSqueezing\"", ")", ":", "\n", "        ", "rc", "=", "FeatureSqueezingRC", "(", "model", ",", "rc_name", ")", "\n", "", "elif", "rc_name", ".", "startswith", "(", "\"MagNet\"", ")", ":", "\n", "        ", "rc", "=", "MagNetRC", "(", "model", ",", "rc_name", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown robust classifier [%s]\"", "%", "rc", ")", "\n", "", "return", "rc", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.detections.base.evalulate_detection_test": [[36, 40], ["sklearn.metrics.accuracy_score", "base.get_tpr_fpr"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.get_tpr_fpr"], ["    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "result_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_folder", ")", "\n", "", "robustness_string_hash", "=", "hashlib", ".", "sha1", "(", "params_str", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "[", ":", "5", "]", "\n", "csv_fname", "=", "\"%s_%s.csv\"", "%", "(", "fname_prefix", ",", "robustness_string_hash", ")", "\n", "csv_fpath", "=", "os", ".", "path", ".", "join", "(", "result_folder", ",", "csv_fname", ")", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_mnist_b.sfad_b.__init__": [[11, 97], ["load_mnist_data", "toCat_onehot", "sfad.sfad_mnist_a.sfad_a", "keras.optimizers.SGD", "sfad_mnist_b.sfad_b.model_1.compile", "sfad_mnist_b.sfad_b.model_2.compile", "sfad_mnist_b.sfad_b.model_3.compile", "sfad_mnist_b.sfad_b.model_1.predict", "sfad_mnist_b.sfad_b.model_2.predict", "sfad_mnist_b.sfad_b.model_3.predict", "np.concatenate", "sfad_mnist_b.sfad_b.model_1.predict", "sfad_mnist_b.sfad_b.model_2.predict", "sfad_mnist_b.sfad_b.model_3.predict", "np.concatenate", "sfad_mnist_b.sfad_b.build_model", "normalize_mean", "normalize_linear", "keras.backend.cast", "keras.backend.sum", "keras.backend.cast", "keras.backend.cast", "keras.backend.mean", "sfad_mnist_b.sfad_b.train", "keras.backend.categorical_crossentropy", "keras.backend.greater", "keras.backend.floatx", "keras.backend.sum", "keras.backend.floatx", "keras.backend.greater", "keras.backend.floatx", "sfad_mnist_b.sfad_b.model.load_weights", "Exception", "keras.backend.cast", "keras.backend.repeat_elements", "keras.backend.maximum", "keras.backend.equal", "keras.backend.floatx", "keras.backend.argmax", "keras.backend.argmax", "keras.backend.mean"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_mnist_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "no_defense_h5", "=", "\"mnist_model_1.h5\"", ",", "filename_a", "=", "\"multi_mnist_v7.h5\"", ",", "filename_b", "=", "\"multi_mnist_model_v7b.h5\"", ",", "coverage", "=", "0.95", ",", "coverage_th", "=", "0.5", ",", "alpha", "=", "0.25", ",", "normalize_mean", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "no_defense_h5", "=", "no_defense_h5", "\n", "self", ".", "filename_b", "=", "filename_b", "\n", "self", ".", "filename_a", "=", "filename_a", "\n", "self", ".", "coverage", "=", "coverage", "\n", "self", ".", "coverage_th", "=", "coverage_th", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "normalize_mean", "=", "False", "\n", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "lamda", "=", "32", "\n", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_mnist_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", "+", "1", ")", "\n", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "### to get prob for each model", "\n", "self", ".", "model_class", "=", "model_mnist_adv", "(", "mode", "=", "'load'", ",", "no_defense_h5", "=", "self", ".", "no_defense_h5", ",", "filename", "=", "self", ".", "filename_a", ",", "\n", "coverage", "=", "coverage", ",", "alpha", "=", "alpha", ",", "normalize_mean", "=", "normalize_mean", ")", "\n", "self", ".", "model_1", "=", "self", ".", "model_class", ".", "model_1", "\n", "self", ".", "model_2", "=", "self", ".", "model_class", ".", "model_2", "\n", "self", ".", "model_3", "=", "self", ".", "model_class", ".", "model_3", "\n", "\n", "\n", "#self.model_a = self.model_class.model", "\n", "c", "=", "self", ".", "model_class", ".", "coverage", "\n", "l", "=", "self", ".", "model_class", ".", "lamda", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "\n", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "model_class", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "l", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.5", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.5", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "model_1", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "self", ".", "model_2", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "self", ".", "model_3", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "self", ".", "predections_a_train", "=", "self", ".", "model_1", ".", "predict", "(", "self", ".", "model_class", ".", "l_1_train", ")", "\n", "self", ".", "predections_b_train", "=", "self", ".", "model_2", ".", "predict", "(", "self", ".", "model_class", ".", "l_2_train", ")", "\n", "self", ".", "predections_c_train", "=", "self", ".", "model_3", ".", "predict", "(", "self", ".", "model_class", ".", "l_3_train", ")", "\n", "self", ".", "x_train", "=", "np", ".", "concatenate", "(", "(", "self", ".", "predections_a_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_b_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_c_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "self", ".", "predections_a_test", "=", "self", ".", "model_1", ".", "predict", "(", "self", ".", "model_class", ".", "l_1_test", ")", "\n", "self", ".", "predections_b_test", "=", "self", ".", "model_2", ".", "predict", "(", "self", ".", "model_class", ".", "l_2_test", ")", "\n", "self", ".", "predections_c_test", "=", "self", ".", "model_3", ".", "predict", "(", "self", ".", "model_class", ".", "l_3_test", ")", "\n", "self", ".", "x_test", "=", "np", ".", "concatenate", "(", "(", "self", ".", "predections_a_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_b_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_c_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename_b", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_mnist_b.sfad_b.build_model": [[99, 128], ["Input", "Model", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "Activation", "BatchNormalization", "Lambda", "Dense", "Activation", "Concatenate", "Dense", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.1", "\n", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ")", "\n", "\n", "task0", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "input", ")", "\n", "task0", "=", "BatchNormalization", "(", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ")", "(", "task0", ")", "\n", "# task0 = Dense(self.num_classes, use_bias=True, activation='softmax')(task0)", "\n", "# task0 = RBFLayer(128, betas=2)(task0)", "\n", "# model_output = Dense(self.num_classes, use_bias=False, activation='softmax')(task0)", "\n", "model_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_before_softmax'", ")", "(", "task0", ")", "\n", "model_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_after_softmax'", ")", "(", "model_output", ")", "\n", "\n", "# selection head (g)", "\n", "g", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "task0", ")", "\n", "g", "=", "Activation", "(", "'relu'", ")", "(", "g", ")", "\n", "g", "=", "BatchNormalization", "(", ")", "(", "g", ")", "\n", "g", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g", ")", "\n", "g", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ",", "name", "=", "'g_before_sigmoid'", ")", "(", "g", ")", "\n", "g", "=", "Activation", "(", "'sigmoid'", ",", "name", "=", "'g_after_sigmoid'", ")", "(", "g", ")", "\n", "selective_output", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"selective_output\"", ")", "(", "[", "model_output", ",", "g", "]", ")", "\n", "\n", "# auxiliary head (h)", "\n", "auxiliary_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "activation", "=", "'softmax'", ",", "name", "=", "'aux'", ")", "(", "task0", ")", "\n", "#auxiliary_output = Activation('softmax', name='aux_after_softmax')(auxiliary_output)", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "[", "selective_output", ",", "auxiliary_output", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_mnist_b.sfad_b.train": [[129, 172], ["keras.callbacks.LearningRateScheduler", "keras.optimizers.SGD", "model.compile", "model.fit", "model.save_weights", "keras.backend.cast", "keras.backend.sum", "keras.backend.cast", "keras.backend.cast", "keras.backend.mean", "open", "pickle.dump", "keras.backend.categorical_crossentropy", "keras.backend.greater", "keras.backend.floatx", "keras.backend.sum", "keras.backend.floatx", "keras.backend.greater", "keras.backend.floatx", "keras.backend.cast", "keras.backend.repeat_elements", "keras.backend.maximum", "keras.backend.equal", "keras.backend.floatx", "keras.backend.argmax", "keras.backend.argmax", "keras.backend.mean"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "        ", "c", "=", "self", ".", "coverage", "\n", "lamda", "=", "self", ".", "lamda", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "lamda", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "batch_size", "=", "200", "\n", "maxepoches", "=", "30", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "10", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ",", "loss_weights", "=", "[", "0.5", ",", "0.5", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit", "(", "self", ".", "x_train", ",", "[", "self", ".", "y_train", ",", "self", ".", "y_train", "[", ":", ",", ":", "-", "1", "]", "]", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "[", "self", ".", "y_test", ",", "self", ".", "y_test", "[", ":", ",", ":", "-", "1", "]", "]", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history.pkl\"", ".", "format", "(", "self", ".", "filename_b", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model", ".", "save_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename_b", ")", ")", "\n", "\n", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_svhn_a.sfad_a.__init__": [[8, 102], ["load_svhn_data", "toCat_onehot", "no_defense", "keras.optimizers.SGD", "sfad_svhn_a.sfad_a.no_defense_model.compile", "sfad_svhn_a.sfad_a.no_defense_model.summary", "sfad_svhn_a.sfad_a.no_defense_model.evaluate", "print", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "sfad_svhn_a.sfad_a.build_model", "normalize_mean", "normalize_linear", "len", "sfad_svhn_a.sfad_a.l_1_train.reshape", "len", "sfad_svhn_a.sfad_a.l_2_train.reshape", "len", "sfad_svhn_a.sfad_a.l_3_train.reshape", "len", "sfad_svhn_a.sfad_a.l_1_test.reshape", "len", "sfad_svhn_a.sfad_a.l_2_test.reshape", "len", "sfad_svhn_a.sfad_a.l_3_test.reshape", "sfad_svhn_a.sfad_a.train", "sfad_svhn_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_svhn_a.sfad_a.l_1_train.reshape", "sfad_svhn_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_svhn_a.sfad_a.l_2_train.reshape", "sfad_svhn_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_svhn_a.sfad_a.l_3_train.reshape", "sfad_svhn_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_svhn_a.sfad_a.l_1_test.reshape", "sfad_svhn_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_svhn_a.sfad_a.l_2_test.reshape", "sfad_svhn_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_svhn_a.sfad_a.l_3_test.reshape", "sfad_svhn_a.sfad_a.model_1.load_weights", "sfad_svhn_a.sfad_a.model_2.load_weights", "sfad_svhn_a.sfad_a.model_3.load_weights", "Exception", "sfad_svhn_a.sfad_a.no_defense_model.get_layer", "sfad_svhn_a.sfad_a.no_defense_model.get_layer", "sfad_svhn_a.sfad_a.no_defense_model.get_layer", "sfad_svhn_a.sfad_a.no_defense_model.get_layer", "sfad_svhn_a.sfad_a.no_defense_model.get_layer", "sfad_svhn_a.sfad_a.no_defense_model.get_layer"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_svhn_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "no_defense_h5", "=", "\"svhn_model_1.h5\"", ",", "filename", "=", "\"multi_svhn_model_v7.h5\"", ",", "coverage", "=", "0.95", ",", "coverage_th", "=", "0.5", ",", "alpha", "=", "0.5", ",", "normalize_mean", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "coverage", "=", "coverage", "\n", "self", ".", "coverage_th", "=", "coverage_th", "\n", "self", ".", "normalize_mean", "=", "normalize_mean", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "lamda", "=", "32", "\n", "\n", "## clean data", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_svhn_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", "+", "1", ")", "\n", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "from", "baselineCNN", ".", "cnn", ".", "cnn_svhn", "import", "SVHNCNN", "as", "no_defense", "\n", "model_nodefense_class", "=", "no_defense", "(", "mode", "=", "\"load\"", ",", "filename", "=", "no_defense_h5", ")", "\n", "self", ".", "no_defense_model", "=", "model_nodefense_class", ".", "model", "\n", "learning_rate", "=", "0.1", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "no_defense_model", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "self", ".", "no_defense_model", ".", "summary", "(", ")", "\n", "loss_test", ",", "class_head_acc", "=", "self", ".", "no_defense_model", ".", "evaluate", "(", "model_nodefense_class", ".", "x_test", ",", "model_nodefense_class", ".", "y_test", ")", "\n", "print", "(", "'Loss::{:4.4f} and Accuracy::{:4.2f}%  on test data'", ".", "format", "(", "loss_test", ",", "class_head_acc", "*", "100", ")", ")", "\n", "\n", "##layers data train", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_16'", ")", ".", "output", ")", "\n", "self", ".", "l_1_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_1_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_1_train", "=", "self", ".", "l_1_train", ".", "reshape", "(", "self", ".", "l_1_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_1_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_1_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_1_train", "=", "self", ".", "l_1_train", ".", "reshape", "(", "self", ".", "l_1_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_1_input_shape", "=", "self", ".", "l_1_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_14'", ")", ".", "output", ")", "\n", "self", ".", "l_2_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_2_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_2_train", "=", "self", ".", "l_2_train", ".", "reshape", "(", "self", ".", "l_2_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_2_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_2_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_2_train", "=", "self", ".", "l_2_train", ".", "reshape", "(", "self", ".", "l_2_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_2_input_shape", "=", "self", ".", "l_2_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_10'", ")", ".", "output", ")", "\n", "self", ".", "l_3_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_3_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_3_train", "=", "self", ".", "l_3_train", ".", "reshape", "(", "self", ".", "l_3_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_3_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_3_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_3_train", "=", "self", ".", "l_3_train", ".", "reshape", "(", "self", ".", "l_3_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_3_input_shape", "=", "self", ".", "l_3_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "##layers data test", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_16'", ")", ".", "output", ")", "\n", "self", ".", "l_1_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_1_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_1_test", "=", "self", ".", "l_1_test", ".", "reshape", "(", "self", ".", "l_1_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_1_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_1_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_1_test", "=", "self", ".", "l_1_test", ".", "reshape", "(", "self", ".", "l_1_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_14'", ")", ".", "output", ")", "\n", "self", ".", "l_2_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_2_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_2_test", "=", "self", ".", "l_2_test", ".", "reshape", "(", "self", ".", "l_2_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_2_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_2_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_2_test", "=", "self", ".", "l_2_test", ".", "reshape", "(", "self", ".", "l_2_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_10'", ")", ".", "output", ")", "\n", "self", ".", "l_3_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_3_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_3_test", "=", "self", ".", "l_3_test", ".", "reshape", "(", "self", ".", "l_3_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_3_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_3_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_3_test", "=", "self", ".", "l_3_test", ".", "reshape", "(", "self", ".", "l_3_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "## build the model", "\n", "", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", "=", "self", ".", "train", "(", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model_1", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_1.h5'", ")", ")", "\n", "self", ".", "model_2", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_2.h5'", ")", ")", "\n", "self", ".", "model_3", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_3.h5'", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_svhn_a.sfad_a.build_model": [[104, 428], ["Input", "Input", "Input", "Model", "Model", "Model", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.1", "\n", "\n", "#inputs", "\n", "inputa", "=", "Input", "(", "shape", "=", "self", ".", "l_1_input_shape", ")", "\n", "inputb", "=", "Input", "(", "shape", "=", "self", ".", "l_2_input_shape", ")", "\n", "inputc", "=", "Input", "(", "shape", "=", "self", ".", "l_3_input_shape", ")", "\n", "\n", "###########################   for model_1", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputa", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "#1b.decode", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "#1c.merge", "\n", "taska1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputa", ",", "taska1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taska2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taska1", ")", "\n", "taska2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taska2", ")", "\n", "taska2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taska2", ")", "\n", "taska2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taska2", ")", "\n", "taska2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taska1", ",", "taska2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taska = Concatenate(axis=3)([taska1, taska2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputna", "=", "GaussianNoise", "(", "0.05", ")", "(", "inputa", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputna", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "#1b.decode", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "#1c.merge", "\n", "taskna1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputna", ",", "taskna1", "]", ")", "\n", "taskna1", "=", "GaussianNoise", "(", "0.05", ")", "(", "taskna1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskna2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskna1", ")", "\n", "taskna2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskna1", ",", "taskna2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskna = Concatenate(axis=3)([taskna1, taskna2])", "\n", "\n", "#Merge clean and noise", "\n", "taska", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taska2", ",", "taskna2", "]", ")", "\n", "# taska = GaussianNoise(0.05)(taska)", "\n", "\n", "#bottelneck block", "\n", "taska", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "taska", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "taska", "=", "Conv2D", "(", "256", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "# taska = GaussianDropout(0.2)(taska)", "\n", "\n", "taska", "=", "Flatten", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Dense", "(", "512", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "# taska = GaussianDropout(0.2)(taska)", "\n", "# taska = Dense(self.num_classes, activation='softmax')(taska)", "\n", "# taska = RBFLayer(512, betas=2)(taska)", "\n", "# model_1_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taska)", "\n", "model_1_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_1_before_softmax'", ")", "(", "taska", ")", "\n", "model_1_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_1_after_softmax'", ")", "(", "model_1_output", ")", "\n", "\n", "# selection (g1)", "\n", "g1", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "g1", "=", "BatchNormalization", "(", ")", "(", "g1", ")", "\n", "g1", "=", "Activation", "(", "'relu'", ")", "(", "g1", ")", "\n", "g1", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g1", ")", "\n", "g1", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g1", ")", "\n", "model_1_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_1_selective\"", ")", "(", "[", "model_1_output", ",", "g1", "]", ")", "\n", "model_1_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ",", "name", "=", "'aux_1'", ")", "(", "taska", ")", "\n", "model_1", "=", "Model", "(", "inputs", "=", "inputa", ",", "outputs", "=", "[", "model_1_selective", ",", "model_1_auxiliary", "]", ")", "\n", "\n", "###########################   for model_2", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputb", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "#1b.decode", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "#1c.merge", "\n", "taskb1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputb", ",", "taskb1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskb1", ")", "\n", "taskb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskb1", ",", "taskb2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskb = Concatenate(axis=3)([taskb1, taskb2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputnb", "=", "GaussianNoise", "(", "0.05", ")", "(", "inputb", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputnb", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "#1b.decode", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "#1c.merge", "\n", "tasknb1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputnb", ",", "tasknb1", "]", ")", "\n", "tasknb1", "=", "GaussianNoise", "(", "0.05", ")", "(", "tasknb1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "tasknb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknb1", ")", "\n", "tasknb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "tasknb1", ",", "tasknb2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# tasknb = Concatenate(axis=3)([tasknb1, tasknb2])", "\n", "\n", "#Merge clean and noise ", "\n", "taskb", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taskb2", ",", "tasknb2", "]", ")", "\n", "# taskb = GaussianNoise(0.05)(taskb)", "\n", "\n", "#bottelneck block", "\n", "taskb", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "taskb", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "taskb", "=", "Conv2D", "(", "256", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "# taskb = GaussianDropout(0.2)(taskb)", "\n", "\n", "taskb", "=", "Flatten", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Dense", "(", "512", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "# taskb = GaussianDropout(0.2)(taskb)", "\n", "# taskb = Dense(self.num_classes, activation='softmax')(taskb)", "\n", "# taskb = RBFLayer(512, betas=2)(taskb)", "\n", "# model_2_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taskb)", "\n", "\n", "model_2_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_2_before_softmax'", ")", "(", "taskb", ")", "\n", "model_2_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_2_after_softmax'", ")", "(", "model_2_output", ")", "\n", "\n", "\n", "# selection (g2)", "\n", "g2", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "g2", "=", "BatchNormalization", "(", ")", "(", "g2", ")", "\n", "g2", "=", "Activation", "(", "'relu'", ")", "(", "g2", ")", "\n", "g2", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g2", ")", "\n", "g2", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g2", ")", "\n", "model_2_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_2_selective\"", ")", "(", "[", "model_2_output", ",", "g2", "]", ")", "\n", "model_2_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ",", "name", "=", "'aux_2'", ")", "(", "taskb", ")", "\n", "model_2", "=", "Model", "(", "inputs", "=", "inputb", ",", "outputs", "=", "[", "model_2_selective", ",", "model_2_auxiliary", "]", ")", "\n", "\n", "###########################   for model_3", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputc", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "#1b.decode", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "#1c.merge", "\n", "taskc1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputc", ",", "taskc1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskc1", ")", "\n", "taskc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskc1", ",", "taskc2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskc = Concatenate(axis=3)([taskc1, taskc2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputnc", "=", "GaussianNoise", "(", "0.05", ")", "(", "inputc", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputnc", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "#1b.decode", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "#1c.merge", "\n", "tasknc1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputnc", ",", "tasknc1", "]", ")", "\n", "tasknc1", "=", "GaussianNoise", "(", "0.05", ")", "(", "tasknc1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "tasknc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknc1", ")", "\n", "tasknc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "tasknc1", ",", "tasknc2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# tasknc = Concatenate(axis=3)([tasknc1, tasknc2])", "\n", "\n", "#Merge clean and noise ", "\n", "taskc", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taskc2", ",", "tasknc2", "]", ")", "\n", "# taskc = GaussianNoise(0.05)(taskc)", "\n", "\n", "#bottelneck block", "\n", "taskc", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "taskc", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "taskc", "=", "Conv2D", "(", "256", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "# taskc = GaussianDropout(0.2)(taskc)", "\n", "\n", "taskc", "=", "Flatten", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Dense", "(", "512", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "# taskc = GaussianDropout(0.2)(taskc)", "\n", "# taskc = Dense(self.num_classes, activation='softmax')(taskc)", "\n", "# taskc = RBFLayer(512, betas=2)(taskc)", "\n", "# model_3_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taskc)", "\n", "model_3_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_3_before_softmax'", ")", "(", "taskc", ")", "\n", "model_3_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_3_after_softmax'", ")", "(", "model_3_output", ")", "\n", "\n", "# selection (g3)", "\n", "g3", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "g3", "=", "BatchNormalization", "(", ")", "(", "g3", ")", "\n", "g3", "=", "Activation", "(", "'relu'", ")", "(", "g3", ")", "\n", "g3", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g3", ")", "\n", "g3", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g3", ")", "\n", "model_3_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_3_selective\"", ")", "(", "[", "model_3_output", ",", "g3", "]", ")", "\n", "model_3_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ",", "name", "=", "'aux_3'", ")", "(", "taskc", ")", "\n", "model_3", "=", "Model", "(", "inputs", "=", "inputc", ",", "outputs", "=", "[", "model_3_selective", ",", "model_3_auxiliary", "]", ")", "\n", "\n", "return", "model_1", ",", "model_2", ",", "model_3", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_svhn_a.sfad_a.train": [[430, 515], ["keras.callbacks.LearningRateScheduler", "keras.optimizers.SGD", "model_1.compile", "model_1.fit", "model_1.save_weights", "model_2.compile", "model_2.fit", "model_2.save_weights", "model_3.compile", "model_3.fit", "model_3.save_weights", "K.cast", "K.sum", "K.cast", "K.cast", "K.mean", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "K.categorical_crossentropy", "K.greater", "K.floatx", "K.sum", "K.floatx", "K.greater", "K.floatx", "K.cast", "K.repeat_elements", "K.maximum", "K.equal", "K.floatx", "K.argmax", "K.argmax", "K.mean"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model_1", ",", "model_2", ",", "model_3", ")", ":", "\n", "        ", "c", "=", "self", ".", "coverage", "\n", "lamda", "=", "self", ".", "lamda", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "lamda", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "batch_size", "=", "200", "\n", "maxepoches", "=", "30", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "500", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "\n", "####################### train model_1", "\n", "model_1", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_1", "=", "self", ".", "l_1_train", "\n", "y_", "=", "[", "self", ".", "y_train", ",", "self", ".", "y_train", "[", ":", ",", ":", "-", "1", "]", "]", "#, [self.y_train, self.y_train[:,:-1]], [self.y_train, self.y_train[:,:-1]]]", "\n", "x_1_val", "=", "self", ".", "l_1_test", "\n", "y_val", "=", "[", "self", ".", "y_test", ",", "self", ".", "y_test", "[", ":", ",", ":", "-", "1", "]", "]", "#, [self.y_test, self.y_test[:, :-1]], [self.y_test, self.y_test[:, :-1]]]", "\n", "historytemp", "=", "model_1", ".", "fit", "(", "x_1", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_1_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_1.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_1", ".", "save_weights", "(", "\"results/sfad/{}_model_1.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "\n", "####################### train model_2", "\n", "model_2", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_2", "=", "self", ".", "l_2_train", "\n", "x_2_val", "=", "self", ".", "l_2_test", "\n", "historytemp", "=", "model_2", ".", "fit", "(", "x_2", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_2_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_2.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_2", ".", "save_weights", "(", "\"results/sfad/{}_model_2.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "####################### train model_3", "\n", "# maxepoches = 500", "\n", "model_3", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_3", "=", "self", ".", "l_3_train", "\n", "x_3_val", "=", "self", ".", "l_3_test", "\n", "historytemp", "=", "model_3", ".", "fit", "(", "x_3", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_3_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_3.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_3", ".", "save_weights", "(", "\"results/sfad/{}_model_3.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "return", "model_1", ",", "model_2", ",", "model_3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_cifar_b.sfad_b.__init__": [[11, 97], ["load_cifar10_data", "toCat_onehot", "sfad.sfad_cifar_a.sfad_a", "keras.optimizers.SGD", "sfad_cifar_b.sfad_b.model_1.compile", "sfad_cifar_b.sfad_b.model_2.compile", "sfad_cifar_b.sfad_b.model_3.compile", "sfad_cifar_b.sfad_b.model_1.predict", "sfad_cifar_b.sfad_b.model_2.predict", "sfad_cifar_b.sfad_b.model_3.predict", "np.concatenate", "sfad_cifar_b.sfad_b.model_1.predict", "sfad_cifar_b.sfad_b.model_2.predict", "sfad_cifar_b.sfad_b.model_3.predict", "np.concatenate", "sfad_cifar_b.sfad_b.build_model", "normalize_mean", "normalize_linear", "keras.backend.cast", "keras.backend.sum", "keras.backend.cast", "keras.backend.cast", "keras.backend.mean", "sfad_cifar_b.sfad_b.train", "keras.backend.categorical_crossentropy", "keras.backend.greater", "keras.backend.floatx", "keras.backend.sum", "keras.backend.floatx", "keras.backend.greater", "keras.backend.floatx", "sfad_cifar_b.sfad_b.model.load_weights", "Exception", "keras.backend.cast", "keras.backend.repeat_elements", "keras.backend.maximum", "keras.backend.equal", "keras.backend.floatx", "keras.backend.argmax", "keras.backend.argmax", "keras.backend.mean"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_cifar10_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "no_defense_h5", "=", "\"cifar10_model_1.h5\"", ",", "filename_a", "=", "\"multi_cifar10_model_v7.h5\"", ",", "filename_b", "=", "\"multi_cifar10_model_v7b.h5\"", ",", "coverage", "=", "0.95", ",", "coverage_th", "=", "0.5", ",", "alpha", "=", "0.25", ",", "normalize_mean", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "no_defense_h5", "=", "no_defense_h5", "\n", "self", ".", "filename_b", "=", "filename_b", "\n", "self", ".", "filename_a", "=", "filename_a", "\n", "self", ".", "coverage", "=", "coverage", "\n", "self", ".", "coverage_th", "=", "coverage_th", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "normalize_mean", "=", "False", "\n", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "lamda", "=", "32", "\n", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_cifar10_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "[", ":", ",", "0", "]", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", "+", "1", ")", "\n", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "### to get prob for each model", "\n", "self", ".", "model_class", "=", "model_cifar10_adv", "(", "mode", "=", "'load'", ",", "no_defense_h5", "=", "self", ".", "no_defense_h5", ",", "filename", "=", "self", ".", "filename_a", ",", "\n", "coverage", "=", "coverage", ",", "alpha", "=", "alpha", ",", "normalize_mean", "=", "normalize_mean", ")", "\n", "self", ".", "model_1", "=", "self", ".", "model_class", ".", "model_1", "\n", "self", ".", "model_2", "=", "self", ".", "model_class", ".", "model_2", "\n", "self", ".", "model_3", "=", "self", ".", "model_class", ".", "model_3", "\n", "\n", "\n", "#self.model_a = self.model_class.model", "\n", "c", "=", "self", ".", "model_class", ".", "coverage", "\n", "l", "=", "self", ".", "model_class", ".", "lamda", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "\n", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "model_class", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "l", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.5", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.5", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "model_1", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "self", ".", "model_2", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "self", ".", "model_3", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "self", ".", "predections_a_train", "=", "self", ".", "model_1", ".", "predict", "(", "self", ".", "model_class", ".", "l_1_train", ")", "\n", "self", ".", "predections_b_train", "=", "self", ".", "model_2", ".", "predict", "(", "self", ".", "model_class", ".", "l_2_train", ")", "\n", "self", ".", "predections_c_train", "=", "self", ".", "model_3", ".", "predict", "(", "self", ".", "model_class", ".", "l_3_train", ")", "\n", "self", ".", "x_train", "=", "np", ".", "concatenate", "(", "(", "self", ".", "predections_a_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_b_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_c_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "self", ".", "predections_a_test", "=", "self", ".", "model_1", ".", "predict", "(", "self", ".", "model_class", ".", "l_1_test", ")", "\n", "self", ".", "predections_b_test", "=", "self", ".", "model_2", ".", "predict", "(", "self", ".", "model_class", ".", "l_2_test", ")", "\n", "self", ".", "predections_c_test", "=", "self", ".", "model_3", ".", "predict", "(", "self", ".", "model_class", ".", "l_3_test", ")", "\n", "self", ".", "x_test", "=", "np", ".", "concatenate", "(", "(", "self", ".", "predections_a_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_b_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_c_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename_b", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_cifar_b.sfad_b.build_model": [[99, 128], ["Input", "Model", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "Activation", "BatchNormalization", "Lambda", "Dense", "Activation", "Concatenate", "Dense", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.1", "\n", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ")", "\n", "\n", "task0", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "input", ")", "\n", "task0", "=", "BatchNormalization", "(", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ")", "(", "task0", ")", "\n", "# task0 = Dense(self.num_classes, use_bias=True, activation='softmax')(task0)", "\n", "# task0 = RBFLayer(128, betas=2)(task0)", "\n", "# model_output = Dense(self.num_classes, use_bias=False, activation='softmax')(task0)", "\n", "model_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_before_softmax'", ")", "(", "task0", ")", "\n", "model_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_after_softmax'", ")", "(", "model_output", ")", "\n", "\n", "# selection head (g)", "\n", "g", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "task0", ")", "\n", "g", "=", "Activation", "(", "'relu'", ")", "(", "g", ")", "\n", "g", "=", "BatchNormalization", "(", ")", "(", "g", ")", "\n", "g", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g", ")", "\n", "g", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ",", "name", "=", "'g_before_sigmoid'", ")", "(", "g", ")", "\n", "g", "=", "Activation", "(", "'sigmoid'", ",", "name", "=", "'g_after_sigmoid'", ")", "(", "g", ")", "\n", "selective_output", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"selective_output\"", ")", "(", "[", "model_output", ",", "g", "]", ")", "\n", "\n", "# auxiliary head (h)", "\n", "auxiliary_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "activation", "=", "'softmax'", ",", "name", "=", "'aux'", ")", "(", "task0", ")", "\n", "#auxiliary_output = Activation('softmax', name='aux_after_softmax')(auxiliary_output)", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "[", "selective_output", ",", "auxiliary_output", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_cifar_b.sfad_b.train": [[129, 172], ["keras.callbacks.LearningRateScheduler", "keras.optimizers.SGD", "model.compile", "model.fit", "model.save_weights", "keras.backend.cast", "keras.backend.sum", "keras.backend.cast", "keras.backend.cast", "keras.backend.mean", "open", "pickle.dump", "keras.backend.categorical_crossentropy", "keras.backend.greater", "keras.backend.floatx", "keras.backend.sum", "keras.backend.floatx", "keras.backend.greater", "keras.backend.floatx", "keras.backend.cast", "keras.backend.repeat_elements", "keras.backend.maximum", "keras.backend.equal", "keras.backend.floatx", "keras.backend.argmax", "keras.backend.argmax", "keras.backend.mean"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "        ", "c", "=", "self", ".", "coverage", "\n", "lamda", "=", "self", ".", "lamda", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "lamda", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "batch_size", "=", "200", "\n", "maxepoches", "=", "30", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "10", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ",", "loss_weights", "=", "[", "0.5", ",", "0.5", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit", "(", "self", ".", "x_train", ",", "[", "self", ".", "y_train", ",", "self", ".", "y_train", "[", ":", ",", ":", "-", "1", "]", "]", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "[", "self", ".", "y_test", ",", "self", ".", "y_test", "[", ":", ",", ":", "-", "1", "]", "]", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history.pkl\"", ".", "format", "(", "self", ".", "filename_b", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model", ".", "save_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename_b", ")", ")", "\n", "\n", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_svhn_b.sfad_b.__init__": [[11, 97], ["load_svhn_data", "toCat_onehot", "sfad.sfad_svhn_a.sfad_a", "keras.optimizers.SGD", "sfad_svhn_b.sfad_b.model_1.compile", "sfad_svhn_b.sfad_b.model_2.compile", "sfad_svhn_b.sfad_b.model_3.compile", "sfad_svhn_b.sfad_b.model_1.predict", "sfad_svhn_b.sfad_b.model_2.predict", "sfad_svhn_b.sfad_b.model_3.predict", "np.concatenate", "sfad_svhn_b.sfad_b.model_1.predict", "sfad_svhn_b.sfad_b.model_2.predict", "sfad_svhn_b.sfad_b.model_3.predict", "np.concatenate", "sfad_svhn_b.sfad_b.build_model", "normalize_mean", "normalize_linear", "keras.backend.cast", "keras.backend.sum", "keras.backend.cast", "keras.backend.cast", "keras.backend.mean", "sfad_svhn_b.sfad_b.train", "keras.backend.categorical_crossentropy", "keras.backend.greater", "keras.backend.floatx", "keras.backend.sum", "keras.backend.floatx", "keras.backend.greater", "keras.backend.floatx", "sfad_svhn_b.sfad_b.model.load_weights", "Exception", "keras.backend.cast", "keras.backend.repeat_elements", "keras.backend.maximum", "keras.backend.equal", "keras.backend.floatx", "keras.backend.argmax", "keras.backend.argmax", "keras.backend.mean"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_svhn_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "no_defense_h5", "=", "\"svhn_model_1.h5\"", ",", "filename_a", "=", "\"multi_svhn_v7.h5\"", ",", "filename_b", "=", "\"multi_svhn_model_v7b.h5\"", ",", "coverage", "=", "0.95", ",", "coverage_th", "=", "0.5", ",", "alpha", "=", "0.25", ",", "normalize_mean", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "no_defense_h5", "=", "no_defense_h5", "\n", "self", ".", "filename_b", "=", "filename_b", "\n", "self", ".", "filename_a", "=", "filename_a", "\n", "self", ".", "coverage", "=", "coverage", "\n", "self", ".", "coverage_th", "=", "coverage_th", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "normalize_mean", "=", "False", "\n", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "lamda", "=", "32", "\n", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_svhn_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", "+", "1", ")", "\n", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "### to get prob for each model", "\n", "self", ".", "model_class", "=", "model_svhn_adv", "(", "mode", "=", "'load'", ",", "no_defense_h5", "=", "self", ".", "no_defense_h5", ",", "filename", "=", "self", ".", "filename_a", ",", "\n", "coverage", "=", "coverage", ",", "alpha", "=", "alpha", ",", "normalize_mean", "=", "normalize_mean", ")", "\n", "self", ".", "model_1", "=", "self", ".", "model_class", ".", "model_1", "\n", "self", ".", "model_2", "=", "self", ".", "model_class", ".", "model_2", "\n", "self", ".", "model_3", "=", "self", ".", "model_class", ".", "model_3", "\n", "\n", "\n", "#self.model_a = self.model_class.model", "\n", "c", "=", "self", ".", "model_class", ".", "coverage", "\n", "l", "=", "self", ".", "model_class", ".", "lamda", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "\n", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "model_class", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "l", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.5", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.5", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "model_1", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "self", ".", "model_2", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "self", ".", "model_3", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "self", ".", "predections_a_train", "=", "self", ".", "model_1", ".", "predict", "(", "self", ".", "model_class", ".", "l_1_train", ")", "\n", "self", ".", "predections_b_train", "=", "self", ".", "model_2", ".", "predict", "(", "self", ".", "model_class", ".", "l_2_train", ")", "\n", "self", ".", "predections_c_train", "=", "self", ".", "model_3", ".", "predict", "(", "self", ".", "model_class", ".", "l_3_train", ")", "\n", "self", ".", "x_train", "=", "np", ".", "concatenate", "(", "(", "self", ".", "predections_a_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_b_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_c_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "self", ".", "predections_a_test", "=", "self", ".", "model_1", ".", "predict", "(", "self", ".", "model_class", ".", "l_1_test", ")", "\n", "self", ".", "predections_b_test", "=", "self", ".", "model_2", ".", "predict", "(", "self", ".", "model_class", ".", "l_2_test", ")", "\n", "self", ".", "predections_c_test", "=", "self", ".", "model_3", ".", "predict", "(", "self", ".", "model_class", ".", "l_3_test", ")", "\n", "self", ".", "x_test", "=", "np", ".", "concatenate", "(", "(", "self", ".", "predections_a_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_b_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_c_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename_b", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_svhn_b.sfad_b.build_model": [[99, 128], ["Input", "Model", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "Activation", "BatchNormalization", "Lambda", "Dense", "Activation", "Concatenate", "Dense", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.1", "\n", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ")", "\n", "\n", "task0", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "input", ")", "\n", "task0", "=", "BatchNormalization", "(", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ")", "(", "task0", ")", "\n", "# task0 = Dense(self.num_classes, use_bias=True, activation='softmax')(task0)", "\n", "# task0 = RBFLayer(128, betas=2)(task0)", "\n", "# model_output = Dense(self.num_classes, use_bias=False, activation='softmax')(task0)", "\n", "model_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_before_softmax'", ")", "(", "task0", ")", "\n", "model_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_after_softmax'", ")", "(", "model_output", ")", "\n", "\n", "# selection head (g)", "\n", "g", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "task0", ")", "\n", "g", "=", "Activation", "(", "'relu'", ")", "(", "g", ")", "\n", "g", "=", "BatchNormalization", "(", ")", "(", "g", ")", "\n", "g", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g", ")", "\n", "g", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ",", "name", "=", "'g_before_sigmoid'", ")", "(", "g", ")", "\n", "g", "=", "Activation", "(", "'sigmoid'", ",", "name", "=", "'g_after_sigmoid'", ")", "(", "g", ")", "\n", "selective_output", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"selective_output\"", ")", "(", "[", "model_output", ",", "g", "]", ")", "\n", "\n", "# auxiliary head (h)", "\n", "auxiliary_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "activation", "=", "'softmax'", ",", "name", "=", "'aux'", ")", "(", "task0", ")", "\n", "#auxiliary_output = Activation('softmax', name='aux_after_softmax')(auxiliary_output)", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "[", "selective_output", ",", "auxiliary_output", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_svhn_b.sfad_b.train": [[129, 172], ["keras.callbacks.LearningRateScheduler", "keras.optimizers.SGD", "model.compile", "model.fit", "model.save_weights", "keras.backend.cast", "keras.backend.sum", "keras.backend.cast", "keras.backend.cast", "keras.backend.mean", "open", "pickle.dump", "keras.backend.categorical_crossentropy", "keras.backend.greater", "keras.backend.floatx", "keras.backend.sum", "keras.backend.floatx", "keras.backend.greater", "keras.backend.floatx", "keras.backend.cast", "keras.backend.repeat_elements", "keras.backend.maximum", "keras.backend.equal", "keras.backend.floatx", "keras.backend.argmax", "keras.backend.argmax", "keras.backend.mean"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "        ", "c", "=", "self", ".", "coverage", "\n", "lamda", "=", "self", ".", "lamda", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "lamda", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "batch_size", "=", "200", "\n", "maxepoches", "=", "30", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "10", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ",", "loss_weights", "=", "[", "0.5", ",", "0.5", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit", "(", "self", ".", "x_train", ",", "[", "self", ".", "y_train", ",", "self", ".", "y_train", "[", ":", ",", ":", "-", "1", "]", "]", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "[", "self", ".", "y_test", ",", "self", ".", "y_test", "[", ":", ",", ":", "-", "1", "]", "]", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history.pkl\"", ".", "format", "(", "self", ".", "filename_b", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model", ".", "save_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename_b", ")", ")", "\n", "\n", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_mnist_a.sfad_a.__init__": [[8, 102], ["load_mnist_data", "toCat_onehot", "no_defense", "keras.optimizers.SGD", "sfad_mnist_a.sfad_a.no_defense_model.compile", "sfad_mnist_a.sfad_a.no_defense_model.summary", "sfad_mnist_a.sfad_a.no_defense_model.evaluate", "print", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "sfad_mnist_a.sfad_a.build_model", "normalize_mean", "normalize_linear", "len", "sfad_mnist_a.sfad_a.l_1_train.reshape", "len", "sfad_mnist_a.sfad_a.l_2_train.reshape", "len", "sfad_mnist_a.sfad_a.l_3_train.reshape", "len", "sfad_mnist_a.sfad_a.l_1_test.reshape", "len", "sfad_mnist_a.sfad_a.l_2_test.reshape", "len", "sfad_mnist_a.sfad_a.l_3_test.reshape", "sfad_mnist_a.sfad_a.train", "sfad_mnist_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_mnist_a.sfad_a.l_1_train.reshape", "sfad_mnist_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_mnist_a.sfad_a.l_2_train.reshape", "sfad_mnist_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_mnist_a.sfad_a.l_3_train.reshape", "sfad_mnist_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_mnist_a.sfad_a.l_1_test.reshape", "sfad_mnist_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_mnist_a.sfad_a.l_2_test.reshape", "sfad_mnist_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_mnist_a.sfad_a.l_3_test.reshape", "sfad_mnist_a.sfad_a.model_1.load_weights", "sfad_mnist_a.sfad_a.model_2.load_weights", "sfad_mnist_a.sfad_a.model_3.load_weights", "Exception", "sfad_mnist_a.sfad_a.no_defense_model.get_layer", "sfad_mnist_a.sfad_a.no_defense_model.get_layer", "sfad_mnist_a.sfad_a.no_defense_model.get_layer", "sfad_mnist_a.sfad_a.no_defense_model.get_layer", "sfad_mnist_a.sfad_a.no_defense_model.get_layer", "sfad_mnist_a.sfad_a.no_defense_model.get_layer"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_mnist_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "no_defense_h5", "=", "\"mnist_model_1.h5\"", ",", "filename", "=", "\"multi_mnist_model_v7.h5\"", ",", "coverage", "=", "0.95", ",", "coverage_th", "=", "0.5", ",", "alpha", "=", "0.5", ",", "normalize_mean", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "coverage", "=", "coverage", "\n", "self", ".", "coverage_th", "=", "coverage_th", "\n", "self", ".", "normalize_mean", "=", "normalize_mean", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "lamda", "=", "32", "\n", "\n", "## clean data", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_mnist_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", "+", "1", ")", "\n", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "from", "baselineCNN", ".", "cnn", ".", "cnn_mnist", "import", "MNISTCNN", "as", "no_defense", "\n", "model_nodefense_class", "=", "no_defense", "(", "mode", "=", "\"load\"", ",", "filename", "=", "no_defense_h5", ")", "\n", "self", ".", "no_defense_model", "=", "model_nodefense_class", ".", "model", "\n", "learning_rate", "=", "0.1", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "no_defense_model", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "self", ".", "no_defense_model", ".", "summary", "(", ")", "\n", "loss_test", ",", "class_head_acc", "=", "self", ".", "no_defense_model", ".", "evaluate", "(", "model_nodefense_class", ".", "x_test", ",", "model_nodefense_class", ".", "y_test", ")", "\n", "print", "(", "'Loss::{:4.4f} and Accuracy::{:4.2f}%  on test data'", ".", "format", "(", "loss_test", ",", "class_head_acc", "*", "100", ")", ")", "\n", "\n", "##layers data train", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_16'", ")", ".", "output", ")", "\n", "self", ".", "l_1_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_1_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_1_train", "=", "self", ".", "l_1_train", ".", "reshape", "(", "self", ".", "l_1_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_1_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_1_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_1_train", "=", "self", ".", "l_1_train", ".", "reshape", "(", "self", ".", "l_1_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_1_input_shape", "=", "self", ".", "l_1_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_14'", ")", ".", "output", ")", "\n", "self", ".", "l_2_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_2_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_2_train", "=", "self", ".", "l_2_train", ".", "reshape", "(", "self", ".", "l_2_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_2_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_2_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_2_train", "=", "self", ".", "l_2_train", ".", "reshape", "(", "self", ".", "l_2_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_2_input_shape", "=", "self", ".", "l_2_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_10'", ")", ".", "output", ")", "\n", "self", ".", "l_3_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_3_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_3_train", "=", "self", ".", "l_3_train", ".", "reshape", "(", "self", ".", "l_3_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_3_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_3_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_3_train", "=", "self", ".", "l_3_train", ".", "reshape", "(", "self", ".", "l_3_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_3_input_shape", "=", "self", ".", "l_3_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "##layers data test", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_16'", ")", ".", "output", ")", "\n", "self", ".", "l_1_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_1_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_1_test", "=", "self", ".", "l_1_test", ".", "reshape", "(", "self", ".", "l_1_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_1_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_1_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_1_test", "=", "self", ".", "l_1_test", ".", "reshape", "(", "self", ".", "l_1_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_14'", ")", ".", "output", ")", "\n", "self", ".", "l_2_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_2_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_2_test", "=", "self", ".", "l_2_test", ".", "reshape", "(", "self", ".", "l_2_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_2_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_2_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_2_test", "=", "self", ".", "l_2_test", ".", "reshape", "(", "self", ".", "l_2_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_10'", ")", ".", "output", ")", "\n", "self", ".", "l_3_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_3_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_3_test", "=", "self", ".", "l_3_test", ".", "reshape", "(", "self", ".", "l_3_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_3_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_3_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_3_test", "=", "self", ".", "l_3_test", ".", "reshape", "(", "self", ".", "l_3_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "## build the model", "\n", "", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", "=", "self", ".", "train", "(", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model_1", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_1.h5'", ")", ")", "\n", "self", ".", "model_2", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_2.h5'", ")", ")", "\n", "self", ".", "model_3", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_3.h5'", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_mnist_a.sfad_a.build_model": [[104, 428], ["Input", "Input", "Input", "Model", "Model", "Model", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.1", "\n", "\n", "#inputs", "\n", "inputa", "=", "Input", "(", "shape", "=", "self", ".", "l_1_input_shape", ")", "\n", "inputb", "=", "Input", "(", "shape", "=", "self", ".", "l_2_input_shape", ")", "\n", "inputc", "=", "Input", "(", "shape", "=", "self", ".", "l_3_input_shape", ")", "\n", "\n", "###########################   for model_1", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputa", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "#1b.decode", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "#1c.merge", "\n", "taska1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputa", ",", "taska1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taska2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taska1", ")", "\n", "taska2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taska2", ")", "\n", "taska2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taska2", ")", "\n", "taska2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taska2", ")", "\n", "taska2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taska1", ",", "taska2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taska = Concatenate(axis=3)([taska1, taska2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputna", "=", "GaussianNoise", "(", "1", ")", "(", "inputa", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputna", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "#1b.decode", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "#1c.merge", "\n", "taskna1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputna", ",", "taskna1", "]", ")", "\n", "taskna1", "=", "GaussianNoise", "(", "1", ")", "(", "taskna1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskna2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskna1", ")", "\n", "taskna2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskna1", ",", "taskna2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskna = Concatenate(axis=3)([taskna1, taskna2])", "\n", "\n", "#Merge clean and noise", "\n", "taska", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taska2", ",", "taskna2", "]", ")", "\n", "# taska = GaussianNoise(1)(taska)", "\n", "\n", "#bottelneck block", "\n", "taska", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "taska", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "taska", "=", "Conv2D", "(", "256", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "# taska = GaussianDropout(0.2)(taska)", "\n", "\n", "taska", "=", "Flatten", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Dense", "(", "512", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "# taska = GaussianDropout(0.2)(taska)", "\n", "# taska = Dense(self.num_classes, activation='softmax')(taska)", "\n", "# taska = RBFLayer(512, betas=2)(taska)", "\n", "# model_1_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taska)", "\n", "model_1_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_1_before_softmax'", ")", "(", "taska", ")", "\n", "model_1_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_1_after_softmax'", ")", "(", "model_1_output", ")", "\n", "\n", "# selection (g1)", "\n", "g1", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "g1", "=", "BatchNormalization", "(", ")", "(", "g1", ")", "\n", "g1", "=", "Activation", "(", "'relu'", ")", "(", "g1", ")", "\n", "g1", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g1", ")", "\n", "g1", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g1", ")", "\n", "model_1_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_1_selective\"", ")", "(", "[", "model_1_output", ",", "g1", "]", ")", "\n", "model_1_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ",", "name", "=", "'aux_1'", ")", "(", "taska", ")", "\n", "model_1", "=", "Model", "(", "inputs", "=", "inputa", ",", "outputs", "=", "[", "model_1_selective", ",", "model_1_auxiliary", "]", ")", "\n", "\n", "###########################   for model_2", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputb", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "#1b.decode", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "#1c.merge", "\n", "taskb1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputb", ",", "taskb1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskb1", ")", "\n", "taskb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskb1", ",", "taskb2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskb = Concatenate(axis=3)([taskb1, taskb2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputnb", "=", "GaussianNoise", "(", "1", ")", "(", "inputb", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputnb", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "#1b.decode", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "#1c.merge", "\n", "tasknb1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputnb", ",", "tasknb1", "]", ")", "\n", "tasknb1", "=", "GaussianNoise", "(", "1", ")", "(", "tasknb1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "tasknb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknb1", ")", "\n", "tasknb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "tasknb1", ",", "tasknb2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# tasknb = Concatenate(axis=3)([tasknb1, tasknb2])", "\n", "\n", "#Merge clean and noise ", "\n", "taskb", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taskb2", ",", "tasknb2", "]", ")", "\n", "# taskb = GaussianNoise(1)(taskb)", "\n", "\n", "#bottelneck block", "\n", "taskb", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "taskb", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "taskb", "=", "Conv2D", "(", "256", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "# taskb = GaussianDropout(0.2)(taskb)", "\n", "\n", "taskb", "=", "Flatten", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Dense", "(", "512", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "# taskb = GaussianDropout(0.2)(taskb)", "\n", "# taskb = Dense(self.num_classes, activation='softmax')(taskb)", "\n", "# taskb = RBFLayer(512, betas=2)(taskb)", "\n", "# model_2_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taskb)", "\n", "\n", "model_2_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_2_before_softmax'", ")", "(", "taskb", ")", "\n", "model_2_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_2_after_softmax'", ")", "(", "model_2_output", ")", "\n", "\n", "\n", "# selection (g2)", "\n", "g2", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "g2", "=", "BatchNormalization", "(", ")", "(", "g2", ")", "\n", "g2", "=", "Activation", "(", "'relu'", ")", "(", "g2", ")", "\n", "g2", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g2", ")", "\n", "g2", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g2", ")", "\n", "model_2_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_2_selective\"", ")", "(", "[", "model_2_output", ",", "g2", "]", ")", "\n", "model_2_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ",", "name", "=", "'aux_2'", ")", "(", "taskb", ")", "\n", "model_2", "=", "Model", "(", "inputs", "=", "inputb", ",", "outputs", "=", "[", "model_2_selective", ",", "model_2_auxiliary", "]", ")", "\n", "\n", "###########################   for model_3", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputc", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "#1b.decode", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "#1c.merge", "\n", "taskc1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputc", ",", "taskc1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskc1", ")", "\n", "taskc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskc1", ",", "taskc2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskc = Concatenate(axis=3)([taskc1, taskc2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputnc", "=", "GaussianNoise", "(", "1", ")", "(", "inputc", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputnc", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "#1b.decode", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "#1c.merge", "\n", "tasknc1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputnc", ",", "tasknc1", "]", ")", "\n", "tasknc1", "=", "GaussianNoise", "(", "1", ")", "(", "tasknc1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "tasknc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknc1", ")", "\n", "tasknc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "tasknc1", ",", "tasknc2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# tasknc = Concatenate(axis=3)([tasknc1, tasknc2])", "\n", "\n", "#Merge clean and noise ", "\n", "taskc", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taskc2", ",", "tasknc2", "]", ")", "\n", "# taskc = GaussianNoise(1)(taskc)", "\n", "\n", "#bottelneck block", "\n", "taskc", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "taskc", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "taskc", "=", "Conv2D", "(", "256", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "# taskc = GaussianDropout(0.2)(taskc)", "\n", "\n", "taskc", "=", "Flatten", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Dense", "(", "512", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "# taskc = GaussianDropout(0.2)(taskc)", "\n", "# taskc = Dense(self.num_classes, activation='softmax')(taskc)", "\n", "# taskc = RBFLayer(512, betas=2)(taskc)", "\n", "# model_3_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taskc)", "\n", "model_3_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_3_before_softmax'", ")", "(", "taskc", ")", "\n", "model_3_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_3_after_softmax'", ")", "(", "model_3_output", ")", "\n", "\n", "# selection (g3)", "\n", "g3", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "g3", "=", "BatchNormalization", "(", ")", "(", "g3", ")", "\n", "g3", "=", "Activation", "(", "'relu'", ")", "(", "g3", ")", "\n", "g3", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g3", ")", "\n", "g3", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g3", ")", "\n", "model_3_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_3_selective\"", ")", "(", "[", "model_3_output", ",", "g3", "]", ")", "\n", "model_3_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ",", "name", "=", "'aux_3'", ")", "(", "taskc", ")", "\n", "model_3", "=", "Model", "(", "inputs", "=", "inputc", ",", "outputs", "=", "[", "model_3_selective", ",", "model_3_auxiliary", "]", ")", "\n", "\n", "return", "model_1", ",", "model_2", ",", "model_3", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_mnist_a.sfad_a.train": [[430, 515], ["keras.callbacks.LearningRateScheduler", "keras.optimizers.SGD", "model_1.compile", "model_1.fit", "model_1.save_weights", "model_2.compile", "model_2.fit", "model_2.save_weights", "model_3.compile", "model_3.fit", "model_3.save_weights", "K.cast", "K.sum", "K.cast", "K.cast", "K.mean", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "K.categorical_crossentropy", "K.greater", "K.floatx", "K.sum", "K.floatx", "K.greater", "K.floatx", "K.cast", "K.repeat_elements", "K.maximum", "K.equal", "K.floatx", "K.argmax", "K.argmax", "K.mean"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model_1", ",", "model_2", ",", "model_3", ")", ":", "\n", "        ", "c", "=", "self", ".", "coverage", "\n", "lamda", "=", "self", ".", "lamda", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "lamda", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "batch_size", "=", "200", "\n", "maxepoches", "=", "30", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "500", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "\n", "####################### train model_1", "\n", "model_1", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_1", "=", "self", ".", "l_1_train", "\n", "y_", "=", "[", "self", ".", "y_train", ",", "self", ".", "y_train", "[", ":", ",", ":", "-", "1", "]", "]", "#, [self.y_train, self.y_train[:,:-1]], [self.y_train, self.y_train[:,:-1]]]", "\n", "x_1_val", "=", "self", ".", "l_1_test", "\n", "y_val", "=", "[", "self", ".", "y_test", ",", "self", ".", "y_test", "[", ":", ",", ":", "-", "1", "]", "]", "#, [self.y_test, self.y_test[:, :-1]], [self.y_test, self.y_test[:, :-1]]]", "\n", "historytemp", "=", "model_1", ".", "fit", "(", "x_1", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_1_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_1.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_1", ".", "save_weights", "(", "\"results/sfad/{}_model_1.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "\n", "####################### train model_2", "\n", "model_2", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_2", "=", "self", ".", "l_2_train", "\n", "x_2_val", "=", "self", ".", "l_2_test", "\n", "historytemp", "=", "model_2", ".", "fit", "(", "x_2", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_2_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_2.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_2", ".", "save_weights", "(", "\"results/sfad/{}_model_2.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "####################### train model_3", "\n", "# maxepoches = 500", "\n", "model_3", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_3", "=", "self", ".", "l_3_train", "\n", "x_3_val", "=", "self", ".", "l_3_test", "\n", "historytemp", "=", "model_3", ".", "fit", "(", "x_3", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_3_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_3.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_3", ".", "save_weights", "(", "\"results/sfad/{}_model_3.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "return", "model_1", ",", "model_2", ",", "model_3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_cifar_a.sfad_a.__init__": [[8, 102], ["load_cifar10_data", "toCat_onehot", "no_defense", "keras.optimizers.SGD", "sfad_cifar_a.sfad_a.no_defense_model.compile", "sfad_cifar_a.sfad_a.no_defense_model.summary", "sfad_cifar_a.sfad_a.no_defense_model.evaluate", "print", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "sfad_cifar_a.sfad_a.build_model", "normalize_mean", "normalize_linear", "len", "sfad_cifar_a.sfad_a.l_1_train.reshape", "len", "sfad_cifar_a.sfad_a.l_2_train.reshape", "len", "sfad_cifar_a.sfad_a.l_3_train.reshape", "len", "sfad_cifar_a.sfad_a.l_1_test.reshape", "len", "sfad_cifar_a.sfad_a.l_2_test.reshape", "len", "sfad_cifar_a.sfad_a.l_3_test.reshape", "sfad_cifar_a.sfad_a.train", "sfad_cifar_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_cifar_a.sfad_a.l_1_train.reshape", "sfad_cifar_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_cifar_a.sfad_a.l_2_train.reshape", "sfad_cifar_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_cifar_a.sfad_a.l_3_train.reshape", "sfad_cifar_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_cifar_a.sfad_a.l_1_test.reshape", "sfad_cifar_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_cifar_a.sfad_a.l_2_test.reshape", "sfad_cifar_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_cifar_a.sfad_a.l_3_test.reshape", "sfad_cifar_a.sfad_a.model_1.load_weights", "sfad_cifar_a.sfad_a.model_2.load_weights", "sfad_cifar_a.sfad_a.model_3.load_weights", "Exception", "sfad_cifar_a.sfad_a.no_defense_model.get_layer", "sfad_cifar_a.sfad_a.no_defense_model.get_layer", "sfad_cifar_a.sfad_a.no_defense_model.get_layer", "sfad_cifar_a.sfad_a.no_defense_model.get_layer", "sfad_cifar_a.sfad_a.no_defense_model.get_layer", "sfad_cifar_a.sfad_a.no_defense_model.get_layer"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_cifar10_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "no_defense_h5", "=", "\"cifar10_model_1.h5\"", ",", "filename", "=", "\"multi_cifar10_model_v7.h5\"", ",", "coverage", "=", "0.95", ",", "coverage_th", "=", "0.5", ",", "alpha", "=", "0.5", ",", "normalize_mean", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "coverage", "=", "coverage", "\n", "self", ".", "coverage_th", "=", "coverage_th", "\n", "self", ".", "normalize_mean", "=", "normalize_mean", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "num_classes", "=", "10", "\n", "self", ".", "lamda", "=", "32", "\n", "\n", "## clean data", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_cifar10_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "[", ":", ",", "0", "]", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", "+", "1", ")", "\n", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "from", "baselineCNN", ".", "cnn", ".", "cnn_cifar10", "import", "CIFAR10CNN", "as", "no_defense", "\n", "model_nodefense_class", "=", "no_defense", "(", "mode", "=", "\"load\"", ",", "filename", "=", "no_defense_h5", ")", "\n", "self", ".", "no_defense_model", "=", "model_nodefense_class", ".", "model", "\n", "learning_rate", "=", "0.02", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "no_defense_model", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "self", ".", "no_defense_model", ".", "summary", "(", ")", "\n", "loss_test", ",", "class_head_acc", "=", "self", ".", "no_defense_model", ".", "evaluate", "(", "model_nodefense_class", ".", "x_test", ",", "model_nodefense_class", ".", "y_test", ")", "\n", "print", "(", "'Loss::{:4.4f} and Accuracy::{:4.2f}%  on test data'", ".", "format", "(", "loss_test", ",", "class_head_acc", "*", "100", ")", ")", "\n", "\n", "##layers data train", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_31'", ")", ".", "output", ")", "\n", "self", ".", "l_1_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_1_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_1_train", "=", "self", ".", "l_1_train", ".", "reshape", "(", "self", ".", "l_1_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_1_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_1_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_1_train", "=", "self", ".", "l_1_train", ".", "reshape", "(", "self", ".", "l_1_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_1_input_shape", "=", "self", ".", "l_1_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_26'", ")", ".", "output", ")", "\n", "self", ".", "l_2_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_2_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_2_train", "=", "self", ".", "l_2_train", ".", "reshape", "(", "self", ".", "l_2_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_2_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_2_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_2_train", "=", "self", ".", "l_2_train", ".", "reshape", "(", "self", ".", "l_2_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_2_input_shape", "=", "self", ".", "l_2_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_21'", ")", ".", "output", ")", "\n", "self", ".", "l_3_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_3_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_3_train", "=", "self", ".", "l_3_train", ".", "reshape", "(", "self", ".", "l_3_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_3_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_3_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_3_train", "=", "self", ".", "l_3_train", ".", "reshape", "(", "self", ".", "l_3_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_3_input_shape", "=", "self", ".", "l_3_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "##layers data test", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_31'", ")", ".", "output", ")", "\n", "self", ".", "l_1_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_1_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_1_test", "=", "self", ".", "l_1_test", ".", "reshape", "(", "self", ".", "l_1_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_1_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_1_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_1_test", "=", "self", ".", "l_1_test", ".", "reshape", "(", "self", ".", "l_1_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_26'", ")", ".", "output", ")", "\n", "self", ".", "l_2_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_2_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_2_test", "=", "self", ".", "l_2_test", ".", "reshape", "(", "self", ".", "l_2_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_2_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_2_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_2_test", "=", "self", ".", "l_2_test", ".", "reshape", "(", "self", ".", "l_2_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'l_21'", ")", ".", "output", ")", "\n", "self", ".", "l_3_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_3_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_3_test", "=", "self", ".", "l_3_test", ".", "reshape", "(", "self", ".", "l_3_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_3_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_3_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_3_test", "=", "self", ".", "l_3_test", ".", "reshape", "(", "self", ".", "l_3_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "## build the model", "\n", "", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", "=", "self", ".", "train", "(", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model_1", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_1.h5'", ")", ")", "\n", "self", ".", "model_2", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_2.h5'", ")", ")", "\n", "self", ".", "model_3", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_3.h5'", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_cifar_a.sfad_a.build_model": [[104, 428], ["Input", "Input", "Input", "Model", "Model", "Model", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.1", "\n", "\n", "#inputs", "\n", "inputa", "=", "Input", "(", "shape", "=", "self", ".", "l_1_input_shape", ")", "\n", "inputb", "=", "Input", "(", "shape", "=", "self", ".", "l_2_input_shape", ")", "\n", "inputc", "=", "Input", "(", "shape", "=", "self", ".", "l_3_input_shape", ")", "\n", "\n", "###########################   for model_1", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputa", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "#1b.decode", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "#1c.merge", "\n", "taska1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputa", ",", "taska1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taska2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taska1", ")", "\n", "taska2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taska2", ")", "\n", "taska2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taska2", ")", "\n", "taska2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taska2", ")", "\n", "taska2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taska1", ",", "taska2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taska = Concatenate(axis=3)([taska1, taska2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputna", "=", "GaussianNoise", "(", "0.05", ")", "(", "inputa", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputna", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "#1b.decode", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "#1c.merge", "\n", "taskna1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputna", ",", "taskna1", "]", ")", "\n", "taskna1", "=", "GaussianNoise", "(", "0.05", ")", "(", "taskna1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskna2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskna1", ")", "\n", "taskna2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskna1", ",", "taskna2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskna = Concatenate(axis=3)([taskna1, taskna2])", "\n", "\n", "#Merge clean and noise", "\n", "taska", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taska2", ",", "taskna2", "]", ")", "\n", "# taska = GaussianNoise(0.05)(taska)", "\n", "\n", "#bottelneck block", "\n", "taska", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "taska", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "taska", "=", "Conv2D", "(", "256", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "# taska = GaussianDropout(0.2)(taska)", "\n", "\n", "taska", "=", "Flatten", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Dense", "(", "512", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "# taska = GaussianDropout(0.2)(taska)", "\n", "# taska = Dense(self.num_classes, activation='softmax')(taska)", "\n", "# taska = RBFLayer(512, betas=2)(taska)", "\n", "# model_1_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taska)", "\n", "model_1_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_1_before_softmax'", ")", "(", "taska", ")", "\n", "model_1_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_1_after_softmax'", ")", "(", "model_1_output", ")", "\n", "\n", "# selection (g1)", "\n", "g1", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "g1", "=", "BatchNormalization", "(", ")", "(", "g1", ")", "\n", "g1", "=", "Activation", "(", "'relu'", ")", "(", "g1", ")", "\n", "g1", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g1", ")", "\n", "g1", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g1", ")", "\n", "model_1_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_1_selective\"", ")", "(", "[", "model_1_output", ",", "g1", "]", ")", "\n", "model_1_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ")", "(", "taska", ")", "\n", "model_1", "=", "Model", "(", "inputs", "=", "inputa", ",", "outputs", "=", "[", "model_1_selective", ",", "model_1_auxiliary", "]", ")", "\n", "\n", "###########################   for model_2", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputb", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "#1b.decode", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "#1c.merge", "\n", "taskb1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputb", ",", "taskb1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskb1", ")", "\n", "taskb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskb1", ",", "taskb2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskb = Concatenate(axis=3)([taskb1, taskb2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputnb", "=", "GaussianNoise", "(", "0.05", ")", "(", "inputb", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputnb", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "#1b.decode", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "#1c.merge", "\n", "tasknb1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputnb", ",", "tasknb1", "]", ")", "\n", "tasknb1", "=", "GaussianNoise", "(", "0.05", ")", "(", "tasknb1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "tasknb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknb1", ")", "\n", "tasknb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "tasknb1", ",", "tasknb2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# tasknb = Concatenate(axis=3)([tasknb1, tasknb2])", "\n", "\n", "#Merge clean and noise ", "\n", "taskb", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taskb2", ",", "tasknb2", "]", ")", "\n", "# taskb = GaussianNoise(0.05)(taskb)", "\n", "\n", "#bottelneck block", "\n", "taskb", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "taskb", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "taskb", "=", "Conv2D", "(", "256", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "# taskb = GaussianDropout(0.2)(taskb)", "\n", "\n", "taskb", "=", "Flatten", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Dense", "(", "512", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "# taskb = GaussianDropout(0.2)(taskb)", "\n", "# taskb = Dense(self.num_classes, activation='softmax')(taskb)", "\n", "# taskb = RBFLayer(512, betas=2)(taskb)", "\n", "# model_2_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taskb)", "\n", "\n", "model_2_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_2_before_softmax'", ")", "(", "taskb", ")", "\n", "model_2_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_2_after_softmax'", ")", "(", "model_2_output", ")", "\n", "\n", "\n", "# selection (g2)", "\n", "g2", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "g2", "=", "BatchNormalization", "(", ")", "(", "g2", ")", "\n", "g2", "=", "Activation", "(", "'relu'", ")", "(", "g2", ")", "\n", "g2", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g2", ")", "\n", "g2", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g2", ")", "\n", "model_2_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_2_selective\"", ")", "(", "[", "model_2_output", ",", "g2", "]", ")", "\n", "model_2_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ")", "(", "taskb", ")", "\n", "model_2", "=", "Model", "(", "inputs", "=", "inputb", ",", "outputs", "=", "[", "model_2_selective", ",", "model_2_auxiliary", "]", ")", "\n", "\n", "###########################   for model_3", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputc", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "#1b.decode", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "#1c.merge", "\n", "taskc1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputc", ",", "taskc1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskc1", ")", "\n", "taskc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskc1", ",", "taskc2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskc = Concatenate(axis=3)([taskc1, taskc2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputnc", "=", "GaussianNoise", "(", "0.05", ")", "(", "inputc", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputnc", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "#1b.decode", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "#1c.merge", "\n", "tasknc1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputnc", ",", "tasknc1", "]", ")", "\n", "tasknc1", "=", "GaussianNoise", "(", "0.05", ")", "(", "tasknc1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "tasknc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknc1", ")", "\n", "tasknc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "tasknc1", ",", "tasknc2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# tasknc = Concatenate(axis=3)([tasknc1, tasknc2])", "\n", "\n", "#Merge clean and noise ", "\n", "taskc", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taskc2", ",", "tasknc2", "]", ")", "\n", "# taskc = GaussianNoise(0.05)(taskc)", "\n", "\n", "#bottelneck block", "\n", "taskc", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "taskc", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "taskc", "=", "Conv2D", "(", "256", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "# taskc = GaussianDropout(0.2)(taskc)", "\n", "\n", "taskc", "=", "Flatten", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Dense", "(", "512", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "# taskc = GaussianDropout(0.2)(taskc)", "\n", "# taskc = Dense(self.num_classes, activation='softmax')(taskc)", "\n", "# taskc = RBFLayer(512, betas=2)(taskc)", "\n", "# model_3_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taskc)", "\n", "model_3_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_3_before_softmax'", ")", "(", "taskc", ")", "\n", "model_3_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_3_after_softmax'", ")", "(", "model_3_output", ")", "\n", "\n", "# selection (g3)", "\n", "g3", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "g3", "=", "BatchNormalization", "(", ")", "(", "g3", ")", "\n", "g3", "=", "Activation", "(", "'relu'", ")", "(", "g3", ")", "\n", "g3", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g3", ")", "\n", "g3", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g3", ")", "\n", "model_3_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_3_selective\"", ")", "(", "[", "model_3_output", ",", "g3", "]", ")", "\n", "model_3_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ")", "(", "taskc", ")", "\n", "model_3", "=", "Model", "(", "inputs", "=", "inputc", ",", "outputs", "=", "[", "model_3_selective", ",", "model_3_auxiliary", "]", ")", "\n", "\n", "return", "model_1", ",", "model_2", ",", "model_3", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_cifar_a.sfad_a.train": [[430, 515], ["keras.callbacks.LearningRateScheduler", "keras.optimizers.SGD", "model_1.compile", "model_1.fit", "model_1.save_weights", "model_2.compile", "model_2.fit", "model_2.save_weights", "model_3.compile", "model_3.fit", "model_3.save_weights", "K.cast", "K.sum", "K.cast", "K.cast", "K.mean", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "K.categorical_crossentropy", "K.greater", "K.floatx", "K.sum", "K.floatx", "K.greater", "K.floatx", "K.cast", "K.repeat_elements", "K.maximum", "K.equal", "K.floatx", "K.argmax", "K.argmax", "K.mean"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model_1", ",", "model_2", ",", "model_3", ")", ":", "\n", "        ", "c", "=", "self", ".", "coverage", "\n", "lamda", "=", "self", ".", "lamda", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "lamda", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "batch_size", "=", "200", "\n", "maxepoches", "=", "30", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "500", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "\n", "####################### train model_1", "\n", "model_1", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_1", "=", "self", ".", "l_1_train", "\n", "y_", "=", "[", "self", ".", "y_train", ",", "self", ".", "y_train", "[", ":", ",", ":", "-", "1", "]", "]", "#, [self.y_train, self.y_train[:,:-1]], [self.y_train, self.y_train[:,:-1]]]", "\n", "x_1_val", "=", "self", ".", "l_1_test", "\n", "y_val", "=", "[", "self", ".", "y_test", ",", "self", ".", "y_test", "[", ":", ",", ":", "-", "1", "]", "]", "#, [self.y_test, self.y_test[:, :-1]], [self.y_test, self.y_test[:, :-1]]]", "\n", "historytemp", "=", "model_1", ".", "fit", "(", "x_1", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_1_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_1.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_1", ".", "save_weights", "(", "\"results/sfad/{}_model_1.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "\n", "####################### train model_2", "\n", "model_2", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_2", "=", "self", ".", "l_2_train", "\n", "x_2_val", "=", "self", ".", "l_2_test", "\n", "historytemp", "=", "model_2", ".", "fit", "(", "x_2", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_2_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_2.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_2", ".", "save_weights", "(", "\"results/sfad/{}_model_2.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "####################### train model_3", "\n", "# maxepoches = 500", "\n", "model_3", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_3", "=", "self", ".", "l_3_train", "\n", "x_3_val", "=", "self", ".", "l_3_test", "\n", "historytemp", "=", "model_3", ".", "fit", "(", "x_3", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_3_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_3.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_3", ".", "save_weights", "(", "\"results/sfad/{}_model_3.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "return", "model_1", ",", "model_2", ",", "model_3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_a.sfad_a.__init__": [[8, 102], ["load_tiny_imagenet_data", "toCat_onehot", "no_defense", "keras.optimizers.SGD", "sfad_tiny_a.sfad_a.no_defense_model.compile", "sfad_tiny_a.sfad_a.no_defense_model.summary", "sfad_tiny_a.sfad_a.no_defense_model.evaluate", "print", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "Model", "Model.predict", "sfad_tiny_a.sfad_a.build_model", "normalize_mean", "normalize_linear", "len", "sfad_tiny_a.sfad_a.l_1_train.reshape", "len", "sfad_tiny_a.sfad_a.l_2_train.reshape", "len", "sfad_tiny_a.sfad_a.l_3_train.reshape", "len", "sfad_tiny_a.sfad_a.l_1_test.reshape", "len", "sfad_tiny_a.sfad_a.l_2_test.reshape", "len", "sfad_tiny_a.sfad_a.l_3_test.reshape", "sfad_tiny_a.sfad_a.train", "sfad_tiny_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_tiny_a.sfad_a.l_1_train.reshape", "sfad_tiny_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_tiny_a.sfad_a.l_2_train.reshape", "sfad_tiny_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_tiny_a.sfad_a.l_3_train.reshape", "sfad_tiny_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_tiny_a.sfad_a.l_1_test.reshape", "sfad_tiny_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_tiny_a.sfad_a.l_2_test.reshape", "sfad_tiny_a.sfad_a.no_defense_model.get_input_at", "len", "sfad_tiny_a.sfad_a.l_3_test.reshape", "sfad_tiny_a.sfad_a.model_1.load_weights", "sfad_tiny_a.sfad_a.model_2.load_weights", "sfad_tiny_a.sfad_a.model_3.load_weights", "Exception", "sfad_tiny_a.sfad_a.no_defense_model.get_layer", "sfad_tiny_a.sfad_a.no_defense_model.get_layer", "sfad_tiny_a.sfad_a.no_defense_model.get_layer", "sfad_tiny_a.sfad_a.no_defense_model.get_layer", "sfad_tiny_a.sfad_a.no_defense_model.get_layer", "sfad_tiny_a.sfad_a.no_defense_model.get_layer"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_tiny_imagenet_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "no_defense_h5", "=", "\"tiny_model_1.h5\"", ",", "filename", "=", "\"multi_tiny_model_v7.h5\"", ",", "coverage", "=", "0.95", ",", "coverage_th", "=", "0.5", ",", "alpha", "=", "0.5", ",", "normalize_mean", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "coverage", "=", "coverage", "\n", "self", ".", "coverage_th", "=", "coverage_th", "\n", "self", ".", "normalize_mean", "=", "normalize_mean", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "num_classes", "=", "200", "\n", "self", ".", "lamda", "=", "32", "\n", "\n", "## clean data", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_tiny_imagenet_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", "+", "1", ")", "\n", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "from", "baselineCNN", ".", "cnn", ".", "cnn_tiny", "import", "TINYCNN", "as", "no_defense", "\n", "model_nodefense_class", "=", "no_defense", "(", "mode", "=", "\"load\"", ",", "filename", "=", "no_defense_h5", ")", "\n", "self", ".", "no_defense_model", "=", "model_nodefense_class", ".", "model", "\n", "learning_rate", "=", "0.02", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "no_defense_model", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", ",", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "self", ".", "no_defense_model", ".", "summary", "(", ")", "\n", "loss_test", ",", "class_head_acc", "=", "self", ".", "no_defense_model", ".", "evaluate", "(", "model_nodefense_class", ".", "x_test", ",", "model_nodefense_class", ".", "y_test", ")", "\n", "print", "(", "'Loss::{:4.4f} and Accuracy::{:4.2f}%  on test data'", ".", "format", "(", "loss_test", ",", "class_head_acc", "*", "100", ")", ")", "\n", "\n", "##layers data train", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'bn'", ")", ".", "output", ")", "\n", "self", ".", "l_1_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_1_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_1_train", "=", "self", ".", "l_1_train", ".", "reshape", "(", "self", ".", "l_1_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_1_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_1_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_1_train", "=", "self", ".", "l_1_train", ".", "reshape", "(", "self", ".", "l_1_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_1_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_1_input_shape", "=", "self", ".", "l_1_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'conv5_block17_0_bn'", ")", ".", "output", ")", "\n", "self", ".", "l_2_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_2_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_2_train", "=", "self", ".", "l_2_train", ".", "reshape", "(", "self", ".", "l_2_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_2_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_2_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_2_train", "=", "self", ".", "l_2_train", ".", "reshape", "(", "self", ".", "l_2_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_2_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_2_input_shape", "=", "self", ".", "l_2_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'pool4_bn'", ")", ".", "output", ")", "\n", "self", ".", "l_3_train", "=", "inter_model", ".", "predict", "(", "self", ".", "x_train", ")", "\n", "if", "len", "(", "self", ".", "l_3_train", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_3_train", "=", "self", ".", "l_3_train", ".", "reshape", "(", "self", ".", "l_3_train", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_3_train", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_3_train", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_3_train", "=", "self", ".", "l_3_train", ".", "reshape", "(", "self", ".", "l_3_train", ".", "shape", "[", "0", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "1", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "2", "]", ",", "self", ".", "l_3_train", ".", "shape", "[", "3", "]", ")", "\n", "", "self", ".", "l_3_input_shape", "=", "self", ".", "l_3_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "##layers data test", "\n", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'bn'", ")", ".", "output", ")", "\n", "self", ".", "l_1_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_1_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_1_test", "=", "self", ".", "l_1_test", ".", "reshape", "(", "self", ".", "l_1_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_1_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_1_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_1_test", "=", "self", ".", "l_1_test", ".", "reshape", "(", "self", ".", "l_1_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_1_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'conv5_block17_0_bn'", ")", ".", "output", ")", "\n", "self", ".", "l_2_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_2_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_2_test", "=", "self", ".", "l_2_test", ".", "reshape", "(", "self", ".", "l_2_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_2_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_2_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_2_test", "=", "self", ".", "l_2_test", ".", "reshape", "(", "self", ".", "l_2_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_2_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "inter_model", "=", "Model", "(", "inputs", "=", "self", ".", "no_defense_model", ".", "get_input_at", "(", "0", ")", ",", "outputs", "=", "self", ".", "no_defense_model", ".", "get_layer", "(", "'pool4_bn'", ")", ".", "output", ")", "\n", "self", ".", "l_3_test", "=", "inter_model", ".", "predict", "(", "self", ".", "x_test", ")", "\n", "if", "len", "(", "self", ".", "l_3_test", ".", "shape", ")", "==", "2", ":", "\n", "            ", "self", ".", "l_3_test", "=", "self", ".", "l_3_test", ".", "reshape", "(", "self", ".", "l_3_test", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "l_3_test", ".", "shape", "[", "1", "]", ")", "\n", "", "elif", "len", "(", "self", ".", "l_3_test", ".", "shape", ")", "==", "4", ":", "\n", "            ", "self", ".", "l_3_test", "=", "self", ".", "l_3_test", ".", "reshape", "(", "self", ".", "l_3_test", ".", "shape", "[", "0", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "1", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "2", "]", ",", "self", ".", "l_3_test", ".", "shape", "[", "3", "]", ")", "\n", "\n", "## build the model", "\n", "", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", "=", "self", ".", "train", "(", "self", ".", "model_1", ",", "self", ".", "model_2", ",", "self", ".", "model_3", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model_1", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_1.h5'", ")", ")", "\n", "self", ".", "model_2", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_2.h5'", ")", ")", "\n", "self", ".", "model_3", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", "+", "'_model_3.h5'", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_a.sfad_a.build_model": [[104, 428], ["Input", "Input", "Input", "Model", "Model", "Model", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "GaussianNoise", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "Lambda", "GaussianNoise", "UpSampling2D", "UpSampling2D", "AveragePooling2D", "AveragePooling2D", "Lambda", "Concatenate", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Conv2D", "BatchNormalization", "Activation", "Flatten", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "BatchNormalization", "Activation", "Lambda", "Dense", "Concatenate", "Dense", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "np.int32", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "K.abs", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.1", "\n", "\n", "#inputs", "\n", "inputa", "=", "Input", "(", "shape", "=", "self", ".", "l_1_input_shape", ")", "\n", "inputb", "=", "Input", "(", "shape", "=", "self", ".", "l_2_input_shape", ")", "\n", "inputc", "=", "Input", "(", "shape", "=", "self", ".", "l_3_input_shape", ")", "\n", "\n", "###########################   for model_1", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputa", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "#1b.decode", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "taska1", "=", "BatchNormalization", "(", ")", "(", "taska1", ")", "\n", "taska1", "=", "Activation", "(", "'relu'", ")", "(", "taska1", ")", "\n", "taska1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska1", ")", "\n", "#1c.merge", "\n", "taska1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputa", ",", "taska1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taska2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taska1", ")", "\n", "taska2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taska2", ")", "\n", "taska2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taska2", ")", "\n", "taska2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taska2", ")", "\n", "taska2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taska1", ",", "taska2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taska = Concatenate(axis=3)([taska1, taska2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputna", "=", "GaussianNoise", "(", "0.05", ")", "(", "inputa", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputna", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "#1b.decode", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "BatchNormalization", "(", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Activation", "(", "'relu'", ")", "(", "taskna1", ")", "\n", "taskna1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_1_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskna1", ")", "\n", "#1c.merge", "\n", "taskna1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputna", ",", "taskna1", "]", ")", "\n", "taskna1", "=", "GaussianNoise", "(", "0.05", ")", "(", "taskna1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskna2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskna1", ")", "\n", "taskna2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskna2", ")", "\n", "taskna2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskna1", ",", "taskna2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskna = Concatenate(axis=3)([taskna1, taskna2])", "\n", "\n", "#Merge clean and noise", "\n", "taska", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taska2", ",", "taskna2", "]", ")", "\n", "# taska = GaussianNoise(0.05)(taska)", "\n", "\n", "#bottelneck block", "\n", "taska", "=", "Conv2D", "(", "4096", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "taska", "=", "Conv2D", "(", "2048", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "taska", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "# taska = GaussianDropout(0.2)(taska)", "\n", "\n", "taska", "=", "Flatten", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Dense", "(", "1024", ")", "(", "taska", ")", "\n", "taska", "=", "BatchNormalization", "(", ")", "(", "taska", ")", "\n", "taska", "=", "Activation", "(", "'relu'", ")", "(", "taska", ")", "\n", "# taska = GaussianDropout(0.2)(taska)", "\n", "# taska = Dense(self.num_classes, activation='softmax')(taska)", "\n", "# taska = RBFLayer(512, betas=2)(taska)", "\n", "# model_1_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taska)", "\n", "model_1_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_1_before_softmax'", ")", "(", "taska", ")", "\n", "model_1_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_1_after_softmax'", ")", "(", "model_1_output", ")", "\n", "\n", "# selection (g1)", "\n", "g1", "=", "Dense", "(", "1024", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taska", ")", "\n", "g1", "=", "BatchNormalization", "(", ")", "(", "g1", ")", "\n", "g1", "=", "Activation", "(", "'relu'", ")", "(", "g1", ")", "\n", "g1", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g1", ")", "\n", "g1", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g1", ")", "\n", "model_1_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_1_selective\"", ")", "(", "[", "model_1_output", ",", "g1", "]", ")", "\n", "model_1_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ")", "(", "taska", ")", "\n", "model_1", "=", "Model", "(", "inputs", "=", "inputa", ",", "outputs", "=", "[", "model_1_selective", ",", "model_1_auxiliary", "]", ")", "\n", "\n", "###########################   for model_2", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputb", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "#1b.decode", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "BatchNormalization", "(", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Activation", "(", "'relu'", ")", "(", "taskb1", ")", "\n", "taskb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb1", ")", "\n", "#1c.merge", "\n", "taskb1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputb", ",", "taskb1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskb1", ")", "\n", "taskb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskb2", ")", "\n", "taskb2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskb1", ",", "taskb2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskb = Concatenate(axis=3)([taskb1, taskb2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputnb", "=", "GaussianNoise", "(", "0.05", ")", "(", "inputb", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputnb", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "#1b.decode", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "BatchNormalization", "(", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Activation", "(", "'relu'", ")", "(", "tasknb1", ")", "\n", "tasknb1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_2_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknb1", ")", "\n", "#1c.merge", "\n", "tasknb1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputnb", ",", "tasknb1", "]", ")", "\n", "tasknb1", "=", "GaussianNoise", "(", "0.05", ")", "(", "tasknb1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "tasknb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknb1", ")", "\n", "tasknb2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknb2", ")", "\n", "tasknb2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "tasknb1", ",", "tasknb2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# tasknb = Concatenate(axis=3)([tasknb1, tasknb2])", "\n", "\n", "#Merge clean and noise ", "\n", "taskb", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taskb2", ",", "tasknb2", "]", ")", "\n", "# taskb = GaussianNoise(0.05)(taskb)", "\n", "\n", "#bottelneck block", "\n", "taskb", "=", "Conv2D", "(", "4096", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "taskb", "=", "Conv2D", "(", "2048", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "taskb", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "# taskb = GaussianDropout(0.2)(taskb)", "\n", "\n", "taskb", "=", "Flatten", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Dense", "(", "1024", ")", "(", "taskb", ")", "\n", "taskb", "=", "BatchNormalization", "(", ")", "(", "taskb", ")", "\n", "taskb", "=", "Activation", "(", "'relu'", ")", "(", "taskb", ")", "\n", "# taskb = GaussianDropout(0.2)(taskb)", "\n", "# taskb = Dense(self.num_classes, activation='softmax')(taskb)", "\n", "# taskb = RBFLayer(512, betas=2)(taskb)", "\n", "# model_2_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taskb)", "\n", "\n", "model_2_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_2_before_softmax'", ")", "(", "taskb", ")", "\n", "model_2_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_2_after_softmax'", ")", "(", "model_2_output", ")", "\n", "\n", "\n", "# selection (g2)", "\n", "g2", "=", "Dense", "(", "1024", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskb", ")", "\n", "g2", "=", "BatchNormalization", "(", ")", "(", "g2", ")", "\n", "g2", "=", "Activation", "(", "'relu'", ")", "(", "g2", ")", "\n", "g2", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g2", ")", "\n", "g2", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g2", ")", "\n", "model_2_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_2_selective\"", ")", "(", "[", "model_2_output", ",", "g2", "]", ")", "\n", "model_2_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ")", "(", "taskb", ")", "\n", "model_2", "=", "Model", "(", "inputs", "=", "inputb", ",", "outputs", "=", "[", "model_2_selective", ",", "model_2_auxiliary", "]", ")", "\n", "\n", "###########################   for model_3", "\n", "######## for Clean features", "\n", "#1a.encode    ", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputc", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "#1b.decode", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "BatchNormalization", "(", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Activation", "(", "'relu'", ")", "(", "taskc1", ")", "\n", "taskc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc1", ")", "\n", "#1c.merge", "\n", "taskc1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputc", ",", "taskc1", "]", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "taskc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskc1", ")", "\n", "taskc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "taskc2", ")", "\n", "taskc2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "taskc1", ",", "taskc2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# taskc = Concatenate(axis=3)([taskc1, taskc2])", "\n", "\n", "######## for Noise features", "\n", "#1a.encode", "\n", "inputnc", "=", "GaussianNoise", "(", "0.05", ")", "(", "inputc", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "inputnc", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "16", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "#1b.decode", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "4", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", "/", "2", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "BatchNormalization", "(", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Activation", "(", "'relu'", ")", "(", "tasknc1", ")", "\n", "tasknc1", "=", "Conv2D", "(", "np", ".", "int32", "(", "self", ".", "l_3_input_shape", "[", "2", "]", ")", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "tasknc1", ")", "\n", "#1c.merge", "\n", "tasknc1", "=", "Lambda", "(", "lambda", "inputs", ":", "K", ".", "abs", "(", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", ")", "(", "[", "inputnc", ",", "tasknc1", "]", ")", "\n", "tasknc1", "=", "GaussianNoise", "(", "0.05", ")", "(", "tasknc1", ")", "\n", "\n", "#Upsampling and downsampling", "\n", "tasknc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknc1", ")", "\n", "tasknc2", "=", "UpSampling2D", "(", "size", "=", "2", ",", "interpolation", "=", "'bilinear'", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "AveragePooling2D", "(", "pool_size", "=", "2", ",", "strides", "=", "2", ")", "(", "tasknc2", ")", "\n", "tasknc2", "=", "Lambda", "(", "lambda", "inputs", ":", "inputs", "[", "0", "]", "+", "inputs", "[", "1", "]", ")", "(", "[", "tasknc1", ",", "tasknc2", "]", ")", "\n", "\n", "#Merge encode/decode and up/down sampling ", "\n", "# tasknc = Concatenate(axis=3)([tasknc1, tasknc2])", "\n", "\n", "#Merge clean and noise ", "\n", "taskc", "=", "Concatenate", "(", "axis", "=", "3", ")", "(", "[", "taskc2", ",", "tasknc2", "]", ")", "\n", "# taskc = GaussianNoise(0.05)(taskc)", "\n", "\n", "#bottelneck block", "\n", "taskc", "=", "Conv2D", "(", "4096", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "taskc", "=", "Conv2D", "(", "2048", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "taskc", "=", "Conv2D", "(", "1024", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "# taskc = GaussianDropout(0.2)(taskc)", "\n", "\n", "taskc", "=", "Flatten", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Dense", "(", "1024", ")", "(", "taskc", ")", "\n", "taskc", "=", "BatchNormalization", "(", ")", "(", "taskc", ")", "\n", "taskc", "=", "Activation", "(", "'relu'", ")", "(", "taskc", ")", "\n", "# taskc = GaussianDropout(0.2)(taskc)", "\n", "# taskc = Dense(self.num_classes, activation='softmax')(taskc)", "\n", "# taskc = RBFLayer(512, betas=2)(taskc)", "\n", "# model_3_output = Dense(self.num_classes, use_bias=False, activation='softmax')(taskc)", "\n", "model_3_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_3_before_softmax'", ")", "(", "taskc", ")", "\n", "model_3_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_3_after_softmax'", ")", "(", "model_3_output", ")", "\n", "\n", "# selection (g3)", "\n", "g3", "=", "Dense", "(", "1024", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "taskc", ")", "\n", "g3", "=", "BatchNormalization", "(", ")", "(", "g3", ")", "\n", "g3", "=", "Activation", "(", "'relu'", ")", "(", "g3", ")", "\n", "g3", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g3", ")", "\n", "g3", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "g3", ")", "\n", "model_3_selective", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"model_3_selective\"", ")", "(", "[", "model_3_output", ",", "g3", "]", ")", "\n", "model_3_auxiliary", "=", "Dense", "(", "self", ".", "num_classes", ",", "use_bias", "=", "False", ",", "activation", "=", "'softmax'", ")", "(", "taskc", ")", "\n", "model_3", "=", "Model", "(", "inputs", "=", "inputc", ",", "outputs", "=", "[", "model_3_selective", ",", "model_3_auxiliary", "]", ")", "\n", "\n", "return", "model_1", ",", "model_2", ",", "model_3", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_a.sfad_a.train": [[430, 515], ["keras.callbacks.LearningRateScheduler", "keras.optimizers.SGD", "model_1.compile", "model_1.fit", "model_1.save_weights", "model_2.compile", "model_2.fit", "model_2.save_weights", "model_3.compile", "model_3.fit", "model_3.save_weights", "K.cast", "K.sum", "K.cast", "K.cast", "K.mean", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "K.categorical_crossentropy", "K.greater", "K.floatx", "K.sum", "K.floatx", "K.greater", "K.floatx", "K.cast", "K.repeat_elements", "K.maximum", "K.equal", "K.floatx", "K.argmax", "K.argmax", "K.mean"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model_1", ",", "model_2", ",", "model_3", ")", ":", "\n", "        ", "c", "=", "self", ".", "coverage", "\n", "lamda", "=", "self", ".", "lamda", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "lamda", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "batch_size", "=", "200", "\n", "maxepoches", "=", "30", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "500", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "\n", "####################### train model_1", "\n", "model_1", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_1", "=", "self", ".", "l_1_train", "\n", "y_", "=", "[", "self", ".", "y_train", ",", "self", ".", "y_train", "[", ":", ",", ":", "-", "1", "]", "]", "#, [self.y_train, self.y_train[:,:-1]], [self.y_train, self.y_train[:,:-1]]]", "\n", "x_1_val", "=", "self", ".", "l_1_test", "\n", "y_val", "=", "[", "self", ".", "y_test", ",", "self", ".", "y_test", "[", ":", ",", ":", "-", "1", "]", "]", "#, [self.y_test, self.y_test[:, :-1]], [self.y_test, self.y_test[:, :-1]]]", "\n", "historytemp", "=", "model_1", ".", "fit", "(", "x_1", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_1_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_1.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_1", ".", "save_weights", "(", "\"results/sfad/{}_model_1.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "\n", "####################### train model_2", "\n", "model_2", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_2", "=", "self", ".", "l_2_train", "\n", "x_2_val", "=", "self", ".", "l_2_test", "\n", "historytemp", "=", "model_2", ".", "fit", "(", "x_2", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_2_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_2.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_2", ".", "save_weights", "(", "\"results/sfad/{}_model_2.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "####################### train model_3", "\n", "# maxepoches = 500", "\n", "model_3", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "x_3", "=", "self", ".", "l_3_train", "\n", "x_3_val", "=", "self", ".", "l_3_test", "\n", "historytemp", "=", "model_3", ".", "fit", "(", "x_3", ",", "y_", ",", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "x_3_val", ",", "y_val", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history_model_3.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model_3", ".", "save_weights", "(", "\"results/sfad/{}_model_3.h5\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ")", "\n", "\n", "return", "model_1", ",", "model_2", ",", "model_3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.__init__": [[11, 97], ["load_tiny_imagenet_data", "toCat_onehot", "sfad.sfad_tiny_a.sfad_a", "keras.optimizers.SGD", "sfad_tiny_b.sfad_b.model_1.compile", "sfad_tiny_b.sfad_b.model_2.compile", "sfad_tiny_b.sfad_b.model_3.compile", "sfad_tiny_b.sfad_b.model_1.predict", "sfad_tiny_b.sfad_b.model_2.predict", "sfad_tiny_b.sfad_b.model_3.predict", "np.concatenate", "sfad_tiny_b.sfad_b.model_1.predict", "sfad_tiny_b.sfad_b.model_2.predict", "sfad_tiny_b.sfad_b.model_3.predict", "np.concatenate", "sfad_tiny_b.sfad_b.build_model", "normalize_mean", "normalize_linear", "keras.backend.cast", "keras.backend.sum", "keras.backend.cast", "keras.backend.cast", "keras.backend.mean", "sfad_tiny_b.sfad_b.train", "keras.backend.categorical_crossentropy", "keras.backend.greater", "keras.backend.floatx", "keras.backend.sum", "keras.backend.floatx", "keras.backend.greater", "keras.backend.floatx", "sfad_tiny_b.sfad_b.model.load_weights", "Exception", "keras.backend.cast", "keras.backend.repeat_elements", "keras.backend.maximum", "keras.backend.equal", "keras.backend.floatx", "keras.backend.argmax", "keras.backend.argmax", "keras.backend.mean"], "methods", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_tiny_imagenet_data", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.robustness.base.RobustClassifierBase.predict", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "no_defense_h5", "=", "\"tiny_model_1.h5\"", ",", "filename_a", "=", "\"multi_tiny_model_v7.h5\"", ",", "filename_b", "=", "\"multi_tiny_model_v7b.h5\"", ",", "coverage", "=", "0.95", ",", "coverage_th", "=", "0.5", ",", "alpha", "=", "0.25", ",", "normalize_mean", "=", "False", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "no_defense_h5", "=", "no_defense_h5", "\n", "self", ".", "filename_b", "=", "filename_b", "\n", "self", ".", "filename_a", "=", "filename_a", "\n", "self", ".", "coverage", "=", "coverage", "\n", "self", ".", "coverage_th", "=", "coverage_th", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "normalize_mean", "=", "False", "\n", "self", ".", "num_classes", "=", "200", "\n", "self", ".", "lamda", "=", "32", "\n", "\n", "(", "self", ".", "x_train", ",", "self", ".", "y_train", ")", ",", "(", "self", ".", "x_test", ",", "self", ".", "y_test", ")", "=", "load_tiny_imagenet_data", "(", ")", "\n", "if", "normalize_mean", ":", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_mean", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "", "else", ":", "# linear 0-1", "\n", "            ", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "normalize_linear", "(", "self", ".", "x_train", ",", "self", ".", "x_test", ")", "\n", "\n", "#convert labels to one_hot", "\n", "", "self", ".", "y_test_labels", "=", "self", ".", "y_test", "\n", "self", ".", "y_train", ",", "self", ".", "y_test", "=", "toCat_onehot", "(", "self", ".", "y_train", ",", "self", ".", "y_test", ",", "self", ".", "num_classes", "+", "1", ")", "\n", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "### to get prob for each model", "\n", "self", ".", "model_class", "=", "model_tiny_adv", "(", "mode", "=", "'load'", ",", "no_defense_h5", "=", "self", ".", "no_defense_h5", ",", "filename", "=", "self", ".", "filename_a", ",", "\n", "coverage", "=", "coverage", ",", "alpha", "=", "alpha", ",", "normalize_mean", "=", "normalize_mean", ")", "\n", "self", ".", "model_1", "=", "self", ".", "model_class", ".", "model_1", "\n", "self", ".", "model_2", "=", "self", ".", "model_class", ".", "model_2", "\n", "self", ".", "model_3", "=", "self", ".", "model_class", ".", "model_3", "\n", "\n", "\n", "#self.model_a = self.model_class.model", "\n", "c", "=", "self", ".", "model_class", ".", "coverage", "\n", "l", "=", "self", ".", "model_class", ".", "lamda", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "\n", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "model_class", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "l", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.5", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.5", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "self", ".", "model_1", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "self", ".", "model_2", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "self", ".", "model_3", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ")", "\n", "\n", "self", ".", "predections_a_train", "=", "self", ".", "model_1", ".", "predict", "(", "self", ".", "model_class", ".", "l_1_train", ")", "\n", "self", ".", "predections_b_train", "=", "self", ".", "model_2", ".", "predict", "(", "self", ".", "model_class", ".", "l_2_train", ")", "\n", "self", ".", "predections_c_train", "=", "self", ".", "model_3", ".", "predict", "(", "self", ".", "model_class", ".", "l_3_train", ")", "\n", "self", ".", "x_train", "=", "np", ".", "concatenate", "(", "(", "self", ".", "predections_a_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_b_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_c_train", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "input_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "\n", "self", ".", "predections_a_test", "=", "self", ".", "model_1", ".", "predict", "(", "self", ".", "model_class", ".", "l_1_test", ")", "\n", "self", ".", "predections_b_test", "=", "self", ".", "model_2", ".", "predict", "(", "self", ".", "model_class", ".", "l_2_test", ")", "\n", "self", ".", "predections_c_test", "=", "self", ".", "model_3", ".", "predict", "(", "self", ".", "model_class", ".", "l_3_test", ")", "\n", "self", ".", "x_test", "=", "np", ".", "concatenate", "(", "(", "self", ".", "predections_a_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_b_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ",", "self", ".", "predections_c_test", "[", "0", "]", "[", ":", ",", ":", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "elif", "mode", "==", "'load'", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename_b", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Sorry, select the right mode option (train/load)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.build_model": [[99, 128], ["Input", "Model", "Dense", "BatchNormalization", "Activation", "Dense", "Activation", "Dense", "Activation", "BatchNormalization", "Lambda", "Dense", "Activation", "Concatenate", "Dense", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "weight_decay", "=", "0.0005", "\n", "basic_dropout_rate", "=", "0.1", "\n", "input", "=", "Input", "(", "shape", "=", "self", ".", "input_shape", ")", "\n", "\n", "task0", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "input", ")", "\n", "task0", "=", "BatchNormalization", "(", ")", "(", "task0", ")", "\n", "task0", "=", "Activation", "(", "'relu'", ")", "(", "task0", ")", "\n", "# task0 = Dense(self.num_classes, use_bias=True, activation='softmax')(task0)", "\n", "# task0 = RBFLayer(128, betas=2)(task0)", "\n", "# model_output = Dense(self.num_classes, use_bias=False, activation='softmax')(task0)", "\n", "model_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "name", "=", "'model_before_softmax'", ")", "(", "task0", ")", "\n", "model_output", "=", "Activation", "(", "'softmax'", ",", "name", "=", "'model_after_softmax'", ")", "(", "model_output", ")", "\n", "\n", "# selection head (g)", "\n", "g", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ")", "(", "task0", ")", "\n", "g", "=", "Activation", "(", "'relu'", ")", "(", "g", ")", "\n", "g", "=", "BatchNormalization", "(", ")", "(", "g", ")", "\n", "g", "=", "Lambda", "(", "lambda", "x", ":", "x", "/", "10", ")", "(", "g", ")", "\n", "g", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ",", "name", "=", "'g_before_sigmoid'", ")", "(", "g", ")", "\n", "g", "=", "Activation", "(", "'sigmoid'", ",", "name", "=", "'g_after_sigmoid'", ")", "(", "g", ")", "\n", "selective_output", "=", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "\"selective_output\"", ")", "(", "[", "model_output", ",", "g", "]", ")", "\n", "\n", "# auxiliary head (h)", "\n", "auxiliary_output", "=", "Dense", "(", "self", ".", "num_classes", ",", "activation", "=", "'softmax'", ",", "name", "=", "'aux'", ")", "(", "task0", ")", "\n", "#auxiliary_output = Activation('softmax', name='aux_after_softmax')(auxiliary_output)", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "input", ",", "outputs", "=", "[", "selective_output", ",", "auxiliary_output", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.sfad.sfad_tiny_b.sfad_b.train": [[129, 172], ["keras.callbacks.LearningRateScheduler", "keras.optimizers.SGD", "model.compile", "model.fit", "model.save_weights", "keras.backend.cast", "keras.backend.sum", "keras.backend.cast", "keras.backend.cast", "keras.backend.mean", "open", "pickle.dump", "keras.backend.categorical_crossentropy", "keras.backend.greater", "keras.backend.floatx", "keras.backend.sum", "keras.backend.floatx", "keras.backend.greater", "keras.backend.floatx", "keras.backend.cast", "keras.backend.repeat_elements", "keras.backend.maximum", "keras.backend.equal", "keras.backend.floatx", "keras.backend.argmax", "keras.backend.argmax", "keras.backend.mean"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "        ", "c", "=", "self", ".", "coverage", "\n", "lamda", "=", "self", ".", "lamda", "\n", "\n", "def", "selective_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "loss", "=", "K", ".", "categorical_crossentropy", "(", "\n", "K", ".", "repeat_elements", "(", "y_pred", "[", ":", ",", "-", "1", ":", "]", ",", "self", ".", "num_classes", ",", "axis", "=", "1", ")", "*", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "y_pred", "[", ":", ",", ":", "-", "1", "]", ")", "+", "lamda", "*", "K", ".", "maximum", "(", "-", "K", ".", "mean", "(", "y_pred", "[", ":", ",", "-", "1", "]", ")", "+", "c", ",", "0", ")", "**", "2", "\n", "return", "loss", "\n", "\n", "", "def", "selective_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "temp1", "=", "K", ".", "sum", "(", "\n", "(", "g", ")", "*", "K", ".", "cast", "(", "K", ".", "equal", "(", "K", ".", "argmax", "(", "y_true", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ",", "K", ".", "argmax", "(", "y_pred", "[", ":", ",", ":", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "temp1", "=", "temp1", "/", "K", ".", "sum", "(", "g", ")", "\n", "return", "K", ".", "cast", "(", "temp1", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "self", ".", "coverage_th", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "", "batch_size", "=", "200", "\n", "maxepoches", "=", "30", "\n", "learning_rate", "=", "0.01", "\n", "lr_decay", "=", "1e-6", "\n", "lr_drop", "=", "10", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "LearningRateScheduler", "(", "lr_scheduler", ")", "\n", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "model", ".", "compile", "(", "loss", "=", "[", "selective_loss", ",", "keras", ".", "losses", ".", "categorical_crossentropy", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "selective_acc", "]", ",", "loss_weights", "=", "[", "0.5", ",", "0.5", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit", "(", "self", ".", "x_train", ",", "[", "self", ".", "y_train", ",", "self", ".", "y_train", "[", ":", ",", ":", "-", "1", "]", "]", ",", "batch_size", "=", "batch_size", ",", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "validation_data", "=", "(", "self", ".", "x_test", ",", "[", "self", ".", "y_test", ",", "self", ".", "y_test", "[", ":", ",", ":", "-", "1", "]", "]", ")", ")", "\n", "\n", "with", "open", "(", "\"results/sfad/{}_history.pkl\"", ".", "format", "(", "self", ".", "filename_b", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "model", ".", "save_weights", "(", "\"results/sfad/{}\"", ".", "format", "(", "self", ".", "filename_b", ")", ")", "\n", "\n", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.Average_Saliency.__init__": [[182, 184], ["None"], "methods", ["None"], ["Activation", "(", "'relu'", ")", ",", "# 1", "\n", "BatchNormalization", "(", ")", ",", "# 2", "\n", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 3", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.Average_Saliency.get_grad": [[185, 187], ["None"], "methods", ["None"], ["Activation", "(", "'relu'", ")", ",", "# 4", "\n", "BatchNormalization", "(", ")", ",", "# 5", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 6", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.Average_Saliency.get_average_grad": [[188, 199], ["numpy.zeros_like", "range", "numpy.random.normal", "util.Average_Saliency.get_mask", "numpy.max", "numpy.min"], "methods", ["None"], ["\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 7", "\n", "Activation", "(", "'relu'", ")", ",", "# 8", "\n", "BatchNormalization", "(", ")", ",", "# 9", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 10", "\n", "Activation", "(", "'relu'", ")", ",", "# 11", "\n", "BatchNormalization", "(", ")", ",", "# 12", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 13", "\n", "\n", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", ",", "# 14", "\n", "Activation", "(", "'relu'", ")", ",", "# 15", "\n", "BatchNormalization", "(", ")", ",", "# 16", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.Single_Saliency.__init__": [[202, 207], ["model.optimizer.get_gradients", "keras.function", "model.get_input_at"], "methods", ["None"], ["BatchNormalization", "(", ")", ",", "# 19", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 20", "\n", "\n", "Flatten", "(", ")", ",", "# 21", "\n", "Dropout", "(", "0.5", ")", ",", "# 22", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.Single_Saliency.get_grad": [[208, 214], ["numpy.expand_dims", "util.Single_Saliency.compute_gradients"], "methods", ["None"], ["Dense", "(", "1024", ",", "kernel_regularizer", "=", "l2", "(", "0.01", ")", ",", "bias_regularizer", "=", "l2", "(", "0.01", ")", ")", ",", "# 23", "\n", "Activation", "(", "'relu'", ")", ",", "# 24", "\n", "BatchNormalization", "(", ")", ",", "# 25", "\n", "Dropout", "(", "0.5", ")", ",", "# 26", "\n", "Dense", "(", "512", ",", "kernel_regularizer", "=", "l2", "(", "0.01", ")", ",", "bias_regularizer", "=", "l2", "(", "0.01", ")", ")", ",", "# 27", "\n", "Activation", "(", "'relu'", ")", ",", "# 28", "\n", "BatchNormalization", "(", ")", ",", "# 29", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_mean": [[37, 43], ["numpy.mean", "numpy.std"], "function", ["None"], ["#     'svhn': {'fgsm': 0.1332, 'bim-a': 0.015, 'bim-b': 0.1024, 'cw-l2': 0.0379}", "\n", "# }", "\n", "\n", "# fined tuned again when retrained all models with X in [-0.5, 0.5]", "\n", "STDEVS", "=", "{", "\n", "'mnist'", ":", "{", "'fgsm_0.03125'", ":", "0.03125", ",", "'fgsm_0.0625'", ":", "0.0625", ",", "'fgsm_0.125'", ":", "0.125", ",", "'fgsm_0.25'", ":", "0.25", ",", "'fgsm_0.3125'", ":", "0.3125", ",", "'fgsm_0.5'", ":", "0.5", ",", "'bim_0.03125'", ":", "0.03125", ",", "'bim_0.0625'", ":", "0.0625", ",", "'bim_0.125'", ":", "0.125", ",", "'bim_0.25'", ":", "0.25", ",", "'bim_0.3125'", ":", "0.3125", ",", "'bim_0.5'", ":", "0.5", ","]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.normalize_linear": [[45, 49], ["None"], "function", ["None"], ["'pgd2_0.25'", ":", "0.03125", ",", "'pgd2_0.3125'", ":", "0.0625", ",", "'pgd2_0.5'", ":", "0.125", ",", "'pgd2_1'", ":", "0.125", ",", "'pgd2_1.5'", ":", "0.25", ",", "'pgd2_2'", ":", "0.3125", ",", "'pgdi_0.03125'", ":", "0.03125", ",", "'pgdi_0.0625'", ":", "0.0625", ",", "'pgdi_0.125'", ":", "0.125", ",", "'pgdi_0.25'", ":", "0.25", ",", "'pgdi_0.3125'", ":", "0.3125", ",", "'pgdi_0.5'", ":", "0.5", ",", "'cwi'", ":", "0.25", ",", "'df'", ":", "0.25", ",", "'hca_0.03125'", ":", "0.03125", ",", "'hca_0.0625'", ":", "0.0625", ",", "'hca_0.125'", ":", "0.125", ",", "'hca_0.25'", ":", "0.25", ",", "'hca_0.3125'", ":", "0.3125", ",", "'hca_0.5'", ":", "0.5", ",", "'sa'", ":", "0.3", ",", "'sta'", ":", "0.3", ",", "'hop'", ":", "0.3", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_cifar10_data": [[51, 57], ["keras.datasets.cifar10.load_data", "x_train.astype.astype", "x_test.astype.astype"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.load_data"], ["'cifar'", ":", "{", "'fgsm_0.03125'", ":", "0.03125", ",", "'fgsm_0.0625'", ":", "0.0625", ",", "'fgsm_0.125'", ":", "0.125", ",", "'fgsm_0.25'", ":", "0.25", ",", "'fgsm_0.3125'", ":", "0.3125", ",", "'fgsm_0.5'", ":", "0.5", ",", "'bim_0.03125'", ":", "0.03125", ",", "'bim_0.0625'", ":", "0.0625", ",", "'bim_0.125'", ":", "0.125", ",", "'bim_0.25'", ":", "0.25", ",", "'bim_0.3125'", ":", "0.3125", ",", "'bim_0.5'", ":", "0.5", ",", "'pgd1_5'", ":", "0.03125", ",", "'pgd1_10'", ":", "0.0625", ",", "'pgd1_15'", ":", "0.125", ",", "'pgd1_20'", ":", "0.125", ",", "'pgd1_25'", ":", "0.125", ",", "'pgd1_30'", ":", "0.25", ",", "'pgd1_40'", ":", "0.3125", ",", "'pgd2_0.25'", ":", "0.03125", ",", "'pgd2_0.3125'", ":", "0.0625", ",", "'pgd2_0.5'", ":", "0.125", ",", "'pgd2_1'", ":", "0.125", ",", "'pgd2_1.5'", ":", "0.25", ",", "'pgd2_2'", ":", "0.3125", ",", "'pgdi_0.03125'", ":", "0.03125", ",", "'pgdi_0.0625'", ":", "0.0625", ",", "'pgdi_0.125'", ":", "0.125", ",", "'pgdi_0.25'", ":", "0.25", ",", "'pgdi_0.3125'", ":", "0.3125", ",", "'pgdi_0.5'", ":", "0.5", ",", "'cwi'", ":", "0.125", ",", "'df'", ":", "0.125", ",", "'hca_0.03125'", ":", "0.03125", ",", "'hca_0.0625'", ":", "0.0625", ",", "'hca_0.125'", ":", "0.125", ",", "'hca_0.25'", ":", "0.25", ",", "'hca_0.3125'", ":", "0.3125", ",", "'hca_0.5'", ":", "0.5", ","]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_mnist_data": [[59, 67], ["keras.datasets.mnist.load_data", "np.reshape.astype", "np.reshape.astype", "numpy.reshape", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.load_data"], ["}", ",", "\n", "'svhn'", ":", "{", "'fgsm_0.03125'", ":", "0.03125", ",", "'fgsm_0.0625'", ":", "0.0625", ",", "'fgsm_0.125'", ":", "0.125", ",", "'fgsm_0.25'", ":", "0.25", ",", "'fgsm_0.3125'", ":", "0.3125", ",", "'fgsm_0.5'", ":", "0.5", ",", "'bim_0.03125'", ":", "0.03125", ",", "'bim_0.0625'", ":", "0.0625", ",", "'bim_0.125'", ":", "0.125", ",", "'bim_0.25'", ":", "0.25", ",", "'bim_0.3125'", ":", "0.3125", ",", "'bim_0.5'", ":", "0.5", ",", "'pgd1_5'", ":", "0.03125", ",", "'pgd1_10'", ":", "0.0625", ",", "'pgd1_15'", ":", "0.125", ",", "'pgd1_20'", ":", "0.125", ",", "'pgd1_25'", ":", "0.125", ",", "'pgd1_30'", ":", "0.25", ",", "'pgd1_40'", ":", "0.3125", ",", "'pgd2_0.25'", ":", "0.03125", ",", "'pgd2_0.3125'", ":", "0.0625", ",", "'pgd2_0.5'", ":", "0.125", ",", "'pgd2_1'", ":", "0.125", ",", "'pgd2_1.5'", ":", "0.25", ",", "'pgd2_2'", ":", "0.3125", ",", "'pgdi_0.03125'", ":", "0.03125", ",", "'pgdi_0.0625'", ":", "0.0625", ",", "'pgdi_0.125'", ":", "0.125", ",", "'pgdi_0.25'", ":", "0.25", ",", "'pgdi_0.3125'", ":", "0.3125", ",", "'pgdi_0.5'", ":", "0.5", ",", "'cwi'", ":", "0.125", ",", "'df'", ":", "0.125", ",", "'hca_0.03125'", ":", "0.03125", ",", "'hca_0.0625'", ":", "0.0625", ",", "'hca_0.125'", ":", "0.125", ",", "'hca_0.25'", ":", "0.25", ",", "'hca_0.3125'", ":", "0.3125", ",", "'hca_0.5'", ":", "0.5", ",", "'sa'", ":", "0.125", ",", "'sta'", ":", "0.125", ",", "'hop'", ":", "0.125", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_svhn_data": [[68, 97], ["scipy.loadmat", "scipy.loadmat", "numpy.transpose", "numpy.transpose", "np.reshape.astype", "np.reshape.astype", "numpy.reshape", "numpy.reshape", "os.path.isfile", "print", "subprocess.call", "os.path.isfile", "print", "subprocess.call", "numpy.reshape", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["}", ",", "\n", "'tiny'", ":", "{", "'fgsm_0.03125'", ":", "0.03125", ",", "'fgsm_0.0625'", ":", "0.0625", ",", "'fgsm_0.125'", ":", "0.125", ",", "'fgsm_0.25'", ":", "0.25", ",", "'fgsm_0.3125'", ":", "0.3125", ",", "'fgsm_0.5'", ":", "0.5", ",", "'bim_0.03125'", ":", "0.03125", ",", "'bim_0.0625'", ":", "0.0625", ",", "'bim_0.125'", ":", "0.125", ",", "'bim_0.25'", ":", "0.25", ",", "'bim_0.3125'", ":", "0.3125", ",", "'bim_0.5'", ":", "0.5", ",", "'pgd1_5'", ":", "0.03125", ",", "'pgd1_10'", ":", "0.0625", ",", "'pgd1_15'", ":", "0.125", ",", "'pgd1_20'", ":", "0.125", ",", "'pgd1_25'", ":", "0.125", ",", "'pgd1_30'", ":", "0.25", ",", "'pgd1_40'", ":", "0.3125", ",", "'pgd2_0.25'", ":", "0.03125", ",", "'pgd2_0.3125'", ":", "0.0625", ",", "'pgd2_0.5'", ":", "0.125", ",", "'pgd2_1'", ":", "0.125", ",", "'pgd2_1.5'", ":", "0.25", ",", "'pgd2_2'", ":", "0.3125", ",", "'pgdi_0.03125'", ":", "0.03125", ",", "'pgdi_0.0625'", ":", "0.0625", ",", "'pgdi_0.125'", ":", "0.125", ",", "'pgdi_0.25'", ":", "0.25", ",", "'pgdi_0.3125'", ":", "0.3125", ",", "'pgdi_0.5'", ":", "0.5", ",", "'cwi'", ":", "0.125", ",", "'df'", ":", "0.125", ",", "'hca_0.03125'", ":", "0.03125", ",", "'hca_0.0625'", ":", "0.0625", ",", "'hca_0.125'", ":", "0.125", ",", "'hca_0.25'", ":", "0.25", ",", "'hca_0.3125'", ":", "0.3125", ",", "'hca_0.5'", ":", "0.5", ",", "'sa'", ":", "0.125", ",", "'sta'", ":", "0.125", ",", "'hop'", ":", "0.125", "\n", "}", ",", "\n", "}", "\n", "\n", "CLIP_MIN", "=", "0.0", "\n", "CLIP_MAX", "=", "1.0", "\n", "# CLIP_MIN = -0.5", "\n", "# CLIP_MAX = 0.5", "\n", "PATH_DATA", "=", "\"data/\"", "\n", "\n", "# Set random seed", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "\n", "def", "get_data", "(", "dataset", "=", "'mnist'", ")", ":", "\n", "    ", "\"\"\"\n    images in [-0.5, 0.5] (instead of [0, 1]) which suits C&W attack and generally gives better performance\n    \n    :param dataset:\n    :return: \n    \"\"\"", "\n", "assert", "dataset", "in", "[", "'mnist'", ",", "'cifar'", ",", "'svhn'", "]", ","]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.load_tiny_imagenet_data": [[98, 123], ["open", "open.read", "numpy.frombuffer", "x_train.astype.reshape", "open", "open.read", "numpy.frombuffer", "y_train.reshape.reshape", "open", "open.read", "numpy.frombuffer", "x_test.astype.reshape", "open", "open.read", "numpy.frombuffer", "y_test.reshape.reshape", "x_train.astype.astype", "x_test.astype.astype"], "function", ["None"], ["\"dataset parameter must be either 'mnist' 'cifar' or 'svhn'\"", "\n", "if", "dataset", "==", "'mnist'", ":", "\n", "# the data, shuffled and split between train and test sets", "\n", "        ", "(", "X_train", ",", "y_train", ")", ",", "(", "X_test", ",", "y_test", ")", "=", "mnist", ".", "load_data", "(", ")", "\n", "# reshape to (n_samples, 28, 28, 1)", "\n", "X_train", "=", "X_train", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", "\n", "X_test", "=", "X_test", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ",", "1", ")", "\n", "", "elif", "dataset", "==", "'cifar'", ":", "\n", "# the data, shuffled and split between train and test sets", "\n", "        ", "(", "X_train", ",", "y_train", ")", ",", "(", "X_test", ",", "y_test", ")", "=", "cifar10", ".", "load_data", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "\"svhn_train.mat\"", ")", ")", ":", "\n", "            ", "print", "(", "'Downloading SVHN train set...'", ")", "\n", "call", "(", "\n", "\"curl -o ../data/svhn_train.mat \"", "\n", "\"http://ufldl.stanford.edu/housenumbers/train_32x32.mat\"", ",", "\n", "shell", "=", "True", "\n", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "\"svhn_test.mat\"", ")", ")", ":", "\n", "            ", "print", "(", "'Downloading SVHN test set...'", ")", "\n", "call", "(", "\n", "\"curl -o ../data/svhn_test.mat \"", "\n", "\"http://ufldl.stanford.edu/housenumbers/test_32x32.mat\"", ",", "\n", "shell", "=", "True", "\n", ")", "\n", "", "train", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "'svhn_train.mat'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.toCat_onehot": [[124, 129], ["keras.utils.to_categorical", "keras.utils.to_categorical"], "function", ["None"], ["test", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "PATH_DATA", ",", "'svhn_test.mat'", ")", ")", "\n", "X_train", "=", "np", ".", "transpose", "(", "train", "[", "'X'", "]", ",", "axes", "=", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "X_test", "=", "np", ".", "transpose", "(", "test", "[", "'X'", "]", ",", "axes", "=", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "# reshape (n_samples, 1) to (n_samples,) and change 1-index", "\n", "# to 0-index", "\n", "y_train", "=", "np", ".", "reshape", "(", "train", "[", "'y'", "]", ",", "(", "-", "1", ",", ")", ")", "-", "1", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.get_tpr_fpr": [[130, 141], ["numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.logical_and"], "function", ["None"], ["y_test", "=", "np", ".", "reshape", "(", "test", "[", "'y'", "]", ",", "(", "-", "1", ",", ")", ")", "-", "1", "\n", "\n", "# cast pixels to floats, normalize to [0, 1] range", "\n", "", "X_train", "=", "X_train", ".", "astype", "(", "'float32'", ")", "\n", "X_test", "=", "X_test", ".", "astype", "(", "'float32'", ")", "\n", "X_train", "=", "(", "X_train", "/", "255.0", ")", "-", "(", "1.0", "-", "CLIP_MAX", ")", "\n", "X_test", "=", "(", "X_test", "/", "255.0", ")", "-", "(", "1.0", "-", "CLIP_MAX", ")", "\n", "\n", "# one-hot-encode the labels", "\n", "Y_train", "=", "np_utils", ".", "to_categorical", "(", "y_train", ",", "10", ")", "\n", "Y_test", "=", "np_utils", ".", "to_categorical", "(", "y_test", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.evalulate_detection_test": [[143, 147], ["sklearn.metrics.accuracy_score", "util.get_tpr_fpr"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.get_tpr_fpr"], ["print", "(", "\"Y_train:\"", ",", "Y_train", ".", "shape", ")", "\n", "print", "(", "\"X_test:\"", ",", "X_test", ".", "shape", ")", "\n", "print", "(", "\"Y_test\"", ",", "Y_test", ".", "shape", ")", "\n", "\n", "return", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.merge_and_generate_labels": [[148, 169], ["numpy.asarray", "print", "X_pos.reshape.reshape", "numpy.asarray", "print", "X_neg.reshape.reshape", "numpy.concatenate", "numpy.concatenate", "y.reshape.reshape", "numpy.ones", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print", "home.repos.pwc.inspect_result.aldahdooh_detectors_review.magnet.worker.Evaluator.print"], ["\n", "", "def", "get_model", "(", "dataset", "=", "'mnist'", ",", "softmax", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Takes in a parameter indicating which model type to use ('mnist',\n    'cifar' or 'svhn') and returns the appropriate Keras model.\n    :param dataset: A string indicating which dataset we are building\n                    a model for.\n    :param softmax: if add softmax to the last layer.\n    :return: The model; a Keras 'Sequential' instance.\n    \"\"\"", "\n", "assert", "dataset", "in", "[", "'mnist'", ",", "'cifar'", ",", "'svhn'", "]", ",", "\"dataset parameter must be either 'mnist' 'cifar' or 'svhn'\"", "\n", "if", "dataset", "==", "'mnist'", ":", "\n", "# MNIST model: 0, 2, 7, 10", "\n", "        ", "layers", "=", "[", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'valid'", ",", "input_shape", "=", "(", "28", ",", "28", ",", "1", ")", ")", ",", "# 0", "\n", "Activation", "(", "'relu'", ")", ",", "# 1", "\n", "BatchNormalization", "(", ")", ",", "# 2", "\n", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ",", "# 3", "\n", "Activation", "(", "'relu'", ")", ",", "# 4", "\n", "BatchNormalization", "(", ")", ",", "# 5", "\n", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ",", "# 6", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.get_next_class": [[170, 175], ["numpy.argmax", "numpy.eye"], "function", ["None"], ["Dropout", "(", "0.5", ")", ",", "# 7", "\n", "Flatten", "(", ")", ",", "# 8", "\n", "Dense", "(", "128", ")", ",", "# 9            ", "\n", "Activation", "(", "'relu'", ")", ",", "# 10", "\n", "BatchNormalization", "(", ")", ",", "# 11", "\n", "Dropout", "(", "0.5", ")", ",", "# 12", "\n"]], "home.repos.pwc.inspect_result.aldahdooh_detectors_review.common.util.get_least_likely_class": [[176, 180], ["numpy.argmin", "numpy.eye"], "function", ["None"], ["Dense", "(", "10", ")", ",", "# 13", "\n", "]", "\n", "", "elif", "dataset", "==", "'cifar'", ":", "\n", "# CIFAR-10 model", "\n", "        ", "layers", "=", "[", "\n"]]}