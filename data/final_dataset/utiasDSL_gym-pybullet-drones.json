{"home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.__init__": [[19, 69], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "os.path.exists", "os.mkdir"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "logging_freq_hz", ":", "int", ",", "\n", "output_folder", ":", "str", "=", "\"results\"", ",", "\n", "num_drones", ":", "int", "=", "1", ",", "\n", "duration_sec", ":", "int", "=", "0", ",", "\n", "colab", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Logger class __init__ method.\n\n        Note: the order in which information is stored by Logger.log() is not the same\n        as the one in, e.g., the obs[\"id\"][\"state\"], check the implementation below.\n\n        Parameters\n        ----------\n        logging_freq_hz : int\n            Logging frequency in Hz.\n        num_drones : int, optional\n            Number of drones.\n        duration_sec : int, optional\n            Used to preallocate the log arrays (improves performance).\n\n        \"\"\"", "\n", "self", ".", "COLAB", "=", "colab", "\n", "self", ".", "OUTPUT_FOLDER", "=", "output_folder", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "OUTPUT_FOLDER", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "OUTPUT_FOLDER", ")", "\n", "", "self", ".", "LOGGING_FREQ_HZ", "=", "logging_freq_hz", "\n", "self", ".", "NUM_DRONES", "=", "num_drones", "\n", "self", ".", "PREALLOCATED_ARRAYS", "=", "False", "if", "duration_sec", "==", "0", "else", "True", "\n", "self", ".", "counters", "=", "np", ".", "zeros", "(", "num_drones", ")", "\n", "self", ".", "timestamps", "=", "np", ".", "zeros", "(", "(", "num_drones", ",", "duration_sec", "*", "self", ".", "LOGGING_FREQ_HZ", ")", ")", "\n", "#### Note: this is the suggest information to log ##############################", "\n", "self", ".", "states", "=", "np", ".", "zeros", "(", "(", "num_drones", ",", "16", ",", "duration_sec", "*", "self", ".", "LOGGING_FREQ_HZ", ")", ")", "#### 16 states: pos_x,", "\n", "# pos_y,", "\n", "# pos_z,", "\n", "# vel_x,", "\n", "# vel_y,", "\n", "# vel_z,", "\n", "# roll,", "\n", "# pitch,", "\n", "# yaw,", "\n", "# ang_vel_x,", "\n", "# ang_vel_y,", "\n", "# ang_vel_z,", "\n", "# rpm0,", "\n", "# rpm1,", "\n", "# rpm2,", "\n", "# rpm3", "\n", "#### Note: this is the suggest information to log ##############################", "\n", "self", ".", "controls", "=", "np", ".", "zeros", "(", "(", "num_drones", ",", "12", ",", "duration_sec", "*", "self", ".", "LOGGING_FREQ_HZ", ")", ")", "#### 12 control targets: pos_x,", "\n", "# pos_y,", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.log": [[83, 120], ["numpy.zeros", "int", "numpy.hstack", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "\n", "drone", ":", "int", ",", "\n", "timestamp", ",", "\n", "state", ",", "\n", "control", "=", "np", ".", "zeros", "(", "12", ")", "\n", ")", ":", "\n", "        ", "\"\"\"Logs entries for a single simulation step, of a single drone.\n\n        Parameters\n        ----------\n        drone : int\n            Id of the drone associated to the log entry.\n        timestamp : float\n            Timestamp of the log in simulation clock.\n        state : ndarray\n            (20,)-shaped array of floats containing the drone's state.\n        control : ndarray, optional\n            (12,)-shaped array of floats containing the drone's control target.\n\n        \"\"\"", "\n", "if", "drone", "<", "0", "or", "drone", ">=", "self", ".", "NUM_DRONES", "or", "timestamp", "<", "0", "or", "len", "(", "state", ")", "!=", "20", "or", "len", "(", "control", ")", "!=", "12", ":", "\n", "            ", "print", "(", "\"[ERROR] in Logger.log(), invalid data\"", ")", "\n", "", "current_counter", "=", "int", "(", "self", ".", "counters", "[", "drone", "]", ")", "\n", "#### Add rows to the matrices if a counter exceeds their size", "\n", "if", "current_counter", ">=", "self", ".", "timestamps", ".", "shape", "[", "1", "]", ":", "\n", "            ", "self", ".", "timestamps", "=", "np", ".", "concatenate", "(", "(", "self", ".", "timestamps", ",", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "states", "=", "np", ".", "concatenate", "(", "(", "self", ".", "states", ",", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "16", ",", "1", ")", ")", ")", ",", "axis", "=", "2", ")", "\n", "self", ".", "controls", "=", "np", ".", "concatenate", "(", "(", "self", ".", "controls", ",", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "12", ",", "1", ")", ")", ")", ",", "axis", "=", "2", ")", "\n", "#### Advance a counter is the matrices have overgrown it ###", "\n", "", "elif", "not", "self", ".", "PREALLOCATED_ARRAYS", "and", "self", ".", "timestamps", ".", "shape", "[", "1", "]", ">", "current_counter", ":", "\n", "            ", "current_counter", "=", "self", ".", "timestamps", ".", "shape", "[", "1", "]", "-", "1", "\n", "#### Log the information and increase the counter ##########", "\n", "", "self", ".", "timestamps", "[", "drone", ",", "current_counter", "]", "=", "timestamp", "\n", "#### Re-order the kinematic obs (of most Aviaries) #########", "\n", "self", ".", "states", "[", "drone", ",", ":", ",", "current_counter", "]", "=", "np", ".", "hstack", "(", "[", "state", "[", "0", ":", "3", "]", ",", "state", "[", "10", ":", "13", "]", ",", "state", "[", "7", ":", "10", "]", ",", "state", "[", "13", ":", "20", "]", "]", ")", "\n", "self", ".", "controls", "[", "drone", ",", ":", ",", "current_counter", "]", "=", "control", "\n", "self", ".", "counters", "[", "drone", "]", "=", "current_counter", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save": [[123, 128], ["open", "numpy.savez", "os.path.join", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "\"\"\"Save the logs to file.\n        \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "OUTPUT_FOLDER", ",", "\"save-flight-\"", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m.%d.%Y_%H.%M.%S\"", ")", "+", "\".npy\"", ")", ",", "'wb'", ")", "as", "out_file", ":", "\n", "            ", "np", ".", "savez", "(", "out_file", ",", "timestamps", "=", "self", ".", "timestamps", ",", "states", "=", "self", ".", "states", ",", "controls", "=", "self", ".", "controls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save_as_csv": [[131, 202], ["os.path.join", "numpy.arange", "range", "os.path.exists", "os.makedirs", "datetime.datetime.datetime.now().strftime", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.hstack", "numpy.savetxt", "open", "numpy.hstack", "numpy.savetxt", "open", "numpy.hstack", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "open", "numpy.savetxt", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "datetime.datetime.datetime.now", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "save_as_csv", "(", "self", ",", "\n", "comment", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "\"\"\"Save the logs---on your Desktop---as comma separated values.\n\n        Parameters\n        ----------\n        comment : str, optional\n            Added to the foldername.\n\n        \"\"\"", "\n", "csv_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "OUTPUT_FOLDER", ",", "\"save-flight-\"", "+", "comment", "+", "\"-\"", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m.%d.%Y_%H.%M.%S\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "csv_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "csv_dir", "+", "'/'", ")", "\n", "", "t", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "timestamps", ".", "shape", "[", "1", "]", "/", "self", ".", "LOGGING_FREQ_HZ", ",", "1", "/", "self", ".", "LOGGING_FREQ_HZ", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "with", "open", "(", "csv_dir", "+", "\"/x\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "0", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/y\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "1", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/z\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "2", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "####", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/r\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "6", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/p\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "7", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/ya\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "8", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "####", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/rr\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "rdot", "=", "np", ".", "hstack", "(", "[", "0", ",", "(", "self", ".", "states", "[", "i", ",", "6", ",", "1", ":", "]", "-", "self", ".", "states", "[", "i", ",", "6", ",", "0", ":", "-", "1", "]", ")", "*", "self", ".", "LOGGING_FREQ_HZ", "]", ")", "\n", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "rdot", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/pr\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "pdot", "=", "np", ".", "hstack", "(", "[", "0", ",", "(", "self", ".", "states", "[", "i", ",", "7", ",", "1", ":", "]", "-", "self", ".", "states", "[", "i", ",", "7", ",", "0", ":", "-", "1", "]", ")", "*", "self", ".", "LOGGING_FREQ_HZ", "]", ")", "\n", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "pdot", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/yar\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "ydot", "=", "np", ".", "hstack", "(", "[", "0", ",", "(", "self", ".", "states", "[", "i", ",", "8", ",", "1", ":", "]", "-", "self", ".", "states", "[", "i", ",", "8", ",", "0", ":", "-", "1", "]", ")", "*", "self", ".", "LOGGING_FREQ_HZ", "]", ")", "\n", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "ydot", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "###", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/vx\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "3", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/vy\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "4", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/vz\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "5", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "####", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/wx\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "9", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/wy\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "10", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/wz\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "11", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "####", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/rpm0-\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "12", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/rpm1-\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "13", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/rpm2-\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "14", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/rpm3-\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "self", ".", "states", "[", "i", ",", "15", ",", ":", "]", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "####", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/pwm0-\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "(", "self", ".", "states", "[", "i", ",", "12", ",", ":", "]", "-", "4070.3", ")", "/", "0.2685", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/pwm1-\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "(", "self", ".", "states", "[", "i", ",", "13", ",", ":", "]", "-", "4070.3", ")", "/", "0.2685", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/pwm2-\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "(", "self", ".", "states", "[", "i", ",", "14", ",", ":", "]", "-", "4070.3", ")", "/", "0.2685", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "", "with", "open", "(", "csv_dir", "+", "\"/pwm3-\"", "+", "str", "(", "i", ")", "+", "\".csv\"", ",", "'wb'", ")", "as", "out_file", ":", "\n", "                ", "np", ".", "savetxt", "(", "out_file", ",", "np", ".", "transpose", "(", "np", ".", "vstack", "(", "[", "t", ",", "(", "self", ".", "states", "[", "i", ",", "15", ",", ":", "]", "-", "4070.3", ")", "/", "0.2685", "]", ")", ")", ",", "delimiter", "=", "\",\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot": [[205, 380], ["matplotlib.rc", "matplotlib.subplots", "numpy.arange", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "axs[].plot", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "axs[].set_xlabel", "axs[].set_ylabel", "range", "range", "axs[].set_xlabel", "range", "axs[].set_xlabel", "range", "axs[].set_xlabel", "range", "axs[].set_xlabel", "range", "fig.subplots_adjust", "axs[].plot", "axs[].plot", "axs[].plot", "axs[].plot", "axs[].plot", "axs[].plot", "axs[].plot", "axs[].plot", "axs[].plot", "axs[].plot", "axs[].plot", "axs[].plot", "numpy.hstack", "axs[].plot", "numpy.hstack", "axs[].plot", "numpy.hstack", "axs[].plot", "range", "axs[].plot", "axs[].set_ylabel", "axs[].set_ylabel", "axs[].plot", "axs[].set_ylabel", "axs[].set_ylabel", "axs[].plot", "axs[].set_ylabel", "axs[].set_ylabel", "axs[].plot", "axs[].set_ylabel", "axs[].set_ylabel", "range", "matplotlib.savefig", "matplotlib.show", "axs[].grid", "axs[].legend", "os.path.join", "cycler.cycler.cycler", "cycler.cycler.cycler", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot"], ["", "", "", "def", "plot", "(", "self", ",", "pwm", "=", "False", ")", ":", "\n", "        ", "\"\"\"Logs entries for a single simulation step, of a single drone.\n\n        Parameters\n        ----------\n        pwm : bool, optional\n            If True, converts logged RPM into PWM values (for Crazyflies).\n\n        \"\"\"", "\n", "#### Loop over colors and line styles ######################", "\n", "plt", ".", "rc", "(", "'axes'", ",", "prop_cycle", "=", "(", "cycler", "(", "'color'", ",", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'y'", "]", ")", "+", "cycler", "(", "'linestyle'", ",", "[", "'-'", ",", "'--'", ",", "':'", ",", "'-.'", "]", ")", ")", ")", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "10", ",", "2", ")", "\n", "t", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "timestamps", ".", "shape", "[", "1", "]", "/", "self", ".", "LOGGING_FREQ_HZ", ",", "1", "/", "self", ".", "LOGGING_FREQ_HZ", ")", "\n", "\n", "#### Column ################################################", "\n", "col", "=", "0", "\n", "\n", "#### XYZ ###################################################", "\n", "row", "=", "0", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "0", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'x (m)'", ")", "\n", "\n", "row", "=", "1", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "1", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'y (m)'", ")", "\n", "\n", "row", "=", "2", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "2", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'z (m)'", ")", "\n", "\n", "#### RPY ###################################################", "\n", "row", "=", "3", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "6", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'r (rad)'", ")", "\n", "row", "=", "4", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "7", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'p (rad)'", ")", "\n", "row", "=", "5", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "8", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'y (rad)'", ")", "\n", "\n", "#### Ang Vel ###############################################", "\n", "row", "=", "6", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "9", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'wx'", ")", "\n", "row", "=", "7", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "10", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'wy'", ")", "\n", "row", "=", "8", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "11", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'wz'", ")", "\n", "\n", "#### Time ##################################################", "\n", "row", "=", "9", "\n", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "t", ",", "label", "=", "\"time\"", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'time'", ")", "\n", "\n", "#### Column ################################################", "\n", "col", "=", "1", "\n", "\n", "#### Velocity ##############################################", "\n", "row", "=", "0", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "3", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'vx (m/s)'", ")", "\n", "row", "=", "1", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "4", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'vy (m/s)'", ")", "\n", "row", "=", "2", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "5", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'vz (m/s)'", ")", "\n", "\n", "#### RPY Rates #############################################", "\n", "row", "=", "3", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "rdot", "=", "np", ".", "hstack", "(", "[", "0", ",", "(", "self", ".", "states", "[", "j", ",", "6", ",", "1", ":", "]", "-", "self", ".", "states", "[", "j", ",", "6", ",", "0", ":", "-", "1", "]", ")", "*", "self", ".", "LOGGING_FREQ_HZ", "]", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "rdot", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'rdot (rad/s)'", ")", "\n", "row", "=", "4", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "pdot", "=", "np", ".", "hstack", "(", "[", "0", ",", "(", "self", ".", "states", "[", "j", ",", "7", ",", "1", ":", "]", "-", "self", ".", "states", "[", "j", ",", "7", ",", "0", ":", "-", "1", "]", ")", "*", "self", ".", "LOGGING_FREQ_HZ", "]", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "pdot", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'pdot (rad/s)'", ")", "\n", "row", "=", "5", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "ydot", "=", "np", ".", "hstack", "(", "[", "0", ",", "(", "self", ".", "states", "[", "j", ",", "8", ",", "1", ":", "]", "-", "self", ".", "states", "[", "j", ",", "8", ",", "0", ":", "-", "1", "]", ")", "*", "self", ".", "LOGGING_FREQ_HZ", "]", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "ydot", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'ydot (rad/s)'", ")", "\n", "\n", "### This IF converts RPM into PWM for all drones ###########", "\n", "#### except drone_0 (only used in examples/compare.py) #####", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "12", ",", "16", ")", ":", "\n", "                ", "if", "pwm", "and", "j", ">", "0", ":", "\n", "                    ", "self", ".", "states", "[", "j", ",", "i", ",", ":", "]", "=", "(", "self", ".", "states", "[", "j", ",", "i", ",", ":", "]", "-", "4070.3", ")", "/", "0.2685", "\n", "\n", "#### RPMs ##################################################", "\n", "", "", "", "row", "=", "6", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "12", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "if", "pwm", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'PWM0'", ")", "\n", "", "else", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'RPM0'", ")", "\n", "", "row", "=", "7", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "13", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "if", "pwm", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'PWM1'", ")", "\n", "", "else", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'RPM1'", ")", "\n", "", "row", "=", "8", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "14", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "if", "pwm", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'PWM2'", ")", "\n", "", "else", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'RPM2'", ")", "\n", "", "row", "=", "9", "\n", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "t", ",", "self", ".", "states", "[", "j", ",", "15", ",", ":", "]", ",", "label", "=", "\"drone_\"", "+", "str", "(", "j", ")", ")", "\n", "", "axs", "[", "row", ",", "col", "]", ".", "set_xlabel", "(", "'time'", ")", "\n", "if", "pwm", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'PWM3'", ")", "\n", "", "else", ":", "\n", "            ", "axs", "[", "row", ",", "col", "]", ".", "set_ylabel", "(", "'RPM3'", ")", "\n", "\n", "#### Drawing options #######################################", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                ", "axs", "[", "i", ",", "j", "]", ".", "grid", "(", "True", ")", "\n", "axs", "[", "i", ",", "j", "]", ".", "legend", "(", "loc", "=", "'upper right'", ",", "\n", "frameon", "=", "True", "\n", ")", "\n", "", "", "fig", ".", "subplots_adjust", "(", "left", "=", "0.06", ",", "\n", "bottom", "=", "0.05", ",", "\n", "right", "=", "0.99", ",", "\n", "top", "=", "0.98", ",", "\n", "wspace", "=", "0.15", ",", "\n", "hspace", "=", "0.0", "\n", ")", "\n", "if", "self", ".", "COLAB", ":", "\n", "            ", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "'results'", ",", "'output_figure.png'", ")", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.sync": [[10, 30], ["time.time", "time.sleep", "int"], "function", ["None"], ["def", "sync", "(", "i", ",", "start_time", ",", "timestep", ")", ":", "\n", "    ", "\"\"\"Syncs the stepped simulation with the wall-clock.\n\n    Function `sync` calls time.sleep() to pause a for-loop\n    running faster than the expected timestep.\n\n    Parameters\n    ----------\n    i : int\n        Current simulation iteration.\n    start_time : timestamp\n        Timestamp of the simulation start.\n    timestep : float\n        Desired, wall-clock step of the simulation's rendering.\n\n    \"\"\"", "\n", "if", "timestep", ">", ".04", "or", "i", "%", "(", "int", "(", "1", "/", "(", "24", "*", "timestep", ")", ")", ")", "==", "0", ":", "\n", "        ", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "if", "elapsed", "<", "(", "i", "*", "timestep", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "timestep", "*", "i", "-", "elapsed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.str2bool": [[33, 55], ["isinstance", "val.lower", "val.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "", "", "def", "str2bool", "(", "val", ")", ":", "\n", "    ", "\"\"\"Converts a string into a boolean.\n\n    Parameters\n    ----------\n    val : str | bool\n        Input value (possibly string) to interpret as boolean.\n\n    Returns\n    -------\n    bool\n        Interpretation of `val` as True or False.\n\n    \"\"\"", "\n", "if", "isinstance", "(", "val", ",", "bool", ")", ":", "\n", "        ", "return", "val", "\n", "", "elif", "val", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "val", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"[ERROR] in str2bool(), a Boolean value is expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.nnlsRPM": [[58, 134], ["numpy.multiply", "numpy.dot", "numpy.sqrt", "print", "print", "print", "print", "numpy.array", "numpy.min", "scipy.optimize.nnls", "numpy.abs", "numpy.abs", "numpy.abs", "print", "print", "print", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "", "def", "nnlsRPM", "(", "thrust", ",", "\n", "x_torque", ",", "\n", "y_torque", ",", "\n", "z_torque", ",", "\n", "counter", ",", "\n", "max_thrust", ",", "\n", "max_xy_torque", ",", "\n", "max_z_torque", ",", "\n", "a", ",", "\n", "inv_a", ",", "\n", "b_coeff", ",", "\n", "gui", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Non-negative Least Squares (NNLS) RPMs from desired thrust and torques.\n\n    This function uses the NNLS implementation in `scipy.optimize`.\n\n    Parameters\n    ----------\n    thrust : float\n        Desired thrust along the drone's z-axis.\n    x_torque : float\n        Desired drone's x-axis torque.\n    y_torque : float\n        Desired drone's y-axis torque.\n    z_torque : float\n        Desired drone's z-axis torque.\n    counter : int\n        Simulation or control iteration, only used for printouts.\n    max_thrust : float\n        Maximum thrust of the quadcopter.\n    max_xy_torque : float\n        Maximum torque around the x and y axes of the quadcopter.\n    max_z_torque : float\n        Maximum torque around the z axis of the quadcopter.\n    a : ndarray\n        (4, 4)-shaped array of floats containing the motors configuration.\n    inv_a : ndarray\n        (4, 4)-shaped array of floats, inverse of a.\n    b_coeff : ndarray\n        (4,1)-shaped array of floats containing the coefficients to re-scale thrust and torques. \n    gui : boolean, optional\n        Whether a GUI is active or not, only used for printouts.\n\n    Returns\n    -------\n    ndarray\n        (4,)-shaped array of ints containing the desired RPMs of each propeller.\n\n    \"\"\"", "\n", "#### Check the feasibility of thrust and torques ###########", "\n", "if", "gui", "and", "thrust", "<", "0", "or", "thrust", ">", "max_thrust", ":", "\n", "        ", "print", "(", "\"[WARNING] iter\"", ",", "counter", ",", "\"in utils.nnlsRPM(), unfeasible thrust {:.2f} outside range [0, {:.2f}]\"", ".", "format", "(", "thrust", ",", "max_thrust", ")", ")", "\n", "", "if", "gui", "and", "np", ".", "abs", "(", "x_torque", ")", ">", "max_xy_torque", ":", "\n", "        ", "print", "(", "\"[WARNING] iter\"", ",", "counter", ",", "\"in utils.nnlsRPM(), unfeasible roll torque {:.2f} outside range [{:.2f}, {:.2f}]\"", ".", "format", "(", "x_torque", ",", "-", "max_xy_torque", ",", "max_xy_torque", ")", ")", "\n", "", "if", "gui", "and", "np", ".", "abs", "(", "y_torque", ")", ">", "max_xy_torque", ":", "\n", "        ", "print", "(", "\"[WARNING] iter\"", ",", "counter", ",", "\"in utils.nnlsRPM(), unfeasible pitch torque {:.2f} outside range [{:.2f}, {:.2f}]\"", ".", "format", "(", "y_torque", ",", "-", "max_xy_torque", ",", "max_xy_torque", ")", ")", "\n", "", "if", "gui", "and", "np", ".", "abs", "(", "z_torque", ")", ">", "max_z_torque", ":", "\n", "        ", "print", "(", "\"[WARNING] iter\"", ",", "counter", ",", "\"in utils.nnlsRPM(), unfeasible yaw torque {:.2f} outside range [{:.2f}, {:.2f}]\"", ".", "format", "(", "z_torque", ",", "-", "max_z_torque", ",", "max_z_torque", ")", ")", "\n", "", "B", "=", "np", ".", "multiply", "(", "np", ".", "array", "(", "[", "thrust", ",", "x_torque", ",", "y_torque", ",", "z_torque", "]", ")", ",", "b_coeff", ")", "\n", "sq_rpm", "=", "np", ".", "dot", "(", "inv_a", ",", "B", ")", "\n", "#### NNLS if any of the desired ang vel is negative ########", "\n", "if", "np", ".", "min", "(", "sq_rpm", ")", "<", "0", ":", "\n", "        ", "sol", ",", "res", "=", "nnls", "(", "a", ",", "\n", "B", ",", "\n", "maxiter", "=", "3", "*", "a", ".", "shape", "[", "1", "]", "\n", ")", "\n", "if", "gui", ":", "\n", "            ", "print", "(", "\"[WARNING] iter\"", ",", "counter", ",", "\"in utils.nnlsRPM(), unfeasible squared rotor speeds, using NNLS\"", ")", "\n", "print", "(", "\"Negative sq. rotor speeds:\\t [{:.2f}, {:.2f}, {:.2f}, {:.2f}]\"", ".", "format", "(", "sq_rpm", "[", "0", "]", ",", "sq_rpm", "[", "1", "]", ",", "sq_rpm", "[", "2", "]", ",", "sq_rpm", "[", "3", "]", ")", ",", "\n", "\"\\t\\tNormalized: [{:.2f}, {:.2f}, {:.2f}, {:.2f}]\"", ".", "format", "(", "sq_rpm", "[", "0", "]", "/", "np", ".", "linalg", ".", "norm", "(", "sq_rpm", ")", ",", "sq_rpm", "[", "1", "]", "/", "np", ".", "linalg", ".", "norm", "(", "sq_rpm", ")", ",", "sq_rpm", "[", "2", "]", "/", "np", ".", "linalg", ".", "norm", "(", "sq_rpm", ")", ",", "sq_rpm", "[", "3", "]", "/", "np", ".", "linalg", ".", "norm", "(", "sq_rpm", ")", ")", ")", "\n", "print", "(", "\"NNLS:\\t\\t\\t\\t [{:.2f}, {:.2f}, {:.2f}, {:.2f}]\"", ".", "format", "(", "sol", "[", "0", "]", ",", "sol", "[", "1", "]", ",", "sol", "[", "2", "]", ",", "sol", "[", "3", "]", ")", ",", "\n", "\"\\t\\t\\tNormalized: [{:.2f}, {:.2f}, {:.2f}, {:.2f}]\"", ".", "format", "(", "sol", "[", "0", "]", "/", "np", ".", "linalg", ".", "norm", "(", "sol", ")", ",", "sol", "[", "1", "]", "/", "np", ".", "linalg", ".", "norm", "(", "sol", ")", ",", "sol", "[", "2", "]", "/", "np", ".", "linalg", ".", "norm", "(", "sol", ")", ",", "sol", "[", "3", "]", "/", "np", ".", "linalg", ".", "norm", "(", "sol", ")", ")", ",", "\n", "\"\\t\\tResidual: {:.2f}\"", ".", "format", "(", "res", ")", ")", "\n", "", "sq_rpm", "=", "sol", "\n", "", "return", "np", ".", "sqrt", "(", "sq_rpm", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.examples.downwash.run": [[34, 129], ["numpy.array", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary", "numpy.zeros", "range", "numpy.array", "gym_pybullet_drones.utils.Logger.Logger", "int", "time.time", "range", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.close", "gym_pybullet_drones.utils.Logger.Logger.save", "gym_pybullet_drones.utils.Logger.Logger.save_as_csv", "int", "gym_pybullet_drones.control.DSLPIDControl.DSLPIDControl", "numpy.floor", "str", "numpy.array", "int", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.step", "range", "gym_pybullet_drones.utils.Logger.Logger.plot", "int", "int", "range", "range", "range", "range", "gym_pybullet_drones.utils.Logger.Logger.log", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.render", "gym_pybullet_drones.utils.utils.sync", "numpy.cos", "ctrl[].computeControlFromState", "numpy.hstack", "numpy.hstack", "str", "numpy.zeros", "str", "str"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.close", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save_as_csv", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.step", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.log", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.render", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.sync", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl.computeControlFromState"], ["def", "run", "(", "\n", "drone", "=", "DEFAULT_DRONE", ",", "\n", "gui", "=", "DEFAULT_GUI", ",", "\n", "record_video", "=", "DEFAULT_RECORD_VIDEO", ",", "\n", "simulation_freq_hz", "=", "DEFAULT_SIMULATION_FREQ_HZ", ",", "\n", "control_freq_hz", "=", "DEFAULT_CONTROL_FREQ_HZ", ",", "\n", "aggregate", "=", "DEFAULT_AGGREGATE", ",", "\n", "duration_sec", "=", "DEFAULT_DURATION_SEC", ",", "\n", "output_folder", "=", "DEFAULT_OUTPUT_FOLDER", ",", "\n", "plot", "=", "True", ",", "\n", "colab", "=", "DEFAULT_COLAB", "\n", ")", ":", "\n", "#### Initialize the simulation #############################", "\n", "    ", "INIT_XYZS", "=", "np", ".", "array", "(", "[", "[", ".5", ",", "0", ",", "1", "]", ",", "[", "-", ".5", ",", "0", ",", ".5", "]", "]", ")", "\n", "AGGR_PHY_STEPS", "=", "int", "(", "simulation_freq_hz", "/", "control_freq_hz", ")", "if", "aggregate", "else", "1", "\n", "env", "=", "CtrlAviary", "(", "drone_model", "=", "drone", ",", "\n", "num_drones", "=", "2", ",", "\n", "initial_xyzs", "=", "INIT_XYZS", ",", "\n", "physics", "=", "Physics", ".", "PYB_DW", ",", "\n", "neighbourhood_radius", "=", "10", ",", "\n", "freq", "=", "simulation_freq_hz", ",", "\n", "aggregate_phy_steps", "=", "AGGR_PHY_STEPS", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record_video", ",", "\n", "obstacles", "=", "True", "\n", ")", "\n", "\n", "#### Initialize the trajectories ###########################", "\n", "PERIOD", "=", "5", "\n", "NUM_WP", "=", "control_freq_hz", "*", "PERIOD", "\n", "TARGET_POS", "=", "np", ".", "zeros", "(", "(", "NUM_WP", ",", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "NUM_WP", ")", ":", "\n", "        ", "TARGET_POS", "[", "i", ",", ":", "]", "=", "[", "0.5", "*", "np", ".", "cos", "(", "2", "*", "np", ".", "pi", "*", "(", "i", "/", "NUM_WP", ")", ")", ",", "0", "]", "\n", "", "wp_counters", "=", "np", ".", "array", "(", "[", "0", ",", "int", "(", "NUM_WP", "/", "2", ")", "]", ")", "\n", "\n", "#### Initialize the logger #################################", "\n", "logger", "=", "Logger", "(", "logging_freq_hz", "=", "int", "(", "simulation_freq_hz", "/", "AGGR_PHY_STEPS", ")", ",", "\n", "num_drones", "=", "2", ",", "\n", "duration_sec", "=", "duration_sec", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", "colab", "=", "colab", "\n", ")", "\n", "\n", "#### Initialize the controllers ############################", "\n", "ctrl", "=", "[", "DSLPIDControl", "(", "drone_model", "=", "drone", ")", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "\n", "#### Run the simulation ####################################", "\n", "CTRL_EVERY_N_STEPS", "=", "int", "(", "np", ".", "floor", "(", "env", ".", "SIM_FREQ", "/", "control_freq_hz", ")", ")", "\n", "action", "=", "{", "str", "(", "i", ")", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "for", "i", "in", "range", "(", "2", ")", "}", "\n", "START", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "int", "(", "duration_sec", "*", "env", ".", "SIM_FREQ", ")", ",", "AGGR_PHY_STEPS", ")", ":", "\n", "\n", "#### Step the simulation ###################################", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "#### Compute control at the desired frequency ##############", "\n", "if", "i", "%", "CTRL_EVERY_N_STEPS", "==", "0", ":", "\n", "\n", "#### Compute control for the current way point #############", "\n", "            ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                ", "action", "[", "str", "(", "j", ")", "]", ",", "_", ",", "_", "=", "ctrl", "[", "j", "]", ".", "computeControlFromState", "(", "control_timestep", "=", "CTRL_EVERY_N_STEPS", "*", "env", ".", "TIMESTEP", ",", "\n", "state", "=", "obs", "[", "str", "(", "j", ")", "]", "[", "\"state\"", "]", ",", "\n", "target_pos", "=", "np", ".", "hstack", "(", "[", "TARGET_POS", "[", "wp_counters", "[", "j", "]", ",", ":", "]", ",", "INIT_XYZS", "[", "j", ",", "2", "]", "]", ")", ",", "\n", ")", "\n", "\n", "#### Go to the next way point and loop #####################", "\n", "", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                ", "wp_counters", "[", "j", "]", "=", "wp_counters", "[", "j", "]", "+", "1", "if", "wp_counters", "[", "j", "]", "<", "(", "NUM_WP", "-", "1", ")", "else", "0", "\n", "\n", "#### Log the simulation ####################################", "\n", "", "", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "logger", ".", "log", "(", "drone", "=", "j", ",", "\n", "timestamp", "=", "i", "/", "env", ".", "SIM_FREQ", ",", "\n", "state", "=", "obs", "[", "str", "(", "j", ")", "]", "[", "\"state\"", "]", ",", "\n", "control", "=", "np", ".", "hstack", "(", "[", "TARGET_POS", "[", "wp_counters", "[", "j", "]", ",", ":", "]", ",", "INIT_XYZS", "[", "j", ",", "2", "]", ",", "np", ".", "zeros", "(", "9", ")", "]", ")", "\n", ")", "\n", "\n", "#### Printout ##############################################", "\n", "", "if", "i", "%", "env", ".", "SIM_FREQ", "==", "0", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "\n", "#### Sync the simulation ###################################", "\n", "", "if", "gui", ":", "\n", "            ", "sync", "(", "i", ",", "START", ",", "env", ".", "TIMESTEP", ")", "\n", "\n", "#### Close the environment #################################", "\n", "", "", "env", ".", "close", "(", ")", "\n", "\n", "#### Save the simulation results ###########################", "\n", "logger", ".", "save", "(", ")", "\n", "logger", ".", "save_as_csv", "(", "\"dw\"", ")", "# Optional CSV save", "\n", "\n", "#### Plot the simulation results ###########################", "\n", "if", "plot", ":", "\n", "        ", "logger", ".", "plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.examples.learn.run": [[40, 112], ["gym.make", "print", "print", "stable_baselines3.common.env_checker.check_env", "gym_pybullet_drones.envs.single_agent_rl.TakeoffAviary.TakeoffAviary", "gym_pybullet_drones.utils.Logger.Logger", "gym_pybullet_drones.envs.single_agent_rl.TakeoffAviary.TakeoffAviary.reset", "time.time", "range", "gym_pybullet_drones.envs.single_agent_rl.TakeoffAviary.TakeoffAviary.close", "stable_baselines3.A2C", "stable_baselines3.A2C.learn", "ray.shutdown", "ray.init", "ray.tune.register_env", "ray.rllib.agents.ppo.DEFAULT_CONFIG.copy", "ray.rllib.agents.ppo.PPOTrainer", "range", "ppo.PPOTrainer.get_policy", "ray.shutdown", "gym_pybullet_drones.envs.single_agent_rl.TakeoffAviary.TakeoffAviary.step", "gym_pybullet_drones.utils.Logger.Logger.log", "gym_pybullet_drones.utils.utils.sync", "gym_pybullet_drones.utils.Logger.Logger.plot", "ppo.PPOTrainer.train", "print", "int", "stable_baselines3.A2C.predict", "agent.get_policy.compute_single_action", "gym_pybullet_drones.envs.single_agent_rl.TakeoffAviary.TakeoffAviary.render", "print", "gym_pybullet_drones.envs.single_agent_rl.TakeoffAviary.TakeoffAviary.reset", "gym_pybullet_drones.envs.single_agent_rl.TakeoffAviary.TakeoffAviary", "numpy.hstack", "numpy.zeros", "numpy.zeros", "numpy.resize"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.close", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.step", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.log", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.sync", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.render", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset"], ["def", "run", "(", "rllib", "=", "DEFAULT_RLLIB", ",", "output_folder", "=", "DEFAULT_OUTPUT_FOLDER", ",", "gui", "=", "DEFAULT_GUI", ",", "plot", "=", "True", ",", "colab", "=", "DEFAULT_COLAB", ",", "record_video", "=", "DEFAULT_RECORD_VIDEO", ")", ":", "\n", "\n", "#### Check the environment's spaces ########################", "\n", "    ", "env", "=", "gym", ".", "make", "(", "\"takeoff-aviary-v0\"", ")", "\n", "print", "(", "\"[INFO] Action space:\"", ",", "env", ".", "action_space", ")", "\n", "print", "(", "\"[INFO] Observation space:\"", ",", "env", ".", "observation_space", ")", "\n", "check_env", "(", "env", ",", "\n", "warn", "=", "True", ",", "\n", "skip_render_check", "=", "True", "\n", ")", "\n", "\n", "#### Train the model #######################################", "\n", "if", "not", "rllib", ":", "\n", "        ", "model", "=", "A2C", "(", "MlpPolicy", ",", "\n", "env", ",", "\n", "verbose", "=", "1", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "10000", ")", "# Typically not enough", "\n", "", "else", ":", "\n", "        ", "ray", ".", "shutdown", "(", ")", "\n", "ray", ".", "init", "(", "ignore_reinit_error", "=", "True", ")", "\n", "register_env", "(", "\"takeoff-aviary-v0\"", ",", "lambda", "_", ":", "TakeoffAviary", "(", ")", ")", "\n", "config", "=", "ppo", ".", "DEFAULT_CONFIG", ".", "copy", "(", ")", "\n", "config", "[", "\"num_workers\"", "]", "=", "2", "\n", "config", "[", "\"framework\"", "]", "=", "\"torch\"", "\n", "config", "[", "\"env\"", "]", "=", "\"takeoff-aviary-v0\"", "\n", "agent", "=", "ppo", ".", "PPOTrainer", "(", "config", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "# Typically not enough", "\n", "            ", "results", "=", "agent", ".", "train", "(", ")", "\n", "print", "(", "\"[INFO] {:d}: episode_reward max {:f} min {:f} mean {:f}\"", ".", "format", "(", "i", ",", "\n", "results", "[", "\"episode_reward_max\"", "]", ",", "\n", "results", "[", "\"episode_reward_min\"", "]", ",", "\n", "results", "[", "\"episode_reward_mean\"", "]", "\n", ")", "\n", ")", "\n", "", "policy", "=", "agent", ".", "get_policy", "(", ")", "\n", "ray", ".", "shutdown", "(", ")", "\n", "\n", "#### Show (and record a video of) the model's performance ##", "\n", "", "env", "=", "TakeoffAviary", "(", "gui", "=", "gui", ",", "\n", "record", "=", "record_video", "\n", ")", "\n", "logger", "=", "Logger", "(", "logging_freq_hz", "=", "int", "(", "env", ".", "SIM_FREQ", "/", "env", ".", "AGGR_PHY_STEPS", ")", ",", "\n", "num_drones", "=", "1", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", "colab", "=", "colab", "\n", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "3", "*", "env", ".", "SIM_FREQ", ")", ":", "\n", "        ", "if", "not", "rllib", ":", "\n", "            ", "action", ",", "_states", "=", "model", ".", "predict", "(", "obs", ",", "\n", "deterministic", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "            ", "action", ",", "_states", ",", "_dict", "=", "policy", ".", "compute_single_action", "(", "obs", ")", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "logger", ".", "log", "(", "drone", "=", "0", ",", "\n", "timestamp", "=", "i", "/", "env", ".", "SIM_FREQ", ",", "\n", "state", "=", "np", ".", "hstack", "(", "[", "obs", "[", "0", ":", "3", "]", ",", "np", ".", "zeros", "(", "4", ")", ",", "obs", "[", "3", ":", "15", "]", ",", "np", ".", "resize", "(", "action", ",", "(", "4", ")", ")", "]", ")", ",", "\n", "control", "=", "np", ".", "zeros", "(", "12", ")", "\n", ")", "\n", "if", "i", "%", "env", ".", "SIM_FREQ", "==", "0", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "print", "(", "done", ")", "\n", "", "sync", "(", "i", ",", "start", ",", "env", ".", "TIMESTEP", ")", "\n", "if", "done", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "", "", "env", ".", "close", "(", ")", "\n", "\n", "if", "plot", ":", "\n", "        ", "logger", ".", "plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.examples.groundeffect.run": [[47, 150], ["numpy.array().reshape", "numpy.zeros", "range", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.getPyBulletClient", "gym_pybullet_drones.utils.Logger.Logger", "gym_pybullet_drones.control.DSLPIDControl.DSLPIDControl", "int", "time.time", "range", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.close", "gym_pybullet_drones.utils.Logger.Logger.save", "gym_pybullet_drones.utils.Logger.Logger.save_as_csv", "int", "numpy.floor", "numpy.array", "int", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.step", "gym_pybullet_drones.utils.Logger.Logger.log", "gym_pybullet_drones.utils.Logger.Logger.plot", "numpy.array", "int", "gym_pybullet_drones.control.DSLPIDControl.DSLPIDControl.computeControlFromState", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.render", "gym_pybullet_drones.utils.utils.sync", "numpy.hstack", "numpy.sin", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.getPyBulletClient", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.close", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save_as_csv", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.step", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.log", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl.computeControlFromState", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.render", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.sync"], ["def", "run", "(", "\n", "gui", "=", "DEFAULT_GUI", ",", "\n", "record_video", "=", "DEFAULT_RECORD_VIDEO", ",", "\n", "plot", "=", "DEFAULT_PLOT", ",", "\n", "user_debug_gui", "=", "DEFAULT_USER_DEBUG_GUI", ",", "\n", "aggregate", "=", "DEFAULT_AGGREGATE", ",", "\n", "obstacles", "=", "DEFAULT_OBSTACLES", ",", "\n", "simulation_freq_hz", "=", "DEFAULT_SIMULATION_FREQ_HZ", ",", "\n", "control_freq_hz", "=", "DEFAULT_CONTROL_FREQ_HZ", ",", "\n", "duration_sec", "=", "DEFAULT_DURATION_SEC", ",", "\n", "output_folder", "=", "DEFAULT_OUTPUT_FOLDER", ",", "\n", "colab", "=", "DEFAULT_COLAB", "\n", ")", ":", "\n", "\n", "#### Initialize the simulation #############################", "\n", "    ", "INIT_XYZ", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0.014", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "\n", "AGGR_PHY_STEPS", "=", "int", "(", "simulation_freq_hz", "/", "control_freq_hz", ")", "if", "aggregate", "else", "1", "\n", "\n", "#### Initialize a vertical trajectory ######################", "\n", "PERIOD", "=", "4", "\n", "NUM_WP", "=", "control_freq_hz", "*", "PERIOD", "\n", "TARGET_POS", "=", "np", ".", "zeros", "(", "(", "NUM_WP", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "NUM_WP", ")", ":", "\n", "        ", "TARGET_POS", "[", "i", ",", ":", "]", "=", "INIT_XYZ", "[", "0", ",", "0", "]", ",", "INIT_XYZ", "[", "0", ",", "1", "]", ",", "INIT_XYZ", "[", "0", ",", "2", "]", "+", "0.15", "*", "(", "np", ".", "sin", "(", "(", "i", "/", "NUM_WP", ")", "*", "(", "2", "*", "np", ".", "pi", ")", ")", "+", "1", ")", "\n", "", "wp_counter", "=", "0", "\n", "\n", "#### Create the environment ################################", "\n", "env", "=", "CtrlAviary", "(", "drone_model", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", "=", "1", ",", "\n", "initial_xyzs", "=", "INIT_XYZ", ",", "\n", "physics", "=", "Physics", ".", "PYB_GND", ",", "\n", "# physics=Physics.PYB, # For comparison", "\n", "neighbourhood_radius", "=", "10", ",", "\n", "freq", "=", "simulation_freq_hz", ",", "\n", "aggregate_phy_steps", "=", "AGGR_PHY_STEPS", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record_video", ",", "\n", "obstacles", "=", "obstacles", ",", "\n", "user_debug_gui", "=", "user_debug_gui", "\n", ")", "\n", "\n", "#### Obtain the PyBullet Client ID from the environment ####", "\n", "PYB_CLIENT", "=", "env", ".", "getPyBulletClient", "(", ")", "\n", "\n", "#### Initialize the logger #################################", "\n", "logger", "=", "Logger", "(", "logging_freq_hz", "=", "int", "(", "simulation_freq_hz", "/", "AGGR_PHY_STEPS", ")", ",", "\n", "num_drones", "=", "1", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", "colab", "=", "colab", "\n", ")", "\n", "\n", "#### Initialize the controller #############################", "\n", "ctrl", "=", "DSLPIDControl", "(", "drone_model", "=", "DroneModel", ".", "CF2X", ")", "\n", "\n", "#### Run the simulation ####################################", "\n", "CTRL_EVERY_N_STEPS", "=", "int", "(", "np", ".", "floor", "(", "env", ".", "SIM_FREQ", "/", "control_freq_hz", ")", ")", "\n", "action", "=", "{", "\"0\"", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "}", "\n", "START", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "int", "(", "duration_sec", "*", "env", ".", "SIM_FREQ", ")", ",", "AGGR_PHY_STEPS", ")", ":", "\n", "\n", "#### Make it rain rubber ducks #############################", "\n", "# if i/env.SIM_FREQ>5 and i%10==0 and i/env.SIM_FREQ<10: p.loadURDF(\"duck_vhacd.urdf\", [0+random.gauss(0, 0.3),-0.5+random.gauss(0, 0.3),3], p.getQuaternionFromEuler([random.randint(0,360),random.randint(0,360),random.randint(0,360)]), physicsClientId=PYB_CLIENT)", "\n", "\n", "#### Step the simulation ###################################", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "#### Compute control at the desired frequency ##############", "\n", "if", "i", "%", "CTRL_EVERY_N_STEPS", "==", "0", ":", "\n", "\n", "#### Compute control for the current way point #############", "\n", "            ", "action", "[", "\"0\"", "]", ",", "_", ",", "_", "=", "ctrl", ".", "computeControlFromState", "(", "control_timestep", "=", "CTRL_EVERY_N_STEPS", "*", "env", ".", "TIMESTEP", ",", "\n", "state", "=", "obs", "[", "\"0\"", "]", "[", "\"state\"", "]", ",", "\n", "target_pos", "=", "TARGET_POS", "[", "wp_counter", ",", ":", "]", ",", "\n", ")", "\n", "\n", "#### Go to the next way point and loop #####################", "\n", "wp_counter", "=", "wp_counter", "+", "1", "if", "wp_counter", "<", "(", "NUM_WP", "-", "1", ")", "else", "0", "\n", "\n", "#### Log the simulation ####################################", "\n", "", "logger", ".", "log", "(", "drone", "=", "0", ",", "\n", "timestamp", "=", "i", "/", "env", ".", "SIM_FREQ", ",", "\n", "state", "=", "obs", "[", "\"0\"", "]", "[", "\"state\"", "]", ",", "\n", "control", "=", "np", ".", "hstack", "(", "[", "TARGET_POS", "[", "wp_counter", ",", ":", "]", ",", "np", ".", "zeros", "(", "9", ")", "]", ")", "\n", ")", "\n", "\n", "#### Printout ##############################################", "\n", "if", "i", "%", "env", ".", "SIM_FREQ", "==", "0", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "\n", "#### Sync the simulation ###################################", "\n", "", "if", "gui", ":", "\n", "            ", "sync", "(", "i", ",", "START", ",", "env", ".", "TIMESTEP", ")", "\n", "\n", "#### Close the environment #################################", "\n", "", "", "env", ".", "close", "(", ")", "\n", "\n", "#### Save the simulation results ###########################", "\n", "logger", ".", "save", "(", ")", "\n", "logger", ".", "save_as_csv", "(", "\"gnd\"", ")", "# Optional CSV save", "\n", "\n", "#### Plot the simulation results ###########################", "\n", "if", "plot", ":", "\n", "        ", "logger", ".", "plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.examples.compare.run": [[35, 128], ["int", "int", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.reset", "gym_pybullet_drones.utils.Logger.Logger", "gym_pybullet_drones.control.DSLPIDControl.DSLPIDControl", "time.time", "range", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.close", "gym_pybullet_drones.utils.Logger.Logger.save", "open", "pickle.load", "numpy.zeros", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.step", "gym_pybullet_drones.control.DSLPIDControl.DSLPIDControl.computeControlFromState", "numpy.hstack", "gym_pybullet_drones.utils.Logger.Logger.log", "gym_pybullet_drones.utils.Logger.Logger.log", "gym_pybullet_drones.utils.Logger.Logger.plot", "len", "numpy.array().reshape", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.render", "gym_pybullet_drones.utils.utils.sync", "numpy.zeros", "numpy.hstack", "numpy.hstack", "numpy.array", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.close", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.step", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl.computeControlFromState", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.log", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.log", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.render", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.sync"], ["def", "run", "(", "\n", "physics", "=", "DEFAULT_PHYICS", ",", "\n", "gui", "=", "DEFAULT_GUI", ",", "\n", "record_video", "=", "DEFAULT_RECORD_VIDEO", ",", "\n", "trace_file", "=", "DEFAULT_TRACE_FILE", ",", "\n", "output_folder", "=", "DEFAULT_OUTPUT_FOLDER", ",", "\n", "plot", "=", "True", ",", "\n", "colab", "=", "DEFAULT_COLAB", "\n", ")", ":", "\n", "#### Load a trace and control reference from a .pkl file ###", "\n", "    ", "with", "open", "(", "trace_file", ",", "'rb'", ")", "as", "in_file", ":", "\n", "        ", "TRACE_TIMESTAMPS", ",", "TRACE_DATA", ",", "TRACE_CTRL_REFERENCE", ",", "_", ",", "_", ",", "_", "=", "pickle", ".", "load", "(", "in_file", ")", "\n", "\n", "#### Compute trace's parameters ############################", "\n", "", "DURATION_SEC", "=", "int", "(", "TRACE_TIMESTAMPS", "[", "-", "1", "]", ")", "\n", "SIMULATION_FREQ_HZ", "=", "int", "(", "len", "(", "TRACE_TIMESTAMPS", ")", "/", "TRACE_TIMESTAMPS", "[", "-", "1", "]", ")", "\n", "\n", "#### Initialize the simulation #############################", "\n", "env", "=", "CtrlAviary", "(", "drone_model", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", "=", "1", ",", "\n", "initial_xyzs", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", ".1", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "SIMULATION_FREQ_HZ", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record_video", ",", "\n", "obstacles", "=", "False", "\n", ")", "\n", "INITIAL_STATE", "=", "env", ".", "reset", "(", ")", "\n", "action", "=", "{", "\"0\"", ":", "np", ".", "zeros", "(", "4", ")", "}", "\n", "pos_err", "=", "9999.", "\n", "\n", "#### TRACE_FILE starts at [0,0,0], sim starts at [0,0,INITIAL_STATE[2]]", "\n", "TRACE_CTRL_REFERENCE", "[", ":", ",", "2", "]", "=", "INITIAL_STATE", "[", "\"0\"", "]", "[", "\"state\"", "]", "[", "2", "]", "\n", "\n", "#### Initialize the logger #################################", "\n", "logger", "=", "Logger", "(", "logging_freq_hz", "=", "SIMULATION_FREQ_HZ", ",", "\n", "num_drones", "=", "2", ",", "\n", "duration_sec", "=", "DURATION_SEC", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", "colab", "=", "colab", "\n", ")", "\n", "\n", "#### Initialize the controller #############################", "\n", "ctrl", "=", "DSLPIDControl", "(", "drone_model", "=", "env", ".", "DRONE_MODEL", ")", "\n", "\n", "#### Run the comparison ####################################", "\n", "START", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "DURATION_SEC", "*", "env", ".", "SIM_FREQ", ")", ":", "\n", "\n", "#### Step the simulation ###################################", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "#### Compute next action using the set points from the trace", "\n", "action", "[", "\"0\"", "]", ",", "pos_err", ",", "yaw_err", "=", "ctrl", ".", "computeControlFromState", "(", "control_timestep", "=", "env", ".", "TIMESTEP", ",", "\n", "state", "=", "obs", "[", "\"0\"", "]", "[", "\"state\"", "]", ",", "\n", "target_pos", "=", "TRACE_CTRL_REFERENCE", "[", "i", ",", "0", ":", "3", "]", ",", "\n", "target_vel", "=", "TRACE_CTRL_REFERENCE", "[", "i", ",", "3", ":", "6", "]", "\n", ")", "\n", "\n", "#### Re-arrange the trace for consistency with the logger", "\n", "trace_obs", "=", "np", ".", "hstack", "(", "[", "TRACE_DATA", "[", "i", ",", "0", ":", "3", "]", ",", "np", ".", "zeros", "(", "4", ")", ",", "TRACE_DATA", "[", "i", ",", "6", ":", "9", "]", ",", "TRACE_DATA", "[", "i", ",", "3", ":", "6", "]", ",", "TRACE_DATA", "[", "i", ",", "9", ":", "12", "]", ",", "TRACE_DATA", "[", "i", ",", "12", ":", "16", "]", "]", ")", "\n", "\n", "#### Log the trace #########################################", "\n", "logger", ".", "log", "(", "drone", "=", "0", ",", "\n", "timestamp", "=", "TRACE_TIMESTAMPS", "[", "i", "]", ",", "\n", "state", "=", "trace_obs", ",", "\n", "control", "=", "np", ".", "hstack", "(", "[", "TRACE_CTRL_REFERENCE", "[", "i", ",", ":", "]", ",", "np", ".", "zeros", "(", "6", ")", "]", ")", "\n", ")", "\n", "\n", "#### Log the simulation ####################################", "\n", "logger", ".", "log", "(", "drone", "=", "1", ",", "\n", "timestamp", "=", "i", "/", "env", ".", "SIM_FREQ", ",", "\n", "state", "=", "obs", "[", "\"0\"", "]", "[", "\"state\"", "]", ",", "\n", "control", "=", "np", ".", "hstack", "(", "[", "TRACE_CTRL_REFERENCE", "[", "i", ",", ":", "]", ",", "np", ".", "zeros", "(", "6", ")", "]", ")", "\n", ")", "\n", "\n", "#### Printout ##############################################", "\n", "if", "i", "%", "env", ".", "SIM_FREQ", "==", "0", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "\n", "#### Sync the simulation ###################################", "\n", "", "if", "gui", ":", "\n", "            ", "sync", "(", "i", ",", "START", ",", "env", ".", "TIMESTEP", ")", "\n", "\n", "#### Close the environment #################################", "\n", "", "", "env", ".", "close", "(", ")", "\n", "\n", "#### Save the simulation results ###########################", "\n", "logger", ".", "save", "(", ")", "\n", "\n", "#### Plot the simulation results ###########################", "\n", "if", "plot", ":", "\n", "        ", "logger", ".", "plot", "(", "pwm", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.examples.velocity.run": [[50, 165], ["numpy.array", "numpy.array", "gym_pybullet_drones.envs.VelocityAviary.VelocityAviary", "gym_pybullet_drones.envs.VelocityAviary.VelocityAviary.getPyBulletClient", "gym_pybullet_drones.envs.VelocityAviary.VelocityAviary.getDroneIds", "numpy.array", "numpy.zeros", "range", "gym_pybullet_drones.utils.Logger.Logger", "int", "time.time", "range", "gym_pybullet_drones.envs.VelocityAviary.VelocityAviary.close", "gym_pybullet_drones.utils.Logger.Logger.save_as_csv", "int", "numpy.floor", "str", "numpy.array", "int", "gym_pybullet_drones.envs.VelocityAviary.VelocityAviary.step", "range", "gym_pybullet_drones.utils.Logger.Logger.plot", "int", "range", "range", "range", "gym_pybullet_drones.utils.Logger.Logger.log", "gym_pybullet_drones.envs.VelocityAviary.VelocityAviary.render", "gym_pybullet_drones.utils.utils.sync", "range", "numpy.hstack", "str", "numpy.zeros", "str"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.getPyBulletClient", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.getDroneIds", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.close", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save_as_csv", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.step", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.log", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.render", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.sync"], ["def", "run", "(", "\n", "drone", "=", "DEFAULT_DRONE", ",", "\n", "gui", "=", "DEFAULT_GUI", ",", "\n", "record_video", "=", "DEFAULT_RECORD_VIDEO", ",", "\n", "plot", "=", "DEFAULT_PLOT", ",", "\n", "user_debug_gui", "=", "DEFAULT_USER_DEBUG_GUI", ",", "\n", "aggregate", "=", "DEFAULT_AGGREGATE", ",", "\n", "obstacles", "=", "DEFAULT_OBSTACLES", ",", "\n", "simulation_freq_hz", "=", "DEFAULT_SIMULATION_FREQ_HZ", ",", "\n", "control_freq_hz", "=", "DEFAULT_CONTROL_FREQ_HZ", ",", "\n", "duration_sec", "=", "DEFAULT_DURATION_SEC", ",", "\n", "output_folder", "=", "DEFAULT_OUTPUT_FOLDER", ",", "\n", "colab", "=", "DEFAULT_COLAB", "\n", ")", ":", "\n", "#### Initialize the simulation #############################", "\n", "    ", "INIT_XYZS", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "0", ",", ".1", "]", ",", "\n", "[", ".3", ",", "0", ",", ".1", "]", ",", "\n", "[", ".6", ",", "0", ",", ".1", "]", ",", "\n", "[", "0.9", ",", "0", ",", ".1", "]", "\n", "]", ")", "\n", "INIT_RPYS", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "np", ".", "pi", "/", "3", "]", ",", "\n", "[", "0", ",", "0", ",", "np", ".", "pi", "/", "4", "]", ",", "\n", "[", "0", ",", "0", ",", "np", ".", "pi", "/", "2", "]", "\n", "]", ")", "\n", "AGGR_PHY_STEPS", "=", "int", "(", "simulation_freq_hz", "/", "control_freq_hz", ")", "if", "aggregate", "else", "1", "\n", "PHY", "=", "Physics", ".", "PYB", "\n", "\n", "#### Create the environment ################################", "\n", "env", "=", "VelocityAviary", "(", "drone_model", "=", "drone", ",", "\n", "num_drones", "=", "4", ",", "\n", "initial_xyzs", "=", "INIT_XYZS", ",", "\n", "initial_rpys", "=", "INIT_RPYS", ",", "\n", "physics", "=", "Physics", ".", "PYB", ",", "\n", "neighbourhood_radius", "=", "10", ",", "\n", "freq", "=", "simulation_freq_hz", ",", "\n", "aggregate_phy_steps", "=", "AGGR_PHY_STEPS", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record_video", ",", "\n", "obstacles", "=", "obstacles", ",", "\n", "user_debug_gui", "=", "user_debug_gui", "\n", ")", "\n", "\n", "#### Obtain the PyBullet Client ID from the environment ####", "\n", "PYB_CLIENT", "=", "env", ".", "getPyBulletClient", "(", ")", "\n", "DRONE_IDS", "=", "env", ".", "getDroneIds", "(", ")", "\n", "\n", "#### Compute number of control steps in the simlation ######", "\n", "PERIOD", "=", "duration_sec", "\n", "NUM_WP", "=", "control_freq_hz", "*", "PERIOD", "\n", "wp_counters", "=", "np", ".", "array", "(", "[", "0", "for", "i", "in", "range", "(", "4", ")", "]", ")", "\n", "\n", "#### Initialize the velocity target ########################", "\n", "TARGET_VEL", "=", "np", ".", "zeros", "(", "(", "4", ",", "NUM_WP", ",", "4", ")", ")", "\n", "for", "i", "in", "range", "(", "NUM_WP", ")", ":", "\n", "        ", "TARGET_VEL", "[", "0", ",", "i", ",", ":", "]", "=", "[", "-", "0.5", ",", "1", ",", "0", ",", "0.99", "]", "if", "i", "<", "(", "NUM_WP", "/", "8", ")", "else", "[", "0.5", ",", "-", "1", ",", "0", ",", "0.99", "]", "\n", "TARGET_VEL", "[", "1", ",", "i", ",", ":", "]", "=", "[", "0", ",", "1", ",", "0", ",", "0.99", "]", "if", "i", "<", "(", "NUM_WP", "/", "8", "+", "NUM_WP", "/", "6", ")", "else", "[", "0", ",", "-", "1", ",", "0", ",", "0.99", "]", "\n", "TARGET_VEL", "[", "2", ",", "i", ",", ":", "]", "=", "[", "0.2", ",", "1", ",", "0.2", ",", "0.99", "]", "if", "i", "<", "(", "NUM_WP", "/", "8", "+", "2", "*", "NUM_WP", "/", "6", ")", "else", "[", "-", "0.2", ",", "-", "1", ",", "-", "0.2", ",", "0.99", "]", "\n", "TARGET_VEL", "[", "3", ",", "i", ",", ":", "]", "=", "[", "0", ",", "1", ",", "0.5", ",", "0.99", "]", "if", "i", "<", "(", "NUM_WP", "/", "8", "+", "3", "*", "NUM_WP", "/", "6", ")", "else", "[", "0", ",", "-", "1", ",", "-", "0.5", ",", "0.99", "]", "\n", "\n", "#### Initialize the logger #################################", "\n", "", "logger", "=", "Logger", "(", "logging_freq_hz", "=", "int", "(", "simulation_freq_hz", "/", "AGGR_PHY_STEPS", ")", ",", "\n", "num_drones", "=", "4", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", "colab", "=", "colab", "\n", ")", "\n", "\n", "#### Run the simulation ####################################", "\n", "CTRL_EVERY_N_STEPS", "=", "int", "(", "np", ".", "floor", "(", "env", ".", "SIM_FREQ", "/", "control_freq_hz", ")", ")", "\n", "action", "=", "{", "str", "(", "i", ")", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "for", "i", "in", "range", "(", "4", ")", "}", "\n", "START", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "int", "(", "duration_sec", "*", "env", ".", "SIM_FREQ", ")", ",", "AGGR_PHY_STEPS", ")", ":", "\n", "\n", "############################################################", "\n", "# for j in range(3): env._showDroneLocalAxes(j)", "\n", "\n", "#### Step the simulation ###################################", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "#### Compute control at the desired frequency ##############", "\n", "if", "i", "%", "CTRL_EVERY_N_STEPS", "==", "0", ":", "\n", "\n", "#### Compute control for the current way point #############", "\n", "            ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                ", "action", "[", "str", "(", "j", ")", "]", "=", "TARGET_VEL", "[", "j", ",", "wp_counters", "[", "j", "]", ",", ":", "]", "\n", "\n", "#### Go to the next way point and loop #####################", "\n", "", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                ", "wp_counters", "[", "j", "]", "=", "wp_counters", "[", "j", "]", "+", "1", "if", "wp_counters", "[", "j", "]", "<", "(", "NUM_WP", "-", "1", ")", "else", "0", "\n", "\n", "#### Log the simulation ####################################", "\n", "", "", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "            ", "logger", ".", "log", "(", "drone", "=", "j", ",", "\n", "timestamp", "=", "i", "/", "env", ".", "SIM_FREQ", ",", "\n", "state", "=", "obs", "[", "str", "(", "j", ")", "]", "[", "\"state\"", "]", ",", "\n", "control", "=", "np", ".", "hstack", "(", "[", "TARGET_VEL", "[", "j", ",", "wp_counters", "[", "j", "]", ",", "0", ":", "3", "]", ",", "np", ".", "zeros", "(", "9", ")", "]", ")", "\n", ")", "\n", "\n", "#### Printout ##############################################", "\n", "", "if", "i", "%", "env", ".", "SIM_FREQ", "==", "0", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "\n", "#### Sync the simulation ###################################", "\n", "", "if", "gui", ":", "\n", "            ", "sync", "(", "i", ",", "START", ",", "env", ".", "TIMESTEP", ")", "\n", "\n", "#### Close the environment #################################", "\n", "", "", "env", ".", "close", "(", ")", "\n", "\n", "#### Plot the simulation results ###########################", "\n", "logger", ".", "save_as_csv", "(", "\"vel\"", ")", "# Optional CSV save", "\n", "if", "plot", ":", "\n", "        ", "logger", ".", "plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.examples.fly.run": [[53, 214], ["numpy.array", "numpy.array", "numpy.zeros", "range", "numpy.array", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.getPyBulletClient", "gym_pybullet_drones.utils.Logger.Logger", "int", "time.time", "range", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.close", "gym_pybullet_drones.utils.Logger.Logger.save", "gym_pybullet_drones.utils.Logger.Logger.save_as_csv", "int", "gym_pybullet_drones.envs.VisionAviary.VisionAviary", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary", "numpy.floor", "str", "numpy.array", "int", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.step", "range", "gym_pybullet_drones.utils.Logger.Logger.plot", "int", "int", "gym_pybullet_drones.control.DSLPIDControl.DSLPIDControl", "range", "range", "range", "gym_pybullet_drones.utils.Logger.Logger.log", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary.render", "gym_pybullet_drones.utils.utils.sync", "range", "range", "range", "range", "gym_pybullet_drones.control.SimplePIDControl.SimplePIDControl", "ctrl[].computeControlFromState", "range", "numpy.cos", "numpy.cos", "range", "numpy.hstack", "print", "numpy.sin", "numpy.sin", "numpy.hstack", "numpy.average", "numpy.average", "numpy.average", "str", "numpy.zeros", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.getPyBulletClient", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.close", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save_as_csv", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.step", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.log", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.render", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.sync", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl.computeControlFromState"], ["def", "run", "(", "\n", "drone", "=", "DEFAULT_DRONES", ",", "\n", "num_drones", "=", "DEFAULT_NUM_DRONES", ",", "\n", "physics", "=", "DEFAULT_PHYSICS", ",", "\n", "vision", "=", "DEFAULT_VISION", ",", "\n", "gui", "=", "DEFAULT_GUI", ",", "\n", "record_video", "=", "DEFAULT_RECORD_VISION", ",", "\n", "plot", "=", "DEFAULT_PLOT", ",", "\n", "user_debug_gui", "=", "DEFAULT_USER_DEBUG_GUI", ",", "\n", "aggregate", "=", "DEFAULT_AGGREGATE", ",", "\n", "obstacles", "=", "DEFAULT_OBSTACLES", ",", "\n", "simulation_freq_hz", "=", "DEFAULT_SIMULATION_FREQ_HZ", ",", "\n", "control_freq_hz", "=", "DEFAULT_CONTROL_FREQ_HZ", ",", "\n", "duration_sec", "=", "DEFAULT_DURATION_SEC", ",", "\n", "output_folder", "=", "DEFAULT_OUTPUT_FOLDER", ",", "\n", "colab", "=", "DEFAULT_COLAB", "\n", ")", ":", "\n", "#### Initialize the simulation #############################", "\n", "    ", "H", "=", ".1", "\n", "H_STEP", "=", ".05", "\n", "R", "=", ".3", "\n", "INIT_XYZS", "=", "np", ".", "array", "(", "[", "[", "R", "*", "np", ".", "cos", "(", "(", "i", "/", "6", ")", "*", "2", "*", "np", ".", "pi", "+", "np", ".", "pi", "/", "2", ")", ",", "R", "*", "np", ".", "sin", "(", "(", "i", "/", "6", ")", "*", "2", "*", "np", ".", "pi", "+", "np", ".", "pi", "/", "2", ")", "-", "R", ",", "H", "+", "i", "*", "H_STEP", "]", "for", "i", "in", "range", "(", "num_drones", ")", "]", ")", "\n", "INIT_RPYS", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "i", "*", "(", "np", ".", "pi", "/", "2", ")", "/", "num_drones", "]", "for", "i", "in", "range", "(", "num_drones", ")", "]", ")", "\n", "AGGR_PHY_STEPS", "=", "int", "(", "simulation_freq_hz", "/", "control_freq_hz", ")", "if", "aggregate", "else", "1", "\n", "\n", "#### Initialize a circular trajectory ######################", "\n", "PERIOD", "=", "10", "\n", "NUM_WP", "=", "control_freq_hz", "*", "PERIOD", "\n", "TARGET_POS", "=", "np", ".", "zeros", "(", "(", "NUM_WP", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "NUM_WP", ")", ":", "\n", "        ", "TARGET_POS", "[", "i", ",", ":", "]", "=", "R", "*", "np", ".", "cos", "(", "(", "i", "/", "NUM_WP", ")", "*", "(", "2", "*", "np", ".", "pi", ")", "+", "np", ".", "pi", "/", "2", ")", "+", "INIT_XYZS", "[", "0", ",", "0", "]", ",", "R", "*", "np", ".", "sin", "(", "(", "i", "/", "NUM_WP", ")", "*", "(", "2", "*", "np", ".", "pi", ")", "+", "np", ".", "pi", "/", "2", ")", "-", "R", "+", "INIT_XYZS", "[", "0", ",", "1", "]", ",", "0", "\n", "", "wp_counters", "=", "np", ".", "array", "(", "[", "int", "(", "(", "i", "*", "NUM_WP", "/", "6", ")", "%", "NUM_WP", ")", "for", "i", "in", "range", "(", "num_drones", ")", "]", ")", "\n", "\n", "#### Debug trajectory ######################################", "\n", "#### Uncomment alt. target_pos in .computeControlFromState()", "\n", "# INIT_XYZS = np.array([[.3 * i, 0, .1] for i in range(num_drones)])", "\n", "# INIT_RPYS = np.array([[0, 0,  i * (np.pi/3)/num_drones] for i in range(num_drones)])", "\n", "# NUM_WP = control_freq_hz*15", "\n", "# TARGET_POS = np.zeros((NUM_WP,3))", "\n", "# for i in range(NUM_WP):", "\n", "#     if i < NUM_WP/6:", "\n", "#         TARGET_POS[i, :] = (i*6)/NUM_WP, 0, 0.5*(i*6)/NUM_WP", "\n", "#     elif i < 2 * NUM_WP/6:", "\n", "#         TARGET_POS[i, :] = 1 - ((i-NUM_WP/6)*6)/NUM_WP, 0, 0.5 - 0.5*((i-NUM_WP/6)*6)/NUM_WP", "\n", "#     elif i < 3 * NUM_WP/6:", "\n", "#         TARGET_POS[i, :] = 0, ((i-2*NUM_WP/6)*6)/NUM_WP, 0.5*((i-2*NUM_WP/6)*6)/NUM_WP", "\n", "#     elif i < 4 * NUM_WP/6:", "\n", "#         TARGET_POS[i, :] = 0, 1 - ((i-3*NUM_WP/6)*6)/NUM_WP, 0.5 - 0.5*((i-3*NUM_WP/6)*6)/NUM_WP", "\n", "#     elif i < 5 * NUM_WP/6:", "\n", "#         TARGET_POS[i, :] = ((i-4*NUM_WP/6)*6)/NUM_WP, ((i-4*NUM_WP/6)*6)/NUM_WP, 0.5*((i-4*NUM_WP/6)*6)/NUM_WP", "\n", "#     elif i < 6 * NUM_WP/6:", "\n", "#         TARGET_POS[i, :] = 1 - ((i-5*NUM_WP/6)*6)/NUM_WP, 1 - ((i-5*NUM_WP/6)*6)/NUM_WP, 0.5 - 0.5*((i-5*NUM_WP/6)*6)/NUM_WP", "\n", "# wp_counters = np.array([0 for i in range(num_drones)])", "\n", "\n", "#### Create the environment with or without video capture ##", "\n", "if", "vision", ":", "\n", "        ", "env", "=", "VisionAviary", "(", "drone_model", "=", "drone", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "initial_xyzs", "=", "INIT_XYZS", ",", "\n", "initial_rpys", "=", "INIT_RPYS", ",", "\n", "physics", "=", "physics", ",", "\n", "neighbourhood_radius", "=", "10", ",", "\n", "freq", "=", "simulation_freq_hz", ",", "\n", "aggregate_phy_steps", "=", "AGGR_PHY_STEPS", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record_video", ",", "\n", "obstacles", "=", "obstacles", "\n", ")", "\n", "", "else", ":", "\n", "        ", "env", "=", "CtrlAviary", "(", "drone_model", "=", "drone", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "initial_xyzs", "=", "INIT_XYZS", ",", "\n", "initial_rpys", "=", "INIT_RPYS", ",", "\n", "physics", "=", "physics", ",", "\n", "neighbourhood_radius", "=", "10", ",", "\n", "freq", "=", "simulation_freq_hz", ",", "\n", "aggregate_phy_steps", "=", "AGGR_PHY_STEPS", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record_video", ",", "\n", "obstacles", "=", "obstacles", ",", "\n", "user_debug_gui", "=", "user_debug_gui", "\n", ")", "\n", "\n", "#### Obtain the PyBullet Client ID from the environment ####", "\n", "", "PYB_CLIENT", "=", "env", ".", "getPyBulletClient", "(", ")", "\n", "\n", "#### Initialize the logger #################################", "\n", "logger", "=", "Logger", "(", "logging_freq_hz", "=", "int", "(", "simulation_freq_hz", "/", "AGGR_PHY_STEPS", ")", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", "colab", "=", "colab", "\n", ")", "\n", "\n", "#### Initialize the controllers ############################", "\n", "if", "drone", "in", "[", "DroneModel", ".", "CF2X", ",", "DroneModel", ".", "CF2P", "]", ":", "\n", "        ", "ctrl", "=", "[", "DSLPIDControl", "(", "drone_model", "=", "drone", ")", "for", "i", "in", "range", "(", "num_drones", ")", "]", "\n", "", "elif", "drone", "in", "[", "DroneModel", ".", "HB", "]", ":", "\n", "        ", "ctrl", "=", "[", "SimplePIDControl", "(", "drone_model", "=", "drone", ")", "for", "i", "in", "range", "(", "num_drones", ")", "]", "\n", "\n", "#### Run the simulation ####################################", "\n", "", "CTRL_EVERY_N_STEPS", "=", "int", "(", "np", ".", "floor", "(", "env", ".", "SIM_FREQ", "/", "control_freq_hz", ")", ")", "\n", "action", "=", "{", "str", "(", "i", ")", ":", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "for", "i", "in", "range", "(", "num_drones", ")", "}", "\n", "START", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "int", "(", "duration_sec", "*", "env", ".", "SIM_FREQ", ")", ",", "AGGR_PHY_STEPS", ")", ":", "\n", "\n", "#### Make it rain rubber ducks #############################", "\n", "# if i/env.SIM_FREQ>5 and i%10==0 and i/env.SIM_FREQ<10: p.loadURDF(\"duck_vhacd.urdf\", [0+random.gauss(0, 0.3),-0.5+random.gauss(0, 0.3),3], p.getQuaternionFromEuler([random.randint(0,360),random.randint(0,360),random.randint(0,360)]), physicsClientId=PYB_CLIENT)", "\n", "\n", "#### Step the simulation ###################################", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "#### Compute control at the desired frequency ##############", "\n", "if", "i", "%", "CTRL_EVERY_N_STEPS", "==", "0", ":", "\n", "\n", "#### Compute control for the current way point #############", "\n", "            ", "for", "j", "in", "range", "(", "num_drones", ")", ":", "\n", "                ", "action", "[", "str", "(", "j", ")", "]", ",", "_", ",", "_", "=", "ctrl", "[", "j", "]", ".", "computeControlFromState", "(", "control_timestep", "=", "CTRL_EVERY_N_STEPS", "*", "env", ".", "TIMESTEP", ",", "\n", "state", "=", "obs", "[", "str", "(", "j", ")", "]", "[", "\"state\"", "]", ",", "\n", "target_pos", "=", "np", ".", "hstack", "(", "[", "TARGET_POS", "[", "wp_counters", "[", "j", "]", ",", "0", ":", "2", "]", ",", "INIT_XYZS", "[", "j", ",", "2", "]", "]", ")", ",", "\n", "# target_pos=INIT_XYZS[j, :] + TARGET_POS[wp_counters[j], :],", "\n", "target_rpy", "=", "INIT_RPYS", "[", "j", ",", ":", "]", "\n", ")", "\n", "\n", "#### Go to the next way point and loop #####################", "\n", "", "for", "j", "in", "range", "(", "num_drones", ")", ":", "\n", "                ", "wp_counters", "[", "j", "]", "=", "wp_counters", "[", "j", "]", "+", "1", "if", "wp_counters", "[", "j", "]", "<", "(", "NUM_WP", "-", "1", ")", "else", "0", "\n", "\n", "#### Log the simulation ####################################", "\n", "", "", "for", "j", "in", "range", "(", "num_drones", ")", ":", "\n", "            ", "logger", ".", "log", "(", "drone", "=", "j", ",", "\n", "timestamp", "=", "i", "/", "env", ".", "SIM_FREQ", ",", "\n", "state", "=", "obs", "[", "str", "(", "j", ")", "]", "[", "\"state\"", "]", ",", "\n", "control", "=", "np", ".", "hstack", "(", "[", "TARGET_POS", "[", "wp_counters", "[", "j", "]", ",", "0", ":", "2", "]", ",", "INIT_XYZS", "[", "j", ",", "2", "]", ",", "INIT_RPYS", "[", "j", ",", ":", "]", ",", "np", ".", "zeros", "(", "6", ")", "]", ")", "\n", "# control=np.hstack([INIT_XYZS[j, :]+TARGET_POS[wp_counters[j], :], INIT_RPYS[j, :], np.zeros(6)])", "\n", ")", "\n", "\n", "#### Printout ##############################################", "\n", "", "if", "i", "%", "env", ".", "SIM_FREQ", "==", "0", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "#### Print matrices with the images captured by each drone #", "\n", "if", "vision", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_drones", ")", ":", "\n", "                    ", "print", "(", "obs", "[", "str", "(", "j", ")", "]", "[", "\"rgb\"", "]", ".", "shape", ",", "np", ".", "average", "(", "obs", "[", "str", "(", "j", ")", "]", "[", "\"rgb\"", "]", ")", ",", "\n", "obs", "[", "str", "(", "j", ")", "]", "[", "\"dep\"", "]", ".", "shape", ",", "np", ".", "average", "(", "obs", "[", "str", "(", "j", ")", "]", "[", "\"dep\"", "]", ")", ",", "\n", "obs", "[", "str", "(", "j", ")", "]", "[", "\"seg\"", "]", ".", "shape", ",", "np", ".", "average", "(", "obs", "[", "str", "(", "j", ")", "]", "[", "\"seg\"", "]", ")", "\n", ")", "\n", "\n", "#### Sync the simulation ###################################", "\n", "", "", "", "if", "gui", ":", "\n", "            ", "sync", "(", "i", ",", "START", ",", "env", ".", "TIMESTEP", ")", "\n", "\n", "#### Close the environment #################################", "\n", "", "", "env", ".", "close", "(", ")", "\n", "\n", "#### Save the simulation results ###########################", "\n", "logger", ".", "save", "(", ")", "\n", "logger", ".", "save_as_csv", "(", "\"pid\"", ")", "# Optional CSV save", "\n", "\n", "#### Plot the simulation results ###########################", "\n", "if", "plot", ":", "\n", "        ", "logger", ".", "plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VelocityAviary.VelocityAviary.__init__": [[15, 82], ["gym_pybullet_drones.envs.BaseAviary.BaseAviary.__init__", "gym_pybullet_drones.control.DSLPIDControl.DSLPIDControl", "range", "gym_pybullet_drones.control.SimplePIDControl.SimplePIDControl", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", ":", "int", "=", "1", ",", "\n", "neighbourhood_radius", ":", "float", "=", "np", ".", "inf", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obstacles", "=", "False", ",", "\n", "user_debug_gui", "=", "True", ",", "\n", "output_folder", "=", "'results'", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of an aviary environment for or high-level planning.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        num_drones : int, optional\n            The desired number of drones in the aviary.\n        neighbourhood_radius : float, optional\n            Radius used to compute the drones' adjacency matrix, in meters.\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obstacles : bool, optional\n            Whether to add obstacles to the simulation.\n        user_debug_gui : bool, optional\n            Whether to draw the drones' axes and the GUI RPMs sliders.\n\n        \"\"\"", "\n", "#### Create integrated controllers #########################", "\n", "os", ".", "environ", "[", "'KMP_DUPLICATE_LIB_OK'", "]", "=", "'True'", "\n", "if", "drone_model", "in", "[", "DroneModel", ".", "CF2X", ",", "DroneModel", ".", "CF2P", "]", ":", "\n", "            ", "self", ".", "ctrl", "=", "[", "DSLPIDControl", "(", "drone_model", "=", "DroneModel", ".", "CF2X", ")", "for", "i", "in", "range", "(", "num_drones", ")", "]", "\n", "", "elif", "drone_model", "==", "DroneModel", ".", "HB", ":", "\n", "            ", "self", ".", "ctrl", "=", "[", "SimplePIDControl", "(", "drone_model", "=", "DroneModel", ".", "HB", ")", "for", "i", "in", "range", "(", "num_drones", ")", "]", "\n", "", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "neighbourhood_radius", "=", "neighbourhood_radius", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obstacles", "=", "obstacles", ",", "\n", "user_debug_gui", "=", "user_debug_gui", ",", "\n", "output_folder", "=", "output_folder", "\n", ")", "\n", "#### Set a limit on the maximum target speed ###############", "\n", "self", ".", "SPEED_LIMIT", "=", "0.03", "*", "self", ".", "MAX_SPEED_KMH", "*", "(", "1000", "/", "3600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VelocityAviary.VelocityAviary._actionSpace": [[85, 102], ["numpy.array", "numpy.array", "gym.spaces.Dict", "str", "gym.spaces.Box", "range"], "methods", ["None"], ["", "def", "_actionSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the action space of the environment.\n\n        Returns\n        -------\n        dict[str, ndarray]\n            A Dict of Box(4,) with NUM_DRONES entries,\n            indexed by drone Id in string format.\n\n        \"\"\"", "\n", "#### Action vector ######### X       Y       Z   fract. of MAX_SPEED_KMH", "\n", "act_lower_bound", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "0", "]", ")", "\n", "act_upper_bound", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "return", "spaces", ".", "Dict", "(", "{", "str", "(", "i", ")", ":", "spaces", ".", "Box", "(", "low", "=", "act_lower_bound", ",", "\n", "high", "=", "act_upper_bound", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VelocityAviary.VelocityAviary._observationSpace": [[105, 124], ["numpy.array", "numpy.array", "gym.spaces.Dict", "str", "gym.spaces.Dict", "range", "gym.spaces.Box", "gym.spaces.MultiBinary"], "methods", ["None"], ["", "def", "_observationSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the observation space of the environment.\n\n        Returns\n        -------\n        dict[str, dict[str, ndarray]]\n            A Dict with NUM_DRONES entries indexed by Id in string format,\n            each a Dict in the form {Box(20,), MultiBinary(NUM_DRONES)}.\n\n        \"\"\"", "\n", "#### Observation vector ### X        Y        Z       Q1   Q2   Q3   Q4   R       P       Y       VX       VY       VZ       WX       WY       WZ       P0            P1            P2            P3", "\n", "obs_lower_bound", "=", "np", ".", "array", "(", "[", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "0.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "obs_upper_bound", "=", "np", ".", "array", "(", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", "]", ")", "\n", "return", "spaces", ".", "Dict", "(", "{", "str", "(", "i", ")", ":", "spaces", ".", "Dict", "(", "{", "\"state\"", ":", "spaces", ".", "Box", "(", "low", "=", "obs_lower_bound", ",", "\n", "high", "=", "obs_upper_bound", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"neighbors\"", ":", "spaces", ".", "MultiBinary", "(", "self", ".", "NUM_DRONES", ")", "\n", "}", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VelocityAviary.VelocityAviary._computeObs": [[127, 142], ["VelocityAviary.VelocityAviary._getAdjacencyMatrix", "str", "VelocityAviary.VelocityAviary._getDroneStateVector", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getAdjacencyMatrix", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "def", "_computeObs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the current observation of the environment.\n\n        For the value of key \"state\", see the implementation of `_getDroneStateVector()`,\n        the value of key \"neighbors\" is the drone's own row of the adjacency matrix.\n\n        Returns\n        -------\n        dict[str, dict[str, ndarray]]\n            A Dict with NUM_DRONES entries indexed by Id in string format,\n            each a Dict in the form {Box(20,), MultiBinary(NUM_DRONES)}.\n\n        \"\"\"", "\n", "adjacency_mat", "=", "self", ".", "_getAdjacencyMatrix", "(", ")", "\n", "return", "{", "str", "(", "i", ")", ":", "{", "\"state\"", ":", "self", ".", "_getDroneStateVector", "(", "i", ")", ",", "\"neighbors\"", ":", "adjacency_mat", "[", "i", ",", ":", "]", "}", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VelocityAviary.VelocityAviary._preprocessAction": [[145, 185], ["numpy.zeros", "action.items", "VelocityAviary.VelocityAviary._getDroneStateVector", "VelocityAviary.VelocityAviary.ctrl[].computeControl", "int", "numpy.linalg.norm", "numpy.zeros", "numpy.linalg.norm", "numpy.array", "int", "int", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.computeControl"], ["", "def", "_preprocessAction", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "\"\"\"Pre-processes the action passed to `.step()` into motors' RPMs.\n\n        Uses PID control to target a desired velocity vector.\n        Converts a dictionary into a 2D array.\n\n        Parameters\n        ----------\n        action : dict[str, ndarray]\n            The desired velocity input for each drone, to be translated into RPMs.\n\n        Returns\n        -------\n        ndarray\n            (NUM_DRONES, 4)-shaped array of ints containing to clipped RPMs\n            commanded to the 4 motors of each drone.\n\n        \"\"\"", "\n", "rpm", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "for", "k", ",", "v", "in", "action", ".", "items", "(", ")", ":", "\n", "#### Get the current state of the drone  ###################", "\n", "            ", "state", "=", "self", ".", "_getDroneStateVector", "(", "int", "(", "k", ")", ")", "\n", "#### Normalize the first 3 components of the target velocity", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "v", "[", "0", ":", "3", "]", ")", "!=", "0", ":", "\n", "                ", "v_unit_vector", "=", "v", "[", "0", ":", "3", "]", "/", "np", ".", "linalg", ".", "norm", "(", "v", "[", "0", ":", "3", "]", ")", "\n", "", "else", ":", "\n", "                ", "v_unit_vector", "=", "np", ".", "zeros", "(", "3", ")", "\n", "", "temp", ",", "_", ",", "_", "=", "self", ".", "ctrl", "[", "int", "(", "k", ")", "]", ".", "computeControl", "(", "control_timestep", "=", "self", ".", "AGGR_PHY_STEPS", "*", "self", ".", "TIMESTEP", ",", "\n", "cur_pos", "=", "state", "[", "0", ":", "3", "]", ",", "\n", "cur_quat", "=", "state", "[", "3", ":", "7", "]", ",", "\n", "cur_vel", "=", "state", "[", "10", ":", "13", "]", ",", "\n", "cur_ang_vel", "=", "state", "[", "13", ":", "16", "]", ",", "\n", "target_pos", "=", "state", "[", "0", ":", "3", "]", ",", "# same as the current position", "\n", "target_rpy", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "state", "[", "9", "]", "]", ")", ",", "# keep current yaw", "\n", "target_vel", "=", "self", ".", "SPEED_LIMIT", "*", "np", ".", "abs", "(", "v", "[", "3", "]", ")", "*", "v_unit_vector", "# target the desired velocity vector", "\n", ")", "\n", "rpm", "[", "int", "(", "k", ")", ",", ":", "]", "=", "temp", "\n", "", "return", "rpm", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VelocityAviary.VelocityAviary._computeReward": [[188, 200], ["None"], "methods", ["None"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        int\n            Dummy value.\n\n        \"\"\"", "\n", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VelocityAviary.VelocityAviary._computeDone": [[203, 215], ["None"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        bool\n            Dummy value.\n\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VelocityAviary.VelocityAviary._computeInfo": [[218, 230], ["None"], "methods", ["None"], ["", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        dict[str, int]\n            Dummy value.\n\n        \"\"\"", "\n", "return", "{", "\"answer\"", ":", "42", "}", "#### Calculated by the Deep Thought supercomputer in 7.5M years", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.CtrlAviary.CtrlAviary.__init__": [[12, 70], ["gym_pybullet_drones.envs.BaseAviary.BaseAviary.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", ":", "int", "=", "1", ",", "\n", "neighbourhood_radius", ":", "float", "=", "np", ".", "inf", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obstacles", "=", "False", ",", "\n", "user_debug_gui", "=", "True", ",", "\n", "output_folder", "=", "'results'", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of an aviary environment for control applications.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        num_drones : int, optional\n            The desired number of drones in the aviary.\n        neighbourhood_radius : float, optional\n            Radius used to compute the drones' adjacency matrix, in meters.\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obstacles : bool, optional\n            Whether to add obstacles to the simulation.\n        user_debug_gui : bool, optional\n            Whether to draw the drones' axes and the GUI RPMs sliders.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "neighbourhood_radius", "=", "neighbourhood_radius", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obstacles", "=", "obstacles", ",", "\n", "user_debug_gui", "=", "user_debug_gui", ",", "\n", "output_folder", "=", "output_folder", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.CtrlAviary.CtrlAviary._actionSpace": [[74, 91], ["numpy.array", "numpy.array", "gym.spaces.Dict", "str", "gym.spaces.Box", "range"], "methods", ["None"], ["", "def", "_actionSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the action space of the environment.\n\n        Returns\n        -------\n        dict[str, ndarray]\n            A Dict of Box(4,) with NUM_DRONES entries,\n            indexed by drone Id in string format.\n\n        \"\"\"", "\n", "#### Action vector ######## P0            P1            P2            P3", "\n", "act_lower_bound", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "act_upper_bound", "=", "np", ".", "array", "(", "[", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", "]", ")", "\n", "return", "spaces", ".", "Dict", "(", "{", "str", "(", "i", ")", ":", "spaces", ".", "Box", "(", "low", "=", "act_lower_bound", ",", "\n", "high", "=", "act_upper_bound", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.CtrlAviary.CtrlAviary._observationSpace": [[94, 113], ["numpy.array", "numpy.array", "gym.spaces.Dict", "str", "gym.spaces.Dict", "range", "gym.spaces.Box", "gym.spaces.MultiBinary"], "methods", ["None"], ["", "def", "_observationSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the observation space of the environment.\n\n        Returns\n        -------\n        dict[str, dict[str, ndarray]]\n            A Dict with NUM_DRONES entries indexed by Id in string format,\n            each a Dict in the form {Box(20,), MultiBinary(NUM_DRONES)}.\n\n        \"\"\"", "\n", "#### Observation vector ### X        Y        Z       Q1   Q2   Q3   Q4   R       P       Y       VX       VY       VZ       WX       WY       WZ       P0            P1            P2            P3", "\n", "obs_lower_bound", "=", "np", ".", "array", "(", "[", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "0.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "obs_upper_bound", "=", "np", ".", "array", "(", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", "]", ")", "\n", "return", "spaces", ".", "Dict", "(", "{", "str", "(", "i", ")", ":", "spaces", ".", "Dict", "(", "{", "\"state\"", ":", "spaces", ".", "Box", "(", "low", "=", "obs_lower_bound", ",", "\n", "high", "=", "obs_upper_bound", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"neighbors\"", ":", "spaces", ".", "MultiBinary", "(", "self", ".", "NUM_DRONES", ")", "\n", "}", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.CtrlAviary.CtrlAviary._computeObs": [[116, 131], ["CtrlAviary.CtrlAviary._getAdjacencyMatrix", "str", "CtrlAviary.CtrlAviary._getDroneStateVector", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getAdjacencyMatrix", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "def", "_computeObs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the current observation of the environment.\n\n        For the value of key \"state\", see the implementation of `_getDroneStateVector()`,\n        the value of key \"neighbors\" is the drone's own row of the adjacency matrix.\n\n        Returns\n        -------\n        dict[str, dict[str, ndarray]]\n            A Dict with NUM_DRONES entries indexed by Id in string format,\n            each a Dict in the form {Box(20,), MultiBinary(NUM_DRONES)}.\n\n        \"\"\"", "\n", "adjacency_mat", "=", "self", ".", "_getAdjacencyMatrix", "(", ")", "\n", "return", "{", "str", "(", "i", ")", ":", "{", "\"state\"", ":", "self", ".", "_getDroneStateVector", "(", "i", ")", ",", "\"neighbors\"", ":", "adjacency_mat", "[", "i", ",", ":", "]", "}", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.CtrlAviary.CtrlAviary._preprocessAction": [[134, 157], ["numpy.zeros", "action.items", "numpy.clip", "numpy.array", "int"], "methods", ["None"], ["", "def", "_preprocessAction", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "\"\"\"Pre-processes the action passed to `.step()` into motors' RPMs.\n\n        Clips and converts a dictionary into a 2D array.\n\n        Parameters\n        ----------\n        action : dict[str, ndarray]\n            The (unbounded) input action for each drone, to be translated into feasible RPMs.\n\n        Returns\n        -------\n        ndarray\n            (NUM_DRONES, 4)-shaped array of ints containing to clipped RPMs\n            commanded to the 4 motors of each drone.\n\n        \"\"\"", "\n", "clipped_action", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "for", "k", ",", "v", "in", "action", ".", "items", "(", ")", ":", "\n", "            ", "clipped_action", "[", "int", "(", "k", ")", ",", ":", "]", "=", "np", ".", "clip", "(", "np", ".", "array", "(", "v", ")", ",", "0", ",", "self", ".", "MAX_RPM", ")", "\n", "", "return", "clipped_action", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.CtrlAviary.CtrlAviary._computeReward": [[160, 172], ["None"], "methods", ["None"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        int\n            Dummy value.\n\n        \"\"\"", "\n", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.CtrlAviary.CtrlAviary._computeDone": [[175, 187], ["None"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        bool\n            Dummy value.\n\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.CtrlAviary.CtrlAviary._computeInfo": [[190, 202], ["None"], "methods", ["None"], ["", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        dict[str, int]\n            Dummy value.\n\n        \"\"\"", "\n", "return", "{", "\"answer\"", ":", "42", "}", "#### Calculated by the Deep Thought supercomputer in 7.5M years", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VisionAviary.VisionAviary.__init__": [[13, 75], ["gym_pybullet_drones.envs.BaseAviary.BaseAviary.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", ":", "int", "=", "1", ",", "\n", "neighbourhood_radius", ":", "float", "=", "np", ".", "inf", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obstacles", "=", "False", ",", "\n", "user_debug_gui", "=", "True", ",", "\n", "output_folder", "=", "'results'", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of an aviary environment for control applications using vision.\n\n        Attribute `vision_attributes` is automatically set to True when calling\n        the superclass `__init__()` method.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        num_drones : int, optional\n            The desired number of drones in the aviary.\n        neighbourhood_radius : float, optional\n            Radius used to compute the drones' adjacency matrix, in meters.\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obstacles : bool, optional\n            Whether to add obstacles to the simulation.\n        user_debug_gui : bool, optional\n            Whether to draw the drones' axes and the GUI RPMs sliders.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "neighbourhood_radius", "=", "neighbourhood_radius", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obstacles", "=", "obstacles", ",", "\n", "user_debug_gui", "=", "user_debug_gui", ",", "\n", "vision_attributes", "=", "True", ",", "\n", "output_folder", "=", "output_folder", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VisionAviary.VisionAviary._actionSpace": [[80, 97], ["numpy.array", "numpy.array", "gym.spaces.Dict", "str", "gym.spaces.Box", "range"], "methods", ["None"], ["", "def", "_actionSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the action space of the environment.\n\n        Returns\n        -------\n        dict[str, ndarray]\n            A Dict of Box(4,) with NUM_DRONES entries,\n            indexed by drone Id in string format.\n\n        \"\"\"", "\n", "#### Action vector ######## P0            P1            P2            P3", "\n", "act_lower_bound", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "act_upper_bound", "=", "np", ".", "array", "(", "[", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", "]", ")", "\n", "return", "spaces", ".", "Dict", "(", "{", "str", "(", "i", ")", ":", "spaces", ".", "Box", "(", "low", "=", "act_lower_bound", ",", "\n", "high", "=", "act_upper_bound", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VisionAviary.VisionAviary._observationSpace": [[100, 136], ["numpy.array", "numpy.array", "gym.spaces.Dict", "str", "gym.spaces.Dict", "range", "gym.spaces.Box", "gym.spaces.MultiBinary", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box"], "methods", ["None"], ["", "def", "_observationSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the observation space of the environment.\n\n        Returns\n        -------\n        dict[str, dict[str, ndarray]]\n            A Dict with NUM_DRONES entries indexed by Id in string format,\n            each a Dict in the form {Box(20,), MultiBinary(NUM_DRONES), Box(H,W,4), Box(H,W), Box(H,W)}.\n\n        \"\"\"", "\n", "#### Observation vector ### X        Y        Z       Q1   Q2   Q3   Q4   R       P       Y       VX       VY       VZ       WX       WY       WZ       P0            P1            P2            P3", "\n", "obs_lower_bound", "=", "np", ".", "array", "(", "[", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "0.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "obs_upper_bound", "=", "np", ".", "array", "(", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", "]", ")", "\n", "return", "spaces", ".", "Dict", "(", "{", "str", "(", "i", ")", ":", "spaces", ".", "Dict", "(", "{", "\"state\"", ":", "spaces", ".", "Box", "(", "low", "=", "obs_lower_bound", ",", "\n", "high", "=", "obs_upper_bound", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"neighbors\"", ":", "spaces", ".", "MultiBinary", "(", "self", ".", "NUM_DRONES", ")", ",", "\n", "\"rgb\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "IMG_RES", "[", "1", "]", ",", "self", ".", "IMG_RES", "[", "0", "]", ",", "4", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", "\n", ")", ",", "\n", "\"dep\"", ":", "spaces", ".", "Box", "(", "low", "=", ".01", ",", "\n", "high", "=", "1000.", ",", "\n", "shape", "=", "(", "self", ".", "IMG_RES", "[", "1", "]", ",", "\n", "self", ".", "IMG_RES", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"seg\"", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "\n", "high", "=", "100", ",", "\n", "shape", "=", "(", "self", ".", "IMG_RES", "[", "1", "]", ",", "\n", "self", ".", "IMG_RES", "[", "0", "]", ")", ",", "\n", "dtype", "=", "np", ".", "int", "\n", ")", "\n", "}", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VisionAviary.VisionAviary._computeObs": [[139, 172], ["VisionAviary.VisionAviary._getAdjacencyMatrix", "range", "VisionAviary.VisionAviary._getDroneImages", "VisionAviary.VisionAviary._getDroneStateVector", "VisionAviary.VisionAviary._exportImage", "str", "int", "str"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getAdjacencyMatrix", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneImages", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._exportImage"], ["", "def", "_computeObs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the current observation of the environment.\n\n        For the value of key \"state\", see the implementation of `_getDroneStateVector()`,\n        the value of key \"neighbors\" is the drone's own row of the adjacency matrix,\n        \"rgb\", \"dep\", and \"seg\" are matrices containing POV camera captures.\n\n        Returns\n        -------\n        dict[str, dict[str, ndarray]]\n            A Dict with NUM_DRONES entries indexed by Id in string format,\n            each a Dict in the form {Box(20,), MultiBinary(NUM_DRONES), Box(H,W,4), Box(H,W), Box(H,W)}.\n\n        \"\"\"", "\n", "adjacency_mat", "=", "self", ".", "_getAdjacencyMatrix", "(", ")", "\n", "obs", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "if", "self", ".", "step_counter", "%", "self", ".", "IMG_CAPTURE_FREQ", "==", "0", ":", "\n", "                ", "self", ".", "rgb", "[", "i", "]", ",", "self", ".", "dep", "[", "i", "]", ",", "self", ".", "seg", "[", "i", "]", "=", "self", ".", "_getDroneImages", "(", "i", ")", "\n", "#### Printing observation to PNG frames example ############", "\n", "if", "self", ".", "RECORD", ":", "\n", "                    ", "self", ".", "_exportImage", "(", "img_type", "=", "ImageType", ".", "RGB", ",", "# ImageType.BW, ImageType.DEP, ImageType.SEG", "\n", "img_input", "=", "self", ".", "rgb", "[", "i", "]", ",", "\n", "path", "=", "self", ".", "ONBOARD_IMG_PATH", "+", "\"drone_\"", "+", "str", "(", "i", ")", ",", "\n", "frame_num", "=", "int", "(", "self", ".", "step_counter", "/", "self", ".", "IMG_CAPTURE_FREQ", ")", "\n", ")", "\n", "", "", "obs", "[", "str", "(", "i", ")", "]", "=", "{", "\"state\"", ":", "self", ".", "_getDroneStateVector", "(", "i", ")", ",", "\"neighbors\"", ":", "adjacency_mat", "[", "i", ",", ":", "]", ",", "\"rgb\"", ":", "self", ".", "rgb", "[", "i", "]", ",", "\"dep\"", ":", "self", ".", "dep", "[", "i", "]", ",", "\"seg\"", ":", "self", ".", "seg", "[", "i", "]", "}", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VisionAviary.VisionAviary._preprocessAction": [[175, 198], ["numpy.zeros", "action.items", "numpy.clip", "numpy.array", "int"], "methods", ["None"], ["", "def", "_preprocessAction", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "\"\"\"Pre-processes the action passed to `.step()` into motors' RPMs.\n\n        Clips and converts a dictionary into a 2D array.\n\n        Parameters\n        ----------\n        action : dict[str, ndarray]\n            The (unbounded) input action for each drone, to be translated into feasible RPMs.\n\n        Returns\n        -------\n        ndarray\n            (NUM_DRONES, 4)-shaped array of ints containing to clipped RPMs\n            commanded to the 4 motors of each drone.\n\n        \"\"\"", "\n", "clipped_action", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "for", "k", ",", "v", "in", "action", ".", "items", "(", ")", ":", "\n", "            ", "clipped_action", "[", "int", "(", "k", ")", ",", ":", "]", "=", "np", ".", "clip", "(", "np", ".", "array", "(", "v", ")", ",", "0", ",", "self", ".", "MAX_RPM", ")", "\n", "", "return", "clipped_action", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VisionAviary.VisionAviary._computeReward": [[201, 213], ["None"], "methods", ["None"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        int\n            Dummy value.\n\n        \"\"\"", "\n", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VisionAviary.VisionAviary._computeDone": [[216, 228], ["None"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        bool\n            Dummy value.\n\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.VisionAviary.VisionAviary._computeInfo": [[231, 243], ["None"], "methods", ["None"], ["", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        dict[str, int]\n            Dummy value.\n\n        \"\"\"", "\n", "return", "{", "\"answer\"", ":", "42", "}", "#### Calculated by the Deep Thought supercomputer in 7.5M years", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.__init__": [[26, 222], ["BaseAviary.BaseAviary._parseURDFParameters", "print", "numpy.sqrt", "numpy.sqrt", "BaseAviary.BaseAviary._actionSpace", "BaseAviary.BaseAviary._observationSpace", "BaseAviary.BaseAviary._housekeeping", "BaseAviary.BaseAviary._updateAndStoreKinematicInformation", "BaseAviary.BaseAviary._startVideoRecording", "numpy.sqrt", "numpy.array", "int", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.linalg.inv", "numpy.array", "pybullet.connect", "pybullet.resetDebugVisualizerCamera", "pybullet.getDebugVisualizerCamera", "print", "print", "pybullet.connect", "numpy.vstack().transpose().reshape", "numpy.zeros", "numpy.sqrt", "print", "exit", "os.path.join", "os.makedirs", "numpy.array", "pybullet.configureDebugVisualizer", "range", "pybullet.addUserDebugParameter", "int", "int", "int", "pybullet.computeViewMatrixFromYawPitchRoll", "pybullet.computeProjectionMatrixFOV", "print", "print", "os.path.dirname", "numpy.array", "numpy.ones", "pybullet.addUserDebugParameter", "numpy.vstack().transpose", "numpy.array", "numpy.array", "datetime.datetime.datetime.now().strftime", "numpy.vstack", "datetime.datetime.datetime.now", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "str", "numpy.array", "numpy.array", "numpy.ones", "range", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._parseURDFParameters", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._actionSpace", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._observationSpace", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._housekeeping", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._updateAndStoreKinematicInformation", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._startVideoRecording"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", ":", "int", "=", "1", ",", "\n", "neighbourhood_radius", ":", "float", "=", "np", ".", "inf", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obstacles", "=", "False", ",", "\n", "user_debug_gui", "=", "True", ",", "\n", "vision_attributes", "=", "False", ",", "\n", "dynamics_attributes", "=", "False", ",", "\n", "output_folder", "=", "'results'", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of a generic aviary environment.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        num_drones : int, optional\n            The desired number of drones in the aviary.\n        neighbourhood_radius : float, optional\n            Radius used to compute the drones' adjacency matrix, in meters.\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obstacles : bool, optional\n            Whether to add obstacles to the simulation.\n        user_debug_gui : bool, optional\n            Whether to draw the drones' axes and the GUI RPMs sliders.\n        vision_attributes : bool, optional\n            Whether to allocate the attributes needed by vision-based aviary subclasses.\n        dynamics_attributes : bool, optional\n            Whether to allocate the attributes needed by subclasses accepting thrust and torques inputs.\n\n        \"\"\"", "\n", "#### Constants #############################################", "\n", "self", ".", "G", "=", "9.8", "\n", "self", ".", "RAD2DEG", "=", "180", "/", "np", ".", "pi", "\n", "self", ".", "DEG2RAD", "=", "np", ".", "pi", "/", "180", "\n", "self", ".", "SIM_FREQ", "=", "freq", "\n", "self", ".", "TIMESTEP", "=", "1.", "/", "self", ".", "SIM_FREQ", "\n", "self", ".", "AGGR_PHY_STEPS", "=", "aggregate_phy_steps", "\n", "#### Parameters ############################################", "\n", "self", ".", "NUM_DRONES", "=", "num_drones", "\n", "self", ".", "NEIGHBOURHOOD_RADIUS", "=", "neighbourhood_radius", "\n", "#### Options ###############################################", "\n", "self", ".", "DRONE_MODEL", "=", "drone_model", "\n", "self", ".", "GUI", "=", "gui", "\n", "self", ".", "RECORD", "=", "record", "\n", "self", ".", "PHYSICS", "=", "physics", "\n", "self", ".", "OBSTACLES", "=", "obstacles", "\n", "self", ".", "USER_DEBUG", "=", "user_debug_gui", "\n", "self", ".", "URDF", "=", "self", ".", "DRONE_MODEL", ".", "value", "+", "\".urdf\"", "\n", "self", ".", "OUTPUT_FOLDER", "=", "output_folder", "\n", "#### Load the drone properties from the .urdf file #########", "\n", "self", ".", "M", ",", "self", ".", "L", ",", "self", ".", "THRUST2WEIGHT_RATIO", ",", "self", ".", "J", ",", "self", ".", "J_INV", ",", "self", ".", "KF", ",", "self", ".", "KM", ",", "self", ".", "COLLISION_H", ",", "self", ".", "COLLISION_R", ",", "self", ".", "COLLISION_Z_OFFSET", ",", "self", ".", "MAX_SPEED_KMH", ",", "self", ".", "GND_EFF_COEFF", ",", "self", ".", "PROP_RADIUS", ",", "self", ".", "DRAG_COEFF", ",", "self", ".", "DW_COEFF_1", ",", "self", ".", "DW_COEFF_2", ",", "self", ".", "DW_COEFF_3", "=", "self", ".", "_parseURDFParameters", "(", ")", "\n", "print", "(", "\"[INFO] BaseAviary.__init__() loaded parameters from the drone's .urdf:\\n[INFO] m {:f}, L {:f},\\n[INFO] ixx {:f}, iyy {:f}, izz {:f},\\n[INFO] kf {:f}, km {:f},\\n[INFO] t2w {:f}, max_speed_kmh {:f},\\n[INFO] gnd_eff_coeff {:f}, prop_radius {:f},\\n[INFO] drag_xy_coeff {:f}, drag_z_coeff {:f},\\n[INFO] dw_coeff_1 {:f}, dw_coeff_2 {:f}, dw_coeff_3 {:f}\"", ".", "format", "(", "\n", "self", ".", "M", ",", "self", ".", "L", ",", "self", ".", "J", "[", "0", ",", "0", "]", ",", "self", ".", "J", "[", "1", ",", "1", "]", ",", "self", ".", "J", "[", "2", ",", "2", "]", ",", "self", ".", "KF", ",", "self", ".", "KM", ",", "self", ".", "THRUST2WEIGHT_RATIO", ",", "self", ".", "MAX_SPEED_KMH", ",", "self", ".", "GND_EFF_COEFF", ",", "self", ".", "PROP_RADIUS", ",", "self", ".", "DRAG_COEFF", "[", "0", "]", ",", "self", ".", "DRAG_COEFF", "[", "2", "]", ",", "self", ".", "DW_COEFF_1", ",", "self", ".", "DW_COEFF_2", ",", "self", ".", "DW_COEFF_3", ")", ")", "\n", "#### Compute constants #####################################", "\n", "self", ".", "GRAVITY", "=", "self", ".", "G", "*", "self", ".", "M", "\n", "self", ".", "HOVER_RPM", "=", "np", ".", "sqrt", "(", "self", ".", "GRAVITY", "/", "(", "4", "*", "self", ".", "KF", ")", ")", "\n", "self", ".", "MAX_RPM", "=", "np", ".", "sqrt", "(", "(", "self", ".", "THRUST2WEIGHT_RATIO", "*", "self", ".", "GRAVITY", ")", "/", "(", "4", "*", "self", ".", "KF", ")", ")", "\n", "self", ".", "MAX_THRUST", "=", "(", "4", "*", "self", ".", "KF", "*", "self", ".", "MAX_RPM", "**", "2", ")", "\n", "if", "self", ".", "DRONE_MODEL", "==", "DroneModel", ".", "CF2X", ":", "\n", "            ", "self", ".", "MAX_XY_TORQUE", "=", "(", "2", "*", "self", ".", "L", "*", "self", ".", "KF", "*", "self", ".", "MAX_RPM", "**", "2", ")", "/", "np", ".", "sqrt", "(", "2", ")", "\n", "", "elif", "self", ".", "DRONE_MODEL", "in", "[", "DroneModel", ".", "CF2P", ",", "DroneModel", ".", "HB", "]", ":", "\n", "            ", "self", ".", "MAX_XY_TORQUE", "=", "(", "self", ".", "L", "*", "self", ".", "KF", "*", "self", ".", "MAX_RPM", "**", "2", ")", "\n", "", "self", ".", "MAX_Z_TORQUE", "=", "(", "2", "*", "self", ".", "KM", "*", "self", ".", "MAX_RPM", "**", "2", ")", "\n", "self", ".", "GND_EFF_H_CLIP", "=", "0.25", "*", "self", ".", "PROP_RADIUS", "*", "np", ".", "sqrt", "(", "(", "15", "*", "self", ".", "MAX_RPM", "**", "2", "*", "self", ".", "KF", "*", "self", ".", "GND_EFF_COEFF", ")", "/", "self", ".", "MAX_THRUST", ")", "\n", "#### Create attributes for vision tasks ####################", "\n", "self", ".", "VISION_ATTR", "=", "vision_attributes", "\n", "if", "self", ".", "VISION_ATTR", ":", "\n", "            ", "self", ".", "IMG_RES", "=", "np", ".", "array", "(", "[", "64", ",", "48", "]", ")", "\n", "self", ".", "IMG_FRAME_PER_SEC", "=", "24", "\n", "self", ".", "IMG_CAPTURE_FREQ", "=", "int", "(", "self", ".", "SIM_FREQ", "/", "self", ".", "IMG_FRAME_PER_SEC", ")", "\n", "self", ".", "rgb", "=", "np", ".", "zeros", "(", "(", "(", "self", ".", "NUM_DRONES", ",", "self", ".", "IMG_RES", "[", "1", "]", ",", "self", ".", "IMG_RES", "[", "0", "]", ",", "4", ")", ")", ")", "\n", "self", ".", "dep", "=", "np", ".", "ones", "(", "(", "(", "self", ".", "NUM_DRONES", ",", "self", ".", "IMG_RES", "[", "1", "]", ",", "self", ".", "IMG_RES", "[", "0", "]", ")", ")", ")", "\n", "self", ".", "seg", "=", "np", ".", "zeros", "(", "(", "(", "self", ".", "NUM_DRONES", ",", "self", ".", "IMG_RES", "[", "1", "]", ",", "self", ".", "IMG_RES", "[", "0", "]", ")", ")", ")", "\n", "if", "self", ".", "IMG_CAPTURE_FREQ", "%", "self", ".", "AGGR_PHY_STEPS", "!=", "0", ":", "\n", "                ", "print", "(", "\"[ERROR] in BaseAviary.__init__(), aggregate_phy_steps incompatible with the desired video capture frame rate ({:f}Hz)\"", ".", "format", "(", "self", ".", "IMG_FRAME_PER_SEC", ")", ")", "\n", "exit", "(", ")", "\n", "", "if", "self", ".", "RECORD", ":", "\n", "# TODO: This doesn't appear to work in general ", "\n", "                ", "self", ".", "ONBOARD_IMG_PATH", "=", "os", ".", "path", ".", "join", "(", "self", ".", "OUTPUT_FOLDER", ",", "\"recording_\"", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m.%d.%Y_%H.%M.%S\"", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "ONBOARD_IMG_PATH", ")", ",", "exist_ok", "=", "True", ")", "\n", "#### Create attributes for dynamics control inputs #########", "\n", "", "", "self", ".", "DYNAMICS_ATTR", "=", "dynamics_attributes", "\n", "if", "self", ".", "DYNAMICS_ATTR", ":", "\n", "            ", "if", "self", ".", "DRONE_MODEL", "==", "DroneModel", ".", "CF2X", ":", "\n", "                ", "self", ".", "A", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "1", "/", "np", ".", "sqrt", "(", "2", ")", ",", "1", "/", "np", ".", "sqrt", "(", "2", ")", ",", "-", "1", "/", "np", ".", "sqrt", "(", "2", ")", ",", "-", "1", "/", "np", ".", "sqrt", "(", "2", ")", "]", ",", "[", "-", "1", "/", "np", ".", "sqrt", "(", "2", ")", ",", "1", "/", "np", ".", "sqrt", "(", "2", ")", ",", "1", "/", "np", ".", "sqrt", "(", "2", ")", ",", "-", "1", "/", "np", ".", "sqrt", "(", "2", ")", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", ",", "1", "]", "]", ")", "\n", "", "elif", "self", ".", "DRONE_MODEL", "in", "[", "DroneModel", ".", "CF2P", ",", "DroneModel", ".", "HB", "]", ":", "\n", "                ", "self", ".", "A", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", ",", "-", "1", "]", ",", "[", "-", "1", ",", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", ",", "1", "]", "]", ")", "\n", "", "self", ".", "INV_A", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "A", ")", "\n", "self", ".", "B_COEFF", "=", "np", ".", "array", "(", "[", "1", "/", "self", ".", "KF", ",", "1", "/", "(", "self", ".", "KF", "*", "self", ".", "L", ")", ",", "1", "/", "(", "self", ".", "KF", "*", "self", ".", "L", ")", ",", "1", "/", "self", ".", "KM", "]", ")", "\n", "#### Connect to PyBullet ###################################", "\n", "", "if", "self", ".", "GUI", ":", "\n", "#### With debug GUI ########################################", "\n", "            ", "self", ".", "CLIENT", "=", "p", ".", "connect", "(", "p", ".", "GUI", ")", "# p.connect(p.GUI, options=\"--opengl2\")", "\n", "for", "i", "in", "[", "p", ".", "COV_ENABLE_RGB_BUFFER_PREVIEW", ",", "p", ".", "COV_ENABLE_DEPTH_BUFFER_PREVIEW", ",", "p", ".", "COV_ENABLE_SEGMENTATION_MARK_PREVIEW", "]", ":", "\n", "                ", "p", ".", "configureDebugVisualizer", "(", "i", ",", "0", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "", "p", ".", "resetDebugVisualizerCamera", "(", "cameraDistance", "=", "3", ",", "\n", "cameraYaw", "=", "-", "30", ",", "\n", "cameraPitch", "=", "-", "30", ",", "\n", "cameraTargetPosition", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "ret", "=", "p", ".", "getDebugVisualizerCamera", "(", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "print", "(", "\"viewMatrix\"", ",", "ret", "[", "2", "]", ")", "\n", "print", "(", "\"projectionMatrix\"", ",", "ret", "[", "3", "]", ")", "\n", "if", "self", ".", "USER_DEBUG", ":", "\n", "#### Add input sliders to the GUI ##########################", "\n", "                ", "self", ".", "SLIDERS", "=", "-", "1", "*", "np", ".", "ones", "(", "4", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                    ", "self", ".", "SLIDERS", "[", "i", "]", "=", "p", ".", "addUserDebugParameter", "(", "\"Propeller \"", "+", "str", "(", "i", ")", "+", "\" RPM\"", ",", "0", ",", "self", ".", "MAX_RPM", ",", "self", ".", "HOVER_RPM", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "", "self", ".", "INPUT_SWITCH", "=", "p", ".", "addUserDebugParameter", "(", "\"Use GUI RPM\"", ",", "9999", ",", "-", "1", ",", "0", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "", "", "else", ":", "\n", "#### Without debug GUI #####################################", "\n", "            ", "self", ".", "CLIENT", "=", "p", ".", "connect", "(", "p", ".", "DIRECT", ")", "\n", "#### Uncomment the following line to use EGL Render Plugin #", "\n", "#### Instead of TinyRender (CPU-based) in PYB's Direct mode", "\n", "# if platform == \"linux\": p.setAdditionalSearchPath(pybullet_data.getDataPath()); plugin = p.loadPlugin(egl.get_filename(), \"_eglRendererPlugin\"); print(\"plugin=\", plugin)", "\n", "if", "self", ".", "RECORD", ":", "\n", "#### Set the camera parameters to save frames in DIRECT mode", "\n", "                ", "self", ".", "VID_WIDTH", "=", "int", "(", "640", ")", "\n", "self", ".", "VID_HEIGHT", "=", "int", "(", "480", ")", "\n", "self", ".", "FRAME_PER_SEC", "=", "24", "\n", "self", ".", "CAPTURE_FREQ", "=", "int", "(", "self", ".", "SIM_FREQ", "/", "self", ".", "FRAME_PER_SEC", ")", "\n", "self", ".", "CAM_VIEW", "=", "p", ".", "computeViewMatrixFromYawPitchRoll", "(", "distance", "=", "3", ",", "\n", "yaw", "=", "-", "30", ",", "\n", "pitch", "=", "-", "30", ",", "\n", "roll", "=", "0", ",", "\n", "cameraTargetPosition", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "upAxisIndex", "=", "2", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "self", ".", "CAM_PRO", "=", "p", ".", "computeProjectionMatrixFOV", "(", "fov", "=", "60.0", ",", "\n", "aspect", "=", "self", ".", "VID_WIDTH", "/", "self", ".", "VID_HEIGHT", ",", "\n", "nearVal", "=", "0.1", ",", "\n", "farVal", "=", "1000.0", "\n", ")", "\n", "#### Set initial poses #####################################", "\n", "", "", "if", "initial_xyzs", "is", "None", ":", "\n", "            ", "self", ".", "INIT_XYZS", "=", "np", ".", "vstack", "(", "[", "np", ".", "array", "(", "[", "x", "*", "4", "*", "self", ".", "L", "for", "x", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "]", ")", ",", "np", ".", "array", "(", "[", "y", "*", "4", "*", "self", ".", "L", "for", "y", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "]", ")", ",", "np", ".", "ones", "(", "self", ".", "NUM_DRONES", ")", "*", "(", "self", ".", "COLLISION_H", "/", "2", "-", "self", ".", "COLLISION_Z_OFFSET", "+", ".1", ")", "]", ")", ".", "transpose", "(", ")", ".", "reshape", "(", "self", ".", "NUM_DRONES", ",", "3", ")", "\n", "", "elif", "np", ".", "array", "(", "initial_xyzs", ")", ".", "shape", "==", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ":", "\n", "            ", "self", ".", "INIT_XYZS", "=", "initial_xyzs", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] invalid initial_xyzs in BaseAviary.__init__(), try initial_xyzs.reshape(NUM_DRONES,3)\"", ")", "\n", "", "if", "initial_rpys", "is", "None", ":", "\n", "            ", "self", ".", "INIT_RPYS", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "", "elif", "np", ".", "array", "(", "initial_rpys", ")", ".", "shape", "==", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ":", "\n", "            ", "self", ".", "INIT_RPYS", "=", "initial_rpys", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] invalid initial_rpys in BaseAviary.__init__(), try initial_rpys.reshape(NUM_DRONES,3)\"", ")", "\n", "#### Create action and observation spaces ##################", "\n", "", "self", ".", "action_space", "=", "self", ".", "_actionSpace", "(", ")", "\n", "self", ".", "observation_space", "=", "self", ".", "_observationSpace", "(", ")", "\n", "#### Housekeeping ##########################################", "\n", "self", ".", "_housekeeping", "(", ")", "\n", "#### Update and store the drones kinematic information #####", "\n", "self", ".", "_updateAndStoreKinematicInformation", "(", ")", "\n", "#### Start video recording #################################", "\n", "self", ".", "_startVideoRecording", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.reset": [[225, 244], ["pybullet.resetSimulation", "BaseAviary.BaseAviary._housekeeping", "BaseAviary.BaseAviary._updateAndStoreKinematicInformation", "BaseAviary.BaseAviary._startVideoRecording", "BaseAviary.BaseAviary._computeObs"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._housekeeping", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._updateAndStoreKinematicInformation", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._startVideoRecording", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._computeObs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the environment.\n\n        Returns\n        -------\n        ndarray | dict[..]\n            The initial observation, check the specific implementation of `_computeObs()`\n            in each subclass for its format.\n\n        \"\"\"", "\n", "p", ".", "resetSimulation", "(", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "#### Housekeeping ##########################################", "\n", "self", ".", "_housekeeping", "(", ")", "\n", "#### Update and store the drones kinematic information #####", "\n", "self", ".", "_updateAndStoreKinematicInformation", "(", ")", "\n", "#### Start video recording #################################", "\n", "self", ".", "_startVideoRecording", "(", ")", "\n", "#### Return the initial observation ########################", "\n", "return", "self", ".", "_computeObs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.step": [[247, 358], ["range", "BaseAviary.BaseAviary._updateAndStoreKinematicInformation", "BaseAviary.BaseAviary._computeObs", "BaseAviary.BaseAviary._computeReward", "BaseAviary.BaseAviary._computeDone", "BaseAviary.BaseAviary._computeInfo", "pybullet.getCameraImage", "PIL.Image.fromarray().save", "pybullet.readUserDebugParameter", "range", "numpy.tile", "BaseAviary.BaseAviary._saveLastAction", "numpy.reshape", "range", "os.path.join", "pybullet.readUserDebugParameter", "BaseAviary.BaseAviary._preprocessAction", "BaseAviary.BaseAviary._updateAndStoreKinematicInformation", "pybullet.stepSimulation", "PIL.Image.fromarray", "int", "pybullet.addUserDebugText", "BaseAviary.BaseAviary._physics", "numpy.reshape", "range", "BaseAviary.BaseAviary._dynamics", "str", "int", "BaseAviary.BaseAviary._physics", "BaseAviary.BaseAviary._groundEffect", "BaseAviary.BaseAviary._physics", "BaseAviary.BaseAviary._drag", "BaseAviary.BaseAviary._physics", "BaseAviary.BaseAviary._downwash", "BaseAviary.BaseAviary._physics", "BaseAviary.BaseAviary._groundEffect", "BaseAviary.BaseAviary._drag", "BaseAviary.BaseAviary._downwash"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._updateAndStoreKinematicInformation", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._computeObs", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._computeReward", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._computeDone", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._computeInfo", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._saveLastAction", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._preprocessAction", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._updateAndStoreKinematicInformation", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._physics", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._dynamics", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._physics", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._groundEffect", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._physics", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._drag", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._physics", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._downwash", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._physics", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._groundEffect", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._drag", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._downwash"], ["", "def", "step", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "\"\"\"Advances the environment by one simulation step.\n\n        Parameters\n        ----------\n        action : ndarray | dict[..]\n            The input action for one or more drones, translated into RPMs by\n            the specific implementation of `_preprocessAction()` in each subclass.\n\n        Returns\n        -------\n        ndarray | dict[..]\n            The step's observation, check the specific implementation of `_computeObs()`\n            in each subclass for its format.\n        float | dict[..]\n            The step's reward value(s), check the specific implementation of `_computeReward()`\n            in each subclass for its format.\n        bool | dict[..]\n            Whether the current epoisode is over, check the specific implementation of `_computeDone()`\n            in each subclass for its format.\n        dict[..]\n            Additional information as a dictionary, check the specific implementation of `_computeInfo()`\n            in each subclass for its format.\n\n        \"\"\"", "\n", "#### Save PNG video frames if RECORD=True and GUI=False ####", "\n", "if", "self", ".", "RECORD", "and", "not", "self", ".", "GUI", "and", "self", ".", "step_counter", "%", "self", ".", "CAPTURE_FREQ", "==", "0", ":", "\n", "            ", "[", "w", ",", "h", ",", "rgb", ",", "dep", ",", "seg", "]", "=", "p", ".", "getCameraImage", "(", "width", "=", "self", ".", "VID_WIDTH", ",", "\n", "height", "=", "self", ".", "VID_HEIGHT", ",", "\n", "shadow", "=", "1", ",", "\n", "viewMatrix", "=", "self", ".", "CAM_VIEW", ",", "\n", "projectionMatrix", "=", "self", ".", "CAM_PRO", ",", "\n", "renderer", "=", "p", ".", "ER_TINY_RENDERER", ",", "\n", "flags", "=", "p", ".", "ER_SEGMENTATION_MASK_OBJECT_AND_LINKINDEX", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "(", "Image", ".", "fromarray", "(", "np", ".", "reshape", "(", "rgb", ",", "(", "h", ",", "w", ",", "4", ")", ")", ",", "'RGBA'", ")", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "IMG_PATH", ",", "\"frame_\"", "+", "str", "(", "self", ".", "FRAME_NUM", ")", "+", "\".png\"", ")", ")", "\n", "#### Save the depth or segmentation view instead #######", "\n", "# dep = ((dep-np.min(dep)) * 255 / (np.max(dep)-np.min(dep))).astype('uint8')", "\n", "# (Image.fromarray(np.reshape(dep, (h, w)))).save(self.IMG_PATH+\"frame_\"+str(self.FRAME_NUM)+\".png\")", "\n", "# seg = ((seg-np.min(seg)) * 255 / (np.max(seg)-np.min(seg))).astype('uint8')", "\n", "# (Image.fromarray(np.reshape(seg, (h, w)))).save(self.IMG_PATH+\"frame_\"+str(self.FRAME_NUM)+\".png\")", "\n", "self", ".", "FRAME_NUM", "+=", "1", "\n", "#### Read the GUI's input parameters #######################", "\n", "", "if", "self", ".", "GUI", "and", "self", ".", "USER_DEBUG", ":", "\n", "            ", "current_input_switch", "=", "p", ".", "readUserDebugParameter", "(", "self", ".", "INPUT_SWITCH", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "if", "current_input_switch", ">", "self", ".", "last_input_switch", ":", "\n", "                ", "self", ".", "last_input_switch", "=", "current_input_switch", "\n", "self", ".", "USE_GUI_RPM", "=", "True", "if", "self", ".", "USE_GUI_RPM", "==", "False", "else", "False", "\n", "", "", "if", "self", ".", "USE_GUI_RPM", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "self", ".", "gui_input", "[", "i", "]", "=", "p", ".", "readUserDebugParameter", "(", "int", "(", "self", ".", "SLIDERS", "[", "i", "]", ")", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "", "clipped_action", "=", "np", ".", "tile", "(", "self", ".", "gui_input", ",", "(", "self", ".", "NUM_DRONES", ",", "1", ")", ")", "\n", "if", "self", ".", "step_counter", "%", "(", "self", ".", "SIM_FREQ", "/", "2", ")", "==", "0", ":", "\n", "                ", "self", ".", "GUI_INPUT_TEXT", "=", "[", "p", ".", "addUserDebugText", "(", "\"Using GUI RPM\"", ",", "\n", "textPosition", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "textColorRGB", "=", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "lifeTime", "=", "1", ",", "\n", "textSize", "=", "2", ",", "\n", "parentObjectUniqueId", "=", "self", ".", "DRONE_IDS", "[", "i", "]", ",", "\n", "parentLinkIndex", "=", "-", "1", ",", "\n", "replaceItemUniqueId", "=", "int", "(", "self", ".", "GUI_INPUT_TEXT", "[", "i", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "]", "\n", "#### Save, preprocess, and clip the action to the max. RPM #", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_saveLastAction", "(", "action", ")", "\n", "clipped_action", "=", "np", ".", "reshape", "(", "self", ".", "_preprocessAction", "(", "action", ")", ",", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "#### Repeat for as many as the aggregate physics steps #####", "\n", "", "for", "_", "in", "range", "(", "self", ".", "AGGR_PHY_STEPS", ")", ":", "\n", "#### Update and store the drones kinematic info for certain", "\n", "#### Between aggregate steps for certain types of update ###", "\n", "            ", "if", "self", ".", "AGGR_PHY_STEPS", ">", "1", "and", "self", ".", "PHYSICS", "in", "[", "Physics", ".", "DYN", ",", "Physics", ".", "PYB_GND", ",", "Physics", ".", "PYB_DRAG", ",", "Physics", ".", "PYB_DW", ",", "Physics", ".", "PYB_GND_DRAG_DW", "]", ":", "\n", "                ", "self", ".", "_updateAndStoreKinematicInformation", "(", ")", "\n", "#### Step the simulation using the desired physics update ##", "\n", "", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "                ", "if", "self", ".", "PHYSICS", "==", "Physics", ".", "PYB", ":", "\n", "                    ", "self", ".", "_physics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "", "elif", "self", ".", "PHYSICS", "==", "Physics", ".", "DYN", ":", "\n", "                    ", "self", ".", "_dynamics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "", "elif", "self", ".", "PHYSICS", "==", "Physics", ".", "PYB_GND", ":", "\n", "                    ", "self", ".", "_physics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_groundEffect", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "", "elif", "self", ".", "PHYSICS", "==", "Physics", ".", "PYB_DRAG", ":", "\n", "                    ", "self", ".", "_physics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_drag", "(", "self", ".", "last_clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "", "elif", "self", ".", "PHYSICS", "==", "Physics", ".", "PYB_DW", ":", "\n", "                    ", "self", ".", "_physics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_downwash", "(", "i", ")", "\n", "", "elif", "self", ".", "PHYSICS", "==", "Physics", ".", "PYB_GND_DRAG_DW", ":", "\n", "                    ", "self", ".", "_physics", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_groundEffect", "(", "clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_drag", "(", "self", ".", "last_clipped_action", "[", "i", ",", ":", "]", ",", "i", ")", "\n", "self", ".", "_downwash", "(", "i", ")", "\n", "#### PyBullet computes the new state, unless Physics.DYN ###", "\n", "", "", "if", "self", ".", "PHYSICS", "!=", "Physics", ".", "DYN", ":", "\n", "                ", "p", ".", "stepSimulation", "(", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "#### Save the last applied action (e.g. to compute drag) ###", "\n", "", "self", ".", "last_clipped_action", "=", "clipped_action", "\n", "#### Update and store the drones kinematic information #####", "\n", "", "self", ".", "_updateAndStoreKinematicInformation", "(", ")", "\n", "#### Prepare the return values #############################", "\n", "obs", "=", "self", ".", "_computeObs", "(", ")", "\n", "reward", "=", "self", ".", "_computeReward", "(", ")", "\n", "done", "=", "self", ".", "_computeDone", "(", ")", "\n", "info", "=", "self", ".", "_computeInfo", "(", ")", "\n", "#### Advance the step counter ##############################", "\n", "self", ".", "step_counter", "=", "self", ".", "step_counter", "+", "(", "1", "*", "self", ".", "AGGR_PHY_STEPS", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.render": [[361, 387], ["print", "range", "print", "print", "time.time", "time.time"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "\n", "mode", "=", "'human'", ",", "\n", "close", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\"Prints a textual output of the environment.\n\n        Parameters\n        ----------\n        mode : str, optional\n            Unused.\n        close : bool, optional\n            Unused.\n\n        \"\"\"", "\n", "if", "self", ".", "first_render_call", "and", "not", "self", ".", "GUI", ":", "\n", "            ", "print", "(", "\"[WARNING] BaseAviary.render() is implemented as text-only, re-initialize the environment using Aviary(gui=True) to use PyBullet's graphical interface\"", ")", "\n", "self", ".", "first_render_call", "=", "False", "\n", "", "print", "(", "\"\\n[INFO] BaseAviary.render() \u2014\u2014\u2014 it {:04d}\"", ".", "format", "(", "self", ".", "step_counter", ")", ",", "\n", "\"\u2014\u2014\u2014 wall-clock time {:.1f}s,\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "self", ".", "RESET_TIME", ")", ",", "\n", "\"simulation time {:.1f}s@{:d}Hz ({:.2f}x)\"", ".", "format", "(", "self", ".", "step_counter", "*", "self", ".", "TIMESTEP", ",", "self", ".", "SIM_FREQ", ",", "(", "self", ".", "step_counter", "*", "self", ".", "TIMESTEP", ")", "/", "(", "time", ".", "time", "(", ")", "-", "self", ".", "RESET_TIME", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "print", "(", "\"[INFO] BaseAviary.render() \u2014\u2014\u2014 drone {:d}\"", ".", "format", "(", "i", ")", ",", "\n", "\"\u2014\u2014\u2014 x {:+06.2f}, y {:+06.2f}, z {:+06.2f}\"", ".", "format", "(", "self", ".", "pos", "[", "i", ",", "0", "]", ",", "self", ".", "pos", "[", "i", ",", "1", "]", ",", "self", ".", "pos", "[", "i", ",", "2", "]", ")", ",", "\n", "\"\u2014\u2014\u2014 velocity {:+06.2f}, {:+06.2f}, {:+06.2f}\"", ".", "format", "(", "self", ".", "vel", "[", "i", ",", "0", "]", ",", "self", ".", "vel", "[", "i", ",", "1", "]", ",", "self", ".", "vel", "[", "i", ",", "2", "]", ")", ",", "\n", "\"\u2014\u2014\u2014 roll {:+06.2f}, pitch {:+06.2f}, yaw {:+06.2f}\"", ".", "format", "(", "self", ".", "rpy", "[", "i", ",", "0", "]", "*", "self", ".", "RAD2DEG", ",", "self", ".", "rpy", "[", "i", ",", "1", "]", "*", "self", ".", "RAD2DEG", ",", "self", ".", "rpy", "[", "i", ",", "2", "]", "*", "self", ".", "RAD2DEG", ")", ",", "\n", "\"\u2014\u2014\u2014 angular velocity {:+06.4f}, {:+06.4f}, {:+06.4f} \u2014\u2014\u2014 \"", ".", "format", "(", "self", ".", "ang_v", "[", "i", ",", "0", "]", ",", "self", ".", "ang_v", "[", "i", ",", "1", "]", ",", "self", ".", "ang_v", "[", "i", ",", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.close": [[390, 396], ["pybullet.disconnect", "pybullet.stopStateLogging"], "methods", ["None"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"Terminates the environment.\n        \"\"\"", "\n", "if", "self", ".", "RECORD", "and", "self", ".", "GUI", ":", "\n", "            ", "p", ".", "stopStateLogging", "(", "self", ".", "VIDEO_ID", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "", "p", ".", "disconnect", "(", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.getPyBulletClient": [[399, 409], ["None"], "methods", ["None"], ["", "def", "getPyBulletClient", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the PyBullet Client Id.\n\n        Returns\n        -------\n        int:\n            The PyBullet Client Id.\n\n        \"\"\"", "\n", "return", "self", ".", "CLIENT", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.getDroneIds": [[412, 422], ["None"], "methods", ["None"], ["", "def", "getDroneIds", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the Drone Ids.\n\n        Returns\n        -------\n        ndarray:\n            (NUM_DRONES,)-shaped array of ints containing the drones' ids.\n\n        \"\"\"", "\n", "return", "self", ".", "DRONE_IDS", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._housekeeping": [[425, 477], ["time.time", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pybullet.setGravity", "pybullet.setRealTimeSimulation", "pybullet.setTimeStep", "pybullet.setAdditionalSearchPath", "pybullet.loadURDF", "numpy.array", "range", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.zeros", "pybullet_data.getDataPath", "BaseAviary.BaseAviary._addObstacles", "pybullet.loadURDF", "BaseAviary.BaseAviary._showDroneLocalAxes", "pkg_resources.resource_filename", "pybullet.getQuaternionFromEuler", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._addObstacles", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._showDroneLocalAxes"], ["", "def", "_housekeeping", "(", "self", ")", ":", "\n", "        ", "\"\"\"Housekeeping function.\n\n        Allocation and zero-ing of the variables and PyBullet's parameters/objects\n        in the `reset()` function.\n\n        \"\"\"", "\n", "#### Initialize/reset counters and zero-valued variables ###", "\n", "self", ".", "RESET_TIME", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "step_counter", "=", "0", "\n", "self", ".", "first_render_call", "=", "True", "\n", "self", ".", "X_AX", "=", "-", "1", "*", "np", ".", "ones", "(", "self", ".", "NUM_DRONES", ")", "\n", "self", ".", "Y_AX", "=", "-", "1", "*", "np", ".", "ones", "(", "self", ".", "NUM_DRONES", ")", "\n", "self", ".", "Z_AX", "=", "-", "1", "*", "np", ".", "ones", "(", "self", ".", "NUM_DRONES", ")", "\n", "self", ".", "GUI_INPUT_TEXT", "=", "-", "1", "*", "np", ".", "ones", "(", "self", ".", "NUM_DRONES", ")", "\n", "self", ".", "USE_GUI_RPM", "=", "False", "\n", "self", ".", "last_input_switch", "=", "0", "\n", "self", ".", "last_action", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "self", ".", "last_clipped_action", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "self", ".", "gui_input", "=", "np", ".", "zeros", "(", "4", ")", "\n", "#### Initialize the drones kinemaatic information ##########", "\n", "self", ".", "pos", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "self", ".", "quat", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "self", ".", "rpy", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "self", ".", "vel", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "self", ".", "ang_v", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "if", "self", ".", "PHYSICS", "==", "Physics", ".", "DYN", ":", "\n", "            ", "self", ".", "rpy_rates", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "3", ")", ")", "\n", "#### Set PyBullet's parameters #############################", "\n", "", "p", ".", "setGravity", "(", "0", ",", "0", ",", "-", "self", ".", "G", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "p", ".", "setRealTimeSimulation", "(", "0", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "p", ".", "setTimeStep", "(", "self", ".", "TIMESTEP", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "p", ".", "setAdditionalSearchPath", "(", "pybullet_data", ".", "getDataPath", "(", ")", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "#### Load ground plane, drone and obstacles models #########", "\n", "self", ".", "PLANE_ID", "=", "p", ".", "loadURDF", "(", "\"plane.urdf\"", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "\n", "self", ".", "DRONE_IDS", "=", "np", ".", "array", "(", "[", "p", ".", "loadURDF", "(", "pkg_resources", ".", "resource_filename", "(", "'gym_pybullet_drones'", ",", "'assets/'", "+", "self", ".", "URDF", ")", ",", "\n", "self", ".", "INIT_XYZS", "[", "i", ",", ":", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "self", ".", "INIT_RPYS", "[", "i", ",", ":", "]", ")", ",", "\n", "flags", "=", "p", ".", "URDF_USE_INERTIA_FROM_FILE", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "#### Show the frame of reference of the drone, note that ###", "\n", "#### It severly slows down the GUI #########################", "\n", "            ", "if", "self", ".", "GUI", "and", "self", ".", "USER_DEBUG", ":", "\n", "                ", "self", ".", "_showDroneLocalAxes", "(", "i", ")", "\n", "#### Disable collisions between drones' and the ground plane", "\n", "#### E.g., to start a drone at [0,0,0] #####################", "\n", "# p.setCollisionFilterPair(bodyUniqueIdA=self.PLANE_ID, bodyUniqueIdB=self.DRONE_IDS[i], linkIndexA=-1, linkIndexB=-1, enableCollision=0, physicsClientId=self.CLIENT)", "\n", "", "", "if", "self", ".", "OBSTACLES", ":", "\n", "            ", "self", ".", "_addObstacles", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._updateAndStoreKinematicInformation": [[480, 491], ["range", "pybullet.getBasePositionAndOrientation", "pybullet.getEulerFromQuaternion", "pybullet.getBaseVelocity"], "methods", ["None"], ["", "", "def", "_updateAndStoreKinematicInformation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Updates and stores the drones kinemaatic information.\n\n        This method is meant to limit the number of calls to PyBullet in each step\n        and improve performance (at the expense of memory).\n\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "self", ".", "pos", "[", "i", "]", ",", "self", ".", "quat", "[", "i", "]", "=", "p", ".", "getBasePositionAndOrientation", "(", "self", ".", "DRONE_IDS", "[", "i", "]", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "self", ".", "rpy", "[", "i", "]", "=", "p", ".", "getEulerFromQuaternion", "(", "self", ".", "quat", "[", "i", "]", ")", "\n", "self", ".", "vel", "[", "i", "]", ",", "self", ".", "ang_v", "[", "i", "]", "=", "p", ".", "getBaseVelocity", "(", "self", ".", "DRONE_IDS", "[", "i", "]", ",", "physicsClientId", "=", "self", ".", "CLIENT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._startVideoRecording": [[494, 510], ["pybullet.startStateLogging", "os.path.join", "os.makedirs", "os.path.dirname", "os.path.join", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "", "def", "_startVideoRecording", "(", "self", ")", ":", "\n", "        ", "\"\"\"Starts the recording of a video output.\n\n        The format of the video output is .mp4, if GUI is True, or .png, otherwise.\n        The video is saved under folder `files/videos`.\n\n        \"\"\"", "\n", "if", "self", ".", "RECORD", "and", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "VIDEO_ID", "=", "p", ".", "startStateLogging", "(", "loggingType", "=", "p", ".", "STATE_LOGGING_VIDEO_MP4", ",", "\n", "fileName", "=", "os", ".", "path", ".", "join", "(", "self", ".", "OUTPUT_FOLDER", ",", "\"recording_\"", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m.%d.%Y_%H.%M.%S\"", ")", ",", "\"output.mp4\"", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "", "if", "self", ".", "RECORD", "and", "not", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "FRAME_NUM", "=", "0", "\n", "self", ".", "IMG_PATH", "=", "os", ".", "path", ".", "join", "(", "self", ".", "OUTPUT_FOLDER", ",", "\"recording_\"", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m.%d.%Y_%H.%M.%S\"", ")", ",", "''", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "IMG_PATH", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector": [[513, 534], ["numpy.hstack", "numpy.hstack.reshape"], "methods", ["None"], ["", "", "def", "_getDroneStateVector", "(", "self", ",", "\n", "nth_drone", "\n", ")", ":", "\n", "        ", "\"\"\"Returns the state vector of the n-th drone.\n\n        Parameters\n        ----------\n        nth_drone : int\n            The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        Returns\n        -------\n        ndarray \n            (20,)-shaped array of floats containing the state vector of the n-th drone.\n            Check the only line in this method and `_updateAndStoreKinematicInformation()`\n            to understand its format.\n\n        \"\"\"", "\n", "state", "=", "np", ".", "hstack", "(", "[", "self", ".", "pos", "[", "nth_drone", ",", ":", "]", ",", "self", ".", "quat", "[", "nth_drone", ",", ":", "]", ",", "self", ".", "rpy", "[", "nth_drone", ",", ":", "]", ",", "\n", "self", ".", "vel", "[", "nth_drone", ",", ":", "]", ",", "self", ".", "ang_v", "[", "nth_drone", ",", ":", "]", ",", "self", ".", "last_clipped_action", "[", "nth_drone", ",", ":", "]", "]", ")", "\n", "return", "state", ".", "reshape", "(", "20", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneImages": [[537, 590], ["numpy.array().reshape", "pybullet.computeViewMatrix", "pybullet.computeProjectionMatrixFOV", "pybullet.getCameraImage", "numpy.reshape", "numpy.reshape", "numpy.reshape", "print", "exit", "numpy.dot", "numpy.array", "numpy.array", "numpy.array", "pybullet.getMatrixFromQuaternion", "numpy.array"], "methods", ["None"], ["", "def", "_getDroneImages", "(", "self", ",", "\n", "nth_drone", ",", "\n", "segmentation", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"Returns camera captures from the n-th drone POV.\n\n        Parameters\n        ----------\n        nth_drone : int\n            The ordinal number/position of the desired drone in list self.DRONE_IDS.\n        segmentation : bool, optional\n            Whehter to compute the compute the segmentation mask.\n            It affects performance.\n\n        Returns\n        -------\n        ndarray \n            (h, w, 4)-shaped array of uint8's containing the RBG(A) image captured from the n-th drone's POV.\n        ndarray\n            (h, w)-shaped array of uint8's containing the depth image captured from the n-th drone's POV.\n        ndarray\n            (h, w)-shaped array of uint8's containing the segmentation image captured from the n-th drone's POV.\n\n        \"\"\"", "\n", "if", "self", ".", "IMG_RES", "is", "None", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseAviary._getDroneImages(), remember to set self.IMG_RES to np.array([width, height])\"", ")", "\n", "exit", "(", ")", "\n", "", "rot_mat", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "self", ".", "quat", "[", "nth_drone", ",", ":", "]", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "#### Set target point, camera view and projection matrices #", "\n", "target", "=", "np", ".", "dot", "(", "rot_mat", ",", "np", ".", "array", "(", "[", "1000", ",", "0", ",", "0", "]", ")", ")", "+", "np", ".", "array", "(", "self", ".", "pos", "[", "nth_drone", ",", ":", "]", ")", "\n", "DRONE_CAM_VIEW", "=", "p", ".", "computeViewMatrix", "(", "cameraEyePosition", "=", "self", ".", "pos", "[", "nth_drone", ",", ":", "]", "+", "np", ".", "array", "(", "[", "0", ",", "0", ",", "self", ".", "L", "]", ")", ",", "\n", "cameraTargetPosition", "=", "target", ",", "\n", "cameraUpVector", "=", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "DRONE_CAM_PRO", "=", "p", ".", "computeProjectionMatrixFOV", "(", "fov", "=", "60.0", ",", "\n", "aspect", "=", "1.0", ",", "\n", "nearVal", "=", "self", ".", "L", ",", "\n", "farVal", "=", "1000.0", "\n", ")", "\n", "SEG_FLAG", "=", "p", ".", "ER_SEGMENTATION_MASK_OBJECT_AND_LINKINDEX", "if", "segmentation", "else", "p", ".", "ER_NO_SEGMENTATION_MASK", "\n", "[", "w", ",", "h", ",", "rgb", ",", "dep", ",", "seg", "]", "=", "p", ".", "getCameraImage", "(", "width", "=", "self", ".", "IMG_RES", "[", "0", "]", ",", "\n", "height", "=", "self", ".", "IMG_RES", "[", "1", "]", ",", "\n", "shadow", "=", "1", ",", "\n", "viewMatrix", "=", "DRONE_CAM_VIEW", ",", "\n", "projectionMatrix", "=", "DRONE_CAM_PRO", ",", "\n", "flags", "=", "SEG_FLAG", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "rgb", "=", "np", ".", "reshape", "(", "rgb", ",", "(", "h", ",", "w", ",", "4", ")", ")", "\n", "dep", "=", "np", ".", "reshape", "(", "dep", ",", "(", "h", ",", "w", ")", ")", "\n", "seg", "=", "np", ".", "reshape", "(", "seg", ",", "(", "h", ",", "w", ")", ")", "\n", "return", "rgb", ",", "dep", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._exportImage": [[593, 627], ["PIL.Image.fromarray().save", "PIL.Image.fromarray().save", "os.path.join", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray", "img_input.astype", "print", "exit", "str", "str", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "numpy.sum", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save"], ["", "def", "_exportImage", "(", "self", ",", "\n", "img_type", ":", "ImageType", ",", "\n", "img_input", ",", "\n", "path", ":", "str", ",", "\n", "frame_num", ":", "int", "=", "0", "\n", ")", ":", "\n", "        ", "\"\"\"Returns camera captures from the n-th drone POV.\n\n        Parameters\n        ----------\n        img_type : ImageType\n            The image type: RGB(A), depth, segmentation, or B&W (from RGB).\n        img_input : ndarray\n            (h, w, 4)-shaped array of uint8's for RBG(A) or B&W images.\n            (h, w)-shaped array of uint8's for depth or segmentation images.\n        path : str\n            Path where to save the output as PNG.\n        fram_num: int, optional\n            Frame number to append to the PNG's filename.\n\n        \"\"\"", "\n", "if", "img_type", "==", "ImageType", ".", "RGB", ":", "\n", "            ", "(", "Image", ".", "fromarray", "(", "img_input", ".", "astype", "(", "'uint8'", ")", ",", "'RGBA'", ")", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"frame_\"", "+", "str", "(", "frame_num", ")", "+", "\".png\"", ")", ")", "\n", "", "elif", "img_type", "==", "ImageType", ".", "DEP", ":", "\n", "            ", "temp", "=", "(", "(", "img_input", "-", "np", ".", "min", "(", "img_input", ")", ")", "*", "255", "/", "(", "np", ".", "max", "(", "img_input", ")", "-", "np", ".", "min", "(", "img_input", ")", ")", ")", ".", "astype", "(", "'uint8'", ")", "\n", "", "elif", "img_type", "==", "ImageType", ".", "SEG", ":", "\n", "            ", "temp", "=", "(", "(", "img_input", "-", "np", ".", "min", "(", "img_input", ")", ")", "*", "255", "/", "(", "np", ".", "max", "(", "img_input", ")", "-", "np", ".", "min", "(", "img_input", ")", ")", ")", ".", "astype", "(", "'uint8'", ")", "\n", "", "elif", "img_type", "==", "ImageType", ".", "BW", ":", "\n", "            ", "temp", "=", "(", "np", ".", "sum", "(", "img_input", "[", ":", ",", ":", ",", "0", ":", "2", "]", ",", "axis", "=", "2", ")", "/", "3", ")", ".", "astype", "(", "'uint8'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseAviary._exportImage(), unknown ImageType\"", ")", "\n", "exit", "(", ")", "\n", "", "if", "img_type", "!=", "ImageType", ".", "RGB", ":", "\n", "            ", "(", "Image", ".", "fromarray", "(", "temp", ")", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"frame_\"", "+", "str", "(", "frame_num", ")", "+", "\".png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getAdjacencyMatrix": [[630, 648], ["numpy.identity", "range", "range", "numpy.linalg.norm"], "methods", ["None"], ["", "", "def", "_getAdjacencyMatrix", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the adjacency matrix of a multi-drone system.\n\n        Attribute NEIGHBOURHOOD_RADIUS is used to determine neighboring relationships.\n\n        Returns\n        -------\n        ndarray\n            (NUM_DRONES, NUM_DRONES)-shaped array of 0's and 1's representing the adjacency matrix \n            of the system: adj_mat[i,j] == 1 if (i, j) are neighbors; == 0 otherwise.\n\n        \"\"\"", "\n", "adjacency_mat", "=", "np", ".", "identity", "(", "self", ".", "NUM_DRONES", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", "-", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "NUM_DRONES", "-", "i", "-", "1", ")", ":", "\n", "                ", "if", "np", ".", "linalg", ".", "norm", "(", "self", ".", "pos", "[", "i", ",", ":", "]", "-", "self", ".", "pos", "[", "j", "+", "i", "+", "1", ",", ":", "]", ")", "<", "self", ".", "NEIGHBOURHOOD_RADIUS", ":", "\n", "                    ", "adjacency_mat", "[", "i", ",", "j", "+", "i", "+", "1", "]", "=", "adjacency_mat", "[", "j", "+", "i", "+", "1", ",", "i", "]", "=", "1", "\n", "", "", "", "return", "adjacency_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._physics": [[651, 681], ["range", "pybullet.applyExternalTorque", "numpy.array", "numpy.array", "pybullet.applyExternalForce"], "methods", ["None"], ["", "def", "_physics", "(", "self", ",", "\n", "rpm", ",", "\n", "nth_drone", "\n", ")", ":", "\n", "        ", "\"\"\"Base PyBullet physics implementation.\n\n        Parameters\n        ----------\n        rpm : ndarray\n            (4)-shaped array of ints containing the RPMs values of the 4 motors.\n        nth_drone : int\n            The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "forces", "=", "np", ".", "array", "(", "rpm", "**", "2", ")", "*", "self", ".", "KF", "\n", "torques", "=", "np", ".", "array", "(", "rpm", "**", "2", ")", "*", "self", ".", "KM", "\n", "z_torque", "=", "(", "-", "torques", "[", "0", "]", "+", "torques", "[", "1", "]", "-", "torques", "[", "2", "]", "+", "torques", "[", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "p", ".", "applyExternalForce", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "i", ",", "\n", "forceObj", "=", "[", "0", ",", "0", ",", "forces", "[", "i", "]", "]", ",", "\n", "posObj", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "flags", "=", "p", ".", "LINK_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "", "p", ".", "applyExternalTorque", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "4", ",", "\n", "torqueObj", "=", "[", "0", ",", "0", ",", "z_torque", "]", ",", "\n", "flags", "=", "p", ".", "LINK_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._groundEffect": [[685, 720], ["numpy.array", "numpy.array", "numpy.clip", "pybullet.getLinkStates", "range", "numpy.abs", "numpy.abs", "pybullet.applyExternalForce", "numpy.array"], "methods", ["None"], ["", "def", "_groundEffect", "(", "self", ",", "\n", "rpm", ",", "\n", "nth_drone", "\n", ")", ":", "\n", "        ", "\"\"\"PyBullet implementation of a ground effect model.\n\n        Inspired by the analytical model used for comparison in (Shi et al., 2019).\n\n        Parameters\n        ----------\n        rpm : ndarray\n            (4)-shaped array of ints containing the RPMs values of the 4 motors.\n        nth_drone : int\n            The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "#### Kin. info of all links (propellers and center of mass)", "\n", "link_states", "=", "np", ".", "array", "(", "p", ".", "getLinkStates", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "linkIndices", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ",", "\n", "computeLinkVelocity", "=", "1", ",", "\n", "computeForwardKinematics", "=", "1", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", ")", "\n", "#### Simple, per-propeller ground effects ##################", "\n", "prop_heights", "=", "np", ".", "array", "(", "[", "link_states", "[", "0", ",", "0", "]", "[", "2", "]", ",", "link_states", "[", "1", ",", "0", "]", "[", "2", "]", ",", "link_states", "[", "2", ",", "0", "]", "[", "2", "]", ",", "link_states", "[", "3", ",", "0", "]", "[", "2", "]", "]", ")", "\n", "prop_heights", "=", "np", ".", "clip", "(", "prop_heights", ",", "self", ".", "GND_EFF_H_CLIP", ",", "np", ".", "inf", ")", "\n", "gnd_effects", "=", "np", ".", "array", "(", "rpm", "**", "2", ")", "*", "self", ".", "KF", "*", "self", ".", "GND_EFF_COEFF", "*", "(", "self", ".", "PROP_RADIUS", "/", "(", "4", "*", "prop_heights", ")", ")", "**", "2", "\n", "if", "np", ".", "abs", "(", "self", ".", "rpy", "[", "nth_drone", ",", "0", "]", ")", "<", "np", ".", "pi", "/", "2", "and", "np", ".", "abs", "(", "self", ".", "rpy", "[", "nth_drone", ",", "1", "]", ")", "<", "np", ".", "pi", "/", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "p", ".", "applyExternalForce", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "i", ",", "\n", "forceObj", "=", "[", "0", ",", "0", ",", "gnd_effects", "[", "i", "]", "]", ",", "\n", "posObj", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "flags", "=", "p", ".", "LINK_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._drag": [[726, 753], ["numpy.array().reshape", "numpy.dot", "pybullet.applyExternalForce", "numpy.sum", "numpy.array", "numpy.array", "numpy.array", "pybullet.getMatrixFromQuaternion"], "methods", ["None"], ["", "", "", "def", "_drag", "(", "self", ",", "\n", "rpm", ",", "\n", "nth_drone", "\n", ")", ":", "\n", "        ", "\"\"\"PyBullet implementation of a drag model.\n\n        Based on the the system identification in (Forster, 2015).\n\n        Parameters\n        ----------\n        rpm : ndarray\n            (4)-shaped array of ints containing the RPMs values of the 4 motors.\n        nth_drone : int\n            The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "#### Rotation matrix of the base ###########################", "\n", "base_rot", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "self", ".", "quat", "[", "nth_drone", ",", ":", "]", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "#### Simple draft model applied to the base/center of mass #", "\n", "drag_factors", "=", "-", "1", "*", "self", ".", "DRAG_COEFF", "*", "np", ".", "sum", "(", "np", ".", "array", "(", "2", "*", "np", ".", "pi", "*", "rpm", "/", "60", ")", ")", "\n", "drag", "=", "np", ".", "dot", "(", "base_rot", ",", "drag_factors", "*", "np", ".", "array", "(", "self", ".", "vel", "[", "nth_drone", ",", ":", "]", ")", ")", "\n", "p", ".", "applyExternalForce", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "4", ",", "\n", "forceObj", "=", "drag", ",", "\n", "posObj", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "flags", "=", "p", ".", "LINK_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._downwash": [[757, 783], ["range", "numpy.linalg.norm", "pybullet.applyExternalForce", "numpy.array", "numpy.array", "numpy.exp"], "methods", ["None"], ["", "def", "_downwash", "(", "self", ",", "\n", "nth_drone", "\n", ")", ":", "\n", "        ", "\"\"\"PyBullet implementation of a ground effect model.\n\n        Based on experiments conducted at the Dynamic Systems Lab by SiQi Zhou.\n\n        Parameters\n        ----------\n        nth_drone : int\n            The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "delta_z", "=", "self", ".", "pos", "[", "i", ",", "2", "]", "-", "self", ".", "pos", "[", "nth_drone", ",", "2", "]", "\n", "delta_xy", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "self", ".", "pos", "[", "i", ",", "0", ":", "2", "]", ")", "-", "np", ".", "array", "(", "self", ".", "pos", "[", "nth_drone", ",", "0", ":", "2", "]", ")", ")", "\n", "if", "delta_z", ">", "0", "and", "delta_xy", "<", "10", ":", "# Ignore drones more than 10 meters away", "\n", "                ", "alpha", "=", "self", ".", "DW_COEFF_1", "*", "(", "self", ".", "PROP_RADIUS", "/", "(", "4", "*", "delta_z", ")", ")", "**", "2", "\n", "beta", "=", "self", ".", "DW_COEFF_2", "*", "delta_z", "+", "self", ".", "DW_COEFF_3", "\n", "downwash", "=", "[", "0", ",", "0", ",", "-", "alpha", "*", "np", ".", "exp", "(", "-", ".5", "*", "(", "delta_xy", "/", "beta", ")", "**", "2", ")", "]", "\n", "p", ".", "applyExternalForce", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "4", ",", "\n", "forceObj", "=", "downwash", ",", "\n", "posObj", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "flags", "=", "p", ".", "LINK_FRAME", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._dynamics": [[787, 846], ["numpy.array().reshape", "numpy.array", "numpy.dot", "numpy.array", "numpy.dot", "pybullet.resetBasePositionAndOrientation", "pybullet.resetBaseVelocity", "numpy.array", "numpy.array", "numpy.array", "numpy.cross", "pybullet.getQuaternionFromEuler", "numpy.array", "numpy.sum", "numpy.dot", "pybullet.getMatrixFromQuaternion", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "", "", "def", "_dynamics", "(", "self", ",", "\n", "rpm", ",", "\n", "nth_drone", "\n", ")", ":", "\n", "        ", "\"\"\"Explicit dynamics implementation.\n\n        Based on code written at the Dynamic Systems Lab by James Xu.\n\n        Parameters\n        ----------\n        rpm : ndarray\n            (4)-shaped array of ints containing the RPMs values of the 4 motors.\n        nth_drone : int\n            The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "#### Current state #########################################", "\n", "pos", "=", "self", ".", "pos", "[", "nth_drone", ",", ":", "]", "\n", "quat", "=", "self", ".", "quat", "[", "nth_drone", ",", ":", "]", "\n", "rpy", "=", "self", ".", "rpy", "[", "nth_drone", ",", ":", "]", "\n", "vel", "=", "self", ".", "vel", "[", "nth_drone", ",", ":", "]", "\n", "rpy_rates", "=", "self", ".", "rpy_rates", "[", "nth_drone", ",", ":", "]", "\n", "rotation", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "quat", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "#### Compute forces and torques ############################", "\n", "forces", "=", "np", ".", "array", "(", "rpm", "**", "2", ")", "*", "self", ".", "KF", "\n", "thrust", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "np", ".", "sum", "(", "forces", ")", "]", ")", "\n", "thrust_world_frame", "=", "np", ".", "dot", "(", "rotation", ",", "thrust", ")", "\n", "force_world_frame", "=", "thrust_world_frame", "-", "np", ".", "array", "(", "[", "0", ",", "0", ",", "self", ".", "GRAVITY", "]", ")", "\n", "z_torques", "=", "np", ".", "array", "(", "rpm", "**", "2", ")", "*", "self", ".", "KM", "\n", "z_torque", "=", "(", "-", "z_torques", "[", "0", "]", "+", "z_torques", "[", "1", "]", "-", "z_torques", "[", "2", "]", "+", "z_torques", "[", "3", "]", ")", "\n", "if", "self", ".", "DRONE_MODEL", "==", "DroneModel", ".", "CF2X", ":", "\n", "            ", "x_torque", "=", "(", "forces", "[", "0", "]", "+", "forces", "[", "1", "]", "-", "forces", "[", "2", "]", "-", "forces", "[", "3", "]", ")", "*", "(", "self", ".", "L", "/", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "y_torque", "=", "(", "-", "forces", "[", "0", "]", "+", "forces", "[", "1", "]", "+", "forces", "[", "2", "]", "-", "forces", "[", "3", "]", ")", "*", "(", "self", ".", "L", "/", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "", "elif", "self", ".", "DRONE_MODEL", "==", "DroneModel", ".", "CF2P", "or", "self", ".", "DRONE_MODEL", "==", "DroneModel", ".", "HB", ":", "\n", "            ", "x_torque", "=", "(", "forces", "[", "1", "]", "-", "forces", "[", "3", "]", ")", "*", "self", ".", "L", "\n", "y_torque", "=", "(", "-", "forces", "[", "0", "]", "+", "forces", "[", "2", "]", ")", "*", "self", ".", "L", "\n", "", "torques", "=", "np", ".", "array", "(", "[", "x_torque", ",", "y_torque", ",", "z_torque", "]", ")", "\n", "torques", "=", "torques", "-", "np", ".", "cross", "(", "rpy_rates", ",", "np", ".", "dot", "(", "self", ".", "J", ",", "rpy_rates", ")", ")", "\n", "rpy_rates_deriv", "=", "np", ".", "dot", "(", "self", ".", "J_INV", ",", "torques", ")", "\n", "no_pybullet_dyn_accs", "=", "force_world_frame", "/", "self", ".", "M", "\n", "#### Update state ##########################################", "\n", "vel", "=", "vel", "+", "self", ".", "TIMESTEP", "*", "no_pybullet_dyn_accs", "\n", "rpy_rates", "=", "rpy_rates", "+", "self", ".", "TIMESTEP", "*", "rpy_rates_deriv", "\n", "pos", "=", "pos", "+", "self", ".", "TIMESTEP", "*", "vel", "\n", "rpy", "=", "rpy", "+", "self", ".", "TIMESTEP", "*", "rpy_rates", "\n", "#### Set PyBullet's state ##################################", "\n", "p", ".", "resetBasePositionAndOrientation", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "pos", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "rpy", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "#### Note: the base's velocity only stored and not used ####", "\n", "p", ".", "resetBaseVelocity", "(", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "vel", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "# ang_vel not computed by DYN", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "#### Store the roll, pitch, yaw rates for the next step ####", "\n", "self", ".", "rpy_rates", "[", "nth_drone", ",", ":", "]", "=", "rpy_rates", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._normalizedActionToRPM": [[849, 868], ["numpy.any", "numpy.where", "print", "numpy.abs"], "methods", ["None"], ["", "def", "_normalizedActionToRPM", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "\"\"\"De-normalizes the [-1, 1] range to the [0, MAX_RPM] range.\n\n        Parameters\n        ----------\n        action : ndarray\n            (4)-shaped array of ints containing an input in the [-1, 1] range.\n\n        Returns\n        -------\n        ndarray\n            (4)-shaped array of ints containing RPMs for the 4 motors in the [0, MAX_RPM] range.\n\n        \"\"\"", "\n", "if", "np", ".", "any", "(", "np", ".", "abs", "(", "action", ")", ">", "1", ")", ":", "\n", "            ", "print", "(", "\"\\n[ERROR] it\"", ",", "self", ".", "step_counter", ",", "\"in BaseAviary._normalizedActionToRPM(), out-of-bound action\"", ")", "\n", "", "return", "np", ".", "where", "(", "action", "<=", "0", ",", "(", "action", "+", "1", ")", "*", "self", ".", "HOVER_RPM", ",", "self", ".", "HOVER_RPM", "+", "(", "self", ".", "MAX_RPM", "-", "self", ".", "HOVER_RPM", ")", "*", "action", ")", "# Non-linear mapping: -1 -> 0, 0 -> HOVER_RPM, 1 -> MAX_RPM`", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._saveLastAction": [[871, 893], ["isinstance", "action.items", "numpy.resize", "numpy.reshape", "numpy.resize", "int"], "methods", ["None"], ["", "def", "_saveLastAction", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "\"\"\"Stores the most recent action into attribute `self.last_action`.\n\n        The last action can be used to compute aerodynamic effects.\n        The method disambiguates between array and dict inputs \n        (for single or multi-agent aviaries, respectively).\n\n        Parameters\n        ----------\n        action : ndarray | dict\n            (4)-shaped array of ints (or dictionary of arrays) containing the current RPMs input.\n\n        \"\"\"", "\n", "if", "isinstance", "(", "action", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "action", ".", "items", "(", ")", ":", "\n", "                ", "res_v", "=", "np", ".", "resize", "(", "v", ",", "(", "1", ",", "4", ")", ")", "# Resize, possibly with repetition, to cope with different action spaces in RL subclasses", "\n", "self", ".", "last_action", "[", "int", "(", "k", ")", ",", ":", "]", "=", "res_v", "\n", "", "", "else", ":", "\n", "            ", "res_action", "=", "np", ".", "resize", "(", "action", ",", "(", "1", ",", "4", ")", ")", "# Resize, possibly with repetition, to cope with different action spaces in RL subclasses", "\n", "self", ".", "last_action", "=", "np", ".", "reshape", "(", "res_action", ",", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._showDroneLocalAxes": [[896, 932], ["pybullet.addUserDebugLine", "pybullet.addUserDebugLine", "pybullet.addUserDebugLine", "int", "int", "int"], "methods", ["None"], ["", "", "def", "_showDroneLocalAxes", "(", "self", ",", "\n", "nth_drone", "\n", ")", ":", "\n", "        ", "\"\"\"Draws the local frame of the n-th drone in PyBullet's GUI.\n\n        Parameters\n        ----------\n        nth_drone : int\n            The ordinal number/position of the desired drone in list self.DRONE_IDS.\n\n        \"\"\"", "\n", "if", "self", ".", "GUI", ":", "\n", "            ", "AXIS_LENGTH", "=", "2", "*", "self", ".", "L", "\n", "self", ".", "X_AX", "[", "nth_drone", "]", "=", "p", ".", "addUserDebugLine", "(", "lineFromXYZ", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "lineToXYZ", "=", "[", "AXIS_LENGTH", ",", "0", ",", "0", "]", ",", "\n", "lineColorRGB", "=", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "parentObjectUniqueId", "=", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "parentLinkIndex", "=", "-", "1", ",", "\n", "replaceItemUniqueId", "=", "int", "(", "self", ".", "X_AX", "[", "nth_drone", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "self", ".", "Y_AX", "[", "nth_drone", "]", "=", "p", ".", "addUserDebugLine", "(", "lineFromXYZ", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "lineToXYZ", "=", "[", "0", ",", "AXIS_LENGTH", ",", "0", "]", ",", "\n", "lineColorRGB", "=", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "parentObjectUniqueId", "=", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "parentLinkIndex", "=", "-", "1", ",", "\n", "replaceItemUniqueId", "=", "int", "(", "self", ".", "Y_AX", "[", "nth_drone", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "self", ".", "Z_AX", "[", "nth_drone", "]", "=", "p", ".", "addUserDebugLine", "(", "lineFromXYZ", "=", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "lineToXYZ", "=", "[", "0", ",", "0", ",", "AXIS_LENGTH", "]", ",", "\n", "lineColorRGB", "=", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "parentObjectUniqueId", "=", "self", ".", "DRONE_IDS", "[", "nth_drone", "]", ",", "\n", "parentLinkIndex", "=", "-", "1", ",", "\n", "replaceItemUniqueId", "=", "int", "(", "self", ".", "Z_AX", "[", "nth_drone", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._addObstacles": [[936, 959], ["pybullet.loadURDF", "pybullet.loadURDF", "pybullet.loadURDF", "pybullet.loadURDF", "pybullet.getQuaternionFromEuler", "pybullet.getQuaternionFromEuler", "pybullet.getQuaternionFromEuler"], "methods", ["None"], ["", "", "def", "_addObstacles", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add obstacles to the environment.\n\n        These obstacles are loaded from standard URDF files included in Bullet.\n\n        \"\"\"", "\n", "p", ".", "loadURDF", "(", "\"samurai.urdf\"", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "p", ".", "loadURDF", "(", "\"duck_vhacd.urdf\"", ",", "\n", "[", "-", ".5", ",", "-", ".5", ",", ".05", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "p", ".", "loadURDF", "(", "\"cube_no_rotation.urdf\"", ",", "\n", "[", "-", ".5", ",", "-", "2.5", ",", ".5", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "p", ".", "loadURDF", "(", "\"sphere2.urdf\"", ",", "\n", "[", "0", ",", "2", ",", ".5", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._parseURDFParameters": [[963, 996], ["xml.parse().getroot", "float", "float", "float", "float", "float", "float", "numpy.diag", "numpy.linalg.inv", "float", "float", "float", "float", "float", "float", "float", "float", "float", "numpy.array", "float", "float", "float", "float", "xml.parse", "[].attrib[].split", "pkg_resources.resource_filename"], "methods", ["None"], ["", "def", "_parseURDFParameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Loads parameters from an URDF file.\n\n        This method is nothing more than a custom XML parser for the .urdf\n        files in folder `assets/`.\n\n        \"\"\"", "\n", "URDF_TREE", "=", "etxml", ".", "parse", "(", "pkg_resources", ".", "resource_filename", "(", "'gym_pybullet_drones'", ",", "'assets/'", "+", "self", ".", "URDF", ")", ")", ".", "getroot", "(", ")", "\n", "M", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "0", "]", "[", "1", "]", ".", "attrib", "[", "'value'", "]", ")", "\n", "L", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'arm'", "]", ")", "\n", "THRUST2WEIGHT_RATIO", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'thrust2weight'", "]", ")", "\n", "IXX", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "0", "]", "[", "2", "]", ".", "attrib", "[", "'ixx'", "]", ")", "\n", "IYY", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "0", "]", "[", "2", "]", ".", "attrib", "[", "'iyy'", "]", ")", "\n", "IZZ", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "0", "]", "[", "2", "]", ".", "attrib", "[", "'izz'", "]", ")", "\n", "J", "=", "np", ".", "diag", "(", "[", "IXX", ",", "IYY", ",", "IZZ", "]", ")", "\n", "J_INV", "=", "np", ".", "linalg", ".", "inv", "(", "J", ")", "\n", "KF", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'kf'", "]", ")", "\n", "KM", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'km'", "]", ")", "\n", "COLLISION_H", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "2", "]", "[", "1", "]", "[", "0", "]", ".", "attrib", "[", "'length'", "]", ")", "\n", "COLLISION_R", "=", "float", "(", "URDF_TREE", "[", "1", "]", "[", "2", "]", "[", "1", "]", "[", "0", "]", ".", "attrib", "[", "'radius'", "]", ")", "\n", "COLLISION_SHAPE_OFFSETS", "=", "[", "float", "(", "s", ")", "for", "s", "in", "URDF_TREE", "[", "1", "]", "[", "2", "]", "[", "0", "]", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", "' '", ")", "]", "\n", "COLLISION_Z_OFFSET", "=", "COLLISION_SHAPE_OFFSETS", "[", "2", "]", "\n", "MAX_SPEED_KMH", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'max_speed_kmh'", "]", ")", "\n", "GND_EFF_COEFF", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'gnd_eff_coeff'", "]", ")", "\n", "PROP_RADIUS", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'prop_radius'", "]", ")", "\n", "DRAG_COEFF_XY", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'drag_coeff_xy'", "]", ")", "\n", "DRAG_COEFF_Z", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'drag_coeff_z'", "]", ")", "\n", "DRAG_COEFF", "=", "np", ".", "array", "(", "[", "DRAG_COEFF_XY", ",", "DRAG_COEFF_XY", ",", "DRAG_COEFF_Z", "]", ")", "\n", "DW_COEFF_1", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'dw_coeff_1'", "]", ")", "\n", "DW_COEFF_2", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'dw_coeff_2'", "]", ")", "\n", "DW_COEFF_3", "=", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "'dw_coeff_3'", "]", ")", "\n", "return", "M", ",", "L", ",", "THRUST2WEIGHT_RATIO", ",", "J", ",", "J_INV", ",", "KF", ",", "KM", ",", "COLLISION_H", ",", "COLLISION_R", ",", "COLLISION_Z_OFFSET", ",", "MAX_SPEED_KMH", ",", "GND_EFF_COEFF", ",", "PROP_RADIUS", ",", "DRAG_COEFF", ",", "DW_COEFF_1", ",", "DW_COEFF_2", ",", "DW_COEFF_3", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._actionSpace": [[999, 1006], ["None"], "methods", ["None"], ["", "def", "_actionSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the action space of the environment.\n\n        Must be implemented in a subclass.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._observationSpace": [[1009, 1016], ["None"], "methods", ["None"], ["", "def", "_observationSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the observation space of the environment.\n\n        Must be implemented in a subclass.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._computeObs": [[1019, 1026], ["None"], "methods", ["None"], ["", "def", "_computeObs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the current observation of the environment.\n\n        Must be implemented in a subclass.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._preprocessAction": [[1029, 1043], ["None"], "methods", ["None"], ["", "def", "_preprocessAction", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "\"\"\"Pre-processes the action passed to `.step()` into motors' RPMs.\n\n        Must be implemented in a subclass.\n\n        Parameters\n        ----------\n        action : ndarray | dict[..]\n            The input action for one or more drones, to be translated into RPMs.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._computeReward": [[1046, 1053], ["None"], "methods", ["None"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value(s).\n\n        Must be implemented in a subclass.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._computeDone": [[1056, 1063], ["None"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value(s).\n\n        Must be implemented in a subclass.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._computeInfo": [[1066, 1073], ["None"], "methods", ["None"], ["", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Must be implemented in a subclass.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.DynAviary.DynAviary.__init__": [[13, 75], ["gym_pybullet_drones.envs.BaseAviary.BaseAviary.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", ":", "int", "=", "1", ",", "\n", "neighbourhood_radius", ":", "float", "=", "np", ".", "inf", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obstacles", "=", "False", ",", "\n", "user_debug_gui", "=", "True", ",", "\n", "output_folder", "=", "'results'", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of an aviary controlled by desired thrust and torques.\n\n        Attribute `dynamics_attributes` is automatically set to True when calling\n        the superclass `__init__()` method.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        num_drones : int, optional\n            The desired number of drones in the aviary.\n        neighbourhood_radius : float, optional\n            Radius used to compute the drones' adjacency matrix, in meters.\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obstacles : bool, optional\n            Whether to add obstacles to the simulation.\n        user_debug_gui : bool, optional\n            Whether to draw the drones' axes and the GUI RPMs sliders.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "neighbourhood_radius", "=", "neighbourhood_radius", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obstacles", "=", "obstacles", ",", "\n", "user_debug_gui", "=", "user_debug_gui", ",", "\n", "dynamics_attributes", "=", "True", ",", "\n", "output_folder", "=", "output_folder", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.DynAviary.DynAviary._actionSpace": [[80, 97], ["numpy.array", "numpy.array", "gym.spaces.Dict", "str", "gym.spaces.Box", "range"], "methods", ["None"], ["", "def", "_actionSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the action space of the environment.\n\n        Returns\n        -------\n        dict[str, ndarray]\n            A Dict of Box(4,) with NUM_DRONES entries,\n            indexed by drone Id in string format.\n\n        \"\"\"", "\n", "#### Action vector ######## Thrust           X Torque             Y Torque             Z Torque", "\n", "act_lower_bound", "=", "np", ".", "array", "(", "[", "0.", ",", "-", "self", ".", "MAX_XY_TORQUE", ",", "-", "self", ".", "MAX_XY_TORQUE", ",", "-", "self", ".", "MAX_Z_TORQUE", "]", ")", "\n", "act_upper_bound", "=", "np", ".", "array", "(", "[", "self", ".", "MAX_THRUST", ",", "self", ".", "MAX_XY_TORQUE", ",", "self", ".", "MAX_XY_TORQUE", ",", "self", ".", "MAX_Z_TORQUE", "]", ")", "\n", "return", "spaces", ".", "Dict", "(", "{", "str", "(", "i", ")", ":", "spaces", ".", "Box", "(", "low", "=", "act_lower_bound", ",", "\n", "high", "=", "act_upper_bound", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.DynAviary.DynAviary._observationSpace": [[100, 119], ["numpy.array", "numpy.array", "gym.spaces.Dict", "str", "gym.spaces.Dict", "range", "gym.spaces.Box", "gym.spaces.MultiBinary"], "methods", ["None"], ["", "def", "_observationSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the observation space of the environment.\n\n        Returns\n        -------\n        dict[str, dict[str, ndarray]]\n            A Dict with NUM_DRONES entries indexed by Id in string format,\n            each a Dict in the form {Box(20,), MultiBinary(NUM_DRONES)}.\n\n        \"\"\"", "\n", "#### Observation vector ### X        Y        Z       Q1   Q2   Q3   Q4   R       P       Y       VX       VY       VZ       WX       WY       WZ       P0            P1            P2            P3", "\n", "obs_lower_bound", "=", "np", ".", "array", "(", "[", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "0.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "pi", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "obs_upper_bound", "=", "np", ".", "array", "(", "[", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "np", ".", "inf", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", ",", "self", ".", "MAX_RPM", "]", ")", "\n", "return", "spaces", ".", "Dict", "(", "{", "str", "(", "i", ")", ":", "spaces", ".", "Dict", "(", "{", "\"state\"", ":", "spaces", ".", "Box", "(", "low", "=", "obs_lower_bound", ",", "\n", "high", "=", "obs_upper_bound", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", ",", "\n", "\"neighbors\"", ":", "spaces", ".", "MultiBinary", "(", "self", ".", "NUM_DRONES", ")", "\n", "}", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.DynAviary.DynAviary._computeObs": [[122, 137], ["DynAviary.DynAviary._getAdjacencyMatrix", "str", "DynAviary.DynAviary._getDroneStateVector", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getAdjacencyMatrix", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "def", "_computeObs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the current observation of the environment.\n\n        For the value of key \"state\", see the implementation of `_getDroneStateVector()`,\n        the value of key \"neighbors\" is the drone's own row of the adjacency matrix.\n\n        Returns\n        -------\n        dict[str, dict[str, ndarray]]\n            A Dict with NUM_DRONES entries indexed by Id in string format,\n            each a Dict in the form {Box(20,), MultiBinary(NUM_DRONES)}.\n\n        \"\"\"", "\n", "adjacency_mat", "=", "self", ".", "_getAdjacencyMatrix", "(", ")", "\n", "return", "{", "str", "(", "i", ")", ":", "{", "\"state\"", ":", "self", ".", "_getDroneStateVector", "(", "i", ")", ",", "\"neighbors\"", ":", "adjacency_mat", "[", "i", ",", ":", "]", "}", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.DynAviary.DynAviary._preprocessAction": [[140, 175], ["numpy.zeros", "action.items", "gym_pybullet_drones.utils.utils.nnlsRPM", "int"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.nnlsRPM"], ["", "def", "_preprocessAction", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "\"\"\"Pre-processes the action passed to `.step()` into motors' RPMs.\n\n        Solves desired thrust and torques using NNLS and converts a dictionary into a 2D array.\n\n        Parameters\n        ----------\n        action : dict[str, ndarray]\n            The input action each drone (desired thrust and torques), to be translated into RPMs.\n\n        Returns\n        -------\n        ndarray\n            (NUM_DRONES, 4)-shaped array of ints containing to clipped RPMs\n            commanded to the 4 motors of each drone.\n\n        \"\"\"", "\n", "clipped_action", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "for", "k", ",", "v", "in", "action", ".", "items", "(", ")", ":", "\n", "            ", "clipped_action", "[", "int", "(", "k", ")", ",", ":", "]", "=", "nnlsRPM", "(", "thrust", "=", "v", "[", "0", "]", ",", "\n", "x_torque", "=", "v", "[", "1", "]", ",", "\n", "y_torque", "=", "v", "[", "2", "]", ",", "\n", "z_torque", "=", "v", "[", "3", "]", ",", "\n", "counter", "=", "self", ".", "step_counter", ",", "\n", "max_thrust", "=", "self", ".", "MAX_THRUST", ",", "\n", "max_xy_torque", "=", "self", ".", "MAX_XY_TORQUE", ",", "\n", "max_z_torque", "=", "self", ".", "MAX_Z_TORQUE", ",", "\n", "a", "=", "self", ".", "A", ",", "\n", "inv_a", "=", "self", ".", "INV_A", ",", "\n", "b_coeff", "=", "self", ".", "B_COEFF", ",", "\n", "gui", "=", "self", ".", "GUI", "\n", ")", "\n", "", "return", "clipped_action", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.DynAviary.DynAviary._computeReward": [[178, 190], ["None"], "methods", ["None"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        int\n            Dummy value.\n\n        \"\"\"", "\n", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.DynAviary.DynAviary._computeDone": [[193, 205], ["None"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        bool\n            Dummy value.\n\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.DynAviary.DynAviary._computeInfo": [[208, 220], ["None"], "methods", ["None"], ["", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused as this subclass is not meant for reinforcement learning.\n\n        Returns\n        -------\n        dict[str, int]\n            Dummy value.\n\n        \"\"\"", "\n", "return", "{", "\"answer\"", ":", "42", "}", "#### Calculated by the Deep Thought supercomputer in 7.5M years", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.FlyThruGateAviary.FlyThruGateAviary.__init__": [[15, 65], ["gym_pybullet_drones.envs.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obs", ":", "ObservationType", "=", "ObservationType", ".", "KIN", ",", "\n", "act", ":", "ActionType", "=", "ActionType", ".", "RPM", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of a single agent RL environment.\n\n        Using the generic single agent RL superclass.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obs : ObservationType, optional\n            The type of observation space (kinematic information or vision)\n        act : ActionType, optional\n            The type of action space (1 or 3D; RPMS, thurst and torques, or waypoint with PID control)\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obs", "=", "obs", ",", "\n", "act", "=", "act", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.FlyThruGateAviary.FlyThruGateAviary._addObstacles": [[69, 91], ["super()._addObstacles", "pybullet.loadURDF", "range", "pkg_resources.resource_filename", "pybullet.getQuaternionFromEuler", "pybullet.loadURDF", "pybullet.loadURDF", "pybullet.getQuaternionFromEuler", "pybullet.getQuaternionFromEuler"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._addObstacles"], ["", "def", "_addObstacles", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add obstacles to the environment.\n\n        Extends the superclass method and add the gate build of cubes and an architrave.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "_addObstacles", "(", ")", "\n", "p", ".", "loadURDF", "(", "pkg_resources", ".", "resource_filename", "(", "'gym_pybullet_drones'", ",", "'assets/architrave.urdf'", ")", ",", "\n", "[", "0", ",", "-", "1", ",", ".55", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "p", ".", "loadURDF", "(", "\"cube_small.urdf\"", ",", "\n", "[", "-", ".3", ",", "-", "1", ",", ".02", "+", "i", "*", "0.05", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "p", ".", "loadURDF", "(", "\"cube_small.urdf\"", ",", "\n", "[", ".3", ",", "-", "1", ",", ".02", "+", "i", "*", "0.05", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.FlyThruGateAviary.FlyThruGateAviary._computeReward": [[95, 107], ["FlyThruGateAviary.FlyThruGateAviary._getDroneStateVector", "numpy.linalg.norm", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value.\n\n        Returns\n        -------\n        float\n            The reward.\n\n        \"\"\"", "\n", "state", "=", "self", ".", "_getDroneStateVector", "(", "0", ")", "\n", "norm_ep_time", "=", "(", "self", ".", "step_counter", "/", "self", ".", "SIM_FREQ", ")", "/", "self", ".", "EPISODE_LEN_SEC", "\n", "return", "-", "10", "*", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "[", "0", ",", "-", "2", "*", "norm_ep_time", ",", "0.75", "]", ")", "-", "state", "[", "0", ":", "3", "]", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.FlyThruGateAviary.FlyThruGateAviary._computeDone": [[110, 123], ["None"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value.\n\n        Returns\n        -------\n        bool\n            Whether the current episode is done.\n\n        \"\"\"", "\n", "if", "self", ".", "step_counter", "/", "self", ".", "SIM_FREQ", ">", "self", ".", "EPISODE_LEN_SEC", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.FlyThruGateAviary.FlyThruGateAviary._computeInfo": [[126, 138], ["None"], "methods", ["None"], ["", "", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused.\n\n        Returns\n        -------\n        dict[str, int]\n            Dummy value.\n\n        \"\"\"", "\n", "return", "{", "\"answer\"", ":", "42", "}", "#### Calculated by the Deep Thought supercomputer in 7.5M years", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.FlyThruGateAviary.FlyThruGateAviary._clipAndNormalizeState": [[141, 200], ["numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.hstack().reshape", "FlyThruGateAviary.FlyThruGateAviary._clipAndNormalizeStateWarning", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._clipAndNormalizeStateWarning"], ["", "def", "_clipAndNormalizeState", "(", "self", ",", "\n", "state", "\n", ")", ":", "\n", "        ", "\"\"\"Normalizes a drone's state to the [-1,1] range.\n\n        Parameters\n        ----------\n        state : ndarray\n            (20,)-shaped array of floats containing the non-normalized state of a single drone.\n\n        Returns\n        -------\n        ndarray\n            (20,)-shaped array of floats containing the normalized state of a single drone.\n\n        \"\"\"", "\n", "MAX_LIN_VEL_XY", "=", "3", "\n", "MAX_LIN_VEL_Z", "=", "1", "\n", "\n", "MAX_XY", "=", "MAX_LIN_VEL_XY", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "MAX_Z", "=", "MAX_LIN_VEL_Z", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "\n", "MAX_PITCH_ROLL", "=", "np", ".", "pi", "# Full range", "\n", "\n", "clipped_pos_xy", "=", "np", ".", "clip", "(", "state", "[", "0", ":", "2", "]", ",", "-", "MAX_XY", ",", "MAX_XY", ")", "\n", "clipped_pos_z", "=", "np", ".", "clip", "(", "state", "[", "2", "]", ",", "0", ",", "MAX_Z", ")", "\n", "clipped_rp", "=", "np", ".", "clip", "(", "state", "[", "7", ":", "9", "]", ",", "-", "MAX_PITCH_ROLL", ",", "MAX_PITCH_ROLL", ")", "\n", "clipped_vel_xy", "=", "np", ".", "clip", "(", "state", "[", "10", ":", "12", "]", ",", "-", "MAX_LIN_VEL_XY", ",", "MAX_LIN_VEL_XY", ")", "\n", "clipped_vel_z", "=", "np", ".", "clip", "(", "state", "[", "12", "]", ",", "-", "MAX_LIN_VEL_Z", ",", "MAX_LIN_VEL_Z", ")", "\n", "\n", "if", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "_clipAndNormalizeStateWarning", "(", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", "\n", ")", "\n", "\n", "", "normalized_pos_xy", "=", "clipped_pos_xy", "/", "MAX_XY", "\n", "normalized_pos_z", "=", "clipped_pos_z", "/", "MAX_Z", "\n", "normalized_rp", "=", "clipped_rp", "/", "MAX_PITCH_ROLL", "\n", "normalized_y", "=", "state", "[", "9", "]", "/", "np", ".", "pi", "# No reason to clip", "\n", "normalized_vel_xy", "=", "clipped_vel_xy", "/", "MAX_LIN_VEL_XY", "\n", "normalized_vel_z", "=", "clipped_vel_z", "/", "MAX_LIN_VEL_XY", "\n", "normalized_ang_vel", "=", "state", "[", "13", ":", "16", "]", "/", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "if", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "!=", "0", "else", "state", "[", "13", ":", "16", "]", "\n", "\n", "norm_and_clipped", "=", "np", ".", "hstack", "(", "[", "normalized_pos_xy", ",", "\n", "normalized_pos_z", ",", "\n", "state", "[", "3", ":", "7", "]", ",", "\n", "normalized_rp", ",", "\n", "normalized_y", ",", "\n", "normalized_vel_xy", ",", "\n", "normalized_vel_z", ",", "\n", "normalized_ang_vel", ",", "\n", "state", "[", "16", ":", "20", "]", "\n", "]", ")", ".", "reshape", "(", "20", ",", ")", "\n", "\n", "return", "norm_and_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.FlyThruGateAviary.FlyThruGateAviary._clipAndNormalizeStateWarning": [[203, 226], ["print", "print", "print", "print", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_clipAndNormalizeStateWarning", "(", "self", ",", "\n", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Debugging printouts associated to `_clipAndNormalizeState`.\n\n        Print a warning if values in a state vector is out of the clipping range.\n        \n        \"\"\"", "\n", "if", "not", "(", "clipped_pos_xy", "==", "np", ".", "array", "(", "state", "[", "0", ":", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in FlyThruGateAviary._clipAndNormalizeState(), clipped xy position [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_pos_z", "==", "np", ".", "array", "(", "state", "[", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in FlyThruGateAviary._clipAndNormalizeState(), clipped z position [{:.2f}]\"", ".", "format", "(", "state", "[", "2", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_rp", "==", "np", ".", "array", "(", "state", "[", "7", ":", "9", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in FlyThruGateAviary._clipAndNormalizeState(), clipped roll/pitch [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "7", "]", ",", "state", "[", "8", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_xy", "==", "np", ".", "array", "(", "state", "[", "10", ":", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in FlyThruGateAviary._clipAndNormalizeState(), clipped xy velocity [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "10", "]", ",", "state", "[", "11", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_z", "==", "np", ".", "array", "(", "state", "[", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in FlyThruGateAviary._clipAndNormalizeState(), clipped z velocity [{:.2f}]\"", ".", "format", "(", "state", "[", "12", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TakeoffAviary.TakeoffAviary.__init__": [[11, 61], ["gym_pybullet_drones.envs.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obs", ":", "ObservationType", "=", "ObservationType", ".", "KIN", ",", "\n", "act", ":", "ActionType", "=", "ActionType", ".", "RPM", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of a single agent RL environment.\n\n        Using the generic single agent RL superclass.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obs : ObservationType, optional\n            The type of observation space (kinematic information or vision)\n        act : ActionType, optional\n            The type of action space (1 or 3D; RPMS, thurst and torques, or waypoint with PID control)\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obs", "=", "obs", ",", "\n", "act", "=", "act", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TakeoffAviary.TakeoffAviary._computeReward": [[65, 80], ["TakeoffAviary.TakeoffAviary._getDroneStateVector"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value.\n\n        Returns\n        -------\n        float\n            The reward.\n\n        \"\"\"", "\n", "state", "=", "self", ".", "_getDroneStateVector", "(", "0", ")", "\n", "# return state[2]/10.  # Alternative reward space, see PR #32", "\n", "if", "state", "[", "2", "]", "<", "0.02", ":", "\n", "            ", "return", "-", "5", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "/", "(", "10", "*", "state", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TakeoffAviary.TakeoffAviary._computeDone": [[83, 98], ["None"], "methods", ["None"], ["", "", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value.\n\n        Returns\n        -------\n        bool\n            Whether the current episode is done.\n\n        \"\"\"", "\n", "if", "self", ".", "step_counter", "/", "self", ".", "SIM_FREQ", ">", "self", ".", "EPISODE_LEN_SEC", ":", "\n", "# Alternative done condition, see PR #32", "\n", "# if (self.step_counter/self.SIM_FREQ > (self.EPISODE_LEN_SEC)) or ((self._getDroneStateVector(0))[2] < 0.05):", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TakeoffAviary.TakeoffAviary._computeInfo": [[101, 113], ["None"], "methods", ["None"], ["", "", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused.\n\n        Returns\n        -------\n        dict[str, int]\n            Dummy value.\n\n        \"\"\"", "\n", "return", "{", "\"answer\"", ":", "42", "}", "#### Calculated by the Deep Thought supercomputer in 7.5M years", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TakeoffAviary.TakeoffAviary._clipAndNormalizeState": [[116, 175], ["numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.hstack().reshape", "TakeoffAviary.TakeoffAviary._clipAndNormalizeStateWarning", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._clipAndNormalizeStateWarning"], ["", "def", "_clipAndNormalizeState", "(", "self", ",", "\n", "state", "\n", ")", ":", "\n", "        ", "\"\"\"Normalizes a drone's state to the [-1,1] range.\n\n        Parameters\n        ----------\n        state : ndarray\n            (20,)-shaped array of floats containing the non-normalized state of a single drone.\n\n        Returns\n        -------\n        ndarray\n            (20,)-shaped array of floats containing the normalized state of a single drone.\n\n        \"\"\"", "\n", "MAX_LIN_VEL_XY", "=", "3", "\n", "MAX_LIN_VEL_Z", "=", "1", "\n", "\n", "MAX_XY", "=", "MAX_LIN_VEL_XY", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "MAX_Z", "=", "MAX_LIN_VEL_Z", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "\n", "MAX_PITCH_ROLL", "=", "np", ".", "pi", "# Full range", "\n", "\n", "clipped_pos_xy", "=", "np", ".", "clip", "(", "state", "[", "0", ":", "2", "]", ",", "-", "MAX_XY", ",", "MAX_XY", ")", "\n", "clipped_pos_z", "=", "np", ".", "clip", "(", "state", "[", "2", "]", ",", "0", ",", "MAX_Z", ")", "\n", "clipped_rp", "=", "np", ".", "clip", "(", "state", "[", "7", ":", "9", "]", ",", "-", "MAX_PITCH_ROLL", ",", "MAX_PITCH_ROLL", ")", "\n", "clipped_vel_xy", "=", "np", ".", "clip", "(", "state", "[", "10", ":", "12", "]", ",", "-", "MAX_LIN_VEL_XY", ",", "MAX_LIN_VEL_XY", ")", "\n", "clipped_vel_z", "=", "np", ".", "clip", "(", "state", "[", "12", "]", ",", "-", "MAX_LIN_VEL_Z", ",", "MAX_LIN_VEL_Z", ")", "\n", "\n", "if", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "_clipAndNormalizeStateWarning", "(", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", "\n", ")", "\n", "\n", "", "normalized_pos_xy", "=", "clipped_pos_xy", "/", "MAX_XY", "\n", "normalized_pos_z", "=", "clipped_pos_z", "/", "MAX_Z", "\n", "normalized_rp", "=", "clipped_rp", "/", "MAX_PITCH_ROLL", "\n", "normalized_y", "=", "state", "[", "9", "]", "/", "np", ".", "pi", "# No reason to clip", "\n", "normalized_vel_xy", "=", "clipped_vel_xy", "/", "MAX_LIN_VEL_XY", "\n", "normalized_vel_z", "=", "clipped_vel_z", "/", "MAX_LIN_VEL_XY", "\n", "normalized_ang_vel", "=", "state", "[", "13", ":", "16", "]", "/", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "if", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "!=", "0", "else", "state", "[", "13", ":", "16", "]", "\n", "\n", "norm_and_clipped", "=", "np", ".", "hstack", "(", "[", "normalized_pos_xy", ",", "\n", "normalized_pos_z", ",", "\n", "state", "[", "3", ":", "7", "]", ",", "\n", "normalized_rp", ",", "\n", "normalized_y", ",", "\n", "normalized_vel_xy", ",", "\n", "normalized_vel_z", ",", "\n", "normalized_ang_vel", ",", "\n", "state", "[", "16", ":", "20", "]", "\n", "]", ")", ".", "reshape", "(", "20", ",", ")", "\n", "\n", "return", "norm_and_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TakeoffAviary.TakeoffAviary._clipAndNormalizeStateWarning": [[178, 201], ["print", "print", "print", "print", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_clipAndNormalizeStateWarning", "(", "self", ",", "\n", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Debugging printouts associated to `_clipAndNormalizeState`.\n\n        Print a warning if values in a state vector is out of the clipping range.\n        \n        \"\"\"", "\n", "if", "not", "(", "clipped_pos_xy", "==", "np", ".", "array", "(", "state", "[", "0", ":", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in TakeoffAviary._clipAndNormalizeState(), clipped xy position [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_pos_z", "==", "np", ".", "array", "(", "state", "[", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in TakeoffAviary._clipAndNormalizeState(), clipped z position [{:.2f}]\"", ".", "format", "(", "state", "[", "2", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_rp", "==", "np", ".", "array", "(", "state", "[", "7", ":", "9", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in TakeoffAviary._clipAndNormalizeState(), clipped roll/pitch [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "7", "]", ",", "state", "[", "8", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_xy", "==", "np", ".", "array", "(", "state", "[", "10", ":", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in TakeoffAviary._clipAndNormalizeState(), clipped xy velocity [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "10", "]", ",", "state", "[", "11", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_z", "==", "np", ".", "array", "(", "state", "[", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in TakeoffAviary._clipAndNormalizeState(), clipped z velocity [{:.2f}]\"", ".", "format", "(", "state", "[", "12", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.HoverAviary.HoverAviary.__init__": [[11, 61], ["gym_pybullet_drones.envs.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obs", ":", "ObservationType", "=", "ObservationType", ".", "KIN", ",", "\n", "act", ":", "ActionType", "=", "ActionType", ".", "RPM", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of a single agent RL environment.\n\n        Using the generic single agent RL superclass.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obs : ObservationType, optional\n            The type of observation space (kinematic information or vision)\n        act : ActionType, optional\n            The type of action space (1 or 3D; RPMS, thurst and torques, or waypoint with PID control)\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obs", "=", "obs", ",", "\n", "act", "=", "act", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.HoverAviary.HoverAviary._computeReward": [[65, 76], ["HoverAviary.HoverAviary._getDroneStateVector", "numpy.linalg.norm", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value.\n\n        Returns\n        -------\n        float\n            The reward.\n\n        \"\"\"", "\n", "state", "=", "self", ".", "_getDroneStateVector", "(", "0", ")", "\n", "return", "-", "1", "*", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "-", "state", "[", "0", ":", "3", "]", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.HoverAviary.HoverAviary._computeDone": [[79, 92], ["None"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value.\n\n        Returns\n        -------\n        bool\n            Whether the current episode is done.\n\n        \"\"\"", "\n", "if", "self", ".", "step_counter", "/", "self", ".", "SIM_FREQ", ">", "self", ".", "EPISODE_LEN_SEC", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.HoverAviary.HoverAviary._computeInfo": [[95, 107], ["None"], "methods", ["None"], ["", "", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused.\n\n        Returns\n        -------\n        dict[str, int]\n            Dummy value.\n\n        \"\"\"", "\n", "return", "{", "\"answer\"", ":", "42", "}", "#### Calculated by the Deep Thought supercomputer in 7.5M years", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.HoverAviary.HoverAviary._clipAndNormalizeState": [[110, 169], ["numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.hstack().reshape", "HoverAviary.HoverAviary._clipAndNormalizeStateWarning", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._clipAndNormalizeStateWarning"], ["", "def", "_clipAndNormalizeState", "(", "self", ",", "\n", "state", "\n", ")", ":", "\n", "        ", "\"\"\"Normalizes a drone's state to the [-1,1] range.\n\n        Parameters\n        ----------\n        state : ndarray\n            (20,)-shaped array of floats containing the non-normalized state of a single drone.\n\n        Returns\n        -------\n        ndarray\n            (20,)-shaped array of floats containing the normalized state of a single drone.\n\n        \"\"\"", "\n", "MAX_LIN_VEL_XY", "=", "3", "\n", "MAX_LIN_VEL_Z", "=", "1", "\n", "\n", "MAX_XY", "=", "MAX_LIN_VEL_XY", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "MAX_Z", "=", "MAX_LIN_VEL_Z", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "\n", "MAX_PITCH_ROLL", "=", "np", ".", "pi", "# Full range", "\n", "\n", "clipped_pos_xy", "=", "np", ".", "clip", "(", "state", "[", "0", ":", "2", "]", ",", "-", "MAX_XY", ",", "MAX_XY", ")", "\n", "clipped_pos_z", "=", "np", ".", "clip", "(", "state", "[", "2", "]", ",", "0", ",", "MAX_Z", ")", "\n", "clipped_rp", "=", "np", ".", "clip", "(", "state", "[", "7", ":", "9", "]", ",", "-", "MAX_PITCH_ROLL", ",", "MAX_PITCH_ROLL", ")", "\n", "clipped_vel_xy", "=", "np", ".", "clip", "(", "state", "[", "10", ":", "12", "]", ",", "-", "MAX_LIN_VEL_XY", ",", "MAX_LIN_VEL_XY", ")", "\n", "clipped_vel_z", "=", "np", ".", "clip", "(", "state", "[", "12", "]", ",", "-", "MAX_LIN_VEL_Z", ",", "MAX_LIN_VEL_Z", ")", "\n", "\n", "if", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "_clipAndNormalizeStateWarning", "(", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", "\n", ")", "\n", "\n", "", "normalized_pos_xy", "=", "clipped_pos_xy", "/", "MAX_XY", "\n", "normalized_pos_z", "=", "clipped_pos_z", "/", "MAX_Z", "\n", "normalized_rp", "=", "clipped_rp", "/", "MAX_PITCH_ROLL", "\n", "normalized_y", "=", "state", "[", "9", "]", "/", "np", ".", "pi", "# No reason to clip", "\n", "normalized_vel_xy", "=", "clipped_vel_xy", "/", "MAX_LIN_VEL_XY", "\n", "normalized_vel_z", "=", "clipped_vel_z", "/", "MAX_LIN_VEL_XY", "\n", "normalized_ang_vel", "=", "state", "[", "13", ":", "16", "]", "/", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "if", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "!=", "0", "else", "state", "[", "13", ":", "16", "]", "\n", "\n", "norm_and_clipped", "=", "np", ".", "hstack", "(", "[", "normalized_pos_xy", ",", "\n", "normalized_pos_z", ",", "\n", "state", "[", "3", ":", "7", "]", ",", "\n", "normalized_rp", ",", "\n", "normalized_y", ",", "\n", "normalized_vel_xy", ",", "\n", "normalized_vel_z", ",", "\n", "normalized_ang_vel", ",", "\n", "state", "[", "16", ":", "20", "]", "\n", "]", ")", ".", "reshape", "(", "20", ",", ")", "\n", "\n", "return", "norm_and_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.HoverAviary.HoverAviary._clipAndNormalizeStateWarning": [[172, 195], ["print", "print", "print", "print", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_clipAndNormalizeStateWarning", "(", "self", ",", "\n", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Debugging printouts associated to `_clipAndNormalizeState`.\n\n        Print a warning if values in a state vector is out of the clipping range.\n        \n        \"\"\"", "\n", "if", "not", "(", "clipped_pos_xy", "==", "np", ".", "array", "(", "state", "[", "0", ":", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in HoverAviary._clipAndNormalizeState(), clipped xy position [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_pos_z", "==", "np", ".", "array", "(", "state", "[", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in HoverAviary._clipAndNormalizeState(), clipped z position [{:.2f}]\"", ".", "format", "(", "state", "[", "2", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_rp", "==", "np", ".", "array", "(", "state", "[", "7", ":", "9", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in HoverAviary._clipAndNormalizeState(), clipped roll/pitch [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "7", "]", ",", "state", "[", "8", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_xy", "==", "np", ".", "array", "(", "state", "[", "10", ":", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in HoverAviary._clipAndNormalizeState(), clipped xy velocity [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "10", "]", ",", "state", "[", "11", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_z", "==", "np", ".", "array", "(", "state", "[", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in HoverAviary._clipAndNormalizeState(), clipped z velocity [{:.2f}]\"", ".", "format", "(", "state", "[", "12", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TuneAviary.TuneAviary.__init__": [[11, 72], ["gym_pybullet_drones.envs.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary.__init__", "int", "numpy.array", "numpy.zeros", "print", "exit", "range", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obs", ":", "ObservationType", "=", "ObservationType", ".", "KIN", ",", "\n", "act", ":", "ActionType", "=", "ActionType", ".", "RPM", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of a single agent RL environment.\n\n        Using the generic single agent RL superclass.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obs : ObservationType, optional\n            The type of observation space (kinematic information or vision)\n        act : ActionType, optional\n            The type of action space (1 or 3D; RPMS, thurst and torques, or waypoint with PID control)\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obs", "=", "obs", ",", "\n", "act", "=", "act", "\n", ")", "\n", "if", "self", ".", "ACT_TYPE", "!=", "ActionType", ".", "TUN", ":", "\n", "            ", "print", "(", "\"[ERROR] in TuneAviary.__init__(), ACT_TYPE must be ActionType.TUN\"", ")", "\n", "exit", "(", ")", "\n", "#### Initialize the target trajectory ######################", "\n", "", "self", ".", "TRAJ_STEPS", "=", "int", "(", "(", "self", ".", "SIM_FREQ", "*", "self", ".", "EPISODE_LEN_SEC", ")", "/", "self", ".", "AGGR_PHY_STEPS", ")", "\n", "self", ".", "CTRL_TIMESTEP", "=", "self", ".", "AGGR_PHY_STEPS", "*", "self", ".", "TIMESTEP", "\n", "self", ".", "TARGET_POSITION", "=", "np", ".", "array", "(", "[", "[", "0", ",", "4.0", "*", "np", ".", "cos", "(", "0.006", "*", "i", ")", ",", "1.0", "]", "for", "i", "in", "range", "(", "self", ".", "TRAJ_STEPS", ")", "]", ")", "\n", "#### Derive the trajectory to obtain target velocity #######", "\n", "self", ".", "TARGET_VELOCITY", "=", "np", ".", "zeros", "(", "[", "self", ".", "TRAJ_STEPS", ",", "3", "]", ")", "\n", "self", ".", "TARGET_VELOCITY", "[", "1", ":", ",", ":", "]", "=", "(", "self", ".", "TARGET_POSITION", "[", "1", ":", ",", ":", "]", "-", "self", ".", "TARGET_POSITION", "[", "0", ":", "-", "1", ",", ":", "]", ")", "/", "self", ".", "CTRL_TIMESTEP", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TuneAviary.TuneAviary._trajectoryTrackingRPMs": [[75, 98], ["TuneAviary.TuneAviary._getDroneStateVector", "min", "TuneAviary.TuneAviary.ctrl.computeControl", "int"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.computeControl"], ["", "def", "_trajectoryTrackingRPMs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the RPMs values to target a hardcoded trajectory.\n\n        Returns\n        -------\n        ndarray\n            (4,)-shaped array of ints containing to clipped RPMs\n            commanded to the 4 motors of each drone.\n\n        \"\"\"", "\n", "\n", "####", "\n", "state", "=", "self", ".", "_getDroneStateVector", "(", "0", ")", "\n", "i", "=", "min", "(", "int", "(", "self", ".", "step_counter", "/", "self", ".", "AGGR_PHY_STEPS", ")", ",", "self", ".", "TRAJ_STEPS", "-", "1", ")", "\n", "rpm", ",", "_", ",", "_", "=", "self", ".", "ctrl", ".", "computeControl", "(", "control_timestep", "=", "self", ".", "CTRL_TIMESTEP", ",", "\n", "cur_pos", "=", "state", "[", "0", ":", "3", "]", ",", "\n", "cur_quat", "=", "state", "[", "3", ":", "7", "]", ",", "\n", "cur_vel", "=", "state", "[", "10", ":", "13", "]", ",", "\n", "cur_ang_vel", "=", "state", "[", "13", ":", "16", "]", ",", "\n", "target_pos", "=", "self", ".", "TARGET_POSITION", "[", "i", ",", ":", "]", ",", "\n", "target_vel", "=", "self", ".", "TARGET_VELOCITY", "[", "i", ",", ":", "]", "\n", ")", "\n", "return", "rpm", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TuneAviary.TuneAviary._computeReward": [[101, 113], ["TuneAviary.TuneAviary._getDroneStateVector", "min", "int", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value.\n\n        Returns\n        -------\n        float\n            The reward.\n\n        \"\"\"", "\n", "state", "=", "self", ".", "_getDroneStateVector", "(", "0", ")", "\n", "i", "=", "min", "(", "int", "(", "self", ".", "step_counter", "/", "self", ".", "AGGR_PHY_STEPS", ")", ",", "self", ".", "TRAJ_STEPS", "-", "1", ")", "\n", "return", "-", "1", "*", "np", ".", "linalg", ".", "norm", "(", "self", ".", "TARGET_POSITION", "[", "i", ",", ":", "]", "-", "state", "[", "0", ":", "3", "]", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TuneAviary.TuneAviary._computeDone": [[116, 129], ["None"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value.\n\n        Returns\n        -------\n        bool\n            Whether the current episode is done.\n\n        \"\"\"", "\n", "if", "self", ".", "step_counter", "/", "self", ".", "SIM_FREQ", ">", "self", ".", "EPISODE_LEN_SEC", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TuneAviary.TuneAviary._computeInfo": [[132, 144], ["None"], "methods", ["None"], ["", "", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused.\n\n        Returns\n        -------\n        dict[str, int]\n            Dummy value.\n\n        \"\"\"", "\n", "return", "{", "\"answer\"", ":", "42", "}", "#### Calculated by the Deep Thought supercomputer in 7.5M years", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TuneAviary.TuneAviary._clipAndNormalizeState": [[147, 206], ["numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.hstack().reshape", "TuneAviary.TuneAviary._clipAndNormalizeStateWarning", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._clipAndNormalizeStateWarning"], ["", "def", "_clipAndNormalizeState", "(", "self", ",", "\n", "state", "\n", ")", ":", "\n", "        ", "\"\"\"Normalizes a drone's state to the [-1,1] range.\n\n        Parameters\n        ----------\n        state : ndarray\n            (20,)-shaped array of floats containing the non-normalized state of a single drone.\n\n        Returns\n        -------\n        ndarray\n            (20,)-shaped array of floats containing the normalized state of a single drone.\n\n        \"\"\"", "\n", "MAX_LIN_VEL_XY", "=", "3", "\n", "MAX_LIN_VEL_Z", "=", "1", "\n", "\n", "MAX_XY", "=", "MAX_LIN_VEL_XY", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "MAX_Z", "=", "MAX_LIN_VEL_Z", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "\n", "MAX_PITCH_ROLL", "=", "np", ".", "pi", "# Full range", "\n", "\n", "clipped_pos_xy", "=", "np", ".", "clip", "(", "state", "[", "0", ":", "2", "]", ",", "-", "MAX_XY", ",", "MAX_XY", ")", "\n", "clipped_pos_z", "=", "np", ".", "clip", "(", "state", "[", "2", "]", ",", "0", ",", "MAX_Z", ")", "\n", "clipped_rp", "=", "np", ".", "clip", "(", "state", "[", "7", ":", "9", "]", ",", "-", "MAX_PITCH_ROLL", ",", "MAX_PITCH_ROLL", ")", "\n", "clipped_vel_xy", "=", "np", ".", "clip", "(", "state", "[", "10", ":", "12", "]", ",", "-", "MAX_LIN_VEL_XY", ",", "MAX_LIN_VEL_XY", ")", "\n", "clipped_vel_z", "=", "np", ".", "clip", "(", "state", "[", "12", "]", ",", "-", "MAX_LIN_VEL_Z", ",", "MAX_LIN_VEL_Z", ")", "\n", "\n", "if", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "_clipAndNormalizeStateWarning", "(", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", "\n", ")", "\n", "\n", "", "normalized_pos_xy", "=", "clipped_pos_xy", "/", "MAX_XY", "\n", "normalized_pos_z", "=", "clipped_pos_z", "/", "MAX_Z", "\n", "normalized_rp", "=", "clipped_rp", "/", "MAX_PITCH_ROLL", "\n", "normalized_y", "=", "state", "[", "9", "]", "/", "np", ".", "pi", "# No reason to clip", "\n", "normalized_vel_xy", "=", "clipped_vel_xy", "/", "MAX_LIN_VEL_XY", "\n", "normalized_vel_z", "=", "clipped_vel_z", "/", "MAX_LIN_VEL_XY", "\n", "normalized_ang_vel", "=", "state", "[", "13", ":", "16", "]", "/", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "if", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "!=", "0", "else", "state", "[", "13", ":", "16", "]", "\n", "\n", "norm_and_clipped", "=", "np", ".", "hstack", "(", "[", "normalized_pos_xy", ",", "\n", "normalized_pos_z", ",", "\n", "state", "[", "3", ":", "7", "]", ",", "\n", "normalized_rp", ",", "\n", "normalized_y", ",", "\n", "normalized_vel_xy", ",", "\n", "normalized_vel_z", ",", "\n", "normalized_ang_vel", ",", "\n", "state", "[", "16", ":", "20", "]", "\n", "]", ")", ".", "reshape", "(", "20", ",", ")", "\n", "\n", "return", "norm_and_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TuneAviary.TuneAviary._clipAndNormalizeStateWarning": [[209, 232], ["print", "print", "print", "print", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_clipAndNormalizeStateWarning", "(", "self", ",", "\n", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Debugging printouts associated to `_clipAndNormalizeState`.\n\n        Print a warning if values in a state vector is out of the clipping range.\n        \n        \"\"\"", "\n", "if", "not", "(", "clipped_pos_xy", "==", "np", ".", "array", "(", "state", "[", "0", ":", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in TuneAviary._clipAndNormalizeState(), clipped xy position [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_pos_z", "==", "np", ".", "array", "(", "state", "[", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in TuneAviary._clipAndNormalizeState(), clipped z position [{:.2f}]\"", ".", "format", "(", "state", "[", "2", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_rp", "==", "np", ".", "array", "(", "state", "[", "7", ":", "9", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in TuneAviary._clipAndNormalizeState(), clipped roll/pitch [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "7", "]", ",", "state", "[", "8", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_xy", "==", "np", ".", "array", "(", "state", "[", "10", ":", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in TuneAviary._clipAndNormalizeState(), clipped xy velocity [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "10", "]", ",", "state", "[", "11", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_z", "==", "np", ".", "array", "(", "state", "[", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in TuneAviary._clipAndNormalizeState(), clipped z velocity [{:.2f}]\"", ".", "format", "(", "state", "[", "12", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary.__init__": [[38, 130], ["gym_pybullet_drones.envs.BaseAviary.BaseAviary.__init__", "print", "exit", "gym_pybullet_drones.control.DSLPIDControl.DSLPIDControl", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "gym_pybullet_drones.control.SimplePIDControl.SimplePIDControl", "print", "hasattr", "callable", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "getattr"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obs", ":", "ObservationType", "=", "ObservationType", ".", "KIN", ",", "\n", "act", ":", "ActionType", "=", "ActionType", ".", "RPM", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of a generic single agent RL environment.\n\n        Attribute `num_drones` is automatically set to 1; `vision_attributes`\n        and `dynamics_attributes` are selected based on the choice of `obs`\n        and `act`; `obstacles` is set to True and overridden with landmarks for\n        vision applications; `user_debug_gui` is set to False for performance.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obs : ObservationType, optional\n            The type of observation space (kinematic information or vision)\n        act : ActionType, optional\n            The type of action space (1 or 3D; RPMS, thurst and torques, waypoint or velocity with PID control; etc.)\n\n        \"\"\"", "\n", "vision_attributes", "=", "True", "if", "obs", "==", "ObservationType", ".", "RGB", "else", "False", "\n", "dynamics_attributes", "=", "True", "if", "act", "in", "[", "ActionType", ".", "DYN", ",", "ActionType", ".", "ONE_D_DYN", "]", "else", "False", "\n", "self", ".", "OBS_TYPE", "=", "obs", "\n", "self", ".", "ACT_TYPE", "=", "act", "\n", "self", ".", "EPISODE_LEN_SEC", "=", "5", "\n", "#### Create integrated controllers #########################", "\n", "if", "act", "in", "[", "ActionType", ".", "PID", ",", "ActionType", ".", "VEL", ",", "ActionType", ".", "TUN", ",", "ActionType", ".", "ONE_D_PID", "]", ":", "\n", "            ", "os", ".", "environ", "[", "'KMP_DUPLICATE_LIB_OK'", "]", "=", "'True'", "\n", "if", "drone_model", "in", "[", "DroneModel", ".", "CF2X", ",", "DroneModel", ".", "CF2P", "]", ":", "\n", "                ", "self", ".", "ctrl", "=", "DSLPIDControl", "(", "drone_model", "=", "DroneModel", ".", "CF2X", ")", "\n", "if", "act", "==", "ActionType", ".", "TUN", ":", "\n", "                    ", "self", ".", "TUNED_P_POS", "=", "np", ".", "array", "(", "[", ".4", ",", ".4", ",", "1.25", "]", ")", "\n", "self", ".", "TUNED_I_POS", "=", "np", ".", "array", "(", "[", ".05", ",", ".05", ",", ".05", "]", ")", "\n", "self", ".", "TUNED_D_POS", "=", "np", ".", "array", "(", "[", ".2", ",", ".2", ",", ".5", "]", ")", "\n", "self", ".", "TUNED_P_ATT", "=", "np", ".", "array", "(", "[", "70000.", ",", "70000.", ",", "60000.", "]", ")", "\n", "self", ".", "TUNED_I_ATT", "=", "np", ".", "array", "(", "[", ".0", ",", ".0", ",", "500.", "]", ")", "\n", "self", ".", "TUNED_D_ATT", "=", "np", ".", "array", "(", "[", "20000.", ",", "20000.", ",", "12000.", "]", ")", "\n", "", "", "elif", "drone_model", "==", "DroneModel", ".", "HB", ":", "\n", "                ", "self", ".", "ctrl", "=", "SimplePIDControl", "(", "drone_model", "=", "DroneModel", ".", "HB", ")", "\n", "if", "act", "==", "ActionType", ".", "TUN", ":", "\n", "                    ", "self", ".", "TUNED_P_POS", "=", "np", ".", "array", "(", "[", ".1", ",", ".1", ",", ".2", "]", ")", "\n", "self", ".", "TUNED_I_POS", "=", "np", ".", "array", "(", "[", ".0001", ",", ".0001", ",", ".0001", "]", ")", "\n", "self", ".", "TUNED_D_POS", "=", "np", ".", "array", "(", "[", ".3", ",", ".3", ",", ".4", "]", ")", "\n", "self", ".", "TUNED_P_ATT", "=", "np", ".", "array", "(", "[", ".3", ",", ".3", ",", ".05", "]", ")", "\n", "self", ".", "TUNED_I_ATT", "=", "np", ".", "array", "(", "[", ".0001", ",", ".0001", ",", ".0001", "]", ")", "\n", "self", ".", "TUNED_D_ATT", "=", "np", ".", "array", "(", "[", ".3", ",", ".3", ",", ".5", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"[ERROR] in BaseSingleAgentAviary.__init()__, no controller is available for the specified drone_model\"", ")", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "num_drones", "=", "1", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obstacles", "=", "True", ",", "# Add obstacles for RGB observations and/or FlyThruGate", "\n", "user_debug_gui", "=", "False", ",", "# Remove of RPM sliders from all single agent learning aviaries", "\n", "vision_attributes", "=", "vision_attributes", ",", "\n", "dynamics_attributes", "=", "dynamics_attributes", "\n", ")", "\n", "#### Set a limit on the maximum target speed ###############", "\n", "if", "act", "==", "ActionType", ".", "VEL", ":", "\n", "            ", "self", ".", "SPEED_LIMIT", "=", "0.03", "*", "self", ".", "MAX_SPEED_KMH", "*", "(", "1000", "/", "3600", ")", "\n", "#### Try _trajectoryTrackingRPMs exists IFF ActionType.TUN #", "\n", "", "if", "act", "==", "ActionType", ".", "TUN", "and", "not", "(", "hasattr", "(", "self", ".", "__class__", ",", "'_trajectoryTrackingRPMs'", ")", "and", "callable", "(", "getattr", "(", "self", ".", "__class__", ",", "'_trajectoryTrackingRPMs'", ")", ")", ")", ":", "\n", "                ", "print", "(", "\"[ERROR] in BaseSingleAgentAviary.__init__(), ActionType.TUN requires an implementation of _trajectoryTrackingRPMs in the instantiated subclass\"", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary._addObstacles": [[133, 163], ["pybullet.loadURDF", "pybullet.loadURDF", "pybullet.loadURDF", "pybullet.loadURDF", "pybullet.getQuaternionFromEuler", "pybullet.getQuaternionFromEuler", "pybullet.getQuaternionFromEuler", "pybullet.getQuaternionFromEuler"], "methods", ["None"], ["", "", "def", "_addObstacles", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add obstacles to the environment.\n\n        Only if the observation is of type RGB, 4 landmarks are added.\n        Overrides BaseAviary's method.\n\n        \"\"\"", "\n", "if", "self", ".", "OBS_TYPE", "==", "ObservationType", ".", "RGB", ":", "\n", "            ", "p", ".", "loadURDF", "(", "\"block.urdf\"", ",", "\n", "[", "1", ",", "0", ",", ".1", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "p", ".", "loadURDF", "(", "\"cube_small.urdf\"", ",", "\n", "[", "0", ",", "1", ",", ".1", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "p", ".", "loadURDF", "(", "\"duck_vhacd.urdf\"", ",", "\n", "[", "-", "1", ",", "0", ",", ".1", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "p", ".", "loadURDF", "(", "\"teddy_vhacd.urdf\"", ",", "\n", "[", "0", ",", "-", "1", ",", ".1", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary._actionSpace": [[166, 190], ["gym.spaces.Box", "numpy.ones", "numpy.ones", "print", "exit"], "methods", ["None"], ["", "", "def", "_actionSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the action space of the environment.\n\n        Returns\n        -------\n        ndarray\n            A Box() of size 1, 3, 4, or 6 depending on the action type.\n\n        \"\"\"", "\n", "if", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "TUN", ":", "\n", "            ", "size", "=", "6", "\n", "", "elif", "self", ".", "ACT_TYPE", "in", "[", "ActionType", ".", "RPM", ",", "ActionType", ".", "DYN", ",", "ActionType", ".", "VEL", "]", ":", "\n", "            ", "size", "=", "4", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "PID", ":", "\n", "            ", "size", "=", "3", "\n", "", "elif", "self", ".", "ACT_TYPE", "in", "[", "ActionType", ".", "ONE_D_RPM", ",", "ActionType", ".", "ONE_D_DYN", ",", "ActionType", ".", "ONE_D_PID", "]", ":", "\n", "            ", "size", "=", "1", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseSingleAgentAviary._actionSpace()\"", ")", "\n", "exit", "(", ")", "\n", "", "return", "spaces", ".", "Box", "(", "low", "=", "-", "1", "*", "np", ".", "ones", "(", "size", ")", ",", "\n", "# return spaces.Box(low=np.zeros(size),  # Alternative action space, see PR #32", "\n", "high", "=", "np", ".", "ones", "(", "size", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary._preprocessAction": [[194, 295], ["BaseSingleAgentAviary.BaseSingleAgentAviary.ctrl.setPIDCoefficients", "BaseSingleAgentAviary.BaseSingleAgentAviary._trajectoryTrackingRPMs", "numpy.array", "gym_pybullet_drones.utils.utils.nnlsRPM", "BaseSingleAgentAviary.BaseSingleAgentAviary._getDroneStateVector", "BaseSingleAgentAviary.BaseSingleAgentAviary.ctrl.computeControl", "BaseSingleAgentAviary.BaseSingleAgentAviary._getDroneStateVector", "BaseSingleAgentAviary.BaseSingleAgentAviary.ctrl.computeControl", "numpy.linalg.norm", "numpy.zeros", "numpy.repeat", "numpy.linalg.norm", "numpy.array", "gym_pybullet_drones.utils.utils.nnlsRPM", "BaseSingleAgentAviary.BaseSingleAgentAviary._getDroneStateVector", "BaseSingleAgentAviary.BaseSingleAgentAviary.ctrl.computeControl", "print", "numpy.abs", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl.setPIDCoefficients", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.TuneAviary.TuneAviary._trajectoryTrackingRPMs", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.nnlsRPM", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.computeControl", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.computeControl", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.nnlsRPM", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.computeControl"], ["", "def", "_preprocessAction", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "\"\"\"Pre-processes the action passed to `.step()` into motors' RPMs.\n\n        Parameter `action` is processed differenly for each of the different\n        action types: `action` can be of length 1, 3, 4, or 6 and represent \n        RPMs, desired thrust and torques, the next target position to reach \n        using PID control, a desired velocity vector, new PID coefficients, etc.\n\n        Parameters\n        ----------\n        action : ndarray\n            The input action for each drone, to be translated into RPMs.\n\n        Returns\n        -------\n        ndarray\n            (4,)-shaped array of ints containing to clipped RPMs\n            commanded to the 4 motors of each drone.\n\n        \"\"\"", "\n", "if", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "TUN", ":", "\n", "            ", "self", ".", "ctrl", ".", "setPIDCoefficients", "(", "p_coeff_pos", "=", "(", "action", "[", "0", "]", "+", "1", ")", "*", "self", ".", "TUNED_P_POS", ",", "\n", "i_coeff_pos", "=", "(", "action", "[", "1", "]", "+", "1", ")", "*", "self", ".", "TUNED_I_POS", ",", "\n", "d_coeff_pos", "=", "(", "action", "[", "2", "]", "+", "1", ")", "*", "self", ".", "TUNED_D_POS", ",", "\n", "p_coeff_att", "=", "(", "action", "[", "3", "]", "+", "1", ")", "*", "self", ".", "TUNED_P_ATT", ",", "\n", "i_coeff_att", "=", "(", "action", "[", "4", "]", "+", "1", ")", "*", "self", ".", "TUNED_I_ATT", ",", "\n", "d_coeff_att", "=", "(", "action", "[", "5", "]", "+", "1", ")", "*", "self", ".", "TUNED_D_ATT", "\n", ")", "\n", "return", "self", ".", "_trajectoryTrackingRPMs", "(", ")", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "RPM", ":", "\n", "            ", "return", "np", ".", "array", "(", "self", ".", "HOVER_RPM", "*", "(", "1", "+", "0.05", "*", "action", ")", ")", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "DYN", ":", "\n", "            ", "return", "nnlsRPM", "(", "thrust", "=", "(", "self", ".", "GRAVITY", "*", "(", "action", "[", "0", "]", "+", "1", ")", ")", ",", "\n", "x_torque", "=", "(", "0.05", "*", "self", ".", "MAX_XY_TORQUE", "*", "action", "[", "1", "]", ")", ",", "\n", "y_torque", "=", "(", "0.05", "*", "self", ".", "MAX_XY_TORQUE", "*", "action", "[", "2", "]", ")", ",", "\n", "z_torque", "=", "(", "0.05", "*", "self", ".", "MAX_Z_TORQUE", "*", "action", "[", "3", "]", ")", ",", "\n", "counter", "=", "self", ".", "step_counter", ",", "\n", "max_thrust", "=", "self", ".", "MAX_THRUST", ",", "\n", "max_xy_torque", "=", "self", ".", "MAX_XY_TORQUE", ",", "\n", "max_z_torque", "=", "self", ".", "MAX_Z_TORQUE", ",", "\n", "a", "=", "self", ".", "A", ",", "\n", "inv_a", "=", "self", ".", "INV_A", ",", "\n", "b_coeff", "=", "self", ".", "B_COEFF", ",", "\n", "gui", "=", "self", ".", "GUI", "\n", ")", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "PID", ":", "\n", "            ", "state", "=", "self", ".", "_getDroneStateVector", "(", "0", ")", "\n", "rpm", ",", "_", ",", "_", "=", "self", ".", "ctrl", ".", "computeControl", "(", "control_timestep", "=", "self", ".", "AGGR_PHY_STEPS", "*", "self", ".", "TIMESTEP", ",", "\n", "cur_pos", "=", "state", "[", "0", ":", "3", "]", ",", "\n", "cur_quat", "=", "state", "[", "3", ":", "7", "]", ",", "\n", "cur_vel", "=", "state", "[", "10", ":", "13", "]", ",", "\n", "cur_ang_vel", "=", "state", "[", "13", ":", "16", "]", ",", "\n", "target_pos", "=", "state", "[", "0", ":", "3", "]", "+", "0.1", "*", "action", "\n", ")", "\n", "return", "rpm", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "VEL", ":", "\n", "            ", "state", "=", "self", ".", "_getDroneStateVector", "(", "0", ")", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "action", "[", "0", ":", "3", "]", ")", "!=", "0", ":", "\n", "                ", "v_unit_vector", "=", "action", "[", "0", ":", "3", "]", "/", "np", ".", "linalg", ".", "norm", "(", "action", "[", "0", ":", "3", "]", ")", "\n", "", "else", ":", "\n", "                ", "v_unit_vector", "=", "np", ".", "zeros", "(", "3", ")", "\n", "", "rpm", ",", "_", ",", "_", "=", "self", ".", "ctrl", ".", "computeControl", "(", "control_timestep", "=", "self", ".", "AGGR_PHY_STEPS", "*", "self", ".", "TIMESTEP", ",", "\n", "cur_pos", "=", "state", "[", "0", ":", "3", "]", ",", "\n", "cur_quat", "=", "state", "[", "3", ":", "7", "]", ",", "\n", "cur_vel", "=", "state", "[", "10", ":", "13", "]", ",", "\n", "cur_ang_vel", "=", "state", "[", "13", ":", "16", "]", ",", "\n", "target_pos", "=", "state", "[", "0", ":", "3", "]", ",", "# same as the current position", "\n", "target_rpy", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "state", "[", "9", "]", "]", ")", ",", "# keep current yaw", "\n", "target_vel", "=", "self", ".", "SPEED_LIMIT", "*", "np", ".", "abs", "(", "action", "[", "3", "]", ")", "*", "v_unit_vector", "# target the desired velocity vector", "\n", ")", "\n", "return", "rpm", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "ONE_D_RPM", ":", "\n", "            ", "return", "np", ".", "repeat", "(", "self", ".", "HOVER_RPM", "*", "(", "1", "+", "0.05", "*", "action", ")", ",", "4", ")", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "ONE_D_DYN", ":", "\n", "            ", "return", "nnlsRPM", "(", "thrust", "=", "(", "self", ".", "GRAVITY", "*", "(", "1", "+", "0.05", "*", "action", "[", "0", "]", ")", ")", ",", "\n", "x_torque", "=", "0", ",", "\n", "y_torque", "=", "0", ",", "\n", "z_torque", "=", "0", ",", "\n", "counter", "=", "self", ".", "step_counter", ",", "\n", "max_thrust", "=", "self", ".", "MAX_THRUST", ",", "\n", "max_xy_torque", "=", "self", ".", "MAX_XY_TORQUE", ",", "\n", "max_z_torque", "=", "self", ".", "MAX_Z_TORQUE", ",", "\n", "a", "=", "self", ".", "A", ",", "\n", "inv_a", "=", "self", ".", "INV_A", ",", "\n", "b_coeff", "=", "self", ".", "B_COEFF", ",", "\n", "gui", "=", "self", ".", "GUI", "\n", ")", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "ONE_D_PID", ":", "\n", "            ", "state", "=", "self", ".", "_getDroneStateVector", "(", "0", ")", "\n", "rpm", ",", "_", ",", "_", "=", "self", ".", "ctrl", ".", "computeControl", "(", "control_timestep", "=", "self", ".", "AGGR_PHY_STEPS", "*", "self", ".", "TIMESTEP", ",", "\n", "cur_pos", "=", "state", "[", "0", ":", "3", "]", ",", "\n", "cur_quat", "=", "state", "[", "3", ":", "7", "]", ",", "\n", "cur_vel", "=", "state", "[", "10", ":", "13", "]", ",", "\n", "cur_ang_vel", "=", "state", "[", "13", ":", "16", "]", ",", "\n", "target_pos", "=", "state", "[", "0", ":", "3", "]", "+", "0.1", "*", "np", ".", "array", "(", "[", "0", ",", "0", ",", "action", "[", "0", "]", "]", ")", "\n", ")", "\n", "return", "rpm", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseSingleAgentAviary._preprocessAction()\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary._observationSpace": [[298, 329], ["gym.spaces.Box", "gym.spaces.Box", "print", "numpy.array", "numpy.array"], "methods", ["None"], ["", "", "def", "_observationSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the observation space of the environment.\n\n        Returns\n        -------\n        ndarray\n            A Box() of shape (H,W,4) or (12,) depending on the observation type.\n\n        \"\"\"", "\n", "if", "self", ".", "OBS_TYPE", "==", "ObservationType", ".", "RGB", ":", "\n", "            ", "return", "spaces", ".", "Box", "(", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "IMG_RES", "[", "1", "]", ",", "self", ".", "IMG_RES", "[", "0", "]", ",", "4", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "", "elif", "self", ".", "OBS_TYPE", "==", "ObservationType", ".", "KIN", ":", "\n", "############################################################", "\n", "#### OBS OF SIZE 20 (WITH QUATERNION AND RPMS)", "\n", "#### Observation vector ### X        Y        Z       Q1   Q2   Q3   Q4   R       P       Y       VX       VY       VZ       WX       WY       WZ       P0            P1            P2            P3", "\n", "# obs_lower_bound = np.array([-1,      -1,      0,      -1,  -1,  -1,  -1,  -1,     -1,     -1,     -1,      -1,      -1,      -1,      -1,      -1,      -1,           -1,           -1,           -1])", "\n", "# obs_upper_bound = np.array([1,       1,       1,      1,   1,   1,   1,   1,      1,      1,      1,       1,       1,       1,       1,       1,       1,            1,            1,            1])          ", "\n", "# return spaces.Box( low=obs_lower_bound, high=obs_upper_bound, dtype=np.float32 )", "\n", "############################################################", "\n", "#### OBS SPACE OF SIZE 12", "\n", "            ", "return", "spaces", ".", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "0", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "\n", "high", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "############################################################", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseSingleAgentAviary._observationSpace()\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary._computeObs": [[332, 366], ["BaseSingleAgentAviary.BaseSingleAgentAviary._getDroneImages", "BaseSingleAgentAviary.BaseSingleAgentAviary._clipAndNormalizeState", "numpy.hstack().reshape", "numpy.hstack().reshape.astype", "print", "BaseSingleAgentAviary.BaseSingleAgentAviary._exportImage", "BaseSingleAgentAviary.BaseSingleAgentAviary._getDroneStateVector", "numpy.hstack", "int"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneImages", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._clipAndNormalizeState", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._exportImage", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "", "def", "_computeObs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the current observation of the environment.\n\n        Returns\n        -------\n        ndarray\n            A Box() of shape (H,W,4) or (12,) depending on the observation type.\n\n        \"\"\"", "\n", "if", "self", ".", "OBS_TYPE", "==", "ObservationType", ".", "RGB", ":", "\n", "            ", "if", "self", ".", "step_counter", "%", "self", ".", "IMG_CAPTURE_FREQ", "==", "0", ":", "\n", "                ", "self", ".", "rgb", "[", "0", "]", ",", "self", ".", "dep", "[", "0", "]", ",", "self", ".", "seg", "[", "0", "]", "=", "self", ".", "_getDroneImages", "(", "0", ",", "\n", "segmentation", "=", "False", "\n", ")", "\n", "#### Printing observation to PNG frames example ############", "\n", "if", "self", ".", "RECORD", ":", "\n", "                    ", "self", ".", "_exportImage", "(", "img_type", "=", "ImageType", ".", "RGB", ",", "\n", "img_input", "=", "self", ".", "rgb", "[", "0", "]", ",", "\n", "path", "=", "self", ".", "ONBOARD_IMG_PATH", ",", "\n", "frame_num", "=", "int", "(", "self", ".", "step_counter", "/", "self", ".", "IMG_CAPTURE_FREQ", ")", "\n", ")", "\n", "", "", "return", "self", ".", "rgb", "[", "0", "]", "\n", "", "elif", "self", ".", "OBS_TYPE", "==", "ObservationType", ".", "KIN", ":", "\n", "            ", "obs", "=", "self", ".", "_clipAndNormalizeState", "(", "self", ".", "_getDroneStateVector", "(", "0", ")", ")", "\n", "############################################################", "\n", "#### OBS OF SIZE 20 (WITH QUATERNION AND RPMS)", "\n", "# return obs", "\n", "############################################################", "\n", "#### OBS SPACE OF SIZE 12", "\n", "ret", "=", "np", ".", "hstack", "(", "[", "obs", "[", "0", ":", "3", "]", ",", "obs", "[", "7", ":", "10", "]", ",", "obs", "[", "10", ":", "13", "]", ",", "obs", "[", "13", ":", "16", "]", "]", ")", ".", "reshape", "(", "12", ",", ")", "\n", "return", "ret", ".", "astype", "(", "'float32'", ")", "\n", "############################################################", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseSingleAgentAviary._computeObs()\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.single_agent_rl.BaseSingleAgentAviary.BaseSingleAgentAviary._clipAndNormalizeState": [[369, 383], ["None"], "methods", ["None"], ["", "", "def", "_clipAndNormalizeState", "(", "self", ",", "\n", "state", "\n", ")", ":", "\n", "        ", "\"\"\"Normalizes a drone's state to the [-1,1] range.\n\n        Must be implemented in a subclass.\n\n        Parameters\n        ----------\n        state : ndarray\n            Array containing the non-normalized state of a single drone.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.FlockAviary.FlockAviary.__init__": [[13, 70], ["gym_pybullet_drones.envs.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", ":", "int", "=", "2", ",", "\n", "neighbourhood_radius", ":", "float", "=", "np", ".", "inf", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obs", ":", "ObservationType", "=", "ObservationType", ".", "KIN", ",", "\n", "act", ":", "ActionType", "=", "ActionType", ".", "RPM", ")", ":", "\n", "        ", "\"\"\"Initialization of a multi-agent RL environment.\n\n        Using the generic multi-agent RL superclass.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        num_drones : int, optional\n            The desired number of drones in the aviary.\n        neighbourhood_radius : float, optional\n            Radius used to compute the drones' adjacency matrix, in meters.\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obs : ObservationType, optional\n            The type of observation space (kinematic information or vision)\n        act : ActionType, optional\n            The type of action space (1 or 3D; RPMS, thurst and torques, or waypoint with PID control)\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "neighbourhood_radius", "=", "neighbourhood_radius", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obs", "=", "obs", ",", "\n", "act", "=", "act", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.FlockAviary.FlockAviary._computeReward": [[74, 131], ["numpy.array", "range", "FlockAviary.FlockAviary._getDroneStateVector", "numpy.linalg.norm", "range", "numpy.linalg.norm", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value(s).\n\n        Returns\n        -------\n        dict[int, float]\n            The reward value for each drone.\n\n        \"\"\"", "\n", "rewards", "=", "{", "}", "\n", "states", "=", "np", ".", "array", "(", "[", "self", ".", "_getDroneStateVector", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "]", ")", "\n", "rewards", "[", "0", "]", "=", "-", "1", "*", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "-", "states", "[", "0", ",", "0", ":", "3", "]", ")", "**", "2", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "rewards", "[", "i", "]", "=", "-", "1", "*", "np", ".", "linalg", ".", "norm", "(", "states", "[", "i", "-", "1", ",", "2", "]", "-", "states", "[", "i", ",", "2", "]", ")", "**", "2", "\n", "", "return", "rewards", "\n", "\"\"\"\n        # obs here is dictionary of the form {\"i\":{\"state\": Box(20,), \"neighbors\": MultiBinary(NUM_DRONES)}}\n        # parse velocity and position\n        vel = np.zeros((1, self.NUM_DRONES, 3)); pos = np.zeros((1, self.NUM_DRONES, 3))\n        for i in range(self.NUM_DRONES):\n            pos[0,i,:] = obs[   i   ][\"state\"][0:3]\n            vel[0,i,:] = obs[   i   ][\"state\"][10:13]\n        # compute metrics\n        # velocity alignment\n        ali = 0\n        EPSILON = 1e-3  # avoid divide by zero\n        linear_vel_norm = np.linalg.norm(vel, axis=2)\n        for i in range(self.NUM_DRONES):\n            for j in range(self.NUM_DRONES):\n                if j != i:\n                    d = np.einsum('ij,ij->i', vel[:, i, :], vel[:, j, :])\n                    ali += (d / (linear_vel_norm[:, i] + EPSILON) / (linear_vel_norm[:, j] + EPSILON))\n        ali /= (self.NUM_DRONES * (self.NUM_DRONES - 1))\n        # flocking speed\n        cof_v = np.mean(vel, axis=1)  # center of flock speed\n        avg_flock_linear_speed = np.linalg.norm(cof_v, axis=-1)\n        # spacing\n        whole_flock_spacing = []\n        for i in range(self.NUM_DRONES):\n            flck_neighbor_pos = np.delete(pos, [i], 1)\n            drone_neighbor_pos_diff = flck_neighbor_pos - np.reshape(pos[:, i, :], (pos[:, i, :].shape[0], 1, -1))\n            drone_neighbor_dis = np.linalg.norm(drone_neighbor_pos_diff, axis=-1)\n            drone_spacing = np.amin(drone_neighbor_dis, axis=-1)\n            whole_flock_spacing.append(drone_spacing)\n        whole_flock_spacing = np.stack(whole_flock_spacing, axis=-1)\n        avg_flock_spacing = np.mean(whole_flock_spacing, axis=-1)\n        var_flock_spacing = np.var(whole_flock_spacing, axis=-1)\n        # flocking metrics\n        FLOCK_SPACING_MIN = 1.0; FLOCK_SPACING_MAX = 3.0\n        if FLOCK_SPACING_MIN < avg_flock_spacing[0] < FLOCK_SPACING_MAX:\n            avg_flock_spac_rew = 0.0\n        else:\n            avg_flock_spac_rew = min(math.fabs(avg_flock_spacing[0] - FLOCK_SPACING_MIN),\n                                     math.fabs(avg_flock_spacing[0] - FLOCK_SPACING_MAX))\n        reward = ali[0] + avg_flock_linear_speed[0] - avg_flock_spac_rew - var_flock_spacing[0]\n        return {   i   : reward for i in range(self.NUM_DRONES) }\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.FlockAviary.FlockAviary._computeDone": [[134, 148], ["range", "done.values"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value(s).\n\n        Returns\n        -------\n        dict[int | \"__all__\", bool]\n            Dictionary with the done value of each drone and \n            one additional boolean value for key \"__all__\".\n\n        \"\"\"", "\n", "bool_val", "=", "True", "if", "self", ".", "step_counter", "/", "self", ".", "SIM_FREQ", ">", "self", ".", "EPISODE_LEN_SEC", "else", "False", "\n", "done", "=", "{", "i", ":", "bool_val", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "done", "[", "\"__all__\"", "]", "=", "True", "if", "True", "in", "done", ".", "values", "(", ")", "else", "False", "\n", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.FlockAviary.FlockAviary._computeInfo": [[151, 163], ["range"], "methods", ["None"], ["", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused.\n\n        Returns\n        -------\n        dict[int, dict[]]\n            Dictionary of empty dictionaries.\n\n        \"\"\"", "\n", "return", "{", "i", ":", "{", "}", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.FlockAviary.FlockAviary._clipAndNormalizeState": [[166, 225], ["numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.hstack().reshape", "FlockAviary.FlockAviary._clipAndNormalizeStateWarning", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._clipAndNormalizeStateWarning"], ["", "def", "_clipAndNormalizeState", "(", "self", ",", "\n", "state", "\n", ")", ":", "\n", "        ", "\"\"\"Normalizes a drone's state to the [-1,1] range.\n\n        Parameters\n        ----------\n        state : ndarray\n            (20,)-shaped array of floats containing the non-normalized state of a single drone.\n\n        Returns\n        -------\n        ndarray\n            (20,)-shaped array of floats containing the normalized state of a single drone.\n\n        \"\"\"", "\n", "MAX_LIN_VEL_XY", "=", "3", "\n", "MAX_LIN_VEL_Z", "=", "1", "\n", "\n", "MAX_XY", "=", "MAX_LIN_VEL_XY", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "MAX_Z", "=", "MAX_LIN_VEL_Z", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "\n", "MAX_PITCH_ROLL", "=", "np", ".", "pi", "# Full range", "\n", "\n", "clipped_pos_xy", "=", "np", ".", "clip", "(", "state", "[", "0", ":", "2", "]", ",", "-", "MAX_XY", ",", "MAX_XY", ")", "\n", "clipped_pos_z", "=", "np", ".", "clip", "(", "state", "[", "2", "]", ",", "0", ",", "MAX_Z", ")", "\n", "clipped_rp", "=", "np", ".", "clip", "(", "state", "[", "7", ":", "9", "]", ",", "-", "MAX_PITCH_ROLL", ",", "MAX_PITCH_ROLL", ")", "\n", "clipped_vel_xy", "=", "np", ".", "clip", "(", "state", "[", "10", ":", "12", "]", ",", "-", "MAX_LIN_VEL_XY", ",", "MAX_LIN_VEL_XY", ")", "\n", "clipped_vel_z", "=", "np", ".", "clip", "(", "state", "[", "12", "]", ",", "-", "MAX_LIN_VEL_Z", ",", "MAX_LIN_VEL_Z", ")", "\n", "\n", "if", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "_clipAndNormalizeStateWarning", "(", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", "\n", ")", "\n", "\n", "", "normalized_pos_xy", "=", "clipped_pos_xy", "/", "MAX_XY", "\n", "normalized_pos_z", "=", "clipped_pos_z", "/", "MAX_Z", "\n", "normalized_rp", "=", "clipped_rp", "/", "MAX_PITCH_ROLL", "\n", "normalized_y", "=", "state", "[", "9", "]", "/", "np", ".", "pi", "# No reason to clip", "\n", "normalized_vel_xy", "=", "clipped_vel_xy", "/", "MAX_LIN_VEL_XY", "\n", "normalized_vel_z", "=", "clipped_vel_z", "/", "MAX_LIN_VEL_XY", "\n", "normalized_ang_vel", "=", "state", "[", "13", ":", "16", "]", "/", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "if", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "!=", "0", "else", "state", "[", "13", ":", "16", "]", "\n", "\n", "norm_and_clipped", "=", "np", ".", "hstack", "(", "[", "normalized_pos_xy", ",", "\n", "normalized_pos_z", ",", "\n", "state", "[", "3", ":", "7", "]", ",", "\n", "normalized_rp", ",", "\n", "normalized_y", ",", "\n", "normalized_vel_xy", ",", "\n", "normalized_vel_z", ",", "\n", "normalized_ang_vel", ",", "\n", "state", "[", "16", ":", "20", "]", "\n", "]", ")", ".", "reshape", "(", "20", ",", ")", "\n", "\n", "return", "norm_and_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.FlockAviary.FlockAviary._clipAndNormalizeStateWarning": [[228, 251], ["print", "print", "print", "print", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_clipAndNormalizeStateWarning", "(", "self", ",", "\n", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Debugging printouts associated to `_clipAndNormalizeState`.\n\n        Print a warning if values in a state vector is out of the clipping range.\n        \n        \"\"\"", "\n", "if", "not", "(", "clipped_pos_xy", "==", "np", ".", "array", "(", "state", "[", "0", ":", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in FlockAviary._clipAndNormalizeState(), clipped xy position [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_pos_z", "==", "np", ".", "array", "(", "state", "[", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in FlockAviary._clipAndNormalizeState(), clipped z position [{:.2f}]\"", ".", "format", "(", "state", "[", "2", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_rp", "==", "np", ".", "array", "(", "state", "[", "7", ":", "9", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in FlockAviary._clipAndNormalizeState(), clipped roll/pitch [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "7", "]", ",", "state", "[", "8", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_xy", "==", "np", ".", "array", "(", "state", "[", "10", ":", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in FlockAviary._clipAndNormalizeState(), clipped xy velocity [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "10", "]", ",", "state", "[", "11", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_z", "==", "np", ".", "array", "(", "state", "[", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in FlockAviary._clipAndNormalizeState(), clipped z velocity [{:.2f}]\"", ".", "format", "(", "state", "[", "12", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.LeaderFollowerAviary.LeaderFollowerAviary.__init__": [[12, 69], ["gym_pybullet_drones.envs.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", ":", "int", "=", "2", ",", "\n", "neighbourhood_radius", ":", "float", "=", "np", ".", "inf", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obs", ":", "ObservationType", "=", "ObservationType", ".", "KIN", ",", "\n", "act", ":", "ActionType", "=", "ActionType", ".", "RPM", ")", ":", "\n", "        ", "\"\"\"Initialization of a multi-agent RL environment.\n\n        Using the generic multi-agent RL superclass.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        num_drones : int, optional\n            The desired number of drones in the aviary.\n        neighbourhood_radius : float, optional\n            Radius used to compute the drones' adjacency matrix, in meters.\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obs : ObservationType, optional\n            The type of observation space (kinematic information or vision)\n        act : ActionType, optional\n            The type of action space (1 or 3D; RPMS, thurst and torques, or waypoint with PID control)\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "neighbourhood_radius", "=", "neighbourhood_radius", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obs", "=", "obs", ",", "\n", "act", "=", "act", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.LeaderFollowerAviary.LeaderFollowerAviary._computeReward": [[73, 89], ["numpy.array", "range", "LeaderFollowerAviary.LeaderFollowerAviary._getDroneStateVector", "numpy.linalg.norm", "range", "numpy.linalg.norm", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value(s).\n\n        Returns\n        -------\n        dict[int, float]\n            The reward value for each drone.\n\n        \"\"\"", "\n", "rewards", "=", "{", "}", "\n", "states", "=", "np", ".", "array", "(", "[", "self", ".", "_getDroneStateVector", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "]", ")", "\n", "rewards", "[", "0", "]", "=", "-", "1", "*", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0.5", "]", ")", "-", "states", "[", "0", ",", "0", ":", "3", "]", ")", "**", "2", "\n", "# rewards[1] = -1 * np.linalg.norm(np.array([states[1, 0], states[1, 1], 0.5]) - states[1, 0:3])**2 # DEBUG WITH INDEPENDENT REWARD ", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "NUM_DRONES", ")", ":", "\n", "            ", "rewards", "[", "i", "]", "=", "-", "(", "1", "/", "self", ".", "NUM_DRONES", ")", "*", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "[", "states", "[", "i", ",", "0", "]", ",", "states", "[", "i", ",", "1", "]", ",", "states", "[", "0", ",", "2", "]", "]", ")", "-", "states", "[", "i", ",", "0", ":", "3", "]", ")", "**", "2", "\n", "", "return", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.LeaderFollowerAviary.LeaderFollowerAviary._computeDone": [[92, 106], ["range"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value(s).\n\n        Returns\n        -------\n        dict[int | \"__all__\", bool]\n            Dictionary with the done value of each drone and \n            one additional boolean value for key \"__all__\".\n\n        \"\"\"", "\n", "bool_val", "=", "True", "if", "self", ".", "step_counter", "/", "self", ".", "SIM_FREQ", ">", "self", ".", "EPISODE_LEN_SEC", "else", "False", "\n", "done", "=", "{", "i", ":", "bool_val", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "done", "[", "\"__all__\"", "]", "=", "bool_val", "# True if True in done.values() else False", "\n", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.LeaderFollowerAviary.LeaderFollowerAviary._computeInfo": [[109, 121], ["range"], "methods", ["None"], ["", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused.\n\n        Returns\n        -------\n        dict[int, dict[]]\n            Dictionary of empty dictionaries.\n\n        \"\"\"", "\n", "return", "{", "i", ":", "{", "}", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.LeaderFollowerAviary.LeaderFollowerAviary._clipAndNormalizeState": [[124, 183], ["numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.hstack().reshape", "LeaderFollowerAviary.LeaderFollowerAviary._clipAndNormalizeStateWarning", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._clipAndNormalizeStateWarning"], ["", "def", "_clipAndNormalizeState", "(", "self", ",", "\n", "state", "\n", ")", ":", "\n", "        ", "\"\"\"Normalizes a drone's state to the [-1,1] range.\n\n        Parameters\n        ----------\n        state : ndarray\n            (20,)-shaped array of floats containing the non-normalized state of a single drone.\n\n        Returns\n        -------\n        ndarray\n            (20,)-shaped array of floats containing the normalized state of a single drone.\n\n        \"\"\"", "\n", "MAX_LIN_VEL_XY", "=", "3", "\n", "MAX_LIN_VEL_Z", "=", "1", "\n", "\n", "MAX_XY", "=", "MAX_LIN_VEL_XY", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "MAX_Z", "=", "MAX_LIN_VEL_Z", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "\n", "MAX_PITCH_ROLL", "=", "np", ".", "pi", "# Full range", "\n", "\n", "clipped_pos_xy", "=", "np", ".", "clip", "(", "state", "[", "0", ":", "2", "]", ",", "-", "MAX_XY", ",", "MAX_XY", ")", "\n", "clipped_pos_z", "=", "np", ".", "clip", "(", "state", "[", "2", "]", ",", "0", ",", "MAX_Z", ")", "\n", "clipped_rp", "=", "np", ".", "clip", "(", "state", "[", "7", ":", "9", "]", ",", "-", "MAX_PITCH_ROLL", ",", "MAX_PITCH_ROLL", ")", "\n", "clipped_vel_xy", "=", "np", ".", "clip", "(", "state", "[", "10", ":", "12", "]", ",", "-", "MAX_LIN_VEL_XY", ",", "MAX_LIN_VEL_XY", ")", "\n", "clipped_vel_z", "=", "np", ".", "clip", "(", "state", "[", "12", "]", ",", "-", "MAX_LIN_VEL_Z", ",", "MAX_LIN_VEL_Z", ")", "\n", "\n", "if", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "_clipAndNormalizeStateWarning", "(", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", "\n", ")", "\n", "\n", "", "normalized_pos_xy", "=", "clipped_pos_xy", "/", "MAX_XY", "\n", "normalized_pos_z", "=", "clipped_pos_z", "/", "MAX_Z", "\n", "normalized_rp", "=", "clipped_rp", "/", "MAX_PITCH_ROLL", "\n", "normalized_y", "=", "state", "[", "9", "]", "/", "np", ".", "pi", "# No reason to clip", "\n", "normalized_vel_xy", "=", "clipped_vel_xy", "/", "MAX_LIN_VEL_XY", "\n", "normalized_vel_z", "=", "clipped_vel_z", "/", "MAX_LIN_VEL_XY", "\n", "normalized_ang_vel", "=", "state", "[", "13", ":", "16", "]", "/", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "if", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "!=", "0", "else", "state", "[", "13", ":", "16", "]", "\n", "\n", "norm_and_clipped", "=", "np", ".", "hstack", "(", "[", "normalized_pos_xy", ",", "\n", "normalized_pos_z", ",", "\n", "state", "[", "3", ":", "7", "]", ",", "\n", "normalized_rp", ",", "\n", "normalized_y", ",", "\n", "normalized_vel_xy", ",", "\n", "normalized_vel_z", ",", "\n", "normalized_ang_vel", ",", "\n", "state", "[", "16", ":", "20", "]", "\n", "]", ")", ".", "reshape", "(", "20", ",", ")", "\n", "\n", "return", "norm_and_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.LeaderFollowerAviary.LeaderFollowerAviary._clipAndNormalizeStateWarning": [[186, 209], ["print", "print", "print", "print", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_clipAndNormalizeStateWarning", "(", "self", ",", "\n", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Debugging printouts associated to `_clipAndNormalizeState`.\n\n        Print a warning if values in a state vector is out of the clipping range.\n        \n        \"\"\"", "\n", "if", "not", "(", "clipped_pos_xy", "==", "np", ".", "array", "(", "state", "[", "0", ":", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in LeaderFollowerAviary._clipAndNormalizeState(), clipped xy position [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_pos_z", "==", "np", ".", "array", "(", "state", "[", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in LeaderFollowerAviary._clipAndNormalizeState(), clipped z position [{:.2f}]\"", ".", "format", "(", "state", "[", "2", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_rp", "==", "np", ".", "array", "(", "state", "[", "7", ":", "9", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in LeaderFollowerAviary._clipAndNormalizeState(), clipped roll/pitch [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "7", "]", ",", "state", "[", "8", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_xy", "==", "np", ".", "array", "(", "state", "[", "10", ":", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in LeaderFollowerAviary._clipAndNormalizeState(), clipped xy velocity [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "10", "]", ",", "state", "[", "11", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_z", "==", "np", ".", "array", "(", "state", "[", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in LeaderFollowerAviary._clipAndNormalizeState(), clipped z velocity [{:.2f}]\"", ".", "format", "(", "state", "[", "12", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary.__init__": [[12, 69], ["gym_pybullet_drones.envs.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary.__init__"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", ":", "int", "=", "2", ",", "\n", "neighbourhood_radius", ":", "float", "=", "np", ".", "inf", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obs", ":", "ObservationType", "=", "ObservationType", ".", "KIN", ",", "\n", "act", ":", "ActionType", "=", "ActionType", ".", "RPM", ")", ":", "\n", "        ", "\"\"\"Initialization of a multi-agent RL environment.\n\n        Using the generic multi-agent RL superclass.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        num_drones : int, optional\n            The desired number of drones in the aviary.\n        neighbourhood_radius : float, optional\n            Radius used to compute the drones' adjacency matrix, in meters.\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obs : ObservationType, optional\n            The type of observation space (kinematic information or vision)\n        act : ActionType, optional\n            The type of action space (1 or 3D; RPMS, thurst and torques, or waypoint with PID control)\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "neighbourhood_radius", "=", "neighbourhood_radius", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obs", "=", "obs", ",", "\n", "act", "=", "act", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._computeReward": [[73, 89], ["numpy.array", "range", "int", "MeetupAviary.MeetupAviary._getDroneStateVector", "range", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "def", "_computeReward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current reward value(s).\n\n        Returns\n        -------\n        dict[int, float]\n            The reward value for each drone.\n\n        \"\"\"", "\n", "rewards", "=", "{", "}", "\n", "states", "=", "np", ".", "array", "(", "[", "self", ".", "_getDroneStateVector", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "self", ".", "NUM_DRONES", "/", "2", ")", ")", ":", "\n", "            ", "val", "=", "-", "1", "*", "np", ".", "linalg", ".", "norm", "(", "states", "[", "i", ",", "0", ":", "3", "]", "-", "states", "[", "self", ".", "NUM_DRONES", "-", "1", "-", "i", ",", "0", ":", "3", "]", ")", "**", "2", "\n", "rewards", "[", "i", "]", "=", "val", "\n", "rewards", "[", "self", ".", "NUM_DRONES", "-", "1", "-", "i", "]", "=", "val", "\n", "", "return", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._computeDone": [[92, 106], ["range", "done.values"], "methods", ["None"], ["", "def", "_computeDone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current done value(s).\n\n        Returns\n        -------\n        dict[int | \"__all__\", bool]\n            Dictionary with the done value of each drone and \n            one additional boolean value for key \"__all__\".\n\n        \"\"\"", "\n", "bool_val", "=", "True", "if", "self", ".", "step_counter", "/", "self", ".", "SIM_FREQ", ">", "self", ".", "EPISODE_LEN_SEC", "else", "False", "\n", "done", "=", "{", "i", ":", "bool_val", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "done", "[", "\"__all__\"", "]", "=", "True", "if", "True", "in", "done", ".", "values", "(", ")", "else", "False", "\n", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._computeInfo": [[109, 121], ["range"], "methods", ["None"], ["", "def", "_computeInfo", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes the current info dict(s).\n\n        Unused.\n\n        Returns\n        -------\n        dict[int, dict[]]\n            Dictionary of empty dictionaries.\n\n        \"\"\"", "\n", "return", "{", "i", ":", "{", "}", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._clipAndNormalizeState": [[124, 183], ["numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.hstack().reshape", "MeetupAviary.MeetupAviary._clipAndNormalizeStateWarning", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._clipAndNormalizeStateWarning"], ["", "def", "_clipAndNormalizeState", "(", "self", ",", "\n", "state", "\n", ")", ":", "\n", "        ", "\"\"\"Normalizes a drone's state to the [-1,1] range.\n\n        Parameters\n        ----------\n        state : ndarray\n            (20,)-shaped array of floats containing the non-normalized state of a single drone.\n\n        Returns\n        -------\n        ndarray\n            (20,)-shaped array of floats containing the normalized state of a single drone.\n\n        \"\"\"", "\n", "MAX_LIN_VEL_XY", "=", "3", "\n", "MAX_LIN_VEL_Z", "=", "1", "\n", "\n", "MAX_XY", "=", "MAX_LIN_VEL_XY", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "MAX_Z", "=", "MAX_LIN_VEL_Z", "*", "self", ".", "EPISODE_LEN_SEC", "\n", "\n", "MAX_PITCH_ROLL", "=", "np", ".", "pi", "# Full range", "\n", "\n", "clipped_pos_xy", "=", "np", ".", "clip", "(", "state", "[", "0", ":", "2", "]", ",", "-", "MAX_XY", ",", "MAX_XY", ")", "\n", "clipped_pos_z", "=", "np", ".", "clip", "(", "state", "[", "2", "]", ",", "0", ",", "MAX_Z", ")", "\n", "clipped_rp", "=", "np", ".", "clip", "(", "state", "[", "7", ":", "9", "]", ",", "-", "MAX_PITCH_ROLL", ",", "MAX_PITCH_ROLL", ")", "\n", "clipped_vel_xy", "=", "np", ".", "clip", "(", "state", "[", "10", ":", "12", "]", ",", "-", "MAX_LIN_VEL_XY", ",", "MAX_LIN_VEL_XY", ")", "\n", "clipped_vel_z", "=", "np", ".", "clip", "(", "state", "[", "12", "]", ",", "-", "MAX_LIN_VEL_Z", ",", "MAX_LIN_VEL_Z", ")", "\n", "\n", "if", "self", ".", "GUI", ":", "\n", "            ", "self", ".", "_clipAndNormalizeStateWarning", "(", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", "\n", ")", "\n", "\n", "", "normalized_pos_xy", "=", "clipped_pos_xy", "/", "MAX_XY", "\n", "normalized_pos_z", "=", "clipped_pos_z", "/", "MAX_Z", "\n", "normalized_rp", "=", "clipped_rp", "/", "MAX_PITCH_ROLL", "\n", "normalized_y", "=", "state", "[", "9", "]", "/", "np", ".", "pi", "# No reason to clip", "\n", "normalized_vel_xy", "=", "clipped_vel_xy", "/", "MAX_LIN_VEL_XY", "\n", "normalized_vel_z", "=", "clipped_vel_z", "/", "MAX_LIN_VEL_XY", "\n", "normalized_ang_vel", "=", "state", "[", "13", ":", "16", "]", "/", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "if", "np", ".", "linalg", ".", "norm", "(", "state", "[", "13", ":", "16", "]", ")", "!=", "0", "else", "state", "[", "13", ":", "16", "]", "\n", "\n", "norm_and_clipped", "=", "np", ".", "hstack", "(", "[", "normalized_pos_xy", ",", "\n", "normalized_pos_z", ",", "\n", "state", "[", "3", ":", "7", "]", ",", "\n", "normalized_rp", ",", "\n", "normalized_y", ",", "\n", "normalized_vel_xy", ",", "\n", "normalized_vel_z", ",", "\n", "normalized_ang_vel", ",", "\n", "state", "[", "16", ":", "20", "]", "\n", "]", ")", ".", "reshape", "(", "20", ",", ")", "\n", "\n", "return", "norm_and_clipped", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.MeetupAviary.MeetupAviary._clipAndNormalizeStateWarning": [[186, 209], ["print", "print", "print", "print", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_clipAndNormalizeStateWarning", "(", "self", ",", "\n", "state", ",", "\n", "clipped_pos_xy", ",", "\n", "clipped_pos_z", ",", "\n", "clipped_rp", ",", "\n", "clipped_vel_xy", ",", "\n", "clipped_vel_z", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Debugging printouts associated to `_clipAndNormalizeState`.\n\n        Print a warning if values in a state vector is out of the clipping range.\n        \n        \"\"\"", "\n", "if", "not", "(", "clipped_pos_xy", "==", "np", ".", "array", "(", "state", "[", "0", ":", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in MeetupAviary._clipAndNormalizeState(), clipped xy position [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_pos_z", "==", "np", ".", "array", "(", "state", "[", "2", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in MeetupAviary._clipAndNormalizeState(), clipped z position [{:.2f}]\"", ".", "format", "(", "state", "[", "2", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_rp", "==", "np", ".", "array", "(", "state", "[", "7", ":", "9", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in MeetupAviary._clipAndNormalizeState(), clipped roll/pitch [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "7", "]", ",", "state", "[", "8", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_xy", "==", "np", ".", "array", "(", "state", "[", "10", ":", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in MeetupAviary._clipAndNormalizeState(), clipped xy velocity [{:.2f} {:.2f}]\"", ".", "format", "(", "state", "[", "10", "]", ",", "state", "[", "11", "]", ")", ")", "\n", "", "if", "not", "(", "clipped_vel_z", "==", "np", ".", "array", "(", "state", "[", "12", "]", ")", ")", ".", "all", "(", ")", ":", "\n", "            ", "print", "(", "\"[WARNING] it\"", ",", "self", ".", "step_counter", ",", "\"in MeetupAviary._clipAndNormalizeState(), clipped z velocity [{:.2f}]\"", ".", "format", "(", "state", "[", "12", "]", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary.__init__": [[19, 106], ["gym_pybullet_drones.envs.BaseAviary.BaseAviary.__init__", "print", "exit", "print", "exit", "gym_pybullet_drones.control.DSLPIDControl.DSLPIDControl", "print", "range", "gym_pybullet_drones.control.SimplePIDControl.SimplePIDControl", "range"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", ":", "int", "=", "2", ",", "\n", "neighbourhood_radius", ":", "float", "=", "np", ".", "inf", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", ":", "Physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", ":", "int", "=", "240", ",", "\n", "aggregate_phy_steps", ":", "int", "=", "1", ",", "\n", "gui", "=", "False", ",", "\n", "record", "=", "False", ",", "\n", "obs", ":", "ObservationType", "=", "ObservationType", ".", "KIN", ",", "\n", "act", ":", "ActionType", "=", "ActionType", ".", "RPM", "\n", ")", ":", "\n", "        ", "\"\"\"Initialization of a generic multi-agent RL environment.\n\n        Attributes `vision_attributes` and `dynamics_attributes` are selected\n        based on the choice of `obs` and `act`; `obstacles` is set to True \n        and overridden with landmarks for vision applications; \n        `user_debug_gui` is set to False for performance.\n\n        Parameters\n        ----------\n        drone_model : DroneModel, optional\n            The desired drone type (detailed in an .urdf file in folder `assets`).\n        num_drones : int, optional\n            The desired number of drones in the aviary.\n        neighbourhood_radius : float, optional\n            Radius used to compute the drones' adjacency matrix, in meters.\n        initial_xyzs: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial XYZ position of the drones.\n        initial_rpys: ndarray | None, optional\n            (NUM_DRONES, 3)-shaped array containing the initial orientations of the drones (in radians).\n        physics : Physics, optional\n            The desired implementation of PyBullet physics/custom dynamics.\n        freq : int, optional\n            The frequency (Hz) at which the physics engine steps.\n        aggregate_phy_steps : int, optional\n            The number of physics steps within one call to `BaseAviary.step()`.\n        gui : bool, optional\n            Whether to use PyBullet's GUI.\n        record : bool, optional\n            Whether to save a video of the simulation in folder `files/videos/`.\n        obs : ObservationType, optional\n            The type of observation space (kinematic information or vision)\n        act : ActionType, optional\n            The type of action space (1 or 3D; RPMS, thurst and torques, waypoint or velocity with PID control; etc.)\n\n        \"\"\"", "\n", "if", "num_drones", "<", "2", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseMultiagentAviary.__init__(), num_drones should be >= 2\"", ")", "\n", "exit", "(", ")", "\n", "", "if", "act", "==", "ActionType", ".", "TUN", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseMultiagentAviary.__init__(), ActionType.TUN can only used with BaseSingleAgentAviary\"", ")", "\n", "exit", "(", ")", "\n", "", "vision_attributes", "=", "True", "if", "obs", "==", "ObservationType", ".", "RGB", "else", "False", "\n", "dynamics_attributes", "=", "True", "if", "act", "in", "[", "ActionType", ".", "DYN", ",", "ActionType", ".", "ONE_D_DYN", "]", "else", "False", "\n", "self", ".", "OBS_TYPE", "=", "obs", "\n", "self", ".", "ACT_TYPE", "=", "act", "\n", "self", ".", "EPISODE_LEN_SEC", "=", "5", "\n", "#### Create integrated controllers #########################", "\n", "if", "act", "in", "[", "ActionType", ".", "PID", ",", "ActionType", ".", "VEL", ",", "ActionType", ".", "ONE_D_PID", "]", ":", "\n", "            ", "os", ".", "environ", "[", "'KMP_DUPLICATE_LIB_OK'", "]", "=", "'True'", "\n", "if", "drone_model", "in", "[", "DroneModel", ".", "CF2X", ",", "DroneModel", ".", "CF2P", "]", ":", "\n", "                ", "self", ".", "ctrl", "=", "[", "DSLPIDControl", "(", "drone_model", "=", "DroneModel", ".", "CF2X", ")", "for", "i", "in", "range", "(", "num_drones", ")", "]", "\n", "", "elif", "drone_model", "==", "DroneModel", ".", "HB", ":", "\n", "                ", "self", ".", "ctrl", "=", "[", "SimplePIDControl", "(", "drone_model", "=", "DroneModel", ".", "HB", ")", "for", "i", "in", "range", "(", "num_drones", ")", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"[ERROR] in BaseMultiagentAviary.__init()__, no controller is available for the specified drone_model\"", ")", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "\n", "num_drones", "=", "num_drones", ",", "\n", "neighbourhood_radius", "=", "neighbourhood_radius", ",", "\n", "initial_xyzs", "=", "initial_xyzs", ",", "\n", "initial_rpys", "=", "initial_rpys", ",", "\n", "physics", "=", "physics", ",", "\n", "freq", "=", "freq", ",", "\n", "aggregate_phy_steps", "=", "aggregate_phy_steps", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "record", ",", "\n", "obstacles", "=", "True", ",", "# Add obstacles for RGB observations and/or FlyThruGate", "\n", "user_debug_gui", "=", "False", ",", "# Remove of RPM sliders from all single agent learning aviaries", "\n", "vision_attributes", "=", "vision_attributes", ",", "\n", "dynamics_attributes", "=", "dynamics_attributes", "\n", ")", "\n", "#### Set a limit on the maximum target speed ###############", "\n", "if", "act", "==", "ActionType", ".", "VEL", ":", "\n", "            ", "self", ".", "SPEED_LIMIT", "=", "0.03", "*", "self", ".", "MAX_SPEED_KMH", "*", "(", "1000", "/", "3600", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._addObstacles": [[109, 139], ["pybullet.loadURDF", "pybullet.loadURDF", "pybullet.loadURDF", "pybullet.loadURDF", "pybullet.getQuaternionFromEuler", "pybullet.getQuaternionFromEuler", "pybullet.getQuaternionFromEuler", "pybullet.getQuaternionFromEuler"], "methods", ["None"], ["", "", "def", "_addObstacles", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add obstacles to the environment.\n\n        Only if the observation is of type RGB, 4 landmarks are added.\n        Overrides BaseAviary's method.\n\n        \"\"\"", "\n", "if", "self", ".", "OBS_TYPE", "==", "ObservationType", ".", "RGB", ":", "\n", "            ", "p", ".", "loadURDF", "(", "\"block.urdf\"", ",", "\n", "[", "1", ",", "0", ",", ".1", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "p", ".", "loadURDF", "(", "\"cube_small.urdf\"", ",", "\n", "[", "0", ",", "1", ",", ".1", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "p", ".", "loadURDF", "(", "\"duck_vhacd.urdf\"", ",", "\n", "[", "-", "1", ",", "0", ",", ".1", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "p", ".", "loadURDF", "(", "\"teddy_vhacd.urdf\"", ",", "\n", "[", "0", ",", "-", "1", ",", ".1", "]", ",", "\n", "p", ".", "getQuaternionFromEuler", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "\n", "physicsClientId", "=", "self", ".", "CLIENT", "\n", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._actionSpace": [[142, 165], ["gym.spaces.Dict", "gym.spaces.Box", "print", "exit", "range", "numpy.ones", "numpy.ones"], "methods", ["None"], ["", "", "def", "_actionSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the action space of the environment.\n\n        Returns\n        -------\n        dict[int, ndarray]\n            A Dict() of Box() of size 1, 3, or 3, depending on the action type,\n            indexed by drone Id in integer format.\n\n        \"\"\"", "\n", "if", "self", ".", "ACT_TYPE", "in", "[", "ActionType", ".", "RPM", ",", "ActionType", ".", "DYN", ",", "ActionType", ".", "VEL", "]", ":", "\n", "            ", "size", "=", "4", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "PID", ":", "\n", "            ", "size", "=", "3", "\n", "", "elif", "self", ".", "ACT_TYPE", "in", "[", "ActionType", ".", "ONE_D_RPM", ",", "ActionType", ".", "ONE_D_DYN", ",", "ActionType", ".", "ONE_D_PID", "]", ":", "\n", "            ", "size", "=", "1", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseMultiagentAviary._actionSpace()\"", ")", "\n", "exit", "(", ")", "\n", "", "return", "spaces", ".", "Dict", "(", "{", "i", ":", "spaces", ".", "Box", "(", "low", "=", "-", "1", "*", "np", ".", "ones", "(", "size", ")", ",", "\n", "high", "=", "np", ".", "ones", "(", "size", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._preprocessAction": [[168, 269], ["numpy.zeros", "action.items", "numpy.array", "gym_pybullet_drones.utils.utils.nnlsRPM", "BaseMultiagentAviary.BaseMultiagentAviary._getDroneStateVector", "BaseMultiagentAviary.BaseMultiagentAviary.ctrl[].computeControl", "int", "int", "BaseMultiagentAviary.BaseMultiagentAviary._getDroneStateVector", "BaseMultiagentAviary.BaseMultiagentAviary.ctrl[].computeControl", "int", "int", "numpy.linalg.norm", "numpy.zeros", "numpy.repeat", "int", "numpy.linalg.norm", "numpy.array", "gym_pybullet_drones.utils.utils.nnlsRPM", "int", "int", "BaseMultiagentAviary.BaseMultiagentAviary._getDroneStateVector", "BaseMultiagentAviary.BaseMultiagentAviary.ctrl[].computeControl", "print", "exit", "int", "numpy.abs", "int", "int", "int", "int", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.nnlsRPM", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.computeControl", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.computeControl", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.nnlsRPM", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.computeControl"], ["", "def", "_preprocessAction", "(", "self", ",", "\n", "action", "\n", ")", ":", "\n", "        ", "\"\"\"Pre-processes the action passed to `.step()` into motors' RPMs.\n\n        Parameter `action` is processed differenly for each of the different\n        action types: the input to n-th drone, `action[n]` can be of length\n        1, 3, or 4, and represent RPMs, desired thrust and torques, or the next\n        target position to reach using PID control.\n\n        Parameter `action` is processed differenly for each of the different\n        action types: `action` can be of length 1, 3, or 4 and represent \n        RPMs, desired thrust and torques, the next target position to reach \n        using PID control, a desired velocity vector, etc.\n\n        Parameters\n        ----------\n        action : dict[str, ndarray]\n            The input action for each drone, to be translated into RPMs.\n\n        Returns\n        -------\n        ndarray\n            (NUM_DRONES, 4)-shaped array of ints containing to clipped RPMs\n            commanded to the 4 motors of each drone.\n\n        \"\"\"", "\n", "rpm", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "4", ")", ")", "\n", "for", "k", ",", "v", "in", "action", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "RPM", ":", "\n", "                ", "rpm", "[", "int", "(", "k", ")", ",", ":", "]", "=", "np", ".", "array", "(", "self", ".", "HOVER_RPM", "*", "(", "1", "+", "0.05", "*", "v", ")", ")", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "DYN", ":", "\n", "                ", "rpm", "[", "int", "(", "k", ")", ",", ":", "]", "=", "nnlsRPM", "(", "thrust", "=", "(", "self", ".", "GRAVITY", "*", "(", "v", "[", "0", "]", "+", "1", ")", ")", ",", "\n", "x_torque", "=", "(", "0.05", "*", "self", ".", "MAX_XY_TORQUE", "*", "v", "[", "1", "]", ")", ",", "\n", "y_torque", "=", "(", "0.05", "*", "self", ".", "MAX_XY_TORQUE", "*", "v", "[", "2", "]", ")", ",", "\n", "z_torque", "=", "(", "0.05", "*", "self", ".", "MAX_Z_TORQUE", "*", "v", "[", "3", "]", ")", ",", "\n", "counter", "=", "self", ".", "step_counter", ",", "\n", "max_thrust", "=", "self", ".", "MAX_THRUST", ",", "\n", "max_xy_torque", "=", "self", ".", "MAX_XY_TORQUE", ",", "\n", "max_z_torque", "=", "self", ".", "MAX_Z_TORQUE", ",", "\n", "a", "=", "self", ".", "A", ",", "\n", "inv_a", "=", "self", ".", "INV_A", ",", "\n", "b_coeff", "=", "self", ".", "B_COEFF", ",", "\n", "gui", "=", "self", ".", "GUI", "\n", ")", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "PID", ":", "\n", "                ", "state", "=", "self", ".", "_getDroneStateVector", "(", "int", "(", "k", ")", ")", "\n", "rpm_k", ",", "_", ",", "_", "=", "self", ".", "ctrl", "[", "int", "(", "k", ")", "]", ".", "computeControl", "(", "control_timestep", "=", "self", ".", "AGGR_PHY_STEPS", "*", "self", ".", "TIMESTEP", ",", "\n", "cur_pos", "=", "state", "[", "0", ":", "3", "]", ",", "\n", "cur_quat", "=", "state", "[", "3", ":", "7", "]", ",", "\n", "cur_vel", "=", "state", "[", "10", ":", "13", "]", ",", "\n", "cur_ang_vel", "=", "state", "[", "13", ":", "16", "]", ",", "\n", "target_pos", "=", "state", "[", "0", ":", "3", "]", "+", "0.1", "*", "v", "\n", ")", "\n", "rpm", "[", "int", "(", "k", ")", ",", ":", "]", "=", "rpm_k", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "VEL", ":", "\n", "                ", "state", "=", "self", ".", "_getDroneStateVector", "(", "int", "(", "k", ")", ")", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "v", "[", "0", ":", "3", "]", ")", "!=", "0", ":", "\n", "                    ", "v_unit_vector", "=", "v", "[", "0", ":", "3", "]", "/", "np", ".", "linalg", ".", "norm", "(", "v", "[", "0", ":", "3", "]", ")", "\n", "", "else", ":", "\n", "                    ", "v_unit_vector", "=", "np", ".", "zeros", "(", "3", ")", "\n", "", "temp", ",", "_", ",", "_", "=", "self", ".", "ctrl", "[", "int", "(", "k", ")", "]", ".", "computeControl", "(", "control_timestep", "=", "self", ".", "AGGR_PHY_STEPS", "*", "self", ".", "TIMESTEP", ",", "\n", "cur_pos", "=", "state", "[", "0", ":", "3", "]", ",", "\n", "cur_quat", "=", "state", "[", "3", ":", "7", "]", ",", "\n", "cur_vel", "=", "state", "[", "10", ":", "13", "]", ",", "\n", "cur_ang_vel", "=", "state", "[", "13", ":", "16", "]", ",", "\n", "target_pos", "=", "state", "[", "0", ":", "3", "]", ",", "# same as the current position", "\n", "target_rpy", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "state", "[", "9", "]", "]", ")", ",", "# keep current yaw", "\n", "target_vel", "=", "self", ".", "SPEED_LIMIT", "*", "np", ".", "abs", "(", "v", "[", "3", "]", ")", "*", "v_unit_vector", "# target the desired velocity vector", "\n", ")", "\n", "rpm", "[", "int", "(", "k", ")", ",", ":", "]", "=", "temp", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "ONE_D_RPM", ":", "\n", "                ", "rpm", "[", "int", "(", "k", ")", ",", ":", "]", "=", "np", ".", "repeat", "(", "self", ".", "HOVER_RPM", "*", "(", "1", "+", "0.05", "*", "v", ")", ",", "4", ")", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "ONE_D_DYN", ":", "\n", "                ", "rpm", "[", "int", "(", "k", ")", ",", ":", "]", "=", "nnlsRPM", "(", "thrust", "=", "(", "self", ".", "GRAVITY", "*", "(", "1", "+", "0.05", "*", "v", "[", "0", "]", ")", ")", ",", "\n", "x_torque", "=", "0", ",", "\n", "y_torque", "=", "0", ",", "\n", "z_torque", "=", "0", ",", "\n", "counter", "=", "self", ".", "step_counter", ",", "\n", "max_thrust", "=", "self", ".", "MAX_THRUST", ",", "\n", "max_xy_torque", "=", "self", ".", "MAX_XY_TORQUE", ",", "\n", "max_z_torque", "=", "self", ".", "MAX_Z_TORQUE", ",", "\n", "a", "=", "self", ".", "A", ",", "\n", "inv_a", "=", "self", ".", "INV_A", ",", "\n", "b_coeff", "=", "self", ".", "B_COEFF", ",", "\n", "gui", "=", "self", ".", "GUI", "\n", ")", "\n", "", "elif", "self", ".", "ACT_TYPE", "==", "ActionType", ".", "ONE_D_PID", ":", "\n", "                ", "state", "=", "self", ".", "_getDroneStateVector", "(", "int", "(", "k", ")", ")", "\n", "rpm", ",", "_", ",", "_", "=", "self", ".", "ctrl", "[", "k", "]", ".", "computeControl", "(", "control_timestep", "=", "self", ".", "AGGR_PHY_STEPS", "*", "self", ".", "TIMESTEP", ",", "\n", "cur_pos", "=", "state", "[", "0", ":", "3", "]", ",", "\n", "cur_quat", "=", "state", "[", "3", ":", "7", "]", ",", "\n", "cur_vel", "=", "state", "[", "10", ":", "13", "]", ",", "\n", "cur_ang_vel", "=", "state", "[", "13", ":", "16", "]", ",", "\n", "target_pos", "=", "state", "[", "0", ":", "3", "]", "+", "0.1", "*", "np", ".", "array", "(", "[", "0", ",", "0", ",", "v", "[", "0", "]", "]", ")", "\n", ")", "\n", "rpm", "[", "int", "(", "k", ")", ",", ":", "]", "=", "rpm", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"[ERROR] in BaseMultiagentAviary._preprocessAction()\"", ")", "\n", "exit", "(", ")", "\n", "", "", "return", "rpm", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._observationSpace": [[272, 303], ["gym.spaces.Dict", "gym.spaces.Dict", "print", "gym.spaces.Box", "range", "gym.spaces.Box", "range", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_observationSpace", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the observation space of the environment.\n\n        Returns\n        -------\n        dict[int, ndarray]\n            A Dict with NUM_DRONES entries indexed by Id in integer format,\n            each a Box() os shape (H,W,4) or (12,) depending on the observation type.\n\n        \"\"\"", "\n", "if", "self", ".", "OBS_TYPE", "==", "ObservationType", ".", "RGB", ":", "\n", "            ", "return", "spaces", ".", "Dict", "(", "{", "i", ":", "spaces", ".", "Box", "(", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "IMG_RES", "[", "1", "]", ",", "self", ".", "IMG_RES", "[", "0", "]", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "", "elif", "self", ".", "OBS_TYPE", "==", "ObservationType", ".", "KIN", ":", "\n", "############################################################", "\n", "#### OBS OF SIZE 20 (WITH QUATERNION AND RPMS)", "\n", "#### Observation vector ### X        Y        Z       Q1   Q2   Q3   Q4   R       P       Y       VX       VY       VZ       WX       WY       WZ       P0            P1            P2            P3", "\n", "# obs_lower_bound = np.array([-1,      -1,      0,      -1,  -1,  -1,  -1,  -1,     -1,     -1,     -1,      -1,      -1,      -1,      -1,      -1,      -1,           -1,           -1,           -1])", "\n", "# obs_upper_bound = np.array([1,       1,       1,      1,   1,   1,   1,   1,      1,      1,      1,       1,       1,       1,       1,       1,       1,            1,            1,            1])          ", "\n", "# return spaces.Box( low=obs_lower_bound, high=obs_upper_bound, dtype=np.float32 )", "\n", "############################################################", "\n", "#### OBS SPACE OF SIZE 12", "\n", "            ", "return", "spaces", ".", "Dict", "(", "{", "i", ":", "spaces", ".", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "0", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "\n", "high", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", ")", "\n", "############################################################", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseMultiagentAviary._observationSpace()\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._computeObs": [[306, 344], ["range", "numpy.zeros", "range", "print", "BaseMultiagentAviary.BaseMultiagentAviary._getDroneImages", "range", "BaseMultiagentAviary.BaseMultiagentAviary._clipAndNormalizeState", "numpy.hstack().reshape", "BaseMultiagentAviary.BaseMultiagentAviary._exportImage", "BaseMultiagentAviary.BaseMultiagentAviary._getDroneStateVector", "range", "numpy.hstack", "int", "str"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneImages", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._clipAndNormalizeState", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._exportImage", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary._getDroneStateVector"], ["", "", "def", "_computeObs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the current observation of the environment.\n\n        Returns\n        -------\n        dict[int, ndarray]\n            A Dict with NUM_DRONES entries indexed by Id in integer format,\n            each a Box() os shape (H,W,4) or (12,) depending on the observation type.\n\n        \"\"\"", "\n", "if", "self", ".", "OBS_TYPE", "==", "ObservationType", ".", "RGB", ":", "\n", "            ", "if", "self", ".", "step_counter", "%", "self", ".", "IMG_CAPTURE_FREQ", "==", "0", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "                    ", "self", ".", "rgb", "[", "i", "]", ",", "self", ".", "dep", "[", "i", "]", ",", "self", ".", "seg", "[", "i", "]", "=", "self", ".", "_getDroneImages", "(", "i", ",", "\n", "segmentation", "=", "False", "\n", ")", "\n", "#### Printing observation to PNG frames example ############", "\n", "if", "self", ".", "RECORD", ":", "\n", "                        ", "self", ".", "_exportImage", "(", "img_type", "=", "ImageType", ".", "RGB", ",", "\n", "img_input", "=", "self", ".", "rgb", "[", "i", "]", ",", "\n", "path", "=", "self", ".", "ONBOARD_IMG_PATH", "+", "\"drone_\"", "+", "str", "(", "i", ")", ",", "\n", "frame_num", "=", "int", "(", "self", ".", "step_counter", "/", "self", ".", "IMG_CAPTURE_FREQ", ")", "\n", ")", "\n", "", "", "", "return", "{", "i", ":", "self", ".", "rgb", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "", "elif", "self", ".", "OBS_TYPE", "==", "ObservationType", ".", "KIN", ":", "\n", "############################################################", "\n", "#### OBS OF SIZE 20 (WITH QUATERNION AND RPMS)", "\n", "# return {   i   : self._clipAndNormalizeState(self._getDroneStateVector(i)) for i in range(self.NUM_DRONES) }", "\n", "############################################################", "\n", "#### OBS SPACE OF SIZE 12", "\n", "            ", "obs_12", "=", "np", ".", "zeros", "(", "(", "self", ".", "NUM_DRONES", ",", "12", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", ":", "\n", "                ", "obs", "=", "self", ".", "_clipAndNormalizeState", "(", "self", ".", "_getDroneStateVector", "(", "i", ")", ")", "\n", "obs_12", "[", "i", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "obs", "[", "0", ":", "3", "]", ",", "obs", "[", "7", ":", "10", "]", ",", "obs", "[", "10", ":", "13", "]", ",", "obs", "[", "13", ":", "16", "]", "]", ")", ".", "reshape", "(", "12", ",", ")", "\n", "", "return", "{", "i", ":", "obs_12", "[", "i", ",", ":", "]", "for", "i", "in", "range", "(", "self", ".", "NUM_DRONES", ")", "}", "\n", "############################################################", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseMultiagentAviary._computeObs()\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.multi_agent_rl.BaseMultiagentAviary.BaseMultiagentAviary._clipAndNormalizeState": [[347, 361], ["None"], "methods", ["None"], ["", "", "def", "_clipAndNormalizeState", "(", "self", ",", "\n", "state", "\n", ")", ":", "\n", "        ", "\"\"\"Normalizes a drone's state to the [-1,1] range.\n\n        Must be implemented in a subclass.\n\n        Parameters\n        ----------\n        state : ndarray\n            Array containing the non-normalized state of a single drone.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl.__init__": [[18, 42], ["BaseControl.BaseControl._getURDFParameter", "BaseControl.BaseControl._getURDFParameter", "BaseControl.BaseControl.reset", "BaseControl.BaseControl._getURDFParameter"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl._getURDFParameter", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl._getURDFParameter", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl._getURDFParameter"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", ",", "\n", "g", ":", "float", "=", "9.8", "\n", ")", ":", "\n", "        ", "\"\"\"Common control classes __init__ method.\n\n        Parameters\n        ----------\n        drone_model : DroneModel\n            The type of drone to control (detailed in an .urdf file in folder `assets`).\n        g : float, optional\n            The gravitational acceleration in m/s^2.\n\n        \"\"\"", "\n", "#### Set general use constants #############################", "\n", "self", ".", "DRONE_MODEL", "=", "drone_model", "\n", "\"\"\"DroneModel: The type of drone to control.\"\"\"", "\n", "self", ".", "GRAVITY", "=", "g", "*", "self", ".", "_getURDFParameter", "(", "'m'", ")", "\n", "\"\"\"float: The gravitational force (M*g) acting on each drone.\"\"\"", "\n", "self", ".", "KF", "=", "self", ".", "_getURDFParameter", "(", "'kf'", ")", "\n", "\"\"\"float: The coefficient converting RPMs into thrust.\"\"\"", "\n", "self", ".", "KM", "=", "self", ".", "_getURDFParameter", "(", "'km'", ")", "\n", "\"\"\"float: The coefficient converting RPMs into torque.\"\"\"", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl.reset": [[45, 52], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the control classes.\n\n        A general use counter is set to zero.\n\n        \"\"\"", "\n", "self", ".", "control_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl.computeControlFromState": [[55, 93], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "BaseControl.BaseControl.computeControl"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.computeControl"], ["", "def", "computeControlFromState", "(", "self", ",", "\n", "control_timestep", ",", "\n", "state", ",", "\n", "target_pos", ",", "\n", "target_rpy", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_vel", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_rpy_rates", "=", "np", ".", "zeros", "(", "3", ")", "\n", ")", ":", "\n", "        ", "\"\"\"Interface method using `computeControl`.\n\n        It can be used to compute a control action directly from the value of key \"state\"\n        in the `obs` returned by a call to BaseAviary.step().\n\n        Parameters\n        ----------\n        control_timestep : float\n            The time step at which control is computed.\n        state : ndarray\n            (20,)-shaped array of floats containing the current state of the drone.\n        target_pos : ndarray\n            (3,1)-shaped array of floats containing the desired position.\n        target_rpy : ndarray, optional\n            (3,1)-shaped array of floats containing the desired orientation as roll, pitch, yaw.\n        target_vel : ndarray, optional\n            (3,1)-shaped array of floats containing the desired velocity.\n        target_rpy_rates : ndarray, optional\n            (3,1)-shaped array of floats containing the desired roll, pitch, and yaw rates.\n\n        \"\"\"", "\n", "return", "self", ".", "computeControl", "(", "control_timestep", "=", "control_timestep", ",", "\n", "cur_pos", "=", "state", "[", "0", ":", "3", "]", ",", "\n", "cur_quat", "=", "state", "[", "3", ":", "7", "]", ",", "\n", "cur_vel", "=", "state", "[", "10", ":", "13", "]", ",", "\n", "cur_ang_vel", "=", "state", "[", "13", ":", "16", "]", ",", "\n", "target_pos", "=", "target_pos", ",", "\n", "target_rpy", "=", "target_rpy", ",", "\n", "target_vel", "=", "target_vel", ",", "\n", "target_rpy_rates", "=", "target_rpy_rates", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl.computeControl": [[97, 135], ["numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "computeControl", "(", "self", ",", "\n", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "cur_vel", ",", "\n", "cur_ang_vel", ",", "\n", "target_pos", ",", "\n", "target_rpy", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_vel", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_rpy_rates", "=", "np", ".", "zeros", "(", "3", ")", "\n", ")", ":", "\n", "        ", "\"\"\"Abstract method to compute the control action for a single drone.\n\n        It must be implemented by each subclass of `BaseControl`.\n\n        Parameters\n        ----------\n        control_timestep : float\n            The time step at which control is computed.\n        cur_pos : ndarray\n            (3,1)-shaped array of floats containing the current position.\n        cur_quat : ndarray\n            (4,1)-shaped array of floats containing the current orientation as a quaternion.\n        cur_vel : ndarray\n            (3,1)-shaped array of floats containing the current velocity.\n        cur_ang_vel : ndarray\n            (3,1)-shaped array of floats containing the current angular velocity.\n        target_pos : ndarray\n            (3,1)-shaped array of floats containing the desired position.\n        target_rpy : ndarray, optional\n            (3,1)-shaped array of floats containing the desired orientation as roll, pitch, yaw.\n        target_vel : ndarray, optional\n            (3,1)-shaped array of floats containing the desired velocity.\n        target_rpy_rates : ndarray, optional\n            (3,1)-shaped array of floats containing the desired roll, pitch, and yaw rates.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl.setPIDCoefficients": [[138, 178], ["all", "print", "exit", "hasattr"], "methods", ["None"], ["", "def", "setPIDCoefficients", "(", "self", ",", "\n", "p_coeff_pos", "=", "None", ",", "\n", "i_coeff_pos", "=", "None", ",", "\n", "d_coeff_pos", "=", "None", ",", "\n", "p_coeff_att", "=", "None", ",", "\n", "i_coeff_att", "=", "None", ",", "\n", "d_coeff_att", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Sets the coefficients of a PID controller.\n\n        This method throws an error message and exist is the coefficients\n        were not initialized (e.g. when the controller is not a PID one).\n\n        Parameters\n        ----------\n        p_coeff_pos : ndarray, optional\n            (3,1)-shaped array of floats containing the position control proportional coefficients.\n        i_coeff_pos : ndarray, optional\n            (3,1)-shaped array of floats containing the position control integral coefficients.\n        d_coeff_pos : ndarray, optional\n            (3,1)-shaped array of floats containing the position control derivative coefficients.\n        p_coeff_att : ndarray, optional\n            (3,1)-shaped array of floats containing the attitude control proportional coefficients.\n        i_coeff_att : ndarray, optional\n            (3,1)-shaped array of floats containing the attitude control integral coefficients.\n        d_coeff_att : ndarray, optional\n            (3,1)-shaped array of floats containing the attitude control derivative coefficients.\n\n        \"\"\"", "\n", "ATTR_LIST", "=", "[", "'P_COEFF_FOR'", ",", "'I_COEFF_FOR'", ",", "'D_COEFF_FOR'", ",", "'P_COEFF_TOR'", ",", "'I_COEFF_TOR'", ",", "'D_COEFF_TOR'", "]", "\n", "if", "not", "all", "(", "hasattr", "(", "self", ",", "attr", ")", "for", "attr", "in", "ATTR_LIST", ")", ":", "\n", "            ", "print", "(", "\"[ERROR] in BaseControl.setPIDCoefficients(), not all PID coefficients exist as attributes in the instantiated control class.\"", ")", "\n", "exit", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "P_COEFF_FOR", "=", "self", ".", "P_COEFF_FOR", "if", "p_coeff_pos", "is", "None", "else", "p_coeff_pos", "\n", "self", ".", "I_COEFF_FOR", "=", "self", ".", "I_COEFF_FOR", "if", "i_coeff_pos", "is", "None", "else", "i_coeff_pos", "\n", "self", ".", "D_COEFF_FOR", "=", "self", ".", "D_COEFF_FOR", "if", "d_coeff_pos", "is", "None", "else", "d_coeff_pos", "\n", "self", ".", "P_COEFF_TOR", "=", "self", ".", "P_COEFF_TOR", "if", "p_coeff_att", "is", "None", "else", "p_coeff_att", "\n", "self", ".", "I_COEFF_TOR", "=", "self", ".", "I_COEFF_TOR", "if", "i_coeff_att", "is", "None", "else", "i_coeff_att", "\n", "self", ".", "D_COEFF_TOR", "=", "self", ".", "D_COEFF_TOR", "if", "d_coeff_att", "is", "None", "else", "d_coeff_att", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl._getURDFParameter": [[181, 217], ["pkg_resources.resource_filename", "xml.parse().getroot", "float", "xml.parse", "float", "float", "float", "float", "[].attrib[].split"], "methods", ["None"], ["", "", "def", "_getURDFParameter", "(", "self", ",", "\n", "parameter_name", ":", "str", "\n", ")", ":", "\n", "        ", "\"\"\"Reads a parameter from a drone's URDF file.\n\n        This method is nothing more than a custom XML parser for the .urdf\n        files in folder `assets/`.\n\n        Parameters\n        ----------\n        parameter_name : str\n            The name of the parameter to read.\n\n        Returns\n        -------\n        float\n            The value of the parameter.\n\n        \"\"\"", "\n", "#### Get the XML tree of the drone model to control ########", "\n", "URDF", "=", "self", ".", "DRONE_MODEL", ".", "value", "+", "\".urdf\"", "\n", "path", "=", "pkg_resources", ".", "resource_filename", "(", "'gym_pybullet_drones'", ",", "'assets/'", "+", "URDF", ")", "\n", "URDF_TREE", "=", "etxml", ".", "parse", "(", "path", ")", ".", "getroot", "(", ")", "\n", "#### Find and return the desired parameter #################", "\n", "if", "parameter_name", "==", "'m'", ":", "\n", "            ", "return", "float", "(", "URDF_TREE", "[", "1", "]", "[", "0", "]", "[", "1", "]", ".", "attrib", "[", "'value'", "]", ")", "\n", "", "elif", "parameter_name", "in", "[", "'ixx'", ",", "'iyy'", ",", "'izz'", "]", ":", "\n", "            ", "return", "float", "(", "URDF_TREE", "[", "1", "]", "[", "0", "]", "[", "2", "]", ".", "attrib", "[", "parameter_name", "]", ")", "\n", "", "elif", "parameter_name", "in", "[", "'arm'", ",", "'thrust2weight'", ",", "'kf'", ",", "'km'", ",", "'max_speed_kmh'", ",", "'gnd_eff_coeff'", "'prop_radius'", ",", "'drag_coeff_xy'", ",", "'drag_coeff_z'", ",", "'dw_coeff_1'", ",", "'dw_coeff_2'", ",", "'dw_coeff_3'", "]", ":", "\n", "            ", "return", "float", "(", "URDF_TREE", "[", "0", "]", ".", "attrib", "[", "parameter_name", "]", ")", "\n", "", "elif", "parameter_name", "in", "[", "'length'", ",", "'radius'", "]", ":", "\n", "            ", "return", "float", "(", "URDF_TREE", "[", "1", "]", "[", "2", "]", "[", "1", "]", "[", "0", "]", ".", "attrib", "[", "parameter_name", "]", ")", "\n", "", "elif", "parameter_name", "==", "'collision_z_offset'", ":", "\n", "            ", "COLLISION_SHAPE_OFFSETS", "=", "[", "float", "(", "s", ")", "for", "s", "in", "URDF_TREE", "[", "1", "]", "[", "2", "]", "[", "0", "]", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", "' '", ")", "]", "\n", "return", "COLLISION_SHAPE_OFFSETS", "[", "2", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.DSLPIDControl.DSLPIDControl.__init__": [[19, 52], ["gym_pybullet_drones.control.BaseControl.BaseControl.__init__", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "DSLPIDControl.DSLPIDControl.reset", "print", "exit", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", ",", "\n", "g", ":", "float", "=", "9.8", "\n", ")", ":", "\n", "        ", "\"\"\"Common control classes __init__ method.\n\n        Parameters\n        ----------\n        drone_model : DroneModel\n            The type of drone to control (detailed in an .urdf file in folder `assets`).\n        g : float, optional\n            The gravitational acceleration in m/s^2.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "g", "=", "g", ")", "\n", "if", "self", ".", "DRONE_MODEL", "!=", "DroneModel", ".", "CF2X", "and", "self", ".", "DRONE_MODEL", "!=", "DroneModel", ".", "CF2P", ":", "\n", "            ", "print", "(", "\"[ERROR] in DSLPIDControl.__init__(), DSLPIDControl requires DroneModel.CF2X or DroneModel.CF2P\"", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "P_COEFF_FOR", "=", "np", ".", "array", "(", "[", ".4", ",", ".4", ",", "1.25", "]", ")", "\n", "self", ".", "I_COEFF_FOR", "=", "np", ".", "array", "(", "[", ".05", ",", ".05", ",", ".05", "]", ")", "\n", "self", ".", "D_COEFF_FOR", "=", "np", ".", "array", "(", "[", ".2", ",", ".2", ",", ".5", "]", ")", "\n", "self", ".", "P_COEFF_TOR", "=", "np", ".", "array", "(", "[", "70000.", ",", "70000.", ",", "60000.", "]", ")", "\n", "self", ".", "I_COEFF_TOR", "=", "np", ".", "array", "(", "[", ".0", ",", ".0", ",", "500.", "]", ")", "\n", "self", ".", "D_COEFF_TOR", "=", "np", ".", "array", "(", "[", "20000.", ",", "20000.", ",", "12000.", "]", ")", "\n", "self", ".", "PWM2RPM_SCALE", "=", "0.2685", "\n", "self", ".", "PWM2RPM_CONST", "=", "4070.3", "\n", "self", ".", "MIN_PWM", "=", "20000", "\n", "self", ".", "MAX_PWM", "=", "65535", "\n", "if", "self", ".", "DRONE_MODEL", "==", "DroneModel", ".", "CF2X", ":", "\n", "            ", "self", ".", "MIXER_MATRIX", "=", "np", ".", "array", "(", "[", "[", ".5", ",", "-", ".5", ",", "-", "1", "]", ",", "[", ".5", ",", ".5", ",", "1", "]", ",", "[", "-", ".5", ",", ".5", ",", "-", "1", "]", ",", "[", "-", ".5", ",", "-", ".5", ",", "1", "]", "]", ")", "\n", "", "elif", "self", ".", "DRONE_MODEL", "==", "DroneModel", ".", "CF2P", ":", "\n", "            ", "self", ".", "MIXER_MATRIX", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", ",", "-", "1", "]", ",", "[", "+", "1", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "-", "1", "]", ",", "[", "-", "1", ",", "0", ",", "1", "]", "]", ")", "\n", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.DSLPIDControl.DSLPIDControl.reset": [[55, 69], ["super().reset", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the control classes.\n\n        The previous step's and integral errors for both position and attitude are set to zero.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "reset", "(", ")", "\n", "#### Store the last roll, pitch, and yaw ###################", "\n", "self", ".", "last_rpy", "=", "np", ".", "zeros", "(", "3", ")", "\n", "#### Initialized PID control variables #####################", "\n", "self", ".", "last_pos_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "integral_pos_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "last_rpy_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "integral_rpy_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.DSLPIDControl.DSLPIDControl.computeControl": [[72, 136], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "DSLPIDControl.DSLPIDControl._dslPIDPositionControl", "DSLPIDControl.DSLPIDControl._dslPIDAttitudeControl", "pybullet.getEulerFromQuaternion"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.DSLPIDControl.DSLPIDControl._dslPIDPositionControl", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.DSLPIDControl.DSLPIDControl._dslPIDAttitudeControl"], ["", "def", "computeControl", "(", "self", ",", "\n", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "cur_vel", ",", "\n", "cur_ang_vel", ",", "\n", "target_pos", ",", "\n", "target_rpy", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_vel", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_rpy_rates", "=", "np", ".", "zeros", "(", "3", ")", "\n", ")", ":", "\n", "        ", "\"\"\"Computes the PID control action (as RPMs) for a single drone.\n\n        This methods sequentially calls `_dslPIDPositionControl()` and `_dslPIDAttitudeControl()`.\n        Parameter `cur_ang_vel` is unused.\n\n        Parameters\n        ----------\n        control_timestep : float\n            The time step at which control is computed.\n        cur_pos : ndarray\n            (3,1)-shaped array of floats containing the current position.\n        cur_quat : ndarray\n            (4,1)-shaped array of floats containing the current orientation as a quaternion.\n        cur_vel : ndarray\n            (3,1)-shaped array of floats containing the current velocity.\n        cur_ang_vel : ndarray\n            (3,1)-shaped array of floats containing the current angular velocity.\n        target_pos : ndarray\n            (3,1)-shaped array of floats containing the desired position.\n        target_rpy : ndarray, optional\n            (3,1)-shaped array of floats containing the desired orientation as roll, pitch, yaw.\n        target_vel : ndarray, optional\n            (3,1)-shaped array of floats containing the desired velocity.\n        target_rpy_rates : ndarray, optional\n            (3,1)-shaped array of floats containing the desired roll, pitch, and yaw rates.\n\n        Returns\n        -------\n        ndarray\n            (4,1)-shaped array of integers containing the RPMs to apply to each of the 4 motors.\n        ndarray\n            (3,1)-shaped array of floats containing the current XYZ position error.\n        float\n            The current yaw error.\n\n        \"\"\"", "\n", "self", ".", "control_counter", "+=", "1", "\n", "thrust", ",", "computed_target_rpy", ",", "pos_e", "=", "self", ".", "_dslPIDPositionControl", "(", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "cur_vel", ",", "\n", "target_pos", ",", "\n", "target_rpy", ",", "\n", "target_vel", "\n", ")", "\n", "rpm", "=", "self", ".", "_dslPIDAttitudeControl", "(", "control_timestep", ",", "\n", "thrust", ",", "\n", "cur_quat", ",", "\n", "computed_target_rpy", ",", "\n", "target_rpy_rates", "\n", ")", "\n", "cur_rpy", "=", "p", ".", "getEulerFromQuaternion", "(", "cur_quat", ")", "\n", "return", "rpm", ",", "pos_e", ",", "computed_target_rpy", "[", "2", "]", "-", "cur_rpy", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.DSLPIDControl.DSLPIDControl._dslPIDPositionControl": [[139, 199], ["numpy.array().reshape", "numpy.clip", "numpy.clip", "max", "numpy.array", "numpy.cross", "numpy.vstack().transpose", "scipy.spatial.transform.Rotation.from_matrix().as_euler", "numpy.any", "numpy.array", "numpy.dot", "numpy.linalg.norm", "numpy.cross", "numpy.linalg.norm", "print", "numpy.array", "numpy.multiply", "math.sqrt", "math.cos", "math.sin", "numpy.cross", "numpy.vstack", "scipy.spatial.transform.Rotation.from_matrix", "numpy.abs", "pybullet.getMatrixFromQuaternion", "numpy.multiply", "numpy.multiply"], "methods", ["None"], ["", "def", "_dslPIDPositionControl", "(", "self", ",", "\n", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "cur_vel", ",", "\n", "target_pos", ",", "\n", "target_rpy", ",", "\n", "target_vel", "\n", ")", ":", "\n", "        ", "\"\"\"DSL's CF2.x PID position control.\n\n        Parameters\n        ----------\n        control_timestep : float\n            The time step at which control is computed.\n        cur_pos : ndarray\n            (3,1)-shaped array of floats containing the current position.\n        cur_quat : ndarray\n            (4,1)-shaped array of floats containing the current orientation as a quaternion.\n        cur_vel : ndarray\n            (3,1)-shaped array of floats containing the current velocity.\n        target_pos : ndarray\n            (3,1)-shaped array of floats containing the desired position.\n        target_rpy : ndarray\n            (3,1)-shaped array of floats containing the desired orientation as roll, pitch, yaw.\n        target_vel : ndarray\n            (3,1)-shaped array of floats containing the desired velocity.\n\n        Returns\n        -------\n        float\n            The target thrust along the drone z-axis.\n        ndarray\n            (3,1)-shaped array of floats containing the target roll, pitch, and yaw.\n        float\n            The current position error.\n\n        \"\"\"", "\n", "cur_rotation", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "cur_quat", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "pos_e", "=", "target_pos", "-", "cur_pos", "\n", "vel_e", "=", "target_vel", "-", "cur_vel", "\n", "self", ".", "integral_pos_e", "=", "self", ".", "integral_pos_e", "+", "pos_e", "*", "control_timestep", "\n", "self", ".", "integral_pos_e", "=", "np", ".", "clip", "(", "self", ".", "integral_pos_e", ",", "-", "2.", ",", "2.", ")", "\n", "self", ".", "integral_pos_e", "[", "2", "]", "=", "np", ".", "clip", "(", "self", ".", "integral_pos_e", "[", "2", "]", ",", "-", "0.15", ",", ".15", ")", "\n", "#### PID target thrust #####################################", "\n", "target_thrust", "=", "np", ".", "multiply", "(", "self", ".", "P_COEFF_FOR", ",", "pos_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "I_COEFF_FOR", ",", "self", ".", "integral_pos_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "D_COEFF_FOR", ",", "vel_e", ")", "+", "np", ".", "array", "(", "[", "0", ",", "0", ",", "self", ".", "GRAVITY", "]", ")", "\n", "scalar_thrust", "=", "max", "(", "0.", ",", "np", ".", "dot", "(", "target_thrust", ",", "cur_rotation", "[", ":", ",", "2", "]", ")", ")", "\n", "thrust", "=", "(", "math", ".", "sqrt", "(", "scalar_thrust", "/", "(", "4", "*", "self", ".", "KF", ")", ")", "-", "self", ".", "PWM2RPM_CONST", ")", "/", "self", ".", "PWM2RPM_SCALE", "\n", "target_z_ax", "=", "target_thrust", "/", "np", ".", "linalg", ".", "norm", "(", "target_thrust", ")", "\n", "target_x_c", "=", "np", ".", "array", "(", "[", "math", ".", "cos", "(", "target_rpy", "[", "2", "]", ")", ",", "math", ".", "sin", "(", "target_rpy", "[", "2", "]", ")", ",", "0", "]", ")", "\n", "target_y_ax", "=", "np", ".", "cross", "(", "target_z_ax", ",", "target_x_c", ")", "/", "np", ".", "linalg", ".", "norm", "(", "np", ".", "cross", "(", "target_z_ax", ",", "target_x_c", ")", ")", "\n", "target_x_ax", "=", "np", ".", "cross", "(", "target_y_ax", ",", "target_z_ax", ")", "\n", "target_rotation", "=", "(", "np", ".", "vstack", "(", "[", "target_x_ax", ",", "target_y_ax", ",", "target_z_ax", "]", ")", ")", ".", "transpose", "(", ")", "\n", "#### Target rotation #######################################", "\n", "target_euler", "=", "(", "Rotation", ".", "from_matrix", "(", "target_rotation", ")", ")", ".", "as_euler", "(", "'XYZ'", ",", "degrees", "=", "False", ")", "\n", "if", "np", ".", "any", "(", "np", ".", "abs", "(", "target_euler", ")", ">", "math", ".", "pi", ")", ":", "\n", "            ", "print", "(", "\"\\n[ERROR] ctrl it\"", ",", "self", ".", "control_counter", ",", "\"in Control._dslPIDPositionControl(), values outside range [-pi,pi]\"", ")", "\n", "", "return", "thrust", ",", "target_euler", ",", "pos_e", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.DSLPIDControl.DSLPIDControl._dslPIDAttitudeControl": [[202, 250], ["numpy.array().reshape", "numpy.array", "scipy.spatial.transform.Rotation.from_euler().as_quat", "scipy.spatial.transform.Rotation.from_quat().as_matrix", "numpy.array", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "pybullet.getEulerFromQuaternion", "numpy.dot", "numpy.dot", "numpy.multiply", "numpy.dot", "numpy.array", "scipy.spatial.transform.Rotation.from_euler", "scipy.spatial.transform.Rotation.from_quat", "scipy.spatial.transform.Rotation.from_quat().as_matrix.transpose", "numpy.array().reshape.transpose", "numpy.multiply", "pybullet.getMatrixFromQuaternion", "numpy.multiply"], "methods", ["None"], ["", "def", "_dslPIDAttitudeControl", "(", "self", ",", "\n", "control_timestep", ",", "\n", "thrust", ",", "\n", "cur_quat", ",", "\n", "target_euler", ",", "\n", "target_rpy_rates", "\n", ")", ":", "\n", "        ", "\"\"\"DSL's CF2.x PID attitude control.\n\n        Parameters\n        ----------\n        control_timestep : float\n            The time step at which control is computed.\n        thrust : float\n            The target thrust along the drone z-axis.\n        cur_quat : ndarray\n            (4,1)-shaped array of floats containing the current orientation as a quaternion.\n        target_euler : ndarray\n            (3,1)-shaped array of floats containing the computed target Euler angles.\n        target_rpy_rates : ndarray\n            (3,1)-shaped array of floats containing the desired roll, pitch, and yaw rates.\n\n        Returns\n        -------\n        ndarray\n            (4,1)-shaped array of integers containing the RPMs to apply to each of the 4 motors.\n\n        \"\"\"", "\n", "cur_rotation", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "cur_quat", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "cur_rpy", "=", "np", ".", "array", "(", "p", ".", "getEulerFromQuaternion", "(", "cur_quat", ")", ")", "\n", "target_quat", "=", "(", "Rotation", ".", "from_euler", "(", "'XYZ'", ",", "target_euler", ",", "degrees", "=", "False", ")", ")", ".", "as_quat", "(", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "target_quat", "\n", "target_rotation", "=", "(", "Rotation", ".", "from_quat", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ")", ")", ".", "as_matrix", "(", ")", "\n", "rot_matrix_e", "=", "np", ".", "dot", "(", "(", "target_rotation", ".", "transpose", "(", ")", ")", ",", "cur_rotation", ")", "-", "np", ".", "dot", "(", "cur_rotation", ".", "transpose", "(", ")", ",", "target_rotation", ")", "\n", "rot_e", "=", "np", ".", "array", "(", "[", "rot_matrix_e", "[", "2", ",", "1", "]", ",", "rot_matrix_e", "[", "0", ",", "2", "]", ",", "rot_matrix_e", "[", "1", ",", "0", "]", "]", ")", "\n", "rpy_rates_e", "=", "target_rpy_rates", "-", "(", "cur_rpy", "-", "self", ".", "last_rpy", ")", "/", "control_timestep", "\n", "self", ".", "last_rpy", "=", "cur_rpy", "\n", "self", ".", "integral_rpy_e", "=", "self", ".", "integral_rpy_e", "-", "rot_e", "*", "control_timestep", "\n", "self", ".", "integral_rpy_e", "=", "np", ".", "clip", "(", "self", ".", "integral_rpy_e", ",", "-", "1500.", ",", "1500.", ")", "\n", "self", ".", "integral_rpy_e", "[", "0", ":", "2", "]", "=", "np", ".", "clip", "(", "self", ".", "integral_rpy_e", "[", "0", ":", "2", "]", ",", "-", "1.", ",", "1.", ")", "\n", "#### PID target torques ####################################", "\n", "target_torques", "=", "-", "np", ".", "multiply", "(", "self", ".", "P_COEFF_TOR", ",", "rot_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "D_COEFF_TOR", ",", "rpy_rates_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "I_COEFF_TOR", ",", "self", ".", "integral_rpy_e", ")", "\n", "target_torques", "=", "np", ".", "clip", "(", "target_torques", ",", "-", "3200", ",", "3200", ")", "\n", "pwm", "=", "thrust", "+", "np", ".", "dot", "(", "self", ".", "MIXER_MATRIX", ",", "target_torques", ")", "\n", "pwm", "=", "np", ".", "clip", "(", "pwm", ",", "self", ".", "MIN_PWM", ",", "self", ".", "MAX_PWM", ")", "\n", "return", "self", ".", "PWM2RPM_SCALE", "*", "pwm", "+", "self", ".", "PWM2RPM_CONST", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.DSLPIDControl.DSLPIDControl._one23DInterface": [[253, 278], ["len", "numpy.clip", "numpy.array", "numpy.repeat", "numpy.hstack", "print", "exit", "numpy.sqrt", "numpy.flip", "numpy.array"], "methods", ["None"], ["", "def", "_one23DInterface", "(", "self", ",", "\n", "thrust", "\n", ")", ":", "\n", "        ", "\"\"\"Utility function interfacing 1, 2, or 3D thrust input use cases.\n\n        Parameters\n        ----------\n        thrust : ndarray\n            Array of floats of length 1, 2, or 4 containing a desired thrust input.\n\n        Returns\n        -------\n        ndarray\n            (4,1)-shaped array of integers containing the PWM (not RPMs) to apply to each of the 4 motors.\n\n        \"\"\"", "\n", "DIM", "=", "len", "(", "np", ".", "array", "(", "thrust", ")", ")", "\n", "pwm", "=", "np", ".", "clip", "(", "(", "np", ".", "sqrt", "(", "np", ".", "array", "(", "thrust", ")", "/", "(", "self", ".", "KF", "*", "(", "4", "/", "DIM", ")", ")", ")", "-", "self", ".", "PWM2RPM_CONST", ")", "/", "self", ".", "PWM2RPM_SCALE", ",", "self", ".", "MIN_PWM", ",", "self", ".", "MAX_PWM", ")", "\n", "if", "DIM", "in", "[", "1", ",", "4", "]", ":", "\n", "            ", "return", "np", ".", "repeat", "(", "pwm", ",", "4", "/", "DIM", ")", "\n", "", "elif", "DIM", "==", "2", ":", "\n", "            ", "return", "np", ".", "hstack", "(", "[", "pwm", ",", "np", ".", "flip", "(", "pwm", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[ERROR] in DSLPIDControl._one23DInterface()\"", ")", "\n", "exit", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.__init__": [[17, 52], ["gym_pybullet_drones.control.BaseControl.BaseControl.__init__", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "SimplePIDControl.SimplePIDControl._getURDFParameter", "SimplePIDControl.SimplePIDControl._getURDFParameter", "numpy.sqrt", "numpy.array", "numpy.linalg.inv", "numpy.array", "SimplePIDControl.SimplePIDControl.reset", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl._getURDFParameter", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.BaseControl.BaseControl._getURDFParameter", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset"], ["def", "__init__", "(", "self", ",", "\n", "drone_model", ":", "DroneModel", ",", "\n", "g", ":", "float", "=", "9.8", "\n", ")", ":", "\n", "        ", "\"\"\"Common control classes __init__ method.\n\n        Parameters\n        ----------\n        drone_model : DroneModel\n            The type of drone to control (detailed in an .urdf file in folder `assets`).\n        g : float, optional\n            The gravitational acceleration in m/s^2.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "drone_model", "=", "drone_model", ",", "g", "=", "g", ")", "\n", "if", "self", ".", "DRONE_MODEL", "!=", "DroneModel", ".", "HB", ":", "\n", "            ", "print", "(", "\"[ERROR] in SimplePIDControl.__init__(), SimplePIDControl requires DroneModel.HB\"", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "P_COEFF_FOR", "=", "np", ".", "array", "(", "[", ".1", ",", ".1", ",", ".2", "]", ")", "\n", "self", ".", "I_COEFF_FOR", "=", "np", ".", "array", "(", "[", ".0001", ",", ".0001", ",", ".0001", "]", ")", "\n", "self", ".", "D_COEFF_FOR", "=", "np", ".", "array", "(", "[", ".3", ",", ".3", ",", ".4", "]", ")", "\n", "self", ".", "P_COEFF_TOR", "=", "np", ".", "array", "(", "[", ".3", ",", ".3", ",", ".05", "]", ")", "\n", "self", ".", "I_COEFF_TOR", "=", "np", ".", "array", "(", "[", ".0001", ",", ".0001", ",", ".0001", "]", ")", "\n", "self", ".", "D_COEFF_TOR", "=", "np", ".", "array", "(", "[", ".3", ",", ".3", ",", ".5", "]", ")", "\n", "self", ".", "MAX_ROLL_PITCH", "=", "np", ".", "pi", "/", "6", "\n", "self", ".", "L", "=", "self", ".", "_getURDFParameter", "(", "'arm'", ")", "\n", "self", ".", "THRUST2WEIGHT_RATIO", "=", "self", ".", "_getURDFParameter", "(", "'thrust2weight'", ")", "\n", "self", ".", "MAX_RPM", "=", "np", ".", "sqrt", "(", "(", "self", ".", "THRUST2WEIGHT_RATIO", "*", "self", ".", "GRAVITY", ")", "/", "(", "4", "*", "self", ".", "KF", ")", ")", "\n", "self", ".", "MAX_THRUST", "=", "(", "4", "*", "self", ".", "KF", "*", "self", ".", "MAX_RPM", "**", "2", ")", "\n", "self", ".", "MAX_XY_TORQUE", "=", "(", "self", ".", "L", "*", "self", ".", "KF", "*", "self", ".", "MAX_RPM", "**", "2", ")", "\n", "self", ".", "MAX_Z_TORQUE", "=", "(", "2", "*", "self", ".", "KM", "*", "self", ".", "MAX_RPM", "**", "2", ")", "\n", "self", ".", "A", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", ",", "-", "1", "]", ",", "[", "-", "1", ",", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", ",", "1", "]", "]", ")", "\n", "self", ".", "INV_A", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "A", ")", "\n", "self", ".", "B_COEFF", "=", "np", ".", "array", "(", "[", "1", "/", "self", ".", "KF", ",", "1", "/", "(", "self", ".", "KF", "*", "self", ".", "L", ")", ",", "1", "/", "(", "self", ".", "KF", "*", "self", ".", "L", ")", ",", "1", "/", "self", ".", "KM", "]", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.reset": [[55, 67], ["super().reset", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the control classes.\n\n        The previous step's and integral errors for both position and attitude are set to zero.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "reset", "(", ")", "\n", "#### Initialized PID control variables #####################", "\n", "self", ".", "last_pos_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "integral_pos_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "last_rpy_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "self", ".", "integral_rpy_e", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl.computeControl": [[70, 132], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "SimplePIDControl.SimplePIDControl._simplePIDPositionControl", "SimplePIDControl.SimplePIDControl._simplePIDAttitudeControl", "pybullet.getEulerFromQuaternion", "print"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl._simplePIDPositionControl", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl._simplePIDAttitudeControl"], ["", "def", "computeControl", "(", "self", ",", "\n", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "cur_vel", ",", "\n", "cur_ang_vel", ",", "\n", "target_pos", ",", "\n", "target_rpy", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_vel", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_rpy_rates", "=", "np", ".", "zeros", "(", "3", ")", "\n", ")", ":", "\n", "        ", "\"\"\"Computes the PID control action (as RPMs) for a single drone.\n\n        This methods sequentially calls `_simplePIDPositionControl()` and `_simplePIDAttitudeControl()`.\n        Parameters `cur_ang_vel`, `target_rpy`, `target_vel`, and `target_rpy_rates` are unused.\n\n        Parameters\n        ----------\n        control_timestep : float\n            The time step at which control is computed.\n        cur_pos : ndarray\n            (3,1)-shaped array of floats containing the current position.\n        cur_quat : ndarray\n            (4,1)-shaped array of floats containing the current orientation as a quaternion.\n        cur_vel : ndarray\n            (3,1)-shaped array of floats containing the current velocity.\n        cur_ang_vel : ndarray\n            (3,1)-shaped array of floats containing the current angular velocity.\n        target_pos : ndarray\n            (3,1)-shaped array of floats containing the desired position.\n        target_rpy : ndarray, optional\n            (3,1)-shaped array of floats containing the desired orientation as roll, pitch, yaw.\n        target_vel : ndarray, optional\n            (3,1)-shaped array of floats containing the desired velocity.\n        target_rpy_rates : ndarray, optional\n            (3,1)-shaped array of floats containing the the desired roll, pitch, and yaw rates.\n\n        Returns\n        -------\n        ndarray\n            (4,1)-shaped array of integers containing the RPMs to apply to each of the 4 motors.\n        ndarray\n            (3,1)-shaped array of floats containing the current XYZ position error.\n        float\n            The current yaw error.\n\n        \"\"\"", "\n", "self", ".", "control_counter", "+=", "1", "\n", "if", "target_rpy", "[", "2", "]", "!=", "0", ":", "\n", "            ", "print", "(", "\"\\n[WARNING] ctrl it\"", ",", "self", ".", "control_counter", ",", "\"in SimplePIDControl.computeControl(), desired yaw={:.0f}deg but locked to 0. for DroneModel.HB\"", ".", "format", "(", "target_rpy", "[", "2", "]", "*", "(", "180", "/", "np", ".", "pi", ")", ")", ")", "\n", "", "thrust", ",", "computed_target_rpy", ",", "pos_e", "=", "self", ".", "_simplePIDPositionControl", "(", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "target_pos", "\n", ")", "\n", "rpm", "=", "self", ".", "_simplePIDAttitudeControl", "(", "control_timestep", ",", "\n", "thrust", ",", "\n", "cur_quat", ",", "\n", "computed_target_rpy", "\n", ")", "\n", "cur_rpy", "=", "p", ".", "getEulerFromQuaternion", "(", "cur_quat", ")", "\n", "return", "rpm", ",", "pos_e", ",", "computed_target_rpy", "[", "2", "]", "-", "cur_rpy", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl._simplePIDPositionControl": [[135, 186], ["numpy.zeros", "numpy.sign", "numpy.arcsin", "numpy.arctan2", "numpy.clip", "numpy.clip", "numpy.array().reshape", "numpy.dot", "numpy.array().reshape", "numpy.multiply", "numpy.multiply", "numpy.linalg.norm", "numpy.array", "numpy.array", "numpy.array", "numpy.multiply", "pybullet.getMatrixFromQuaternion"], "methods", ["None"], ["", "def", "_simplePIDPositionControl", "(", "self", ",", "\n", "control_timestep", ",", "\n", "cur_pos", ",", "\n", "cur_quat", ",", "\n", "target_pos", "\n", ")", ":", "\n", "        ", "\"\"\"Simple PID position control (with yaw fixed to 0).\n\n        Parameters\n        ----------\n        control_timestep : float\n            The time step at which control is computed.\n        cur_pos : ndarray\n            (3,1)-shaped array of floats containing the current position.\n        cur_quat : ndarray\n            (4,1)-shaped array of floats containing the current orientation as a quaternion.\n        target_pos : ndarray\n            (3,1)-shaped array of floats containing the desired position.\n\n        Returns\n        -------\n        float\n            The target thrust along the drone z-axis.\n        ndarray\n            (3,1)-shaped array of floats containing the target roll, pitch, and yaw.\n        float\n            The current position error.\n\n        \"\"\"", "\n", "pos_e", "=", "target_pos", "-", "np", ".", "array", "(", "cur_pos", ")", ".", "reshape", "(", "3", ")", "\n", "d_pos_e", "=", "(", "pos_e", "-", "self", ".", "last_pos_e", ")", "/", "control_timestep", "\n", "self", ".", "last_pos_e", "=", "pos_e", "\n", "self", ".", "integral_pos_e", "=", "self", ".", "integral_pos_e", "+", "pos_e", "*", "control_timestep", "\n", "#### PID target thrust #####################################", "\n", "target_force", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "self", ".", "GRAVITY", "]", ")", "+", "np", ".", "multiply", "(", "self", ".", "P_COEFF_FOR", ",", "pos_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "I_COEFF_FOR", ",", "self", ".", "integral_pos_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "D_COEFF_FOR", ",", "d_pos_e", ")", "\n", "target_rpy", "=", "np", ".", "zeros", "(", "3", ")", "\n", "sign_z", "=", "np", ".", "sign", "(", "target_force", "[", "2", "]", ")", "\n", "if", "sign_z", "==", "0", ":", "\n", "            ", "sign_z", "=", "1", "\n", "#### Target rotation #######################################", "\n", "", "target_rpy", "[", "0", "]", "=", "np", ".", "arcsin", "(", "-", "sign_z", "*", "target_force", "[", "1", "]", "/", "np", ".", "linalg", ".", "norm", "(", "target_force", ")", ")", "\n", "target_rpy", "[", "1", "]", "=", "np", ".", "arctan2", "(", "sign_z", "*", "target_force", "[", "0", "]", ",", "sign_z", "*", "target_force", "[", "2", "]", ")", "\n", "target_rpy", "[", "2", "]", "=", "0.", "\n", "target_rpy", "[", "0", "]", "=", "np", ".", "clip", "(", "target_rpy", "[", "0", "]", ",", "-", "self", ".", "MAX_ROLL_PITCH", ",", "self", ".", "MAX_ROLL_PITCH", ")", "\n", "target_rpy", "[", "1", "]", "=", "np", ".", "clip", "(", "target_rpy", "[", "1", "]", ",", "-", "self", ".", "MAX_ROLL_PITCH", ",", "self", ".", "MAX_ROLL_PITCH", ")", "\n", "cur_rotation", "=", "np", ".", "array", "(", "p", ".", "getMatrixFromQuaternion", "(", "cur_quat", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "thrust", "=", "np", ".", "dot", "(", "cur_rotation", ",", "target_force", ")", "\n", "return", "thrust", "[", "2", "]", ",", "target_rpy", ",", "pos_e", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.control.SimplePIDControl.SimplePIDControl._simplePIDAttitudeControl": [[189, 239], ["pybullet.getEulerFromQuaternion", "gym_pybullet_drones.utils.utils.nnlsRPM", "numpy.array().reshape", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.nnlsRPM"], ["", "def", "_simplePIDAttitudeControl", "(", "self", ",", "\n", "control_timestep", ",", "\n", "thrust", ",", "\n", "cur_quat", ",", "\n", "target_rpy", "\n", ")", ":", "\n", "        ", "\"\"\"Simple PID attitude control (with yaw fixed to 0).\n\n        Parameters\n        ----------\n        control_timestep : float\n            The time step at which control is computed.\n        thrust : float\n            The target thrust along the drone z-axis.\n        cur_quat : ndarray\n            (4,1)-shaped array of floats containing the current orientation as a quaternion.\n        target_rpy : ndarray\n            (3,1)-shaped array of floats containing the computed the target roll, pitch, and yaw.\n\n        Returns\n        -------\n        ndarray\n            (4,1)-shaped array of integers containing the RPMs to apply to each of the 4 motors.\n\n        \"\"\"", "\n", "cur_rpy", "=", "p", ".", "getEulerFromQuaternion", "(", "cur_quat", ")", "\n", "rpy_e", "=", "target_rpy", "-", "np", ".", "array", "(", "cur_rpy", ")", ".", "reshape", "(", "3", ",", ")", "\n", "if", "rpy_e", "[", "2", "]", ">", "np", ".", "pi", ":", "\n", "            ", "rpy_e", "[", "2", "]", "=", "rpy_e", "[", "2", "]", "-", "2", "*", "np", ".", "pi", "\n", "", "if", "rpy_e", "[", "2", "]", "<", "-", "np", ".", "pi", ":", "\n", "            ", "rpy_e", "[", "2", "]", "=", "rpy_e", "[", "2", "]", "+", "2", "*", "np", ".", "pi", "\n", "", "d_rpy_e", "=", "(", "rpy_e", "-", "self", ".", "last_rpy_e", ")", "/", "control_timestep", "\n", "self", ".", "last_rpy_e", "=", "rpy_e", "\n", "self", ".", "integral_rpy_e", "=", "self", ".", "integral_rpy_e", "+", "rpy_e", "*", "control_timestep", "\n", "#### PID target torques ####################################", "\n", "target_torques", "=", "np", ".", "multiply", "(", "self", ".", "P_COEFF_TOR", ",", "rpy_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "I_COEFF_TOR", ",", "self", ".", "integral_rpy_e", ")", "+", "np", ".", "multiply", "(", "self", ".", "D_COEFF_TOR", ",", "d_rpy_e", ")", "\n", "return", "nnlsRPM", "(", "thrust", "=", "thrust", ",", "\n", "x_torque", "=", "target_torques", "[", "0", "]", ",", "\n", "y_torque", "=", "target_torques", "[", "1", "]", ",", "\n", "z_torque", "=", "target_torques", "[", "2", "]", ",", "\n", "counter", "=", "self", ".", "control_counter", ",", "\n", "max_thrust", "=", "self", ".", "MAX_THRUST", ",", "\n", "max_xy_torque", "=", "self", ".", "MAX_XY_TORQUE", ",", "\n", "max_z_torque", "=", "self", ".", "MAX_Z_TORQUE", ",", "\n", "a", "=", "self", ".", "A", ",", "\n", "inv_a", "=", "self", ".", "INV_A", ",", "\n", "b_coeff", "=", "self", ".", "B_COEFF", ",", "\n", "gui", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw2_ctrl.HW2Control.__init__": [[28, 96], ["numpy.zeros", "numpy.array", "numpy.linalg.inv", "aer1216_fall2020_hw2_ctrl.HW2Control.reset"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset"], ["def", "__init__", "(", "self", ",", "\n", "env", ":", "BaseAviary", ",", "\n", "control_type", ":", "int", "=", "0", "\n", ")", ":", "\n", "        ", "\"\"\" Initialization of class HW2Control.\n\n        Parameters\n        ----------\n        env : BaseAviary\n            The PyBullet-based simulation environment.\n        control_type : int, optional\n            Choose between implementation of the u1 computation.\n\n        \"\"\"", "\n", "self", ".", "g", "=", "env", ".", "G", "\n", "\"\"\"float: Gravity acceleration, in meters per second squared.\"\"\"", "\n", "self", ".", "mass", "=", "env", ".", "M", "\n", "\"\"\"float: The mass of quad from environment.\"\"\"", "\n", "self", ".", "inertia_xx", "=", "env", ".", "J", "[", "0", "]", "[", "0", "]", "\n", "\"\"\"float: The inertia of quad around x axis.\"\"\"", "\n", "self", ".", "arm_length", "=", "env", ".", "L", "\n", "\"\"\"float: The inertia of quad around x axis.\"\"\"", "\n", "self", ".", "timestep", "=", "env", ".", "TIMESTEP", "\n", "\"\"\"float: Simulation and control timestep.\"\"\"", "\n", "self", ".", "last_rpy", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\"\"\"ndarray: Store the last roll, pitch, and yaw.\"\"\"", "\n", "self", ".", "kf_coeff", "=", "env", ".", "KF", "\n", "\"\"\"float: RPMs to force coefficient.\"\"\"", "\n", "self", ".", "km_coeff", "=", "env", ".", "KM", "\n", "\"\"\"float: RPMs to torque coefficient.\"\"\"", "\n", "self", ".", "CTRL_TYPE", "=", "control_type", "\n", "\"\"\"int: Flag switching beween implementations of u1.\"\"\"", "\n", "self", ".", "p_coeff_position", "=", "{", "}", "\n", "\"\"\"dict[str, float]: Proportional coefficient(s) for position control.\"\"\"", "\n", "self", ".", "d_coeff_position", "=", "{", "}", "\n", "\"\"\"dict[str, float]: Derivative coefficient(s) for position control.\"\"\"", "\n", "\n", "############################################################", "\n", "############################################################", "\n", "#### HOMEWORK CODE (START) #################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "# Objective 1 of 4: fill appropriate values in the 3 by 3 matrix", "\n", "self", ".", "matrix_u2rpm", "=", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "-", "1", "]", ",", "\n", "[", "2", ",", "-", "1", ",", "-", "1", "]", "\n", "]", ")", "\n", "\"\"\"ndarray: (3, 3)-shaped array of ints to determine motor rpm from force and torque.\"\"\"", "\n", "\n", "############################################################", "\n", "############################################################", "\n", "#### HOMEWORK CODE (END) ###################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "self", ".", "matrix_u2rpm_inv", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "matrix_u2rpm", ")", "\n", "\n", "self", ".", "p_coeff_position", "[", "\"z\"", "]", "=", "0.7", "*", "0.7", "\n", "self", ".", "d_coeff_position", "[", "\"z\"", "]", "=", "2", "*", "0.5", "*", "0.7", "\n", "#", "\n", "self", ".", "p_coeff_position", "[", "\"y\"", "]", "=", "0.7", "*", "0.7", "\n", "self", ".", "d_coeff_position", "[", "\"y\"", "]", "=", "2", "*", "0.5", "*", "0.7", "\n", "#", "\n", "self", ".", "p_coeff_position", "[", "\"r\"", "]", "=", "0.7", "*", "0.7", "\n", "self", ".", "d_coeff_position", "[", "\"r\"", "]", "=", "2", "*", "2.5", "*", "0.7", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw2_ctrl.HW2Control.reset": [[99, 102], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Resets the controller counter.\"\"\"", "\n", "self", ".", "control_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw2_ctrl.HW2Control.compute_control": [[105, 239], ["numpy.zeros", "numpy.zeros", "aer1216_fall2020_hw2_ctrl.HW2Control.pd_control", "aer1216_fall2020_hw2_ctrl.HW2Control.pd_control", "aer1216_fall2020_hw2_ctrl.HW2Control.pd_control", "numpy.array", "numpy.dot", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.array", "print", "print", "print", "print", "print", "numpy.cos", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw2_ctrl.HW2Control.pd_control", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw2_ctrl.HW2Control.pd_control", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw2_ctrl.HW2Control.pd_control"], ["", "def", "compute_control", "(", "self", ",", "\n", "current_position", ",", "\n", "current_velocity", ",", "\n", "current_rpy", ",", "\n", "target_position", ",", "\n", "target_velocity", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_acceleration", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Computes the propellers' RPMs for the target state, given the current state.\n\n        Parameters\n        ----------\n        current_position : ndarray\n            (3,)-shaped array of floats containing global x, y, z, in meters.\n        current_velocity : ndarray\n            (3,)-shaped array of floats containing global vx, vy, vz, in m/s.\n        current_rpy : ndarray\n            (3,)-shaped array of floats containing roll, pitch, yaw, in rad.\n        target_position : ndarray\n            (3,)-shaped array of float containing global x, y, z, in meters.\n        target_velocity : ndarray, optional\n            (3,)-shaped array of floats containing global, in m/s.\n        target_acceleration : ndarray, optional\n            (3,)-shaped array of floats containing global, in m/s^2.\n\n        Returns\n        -------\n        ndarray\n            (4,)-shaped array of ints containing the desired RPMs of each propeller.\n        \"\"\"", "\n", "self", ".", "control_counter", "+=", "1", "\n", "\n", "#### Compute roll, pitch, and yaw rates ####################", "\n", "current_rpy_dot", "=", "(", "current_rpy", "-", "self", ".", "last_rpy", ")", "/", "self", ".", "timestep", "\n", "\n", "##### Calculate PD control in y, z #########################", "\n", "y_ddot", "=", "self", ".", "pd_control", "(", "target_position", "[", "1", "]", ",", "\n", "current_position", "[", "1", "]", ",", "\n", "target_velocity", "[", "1", "]", ",", "\n", "current_velocity", "[", "1", "]", ",", "\n", "target_acceleration", "[", "1", "]", ",", "\n", "\"y\"", "\n", ")", "\n", "z_ddot", "=", "self", ".", "pd_control", "(", "target_position", "[", "2", "]", ",", "\n", "current_position", "[", "2", "]", ",", "\n", "target_velocity", "[", "2", "]", ",", "\n", "current_velocity", "[", "2", "]", ",", "\n", "target_acceleration", "[", "2", "]", ",", "\n", "\"z\"", "\n", ")", "\n", "\n", "##### Calculate desired roll and rates given by PD #########", "\n", "desired_roll", "=", "-", "y_ddot", "/", "self", ".", "g", "\n", "desired_roll_dot", "=", "(", "desired_roll", "-", "current_rpy", "[", "0", "]", ")", "/", "0.004", "\n", "self", ".", "old_roll", "=", "desired_roll", "\n", "self", ".", "old_roll_dot", "=", "desired_roll_dot", "\n", "roll_ddot", "=", "self", ".", "pd_control", "(", "desired_roll", ",", "\n", "current_rpy", "[", "0", "]", ",", "\n", "desired_roll_dot", ",", "\n", "current_rpy_dot", "[", "0", "]", ",", "\n", "0", ",", "\n", "\"r\"", "\n", ")", "\n", "\n", "############################################################", "\n", "############################################################", "\n", "#### HOMEWORK CODE (START) #################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "# Variables that you might use", "\n", "#   self.g", "\n", "#   self.mass", "\n", "#   self.inertia_xx", "\n", "#   y_ddot", "\n", "#   z_ddot", "\n", "#   roll_ddot", "\n", "#   current_rpy[0], current_rpy[1], current_rpy[2]", "\n", "# Basic math and NumPy", "\n", "#   sine(x) -> np.sin(x)", "\n", "#   cosine(x) -> np.cos(x)", "\n", "#   x squared -> x**2", "\n", "#   square root of x -> np.sqrt(x)", "\n", "\n", "##### Calculate thrust and moment given the PD input #######", "\n", "if", "self", ".", "CTRL_TYPE", "==", "0", ":", "\n", "#### Linear Control ########################################", "\n", "# Objective 2 of 4: compute u_1 for the linear controller", "\n", "            ", "u_1", "=", "self", ".", "mass", "*", "(", "self", ".", "g", "+", "z_ddot", ")", "\n", "\n", "", "elif", "self", ".", "CTRL_TYPE", "==", "1", ":", "\n", "#### Nonlinear Control 1 ###################################", "\n", "            ", "u_1", "=", "self", ".", "mass", "*", "(", "self", ".", "g", "+", "z_ddot", ")", "/", "np", ".", "cos", "(", "current_rpy", "[", "0", "]", ")", "\n", "\n", "", "elif", "self", ".", "CTRL_TYPE", "==", "2", ":", "\n", "#### Nonlinear Control 2 ###################################", "\n", "# Objective 3 of 4: compute u_1 for the second nonlinear controller", "\n", "            ", "u_1", "=", "self", ".", "mass", "*", "np", ".", "sqrt", "(", "y_ddot", "**", "2", "+", "(", "self", ".", "g", "+", "z_ddot", ")", "**", "2", ")", "\n", "\n", "# Objective 4 of 4: compute u_2", "\n", "", "u_2", "=", "self", ".", "inertia_xx", "*", "roll_ddot", "\n", "\n", "############################################################", "\n", "############################################################", "\n", "#### HOMEWORK CODE (END) ###################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "##### Calculate RPMs #######################################", "\n", "u", "=", "np", ".", "array", "(", "[", "[", "u_1", "/", "self", ".", "kf_coeff", "]", ",", "\n", "[", "u_2", "/", "(", "self", ".", "arm_length", "*", "self", ".", "kf_coeff", ")", "]", ",", "\n", "[", "0", "]", "]", ")", "\n", "propellers_rpm", "=", "np", ".", "dot", "(", "self", ".", "matrix_u2rpm_inv", ",", "u", ")", "\n", "\n", "#### Command the turn rates of propellers 1 and 3 ##########", "\n", "propellers_1_rpm", "=", "np", ".", "sqrt", "(", "propellers_rpm", "[", "1", ",", "0", "]", ")", "\n", "propellers_3_rpm", "=", "np", ".", "sqrt", "(", "propellers_rpm", "[", "2", ",", "0", "]", ")", "\n", "\n", "#### For motion in the Y-Z plane, assign the same turn rates to prop. 0 and 2", "\n", "propellers_0_and_2_rpm", "=", "np", ".", "sqrt", "(", "propellers_rpm", "[", "0", ",", "0", "]", ")", "\n", "\n", "#### Print relevant output #################################", "\n", "if", "self", ".", "control_counter", "%", "(", "1", "/", "self", ".", "timestep", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"current_position\"", ",", "current_position", ")", "\n", "print", "(", "\"current_velocity\"", ",", "current_velocity", ")", "\n", "print", "(", "\"target_position\"", ",", "target_position", ")", "\n", "print", "(", "\"target_velocity\"", ",", "target_velocity", ")", "\n", "print", "(", "\"target_acceleration\"", ",", "target_acceleration", ")", "\n", "\n", "#### Store the last step's roll, pitch, and yaw ############", "\n", "", "self", ".", "last_rpy", "=", "current_rpy", "\n", "\n", "return", "np", ".", "array", "(", "[", "propellers_0_and_2_rpm", ",", "propellers_1_rpm", ",", "\n", "propellers_0_and_2_rpm", ",", "propellers_3_rpm", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw2_ctrl.HW2Control.pd_control": [[242, 275], ["None"], "methods", ["None"], ["", "def", "pd_control", "(", "self", ",", "\n", "desired_position", ",", "\n", "current_position", ",", "\n", "desired_velocity", ",", "\n", "current_velocity", ",", "\n", "desired_acceleration", ",", "\n", "opt", "\n", ")", ":", "\n", "        ", "\"\"\"Computes PD control for the acceleration minimizing position error.\n\n        Parameters\n        ----------\n        desired_position :\n            float: Desired global position.\n        current_position :\n            float: Current global position.\n        desired_velocity :\n            float: Desired global velocity.\n        current_velocity :\n            float: Current global velocity.\n        desired_acceleration :\n            float: Desired global acceleration.\n\n        Returns\n        -------\n        float\n            The commanded acceleration.\n        \"\"\"", "\n", "u", "=", "desired_acceleration", "+", "self", ".", "d_coeff_position", "[", "opt", "]", "*", "(", "desired_velocity", "-", "current_velocity", ")", "+", "self", ".", "p_coeff_position", "[", "opt", "]", "*", "(", "desired_position", "-", "current_position", ")", "\n", "\n", "return", "u", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.pybullet_example.main": [[7, 18], ["pybullet.connect", "pybullet.setGravity", "pybullet.setRealTimeSimulation", "pybullet.setTimeStep", "pybullet.setAdditionalSearchPath", "pybullet.loadURDF", "pybullet.loadURDF", "range", "pybullet_data.getDataPath", "pybullet.stepSimulation", "time.sleep"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "PYB_CLIENT", "=", "p", ".", "connect", "(", "p", ".", "GUI", ")", "\n", "p", ".", "setGravity", "(", "0", ",", "0", ",", "-", "9.8", ",", "physicsClientId", "=", "PYB_CLIENT", ")", "\n", "p", ".", "setRealTimeSimulation", "(", "0", ",", "physicsClientId", "=", "PYB_CLIENT", ")", "\n", "p", ".", "setTimeStep", "(", "1", "/", "240", ",", "physicsClientId", "=", "PYB_CLIENT", ")", "\n", "p", ".", "setAdditionalSearchPath", "(", "pybullet_data", ".", "getDataPath", "(", ")", ",", "physicsClientId", "=", "PYB_CLIENT", ")", "\n", "p", ".", "loadURDF", "(", "\"plane.urdf\"", ",", "physicsClientId", "=", "PYB_CLIENT", ")", "\n", "p", ".", "loadURDF", "(", "\"duck_vhacd.urdf\"", ",", "[", "0", ",", "0", ",", "1", "]", ",", "physicsClientId", "=", "PYB_CLIENT", ")", "\n", "for", "_", "in", "range", "(", "240", "*", "10", ")", ":", "\n", "        ", "p", ".", "stepSimulation", "(", "physicsClientId", "=", "PYB_CLIENT", ")", "\n", "sleep", "(", "1", "/", "(", "240", "*", "10", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.__init__": [[24, 62], ["aer1216_fall2020_hw1_ctrl.HW1Control.reset"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset"], ["def", "__init__", "(", "self", ",", "\n", "env", ":", "BaseAviary", "\n", ")", ":", "\n", "        ", "\"\"\" Initialization of class HW1Control.\n\n        Parameters\n        ----------\n        env : BaseAviary\n            The PyBullet-based simulation environment.\n\n        \"\"\"", "\n", "self", ".", "g", "=", "env", ".", "G", "\n", "\"\"\"float: Gravity acceleration, in meters per second squared.\"\"\"", "\n", "self", ".", "mass", "=", "env", ".", "M", "\n", "\"\"\"float: The mass of quad from environment.\"\"\"", "\n", "self", ".", "timestep", "=", "env", ".", "TIMESTEP", "\n", "\"\"\"float: Simulation and control timestep.\"\"\"", "\n", "self", ".", "kf_coeff", "=", "env", ".", "KF", "\n", "\"\"\"float: RPMs to force coefficient.\"\"\"", "\n", "self", ".", "km_coeff", "=", "env", ".", "KM", "\n", "\"\"\"float: RPMs to torque coefficient.\"\"\"", "\n", "\n", "############################################################", "\n", "############################################################", "\n", "#### HOMEWORK CODE (START) #################################", "\n", "############################################################", "\n", "############################################################", "\n", "self", ".", "p_coeff_position", "=", "0.7", "*", "0.7", "\n", "\"\"\"float: Proportional coefficient for position control.\"\"\"", "\n", "self", ".", "d_coeff_position", "=", "2", "*", "0.7", "*", "0.7", "\n", "\"\"\"float: Derivative coefficient for position control.\"\"\"", "\n", "############################################################", "\n", "############################################################", "\n", "#### HOMEWORK CODE (END) ###################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset": [[65, 68], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Resets the controller counter.\"\"\"", "\n", "self", ".", "control_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.compute_control": [[71, 138], ["numpy.zeros", "numpy.zeros", "numpy.sqrt", "numpy.array", "print", "print", "print", "print", "print"], "methods", ["None"], ["", "def", "compute_control", "(", "self", ",", "\n", "current_position", ",", "\n", "current_velocity", ",", "\n", "target_position", ",", "\n", "target_velocity", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", "target_acceleration", "=", "np", ".", "zeros", "(", "3", ")", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Compute the propellers' RPMs for the target state, given the current state.\n\n        Parameters\n        ----------\n        current_position : ndarray\n            (3,)-shaped array of floats containing global x, y, z, in meters.\n        current_velocity : ndarray\n            (3,)-shaped array of floats containing global vx, vy, vz, in m/s.\n        target_position : ndarray\n            (3,)-shaped array of float containing global x, y, z, in meters.\n        target_velocity : ndarray, optional\n            (3,)-shaped array of floats containing global, in m/s.\n        target_acceleration : ndarray, optional\n            (3,)-shaped array of floats containing global, in m/s^2.\n\n        Returns\n        -------\n        ndarray\n            (4,)-shaped array of ints containing the desired RPMs of each propeller.\n        \"\"\"", "\n", "self", ".", "control_counter", "+=", "1", "\n", "\n", "############################################################", "\n", "############################################################", "\n", "#### HOMEWORK CODE (START) #################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "##### Calculate position and velocity errors ###############", "\n", "current_pos_error", "=", "target_position", "[", "2", "]", "-", "current_position", "[", "2", "]", "\n", "current_vel_error", "=", "target_velocity", "[", "2", "]", "-", "current_velocity", "[", "2", "]", "\n", "\n", "#### Calculate input with a PD controller ##################", "\n", "# u = desired_acceleration + Kv * velocity_error + Kp * position_error", "\n", "u", "=", "target_acceleration", "[", "2", "]", "+", "self", ".", "d_coeff_position", "*", "current_vel_error", "+", "self", ".", "p_coeff_position", "*", "current_pos_error", "\n", "\n", "##### Calculate propeller turn rates given the PD input ####", "\n", "# turn_rate = sqrt( (m*u + m*g) / (4*Kf) )", "\n", "propellers_rpm", "=", "np", ".", "sqrt", "(", "(", "u", "*", "self", ".", "mass", "+", "self", ".", "g", "*", "self", ".", "mass", ")", "/", "(", "4", "*", "self", ".", "kf_coeff", ")", ")", "\n", "\n", "# For up-down motion, assign the same turn rates to all motors", "\n", "propellers_0_and_3_rpm", ",", "propellers_1_and_2_rpm", "=", "propellers_rpm", ",", "propellers_rpm", "\n", "############################################################", "\n", "############################################################", "\n", "#### HOMEWORK CODE (END) ###################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "#### Print relevant output #################################", "\n", "if", "self", ".", "control_counter", "%", "(", "1", "/", "self", ".", "timestep", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"current_position\"", ",", "current_position", ")", "\n", "print", "(", "\"current_velocity\"", ",", "current_velocity", ")", "\n", "print", "(", "\"target_position\"", ",", "target_position", ")", "\n", "print", "(", "\"target_velocity\"", ",", "target_velocity", ")", "\n", "print", "(", "\"target_acceleration\"", ",", "target_acceleration", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "propellers_0_and_3_rpm", ",", "propellers_1_and_2_rpm", ",", "\n", "propellers_1_and_2_rpm", ",", "propellers_0_and_3_rpm", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.ros2_gym_pybullet_drones.aviary_wrapper.AviaryWrapper.__init__": [[25, 54], ["rclpy.node.Node.__init__", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary", "aviary_wrapper.AviaryWrapper.create_publisher", "aviary_wrapper.AviaryWrapper.create_timer", "aviary_wrapper.AviaryWrapper.create_subscription", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'aviary_wrapper'", ")", "\n", "self", ".", "step_cb_count", "=", "0", "\n", "self", ".", "get_action_cb_count", "=", "0", "\n", "timer_freq_hz", "=", "240", "\n", "timer_period_sec", "=", "1", "/", "timer_freq_hz", "\n", "#### Create the CtrlAviary environment wrapped by the node #", "\n", "self", ".", "env", "=", "CtrlAviary", "(", "drone_model", "=", "DroneModel", ".", "CF2X", ",", "\n", "num_drones", "=", "1", ",", "\n", "neighbourhood_radius", "=", "np", ".", "inf", ",", "\n", "initial_xyzs", "=", "None", ",", "\n", "initial_rpys", "=", "None", ",", "\n", "physics", "=", "Physics", ".", "PYB", ",", "\n", "freq", "=", "timer_freq_hz", ",", "\n", "aggregate_phy_steps", "=", "1", ",", "\n", "gui", "=", "True", ",", "\n", "record", "=", "False", ",", "\n", "obstacles", "=", "False", ",", "\n", "user_debug_gui", "=", "True", "\n", ")", "\n", "#### Initialize an action with the RPMs at hover ###########", "\n", "self", ".", "action", "=", "np", ".", "ones", "(", "4", ")", "*", "self", ".", "env", ".", "HOVER_RPM", "\n", "#### Declare publishing on 'obs' and create a timer to call ", "\n", "#### action_callback every timer_period_sec ################", "\n", "self", ".", "publisher_", "=", "self", ".", "create_publisher", "(", "Float32MultiArray", ",", "'obs'", ",", "1", ")", "\n", "self", ".", "timer", "=", "self", ".", "create_timer", "(", "timer_period_sec", ",", "self", ".", "step_callback", ")", "\n", "#### Subscribe to topic 'action' ###########################", "\n", "self", ".", "action_subscription", "=", "self", ".", "create_subscription", "(", "Float32MultiArray", ",", "'action'", ",", "self", ".", "get_action_callback", ",", "1", ")", "\n", "self", ".", "action_subscription", "# prevent unused variable warning", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.ros2_gym_pybullet_drones.aviary_wrapper.AviaryWrapper.step_callback": [[56, 68], ["aviary_wrapper.AviaryWrapper.env.step", "std_msgs.msg.Float32MultiArray", "[].tolist", "aviary_wrapper.AviaryWrapper.publisher_.publish", "aviary_wrapper.AviaryWrapper.get_logger().info", "aviary_wrapper.AviaryWrapper.get_logger"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.step"], ["", "def", "step_callback", "(", "self", ")", ":", "\n", "        ", "self", ".", "step_cb_count", "+=", "1", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "{", "\"0\"", ":", "self", ".", "action", "}", ")", "\n", "msg", "=", "Float32MultiArray", "(", ")", "\n", "msg", ".", "data", "=", "obs", "[", "\"0\"", "]", "[", "\"state\"", "]", ".", "tolist", "(", ")", "\n", "self", ".", "publisher_", ".", "publish", "(", "msg", ")", "\n", "if", "self", ".", "step_cb_count", "%", "10", "==", "0", ":", "\n", "            ", "self", ".", "get_logger", "(", ")", ".", "info", "(", "'Publishing obs: \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\"'", "%", "(", "msg", ".", "data", "[", "0", "]", ",", "msg", ".", "data", "[", "1", "]", ",", "msg", ".", "data", "[", "2", "]", ",", "msg", ".", "data", "[", "3", "]", ",", "msg", ".", "data", "[", "4", "]", ",", "\n", "msg", ".", "data", "[", "5", "]", ",", "msg", ".", "data", "[", "6", "]", ",", "msg", ".", "data", "[", "7", "]", ",", "msg", ".", "data", "[", "8", "]", ",", "msg", ".", "data", "[", "9", "]", ",", "\n", "msg", ".", "data", "[", "10", "]", ",", "msg", ".", "data", "[", "11", "]", ",", "msg", ".", "data", "[", "12", "]", ",", "msg", ".", "data", "[", "13", "]", ",", "msg", ".", "data", "[", "14", "]", ",", "\n", "msg", ".", "data", "[", "15", "]", ",", "msg", ".", "data", "[", "16", "]", ",", "msg", ".", "data", "[", "17", "]", ",", "msg", ".", "data", "[", "18", "]", ",", "msg", ".", "data", "[", "19", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.ros2_gym_pybullet_drones.aviary_wrapper.AviaryWrapper.get_action_callback": [[72, 77], ["numpy.array", "aviary_wrapper.AviaryWrapper.get_logger().info", "aviary_wrapper.AviaryWrapper.get_logger"], "methods", ["None"], ["", "", "def", "get_action_callback", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "get_action_cb_count", "+=", "1", "\n", "self", ".", "action", "=", "np", ".", "array", "(", "[", "msg", ".", "data", "[", "0", "]", ",", "msg", ".", "data", "[", "1", "]", ",", "msg", ".", "data", "[", "2", "]", ",", "msg", ".", "data", "[", "3", "]", "]", ")", "\n", "if", "self", ".", "get_action_cb_count", "%", "10", "==", "0", ":", "\n", "            ", "self", ".", "get_logger", "(", ")", ".", "info", "(", "'I received action: \"%f\" \"%f\" \"%f\" \"%f\"'", "%", "(", "msg", ".", "data", "[", "0", "]", ",", "msg", ".", "data", "[", "1", "]", ",", "msg", ".", "data", "[", "2", "]", ",", "msg", ".", "data", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.ros2_gym_pybullet_drones.aviary_wrapper.main": [[79, 83], ["rclpy.init", "aviary_wrapper.AviaryWrapper", "rclpy.spin"], "function", ["None"], ["", "", "", "def", "main", "(", "args", "=", "None", ")", ":", "\n", "    ", "rclpy", ".", "init", "(", "args", "=", "args", ")", "\n", "aviary_wrapper", "=", "AviaryWrapper", "(", ")", "\n", "rclpy", ".", "spin", "(", "aviary_wrapper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.ros2_gym_pybullet_drones.random_control.RandomControl.__init__": [[25, 41], ["rclpy.node.Node.__init__", "gym_pybullet_drones.envs.CtrlAviary.CtrlAviary", "random_control.RandomControl.create_publisher", "random_control.RandomControl.create_timer", "random_control.RandomControl.create_subscription"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'random_control'", ")", "\n", "self", ".", "action_cb_count", "=", "0", "\n", "self", ".", "get_obs_cb_count", "=", "0", "\n", "#### Set the frequency used to publish actions #############", "\n", "timer_freq_hz", "=", "50", "\n", "timer_period_sec", "=", "1", "/", "timer_freq_hz", "\n", "#### Dummy CtrlAviary to obtain the HOVER_RPM constant #####", "\n", "self", ".", "env", "=", "CtrlAviary", "(", ")", "\n", "#### Declare publishing on 'action' and create a timer to ##", "\n", "#### call action_callback every timer_period_sec ###########", "\n", "self", ".", "publisher_", "=", "self", ".", "create_publisher", "(", "Float32MultiArray", ",", "'action'", ",", "1", ")", "\n", "self", ".", "timer", "=", "self", ".", "create_timer", "(", "timer_period_sec", ",", "self", ".", "action_callback", ")", "\n", "#### Subscribe to topic 'obs' ##############################", "\n", "self", ".", "obs_subscription", "=", "self", ".", "create_subscription", "(", "Float32MultiArray", ",", "'obs'", ",", "self", ".", "get_obs_callback", ",", "1", ")", "\n", "self", ".", "obs_subscription", "# prevent unused variable warning", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.ros2_gym_pybullet_drones.random_control.RandomControl.action_callback": [[43, 52], ["std_msgs.msg.Float32MultiArray", "random_control.RandomControl.publisher_.publish", "random.uniform", "random.uniform", "random_control.RandomControl.get_logger().info", "random_control.RandomControl.get_logger"], "methods", ["None"], ["", "def", "action_callback", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_cb_count", "+=", "1", "\n", "random_rpm13", "=", "random", ".", "uniform", "(", ".9", ",", "1.1", ")", "*", "self", ".", "env", ".", "HOVER_RPM", "\n", "random_rpm24", "=", "random", ".", "uniform", "(", ".9", ",", "1.1", ")", "*", "self", ".", "env", ".", "HOVER_RPM", "\n", "msg", "=", "Float32MultiArray", "(", ")", "\n", "msg", ".", "data", "=", "[", "random_rpm13", ",", "random_rpm24", ",", "random_rpm13", ",", "random_rpm24", "]", "\n", "self", ".", "publisher_", ".", "publish", "(", "msg", ")", "\n", "if", "self", ".", "action_cb_count", "%", "10", "==", "0", ":", "\n", "            ", "self", ".", "get_logger", "(", ")", ".", "info", "(", "'Publishing action: \"%f\" \"%f\" \"%f\" \"%f\"'", "%", "(", "msg", ".", "data", "[", "0", "]", ",", "msg", ".", "data", "[", "1", "]", ",", "msg", ".", "data", "[", "2", "]", ",", "msg", ".", "data", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.ros2_gym_pybullet_drones.random_control.RandomControl.get_obs_callback": [[54, 62], ["random_control.RandomControl.get_logger().info", "random_control.RandomControl.get_logger"], "methods", ["None"], ["", "", "def", "get_obs_callback", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "get_obs_cb_count", "+=", "1", "\n", "if", "self", ".", "get_obs_cb_count", "%", "10", "==", "0", ":", "\n", "            ", "self", ".", "get_logger", "(", ")", ".", "info", "(", "'I received obs: \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\" \"%f\"'", "%", "(", "msg", ".", "data", "[", "0", "]", ",", "msg", ".", "data", "[", "1", "]", ",", "msg", ".", "data", "[", "2", "]", ",", "msg", ".", "data", "[", "3", "]", ",", "msg", ".", "data", "[", "4", "]", ",", "\n", "msg", ".", "data", "[", "5", "]", ",", "msg", ".", "data", "[", "6", "]", ",", "msg", ".", "data", "[", "7", "]", ",", "msg", ".", "data", "[", "8", "]", ",", "msg", ".", "data", "[", "9", "]", ",", "\n", "msg", ".", "data", "[", "10", "]", ",", "msg", ".", "data", "[", "11", "]", ",", "msg", ".", "data", "[", "12", "]", ",", "msg", ".", "data", "[", "13", "]", ",", "msg", ".", "data", "[", "14", "]", ",", "\n", "msg", ".", "data", "[", "15", "]", ",", "msg", ".", "data", "[", "16", "]", ",", "msg", ".", "data", "[", "17", "]", ",", "msg", ".", "data", "[", "18", "]", ",", "msg", ".", "data", "[", "19", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.ros2_gym_pybullet_drones.random_control.main": [[66, 70], ["rclpy.init", "random_control.RandomControl", "rclpy.spin"], "function", ["None"], ["", "", "", "def", "main", "(", "args", "=", "None", ")", ":", "\n", "    ", "rclpy", ".", "init", "(", "args", "=", "args", ")", "\n", "random_control", "=", "RandomControl", "(", ")", "\n", "rclpy", ".", "spin", "(", "random_control", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.test.test_copyright.test_copyright": [[19, 24], ["ament_copyright.main.main"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.ros2_gym_pybullet_drones.random_control.main"], ["@", "pytest", ".", "mark", ".", "copyright", "\n", "@", "pytest", ".", "mark", ".", "linter", "\n", "def", "test_copyright", "(", ")", ":", "\n", "    ", "rc", "=", "main", "(", "argv", "=", "[", "'.'", ",", "'test'", "]", ")", "\n", "assert", "rc", "==", "0", ",", "'Found errors'", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.test.test_flake8.test_flake8": [[19, 26], ["ament_flake8.main.main_with_errors", "len"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "flake8", "\n", "@", "pytest", ".", "mark", ".", "linter", "\n", "def", "test_flake8", "(", ")", ":", "\n", "    ", "rc", ",", "errors", "=", "main_with_errors", "(", "argv", "=", "[", "]", ")", "\n", "assert", "rc", "==", "0", ",", "'Found %d code style errors / warnings:\\n'", "%", "len", "(", "errors", ")", "+", "'\\n'", ".", "join", "(", "errors", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.test.test_pep257.test_pep257": [[19, 24], ["ament_pep257.main.main"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.ros2_gym_pybullet_drones.random_control.main"], ["@", "pytest", ".", "mark", ".", "linter", "\n", "@", "pytest", ".", "mark", ".", "pep257", "\n", "def", "test_pep257", "(", ")", ":", "\n", "    ", "rc", "=", "main", "(", "argv", "=", "[", "'.'", ",", "'test'", "]", ")", "\n", "assert", "rc", "==", "0", ",", "'Found code style errors / warnings'", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.singleagent.run": [[67, 269], ["os.path.join", "dict", "print", "print", "dict", "dict", "stable_baselines3.common.callbacks.StopTrainingOnRewardThreshold", "stable_baselines3.common.callbacks.EvalCallback", "model.learn", "model.save", "print", "os.path.exists", "os.makedirs", "subprocess.check_output().strip", "print", "print", "print", "exit", "print", "exit", "stable_baselines3.common.cmd_util.make_vec_env", "stable_baselines3.common.cmd_util.make_vec_env", "stable_baselines3.common.cmd_util.make_vec_env", "stable_baselines3.common.cmd_util.make_vec_env", "gym.make", "numpy.load", "range", "datetime.datetime.now().strftime", "os.environ.keys", "open", "f.write", "print", "exit", "stable_baselines3.A2C", "stable_baselines3.A2C", "stable_baselines3.PPO", "stable_baselines3.PPO", "stable_baselines3.SAC", "stable_baselines3.SAC", "stable_baselines3.TD3", "stable_baselines3.TD3", "stable_baselines3.DDPG", "stable_baselines3.DDPG", "stable_baselines3.common.vec_env.VecTransposeImage", "int", "print", "subprocess.check_output", "str", "dict", "stable_baselines3.common.cmd_util.make_vec_env", "stable_baselines3.common.cmd_util.make_vec_env", "stable_baselines3.common.cmd_util.make_vec_env", "stable_baselines3.common.cmd_util.make_vec_env", "datetime.datetime.now", "str", "str"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save"], ["def", "run", "(", "\n", "env", "=", "DEFAULT_ENV", ",", "\n", "algo", "=", "DEFAULT_ALGO", ",", "\n", "obs", "=", "DEFAULT_OBS", ",", "\n", "act", "=", "DEFAULT_ACT", ",", "\n", "cpu", "=", "DEFAULT_CPU", ",", "\n", "steps", "=", "DEFAULT_STEPS", ",", "\n", "output_folder", "=", "DEFAULT_OUTPUT_FOLDER", "\n", ")", ":", "\n", "\n", "#### Save directory ########################################", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'save-'", "+", "env", "+", "'-'", "+", "algo", "+", "'-'", "+", "obs", ".", "value", "+", "'-'", "+", "act", ".", "value", "+", "'-'", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m.%d.%Y_%H.%M.%S\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "filename", "+", "'/'", ")", "\n", "\n", "#### Print out current git commit hash #####################", "\n", "", "if", "(", "platform", "==", "\"linux\"", "or", "platform", "==", "\"darwin\"", ")", "and", "(", "'GITHUB_ACTIONS'", "not", "in", "os", ".", "environ", ".", "keys", "(", ")", ")", ":", "\n", "        ", "git_commit", "=", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"describe\"", ",", "\"--tags\"", "]", ")", ".", "strip", "(", ")", "\n", "with", "open", "(", "filename", "+", "'/git_commit.txt'", ",", "'w+'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "git_commit", ")", ")", "\n", "\n", "#### Warning ###############################################", "\n", "", "", "if", "env", "==", "'tune'", "and", "act", "!=", "ActionType", ".", "TUN", ":", "\n", "        ", "print", "(", "\"\\n\\n\\n[WARNING] TuneAviary is intended for use with ActionType.TUN\\n\\n\\n\"", ")", "\n", "", "if", "act", "==", "ActionType", ".", "ONE_D_RPM", "or", "act", "==", "ActionType", ".", "ONE_D_DYN", "or", "act", "==", "ActionType", ".", "ONE_D_PID", ":", "\n", "        ", "print", "(", "\"\\n\\n\\n[WARNING] Simplified 1D problem for debugging purposes\\n\\n\\n\"", ")", "\n", "#### Errors ################################################", "\n", "if", "not", "env", "in", "[", "'takeoff'", ",", "'hover'", "]", ":", "\n", "            ", "print", "(", "\"[ERROR] 1D action space is only compatible with Takeoff and HoverAviary\"", ")", "\n", "exit", "(", ")", "\n", "", "", "if", "act", "==", "ActionType", ".", "TUN", "and", "env", "!=", "'tune'", ":", "\n", "        ", "print", "(", "\"[ERROR] ActionType.TUN is only compatible with TuneAviary\"", ")", "\n", "exit", "(", ")", "\n", "", "if", "algo", "in", "[", "'sac'", ",", "'td3'", ",", "'ddpg'", "]", "and", "cpu", "!=", "1", ":", "\n", "        ", "print", "(", "\"[ERROR] The selected algorithm does not support multiple environments\"", ")", "\n", "exit", "(", ")", "\n", "\n", "#### Uncomment to debug slurm scripts ######################", "\n", "# exit()", "\n", "\n", "", "env_name", "=", "env", "+", "\"-aviary-v0\"", "\n", "sa_env_kwargs", "=", "dict", "(", "aggregate_phy_steps", "=", "shared_constants", ".", "AGGR_PHY_STEPS", ",", "obs", "=", "obs", ",", "act", "=", "act", ")", "\n", "# train_env = gym.make(env_name, aggregate_phy_steps=shared_constants.AGGR_PHY_STEPS, obs=obs, act=act) # single environment instead of a vectorized one    ", "\n", "if", "env_name", "==", "\"takeoff-aviary-v0\"", ":", "\n", "        ", "train_env", "=", "make_vec_env", "(", "TakeoffAviary", ",", "\n", "env_kwargs", "=", "sa_env_kwargs", ",", "\n", "n_envs", "=", "cpu", ",", "\n", "seed", "=", "0", "\n", ")", "\n", "", "if", "env_name", "==", "\"hover-aviary-v0\"", ":", "\n", "        ", "train_env", "=", "make_vec_env", "(", "HoverAviary", ",", "\n", "env_kwargs", "=", "sa_env_kwargs", ",", "\n", "n_envs", "=", "cpu", ",", "\n", "seed", "=", "0", "\n", ")", "\n", "", "if", "env_name", "==", "\"flythrugate-aviary-v0\"", ":", "\n", "        ", "train_env", "=", "make_vec_env", "(", "FlyThruGateAviary", ",", "\n", "env_kwargs", "=", "sa_env_kwargs", ",", "\n", "n_envs", "=", "cpu", ",", "\n", "seed", "=", "0", "\n", ")", "\n", "", "if", "env_name", "==", "\"tune-aviary-v0\"", ":", "\n", "        ", "train_env", "=", "make_vec_env", "(", "TuneAviary", ",", "\n", "env_kwargs", "=", "sa_env_kwargs", ",", "\n", "n_envs", "=", "cpu", ",", "\n", "seed", "=", "0", "\n", ")", "\n", "", "print", "(", "\"[INFO] Action space:\"", ",", "train_env", ".", "action_space", ")", "\n", "print", "(", "\"[INFO] Observation space:\"", ",", "train_env", ".", "observation_space", ")", "\n", "# check_env(train_env, warn=True, skip_render_check=True)", "\n", "\n", "#### On-policy algorithms ##################################", "\n", "onpolicy_kwargs", "=", "dict", "(", "activation_fn", "=", "torch", ".", "nn", ".", "ReLU", ",", "\n", "net_arch", "=", "[", "512", ",", "512", ",", "dict", "(", "vf", "=", "[", "256", ",", "128", "]", ",", "pi", "=", "[", "256", ",", "128", "]", ")", "]", "\n", ")", "# or None", "\n", "if", "algo", "==", "'a2c'", ":", "\n", "        ", "model", "=", "A2C", "(", "a2cppoMlpPolicy", ",", "\n", "train_env", ",", "\n", "policy_kwargs", "=", "onpolicy_kwargs", ",", "\n", "tensorboard_log", "=", "filename", "+", "'/tb/'", ",", "\n", "verbose", "=", "1", "\n", ")", "if", "obs", "==", "ObservationType", ".", "KIN", "else", "A2C", "(", "a2cppoCnnPolicy", ",", "\n", "train_env", ",", "\n", "policy_kwargs", "=", "onpolicy_kwargs", ",", "\n", "tensorboard_log", "=", "filename", "+", "'/tb/'", ",", "\n", "verbose", "=", "1", "\n", ")", "\n", "", "if", "algo", "==", "'ppo'", ":", "\n", "        ", "model", "=", "PPO", "(", "a2cppoMlpPolicy", ",", "\n", "train_env", ",", "\n", "policy_kwargs", "=", "onpolicy_kwargs", ",", "\n", "tensorboard_log", "=", "filename", "+", "'/tb/'", ",", "\n", "verbose", "=", "1", "\n", ")", "if", "obs", "==", "ObservationType", ".", "KIN", "else", "PPO", "(", "a2cppoCnnPolicy", ",", "\n", "train_env", ",", "\n", "policy_kwargs", "=", "onpolicy_kwargs", ",", "\n", "tensorboard_log", "=", "filename", "+", "'/tb/'", ",", "\n", "verbose", "=", "1", "\n", ")", "\n", "\n", "#### Off-policy algorithms #################################", "\n", "", "offpolicy_kwargs", "=", "dict", "(", "activation_fn", "=", "torch", ".", "nn", ".", "ReLU", ",", "\n", "net_arch", "=", "[", "512", ",", "512", ",", "256", ",", "128", "]", "\n", ")", "# or None # or dict(net_arch=dict(qf=[256, 128, 64, 32], pi=[256, 128, 64, 32]))", "\n", "if", "algo", "==", "'sac'", ":", "\n", "        ", "model", "=", "SAC", "(", "sacMlpPolicy", ",", "\n", "train_env", ",", "\n", "policy_kwargs", "=", "offpolicy_kwargs", ",", "\n", "tensorboard_log", "=", "filename", "+", "'/tb/'", ",", "\n", "verbose", "=", "1", "\n", ")", "if", "obs", "==", "ObservationType", ".", "KIN", "else", "SAC", "(", "sacCnnPolicy", ",", "\n", "train_env", ",", "\n", "policy_kwargs", "=", "offpolicy_kwargs", ",", "\n", "tensorboard_log", "=", "filename", "+", "'/tb/'", ",", "\n", "verbose", "=", "1", "\n", ")", "\n", "", "if", "algo", "==", "'td3'", ":", "\n", "        ", "model", "=", "TD3", "(", "td3ddpgMlpPolicy", ",", "\n", "train_env", ",", "\n", "policy_kwargs", "=", "offpolicy_kwargs", ",", "\n", "tensorboard_log", "=", "filename", "+", "'/tb/'", ",", "\n", "verbose", "=", "1", "\n", ")", "if", "obs", "==", "ObservationType", ".", "KIN", "else", "TD3", "(", "td3ddpgCnnPolicy", ",", "\n", "train_env", ",", "\n", "policy_kwargs", "=", "offpolicy_kwargs", ",", "\n", "tensorboard_log", "=", "filename", "+", "'/tb/'", ",", "\n", "verbose", "=", "1", "\n", ")", "\n", "", "if", "algo", "==", "'ddpg'", ":", "\n", "        ", "model", "=", "DDPG", "(", "td3ddpgMlpPolicy", ",", "\n", "train_env", ",", "\n", "policy_kwargs", "=", "offpolicy_kwargs", ",", "\n", "tensorboard_log", "=", "filename", "+", "'/tb/'", ",", "\n", "verbose", "=", "1", "\n", ")", "if", "obs", "==", "ObservationType", ".", "KIN", "else", "DDPG", "(", "td3ddpgCnnPolicy", ",", "\n", "train_env", ",", "\n", "policy_kwargs", "=", "offpolicy_kwargs", ",", "\n", "tensorboard_log", "=", "filename", "+", "'/tb/'", ",", "\n", "verbose", "=", "1", "\n", ")", "\n", "\n", "#### Create eveluation environment #########################", "\n", "", "if", "obs", "==", "ObservationType", ".", "KIN", ":", "\n", "        ", "eval_env", "=", "gym", ".", "make", "(", "env_name", ",", "\n", "aggregate_phy_steps", "=", "shared_constants", ".", "AGGR_PHY_STEPS", ",", "\n", "obs", "=", "obs", ",", "\n", "act", "=", "act", "\n", ")", "\n", "", "elif", "obs", "==", "ObservationType", ".", "RGB", ":", "\n", "        ", "if", "env_name", "==", "\"takeoff-aviary-v0\"", ":", "\n", "            ", "eval_env", "=", "make_vec_env", "(", "TakeoffAviary", ",", "\n", "env_kwargs", "=", "sa_env_kwargs", ",", "\n", "n_envs", "=", "1", ",", "\n", "seed", "=", "0", "\n", ")", "\n", "", "if", "env_name", "==", "\"hover-aviary-v0\"", ":", "\n", "            ", "eval_env", "=", "make_vec_env", "(", "HoverAviary", ",", "\n", "env_kwargs", "=", "sa_env_kwargs", ",", "\n", "n_envs", "=", "1", ",", "\n", "seed", "=", "0", "\n", ")", "\n", "", "if", "env_name", "==", "\"flythrugate-aviary-v0\"", ":", "\n", "            ", "eval_env", "=", "make_vec_env", "(", "FlyThruGateAviary", ",", "\n", "env_kwargs", "=", "sa_env_kwargs", ",", "\n", "n_envs", "=", "1", ",", "\n", "seed", "=", "0", "\n", ")", "\n", "", "if", "env_name", "==", "\"tune-aviary-v0\"", ":", "\n", "            ", "eval_env", "=", "make_vec_env", "(", "TuneAviary", ",", "\n", "env_kwargs", "=", "sa_env_kwargs", ",", "\n", "n_envs", "=", "1", ",", "\n", "seed", "=", "0", "\n", ")", "\n", "", "eval_env", "=", "VecTransposeImage", "(", "eval_env", ")", "\n", "\n", "#### Train the model #######################################", "\n", "# checkpoint_callback = CheckpointCallback(save_freq=1000, save_path=filename+'-logs/', name_prefix='rl_model')", "\n", "", "callback_on_best", "=", "StopTrainingOnRewardThreshold", "(", "reward_threshold", "=", "EPISODE_REWARD_THRESHOLD", ",", "\n", "verbose", "=", "1", "\n", ")", "\n", "eval_callback", "=", "EvalCallback", "(", "eval_env", ",", "\n", "callback_on_new_best", "=", "callback_on_best", ",", "\n", "verbose", "=", "1", ",", "\n", "best_model_save_path", "=", "filename", "+", "'/'", ",", "\n", "log_path", "=", "filename", "+", "'/'", ",", "\n", "eval_freq", "=", "int", "(", "2000", "/", "cpu", ")", ",", "\n", "deterministic", "=", "True", ",", "\n", "render", "=", "False", "\n", ")", "\n", "model", ".", "learn", "(", "total_timesteps", "=", "steps", ",", "#int(1e12),", "\n", "callback", "=", "eval_callback", ",", "\n", "log_interval", "=", "100", ",", "\n", ")", "\n", "\n", "#### Save the model ########################################", "\n", "model", ".", "save", "(", "filename", "+", "'/success_model.zip'", ")", "\n", "print", "(", "filename", ")", "\n", "\n", "#### Print training progression ############################", "\n", "with", "np", ".", "load", "(", "filename", "+", "'/evaluations.npz'", ")", "as", "data", ":", "\n", "        ", "for", "j", "in", "range", "(", "data", "[", "'timesteps'", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "print", "(", "str", "(", "data", "[", "'timesteps'", "]", "[", "j", "]", ")", "+", "\",\"", "+", "str", "(", "data", "[", "'results'", "]", "[", "j", "]", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.multiagent.CustomTorchCentralizedCriticModel.__init__": [[82, 100], ["ray.rllib.models.torch.torch_modelv2.TorchModelV2.__init__", "torch.Module.__init__", "torch.Module.__init__", "ray.rllib.models.torch.fcnet.FullyConnectedNetwork", "ray.rllib.models.torch.fcnet.FullyConnectedNetwork", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "obs_space", ",", "action_space", ",", "num_outputs", ",", "model_config", ",", "name", ")", ":", "\n", "        ", "TorchModelV2", ".", "__init__", "(", "self", ",", "obs_space", ",", "action_space", ",", "num_outputs", ",", "model_config", ",", "name", ")", "\n", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "action_model", "=", "FullyConnectedNetwork", "(", "\n", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "OWN_OBS_VEC_SIZE", ",", ")", ")", ",", "\n", "action_space", ",", "\n", "num_outputs", ",", "\n", "model_config", ",", "\n", "name", "+", "\"_action\"", "\n", ")", "\n", "self", ".", "value_model", "=", "FullyConnectedNetwork", "(", "\n", "obs_space", ",", "\n", "action_space", ",", "\n", "1", ",", "\n", "model_config", ",", "\n", "name", "+", "\"_vf\"", "\n", ")", "\n", "self", ".", "_model_in", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.multiagent.CustomTorchCentralizedCriticModel.forward": [[101, 104], ["multiagent.CustomTorchCentralizedCriticModel.action_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_dict", ",", "state", ",", "seq_lens", ")", ":", "\n", "        ", "self", ".", "_model_in", "=", "[", "input_dict", "[", "\"obs_flat\"", "]", ",", "state", ",", "seq_lens", "]", "\n", "return", "self", ".", "action_model", "(", "{", "\"obs\"", ":", "input_dict", "[", "\"obs\"", "]", "[", "\"own_obs\"", "]", "}", ",", "state", ",", "seq_lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.multiagent.CustomTorchCentralizedCriticModel.value_function": [[105, 108], ["multiagent.CustomTorchCentralizedCriticModel.value_model", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape"], "methods", ["None"], ["", "def", "value_function", "(", "self", ")", ":", "\n", "        ", "value_out", ",", "_", "=", "self", ".", "value_model", "(", "{", "\"obs\"", ":", "self", ".", "_model_in", "[", "0", "]", "}", ",", "self", ".", "_model_in", "[", "1", "]", ",", "self", ".", "_model_in", "[", "2", "]", ")", "\n", "return", "torch", ".", "reshape", "(", "value_out", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.multiagent.FillInActions.on_postprocess_trajectory": [[111, 122], ["ray.rllib.models.ModelCatalog.get_preprocessor_for_space", "numpy.array", "gym.spaces.Box", "ray.rllib.models.ModelCatalog.get_preprocessor_for_space.transform", "numpy.clip"], "methods", ["None"], ["    ", "def", "on_postprocess_trajectory", "(", "self", ",", "worker", ",", "episode", ",", "agent_id", ",", "policy_id", ",", "policies", ",", "postprocessed_batch", ",", "original_batches", ",", "**", "kwargs", ")", ":", "\n", "        ", "to_update", "=", "postprocessed_batch", "[", "SampleBatch", ".", "CUR_OBS", "]", "\n", "other_id", "=", "1", "if", "agent_id", "==", "0", "else", "0", "\n", "action_encoder", "=", "ModelCatalog", ".", "get_preprocessor_for_space", "(", "\n", "# Box(-np.inf, np.inf, (ACTION_VEC_SIZE,), np.float32) # Unbounded", "\n", "Box", "(", "-", "1", ",", "1", ",", "(", "ACTION_VEC_SIZE", ",", ")", ",", "np", ".", "float32", ")", "# Bounded", "\n", ")", "\n", "_", ",", "opponent_batch", "=", "original_batches", "[", "other_id", "]", "\n", "# opponent_actions = np.array([action_encoder.transform(a) for a in opponent_batch[SampleBatch.ACTIONS]]) # Unbounded", "\n", "opponent_actions", "=", "np", ".", "array", "(", "[", "action_encoder", ".", "transform", "(", "np", ".", "clip", "(", "a", ",", "-", "1", ",", "1", ")", ")", "for", "a", "in", "opponent_batch", "[", "SampleBatch", ".", "ACTIONS", "]", "]", ")", "# Bounded", "\n", "to_update", "[", ":", ",", "-", "ACTION_VEC_SIZE", ":", "]", "=", "opponent_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.multiagent.central_critic_observer": [[124, 138], ["numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "", "def", "central_critic_observer", "(", "agent_obs", ",", "**", "kw", ")", ":", "\n", "    ", "new_obs", "=", "{", "\n", "0", ":", "{", "\n", "\"own_obs\"", ":", "agent_obs", "[", "0", "]", ",", "\n", "\"opponent_obs\"", ":", "agent_obs", "[", "1", "]", ",", "\n", "\"opponent_action\"", ":", "np", ".", "zeros", "(", "ACTION_VEC_SIZE", ")", ",", "# Filled in by FillInActions", "\n", "}", ",", "\n", "1", ":", "{", "\n", "\"own_obs\"", ":", "agent_obs", "[", "1", "]", ",", "\n", "\"opponent_obs\"", ":", "agent_obs", "[", "0", "]", ",", "\n", "\"opponent_action\"", ":", "np", ".", "zeros", "(", "ACTION_VEC_SIZE", ")", ",", "# Filled in by FillInActions", "\n", "}", ",", "\n", "}", "\n", "return", "new_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_singleagent.run": [[49, 134], ["os.path.isfile", "gym.make", "stable_baselines3.common.evaluation.evaluate_policy", "print", "gym.make", "gym_pybullet_drones.utils.Logger.Logger", "gym.make.reset", "time.time", "range", "gym.make.close", "gym_pybullet_drones.utils.Logger.Logger.save_as_csv", "exp.split", "os.path.isfile", "stable_baselines3.A2C.load", "stable_baselines3.PPO.load", "stable_baselines3.SAC.load", "stable_baselines3.TD3.load", "stable_baselines3.DDPG.load", "DDPG.load.predict", "gym.make.step", "gym.make.render", "gym_pybullet_drones.utils.utils.sync", "gym_pybullet_drones.utils.Logger.Logger.plot", "print", "exp.split", "exp.split", "int", "int", "gym_pybullet_drones.utils.Logger.Logger.log", "numpy.floor", "exp.split", "exp.split", "exp.split", "numpy.hstack", "numpy.zeros", "exp.split", "exp.split", "numpy.zeros", "numpy.resize", "exp.split", "exp.split", "exp.split"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.assignments.aer1216_fall2020_hw1_ctrl.HW1Control.reset", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.close", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.save_as_csv", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.step", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.envs.BaseAviary.BaseAviary.render", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.utils.sync", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.plot", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.utils.Logger.Logger.log"], ["def", "run", "(", "exp", ",", "gui", "=", "DEFAULT_GUI", ",", "plot", "=", "DEFAULT_PLOT", ",", "output_folder", "=", "DEFAULT_OUTPUT_FOLDER", ")", ":", "\n", "#### Load the model from file ##############################", "\n", "    ", "algo", "=", "exp", ".", "split", "(", "\"-\"", ")", "[", "2", "]", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "exp", "+", "'/success_model.zip'", ")", ":", "\n", "        ", "path", "=", "exp", "+", "'/success_model.zip'", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "exp", "+", "'/best_model.zip'", ")", ":", "\n", "        ", "path", "=", "exp", "+", "'/best_model.zip'", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"[ERROR]: no model under the specified path\"", ",", "exp", ")", "\n", "", "if", "algo", "==", "'a2c'", ":", "\n", "        ", "model", "=", "A2C", ".", "load", "(", "path", ")", "\n", "", "if", "algo", "==", "'ppo'", ":", "\n", "        ", "model", "=", "PPO", ".", "load", "(", "path", ")", "\n", "", "if", "algo", "==", "'sac'", ":", "\n", "        ", "model", "=", "SAC", ".", "load", "(", "path", ")", "\n", "", "if", "algo", "==", "'td3'", ":", "\n", "        ", "model", "=", "TD3", ".", "load", "(", "path", ")", "\n", "", "if", "algo", "==", "'ddpg'", ":", "\n", "        ", "model", "=", "DDPG", ".", "load", "(", "path", ")", "\n", "\n", "#### Parameters to recreate the environment ################", "\n", "", "env_name", "=", "exp", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "+", "\"-aviary-v0\"", "\n", "OBS", "=", "ObservationType", ".", "KIN", "if", "exp", ".", "split", "(", "\"-\"", ")", "[", "3", "]", "==", "'kin'", "else", "ObservationType", ".", "RGB", "\n", "if", "exp", ".", "split", "(", "\"-\"", ")", "[", "4", "]", "==", "'rpm'", ":", "\n", "        ", "ACT", "=", "ActionType", ".", "RPM", "\n", "", "elif", "exp", ".", "split", "(", "\"-\"", ")", "[", "4", "]", "==", "'dyn'", ":", "\n", "        ", "ACT", "=", "ActionType", ".", "DYN", "\n", "", "elif", "exp", ".", "split", "(", "\"-\"", ")", "[", "4", "]", "==", "'pid'", ":", "\n", "        ", "ACT", "=", "ActionType", ".", "PID", "\n", "", "elif", "exp", ".", "split", "(", "\"-\"", ")", "[", "4", "]", "==", "'vel'", ":", "\n", "        ", "ACT", "=", "ActionType", ".", "VEL", "\n", "", "elif", "exp", ".", "split", "(", "\"-\"", ")", "[", "4", "]", "==", "'tun'", ":", "\n", "        ", "ACT", "=", "ActionType", ".", "TUN", "\n", "", "elif", "exp", ".", "split", "(", "\"-\"", ")", "[", "4", "]", "==", "'one_d_rpm'", ":", "\n", "        ", "ACT", "=", "ActionType", ".", "ONE_D_RPM", "\n", "", "elif", "exp", ".", "split", "(", "\"-\"", ")", "[", "4", "]", "==", "'one_d_dyn'", ":", "\n", "        ", "ACT", "=", "ActionType", ".", "ONE_D_DYN", "\n", "", "elif", "exp", ".", "split", "(", "\"-\"", ")", "[", "4", "]", "==", "'one_d_pid'", ":", "\n", "        ", "ACT", "=", "ActionType", ".", "ONE_D_PID", "\n", "\n", "#### Evaluate the model ####################################", "\n", "", "eval_env", "=", "gym", ".", "make", "(", "env_name", ",", "\n", "aggregate_phy_steps", "=", "shared_constants", ".", "AGGR_PHY_STEPS", ",", "\n", "obs", "=", "OBS", ",", "\n", "act", "=", "ACT", "\n", ")", "\n", "mean_reward", ",", "std_reward", "=", "evaluate_policy", "(", "model", ",", "\n", "eval_env", ",", "\n", "n_eval_episodes", "=", "10", "\n", ")", "\n", "print", "(", "\"\\n\\n\\nMean reward \"", ",", "mean_reward", ",", "\" +- \"", ",", "std_reward", ",", "\"\\n\\n\"", ")", "\n", "\n", "#### Show, record a video, and log the model's performance #", "\n", "test_env", "=", "gym", ".", "make", "(", "env_name", ",", "\n", "gui", "=", "gui", ",", "\n", "record", "=", "False", ",", "\n", "aggregate_phy_steps", "=", "shared_constants", ".", "AGGR_PHY_STEPS", ",", "\n", "obs", "=", "OBS", ",", "\n", "act", "=", "ACT", "\n", ")", "\n", "logger", "=", "Logger", "(", "logging_freq_hz", "=", "int", "(", "test_env", ".", "SIM_FREQ", "/", "test_env", ".", "AGGR_PHY_STEPS", ")", ",", "\n", "num_drones", "=", "1", ",", "\n", "output_folder", "=", "output_folder", "\n", ")", "\n", "obs", "=", "test_env", ".", "reset", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "6", "*", "int", "(", "test_env", ".", "SIM_FREQ", "/", "test_env", ".", "AGGR_PHY_STEPS", ")", ")", ":", "# Up to 6''", "\n", "        ", "action", ",", "_states", "=", "model", ".", "predict", "(", "obs", ",", "\n", "deterministic", "=", "True", "# OPTIONAL 'deterministic=False'", "\n", ")", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "test_env", ".", "step", "(", "action", ")", "\n", "test_env", ".", "render", "(", ")", "\n", "if", "OBS", "==", "ObservationType", ".", "KIN", ":", "\n", "            ", "logger", ".", "log", "(", "drone", "=", "0", ",", "\n", "timestamp", "=", "i", "/", "test_env", ".", "SIM_FREQ", ",", "\n", "state", "=", "np", ".", "hstack", "(", "[", "obs", "[", "0", ":", "3", "]", ",", "np", ".", "zeros", "(", "4", ")", ",", "obs", "[", "3", ":", "15", "]", ",", "np", ".", "resize", "(", "action", ",", "(", "4", ")", ")", "]", ")", ",", "\n", "control", "=", "np", ".", "zeros", "(", "12", ")", "\n", ")", "\n", "", "sync", "(", "np", ".", "floor", "(", "i", "*", "test_env", ".", "AGGR_PHY_STEPS", ")", ",", "start", ",", "test_env", ".", "TIMESTEP", ")", "\n", "# if done: obs = test_env.reset() # OPTIONAL EPISODE HALT", "\n", "", "test_env", ".", "close", "(", ")", "\n", "logger", ".", "save_as_csv", "(", "\"sa\"", ")", "# Optional CSV save", "\n", "if", "plot", ":", "\n", "        ", "logger", ".", "plot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__": [[68, 86], ["ray.rllib.models.torch.torch_modelv2.TorchModelV2.__init__", "torch.Module.__init__", "torch.Module.__init__", "ray.rllib.models.torch.fcnet.FullyConnectedNetwork", "ray.rllib.models.torch.fcnet.FullyConnectedNetwork", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__", "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.__init__"], ["def", "__init__", "(", "self", ",", "obs_space", ",", "action_space", ",", "num_outputs", ",", "model_config", ",", "name", ")", ":", "\n", "        ", "TorchModelV2", ".", "__init__", "(", "self", ",", "obs_space", ",", "action_space", ",", "num_outputs", ",", "model_config", ",", "name", ")", "\n", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "action_model", "=", "FullyConnectedNetwork", "(", "\n", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "1", ",", "shape", "=", "(", "OWN_OBS_VEC_SIZE", ",", ")", ")", ",", "\n", "action_space", ",", "\n", "num_outputs", ",", "\n", "model_config", ",", "\n", "name", "+", "\"_action\"", "\n", ")", "\n", "self", ".", "value_model", "=", "FullyConnectedNetwork", "(", "\n", "obs_space", ",", "\n", "action_space", ",", "\n", "1", ",", "\n", "model_config", ",", "\n", "name", "+", "\"_vf\"", "\n", ")", "\n", "self", ".", "_model_in", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.forward": [[87, 90], ["test_multiagent.CustomTorchCentralizedCriticModel.action_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_dict", ",", "state", ",", "seq_lens", ")", ":", "\n", "        ", "self", ".", "_model_in", "=", "[", "input_dict", "[", "\"obs_flat\"", "]", ",", "state", ",", "seq_lens", "]", "\n", "return", "self", ".", "action_model", "(", "{", "\"obs\"", ":", "input_dict", "[", "\"obs\"", "]", "[", "\"own_obs\"", "]", "}", ",", "state", ",", "seq_lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.CustomTorchCentralizedCriticModel.value_function": [[91, 94], ["test_multiagent.CustomTorchCentralizedCriticModel.value_model", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape"], "methods", ["None"], ["", "def", "value_function", "(", "self", ")", ":", "\n", "        ", "value_out", ",", "_", "=", "self", ".", "value_model", "(", "{", "\"obs\"", ":", "self", ".", "_model_in", "[", "0", "]", "}", ",", "self", ".", "_model_in", "[", "1", "]", ",", "self", ".", "_model_in", "[", "2", "]", ")", "\n", "return", "torch", ".", "reshape", "(", "value_out", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.FillInActions.on_postprocess_trajectory": [[97, 108], ["ray.rllib.models.ModelCatalog.get_preprocessor_for_space", "numpy.array", "gym.spaces.Box", "ray.rllib.models.ModelCatalog.get_preprocessor_for_space.transform", "numpy.clip"], "methods", ["None"], ["    ", "def", "on_postprocess_trajectory", "(", "self", ",", "worker", ",", "episode", ",", "agent_id", ",", "policy_id", ",", "policies", ",", "postprocessed_batch", ",", "original_batches", ",", "**", "kwargs", ")", ":", "\n", "        ", "to_update", "=", "postprocessed_batch", "[", "SampleBatch", ".", "CUR_OBS", "]", "\n", "other_id", "=", "1", "if", "agent_id", "==", "0", "else", "0", "\n", "action_encoder", "=", "ModelCatalog", ".", "get_preprocessor_for_space", "(", "\n", "# Box(-np.inf, np.inf, (ACTION_VEC_SIZE,), np.float32) # Unbounded", "\n", "Box", "(", "-", "1", ",", "1", ",", "(", "ACTION_VEC_SIZE", ",", ")", ",", "np", ".", "float32", ")", "# Bounded", "\n", ")", "\n", "_", ",", "opponent_batch", "=", "original_batches", "[", "other_id", "]", "\n", "# opponent_actions = np.array([action_encoder.transform(a) for a in opponent_batch[SampleBatch.ACTIONS]]) # Unbounded", "\n", "opponent_actions", "=", "np", ".", "array", "(", "[", "action_encoder", ".", "transform", "(", "np", ".", "clip", "(", "a", ",", "-", "1", ",", "1", ")", ")", "for", "a", "in", "opponent_batch", "[", "SampleBatch", ".", "ACTIONS", "]", "]", ")", "# Bounded", "\n", "to_update", "[", ":", ",", "-", "ACTION_VEC_SIZE", ":", "]", "=", "opponent_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_multiagent.central_critic_observer": [[110, 124], ["numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "", "def", "central_critic_observer", "(", "agent_obs", ",", "**", "kw", ")", ":", "\n", "    ", "new_obs", "=", "{", "\n", "0", ":", "{", "\n", "\"own_obs\"", ":", "agent_obs", "[", "0", "]", ",", "\n", "\"opponent_obs\"", ":", "agent_obs", "[", "1", "]", ",", "\n", "\"opponent_action\"", ":", "np", ".", "zeros", "(", "ACTION_VEC_SIZE", ")", ",", "# Filled in by FillInActions", "\n", "}", ",", "\n", "1", ":", "{", "\n", "\"own_obs\"", ":", "agent_obs", "[", "1", "]", ",", "\n", "\"opponent_obs\"", ":", "agent_obs", "[", "0", "]", ",", "\n", "\"opponent_action\"", ":", "np", ".", "zeros", "(", "ACTION_VEC_SIZE", ")", ",", "# Filled in by FillInActions", "\n", "}", ",", "\n", "}", "\n", "return", "new_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.tests.test_experiments.test_single_agent": [[4, 16], ["set", "sys.path.append", "run_train", "set", "run_test", "glob.glob", "glob.glob", "len", "next().split", "next", "iter"], "function", ["None"], ["def", "test_single_agent", "(", ")", ":", "\n", "    ", "initial_models", "=", "set", "(", "glob", ".", "glob", "(", "'**/best_model.zip'", ",", "recursive", "=", "True", ")", ")", "\n", "sys", ".", "path", ".", "append", "(", "'experiments/learning/'", ")", "\n", "from", "experiments", ".", "learning", ".", "singleagent", "import", "run", "as", "run_train", "\n", "run_train", "(", "steps", "=", "30", ",", "output_folder", "=", "'tmp'", ")", "\n", "\n", "from", "experiments", ".", "learning", ".", "test_singleagent", "import", "run", "as", "run_test", "\n", "new_models", "=", "set", "(", "glob", ".", "glob", "(", "'**/best_model.zip'", ",", "recursive", "=", "True", ")", ")", "\n", "test_model", "=", "new_models", "-", "initial_models", "\n", "assert", "len", "(", "test_model", ")", ">", "0", ",", "initial_models", "\n", "path", "=", "'/'", ".", "join", "(", "next", "(", "iter", "(", "test_model", ")", ")", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "run_test", "(", "path", ",", "plot", "=", "False", ",", "gui", "=", "False", ",", "output_folder", "=", "'tmp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.tests.test_examples.test_compare": [[1, 4], ["run"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_singleagent.run"], ["def", "test_compare", "(", ")", ":", "\n", "    ", "from", "gym_pybullet_drones", ".", "examples", ".", "compare", "import", "run", "\n", "run", "(", "gui", "=", "False", ",", "plot", "=", "False", ",", "output_folder", "=", "'tmp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.tests.test_examples.test_downwash": [[5, 8], ["run"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_singleagent.run"], ["", "def", "test_downwash", "(", ")", ":", "\n", "    ", "from", "gym_pybullet_drones", ".", "examples", ".", "downwash", "import", "run", "\n", "run", "(", "gui", "=", "False", ",", "plot", "=", "False", ",", "output_folder", "=", "'tmp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.tests.test_examples.test_fly": [[9, 12], ["run"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_singleagent.run"], ["", "def", "test_fly", "(", ")", ":", "\n", "    ", "from", "gym_pybullet_drones", ".", "examples", ".", "fly", "import", "run", "\n", "run", "(", "gui", "=", "False", ",", "plot", "=", "False", ",", "output_folder", "=", "'tmp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.tests.test_examples.test_groundeffect": [[13, 16], ["run"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_singleagent.run"], ["", "def", "test_groundeffect", "(", ")", ":", "\n", "    ", "from", "gym_pybullet_drones", ".", "examples", ".", "groundeffect", "import", "run", "\n", "run", "(", "gui", "=", "False", ",", "plot", "=", "False", ",", "output_folder", "=", "'tmp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.tests.test_examples.test_learn": [[17, 20], ["run"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_singleagent.run"], ["", "def", "test_learn", "(", ")", ":", "\n", "    ", "from", "gym_pybullet_drones", ".", "examples", ".", "learn", "import", "run", "\n", "run", "(", "gui", "=", "False", ",", "plot", "=", "False", ",", "output_folder", "=", "'tmp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.tests.test_examples.test_velocity": [[21, 24], ["run"], "function", ["home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.learning.test_singleagent.run"], ["", "def", "test_velocity", "(", ")", ":", "\n", "    ", "from", "gym_pybullet_drones", ".", "examples", ".", "velocity", "import", "run", "\n", "run", "(", "gui", "=", "False", ",", "plot", "=", "False", ",", "output_folder", "=", "'tmp'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.utiasDSL_gym-pybullet-drones.tests.test_build.test_imports": [[1, 7], ["None"], "function", ["None"], ["def", "test_imports", "(", ")", ":", "\n", "    ", "import", "gym_pybullet_drones", "\n", "import", "gym_pybullet_drones", ".", "control", "\n", "import", "gym_pybullet_drones", ".", "envs", "\n", "import", "gym_pybullet_drones", ".", "examples", "\n", "import", "gym_pybullet_drones", ".", "utils", "\n", "", ""]]}