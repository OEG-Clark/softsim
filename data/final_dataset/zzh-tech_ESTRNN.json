{"home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.__init__": [[10, 21], ["now.strftime.strftime.strftime", "os.path.join", "os.path.dirname", "logger.Logger.check_dir", "open", "datetime.datetime.datetime.now", "vars"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.check_dir"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "self", ".", "para", "=", "para", "\n", "now", "=", "datetime", ".", "now", "(", ")", "if", "'time'", "not", "in", "vars", "(", "para", ")", "else", "para", ".", "time", "\n", "now", "=", "now", ".", "strftime", "(", "\"%Y_%m_%d_%H_%M_%S\"", ")", "\n", "mark", "=", "para", ".", "model", "+", "'_'", "+", "para", ".", "dataset", "\n", "file_path", "=", "join", "(", "para", ".", "save_dir", ",", "now", "+", "'_'", "+", "mark", ",", "'log.txt'", ")", "\n", "self", ".", "save_dir", "=", "dirname", "(", "file_path", ")", "\n", "self", ".", "check_dir", "(", "file_path", ")", "\n", "self", ".", "logger", "=", "open", "(", "file_path", ",", "'a+'", ")", "\n", "# variable register", "\n", "self", ".", "register_dict", "=", "{", "}", "\n", "# tensorboard", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.record_para": [[23, 27], ["logger.Logger.", "vars().items", "logger.Logger.", "vars"], "methods", ["None"], ["", "def", "record_para", "(", "self", ")", ":", "\n", "        ", "self", "(", "'recording parameters ...'", ")", "\n", "for", "key", ",", "value", "in", "vars", "(", "self", ".", "para", ")", ".", "items", "(", ")", ":", "\n", "            ", "self", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ",", "timestamp", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.check_dir": [[28, 31], ["os.path.dirname", "os.makedirs"], "methods", ["None"], ["", "", "def", "check_dir", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "dir", "=", "dirname", "(", "file_path", ")", "\n", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.__call__": [[32, 47], ["logger.Logger.logger.write", "logger.Logger.logger.flush", "datetime.datetime.datetime.now", "now.strftime.strftime.strftime", "print", "isinstance", "str"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "verbose", "=", "True", ",", "prefix", "=", "''", ",", "timestamp", "=", "True", ")", ":", "\n", "        ", "if", "timestamp", ":", "\n", "            ", "now", "=", "datetime", ".", "now", "(", ")", "\n", "now", "=", "now", ".", "strftime", "(", "\"%Y/%m/%d, %H:%M:%S - \"", ")", "\n", "", "else", ":", "\n", "            ", "now", "=", "''", "\n", "", "info", "=", "prefix", "+", "now", "\n", "for", "msg", "in", "args", ":", "\n", "            ", "if", "not", "isinstance", "(", "msg", ",", "str", ")", ":", "\n", "                ", "msg", "=", "str", "(", "msg", ")", "\n", "", "info", "+=", "msg", "+", "'\\n'", "\n", "", "self", ".", "logger", ".", "write", "(", "info", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "info", ",", "end", "=", "''", ")", "\n", "", "self", ".", "logger", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.__del__": [[48, 50], ["logger.Logger.logger.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.register": [[52, 64], ["None"], "methods", ["None"], ["", "def", "register", "(", "self", ",", "name", ",", "epoch", ",", "value", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "register_dict", ":", "\n", "            ", "self", ".", "register_dict", "[", "name", "]", "[", "epoch", "]", "=", "value", "\n", "if", "value", ">", "self", ".", "register_dict", "[", "name", "]", "[", "'max'", "]", ":", "\n", "                ", "self", ".", "register_dict", "[", "name", "]", "[", "'max'", "]", "=", "value", "\n", "", "if", "value", "<", "self", ".", "register_dict", "[", "name", "]", "[", "'min'", "]", ":", "\n", "                ", "self", ".", "register_dict", "[", "name", "]", "[", "'min'", "]", "=", "value", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "register_dict", "[", "name", "]", "=", "{", "}", "\n", "self", ".", "register_dict", "[", "name", "]", "[", "epoch", "]", "=", "value", "\n", "self", ".", "register_dict", "[", "name", "]", "[", "'max'", "]", "=", "value", "\n", "self", ".", "register_dict", "[", "name", "]", "[", "'min'", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.report": [[65, 79], ["range", "logger.Logger.", "state.lower", "state.lower", "len", "len"], "methods", ["None"], ["", "", "def", "report", "(", "self", ",", "items", ",", "state", ",", "epoch", ")", ":", "\n", "# items - [['MSE', 'min'], ['PSNR', 'max'] ... ]", "\n", "        ", "msg", "=", "'[{}] '", ".", "format", "(", "state", ".", "lower", "(", ")", ")", "\n", "state", "=", "'_'", "+", "state", ".", "lower", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "items", ")", ")", ":", "\n", "            ", "item", ",", "best", "=", "items", "[", "i", "]", "\n", "msg", "+=", "'{} : {:.4f} (best {:.4f})'", ".", "format", "(", "\n", "item", ",", "\n", "self", ".", "register_dict", "[", "item", "+", "state", "]", "[", "epoch", "]", ",", "\n", "self", ".", "register_dict", "[", "item", "+", "state", "]", "[", "best", "]", "\n", ")", "\n", "if", "i", "<", "len", "(", "items", ")", "-", "1", ":", "\n", "                ", "msg", "+=", "', '", "\n", "", "", "self", "(", "msg", ",", "timestamp", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.is_best": [[80, 83], ["None"], "methods", ["None"], ["", "def", "is_best", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "item", "=", "self", ".", "register_dict", "[", "self", ".", "para", ".", "loss", "+", "'_valid'", "]", "\n", "return", "item", "[", "epoch", "]", "==", "item", "[", "'min'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.save": [[84, 90], ["os.path.join", "torch.save", "logger.Logger.is_best", "os.path.join", "shutil.copy"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.save", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.is_best"], ["", "def", "save", "(", "self", ",", "state", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "        ", "path", "=", "join", "(", "self", ".", "save_dir", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "if", "self", ".", "is_best", "(", "state", "[", "'epoch'", "]", ")", ":", "\n", "            ", "copy_path", "=", "join", "(", "self", ".", "save_dir", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copy", "(", "path", ",", "copy_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.para.parameter.Parameter.__init__": [[5, 7], ["parameter.Parameter.extract_args"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.para.parameter.Parameter.extract_args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", "=", "self", ".", "extract_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.para.parameter.Parameter.extract_args": [[8, 82], ["argparse.ArgumentParser", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.add_argument", "parameter.Parameter.parser.parse_known_args"], "methods", ["None"], ["", "def", "extract_args", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Video Deblurring'", ")", "\n", "\n", "# experiment mark", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--description'", ",", "type", "=", "str", ",", "default", "=", "'develop'", ",", "help", "=", "'experiment description'", ")", "\n", "\n", "# global parameters", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "39", ",", "help", "=", "'random seed'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--threads'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'# of threads for dataloader'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--num_gpus'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'# of GPUs to use'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_profile'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show # of parameters and computation cost'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--profile_H'", ",", "type", "=", "int", ",", "default", "=", "720", ",", "\n", "help", "=", "'height of image to generate profile of model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--profile_W'", ",", "type", "=", "int", ",", "default", "=", "1280", ",", "\n", "help", "=", "'width of image to generate profile of model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ",", "help", "=", "'resume from checkpoint'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resume_file'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the path of checkpoint file for resume'", ")", "\n", "\n", "# data parameters", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'/home/zhong/Dataset/'", ",", "help", "=", "'the path of dataset'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'BSD'", ",", "help", "=", "'BSD, gopro_ds_lmdb, reds_lmdb'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "default", "=", "'./experiment/'", ",", "\n", "help", "=", "'directory to save logs of experiments'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--frames'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'# of frames of subsequence'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ds_config'", ",", "type", "=", "str", ",", "default", "=", "'2ms16ms'", ",", "help", "=", "'1ms8ms, 2ms16ms or 3ms24ms'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--data_format'", ",", "type", "=", "str", ",", "default", "=", "'RGB'", ",", "help", "=", "'RGB or RAW'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--patch_size'", ",", "type", "=", "int", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "\n", "# model parameters", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'ESTRNN'", ",", "help", "=", "'type of model to construct'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_features'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'base # of channels for Conv'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_blocks'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "help", "=", "'# of blocks in middle part of the model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--future_frames'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'use # of future frames'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--past_frames'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'use # of past frames'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--activation'", ",", "type", "=", "str", ",", "default", "=", "'gelu'", ",", "help", "=", "'activation function'", ")", "\n", "\n", "# loss parameters", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ",", "default", "=", "'1*L1_Charbonnier_loss_color'", ",", "\n", "help", "=", "'type of loss function, e.g. 1*MSE|1e-4*Perceptual'", ")", "\n", "\n", "# metrics parameters", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--metrics'", ",", "type", "=", "str", ",", "default", "=", "'PSNR'", ",", "help", "=", "'type of evaluation metrics'", ")", "\n", "\n", "# optimizer parameters", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'Adam'", ",", "help", "=", "'method of optimization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr_scheduler'", ",", "type", "=", "str", ",", "default", "=", "'cosine'", ",", "\n", "help", "=", "'learning rate adjustment stratedy'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'batch size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--milestones'", ",", "type", "=", "int", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "200", ",", "400", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--decay_gamma'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'decay rate'", ")", "\n", "\n", "# training parameters", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'first epoch number'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--end_epoch'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'last epoch number'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--trainer_mode'", ",", "type", "=", "str", ",", "default", "=", "'dp'", ",", "\n", "help", "=", "'trainer mode: distributed data parallel (ddp) or data parallel (dp)'", ")", "\n", "\n", "# test parameters", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_only'", ",", "action", "=", "'store_true'", ",", "help", "=", "'only do test'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_frames'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'frame size for test, if GPU memory is small, please reduce this value'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_save_dir'", ",", "type", "=", "str", ",", "help", "=", "'where to save test results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_checkpoint'", ",", "type", "=", "str", ",", "\n", "default", "=", "'./model/checkpoints/model_best.pth.tar'", ",", "\n", "help", "=", "'the path of checkpoint file for test'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--video'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, generate video results'", ")", "\n", "\n", "args", ",", "_", "=", "self", ".", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "args", ".", "normalize", "=", "True", "\n", "args", ".", "centralize", "=", "True", "\n", "\n", "return", "args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.ResBlock.__init__": [[10, 20], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "op.append", "arches.conv3x3", "op.append", "op.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "op", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "op", ".", "append", "(", "conv3x3", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "op", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                ", "op", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "", "self", ".", "main_branch", "=", "nn", ".", "Sequential", "(", "*", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.ResBlock.forward": [[21, 26], ["STRCNN.ResBlock.main_branch", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "main_branch", "(", "x", ")", "\n", "out", "+=", "x", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.Encoder.__init__": [[29, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.conv5x5", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ops.append", "STRCNN.ResBlock"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "future_frames", "=", "2", "\n", "self", ".", "past_frames", "=", "2", "\n", "c", "=", "3", "\n", "self", ".", "m1", "=", "nn", ".", "Sequential", "(", "\n", "conv5x5", "(", "c", "*", "(", "self", ".", "future_frames", "+", "1", "+", "self", ".", "past_frames", ")", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "conv3x3", "(", "64", ",", "32", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "num_blocks", "=", "4", "\n", "ops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "ops", ".", "append", "(", "ResBlock", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ")", ")", "\n", "", "self", ".", "m2", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.Encoder.forward": [[46, 53], ["STRCNN.Encoder.m1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "STRCNN.Encoder.m2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "f_last", ")", ":", "\n", "# x: (n,c,h,w) e.g. (4,3*5,256,256)", "\n", "        ", "h", "=", "self", ".", "m1", "(", "x", ")", "\n", "h", "=", "torch", ".", "cat", "(", "(", "h", ",", "f_last", ")", ",", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "m2", "(", "h", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.DTB.__init__": [[60, 66], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.ConstantPad2d", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "DTB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filter", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "bias", "=", "True", ")", "\n", "# after filter: (n,c,h-4,w-4)", "\n", "self", ".", "bias", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "True", ")", ".", "cuda", "(", ")", "\n", "self", ".", "pad", "=", "nn", ".", "ConstantPad2d", "(", "2", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.DTB.forward": [[67, 76], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "STRCNN.DTB.filter", "STRCNN.DTB.clamp", "STRCNN.DTB.pad", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h_last", ")", ":", "\n", "        ", "w", "=", "torch", ".", "cat", "(", "(", "x", ",", "h_last", ")", ",", "dim", "=", "1", ")", "\n", "w", "=", "self", ".", "filter", "(", "w", ")", "\n", "w", "=", "2", "*", "torch", ".", "abs", "(", "torch", ".", "sigmoid", "(", "w", ")", "-", "0.5", ")", "+", "self", ".", "bias", "\n", "w", "=", "w", ".", "clamp", "(", "0", ",", "1", ")", "\n", "w", "=", "self", ".", "pad", "(", "w", ")", "\n", "h", "=", "w", "*", "x", "+", "(", "1", "-", "w", ")", "*", "h_last", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.Decoder.__init__": [[79, 94], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ops.append", "arches.deconv4x4", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "arches.conv3x3", "torch.ReLU", "torch.ReLU", "torch.ReLU", "STRCNN.ResBlock"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.deconv4x4", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_blcoks", "=", "4", "\n", "ops", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blcoks", ")", ":", "\n", "            ", "ops", ".", "append", "(", "ResBlock", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ")", ")", "\n", "", "self", ".", "m1", "=", "nn", ".", "Sequential", "(", "*", "ops", ")", "\n", "self", ".", "m2", "=", "nn", ".", "Sequential", "(", "\n", "deconv4x4", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "conv3x3", "(", "64", ",", "3", ")", "\n", ")", "\n", "self", ".", "f", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "64", ",", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.Decoder.forward": [[96, 102], ["STRCNN.Decoder.m1", "STRCNN.Decoder.f", "STRCNN.Decoder.m2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "l", "=", "self", ".", "m1", "(", "x", ")", "\n", "f", "=", "self", ".", "f", "(", "l", ")", "\n", "l", "=", "self", ".", "m2", "(", "l", ")", "\n", "\n", "return", "l", ",", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.Model.__init__": [[105, 114], ["torch.Module.__init__", "STRCNN.Encoder", "STRCNN.DTB", "STRCNN.Decoder"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "para", "=", "None", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "para", "=", "para", "\n", "assert", "para", ".", "future_frames", "==", "2", "and", "para", ".", "past_frames", "==", "2", ",", "\"STRCNN+DTB, m=2\"", "\n", "self", ".", "future_frames", "=", "para", ".", "future_frames", "\n", "self", ".", "past_frames", "=", "para", ".", "past_frames", "\n", "self", ".", "encoder", "=", "Encoder", "(", "para", ")", "\n", "self", ".", "dtb", "=", "DTB", "(", "para", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "para", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.Model.forward": [[115, 132], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.reshape.reshape.reshape", "STRCNN.Model.encoder", "STRCNN.Model.dtb", "STRCNN.Model.decoder", "outputs.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "l.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "profile_flag", "=", "False", ")", ":", "\n", "# x: (n,f,c,h,w) e.g. (4,14,3,256,256)", "\n", "        ", "N", ",", "F", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "h_last", "=", "torch", ".", "zeros", "(", "N", ",", "64", ",", "H", "//", "2", ",", "W", "//", "2", ")", ".", "cuda", "(", ")", "\n", "f_last", "=", "torch", ".", "zeros", "(", "N", ",", "32", ",", "H", "//", "2", ",", "W", "//", "2", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "F", "-", "self", ".", "future_frames", "-", "self", ".", "past_frames", ")", ":", "\n", "            ", "inputs", "=", "x", "[", ":", ",", "i", ":", "i", "+", "self", ".", "past_frames", "+", "self", ".", "future_frames", "+", "1", "]", "\n", "inputs", "=", "inputs", ".", "reshape", "(", "N", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "h", "=", "self", ".", "encoder", "(", "inputs", ",", "f_last", ")", "\n", "h", "=", "self", ".", "dtb", "(", "h", ",", "h_last", ")", "\n", "l", ",", "f", "=", "self", ".", "decoder", "(", "h", ")", "\n", "outputs", ".", "append", "(", "l", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", "\n", "h_last", "=", "h", "\n", "f_last", "=", "f", "\n", "", "out", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.feed": [[134, 138], ["model"], "function", ["None"], ["", "", "def", "feed", "(", "model", ",", "iter_samples", ")", ":", "\n", "    ", "inputs", "=", "iter_samples", "[", "0", "]", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.STRCNN.cost_profile": [[140, 146], ["torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "thop.profile", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.profile"], ["", "def", "cost_profile", "(", "model", ",", "H", ",", "W", ",", "seq_length", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "1", ",", "seq_length", ",", "3", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "profile_flag", "=", "True", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "x", ",", "profile_flag", ")", ",", "verbose", "=", "False", ")", "\n", "\n", "return", "flops", ",", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.dense_layer.__init__": [[11, 15], ["torch.Module.__init__", "arches.conv3x3", "arches.actFunc"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "growthRate", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "dense_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "conv3x3", "(", "in_channels", ",", "growthRate", ")", "\n", "self", ".", "act", "=", "actFunc", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.dense_layer.forward": [[16, 20], ["ESTRNN.dense_layer.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN.dense_layer.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "act", "(", "self", ".", "conv", "(", "x", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.RDB.__init__": [[24, 33], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.conv1x1", "modules.append", "ESTRNN.dense_layer"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "growthRate", ",", "num_layer", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "RDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_channels_", "=", "in_channels", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layer", ")", ":", "\n", "            ", "modules", ".", "append", "(", "dense_layer", "(", "in_channels_", ",", "growthRate", ",", "activation", ")", ")", "\n", "in_channels_", "+=", "growthRate", "\n", "", "self", ".", "dense_layers", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "self", ".", "conv1x1", "=", "conv1x1", "(", "in_channels_", ",", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.RDB.forward": [[34, 39], ["ESTRNN.RDB.dense_layers", "ESTRNN.RDB.conv1x1"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dense_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1x1", "(", "out", ")", "\n", "out", "+=", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.RDNet.__init__": [[43, 51], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "arches.conv1x1", "arches.conv3x3", "ESTRNN.RDNet.RDBs.append", "ESTRNN.RDB"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "growthRate", ",", "num_layer", ",", "num_blocks", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "RDNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "RDBs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "self", ".", "RDBs", ".", "append", "(", "RDB", "(", "in_channels", ",", "growthRate", ",", "num_layer", ",", "activation", ")", ")", "\n", "", "self", ".", "conv1x1", "=", "conv1x1", "(", "num_blocks", "*", "in_channels", ",", "in_channels", ")", "\n", "self", ".", "conv3x3", "=", "conv3x3", "(", "in_channels", ",", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.RDNet.forward": [[52, 62], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN.RDNet.conv1x1", "ESTRNN.RDNet.conv3x3", "ESTRNN.RDNet.append"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "h", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "h", "=", "self", ".", "RDBs", "[", "i", "]", "(", "h", ")", "\n", "out", ".", "append", "(", "h", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "out", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv1x1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3x3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.RDB_DS.__init__": [[66, 70], ["torch.Module.__init__", "ESTRNN.RDB", "arches.conv5x5"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "growthRate", ",", "num_layer", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "RDB_DS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rdb", "=", "RDB", "(", "in_channels", ",", "growthRate", ",", "num_layer", ",", "activation", ")", "\n", "self", ".", "down_sampling", "=", "conv5x5", "(", "in_channels", ",", "2", "*", "in_channels", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.RDB_DS.forward": [[71, 77], ["ESTRNN.RDB_DS.rdb", "ESTRNN.RDB_DS.down_sampling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: n,c,h,w", "\n", "        ", "x", "=", "self", ".", "rdb", "(", "x", ")", "\n", "out", "=", "self", ".", "down_sampling", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.GSA.__init__": [[81, 103], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.conv1x1", "arches.conv1x1", "torch.Linear", "torch.Linear", "torch.Linear", "arches.actFunc", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "arches.conv1x1", "arches.conv1x1"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "GSA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_feats", "=", "para", ".", "n_features", "\n", "self", ".", "center", "=", "para", ".", "past_frames", "\n", "self", ".", "num_ff", "=", "para", ".", "future_frames", "\n", "self", ".", "num_fb", "=", "para", ".", "past_frames", "\n", "self", ".", "related_f", "=", "self", ".", "num_ff", "+", "1", "+", "self", ".", "num_fb", "\n", "self", ".", "F_f", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "4", "*", "(", "5", "*", "self", ".", "n_feats", ")", ")", ",", "\n", "actFunc", "(", "para", ".", "activation", ")", ",", "\n", "nn", ".", "Linear", "(", "4", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "2", "*", "(", "5", "*", "self", ".", "n_feats", ")", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "# out channel: 160", "\n", "self", ".", "F_p", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "2", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "4", "*", "(", "5", "*", "self", ".", "n_feats", ")", ")", ",", "\n", "conv1x1", "(", "4", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "2", "*", "(", "5", "*", "self", ".", "n_feats", ")", ")", "\n", ")", "\n", "# condense layer", "\n", "self", ".", "condense", "=", "conv1x1", "(", "2", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "5", "*", "self", ".", "n_feats", ")", "\n", "# fusion layer", "\n", "self", ".", "fusion", "=", "conv1x1", "(", "self", ".", "related_f", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "self", ".", "related_f", "*", "(", "5", "*", "self", ".", "n_feats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.GSA.forward": [[104, 124], ["len", "range", "cor_l.append", "ESTRNN.GSA.fusion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.adaptive_avg_pool2d().squeeze", "torch.adaptive_avg_pool2d().squeeze", "torch.adaptive_avg_pool2d().squeeze", "ESTRNN.GSA.F_f", "w.unsqueeze.unsqueeze.reshape", "ESTRNN.GSA.F_p", "ESTRNN.GSA.condense", "cor_l.append", "len", "w.unsqueeze.unsqueeze.unsqueeze", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hs", ")", ":", "\n", "# hs: [(n=4,c=80,h=64,w=64), ..., (n,c,h,w)]", "\n", "        ", "self", ".", "nframes", "=", "len", "(", "hs", ")", "\n", "f_ref", "=", "hs", "[", "self", ".", "center", "]", "\n", "cor_l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nframes", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "center", ":", "\n", "                ", "cor", "=", "torch", ".", "cat", "(", "[", "f_ref", ",", "hs", "[", "i", "]", "]", ",", "dim", "=", "1", ")", "\n", "w", "=", "F", ".", "adaptive_avg_pool2d", "(", "cor", ",", "(", "1", ",", "1", ")", ")", ".", "squeeze", "(", ")", "# (n,c) : (4, 160)", "\n", "if", "len", "(", "w", ".", "shape", ")", "==", "1", ":", "\n", "                    ", "w", "=", "w", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "", "w", "=", "self", ".", "F_f", "(", "w", ")", "\n", "w", "=", "w", ".", "reshape", "(", "*", "w", ".", "shape", ",", "1", ",", "1", ")", "\n", "cor", "=", "self", ".", "F_p", "(", "cor", ")", "\n", "cor", "=", "self", ".", "condense", "(", "w", "*", "cor", ")", "\n", "cor_l", ".", "append", "(", "cor", ")", "\n", "", "", "cor_l", ".", "append", "(", "f_ref", ")", "\n", "out", "=", "self", ".", "fusion", "(", "torch", ".", "cat", "(", "cor_l", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.RDBCell.__init__": [[128, 144], ["torch.Module.__init__", "arches.conv5x5", "ESTRNN.RDB_DS", "ESTRNN.RDB_DS", "ESTRNN.RDNet", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.conv3x3", "ESTRNN.RDB", "arches.conv3x3", "int"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "RDBCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "para", ".", "activation", "\n", "self", ".", "n_feats", "=", "para", ".", "n_features", "\n", "self", ".", "n_blocks", "=", "para", ".", "n_blocks", "\n", "self", ".", "F_B0", "=", "conv5x5", "(", "3", ",", "self", ".", "n_feats", ",", "stride", "=", "1", ")", "\n", "self", ".", "F_B1", "=", "RDB_DS", "(", "in_channels", "=", "self", ".", "n_feats", ",", "growthRate", "=", "self", ".", "n_feats", ",", "num_layer", "=", "3", ",", "activation", "=", "self", ".", "activation", ")", "\n", "self", ".", "F_B2", "=", "RDB_DS", "(", "in_channels", "=", "2", "*", "self", ".", "n_feats", ",", "growthRate", "=", "int", "(", "self", ".", "n_feats", "*", "3", "/", "2", ")", ",", "num_layer", "=", "3", ",", "\n", "activation", "=", "self", ".", "activation", ")", "\n", "self", ".", "F_R", "=", "RDNet", "(", "in_channels", "=", "(", "1", "+", "4", ")", "*", "self", ".", "n_feats", ",", "growthRate", "=", "2", "*", "self", ".", "n_feats", ",", "num_layer", "=", "3", ",", "\n", "num_blocks", "=", "self", ".", "n_blocks", ",", "activation", "=", "self", ".", "activation", ")", "# in: 80", "\n", "# F_h: hidden state part", "\n", "self", ".", "F_h", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "(", "1", "+", "4", ")", "*", "self", ".", "n_feats", ",", "self", ".", "n_feats", ")", ",", "\n", "RDB", "(", "in_channels", "=", "self", ".", "n_feats", ",", "growthRate", "=", "self", ".", "n_feats", ",", "num_layer", "=", "3", ",", "activation", "=", "self", ".", "activation", ")", ",", "\n", "conv3x3", "(", "self", ".", "n_feats", ",", "self", ".", "n_feats", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.RDBCell.forward": [[146, 155], ["ESTRNN.RDBCell.F_B0", "ESTRNN.RDBCell.F_B1", "ESTRNN.RDBCell.F_B2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN.RDBCell.F_R", "ESTRNN.RDBCell.F_h"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "s_last", ")", ":", "\n", "        ", "out", "=", "self", ".", "F_B0", "(", "x", ")", "\n", "out", "=", "self", ".", "F_B1", "(", "out", ")", "\n", "out", "=", "self", ".", "F_B2", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "s_last", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "F_R", "(", "out", ")", "\n", "s", "=", "self", ".", "F_h", "(", "out", ")", "\n", "\n", "return", "out", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.Reconstructor.__init__": [[159, 171], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "arches.conv5x5"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Reconstructor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "para", "=", "para", "\n", "self", ".", "num_ff", "=", "para", ".", "future_frames", "\n", "self", ".", "num_fb", "=", "para", ".", "past_frames", "\n", "self", ".", "related_f", "=", "self", ".", "num_ff", "+", "1", "+", "self", ".", "num_fb", "\n", "self", ".", "n_feats", "=", "para", ".", "n_features", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "(", "5", "*", "self", ".", "n_feats", ")", "*", "(", "self", ".", "related_f", ")", ",", "2", "*", "self", ".", "n_feats", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "2", "*", "self", ".", "n_feats", ",", "self", ".", "n_feats", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "conv5x5", "(", "self", ".", "n_feats", ",", "3", ",", "stride", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.Reconstructor.forward": [[173, 175], ["ESTRNN.Reconstructor.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.Model.__init__": [[181, 192], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "ESTRNN.RDBCell", "ESTRNN.Reconstructor", "ESTRNN.GSA"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "para", "=", "para", "\n", "self", ".", "n_feats", "=", "para", ".", "n_features", "\n", "self", ".", "num_ff", "=", "para", ".", "future_frames", "\n", "self", ".", "num_fb", "=", "para", ".", "past_frames", "\n", "self", ".", "ds_ratio", "=", "4", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "self", ".", "cell", "=", "RDBCell", "(", "para", ")", "\n", "self", ".", "recons", "=", "Reconstructor", "(", "para", ")", "\n", "self", ".", "fusion", "=", "GSA", "(", "para", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.Model.forward": [[193, 210], ["int", "int", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN.Model.profile_forward", "ESTRNN.Model.cell", "hs.append", "ESTRNN.Model.fusion", "ESTRNN.Model.recons", "outputs.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ESTRNN.Model.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.Model.profile_forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "profile_flag", "=", "False", ")", ":", "\n", "        ", "if", "profile_flag", ":", "\n", "            ", "return", "self", ".", "profile_forward", "(", "x", ")", "\n", "", "outputs", ",", "hs", "=", "[", "]", ",", "[", "]", "\n", "batch_size", ",", "frames", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "s_height", "=", "int", "(", "height", "/", "self", ".", "ds_ratio", ")", "\n", "s_width", "=", "int", "(", "width", "/", "self", ".", "ds_ratio", ")", "\n", "# forward h structure: (batch_size, channel, height, width)", "\n", "s", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "n_feats", ",", "s_height", ",", "s_width", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "frames", ")", ":", "\n", "            ", "h", ",", "s", "=", "self", ".", "cell", "(", "x", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ",", "s", ")", "\n", "hs", ".", "append", "(", "h", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_fb", ",", "frames", "-", "self", ".", "num_ff", ")", ":", "\n", "            ", "out", "=", "self", ".", "fusion", "(", "hs", "[", "i", "-", "self", ".", "num_fb", ":", "i", "+", "self", ".", "num_ff", "+", "1", "]", ")", "\n", "out", "=", "self", ".", "recons", "(", "out", ")", "\n", "outputs", ".", "append", "(", "out", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.Model.profile_forward": [[212, 229], ["int", "int", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN.Model.cell", "hs.append", "hs.append", "ESTRNN.Model.fusion", "ESTRNN.Model.recons", "outputs.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "ESTRNN.Model.unsqueeze", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "profile_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", ",", "hs", "=", "[", "]", ",", "[", "]", "\n", "batch_size", ",", "frames", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "s_height", "=", "int", "(", "height", "/", "self", ".", "ds_ratio", ")", "\n", "s_width", "=", "int", "(", "width", "/", "self", ".", "ds_ratio", ")", "\n", "s", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "n_feats", ",", "s_height", ",", "s_width", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "frames", ")", ":", "\n", "            ", "h", ",", "s", "=", "self", ".", "cell", "(", "x", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ",", "s", ")", "\n", "hs", ".", "append", "(", "h", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_fb", "+", "self", ".", "num_ff", ")", ":", "\n", "            ", "hs", ".", "append", "(", "torch", ".", "randn", "(", "*", "h", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_fb", ",", "frames", "+", "self", ".", "num_fb", ")", ":", "\n", "            ", "out", "=", "self", ".", "fusion", "(", "hs", "[", "i", "-", "self", ".", "num_fb", ":", "i", "+", "self", ".", "num_ff", "+", "1", "]", ")", "\n", "out", "=", "self", ".", "recons", "(", "out", ")", "\n", "outputs", ".", "append", "(", "out", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.feed": [[231, 235], ["model"], "function", ["None"], ["", "", "def", "feed", "(", "model", ",", "iter_samples", ")", ":", "\n", "    ", "inputs", "=", "iter_samples", "[", "0", "]", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN.cost_profile": [[237, 243], ["torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "thop.profile", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.profile"], ["", "def", "cost_profile", "(", "model", ",", "H", ",", "W", ",", "seq_length", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "1", ",", "seq_length", ",", "3", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "profile_flag", "=", "True", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "x", ",", "profile_flag", ")", ",", "verbose", "=", "False", ")", "\n", "\n", "return", "flops", "/", "seq_length", ",", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.IFIRNN.RNNCell.__init__": [[8, 34], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.conv5x5", "arches.conv5x5", "arches.conv5x5", "res_blocks.append", "torch.Sequential", "torch.Sequential", "arches.conv3x3", "arches.ResBlock", "arches.conv3x3", "arches.ResBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "arches.conv5x5"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5"], ["    ", "def", "__init__", "(", "self", ",", "dual_cell", "=", "True", ")", ":", "\n", "        ", "super", "(", "RNNCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dual_cell", "=", "dual_cell", "\n", "# F_B: blur feature extraction part", "\n", "self", ".", "F_B", "=", "nn", ".", "Sequential", "(", "\n", "conv5x5", "(", "3", ",", "20", ",", "stride", "=", "1", ")", ",", "\n", "conv5x5", "(", "20", ",", "40", ",", "stride", "=", "2", ")", ",", "\n", "conv5x5", "(", "40", ",", "60", ",", "stride", "=", "2", ")", "\n", ")", "\n", "# F_R: residual blocks part", "\n", "res_blocks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "res_blocks", ".", "append", "(", "ResBlock", "(", "80", ",", "batch_norm", "=", "False", ")", ")", "\n", "", "self", ".", "F_R", "=", "nn", ".", "Sequential", "(", "*", "res_blocks", ")", "\n", "if", "not", "dual_cell", ":", "\n", "# F_L: reconstruct part", "\n", "            ", "self", ".", "F_L", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "80", ",", "40", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "40", ",", "20", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "conv5x5", "(", "20", ",", "3", ",", "stride", "=", "1", ")", "\n", ")", "\n", "# F_h: hidden state part", "\n", "", "self", ".", "F_h", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "80", ",", "20", ")", ",", "\n", "ResBlock", "(", "20", ",", "batch_norm", "=", "False", ")", ",", "\n", "conv3x3", "(", "20", ",", "20", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.IFIRNN.RNNCell.forward": [[36, 47], ["IFIRNN.RNNCell.F_B", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "IFIRNN.RNNCell.F_R", "IFIRNN.RNNCell.F_h", "IFIRNN.RNNCell.F_L"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h_last", ",", "infer", "=", "True", ")", ":", "\n", "# x structure: (batch_size, channel, height, width)", "\n", "        ", "h", "=", "self", ".", "F_B", "(", "x", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "h_last", "]", ",", "dim", "=", "1", ")", "# Cat in channel dimension", "\n", "h", "=", "self", ".", "F_R", "(", "h", ")", "\n", "if", "not", "self", ".", "dual_cell", "and", "infer", ":", "\n", "            ", "out", "=", "self", ".", "F_L", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "None", "\n", "", "hc", "=", "self", ".", "F_h", "(", "h", ")", "\n", "return", "out", ",", "hc", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.IFIRNN.Model.__init__": [[54, 62], ["torch.Module.__init__", "IFIRNN.RNNCell", "IFIRNN.RNNCell"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "para", "=", "para", "\n", "self", ".", "ratio", "=", "4", "\n", "# C2H3", "\n", "self", ".", "iters", "=", "3", "\n", "self", ".", "rnncell0", "=", "RNNCell", "(", "dual_cell", "=", "True", ")", "\n", "self", ".", "rnncell1", "=", "RNNCell", "(", "dual_cell", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.IFIRNN.Model.forward": [[63, 84], ["int", "int", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "IFIRNN.Model.rnncell0", "range", "outputs.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "IFIRNN.Model.rnncell1", "IFIRNN.Model.rnncell1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "profile_flag", "=", "False", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "# x structure: (batch_size, frame, channel, height, width) = (64, 12, 3, 720, 1024)", "\n", "batch_size", ",", "frames", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "h_height", "=", "int", "(", "height", "/", "self", ".", "ratio", ")", "\n", "h_width", "=", "int", "(", "width", "/", "self", ".", "ratio", ")", "\n", "# forward h structure: (batch_size, channel, height, width)", "\n", "hc", "=", "torch", ".", "zeros", "(", "batch_size", ",", "20", ",", "h_height", ",", "h_width", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "frames", ")", ":", "\n", "# output: (batch_size, channel, height, width) = (64, 3, 720, 1204)", "\n", "            ", "out", ",", "hc", "=", "self", ".", "rnncell0", "(", "x", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ",", "hc", ")", "\n", "assert", "out", "==", "None", "\n", "for", "j", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "                ", "if", "j", "==", "self", ".", "iters", "-", "1", ":", "\n", "                    ", "out", ",", "hc", "=", "self", ".", "rnncell1", "(", "x", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ",", "hc", ")", "\n", "", "else", ":", "\n", "                    ", "out", ",", "hc", "=", "self", ".", "rnncell1", "(", "x", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ",", "hc", ",", "infer", "=", "False", ")", "\n", "assert", "out", "==", "None", "\n", "", "", "outputs", ".", "append", "(", "torch", ".", "unsqueeze", "(", "out", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.IFIRNN.feed": [[86, 90], ["model"], "function", ["None"], ["", "", "def", "feed", "(", "model", ",", "iter_samples", ")", ":", "\n", "    ", "inputs", "=", "iter_samples", "[", "0", "]", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.IFIRNN.cost_profile": [[92, 98], ["torch.randn().cuda", "torch.randn().cuda", "thop.profile", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.profile"], ["", "def", "cost_profile", "(", "model", ",", "H", ",", "W", ",", "seq_length", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "1", ",", "seq_length", ",", "3", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "profile_flag", "=", "True", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "x", ",", "profile_flag", ")", ",", "verbose", "=", "False", ")", "\n", "\n", "return", "flops", "/", "seq_length", ",", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.ResBlock.__init__": [[75, 85], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "op.append", "arches.conv3x3", "op.append", "op.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "arches.actFunc"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc"], ["def", "__init__", "(", "self", ",", "in_chs", ",", "activation", "=", "'relu'", ",", "batch_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "op", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "op", ".", "append", "(", "conv3x3", "(", "in_chs", ",", "in_chs", ")", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "op", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "in_chs", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                ", "op", ".", "append", "(", "actFunc", "(", "activation", ")", ")", "\n", "", "", "self", ".", "main_branch", "=", "nn", ".", "Sequential", "(", "*", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.ResBlock.forward": [[86, 90], ["arches.ResBlock.main_branch"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "main_branch", "(", "x", ")", "\n", "out", "+=", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.DenseLayer.__init__": [[97, 101], ["torch.Module.__init__", "arches.conv3x3", "arches.actFunc"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc"], ["def", "__init__", "(", "self", ",", "in_chs", ",", "growth_rate", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "conv3x3", "(", "in_chs", ",", "growth_rate", ")", "\n", "self", ".", "act", "=", "actFunc", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.DenseLayer.forward": [[102, 106], ["arches.DenseLayer.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "arches.DenseLayer.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "act", "(", "self", ".", "conv", "(", "x", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.ResDenseBlock.__init__": [[113, 122], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "arches.conv1x1", "op.append", "arches.DenseLayer"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1"], ["def", "__init__", "(", "self", ",", "in_chs", ",", "growth_rate", ",", "num_layer", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "ResDenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_chs_acc", "=", "in_chs", "\n", "op", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layer", ")", ":", "\n", "            ", "op", ".", "append", "(", "DenseLayer", "(", "in_chs_acc", ",", "growth_rate", ",", "activation", ")", ")", "\n", "in_chs_acc", "+=", "growth_rate", "\n", "", "self", ".", "dense_layers", "=", "nn", ".", "Sequential", "(", "*", "op", ")", "\n", "self", ".", "conv1x1", "=", "conv1x1", "(", "in_chs_acc", ",", "in_chs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.ResDenseBlock.forward": [[123, 128], ["arches.ResDenseBlock.dense_layers", "arches.ResDenseBlock.conv1x1"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dense_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1x1", "(", "out", ")", "\n", "out", "+=", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.RDNet.__init__": [[135, 144], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "arches.conv1x1", "arches.conv3x3", "arches.actFunc", "arches.RDNet.RDBs.append", "arches.ResDenseBlock"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc"], ["def", "__init__", "(", "self", ",", "in_chs", ",", "growth_rate", ",", "num_layer", ",", "num_blocks", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "RDNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "RDBs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "self", ".", "RDBs", ".", "append", "(", "ResDenseBlock", "(", "in_chs", ",", "growth_rate", ",", "num_layer", ",", "activation", ")", ")", "\n", "", "self", ".", "conv1x1", "=", "conv1x1", "(", "num_blocks", "*", "in_chs", ",", "in_chs", ")", "\n", "self", ".", "conv3x3", "=", "conv3x3", "(", "in_chs", ",", "in_chs", ")", "\n", "self", ".", "act", "=", "actFunc", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.RDNet.forward": [[145, 155], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "arches.RDNet.act", "arches.RDNet.act", "arches.RDNet.append", "arches.RDNet.conv1x1", "arches.RDNet.conv3x3"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "h", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "h", "=", "self", ".", "RDBs", "[", "i", "]", "(", "h", ")", "\n", "out", ".", "append", "(", "h", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "out", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "act", "(", "self", ".", "conv1x1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "act", "(", "self", ".", "conv3x3", "(", "out", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.SpaceToDepth.__init__": [[162, 166], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "block_size", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "block_size", "in", "{", "2", ",", "4", "}", ",", "\"Space2Depth only supports blocks size = 4 or 2\"", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.SpaceToDepth.forward": [[167, 174], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "S", "=", "self", ".", "block_size", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", "//", "S", ",", "S", ",", "W", "//", "S", ",", "S", ")", "# (N, C, H//bs, bs, W//bs, bs)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# (N, bs, bs, C, H//bs, W//bs)", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "*", "S", "*", "S", ",", "H", "//", "S", ",", "W", "//", "S", ")", "# (N, C*bs^2, H//bs, W//bs)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.SpaceToDepth.extra_repr": [[175, 177], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f\"block_size={self.block_size}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.CLSTM_cell.__init__": [[189, 198], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "input_chans", ",", "num_features", ",", "filter_size", ")", ":", "\n", "        ", "super", "(", "CLSTM_cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_chans", "=", "input_chans", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "padding", "=", "(", "filter_size", "-", "1", ")", "//", "2", "# in this way the output has the same size", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_chans", "+", "self", ".", "num_features", ",", "4", "*", "self", ".", "num_features", ",", "self", ".", "filter_size", ",", "1", ",", "\n", "self", ".", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.CLSTM_cell.forward": [[199, 212], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "arches.CLSTM_cell.conv", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden_state", ")", ":", "\n", "        ", "hidden", ",", "c", "=", "hidden_state", "# hidden and c are images with several channels", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "input", ",", "hidden", ")", ",", "1", ")", "# oncatenate in the channels", "\n", "A", "=", "self", ".", "conv", "(", "combined", ")", "\n", "(", "ai", ",", "af", ",", "ao", ",", "ag", ")", "=", "torch", ".", "split", "(", "A", ",", "self", ".", "num_features", ",", "dim", "=", "1", ")", "# it should return 4 tensors", "\n", "i", "=", "torch", ".", "sigmoid", "(", "ai", ")", "\n", "f", "=", "torch", ".", "sigmoid", "(", "af", ")", "\n", "o", "=", "torch", ".", "sigmoid", "(", "ao", ")", "\n", "g", "=", "torch", ".", "tanh", "(", "ag", ")", "\n", "\n", "next_c", "=", "f", "*", "c", "+", "i", "*", "g", "\n", "next_h", "=", "o", "*", "torch", ".", "tanh", "(", "next_c", ")", "\n", "return", "next_h", ",", "next_c", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.CLSTM_cell.init_hidden": [[213, 216], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "shape", ")", ":", "\n", "        ", "return", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "num_features", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ".", "cuda", "(", ")", ",", "\n", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "num_features", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1": [[8, 10], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3": [[12, 14], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5": [[16, 18], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv5x5", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.deconv4x4": [[20, 22], ["torch.ConvTranspose2d"], "function", ["None"], ["", "def", "deconv4x4", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "2", ")", ":", "\n", "    ", "return", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.deconv5x5": [[24, 26], ["torch.ConvTranspose2d"], "function", ["None"], ["", "def", "deconv5x5", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "2", ")", ":", "\n", "    ", "return", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ",", "padding", "=", "2", ",", "output_padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc": [[28, 52], ["act.lower.lower", "torch.ReLU", "torch.ReLU6", "torch.LeakyReLU", "torch.PReLU", "torch.RReLU", "torch.SELU", "torch.CELU", "torch.ELU", "torch.GELU", "torch.Tanh"], "function", ["None"], ["", "def", "actFunc", "(", "act", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "act", "=", "act", ".", "lower", "(", ")", "\n", "if", "act", "==", "'relu'", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "act", "==", "'relu6'", ":", "\n", "        ", "return", "nn", ".", "ReLU6", "(", ")", "\n", "", "elif", "act", "==", "'leakyrelu'", ":", "\n", "        ", "return", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "", "elif", "act", "==", "'prelu'", ":", "\n", "        ", "return", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "act", "==", "'rrelu'", ":", "\n", "        ", "return", "nn", ".", "RReLU", "(", "0.1", ",", "0.3", ")", "\n", "", "elif", "act", "==", "'selu'", ":", "\n", "        ", "return", "nn", ".", "SELU", "(", ")", "\n", "", "elif", "act", "==", "'celu'", ":", "\n", "        ", "return", "nn", ".", "CELU", "(", ")", "\n", "", "elif", "act", "==", "'elu'", ":", "\n", "        ", "return", "nn", ".", "ELU", "(", ")", "\n", "", "elif", "act", "==", "'gelu'", ":", "\n", "        ", "return", "nn", ".", "GELU", "(", ")", "\n", "", "elif", "act", "==", "'tanh'", ":", "\n", "        ", "return", "nn", ".", "Tanh", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.make_blocks": [[54, 68], ["range", "torch.Sequential", "layers.append", "basic_block"], "function", ["None"], ["", "", "def", "make_blocks", "(", "basic_block", ",", "num_basic_block", ",", "**", "kwarg", ")", ":", "\n", "    ", "\"\"\"Make layers by stacking the same blocks.\n\n    Args:\n        basic_block (nn.module): nn.module class for basic block.\n        num_basic_block (int): number of blocks.\n\n    Returns:\n        nn.Sequential: Stacked blocks in nn.Sequential.\n    \"\"\"", "\n", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_basic_block", ")", ":", "\n", "        ", "layers", ".", "append", "(", "basic_block", "(", "**", "kwarg", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.DBN.Model.__init__": [[12, 129], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.conv5x5", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "arches.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "para", "=", "para", "\n", "assert", "para", ".", "future_frames", "==", "2", "and", "para", ".", "past_frames", "==", "2", ",", "\"DBN takes 5 consecutive frames as input\"", "\n", "self", ".", "future_frames", "=", "para", ".", "future_frames", "\n", "self", ".", "past_frames", "=", "para", ".", "past_frames", "\n", "self", ".", "F0", "=", "nn", ".", "Sequential", "(", "\n", "conv5x5", "(", "15", ",", "64", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "D1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "64", ",", "64", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F1_1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "64", ",", "128", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F1_2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "D2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "128", ",", "256", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F2_1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "256", ",", "256", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F2_2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "256", ",", "256", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F2_3", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "256", ",", "256", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "D3", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "256", ",", "512", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F3_1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "512", ",", "512", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F3_2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "512", ",", "512", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F3_3", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "512", ",", "512", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "U1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "512", ",", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", ")", "\n", "# skip connection 1 from F2_3", "\n", "# ReLU", "\n", "self", ".", "F4_1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "256", ",", "256", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F4_2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "256", ",", "256", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F4_3", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "256", ",", "256", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "U2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "256", ",", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", ")", "\n", "# skip connection 2 from F1_2", "\n", "# ReLU", "\n", "self", ".", "F5_1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "128", ",", "128", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F5_2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "128", ",", "64", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "U3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", ")", "\n", "# skip connection 3 from F0", "\n", "# ReLU", "\n", "self", ".", "F6_1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "64", ",", "15", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "15", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "self", ".", "F6_2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "15", ",", "3", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.DBN.Model.forward": [[133, 175], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "_x.reshape.reshape.reshape", "DBN.Model.F0", "DBN.Model.D1", "DBN.Model.F1_1", "DBN.Model.F1_2", "DBN.Model.D2", "DBN.Model.F2_1", "DBN.Model.F2_2", "DBN.Model.F2_3", "DBN.Model.D3", "DBN.Model.F3_1", "DBN.Model.F3_2", "DBN.Model.F3_3", "DBN.Model.U1", "torch.relu", "torch.relu", "torch.relu", "DBN.Model.F4_1", "DBN.Model.F4_2", "DBN.Model.F4_3", "DBN.Model.U2", "torch.relu", "torch.relu", "torch.relu", "DBN.Model.F5_1", "DBN.Model.F5_2", "DBN.Model.U3", "torch.relu", "torch.relu", "torch.relu", "DBN.Model.F6_1", "DBN.Model.F6_2", "DBN.Model.unsqueeze", "torch.cat.append", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "profile_flag", "=", "False", ")", ":", "\n", "# x: (n,f,c,h,w) | (4,10,3,256,256)", "\n", "        ", "future_frames", "=", "self", ".", "para", ".", "future_frames", "\n", "past_frames", "=", "self", ".", "para", ".", "past_frames", "\n", "num_subframes", "=", "future_frames", "+", "1", "+", "past_frames", "\n", "n", ",", "f", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "past_frames", ",", "f", "-", "future_frames", ")", ":", "\n", "            ", "_x", "=", "x", "[", ":", ",", "i", "-", "past_frames", ":", "i", "+", "future_frames", "+", "1", "]", "\n", "_x", "=", "_x", ".", "reshape", "(", "n", ",", "num_subframes", "*", "c", ",", "h", ",", "w", ")", "# skip connection to F6_2", "\n", "# encoder and decoder", "\n", "out_F0", "=", "self", ".", "F0", "(", "_x", ")", "# skip connection to U3", "\n", "out_D1", "=", "self", ".", "D1", "(", "out_F0", ")", "\n", "out_F1_1", "=", "self", ".", "F1_1", "(", "out_D1", ")", "\n", "out_F1_2", "=", "self", ".", "F1_2", "(", "out_F1_1", ")", "# skip connection to U2", "\n", "out_D2", "=", "self", ".", "D2", "(", "out_F1_2", ")", "\n", "out_F2_1", "=", "self", ".", "F2_1", "(", "out_D2", ")", "\n", "out_F2_2", "=", "self", ".", "F2_2", "(", "out_F2_1", ")", "\n", "out_F2_3", "=", "self", ".", "F2_3", "(", "out_F2_2", ")", "# skip connection to U1", "\n", "out_D3", "=", "self", ".", "D3", "(", "out_F2_3", ")", "\n", "out_F3_1", "=", "self", ".", "F3_1", "(", "out_D3", ")", "\n", "out_F3_2", "=", "self", ".", "F3_2", "(", "out_F3_1", ")", "\n", "out_F3_3", "=", "self", ".", "F3_3", "(", "out_F3_2", ")", "\n", "out_U1", "=", "self", ".", "U1", "(", "out_F3_3", ")", "\n", "out_U1", "=", "F", ".", "relu", "(", "out_U1", "+", "out_F2_3", ")", "\n", "out_F4_1", "=", "self", ".", "F4_1", "(", "out_U1", ")", "\n", "out_F4_2", "=", "self", ".", "F4_2", "(", "out_F4_1", ")", "\n", "out_F4_3", "=", "self", ".", "F4_3", "(", "out_F4_2", ")", "\n", "out_U2", "=", "self", ".", "U2", "(", "out_F4_3", ")", "\n", "out_U2", "=", "F", ".", "relu", "(", "out_U2", "+", "out_F1_2", ")", "\n", "out_F5_1", "=", "self", ".", "F5_1", "(", "out_U2", ")", "\n", "out_F5_2", "=", "self", ".", "F5_2", "(", "out_F5_1", ")", "\n", "out_U3", "=", "self", ".", "U3", "(", "out_F5_2", ")", "\n", "out_U3", "=", "F", ".", "relu", "(", "out_U3", "+", "out_F0", ")", "\n", "out_F6_1", "=", "self", ".", "F6_1", "(", "out_U3", ")", "\n", "out_F6_2", "=", "self", ".", "F6_2", "(", "out_F6_1", ")", "\n", "out_F6_2", "=", "out_F6_2", "+", "_x", "[", ":", ",", "(", "num_subframes", "//", "2", ")", "*", "c", ":", "(", "num_subframes", "//", "2", ")", "*", "c", "+", "c", "]", "\n", "out", "=", "out_F6_2", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "outputs", ".", "append", "(", "out", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.DBN.feed": [[177, 181], ["model"], "function", ["None"], ["", "", "def", "feed", "(", "model", ",", "iter_samples", ")", ":", "\n", "    ", "inputs", "=", "iter_samples", "[", "0", "]", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.DBN.cost_profile": [[183, 189], ["torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "thop.profile", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.profile"], ["", "def", "cost_profile", "(", "model", ",", "H", ",", "W", ",", "seq_length", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "1", ",", "seq_length", ",", "3", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "profile_flag", "=", "True", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "x", ",", "profile_flag", ")", ",", "verbose", "=", "False", ")", "\n", "\n", "return", "flops", ",", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.BasicConv.__init__": [[7, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "relu", "=", "True", ",", "\n", "bn", "=", "True", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_planes", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.01", ",", "affine", "=", "True", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "if", "relu", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.BasicConv.forward": [[16, 23], ["attention.BasicConv.conv", "attention.BasicConv.bn", "attention.BasicConv.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.Flatten.forward": [[26, 28], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.ChannelGate.__init__": [[31, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "attention.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channels", ",", "reduction_ratio", "=", "16", ",", "pool_types", "=", "[", "'avg'", ",", "'max'", "]", ")", ":", "\n", "        ", "super", "(", "ChannelGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gate_channels", "=", "gate_channels", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "gate_channels", ",", "gate_channels", "//", "reduction_ratio", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "gate_channels", "//", "reduction_ratio", ",", "gate_channels", ")", "\n", ")", "\n", "self", ".", "pool_types", "=", "pool_types", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.ChannelGate.forward": [[42, 66], ["torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "attention.ChannelGate.mlp", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "attention.ChannelGate.mlp", "x.size", "x.size", "torch.lp_pool2d", "torch.lp_pool2d", "torch.lp_pool2d", "attention.ChannelGate.mlp", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "x.size", "x.size", "x.size", "x.size", "attention.logsumexp_2d", "attention.ChannelGate.mlp", "x.size", "x.size", "x.size", "x.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.logsumexp_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "channel_att_sum", "=", "None", "\n", "for", "pool_type", "in", "self", ".", "pool_types", ":", "\n", "            ", "if", "pool_type", "==", "'avg'", ":", "\n", "                ", "avg_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "stride", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "avg_pool", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "                ", "max_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "stride", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "max_pool", ")", "\n", "", "elif", "pool_type", "==", "'lp'", ":", "\n", "                ", "lp_pool", "=", "F", ".", "lp_pool2d", "(", "x", ",", "2", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "stride", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "lp_pool", ")", "\n", "", "elif", "pool_type", "==", "'lse'", ":", "\n", "# LSE pool only", "\n", "                ", "lse_pool", "=", "logsumexp_2d", "(", "x", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "lse_pool", ")", "\n", "\n", "", "if", "channel_att_sum", "is", "None", ":", "\n", "                ", "channel_att_sum", "=", "channel_att_raw", "\n", "", "else", ":", "\n", "                ", "channel_att_sum", "=", "channel_att_sum", "+", "channel_att_raw", "\n", "\n", "", "", "scale", "=", "torch", ".", "sigmoid", "(", "channel_att_sum", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "expand_as", "(", "x", ")", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.ChannelPool.forward": [[76, 78], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "torch", ".", "max", "(", "x", ",", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "torch", ".", "mean", "(", "x", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.SpatialGate.__init__": [[81, 86], ["torch.Module.__init__", "attention.ChannelPool", "attention.BasicConv"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SpatialGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "7", "\n", "self", ".", "compress", "=", "ChannelPool", "(", ")", "\n", "self", ".", "spatial", "=", "BasicConv", "(", "2", ",", "1", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "relu", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.SpatialGate.forward": [[87, 92], ["attention.SpatialGate.compress", "attention.SpatialGate.spatial", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_compress", "=", "self", ".", "compress", "(", "x", ")", "\n", "x_out", "=", "self", ".", "spatial", "(", "x_compress", ")", "\n", "scale", "=", "torch", ".", "sigmoid", "(", "x_out", ")", "# broadcasting", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.CBAM.__init__": [[95, 101], ["torch.Module.__init__", "attention.ChannelGate", "attention.SpatialGate"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channels", ",", "reduction_ratio", "=", "16", ",", "pool_types", "=", "[", "'avg'", ",", "'max'", "]", ",", "no_spatial", "=", "False", ")", ":", "\n", "        ", "super", "(", "CBAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ChannelGate", "=", "ChannelGate", "(", "gate_channels", ",", "reduction_ratio", ",", "pool_types", ")", "\n", "self", ".", "no_spatial", "=", "no_spatial", "\n", "if", "not", "no_spatial", ":", "\n", "            ", "self", ".", "SpatialGate", "=", "SpatialGate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.CBAM.forward": [[102, 107], ["attention.CBAM.ChannelGate", "attention.CBAM.SpatialGate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_out", "=", "self", ".", "ChannelGate", "(", "x", ")", "\n", "if", "not", "self", ".", "no_spatial", ":", "\n", "            ", "x_out", "=", "self", ".", "SpatialGate", "(", "x_out", ")", "\n", "", "return", "x_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.attention.logsumexp_2d": [[68, 73], ["tensor.view", "torch.max", "torch.max", "torch.max", "tensor.size", "tensor.size"], "function", ["None"], ["", "", "def", "logsumexp_2d", "(", "tensor", ")", ":", "\n", "    ", "tensor_flatten", "=", "tensor", ".", "view", "(", "tensor", ".", "size", "(", "0", ")", ",", "tensor", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "s", ",", "_", "=", "torch", ".", "max", "(", "tensor_flatten", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "outputs", "=", "s", "+", "(", "tensor_flatten", "-", "s", ")", ".", "exp", "(", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "log", "(", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.__init__": [[7, 13], ["torch.Module.__init__", "importlib.import_module", "model.Model.module.Model"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "para", "=", "para", "\n", "model_name", "=", "para", ".", "model", "\n", "self", ".", "module", "=", "import_module", "(", "'model.{}'", ".", "format", "(", "model_name", ")", ")", "\n", "self", ".", "model", "=", "self", ".", "module", ".", "Model", "(", "para", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.forward": [[14, 17], ["model.Model.module.feed"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.feed"], ["", "def", "forward", "(", "self", ",", "iter_samples", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "module", ".", "feed", "(", "self", ".", "model", ",", "iter_samples", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.profile": [[18, 23], ["model.Model.module.cost_profile"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.cost_profile"], ["", "def", "profile", "(", "self", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "para", ".", "profile_H", ",", "self", ".", "para", ".", "profile_W", "\n", "seq_length", "=", "self", ".", "para", ".", "future_frames", "+", "self", ".", "para", ".", "past_frames", "+", "1", "\n", "flops", ",", "params", "=", "self", ".", "module", ".", "cost_profile", "(", "self", ".", "model", ",", "H", ",", "W", ",", "seq_length", ")", "\n", "return", "flops", ",", "params", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.ResBlock.__init__": [[14, 24], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "op.append", "arches.conv5x5", "op.append", "op.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "arches.actFunc"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc"], ["def", "__init__", "(", "self", ",", "in_chs", ",", "activation", "=", "'relu'", ",", "batch_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "op", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "op", ".", "append", "(", "conv5x5", "(", "in_chs", ",", "in_chs", ")", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "op", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "in_chs", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                ", "op", ".", "append", "(", "actFunc", "(", "activation", ")", ")", "\n", "", "", "self", ".", "main_branch", "=", "nn", ".", "Sequential", "(", "*", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.ResBlock.forward": [[25, 29], ["SRN.ResBlock.main_branch"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "main_branch", "(", "x", ")", "\n", "out", "+=", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.EBlock.__init__": [[32, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.make_blocks", "arches.conv5x5", "arches.actFunc"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.make_blocks", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "act", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "EBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "conv5x5", "(", "in_channels", ",", "out_channels", ",", "stride", ")", ",", "actFunc", "(", "act", ")", ")", "\n", "self", ".", "resblock_stack", "=", "make_blocks", "(", "ResBlock", ",", "num_basic_block", "=", "3", ",", "in_chs", "=", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.EBlock.forward": [[37, 41], ["SRN.EBlock.conv", "SRN.EBlock.resblock_stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "resblock_stack", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.DBlock.__init__": [[44, 48], ["torch.Module.__init__", "arches.make_blocks", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.deconv5x5", "arches.actFunc"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.make_blocks", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.deconv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "act", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "DBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resblock_stack", "=", "make_blocks", "(", "ResBlock", ",", "num_basic_block", "=", "3", ",", "in_chs", "=", "in_channels", ")", "\n", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "deconv5x5", "(", "in_channels", ",", "out_channels", ",", "stride", ")", ",", "actFunc", "(", "act", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.DBlock.forward": [[49, 53], ["SRN.DBlock.resblock_stack", "SRN.DBlock.deconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "resblock_stack", "(", "x", ")", "\n", "out", "=", "self", ".", "deconv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.OutBlock.__init__": [[56, 60], ["torch.Module.__init__", "arches.make_blocks", "arches.conv5x5"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.make_blocks", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "OutBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resblock_stack", "=", "make_blocks", "(", "ResBlock", ",", "num_basic_block", "=", "3", ",", "in_chs", "=", "in_channels", ")", "\n", "self", ".", "conv", "=", "conv5x5", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.OutBlock.forward": [[61, 65], ["SRN.OutBlock.resblock_stack", "SRN.OutBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "resblock_stack", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.Model.__init__": [[72, 87], ["torch.Module.__init__", "functools.partial", "SRN.EBlock", "SRN.EBlock", "SRN.EBlock", "arches.CLSTM_cell", "SRN.DBlock", "SRN.DBlock", "SRN.OutBlock", "SRN.Model.named_modules", "isinstance", "isinstance", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "para", ".", "future_frames", "==", "0", "and", "para", ".", "past_frames", "==", "0", "\n", "self", ".", "upsample_fn", "=", "partial", "(", "torch", ".", "nn", ".", "functional", ".", "interpolate", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "self", ".", "inblock", "=", "EBlock", "(", "3", "+", "3", ",", "32", ",", "1", ")", "\n", "self", ".", "eblock1", "=", "EBlock", "(", "32", ",", "64", ",", "2", ")", "\n", "self", ".", "eblock2", "=", "EBlock", "(", "64", ",", "128", ",", "2", ")", "\n", "self", ".", "convlstm", "=", "CLSTM_cell", "(", "128", ",", "128", ",", "5", ")", "\n", "self", ".", "dblock1", "=", "DBlock", "(", "128", ",", "64", ",", "2", ")", "\n", "self", ".", "dblock2", "=", "DBlock", "(", "64", ",", "32", ",", "2", ")", "\n", "self", ".", "outblock", "=", "OutBlock", "(", "32", ")", "\n", "\n", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.Model._forward_step": [[88, 97], ["SRN.Model.inblock", "SRN.Model.eblock1", "SRN.Model.eblock2", "SRN.Model.convlstm", "SRN.Model.dblock1", "SRN.Model.dblock2", "SRN.Model.outblock"], "methods", ["None"], ["", "", "", "def", "_forward_step", "(", "self", ",", "x", ",", "hidden_state", ")", ":", "\n", "        ", "e32", "=", "self", ".", "inblock", "(", "x", ")", "\n", "e64", "=", "self", ".", "eblock1", "(", "e32", ")", "\n", "e128", "=", "self", ".", "eblock2", "(", "e64", ")", "\n", "h", ",", "c", "=", "self", ".", "convlstm", "(", "e128", ",", "hidden_state", ")", "\n", "d64", "=", "self", ".", "dblock1", "(", "c", ")", "\n", "d32", "=", "self", ".", "dblock2", "(", "d64", "+", "e64", ")", "\n", "d3", "=", "self", ".", "outblock", "(", "d32", "+", "e32", ")", "\n", "return", "d3", ",", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.Model._forward_single": [[98, 109], ["SRN.Model.convlstm.init_hidden", "SRN.Model._forward_step", "SRN.Model.upsample_fn", "SRN.Model.upsample_fn", "SRN.Model._forward_step", "SRN.Model.upsample_fn", "SRN.Model.upsample_fn", "SRN.Model._forward_step", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "b3.clone().detach", "SRN.Model.upsample_fn", "SRN.Model.upsample_fn", "b3.clone"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.CLSTM_cell.init_hidden", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.Model._forward_step", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.Model._forward_step", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.Model._forward_step"], ["", "def", "_forward_single", "(", "self", ",", "b1", ",", "b2", ",", "b3", ")", ":", "\n", "        ", "h", ",", "c", "=", "self", ".", "convlstm", ".", "init_hidden", "(", "b3", ".", "shape", "[", "0", "]", ",", "(", "b3", ".", "shape", "[", "-", "2", "]", "//", "4", ",", "b3", ".", "shape", "[", "-", "1", "]", "//", "4", ")", ")", "\n", "i3", ",", "h", ",", "c", "=", "self", ".", "_forward_step", "(", "torch", ".", "cat", "(", "[", "b3", ",", "b3", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "\n", "h", "=", "self", ".", "upsample_fn", "(", "h", ",", "scale_factor", "=", "2", ")", "\n", "c", "=", "self", ".", "upsample_fn", "(", "c", ",", "scale_factor", "=", "2", ")", "\n", "i2", ",", "h", ",", "c", "=", "self", ".", "_forward_step", "(", "torch", ".", "cat", "(", "[", "b2", ",", "self", ".", "upsample_fn", "(", "i3", ",", "scale_factor", "=", "2", ")", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "\n", "h", "=", "self", ".", "upsample_fn", "(", "h", ",", "scale_factor", "=", "2", ")", "\n", "c", "=", "self", ".", "upsample_fn", "(", "c", ",", "scale_factor", "=", "2", ")", "\n", "i1", ",", "h", ",", "c", "=", "self", ".", "_forward_step", "(", "torch", ".", "cat", "(", "[", "b1", ",", "self", ".", "upsample_fn", "(", "i2", ",", "scale_factor", "=", "2", ")", "]", ",", "dim", "=", "1", ")", ",", "(", "h", ",", "c", ")", ")", "\n", "\n", "return", "i1", ",", "i2", ",", "i3", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.Model.forward": [[110, 130], ["b1.reshape.reshape.reshape", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SRN.Model._forward_single", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "sub_i1.unsqueeze", "sub_i2.unsqueeze", "sub_i3.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Loss._forward_single"], ["", "def", "forward", "(", "self", ",", "x", ",", "profile_flag", "=", "False", ")", ":", "\n", "        ", "b1", "=", "x", "\n", "B", ",", "N", ",", "C", ",", "H", ",", "W", "=", "b1", ".", "shape", "\n", "b1", "=", "b1", ".", "reshape", "(", "B", ",", "N", "*", "C", ",", "H", ",", "W", ")", "\n", "b2", "=", "F", ".", "interpolate", "(", "b1", ",", "size", "=", "(", "H", "//", "2", ",", "W", "//", "2", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "b3", "=", "F", ".", "interpolate", "(", "b1", ",", "size", "=", "(", "H", "//", "4", ",", "W", "//", "4", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "i1", ",", "i2", ",", "i3", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "sub_b1", ",", "sub_b2", ",", "sub_b3", "=", "b1", "[", ":", ",", "i", "*", "C", ":", "(", "i", "+", "1", ")", "*", "C", ",", ":", ",", ":", "]", ",", "b2", "[", ":", ",", "i", "*", "C", ":", "(", "i", "+", "1", ")", "*", "C", ",", ":", ",", ":", "]", ",", "b3", "[", ":", ",", "\n", "i", "*", "C", ":", "(", "i", "+", "1", ")", "*", "C", ",", "\n", ":", ",", ":", "]", "\n", "sub_i1", ",", "sub_i2", ",", "sub_i3", "=", "self", ".", "_forward_single", "(", "sub_b1", ",", "sub_b2", ",", "sub_b3", ")", "\n", "i1", ".", "append", "(", "sub_i1", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", "\n", "i2", ".", "append", "(", "sub_i2", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", "\n", "i3", ".", "append", "(", "sub_i3", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", "\n", "", "i1", "=", "torch", ".", "cat", "(", "i1", ",", "dim", "=", "1", ")", "\n", "i2", "=", "torch", ".", "cat", "(", "i2", ",", "dim", "=", "1", ")", "\n", "i3", "=", "torch", ".", "cat", "(", "i3", ",", "dim", "=", "1", ")", "\n", "\n", "return", "i1", ",", "i2", ",", "i3", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.feed": [[132, 137], ["model"], "function", ["None"], ["", "", "def", "feed", "(", "model", ",", "iter_samples", ")", ":", "\n", "    ", "inputs", "=", "iter_samples", "[", "0", "]", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "return", "outputs", "# (i1, i2, i3)", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.SRN.cost_profile": [[139, 146], ["torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "thop.profile", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.profile"], ["", "def", "cost_profile", "(", "model", ",", "H", ",", "W", ",", "seq_length", ")", ":", "\n", "    ", "assert", "seq_length", "==", "1", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "seq_length", ",", "3", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "profile_flag", "=", "True", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "x", ",", "profile_flag", ")", ",", "verbose", "=", "False", ")", "\n", "\n", "return", "flops", "/", "seq_length", ",", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.dense_layer.__init__": [[12, 16], ["torch.Module.__init__", "arches.conv3x3", "arches.actFunc"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "growthRate", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "dense_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "conv3x3", "(", "in_channels", ",", "growthRate", ")", "\n", "self", ".", "act", "=", "actFunc", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.dense_layer.forward": [[17, 21], ["ESTRNN-RAW.dense_layer.act", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN-RAW.dense_layer.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "act", "(", "self", ".", "conv", "(", "x", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.RDB.__init__": [[25, 34], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.conv1x1", "modules.append", "ESTRNN-RAW.dense_layer"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "growthRate", ",", "num_layer", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "RDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_channels_", "=", "in_channels", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layer", ")", ":", "\n", "            ", "modules", ".", "append", "(", "dense_layer", "(", "in_channels_", ",", "growthRate", ",", "activation", ")", ")", "\n", "in_channels_", "+=", "growthRate", "\n", "", "self", ".", "dense_layers", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "self", ".", "conv1x1", "=", "conv1x1", "(", "in_channels_", ",", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.RDB.forward": [[35, 40], ["ESTRNN-RAW.RDB.dense_layers", "ESTRNN-RAW.RDB.conv1x1"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dense_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1x1", "(", "out", ")", "\n", "out", "+=", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.RDNet.__init__": [[44, 52], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "arches.conv1x1", "arches.conv3x3", "ESTRNN-RAW.RDNet.RDBs.append", "ESTRNN-RAW.RDB"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "growthRate", ",", "num_layer", ",", "num_blocks", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "RDNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "RDBs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "self", ".", "RDBs", ".", "append", "(", "RDB", "(", "in_channels", ",", "growthRate", ",", "num_layer", ",", "activation", ")", ")", "\n", "", "self", ".", "conv1x1", "=", "conv1x1", "(", "num_blocks", "*", "in_channels", ",", "in_channels", ")", "\n", "self", ".", "conv3x3", "=", "conv3x3", "(", "in_channels", ",", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.RDNet.forward": [[53, 63], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN-RAW.RDNet.conv1x1", "ESTRNN-RAW.RDNet.conv3x3", "ESTRNN-RAW.RDNet.append"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "h", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "h", "=", "self", ".", "RDBs", "[", "i", "]", "(", "h", ")", "\n", "out", ".", "append", "(", "h", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "out", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv1x1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3x3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.RDB_DS.__init__": [[67, 71], ["torch.Module.__init__", "ESTRNN-RAW.RDB", "arches.conv5x5"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "growthRate", ",", "num_layer", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "RDB_DS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rdb", "=", "RDB", "(", "in_channels", ",", "growthRate", ",", "num_layer", ",", "activation", ")", "\n", "self", ".", "down_sampling", "=", "conv5x5", "(", "in_channels", ",", "2", "*", "in_channels", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.RDB_DS.forward": [[72, 78], ["ESTRNN-RAW.RDB_DS.rdb", "ESTRNN-RAW.RDB_DS.down_sampling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: n,c,h,w", "\n", "        ", "x", "=", "self", ".", "rdb", "(", "x", ")", "\n", "out", "=", "self", ".", "down_sampling", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.GSA.__init__": [[82, 104], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.conv1x1", "arches.conv1x1", "torch.Linear", "torch.Linear", "torch.Linear", "arches.actFunc", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "arches.conv1x1", "arches.conv1x1"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "GSA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_feats", "=", "para", ".", "n_features", "\n", "self", ".", "center", "=", "para", ".", "past_frames", "\n", "self", ".", "num_ff", "=", "para", ".", "future_frames", "\n", "self", ".", "num_fb", "=", "para", ".", "past_frames", "\n", "self", ".", "related_f", "=", "self", ".", "num_ff", "+", "1", "+", "self", ".", "num_fb", "\n", "self", ".", "F_f", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "4", "*", "(", "5", "*", "self", ".", "n_feats", ")", ")", ",", "\n", "actFunc", "(", "para", ".", "activation", ")", ",", "\n", "nn", ".", "Linear", "(", "4", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "2", "*", "(", "5", "*", "self", ".", "n_feats", ")", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "# out channel: 160", "\n", "self", ".", "F_p", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "2", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "4", "*", "(", "5", "*", "self", ".", "n_feats", ")", ")", ",", "\n", "conv1x1", "(", "4", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "2", "*", "(", "5", "*", "self", ".", "n_feats", ")", ")", "\n", ")", "\n", "# condense layer", "\n", "self", ".", "condense", "=", "conv1x1", "(", "2", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "5", "*", "self", ".", "n_feats", ")", "\n", "# fusion layer", "\n", "self", ".", "fusion", "=", "conv1x1", "(", "self", ".", "related_f", "*", "(", "5", "*", "self", ".", "n_feats", ")", ",", "self", ".", "related_f", "*", "(", "5", "*", "self", ".", "n_feats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.GSA.forward": [[105, 125], ["len", "range", "cor_l.append", "ESTRNN-RAW.GSA.fusion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.adaptive_avg_pool2d().squeeze", "torch.adaptive_avg_pool2d().squeeze", "torch.adaptive_avg_pool2d().squeeze", "ESTRNN-RAW.GSA.F_f", "w.unsqueeze.unsqueeze.reshape", "ESTRNN-RAW.GSA.F_p", "ESTRNN-RAW.GSA.condense", "cor_l.append", "len", "w.unsqueeze.unsqueeze.unsqueeze", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hs", ")", ":", "\n", "# hs: [(n=4,c=80,h=64,w=64), ..., (n,c,h,w)]", "\n", "        ", "self", ".", "nframes", "=", "len", "(", "hs", ")", "\n", "f_ref", "=", "hs", "[", "self", ".", "center", "]", "\n", "cor_l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nframes", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "center", ":", "\n", "                ", "cor", "=", "torch", ".", "cat", "(", "[", "f_ref", ",", "hs", "[", "i", "]", "]", ",", "dim", "=", "1", ")", "\n", "w", "=", "F", ".", "adaptive_avg_pool2d", "(", "cor", ",", "(", "1", ",", "1", ")", ")", ".", "squeeze", "(", ")", "# (n,c) : (4, 160)", "\n", "if", "len", "(", "w", ".", "shape", ")", "==", "1", ":", "\n", "                    ", "w", "=", "w", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "", "w", "=", "self", ".", "F_f", "(", "w", ")", "\n", "w", "=", "w", ".", "reshape", "(", "*", "w", ".", "shape", ",", "1", ",", "1", ")", "\n", "cor", "=", "self", ".", "F_p", "(", "cor", ")", "\n", "cor", "=", "self", ".", "condense", "(", "w", "*", "cor", ")", "\n", "cor_l", ".", "append", "(", "cor", ")", "\n", "", "", "cor_l", ".", "append", "(", "f_ref", ")", "\n", "out", "=", "self", ".", "fusion", "(", "torch", ".", "cat", "(", "cor_l", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.RDBCell.__init__": [[129, 154], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "attention.CBAM", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ESTRNN-RAW.RDB_DS", "ESTRNN-RAW.RDNet", "torch.Sequential", "torch.Sequential", "torch.Sequential", "arches.SpaceToDepth", "arches.conv1x1", "arches.actFunc", "arches.conv5x5", "arches.actFunc", "arches.conv5x5", "arches.actFunc", "ESTRNN-RAW.RDB", "ESTRNN-RAW.RDB", "arches.conv3x3", "ESTRNN-RAW.RDB", "arches.conv3x3", "int"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv1x1", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.actFunc", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "RDBCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "para", ".", "activation", "\n", "self", ".", "n_feats", "=", "para", ".", "n_features", "\n", "self", ".", "n_blocks", "=", "para", ".", "n_blocks", "\n", "self", ".", "pixel_unshuffle", "=", "nn", ".", "Sequential", "(", "SpaceToDepth", "(", "block_size", "=", "2", ")", ",", "conv1x1", "(", "in_channels", "=", "4", ",", "out_channels", "=", "4", ")", ",", "\n", "actFunc", "(", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "downsampling", "=", "nn", ".", "Sequential", "(", "conv5x5", "(", "in_channels", "=", "1", ",", "out_channels", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "actFunc", "(", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "F_B0", "=", "nn", ".", "Sequential", "(", "conv5x5", "(", "2", "*", "4", ",", "2", "*", "self", ".", "n_feats", ",", "stride", "=", "1", ")", ",", "actFunc", "(", "act", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "cbam", "=", "CBAM", "(", "2", "*", "self", ".", "n_feats", ",", "reduction_ratio", "=", "4", ")", "\n", "self", ".", "F_B1", "=", "nn", ".", "Sequential", "(", "RDB", "(", "in_channels", "=", "2", "*", "self", ".", "n_feats", ",", "growthRate", "=", "self", ".", "n_feats", ",", "num_layer", "=", "3", ",", "\n", "activation", "=", "self", ".", "activation", ")", ",", "\n", "RDB", "(", "in_channels", "=", "2", "*", "self", ".", "n_feats", ",", "growthRate", "=", "int", "(", "self", ".", "n_feats", "*", "3", "/", "2", ")", ",", "num_layer", "=", "3", ",", "\n", "activation", "=", "self", ".", "activation", ")", "\n", ")", "\n", "self", ".", "F_B2", "=", "RDB_DS", "(", "in_channels", "=", "2", "*", "self", ".", "n_feats", ",", "growthRate", "=", "2", "*", "self", ".", "n_feats", ",", "num_layer", "=", "3", ",", "\n", "activation", "=", "self", ".", "activation", ")", "\n", "self", ".", "F_R", "=", "RDNet", "(", "in_channels", "=", "(", "1", "+", "4", ")", "*", "self", ".", "n_feats", ",", "growthRate", "=", "2", "*", "self", ".", "n_feats", ",", "num_layer", "=", "3", ",", "\n", "num_blocks", "=", "self", ".", "n_blocks", ",", "activation", "=", "self", ".", "activation", ")", "# in: 80", "\n", "# F_h: hidden state part", "\n", "self", ".", "F_h", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "(", "1", "+", "4", ")", "*", "self", ".", "n_feats", ",", "self", ".", "n_feats", ")", ",", "\n", "RDB", "(", "in_channels", "=", "self", ".", "n_feats", ",", "growthRate", "=", "self", ".", "n_feats", ",", "num_layer", "=", "3", ",", "activation", "=", "self", ".", "activation", ")", ",", "\n", "conv3x3", "(", "self", ".", "n_feats", ",", "self", ".", "n_feats", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.RDBCell.forward": [[156, 167], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN-RAW.RDBCell.F_B0", "ESTRNN-RAW.RDBCell.cbam", "ESTRNN-RAW.RDBCell.F_B1", "ESTRNN-RAW.RDBCell.F_B2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN-RAW.RDBCell.F_R", "ESTRNN-RAW.RDBCell.F_h", "ESTRNN-RAW.RDBCell.downsampling", "ESTRNN-RAW.RDBCell.pixel_unshuffle"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "s_last", ")", ":", "\n", "        ", "out", "=", "torch", ".", "cat", "(", "(", "self", ".", "downsampling", "(", "x", ")", ",", "self", ".", "pixel_unshuffle", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "F_B0", "(", "out", ")", "\n", "out", "=", "self", ".", "cbam", "(", "out", ")", "\n", "out", "=", "self", ".", "F_B1", "(", "out", ")", "\n", "out", "=", "self", ".", "F_B2", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "s_last", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "F_R", "(", "out", ")", "\n", "s", "=", "self", ".", "F_h", "(", "out", ")", "\n", "\n", "return", "out", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.Reconstructor.__init__": [[171, 183], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "arches.conv5x5"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.arches.conv5x5"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Reconstructor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "para", "=", "para", "\n", "self", ".", "num_ff", "=", "para", ".", "future_frames", "\n", "self", ".", "num_fb", "=", "para", ".", "past_frames", "\n", "self", ".", "related_f", "=", "self", ".", "num_ff", "+", "1", "+", "self", ".", "num_fb", "\n", "self", ".", "n_feats", "=", "para", ".", "n_features", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "(", "5", "*", "self", ".", "n_feats", ")", "*", "(", "self", ".", "related_f", ")", ",", "2", "*", "self", ".", "n_feats", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "2", "*", "self", ".", "n_feats", ",", "self", ".", "n_feats", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "conv5x5", "(", "self", ".", "n_feats", ",", "1", ",", "stride", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.Reconstructor.forward": [[185, 187], ["ESTRNN-RAW.Reconstructor.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.Model.__init__": [[194, 205], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "ESTRNN-RAW.RDBCell", "ESTRNN-RAW.Reconstructor", "ESTRNN-RAW.GSA"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "para", "=", "para", "\n", "self", ".", "n_feats", "=", "para", ".", "n_features", "\n", "self", ".", "num_ff", "=", "para", ".", "future_frames", "\n", "self", ".", "num_fb", "=", "para", ".", "past_frames", "\n", "self", ".", "ds_ratio", "=", "4", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "self", ".", "cell", "=", "RDBCell", "(", "para", ")", "\n", "self", ".", "recons", "=", "Reconstructor", "(", "para", ")", "\n", "self", ".", "fusion", "=", "GSA", "(", "para", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.Model.forward": [[206, 224], ["int", "int", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN-RAW.Model.profile_forward", "ESTRNN-RAW.Model.cell", "hs.append", "ESTRNN-RAW.Model.fusion", "ESTRNN-RAW.Model.recons", "outputs.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ESTRNN-RAW.Model.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.Model.profile_forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "profile_flag", "=", "False", ")", ":", "\n", "        ", "if", "profile_flag", ":", "\n", "            ", "return", "self", ".", "profile_forward", "(", "x", ")", "\n", "", "outputs", ",", "hs", "=", "[", "]", ",", "[", "]", "\n", "batch_size", ",", "frames", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "s_height", "=", "int", "(", "height", "/", "self", ".", "ds_ratio", ")", "\n", "s_width", "=", "int", "(", "width", "/", "self", ".", "ds_ratio", ")", "\n", "# forward h structure: (batch_size, channel, height, width)", "\n", "s", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "n_feats", ",", "s_height", ",", "s_width", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "frames", ")", ":", "\n", "            ", "h", ",", "s", "=", "self", ".", "cell", "(", "x", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ",", "s", ")", "\n", "hs", ".", "append", "(", "h", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_fb", ",", "frames", "-", "self", ".", "num_ff", ")", ":", "\n", "            ", "out", "=", "self", ".", "fusion", "(", "hs", "[", "i", "-", "self", ".", "num_fb", ":", "i", "+", "self", ".", "num_ff", "+", "1", "]", ")", "\n", "out", "=", "self", ".", "recons", "(", "out", ")", "\n", "outputs", ".", "append", "(", "out", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.Model.profile_forward": [[226, 243], ["int", "int", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ESTRNN-RAW.Model.cell", "hs.append", "hs.append", "ESTRNN-RAW.Model.fusion", "ESTRNN-RAW.Model.recons", "outputs.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "ESTRNN-RAW.Model.unsqueeze", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "profile_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", ",", "hs", "=", "[", "]", ",", "[", "]", "\n", "batch_size", ",", "frames", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "s_height", "=", "int", "(", "height", "/", "self", ".", "ds_ratio", ")", "\n", "s_width", "=", "int", "(", "width", "/", "self", ".", "ds_ratio", ")", "\n", "s", "=", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "n_feats", ",", "s_height", ",", "s_width", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "frames", ")", ":", "\n", "            ", "h", ",", "s", "=", "self", ".", "cell", "(", "x", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", ",", "s", ")", "\n", "hs", ".", "append", "(", "h", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_fb", "+", "self", ".", "num_ff", ")", ":", "\n", "            ", "hs", ".", "append", "(", "torch", ".", "randn", "(", "*", "h", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_fb", ",", "frames", "+", "self", ".", "num_fb", ")", ":", "\n", "            ", "out", "=", "self", ".", "fusion", "(", "hs", "[", "i", "-", "self", ".", "num_fb", ":", "i", "+", "self", ".", "num_ff", "+", "1", "]", ")", "\n", "out", "=", "self", ".", "recons", "(", "out", ")", "\n", "outputs", ".", "append", "(", "out", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.feed": [[245, 249], ["model"], "function", ["None"], ["", "", "def", "feed", "(", "model", ",", "iter_samples", ")", ":", "\n", "    ", "inputs", "=", "iter_samples", "[", "0", "]", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.ESTRNN-RAW.cost_profile": [[251, 257], ["torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "thop.profile", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.profile"], ["", "def", "cost_profile", "(", "model", ",", "H", ",", "W", ",", "seq_length", ")", ":", "\n", "    ", "x", "=", "torch", ".", "randn", "(", "1", ",", "seq_length", ",", "1", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "profile_flag", "=", "True", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "x", ",", "profile_flag", ")", ",", "verbose", "=", "False", ")", "\n", "\n", "return", "flops", "/", "seq_length", ",", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.ddp.dist_process": [[22, 123], ["torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "model.Model().cuda", "loss.Loss().cuda", "importlib.import_module", "optimizer.Optimizer", "torch.nn.parallel.DistributedDataParallel", "data.Data", "range", "utils.Logger", "torch.utils.tensorboard.SummaryWriter", "logger", "logger", "model.Model().cuda", "Model().cuda.profile", "logger", "logger", "logger", "os.path.isfile", "ddp.dist_train", "ddp.dist_valid", "model.Model", "loss.Loss", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.load_state_dict", "optimizer.Optimizer.optimizer.load_state_dict", "optimizer.Optimizer.scheduler.load_state_dict", "FileNotFoundError", "logger.save", "getattr", "model.Model", "logger", "logger", "torch.nn.parallel.DistributedDataParallel.state_dict", "optimizer.Optimizer.optimizer.state_dict", "optimizer.Optimizer.scheduler.state_dict", "storage.cuda"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.profile", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.ddp.dist_train", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.ddp.dist_valid", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.save"], ["def", "dist_process", "(", "gpu", ",", "para", ")", ":", "\n", "    ", "\"\"\"\n    distributed data parallel training\n    \"\"\"", "\n", "# setup", "\n", "rank", "=", "gpu", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "'nccl'", ",", "\n", "init_method", "=", "'env://'", ",", "\n", "world_size", "=", "para", ".", "num_gpus", ",", "\n", "rank", "=", "rank", "\n", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", ")", "\n", "\n", "# set random seed", "\n", "torch", ".", "manual_seed", "(", "para", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "para", ".", "seed", ")", "\n", "random", ".", "seed", "(", "para", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "para", ".", "seed", ")", "\n", "\n", "# create logger", "\n", "logger", "=", "Logger", "(", "para", ")", "if", "rank", "==", "0", "else", "None", "\n", "if", "logger", ":", "\n", "        ", "logger", ".", "writer", "=", "SummaryWriter", "(", "logger", ".", "save_dir", ")", "\n", "\n", "# create model", "\n", "", "if", "logger", ":", "\n", "        ", "logger", "(", "'building {} model ...'", ".", "format", "(", "para", ".", "model", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "", "model", "=", "Model", "(", "para", ")", ".", "cuda", "(", "rank", ")", "\n", "if", "logger", ":", "\n", "        ", "logger", "(", "'model structure:'", ",", "model", ",", "verbose", "=", "False", ")", "\n", "\n", "# create criterion according to the loss function", "\n", "", "criterion", "=", "Loss", "(", "para", ")", ".", "cuda", "(", "rank", ")", "\n", "\n", "# todo Metrics class", "\n", "# create measurement metrics", "\n", "metrics_name", "=", "para", ".", "metrics", "\n", "module", "=", "import_module", "(", "'train.metrics'", ")", "\n", "val_range", "=", "2.0", "**", "8", "-", "1", "if", "para", ".", "data_format", "==", "'RGB'", "else", "2.0", "**", "16", "-", "1", "\n", "metrics", "=", "getattr", "(", "module", ",", "metrics_name", ")", "(", "centralize", "=", "para", ".", "centralize", ",", "normalize", "=", "para", ".", "normalize", ",", "\n", "val_range", "=", "val_range", ")", ".", "cuda", "(", "rank", ")", "\n", "\n", "# todo deprecate Optimizer class", "\n", "# create optimizer", "\n", "opt", "=", "Optimizer", "(", "para", ",", "model", ")", "\n", "\n", "# distributed data parallel", "\n", "model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "rank", "]", ")", "\n", "\n", "# record model profile: computation cost & # of parameters", "\n", "if", "not", "para", ".", "no_profile", "and", "logger", ":", "\n", "        ", "profile_model", "=", "Model", "(", "para", ")", ".", "cuda", "(", ")", "\n", "flops", ",", "params", "=", "profile_model", ".", "profile", "(", ")", "\n", "logger", "(", "'generating profile of {} model ...'", ".", "format", "(", "para", ".", "model", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "logger", "(", "'[profile] computation cost: {:.2f} GMACs, parameters: {:.2f} M'", ".", "format", "(", "\n", "flops", "/", "10", "**", "9", ",", "params", "/", "10", "**", "6", ")", ",", "timestamp", "=", "False", ")", "\n", "del", "profile_model", "\n", "\n", "# create dataloader", "\n", "", "if", "logger", ":", "\n", "        ", "logger", "(", "'loading {} dataloader ...'", ".", "format", "(", "para", ".", "dataset", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "", "data", "=", "Data", "(", "para", ",", "rank", ")", "\n", "train_loader", "=", "data", ".", "dataloader_train", "\n", "valid_loader", "=", "data", ".", "dataloader_valid", "\n", "\n", "# resume from a checkpoint", "\n", "if", "para", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "para", ".", "resume_file", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "para", ".", "resume_file", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "rank", ")", ")", "\n", "if", "logger", ":", "\n", "                ", "logger", "(", "'loading checkpoint {} ...'", ".", "format", "(", "para", ".", "resume_file", ")", ")", "\n", "logger", ".", "register_dict", "=", "checkpoint", "[", "'register_dict'", "]", "\n", "", "para", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "opt", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "opt", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "'no check point found at {}'", ".", "format", "(", "para", ".", "resume_file", ")", "\n", "if", "logger", ":", "\n", "                ", "logger", "(", "msg", ",", "verbose", "=", "False", ")", "\n", "", "raise", "FileNotFoundError", "(", "msg", ")", "\n", "\n", "# training and validation", "\n", "", "", "for", "epoch", "in", "range", "(", "para", ".", "start_epoch", ",", "para", ".", "end_epoch", "+", "1", ")", ":", "\n", "        ", "dist_train", "(", "train_loader", ",", "model", ",", "criterion", ",", "metrics", ",", "opt", ",", "epoch", ",", "para", ",", "logger", ")", "\n", "dist_valid", "(", "valid_loader", ",", "model", ",", "criterion", ",", "metrics", ",", "epoch", ",", "para", ",", "logger", ")", "\n", "\n", "# save checkpoint", "\n", "if", "logger", ":", "\n", "            ", "checkpoint", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model'", ":", "para", ".", "model", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'register_dict'", ":", "logger", ".", "register_dict", ",", "\n", "'optimizer'", ":", "opt", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "opt", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "}", "\n", "logger", ".", "save", "(", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.ddp.dist_train": [[125, 207], ["model.train", "opt.lr_schedule", "logger", "loss.loss_parse", "losses_name.append", "utils.AverageMeter", "utils.AverageMeter", "time.time", "time.time", "tqdm.tqdm", "enumerate", "model", "criterion", "isinstance", "metrics", "utils.reduce_tensor", "utils.AverageMeter.update", "opt.zero_grad", "losses[].backward", "torch.nn.utils.clip_grad_norm_", "opt.step", "tqdm.tqdm.close", "logger.register", "logger.register", "logger.writer.add_scalar", "logger.writer.add_scalar", "logger", "logger.report", "losses_meter.items", "logger", "utils.AverageMeter", "val.cuda", "model.detach", "utils.reduce_tensor", "losses_meter[].update", "metrics.detach", "utils.reduce_tensor.item", "inputs.size", "model.parameters", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.AverageMeter.update", "time.time", "tqdm.tqdm.update", "logger.writer.add_scalar", "opt.get_lr", "opt.get_lr", "losses[].detach", "utils.reduce_tensor.item", "inputs.size", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.dp.train", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.lr_schedule", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.loss_parse", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.reduce_tensor", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.zero_grad", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.step", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.register", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.register", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.report", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.reduce_tensor", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.get_lr", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.get_lr"], ["", "", "", "def", "dist_train", "(", "train_loader", ",", "model", ",", "criterion", ",", "metrics", ",", "opt", ",", "epoch", ",", "para", ",", "logger", ")", ":", "\n", "# training mode", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "if", "logger", ":", "\n", "        ", "logger", "(", "'[Epoch {} / lr {:.2e}]'", ".", "format", "(", "epoch", ",", "opt", ".", "get_lr", "(", ")", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "\n", "losses_meter", "=", "{", "}", "\n", "_", ",", "losses_name", "=", "loss_parse", "(", "para", ".", "loss", ")", "\n", "losses_name", ".", "append", "(", "'all'", ")", "\n", "for", "key", "in", "losses_name", ":", "\n", "            ", "losses_meter", "[", "key", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "", "measure_meter", "=", "AverageMeter", "(", ")", "\n", "batchtime_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "train_loader", ")", "*", "para", ".", "num_gpus", ",", "ncols", "=", "80", ")", "\n", "\n", "", "for", "iter_samples", "in", "train_loader", ":", "\n", "        ", "for", "(", "key", ",", "val", ")", "in", "enumerate", "(", "iter_samples", ")", ":", "\n", "            ", "iter_samples", "[", "key", "]", "=", "val", ".", "cuda", "(", ")", "\n", "", "inputs", "=", "iter_samples", "[", "0", "]", "\n", "labels", "=", "iter_samples", "[", "1", "]", "\n", "outputs", "=", "model", "(", "iter_samples", ")", "\n", "\n", "# todo merge this part with model class", "\n", "losses", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "if", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "outputs", "=", "outputs", "[", "0", "]", "\n", "", "measure", "=", "metrics", "(", "outputs", ".", "detach", "(", ")", ",", "labels", ")", "\n", "\n", "# reduce loss and measurement between GPUs", "\n", "for", "key", "in", "losses_name", ":", "\n", "            ", "reduced_loss", "=", "reduce_tensor", "(", "para", ".", "num_gpus", ",", "losses", "[", "key", "]", ".", "detach", "(", ")", ")", "\n", "losses_meter", "[", "key", "]", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "", "reduced_measure", "=", "reduce_tensor", "(", "para", ".", "num_gpus", ",", "measure", ".", "detach", "(", ")", ")", "\n", "measure_meter", ".", "update", "(", "reduced_measure", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# backward and optimize", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "losses", "[", "'all'", "]", ".", "backward", "(", ")", "\n", "\n", "# clip the grad", "\n", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", "=", "20", ",", "norm_type", "=", "2", ")", "\n", "\n", "# update weights", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "if", "logger", ":", "\n", "# measure elapsed time", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "batchtime_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "pbar", ".", "update", "(", "para", ".", "num_gpus", "*", "para", ".", "batch_size", ")", "\n", "\n", "", "", "if", "logger", ":", "\n", "        ", "pbar", ".", "close", "(", ")", "\n", "\n", "# record info", "\n", "logger", ".", "register", "(", "para", ".", "loss", "+", "'_train'", ",", "epoch", ",", "losses_meter", "[", "'all'", "]", ".", "avg", ")", "\n", "logger", ".", "register", "(", "para", ".", "metrics", "+", "'_train'", ",", "epoch", ",", "measure_meter", ".", "avg", ")", "\n", "for", "key", "in", "losses_name", ":", "\n", "            ", "logger", ".", "writer", ".", "add_scalar", "(", "key", "+", "'_loss_train'", ",", "losses_meter", "[", "key", "]", ".", "avg", ",", "epoch", ")", "\n", "", "logger", ".", "writer", ".", "add_scalar", "(", "para", ".", "metrics", "+", "'_train'", ",", "measure_meter", ".", "avg", ",", "epoch", ")", "\n", "logger", ".", "writer", ".", "add_scalar", "(", "'lr'", ",", "opt", ".", "get_lr", "(", ")", ",", "epoch", ")", "\n", "\n", "# show info", "\n", "logger", "(", "'[train] epoch time: {:.2f}s, average batch time: {:.2f}s'", ".", "format", "(", "end", "-", "start", ",", "batchtime_meter", ".", "avg", ")", ",", "\n", "timestamp", "=", "False", ")", "\n", "logger", ".", "report", "(", "[", "[", "para", ".", "loss", ",", "'min'", "]", ",", "[", "para", ".", "metrics", ",", "'max'", "]", "]", ",", "state", "=", "'train'", ",", "epoch", "=", "epoch", ")", "\n", "msg", "=", "'[train]'", "\n", "for", "key", ",", "meter", "in", "losses_meter", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "==", "'all'", ":", "\n", "                ", "continue", "\n", "", "msg", "+=", "' {} : {:4f};'", ".", "format", "(", "key", ",", "meter", ".", "avg", ")", "\n", "", "logger", "(", "msg", ",", "timestamp", "=", "False", ")", "\n", "\n", "# adjust learning rate", "\n", "", "opt", ".", "lr_schedule", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.ddp.dist_valid": [[209, 270], ["model.eval", "torch.no_grad", "torch.no_grad", "loss.loss_parse", "losses_name.append", "utils.AverageMeter", "utils.AverageMeter", "time.time", "time.time", "tqdm.tqdm", "enumerate", "model", "criterion", "isinstance", "metrics", "utils.reduce_tensor", "utils.AverageMeter.update", "tqdm.tqdm.close", "logger.register", "logger.register", "logger.writer.add_scalar", "logger", "logger.report", "losses_meter.items", "logger", "utils.AverageMeter", "val.cuda", "model.detach", "utils.reduce_tensor", "losses_meter[].update", "metrics.detach", "utils.reduce_tensor.item", "inputs.size", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.AverageMeter.update", "time.time", "tqdm.tqdm.update", "logger.writer.add_scalar", "losses[].detach", "utils.reduce_tensor.item", "inputs.size", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.loss_parse", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.reduce_tensor", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.register", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.register", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.report", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.reduce_tensor", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update"], ["", "def", "dist_valid", "(", "valid_loader", ",", "model", ",", "criterion", ",", "metrics", ",", "epoch", ",", "para", ",", "logger", ")", ":", "\n", "# evaluation mode", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "logger", ":", "\n", "            ", "losses_meter", "=", "{", "}", "\n", "_", ",", "losses_name", "=", "loss_parse", "(", "para", ".", "loss", ")", "\n", "losses_name", ".", "append", "(", "'all'", ")", "\n", "for", "key", "in", "losses_name", ":", "\n", "                ", "losses_meter", "[", "key", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "", "measure_meter", "=", "AverageMeter", "(", ")", "\n", "batchtime_meter", "=", "AverageMeter", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "valid_loader", ")", "*", "para", ".", "num_gpus", ",", "ncols", "=", "80", ")", "\n", "\n", "", "for", "iter_samples", "in", "valid_loader", ":", "\n", "            ", "for", "(", "key", ",", "val", ")", "in", "enumerate", "(", "iter_samples", ")", ":", "\n", "                ", "iter_samples", "[", "key", "]", "=", "val", ".", "cuda", "(", ")", "\n", "", "inputs", "=", "iter_samples", "[", "0", "]", "\n", "labels", "=", "iter_samples", "[", "1", "]", "\n", "outputs", "=", "model", "(", "iter_samples", ")", "\n", "\n", "losses", "=", "criterion", "(", "outputs", ",", "labels", ",", "valid_flag", "=", "True", ")", "\n", "if", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "outputs", "=", "outputs", "[", "0", "]", "\n", "", "measure", "=", "metrics", "(", "outputs", ".", "detach", "(", ")", ",", "labels", ")", "\n", "\n", "for", "key", "in", "losses_name", ":", "\n", "                ", "reduced_loss", "=", "reduce_tensor", "(", "para", ".", "num_gpus", ",", "losses", "[", "key", "]", ".", "detach", "(", ")", ")", "\n", "losses_meter", "[", "key", "]", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "", "reduced_measure", "=", "reduce_tensor", "(", "para", ".", "num_gpus", ",", "measure", ".", "detach", "(", ")", ")", "\n", "measure_meter", ".", "update", "(", "reduced_measure", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "logger", ":", "\n", "                ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "batchtime_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "pbar", ".", "update", "(", "para", ".", "num_gpus", "*", "para", ".", "batch_size", ")", "\n", "\n", "", "", "if", "logger", ":", "\n", "            ", "pbar", ".", "close", "(", ")", "\n", "# record info", "\n", "logger", ".", "register", "(", "para", ".", "loss", "+", "'_valid'", ",", "epoch", ",", "losses_meter", "[", "'all'", "]", ".", "avg", ")", "\n", "logger", ".", "register", "(", "para", ".", "metrics", "+", "'_valid'", ",", "epoch", ",", "measure_meter", ".", "avg", ")", "\n", "for", "key", "in", "losses_name", ":", "\n", "                ", "logger", ".", "writer", ".", "add_scalar", "(", "key", "+", "'_loss_valid'", ",", "losses_meter", "[", "key", "]", ".", "avg", ",", "epoch", ")", "\n", "", "logger", ".", "writer", ".", "add_scalar", "(", "para", ".", "metrics", "+", "'_valid'", ",", "measure_meter", ".", "avg", ",", "epoch", ")", "\n", "\n", "# show info", "\n", "logger", "(", "'[valid] epoch time: {:.2f}s, average batch time: {:.2f}s'", ".", "format", "(", "end", "-", "start", ",", "batchtime_meter", ".", "avg", ")", ",", "\n", "timestamp", "=", "False", ")", "\n", "logger", ".", "report", "(", "[", "[", "para", ".", "loss", ",", "'min'", "]", ",", "[", "para", ".", "metrics", ",", "'max'", "]", "]", ",", "state", "=", "'valid'", ",", "epoch", "=", "epoch", ")", "\n", "msg", "=", "'[valid]'", "\n", "for", "key", ",", "meter", "in", "losses_meter", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "==", "'all'", ":", "\n", "                    ", "continue", "\n", "", "msg", "+=", "' {} : {:4f};'", ".", "format", "(", "key", ",", "meter", ".", "avg", ")", "\n", "", "logger", "(", "msg", ",", "timestamp", "=", "False", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.test_isp.raw2rgb": [[11, 20], ["PIL.Image.fromarray().save", "rawpy.imread", "os.remove", "rawpy.imread.postprocess", "PIL.Image.fromarray", "raw_buf.postprocess.astype"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.save"], ["def", "raw2rgb", "(", "img_raw", ")", ":", "\n", "    ", "import", "os", "\n", "Image", ".", "fromarray", "(", "img_raw", ",", "mode", "=", "\"I;16\"", ")", ".", "save", "(", "'saved.tiff'", ")", "\n", "raw_buf", "=", "rawpy", ".", "imread", "(", "'saved.tiff'", ")", "\n", "os", ".", "remove", "(", "'saved.tiff'", ")", "\n", "img_rgb", "=", "raw_buf", ".", "postprocess", "(", "use_auto_wb", "=", "True", ",", "no_auto_bright", "=", "False", ",", "output_bps", "=", "16", ",", "user_black", "=", "0", ")", "\n", "img_rgb", "=", "(", "img_rgb", ".", "astype", "(", "np", ".", "float32", ")", "/", "65535", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "img_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.test_isp._main": [[22, 85], ["os.listdir", "utils.AverageMeter", "utils.AverageMeter", "print", "print", "dir.endswith", "os.path.join", "range", "numpy.concatenate", "test_isp.raw2rgb", "range", "utils.img2video", "range", "numpy.concatenate", "np.concatenate.append", "range", "os.path.join", "cv2.imread", "np.concatenate.append", "os.path.join", "cv2.imwrite", "os.path.join", "cv2.imread", "os.path.join", "cv2.imwrite", "os.path.join", "cv2.imread", "os.path.join", "cv2.imwrite", "utils.AverageMeter.update", "utils.AverageMeter.update", "metrics.psnr_calculate", "metrics.ssim_calculate", "marks[].lower", "marks[].lower", "marks[].lower"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.test_isp.raw2rgb", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.img2video", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.psnr_calculate", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.ssim_calculate"], ["", "def", "_main", "(", "path", ",", "ds_path", ")", ":", "\n", "    ", "dirs", "=", "os", ".", "listdir", "(", "path", ")", "\n", "frame_start", "=", "0", "\n", "frame_end", "=", "150", "\n", "row_frames", "=", "15", "\n", "H", ",", "W", "=", "480", ",", "640", "\n", "PSNR", "=", "AverageMeter", "(", ")", "\n", "SSIM", "=", "AverageMeter", "(", ")", "\n", "marks", "=", "[", "'Input'", ",", "'ESTRNN-RAW'", ",", "'GT'", "]", "\n", "\n", "for", "dir", "in", "dirs", ":", "\n", "        ", "if", "dir", ".", "endswith", "(", "'.avi'", ")", ":", "\n", "            ", "continue", "\n", "", "dir_path", "=", "join", "(", "path", ",", "dir", ")", "\n", "\n", "imgs_deblur_raw", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "(", "frame_end", "-", "frame_start", ")", "//", "row_frames", ")", ":", "\n", "            ", "imgs_deblur_raw_row", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "row_frames", ")", ":", "\n", "                ", "frame", "=", "i", "*", "row_frames", "+", "j", "\n", "if", "frame", "==", "frame_start", "+", "0", "or", "frame", "==", "frame_start", "+", "1", ":", "\n", "                    ", "frame", "=", "frame_start", "+", "2", "\n", "", "elif", "frame", "==", "frame_end", "-", "1", "or", "frame", "==", "frame_end", "-", "2", ":", "\n", "                    ", "frame", "=", "frame_end", "-", "3", "\n", "", "img_deblur_raw_path", "=", "join", "(", "dir_path", ",", "'{:08d}_{}.tiff'", ".", "format", "(", "frame", ",", "'estrnn-raw'", ")", ")", "\n", "img_deblur_raw", "=", "cv2", ".", "imread", "(", "img_deblur_raw_path", ",", "-", "1", ")", "\n", "assert", "not", "img_deblur_raw", "is", "None", ",", "'i:{}, j:{}, frame:{}'", ".", "format", "(", "i", ",", "j", ",", "frame", ")", "\n", "imgs_deblur_raw_row", ".", "append", "(", "img_deblur_raw", ")", "\n", "", "imgs_deblur_raw_row", "=", "np", ".", "concatenate", "(", "imgs_deblur_raw_row", ",", "axis", "=", "1", ")", "\n", "assert", "imgs_deblur_raw_row", ".", "shape", "==", "(", "H", ",", "W", "*", "row_frames", ")", ",", "imgs_deblur_raw_row", ".", "shape", "\n", "imgs_deblur_raw", ".", "append", "(", "imgs_deblur_raw_row", ")", "\n", "\n", "", "imgs_deblur_raw", "=", "np", ".", "concatenate", "(", "imgs_deblur_raw", ",", "axis", "=", "0", ")", "\n", "imgs_deblur", "=", "raw2rgb", "(", "imgs_deblur_raw", ")", "\n", "\n", "for", "i", "in", "range", "(", "(", "frame_end", "-", "frame_start", ")", "//", "row_frames", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "row_frames", ")", ":", "\n", "                ", "frame", "=", "i", "*", "row_frames", "+", "j", "\n", "if", "frame", "in", "[", "frame_start", "+", "0", ",", "frame_start", "+", "1", ",", "frame_end", "-", "1", ",", "frame_end", "-", "2", "]", ":", "\n", "                    ", "continue", "\n", "", "img_deblur", "=", "imgs_deblur", "[", "i", "*", "H", ":", "(", "i", "+", "1", ")", "*", "H", ",", "j", "*", "W", ":", "(", "j", "+", "1", ")", "*", "W", ",", "...", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "save_path", "=", "join", "(", "dir_path", ",", "'{:08d}_{}.png'", ".", "format", "(", "frame", ",", "marks", "[", "1", "]", ".", "lower", "(", ")", ")", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "img_deblur", ")", "\n", "\n", "img_blur_path", "=", "join", "(", "ds_path", ",", "dir", ",", "'Blur'", ",", "'RGB'", ",", "'{:08d}.png'", ".", "format", "(", "frame", ")", ")", "\n", "img_blur", "=", "cv2", ".", "imread", "(", "img_blur_path", ")", "\n", "save_path", "=", "join", "(", "dir_path", ",", "'{:08d}_{}.png'", ".", "format", "(", "frame", ",", "marks", "[", "0", "]", ".", "lower", "(", ")", ")", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "img_blur", ")", "\n", "\n", "img_gt_path", "=", "join", "(", "ds_path", ",", "dir", ",", "'Sharp'", ",", "'RGB'", ",", "'{:08d}.png'", ".", "format", "(", "frame", ")", ")", "\n", "img_gt", "=", "cv2", ".", "imread", "(", "img_gt_path", ")", "\n", "save_path", "=", "join", "(", "dir_path", ",", "'{:08d}_{}.png'", ".", "format", "(", "frame", ",", "marks", "[", "2", "]", ".", "lower", "(", ")", ")", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "img_gt", ")", "\n", "\n", "PSNR", ".", "update", "(", "psnr_calculate", "(", "img_deblur", ",", "img_gt", ")", ")", "\n", "SSIM", ".", "update", "(", "ssim_calculate", "(", "img_deblur", ",", "img_gt", ")", ")", "\n", "\n", "", "", "img2video", "(", "path", "=", "path", ",", "size", "=", "(", "3", "*", "W", ",", "1", "*", "H", ")", ",", "seq", "=", "dir", ",", "frame_start", "=", "frame_start", "+", "2", ",", "frame_end", "=", "frame_end", "-", "2", ",", "\n", "marks", "=", "marks", ",", "fps", "=", "10", ")", "\n", "\n", "", "print", "(", "'Test PSNR : {}'", ".", "format", "(", "PSNR", ".", "avg", ")", ")", "\n", "print", "(", "'Test SSIM : {}'", ".", "format", "(", "SSIM", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.PSNR.__init__": [[59, 64], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "centralize", "=", "True", ",", "normalize", "=", "True", ",", "val_range", "=", "255.", ")", ":", "\n", "        ", "super", "(", "PSNR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "centralize", "=", "centralize", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "val_range", "=", "val_range", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.PSNR._quantize": [[65, 69], ["data.utils.normalize_reverse", "img.clamp().round.clamp().round.clamp().round", "img.clamp().round.clamp().round.clamp"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize_reverse"], ["", "def", "_quantize", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "normalize_reverse", "(", "img", ",", "centralize", "=", "self", ".", "centralize", ",", "normalize", "=", "self", ".", "normalize", ",", "val_range", "=", "self", ".", "val_range", ")", "\n", "img", "=", "img", ".", "clamp", "(", "0", ",", "self", ".", "val_range", ")", ".", "round", "(", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.PSNR.forward": [[70, 83], ["diff.div().pow().view().mean", "psnr.mean", "metrics.PSNR._quantize", "metrics.PSNR._quantize", "x.dim", "diff.div().pow().view().mean.log10", "x.dim", "x.size", "diff.div().pow().view", "x.dim", "x.size", "x.size", "diff.div().pow", "diff.div"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.PSNR._quantize", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.PSNR._quantize"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "diff", "=", "self", ".", "_quantize", "(", "x", ")", "-", "self", ".", "_quantize", "(", "y", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "n", "=", "1", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "n", "=", "x", ".", "size", "(", "0", ")", "*", "x", ".", "size", "(", "1", ")", "\n", "\n", "", "mse", "=", "diff", ".", "div", "(", "self", ".", "val_range", ")", ".", "pow", "(", "2", ")", ".", "view", "(", "n", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "psnr", "=", "-", "10", "*", "mse", ".", "log10", "(", ")", "\n", "\n", "return", "psnr", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.estimate_mask": [[10, 14], ["img.copy"], "function", ["None"], ["def", "estimate_mask", "(", "img", ")", ":", "\n", "    ", "mask", "=", "img", ".", "copy", "(", ")", "\n", "mask", "[", "mask", ">", "0.0", "]", "=", "1.0", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.mask_pair": [[16, 18], ["None"], "function", ["None"], ["", "def", "mask_pair", "(", "x", ",", "y", ",", "mask", ")", ":", "\n", "    ", "return", "x", "*", "mask", ",", "y", "*", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.im2tensor": [[20, 24], ["image.astype.astype", "torch.Tensor", "[].transpose"], "function", ["None"], ["", "def", "im2tensor", "(", "image", ",", "cent", "=", "1.", ",", "factor", "=", "255.", "/", "2.", ")", ":", "\n", "    ", "image", "=", "image", ".", "astype", "(", "np", ".", "float", ")", "\n", "return", "torch", ".", "Tensor", "(", "(", "image", "/", "factor", "-", "cent", ")", "\n", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.psnr_calculate": [[26, 36], ["x.astype.astype", "y.astype.astype", "numpy.mean", "numpy.log10"], "function", ["None"], ["", "def", "psnr_calculate", "(", "x", ",", "y", ",", "val_range", "=", "255.0", ")", ":", "\n", "# x,y size (h,w,c)", "\n", "# assert len(x.shape) == 3", "\n", "# assert len(y.shape) == 3", "\n", "    ", "x", "=", "x", ".", "astype", "(", "np", ".", "float", ")", "\n", "y", "=", "y", ".", "astype", "(", "np", ".", "float", ")", "\n", "diff", "=", "(", "x", "-", "y", ")", "/", "val_range", "\n", "mse", "=", "np", ".", "mean", "(", "diff", "**", "2", ")", "\n", "psnr", "=", "-", "10", "*", "np", ".", "log10", "(", "mse", ")", "\n", "return", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.ssim_calculate": [[38, 42], ["skimage.metrics.structural_similarity"], "function", ["None"], ["", "def", "ssim_calculate", "(", "x", ",", "y", ",", "val_range", "=", "255.0", ")", ":", "\n", "    ", "ssim", "=", "compare_ssim", "(", "y", ",", "x", ",", "multichannel", "=", "True", ",", "gaussian_weights", "=", "True", ",", "sigma", "=", "1.5", ",", "use_sample_covariance", "=", "False", ",", "\n", "data_range", "=", "val_range", ")", "\n", "return", "ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.trainer.Trainer.__init__": [[13, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "self", ".", "para", "=", "para", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "'6666'", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.trainer.Trainer.run": [[18, 40], ["datetime.datetime.datetime.now", "utils.Logger", "utils.Logger.record_para", "test.test.test", "range", "torch.Process", "torch.Process.start", "processes.append", "torch.Process.join", "dp.process"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.record_para", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.test.test", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.dp.process"], ["", "def", "run", "(", "self", ")", ":", "\n", "# recoding parameters", "\n", "        ", "self", ".", "para", ".", "time", "=", "datetime", ".", "now", "(", ")", "\n", "logger", "=", "Logger", "(", "self", ".", "para", ")", "\n", "logger", ".", "record_para", "(", ")", "\n", "\n", "# training", "\n", "if", "not", "self", ".", "para", ".", "test_only", ":", "\n", "            ", "if", "self", ".", "para", ".", "trainer_mode", "==", "'ddp'", ":", "\n", "                ", "gpus", "=", "self", ".", "para", ".", "num_gpus", "\n", "processes", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "gpus", ")", ":", "\n", "                    ", "p", "=", "mp", ".", "Process", "(", "target", "=", "dist_process", ",", "args", "=", "(", "rank", ",", "self", ".", "para", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "processes", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "", "", "elif", "self", ".", "para", ".", "trainer_mode", "==", "'dp'", ":", "\n", "                ", "process", "(", "self", ".", "para", ")", "\n", "\n", "# test", "\n", "", "", "test", "(", "self", ".", "para", ",", "logger", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.L1GradientLoss.__init__": [[28, 32], ["torch.nn.modules.loss._Loss.__init__", "loss.Gradient", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "L1GradientLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "get_grad", "=", "Gradient", "(", ")", "\n", "self", ".", "L1", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.L1GradientLoss.forward": [[33, 38], ["loss.L1GradientLoss.L1GradientLoss.get_grad", "loss.L1GradientLoss.L1GradientLoss.get_grad", "loss.L1GradientLoss.L1GradientLoss.L1"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.L1"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "grad_x", "=", "self", ".", "get_grad", "(", "x", ")", "\n", "grad_y", "=", "self", ".", "get_grad", "(", "y", ")", "\n", "loss", "=", "self", ".", "L1", "(", "grad_x", ",", "grad_y", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Gradient.__init__": [[41, 53], ["torch.Module.__init__", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.FloatTensor().unsqueeze().unsqueeze", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Gradient", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_v", "=", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", "]", "\n", "kernel_h", "=", "[", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", "\n", "kernel_h", "=", "torch", ".", "FloatTensor", "(", "kernel_h", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "kernel_v", "=", "torch", ".", "FloatTensor", "(", "kernel_v", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "weight_h", "=", "nn", ".", "Parameter", "(", "data", "=", "kernel_h", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "self", ".", "weight_v", "=", "nn", ".", "Parameter", "(", "data", "=", "kernel_v", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Gradient.forward": [[54, 73], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.sqrt.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "[", ":", ",", "0", "]", "\n", "x1", "=", "x", "[", ":", ",", "1", "]", "\n", "x2", "=", "x", "[", ":", ",", "2", "]", "\n", "x0_v", "=", "F", ".", "conv2d", "(", "x0", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_v", ",", "padding", "=", "2", ")", "\n", "x0_h", "=", "F", ".", "conv2d", "(", "x0", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_h", ",", "padding", "=", "2", ")", "\n", "\n", "x1_v", "=", "F", ".", "conv2d", "(", "x1", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_v", ",", "padding", "=", "2", ")", "\n", "x1_h", "=", "F", ".", "conv2d", "(", "x1", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_h", ",", "padding", "=", "2", ")", "\n", "\n", "x2_v", "=", "F", ".", "conv2d", "(", "x2", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_v", ",", "padding", "=", "2", ")", "\n", "x2_h", "=", "F", ".", "conv2d", "(", "x2", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "weight_h", ",", "padding", "=", "2", ")", "\n", "\n", "x0", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "x0_v", ",", "2", ")", "+", "torch", ".", "pow", "(", "x0_h", ",", "2", ")", "+", "1e-6", ")", "\n", "x1", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "x1_v", ",", "2", ")", "+", "torch", ".", "pow", "(", "x1_h", ",", "2", ")", "+", "1e-6", ")", "\n", "x2", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "x2_v", ",", "2", ")", "+", "torch", ".", "pow", "(", "x2_h", ",", "2", ")", "+", "1e-6", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.L1_Charbonnier_loss.__init__": [[80, 83], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "L1_Charbonnier_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "1e-3", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.L1_Charbonnier_loss.forward": [[84, 89], ["torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "diff", "=", "torch", ".", "add", "(", "X", ",", "-", "Y", ")", "\n", "error", "=", "torch", ".", "sqrt", "(", "diff", "*", "diff", "+", "self", ".", "eps", "*", "self", ".", "eps", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "error", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.L1_Charbonnier_loss_color.__init__": [[96, 99], ["torch.nn.modules.loss._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "L1_Charbonnier_loss_color", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "1e-3", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.L1_Charbonnier_loss_color.forward": [[100, 109], ["torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "diff", "=", "torch", ".", "add", "(", "X", ",", "-", "Y", ")", "\n", "diff_sq", "=", "diff", "*", "diff", "\n", "# print(diff_sq.shape)", "\n", "diff_sq_color", "=", "torch", ".", "mean", "(", "diff_sq", ",", "1", ",", "True", ")", "\n", "# print(diff_sq_color.shape)", "\n", "error", "=", "torch", ".", "sqrt", "(", "diff_sq_color", "+", "self", ".", "eps", "*", "self", ".", "eps", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "error", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.PerceptualLoss.contentFunc": [[116, 127], ["cnn.cuda.cuda.cuda", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.cuda.cuda.cuda", "enumerate", "torchvision.vgg19", "list", "model.cuda.cuda.add_module", "str"], "methods", ["None"], ["    ", "def", "contentFunc", "(", "self", ")", ":", "\n", "        ", "conv_3_3_layer", "=", "14", "\n", "cnn", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "cnn", "=", "cnn", ".", "cuda", "(", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "list", "(", "cnn", ")", ")", ":", "\n", "            ", "model", ".", "add_module", "(", "str", "(", "i", ")", ",", "layer", ")", "\n", "if", "i", "==", "conv_3_3_layer", ":", "\n", "                ", "break", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.PerceptualLoss.__init__": [[128, 131], ["loss.PerceptualLoss.contentFunc"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.PerceptualLoss.contentFunc"], ["", "def", "__init__", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "criterion", "=", "loss", "\n", "self", ".", "contentFunc", "=", "self", ".", "contentFunc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.PerceptualLoss.__call__": [[132, 138], ["loss.PerceptualLoss.PerceptualLoss.contentFunc.forward", "loss.PerceptualLoss.PerceptualLoss.contentFunc.forward", "loss.PerceptualLoss.PerceptualLoss.detach", "loss.PerceptualLoss.PerceptualLoss.criterion"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Loss.forward", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Loss.forward"], ["", "def", "__call__", "(", "self", ",", "fakeIm", ",", "realIm", ")", ":", "\n", "        ", "f_fake", "=", "self", ".", "contentFunc", ".", "forward", "(", "fakeIm", ")", "\n", "f_real", "=", "self", ".", "contentFunc", ".", "forward", "(", "realIm", ")", "\n", "f_real_no_grad", "=", "f_real", ".", "detach", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "f_fake", ",", "f_real_no_grad", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.BasicBlock.__init__": [[141, 147], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.BasicBlock.forward": [[148, 151], ["loss.BasicBlock.relu", "loss.BasicBlock.bn", "loss.BasicBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.GAN.__init__": [[158, 166], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "Discriminator().to", "torch.BCELoss().to", "torch.BCELoss().to", "torch.BCELoss().to", "torch.BCELoss().to", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "loss.GAN.D.parameters", "loss.Discriminator", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "GAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", "if", "para", ".", "cpu", "else", "'cuda'", ")", "\n", "self", ".", "D", "=", "Discriminator", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "BCELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "D_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "D", ".", "parameters", "(", ")", ",", "lr", "=", "para", ".", "lr", ")", "\n", "self", ".", "real_label", "=", "1", "\n", "self", ".", "fake_label", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.GAN.forward": [[167, 198], ["loss.GAN.D.zero_grad", "y.size", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full.fill_", "torch.full.fill_", "torch.full.fill_", "torch.full.fill_", "loss.GAN.D().view", "loss.GAN.criterion", "loss.GAN.D().view", "loss.GAN.criterion", "loss.GAN.backward", "torch.full.fill_", "torch.full.fill_", "torch.full.fill_", "torch.full.fill_", "loss.GAN.D().view", "loss.GAN.criterion", "loss.GAN.backward", "loss.GAN.D_optimizer.step", "loss.GAN.D", "loss.GAN.D", "loss.GAN.D", "x.detach"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.zero_grad", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.step"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "valid_flag", "=", "False", ")", ":", "\n", "        ", "self", ".", "D", ".", "zero_grad", "(", ")", "\n", "b", "=", "y", ".", "size", "(", "0", ")", "\n", "label", "=", "torch", ".", "full", "(", "(", "b", ",", ")", ",", "self", ".", "real_label", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "not", "valid_flag", ":", "\n", "############################################", "\n", "# update D network: maximize log(D(y) + log(1-D(G(x))))", "\n", "# train with all-real batch", "\n", "            ", "output", "=", "self", ".", "D", "(", "y", ")", ".", "view", "(", "-", "1", ")", "# forward pass of real batch through D", "\n", "errD_real", "=", "self", ".", "criterion", "(", "output", ",", "label", ")", "# calculate loss on all-real batch", "\n", "errD_real", ".", "backward", "(", ")", "# calculate gradients for D in backward pass", "\n", "## D_y = output.mean().item()", "\n", "# train with all-fake batch", "\n", "label", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "output", "=", "self", ".", "D", "(", "x", ".", "detach", "(", ")", ")", ".", "view", "(", "-", "1", ")", "# classify all fake batch with D", "\n", "errD_fake", "=", "self", ".", "criterion", "(", "output", ",", "label", ")", "# calculate D's loss on the all-fake batch", "\n", "errD_fake", ".", "backward", "(", ")", "# calculate gradients for all-fake batch", "\n", "## D_G_x1 = output.mean().item()", "\n", "# add the gradients from the all-real and all-fake batches", "\n", "errD", "=", "errD_real", "+", "errD_fake", "\n", "# update D", "\n", "self", ".", "D_optimizer", ".", "step", "(", ")", "\n", "############################################", "\n", "# generate loss for G network: maximize log(D(G(x)))", "\n", "", "label", ".", "fill_", "(", "self", ".", "real_label", ")", "# fake labels are all real for generator cost", "\n", "# since we just updated D, perform another forward pass of all-fake batch through D", "\n", "output", "=", "self", ".", "D", "(", "x", ")", ".", "view", "(", "-", "1", ")", "\n", "errG", "=", "self", ".", "criterion", "(", "output", ",", "label", ")", "# calculate G's loss on this output", "\n", "## D_G_x2 = output.mean().item()", "\n", "\n", "return", "errG", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Discriminator.__init__": [[201, 227], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "loss.BasicBlock", "middle_module_list.append", "middle_module_list.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "loss.BasicBlock", "loss.BasicBlock"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# x: (n,3,256,256)", "\n", "c", "=", "3", "\n", "h", ",", "w", "=", "256", ",", "256", "\n", "n_feats", "=", "8", "\n", "n_middle_blocks", "=", "6", "\n", "self", ".", "start_module", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "c", ",", "out_channels", "=", "n_feats", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# (n,8,256,256)", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "BasicBlock", "(", "in_channels", "=", "n_feats", ",", "out_channels", "=", "n_feats", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "# (n,8,128,128)", "\n", ")", "\n", "middle_module_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_middle_blocks", ")", ":", "\n", "            ", "middle_module_list", ".", "append", "(", "\n", "BasicBlock", "(", "in_channels", "=", "n_feats", "*", "(", "2", "**", "i", ")", ",", "out_channels", "=", "n_feats", "*", "(", "2", "**", "(", "i", "+", "1", ")", ")", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "middle_module_list", ".", "append", "(", "\n", "BasicBlock", "(", "in_channels", "=", "n_feats", "*", "(", "2", "**", "(", "i", "+", "1", ")", ")", ",", "out_channels", "=", "n_feats", "*", "(", "2", "**", "(", "i", "+", "1", ")", ")", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "middle_module", "=", "nn", ".", "Sequential", "(", "*", "middle_module_list", ")", "\n", "self", ".", "end_module", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2048", ",", "1024", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Discriminator.forward": [[229, 237], ["loss.Discriminator.start_module", "loss.Discriminator.middle_module", "h.reshape.reshape.reshape", "loss.Discriminator.end_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: (n,3,256,256)", "\n", "        ", "n", ",", "_", ",", "_", ",", "_", "=", "x", ".", "shape", "\n", "h", "=", "self", ".", "start_module", "(", "x", ")", "# (n,8,256,256)", "\n", "h", "=", "self", ".", "middle_module", "(", "h", ")", "# (n,512,2,2)", "\n", "h", "=", "h", ".", "reshape", "(", "n", ",", "-", "1", ")", "# (n,2048)", "\n", "out", "=", "self", ".", "end_module", "(", "h", ")", "# (n,1)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Loss.__init__": [[258, 267], ["torch.Module.__init__", "loss.loss_parse", "eval", "loss.Loss.losses.append"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.loss_parse"], ["def", "__init__", "(", "self", ",", "para", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ratios", ",", "losses", "=", "loss_parse", "(", "para", ".", "loss", ")", "\n", "self", ".", "losses_name", "=", "losses", "\n", "self", ".", "ratios", "=", "ratios", "\n", "self", ".", "losses", "=", "[", "]", "\n", "for", "loss", "in", "losses", ":", "\n", "            ", "loss_fn", "=", "eval", "(", "'{}(para)'", ".", "format", "(", "loss", ")", ")", "\n", "self", ".", "losses", ".", "append", "(", "loss_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Loss._forward_single": [[268, 288], ["range", "len", "x.reshape.reshape.reshape", "y.reshape.reshape.reshape", "len"], "methods", ["None"], ["", "", "def", "_forward_single", "(", "self", ",", "x", ",", "y", ",", "valid_flag", "=", "False", ")", ":", "\n", "        ", "if", "len", "(", "x", ".", "shape", ")", "==", "5", ":", "\n", "            ", "b", ",", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "b", "*", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "y", "=", "y", ".", "reshape", "(", "b", "*", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "", "losses", "=", "{", "}", "\n", "loss_all", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "losses", ")", ")", ":", "\n", "            ", "if", "valid_flag", "==", "True", "and", "self", ".", "losses_name", "[", "i", "]", "==", "'GAN'", ":", "\n", "                ", "loss_sub", "=", "self", ".", "ratios", "[", "i", "]", "*", "self", ".", "losses", "[", "i", "]", "(", "x", ",", "y", ",", "valid_flag", ")", "\n", "", "else", ":", "\n", "                ", "loss_sub", "=", "self", ".", "ratios", "[", "i", "]", "*", "self", ".", "losses", "[", "i", "]", "(", "x", ",", "y", ")", "\n", "", "losses", "[", "self", ".", "losses_name", "[", "i", "]", "]", "=", "loss_sub", "\n", "if", "loss_all", "==", "None", ":", "\n", "                ", "loss_all", "=", "loss_sub", "\n", "", "else", ":", "\n", "                ", "loss_all", "+=", "loss_sub", "\n", "", "", "losses", "[", "'all'", "]", "=", "loss_all", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Loss._forward_list": [[289, 301], ["len", "range", "len", "len", "loss.Loss._forward_single", "losses.keys"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Loss._forward_single"], ["", "def", "_forward_list", "(", "self", ",", "x", ",", "y", ",", "valid_flag", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", "\n", "scales", "=", "len", "(", "x", ")", "\n", "losses", "=", "None", "\n", "for", "i", "in", "range", "(", "scales", ")", ":", "\n", "            ", "temp_losses", "=", "self", ".", "_forward_single", "(", "x", "[", "i", "]", ",", "y", "[", "i", "]", ",", "valid_flag", ")", "\n", "if", "losses", "is", "None", ":", "\n", "                ", "losses", "=", "temp_losses", "\n", "", "else", ":", "\n", "                ", "for", "key", "in", "losses", ".", "keys", "(", ")", ":", "\n", "                    ", "losses", "[", "key", "]", "+=", "temp_losses", "[", "key", "]", "\n", "", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Loss.forward": [[302, 317], ["isinstance", "_y.append", "y.reshape.reshape.reshape", "_y.append", "_y.append", "loss.Loss._forward_list", "loss.Loss._forward_single", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate().reshape", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Loss._forward_list", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Loss._forward_single"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "valid_flag", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "B", ",", "N", ",", "C", ",", "H", ",", "W", "=", "y", ".", "shape", "\n", "_y", "=", "[", "]", "\n", "_y", ".", "append", "(", "y", ")", "\n", "y", "=", "y", ".", "reshape", "(", "B", ",", "N", "*", "C", ",", "H", ",", "W", ")", "\n", "_y", ".", "append", "(", "\n", "F", ".", "interpolate", "(", "y", ",", "size", "=", "(", "H", "//", "2", ",", "W", "//", "2", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ",", "H", "//", "2", ",", "\n", "W", "//", "2", ")", ")", "\n", "_y", ".", "append", "(", "\n", "F", ".", "interpolate", "(", "y", ",", "size", "=", "(", "H", "//", "4", ",", "W", "//", "4", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ",", "H", "//", "4", ",", "\n", "W", "//", "4", ")", ")", "\n", "return", "self", ".", "_forward_list", "(", "x", ",", "_y", ",", "valid_flag", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_single", "(", "x", ",", "y", ",", "valid_flag", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.MSE": [[9, 14], ["torch.MSELoss"], "function", ["None"], ["def", "MSE", "(", "para", ")", ":", "\n", "    ", "\"\"\"\n    L2 loss\n    \"\"\"", "\n", "return", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.L1": [[16, 21], ["torch.L1Loss"], "function", ["None"], ["", "def", "L1", "(", "para", ")", ":", "\n", "    ", "\"\"\"\n    L1 loss\n    \"\"\"", "\n", "return", "nn", ".", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.Perceptual": [[111, 113], ["loss.PerceptualLoss", "torch.L1Loss"], "function", ["None"], ["", "", "def", "Perceptual", "(", "para", ")", ":", "\n", "    ", "return", "PerceptualLoss", "(", "loss", "=", "nn", ".", "L1Loss", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.loss_parse": [[239, 251], ["loss_str.split", "item.split", "ratios.append", "losses.append", "float"], "function", ["None"], ["", "", "def", "loss_parse", "(", "loss_str", ")", ":", "\n", "    ", "\"\"\"\n    parse loss parameters\n    \"\"\"", "\n", "ratios", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "str_temp", "=", "loss_str", ".", "split", "(", "'|'", ")", "\n", "for", "item", "in", "str_temp", ":", "\n", "        ", "substr_temp", "=", "item", ".", "split", "(", "'*'", ")", "\n", "ratios", ".", "append", "(", "float", "(", "substr_temp", "[", "0", "]", ")", ")", "\n", "losses", ".", "append", "(", "substr_temp", "[", "1", "]", ")", "\n", "", "return", "ratios", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.test.test": [[18, 43], ["model.Model().cuda", "torch.load", "torch.load", "torch.DataParallel", "nn.DataParallel.load_state_dict", "logger", "os.path.join", "test._test_torch", "model.Model", "test._test_lmdb", "storage.cuda"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.test._test_torch", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.test._test_lmdb"], ["def", "test", "(", "para", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n    test code\n    \"\"\"", "\n", "# load model with checkpoint", "\n", "if", "not", "para", ".", "test_only", ":", "\n", "        ", "para", ".", "test_checkpoint", "=", "join", "(", "logger", ".", "save_dir", ",", "'model_best.pth.tar'", ")", "\n", "", "if", "para", ".", "test_save_dir", "is", "None", ":", "\n", "        ", "para", ".", "test_save_dir", "=", "logger", ".", "save_dir", "\n", "", "model", "=", "Model", "(", "para", ")", ".", "cuda", "(", ")", "\n", "checkpoint_path", "=", "para", ".", "test_checkpoint", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "ds_name", "=", "para", ".", "dataset", "\n", "logger", "(", "'{} results generating ...'", ".", "format", "(", "ds_name", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "if", "ds_name", "==", "'BSD'", ":", "\n", "        ", "ds_type", "=", "'test'", "\n", "_test_torch", "(", "para", ",", "logger", ",", "model", ",", "ds_type", ")", "\n", "", "elif", "ds_name", "==", "'gopro_ds_lmdb'", "or", "ds_name", "==", "'reds_lmdb'", ":", "\n", "        ", "ds_type", "=", "'valid'", "\n", "_test_lmdb", "(", "para", ",", "logger", ",", "model", ",", "ds_type", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.test._test_torch": [[45, 140], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "set", "os.path.join", "sorted", "logger", "logger", "logger", "logger", "os.listdir", "logger", "os.path.join", "os.makedirs", "range", "model.eval", "range", "logger", "os.path.dirname", "utils.img2video", "os.path.join", "os.path.join", "data.utils.normalize.append", "label_seq.append", "numpy.concatenate", "torch.no_grad", "torch.no_grad", "data.utils.normalize", "time.time", "model", "isinstance", "output_seq.squeeze.squeeze", "utils.AverageMeter.update", "data.utils.normalize_reverse", "[].astype.detach().cpu().numpy().transpose().squeeze", "os.path.join", "os.path.join", "data.utils.normalize_reverse", "np.clip.detach().cpu().numpy().transpose().squeeze", "numpy.clip", "os.path.join", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imread", "[].astype", "cv2.imread().astype", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "data.utils.normalize.squeeze", "[].astype.astype", "[].astype.astype", "np.clip.astype", "np.clip.astype", "set.add", "utils.AverageMeter.update", "utils.AverageMeter.update", "cv2.imread().transpose", "[].astype.transpose", "len", "len", "[].astype.detach().cpu().numpy().transpose", "np.clip.detach().cpu().numpy().transpose", "para.model.lower", "metrics.psnr_calculate", "metrics.ssim_calculate", "cv2.imread", "torch.from_numpy().float", "torch.from_numpy().float", "time.time", "cv2.imread", "cv2.imread", "[].astype.detach().cpu().numpy", "np.clip.detach().cpu().numpy", "torch.from_numpy", "torch.from_numpy", "[].astype.detach().cpu", "np.clip.detach().cpu", "[].astype.detach", "np.clip.detach"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.img2video", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize_reverse", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize_reverse", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.psnr_calculate", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.ssim_calculate"], ["", "", "def", "_test_torch", "(", "para", ",", "logger", ",", "model", ",", "ds_type", ")", ":", "\n", "    ", "PSNR", "=", "AverageMeter", "(", ")", "\n", "SSIM", "=", "AverageMeter", "(", ")", "\n", "timer", "=", "AverageMeter", "(", ")", "\n", "results_register", "=", "set", "(", ")", "\n", "H", ",", "W", "=", "480", ",", "640", "\n", "val_range", "=", "2.0", "**", "8", "-", "1", "if", "para", ".", "data_format", "==", "'RGB'", "else", "2.0", "**", "16", "-", "1", "\n", "dataset_path", "=", "join", "(", "para", ".", "data_root", ",", "para", ".", "dataset", ",", "'{}_{}'", ".", "format", "(", "para", ".", "dataset", ",", "para", ".", "ds_config", ")", ",", "ds_type", ")", "\n", "seqs", "=", "sorted", "(", "os", ".", "listdir", "(", "dataset_path", ")", ")", "\n", "# seq_length = 100", "\n", "seq_length", "=", "150", "\n", "for", "seq", "in", "seqs", ":", "\n", "        ", "logger", "(", "'seq {} image results generating ...'", ".", "format", "(", "seq", ")", ")", "\n", "dir_name", "=", "'_'", ".", "join", "(", "(", "para", ".", "dataset", ",", "para", ".", "model", ",", "'test'", ")", ")", "\n", "save_dir", "=", "join", "(", "para", ".", "test_save_dir", ",", "dir_name", ",", "seq", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "suffix", "=", "'png'", "if", "para", ".", "data_format", "==", "'RGB'", "else", "'tiff'", "\n", "start", "=", "0", "\n", "end", "=", "para", ".", "test_frames", "\n", "while", "True", ":", "\n", "            ", "input_seq", "=", "[", "]", "\n", "label_seq", "=", "[", "]", "\n", "for", "frame_idx", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "                ", "blur_img_path", "=", "join", "(", "dataset_path", ",", "seq", ",", "'Blur'", ",", "para", ".", "data_format", ",", "'{:08d}.{}'", ".", "format", "(", "frame_idx", ",", "suffix", ")", ")", "\n", "sharp_img_path", "=", "join", "(", "dataset_path", ",", "seq", ",", "'Sharp'", ",", "para", ".", "data_format", ",", "\n", "'{:08d}.{}'", ".", "format", "(", "frame_idx", ",", "suffix", ")", ")", "\n", "if", "para", ".", "data_format", "==", "'RGB'", ":", "\n", "                    ", "blur_img", "=", "cv2", ".", "imread", "(", "blur_img_path", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "gt_img", "=", "cv2", ".", "imread", "(", "sharp_img_path", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "blur_img", "=", "cv2", ".", "imread", "(", "blur_img_path", ",", "-", "1", ")", "[", "...", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "blur_img", "=", "blur_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "gt_img", "=", "cv2", ".", "imread", "(", "sharp_img_path", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "", "input_seq", ".", "append", "(", "blur_img", ")", "\n", "label_seq", ".", "append", "(", "gt_img", ")", "\n", "", "input_seq", "=", "np", ".", "concatenate", "(", "input_seq", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "input_seq", "=", "normalize", "(", "torch", ".", "from_numpy", "(", "input_seq", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "centralize", "=", "para", ".", "centralize", ",", "\n", "normalize", "=", "para", ".", "normalize", ",", "val_range", "=", "val_range", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "output_seq", "=", "model", "(", "[", "input_seq", ",", "]", ")", "\n", "if", "isinstance", "(", "output_seq", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                    ", "output_seq", "=", "output_seq", "[", "0", "]", "\n", "", "output_seq", "=", "output_seq", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "timer", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "time_start", ")", "/", "len", "(", "output_seq", ")", ",", "n", "=", "len", "(", "output_seq", ")", ")", "\n", "", "for", "frame_idx", "in", "range", "(", "para", ".", "past_frames", ",", "end", "-", "start", "-", "para", ".", "future_frames", ")", ":", "\n", "                ", "blur_img", "=", "input_seq", ".", "squeeze", "(", "dim", "=", "0", ")", "[", "frame_idx", "]", "\n", "blur_img", "=", "normalize_reverse", "(", "blur_img", ",", "centralize", "=", "para", ".", "centralize", ",", "normalize", "=", "para", ".", "normalize", ",", "\n", "val_range", "=", "val_range", ")", "\n", "blur_img", "=", "blur_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "blur_img", "=", "blur_img", ".", "astype", "(", "np", ".", "uint8", ")", "if", "para", ".", "data_format", "==", "'RGB'", "else", "blur_img", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "blur_img_path", "=", "join", "(", "save_dir", ",", "'{:08d}_input.{}'", ".", "format", "(", "frame_idx", "+", "start", ",", "suffix", ")", ")", "\n", "gt_img", "=", "label_seq", "[", "frame_idx", "]", "\n", "gt_img_path", "=", "join", "(", "save_dir", ",", "'{:08d}_gt.{}'", ".", "format", "(", "frame_idx", "+", "start", ",", "suffix", ")", ")", "\n", "deblur_img", "=", "output_seq", "[", "frame_idx", "-", "para", ".", "past_frames", "]", "\n", "deblur_img", "=", "normalize_reverse", "(", "deblur_img", ",", "centralize", "=", "para", ".", "centralize", ",", "normalize", "=", "para", ".", "normalize", ",", "\n", "val_range", "=", "val_range", ")", "\n", "deblur_img", "=", "deblur_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "squeeze", "(", ")", "\n", "deblur_img", "=", "np", ".", "clip", "(", "deblur_img", ",", "0", ",", "val_range", ")", "\n", "deblur_img", "=", "deblur_img", ".", "astype", "(", "np", ".", "uint8", ")", "if", "para", ".", "data_format", "==", "'RGB'", "else", "deblur_img", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "deblur_img_path", "=", "join", "(", "save_dir", ",", "'{:08d}_{}.{}'", ".", "format", "(", "frame_idx", "+", "start", ",", "para", ".", "model", ".", "lower", "(", ")", ",", "suffix", ")", ")", "\n", "cv2", ".", "imwrite", "(", "blur_img_path", ",", "blur_img", ")", "\n", "cv2", ".", "imwrite", "(", "gt_img_path", ",", "gt_img", ")", "\n", "cv2", ".", "imwrite", "(", "deblur_img_path", ",", "deblur_img", ")", "\n", "if", "deblur_img_path", "not", "in", "results_register", ":", "\n", "                    ", "results_register", ".", "add", "(", "deblur_img_path", ")", "\n", "PSNR", ".", "update", "(", "psnr_calculate", "(", "deblur_img", ",", "gt_img", ",", "val_range", "=", "val_range", ")", ")", "\n", "SSIM", ".", "update", "(", "ssim_calculate", "(", "deblur_img", ",", "gt_img", ",", "val_range", "=", "val_range", ")", ")", "\n", "\n", "", "", "if", "end", "==", "seq_length", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "start", "=", "end", "-", "para", ".", "future_frames", "-", "para", ".", "past_frames", "\n", "end", "=", "start", "+", "para", ".", "test_frames", "\n", "if", "end", ">", "seq_length", ":", "\n", "                    ", "end", "=", "seq_length", "\n", "start", "=", "end", "-", "para", ".", "test_frames", "\n", "\n", "", "", "", "if", "para", ".", "video", ":", "\n", "            ", "if", "para", ".", "data_format", "!=", "'RGB'", ":", "\n", "                ", "continue", "\n", "", "logger", "(", "'seq {} video result generating ...'", ".", "format", "(", "seq", ")", ")", "\n", "marks", "=", "[", "'Input'", ",", "para", ".", "model", ",", "'GT'", "]", "\n", "path", "=", "dirname", "(", "save_dir", ")", "\n", "frame_start", "=", "para", ".", "past_frames", "\n", "frame_end", "=", "seq_length", "-", "para", ".", "future_frames", "\n", "img2video", "(", "path", "=", "path", ",", "size", "=", "(", "3", "*", "W", ",", "1", "*", "H", ")", ",", "seq", "=", "seq", ",", "frame_start", "=", "frame_start", ",", "frame_end", "=", "frame_end", ",", "\n", "marks", "=", "marks", ",", "fps", "=", "10", ")", "\n", "\n", "", "", "logger", "(", "'Test images : {}'", ".", "format", "(", "PSNR", ".", "count", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "logger", "(", "'Test PSNR : {}'", ".", "format", "(", "PSNR", ".", "avg", ")", ")", "\n", "logger", "(", "'Test SSIM : {}'", ".", "format", "(", "SSIM", ".", "avg", ")", ")", "\n", "logger", "(", "'Average time per image: {}'", ".", "format", "(", "timer", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.test._test_lmdb": [[142, 235], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "set", "os.path.join", "os.path.join", "lmdb.open", "lmdb.open", "lmdb.open.begin", "lmdb.open.begin", "os.path.join", "range", "logger", "logger", "logger", "logger", "open", "pickle.load", "logger", "os.path.join", "os.makedirs", "range", "model.eval", "range", "logger", "os.path.dirname", "utils.img2video", "code.encode.encode", "env_blur.begin.get", "numpy.frombuffer", "env_gt.begin.get", "numpy.frombuffer", "gt_img.reshape.reshape", "data.utils.normalize.append", "label_seq.append", "numpy.concatenate", "torch.no_grad", "torch.no_grad", "data.utils.normalize", "time.time", "model", "isinstance", "output_seq.squeeze.squeeze", "utils.AverageMeter.update", "data.utils.normalize_reverse", "blur_img.detach().cpu().numpy().transpose().astype.detach().cpu().numpy().transpose().astype", "os.path.join", "os.path.join", "data.utils.normalize_reverse", "np.clip().astype.detach().cpu().numpy().transpose", "numpy.clip().astype", "os.path.join", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "blur_img.detach().cpu().numpy().transpose().astype.reshape().transpose", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "data.utils.normalize.squeeze", "set.add", "utils.AverageMeter.update", "utils.AverageMeter.update", "len", "len", "blur_img.detach().cpu().numpy().transpose().astype.detach().cpu().numpy().transpose", "np.clip().astype.detach().cpu().numpy", "numpy.clip", "para.model.lower", "metrics.psnr_calculate", "metrics.ssim_calculate", "blur_img.detach().cpu().numpy().transpose().astype.reshape", "torch.from_numpy().float", "torch.from_numpy().float", "time.time", "blur_img.detach().cpu().numpy().transpose().astype.detach().cpu().numpy", "np.clip().astype.detach().cpu", "torch.from_numpy", "torch.from_numpy", "blur_img.detach().cpu().numpy().transpose().astype.detach().cpu", "np.clip().astype.detach", "blur_img.detach().cpu().numpy().transpose().astype.detach"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.img2video", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize_reverse", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize_reverse", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.psnr_calculate", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.metrics.ssim_calculate"], ["", "def", "_test_lmdb", "(", "para", ",", "logger", ",", "model", ",", "ds_type", ")", ":", "\n", "    ", "PSNR", "=", "AverageMeter", "(", ")", "\n", "SSIM", "=", "AverageMeter", "(", ")", "\n", "timer", "=", "AverageMeter", "(", ")", "\n", "results_register", "=", "set", "(", ")", "\n", "if", "para", ".", "dataset", "==", "'gopro_ds_lmdb'", ":", "\n", "        ", "B", ",", "H", ",", "W", ",", "C", "=", "1", ",", "540", ",", "960", ",", "3", "\n", "", "elif", "para", ".", "dataset", "==", "'reds_lmdb'", ":", "\n", "        ", "B", ",", "H", ",", "W", ",", "C", "=", "1", ",", "720", ",", "1280", ",", "3", "\n", "", "data_test_path", "=", "join", "(", "para", ".", "data_root", ",", "para", ".", "dataset", ",", "para", ".", "dataset", "[", ":", "-", "4", "]", "+", "ds_type", ")", "\n", "data_test_gt_path", "=", "join", "(", "para", ".", "data_root", ",", "para", ".", "dataset", ",", "para", ".", "dataset", "[", ":", "-", "4", "]", "+", "ds_type", "+", "'_gt'", ")", "\n", "env_blur", "=", "lmdb", ".", "open", "(", "data_test_path", ",", "map_size", "=", "1099511627776", ")", "\n", "env_gt", "=", "lmdb", ".", "open", "(", "data_test_gt_path", ",", "map_size", "=", "1099511627776", ")", "\n", "txn_blur", "=", "env_blur", ".", "begin", "(", ")", "\n", "txn_gt", "=", "env_gt", ".", "begin", "(", ")", "\n", "data_test_info_path", "=", "join", "(", "para", ".", "data_root", ",", "para", ".", "dataset", ",", "para", ".", "dataset", "[", ":", "-", "4", "]", "+", "'info_{}.pkl'", ".", "format", "(", "ds_type", ")", ")", "\n", "with", "open", "(", "data_test_info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "seqs_info", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "seq_idx", "in", "range", "(", "seqs_info", "[", "'num'", "]", ")", ":", "\n", "        ", "seq_length", "=", "seqs_info", "[", "seq_idx", "]", "[", "'length'", "]", "\n", "seq", "=", "'{:03d}'", ".", "format", "(", "seq_idx", ")", "\n", "logger", "(", "'seq {} image results generating ...'", ".", "format", "(", "seq", ")", ")", "\n", "dir_name", "=", "'_'", ".", "join", "(", "(", "para", ".", "dataset", ",", "para", ".", "model", ",", "'test'", ")", ")", "\n", "save_dir", "=", "join", "(", "para", ".", "test_save_dir", ",", "dir_name", ",", "seq", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "start", "=", "0", "\n", "end", "=", "para", ".", "test_frames", "\n", "while", "(", "True", ")", ":", "\n", "            ", "input_seq", "=", "[", "]", "\n", "label_seq", "=", "[", "]", "\n", "for", "frame_idx", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "                ", "code", "=", "'%03d_%08d'", "%", "(", "seq_idx", ",", "frame_idx", ")", "\n", "code", "=", "code", ".", "encode", "(", ")", "\n", "blur_img", "=", "txn_blur", ".", "get", "(", "code", ")", "\n", "blur_img", "=", "np", ".", "frombuffer", "(", "blur_img", ",", "dtype", "=", "'uint8'", ")", "\n", "blur_img", "=", "blur_img", ".", "reshape", "(", "H", ",", "W", ",", "C", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "gt_img", "=", "txn_gt", ".", "get", "(", "code", ")", "\n", "gt_img", "=", "np", ".", "frombuffer", "(", "gt_img", ",", "dtype", "=", "'uint8'", ")", "\n", "gt_img", "=", "gt_img", ".", "reshape", "(", "H", ",", "W", ",", "C", ")", "\n", "input_seq", ".", "append", "(", "blur_img", ")", "\n", "label_seq", ".", "append", "(", "gt_img", ")", "\n", "", "input_seq", "=", "np", ".", "concatenate", "(", "input_seq", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "input_seq", "=", "normalize", "(", "torch", ".", "from_numpy", "(", "input_seq", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "centralize", "=", "para", ".", "centralize", ",", "\n", "normalize", "=", "para", ".", "normalize", ")", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "output_seq", "=", "model", "(", "[", "input_seq", ",", "]", ")", "\n", "if", "isinstance", "(", "output_seq", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                    ", "output_seq", "=", "output_seq", "[", "0", "]", "\n", "", "output_seq", "=", "output_seq", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "timer", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "time_start", ")", "/", "len", "(", "output_seq", ")", ",", "n", "=", "len", "(", "output_seq", ")", ")", "\n", "", "for", "frame_idx", "in", "range", "(", "para", ".", "past_frames", ",", "end", "-", "start", "-", "para", ".", "future_frames", ")", ":", "\n", "                ", "blur_img", "=", "input_seq", ".", "squeeze", "(", ")", "[", "frame_idx", "]", "\n", "blur_img", "=", "normalize_reverse", "(", "blur_img", ",", "centralize", "=", "para", ".", "centralize", ",", "normalize", "=", "para", ".", "normalize", ")", "\n", "blur_img", "=", "blur_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "blur_img_path", "=", "join", "(", "save_dir", ",", "'{:08d}_input.png'", ".", "format", "(", "frame_idx", "+", "start", ")", ")", "\n", "gt_img", "=", "label_seq", "[", "frame_idx", "]", "\n", "gt_img_path", "=", "join", "(", "save_dir", ",", "'{:08d}_gt.png'", ".", "format", "(", "frame_idx", "+", "start", ")", ")", "\n", "deblur_img", "=", "output_seq", "[", "frame_idx", "-", "para", ".", "past_frames", "]", "\n", "deblur_img", "=", "normalize_reverse", "(", "deblur_img", ",", "centralize", "=", "para", ".", "centralize", ",", "normalize", "=", "para", ".", "normalize", ")", "\n", "deblur_img", "=", "deblur_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "deblur_img", "=", "np", ".", "clip", "(", "deblur_img", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "deblur_img_path", "=", "join", "(", "save_dir", ",", "'{:08d}_{}.png'", ".", "format", "(", "frame_idx", "+", "start", ",", "para", ".", "model", ".", "lower", "(", ")", ")", ")", "\n", "cv2", ".", "imwrite", "(", "blur_img_path", ",", "blur_img", ")", "\n", "cv2", ".", "imwrite", "(", "gt_img_path", ",", "gt_img", ")", "\n", "cv2", ".", "imwrite", "(", "deblur_img_path", ",", "deblur_img", ")", "\n", "if", "deblur_img_path", "not", "in", "results_register", ":", "\n", "                    ", "results_register", ".", "add", "(", "deblur_img_path", ")", "\n", "PSNR", ".", "update", "(", "psnr_calculate", "(", "deblur_img", ",", "gt_img", ")", ")", "\n", "SSIM", ".", "update", "(", "ssim_calculate", "(", "deblur_img", ",", "gt_img", ")", ")", "\n", "", "", "if", "end", "==", "seq_length", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "start", "=", "end", "-", "para", ".", "future_frames", "-", "para", ".", "past_frames", "\n", "end", "=", "start", "+", "para", ".", "test_frames", "\n", "if", "end", ">", "seq_length", ":", "\n", "                    ", "end", "=", "seq_length", "\n", "start", "=", "end", "-", "para", ".", "test_frames", "\n", "\n", "", "", "", "if", "para", ".", "video", ":", "\n", "            ", "logger", "(", "'seq {} video result generating ...'", ".", "format", "(", "seq", ")", ")", "\n", "marks", "=", "[", "'Input'", ",", "para", ".", "model", ",", "'GT'", "]", "\n", "path", "=", "dirname", "(", "save_dir", ")", "\n", "frame_start", "=", "para", ".", "past_frames", "\n", "frame_end", "=", "seq_length", "-", "para", ".", "future_frames", "\n", "img2video", "(", "path", "=", "path", ",", "size", "=", "(", "3", "*", "W", ",", "1", "*", "H", ")", ",", "seq", "=", "seq", ",", "frame_start", "=", "frame_start", ",", "frame_end", "=", "frame_end", ",", "\n", "marks", "=", "marks", ",", "fps", "=", "10", ")", "\n", "\n", "", "", "logger", "(", "'Test images : {}'", ".", "format", "(", "PSNR", ".", "count", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "logger", "(", "'Test PSNR : {}'", ".", "format", "(", "PSNR", ".", "avg", ")", ")", "\n", "logger", "(", "'Test SSIM : {}'", ".", "format", "(", "SSIM", ".", "avg", ")", ")", "\n", "logger", "(", "'Average time per image: {}'", ".", "format", "(", "timer", ".", "avg", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.__init__": [[7, 30], ["target.parameters", "importlib.import_module", "getattr", "torch.MultiStepLR", "torch.CosineAnnealingLR", "torch.CosineAnnealingWarmRestarts"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "para", ",", "target", ")", ":", "\n", "# create optimizer", "\n", "# trainable = filter(lambda x: x.requires_grad, target.parameters())", "\n", "        ", "trainable", "=", "target", ".", "parameters", "(", ")", "\n", "optimizer_name", "=", "para", ".", "optimizer", "\n", "lr", "=", "para", ".", "lr", "\n", "module", "=", "import_module", "(", "'torch.optim'", ")", "\n", "self", ".", "optimizer", "=", "getattr", "(", "module", ",", "optimizer_name", ")", "(", "trainable", ",", "lr", "=", "lr", ")", "\n", "# create scheduler", "\n", "milestones", "=", "para", ".", "milestones", "\n", "gamma", "=", "para", ".", "decay_gamma", "\n", "try", ":", "\n", "            ", "if", "para", ".", "lr_scheduler", "==", "\"multi_step\"", ":", "\n", "                ", "self", ".", "scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "optimizer", ",", "milestones", "=", "milestones", ",", "gamma", "=", "gamma", ")", "\n", "", "elif", "para", ".", "lr_scheduler", "==", "\"cosine\"", ":", "\n", "                ", "self", ".", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "self", ".", "optimizer", ",", "T_max", "=", "para", ".", "end_epoch", ",", "eta_min", "=", "1e-8", ")", "\n", "", "elif", "para", ".", "lr_scheduler", "==", "\"cosineW\"", ":", "\n", "                ", "self", ".", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingWarmRestarts", "(", "self", ".", "optimizer", ",", "T_0", "=", "10", ",", "T_mult", "=", "2", ",", "\n", "eta_min", "=", "1e-8", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "except", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.get_lr": [[31, 33], ["None"], "methods", ["None"], ["", "", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.step": [[34, 36], ["optimizer.Optimizer.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.zero_grad": [[37, 39], ["optimizer.Optimizer.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.lr_schedule": [[40, 42], ["optimizer.Optimizer.scheduler.step"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.step"], ["", "def", "lr_schedule", "(", "self", ")", ":", "\n", "        ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.__init__": [[14, 16], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.reset": [[17, 22], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update": [[23, 28], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.reduce_tensor": [[31, 46], ["isinstance", "torch.reduce", "NotImplementedError", "type"], "function", ["None"], ["", "", "def", "reduce_tensor", "(", "num_gpus", ",", "ts", ")", ":", "\n", "    ", "\"\"\"\n    reduce tensor from multiple gpus\n    \"\"\"", "\n", "# todo loss of ddp mode", "\n", "if", "isinstance", "(", "ts", ",", "dict", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "dist", ".", "reduce", "(", "ts", ",", "dst", "=", "0", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "ts", "/=", "num_gpus", "\n", "", "except", ":", "\n", "            ", "msg", "=", "'{}'", ".", "format", "(", "type", "(", "ts", ")", ")", "\n", "raise", "NotImplementedError", "(", "msg", ")", "\n", "", "", "return", "ts", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.img2video": [[48, 67], ["os.path.join", "os.makedirs", "os.path.join", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "range", "cv2.VideoWriter.release", "os.path.dirname", "range", "numpy.concatenate", "cv2.VideoWriter.write", "len", "os.path.join", "cv2.imread", "cv2.putText", "imgs.append", "marks[].lower"], "function", ["None"], ["", "def", "img2video", "(", "path", ",", "size", ",", "seq", ",", "frame_start", ",", "frame_end", ",", "marks", ",", "fps", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    generate video\n    \"\"\"", "\n", "file_path", "=", "join", "(", "path", ",", "'{}.avi'", ".", "format", "(", "seq", ")", ")", "\n", "os", ".", "makedirs", "(", "dirname", "(", "path", ")", ",", "exist_ok", "=", "True", ")", "\n", "path", "=", "join", "(", "path", ",", "'{}'", ".", "format", "(", "seq", ")", ")", "\n", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "\"MJPG\"", ")", "\n", "video", "=", "cv2", ".", "VideoWriter", "(", "file_path", ",", "fourcc", ",", "fps", ",", "size", ")", "\n", "for", "i", "in", "range", "(", "frame_start", ",", "frame_end", ")", ":", "\n", "        ", "imgs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "marks", ")", ")", ":", "\n", "            ", "img_path", "=", "join", "(", "path", ",", "'{:08d}_{}.png'", ".", "format", "(", "i", ",", "marks", "[", "j", "]", ".", "lower", "(", ")", ")", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "cv2", ".", "putText", "(", "img", ",", "marks", "[", "j", "]", ",", "(", "60", ",", "60", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "2.0", ",", "(", "0", ",", "0", ",", "255", ")", ",", "2", ")", "\n", "imgs", ".", "append", "(", "img", ")", "\n", "", "frame", "=", "np", ".", "concatenate", "(", "imgs", ",", "axis", "=", "1", ")", "\n", "video", ".", "write", "(", "frame", ")", "\n", "", "video", ".", "release", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.dp.process": [[22, 107], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "utils.Logger", "torch.utils.tensorboard.SummaryWriter", "utils.Logger.", "model.Model().cuda", "utils.Logger.", "loss.Loss().cuda", "importlib.import_module", "optimizer.Optimizer", "torch.DataParallel", "utils.Logger.", "data.Data", "range", "model.Model().cuda", "Model().cuda.profile", "utils.Logger.", "utils.Logger.", "os.path.isfile", "dp.train", "dp.valid", "utils.Logger.save", "model.Model", "loss.Loss", "torch.load", "torch.load", "torch.load", "utils.Logger.", "nn.DataParallel.load_state_dict", "optimizer.Optimizer.optimizer.load_state_dict", "optimizer.Optimizer.scheduler.load_state_dict", "utils.Logger.", "FileNotFoundError", "nn.DataParallel.state_dict", "optimizer.Optimizer.optimizer.state_dict", "optimizer.Optimizer.scheduler.state_dict", "getattr", "model.Model", "storage.cuda"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.model.model.Model.profile", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.dp.train", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.dp.valid", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.save"], ["def", "process", "(", "para", ")", ":", "\n", "    ", "\"\"\"\n    data parallel training\n    \"\"\"", "\n", "# setup", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# set random seed", "\n", "torch", ".", "manual_seed", "(", "para", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "para", ".", "seed", ")", "\n", "random", ".", "seed", "(", "para", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "para", ".", "seed", ")", "\n", "\n", "# create logger", "\n", "logger", "=", "Logger", "(", "para", ")", "\n", "logger", ".", "writer", "=", "SummaryWriter", "(", "logger", ".", "save_dir", ")", "\n", "\n", "# create model", "\n", "logger", "(", "'building {} model ...'", ".", "format", "(", "para", ".", "model", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "model", "=", "Model", "(", "para", ")", ".", "cuda", "(", ")", "\n", "logger", "(", "'model structure:'", ",", "model", ",", "verbose", "=", "False", ")", "\n", "\n", "# create criterion according to the loss function", "\n", "criterion", "=", "Loss", "(", "para", ")", ".", "cuda", "(", ")", "\n", "\n", "# todo Metrics class", "\n", "# create measurement according to metrics", "\n", "metrics_name", "=", "para", ".", "metrics", "\n", "module", "=", "import_module", "(", "'train.metrics'", ")", "\n", "val_range", "=", "2.0", "**", "8", "-", "1", "if", "para", ".", "data_format", "==", "'RGB'", "else", "2.0", "**", "16", "-", "1", "\n", "metrics", "=", "getattr", "(", "module", ",", "metrics_name", ")", "(", "centralize", "=", "para", ".", "centralize", ",", "normalize", "=", "para", ".", "normalize", ",", "\n", "val_range", "=", "val_range", ")", ".", "cuda", "(", ")", "\n", "\n", "# create optimizer", "\n", "opt", "=", "Optimizer", "(", "para", ",", "model", ")", "\n", "\n", "# distributed data parallel", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "# record model profile: computation cost & # of parameters", "\n", "if", "not", "para", ".", "no_profile", ":", "\n", "        ", "profile_model", "=", "Model", "(", "para", ")", ".", "cuda", "(", ")", "\n", "flops", ",", "params", "=", "profile_model", ".", "profile", "(", ")", "\n", "logger", "(", "'generating profile of {} model ...'", ".", "format", "(", "para", ".", "model", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "logger", "(", "'[profile] computation cost: {:.2f} GMACs, parameters: {:.2f} M'", ".", "format", "(", "\n", "flops", "/", "10", "**", "9", ",", "params", "/", "10", "**", "6", ")", ",", "timestamp", "=", "False", ")", "\n", "del", "profile_model", "\n", "\n", "# create dataloader", "\n", "", "logger", "(", "'loading {} dataloader ...'", ".", "format", "(", "para", ".", "dataset", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "data", "=", "Data", "(", "para", ",", "device_id", "=", "0", ")", "\n", "train_loader", "=", "data", ".", "dataloader_train", "\n", "valid_loader", "=", "data", ".", "dataloader_valid", "\n", "\n", "# resume from a checkpoint", "\n", "if", "para", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "para", ".", "resume_file", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "para", ".", "resume_file", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "0", ")", ")", "\n", "logger", "(", "'loading checkpoint {} ...'", ".", "format", "(", "para", ".", "resume_file", ")", ")", "\n", "logger", ".", "register_dict", "=", "checkpoint", "[", "'register_dict'", "]", "\n", "para", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "opt", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "opt", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "'no check point found at {}'", ".", "format", "(", "para", ".", "resume_file", ")", "\n", "logger", "(", "msg", ",", "verbose", "=", "False", ")", "\n", "raise", "FileNotFoundError", "(", "msg", ")", "\n", "\n", "# training and validation", "\n", "", "", "for", "epoch", "in", "range", "(", "para", ".", "start_epoch", ",", "para", ".", "end_epoch", "+", "1", ")", ":", "\n", "        ", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "metrics", ",", "opt", ",", "epoch", ",", "para", ",", "logger", ")", "\n", "valid", "(", "valid_loader", ",", "model", ",", "criterion", ",", "metrics", ",", "epoch", ",", "para", ",", "logger", ")", "\n", "\n", "# save checkpoint", "\n", "checkpoint", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model'", ":", "para", ".", "model", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'register_dict'", ":", "logger", ".", "register_dict", ",", "\n", "'optimizer'", ":", "opt", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "opt", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "}", "\n", "logger", ".", "save", "(", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.dp.train": [[109, 184], ["model.train", "logger", "loss.loss_parse", "losses_name.append", "utils.AverageMeter", "utils.AverageMeter", "time.time", "time.time", "tqdm.tqdm", "tqdm.tqdm.close", "logger.register", "logger.register", "logger.writer.add_scalar", "logger.writer.add_scalar", "logger", "logger.report", "losses_meter.items", "logger", "opt.lr_schedule", "utils.AverageMeter", "enumerate", "model", "criterion", "isinstance", "metrics", "utils.AverageMeter.update", "opt.zero_grad", "losses[].backward", "torch.nn.utils.clip_grad_norm_", "opt.step", "utils.AverageMeter.update", "time.time", "tqdm.tqdm.update", "logger.writer.add_scalar", "opt.get_lr", "opt.get_lr", "len", "val.cuda", "model.detach", "losses_meter[].update", "metrics.detach().item", "inputs.size", "model.parameters", "losses[].detach().item", "inputs.size", "time.time", "metrics.detach", "losses[].detach"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.dp.train", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.loss_parse", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.register", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.register", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.report", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.lr_schedule", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.zero_grad", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.step", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.get_lr", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.optimizer.Optimizer.get_lr", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "metrics", ",", "opt", ",", "epoch", ",", "para", ",", "logger", ")", ":", "\n", "# training mode", "\n", "    ", "model", ".", "train", "(", ")", "\n", "logger", "(", "'[Epoch {} / lr {:.2e}]'", ".", "format", "(", "epoch", ",", "opt", ".", "get_lr", "(", ")", ")", ",", "prefix", "=", "'\\n'", ")", "\n", "\n", "losses_meter", "=", "{", "}", "\n", "_", ",", "losses_name", "=", "loss_parse", "(", "para", ".", "loss", ")", "\n", "losses_name", ".", "append", "(", "'all'", ")", "\n", "for", "key", "in", "losses_name", ":", "\n", "        ", "losses_meter", "[", "key", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "", "measure_meter", "=", "AverageMeter", "(", ")", "\n", "batchtime_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "train_loader", ")", ",", "ncols", "=", "80", ")", "\n", "\n", "for", "iter_samples", "in", "train_loader", ":", "\n", "# forward", "\n", "        ", "for", "(", "key", ",", "val", ")", "in", "enumerate", "(", "iter_samples", ")", ":", "\n", "            ", "iter_samples", "[", "key", "]", "=", "val", ".", "cuda", "(", ")", "\n", "", "inputs", "=", "iter_samples", "[", "0", "]", "\n", "labels", "=", "iter_samples", "[", "1", "]", "\n", "outputs", "=", "model", "(", "iter_samples", ")", "\n", "\n", "losses", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "if", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "outputs", "=", "outputs", "[", "0", "]", "\n", "", "measure", "=", "metrics", "(", "outputs", ".", "detach", "(", ")", ",", "labels", ")", "\n", "\n", "# record value of losses and measurements", "\n", "for", "key", "in", "losses_name", ":", "\n", "            ", "losses_meter", "[", "key", "]", ".", "update", "(", "losses", "[", "key", "]", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "", "measure_meter", ".", "update", "(", "measure", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "# print('psnr {}, batch size {}'.format(measure.detach().item(), inputs.size(0)))", "\n", "\n", "# backward and optimize", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "losses", "[", "'all'", "]", ".", "backward", "(", ")", "\n", "\n", "# clip the grad", "\n", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", "=", "20", ",", "norm_type", "=", "2", ")", "\n", "\n", "# update weights", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batchtime_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "pbar", ".", "update", "(", "para", ".", "batch_size", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "# record info", "\n", "logger", ".", "register", "(", "para", ".", "loss", "+", "'_train'", ",", "epoch", ",", "losses_meter", "[", "'all'", "]", ".", "avg", ")", "\n", "logger", ".", "register", "(", "para", ".", "metrics", "+", "'_train'", ",", "epoch", ",", "measure_meter", ".", "avg", ")", "\n", "for", "key", "in", "losses_name", ":", "\n", "        ", "logger", ".", "writer", ".", "add_scalar", "(", "key", "+", "'_loss_train'", ",", "losses_meter", "[", "key", "]", ".", "avg", ",", "epoch", ")", "\n", "", "logger", ".", "writer", ".", "add_scalar", "(", "para", ".", "metrics", "+", "'_train'", ",", "measure_meter", ".", "avg", ",", "epoch", ")", "\n", "logger", ".", "writer", ".", "add_scalar", "(", "'lr'", ",", "opt", ".", "get_lr", "(", ")", ",", "epoch", ")", "\n", "\n", "# show info", "\n", "logger", "(", "'[train] epoch time: {:.2f}s, average batch time: {:.2f}s'", ".", "format", "(", "end", "-", "start", ",", "batchtime_meter", ".", "avg", ")", ",", "\n", "timestamp", "=", "False", ")", "\n", "logger", ".", "report", "(", "[", "[", "para", ".", "loss", ",", "'min'", "]", ",", "[", "para", ".", "metrics", ",", "'max'", "]", "]", ",", "state", "=", "'train'", ",", "epoch", "=", "epoch", ")", "\n", "msg", "=", "'[train]'", "\n", "for", "key", ",", "meter", "in", "losses_meter", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "==", "'all'", ":", "\n", "            ", "continue", "\n", "", "msg", "+=", "' {} : {:4f};'", ".", "format", "(", "key", ",", "meter", ".", "avg", ")", "\n", "", "logger", "(", "msg", ",", "timestamp", "=", "False", ")", "\n", "\n", "# adjust learning rate", "\n", "opt", ".", "lr_schedule", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.dp.valid": [[186, 241], ["model.eval", "tqdm.tqdm.close", "logger.register", "logger.register", "logger.writer.add_scalar", "logger", "logger.report", "losses_meter.items", "logger", "torch.no_grad", "torch.no_grad", "torch.no_grad", "loss.loss_parse", "losses_name.append", "utils.AverageMeter", "utils.AverageMeter", "time.time", "time.time", "tqdm.tqdm", "logger.writer.add_scalar", "utils.AverageMeter", "enumerate", "model", "criterion", "isinstance", "metrics", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "tqdm.tqdm.update", "len", "val.cuda", "model.detach", "losses_meter[].update", "metrics.detach().item", "inputs.size", "losses[].detach().item", "inputs.size", "time.time", "metrics.detach", "losses[].detach"], "function", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.register", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.register", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.utils.logger.Logger.report", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.loss.loss_parse", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.train.utils.AverageMeter.update"], ["", "def", "valid", "(", "valid_loader", ",", "model", ",", "criterion", ",", "metrics", ",", "epoch", ",", "para", ",", "logger", ")", ":", "\n", "# evaluation mode", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "losses_meter", "=", "{", "}", "\n", "_", ",", "losses_name", "=", "loss_parse", "(", "para", ".", "loss", ")", "\n", "losses_name", ".", "append", "(", "'all'", ")", "\n", "for", "key", "in", "losses_name", ":", "\n", "            ", "losses_meter", "[", "key", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "", "measure_meter", "=", "AverageMeter", "(", ")", "\n", "batchtime_meter", "=", "AverageMeter", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "valid_loader", ")", ",", "ncols", "=", "80", ")", "\n", "\n", "for", "iter_samples", "in", "valid_loader", ":", "\n", "            ", "for", "(", "key", ",", "val", ")", "in", "enumerate", "(", "iter_samples", ")", ":", "\n", "                ", "iter_samples", "[", "key", "]", "=", "val", ".", "cuda", "(", ")", "\n", "", "inputs", "=", "iter_samples", "[", "0", "]", "\n", "labels", "=", "iter_samples", "[", "1", "]", "\n", "outputs", "=", "model", "(", "iter_samples", ")", "\n", "\n", "losses", "=", "criterion", "(", "outputs", ",", "labels", ",", "valid_flag", "=", "True", ")", "\n", "if", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "outputs", "=", "outputs", "[", "0", "]", "\n", "", "measure", "=", "metrics", "(", "outputs", ".", "detach", "(", ")", ",", "labels", ")", "\n", "for", "key", "in", "losses_name", ":", "\n", "                ", "losses_meter", "[", "key", "]", ".", "update", "(", "losses", "[", "key", "]", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "", "measure_meter", ".", "update", "(", "measure", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "batchtime_meter", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "pbar", ".", "update", "(", "para", ".", "batch_size", ")", "\n", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "\n", "# record info", "\n", "logger", ".", "register", "(", "para", ".", "loss", "+", "'_valid'", ",", "epoch", ",", "losses_meter", "[", "'all'", "]", ".", "avg", ")", "\n", "logger", ".", "register", "(", "para", ".", "metrics", "+", "'_valid'", ",", "epoch", ",", "measure_meter", ".", "avg", ")", "\n", "for", "key", "in", "losses_name", ":", "\n", "        ", "logger", ".", "writer", ".", "add_scalar", "(", "key", "+", "'_loss_valid'", ",", "losses_meter", "[", "key", "]", ".", "avg", ",", "epoch", ")", "\n", "", "logger", ".", "writer", ".", "add_scalar", "(", "para", ".", "metrics", "+", "'_valid'", ",", "measure_meter", ".", "avg", ",", "epoch", ")", "\n", "\n", "# show info", "\n", "logger", "(", "'[valid] epoch time: {:.2f}s, average batch time: {:.2f}s'", ".", "format", "(", "end", "-", "start", ",", "batchtime_meter", ".", "avg", ")", ",", "\n", "timestamp", "=", "False", ")", "\n", "logger", ".", "report", "(", "[", "[", "para", ".", "loss", ",", "'min'", "]", ",", "[", "para", ".", "metrics", ",", "'max'", "]", "]", ",", "state", "=", "'valid'", ",", "epoch", "=", "epoch", ")", "\n", "msg", "=", "'[valid]'", "\n", "for", "key", ",", "meter", "in", "losses_meter", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "==", "'all'", ":", "\n", "            ", "continue", "\n", "", "msg", "+=", "' {} : {:4f};'", ".", "format", "(", "key", ",", "meter", ".", "avg", ")", "\n", "", "logger", "(", "msg", ",", "timestamp", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.reds_lmdb.DeblurDataset.__init__": [[15, 36], ["os.path.join", "os.path.join", "torchvision.transforms.Compose", "lmdb.open", "lmdb.open", "reds_lmdb.DeblurDataset.env_blur.begin", "reds_lmdb.DeblurDataset.env_gt.begin", "open", "pickle.load", "os.path.join", "utils.Crop", "utils.Flip", "utils.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "frames", ",", "future_frames", ",", "past_frames", ",", "crop_size", "=", "(", "256", ",", "256", ")", ",", "ds_type", "=", "'train'", ",", "centralize", "=", "True", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "        ", "ds_name", "=", "'reds'", "\n", "self", ".", "datapath_blur", "=", "join", "(", "path", ",", "'{}_{}'", ".", "format", "(", "ds_name", ",", "ds_type", ")", ")", "\n", "self", ".", "datapath_gt", "=", "join", "(", "path", ",", "'{}_{}_gt'", ".", "format", "(", "ds_name", ",", "ds_type", ")", ")", "\n", "with", "open", "(", "join", "(", "path", ",", "'{}_info_{}.pkl'", ".", "format", "(", "ds_name", ",", "ds_type", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "seqs_info", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "Crop", "(", "crop_size", ")", ",", "Flip", "(", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "self", ".", "frames", "=", "frames", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "self", ".", "W", "=", "1280", "\n", "self", ".", "H", "=", "720", "\n", "self", ".", "C", "=", "3", "\n", "self", ".", "num_ff", "=", "future_frames", "\n", "self", ".", "num_pf", "=", "past_frames", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "centralize", "=", "centralize", "\n", "self", ".", "env_blur", "=", "lmdb", ".", "open", "(", "self", ".", "datapath_blur", ",", "map_size", "=", "1099511627776", ")", "\n", "self", ".", "env_gt", "=", "lmdb", ".", "open", "(", "self", ".", "datapath_gt", ",", "map_size", "=", "1099511627776", ")", "\n", "self", ".", "txn_blur", "=", "self", ".", "env_blur", ".", "begin", "(", ")", "\n", "self", ".", "txn_gt", "=", "self", ".", "env_gt", ".", "begin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.reds_lmdb.DeblurDataset.__getitem__": [[37, 68], ["range", "random.randint", "random.randint", "random.randint", "random.randint", "range", "torch.cat", "torch.cat", "list", "list", "reds_lmdb.DeblurDataset.get_img", "torch.cat.append", "torch.cat.append", "print", "print"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.gopro_ds_lmdb.DeblurDataset.get_img"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx", "+=", "1", "\n", "ori_idx", "=", "idx", "\n", "seq_idx", ",", "frame_idx", "=", "0", ",", "0", "\n", "blur_imgs", ",", "sharp_imgs", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "seqs_info", "[", "'num'", "]", ")", ":", "\n", "            ", "seq_length", "=", "self", ".", "seqs_info", "[", "i", "]", "[", "'length'", "]", "-", "self", ".", "frames", "+", "1", "\n", "if", "idx", "-", "seq_length", "<=", "0", ":", "\n", "                ", "seq_idx", "=", "i", "\n", "frame_idx", "=", "idx", "-", "1", "\n", "break", "\n", "", "else", ":", "\n", "                ", "idx", "-=", "seq_length", "\n", "\n", "", "", "top", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "H", "-", "self", ".", "crop_h", ")", "\n", "left", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "W", "-", "self", ".", "crop_w", ")", "\n", "flip_lr_flag", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "flip_ud_flag", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "sample", "=", "{", "'top'", ":", "top", ",", "'left'", ":", "left", ",", "'flip_lr'", ":", "flip_lr_flag", ",", "'flip_ud'", ":", "flip_ud_flag", "}", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "frames", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "blur_img", ",", "sharp_img", "=", "self", ".", "get_img", "(", "seq_idx", ",", "frame_idx", "+", "i", ",", "sample", ")", "\n", "blur_imgs", ".", "append", "(", "blur_img", ")", "\n", "sharp_imgs", ".", "append", "(", "sharp_img", ")", "\n", "", "except", "TypeError", "as", "err", ":", "\n", "                ", "print", "(", "'Handling run-time error:'", ",", "err", ")", "\n", "print", "(", "'failed case: idx {}, seq_idx {}, frame_idx {}'", ".", "format", "(", "ori_idx", ",", "seq_idx", ",", "frame_idx", ")", ")", "\n", "", "", "blur_imgs", "=", "torch", ".", "cat", "(", "blur_imgs", ",", "dim", "=", "0", ")", "\n", "sharp_imgs", "=", "torch", ".", "cat", "(", "sharp_imgs", "[", "self", ".", "num_pf", ":", "self", ".", "frames", "-", "self", ".", "num_ff", "]", ",", "dim", "=", "0", ")", "\n", "return", "blur_imgs", ",", "sharp_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.reds_lmdb.DeblurDataset.get_img": [[69, 85], ["code.encode.encode.encode", "reds_lmdb.DeblurDataset.txn_blur.get", "numpy.frombuffer", "utils.normalize.reshape", "reds_lmdb.DeblurDataset.txn_gt.get", "numpy.frombuffer", "utils.normalize.reshape", "reds_lmdb.DeblurDataset.transform", "utils.normalize", "utils.normalize"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize"], ["", "def", "get_img", "(", "self", ",", "seq_idx", ",", "frame_idx", ",", "sample", ")", ":", "\n", "        ", "code", "=", "'%03d_%08d'", "%", "(", "seq_idx", ",", "frame_idx", ")", "\n", "code", "=", "code", ".", "encode", "(", ")", "\n", "blur_img", "=", "self", ".", "txn_blur", ".", "get", "(", "code", ")", "\n", "blur_img", "=", "np", ".", "frombuffer", "(", "blur_img", ",", "dtype", "=", "'uint8'", ")", "\n", "blur_img", "=", "blur_img", ".", "reshape", "(", "self", ".", "H", ",", "self", ".", "W", ",", "self", ".", "C", ")", "\n", "sharp_img", "=", "self", ".", "txn_gt", ".", "get", "(", "code", ")", "\n", "sharp_img", "=", "np", ".", "frombuffer", "(", "sharp_img", ",", "dtype", "=", "'uint8'", ")", "\n", "sharp_img", "=", "sharp_img", ".", "reshape", "(", "self", ".", "H", ",", "self", ".", "W", ",", "self", ".", "C", ")", "\n", "sample", "[", "'image'", "]", "=", "blur_img", "\n", "sample", "[", "'label'", "]", "=", "sharp_img", "\n", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "blur_img", "=", "normalize", "(", "sample", "[", "'image'", "]", ",", "centralize", "=", "self", ".", "centralize", ",", "normalize", "=", "self", ".", "normalize", ")", "\n", "sharp_img", "=", "normalize", "(", "sample", "[", "'label'", "]", ",", "centralize", "=", "self", ".", "centralize", ",", "normalize", "=", "self", ".", "normalize", ")", "\n", "\n", "return", "blur_img", ",", "sharp_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.reds_lmdb.DeblurDataset.__len__": [[86, 88], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "seqs_info", "[", "'length'", "]", "-", "(", "self", ".", "frames", "-", "1", ")", "*", "self", ".", "seqs_info", "[", "'num'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.reds_lmdb.Dataloader.__init__": [[91, 124], ["os.path.join", "reds_lmdb.DeblurDataset", "len", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "numpy.ceil", "int", "torch.utils.data.DataLoader", "int", "numpy.ceil", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "para", ",", "device_id", ",", "ds_type", "=", "'train'", ")", ":", "\n", "        ", "path", "=", "join", "(", "para", ".", "data_root", ",", "para", ".", "dataset", ")", "\n", "dataset", "=", "DeblurDataset", "(", "path", ",", "para", ".", "frames", ",", "para", ".", "future_frames", ",", "para", ".", "past_frames", ",", "para", ".", "patch_size", ",", "ds_type", ",", "\n", "para", ".", "centralize", ",", "para", ".", "normalize", ")", "\n", "gpus", "=", "para", ".", "num_gpus", "\n", "bs", "=", "para", ".", "batch_size", "\n", "ds_len", "=", "len", "(", "dataset", ")", "\n", "if", "para", ".", "trainer_mode", "==", "'ddp'", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "dataset", ",", "\n", "num_replicas", "=", "para", ".", "num_gpus", ",", "\n", "rank", "=", "device_id", "\n", ")", "\n", "self", ".", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "para", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "para", ".", "threads", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", "\n", ")", "\n", "loader_len", "=", "np", ".", "ceil", "(", "ds_len", "/", "gpus", ")", "\n", "self", ".", "loader_len", "=", "int", "(", "np", ".", "ceil", "(", "loader_len", "/", "bs", ")", "*", "bs", ")", "\n", "\n", "", "elif", "para", ".", "trainer_mode", "==", "'dp'", ":", "\n", "            ", "self", ".", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "para", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "para", ".", "threads", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "self", ".", "loader_len", "=", "int", "(", "np", ".", "ceil", "(", "ds_len", "/", "bs", ")", "*", "bs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.reds_lmdb.Dataloader.__iter__": [[125, 127], ["iter"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.reds_lmdb.Dataloader.__len__": [[128, 130], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "loader_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.BSD.DeblurDataset.__init__": [[22, 37], ["torchvision.transforms.Compose", "BSD.DeblurDataset._generate_samples", "utils.Crop", "utils.Flip", "utils.ToTensor"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.BSD.DeblurDataset._generate_samples"], ["def", "__init__", "(", "self", ",", "path", ",", "frames", ",", "future_frames", ",", "past_frames", ",", "crop_size", "=", "(", "256", ",", "256", ")", ",", "data_format", "=", "'RGB'", ",", "\n", "centralize", "=", "True", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "assert", "frames", "-", "future_frames", "-", "past_frames", ">=", "1", "\n", "self", ".", "frames", "=", "frames", "\n", "self", ".", "num_ff", "=", "future_frames", "\n", "self", ".", "num_pf", "=", "past_frames", "\n", "self", ".", "data_format", "=", "data_format", "\n", "self", ".", "W", "=", "640", "\n", "self", ".", "H", "=", "480", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "centralize", "=", "centralize", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "Crop", "(", "crop_size", ")", ",", "Flip", "(", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "self", ".", "_seq_length", "=", "100", "\n", "self", ".", "_samples", "=", "self", ".", "_generate_samples", "(", "path", ",", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.BSD.DeblurDataset._generate_samples": [[38, 57], ["list", "dict", "sorted", "dict.values", "os.listdir", "list", "range", "range", "dict", "os.path.join", "os.path.join", "records[].append", "len", "IndexError", "list.append"], "methods", ["None"], ["", "def", "_generate_samples", "(", "self", ",", "dataset_path", ",", "data_format", ")", ":", "\n", "        ", "samples", "=", "list", "(", ")", "\n", "records", "=", "dict", "(", ")", "\n", "seqs", "=", "sorted", "(", "os", ".", "listdir", "(", "dataset_path", ")", ",", "key", "=", "int", ")", "\n", "for", "seq", "in", "seqs", ":", "\n", "            ", "records", "[", "seq", "]", "=", "list", "(", ")", "\n", "for", "frame", "in", "range", "(", "self", ".", "_seq_length", ")", ":", "\n", "                ", "suffix", "=", "'png'", "if", "data_format", "==", "'RGB'", "else", "'tiff'", "\n", "sample", "=", "dict", "(", ")", "\n", "sample", "[", "'Blur'", "]", "=", "join", "(", "dataset_path", ",", "seq", ",", "'Blur'", ",", "data_format", ",", "'{:08d}.{}'", ".", "format", "(", "frame", ",", "suffix", ")", ")", "\n", "sample", "[", "'Sharp'", "]", "=", "join", "(", "dataset_path", ",", "seq", ",", "'Sharp'", ",", "data_format", ",", "'{:08d}.{}'", ".", "format", "(", "frame", ",", "suffix", ")", ")", "\n", "records", "[", "seq", "]", ".", "append", "(", "sample", ")", "\n", "", "", "for", "seq_records", "in", "records", ".", "values", "(", ")", ":", "\n", "            ", "temp_length", "=", "len", "(", "seq_records", ")", "-", "(", "self", ".", "frames", "-", "1", ")", "\n", "if", "temp_length", "<=", "0", ":", "\n", "                ", "raise", "IndexError", "(", "'Exceed the maximum length of the video sequence'", ")", "\n", "", "for", "idx", "in", "range", "(", "temp_length", ")", ":", "\n", "                ", "samples", ".", "append", "(", "seq_records", "[", "idx", ":", "idx", "+", "self", ".", "frames", "]", ")", "\n", "", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.BSD.DeblurDataset.__getitem__": [[58, 72], ["random.randint", "random.randint", "random.randint", "random.randint", "BSD.DeblurDataset._load_sample", "blur_imgs.append", "sharp_imgs.append", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.BSD.DeblurDataset._load_sample"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "top", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "H", "-", "self", ".", "crop_h", ")", "\n", "left", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "W", "-", "self", ".", "crop_w", ")", "\n", "flip_lr", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "flip_ud", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "sample", "=", "{", "'top'", ":", "top", ",", "'left'", ":", "left", ",", "'flip_lr'", ":", "flip_lr", ",", "'flip_ud'", ":", "flip_ud", "}", "\n", "\n", "blur_imgs", ",", "sharp_imgs", "=", "[", "]", ",", "[", "]", "\n", "for", "sample_dict", "in", "self", ".", "_samples", "[", "item", "]", ":", "\n", "            ", "blur_img", ",", "sharp_img", "=", "self", ".", "_load_sample", "(", "sample_dict", ",", "sample", ")", "\n", "blur_imgs", ".", "append", "(", "blur_img", ")", "\n", "sharp_imgs", ".", "append", "(", "sharp_img", ")", "\n", "", "sharp_imgs", "=", "sharp_imgs", "[", "self", ".", "num_pf", ":", "self", ".", "frames", "-", "self", ".", "num_ff", "]", "\n", "return", "[", "torch", ".", "cat", "(", "item", ",", "dim", "=", "0", ")", "for", "item", "in", "[", "blur_imgs", ",", "sharp_imgs", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.BSD.DeblurDataset._load_sample": [[73, 86], ["BSD.DeblurDataset.transform", "utils.normalize", "utils.normalize", "cv2.imread", "cv2.imread", "[].astype", "[].astype", "cv2.imread", "cv2.imread"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize"], ["", "def", "_load_sample", "(", "self", ",", "sample_dict", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "data_format", "==", "'RGB'", ":", "\n", "            ", "sample", "[", "'image'", "]", "=", "cv2", ".", "imread", "(", "sample_dict", "[", "'Blur'", "]", ")", "\n", "sample", "[", "'label'", "]", "=", "cv2", ".", "imread", "(", "sample_dict", "[", "'Sharp'", "]", ")", "\n", "", "elif", "self", ".", "data_format", "==", "'RAW'", ":", "\n", "            ", "sample", "[", "'image'", "]", "=", "cv2", ".", "imread", "(", "sample_dict", "[", "'Blur'", "]", ",", "-", "1", ")", "[", "...", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "sample", "[", "'label'", "]", "=", "cv2", ".", "imread", "(", "sample_dict", "[", "'Sharp'", "]", ",", "-", "1", ")", "[", "...", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "val_range", "=", "2.0", "**", "8", "-", "1", "if", "self", ".", "data_format", "==", "'RGB'", "else", "2.0", "**", "16", "-", "1", "\n", "blur_img", "=", "normalize", "(", "sample", "[", "'image'", "]", ",", "centralize", "=", "self", ".", "centralize", ",", "normalize", "=", "self", ".", "normalize", ",", "val_range", "=", "val_range", ")", "\n", "sharp_img", "=", "normalize", "(", "sample", "[", "'label'", "]", ",", "centralize", "=", "self", ".", "centralize", ",", "normalize", "=", "self", ".", "normalize", ",", "val_range", "=", "val_range", ")", "\n", "\n", "return", "blur_img", ",", "sharp_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.BSD.DeblurDataset.__len__": [[87, 89], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.BSD.Dataloader.__init__": [[92, 128], ["os.path.join", "BSD.DeblurDataset", "len", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "numpy.ceil", "int", "torch.utils.data.DataLoader", "int", "numpy.ceil", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "para", ",", "device_id", ",", "ds_type", "=", "'train'", ")", ":", "\n", "        ", "path", "=", "join", "(", "para", ".", "data_root", ",", "para", ".", "dataset", ",", "'{}_{}'", ".", "format", "(", "para", ".", "dataset", ",", "para", ".", "ds_config", ")", ",", "ds_type", ")", "\n", "frames", "=", "para", ".", "frames", "\n", "dataset", "=", "DeblurDataset", "(", "path", ",", "frames", ",", "para", ".", "future_frames", ",", "para", ".", "past_frames", ",", "para", ".", "patch_size", ",", "para", ".", "data_format", ",", "\n", "para", ".", "centralize", ",", "para", ".", "normalize", ")", "\n", "gpus", "=", "para", ".", "num_gpus", "\n", "bs", "=", "para", ".", "batch_size", "\n", "ds_len", "=", "len", "(", "dataset", ")", "\n", "if", "para", ".", "trainer_mode", "==", "'ddp'", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "dataset", ",", "\n", "num_replicas", "=", "para", ".", "num_gpus", ",", "\n", "rank", "=", "device_id", "\n", ")", "\n", "self", ".", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "para", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "para", ".", "threads", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "loader_len", "=", "np", ".", "ceil", "(", "ds_len", "/", "gpus", ")", "\n", "self", ".", "loader_len", "=", "int", "(", "np", ".", "ceil", "(", "loader_len", "/", "bs", ")", "*", "bs", ")", "\n", "\n", "", "elif", "para", ".", "trainer_mode", "==", "'dp'", ":", "\n", "            ", "self", ".", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "para", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "para", ".", "threads", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "self", ".", "loader_len", "=", "int", "(", "np", ".", "ceil", "(", "ds_len", "/", "bs", ")", "*", "bs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.BSD.Dataloader.__iter__": [[129, 131], ["iter"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.BSD.Dataloader.__len__": [[132, 134], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "loader_len", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.data.Data.__init__": [[5, 10], ["importlib.import_module", "importlib.import_module.Dataloader", "importlib.import_module.Dataloader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "para", ",", "device_id", ")", ":", "\n", "        ", "dataset", "=", "para", ".", "dataset", "\n", "module", "=", "import_module", "(", "'data.'", "+", "dataset", ")", "\n", "self", ".", "dataloader_train", "=", "module", ".", "Dataloader", "(", "para", ",", "device_id", ",", "ds_type", "=", "'train'", ")", "\n", "self", ".", "dataloader_valid", "=", "module", ".", "Dataloader", "(", "para", ",", "device_id", ",", "ds_type", "=", "'valid'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.gopro_ds_lmdb.DeblurDataset.__init__": [[15, 36], ["os.path.join", "os.path.join", "torchvision.transforms.Compose", "lmdb.open", "lmdb.open", "gopro_ds_lmdb.DeblurDataset.env_blur.begin", "gopro_ds_lmdb.DeblurDataset.env_gt.begin", "open", "pickle.load", "os.path.join", "utils.Crop", "utils.Flip", "utils.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "frames", ",", "future_frames", ",", "past_frames", ",", "crop_size", "=", "(", "256", ",", "256", ")", ",", "ds_type", "=", "'train'", ",", "centralize", "=", "True", ",", "\n", "normalize", "=", "True", ")", ":", "\n", "        ", "ds_name", "=", "'gopro_ds'", "\n", "self", ".", "datapath_blur", "=", "join", "(", "path", ",", "'{}_{}'", ".", "format", "(", "ds_name", ",", "ds_type", ")", ")", "\n", "self", ".", "datapath_gt", "=", "join", "(", "path", ",", "'{}_{}_gt'", ".", "format", "(", "ds_name", ",", "ds_type", ")", ")", "\n", "with", "open", "(", "join", "(", "path", ",", "'{}_info_{}.pkl'", ".", "format", "(", "ds_name", ",", "ds_type", ")", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "seqs_info", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "Crop", "(", "crop_size", ")", ",", "Flip", "(", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "self", ".", "frames", "=", "frames", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "self", ".", "W", "=", "960", "\n", "self", ".", "H", "=", "540", "\n", "self", ".", "C", "=", "3", "\n", "self", ".", "num_ff", "=", "future_frames", "\n", "self", ".", "num_pf", "=", "past_frames", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "centralize", "=", "centralize", "\n", "self", ".", "env_blur", "=", "lmdb", ".", "open", "(", "self", ".", "datapath_blur", ",", "map_size", "=", "1099511627776", ")", "\n", "self", ".", "env_gt", "=", "lmdb", ".", "open", "(", "self", ".", "datapath_gt", ",", "map_size", "=", "1099511627776", ")", "\n", "self", ".", "txn_blur", "=", "self", ".", "env_blur", ".", "begin", "(", ")", "\n", "self", ".", "txn_gt", "=", "self", ".", "env_gt", ".", "begin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.gopro_ds_lmdb.DeblurDataset.__getitem__": [[37, 68], ["range", "random.randint", "random.randint", "random.randint", "random.randint", "range", "torch.cat", "torch.cat", "list", "list", "gopro_ds_lmdb.DeblurDataset.get_img", "torch.cat.append", "torch.cat.append", "print", "print"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.gopro_ds_lmdb.DeblurDataset.get_img"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx", "+=", "1", "\n", "ori_idx", "=", "idx", "\n", "seq_idx", ",", "frame_idx", "=", "0", ",", "0", "\n", "blur_imgs", ",", "sharp_imgs", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "seqs_info", "[", "'num'", "]", ")", ":", "\n", "            ", "seq_length", "=", "self", ".", "seqs_info", "[", "i", "]", "[", "'length'", "]", "-", "self", ".", "frames", "+", "1", "\n", "if", "idx", "-", "seq_length", "<=", "0", ":", "\n", "                ", "seq_idx", "=", "i", "\n", "frame_idx", "=", "idx", "-", "1", "\n", "break", "\n", "", "else", ":", "\n", "                ", "idx", "-=", "seq_length", "\n", "\n", "", "", "top", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "H", "-", "self", ".", "crop_h", ")", "\n", "left", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "W", "-", "self", ".", "crop_w", ")", "\n", "flip_lr_flag", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "flip_ud_flag", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "sample", "=", "{", "'top'", ":", "top", ",", "'left'", ":", "left", ",", "'flip_lr'", ":", "flip_lr_flag", ",", "'flip_ud'", ":", "flip_ud_flag", "}", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "frames", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "blur_img", ",", "sharp_img", "=", "self", ".", "get_img", "(", "seq_idx", ",", "frame_idx", "+", "i", ",", "sample", ")", "\n", "blur_imgs", ".", "append", "(", "blur_img", ")", "\n", "sharp_imgs", ".", "append", "(", "sharp_img", ")", "\n", "", "except", "TypeError", "as", "err", ":", "\n", "                ", "print", "(", "'Handling run-time error:'", ",", "err", ")", "\n", "print", "(", "'failed case: idx {}, seq_idx {}, frame_idx {}'", ".", "format", "(", "ori_idx", ",", "seq_idx", ",", "frame_idx", ")", ")", "\n", "", "", "blur_imgs", "=", "torch", ".", "cat", "(", "blur_imgs", ",", "dim", "=", "0", ")", "\n", "sharp_imgs", "=", "torch", ".", "cat", "(", "sharp_imgs", "[", "self", ".", "num_pf", ":", "self", ".", "frames", "-", "self", ".", "num_ff", "]", ",", "dim", "=", "0", ")", "\n", "return", "blur_imgs", ",", "sharp_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.gopro_ds_lmdb.DeblurDataset.get_img": [[69, 85], ["code.encode.encode.encode", "gopro_ds_lmdb.DeblurDataset.txn_blur.get", "numpy.frombuffer", "utils.normalize.reshape", "gopro_ds_lmdb.DeblurDataset.txn_gt.get", "numpy.frombuffer", "utils.normalize.reshape", "gopro_ds_lmdb.DeblurDataset.transform", "utils.normalize", "utils.normalize"], "methods", ["home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize", "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize"], ["", "def", "get_img", "(", "self", ",", "seq_idx", ",", "frame_idx", ",", "sample", ")", ":", "\n", "        ", "code", "=", "'%03d_%08d'", "%", "(", "seq_idx", ",", "frame_idx", ")", "\n", "code", "=", "code", ".", "encode", "(", ")", "\n", "blur_img", "=", "self", ".", "txn_blur", ".", "get", "(", "code", ")", "\n", "blur_img", "=", "np", ".", "frombuffer", "(", "blur_img", ",", "dtype", "=", "'uint8'", ")", "\n", "blur_img", "=", "blur_img", ".", "reshape", "(", "self", ".", "H", ",", "self", ".", "W", ",", "self", ".", "C", ")", "\n", "sharp_img", "=", "self", ".", "txn_gt", ".", "get", "(", "code", ")", "\n", "sharp_img", "=", "np", ".", "frombuffer", "(", "sharp_img", ",", "dtype", "=", "'uint8'", ")", "\n", "sharp_img", "=", "sharp_img", ".", "reshape", "(", "self", ".", "H", ",", "self", ".", "W", ",", "self", ".", "C", ")", "\n", "sample", "[", "'image'", "]", "=", "blur_img", "\n", "sample", "[", "'label'", "]", "=", "sharp_img", "\n", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "blur_img", "=", "normalize", "(", "sample", "[", "'image'", "]", ",", "centralize", "=", "self", ".", "centralize", ",", "normalize", "=", "self", ".", "normalize", ")", "\n", "sharp_img", "=", "normalize", "(", "sample", "[", "'label'", "]", ",", "centralize", "=", "self", ".", "centralize", ",", "normalize", "=", "self", ".", "normalize", ")", "\n", "\n", "return", "blur_img", ",", "sharp_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.gopro_ds_lmdb.DeblurDataset.__len__": [[86, 88], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "seqs_info", "[", "'length'", "]", "-", "(", "self", ".", "frames", "-", "1", ")", "*", "self", ".", "seqs_info", "[", "'num'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.gopro_ds_lmdb.Dataloader.__init__": [[91, 124], ["os.path.join", "gopro_ds_lmdb.DeblurDataset", "len", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "numpy.ceil", "int", "torch.utils.data.DataLoader", "int", "numpy.ceil", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "para", ",", "device_id", ",", "ds_type", "=", "'train'", ")", ":", "\n", "        ", "path", "=", "join", "(", "para", ".", "data_root", ",", "para", ".", "dataset", ")", "\n", "dataset", "=", "DeblurDataset", "(", "path", ",", "para", ".", "frames", ",", "para", ".", "future_frames", ",", "para", ".", "past_frames", ",", "para", ".", "patch_size", ",", "ds_type", ",", "\n", "para", ".", "centralize", ",", "para", ".", "normalize", ")", "\n", "gpus", "=", "para", ".", "num_gpus", "\n", "bs", "=", "para", ".", "batch_size", "\n", "ds_len", "=", "len", "(", "dataset", ")", "\n", "if", "para", ".", "trainer_mode", "==", "'ddp'", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "dataset", ",", "\n", "num_replicas", "=", "para", ".", "num_gpus", ",", "\n", "rank", "=", "device_id", "\n", ")", "\n", "self", ".", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "para", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "para", ".", "threads", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "sampler", "\n", ")", "\n", "loader_len", "=", "np", ".", "ceil", "(", "ds_len", "/", "gpus", ")", "\n", "self", ".", "loader_len", "=", "int", "(", "np", ".", "ceil", "(", "loader_len", "/", "bs", ")", "*", "bs", ")", "\n", "\n", "", "elif", "para", ".", "trainer_mode", "==", "'dp'", ":", "\n", "            ", "self", ".", "loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "para", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "para", ".", "threads", ",", "\n", "pin_memory", "=", "True", "\n", ")", "\n", "self", ".", "loader_len", "=", "int", "(", "np", ".", "ceil", "(", "ds_len", "/", "bs", ")", "*", "bs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.gopro_ds_lmdb.Dataloader.__iter__": [[125, 127], ["iter"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.gopro_ds_lmdb.Dataloader.__len__": [[128, 130], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "loader_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__init__": [[11, 18], ["isinstance", "isinstance", "len"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Crop.__call__": [[19, 29], ["None"], "methods", ["None"], ["self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Flip.__call__": [[36, 47], ["numpy.fliplr", "numpy.fliplr", "numpy.flipud", "numpy.flipud"], "methods", ["None"], ["if", "isinstance", "(", "ts", ",", "dict", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "dist", ".", "reduce", "(", "ts", ",", "dst", "=", "0", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "ts", "/=", "num_gpus", "\n", "", "except", ":", "\n", "            ", "msg", "=", "'{}'", ".", "format", "(", "type", "(", "ts", ")", ")", "\n", "raise", "NotImplementedError", "(", "msg", ")", "\n", "", "", "return", "ts", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Rotate.__call__": [[54, 61], ["sample[].transpose", "sample[].transpose"], "methods", ["None"], ["path", "=", "join", "(", "path", ",", "'{}'", ".", "format", "(", "seq", ")", ")", "\n", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "\"MJPG\"", ")", "\n", "video", "=", "cv2", ".", "VideoWriter", "(", "file_path", ",", "fourcc", ",", "fps", ",", "size", ")", "\n", "for", "i", "in", "range", "(", "frame_start", ",", "frame_end", ")", ":", "\n", "        ", "imgs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "marks", ")", ")", ":", "\n", "            ", "img_path", "=", "join", "(", "path", ",", "'{:08d}_{}.png'", ".", "format", "(", "i", ",", "marks", "[", "j", "]", ".", "lower", "(", ")", ")", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n"]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.Sharp2Sharp.__call__": [[64, 69], ["sample[].copy"], "methods", ["None"], ["", "frame", "=", "np", ".", "concatenate", "(", "imgs", ",", "axis", "=", "1", ")", "\n", "video", ".", "write", "(", "frame", ")", "\n", "", "video", ".", "release", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.ToTensor.__call__": [[76, 86], ["numpy.ascontiguousarray", "numpy.ascontiguousarray", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.ascontiguousarray.transpose", "numpy.ascontiguousarray.transpose", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize": [[88, 95], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.zzh-tech_ESTRNN.data.utils.normalize_reverse": [[97, 104], ["None"], "function", ["None"], []]}