{"home.repos.pwc.inspect_result.ntu-aiot_ObfNet.asl.main.get_data": [[20, 108], ["numpy.empty", "numpy.empty", "os.listdir", "open", "pickle.dump", "folderName.startswith", "os.listdir", "PIL.Image.open", "Image.open.thumbnail", "numpy.array().reshape", "numpy.array"], "function", ["None"], ["def", "get_data", "(", "folder", ")", ":", "\n", "    ", "\"\"\"Load the data and labels from the given folder.\"\"\"", "\n", "\n", "X", "=", "np", ".", "empty", "(", "(", "train_len", ",", "imageSize", ",", "imageSize", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "empty", "(", "(", "train_len", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "cnt", "=", "0", "\n", "\n", "for", "folderName", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "        ", "if", "not", "folderName", ".", "startswith", "(", "'.'", ")", ":", "\n", "            ", "if", "folderName", "in", "[", "'A'", "]", ":", "\n", "                ", "label", "=", "0", "\n", "", "elif", "folderName", "in", "[", "'B'", "]", ":", "\n", "                ", "label", "=", "1", "\n", "", "elif", "folderName", "in", "[", "'C'", "]", ":", "\n", "                ", "label", "=", "2", "\n", "", "elif", "folderName", "in", "[", "'D'", "]", ":", "\n", "                ", "label", "=", "3", "\n", "", "elif", "folderName", "in", "[", "'E'", "]", ":", "\n", "                ", "label", "=", "4", "\n", "", "elif", "folderName", "in", "[", "'F'", "]", ":", "\n", "                ", "label", "=", "5", "\n", "", "elif", "folderName", "in", "[", "'G'", "]", ":", "\n", "                ", "label", "=", "6", "\n", "", "elif", "folderName", "in", "[", "'H'", "]", ":", "\n", "                ", "label", "=", "7", "\n", "", "elif", "folderName", "in", "[", "'I'", "]", ":", "\n", "                ", "label", "=", "8", "\n", "", "elif", "folderName", "in", "[", "'J'", "]", ":", "\n", "                ", "label", "=", "9", "\n", "", "elif", "folderName", "in", "[", "'K'", "]", ":", "\n", "                ", "label", "=", "10", "\n", "", "elif", "folderName", "in", "[", "'L'", "]", ":", "\n", "                ", "label", "=", "11", "\n", "", "elif", "folderName", "in", "[", "'M'", "]", ":", "\n", "                ", "label", "=", "12", "\n", "", "elif", "folderName", "in", "[", "'N'", "]", ":", "\n", "                ", "label", "=", "13", "\n", "", "elif", "folderName", "in", "[", "'O'", "]", ":", "\n", "                ", "label", "=", "14", "\n", "", "elif", "folderName", "in", "[", "'P'", "]", ":", "\n", "                ", "label", "=", "15", "\n", "", "elif", "folderName", "in", "[", "'Q'", "]", ":", "\n", "                ", "label", "=", "16", "\n", "", "elif", "folderName", "in", "[", "'R'", "]", ":", "\n", "                ", "label", "=", "17", "\n", "", "elif", "folderName", "in", "[", "'S'", "]", ":", "\n", "                ", "label", "=", "18", "\n", "", "elif", "folderName", "in", "[", "'T'", "]", ":", "\n", "                ", "label", "=", "19", "\n", "", "elif", "folderName", "in", "[", "'U'", "]", ":", "\n", "                ", "label", "=", "20", "\n", "", "elif", "folderName", "in", "[", "'V'", "]", ":", "\n", "                ", "label", "=", "21", "\n", "", "elif", "folderName", "in", "[", "'W'", "]", ":", "\n", "                ", "label", "=", "22", "\n", "", "elif", "folderName", "in", "[", "'X'", "]", ":", "\n", "                ", "label", "=", "23", "\n", "", "elif", "folderName", "in", "[", "'Y'", "]", ":", "\n", "                ", "label", "=", "24", "\n", "", "elif", "folderName", "in", "[", "'Z'", "]", ":", "\n", "                ", "label", "=", "25", "\n", "", "elif", "folderName", "in", "[", "'del'", "]", ":", "\n", "                ", "label", "=", "26", "\n", "", "elif", "folderName", "in", "[", "'nothing'", "]", ":", "\n", "                ", "label", "=", "27", "\n", "", "elif", "folderName", "in", "[", "'space'", "]", ":", "\n", "                ", "label", "=", "28", "\n", "", "else", ":", "\n", "                ", "label", "=", "29", "\n", "", "for", "image_filename", "in", "os", ".", "listdir", "(", "folder", "+", "folderName", ")", ":", "\n", "                ", "img_file", "=", "Image", ".", "open", "(", "folder", "+", "folderName", "+", "'/'", "+", "\n", "image_filename", ")", "\n", "# img_file = cv2.imread(folder + folderName + '/' + image_filename)", "\n", "if", "img_file", "is", "not", "None", ":", "\n", "# img_file = skimage.transform.resize(img_file, (imageSize, imageSize, 3))", "\n", "# img_arr = np.asarray(img_file).reshape((-1, imageSize, imageSize, 3))", "\n", "                    ", "img_file", ".", "thumbnail", "(", "(", "imageSize", ",", "imageSize", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "img_arr", "=", "np", ".", "array", "(", "img_file", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", "imageSize", ",", "imageSize", ",", "3", ")", ")", "\n", "\n", "X", "[", "cnt", "]", "=", "img_arr", "\n", "y", "[", "cnt", "]", "=", "label", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "", "", "with", "open", "(", "\"train.pkl\"", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pkl", ".", "dump", "(", "(", "X", ",", "y", ")", ",", "f", ")", "\n", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.asl.main.grayscale": [[110, 118], ["numpy.expand_dims", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "grayscale", "(", "data", ",", "dtype", "=", "'float32'", ")", ":", "\n", "    ", "\"\"\"Convert colored image data to greyscale.\"\"\"", "\n", "\n", "r", ",", "g", ",", "b", "=", "np", ".", "asarray", "(", ".3", ",", "dtype", "=", "dtype", ")", ",", "np", ".", "asarray", "(", "\n", ".59", ",", "dtype", "=", "dtype", ")", ",", "np", ".", "asarray", "(", ".11", ",", "dtype", "=", "dtype", ")", "\n", "rst", "=", "r", "*", "data", "[", ":", ",", ":", ",", ":", ",", "0", "]", "+", "g", "*", "data", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "b", "*", "data", "[", ":", ",", ":", ",", ":", ",", "2", "]", "\n", "rst", "=", "np", ".", "expand_dims", "(", "rst", ",", "axis", "=", "3", ")", "\n", "return", "rst", "\n", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.asl.main.get_inference_model_mlp": [[120, 128], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "range", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Flatten", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation"], "function", ["None"], ["", "def", "get_inference_model_mlp", "(", "target_dims", ",", "num_classes", ",", "num_layers", "=", "6", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Flatten", "(", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "model", ".", "add", "(", "Dense", "(", "1024", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "", "model", ".", "add", "(", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.asl.main.get_inference_model_cnn": [[130, 147], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "def", "get_inference_model_cnn", "(", "target_dims", ",", "num_classes", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "\n", "Conv2D", "(", "32", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.asl.main.get_obfmodel_mlp": [[149, 159], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Reshape", "numpy.prod"], "function", ["None"], ["", "def", "get_obfmodel_mlp", "(", "target_dims", ",", "num_neuron", "=", "512", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Flatten", "(", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "num_neuron", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "np", ".", "prod", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "model", ".", "add", "(", "Reshape", "(", "target_dims", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.asl.main.get_obfmodel_cnn": [[161, 178], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Reshape", "numpy.prod"], "function", ["None"], ["", "def", "get_obfmodel_cnn", "(", "target_dims", ",", "num_neuron", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "\n", "Conv2D", "(", "32", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "num_neuron", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "np", ".", "prod", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "model", ".", "add", "(", "Reshape", "(", "target_dims", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.asl.main.main": [[180, 357], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "os.makedirs", "tensorflow.keras.callbacks.TensorBoard", "sklearn.model_selection.train_test_split", "tensorflow.keras.utils.to_categorical", "tensorflow.keras.utils.to_categorical", "print", "print", "print", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.compile", "print", "tensorflow.keras.models.Model.fit", "tensorflow.keras.models.Model.evaluate", "print", "print", "datetime.datetime.now().strftime", "main.get_data", "main.grayscale", "get_inference_model.compile", "tensorflow.keras.callbacks.ModelCheckpoint", "get_inference_model.fit", "tensorflow.keras.models.load_model", "get_inference_model.summary", "get_inference_model.evaluate", "main.get_obfmodel_cnn", "main.get_obfmodel_mlp", "get_obfmodel_mlp.build", "tensorflow.distribute.MirroredStrategy", "tensorflow.keras.models.Model.summary", "range", "enumerate", "list", "open", "pickle.load", "main.get_inference_model_cnn", "main.get_inference_model_mlp", "tensorflow.distribute.MirroredStrategy", "ValueError", "get_inference_model.", "tf.distribute.MirroredStrategy.scope", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.compile", "all", "datetime.datetime.now", "tf.distribute.MirroredStrategy.scope", "get_inference_model", "get_inference_model.compile", "tensorflow.keras.callbacks.ModelCheckpoint", "inf_path.split", "infmodel", "pos.values", "pos.values"], "function", ["home.repos.pwc.inspect_result.ntu-aiot_ObfNet.fsd.main.get_data", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.asl.main.grayscale", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_obfmodel_cnn", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_obfmodel_mlp", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.asl.main.get_inference_model_cnn", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.asl.main.get_inference_model_mlp"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--is-inf/--no-inf'", ",", "\n", "'-T'", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\n", "\"flag for whether training inference network, default set to False (trian ObfNet only)\"", "\n", ")", "\n", "@", "click", ".", "option", "(", "'--is-inf-cnn/--is-inf-mlp'", ",", "\n", "'-IC/-IM'", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"flag for training Convolutional Inference Network.\"", ")", "\n", "@", "click", ".", "option", "(", "'--is-obf-cnn/--is-obf-mlp'", ",", "\n", "'-OC/-OM'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"flag for training Convolutional Obfuscation Network.\"", ")", "\n", "@", "click", ".", "option", "(", "'--num-neuron'", ",", "\n", "'-n'", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'# of neurons at ObfNet.'", ")", "\n", "@", "click", ".", "option", "(", "'--inf-path'", ",", "default", "=", "\"\"", ",", "help", "=", "'path to inference model'", ")", "\n", "@", "click", ".", "option", "(", "'--save-image'", ",", "\n", "'-S'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'flag for saving images.'", ")", "\n", "@", "click", ".", "option", "(", "'--is-gray'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'flag for converting to greyscale images.'", ")", "\n", "@", "click", ".", "option", "(", "'--dataset-path'", ",", "'-D'", ",", "default", "=", "'dataset/asl/'", ",", "help", "=", "'path to dataset'", ")", "\n", "def", "main", "(", "is_inf", ",", "is_inf_cnn", ",", "is_obf_cnn", ",", "num_neuron", ",", "inf_path", ",", "save_image", ",", "\n", "is_gray", ",", "dataset_path", ")", ":", "\n", "\n", "    ", "os", ".", "makedirs", "(", "\"models/asl/\"", ",", "exist_ok", "=", "True", ")", "\n", "\n", "use_gpu", "=", "False", "\n", "batch_size", "=", "64", "\n", "imageSize", "=", "64", "\n", "target_dims", "=", "(", "imageSize", ",", "imageSize", ",", "3", ")", "\n", "num_classes", "=", "29", "\n", "max_epochs", "=", "100", "\n", "\n", "train_len", "=", "87000", "\n", "log_dir", "=", "\"logs/fit/\"", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "tensorboard_cb", "=", "TensorBoard", "(", "log_dir", "=", "log_dir", ",", "histogram_freq", "=", "1", ")", "\n", "\n", "if", "not", "dataset_path", ":", "\n", "# use pickled dataset to save time", "\n", "        ", "with", "open", "(", "\"dataset/asl/train.pkl\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "X_train", ",", "y_train", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "get_data", "(", "dataset_path", ")", "\n", "\n", "", "if", "is_gray", ":", "\n", "        ", "X_train", "=", "grayscale", "(", "X_train", ")", "\n", "target_dims", "=", "(", "imageSize", ",", "imageSize", ",", "1", ")", "\n", "\n", "", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X_train", ",", "\n", "y_train", ",", "\n", "test_size", "=", "0.1", ")", "\n", "\n", "# Encode labels to hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])", "\n", "y_trainHot", "=", "to_categorical", "(", "y_train", ",", "num_classes", "=", "num_classes", ")", "\n", "y_testHot", "=", "to_categorical", "(", "y_test", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "if", "is_inf", ":", "\n", "        ", "if", "is_inf_cnn", ":", "\n", "            ", "inference_model", "=", "get_inference_model_cnn", "(", "target_dims", ",", "num_classes", ")", "\n", "inf_path", "=", "'models/asl/inf-cnn.h5'", "\n", "", "else", ":", "\n", "            ", "inference_model", "=", "get_inference_model_mlp", "(", "target_dims", ",", "num_classes", ")", "\n", "inf_path", "=", "'models/asl/inf-mlp.h5'", "\n", "\n", "", "if", "is_gray", ":", "\n", "            ", "inf_path", "=", "inf_path", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'-gray.h5'", "\n", "\n", "", "inference_model", ".", "compile", "(", "optimizer", "=", "'adam'", ",", "\n", "loss", "=", "'categorical_crossentropy'", ",", "\n", "metrics", "=", "[", "\"accuracy\"", "]", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "# inference_model = multi_gpu_model(inference_model, gpus=4)", "\n", "            ", "strategy", "=", "tf", ".", "distribute", ".", "MirroredStrategy", "(", ")", "\n", "with", "strategy", ".", "scope", "(", ")", ":", "\n", "                ", "inference_model", "=", "get_inference_model", "(", ")", "\n", "inference_model", ".", "compile", "(", "optimizer", "=", "'adam'", ",", "\n", "loss", "=", "'categorical_crossentropy'", ",", "\n", "metrics", "=", "[", "\"accuracy\"", "]", ")", "\n", "\n", "", "", "infmodelcheck_cb", "=", "ModelCheckpoint", "(", "inf_path", ",", "\n", "monitor", "=", "'val_accuracy'", ",", "\n", "verbose", "=", "1", ",", "\n", "save_best_only", "=", "True", ",", "\n", "mode", "=", "'max'", ")", "\n", "\n", "inference_model", ".", "fit", "(", "x", "=", "X_train", ",", "\n", "y", "=", "y_trainHot", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "max_epochs", ",", "\n", "callbacks", "=", "[", "infmodelcheck_cb", ",", "tensorboard_cb", "]", ",", "\n", "validation_data", "=", "(", "X_test", ",", "y_testHot", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "inf_path", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Please input path to inference network or train the inference model.'", "\n", ")", "\n", "", "inference_model", "=", "load_model", "(", "inf_path", ")", "\n", "\n", "", "print", "(", "inference_model", ".", "summary", "(", ")", ")", "\n", "print", "(", "'Inference Result: '", ")", "\n", "print", "(", "inference_model", ".", "evaluate", "(", "X_test", ",", "y_testHot", ",", "verbose", "=", "0", ")", ")", "\n", "\n", "######################", "\n", "# training of ObfNet #", "\n", "######################", "\n", "\n", "if", "is_obf_cnn", ":", "\n", "        ", "obfmodel", "=", "get_obfmodel_cnn", "(", "target_dims", ",", "num_neuron", ")", "\n", "", "else", ":", "\n", "        ", "obfmodel", "=", "get_obfmodel_mlp", "(", "target_dims", ",", "num_neuron", ")", "\n", "obfmodel", ".", "build", "(", "(", "None", ",", ")", "+", "target_dims", ")", "\n", "\n", "", "inference_model", ".", "trainable", "=", "False", "\n", "for", "l", "in", "inference_model", ".", "layers", ":", "\n", "        ", "l", ".", "trainable", "=", "False", "\n", "\n", "", "combined_model", "=", "Model", "(", "inputs", "=", "obfmodel", ".", "input", ",", "\n", "outputs", "=", "inference_model", "(", "obfmodel", ".", "output", ")", ")", "\n", "combined_model", ".", "compile", "(", "optimizer", "=", "'adamdelta'", ",", "\n", "loss", "=", "'categorical_crossentropy'", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "# combined_model = multi_gpu_model(combined_model, gpus=4)", "\n", "        ", "strategy", "=", "tf", ".", "distribute", ".", "MirroredStrategy", "(", ")", "\n", "with", "strategy", ".", "scope", "(", ")", ":", "\n", "            ", "combined_model", "=", "Model", "(", "inputs", "=", "obfmodel", ".", "input", ",", "\n", "outputs", "=", "infmodel", "(", "obfmodel", ".", "output", ")", ")", "\n", "combined_model", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "\n", "loss", "=", "'categorical_crossentropy'", ",", "\n", "metrics", "=", "[", "\"accuracy\"", "]", ")", "\n", "\n", "", "", "print", "(", "combined_model", ".", "summary", "(", ")", ")", "\n", "com_path", "=", "'models/asl/combined-model.h5'", "\n", "\n", "combined_model", ".", "fit", "(", "x", "=", "X_train", ",", "\n", "y", "=", "y_trainHot", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "epochs", "=", "max_epochs", ",", "\n", "callbacks", "=", "[", "\n", "ModelCheckpoint", "(", "com_path", ",", "\n", "monitor", "=", "'val_accuracy'", ",", "\n", "verbose", "=", "1", ",", "\n", "save_best_only", "=", "True", ",", "\n", "mode", "=", "'max'", ")", "\n", "]", ",", "\n", "verbose", "=", "1", ",", "\n", "validation_data", "=", "(", "X_test", ",", "y_testHot", ")", ")", "\n", "\n", "######################", "\n", "# testing of ObfNet #", "\n", "######################", "\n", "\n", "score", "=", "combined_model", ".", "evaluate", "(", "X_test", ",", "y_testHot", ",", "verbose", "=", "0", ")", "\n", "print", "(", "\"Test loss:\"", ",", "score", "[", "0", "]", ")", "\n", "print", "(", "\"Test accuracy:\"", ",", "score", "[", "1", "]", ")", "\n", "\n", "if", "save_image", ":", "\n", "        ", "pos", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "pos", "[", "i", "]", "=", "-", "1", "\n", "\n", "", "for", "ind", ",", "num", "in", "enumerate", "(", "y_test", ")", ":", "\n", "            ", "pos", "[", "num", "]", "=", "ind", "\n", "if", "all", "(", "x", "!=", "-", "1", "for", "x", "in", "pos", ".", "values", "(", ")", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "cls_pos", "=", "list", "(", "x", "for", "x", "in", "pos", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.fsd.main.wav2mfcc": [[20, 33], ["librosa.load", "librosa.feature.mfcc", "numpy.pad"], "function", ["None"], ["def", "get_data", "(", "folder", ")", ":", "\n", "    ", "\"\"\"Load the data and labels from the given folder.\"\"\"", "\n", "\n", "X", "=", "np", ".", "empty", "(", "(", "train_len", ",", "imageSize", ",", "imageSize", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "empty", "(", "(", "train_len", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "cnt", "=", "0", "\n", "\n", "for", "folderName", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "        ", "if", "not", "folderName", ".", "startswith", "(", "'.'", ")", ":", "\n", "            ", "if", "folderName", "in", "[", "'A'", "]", ":", "\n", "                ", "label", "=", "0", "\n", "", "elif", "folderName", "in", "[", "'B'", "]", ":", "\n", "                ", "label", "=", "1", "\n", "", "elif", "folderName", "in", "[", "'C'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.fsd.main.get_data": [[35, 51], ["os.listdir", "f.endswith", "numpy.asarray", "tensorflow.keras.utils.to_categorical", "mfccs.append", "labels.append", "main.wav2mfcc", "f.split"], "function", ["home.repos.pwc.inspect_result.ntu-aiot_ObfNet.fsd.main.wav2mfcc"], ["", "elif", "folderName", "in", "[", "'D'", "]", ":", "\n", "                ", "label", "=", "3", "\n", "", "elif", "folderName", "in", "[", "'E'", "]", ":", "\n", "                ", "label", "=", "4", "\n", "", "elif", "folderName", "in", "[", "'F'", "]", ":", "\n", "                ", "label", "=", "5", "\n", "", "elif", "folderName", "in", "[", "'G'", "]", ":", "\n", "                ", "label", "=", "6", "\n", "", "elif", "folderName", "in", "[", "'H'", "]", ":", "\n", "                ", "label", "=", "7", "\n", "", "elif", "folderName", "in", "[", "'I'", "]", ":", "\n", "                ", "label", "=", "8", "\n", "", "elif", "folderName", "in", "[", "'J'", "]", ":", "\n", "                ", "label", "=", "9", "\n", "", "elif", "folderName", "in", "[", "'K'", "]", ":", "\n", "                ", "label", "=", "10", "\n", "", "elif", "folderName", "in", "[", "'L'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.fsd.main.get_inference_cnn": [[53, 73], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "elif", "folderName", "in", "[", "'M'", "]", ":", "\n", "                ", "label", "=", "12", "\n", "", "elif", "folderName", "in", "[", "'N'", "]", ":", "\n", "                ", "label", "=", "13", "\n", "", "elif", "folderName", "in", "[", "'O'", "]", ":", "\n", "                ", "label", "=", "14", "\n", "", "elif", "folderName", "in", "[", "'P'", "]", ":", "\n", "                ", "label", "=", "15", "\n", "", "elif", "folderName", "in", "[", "'Q'", "]", ":", "\n", "                ", "label", "=", "16", "\n", "", "elif", "folderName", "in", "[", "'R'", "]", ":", "\n", "                ", "label", "=", "17", "\n", "", "elif", "folderName", "in", "[", "'S'", "]", ":", "\n", "                ", "label", "=", "18", "\n", "", "elif", "folderName", "in", "[", "'T'", "]", ":", "\n", "                ", "label", "=", "19", "\n", "", "elif", "folderName", "in", "[", "'U'", "]", ":", "\n", "                ", "label", "=", "20", "\n", "", "elif", "folderName", "in", "[", "'V'", "]", ":", "\n", "                ", "label", "=", "21", "\n", "", "elif", "folderName", "in", "[", "'W'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.fsd.main.get_inference_mlp": [[75, 92], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "elif", "folderName", "in", "[", "'X'", "]", ":", "\n", "                ", "label", "=", "23", "\n", "", "elif", "folderName", "in", "[", "'Y'", "]", ":", "\n", "                ", "label", "=", "24", "\n", "", "elif", "folderName", "in", "[", "'Z'", "]", ":", "\n", "                ", "label", "=", "25", "\n", "", "elif", "folderName", "in", "[", "'del'", "]", ":", "\n", "                ", "label", "=", "26", "\n", "", "elif", "folderName", "in", "[", "'nothing'", "]", ":", "\n", "                ", "label", "=", "27", "\n", "", "elif", "folderName", "in", "[", "'space'", "]", ":", "\n", "                ", "label", "=", "28", "\n", "", "else", ":", "\n", "                ", "label", "=", "29", "\n", "", "for", "image_filename", "in", "os", ".", "listdir", "(", "folder", "+", "folderName", ")", ":", "\n", "                ", "img_file", "=", "Image", ".", "open", "(", "folder", "+", "folderName", "+", "'/'", "+", "\n", "image_filename", ")", "\n", "# img_file = cv2.imread(folder + folderName + '/' + image_filename)", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.fsd.main.get_obfmodel_cnn": [[94, 112], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Reshape", "regularizers.l2"], "function", ["None"], ["# img_file = skimage.transform.resize(img_file, (imageSize, imageSize, 3))", "\n", "# img_arr = np.asarray(img_file).reshape((-1, imageSize, imageSize, 3))", "\n", "                    ", "img_file", ".", "thumbnail", "(", "(", "imageSize", ",", "imageSize", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "img_arr", "=", "np", ".", "array", "(", "img_file", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", "imageSize", ",", "imageSize", ",", "3", ")", ")", "\n", "\n", "X", "[", "cnt", "]", "=", "img_arr", "\n", "y", "[", "cnt", "]", "=", "label", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "", "", "with", "open", "(", "\"train.pkl\"", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pkl", ".", "dump", "(", "(", "X", ",", "y", ")", ",", "f", ")", "\n", "\n", "", "return", "X", ",", "y", "\n", "\n", "\n", "", "def", "grayscale", "(", "data", ",", "dtype", "=", "'float32'", ")", ":", "\n", "    ", "\"\"\"Convert colored image data to greyscale.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.fsd.main.get_obfmodel_mlp": [[114, 125], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Reshape"], "function", ["None"], [".59", ",", "dtype", "=", "dtype", ")", ",", "np", ".", "asarray", "(", ".11", ",", "dtype", "=", "dtype", ")", "\n", "rst", "=", "r", "*", "data", "[", ":", ",", ":", ",", ":", ",", "0", "]", "+", "g", "*", "data", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "b", "*", "data", "[", ":", ",", ":", ",", ":", ",", "2", "]", "\n", "rst", "=", "np", ".", "expand_dims", "(", "rst", ",", "axis", "=", "3", ")", "\n", "return", "rst", "\n", "\n", "\n", "", "def", "get_inference_model_mlp", "(", "target_dims", ",", "num_classes", ",", "num_layers", "=", "6", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Flatten", "(", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "model", ".", "add", "(", "Dense", "(", "1024", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.fsd.main.main": [[127, 254], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "os.makedirs", "main.get_data", "X.reshape.reshape", "sklearn.model_selection.train_test_split", "X_train.astype.astype", "X_test.astype.astype", "print", "print", "print", "get_obfmodel_mlp.build", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.compile", "print", "tensorflow.keras.models.Model.fit", "tensorflow.keras.models.Model.evaluate", "print", "print", "get_inference_mlp.compile", "get_inference_mlp.fit", "tensorflow.keras.models.load_model", "get_inference_mlp.summary", "get_inference_mlp.evaluate", "main.get_obfmodel_cnn", "main.get_obfmodel_mlp", "tensorflow.keras.models.Model.summary", "main.get_inference_cnn", "main.get_inference_mlp", "ValueError", "get_inference_mlp.", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.ModelCheckpoint"], "function", ["home.repos.pwc.inspect_result.ntu-aiot_ObfNet.fsd.main.get_data", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_obfmodel_cnn", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_obfmodel_mlp", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_inference_cnn", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_inference_mlp"], ["return", "model", "\n", "\n", "\n", "", "def", "get_inference_model_cnn", "(", "target_dims", ",", "num_classes", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "\n", "Conv2D", "(", "32", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "get_obfmodel_mlp", "(", "target_dims", ",", "num_neuron", "=", "512", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Flatten", "(", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "num_neuron", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "np", ".", "prod", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "model", ".", "add", "(", "Reshape", "(", "target_dims", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "get_obfmodel_cnn", "(", "target_dims", ",", "num_neuron", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "\n", "Conv2D", "(", "32", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "num_neuron", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "np", ".", "prod", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "model", ".", "add", "(", "Reshape", "(", "target_dims", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--is-inf/--no-inf'", ",", "\n", "'-T'", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\n", "\"flag for whether training inference network, default set to False (trian ObfNet only)\"", "\n", ")", "\n", "@", "click", ".", "option", "(", "'--is-inf-cnn/--is-inf-mlp'", ",", "\n", "'-IC/-IM'", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"flag for training Convolutional Inference Network.\"", ")", "\n", "@", "click", ".", "option", "(", "'--is-obf-cnn/--is-obf-mlp'", ",", "\n", "'-OC/-OM'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"flag for training Convolutional Obfuscation Network.\"", ")", "\n", "@", "click", ".", "option", "(", "'--num-neuron'", ",", "\n", "'-n'", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'# of neurons at ObfNet.'", ")", "\n", "@", "click", ".", "option", "(", "'--inf-path'", ",", "default", "=", "\"\"", ",", "help", "=", "'path to inference model'", ")", "\n", "@", "click", ".", "option", "(", "'--save-image'", ",", "\n", "'-S'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'flag for saving images.'", ")", "\n", "@", "click", ".", "option", "(", "'--is-gray'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'flag for converting to greyscale images.'", ")", "\n", "@", "click", ".", "option", "(", "'--dataset-path'", ",", "'-D'", ",", "default", "=", "'dataset/asl/'", ",", "help", "=", "'path to dataset'", ")", "\n", "def", "main", "(", "is_inf", ",", "is_inf_cnn", ",", "is_obf_cnn", ",", "num_neuron", ",", "inf_path", ",", "save_image", ",", "\n", "is_gray", ",", "dataset_path", ")", ":", "\n", "\n", "    ", "os", ".", "makedirs", "(", "\"models/asl/\"", ",", "exist_ok", "=", "True", ")", "\n", "\n", "use_gpu", "=", "False", "\n", "batch_size", "=", "64", "\n", "imageSize", "=", "64", "\n", "target_dims", "=", "(", "imageSize", ",", "imageSize", ",", "3", ")", "\n", "num_classes", "=", "29", "\n", "max_epochs", "=", "100", "\n", "\n", "train_len", "=", "87000", "\n", "log_dir", "=", "\"logs/fit/\"", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "tensorboard_cb", "=", "TensorBoard", "(", "log_dir", "=", "log_dir", ",", "histogram_freq", "=", "1", ")", "\n", "\n", "if", "not", "dataset_path", ":", "\n", "# use pickled dataset to save time", "\n", "        ", "with", "open", "(", "\"dataset/asl/train.pkl\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "X_train", ",", "y_train", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "get_data", "(", "dataset_path", ")", "\n", "\n", "", "if", "is_gray", ":", "\n", "        ", "X_train", "=", "grayscale", "(", "X_train", ")", "\n", "target_dims", "=", "(", "imageSize", ",", "imageSize", ",", "1", ")", "\n", "\n", "", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X_train", ",", "\n", "y_train", ",", "\n", "test_size", "=", "0.1", ")", "\n", "\n", "# Encode labels to hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])", "\n", "y_trainHot", "=", "to_categorical", "(", "y_train", ",", "num_classes", "=", "num_classes", ")", "\n", "y_testHot", "=", "to_categorical", "(", "y_test", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "if", "is_inf", ":", "\n", "        ", "if", "is_inf_cnn", ":", "\n", "            ", "inference_model", "=", "get_inference_model_cnn", "(", "target_dims", ",", "num_classes", ")", "\n", "inf_path", "=", "'models/asl/inf-cnn.h5'", "\n", "", "else", ":", "\n", "            ", "inference_model", "=", "get_inference_model_mlp", "(", "target_dims", ",", "num_classes", ")", "\n", "inf_path", "=", "'models/asl/inf-mlp.h5'", "\n", "\n", "", "if", "is_gray", ":", "\n", "            ", "inf_path", "=", "inf_path", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'-gray.h5'", "\n", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_inference_cnn": [[18, 33], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense"], "function", ["None"], ["\n", "\n", "def", "get_data", "(", "folder", ")", ":", "\n", "    ", "\"\"\"Load the data and labels from the given folder.\"\"\"", "\n", "\n", "X", "=", "np", ".", "empty", "(", "(", "train_len", ",", "imageSize", ",", "imageSize", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "empty", "(", "(", "train_len", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "cnt", "=", "0", "\n", "\n", "for", "folderName", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "        ", "if", "not", "folderName", ".", "startswith", "(", "'.'", ")", ":", "\n", "            ", "if", "folderName", "in", "[", "'A'", "]", ":", "\n", "                ", "label", "=", "0", "\n", "", "elif", "folderName", "in", "[", "'B'", "]", ":", "\n", "                ", "label", "=", "1", "\n", "", "elif", "folderName", "in", "[", "'C'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_inference_mlp": [[35, 43], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "elif", "folderName", "in", "[", "'D'", "]", ":", "\n", "                ", "label", "=", "3", "\n", "", "elif", "folderName", "in", "[", "'E'", "]", ":", "\n", "                ", "label", "=", "4", "\n", "", "elif", "folderName", "in", "[", "'F'", "]", ":", "\n", "                ", "label", "=", "5", "\n", "", "elif", "folderName", "in", "[", "'G'", "]", ":", "\n", "                ", "label", "=", "6", "\n", "", "elif", "folderName", "in", "[", "'H'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_obfmodel_mlp": [[45, 52], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Reshape"], "function", ["None"], ["", "elif", "folderName", "in", "[", "'I'", "]", ":", "\n", "                ", "label", "=", "8", "\n", "", "elif", "folderName", "in", "[", "'J'", "]", ":", "\n", "                ", "label", "=", "9", "\n", "", "elif", "folderName", "in", "[", "'K'", "]", ":", "\n", "                ", "label", "=", "10", "\n", "", "elif", "folderName", "in", "[", "'L'", "]", ":", "\n", "                ", "label", "=", "11", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_obfmodel_cnn": [[54, 67], ["tensorflow.keras.models.Sequential", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.models.Sequential.add", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPooling2D", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Reshape"], "function", ["None"], ["                ", "label", "=", "12", "\n", "", "elif", "folderName", "in", "[", "'N'", "]", ":", "\n", "                ", "label", "=", "13", "\n", "", "elif", "folderName", "in", "[", "'O'", "]", ":", "\n", "                ", "label", "=", "14", "\n", "", "elif", "folderName", "in", "[", "'P'", "]", ":", "\n", "                ", "label", "=", "15", "\n", "", "elif", "folderName", "in", "[", "'Q'", "]", ":", "\n", "                ", "label", "=", "16", "\n", "", "elif", "folderName", "in", "[", "'R'", "]", ":", "\n", "                ", "label", "=", "17", "\n", "", "elif", "folderName", "in", "[", "'S'", "]", ":", "\n", "                ", "label", "=", "18", "\n", "", "elif", "folderName", "in", "[", "'T'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_mid_out": [[69, 73], ["tensorflow.keras.backend.function", "K.function."], "function", ["None"], ["", "elif", "folderName", "in", "[", "'U'", "]", ":", "\n", "                ", "label", "=", "20", "\n", "", "elif", "folderName", "in", "[", "'V'", "]", ":", "\n", "                ", "label", "=", "21", "\n", "", "elif", "folderName", "in", "[", "'W'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.main": [[75, 228], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "os.makedirs", "tensorflow.keras.datasets.mnist.load_data", "x_train.reshape.astype", "x_test.reshape.astype", "tensorflow.keras.utils.to_categorical", "tensorflow.keras.utils.to_categorical", "print", "print", "print", "tensorflow.keras.models.Model", "tensorflow.keras.models.Model.compile", "print", "tensorflow.keras.models.Model.fit", "tensorflow.keras.models.Model.evaluate", "print", "print", "tensorflow.keras.backend.image_data_format", "x_train.reshape.reshape", "x_test.reshape.reshape", "x_train.reshape.reshape", "x_test.reshape.reshape", "get_inference_mlp.compile", "get_inference_mlp.fit", "tensorflow.keras.models.load_model", "get_inference_mlp.summary", "get_inference_mlp.evaluate", "main.get_obfmodel_cnn", "main.get_obfmodel_mlp", "get_obfmodel_mlp.build", "tensorflow.keras.models.Model.summary", "os.makedirs", "numpy.concatenate", "cv2.imwrite", "main.get_mid_out", "numpy.concatenate", "cv2.imwrite", "main.get_inference_cnn", "main.get_inference_mlp", "ValueError", "get_inference_mlp.", "h1.append", "numpy.array", "h.append", "numpy.array", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.ModelCheckpoint"], "function", ["home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_obfmodel_cnn", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_obfmodel_mlp", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_mid_out", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_inference_cnn", "home.repos.pwc.inspect_result.ntu-aiot_ObfNet.mnist.main.get_inference_mlp"], ["", "elif", "folderName", "in", "[", "'X'", "]", ":", "\n", "                ", "label", "=", "23", "\n", "", "elif", "folderName", "in", "[", "'Y'", "]", ":", "\n", "                ", "label", "=", "24", "\n", "", "elif", "folderName", "in", "[", "'Z'", "]", ":", "\n", "                ", "label", "=", "25", "\n", "", "elif", "folderName", "in", "[", "'del'", "]", ":", "\n", "                ", "label", "=", "26", "\n", "", "elif", "folderName", "in", "[", "'nothing'", "]", ":", "\n", "                ", "label", "=", "27", "\n", "", "elif", "folderName", "in", "[", "'space'", "]", ":", "\n", "                ", "label", "=", "28", "\n", "", "else", ":", "\n", "                ", "label", "=", "29", "\n", "", "for", "image_filename", "in", "os", ".", "listdir", "(", "folder", "+", "folderName", ")", ":", "\n", "                ", "img_file", "=", "Image", ".", "open", "(", "folder", "+", "folderName", "+", "'/'", "+", "\n", "image_filename", ")", "\n", "# img_file = cv2.imread(folder + folderName + '/' + image_filename)", "\n", "if", "img_file", "is", "not", "None", ":", "\n", "# img_file = skimage.transform.resize(img_file, (imageSize, imageSize, 3))", "\n", "# img_arr = np.asarray(img_file).reshape((-1, imageSize, imageSize, 3))", "\n", "                    ", "img_file", ".", "thumbnail", "(", "(", "imageSize", ",", "imageSize", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "img_arr", "=", "np", ".", "array", "(", "img_file", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", "imageSize", ",", "imageSize", ",", "3", ")", ")", "\n", "\n", "X", "[", "cnt", "]", "=", "img_arr", "\n", "y", "[", "cnt", "]", "=", "label", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "", "", "with", "open", "(", "\"train.pkl\"", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pkl", ".", "dump", "(", "(", "X", ",", "y", ")", ",", "f", ")", "\n", "\n", "", "return", "X", ",", "y", "\n", "\n", "\n", "", "def", "grayscale", "(", "data", ",", "dtype", "=", "'float32'", ")", ":", "\n", "    ", "\"\"\"Convert colored image data to greyscale.\"\"\"", "\n", "\n", "r", ",", "g", ",", "b", "=", "np", ".", "asarray", "(", ".3", ",", "dtype", "=", "dtype", ")", ",", "np", ".", "asarray", "(", "\n", ".59", ",", "dtype", "=", "dtype", ")", ",", "np", ".", "asarray", "(", ".11", ",", "dtype", "=", "dtype", ")", "\n", "rst", "=", "r", "*", "data", "[", ":", ",", ":", ",", ":", ",", "0", "]", "+", "g", "*", "data", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "b", "*", "data", "[", ":", ",", ":", ",", ":", ",", "2", "]", "\n", "rst", "=", "np", ".", "expand_dims", "(", "rst", ",", "axis", "=", "3", ")", "\n", "return", "rst", "\n", "\n", "\n", "", "def", "get_inference_model_mlp", "(", "target_dims", ",", "num_classes", ",", "num_layers", "=", "6", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Flatten", "(", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "model", ".", "add", "(", "Dense", "(", "1024", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "", "model", ".", "add", "(", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "get_inference_model_cnn", "(", "target_dims", ",", "num_classes", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "\n", "Conv2D", "(", "32", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1024", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "get_obfmodel_mlp", "(", "target_dims", ",", "num_neuron", "=", "512", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Flatten", "(", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "num_neuron", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "np", ".", "prod", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "model", ".", "add", "(", "Reshape", "(", "target_dims", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "def", "get_obfmodel_cnn", "(", "target_dims", ",", "num_neuron", ")", ":", "\n", "    ", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "\n", "Conv2D", "(", "32", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "input_shape", "=", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.25", ")", ")", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "num_neuron", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "np", ".", "prod", "(", "target_dims", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.4", ")", ")", "\n", "model", ".", "add", "(", "Reshape", "(", "target_dims", ")", ")", "\n", "return", "model", "\n", "\n", "\n", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--is-inf/--no-inf'", ",", "\n", "'-T'", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\n", "\"flag for whether training inference network, default set to False (trian ObfNet only)\"", "\n", ")", "\n", "@", "click", ".", "option", "(", "'--is-inf-cnn/--is-inf-mlp'", ",", "\n", "'-IC/-IM'", ",", "\n", "default", "=", "True", ",", "\n", "help", "=", "\"flag for training Convolutional Inference Network.\"", ")", "\n", "@", "click", ".", "option", "(", "'--is-obf-cnn/--is-obf-mlp'", ",", "\n", "'-OC/-OM'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"flag for training Convolutional Obfuscation Network.\"", ")", "\n", "@", "click", ".", "option", "(", "'--num-neuron'", ",", "\n", "'-n'", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'# of neurons at ObfNet.'", ")", "\n", "@", "click", ".", "option", "(", "'--inf-path'", ",", "default", "=", "\"\"", ",", "help", "=", "'path to inference model'", ")", "\n", "@", "click", ".", "option", "(", "'--save-image'", ",", "\n", "'-S'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'flag for saving images.'", ")", "\n", "@", "click", ".", "option", "(", "'--is-gray'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'flag for converting to greyscale images.'", ")", "\n", "@", "click", ".", "option", "(", "'--dataset-path'", ",", "'-D'", ",", "default", "=", "'dataset/asl/'", ",", "help", "=", "'path to dataset'", ")", "\n", "def", "main", "(", "is_inf", ",", "is_inf_cnn", ",", "is_obf_cnn", ",", "num_neuron", ",", "inf_path", ",", "save_image", ",", "\n", "is_gray", ",", "dataset_path", ")", ":", "\n", "\n", "    ", "os", ".", "makedirs", "(", "\"models/asl/\"", ",", "exist_ok", "=", "True", ")", "\n", "\n", "use_gpu", "=", "False", "\n", "batch_size", "=", "64", "\n", "imageSize", "=", "64", "\n", "target_dims", "=", "(", "imageSize", ",", "imageSize", ",", "3", ")", "\n", "num_classes", "=", "29", "\n", "max_epochs", "=", "100", "\n", "\n", "train_len", "=", "87000", "\n", "log_dir", "=", "\"logs/fit/\"", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "tensorboard_cb", "=", "TensorBoard", "(", "log_dir", "=", "log_dir", ",", "histogram_freq", "=", "1", ")", "\n", "\n", "if", "not", "dataset_path", ":", "\n", "# use pickled dataset to save time", "\n", "        ", "with", "open", "(", "\"dataset/asl/train.pkl\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "X_train", ",", "y_train", "=", "pkl", ".", "load", "(", "f", ")", "\n"]]}