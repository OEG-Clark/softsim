{"home.repos.pwc.inspect_result.danielgordon10_vince.None.constants.batch_norm_layer": [[13, 15], ["torch.nn.BatchNorm2d"], "function", ["None"], ["def", "batch_norm_layer", "(", "channels", ")", ":", "\n", "    ", "return", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.None.constants.nonlinearity": [[17, 19], ["torch.nn.ReLU"], "function", ["None"], ["", "def", "nonlinearity", "(", ")", ":", "\n", "    ", "return", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.None.arg_parser.solver_class": [[14, 18], ["getattr", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "solver_class", "(", "class_name", ")", ":", "\n", "    ", "if", "class_name", "not", "in", "solvers", ".", "__all__", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Invalid solver {}; choices: {}\"", ".", "format", "(", "class_name", ",", "solvers", ".", "__all__", ")", ")", "\n", "", "return", "getattr", "(", "solvers", ",", "class_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.None.arg_parser.dataset_class": [[20, 24], ["getattr", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "dataset_class", "(", "class_name", ")", ":", "\n", "    ", "if", "class_name", "not", "in", "datasets", ".", "__all__", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Invalid dataset {}; choices: {}\"", ".", "format", "(", "class_name", ",", "datasets", ".", "__all__", ")", ")", "\n", "", "return", "getattr", "(", "datasets", ",", "class_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.None.arg_parser.backbone_class": [[26, 30], ["getattr", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "backbone_class", "(", "class_name", ")", ":", "\n", "    ", "if", "class_name", "not", "in", "backbone_models", ".", "__all__", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Invalid backbone {}; choices: {}\"", ".", "format", "(", "class_name", ",", "backbone_models", ".", "__all__", ")", ")", "\n", "", "return", "getattr", "(", "backbone_models", ",", "class_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.None.arg_parser.transform_class": [[32, 36], ["getattr", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "transform_class", "(", "class_name", ")", ":", "\n", "    ", "if", "class_name", "not", "in", "transforms", ".", "__all__", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Invalid transform {}; choices: {}\"", ".", "format", "(", "class_name", ",", "transforms", ".", "__all__", ")", ")", "\n", "", "return", "getattr", "(", "transforms", ",", "class_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.None.arg_parser.parse_args": [[38, 242], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "numpy.unique", "gpu_id_map.tolist.tolist", "print", "parser.parse_args.saved_variable_prefix.split", "parser.parse_args.new_variable_prefix.split", "print", "print", "print", "os.path.join", "os.path.join", "int", "int", "multiprocessing.cpu_count", "parser.parse_args.pytorch_gpu_ids.split", "parser.parse_args.feature_extractor_gpu_ids.split", "str", "len", "len", "str", "sorted", "str", "vars().items", "vars"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Video Noise Contrastive Estimation training args\"", ")", "\n", "\n", "# Basic args", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--title\"", ",", "type", "=", "str", ",", "help", "=", "\"Title of method for paths and such.\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--description\"", ",", "type", "=", "str", ",", "help", "=", "\"Tag for saving and restoring the model.\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-frames\"", ",", "type", "=", "int", ",", "help", "=", "\"Number of frames used per video.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--test-first\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"True causes val to run before a training epoch. Useful for debugging val without needing to run through a whole epoch.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--saved-variable-prefix\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Used for restoring pytorch models. Prefix to not match for restored variables.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--new-variable-prefix\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Used for restoring pytorch models. Prefix to not match for new variables.\"", ",", "\n", ")", "\n", "\n", "# Path args", "\n", "parser", ".", "add_argument", "(", "\"--base-logdir\"", ",", "metavar", "=", "\"DIR\"", ",", "default", "=", "constants", ".", "BASE_LOG_DIR", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboard-dir\"", ",", "metavar", "=", "\"DIR\"", ",", "default", "=", "\"tensorboard\"", ",", "help", "=", "\"path to tensorboard directory\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint-dir\"", ",", "metavar", "=", "\"DIR\"", ",", "help", "=", "\"path to checkpoint directory\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--long-save-checkpoint-dir\"", ",", "metavar", "=", "\"DIR\"", ",", "help", "=", "\"path to long checkpoint directory\"", ")", "\n", "\n", "# Dataset args", "\n", "parser", ".", "add_argument", "(", "\"--data-path\"", ",", "metavar", "=", "\"DIR\"", ",", "help", "=", "\"path to dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "help", "=", "\"Dataset to use for training/test.\"", ",", "type", "=", "dataset_class", ")", "\n", "parser", ".", "add_argument", "(", "\"--transform\"", ",", "default", "=", "\"StandardVideoTransform\"", ",", "help", "=", "\"Transform to use\"", ",", "type", "=", "transform_class", ")", "\n", "\n", "# Architecture args", "\n", "parser", ".", "add_argument", "(", "\"--solver\"", ",", "help", "=", "\"Solver to use\"", ",", "type", "=", "solver_class", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--backbone\"", ",", "metavar", "=", "\"ARCH\"", ",", "help", "=", "\"backbone to use for feature extraction.\"", ",", "type", "=", "backbone_class", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--end-task-classifier-num-classes\"", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"num classes for the end task classifier to use.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--use-attention\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use attention for averageing the final layers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--jigsaw\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use PIRL Jigsaw method\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--freeze-feature-extractor\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Do not update the base features.\"", ")", "\n", "\n", "# Loss args", "\n", "parser", ".", "add_argument", "(", "\n", "\"--self-batch-comparison\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to compare items from a batch to themselves (vince) for positivies/negatives.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--inter-batch-comparison\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to compare items from a batch to vince network batch for positives/negatives.\"", ",", "\n", ")", "\n", "\n", "# VINCE arguments", "\n", "parser", ".", "add_argument", "(", "\"--vince-queue-size\"", ",", "default", "=", "256", ",", "type", "=", "int", ",", "metavar", "=", "\"N\"", ",", "help", "=", "\"num items in the vince queue.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--vince-embedding-size\"", ",", "default", "=", "64", ",", "type", "=", "int", ",", "metavar", "=", "\"N\"", ",", "help", "=", "\"dimensionality of the embedding space.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--vince-momentum\"", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "\"Momentum for vince update\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--vince-temperature\"", ",", "type", "=", "float", ",", "default", "=", "0.07", ",", "help", "=", "\"Temperature for NCE in vince\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--vince-self-temperature\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.03", ",", "\n", "help", "=", "\"Temperature for NCE in vince for nearest neighbor discrimination\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-multi-frame\"", ",", "dest", "=", "\"multi_frame\"", ",", "action", "=", "\"store_false\"", ",", "\n", "help", "=", "\"Use to disable taking different images from the same video.\"", ")", "\n", "\n", "# Training args", "\n", "parser", ".", "add_argument", "(", "\"--use-apex\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use Nvidia-Apex (automatic mixed precision).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "default", "=", "200", ",", "type", "=", "int", ",", "metavar", "=", "\"N\"", ",", "help", "=", "\"Number of epochs through the data.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr-decay-type\"", ",", "default", "=", "\"cos\"", ",", "choices", "=", "[", "\"cos\"", ",", "\"step\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr-step-schedule\"", ",", "\n", "default", "=", "[", "120", ",", "160", "]", ",", "\n", "nargs", "=", "\"*\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"learning rate schedule for step decay (when to drop lr by 10x)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pytorch-gpu-ids\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0\"", ",", "\n", "help", "=", "\"Comma separated GPU list to use for everything but the feature extractor.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--feature-extractor-gpu-ids\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"0\"", ",", "\n", "help", "=", "\"Comma separated GPU list to use for the feature extractor.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-j\"", ",", "\n", "\"--num-workers\"", ",", "\n", "default", "=", "multiprocessing", ".", "cpu_count", "(", ")", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of data loading workers\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"-b\"", ",", "\"--batch-size\"", ",", "default", "=", "256", ",", "type", "=", "int", ",", "metavar", "=", "\"N\"", ",", "help", "=", "\"mini-batch size (default: 256)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use-videos\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use videos in imagenet training loop\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-e\"", ",", "\"--iterations-per-epoch\"", ",", "default", "=", "10000", ",", "type", "=", "int", ",", "metavar", "=", "\"N\"", ",", "help", "=", "\"num iterations per pseudo-epoch.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--base-lr\"", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "help", "=", "\"base learning rate \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-width\"", ",", "default", "=", "224", ",", "type", "=", "int", ",", "help", "=", "\"Input image width\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-height\"", ",", "default", "=", "224", ",", "type", "=", "int", ",", "help", "=", "\"Input image height\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--use-imagenet-weights\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Initialize the model with pretrained imagenet weights\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-warmup\"", ",", "dest", "=", "\"use_warmup\"", ",", "action", "=", "\"store_false\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--log-frequency\"", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "\"Frequency of logging to tensorboard\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-log-frequency\"", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "help", "=", "\"Frequency of logging images to tensorboard\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no-save\"", ",", "dest", "=", "\"save\"", ",", "action", "=", "\"store_false\"", ",", "help", "=", "\"Do not save new weights. Useful for debugging.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-restore\"", ",", "dest", "=", "\"restore\"", ",", "action", "=", "\"store_false\"", ",", "help", "=", "\"Do not restore previous weights\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save-frequency\"", ",", "default", "=", "5000", ",", "type", "=", "int", ",", "help", "=", "\"Frequency (in iterations) of saving checkpoints\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--long-save-frequency\"", ",", "default", "=", "25", ",", "type", "=", "int", ",", "help", "=", "\"Frequency (in epochs) of saving non-deleted checkpoints.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--disable-dataloader\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Useful during debugging when just running the val.\"", "\n", ")", "\n", "\n", "# Imagenet Args", "\n", "parser", ".", "add_argument", "(", "\"--use-imagenet\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use imagenet in imagenet training loop\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--imagenet-data-path\"", ",", "type", "=", "str", ",", "help", "=", "\"Path to imagenet data.\"", ",", "default", "=", "\"/home/xkcd/datasets/imagenet/\"", "\n", ")", "\n", "\n", "# Video extraction args", "\n", "parser", ".", "add_argument", "(", "\n", "\"--video-sample-rate\"", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "\"Number of frames in a video between returned frames\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--max-video-length\"", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "\"Max number of frames for a video to have.\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--only-use-shots\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Limits the video caching to single shots within a video.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max-side-size\"", ",", "default", "=", "480", ",", "type", "=", "int", ",", "metavar", "=", "\"N\"", ",", "help", "=", "\"Size to resize the images' longest side.\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "input_size", "=", "(", "args", ".", "input_height", ",", "args", ".", "input_width", ")", "\n", "\n", "assert", "(", "not", "args", ".", "inter_batch_comparison", ")", "or", "(", "\n", "args", ".", "num_frames", "%", "2", "==", "0", "\n", ")", ",", "\"Must use an even number of frames when not using inter-batch comparison.\"", "\n", "assert", "(", "\n", "not", "args", ".", "self_batch_comparison", "\n", ")", "or", "args", ".", "inter_batch_comparison", ",", "\"self-batch-comparison is only used when inter-batch-comparison is on.\"", "\n", "\n", "assert", "args", ".", "multi_frame", "or", "args", ".", "num_frames", "==", "1", ",", "\"--no-multi-frame only really makes sense with num_frames == 1\"", "\n", "\n", "args", ".", "tensorboard_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "args", ".", "tensorboard_dir", ",", "constants", ".", "TIME_STR", "+", "\"_\"", "+", "args", ".", "description", "\n", ")", "\n", "\n", "if", "args", ".", "checkpoint_dir", "is", "None", ":", "\n", "        ", "args", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "\"checkpoints_\"", "+", "args", ".", "description", ")", "\n", "\n", "", "if", "args", ".", "long_save_checkpoint_dir", "is", "None", ":", "\n", "        ", "args", ".", "long_save_checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "\"long_checkpoints\"", ",", "constants", ".", "TIME_STR", "+", "\"_\"", "+", "args", ".", "description", "\n", ")", "\n", "\n", "# Reformat GPU IDs", "\n", "", "args", ".", "pytorch_gpu_ids", "=", "[", "int", "(", "gid", ")", "for", "gid", "in", "args", ".", "pytorch_gpu_ids", ".", "split", "(", "\",\"", ")", "]", "\n", "args", ".", "feature_extractor_gpu_ids", "=", "[", "int", "(", "gid", ")", "for", "gid", "in", "args", ".", "feature_extractor_gpu_ids", ".", "split", "(", "\",\"", ")", "]", "\n", "all_gpu_ids", ",", "gpu_id_map", "=", "np", ".", "unique", "(", "args", ".", "pytorch_gpu_ids", "+", "args", ".", "feature_extractor_gpu_ids", ",", "return_inverse", "=", "True", ")", "\n", "gpu_id_map", "=", "gpu_id_map", ".", "tolist", "(", ")", "\n", "all_gpu_ids", "=", "\",\"", ".", "join", "(", "str", "(", "gid", ")", "for", "gid", "in", "all_gpu_ids", ")", "\n", "print", "(", "\"Using GPUS\"", ",", "all_gpu_ids", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "all_gpu_ids", "\n", "args", ".", "pytorch_gpu_ids", "=", "gpu_id_map", "[", ":", "len", "(", "args", ".", "pytorch_gpu_ids", ")", "]", "\n", "args", ".", "feature_extractor_gpu_ids", "=", "gpu_id_map", "[", "len", "(", "args", ".", "pytorch_gpu_ids", ")", ":", "]", "\n", "\n", "args", ".", "saved_variable_prefix", "=", "args", ".", "saved_variable_prefix", ".", "split", "(", "\",\"", ")", "\n", "args", ".", "new_variable_prefix", "=", "args", ".", "new_variable_prefix", ".", "split", "(", "\",\"", ")", "\n", "\n", "print", "(", "\"args\"", ")", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "[", "str", "(", "key", ")", "+", "\": \"", "+", "str", "(", "val", ")", "for", "key", ",", "val", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", "]", ")", ")", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.None.solver_runner.main": [[12, 55], ["arg_parser.parse_args", "arg_parser.parse_args.solver", "dg_util.python_utils.tensorboard_logger.Logger", "dg_util.python_utils.tensorboard_logger.Logger", "solver.adjust_learning_rate", "solver.end", "os.path.join", "os.path.join", "print", "solver.reset_epoch", "solver.run_val", "solver.reset_epoch", "print", "tqdm.tqdm", "print", "solver.run_val", "traceback.print_exc", "print", "solver.save", "range", "solver.run_train_iteration", "min", "print"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.parse_args", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.adjust_learning_rate", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.end", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.reset_epoch", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.run_val", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.reset_epoch", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.run_val", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.save", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.run_train_iteration"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "arg_parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "train_logger", "=", "None", "\n", "val_logger", "=", "None", "\n", "", "else", ":", "\n", "        ", "train_logger", "=", "tensorboard_logger", ".", "Logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "tensorboard_dir", ",", "\"train\"", ")", ")", "\n", "val_logger", "=", "tensorboard_logger", ".", "Logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "tensorboard_dir", ",", "\"val\"", ")", ")", "\n", "\n", "", "solver", ":", "BaseSolver", "=", "args", ".", "solver", "(", "args", ",", "train_logger", ",", "val_logger", ")", "\n", "\n", "curr_iteration", "=", "1", "\n", "try", ":", "\n", "        ", "if", "args", ".", "test_first", ":", "\n", "            ", "print", "(", "\"Running initial Val\"", ")", "\n", "solver", ".", "reset_epoch", "(", ")", "\n", "solver", ".", "run_val", "(", ")", "\n", "\n", "", "starting_lr", "=", "solver", ".", "adjust_learning_rate", "(", ")", "\n", "while", "solver", ".", "epoch", "<", "args", ".", "epochs", ":", "\n", "            ", "solver", ".", "reset_epoch", "(", ")", "\n", "print", "(", "\"Running Train\"", ")", "\n", "for", "ii", "in", "tqdm", ".", "tqdm", "(", "range", "(", "solver", ".", "iterations_per_epoch", ")", ")", ":", "\n", "                ", "if", "args", ".", "use_warmup", ":", "\n", "                    ", "if", "curr_iteration", "<=", "500", ":", "\n", "                        ", "lr_scale", "=", "min", "(", "1.0", ",", "curr_iteration", "/", "500.0", ")", "\n", "new_lr", "=", "lr_scale", "*", "starting_lr", "\n", "for", "pg", "in", "solver", ".", "optimizer", ".", "param_groups", ":", "\n", "                            ", "pg", "[", "\"lr\"", "]", "=", "new_lr", "\n", "", "print", "(", "\"new lr\"", ",", "new_lr", ")", "\n", "curr_iteration", "+=", "1", "\n", "", "", "output", "=", "solver", ".", "run_train_iteration", "(", ")", "\n", "", "print", "(", "\"Running Val\"", ")", "\n", "solver", ".", "run_val", "(", ")", "\n", "solver", ".", "epoch", "+=", "1", "\n", "", "solver", ".", "end", "(", ")", "\n", "", "except", ":", "\n", "        ", "traceback", ".", "print_exc", "(", ")", "\n", "", "finally", ":", "\n", "        ", "if", "args", ".", "save", ":", "\n", "            ", "print", "(", "\"Saving models\"", ")", "\n", "solver", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.RandomCropOpenCV.__init__": [[53, 61], ["float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "scale", "=", "(", "0.8", ",", "1.0", ")", ",", "ratio", "=", "0.5", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "output_ratio", "=", "float", "(", "self", ".", "size", "[", "1", "]", ")", "/", "self", ".", "size", "[", "0", "]", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "ratio_range", "=", "1", "-", "self", ".", "ratio", "\n", "self", ".", "scale_range", "=", "self", ".", "scale", "[", "1", "]", "-", "self", ".", "scale", "[", "0", "]", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.RandomCropOpenCV.__call__": [[62, 102], ["int", "int", "numpy.random.randint", "numpy.random.randint", "cv2.resize", "min", "numpy.random.random", "numpy.random.random", "numpy.random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "im_height", ",", "im_width", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "# print('initial', im_width, im_height)", "\n", "rand_ratio", "=", "np", ".", "random", ".", "random", "(", ")", "*", "self", ".", "ratio_range", "+", "self", ".", "ratio", "\n", "rand_scale", "=", "np", ".", "random", ".", "random", "(", ")", "*", "self", ".", "scale_range", "+", "self", ".", "scale", "[", "0", "]", "\n", "# print('ratio', rand_ratio)", "\n", "# print('scale', rand_scale)", "\n", "\n", "crop_size", "=", "min", "(", "im_width", ",", "im_height", ")", "*", "rand_scale", "\n", "crop_width", "=", "crop_size", "\n", "crop_height", "=", "crop_size", "\n", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "crop_height", "=", "crop_width", "*", "rand_ratio", "\n", "", "else", ":", "\n", "            ", "crop_width", "=", "crop_height", "*", "rand_ratio", "\n", "\n", "# print('initial crop size', crop_width, crop_height)", "\n", "\n", "", "if", "crop_width", ">", "im_width", ":", "\n", "            ", "crop_height", "*=", "im_width", "/", "crop_width", "\n", "crop_width", "=", "im_width", "-", "1", "\n", "# print('w new crop size', crop_width, crop_height)", "\n", "", "if", "crop_height", ">", "im_height", ":", "\n", "            ", "crop_width", "*=", "im_height", "/", "crop_height", "\n", "crop_height", "=", "im_height", "-", "1", "\n", "# print('h new crop size', crop_width, crop_height)", "\n", "\n", "", "crop_width", "=", "int", "(", "crop_width", ")", "\n", "crop_height", "=", "int", "(", "crop_height", ")", "\n", "# print('end crop size', crop_width, crop_height)", "\n", "\n", "start_x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "im_width", "-", "crop_width", ")", "\n", "start_y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "im_height", "-", "crop_height", ")", "\n", "crop", "=", "img", "[", "start_y", ":", "start_y", "+", "crop_height", ",", "start_x", ":", "start_x", "+", "crop_width", "]", "\n", "# print('crop', crop.shape)", "\n", "crop", "=", "cv2", ".", "resize", "(", "crop", ",", "self", ".", "size", ")", "\n", "# print('result crop', crop.shape)", "\n", "# print('\\n')", "\n", "return", "crop", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.RandomGaussianBlur.__init__": [[105, 111], ["torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "sigma_range", "=", "(", "0.1", ",", "2.0", ")", ")", ":", "\n", "        ", "self", ".", "kernel_size", "=", "kernel_size", "\n", "if", "self", ".", "kernel_size", "%", "2", "==", "0", ":", "\n", "            ", "self", ".", "kernel_size", "+=", "1", "\n", "", "self", ".", "sigma_range", "=", "sigma_range", "\n", "self", ".", "kernel_range", "=", "(", "self", ".", "kernel_size", "-", "1", ")", "*", "0.5", "-", "torch", ".", "arange", "(", "self", ".", "kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.RandomGaussianBlur.__call__": [[112, 133], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "max", "kernel[].expand", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "kernel[].expand.sum", "len", "img.squeeze.squeeze.squeeze", "numpy.random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rand_sigma", "=", "np", ".", "random", ".", "random", "(", ")", "*", "(", "self", ".", "sigma_range", "[", "1", "]", "-", "self", ".", "sigma_range", "[", "0", "]", ")", "+", "self", ".", "sigma_range", "[", "0", "]", "\n", "kernel", "=", "torch", ".", "exp", "(", "-", "0.5", "/", "(", "rand_sigma", "**", "2", ")", "*", "(", "self", ".", "kernel_range", "**", "2", ")", ")", "\n", "kernel", "/=", "max", "(", "1e-10", ",", "kernel", ".", "sum", "(", ")", ")", "\n", "\n", "added_dim", "=", "False", "\n", "if", "len", "(", "img", ".", "shape", ")", "!=", "4", ":", "\n", "                ", "added_dim", "=", "True", "\n", "img", "=", "img", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "n_channels", "=", "img", ".", "shape", "[", "1", "]", "\n", "kernel", "=", "kernel", "[", "np", ".", "newaxis", ",", ":", "]", ".", "expand", "(", "n_channels", ",", "self", ".", "kernel_size", ")", "\n", "img", "=", "F", ".", "conv2d", "(", "\n", "img", ",", "kernel", "[", ":", ",", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", ",", "padding", "=", "(", "self", ".", "kernel_size", "//", "2", ",", "0", ")", ",", "groups", "=", "n_channels", "\n", ")", "\n", "img", "=", "F", ".", "conv2d", "(", "\n", "img", ",", "kernel", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", ",", "padding", "=", "(", "0", ",", "self", ".", "kernel_size", "//", "2", ")", ",", "groups", "=", "n_channels", "\n", ")", "\n", "if", "added_dim", ":", "\n", "                ", "img", "=", "img", ".", "squeeze", "(", "0", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.to_uint8": [[36, 50], ["dg_util.python_utils.pytorch_util.to_numpy", "numpy.clip().astype", "len", "np.pad.transpose", "np.pad.transpose", "numpy.pad", "numpy.pad", "numpy.clip"], "function", ["None"], ["def", "to_uint8", "(", "images", ",", "padding", "=", "0", ")", ":", "\n", "    ", "images", "=", "pt_util", ".", "to_numpy", "(", "images", ")", "\n", "if", "len", "(", "images", ".", "shape", ")", "==", "4", ":", "\n", "        ", "images", "=", "images", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "if", "padding", ">", "0", ":", "\n", "            ", "images", "=", "np", ".", "pad", "(", "images", ",", "(", "(", "0", ",", "0", ")", ",", "(", "padding", ",", "padding", ")", ",", "(", "padding", ",", "padding", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\"constant\"", ")", "\n", "", "", "else", ":", "\n", "        ", "images", "=", "images", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "padding", ">", "0", ":", "\n", "            ", "images", "=", "np", ".", "pad", "(", "images", ",", "(", "(", "padding", ",", "padding", ")", ",", "(", "padding", ",", "padding", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\"constant\"", ")", "\n", "", "", "images", "*=", "constants", ".", "IMAGENET_STD", "\n", "images", "+=", "constants", ".", "IMAGENET_MEAN", "\n", "images", "=", "np", ".", "clip", "(", "images", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.imagenet_label_to_class": [[135, 137], ["str", "int"], "function", ["None"], ["", "", "", "def", "imagenet_label_to_class", "(", "ind", ")", ":", "\n", "    ", "return", "IMAGENET_CLASS_NAMES", "[", "str", "(", "int", "(", "ind", ")", ")", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.sun_scene_label_to_class": [[139, 141], ["int"], "function", ["None"], ["", "def", "sun_scene_label_to_class", "(", "ind", ")", ":", "\n", "    ", "return", "SUN_SCENE_CLASS_NAMES", "[", "int", "(", "ind", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.kinetics_400_label_to_class": [[143, 145], ["int"], "function", ["None"], ["", "def", "kinetics_400_label_to_class", "(", "ind", ")", ":", "\n", "    ", "return", "KINETICS_400_CLASS_NAMES", "[", "int", "(", "ind", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.yt8m_label_to_class": [[147, 149], ["int"], "function", ["None"], ["", "def", "yt8m_label_to_class", "(", "ind", ")", ":", "\n", "    ", "return", "YT8M_CLASS_NAMES", "[", "int", "(", "ind", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.__init__": [[26, 33], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "data_subset", "=", "\"train\"", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "size", "=", "(", "size", ",", "size", ")", "\n", "", "self", ".", "size", "=", "size", "\n", "self", ".", "data_subset", "=", "data_subset", "\n", "self", ".", "_train_transform", "=", "None", "\n", "self", ".", "_val_transform", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.make_train_transform": [[34, 36], ["None"], "methods", ["None"], ["", "def", "make_train_transform", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.make_val_transform": [[37, 39], ["None"], "methods", ["None"], ["", "def", "make_val_transform", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.train_transform": [[40, 45], ["torchvision.BaseTransform.make_train_transform"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.MoCoV2ImagenetTransform.make_train_transform"], ["", "@", "property", "\n", "def", "train_transform", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_train_transform", "is", "None", ":", "\n", "            ", "self", ".", "_train_transform", "=", "self", ".", "make_train_transform", "(", ")", "\n", "", "return", "self", ".", "_train_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.val_transform": [[46, 51], ["torchvision.BaseTransform.make_val_transform"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BasicImagenetTransform.make_val_transform"], ["", "@", "property", "\n", "def", "val_transform", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_val_transform", "is", "None", ":", "\n", "            ", "self", ".", "_val_transform", "=", "self", ".", "make_val_transform", "(", ")", "\n", "", "return", "self", ".", "_val_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.__call__": [[52, 60], ["torchvision.BaseTransform.train_transform", "torchvision.BaseTransform.val_transform", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.train_transform", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.val_transform"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "data_subset", "==", "\"train\"", ":", "\n", "            ", "outputs", "=", "self", ".", "train_transform", "(", "inputs", ")", "\n", "", "elif", "self", ".", "data_subset", "==", "\"val\"", ":", "\n", "            ", "outputs", "=", "self", ".", "val_transform", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"No transform for data_subset %s\"", "%", "self", ".", "data_subset", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BasicImagenetTransform.make_train_transform": [[63, 74], ["torchvision.Compose", "dg_util.python_utils.pytorch_util.ToPILImage", "torchvision.RandomResizedCrop", "torchvision.ColorJitter", "torchvision.RandomGrayscale", "torchvision.RandomHorizontalFlip", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "make_train_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "\n", "[", "\n", "pt_util", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "size", ",", "scale", "=", "(", "0.2", ",", "1", ")", ",", "ratio", "=", "(", "0.7", ",", "1.4", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.2", ")", ",", "\n", "# transforms.RandomApply([transforms.ColorJitter(0.4, 0.4, 0.4, 0.4)], p=0.8),", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BasicImagenetTransform.make_val_transform": [[77, 85], ["torchvision.Compose", "dg_util.python_utils.pytorch_util.ToPILImage", "torchvision.Resize", "torchvision.CenterCrop", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize", "int", "int"], "methods", ["None"], ["", "def", "make_val_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "\n", "[", "\n", "pt_util", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "int", "(", "self", ".", "size", "[", "0", "]", "/", "0.875", ")", ",", "int", "(", "self", ".", "size", "[", "1", "]", "/", "0.875", ")", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "self", ".", "size", ")", ",", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.StandardVideoTransform.make_train_transform": [[90, 100], ["torchvision.Compose", "dg_util.python_utils.pytorch_util.ToPILImage", "torchvision.RandomResizedCrop", "torchvision.ColorJitter", "torchvision.RandomGrayscale", "torchvision.RandomHorizontalFlip", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "make_train_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "\n", "[", "\n", "pt_util", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "size", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.2", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.SimCLRTransform.make_train_transform": [[105, 116], ["torchvision.Compose", "dg_util.python_utils.pytorch_util.ToPILImage", "torchvision.RandomResizedCrop", "torchvision.ColorJitter", "torchvision.RandomGrayscale", "torchvision.RandomHorizontalFlip", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize", "torchvision.RandomApply", "utils.util_functions.RandomGaussianBlur"], "methods", ["None"], ["    ", "def", "make_train_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "\n", "[", "\n", "pt_util", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "size", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.2", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "util_functions", ".", "RandomGaussianBlur", "(", "self", ".", "size", "[", "0", "]", "//", "10", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.JigsawTransform.make_train_transform": [[121, 132], ["torchvision.Compose", "dg_util.python_utils.pytorch_util.ToPILImage", "torchvision.RandomResizedCrop", "torchvision.ColorJitter", "torchvision.RandomGrayscale", "torchvision.RandomHorizontalFlip", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize", "torchvision.RandomApply", "utils.util_functions.RandomGaussianBlur"], "methods", ["None"], ["    ", "def", "make_train_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "\n", "[", "\n", "pt_util", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "size", ",", "scale", "=", "(", "0.7", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.8", ",", "0.8", ",", "0.8", ",", "0.2", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "util_functions", ".", "RandomGaussianBlur", "(", "self", ".", "size", "[", "0", "]", "//", "10", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.SunSceneTransform.make_train_transform": [[137, 147], ["torchvision.Compose", "dg_util.python_utils.pytorch_util.ToPILImage", "torchvision.RandomResizedCrop", "torchvision.ColorJitter", "torchvision.RandomGrayscale", "torchvision.RandomHorizontalFlip", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "make_train_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "\n", "[", "\n", "pt_util", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "size", ",", "scale", "=", "(", "0.7", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.2", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.Kinetics400Transform.make_train_transform": [[152, 162], ["torchvision.Compose", "dg_util.python_utils.pytorch_util.ToPILImage", "torchvision.RandomResizedCrop", "torchvision.ColorJitter", "torchvision.RandomGrayscale", "torchvision.RandomHorizontalFlip", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "make_train_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "\n", "[", "\n", "pt_util", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "size", ",", "scale", "=", "(", "0.5", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.2", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.GOT10KTransform.make_train_transform": [[167, 175], ["torchvision.Compose", "dg_util.python_utils.pytorch_util.ToPILImage", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "make_train_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "\n", "[", "\n", "pt_util", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "size", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.RepeatedImagenetTransform.__init__": [[180, 188], ["isinstance", "torchvision.BaseTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "data_subset", "=", "\"train\"", ",", "repeats", "=", "1", ",", "stack", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "size", "=", "(", "size", ",", "size", ")", "\n", "", "self", ".", "size", "=", "size", "\n", "self", ".", "repeats", "=", "repeats", "\n", "self", ".", "data_subset", "=", "data_subset", "\n", "self", ".", "stack", "=", "stack", "\n", "super", "(", "RepeatedImagenetTransform", ",", "self", ")", ".", "__init__", "(", "size", ",", "data_subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.RepeatedImagenetTransform.__call__": [[189, 205], ["range", "range", "torch.stack", "torchvision.RepeatedImagenetTransform.val_transform", "torch.stack.append", "torch.stack", "torch.stack.append", "torchvision.RepeatedImagenetTransform.train_transform", "torchvision.RepeatedImagenetTransform.train_transform"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.val_transform", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.train_transform", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.BaseTransform.train_transform"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "self", ".", "data_subset", "==", "\"val\"", ":", "\n", "# For val have the first one be val transformed and rest be train transformed.", "\n", "            ", "outputs", "=", "[", "self", ".", "val_transform", "(", "image", ")", "]", "\n", "for", "rr", "in", "range", "(", "self", ".", "repeats", "-", "1", ")", ":", "\n", "                ", "outputs", ".", "append", "(", "self", ".", "train_transform", "(", "image", ")", ")", "\n", "", "if", "self", ".", "stack", ":", "\n", "                ", "outputs", "=", "torch", ".", "stack", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "", "return", "outputs", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "[", "]", "\n", "for", "rr", "in", "range", "(", "self", ".", "repeats", ")", ":", "\n", "                ", "outputs", ".", "append", "(", "self", ".", "train_transform", "(", "image", ")", ")", "\n", "", "", "if", "self", ".", "stack", ":", "\n", "            ", "outputs", "=", "torch", ".", "stack", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.MoCoV1ImagenetTransform.make_train_transform": [[208, 219], ["torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.ColorJitter", "torchvision.RandomGrayscale", "torchvision.RandomHorizontalFlip", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "make_train_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "size", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.2", ")", ",", "\n", "# transforms.RandomResizedCrop(self.size, scale=(0.2, 1.0)),", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "# transforms.ColorJitter(0.4, 0.4, 0.4, 0.4),", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.transforms.MoCoV2ImagenetTransform.make_train_transform": [[224, 234], ["torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomGrayscale", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize", "torchvision.RandomApply", "utils.util_functions.RandomGaussianBlur"], "methods", ["None"], ["    ", "def", "make_train_transform", "(", "self", ")", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "size", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "util_functions", ".", "RandomGaussianBlur", "(", "self", ".", "size", "[", "0", "]", "//", "10", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.__init__": [[5, 17], ["torch.nn.functional.normalize", "torch.randn", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "maxsize", ",", "feat_size", ",", "device", "=", "None", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "        ", "self", ".", "maxsize", "=", "maxsize", "\n", "self", ".", "feat_size", "=", "feat_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "vector_queue", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "\n", "torch", ".", "randn", "(", "(", "maxsize", ",", "feat_size", ")", ",", "device", "=", "device", ",", "requires_grad", "=", "False", ",", "dtype", "=", "dtype", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "self", ".", "image_queue", "=", "[", "None", "for", "_", "in", "range", "(", "maxsize", ")", "]", "\n", "self", ".", "data_source_queue", "=", "[", "None", "for", "_", "in", "range", "(", "maxsize", ")", "]", "\n", "self", ".", "current_tail", "=", "0", "\n", "self", ".", "full", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.__len__": [[18, 20], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_queue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.clear": [[21, 30], ["torch.nn.functional.normalize", "torch.randn", "range", "range"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "vector_queue", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "\n", "torch", ".", "randn", "(", "(", "self", ".", "maxsize", ",", "self", ".", "feat_size", ")", ",", "device", "=", "self", ".", "device", ",", "requires_grad", "=", "False", ",", "dtype", "=", "self", ".", "dtype", ")", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "self", ".", "image_queue", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "maxsize", ")", "]", "\n", "self", ".", "data_source_queue", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "maxsize", ")", "]", "\n", "self", ".", "current_tail", "=", "0", "\n", "self", ".", "full", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.enqueue": [[31, 50], ["len", "len", "torch.no_grad", "storage_queue.StorageQueue.enqueue", "storage_queue.StorageQueue.vector_queue[].copy_", "storage_queue.StorageQueue.vector_queue[].copy_"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.enqueue"], ["", "def", "enqueue", "(", "self", ",", "items", ",", "item_images", ",", "data_source", ")", ":", "\n", "        ", "assert", "len", "(", "items", ")", "==", "len", "(", "item_images", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "num_items", "=", "items", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "current_tail", "+", "num_items", ">", "self", ".", "maxsize", ":", "\n", "                ", "num_start", "=", "self", ".", "maxsize", "-", "self", ".", "current_tail", "\n", "if", "num_start", ">", "0", ":", "\n", "                    ", "self", ".", "vector_queue", "[", "self", ".", "current_tail", ":", "]", ".", "copy_", "(", "items", "[", ":", "num_start", "]", ")", "\n", "self", ".", "image_queue", "[", "self", ".", "current_tail", ":", "]", "=", "item_images", "[", ":", "num_start", "]", "\n", "self", ".", "data_source_queue", "[", "self", ".", "current_tail", ":", "]", "=", "[", "data_source", "]", "*", "num_start", "\n", "", "self", ".", "current_tail", "=", "0", "\n", "self", ".", "full", "=", "True", "\n", "self", ".", "enqueue", "(", "items", "[", "num_start", ":", "]", ",", "item_images", "[", "num_start", ":", "]", ",", "data_source", ")", "\n", "", "else", ":", "\n", "# Shift the buffer", "\n", "                ", "self", ".", "vector_queue", "[", "self", ".", "current_tail", ":", "self", ".", "current_tail", "+", "num_items", "]", ".", "copy_", "(", "items", ")", "\n", "self", ".", "image_queue", "[", "self", ".", "current_tail", ":", "self", ".", "current_tail", "+", "num_items", "]", "=", "item_images", "\n", "self", ".", "data_source_queue", "[", "self", ".", "current_tail", ":", "self", ".", "current_tail", "+", "num_items", "]", "=", "[", "data_source", "]", "*", "num_items", "\n", "self", ".", "current_tail", "+=", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.dequeue": [[51, 56], ["storage_queue.StorageQueue.vector_queue.detach"], "methods", ["None"], ["", "", "", "def", "dequeue", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"queue_vectors\"", ":", "self", ".", "vector_queue", ".", "detach", "(", ")", ",", "\n", "\"queue_images\"", ":", "self", ".", "image_queue", ",", "\n", "\"queue_data_sources\"", ":", "self", ".", "data_source_queue", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.utils.loss_util.similarity_cross_entropy": [[7, 62], ["dg_util.python_utils.pytorch_util.split_dim", "dg_util.python_utils.pytorch_util.split_dim", "torch.eye().repeat_interleave().repeat_interleave.sum", "torch.exp().sum", "torch.exp", "torch.exp", "dict", "torch.eye().repeat_interleave().repeat_interleave", "torch.max", "torch.eye().repeat_interleave().repeat_interleave.float", "scaled_similarities[].view", "scaled_similarities[].view", "torch.log", "similarity_log_softmax.detach", "dists[].mean", "softmax_weights[].mean", "dists.mean", "torch.exp.mean", "mask.sum.min", "mask.sum.max", "torch.exp", "torch.eye().repeat_interleave", "torch.eye"], "function", ["None"], ["def", "similarity_cross_entropy", "(", "similarities", ",", "temperature", ",", "n_feat", ",", "n_rows1", ",", "mask", "=", "None", ",", "n_positives_per_row", "=", "None", ")", ":", "\n", "    ", "global", "USE_FLOAT", "\n", "similarities", "=", "similarities", "/", "temperature", "\n", "if", "mask", "is", "None", ":", "\n", "        ", "assert", "n_positives_per_row", "is", "not", "None", "\n", "# Default identity mask", "\n", "mask", "=", "(", "\n", "torch", ".", "eye", "(", "n_feat", ",", "device", "=", "similarities", ".", "device", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", ".", "repeat_interleave", "(", "n_positives_per_row", ",", "1", ")", "\n", ".", "repeat_interleave", "(", "n_rows1", ",", "0", ")", "\n", ")", "\n", "\n", "", "assert", "mask", ".", "shape", "==", "similarities", ".", "shape", "\n", "similarities", "=", "pt_util", ".", "split_dim", "(", "similarities", ",", "0", ",", "n_feat", ",", "n_rows1", ")", "\n", "mask", "=", "pt_util", ".", "split_dim", "(", "mask", ",", "0", ",", "n_feat", ",", "n_rows1", ")", "\n", "\n", "# log similarity over (self + all other entries as denom)", "\n", "row_maxes", "=", "torch", ".", "max", "(", "similarities", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "scaled_similarities", "=", "similarities", "-", "row_maxes", "\n", "\n", "mask_row_sum", "=", "mask", ".", "sum", "(", "-", "1", ")", "\n", "if", "USE_FLOAT", "is", "None", ":", "\n", "        ", "USE_FLOAT", "=", "mask_row_sum", ".", "min", "(", ")", "!=", "mask_row_sum", ".", "max", "(", ")", "\n", "", "if", "USE_FLOAT", ":", "\n", "        ", "float_mask", "=", "mask", ".", "float", "(", ")", "\n", "inv_float_mask", "=", "1", "-", "float_mask", "\n", "neg_similarities", "=", "scaled_similarities", "*", "inv_float_mask", "+", "-", "2", "**", "20", "*", "float_mask", "\n", "pos_similarities", "=", "scaled_similarities", "*", "float_mask", "+", "-", "2", "**", "20", "*", "inv_float_mask", "\n", "", "else", ":", "\n", "# Same number of items per row", "\n", "        ", "neg_similarities", "=", "scaled_similarities", "[", "~", "mask", "]", ".", "view", "(", "n_feat", ",", "n_rows1", ",", "-", "1", ")", "\n", "pos_similarities", "=", "scaled_similarities", "[", "mask", "]", ".", "view", "(", "n_feat", ",", "n_rows1", ",", "mask", ".", "shape", "[", "2", "]", "-", "neg_similarities", ".", "shape", "[", "2", "]", ")", "\n", "\n", "", "neg_similarities_exp", "=", "torch", ".", "exp", "(", "neg_similarities", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "pos_similarities_exp", "=", "torch", ".", "exp", "(", "pos_similarities", ")", "\n", "similarity_log_softmax", "=", "pos_similarities", "-", "torch", ".", "log", "(", "pos_similarities_exp", "+", "neg_similarities_exp", ")", "\n", "dists", "=", "-", "similarity_log_softmax", "\n", "softmax_weights", "=", "torch", ".", "exp", "(", "similarity_log_softmax", ".", "detach", "(", ")", ")", "\n", "\n", "if", "USE_FLOAT", ":", "\n", "        ", "dists_mean", "=", "dists", "[", "mask", "]", ".", "mean", "(", ")", "\n", "softmax_weight", "=", "softmax_weights", "[", "mask", "]", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "dists_mean", "=", "dists", ".", "mean", "(", ")", "\n", "softmax_weight", "=", "softmax_weights", ".", "mean", "(", ")", "\n", "\n", "", "return", "dict", "(", "\n", "# similarity_log_softmax=similarity_log_softmax.mean(),", "\n", "dists", "=", "dists", ",", "\n", "dist", "=", "dists_mean", ",", "\n", "# similarity_raw_scores=similarity_raw_scores.mean(),", "\n", "# similarities=similarities.mean(),", "\n", "softmax_weights", "=", "softmax_weights", ",", "\n", "softmax_weight", "=", "softmax_weight", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.PairDataset.__init__": [[17, 28], ["datasets.base_dataset.BaseDataset.__init__", "numpy.random.permutation", "numpy.sum", "getattr", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "seqs", ",", "data_subset", "=", "\"train\"", ",", "pair_transform", "=", "None", ",", "transforms", "=", "None", ",", "pairs_per_seq", "=", "25", ")", ":", "\n", "        ", "super", "(", "PairDataset", ",", "self", ")", ".", "__init__", "(", "args", ",", "data_subset", ")", "\n", "self", ".", "seqs", "=", "seqs", "\n", "self", ".", "pair_transform", "=", "pair_transform", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "pairs_per_seq", "=", "pairs_per_seq", "\n", "self", ".", "indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "seqs", ")", ")", "\n", "self", ".", "length", "=", "np", ".", "sum", "(", "self", ".", "indices", ")", "\n", "self", ".", "return_meta", "=", "getattr", "(", "seqs", ",", "\"return_meta\"", ",", "False", ")", "\n", "self", ".", "seq_sizes", "=", "{", "}", "\n", "self", ".", "invalid_seqs", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.PairDataset.__getitem__": [[29, 77], ["time.time", "pair_dataset.PairDataset._filter", "pair_dataset.PairDataset._sample_pair", "meta.get", "len", "numpy.random.choice", "pair_dataset.PairDataset.__getitem__", "cv2.imread", "cv2.imread", "pair_dataset.PairDataset.pair_transform", "isinstance", "len", "pair_dataset.PairDataset.transforms", "pair_dataset.PairDataset.transforms", "len", "numpy.fliplr().copy", "numpy.fliplr().copy", "dg_util.python_utils.pytorch_util.from_numpy", "random.random", "random.random", "numpy.fliplr().copy", "numpy.fliplr", "numpy.fliplr", "numpy.fliplr"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.PairDataset._filter", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.PairDataset._sample_pair", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.SunSceneDataset.__getitem__", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.fliplr", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.fliplr", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.fliplr"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "index", "=", "self", ".", "indices", "[", "index", "%", "len", "(", "self", ".", "indices", ")", "]", "\n", "\n", "# get filename lists and annotations", "\n", "if", "self", ".", "return_meta", ":", "\n", "            ", "img_files", ",", "anno", ",", "meta", "=", "self", ".", "seqs", "[", "index", "]", "\n", "vis_ratios", "=", "meta", ".", "get", "(", "\"cover\"", ",", "None", ")", "\n", "", "else", ":", "\n", "            ", "img_files", ",", "anno", "=", "self", ".", "seqs", "[", "index", "]", "[", ":", "2", "]", "\n", "vis_ratios", "=", "None", "\n", "# filter out noisy frames", "\n", "\n", "", "val_indices", "=", "self", ".", "_filter", "(", "img_files", "[", "0", "]", ",", "index", ",", "anno", ",", "vis_ratios", ")", "\n", "if", "len", "(", "val_indices", ")", "<", "2", ":", "\n", "            ", "index", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ")", ")", "\n", "return", "self", ".", "__getitem__", "(", "index", ")", "\n", "\n", "# sample a frame pair", "\n", "", "rand_z", ",", "rand_x", "=", "self", ".", "_sample_pair", "(", "val_indices", ")", "\n", "\n", "box_z", "=", "anno", "[", "rand_z", "]", "\n", "box_x", "=", "anno", "[", "rand_x", "]", "\n", "\n", "z", "=", "cv2", ".", "imread", "(", "img_files", "[", "rand_z", "]", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "x", "=", "cv2", ".", "imread", "(", "img_files", "[", "rand_x", "]", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "# z = cv2.cvtColor(z, cv2.COLOR_BGR2RGB)", "\n", "# x = cv2.cvtColor(x, cv2.COLOR_BGR2RGB)", "\n", "item", "=", "(", "z", ",", "x", ",", "box_z", ",", "box_x", ")", "\n", "if", "self", ".", "pair_transform", "is", "not", "None", ":", "\n", "            ", "exemplar_img", ",", "track_img", "=", "self", ".", "pair_transform", "(", "item", ")", "\n", "label", "=", "None", "\n", "if", "isinstance", "(", "track_img", ",", "tuple", ")", ":", "\n", "                ", "track_img", ",", "label", "=", "track_img", "\n", "", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "data_subset", "==", "'train'", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                    ", "exemplar_img", "=", "np", ".", "fliplr", "(", "exemplar_img", ")", ".", "copy", "(", ")", "# Need to copy to make contiguous", "\n", "", "if", "self", ".", "data_subset", "==", "'train'", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                    ", "track_img", "=", "np", ".", "fliplr", "(", "track_img", ")", ".", "copy", "(", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "                        ", "label", "=", "np", ".", "fliplr", "(", "label", ")", ".", "copy", "(", ")", "\n", "", "", "exemplar_img", "=", "self", ".", "transforms", "(", "exemplar_img", ")", "\n", "track_img", "=", "self", ".", "transforms", "(", "track_img", ")", "\n", "", "if", "label", "is", "not", "None", ":", "\n", "                ", "item", "=", "(", "exemplar_img", ",", "track_img", ",", "pt_util", ".", "from_numpy", "(", "label", "[", "np", ".", "newaxis", ",", "...", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "item", "=", "(", "exemplar_img", ",", "track_img", ")", "\n", "", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.PairDataset.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "*", "self", ".", "pairs_per_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.PairDataset._sample_pair": [[81, 100], ["len", "range", "numpy.sort", "numpy.random.choice", "numpy.random.choice"], "methods", ["None"], ["", "def", "_sample_pair", "(", "self", ",", "indices", ")", ":", "\n", "        ", "n", "=", "len", "(", "indices", ")", "\n", "assert", "n", ">", "0", "\n", "\n", "if", "n", "==", "1", ":", "\n", "            ", "return", "indices", "[", "0", "]", ",", "indices", "[", "0", "]", "\n", "", "elif", "n", "==", "2", ":", "\n", "            ", "return", "indices", "[", "0", "]", ",", "indices", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "                ", "rand_z", ",", "rand_x", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "choice", "(", "indices", ",", "2", ",", "replace", "=", "False", ")", ")", "\n", "if", "rand_x", "-", "rand_z", "<", "100", ":", "\n", "# if 30 < abs(rand_x - rand_z) < 500:", "\n", "                    ", "break", "\n", "", "", "else", ":", "\n", "                ", "rand_z", "=", "np", ".", "random", ".", "choice", "(", "indices", ")", "\n", "rand_x", "=", "rand_z", "\n", "\n", "", "return", "rand_z", ",", "rand_x", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.PairDataset._filter": [[101, 127], ["numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.logical_and.reduce", "numpy.ones_like", "numpy.where", "len", "numpy.maximum", "numpy.maximum", "max", "cv2.imread", "vis_ratios.max"], "methods", ["None"], ["", "", "def", "_filter", "(", "self", ",", "img0", ",", "key", ",", "anno", ",", "vis_ratios", "=", "None", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "invalid_seqs", ":", "\n", "            ", "return", "self", ".", "invalid_seqs", "[", "key", "]", "\n", "", "if", "key", "not", "in", "self", ".", "seq_sizes", ":", "\n", "            ", "self", ".", "seq_sizes", "[", "key", "]", "=", "cv2", ".", "imread", "(", "img0", ")", ".", "shape", "[", ":", "2", "]", "\n", "", "size", "=", "self", ".", "seq_sizes", "[", "key", "]", "\n", "areas", "=", "anno", "[", ":", ",", "2", "]", "*", "anno", "[", ":", ",", "3", "]", "\n", "\n", "# acceptance conditions", "\n", "c1", "=", "areas", ">=", "20", "\n", "c2", "=", "np", ".", "all", "(", "anno", "[", ":", ",", "2", ":", "]", ">=", "20", ",", "axis", "=", "1", ")", "\n", "c3", "=", "np", ".", "all", "(", "anno", "[", ":", ",", "2", ":", "]", "<=", "500", ",", "axis", "=", "1", ")", "\n", "c4", "=", "np", ".", "all", "(", "(", "anno", "[", ":", ",", "2", ":", "]", "/", "size", ")", ">=", "0.01", ",", "axis", "=", "1", ")", "\n", "c5", "=", "np", ".", "all", "(", "(", "anno", "[", ":", ",", "2", ":", "]", "/", "size", ")", "<=", "0.5", ",", "axis", "=", "1", ")", "\n", "c6", "=", "(", "anno", "[", ":", ",", "2", "]", "/", "np", ".", "maximum", "(", "1", ",", "anno", "[", ":", ",", "3", "]", ")", ")", ">=", "0.25", "\n", "c7", "=", "(", "anno", "[", ":", ",", "2", "]", "/", "np", ".", "maximum", "(", "1", ",", "anno", "[", ":", ",", "3", "]", ")", ")", "<=", "4", "\n", "if", "vis_ratios", "is", "not", "None", ":", "\n", "            ", "c8", "=", "vis_ratios", ">", "max", "(", "1", ",", "vis_ratios", ".", "max", "(", ")", "*", "0.3", ")", "\n", "", "else", ":", "\n", "            ", "c8", "=", "np", ".", "ones_like", "(", "c1", ")", "\n", "\n", "", "mask", "=", "np", ".", "logical_and", ".", "reduce", "(", "(", "c1", ",", "c2", ",", "c3", ",", "c4", ",", "c5", ",", "c6", ",", "c7", ",", "c8", ")", ")", "\n", "val_indices", "=", "np", ".", "where", "(", "mask", ")", "[", "0", "]", "\n", "if", "len", "(", "val_indices", ")", "<", "2", ":", "\n", "            ", "self", ".", "invalid_seqs", "[", "key", "]", "=", "val_indices", "\n", "", "return", "val_indices", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.fliplr": [[11, 14], ["numpy.fliplr().copy", "numpy.fliplr"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.pair_dataset.fliplr"], ["def", "fliplr", "(", "x", ")", ":", "\n", "# Copy because needs to be contiguous with positive stride", "\n", "    ", "return", "np", ".", "fliplr", "(", "x", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.ops.init_weights": [[9, 22], ["model.modules", "isinstance", "torch.init.xavier_uniform_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.xavier_uniform_", "torch.init.constant_"], "function", ["None"], ["def", "init_weights", "(", "model", ",", "gain", "=", "1", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.ops.read_image": [[24, 37], ["cv2.imread", "print", "numpy.asarray", "PIL.Image.open", "cv2.cvtColor", "open"], "function", ["None"], ["", "", "", "", "def", "read_image", "(", "img_file", ",", "cvt_code", "=", "cv2", ".", "COLOR_BGR2RGB", ")", ":", "\n", "    ", "img", "=", "cv2", ".", "imread", "(", "img_file", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "if", "img", "is", "None", ":", "\n", "        ", "print", "(", "\"trouble with\"", ",", "img_file", ")", "\n", "img", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "open", "(", "img_file", ",", "\"rb\"", ")", ")", ")", "\n", "return", "img", "\n", "\n", "", "if", "cvt_code", "is", "not", "None", ":", "\n", "        ", "if", "cvt_code", "==", "cv2", ".", "COLOR_BGR2RGB", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cvt_code", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.ops.show_image": [[39, 106], ["cv2.cvtColor", "max", "cv2.resize", "numpy.array", "numpy.clip", "numpy.clip", "numpy.array", "enumerate", "cv2.imshow", "cv2.waitKey", "max", "int", "int", "numpy.expand_dims", "numpy.array", "numpy.expand_dims", "cv2.rectangle", "numpy.array", "color.tolist", "len"], "function", ["None"], ["", "def", "show_image", "(", "\n", "img", ",", "\n", "boxes", "=", "None", ",", "\n", "box_fmt", "=", "\"ltwh\"", ",", "\n", "colors", "=", "None", ",", "\n", "thickness", "=", "3", ",", "\n", "fig_n", "=", "1", ",", "\n", "delay", "=", "1", ",", "\n", "visualize", "=", "True", ",", "\n", "cvt_code", "=", "cv2", ".", "COLOR_RGB2BGR", ",", "\n", ")", ":", "\n", "    ", "if", "cvt_code", "is", "not", "None", ":", "\n", "        ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cvt_code", ")", "\n", "\n", "# resize img if necessary", "\n", "", "max_size", "=", "960", "\n", "if", "max", "(", "img", ".", "shape", "[", ":", "2", "]", ")", ">", "max_size", ":", "\n", "        ", "scale", "=", "max_size", "/", "max", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "out_size", "=", "(", "int", "(", "img", ".", "shape", "[", "1", "]", "*", "scale", ")", ",", "int", "(", "img", ".", "shape", "[", "0", "]", "*", "scale", ")", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "out_size", ")", "\n", "if", "boxes", "is", "not", "None", ":", "\n", "            ", "boxes", "=", "np", ".", "array", "(", "boxes", ",", "dtype", "=", "np", ".", "float32", ")", "*", "scale", "\n", "\n", "", "", "if", "boxes", "is", "not", "None", ":", "\n", "        ", "assert", "box_fmt", "in", "[", "\"ltwh\"", ",", "\"ltrb\"", "]", "\n", "boxes", "=", "np", ".", "array", "(", "boxes", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "boxes", ".", "ndim", "==", "1", ":", "\n", "            ", "boxes", "=", "np", ".", "expand_dims", "(", "boxes", ",", "axis", "=", "0", ")", "\n", "", "if", "box_fmt", "==", "\"ltrb\"", ":", "\n", "            ", "boxes", "[", ":", ",", "2", ":", "]", "-=", "boxes", "[", ":", ",", ":", "2", "]", "\n", "\n", "# clip bounding boxes", "\n", "", "bound", "=", "np", ".", "array", "(", "img", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ")", "[", "None", ",", ":", "]", "\n", "boxes", "[", ":", ",", ":", "2", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", ":", "2", "]", ",", "0", ",", "bound", ")", "\n", "boxes", "[", ":", ",", "2", ":", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", "2", ":", "]", ",", "0", ",", "bound", "-", "boxes", "[", ":", ",", ":", "2", "]", ")", "\n", "\n", "if", "colors", "is", "None", ":", "\n", "            ", "colors", "=", "[", "\n", "(", "0", ",", "0", ",", "255", ")", ",", "\n", "(", "0", ",", "255", ",", "0", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "\n", "(", "0", ",", "255", ",", "255", ")", ",", "\n", "(", "255", ",", "0", ",", "255", ")", ",", "\n", "(", "255", ",", "255", ",", "0", ")", ",", "\n", "(", "0", ",", "0", ",", "128", ")", ",", "\n", "(", "0", ",", "128", ",", "0", ")", ",", "\n", "(", "128", ",", "0", ",", "0", ")", ",", "\n", "(", "0", ",", "128", ",", "128", ")", ",", "\n", "(", "128", ",", "0", ",", "128", ")", ",", "\n", "(", "128", ",", "128", ",", "0", ")", ",", "\n", "]", "\n", "", "colors", "=", "np", ".", "array", "(", "colors", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "colors", ".", "ndim", "==", "1", ":", "\n", "            ", "colors", "=", "np", ".", "expand_dims", "(", "colors", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "i", ",", "box", "in", "enumerate", "(", "boxes", ")", ":", "\n", "            ", "color", "=", "colors", "[", "i", "%", "len", "(", "colors", ")", "]", "\n", "pt1", "=", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ")", "\n", "pt2", "=", "(", "box", "[", "0", "]", "+", "box", "[", "2", "]", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", ")", "\n", "img", "=", "cv2", ".", "rectangle", "(", "img", ",", "pt1", ",", "pt2", ",", "color", ".", "tolist", "(", ")", ",", "thickness", ")", "\n", "\n", "", "", "if", "visualize", ":", "\n", "        ", "winname", "=", "\"window_{}\"", ".", "format", "(", "fig_n", ")", "\n", "cv2", ".", "imshow", "(", "winname", ",", "img", ")", "\n", "cv2", ".", "waitKey", "(", "delay", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.ops.crop_and_resize": [[108, 119], ["max", "dg_util.python_utils.bb_util.xywh_to_xyxy", "numpy.mean", "dg_util.python_utils.image_util.get_cropped_input"], "function", ["None"], ["", "def", "crop_and_resize", "(", "\n", "img", ",", "center", ",", "size", ",", "out_size", ",", "border_type", "=", "cv2", ".", "BORDER_CONSTANT", ",", "border_value", "=", "(", "0", ",", "0", ",", "0", ")", ",", "interp", "=", "cv2", ".", "INTER_LINEAR", "\n", ")", ":", "\n", "# convert box to corners (0-indexed)", "\n", "    ", "size", "=", "max", "(", "2", ",", "size", ")", "\n", "xyxy", "=", "bb_util", ".", "xywh_to_xyxy", "(", "[", "center", "[", "1", "]", ",", "center", "[", "0", "]", ",", "size", ",", "size", "]", ")", "\n", "avg_color", "=", "np", ".", "mean", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ",", "dtype", "=", "float", ")", "\n", "\n", "# Use my faster version.", "\n", "patch", "=", "image_util", ".", "get_cropped_input", "(", "img", ",", "xyxy", ",", "1", ",", "out_size", ",", "interp", ",", "avg_color", ")", "[", "0", "]", "\n", "return", "patch", "\n", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.SiamNet.__init__": [[17, 21], ["dg_util.python_utils.pytorch_util.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "head", ")", ":", "\n", "        ", "super", "(", "SiamNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "head", "=", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.SiamNet.feature_extractor": [[22, 25], ["tracker.SiamNet.backbone.extract_features"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features"], ["", "def", "feature_extractor", "(", "self", ",", "data", ")", ":", "\n", "        ", "track_features", "=", "self", ".", "backbone", ".", "extract_features", "(", "data", ")", "\n", "return", "track_features", "[", "\"spatial_features\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.SiamNet.forward": [[26, 30], ["tracker.SiamNet.backbone", "tracker.SiamNet.backbone", "tracker.SiamNet.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "backbone", "(", "z", ")", "\n", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "return", "self", ".", "head", "(", "z", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.__init__": [[33, 41], ["got10k.trackers.Tracker.__init__", "dg_util.python_utils.pytorch_util.from_numpy", "dg_util.python_utils.pytorch_util.from_numpy", "constants.IMAGENET_MEAN.copy", "constants.IMAGENET_STD.copy"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "args", ",", "cfg", ",", "net", ")", ":", "\n", "        ", "super", "(", "TrackerSiamFC", ",", "self", ")", ".", "__init__", "(", "name", ",", "True", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "mean", "=", "pt_util", ".", "from_numpy", "(", "constants", ".", "IMAGENET_MEAN", ".", "copy", "(", ")", ")", "\n", "self", ".", "std", "=", "pt_util", ".", "from_numpy", "(", "constants", ".", "IMAGENET_STD", ".", "copy", "(", ")", ")", "\n", "self", ".", "visualize", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.init": [[42, 78], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tracker.TrackerSiamFC.net.eval", "numpy.array", "numpy.outer", "tracker.TrackerSiamFC.hann_window.sum", "numpy.sqrt", "numpy.mean", "siamfc_pytorch.ops.crop_and_resize", "tracker.TrackerSiamFC.image_to_torch", "tracker.TrackerSiamFC.net.feature_extractor", "numpy.hanning", "numpy.hanning", "numpy.linspace", "numpy.sum", "numpy.prod", "cv2.imshow", "cv2.waitKey"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.ops.crop_and_resize", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.image_to_torch", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.SiamNet.feature_extractor"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "init", "(", "self", ",", "img", ",", "box", ")", ":", "\n", "# set to evaluation mode", "\n", "        ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "# convert box to 0-indexed and center based [y, x, h, w]", "\n", "box", "=", "np", ".", "array", "(", "[", "box", "[", "1", "]", "-", "1", "+", "(", "box", "[", "3", "]", "-", "1", ")", "/", "2", ",", "box", "[", "0", "]", "-", "1", "+", "(", "box", "[", "2", "]", "-", "1", ")", "/", "2", ",", "box", "[", "3", "]", ",", "box", "[", "2", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "center", ",", "self", ".", "target_sz", "=", "box", "[", ":", "2", "]", ",", "box", "[", "2", ":", "]", "\n", "\n", "# create hanning window", "\n", "self", ".", "upscale_sz", "=", "self", ".", "cfg", "[", "\"response_up\"", "]", "*", "self", ".", "cfg", "[", "\"response_sz\"", "]", "\n", "self", ".", "hann_window", "=", "np", ".", "outer", "(", "np", ".", "hanning", "(", "self", ".", "upscale_sz", ")", ",", "np", ".", "hanning", "(", "self", ".", "upscale_sz", ")", ")", "\n", "self", ".", "hann_window", "/=", "self", ".", "hann_window", ".", "sum", "(", ")", "\n", "\n", "# search scale factors", "\n", "self", ".", "scale_factors", "=", "self", ".", "cfg", "[", "\"scale_step\"", "]", "**", "np", ".", "linspace", "(", "\n", "-", "(", "self", ".", "cfg", "[", "\"scale_num\"", "]", "//", "2", ")", ",", "self", ".", "cfg", "[", "\"scale_num\"", "]", "//", "2", ",", "self", ".", "cfg", "[", "\"scale_num\"", "]", "\n", ")", "\n", "\n", "# exemplar and search sizes", "\n", "context", "=", "self", ".", "cfg", "[", "\"context\"", "]", "*", "np", ".", "sum", "(", "self", ".", "target_sz", ")", "\n", "self", ".", "z_sz", "=", "np", ".", "sqrt", "(", "np", ".", "prod", "(", "self", ".", "target_sz", "+", "context", ")", ")", "\n", "self", ".", "x_sz", "=", "self", ".", "z_sz", "*", "self", ".", "cfg", "[", "\"instance_sz\"", "]", "/", "self", ".", "cfg", "[", "\"exemplar_sz\"", "]", "\n", "\n", "# exemplar image", "\n", "self", ".", "avg_color", "=", "np", ".", "mean", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "z", "=", "ops", ".", "crop_and_resize", "(", "\n", "img", ",", "self", ".", "center", ",", "self", ".", "z_sz", ",", "out_size", "=", "self", ".", "cfg", "[", "\"exemplar_sz\"", "]", ",", "border_value", "=", "self", ".", "avg_color", "\n", ")", "\n", "\n", "# exemplar features", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "cv2", ".", "imshow", "(", "\"template\"", ",", "z", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "", "z", "=", "self", ".", "image_to_torch", "(", "z", ")", "\n", "self", ".", "kernel", "=", "self", ".", "net", ".", "feature_extractor", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.make_mean_and_std": [[79, 85], ["dg_util.python_utils.pytorch_util.fix_broadcast", "dg_util.python_utils.pytorch_util.fix_broadcast", "mean.to.to.to", "std.to.to.to"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "make_mean_and_std", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "_", ",", "mean", "=", "pt_util", ".", "fix_broadcast", "(", "inputs", ",", "self", ".", "mean", ")", "\n", "_", ",", "std", "=", "pt_util", ".", "fix_broadcast", "(", "inputs", ",", "self", ".", "std", ")", "\n", "mean", "=", "mean", ".", "to", "(", "dtype", "=", "inputs", ".", "dtype", ",", "device", "=", "inputs", ".", "device", ")", "\n", "std", "=", "std", ".", "to", "(", "dtype", "=", "inputs", ".", "dtype", ",", "device", "=", "inputs", ".", "device", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.input_transform": [[86, 94], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "inputs.to.to.to", "tracker.TrackerSiamFC.make_mean_and_std", "inputs.to.to.div_"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.make_mean_and_std"], ["", "def", "input_transform", "(", "self", ",", "inputs", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inputs", "=", "inputs", ".", "to", "(", "torch", ".", "float32", ")", "\n", "mean", ",", "std", "=", "self", ".", "make_mean_and_std", "(", "inputs", ")", "\n", "# Do first one not in place to make sure it's not overwriting the original.", "\n", "inputs", "=", "inputs", "-", "mean", "\n", "inputs", ".", "div_", "(", "std", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.inverse_input_transform": [[95, 105], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tracker.TrackerSiamFC.make_mean_and_std", "inputs.to.to.add_", "inputs.to.to.clamp_", "inputs.to.to.to"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.make_mean_and_std", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "", "def", "inverse_input_transform", "(", "self", ",", "inputs", ":", "torch", ".", "Tensor", ",", "uint8", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mean", ",", "std", "=", "self", ".", "make_mean_and_std", "(", "inputs", ")", "\n", "# Do first one not in place to make sure it's not overwriting the original.", "\n", "inputs", "=", "inputs", "*", "std", "\n", "inputs", ".", "add_", "(", "mean", ")", "\n", "inputs", ".", "clamp_", "(", "0", ",", "255", ")", "\n", "if", "uint8", ":", "\n", "                ", "inputs", "=", "inputs", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.image_to_torch": [[106, 112], ["dg_util.python_utils.pytorch_util.from_numpy", "img.to.to.to", "tracker.TrackerSiamFC.input_transform", "img.to.to.transpose"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.input_transform"], ["", "", "def", "image_to_torch", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "img", ".", "ndim", "==", "3", ":", "\n", "            ", "img", "=", "img", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "img", "=", "pt_util", ".", "from_numpy", "(", "img", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "img", "=", "img", ".", "to", "(", "self", ".", "net", ".", "device", ")", "\n", "return", "self", ".", "input_transform", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update": [[113, 206], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tracker.TrackerSiamFC.net.eval", "numpy.stack", "tracker.TrackerSiamFC.image_to_torch", "tracker.TrackerSiamFC.net.feature_extractor", "tracker.TrackerSiamFC.net.head", "torch.interpolate", "torch.interpolate", "dg_util.python_utils.pytorch_util.to_numpy", "numpy.argmax", "response.min", "numpy.unravel_index", "numpy.array", "siamfc_pytorch.ops.crop_and_resize", "dg_util.python_utils.drawing.subplot", "cv2.imshow", "cv2.waitKey", "dg_util.python_utils.pytorch_util.to_numpy.squeeze", "dg_util.python_utils.drawing.subplot", "cv2.imshow", "numpy.amax", "response.sum", "response.argmax", "cv2.dilate", "numpy.tile", "cv2.imshow", "numpy.array", "print", "cv2.waitKey", "response.max", "numpy.tile.astype", "numpy.ones", "dg_util.python_utils.drawing.subplot"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.image_to_torch", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.SiamNet.feature_extractor", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.ops.crop_and_resize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update", "(", "self", ",", "img", ")", ":", "\n", "# set to evaluation mode", "\n", "        ", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "# search images", "\n", "x", "=", "[", "\n", "ops", ".", "crop_and_resize", "(", "\n", "img", ",", "self", ".", "center", ",", "self", ".", "x_sz", "*", "f", ",", "out_size", "=", "self", ".", "cfg", "[", "\"instance_sz\"", "]", ",", "border_value", "=", "self", ".", "avg_color", "\n", ")", "\n", "for", "f", "in", "self", ".", "scale_factors", "\n", "]", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "search_images", "=", "drawing", ".", "subplot", "(", "x", ",", "1", ",", "3", ",", "x", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "x", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "5", ")", "\n", "cv2", ".", "imshow", "(", "\"search_image\"", ",", "search_images", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "", "x", "=", "np", ".", "stack", "(", "x", ",", "axis", "=", "0", ")", "\n", "x", "=", "self", ".", "image_to_torch", "(", "x", ")", "\n", "\n", "# responses", "\n", "x", "=", "self", ".", "net", ".", "feature_extractor", "(", "x", ")", "\n", "responses", "=", "self", ".", "net", ".", "head", "(", "self", ".", "kernel", ",", "x", ")", "\n", "# responses = torch.sigmoid(responses)", "\n", "# responses = responses.squeeze(1).cpu().numpy()", "\n", "\n", "# upsample responses and penalize scale changes", "\n", "responses", "=", "F", ".", "interpolate", "(", "\n", "responses", ",", "size", "=", "(", "self", ".", "upscale_sz", ",", "self", ".", "upscale_sz", ")", ",", "mode", "=", "\"bicubic\"", ",", "align_corners", "=", "False", "\n", ")", "\n", "responses", "=", "pt_util", ".", "to_numpy", "(", "responses", ".", "squeeze", "(", "1", ")", ")", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "response_image", "=", "drawing", ".", "subplot", "(", "-", "responses", ",", "1", ",", "3", ",", "responses", ".", "shape", "[", "2", "]", ",", "responses", ".", "shape", "[", "1", "]", ",", "5", ")", "\n", "cv2", ".", "imshow", "(", "\"response image\"", ",", "response_image", ")", "\n", "\n", "", "responses", "[", ":", "self", ".", "cfg", "[", "\"scale_num\"", "]", "//", "2", "]", "*=", "self", ".", "cfg", "[", "\"scale_penalty\"", "]", "\n", "responses", "[", "self", ".", "cfg", "[", "\"scale_num\"", "]", "//", "2", "+", "1", ":", "]", "*=", "self", ".", "cfg", "[", "\"scale_penalty\"", "]", "\n", "\n", "# peak scale", "\n", "scale_id", "=", "np", ".", "argmax", "(", "np", ".", "amax", "(", "responses", ",", "axis", "=", "(", "1", ",", "2", ")", ")", ")", "\n", "\n", "# peak location", "\n", "response", "=", "responses", "[", "scale_id", "]", "\n", "response", "-=", "response", ".", "min", "(", ")", "\n", "response", "/=", "response", ".", "sum", "(", ")", "+", "1e-16", "\n", "response", "=", "(", "1", "-", "self", ".", "cfg", "[", "\"window_influence\"", "]", ")", "*", "response", "+", "self", ".", "cfg", "[", "\"window_influence\"", "]", "*", "self", ".", "hann_window", "\n", "loc", "=", "np", ".", "unravel_index", "(", "response", ".", "argmax", "(", ")", ",", "response", ".", "shape", ")", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "loc_result", "=", "response", "==", "response", ".", "max", "(", ")", "\n", "loc_result", "=", "loc_result", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "loc_result", "=", "cv2", ".", "dilate", "(", "loc_result", ",", "np", ".", "ones", "(", "(", "9", ",", "9", ")", ",", "dtype", "=", "loc_result", ".", "dtype", ")", ",", "iterations", "=", "1", ")", "\n", "loc_result", "=", "np", ".", "tile", "(", "loc_result", "[", "...", ",", "np", ".", "newaxis", "]", ",", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "\n", "cv2", ".", "imshow", "(", "\n", "\"response max\"", ",", "\n", "drawing", ".", "subplot", "(", "[", "-", "response", ",", "loc_result", "]", ",", "1", ",", "2", ",", "loc_result", ".", "shape", "[", "2", "]", ",", "loc_result", ".", "shape", "[", "1", "]", ",", "5", ")", ",", "\n", ")", "\n", "\n", "# locate target center", "\n", "", "disp_in_response", "=", "np", ".", "array", "(", "loc", ")", "-", "(", "self", ".", "upscale_sz", "-", "1", ")", "/", "2", "\n", "disp_in_instance", "=", "disp_in_response", "*", "self", ".", "cfg", "[", "\"total_stride\"", "]", "*", "1.0", "/", "self", ".", "cfg", "[", "\"response_up\"", "]", "\n", "disp_in_image", "=", "disp_in_instance", "*", "self", ".", "x_sz", "*", "self", ".", "scale_factors", "[", "scale_id", "]", "/", "self", ".", "cfg", "[", "\"instance_sz\"", "]", "\n", "# disp_in_image = disp_in_response * self.x_sz * self.scale_factors[scale_id] / self.upscale_sz", "\n", "self", ".", "center", "+=", "disp_in_image", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "print", "(", "\n", "\"loc\"", ",", "\n", "loc", ",", "\n", "\"original center change\"", ",", "\n", "disp_in_response", ",", "\n", "\"center change\"", ",", "\n", "disp_in_image", ",", "\n", "\"new center\"", ",", "\n", "self", ".", "center", ",", "\n", ")", "\n", "\n", "# update target size", "\n", "", "scale", "=", "(", "1", "-", "self", ".", "cfg", "[", "\"scale_lr\"", "]", ")", "*", "1.0", "+", "self", ".", "cfg", "[", "\"scale_lr\"", "]", "*", "self", ".", "scale_factors", "[", "scale_id", "]", "\n", "self", ".", "target_sz", "*=", "scale", "\n", "self", ".", "z_sz", "*=", "scale", "\n", "self", ".", "x_sz", "*=", "scale", "\n", "\n", "# return 1-indexed and left-top based bounding box", "\n", "box", "=", "np", ".", "array", "(", "\n", "[", "\n", "self", ".", "center", "[", "1", "]", "+", "1", "-", "(", "self", ".", "target_sz", "[", "1", "]", "-", "1", ")", "/", "2", ",", "\n", "self", ".", "center", "[", "0", "]", "+", "1", "-", "(", "self", ".", "target_sz", "[", "0", "]", "-", "1", ")", "/", "2", ",", "\n", "self", ".", "target_sz", "[", "1", "]", ",", "\n", "self", ".", "target_sz", "[", "0", "]", ",", "\n", "]", "\n", ")", "\n", "if", "self", ".", "visualize", ":", "\n", "            ", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n", "", "return", "box", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.track": [[207, 229], ["len", "numpy.zeros", "numpy.zeros", "enumerate", "tqdm.tqdm", "siamfc_pytorch.ops.read_image", "time.time", "tracker.TrackerSiamFC.init", "tracker.TrackerSiamFC.update", "time.time", "siamfc_pytorch.ops.show_image"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.read_image", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.init", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.ops.show_image"], ["", "def", "track", "(", "self", ",", "img_files", ",", "box", ",", "visualize", "=", "False", ")", ":", "\n", "        ", "self", ".", "visualize", "=", "visualize", "\n", "frame_num", "=", "len", "(", "img_files", ")", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "frame_num", ",", "4", ")", ")", "\n", "boxes", "[", "0", "]", "=", "box", "\n", "times", "=", "np", ".", "zeros", "(", "frame_num", ")", "\n", "im_read_time", "=", "0", "\n", "\n", "for", "f", ",", "img_file", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "img_files", ")", ")", ":", "\n", "            ", "img", "=", "ops", ".", "read_image", "(", "img_file", ")", "\n", "\n", "begin", "=", "time", ".", "time", "(", ")", "\n", "if", "f", "==", "0", ":", "\n", "                ", "self", ".", "init", "(", "img", ",", "box", ")", "\n", "", "else", ":", "\n", "                ", "boxes", "[", "f", ",", ":", "]", "=", "self", ".", "update", "(", "img", ")", "\n", "", "times", "[", "f", "]", "=", "time", ".", "time", "(", ")", "-", "begin", "\n", "\n", "if", "visualize", ":", "\n", "                ", "ops", ".", "show_image", "(", "img", ",", "boxes", "[", "f", ",", ":", "]", ")", "\n", "\n", "", "", "return", "boxes", ",", "times", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.Compose.__init__": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.Compose.__call__": [[16, 20], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.RandomStretch.__init__": [[23, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_stretch", "=", "0.05", ")", ":", "\n", "        ", "self", ".", "max_stretch", "=", "max_stretch", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.RandomStretch.__call__": [[26, 39], ["cv2.resize", "numpy.random.uniform", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "interp", "=", "cv2", ".", "INTER_LINEAR", "\n", "\"\"\"\n        interp = np.random.choice([\n            cv2.INTER_LINEAR,\n            cv2.INTER_CUBIC,\n            cv2.INTER_AREA,\n            cv2.INTER_NEAREST,\n            cv2.INTER_LANCZOS4])\n        \"\"\"", "\n", "scale", "=", "1.0", "+", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "max_stretch", ",", "self", ".", "max_stretch", ")", "\n", "out_size", "=", "(", "round", "(", "img", ".", "shape", "[", "1", "]", "*", "scale", ")", ",", "round", "(", "img", ".", "shape", "[", "0", "]", "*", "scale", ")", ")", "\n", "return", "cv2", ".", "resize", "(", "img", ",", "out_size", ",", "interpolation", "=", "interp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.RandomStretchBox.__init__": [[42, 44], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_stretch", "=", "0.05", ")", ":", "\n", "        ", "self", ".", "max_stretch", "=", "max_stretch", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.RandomStretchBox.__call__": [[45, 50], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "box", ")", ":", "\n", "        ", "scale", "=", "1.0", "+", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "max_stretch", ",", "self", ".", "max_stretch", ")", "\n", "box", "[", "4", "]", "=", "box", "[", "4", "]", "*", "scale", "\n", "box", "[", "5", "]", "=", "box", "[", "5", "]", "*", "scale", "\n", "return", "box", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.CenterCrop.__init__": [[53, 58], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.CenterCrop.__call__": [[59, 73], ["round", "round", "max", "numpy.mean", "cv2.copyMakeBorder"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "tw", ",", "th", "=", "self", ".", "size", "\n", "i", "=", "round", "(", "(", "h", "-", "th", ")", "/", "2.0", ")", "\n", "j", "=", "round", "(", "(", "w", "-", "tw", ")", "/", "2.0", ")", "\n", "\n", "npad", "=", "max", "(", "0", ",", "-", "i", ",", "-", "j", ")", "\n", "if", "npad", ">", "0", ":", "\n", "            ", "avg_color", "=", "np", ".", "mean", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "npad", ",", "npad", ",", "npad", ",", "npad", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "avg_color", ")", "\n", "i", "+=", "npad", "\n", "j", "+=", "npad", "\n", "\n", "", "return", "img", "[", "i", ":", "i", "+", "th", ",", "j", ":", "j", "+", "tw", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.CenterCropBox.__init__": [[76, 81], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.CenterCropBox.__call__": [[82, 88], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "box", ")", ":", "\n", "        ", "box", "[", "2", "]", "=", "self", ".", "size", "[", "1", "]", "*", "box", "[", "2", "]", "/", "box", "[", "4", "]", "\n", "box", "[", "3", "]", "=", "self", ".", "size", "[", "0", "]", "*", "box", "[", "3", "]", "/", "box", "[", "5", "]", "\n", "box", "[", "4", "]", "=", "self", ".", "size", "[", "1", "]", "\n", "box", "[", "5", "]", "=", "self", ".", "size", "[", "0", "]", "\n", "return", "box", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.RandomCrop.__init__": [[91, 96], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.RandomCrop.__call__": [[97, 103], ["numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "tw", ",", "th", "=", "self", ".", "size", "\n", "i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "th", "+", "1", ")", "\n", "j", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", "+", "1", ")", "\n", "return", "img", "[", "i", ":", "i", "+", "th", ",", "j", ":", "j", "+", "tw", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.RandomCropBox.__init__": [[106, 111], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.RandomCropBox.__call__": [[112, 115], ["numpy.clip", "numpy.random.laplace"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "box", ")", ":", "\n", "        ", "box", "[", ":", "2", "]", "+=", "np", ".", "clip", "(", "np", ".", "random", ".", "laplace", "(", "0", ",", "1.0", "/", "4", ",", "2", ")", ",", "-", "1", ",", "1", ")", "*", "(", "box", "[", "2", ":", "4", "]", "*", "self", ".", "size", "[", "0", ":", "2", "]", ")", "\n", "return", "box", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.SiamFCTransforms.__init__": [[118, 140], ["siamfc_transforms.Compose", "siamfc_transforms.Compose", "siamfc_transforms.RandomStretchBox", "siamfc_transforms.CenterCropBox", "siamfc_transforms.RandomCropBox", "siamfc_transforms.CenterCropBox", "siamfc_transforms.RandomStretchBox", "siamfc_transforms.CenterCropBox", "siamfc_transforms.RandomCropBox"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "exemplar_sz", "=", "127", ",", "instance_sz", "=", "255", ",", "context", "=", "0.5", ",", "label_size", "=", "None", ",", "positive_label_width", "=", "None", ")", ":", "\n", "        ", "self", ".", "exemplar_sz", "=", "exemplar_sz", "\n", "self", ".", "instance_sz", "=", "instance_sz", "\n", "self", ".", "context", "=", "context", "\n", "\n", "self", ".", "box_transforms_z", "=", "Compose", "(", "\n", "[", "\n", "RandomStretchBox", "(", ")", ",", "\n", "CenterCropBox", "(", "instance_sz", "-", "8", ")", ",", "\n", "RandomCropBox", "(", "0.05", ")", ",", "\n", "CenterCropBox", "(", "exemplar_sz", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "box_transforms_x", "=", "Compose", "(", "\n", "[", "RandomStretchBox", "(", ")", ",", "CenterCropBox", "(", "instance_sz", "-", "8", ")", ",", "RandomCropBox", "(", "0.33", ")", "]", "\n", ")", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "make_label", "=", "self", ".", "label_size", "is", "not", "None", "\n", "if", "self", ".", "make_label", ":", "\n", "            ", "self", ".", "y_grid", ",", "self", ".", "x_grid", "=", "np", ".", "ogrid", "[", "-", "(", "label_size", "//", "2", ")", ":", "(", "label_size", "//", "2", ")", "+", "1", ",", "\n", "-", "(", "label_size", "//", "2", ")", ":", "(", "label_size", "//", "2", ")", "+", "1", "]", "\n", "self", ".", "positive_label_width", "=", "positive_label_width", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.SiamFCTransforms.__call__": [[141, 147], ["siamfc_transforms.SiamFCTransforms._crop_and_stretch", "siamfc_transforms.SiamFCTransforms._crop_and_stretch"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.SiamFCTransforms._crop_and_stretch", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.SiamFCTransforms._crop_and_stretch"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "z", ",", "x", ",", "box_z", ",", "box_x", "=", "inputs", "\n", "\n", "z", "=", "self", ".", "_crop_and_stretch", "(", "z", ",", "box_z", ",", "self", ".", "box_transforms_z", ",", "False", ")", "\n", "x", "=", "self", ".", "_crop_and_stretch", "(", "x", ",", "box_x", ",", "self", ".", "box_transforms_x", ",", "self", ".", "make_label", ")", "\n", "return", "z", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.SiamFCTransforms._crop_and_stretch": [[148, 168], ["siamfc_transforms.SiamFCTransforms._get_crop_box", "copy.deepcopy", "box_transforms", "numpy.maximum", "numpy.any", "dg_util.python_utils.bb_util.xywh_to_xyxy", "numpy.mean", "print", "dg_util.python_utils.image_util.get_cropped_input", "numpy.array", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.SiamFCTransforms._get_crop_box"], ["", "def", "_crop_and_stretch", "(", "self", ",", "img", ",", "box", ",", "box_transforms", ",", "make_label", ")", ":", "\n", "# Faster version of their crop and stretch functions which only computes the output image once instead of many", "\n", "# times.", "\n", "        ", "box", "=", "self", ".", "_get_crop_box", "(", "box", ",", "self", ".", "instance_sz", ")", "\n", "box_start", "=", "copy", ".", "deepcopy", "(", "box", ")", "\n", "box", "=", "box_transforms", "(", "box", ")", "\n", "box", "[", "2", ":", "4", "]", "=", "np", ".", "maximum", "(", "box", "[", "2", ":", "4", "]", ",", "2", ")", "\n", "if", "np", ".", "any", "(", "np", ".", "array", "(", "box", "[", "2", ":", "4", "]", ")", "<", "2", ")", ":", "\n", "            ", "print", "(", "\"box is very small\"", ",", "box_start", ",", "box", ")", "\n", "", "xyxy", "=", "bb_util", ".", "xywh_to_xyxy", "(", "box", "[", ":", "4", "]", ")", "\n", "avg_color", "=", "np", ".", "mean", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ",", "dtype", "=", "float", ")", "\n", "img", "=", "image_util", ".", "get_cropped_input", "(", "img", ",", "xyxy", ",", "1", ",", "box", "[", "4", "]", ",", "cv2", ".", "INTER_LINEAR", ",", "avg_color", ")", "[", "0", "]", "\n", "if", "make_label", ":", "\n", "# pdb.set_trace()", "\n", "            ", "center_diff", "=", "(", "box_start", "[", ":", "2", "]", "-", "box", "[", ":", "2", "]", ")", "/", "box", "[", "3", "]", "*", "self", ".", "label_size", "\n", "# dist = np.sqrt((self.x_grid - center_diff[0]) ** 2 + (self.y_grid - center_diff[1]) ** 2)", "\n", "dist", "=", "np", ".", "abs", "(", "self", ".", "x_grid", "-", "center_diff", "[", "0", "]", ")", "+", "np", ".", "abs", "(", "self", ".", "y_grid", "-", "center_diff", "[", "1", "]", ")", "\n", "mask", "=", "dist", "<=", "(", "self", ".", "positive_label_width", "/", "2", ")", "\n", "return", "img", ",", "mask", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.siamfc_transforms.SiamFCTransforms._get_crop_box": [[169, 179], ["numpy.array", "numpy.sqrt", "numpy.array", "numpy.sum", "numpy.prod"], "methods", ["None"], ["", "def", "_get_crop_box", "(", "self", ",", "box", ",", "out_size", ")", ":", "\n", "# convert box to 0-indexed and center based [y, x, h, w]", "\n", "        ", "box", "=", "np", ".", "array", "(", "[", "box", "[", "1", "]", "-", "1", "+", "(", "box", "[", "3", "]", "-", "1", ")", "/", "2", ",", "box", "[", "0", "]", "-", "1", "+", "(", "box", "[", "2", "]", "-", "1", ")", "/", "2", ",", "box", "[", "3", "]", ",", "box", "[", "2", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "center", ",", "target_sz", "=", "box", "[", ":", "2", "]", ",", "box", "[", "2", ":", "]", "\n", "\n", "context", "=", "self", ".", "context", "*", "np", ".", "sum", "(", "target_sz", ")", "\n", "size", "=", "np", ".", "sqrt", "(", "np", ".", "prod", "(", "target_sz", "+", "context", ")", ")", "\n", "size", "*=", "out_size", "/", "self", ".", "exemplar_sz", "\n", "box", "=", "np", ".", "array", "(", "[", "center", "[", "1", "]", ",", "center", "[", "0", "]", ",", "size", ",", "size", ",", "out_size", ",", "out_size", "]", ")", "\n", "return", "box", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.BalancedLoss.__init__": [[23, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "neg_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "BalancedLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "neg_weight", "=", "neg_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.BalancedLoss.forward": [[27, 37], ["pos_mask.sum().float", "neg_mask.sum().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.sum", "torch.zeros.sum", "torch.zeros.sum", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "target.size", "target.float", "pos_mask.sum", "neg_mask.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "pos_mask", "=", "target", "==", "0", "\n", "neg_mask", "=", "target", "==", "1", "\n", "pos_num", "=", "pos_mask", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "neg_num", "=", "neg_mask", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "weight", "=", "torch", ".", "zeros", "(", "target", ".", "size", "(", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "target", ".", "device", ")", "\n", "weight", "[", "pos_mask", "]", "=", "1", "/", "pos_num", "\n", "weight", "[", "neg_mask", "]", "=", "1", "/", "neg_num", "*", "self", ".", "neg_weight", "\n", "weight", "/=", "weight", ".", "sum", "(", ")", "\n", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target", ".", "float", "(", ")", ",", "weight", ",", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.FocalLoss.__init__": [[40, 43], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "2", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.FocalLoss.forward": [[44, 58], ["losses.log_sigmoid", "losses.log_minus_sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "avg_weight.mean", "loss.mean"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.log_sigmoid", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.log_minus_sigmoid"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "pos_log_sig", "=", "log_sigmoid", "(", "input", ")", "\n", "neg_log_sig", "=", "log_minus_sigmoid", "(", "input", ")", "\n", "\n", "prob", "=", "torch", ".", "sigmoid", "(", "input", ")", "\n", "pos_weight", "=", "torch", ".", "pow", "(", "1", "-", "prob", ",", "self", ".", "gamma", ")", "\n", "neg_weight", "=", "torch", ".", "pow", "(", "prob", ",", "self", ".", "gamma", ")", "\n", "\n", "loss", "=", "-", "(", "target", "*", "pos_weight", "*", "pos_log_sig", "+", "(", "1", "-", "target", ")", "*", "neg_weight", "*", "neg_log_sig", ")", "\n", "\n", "avg_weight", "=", "target", "*", "pos_weight", "+", "(", "1", "-", "target", ")", "*", "neg_weight", "\n", "loss", "/=", "avg_weight", ".", "mean", "(", ")", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.GHMCLoss.__init__": [[61, 69], ["torch.Module.__init__", "range", "range"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bins", "=", "30", ",", "momentum", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "GHMCLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bins", "=", "bins", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "edges", "=", "[", "t", "/", "bins", "for", "t", "in", "range", "(", "bins", "+", "1", ")", "]", "\n", "self", ".", "edges", "[", "-", "1", "]", "+=", "1e-6", "\n", "if", "momentum", ">", "0", ":", "\n", "            ", "self", ".", "acc_sum", "=", "[", "0.0", "for", "_", "in", "range", "(", "bins", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.GHMCLoss.forward": [[70, 96], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "input.numel", "range", "inds.sum().item", "torch.zeros_like.mean", "torch.zeros_like.mean", "torch.zeros_like.mean", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "input.sigmoid().detach", "inds.sum", "input.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "edges", "=", "self", ".", "edges", "\n", "mmt", "=", "self", ".", "momentum", "\n", "weights", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "\n", "# gradient length", "\n", "g", "=", "torch", ".", "abs", "(", "input", ".", "sigmoid", "(", ")", ".", "detach", "(", ")", "-", "target", ")", "\n", "\n", "tot", "=", "input", ".", "numel", "(", ")", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "bins", ")", ":", "\n", "            ", "inds", "=", "(", "g", ">=", "edges", "[", "i", "]", ")", "&", "(", "g", "<", "edges", "[", "i", "+", "1", "]", ")", "\n", "num_in_bin", "=", "inds", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "num_in_bin", ">", "0", ":", "\n", "                ", "if", "mmt", ">", "0", ":", "\n", "                    ", "self", ".", "acc_sum", "[", "i", "]", "=", "mmt", "*", "self", ".", "acc_sum", "[", "i", "]", "+", "(", "1", "-", "mmt", ")", "*", "num_in_bin", "\n", "weights", "[", "inds", "]", "=", "tot", "/", "self", ".", "acc_sum", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "weights", "[", "inds", "]", "=", "tot", "/", "num_in_bin", "\n", "", "n", "+=", "1", "\n", "", "", "if", "n", ">", "0", ":", "\n", "            ", "weights", "/=", "weights", ".", "mean", "(", ")", "\n", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "input", ",", "target", ",", "weights", ",", "reduction", "=", "\"sum\"", ")", "/", "tot", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.OHNMLoss.__init__": [[99, 102], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "neg_ratio", "=", "3.0", ")", ":", "\n", "        ", "super", "(", "OHNMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "neg_ratio", "=", "neg_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.OHNMLoss.forward": [[103, 120], ["pos_logits.numel", "int", "neg_logits.topk", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "pos_logits", "=", "input", "[", "target", ">", "0", "]", "\n", "pos_labels", "=", "target", "[", "target", ">", "0", "]", "\n", "\n", "neg_logits", "=", "input", "[", "target", "==", "0", "]", "\n", "neg_labels", "=", "target", "[", "target", "==", "0", "]", "\n", "\n", "pos_num", "=", "pos_logits", ".", "numel", "(", ")", "\n", "neg_num", "=", "int", "(", "pos_num", "*", "self", ".", "neg_ratio", ")", "\n", "neg_logits", ",", "neg_indices", "=", "neg_logits", ".", "topk", "(", "neg_num", ")", "\n", "neg_labels", "=", "neg_labels", "[", "neg_indices", "]", "\n", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "torch", ".", "cat", "(", "[", "pos_logits", ",", "neg_logits", "]", ")", ",", "torch", ".", "cat", "(", "[", "pos_labels", ",", "neg_labels", "]", ")", ",", "reduction", "=", "\"mean\"", "\n", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.log_sigmoid": [[8, 13], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.log", "torch.log", "torch.log", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["def", "log_sigmoid", "(", "x", ")", ":", "\n", "# for x > 0: 0 - log(1 + exp(-x))", "\n", "# for x < 0: x - log(1 + exp(x))", "\n", "# for x = 0: 0 (extra term for gradient stability)", "\n", "    ", "return", "torch", ".", "clamp", "(", "x", ",", "max", "=", "0", ")", "-", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "x", ")", ")", ")", "+", "0.5", "*", "torch", ".", "clamp", "(", "x", ",", "min", "=", "0", ",", "max", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.losses.log_minus_sigmoid": [[15, 20], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.log", "torch.log", "torch.log", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "log_minus_sigmoid", "(", "x", ")", ":", "\n", "# for x > 0: -x - log(1 + exp(-x))", "\n", "# for x < 0:  0 - log(1 + exp(x))", "\n", "# for x = 0: 0 (extra term for gradient stability)", "\n", "    ", "return", "torch", ".", "clamp", "(", "-", "x", ",", "max", "=", "0", ")", "-", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "x", ")", ")", ")", "+", "0.5", "*", "torch", ".", "clamp", "(", "x", ",", "min", "=", "0", ",", "max", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.r2v2_dataset.R2V2Dataset.get_video_name": [[22, 25], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_video_name", "(", "name", ")", ":", "\n", "        ", "return", "name", "[", "-", "LEN_NUM_NAME", "-", "LEN_VID_NAME", "-", "5", ":", "-", "LEN_NUM_NAME", "-", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.r2v2_dataset.R2V2Dataset.get_frame_id": [[26, 29], ["int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_frame_id", "(", "name", ")", ":", "\n", "        ", "return", "int", "(", "name", "[", "-", "LEN_NUM_NAME", "-", "4", ":", "-", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.r2v2_dataset.R2V2Dataset.get_image_paths": [[30, 32], ["sorted", "list", "tqdm.tqdm", "glob.iglob", "os.path.join"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "sorted", "(", "list", "(", "tqdm", ".", "tqdm", "(", "glob", ".", "iglob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_split_path", ",", "\"*/*.jpg\"", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.r2v2_dataset.R2V2Dataset.get_image_name": [[33, 35], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_name", "(", "self", ",", "key", ":", "str", ",", "ind", ":", "int", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "data_split_path", ",", "key", "[", ":", "2", "]", ",", "key", "+", "\"_%06d.jpg\"", "%", "ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.r2v2_dataset.R2V2Dataset.__init__": [[36, 54], ["datasets.base_multi_frame_dataset.VideoDataset.__init__", "utils.transforms.StandardVideoTransform"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "data_subset", ":", "str", "=", "\"train\"", ",", "\n", "transform", "=", "None", ",", "\n", "num_images_to_return", "=", "-", "1", ",", "\n", "shared_transform", "=", "False", ",", "\n", "repeatable", "=", "False", ",", "\n", "check_for_new_data", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "worker_id", "=", "-", "1", "\n", "\n", "size", "=", "(", "args", ".", "input_height", ",", "args", ".", "input_width", ")", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "transform", "=", "transforms", ".", "StandardVideoTransform", "(", "size", ",", "data_subset", ")", "\n", "", "VideoDataset", ".", "__init__", "(", "self", ",", "args", ",", "data_subset", ",", "transform", ",", "num_images_to_return", ",", "check_for_new_data", ")", "\n", "self", ".", "repeatable", "=", "repeatable", "\n", "self", ".", "shared_transform", "=", "shared_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.r2v2_dataset.R2V2Dataset.__getitem__": [[55, 99], ["r2v2_dataset.R2V2Dataset.set_rng", "range", "random.randint", "numpy.random.choice", "numpy.random.choice", "enumerate", "len", "torch.ones", "int", "r2v2_dataset.R2V2Dataset.get_image_name", "r2v2_dataset.R2V2Dataset.read_image", "r2v2_dataset.R2V2Dataset.set_rng", "r2v2_dataset.R2V2Dataset.transform", "r2v2_dataset.R2V2Dataset.transform", "images.append", "queue_images.append"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.set_rng", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_image_name", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.read_image", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.set_rng"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", "->", "Optional", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "        ", "path_key", ",", "frame_ids", "=", "self", ".", "path_info", "[", "idx", "]", "\n", "if", "self", ".", "repeatable", ":", "\n", "            ", "initial_seed", "=", "self", ".", "worker_id", "+", "int", "(", "idx", ")", "\n", "", "else", ":", "\n", "            ", "initial_seed", "=", "random", ".", "randint", "(", "0", ",", "2", "**", "31", ")", "\n", "", "self", ".", "set_rng", "(", "initial_seed", ")", "\n", "\n", "if", "not", "self", ".", "args", ".", "multi_frame", ":", "\n", "            ", "frame_ids", "=", "np", ".", "random", ".", "choice", "(", "frame_ids", ",", "1", ")", "\n", "\n", "", "image_cache", "=", "{", "}", "\n", "images", "=", "[", "]", "\n", "queue_images", "=", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "num_images_to_return", ")", ":", "\n", "            ", "image_path_inds", "=", "np", ".", "random", ".", "choice", "(", "frame_ids", ",", "2", ",", "replace", "=", "True", ")", "\n", "for", "ii", ",", "ind", "in", "enumerate", "(", "image_path_inds", ")", ":", "\n", "                ", "path", "=", "self", ".", "get_image_name", "(", "path_key", ",", "ind", ")", "\n", "if", "path", "not", "in", "image_cache", ":", "\n", "                    ", "image", "=", "self", ".", "read_image", "(", "path", ")", "\n", "if", "image", "is", "None", ":", "\n", "                        ", "return", "None", "\n", "", "image_cache", "[", "path", "]", "=", "image", "\n", "", "image", "=", "image_cache", "[", "path", "]", "\n", "if", "self", ".", "shared_transform", ":", "\n", "                    ", "self", ".", "set_rng", "(", "initial_seed", ")", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "else", ":", "\n", "                    ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "ii", "==", "0", ":", "\n", "                    ", "images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                    ", "queue_images", ".", "append", "(", "image", ")", "\n", "", "", "", "if", "len", "(", "images", ")", "<", "self", ".", "num_images_to_return", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "{", "\n", "\"data\"", ":", "images", ",", "\n", "\"queue_data\"", ":", "queue_images", ",", "\n", "\"labels\"", ":", "torch", ".", "ones", "(", "1", ")", ",", "\n", "\"ind\"", ":", "idx", ",", "\n", "\"id\"", ":", "path_key", ",", "\n", "\"keys_to_concat\"", ":", "[", "\"data\"", ",", "\"queue_data\"", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.r2v2_dataset.GOT10KR2V2Dataset.get_video_name": [[103, 106], ["name.split"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_video_name", "(", "name", ")", ":", "\n", "        ", "return", "name", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.r2v2_dataset.GOT10KR2V2Dataset.get_image_paths": [[107, 109], ["list", "tqdm.tqdm", "glob.iglob", "os.path.join"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "tqdm", ".", "tqdm", "(", "glob", ".", "iglob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_split_path", ",", "\"*/*.jpg\"", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.r2v2_dataset.GOT10KR2V2Dataset.get_image_name": [[110, 112], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_name", "(", "self", ",", "key", ":", "str", ",", "ind", ":", "int", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "data_split_path", ",", "key", ",", "\"%08d.jpg\"", "%", "(", "ind", "+", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.npz_dataset.NPZDataset.__init__": [[14, 41], ["torch.no_grad", "numpy.load", "dg_util.python_utils.pytorch_util.from_numpy", "dg_util.python_utils.misc_util.resize", "dg_util.python_utils.pytorch_util.from_numpy().permute", "dg_util.python_utils.tensor_dataset.TensorDataset.__init__", "path.format", "len", "len", "numpy.random.seed", "numpy.random.choice", "len", "data.contiguous.contiguous.transpose", "data.contiguous.contiguous.contiguous", "len", "dg_util.python_utils.pytorch_util.from_numpy"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "path", ",", "data_subset", ",", "num_data_points", "=", "None", ",", "contiguous", "=", "True", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "args", "=", "args", "\n", "self", ".", "data_subset", "=", "data_subset", "\n", "npz_dataset", "=", "np", ".", "load", "(", "path", ".", "format", "(", "data_subset", "=", "data_subset", ")", ")", "\n", "data", "=", "npz_dataset", "[", "\"data\"", "]", "\n", "labels", "=", "pt_util", ".", "from_numpy", "(", "npz_dataset", "[", "\"labels\"", "]", ")", "\n", "if", "num_data_points", "is", "None", ":", "\n", "                ", "num_data_points", "=", "len", "(", "data", ")", "\n", "\n", "", "if", "num_data_points", "<", "len", "(", "data", ")", ":", "\n", "                ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "rand_inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "data", ")", ",", "num_data_points", ",", "replace", "=", "False", ")", "\n", "data", "=", "data", "[", "rand_inds", "]", "\n", "labels", "=", "labels", "[", "rand_inds", "]", "\n", "\n", "", "assert", "len", "(", "data", ".", "shape", ")", "==", "4", "\n", "\n", "if", "data", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "                ", "data", "=", "data", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "", "data", "=", "misc_util", ".", "resize", "(", "data", ",", "(", "args", ".", "input_width", ",", "args", ".", "input_height", ")", ",", "height_channel", "=", "1", ",", "width_channel", "=", "2", ")", "\n", "\n", "data", "=", "pt_util", ".", "from_numpy", "(", "data", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "if", "contiguous", ":", "\n", "                ", "data", "=", "data", ".", "contiguous", "(", ")", "\n", "", "super", "(", "NPZDataset", ",", "self", ")", ".", "__init__", "(", "data", ",", "labels", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_multi_frame_dataset.BaseMultiFrameDataset.__init__": [[12, 26], ["datasets.base_dataset.BaseDataset.__init__", "print", "print", "list", "int", "print", "filter", "numpy.sum", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "path_info", ",", "data_subset", ":", "str", "=", "\"train\"", ",", "transform", "=", "None", ",", "num_images_to_return", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "BaseMultiFrameDataset", ",", "self", ")", ".", "__init__", "(", "args", ",", "data_subset", ")", "\n", "if", "num_images_to_return", "<=", "0", ":", "\n", "            ", "self", ".", "num_images_to_return", "=", "self", ".", "args", ".", "num_frames", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_images_to_return", "=", "num_images_to_return", "\n", "\n", "", "print", "(", "\"Loaded %s dataset with %d entries.\"", "%", "(", "data_subset", ",", "len", "(", "path_info", ")", ")", ")", "\n", "print", "(", "\"Filtering for videos with length\"", ",", "self", ".", "num_images_to_return", ")", "\n", "self", ".", "path_info", "=", "path_info", "\n", "self", ".", "path_info", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", ")", ">=", "self", ".", "num_images_to_return", ",", "self", ".", "path_info", ")", ")", "\n", "num_frames", "=", "int", "(", "np", ".", "sum", "(", "[", "len", "(", "p_info", "[", "1", "]", ")", "for", "p_info", "in", "self", ".", "path_info", "]", ")", ")", "\n", "print", "(", "\"Num for %s videos %d frames %d\"", "%", "(", "data_subset", ",", "len", "(", "self", ".", "path_info", ")", ",", "num_frames", ")", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_multi_frame_dataset.BaseMultiFrameDataset.__len__": [[27, 29], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "path_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_multi_frame_dataset.VideoDataset.__init__": [[32, 50], ["os.path.join", "os.path.join", "pickle.load", "super().__init__", "base_multi_frame_dataset.VideoDataset.get_image_paths", "sorted", "sorted", "os.makedirs", "pickle.dump", "open", "os.path.exists", "path_info[].append", "open", "base_multi_frame_dataset.VideoDataset.video_id_frame_id_split", "sorted.items"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_image_paths", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.video_id_frame_id_split"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_subset", ",", "transform", ",", "num_images_to_return", "=", "-", "1", ",", "check_for_new_data", "=", "False", ")", ":", "\n", "        ", "self", ".", "data_basepath", "=", "args", ".", "data_path", "\n", "self", ".", "data_split_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_basepath", ",", "data_subset", ")", "\n", "pickle_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_basepath", ",", "data_subset", "+", "\"_names.pkl\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pickle_path", ")", "or", "constants", ".", "CHECK_FOR_NEW_DATA", "or", "check_for_new_data", ":", "\n", "            ", "images", "=", "self", ".", "get_image_paths", "(", ")", "\n", "path_info", "=", "{", "}", "\n", "video_names", "=", "sorted", "(", "[", "self", ".", "video_id_frame_id_split", "(", "name", ")", "for", "name", "in", "images", "]", ")", "\n", "for", "vid_id", ",", "ind", "in", "video_names", ":", "\n", "                ", "if", "vid_id", "not", "in", "path_info", ":", "\n", "                    ", "path_info", "[", "vid_id", "]", "=", "[", "]", "\n", "", "path_info", "[", "vid_id", "]", ".", "append", "(", "ind", ")", "\n", "", "path_info", "=", "sorted", "(", "[", "(", "key", ",", "val", ")", "for", "key", ",", "val", "in", "path_info", ".", "items", "(", ")", "]", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "data_split_path", ",", "exist_ok", "=", "True", ")", "\n", "pickle", ".", "dump", "(", "path_info", ",", "open", "(", "pickle_path", ",", "\"wb\"", ")", ")", "\n", "", "path_info", "=", "pickle", ".", "load", "(", "open", "(", "pickle_path", ",", "\"rb\"", ")", ")", "\n", "super", "(", "VideoDataset", ",", "self", ")", ".", "__init__", "(", "\n", "args", ",", "path_info", ",", "data_subset", ",", "transform", "=", "transform", ",", "num_images_to_return", "=", "num_images_to_return", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_multi_frame_dataset.VideoDataset.get_video_name": [[52, 55], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_video_name", "(", "name", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_multi_frame_dataset.VideoDataset.get_frame_id": [[56, 59], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_frame_id", "(", "name", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_multi_frame_dataset.VideoDataset.video_id_frame_id_split": [[60, 62], ["base_multi_frame_dataset.VideoDataset.get_video_name", "base_multi_frame_dataset.VideoDataset.get_frame_id"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_video_name", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_frame_id"], ["", "def", "video_id_frame_id_split", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "get_video_name", "(", "name", ")", ",", "self", ".", "get_frame_id", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_multi_frame_dataset.VideoDataset.get_image_paths": [[63, 65], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_multi_frame_dataset.VideoDataset.get_image_name": [[66, 68], ["None"], "methods", ["None"], ["", "def", "get_image_name", "(", "self", ",", "key", ":", "str", ",", "ind", ":", "int", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.get_video_name": [[25, 28], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_video_name", "(", "name", ")", ":", "\n", "        ", "return", "name", "[", "-", "LEN_NUM_NAME", "-", "LEN_VID_NAME", "-", "5", ":", "-", "LEN_NUM_NAME", "-", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.get_frame_id": [[29, 32], ["int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_frame_id", "(", "name", ")", ":", "\n", "        ", "return", "int", "(", "name", "[", "-", "LEN_NUM_NAME", "-", "4", ":", "-", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.video_id_frame_id_split": [[33, 35], ["video_cacher_dataset.VideoCacherDataset.get_video_name", "video_cacher_dataset.VideoCacherDataset.get_frame_id"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_video_name", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_frame_id"], ["", "def", "video_id_frame_id_split", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "get_video_name", "(", "name", ")", ",", "self", ".", "get_frame_id", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.get_image_paths": [[36, 38], ["sorted", "list", "tqdm.tqdm", "glob.iglob", "os.path.join"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "sorted", "(", "list", "(", "tqdm", ".", "tqdm", "(", "glob", ".", "iglob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "\"*/*.jpg\"", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.get_image_name": [[39, 41], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_name", "(", "self", ",", "key", ":", "str", ",", "ind", ":", "int", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "key", "[", ":", "2", "]", ",", "key", "+", "\"_%06d.jpg\"", "%", "ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.__init__": [[42, 75], ["datasets.base_dataset.BaseDataset.__init__", "os.path.join", "video_cacher_dataset.VideoCacherDataset.get_image_paths", "set", "print", "print", "print", "sorted", "set", "video_cacher_dataset.VideoCacherDataset.get_video_name", "len", "len", "print", "len", "set", "len", "isinstance", "set", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_image_paths", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_video_name"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "video_ids", ",", "\n", "data_subset", ":", "str", "=", "\"train\"", ",", "\n", "ignore_set", "=", "None", ",", "\n", "filter_similar_frames", "=", "True", ",", "\n", "filter_using_laplacian", "=", "True", ",", "\n", "filter_using_flow", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "VideoCacherDataset", ",", "self", ")", ".", "__init__", "(", "args", ",", "data_subset", ")", "\n", "if", "ignore_set", "is", "None", ":", "\n", "            ", "ignore_set", "=", "set", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "ignore_set", ",", "set", ")", ":", "\n", "            ", "ignore_set", "=", "set", "(", "ignore_set", ")", "\n", "", "self", ".", "uncached_ids", "=", "[", "]", "\n", "self", ".", "num_frames_to_cache", "=", "self", ".", "args", ".", "num_frames", "\n", "self", ".", "max_video_length", "=", "self", ".", "args", ".", "max_video_length", "\n", "self", ".", "output_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_path", ",", "data_subset", ")", "\n", "self", ".", "filter_similar_frames", "=", "filter_similar_frames", "\n", "self", ".", "filter_using_laplacian", "=", "filter_using_laplacian", "\n", "self", ".", "filter_using_flow", "=", "filter_using_flow", "\n", "prev_images", "=", "self", ".", "get_image_paths", "(", ")", "\n", "prev_vid_ids", "=", "[", "self", ".", "get_video_name", "(", "img", ")", "for", "img", "in", "prev_images", "]", "\n", "prev_vid_ids", "=", "set", "(", "prev_vid_ids", ")", "\n", "print", "(", "\"previously cached\"", ",", "len", "(", "prev_vid_ids", ")", ")", "\n", "if", "len", "(", "ignore_set", ")", ">", "0", ":", "\n", "            ", "print", "(", "\"ignore size\"", ",", "len", "(", "ignore_set", ")", ")", "\n", "", "print", "(", "\"total dataset size\"", ",", "len", "(", "video_ids", ")", ")", "\n", "self", ".", "uncached_ids", "=", "set", "(", "video_ids", ")", "-", "prev_vid_ids", "\n", "self", ".", "uncached_ids", "-=", "ignore_set", "\n", "print", "(", "\"uncached dataset size\"", ",", "len", "(", "self", ".", "uncached_ids", ")", ")", "\n", "self", ".", "uncached_ids", "=", "sorted", "(", "self", ".", "uncached_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "uncached_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.__getitem__": [[80, 189], ["time.sleep", "dg_util.python_utils.youtube_utils.download_video", "set", "range", "os.remove", "range", "print", "dg_util.python_utils.video_utils.get_frames", "dg_util.python_utils.video_utils.remove_border", "numpy.stack", "print", "dg_util.python_utils.video_utils.get_shots", "len", "print", "len", "random.randint", "video_cacher_dataset.VideoCacherDataset.cache_images", "dg_util.python_utils.youtube_utils.get_video_url", "set.add", "copy.deepcopy", "dg_util.python_utils.video_utils.filter_similar_frames", "len", "random.randint", "set.add", "numpy.stack", "dg_util.python_utils.video_utils.filter_using_laplacian", "dg_util.python_utils.video_utils.filter_using_flow", "len", "enumerate", "dg_util.python_utils.youtube_utils.get_video_url", "len", "len", "mean_num_frames.append", "set.add", "list", "len", "mean_num_frames.append", "set.add", "len", "mean_num_frames.append", "set.add", "range", "len", "len", "len", "len", "len", "numpy.mean", "dg_util.python_utils.youtube_utils.get_video_url", "len", "len", "sorted", "list"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.cache_images"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", "->", "Tuple", "[", "str", ",", "int", "]", ":", "\n", "        ", "time", ".", "sleep", "(", "0.01", ")", "\n", "video_id", "=", "self", ".", "uncached_ids", "[", "idx", "]", "\n", "video", "=", "youtube_utils", ".", "download_video", "(", "\n", "video_id", ",", "video_path", "=", "\"/tmp/downloaded_videos\"", ",", "cookie_path", "=", "constants", ".", "COOKIE_PATH", "\n", ")", "\n", "if", "video", "is", "None", ":", "\n", "            ", "print", "(", "\"no video\"", ",", "youtube_utils", ".", "get_video_url", "(", "video_id", ")", ")", "\n", "return", "video_id", ",", "1", "\n", "", "found_frames", "=", "False", "\n", "mean_num_frames", "=", "[", "]", "\n", "errors", "=", "set", "(", ")", "\n", "# Try a few times because downloading the video is the slow part.", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "frames", ",", "frame_inds", "=", "video_utils", ".", "get_frames", "(", "\n", "video", ",", "\n", "self", ".", "args", ".", "video_sample_rate", ",", "\n", "remove_video", "=", "False", ",", "\n", "max_frames", "=", "self", ".", "args", ".", "max_video_length", ",", "\n", "return_inds", "=", "True", ",", "\n", ")", "\n", "if", "frames", "is", "None", "or", "len", "(", "frames", ")", "==", "0", ":", "\n", "                ", "errors", ".", "add", "(", "\"no frames\"", ")", "\n", "continue", "\n", "\n", "", "if", "self", ".", "filter_using_flow", ":", "\n", "                ", "prev_frames", "=", "copy", ".", "deepcopy", "(", "frames", "[", ":", "-", "1", "]", ")", "\n", "frames", "=", "frames", "[", "1", ":", "]", "\n", "frame_inds", "=", "frame_inds", "[", "1", ":", "]", "\n", "", "if", "self", ".", "filter_similar_frames", ":", "\n", "                ", "frames", ",", "inds", "=", "video_utils", ".", "filter_similar_frames", "(", "frames", ",", "return_inds", "=", "True", ")", "\n", "if", "len", "(", "frames", ")", "<", "self", ".", "num_frames_to_cache", ":", "\n", "                    ", "mean_num_frames", ".", "append", "(", "len", "(", "frames", ")", ")", "\n", "errors", ".", "add", "(", "\"similar\"", ")", "\n", "continue", "\n", "", "frame_inds", "=", "frame_inds", "[", "inds", "]", "\n", "if", "self", ".", "filter_using_flow", ":", "\n", "                    ", "prev_frames", "=", "list", "(", "[", "prev_frames", "[", "ind", "]", "for", "ind", "in", "inds", "]", ")", "\n", "\n", "", "", "if", "len", "(", "frames", ")", ">", "self", ".", "max_video_length", ">", "0", ":", "\n", "                ", "rand_start_point", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "frames", ")", "-", "self", ".", "max_video_length", "-", "1", ")", "\n", "frames", "=", "frames", "[", "rand_start_point", ":", "rand_start_point", "+", "self", ".", "max_video_length", "]", "\n", "if", "self", ".", "filter_using_flow", ":", "\n", "                    ", "prev_frames", "=", "prev_frames", "[", "rand_start_point", ":", "rand_start_point", "+", "self", ".", "max_video_length", "]", "\n", "", "frame_inds", "=", "frame_inds", "[", "rand_start_point", ":", "rand_start_point", "+", "self", ".", "max_video_length", "]", "\n", "\n", "", "frames", ",", "inds", "=", "video_utils", ".", "remove_border", "(", "frames", ",", "return_inds", "=", "True", ")", "\n", "if", "frames", "[", "0", "]", ".", "shape", "[", "0", "]", "==", "0", "or", "frames", "[", "0", "]", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "                ", "errors", ".", "add", "(", "\"border\"", ")", "\n", "continue", "\n", "", "frames", "=", "np", ".", "stack", "(", "frames", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "filter_using_flow", ":", "\n", "                ", "prev_frames", "=", "[", "prev_frame", "[", "inds", "[", "2", "]", ":", "inds", "[", "3", "]", ",", "inds", "[", "0", "]", ":", "inds", "[", "1", "]", "]", "for", "prev_frame", "in", "prev_frames", "]", "\n", "prev_frames", "=", "np", ".", "stack", "(", "prev_frames", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "filter_using_laplacian", ":", "\n", "                ", "frames", ",", "inds", "=", "video_utils", ".", "filter_using_laplacian", "(", "frames", ",", "return_inds", "=", "True", ")", "\n", "if", "len", "(", "frames", ")", "<", "self", ".", "num_frames_to_cache", ":", "\n", "                    ", "mean_num_frames", ".", "append", "(", "len", "(", "frames", ")", ")", "\n", "errors", ".", "add", "(", "\"laplacian\"", ")", "\n", "continue", "\n", "", "frame_inds", "=", "frame_inds", "[", "inds", "]", "\n", "if", "self", ".", "filter_using_flow", ":", "\n", "                    ", "prev_frames", "=", "prev_frames", "[", "inds", "]", "\n", "\n", "", "", "if", "self", ".", "filter_using_flow", ":", "\n", "                ", "frames", ",", "flow_masks", ",", "inds", "=", "video_utils", ".", "filter_using_flow", "(", "prev_frames", ",", "frames", ",", "return_inds", "=", "True", ")", "\n", "if", "len", "(", "frames", ")", "<", "self", ".", "num_frames_to_cache", ":", "\n", "                    ", "mean_num_frames", ".", "append", "(", "len", "(", "frames", ")", ")", "\n", "errors", ".", "add", "(", "\"flow\"", ")", "\n", "continue", "\n", "", "frame_inds", "=", "frame_inds", "[", "inds", "]", "\n", "\n", "", "found_frames", "=", "True", "\n", "break", "\n", "\n", "", "os", ".", "remove", "(", "video", ")", "\n", "\n", "if", "not", "found_frames", ":", "\n", "            ", "if", "len", "(", "mean_num_frames", ")", "==", "0", ":", "\n", "                ", "mean_num_frames", "=", "[", "0", "]", "\n", "", "print", "(", "\n", "\"filter returned %.1f frames %s %s\"", "\n", "%", "(", "np", ".", "mean", "(", "mean_num_frames", ")", ",", "\", \"", ".", "join", "(", "sorted", "(", "list", "(", "errors", ")", ")", ")", ",", "youtube_utils", ".", "get_video_url", "(", "video_id", ")", ")", "\n", ")", "\n", "return", "video_id", ",", "2", "\n", "\n", "", "if", "self", ".", "args", ".", "only_use_shots", ":", "\n", "            ", "shots", ",", "shot_borders", "=", "video_utils", ".", "get_shots", "(", "frames", ",", "return_inds", "=", "True", ")", "\n", "shot_frame_ids", "=", "[", "frame_inds", "[", "shot_borders", "[", "ii", "]", ":", "shot_borders", "[", "ii", "+", "1", "]", "]", "for", "ii", "in", "range", "(", "len", "(", "shot_borders", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "shots", "=", "[", "frames", "]", "\n", "shot_frame_ids", "=", "[", "frame_inds", "]", "\n", "\n", "", "shots_long_enough", "=", "[", "ii", "for", "ii", ",", "shot", "in", "enumerate", "(", "shots", ")", "if", "len", "(", "shot", ")", ">=", "self", ".", "num_frames_to_cache", "]", "\n", "if", "len", "(", "shots_long_enough", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"no shots long enough\"", ",", "youtube_utils", ".", "get_video_url", "(", "video_id", ")", ")", "\n", "return", "video_id", ",", "3", "\n", "\n", "", "shots", "=", "[", "shots", "[", "ii", "]", "for", "ii", "in", "shots_long_enough", "]", "\n", "shot_frame_ids", "=", "[", "shot_frame_ids", "[", "ii", "]", "for", "ii", "in", "shots_long_enough", "]", "\n", "max_num_shots", "=", "len", "(", "shots", ")", "if", "self", ".", "args", ".", "max_num_shots", "<=", "0", "else", "self", ".", "args", ".", "max_num_shots", "\n", "for", "cc", "in", "range", "(", "max_num_shots", ")", ":", "\n", "            ", "frames", "=", "shots", "[", "cc", "]", "\n", "frame_inds", "=", "shot_frame_ids", "[", "cc", "]", "\n", "start_point", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "frames", ")", "-", "self", ".", "num_frames_to_cache", ")", "\n", "frames", "=", "frames", "[", "start_point", ":", "start_point", "+", "self", ".", "num_frames_to_cache", "]", "\n", "self", ".", "cache_images", "(", "frames", ",", "video_id", ",", "frame_inds", ",", "num_frames", "=", "-", "1", ",", "max_side_size", "=", "self", ".", "args", ".", "max_side_size", ")", "\n", "", "return", "video_id", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.video_cacher_dataset.VideoCacherDataset.cache_images": [[190, 211], ["os.path.join", "os.makedirs", "numpy.arange", "numpy.random.choice", "numpy.random.choice.sort", "cv2.imwrite", "len", "len", "min", "len", "print", "dg_util.python_utils.misc_util.max_resize", "os.path.join", "len", "dg_util.python_utils.misc_util.min_resize"], "methods", ["None"], ["", "def", "cache_images", "(", "self", ",", "frames", ",", "vid_id", ",", "frame_inds", ",", "num_frames", "=", "-", "1", ",", "max_side_size", "=", "-", "1", ",", "min_side_size", "=", "-", "1", ")", ":", "\n", "        ", "assert", "not", "(", "(", "max_side_size", ">", "0", ")", "and", "(", "min_side_size", ">", "0", ")", ")", ",", "\"Can only specify max_side_size or min_side_size.\"", "\n", "im_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "vid_id", "[", ":", "2", "]", ")", "\n", "os", ".", "makedirs", "(", "im_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "num_frames", "<", "1", ":", "\n", "            ", "random_inds", "=", "np", ".", "arange", "(", "len", "(", "frames", ")", ")", "\n", "", "else", ":", "\n", "            ", "random_inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "frames", ")", ",", "min", "(", "num_frames", ",", "len", "(", "frames", ")", ")", ",", "replace", "=", "False", ")", "\n", "random_inds", ".", "sort", "(", ")", "\n", "\n", "", "for", "rand_ind", "in", "random_inds", ":", "\n", "            ", "image", "=", "frames", "[", "rand_ind", "]", "\n", "image_id", "=", "frame_inds", "[", "rand_ind", "]", "\n", "if", "len", "(", "image", ".", "shape", ")", "!=", "3", ":", "\n", "                ", "print", "(", "\"image is wrong shape\"", ",", "vid_id", ",", "image", ".", "shape", ")", "\n", "return", "\n", "", "if", "max_side_size", ">", "0", ":", "\n", "                ", "image", "=", "misc_util", ".", "max_resize", "(", "image", ",", "max_side_size", ",", "always_resize", "=", "False", ")", "\n", "", "elif", "min_side_size", ">", "0", ":", "\n", "                ", "image", "=", "misc_util", ".", "min_resize", "(", "image", ",", "max_side_size", ",", "always_resize", "=", "False", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "im_dir", ",", "\"%s_%06d.jpg\"", "%", "(", "vid_id", ",", "image_id", ")", ")", ",", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_video_name": [[24, 27], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "get_video_name", "(", "name", ")", ":", "\n", "        ", "return", "name", "[", "-", "LEN_NUM_NAME", "-", "LEN_VID_NAME", "-", "5", ":", "-", "LEN_NUM_NAME", "-", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_frame_id": [[28, 31], ["int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_frame_id", "(", "name", ")", ":", "\n", "        ", "return", "int", "(", "name", "[", "-", "LEN_NUM_NAME", "-", "4", ":", "-", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_image_paths": [[32, 34], ["list", "tqdm.tqdm", "glob.iglob", "os.path.join"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "tqdm", ".", "tqdm", "(", "glob", ".", "iglob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_split_path", ",", "\"*/*.jpg\"", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_image_name": [[35, 37], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_name", "(", "self", ",", "key", ":", "str", ",", "ind", ":", "int", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "data_split_path", ",", "key", "[", ":", "2", "]", ",", "key", "+", "\"_%06d.jpg\"", "%", "ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.standard_transform": [[38, 41], ["utils.transforms.Kinetics400Transform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "standard_transform", "(", "size", ",", "data_subset", ")", ":", "\n", "        ", "return", "transforms", ".", "Kinetics400Transform", "(", "size", ",", "data_subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.__init__": [[42, 69], ["datasets.base_multi_frame_dataset.VideoDataset.__init__", "os.path.join", "pickle.load", "kinetics_400_dataset.Kinetics400Dataset.standard_transform", "json.load", "sorted", "pickle.dump", "open", "os.path.exists", "open", "list", "open", "os.path.join", "json.load.items", "set", "enumerate", "json.load.items", "json.load.values"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.standard_transform"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "data_subset", ":", "str", "=", "\"train\"", ",", "\n", "transform", "=", "None", ",", "\n", "num_images_to_return", "=", "-", "1", ",", "\n", "shared_transform", "=", "True", ",", "\n", "check_for_new_data", "=", "False", ",", "\n", ")", ":", "\n", "        ", "size", "=", "(", "args", ".", "input_height", ",", "args", ".", "input_width", ")", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "transform", "=", "self", ".", "standard_transform", "(", "size", ",", "data_subset", ")", "\n", "", "VideoDataset", ".", "__init__", "(", "self", ",", "args", ",", "data_subset", ",", "transform", ",", "num_images_to_return", ",", "check_for_new_data", ")", "\n", "self", ".", "shared_transform", "=", "shared_transform", "\n", "pickle_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_basepath", ",", "\"annotations\"", ",", "self", ".", "data_subset", "+", "\".pkl\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pickle_path", ")", "or", "constants", ".", "CHECK_FOR_NEW_DATA", "or", "check_for_new_data", ":", "\n", "            ", "annotations", "=", "json", ".", "load", "(", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_basepath", ",", "\"annotations\"", ",", "self", ".", "data_subset", "+", "\".json\"", ")", ",", "\"r\"", ")", "\n", ")", "\n", "annotations", "=", "{", "key", ":", "val", "[", "\"annotations\"", "]", "[", "\"label\"", "]", "for", "key", ",", "val", "in", "annotations", ".", "items", "(", ")", "}", "\n", "class_names", "=", "sorted", "(", "list", "(", "set", "(", "annotations", ".", "values", "(", ")", ")", ")", ")", "\n", "class_name_to_ind", "=", "{", "name", ":", "ii", "for", "ii", ",", "name", "in", "enumerate", "(", "class_names", ")", "}", "\n", "annotations", "=", "{", "key", ":", "class_name_to_ind", "[", "val", "]", "for", "key", ",", "val", "in", "annotations", ".", "items", "(", ")", "}", "\n", "pickle", ".", "dump", "(", "annotations", ",", "open", "(", "pickle_path", ",", "\"wb\"", ")", ")", "\n", "\n", "", "self", ".", "annotations", "=", "pickle", ".", "load", "(", "open", "(", "pickle_path", ",", "\"rb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.__len__": [[70, 72], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "path_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.__getitem__": [[73, 93], ["random.randint", "numpy.random.randint", "range", "kinetics_400_dataset.Kinetics400Dataset.get_image_name", "kinetics_400_dataset.Kinetics400Dataset.read_image", "kinetics_400_dataset.Kinetics400Dataset.transform", "images.append", "print", "kinetics_400_dataset.Kinetics400Dataset.set_rng", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.datasets.kinetics_400_dataset.Kinetics400Dataset.get_image_name", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.read_image", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.set_rng"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", "->", "Optional", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "        ", "initial_seed", "=", "random", ".", "randint", "(", "0", ",", "2", "**", "31", ")", "\n", "\n", "path_key", ",", "frame_ids", "=", "self", ".", "path_info", "[", "idx", "]", "\n", "start_ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "frame_ids", ")", "-", "self", ".", "num_images_to_return", "+", "1", ")", "\n", "\n", "images", "=", "[", "]", "\n", "for", "img_ind", "in", "range", "(", "start_ind", ",", "start_ind", "+", "self", ".", "num_images_to_return", ")", ":", "\n", "            ", "path", "=", "self", ".", "get_image_name", "(", "path_key", ",", "img_ind", ")", "\n", "image", "=", "self", ".", "read_image", "(", "path", ")", "\n", "if", "image", "is", "None", ":", "\n", "                ", "print", "(", "\"Skipping\"", ",", "path", ",", "\"missing file\"", ")", "\n", "return", "None", "\n", "", "if", "self", ".", "shared_transform", ":", "\n", "                ", "self", ".", "set_rng", "(", "initial_seed", ")", "\n", "", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "", "label", "=", "self", ".", "annotations", "[", "path_key", "]", "\n", "\n", "return", "{", "\"data\"", ":", "images", ",", "\"labels\"", ":", "label", ",", "\"id\"", ":", "self", ".", "path_info", "[", "idx", "]", ",", "\"keys_to_concat\"", ":", "[", "\"data\"", "]", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.got10k_dataset.GOT10kDataset.__init__": [[10, 33], ["got10k.datasets.GOT10k", "siamfc_pytorch.siamfc_transforms.SiamFCTransforms", "siamfc_pytorch.pair_dataset.PairDataset.__init__", "torchvision.Compose", "torchvision.Compose", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize", "dg_util.python_utils.pytorch_util.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_subset", "=", "\"train\"", ")", ":", "\n", "        ", "seqs", "=", "GOT10k", "(", "args", ".", "data_path", ",", "subset", "=", "data_subset", ",", "return_meta", "=", "True", ")", "\n", "self", ".", "cfg", "=", "args", ".", "cfg", "\n", "pair_transform", "=", "SiamFCTransforms", "(", "\n", "exemplar_sz", "=", "self", ".", "cfg", "[", "\"exemplar_sz\"", "]", ",", "instance_sz", "=", "self", ".", "cfg", "[", "\"instance_sz\"", "]", ",", "context", "=", "self", ".", "cfg", "[", "\"context\"", "]", ",", "\n", "label_size", "=", "self", ".", "cfg", "[", "\"response_sz\"", "]", ",", "\n", "positive_label_width", "=", "self", ".", "cfg", "[", "'positive_label_width'", "]", "\n", ")", "\n", "if", "data_subset", "==", "\"train\"", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "pt_util", ".", "ToTensor", "(", "scale", "=", "255", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", "\n", ")", "\n", "", "super", "(", "GOT10kDataset", ",", "self", ")", ".", "__init__", "(", "args", ",", "seqs", ",", "data_subset", ",", "pair_transform", ",", "transform", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.__init__": [[17, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_subset", ":", "str", "=", "\"train\"", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "width", "=", "self", ".", "args", ".", "input_width", "\n", "self", ".", "height", "=", "self", ".", "args", ".", "input_height", "\n", "self", ".", "size", "=", "(", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "self", ".", "data_subset", "=", "data_subset", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.name": [[24, 27], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.set_rng": [[28, 32], ["torch.manual_seed", "numpy.random.seed", "random.seed"], "methods", ["None"], ["", "def", "set_rng", "(", "self", ",", "seed", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.worker_init_fn": [[33, 45], ["isinstance", "isinstance", "torch.utils.data.get_worker_info", "hasattr", "torch.initial_seed", "base_dataset.BaseDataset.set_rng"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.set_rng"], ["", "@", "staticmethod", "\n", "def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "self", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", ".", "dataset", "\n", "if", "isinstance", "(", "self", ",", "pt_util", ".", "IndexWrapperDataset", ")", ":", "\n", "            ", "self", "=", "self", ".", "other_dataset", "\n", "", "self", ".", "worker_id", "=", "worker_id", "\n", "if", "hasattr", "(", "self", ",", "\"repeatable\"", ")", "and", "self", ".", "repeatable", ":", "\n", "            ", "self", ".", "seed", "=", "worker_id", "\n", "", "else", ":", "\n", "            ", "self", ".", "seed", "=", "torch", ".", "initial_seed", "(", ")", "\n", "", "if", "isinstance", "(", "self", ",", "BaseDataset", ")", ":", "\n", "            ", "self", ".", "set_rng", "(", "self", ".", "seed", "%", "(", "2", "**", "32", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.read_image": [[46, 57], ["os.path.exists", "print", "PIL.Image.open", "print"], "methods", ["None"], ["", "", "def", "read_image", "(", "self", ",", "path", ":", "str", ")", "->", "Optional", "[", "Union", "[", "Any", ",", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "print", "(", "\"Image is not found\"", ",", "path", ")", "\n", "return", "None", "\n", "", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "path", ")", "\n", "return", "image", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "print", "(", "\"Could not read image\"", ",", "path", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BaseDataset.collate_fn": [[58, 62], ["torch.utils.data._utils.collate.default_collate"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "collate_fn", "(", "batch", ")", ":", "\n", "        ", "batch", "=", "default_collate", "(", "batch", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.base_dataset.BatchConcatDataset.collate_fn": [[65, 103], ["list", "isinstance", "torch.utils.data._utils.collate.default_collate", "concat_items.items", "len", "torch.stack", "out_data.view.view.view", "len", "isinstance", "isinstance", "output_shape.append", "functools.reduce", "torch.utils.data.get_worker_info", "sum", "elem.storage()._new_shared", "elem.new", "dg_util.python_utils.pytorch_util.from_numpy", "len", "x.numel", "elem.storage"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "# Special multi-dimensional concat", "\n", "def", "collate_fn", "(", "batch", ":", "List", "[", "Dict", "]", ")", "->", "Dict", ":", "\n", "        ", "batch", "=", "list", "(", "[", "bb", "for", "bb", "in", "batch", "if", "bb", "is", "not", "None", "]", ")", "\n", "if", "len", "(", "batch", ")", "==", "0", ":", "\n", "            ", "return", "{", "}", "\n", "", "assert", "isinstance", "(", "batch", "[", "0", "]", ",", "dict", ")", ",", "\"only implemented for dicts\"", "\n", "assert", "\"keys_to_concat\"", "in", "batch", "[", "0", "]", "\n", "\n", "keys_to_concat", "=", "batch", "[", "0", "]", "[", "\"keys_to_concat\"", "]", "\n", "concat_items", "=", "{", "key", ":", "[", "bb", "[", "key", "]", "for", "bb", "in", "batch", "]", "for", "key", "in", "keys_to_concat", "}", "\n", "for", "bb", "in", "batch", ":", "\n", "            ", "for", "key", "in", "keys_to_concat", ":", "\n", "                ", "del", "bb", "[", "key", "]", "\n", "", "del", "bb", "[", "\"keys_to_concat\"", "]", "\n", "", "batch", "=", "default_collate", "(", "batch", ")", "\n", "\n", "for", "key", ",", "items", "in", "concat_items", ".", "items", "(", ")", ":", "\n", "            ", "output_shape", "=", "[", "len", "(", "items", ")", "]", "\n", "while", "isinstance", "(", "items", "[", "0", "]", ",", "list", ")", "or", "isinstance", "(", "items", "[", "0", "]", ",", "tuple", ")", ":", "\n", "                ", "output_shape", ".", "append", "(", "len", "(", "items", "[", "0", "]", ")", ")", "\n", "items", "=", "functools", ".", "reduce", "(", "operator", ".", "iconcat", ",", "items", ",", "[", "]", ")", "\n", "\n", "", "elem", "=", "items", "[", "0", "]", "\n", "\n", "out", "=", "None", "\n", "if", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "is", "not", "None", ":", "\n", "# Taken from Pytorch source.", "\n", "# If we're in a background process, concatenate directly into a", "\n", "# shared memory tensor to avoid an extra copy", "\n", "                ", "numel", "=", "sum", "(", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "items", "]", ")", "\n", "storage", "=", "elem", ".", "storage", "(", ")", ".", "_new_shared", "(", "numel", ")", "\n", "out", "=", "elem", ".", "new", "(", "storage", ")", "\n", "", "items", "=", "[", "pt_util", ".", "from_numpy", "(", "dd", ")", "for", "dd", "in", "items", "]", "\n", "out_data", "=", "torch", ".", "stack", "(", "items", ",", "0", ",", "out", "=", "out", ")", "\n", "out_data", "=", "out_data", ".", "view", "(", "*", "output_shape", ",", "*", "out_data", ".", "shape", "[", "1", ":", "]", ")", "\n", "batch", "[", "key", "]", "=", "out_data", "\n", "", "return", "batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.SunSceneDataset.__init__": [[37, 57], ["datasets.base_dataset.BaseDataset.__init__", "sun_scene_dataset.get_class_names", "sun_scene_dataset.parse_file", "list", "utils.transforms.SunSceneTransform", "os.path.join", "os.path.join", "os.path.join", "get_class_names.items", "get_class_names.items", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.get_class_names", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.parse_file"], ["def", "__init__", "(", "self", ",", "args", ",", "data_subset", ")", ":", "\n", "        ", "super", "(", "SunSceneDataset", ",", "self", ")", ".", "__init__", "(", "args", ",", "data_subset", ")", "\n", "self", ".", "root_dir", "=", "args", ".", "data_path", "\n", "root_dir", "=", "self", ".", "root_dir", "\n", "train", "=", "data_subset", "==", "\"train\"", "\n", "if", "train", ":", "\n", "            ", "self", ".", "data_set_list", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"train_test\"", ",", "\"Training_01.txt\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_set_list", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"train_test\"", ",", "\"Testing_01.txt\"", ")", "\n", "", "categ_dict", "=", "get_class_names", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"ClassName.txt\"", ")", ")", "\n", "self", ".", "categ_dict_inverse", "=", "{", "val", ":", "key", "for", "key", ",", "val", "in", "categ_dict", ".", "items", "(", ")", "}", "\n", "\n", "SunSceneDataset", ".", "SUN_SCENE_INDEX_TO_NAME", "=", "{", "\n", "scene_name", ":", "class_index", "for", "(", "class_index", ",", "scene_name", ")", "in", "categ_dict", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "data_set_list", "=", "parse_file", "(", "self", ".", "data_set_list", ",", "categ_dict", ")", "\n", "self", ".", "data_set_list", "=", "list", "(", "\n", "[", "(", "path", "[", "len", "(", "category", ")", "+", "1", ":", "]", ",", "categ_dict", "[", "category", "]", ")", "for", "path", ",", "category", "in", "self", ".", "data_set_list", "]", "\n", ")", "\n", "self", ".", "transform", "=", "SunSceneTransform", "(", "self", ".", "size", ",", "data_subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.SunSceneDataset.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_set_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.SunSceneDataset.load_and_resize": [[61, 65], ["sun_scene_dataset.SunSceneDataset.transform", "open", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_and_resize", "(", "self", ",", "img_name", ")", ":", "\n", "        ", "with", "open", "(", "img_name", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "fp", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "", "return", "self", ".", "transform", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.SunSceneDataset.get_path_and_cls": [[66, 72], ["os.path.join", "torch.tensor"], "methods", ["None"], ["", "def", "get_path_and_cls", "(", "self", ",", "idx", ")", ":", "\n", "        ", "file_name", ",", "category", "=", "self", ".", "data_set_list", "[", "idx", "]", "\n", "categ_str", "=", "self", ".", "categ_dict_inverse", "[", "category", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"all_data\"", ",", "categ_str", ",", "file_name", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "category", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "return", "path", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.SunSceneDataset.__getitem__": [[73, 77], ["sun_scene_dataset.SunSceneDataset.get_path_and_cls", "sun_scene_dataset.SunSceneDataset.load_and_resize"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.SunSceneDataset.get_path_and_cls", "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.SunSceneDataset.load_and_resize"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "file_name", ",", "label", "=", "self", ".", "get_path_and_cls", "(", "idx", ")", "\n", "image", "=", "self", ".", "load_and_resize", "(", "file_name", ")", "\n", "return", "{", "\"data\"", ":", "image", ",", "\"classifier_labels\"", ":", "label", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.parse_file": [[10, 21], ["open", "line[].split", "dataset.append"], "function", ["None"], ["def", "parse_file", "(", "dataset_adr", ",", "categories", ")", ":", "\n", "    ", "dataset", "=", "[", "]", "\n", "with", "open", "(", "dataset_adr", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", "[", ":", "-", "1", "]", ".", "split", "(", "\"/\"", ")", "\n", "category", "=", "\"/\"", ".", "join", "(", "line", "[", "2", ":", "-", "1", "]", ")", "\n", "file_name", "=", "\"/\"", ".", "join", "(", "line", "[", "2", ":", "]", ")", "\n", "if", "not", "category", "in", "categories", ":", "\n", "                ", "continue", "\n", "", "dataset", ".", "append", "(", "[", "file_name", ",", "category", "]", ")", "\n", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.sun_scene_dataset.get_class_names": [[23, 31], ["open", "classes.append", "range", "len", "line[].split"], "function", ["None"], ["", "def", "get_class_names", "(", "path", ")", ":", "\n", "    ", "classes", "=", "[", "]", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "categ", "=", "\"/\"", ".", "join", "(", "line", "[", ":", "-", "1", "]", ".", "split", "(", "\"/\"", ")", "[", "2", ":", "]", ")", "\n", "classes", ".", "append", "(", "categ", ")", "\n", "", "", "class_dic", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "class_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.datasets.imagenet_dataset.ImagenetDataset.__init__": [[10, 17], ["torchvision.base_dataset.BaseDataset.__init__", "torchvision.ImageFolder.__init__", "utils.transforms.BasicImagenetTransform", "os.path.join", "sorted"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_subset", ",", "transform", "=", "None", ",", "sample_inds", "=", "None", ")", ":", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "args", ",", "data_subset", ")", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "transform", "=", "BasicImagenetTransform", "(", "self", ".", "size", ",", "data_subset", ")", "\n", "", "datasets", ".", "ImageFolder", ".", "__init__", "(", "self", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "imagenet_data_path", ",", "data_subset", ")", ",", "transform", ")", "\n", "if", "sample_inds", "is", "not", "None", ":", "\n", "            ", "self", ".", "samples", "=", "[", "self", ".", "samples", "[", "ii", "]", "for", "ii", "in", "sorted", "(", "sample_inds", ")", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.download_scripts.download_r2v2.make_download_url": [[12, 14], ["drive_url.split"], "function", ["None"], ["def", "make_download_url", "(", "drive_url", ")", ":", "\n", "    ", "return", "\"https://drive.google.com/uc?id=%s\"", "%", "drive_url", ".", "split", "(", "\"?id=\"", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.download_scripts.download_r2v2.download_and_extract": [[16, 29], ["os.makedirs", "len", "download_r2v2.make_download_url", "gdown.download", "os.path.exists", "glob.glob", "os.system", "os.remove"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.download_scripts.download_r2v2.make_download_url"], ["", "def", "download_and_extract", "(", "func_args", ")", ":", "\n", "    ", "id", ",", "filename", ",", "out_dir", "=", "func_args", "\n", "os", ".", "makedirs", "(", "out_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "len", "(", "glob", ".", "glob", "(", "\"%s/%s*\"", "%", "(", "out_dir", ",", "filename", ")", ")", ")", ":", "\n", "# already downloaded", "\n", "        ", "return", "\n", "\n", "", "url", "=", "make_download_url", "(", "id", ")", "\n", "download_path", "=", "\"%s/%s.tar\"", "%", "(", "out_dir", ",", "filename", ")", "\n", "gdown", ".", "download", "(", "url", ",", "output", "=", "download_path", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "download_path", ")", ":", "\n", "        ", "os", ".", "system", "(", "\"tar xf %s -C %s\"", "%", "(", "download_path", ",", "out_dir", ")", ")", "\n", "os", ".", "remove", "(", "download_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_tracking_model.SiamFCTrackingModel.__init__": [[17, 39], ["models.end_task_base_model.EndTaskBaseModel.__init__", "siamfc_pytorch.losses.FocalLoss", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.outer", "end_task_tracking_model.SiamFCTrackingModel.hann_window.sum", "numpy.sqrt", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "numpy.hanning", "numpy.hanning", "numpy.linspace", "numpy.sum", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "cfg", ",", "input_channels", ",", "out_scale", "=", "0.001", ")", ":", "\n", "        ", "super", "(", "SiamFCTrackingModel", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "out_scale", "=", "out_scale", "\n", "self", ".", "cfg", "=", "cfg", "\n", "# self.criterion = losses.BalancedLoss()", "\n", "self", ".", "criterion", "=", "losses", ".", "FocalLoss", "(", ")", "\n", "\n", "self", ".", "search_patch_decoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "input_channels", ",", "256", ",", "1", ")", ")", "\n", "self", ".", "exemplar_decoder", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "input_channels", ",", "256", ",", "1", ")", ")", "\n", "self", ".", "upscale_sz", "=", "self", ".", "cfg", "[", "\"response_up\"", "]", "*", "self", ".", "cfg", "[", "\"response_sz\"", "]", "\n", "self", ".", "hann_window", "=", "np", ".", "outer", "(", "np", ".", "hanning", "(", "self", ".", "upscale_sz", ")", ",", "np", ".", "hanning", "(", "self", ".", "upscale_sz", ")", ")", "\n", "self", ".", "hann_window", "/=", "self", ".", "hann_window", ".", "sum", "(", ")", "\n", "# search scale factors", "\n", "self", ".", "scale_factors", "=", "self", ".", "cfg", "[", "\"scale_step\"", "]", "**", "np", ".", "linspace", "(", "\n", "-", "(", "self", ".", "cfg", "[", "\"scale_num\"", "]", "//", "2", ")", ",", "self", ".", "cfg", "[", "\"scale_num\"", "]", "//", "2", ",", "self", ".", "cfg", "[", "\"scale_num\"", "]", "\n", ")", "\n", "\n", "# exemplar and search sizes", "\n", "self", ".", "target_sz", "=", "1", "\n", "self", ".", "context", "=", "self", ".", "cfg", "[", "\"context\"", "]", "*", "np", ".", "sum", "(", "self", ".", "target_sz", ")", "\n", "self", ".", "z_sz", "=", "np", ".", "sqrt", "(", "np", ".", "prod", "(", "self", ".", "target_sz", "+", "self", ".", "context", ")", ")", "\n", "self", ".", "x_sz", "=", "self", ".", "z_sz", "*", "self", ".", "cfg", "[", "\"instance_sz\"", "]", "/", "self", ".", "cfg", "[", "\"exemplar_sz\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_tracking_model.SiamFCTrackingModel.forward": [[40, 45], ["end_task_tracking_model.SiamFCTrackingModel.exemplar_decoder", "end_task_tracking_model.SiamFCTrackingModel.search_patch_decoder", "end_task_tracking_model.SiamFCTrackingModel._fast_xcorr"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_tracking_model.SiamFCTrackingModel._fast_xcorr"], ["", "def", "forward", "(", "self", ",", "exemplar_features", ",", "features", ")", ":", "\n", "        ", "exemplar_features", "=", "self", ".", "exemplar_decoder", "(", "exemplar_features", ")", "\n", "features", "=", "self", ".", "search_patch_decoder", "(", "features", ")", "\n", "output", "=", "self", ".", "_fast_xcorr", "(", "exemplar_features", ",", "features", ")", "*", "self", ".", "out_scale", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_tracking_model.SiamFCTrackingModel._fast_xcorr": [[46, 54], ["z.size", "x.view.view.size", "x.view.view.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "out.view.view.view", "out.view.view.size", "out.view.view.size"], "methods", ["None"], ["", "def", "_fast_xcorr", "(", "self", ",", "z", ",", "x", ")", ":", "\n", "# fast cross correlation", "\n", "        ", "nz", "=", "z", ".", "size", "(", "0", ")", "\n", "nx", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "nz", "*", "c", ",", "h", ",", "w", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "x", ",", "z", ",", "groups", "=", "nz", ")", "\n", "out", "=", "out", ".", "view", "(", "nx", ",", "-", "1", ",", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_tracking_model.SiamFCTrackingModel.loss": [[55, 64], ["end_task_tracking_model.SiamFCTrackingModel.criterion", "labels.float"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "network_outputs", "=", "None", ")", ":", "\n", "        ", "if", "network_outputs", "is", "None", ":", "\n", "            ", "return", "{", "\"siam_tracking_loss\"", ":", "None", "}", "\n", "# calculate loss", "\n", "", "responses", "=", "network_outputs", "[", "\"responses\"", "]", "\n", "labels", "=", "network_outputs", "[", "'labels'", "]", "\n", "loss", "=", "self", ".", "criterion", "(", "responses", ",", "labels", ".", "float", "(", ")", ")", "\n", "# loss = F.binary_cross_entropy_with_logits(responses, labels)", "\n", "return", "{", "\"siam_tracking_loss\"", ":", "(", "1.0", ",", "loss", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_tracking_model.SiamFCTrackingModel.get_metrics": [[65, 87], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.mean", "torch.abs.mean", "torch.abs.mean", "end_task_tracking_model.SiamFCTrackingModel.prediction_to_box", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "dg_util.python_utils.bb_util.xywh_to_xyxy", "dg_util.python_utils.bb_util.xywh_to_xyxy", "dg_util.python_utils.bb_util.IOU_numpy", "numpy.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "labels.float"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_tracking_model.SiamFCTrackingModel.prediction_to_box"], ["", "def", "get_metrics", "(", "self", ",", "network_outputs", ":", "Optional", "[", "Dict", "]", ")", "->", "Dict", "[", "str", ",", "Optional", "[", "float", "]", "]", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "network_outputs", "is", "None", ":", "\n", "                ", "return", "{", "\"dist\"", ":", "None", ",", "\"center_dist\"", ":", "None", ",", "\"mean_iou\"", ":", "None", "}", "\n", "", "metrics", "=", "{", "}", "\n", "responses", "=", "network_outputs", "[", "\"responses\"", "]", "\n", "labels", "=", "network_outputs", "[", "'labels'", "]", "\n", "responses_sigm", "=", "torch", ".", "sigmoid", "(", "responses", ")", "\n", "dist", "=", "torch", ".", "abs", "(", "responses_sigm", "-", "labels", ".", "float", "(", ")", ")", "\n", "metrics", "[", "\"dist\"", "]", "=", "dist", ".", "mean", "(", ")", "\n", "\n", "pred_boxes", "=", "self", ".", "prediction_to_box", "(", "responses", ")", "\n", "network_outputs", "[", "\"pred_boxes_cxcywh\"", "]", "=", "pred_boxes", "\n", "\n", "gt_box_cxcywh", "=", "[", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "center_dist", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "pred_boxes", "[", ":", "2", "]", "-", "0.5", ")", ")", "\n", "metrics", "[", "\"center_dist\"", "]", "=", "center_dist", "\n", "gt_box", "=", "bb_util", ".", "xywh_to_xyxy", "(", "gt_box_cxcywh", ")", "\n", "pred_boxes", "=", "bb_util", ".", "xywh_to_xyxy", "(", "pred_boxes", ")", "\n", "ious", "=", "bb_util", ".", "IOU_numpy", "(", "pred_boxes", ".", "T", ",", "gt_box", ")", "\n", "metrics", "[", "\"mean_iou\"", "]", "=", "np", ".", "mean", "(", "ious", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_tracking_model.SiamFCTrackingModel.prediction_to_box": [[88, 103], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.unravel_index", "loc.to.to.to", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "dg_util.python_utils.pytorch_util.to_numpy", "dg_util.python_utils.pytorch_util.from_numpy", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "responses.view"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "", "def", "prediction_to_box", "(", "self", ",", "responses", ")", ":", "\n", "# returns cx cy w h", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# locate target center", "\n", "            ", "loc", "=", "np", ".", "unravel_index", "(", "\n", "pt_util", ".", "to_numpy", "(", "torch", ".", "argmax", "(", "responses", ".", "view", "(", "responses", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "dim", "=", "-", "1", ")", ")", ",", "responses", ".", "shape", "\n", ")", "\n", "loc", "=", "pt_util", ".", "from_numpy", "(", "loc", ")", ".", "T", "\n", "loc", "=", "loc", ".", "to", "(", "torch", ".", "float32", ")", "\n", "loc", "[", ":", ",", "2", ":", "]", "+=", "0.5", "# treat as the center of the box, not the top left corner", "\n", "loc", "[", ":", ",", "2", ":", "]", "=", "loc", "[", ":", ",", "2", ":", "]", "/", "responses", ".", "shape", "[", "2", "]", "\n", "pred_box", "=", "torch", ".", "stack", "(", "\n", "[", "loc", "[", ":", ",", "3", "]", ",", "loc", "[", ":", ",", "2", "]", ",", "torch", ".", "full_like", "(", "loc", "[", ":", ",", "0", "]", ",", "0.5", ")", ",", "torch", ".", "full_like", "(", "loc", "[", ":", ",", "0", "]", ",", "0.5", ")", "]", "\n", ")", "\n", "return", "pred_box", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_tracking_model.SiamFCTrackingModel.get_image_output": [[104, 125], ["utils.util_functions.to_uint8", "utils.util_functions.to_uint8", "dg_util.python_utils.pytorch_util.to_numpy().copy", "dg_util.python_utils.pytorch_util.to_numpy().copy.min", "dg_util.python_utils.pytorch_util.to_numpy().copy.max", "dg_util.python_utils.pytorch_util.to_numpy", "zip", "dg_util.python_utils.drawing.subplot", "network_outputs[].squeeze().float", "images.extend", "dg_util.python_utils.pytorch_util.to_numpy", "len", "network_outputs[].squeeze", "network_outputs[].squeeze"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8"], ["", "", "def", "get_image_output", "(", "self", ",", "network_outputs", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "image_output", "=", "{", "}", "\n", "exemplar_images", "=", "to_uint8", "(", "network_outputs", "[", "\"data\"", "]", ")", "\n", "track_images", "=", "to_uint8", "(", "network_outputs", "[", "\"track_data\"", "]", ")", "\n", "responses", "=", "pt_util", ".", "to_numpy", "(", "network_outputs", "[", "\"responses\"", "]", ".", "squeeze", "(", "1", ")", ")", ".", "copy", "(", ")", "\n", "responses", "-=", "responses", ".", "min", "(", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "responses", "/=", "responses", ".", "max", "(", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "\n", "labels", "=", "pt_util", ".", "to_numpy", "(", "network_outputs", "[", "'labels'", "]", ".", "squeeze", "(", "1", ")", ".", "float", "(", ")", ")", "\n", "responses", "+=", "labels", "/", "10", "\n", "batch_size", ",", "_", ",", "im_height", ",", "im_width", "=", "network_outputs", "[", "\"track_data\"", "]", ".", "shape", "\n", "\n", "images", "=", "[", "]", "\n", "for", "exemplar_image", ",", "track_image", ",", "response", "in", "zip", "(", "exemplar_images", ",", "track_images", ",", "responses", ")", ":", "\n", "            ", "images", ".", "extend", "(", "[", "exemplar_image", ",", "track_image", ",", "response", "]", ")", "\n", "if", "len", "(", "images", ")", ">", "(", "(", "3", "*", "2", ")", "**", "2", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "subplot", "=", "drawing", ".", "subplot", "(", "images", ",", "3", "*", "2", ",", "3", "*", "2", ",", "im_width", ",", "im_height", ")", "\n", "image_output", "[", "\"images/tracks\"", "]", "=", "subplot", "\n", "\n", "return", "image_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.linear_model.MultiLayerLinearModel.__init__": [[16, 26], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "network.append", "len", "torch.nn.Linear", "torch.nn.Linear", "network.append", "len", "nonlinearity", "network.append", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__", "home.repos.pwc.inspect_result.danielgordon10_vince.None.constants.nonlinearity"], ["    ", "def", "__init__", "(", "self", ",", "sizes", ",", "nonlinearity", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "MultiLayerLinearModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "network", "=", "[", "]", "\n", "for", "ss", "in", "range", "(", "len", "(", "sizes", ")", "-", "1", ")", ":", "\n", "            ", "network", ".", "append", "(", "nn", ".", "Linear", "(", "sizes", "[", "ss", "]", ",", "sizes", "[", "ss", "+", "1", "]", ")", ")", "\n", "if", "ss", "<", "len", "(", "sizes", ")", "-", "2", ":", "\n", "                ", "network", ".", "append", "(", "nonlinearity", "(", ")", ")", "\n", "if", "dropout", ">", "0", ":", "\n", "                    ", "network", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.linear_model.MultiLayerLinearModel.forward": [[27, 29], ["linear_model.MultiLayerLinearModel.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.linear_model.MultiLinearModel.__init__": [[32, 66], ["models.base_model.BaseModel.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "len", "range", "torch.nn.Sequential", "torch.nn.Sequential", "linear_model.MultiLinearModel.classifiers.append", "torch.nn.Sequential.append", "torch.nn.Sequential.append", "torch.nn.Sequential.append", "torch.nn.Sequential.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "constants.NONLINEARITY"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "feature_size", ",", "\n", "num_classes", ",", "\n", "num_layers_for_each_model", ":", "List", "[", "int", "]", ",", "\n", "ind_to_label_func", "=", "None", ",", "\n", "downsample_feature_size", "=", "None", ",", "\n", "dropout", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MultiLinearModel", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "classifiers", "=", "[", "]", "\n", "self", ".", "dropout", "=", "dropout", "\n", "for", "depth", "in", "num_layers_for_each_model", ":", "\n", "            ", "model", "=", "[", "]", "\n", "feature_size", "=", "self", ".", "feature_size", "\n", "for", "ii", "in", "range", "(", "depth", ")", ":", "\n", "                ", "if", "ii", "==", "depth", "-", "1", ":", "\n", "                    ", "model", ".", "append", "(", "nn", ".", "Linear", "(", "feature_size", ",", "self", ".", "num_classes", ")", ")", "\n", "", "else", ":", "\n", "# Won't hit for single layer because it will hit the if", "\n", "                    ", "if", "ii", "==", "0", "and", "downsample_feature_size", "is", "not", "None", ":", "\n", "                        ", "feature_size", "=", "downsample_feature_size", "\n", "", "model", ".", "append", "(", "nn", ".", "Linear", "(", "feature_size", ",", "feature_size", ")", ")", "\n", "model", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ",", "inplace", "=", "True", ")", ")", "\n", "model", ".", "append", "(", "constants", ".", "NONLINEARITY", "(", ")", ")", "\n", "", "", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "self", ".", "classifiers", ".", "append", "(", "model", ")", "\n", "", "self", ".", "classifiers", "=", "nn", ".", "ModuleList", "(", "self", ".", "classifiers", ")", "\n", "self", ".", "num_classifiers", "=", "len", "(", "self", ".", "classifiers", ")", "\n", "self", ".", "ind_to_label_func", "=", "ind_to_label_func", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.linear_model.MultiLinearModel.forward": [[67, 72], ["range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return_val", "=", "{", "}", "\n", "for", "ii", "in", "range", "(", "self", ".", "num_classifiers", ")", ":", "\n", "            ", "return_val", "[", "\"classifier_output_%d\"", "%", "ii", "]", "=", "self", ".", "classifiers", "[", "ii", "]", "(", "inputs", ")", "\n", "", "return", "return_val", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.linear_model.MultiLinearModel.loss": [[73, 87], ["range", "range", "torch.cross_entropy", "torch.cross_entropy", "range"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "network_outputs", ":", "Optional", "[", "Dict", "]", ")", "->", "Dict", "[", "str", ",", "Optional", "[", "Tuple", "[", "float", ",", "torch", ".", "Tensor", "]", "]", "]", ":", "\n", "        ", "losses", "=", "{", "}", "\n", "if", "network_outputs", "is", "None", ":", "\n", "            ", "for", "ii", "in", "range", "(", "self", ".", "num_classifiers", ")", ":", "\n", "                ", "losses", "[", "\"classifier_loss_%d\"", "%", "ii", "]", "=", "None", "\n", "", "return", "losses", "\n", "\n", "", "classifier_losses", "=", "[", "\n", "F", ".", "cross_entropy", "(", "network_outputs", "[", "\"classifier_output_%d\"", "%", "ii", "]", ",", "network_outputs", "[", "\"classifier_labels\"", "]", ")", "\n", "for", "ii", "in", "range", "(", "self", ".", "num_classifiers", ")", "\n", "]", "\n", "for", "ii", "in", "range", "(", "self", ".", "num_classifiers", ")", ":", "\n", "            ", "losses", "[", "\"classifier_loss_%d\"", "%", "ii", "]", "=", "(", "1.0", ",", "classifier_losses", "[", "ii", "]", ")", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.linear_model.MultiLinearModel.get_metrics": [[88, 101], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["None"], ["", "def", "get_metrics", "(", "self", ",", "network_outputs", ":", "Optional", "[", "Dict", "]", ")", "->", "Dict", "[", "str", ",", "Optional", "[", "float", "]", "]", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "metrics", "=", "{", "}", "\n", "if", "network_outputs", "is", "None", ":", "\n", "                ", "for", "ii", "in", "range", "(", "self", ".", "num_classifiers", ")", ":", "\n", "                    ", "metrics", "[", "\"classifier_accuracy_%d\"", "%", "ii", "]", "=", "None", "\n", "", "return", "metrics", "\n", "\n", "", "for", "ii", "in", "range", "(", "self", ".", "num_classifiers", ")", ":", "\n", "                ", "predictions", "=", "torch", ".", "argmax", "(", "network_outputs", "[", "\"classifier_output_%d\"", "%", "ii", "]", ",", "dim", "=", "1", ")", "\n", "acc", "=", "(", "predictions", "==", "network_outputs", "[", "\"classifier_labels\"", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "mean", "(", ")", "\n", "metrics", "[", "\"classifier_accuracy_%d\"", "%", "ii", "]", "=", "acc", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.linear_model.MultiLinearModel.get_image_output": [[102, 181], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "dg_util.python_utils.pytorch_util.to_numpy", "utils.util_functions.to_uint8", "numpy.random.choice", "int", "dg_util.python_utils.drawing.subplot", "utils.util_functions.to_uint8", "dg_util.python_utils.pytorch_util.to_numpy", "numpy.pad", "numpy.random.choice", "numpy.array", "int", "dg_util.python_utils.drawing.subplot", "len", "min", "inputs[].copy", "linear_model.MultiLinearModel.ind_to_label_func", "linear_model.MultiLinearModel.ind_to_label_func", "dg_util.python_utils.drawing.draw_contrast_text_cv2", "images.append", "numpy.sqrt", "len", "torch.interpolate().permute", "torch.interpolate().permute", "len", "min", "img_src[].copy", "mask_src[].copy", "mask_src[].copy.min", "output.astype.astype.astype", "images.append", "images.append", "numpy.sqrt", "len", "len", "dg_util.python_utils.drawing.draw_contrast_text_cv2", "len", "len", "mask_src[].copy.max", "len", "torch.interpolate", "torch.interpolate", "int", "int"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.ind_to_label_func", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.ind_to_label_func"], ["", "", "def", "get_image_output", "(", "self", ",", "network_outputs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "image_output", "=", "{", "}", "\n", "predictions", "=", "torch", ".", "argmax", "(", "network_outputs", "[", "\"classifier_output_0\"", "]", ",", "dim", "=", "1", ")", "\n", "labels", "=", "network_outputs", "[", "\"classifier_labels\"", "]", "\n", "acc", "=", "pt_util", ".", "to_numpy", "(", "predictions", "==", "labels", ")", "\n", "batch_size", "=", "acc", ".", "shape", "[", "0", "]", "\n", "\n", "if", "\"attention_masks\"", "in", "network_outputs", ":", "\n", "                ", "inputs", "=", "network_outputs", "[", "\"data\"", "]", "\n", "im_height", ",", "im_width", "=", "inputs", ".", "shape", "[", "2", ":", "]", "\n", "inputs", "=", "to_uint8", "(", "inputs", ")", "\n", "\n", "attention_masks", "=", "network_outputs", "[", "\"attention_masks\"", "]", "\n", "attention_masks", "=", "pt_util", ".", "to_numpy", "(", "\n", "F", ".", "interpolate", "(", "attention_masks", ",", "(", "im_height", ",", "im_width", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ".", "permute", "(", "\n", "0", ",", "2", ",", "3", ",", "1", "\n", ")", "\n", ")", "\n", "attention_masks", "=", "np", ".", "pad", "(", "attention_masks", ",", "(", "(", "0", ",", "0", ")", ",", "(", "10", ",", "10", ")", ",", "(", "10", ",", "10", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\"constant\"", ")", "\n", "\n", "rand_order", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "inputs", ")", ",", "min", "(", "len", "(", "inputs", ")", ",", "50", ")", ",", "replace", "=", "False", ")", "\n", "\n", "images", "=", "[", "]", "\n", "attention_color", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "bb", "in", "rand_order", ":", "\n", "                    ", "img_src", "=", "inputs", "\n", "mask_src", "=", "attention_masks", "\n", "image", "=", "img_src", "[", "bb", "]", ".", "copy", "(", ")", "\n", "attention_mask", "=", "mask_src", "[", "bb", "]", ".", "copy", "(", ")", "\n", "attention_mask", "-=", "attention_mask", ".", "min", "(", ")", "\n", "attention_mask", "/=", "attention_mask", ".", "max", "(", ")", "+", "1e-8", "\n", "output", "=", "(", "attention_mask", "*", "attention_color", ")", "+", "(", "1", "-", "attention_mask", ")", "*", "image", "\n", "output", "=", "output", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "images", ".", "append", "(", "output", ")", "\n", "\n", "", "n_cols", "=", "int", "(", "np", ".", "sqrt", "(", "len", "(", "images", ")", ")", ")", "\n", "# if n_cols % 2 != 0:", "\n", "# n_cols += n_cols % 2", "\n", "n_rows", "=", "len", "(", "images", ")", "//", "n_cols", "\n", "\n", "subplot", "=", "drawing", ".", "subplot", "(", "images", ",", "n_rows", ",", "n_cols", ",", "im_width", "*", "2", ",", "im_height", "*", "2", ",", "border", "=", "5", ")", "\n", "image_output", "[", "\"images/attention\"", "]", "=", "subplot", "\n", "\n", "", "images", "=", "[", "]", "\n", "inputs", "=", "network_outputs", "[", "\"data\"", "]", "[", ":", "batch_size", "]", "\n", "inputs", "=", "to_uint8", "(", "inputs", ")", "\n", "im_height", ",", "im_width", "=", "inputs", ".", "shape", "[", "1", ":", "3", "]", "\n", "rand_order", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "inputs", ")", ",", "min", "(", "len", "(", "inputs", ")", ",", "25", ")", ",", "replace", "=", "False", ")", "\n", "scale_factor", "=", "im_width", "/", "320.0", "\n", "for", "bb", "in", "rand_order", ":", "\n", "                ", "correct", "=", "acc", "[", "bb", "]", "\n", "image", "=", "inputs", "[", "bb", "]", ".", "copy", "(", ")", "\n", "pred_cls", "=", "self", ".", "ind_to_label_func", "(", "predictions", "[", "bb", "]", ")", "\n", "gt_cls", "=", "self", ".", "ind_to_label_func", "(", "labels", "[", "bb", "]", ")", "\n", "if", "correct", ":", "\n", "                    ", "image", "[", ":", "10", ",", ":", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "image", "[", "-", "10", ":", ",", ":", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "image", "[", ":", ",", ":", "10", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "image", "[", ":", ",", "-", "10", ":", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "image", "[", ":", "10", ",", ":", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "image", "[", "-", "10", ":", ",", ":", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "image", "[", ":", ",", ":", "10", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "image", "[", ":", ",", "-", "10", ":", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "", "image", "=", "drawing", ".", "draw_contrast_text_cv2", "(", "image", ",", "\"P: \"", "+", "pred_cls", ",", "(", "10", ",", "10", "+", "int", "(", "30", "*", "scale_factor", ")", ")", ")", "\n", "if", "not", "correct", ":", "\n", "                    ", "image", "=", "drawing", ".", "draw_contrast_text_cv2", "(", "\n", "image", ",", "\"GT: \"", "+", "gt_cls", ",", "(", "10", ",", "10", "+", "int", "(", "2", "*", "30", "*", "scale_factor", ")", ")", "\n", ")", "\n", "", "images", ".", "append", "(", "image", ")", "\n", "\n", "", "n_cols", "=", "int", "(", "np", ".", "sqrt", "(", "len", "(", "images", ")", ")", ")", "\n", "n_rows", "=", "len", "(", "images", ")", "//", "n_cols", "\n", "\n", "subplot", "=", "drawing", ".", "subplot", "(", "images", ",", "n_rows", ",", "n_cols", ",", "im_width", ",", "im_height", ")", "\n", "image_output", "[", "\"images/classifier_outputs\"", "]", "=", "subplot", "\n", "return", "image_output", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_base_model.EndTaskBaseModel.loss": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "loss", "(", "self", ",", "network_outputs", ":", "Optional", "[", "Dict", "]", ")", "->", "Dict", "[", "str", ",", "Optional", "[", "Tuple", "[", "float", ",", "torch", ".", "Tensor", "]", "]", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_base_model.EndTaskBaseModel.get_metrics": [[14, 16], ["None"], "methods", ["None"], ["", "def", "get_metrics", "(", "self", ",", "network_outputs", ":", "Optional", "[", "Dict", "]", ")", "->", "Dict", "[", "str", ",", "Optional", "[", "float", "]", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_base_model.EndTaskBaseModel.get_image_output": [[17, 19], ["None"], "methods", ["None"], ["", "def", "get_image_output", "(", "self", ",", "network_outputs", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.__init__": [[20, 91], ["models.base_model.BaseModel.__init__", "vince_model.VinceModel.args.backbone", "dg_util.python_utils.pytorch_util.get_data_parallel", "torch.nn.Sequential", "torch.nn.Sequential", "dg_util.python_utils.pytorch_util.AttentionPool2D", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "constants.NONLINEARITY", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.ModuleList", "torch.nn.ModuleList", "len", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "dg_util.python_utils.pytorch_util.RemoveDim", "torch.nn.Linear", "torch.nn.Linear", "constants.NONLINEARITY", "torch.nn.Linear", "torch.nn.Linear", "dg_util.python_utils.pytorch_util.from_numpy().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Sequential", "dg_util.python_utils.pytorch_util.from_numpy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.Linear", "torch.nn.Linear", "constants.NONLINEARITY", "torch.nn.Linear", "torch.nn.Linear", "scipy.linalg.block_diag", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "VinceModel", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "num_frames", "=", "self", ".", "args", ".", "num_frames", "\n", "\n", "# Network stuff", "\n", "self", ".", "feature_extractor", "=", "self", ".", "args", ".", "backbone", "(", "self", ".", "args", ",", "-", "2", ")", "\n", "resnet_output_channels", "=", "self", ".", "feature_extractor", ".", "output_channels", "\n", "self", ".", "output_channels", "=", "resnet_output_channels", "\n", "\n", "if", "self", ".", "args", ".", "use_attention", ":", "\n", "            ", "self", ".", "average_layers", "=", "pt_util", ".", "AttentionPool2D", "(", "resnet_output_channels", ",", "keepdim", "=", "False", ",", "return_masks", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "average_layers", "=", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "pt_util", ".", "RemoveDim", "(", "(", "2", ",", "3", ")", ")", ")", "\n", "\n", "", "self", ".", "feature_extractor", "=", "pt_util", ".", "get_data_parallel", "(", "self", ".", "feature_extractor", ",", "args", ".", "feature_extractor_gpu_ids", ")", "\n", "self", ".", "feature_extractor_device", "=", "args", ".", "feature_extractor_gpu_ids", "[", "0", "]", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "output_channels", ",", "self", ".", "output_channels", ")", ",", "\n", "constants", ".", "NONLINEARITY", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "output_channels", ",", "self", ".", "args", ".", "vince_embedding_size", ")", ",", "\n", ")", "\n", "if", "self", ".", "args", ".", "jigsaw", ":", "\n", "            ", "self", ".", "jigsaw_linear", "=", "nn", ".", "Linear", "(", "self", ".", "output_channels", ",", "self", ".", "output_channels", ")", "\n", "self", ".", "jigsaw_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "output_channels", "*", "9", ",", "self", ".", "output_channels", ")", ",", "\n", "constants", ".", "NONLINEARITY", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "output_channels", ",", "self", ".", "args", ".", "vince_embedding_size", ")", ",", "\n", ")", "\n", "", "if", "self", ".", "args", ".", "inter_batch_comparison", ":", "\n", "            ", "if", "self", ".", "num_frames", ">", "1", ":", "\n", "                ", "diag_mask", "=", "pt_util", ".", "from_numpy", "(", "\n", "scipy", ".", "linalg", ".", "block_diag", "(", "\n", "*", "[", "np", ".", "ones", "(", "(", "self", ".", "num_frames", ",", "self", ".", "num_frames", ")", ",", "dtype", "=", "np", ".", "bool", ")", "]", "\n", "*", "(", "self", ".", "args", ".", "batch_size", "//", "self", ".", "num_frames", ")", "\n", ")", "\n", ")", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "similarity_mask", "=", "torch", ".", "cat", "(", "\n", "(", "\n", "diag_mask", ",", "\n", "torch", ".", "zeros", "(", "\n", "(", "self", ".", "args", ".", "batch_size", ",", "self", ".", "args", ".", "vince_queue_size", ")", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "bool", "\n", ")", ",", "\n", ")", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "\n", "", "eye", "=", "torch", ".", "eye", "(", "self", ".", "args", ".", "batch_size", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "self", ".", "eye_mask", "=", "torch", ".", "cat", "(", "\n", "(", "\n", "eye", ",", "\n", "torch", ".", "zeros", "(", "\n", "(", "self", ".", "args", ".", "batch_size", ",", "self", ".", "args", ".", "vince_queue_size", ")", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "bool", "\n", ")", ",", "\n", ")", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "use_imagenet", ":", "\n", "            ", "self", ".", "imagenet_decoders", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Linear", "(", "self", ".", "output_channels", ",", "1000", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "output_channels", ",", "self", ".", "output_channels", ")", ",", "\n", "constants", ".", "NONLINEARITY", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "output_channels", ",", "1000", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "self", ".", "num_imagenet_decoders", "=", "len", "(", "self", ".", "imagenet_decoders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.to": [[92, 95], ["super().to", "vince_model.VinceModel.feature_extractor.to"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "VinceModel", ",", "self", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "feature_extractor", ".", "to", "(", "self", ".", "feature_extractor_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.vince_parameters": [[96, 105], ["list", "list", "list", "vince_model.VinceModel.average_layers.parameters", "list", "list", "vince_model.VinceModel.feature_extractor.parameters", "vince_model.VinceModel.embedding.parameters", "vince_model.VinceModel.jigsaw_linear.parameters", "vince_model.VinceModel.jigsaw_embedding.parameters"], "methods", ["None"], ["", "def", "vince_parameters", "(", "self", ")", ":", "\n", "        ", "params", "=", "(", "\n", "list", "(", "self", ".", "feature_extractor", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "embedding", ".", "parameters", "(", ")", ")", "\n", "+", "list", "(", "self", ".", "average_layers", ".", "parameters", "(", ")", ")", "\n", ")", "\n", "if", "self", ".", "args", ".", "jigsaw", ":", "\n", "            ", "params", "+=", "list", "(", "self", ".", "jigsaw_linear", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "jigsaw_embedding", ".", "parameters", "(", ")", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.split_dict_by_type": [[106, 122], ["enumerate", "zip", "mini_batch.pop", "mini_batch_list.append", "dict_to_split.items", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "split_dict_by_type", "(", "batch_types", ",", "batch_sizes", ",", "dict_to_split", ")", ":", "\n", "# Splits a batch into sub-batches based on the batch_type and batch_size", "\n", "        ", "num_total", "=", "0", "\n", "mini_batch_list", "=", "[", "]", "\n", "assert", "\"queue_vectors\"", "not", "in", "dict_to_split", "\n", "for", "ind", ",", "(", "batch_type", ",", "batch_size", ")", "in", "enumerate", "(", "zip", "(", "batch_types", ",", "batch_sizes", ")", ")", ":", "\n", "            ", "mini_batch", "=", "{", "\n", "key", ":", "(", "val", "[", "ind", "]", "if", "len", "(", "val", ")", "==", "len", "(", "batch_types", ")", "else", "val", "[", "num_total", ":", "num_total", "+", "batch_size", "]", ")", "\n", "for", "key", ",", "val", "in", "dict_to_split", ".", "items", "(", ")", "\n", "}", "\n", "mini_batch", "[", "\"batch_type\"", "]", "=", "batch_type", "\n", "mini_batch", ".", "pop", "(", "\"batch_types\"", ",", "None", ")", "# delete key if exists", "\n", "mini_batch_list", ".", "append", "(", "mini_batch", ")", "\n", "num_total", "+=", "batch_size", "\n", "", "return", "mini_batch_list", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features": [[123, 134], ["vince_model.VinceModel.feature_extractor", "vince_model.VinceModel.average_layers", "isinstance"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.SiamNet.feature_extractor"], ["", "def", "extract_features", "(", "self", ",", "inputs", ",", "run_average_layer", "=", "True", ")", ":", "\n", "        ", "return_val", "=", "{", "}", "\n", "spatial_features", "=", "self", ".", "feature_extractor", "(", "inputs", ")", "\n", "return_val", "[", "\"spatial_features\"", "]", "=", "spatial_features", "\n", "if", "run_average_layer", ":", "\n", "            ", "features", "=", "self", ".", "average_layers", "(", "spatial_features", ")", "\n", "if", "isinstance", "(", "features", ",", "tuple", ")", ":", "\n", "                ", "features", ",", "attention_masks", "=", "features", "\n", "return_val", "[", "\"attention_masks\"", "]", "=", "attention_masks", "\n", "", "return_val", "[", "\"extracted_features\"", "]", "=", "features", "\n", "", "return", "return_val", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.get_embeddings": [[135, 197], ["torch.pad.to", "vince_model.VinceModel.extract_features", "torch.normalize", "torch.normalize", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "data[].contiguous", "dg_util.python_utils.pytorch_util.split_dim", "dg_util.python_utils.pytorch_util.split_dim", "torch.pad.permute().contiguous", "dg_util.python_utils.pytorch_util.remove_dim", "features.to.to.to", "vince_model.VinceModel.jigsaw_linear", "dg_util.python_utils.pytorch_util.split_dim", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "dg_util.python_utils.pytorch_util.remove_dim", "vince_model.VinceModel.jigsaw_embedding", "features.to.to.to", "vince_model.VinceModel.embedding", "vince_model.VinceModel.items", "vince_model.VinceModel.split_dict_by_type", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.pad", "torch.pad", "isinstance", "torch.pad.permute", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "val.to.to.to", "range", "dg_util.python_utils.pytorch_util.expand_new_dim", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.split_dict_by_type", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "get_embeddings", "(", "self", ",", "inputs", ",", "jigsaw", "=", "False", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "data", "=", "inputs", "[", "\"data\"", "]", "\n", "if", "shuffle", ":", "\n", "# Shuffle", "\n", "            ", "shuffle_order", "=", "torch", ".", "randperm", "(", "data", ".", "shape", "[", "0", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "unshuffle_order", "=", "torch", ".", "zeros", "(", "data", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "self", ".", "device", ")", "\n", "unshuffle_order", ".", "index_copy_", "(", "0", ",", "shuffle_order", ",", "torch", ".", "arange", "(", "data", ".", "shape", "[", "0", "]", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "data", "=", "data", "[", "shuffle_order", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "if", "jigsaw", ":", "\n", "            ", "if", "(", "data", ".", "shape", "[", "2", "]", "%", "3", ")", "!=", "0", "or", "(", "data", ".", "shape", "[", "3", "]", "%", "3", ")", "!=", "0", ":", "\n", "                ", "data", "=", "F", ".", "pad", "(", "data", ",", "(", "0", ",", "3", "-", "data", ".", "shape", "[", "3", "]", "%", "3", ",", "0", ",", "3", "-", "data", ".", "shape", "[", "2", "]", "%", "3", ")", ")", "\n", "# [N, C, H, W]", "\n", "", "data", "=", "pt_util", ".", "split_dim", "(", "data", ",", "2", ",", "3", ",", "data", ".", "shape", "[", "2", "]", "//", "3", ")", "\n", "# [N, C, 3, H/3, W]", "\n", "data", "=", "pt_util", ".", "split_dim", "(", "data", ",", "4", ",", "3", ",", "data", ".", "shape", "[", "4", "]", "//", "3", ")", "\n", "# [N, C, 3, H/3, 3, W/3]", "\n", "data", "=", "data", ".", "permute", "(", "0", ",", "2", ",", "4", ",", "1", ",", "3", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "# [N, 3, 3, C, H/3, W/3]", "\n", "data", "=", "pt_util", ".", "remove_dim", "(", "data", ",", "(", "1", ",", "2", ")", ")", "\n", "# [N*9, C, H/3, W/3]", "\n", "\n", "", "images", "=", "data", ".", "to", "(", "self", ".", "feature_extractor_device", ")", "\n", "return_val", "=", "self", ".", "extract_features", "(", "images", ")", "\n", "features", "=", "return_val", "[", "\"extracted_features\"", "]", "\n", "\n", "if", "jigsaw", ":", "\n", "            ", "features", "=", "features", ".", "to", "(", "self", ".", "device", ")", "\n", "features", "=", "self", ".", "jigsaw_linear", "(", "features", ")", "\n", "features", "=", "pt_util", ".", "split_dim", "(", "features", ",", "0", ",", "-", "1", ",", "9", ")", "\n", "# Shuffle all permutations independently", "\n", "rand_orders", "=", "torch", ".", "stack", "(", "[", "torch", ".", "randperm", "(", "9", ",", "device", "=", "features", ".", "device", ")", "for", "_", "in", "range", "(", "features", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "features", "=", "features", "[", "\n", "pt_util", ".", "expand_new_dim", "(", "torch", ".", "arange", "(", "features", ".", "shape", "[", "0", "]", ",", "device", "=", "features", ".", "device", ")", ",", "1", ",", "9", ")", ",", "rand_orders", "\n", "]", "\n", "features", "=", "pt_util", ".", "remove_dim", "(", "features", ",", "2", ")", "\n", "features", "=", "self", ".", "jigsaw_embedding", "(", "features", ")", "\n", "return_val", "[", "\"extracted_features\"", "]", "=", "features", "\n", "output", "=", "features", "\n", "", "else", ":", "\n", "            ", "features", "=", "features", ".", "to", "(", "self", ".", "device", ")", "\n", "return_val", "[", "\"extracted_features\"", "]", "=", "features", "\n", "output", "=", "self", ".", "embedding", "(", "features", ")", "\n", "\n", "", "return_val", "[", "\"prenorm_features\"", "]", "=", "output", "\n", "output", "=", "F", ".", "normalize", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "return_val", "[", "\"embeddings\"", "]", "=", "output", "\n", "\n", "if", "shuffle", ":", "\n", "# Unshuffle", "\n", "            ", "return_val_new", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "return_val", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "val", "=", "val", ".", "to", "(", "self", ".", "device", ")", "\n", "val", "=", "val", "[", "unshuffle_order", "]", "\n", "", "return_val_new", "[", "key", "]", "=", "val", "\n", "", "return_val", "=", "return_val_new", "\n", "\n", "", "if", "\"batch_types\"", "in", "inputs", ":", "\n", "            ", "return_val", "=", "self", ".", "split_dict_by_type", "(", "inputs", "[", "\"batch_types\"", "]", ",", "inputs", "[", "\"batch_sizes\"", "]", ",", "return_val", ")", "\n", "", "return", "return_val", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.forward": [[198, 251], ["copy.copy", "features.clone().detach", "copy.copy.update", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dict", "imagenet_decoder", "features.clone", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "copy.copy.update", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "imagenet_decoder.t", "dict", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update"], ["", "def", "forward", "(", "self", ",", "inputs", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "return_val", "=", "copy", ".", "copy", "(", "inputs", ")", "\n", "features", "=", "return_val", "[", "\"extracted_features\"", "]", "\n", "if", "inputs", "[", "\"data_source\"", "]", "==", "\"IN\"", ":", "\n", "            ", "imagenet_features", "=", "features", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "output", "=", "return_val", "[", "\"embeddings\"", "]", "\n", "if", "\"queue_embeddings\"", "in", "inputs", "and", "\"vince_similarities\"", "not", "in", "inputs", ":", "\n", "            ", "queue_embeddings", "=", "inputs", "[", "\"queue_embeddings\"", "]", "\n", "if", "self", ".", "args", ".", "inter_batch_comparison", ":", "\n", "                ", "if", "inputs", "[", "\"num_frames\"", "]", ">", "1", ":", "\n", "                    ", "mask", "=", "self", ".", "similarity_mask", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "self", ".", "eye_mask", "\n", "\n", "", "if", "self", ".", "args", ".", "self_batch_comparison", ":", "\n", "                    ", "self_similarities", "=", "torch", ".", "mm", "(", "output", ",", "output", ".", "t", "(", ")", ")", "\n", "return_val", ".", "update", "(", "\n", "dict", "(", "\n", "vince_self_similarities_mask", "=", "mask", "[", "\n", ":", "self_similarities", ".", "shape", "[", "0", "]", ",", ":", "self_similarities", ".", "shape", "[", "1", "]", "\n", "]", ",", "\n", "vince_self_similarities", "=", "self_similarities", ",", "\n", ")", "\n", ")", "\n", "", "negs", "=", "torch", ".", "cat", "(", "(", "queue_embeddings", ",", "inputs", "[", "\"queue_vectors\"", "]", ")", ",", "dim", "=", "0", ")", "\n", "l_neg", "=", "torch", ".", "mm", "(", "output", ",", "negs", ".", "t", "(", ")", ")", "\n", "similarities", "=", "l_neg", "\n", "", "else", ":", "\n", "                ", "l_pos", "=", "torch", ".", "bmm", "(", "output", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ",", "queue_embeddings", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", ".", "squeeze", "(", "2", ")", "\n", "negs", "=", "inputs", "[", "\"queue_vectors\"", "]", "\n", "l_neg", "=", "torch", ".", "mm", "(", "output", ",", "negs", ".", "t", "(", ")", ")", "\n", "similarities", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "return_val", "[", "\"vince_l_pos\"", "]", "=", "l_pos", "\n", "mask", "=", "torch", ".", "zeros", "(", "similarities", ".", "shape", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "similarities", ".", "device", ")", "\n", "mask", "[", ":", ",", "0", "]", "=", "True", "\n", "\n", "# If batch is smaller, end elements should be left off", "\n", "", "return_val", ".", "update", "(", "\n", "dict", "(", "\n", "vince_l_neg", "=", "l_neg", ",", "\n", "vince_similarities", "=", "similarities", ",", "\n", "vince_similarities_mask", "=", "mask", "[", ":", "similarities", ".", "shape", "[", "0", "]", ",", ":", "similarities", ".", "shape", "[", "1", "]", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "if", "inputs", "[", "\"data_source\"", "]", "==", "\"IN\"", ":", "\n", "            ", "imagenet_features", "=", "imagenet_features", "[", ":", "inputs", "[", "\"imagenet_labels\"", "]", ".", "shape", "[", "0", "]", "]", "\n", "for", "ii", ",", "imagenet_decoder", "in", "enumerate", "(", "self", ".", "imagenet_decoders", ")", ":", "\n", "                ", "output", "=", "imagenet_decoder", "(", "imagenet_features", ")", "\n", "return_val", "[", "\"imagenet_decoder_%d\"", "%", "ii", "]", "=", "output", "\n", "\n", "", "", "return", "return_val", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.loss": [[252, 291], ["hasattr", "utils.loss_util.similarity_cross_entropy", "network_outputs.update", "range", "range", "utils.loss_util.similarity_cross_entropy", "network_outputs.update", "torch.cross_entropy", "torch.cross_entropy", "range", "utils.loss_util.similarity_cross_entropy.items", "utils.loss_util.similarity_cross_entropy.items"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.utils.loss_util.similarity_cross_entropy", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.loss_util.similarity_cross_entropy", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update"], ["", "def", "loss", "(", "self", ",", "network_outputs", ":", "Optional", "[", "Dict", "]", ")", "->", "Dict", "[", "str", ",", "Optional", "[", "Tuple", "[", "float", ",", "torch", ".", "Tensor", "]", "]", "]", ":", "\n", "        ", "if", "network_outputs", "is", "None", ":", "\n", "            ", "losses", "=", "{", "\"nce_loss\"", ":", "None", "}", "\n", "if", "self", ".", "args", ".", "self_batch_comparison", ":", "\n", "                ", "losses", "[", "\"nce_loss_self\"", "]", "=", "None", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "\"num_imagenet_decoders\"", ")", ":", "\n", "                ", "for", "ii", "in", "range", "(", "self", ".", "num_imagenet_decoders", ")", ":", "\n", "                    ", "losses", "[", "\"imagenet_loss_%d\"", "%", "ii", "]", "=", "None", "\n", "", "", "return", "losses", "\n", "\n", "", "losses", "=", "{", "}", "\n", "temperature", "=", "self", ".", "args", ".", "vince_temperature", "\n", "\n", "if", "\"vince_similarities\"", "in", "network_outputs", ":", "\n", "            ", "similarities", "=", "network_outputs", "[", "\"vince_similarities\"", "]", "\n", "batch_size", "=", "similarities", ".", "shape", "[", "0", "]", "\n", "mask", "=", "network_outputs", "[", "\"vince_similarities_mask\"", "]", "\n", "similarity_losses", "=", "loss_util", ".", "similarity_cross_entropy", "(", "similarities", ",", "temperature", ",", "batch_size", ",", "1", ",", "mask", ")", "\n", "network_outputs", ".", "update", "(", "{", "\"vince_loss_\"", "+", "key", ":", "val", "for", "key", ",", "val", "in", "similarity_losses", ".", "items", "(", ")", "}", ")", "\n", "losses", "[", "\"nce_loss\"", "]", "=", "(", "1.0", ",", "similarity_losses", "[", "\"dist\"", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "self_batch_comparison", ":", "\n", "                ", "mask", "=", "network_outputs", "[", "\"vince_self_similarities_mask\"", "]", "\n", "similarities", "=", "network_outputs", "[", "\"vince_self_similarities\"", "]", "\n", "temperature", "=", "self", ".", "args", ".", "vince_self_temperature", "\n", "similarity_losses", "=", "loss_util", ".", "similarity_cross_entropy", "(", "similarities", ",", "temperature", ",", "batch_size", ",", "1", ",", "mask", ")", "\n", "network_outputs", ".", "update", "(", "{", "\"vince_loss_self_\"", "+", "key", ":", "val", "for", "key", ",", "val", "in", "similarity_losses", ".", "items", "(", ")", "}", ")", "\n", "losses", "[", "\"nce_loss_self\"", "]", "=", "(", "1.0", ",", "similarity_losses", "[", "\"dist\"", "]", ")", "\n", "\n", "", "", "if", "network_outputs", "[", "\"data_source\"", "]", "==", "\"IN\"", ":", "\n", "            ", "imagenet_losses", "=", "[", "\n", "F", ".", "cross_entropy", "(", "network_outputs", "[", "\"imagenet_decoder_%d\"", "%", "ii", "]", ",", "network_outputs", "[", "\"imagenet_labels\"", "]", ")", "\n", "for", "ii", "in", "range", "(", "self", ".", "num_imagenet_decoders", ")", "\n", "]", "\n", "for", "ii", "in", "range", "(", "self", ".", "num_imagenet_decoders", ")", ":", "\n", "                ", "losses", "[", "\"imagenet_loss_%d\"", "%", "ii", "]", "=", "(", "1.0", ",", "imagenet_losses", "[", "ii", "]", ")", "\n", "\n", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.get_metrics": [[292, 350], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "metrics.update", "hasattr", "range", "metrics.update", "range", "mask.sum", "similarities[].view.mean", "metrics.update", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "mask.sum.min", "mask.sum.max", "mask.float", "similarities[].view", "similarities[].view", "torch.max", "torch.max", "torch.max", "torch.max", "neg_sim_max.mean"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update"], ["", "def", "get_metrics", "(", "self", ",", "network_outputs", ":", "Optional", "[", "Dict", "]", ")", "->", "Dict", "[", "str", ",", "Optional", "[", "float", "]", "]", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "metrics", "=", "{", "}", "\n", "if", "network_outputs", "is", "None", ":", "\n", "                ", "metrics", ".", "update", "(", "\n", "{", "\n", "\"nce_accuracy_mean\"", ":", "None", ",", "\n", "\"nce_softmax_weight_mean\"", ":", "None", ",", "\n", "\"cosine_sim\"", ":", "None", ",", "\n", "\"cosine_sim_neg_max\"", ":", "None", ",", "\n", "}", "\n", ")", "\n", "if", "self", ".", "args", ".", "self_batch_comparison", ":", "\n", "                    ", "metrics", ".", "update", "(", "\n", "{", "\"nce_accuracy_self_mean\"", ":", "None", ",", "\"nce_softmax_weight_self_mean\"", ":", "None", ",", "\"cosine_self_sim\"", ":", "None", "}", "\n", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "\"num_imagenet_decoders\"", ")", ":", "\n", "                    ", "for", "ii", "in", "range", "(", "self", ".", "num_imagenet_decoders", ")", ":", "\n", "                        ", "metrics", "[", "\"imagenet_accuracy_%d\"", "%", "ii", "]", "=", "None", "\n", "", "", "return", "metrics", "\n", "\n", "", "for", "key", "in", "[", "\"\"", ",", "\"self_\"", "]", ":", "\n", "                ", "if", "\"vince_\"", "+", "key", "+", "\"similarities\"", "in", "network_outputs", ":", "\n", "                    ", "similarities", "=", "network_outputs", "[", "\"vince_\"", "+", "key", "+", "\"similarities\"", "]", "\n", "batch_size", "=", "similarities", ".", "shape", "[", "0", "]", "\n", "mask", "=", "network_outputs", "[", "\"vince_\"", "+", "key", "+", "\"similarities_mask\"", "]", "\n", "mask_row_sum", "=", "mask", ".", "sum", "(", "-", "1", ")", "\n", "use_float", "=", "mask_row_sum", ".", "min", "(", ")", "!=", "mask_row_sum", ".", "max", "(", ")", "\n", "\n", "if", "use_float", ":", "\n", "                        ", "float_mask", "=", "mask", ".", "float", "(", ")", "\n", "pos_sim", "=", "similarities", "*", "float_mask", "+", "-", "2", "**", "20", "*", "(", "1", "-", "float_mask", ")", "\n", "neg_sim", "=", "similarities", "*", "(", "1", "-", "float_mask", ")", "+", "-", "2", "**", "20", "*", "float_mask", "\n", "", "else", ":", "\n", "                        ", "pos_sim", "=", "similarities", "[", "mask", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "neg_sim", "=", "similarities", "[", "~", "mask", "]", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "", "neg_sim_max", "=", "torch", ".", "max", "(", "neg_sim", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "nce_accuracy_mean", "=", "(", "pos_sim", ">", "neg_sim_max", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "mean", "(", ")", "\n", "nce_softmax_weight", "=", "network_outputs", "[", "\"vince_loss_\"", "+", "key", "+", "\"softmax_weight\"", "]", "\n", "pos_sim_mean", "=", "pos_sim", ".", "mean", "(", ")", "\n", "metrics", ".", "update", "(", "\n", "{", "\n", "\"nce_accuracy_\"", "+", "key", "+", "\"mean\"", ":", "nce_accuracy_mean", ",", "\n", "\"nce_softmax_weight_\"", "+", "key", "+", "\"mean\"", ":", "nce_softmax_weight", ",", "\n", "\"cosine_\"", "+", "key", "+", "\"sim\"", ":", "pos_sim_mean", ",", "\n", "}", "\n", ")", "\n", "if", "key", "is", "\"\"", ":", "\n", "                        ", "metrics", "[", "\"cosine_sim_neg_max\"", "]", "=", "neg_sim_max", ".", "mean", "(", ")", "\n", "\n", "", "", "", "if", "network_outputs", "[", "\"data_source\"", "]", "==", "\"IN\"", ":", "\n", "                ", "for", "ii", "in", "range", "(", "self", ".", "num_imagenet_decoders", ")", ":", "\n", "                    ", "predictions", "=", "torch", ".", "argmax", "(", "network_outputs", "[", "\"imagenet_decoder_%d\"", "%", "ii", "]", ",", "dim", "=", "1", ")", "\n", "acc", "=", "(", "predictions", "==", "network_outputs", "[", "\"imagenet_labels\"", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "mean", "(", ")", "\n", "metrics", "[", "\"imagenet_accuracy_%d\"", "%", "ii", "]", "=", "acc", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.get_image_output": [[351, 571], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.util_functions.to_uint8", "utils.util_functions.to_uint8", "dg_util.python_utils.pytorch_util.split_dim", "dg_util.python_utils.pytorch_util.split_dim", "range", "max", "dg_util.python_utils.drawing.subplot", "min", "range", "range", "len", "utils.util_functions.to_uint8", "utils.util_functions.to_uint8", "torch.softmax", "torch.softmax", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "dg_util.python_utils.pytorch_util.to_numpy", "dg_util.python_utils.pytorch_util.to_numpy", "numpy.random.choice", "dg_util.python_utils.drawing.subplot", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "dg_util.python_utils.pytorch_util.to_numpy", "utils.util_functions.to_uint8", "numpy.random.choice", "int", "dg_util.python_utils.drawing.subplot", "utils.util_functions.to_uint8", "utils.util_functions.to_uint8", "dg_util.python_utils.pytorch_util.to_numpy", "numpy.pad", "dg_util.python_utils.pytorch_util.to_numpy", "numpy.pad", "numpy.random.choice", "numpy.array", "int", "dg_util.python_utils.drawing.subplot", "len", "max", "images.append", "queue_inputs[].copy", "images.append", "min", "inputs[].copy", "images.append", "enumerate", "len", "min", "inputs[].copy", "utils.util_functions.imagenet_label_to_class", "utils.util_functions.imagenet_label_to_class", "dg_util.python_utils.drawing.draw_contrast_text_cv2", "images.append", "numpy.sqrt", "len", "torch.interpolate().permute", "torch.interpolate().permute", "torch.interpolate().permute", "torch.interpolate().permute", "len", "min", "dg_util.python_utils.drawing.subplot", "subplots.append", "numpy.sqrt", "len", "int", "images.append", "len", "dg_util.python_utils.drawing.draw_contrast_text_cv2", "len", "len", "img_src[].copy", "mask_src[].copy", "mask_src[].copy.min", "output.astype.astype.astype", "images.append", "images.append", "len", "queue_inputs[].copy", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "mask_src[].copy.max", "queue_inputs[].copy", "utils.util_functions.to_uint8", "queue_inputs[].copy", "utils.util_functions.to_uint8", "int", "int"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.imagenet_label_to_class", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.util_functions.imagenet_label_to_class", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8"], ["", "", "def", "get_image_output", "(", "self", ",", "network_outputs", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "image_output", "=", "{", "}", "\n", "\n", "# matching image", "\n", "batch_size", ",", "_", ",", "im_height", ",", "im_width", "=", "network_outputs", "[", "\"data\"", "]", ".", "shape", "\n", "\n", "inputs", "=", "network_outputs", "[", "\"data\"", "]", "\n", "queue_inputs", "=", "network_outputs", "[", "\"queue_data\"", "]", "\n", "inputs", "=", "to_uint8", "(", "inputs", ",", "padding", "=", "10", ")", "\n", "queue_inputs", "=", "to_uint8", "(", "queue_inputs", ",", "padding", "=", "10", ")", "\n", "num_frames", "=", "1", "if", "self", ".", "num_frames", "is", "None", "else", "self", ".", "num_frames", "\n", "inputs", "=", "pt_util", ".", "split_dim", "(", "inputs", ",", "0", ",", "-", "1", ",", "num_frames", ")", "\n", "queue_inputs", "=", "pt_util", ".", "split_dim", "(", "queue_inputs", ",", "0", ",", "-", "1", ",", "num_frames", ")", "\n", "images", "=", "[", "]", "\n", "color", "=", "(", "255", ",", "128", ",", "0", ")", "\n", "for", "bb", "in", "range", "(", "min", "(", "len", "(", "inputs", ")", ",", "max", "(", "2", "*", "num_frames", ",", "int", "(", "32", "/", "num_frames", ")", ")", ")", ")", ":", "\n", "                ", "for", "ss", "in", "range", "(", "num_frames", ")", ":", "\n", "                    ", "image", "=", "inputs", "[", "bb", ",", "ss", "]", "\n", "images", ".", "append", "(", "image", ")", "\n", "", "for", "ss", "in", "range", "(", "num_frames", ")", ":", "\n", "                    ", "image", "=", "queue_inputs", "[", "bb", ",", "ss", "]", ".", "copy", "(", ")", "\n", "image", "[", ":", "10", ",", ":", ",", ":", "]", "=", "color", "\n", "image", "[", "-", "10", ":", ",", ":", ",", ":", "]", "=", "color", "\n", "image", "[", ":", ",", ":", "10", ",", ":", "]", "=", "color", "\n", "image", "[", ":", ",", "-", "10", ":", ",", ":", "]", "=", "color", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "", "", "n_cols", "=", "max", "(", "2", "*", "num_frames", ",", "8", ")", "\n", "n_rows", "=", "len", "(", "images", ")", "//", "n_cols", "\n", "subplot", "=", "drawing", ".", "subplot", "(", "images", ",", "n_rows", ",", "n_cols", ",", "im_width", ",", "im_height", ")", "\n", "image_output", "[", "\"images/inputs\"", "]", "=", "subplot", "\n", "\n", "if", "\"vince_similarities\"", "in", "network_outputs", ":", "\n", "# Nearest neighbor image", "\n", "                ", "inputs", "=", "network_outputs", "[", "\"data\"", "]", "\n", "queue_inputs", "=", "network_outputs", "[", "\"queue_data\"", "]", "\n", "\n", "inputs", "=", "to_uint8", "(", "inputs", ",", "padding", "=", "10", ")", "\n", "queue_inputs", "=", "to_uint8", "(", "queue_inputs", ",", "padding", "=", "10", ")", "\n", "\n", "vince_similarities", "=", "network_outputs", "[", "\"vince_similarities\"", "]", "\n", "logits", "=", "vince_similarities", "/", "self", ".", "args", ".", "vince_temperature", "\n", "vince_softmax", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "queue_images", "=", "network_outputs", "[", "\"queue_images\"", "]", "\n", "\n", "n_neighbors", "=", "9", "\n", "topk_val", ",", "topk_ind", "=", "torch", ".", "topk", "(", "vince_softmax", ",", "n_neighbors", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "topk_ind", "=", "pt_util", ".", "to_numpy", "(", "topk_ind", ")", "\n", "topk_val", "=", "pt_util", ".", "to_numpy", "(", "topk_val", ")", "\n", "\n", "label", "=", "network_outputs", "[", "\"vince_similarities_mask\"", "]", "\n", "\n", "images", "=", "[", "]", "\n", "rand_order", "=", "np", ".", "random", ".", "choice", "(", "batch_size", ",", "min", "(", "batch_size", ",", "n_neighbors", "+", "1", ")", ",", "replace", "=", "False", ")", "\n", "for", "bb", "in", "rand_order", ":", "\n", "                    ", "query_image", "=", "inputs", "[", "bb", "]", ".", "copy", "(", ")", "\n", "color", "=", "(", "90", ",", "46", ",", "158", ")", "\n", "if", "network_outputs", "[", "\"batch_type\"", "]", "==", "\"images\"", ":", "\n", "# Different colors for imagenet vs videos.", "\n", "                        ", "color", "=", "(", "24", ",", "178", ",", "24", ")", "\n", "", "query_image", "[", ":", "10", ",", ":", ",", ":", "]", "=", "color", "\n", "query_image", "[", "-", "10", ":", ",", ":", ",", ":", "]", "=", "color", "\n", "query_image", "[", ":", ",", ":", "10", ",", ":", "]", "=", "color", "\n", "query_image", "[", ":", ",", "-", "10", ":", ",", ":", "]", "=", "color", "\n", "images", ".", "append", "(", "query_image", ")", "\n", "found_neighbor", "=", "False", "\n", "for", "nn", ",", "neighbor", "in", "enumerate", "(", "topk_ind", "[", "bb", "]", ")", ":", "\n", "                        ", "color", "=", "(", "128", ",", "128", ",", "128", ")", "\n", "score", "=", "topk_val", "[", "bb", ",", "nn", "]", "\n", "\n", "if", "self", ".", "args", ".", "inter_batch_comparison", ":", "\n", "                            ", "if", "neighbor", "<", "batch_size", ":", "\n", "                                ", "image", "=", "queue_inputs", "[", "neighbor", "]", ".", "copy", "(", ")", "\n", "data_source", "=", "network_outputs", "[", "\"data_source\"", "]", "\n", "", "else", ":", "\n", "# Offset by batch_size for the inter-batch negatives", "\n", "                                ", "offset", "=", "batch_size", "\n", "image", "=", "to_uint8", "(", "queue_images", "[", "neighbor", "-", "offset", "]", ",", "padding", "=", "10", ")", "\n", "data_source", "=", "network_outputs", "[", "\"queue_data_sources\"", "]", "[", "neighbor", "-", "offset", "]", "\n", "", "", "else", ":", "\n", "                            ", "if", "neighbor", "==", "0", ":", "\n", "                                ", "image", "=", "queue_inputs", "[", "bb", "]", ".", "copy", "(", ")", "\n", "data_source", "=", "network_outputs", "[", "\"data_source\"", "]", "\n", "", "else", ":", "\n", "# Offset by 1 for the positive examples", "\n", "                                ", "image", "=", "to_uint8", "(", "queue_images", "[", "neighbor", "-", "1", "]", ",", "padding", "=", "10", ")", "\n", "data_source", "=", "network_outputs", "[", "\"queue_data_sources\"", "]", "[", "neighbor", "-", "1", "]", "\n", "\n", "", "", "if", "label", "[", "bb", ",", "neighbor", "]", ":", "\n", "                            ", "if", "self", ".", "args", ".", "inter_batch_comparison", "and", "neighbor", "<", "batch_size", ":", "\n", "                                ", "found_neighbor", "=", "True", "\n", "color", "=", "(", "255", ",", "128", ",", "0", ")", "\n", "", "elif", "neighbor", "==", "0", ":", "\n", "                                ", "found_neighbor", "=", "True", "\n", "color", "=", "(", "255", ",", "128", ",", "0", ")", "\n", "", "elif", "data_source", "==", "\"self\"", ":", "\n", "                                ", "color", "=", "(", "144", ",", "72", ",", "0", ")", "\n", "", "else", ":", "\n", "                                ", "color", "=", "(", "0", ",", "0", ",", "203", ")", "\n", "", "", "elif", "data_source", "==", "\"self\"", ":", "\n", "                            ", "color", "=", "(", "255", ",", "0", ",", "193", ")", "\n", "", "if", "not", "found_neighbor", "and", "nn", "==", "n_neighbors", "-", "1", ":", "\n", "# Last one in row, couldn't match proper, put in just to show what it looks like.", "\n", "                            ", "image", "=", "queue_inputs", "[", "bb", "]", ".", "copy", "(", ")", "\n", "color", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "\n", "", "if", "color", "==", "(", "128", ",", "128", ",", "128", ")", ":", "\n", "                            ", "color", "=", "(", "90", ",", "46", ",", "158", ")", "\n", "if", "data_source", "==", "\"IN\"", ":", "\n", "# Different colors for imagenet vs videos.", "\n", "                                ", "color", "=", "(", "24", ",", "178", ",", "24", ")", "\n", "", "", "image", "[", ":", "10", ",", ":", ",", ":", "]", "=", "color", "\n", "image", "[", "-", "10", ":", ",", ":", ",", ":", "]", "=", "color", "\n", "image", "[", ":", ",", ":", "10", ",", ":", "]", "=", "color", "\n", "image", "[", ":", ",", "-", "10", ":", ",", ":", "]", "=", "color", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "", "", "n_rows", "=", "n_neighbors", "+", "1", "\n", "n_cols", "=", "n_neighbors", "+", "1", "\n", "subplot", "=", "drawing", ".", "subplot", "(", "images", ",", "n_rows", ",", "n_cols", ",", "im_width", ",", "im_height", ")", "\n", "image_output", "[", "\"images/outputs\"", "]", "=", "subplot", "\n", "\n", "", "if", "network_outputs", "[", "\"data_source\"", "]", "==", "\"IN\"", ":", "\n", "# imagenet image", "\n", "                ", "predictions", "=", "torch", ".", "argmax", "(", "network_outputs", "[", "\"imagenet_decoder_0\"", "]", ",", "dim", "=", "1", ")", "\n", "labels", "=", "network_outputs", "[", "\"imagenet_labels\"", "]", "\n", "acc", "=", "pt_util", ".", "to_numpy", "(", "predictions", "==", "labels", ")", "\n", "batch_size", "=", "acc", ".", "shape", "[", "0", "]", "\n", "\n", "inputs", "=", "network_outputs", "[", "\"data\"", "]", "[", ":", "batch_size", "]", "\n", "inputs", "=", "to_uint8", "(", "inputs", ",", "padding", "=", "10", ")", "\n", "\n", "images", "=", "[", "]", "\n", "rand_order", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "inputs", ")", ",", "min", "(", "len", "(", "inputs", ")", ",", "25", ")", ",", "replace", "=", "False", ")", "\n", "scale_factor", "=", "im_width", "/", "320.0", "\n", "\n", "for", "bb", "in", "rand_order", ":", "\n", "                    ", "correct", "=", "acc", "[", "bb", "]", "\n", "image", "=", "inputs", "[", "bb", "]", ".", "copy", "(", ")", "\n", "pred_cls", "=", "util_functions", ".", "imagenet_label_to_class", "(", "predictions", "[", "bb", "]", ")", "\n", "gt_cls", "=", "util_functions", ".", "imagenet_label_to_class", "(", "labels", "[", "bb", "]", ")", "\n", "if", "correct", ":", "\n", "                        ", "cls_str", "=", "pred_cls", "\n", "", "else", ":", "\n", "                        ", "cls_str", "=", "\"Pred: %s Actual %s\"", "%", "(", "pred_cls", ",", "gt_cls", ")", "\n", "\n", "", "if", "correct", ":", "\n", "                        ", "image", "[", ":", "10", ",", ":", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "image", "[", "-", "10", ":", ",", ":", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "image", "[", ":", ",", ":", "10", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "image", "[", ":", ",", "-", "10", ":", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "", "else", ":", "\n", "                        ", "image", "[", ":", "10", ",", ":", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "image", "[", "-", "10", ":", ",", ":", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "image", "[", ":", ",", ":", "10", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "image", "[", ":", ",", "-", "10", ":", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "", "image", "=", "drawing", ".", "draw_contrast_text_cv2", "(", "image", ",", "\"P: \"", "+", "pred_cls", ",", "(", "10", ",", "10", "+", "int", "(", "30", "*", "scale_factor", ")", ")", ")", "\n", "if", "not", "correct", ":", "\n", "                        ", "image", "=", "drawing", ".", "draw_contrast_text_cv2", "(", "\n", "image", ",", "\"GT: \"", "+", "gt_cls", ",", "(", "10", ",", "10", "+", "int", "(", "2", "*", "30", "*", "scale_factor", ")", ")", "\n", ")", "\n", "", "images", ".", "append", "(", "image", ")", "\n", "\n", "", "n_cols", "=", "int", "(", "np", ".", "sqrt", "(", "len", "(", "images", ")", ")", ")", "\n", "n_rows", "=", "len", "(", "images", ")", "//", "n_cols", "\n", "\n", "subplot", "=", "drawing", ".", "subplot", "(", "images", ",", "n_rows", ",", "n_cols", ",", "im_width", ",", "im_height", ")", "\n", "image_output", "[", "\"images/imagenet_outputs\"", "]", "=", "subplot", "\n", "\n", "", "if", "\"attention_masks\"", "in", "network_outputs", ":", "\n", "# Attention image", "\n", "                ", "inputs", "=", "network_outputs", "[", "\"data\"", "]", "\n", "inputs", "=", "to_uint8", "(", "inputs", ",", "padding", "=", "10", ")", "\n", "\n", "queue_inputs", "=", "network_outputs", "[", "\"queue_data\"", "]", "\n", "queue_inputs", "=", "to_uint8", "(", "queue_inputs", ",", "padding", "=", "10", ")", "\n", "\n", "attention_masks", "=", "network_outputs", "[", "\"attention_masks\"", "]", "\n", "attention_masks", "=", "pt_util", ".", "to_numpy", "(", "\n", "F", ".", "interpolate", "(", "attention_masks", ",", "(", "im_height", ",", "im_width", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ".", "permute", "(", "\n", "0", ",", "2", ",", "3", ",", "1", "\n", ")", "\n", ")", "\n", "attention_masks", "=", "np", ".", "pad", "(", "attention_masks", ",", "(", "(", "0", ",", "0", ")", ",", "(", "10", ",", "10", ")", ",", "(", "10", ",", "10", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\"constant\"", ")", "\n", "\n", "queue_attention_masks", "=", "network_outputs", "[", "\"queue_attention_masks\"", "]", "\n", "queue_attention_masks", "=", "pt_util", ".", "to_numpy", "(", "\n", "F", ".", "interpolate", "(", "\n", "queue_attention_masks", ",", "(", "im_height", ",", "im_width", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", "\n", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", ")", "\n", "queue_attention_masks", "=", "np", ".", "pad", "(", "queue_attention_masks", ",", "(", "(", "0", ",", "0", ")", ",", "(", "10", ",", "10", ")", ",", "(", "10", ",", "10", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\"constant\"", ")", "\n", "\n", "rand_order", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "inputs", ")", ",", "min", "(", "len", "(", "inputs", ")", ",", "25", ")", ",", "replace", "=", "False", ")", "\n", "\n", "subplots", "=", "[", "]", "\n", "attention_color", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "bb", "in", "rand_order", ":", "\n", "                    ", "images", "=", "[", "]", "\n", "for", "img_src", ",", "mask_src", "in", "(", "(", "inputs", ",", "attention_masks", ")", ",", "(", "queue_inputs", ",", "queue_attention_masks", ")", ")", ":", "\n", "                        ", "image", "=", "img_src", "[", "bb", "]", ".", "copy", "(", ")", "\n", "attention_mask", "=", "mask_src", "[", "bb", "]", ".", "copy", "(", ")", "\n", "attention_mask", "-=", "attention_mask", ".", "min", "(", ")", "\n", "attention_mask", "/=", "attention_mask", ".", "max", "(", ")", "+", "1e-8", "\n", "output", "=", "(", "attention_mask", "*", "attention_color", ")", "+", "(", "1", "-", "attention_mask", ")", "*", "image", "\n", "output", "=", "output", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "images", ".", "append", "(", "output", ")", "\n", "", "subplot", "=", "drawing", ".", "subplot", "(", "images", ",", "2", ",", "2", ",", "im_width", ",", "im_height", ")", "\n", "subplots", ".", "append", "(", "subplot", ")", "\n", "\n", "", "n_cols", "=", "int", "(", "np", ".", "sqrt", "(", "len", "(", "subplots", ")", ")", ")", "\n", "n_rows", "=", "len", "(", "subplots", ")", "//", "n_cols", "\n", "\n", "subplot", "=", "drawing", ".", "subplot", "(", "subplots", ",", "n_rows", ",", "n_cols", ",", "im_width", "*", "2", ",", "im_height", "*", "2", ",", "border", "=", "5", ")", "\n", "image_output", "[", "\"images/attention\"", "]", "=", "subplot", "\n", "\n", "", "", "return", "image_output", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.__init__": [[574, 581], ["models.base_model.BaseModel.__init__", "copy.deepcopy", "vince_model.VinceQueueModel.queue_network.parameters"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "encoder", ":", "VinceModel", ")", ":", "\n", "        ", "super", "(", "VinceQueueModel", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "queue_network", "=", "copy", ".", "deepcopy", "(", "encoder", ")", "\n", "self", ".", "vince_momentum", "=", "self", ".", "args", ".", "vince_momentum", "\n", "\n", "for", "param", "in", "self", ".", "queue_network", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to": [[582, 586], ["super().to", "vince_model.VinceQueueModel.queue_network.to"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "VinceQueueModel", ",", "self", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "queue_network", ".", "to", "(", "device", ")", "\n", "self", ".", "_device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.param_update": [[587, 593], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "vince_model.VinceQueueModel.queue_network.vince_parameters", "encoder_model.vince_parameters", "zip", "queue_param.mul_().add_", "param.data.to", "queue_param.mul_"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.vince_parameters", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.vince_parameters", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "param_update", "(", "self", ",", "encoder_model", ":", "VinceModel", ",", "momentum", ":", "float", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "source_params", "=", "self", ".", "queue_network", ".", "vince_parameters", "(", ")", "\n", "target_params", "=", "encoder_model", ".", "vince_parameters", "(", ")", "\n", "for", "queue_param", ",", "param", "in", "zip", "(", "source_params", ",", "target_params", ")", ":", "\n", "                ", "queue_param", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "momentum", ",", "param", ".", "data", ".", "to", "(", "device", "=", "queue_param", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.vince_update": [[594, 596], ["vince_model.VinceQueueModel.param_update"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.param_update"], ["", "", "", "def", "vince_update", "(", "self", ",", "encoder_model", ")", ":", "\n", "        ", "self", ".", "param_update", "(", "encoder_model", ",", "self", ".", "vince_momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.forward": [[597, 614], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "vince_model.VinceQueueModel.queue_network.get_embeddings", "outputs.items", "return_vals.append", "isinstance", "val.detach.detach.detach"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.get_embeddings"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "jigsaw", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "queue_data", "=", "inputs", "[", "\"queue_data\"", "]", "\n", "output_mini_batches", "=", "self", ".", "queue_network", ".", "get_embeddings", "(", "\n", "{", "\"data\"", ":", "queue_data", ",", "\"batch_types\"", ":", "inputs", "[", "\"batch_types\"", "]", ",", "\"batch_sizes\"", ":", "inputs", "[", "\"batch_sizes\"", "]", "}", ",", "\n", "jigsaw", "=", "jigsaw", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", ")", "\n", "return_vals", "=", "[", "]", "\n", "for", "outputs", "in", "output_mini_batches", ":", "\n", "                ", "return_val", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "outputs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", ":", "\n", "                        ", "val", "=", "val", ".", "detach", "(", ")", "# detach just to be extra careful", "\n", "", "return_val", "[", "\"queue_\"", "+", "key", "]", "=", "val", "\n", "", "return_vals", ".", "append", "(", "return_val", ")", "\n", "", "return", "return_vals", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.__init__": [[15, 23], ["models.end_task_base_model.EndTaskBaseModel.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "num_input_channels", ",", "hidden_size", ",", "ind_to_label_func", "=", "None", ")", ":", "\n", "        ", "super", "(", "Kinetics400Model", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "num_classes", "=", "self", ".", "args", ".", "end_task_classifier_num_classes", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "ind_to_label_func", "=", "ind_to_label_func", "\n", "self", ".", "number_of_layers", "=", "1", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "num_input_channels", ",", "self", ".", "hidden_size", ",", "batch_first", "=", "True", ",", "num_layers", "=", "self", ".", "number_of_layers", ")", "\n", "self", ".", "action_unembed", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.forward": [[24, 29], ["end_task_kinetics_400_model.Kinetics400Model.lstm", "end_task_kinetics_400_model.Kinetics400Model.action_unembed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "output", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "lstm", "(", "features", ")", "# To see the whole sequence and embed it into a hidden vector", "\n", "last_hidden", "=", "hidden", "[", "-", "1", "]", "\n", "action_pred", "=", "self", ".", "action_unembed", "(", "last_hidden", ")", "\n", "return", "action_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.loss": [[30, 35], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "network_outputs", ")", ":", "\n", "        ", "if", "network_outputs", "is", "None", ":", "\n", "            ", "return", "{", "\"kinetics_400_action_loss\"", ":", "None", "}", "\n", "", "loss", "=", "F", ".", "cross_entropy", "(", "network_outputs", "[", "\"outputs\"", "]", ",", "network_outputs", "[", "\"labels\"", "]", ")", "\n", "return", "{", "\"kinetics_400_action_loss\"", ":", "(", "1.0", ",", "loss", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_metrics": [[36, 44], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["None"], ["", "def", "get_metrics", "(", "self", ",", "network_outputs", ":", "Optional", "[", "Dict", "]", ")", "->", "Dict", "[", "str", ",", "Optional", "[", "float", "]", "]", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "network_outputs", "is", "None", ":", "\n", "                ", "return", "{", "\"accuracy\"", ":", "None", "}", "\n", "\n", "", "predictions", "=", "torch", ".", "argmax", "(", "network_outputs", "[", "\"outputs\"", "]", ",", "dim", "=", "1", ")", "\n", "accuracy", "=", "(", "predictions", "==", "network_outputs", "[", "\"labels\"", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_image_output": [[45, 98], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "dg_util.python_utils.pytorch_util.to_numpy", "utils.util_functions.to_uint8", "dg_util.python_utils.pytorch_util.split_dim", "numpy.random.choice", "dg_util.python_utils.drawing.subplot", "len", "min", "inputs[].copy", "end_task_kinetics_400_model.Kinetics400Model.ind_to_label_func", "end_task_kinetics_400_model.Kinetics400Model.ind_to_label_func", "enumerate", "len", "len", "images.append", "dg_util.python_utils.drawing.draw_contrast_text_cv2", "dg_util.python_utils.drawing.draw_contrast_text_cv2", "int", "int"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.ind_to_label_func", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.ind_to_label_func"], ["", "", "def", "get_image_output", "(", "self", ",", "network_outputs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "image_output", "=", "{", "}", "\n", "predictions", "=", "torch", ".", "argmax", "(", "network_outputs", "[", "\"outputs\"", "]", ",", "dim", "=", "1", ")", "\n", "labels", "=", "network_outputs", "[", "\"labels\"", "]", "\n", "\n", "batch_size", "=", "network_outputs", "[", "\"batch_size\"", "]", "\n", "seq_len", "=", "network_outputs", "[", "\"num_frames\"", "]", "\n", "\n", "acc", "=", "pt_util", ".", "to_numpy", "(", "predictions", "==", "labels", ")", "\n", "\n", "inputs", "=", "network_outputs", "[", "\"data\"", "]", "\n", "inputs", "=", "to_uint8", "(", "inputs", ")", "\n", "im_height", ",", "im_width", "=", "inputs", ".", "shape", "[", "1", ":", "3", "]", "\n", "\n", "inputs", "=", "pt_util", ".", "split_dim", "(", "inputs", ",", "0", ",", "batch_size", ",", "seq_len", ")", "\n", "\n", "rand_order", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "inputs", ")", ",", "min", "(", "len", "(", "inputs", ")", ",", "seq_len", ")", ",", "replace", "=", "False", ")", "\n", "\n", "scale_factor", "=", "im_width", "/", "320.0", "\n", "images", "=", "[", "]", "\n", "for", "bb", "in", "rand_order", ":", "\n", "                ", "correct", "=", "acc", "[", "bb", "]", "\n", "image_seq", "=", "inputs", "[", "bb", "]", ".", "copy", "(", ")", "\n", "pred_cls", "=", "self", ".", "ind_to_label_func", "(", "predictions", "[", "bb", "]", ")", "\n", "gt_cls", "=", "self", ".", "ind_to_label_func", "(", "labels", "[", "bb", "]", ")", "\n", "for", "ii", ",", "image", "in", "enumerate", "(", "image_seq", ")", ":", "\n", "                    ", "if", "correct", ":", "\n", "                        ", "image", "[", ":", "10", ",", ":", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "image", "[", "-", "10", ":", ",", ":", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "image", "[", ":", ",", ":", "10", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "image", "[", ":", ",", "-", "10", ":", ",", ":", "]", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "", "else", ":", "\n", "                        ", "image", "[", ":", "10", ",", ":", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "image", "[", "-", "10", ":", ",", ":", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "image", "[", ":", ",", ":", "10", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "image", "[", ":", ",", "-", "10", ":", ",", ":", "]", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "", "if", "ii", "==", "0", ":", "\n", "                        ", "image", "=", "drawing", ".", "draw_contrast_text_cv2", "(", "\n", "image", ",", "\"P: \"", "+", "pred_cls", ",", "(", "10", ",", "10", "+", "int", "(", "30", "*", "scale_factor", ")", ")", "\n", ")", "\n", "if", "not", "correct", ":", "\n", "                            ", "image", "=", "drawing", ".", "draw_contrast_text_cv2", "(", "\n", "image", ",", "\"GT: \"", "+", "gt_cls", ",", "(", "10", ",", "10", "+", "int", "(", "2", "*", "30", "*", "scale_factor", ")", ")", "\n", ")", "\n", "", "", "images", ".", "append", "(", "image", ")", "\n", "\n", "", "", "n_cols", "=", "seq_len", "\n", "n_rows", "=", "len", "(", "images", ")", "//", "n_cols", "\n", "\n", "subplot", "=", "drawing", ".", "subplot", "(", "images", ",", "n_rows", ",", "n_cols", ",", "im_width", ",", "im_height", ")", "\n", "image_output", "[", "\"images/classifier_outputs\"", "]", "=", "subplot", "\n", "return", "image_output", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.base_model.BaseModel.__init__": [[9, 12], ["dg_util.python_utils.pytorch_util.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.base_model.BaseModel.restore": [[13, 20], ["super().restore"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.base_model.BaseModel.restore"], ["", "def", "restore", "(", "self", ",", "skip_filter", "=", "None", ")", "->", "int", ":", "\n", "        ", "iteration", "=", "0", "\n", "if", "self", ".", "args", ".", "restore", ":", "\n", "            ", "iteration", "=", "super", "(", "BaseModel", ",", "self", ")", ".", "restore", "(", "\n", "self", ".", "args", ".", "checkpoint_dir", ",", "self", ".", "args", ".", "saved_variable_prefix", ",", "self", ".", "args", ".", "new_variable_prefix", ",", "skip_filter", "\n", ")", "\n", "", "return", "iteration", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.models.base_model.BaseModel.save": [[21, 27], ["dg_util.python_utils.pytorch_util.save", "os.path.join", "dg_util.python_utils.pytorch_util.save"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.save", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.save"], ["", "def", "save", "(", "self", ",", "iteration", ",", "num_to_keep", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "save", ":", "\n", "            ", "pt_util", ".", "save", "(", "self", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "checkpoint_dir", ",", "constants", ".", "TIME_STR", ")", ",", "num_to_keep", ",", "iteration", ")", "\n", "if", "self", ".", "saves", ">", "0", "and", "self", ".", "saves", "%", "self", ".", "args", ".", "long_save_frequency", "==", "0", ":", "\n", "                ", "pt_util", ".", "save", "(", "self", ",", "self", ".", "args", ".", "long_save_checkpoint_dir", ",", "-", "1", ",", "iteration", ")", "\n", "", "self", ".", "saves", "+=", "1", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.BasicBlock.__init__": [[57, 75], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__", "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.conv3x3", "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "\"BasicBlock only supports groups=1 and base_width=64\"", ")", "\n", "# if dilation > 1:", "\n", "# raise NotImplementedError(\"Dilation > 1 not supported in BasicBlock\")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.BasicBlock.forward": [[76, 93], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.Bottleneck.__init__": [[99, 116], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__", "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.conv1x1", "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.conv3x3", "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.0", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.Bottleneck.forward": [[117, 138], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.ResNet.__init__": [[141, 197], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__", "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "num_classes", "=", "1000", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", "\n", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.ResNet._make_layer": [[198, 230], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.ResNet._forward_impl": [[231, 248], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.ResNet.forward": [[249, 251], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.conv3x3": [[34, 45], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.conv1x1": [[48, 51], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet._resnet": [[253, 259], ["resnet.ResNet", "torch.hub.load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnet18": [[261, 270], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download_scripts to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "\"resnet18\"", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnet34": [[272, 281], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download_scripts to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "\"resnet34\"", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnet50": [[283, 292], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download_scripts to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "\"resnet50\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnet101": [[294, 303], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download_scripts to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "\"resnet101\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnet152": [[305, 314], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download_scripts to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "\"resnet152\"", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnext50_32x4d": [[316, 327], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download_scripts to stderr\n    \"\"\"", "\n", "kwargs", "[", "\"groups\"", "]", "=", "32", "\n", "kwargs", "[", "\"width_per_group\"", "]", "=", "4", "\n", "return", "_resnet", "(", "\"resnext50_32x4d\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnext101_32x8d": [[329, 340], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download_scripts to stderr\n    \"\"\"", "\n", "kwargs", "[", "\"groups\"", "]", "=", "32", "\n", "kwargs", "[", "\"width_per_group\"", "]", "=", "8", "\n", "return", "_resnet", "(", "\"resnext101_32x8d\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.wide_resnet50_2": [[342, 357], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download_scripts to stderr\n    \"\"\"", "\n", "kwargs", "[", "\"width_per_group\"", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "\"wide_resnet50_2\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.wide_resnet101_2": [[359, 374], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download_scripts to stderr\n    \"\"\"", "\n", "kwargs", "[", "\"width_per_group\"", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "\"wide_resnet101_2\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.Backbone.__init__": [[22, 38], ["torch.nn.Module.__init__", "list", "backbone_models.Backbone.model.children", "len", "print", "len", "print", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model_children", "=", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "\n", "self", ".", "final_layer", "=", "final_layer", "\n", "if", "self", ".", "final_layer", "is", "None", ":", "\n", "            ", "self", ".", "final_layer", "=", "len", "(", "self", ".", "model_children", ")", "\n", "", "if", "self", ".", "final_layer", "!=", "0", ":", "\n", "            ", "if", "self", ".", "final_layer", "<", "0", ":", "\n", "                ", "self", ".", "final_layer", "=", "len", "(", "self", ".", "model_children", ")", "+", "final_layer", "\n", "", "print", "(", "\"Output layer in backbone\"", ",", "self", ".", "model_children", "[", "self", ".", "final_layer", "-", "1", "]", ")", "\n", "if", "self", ".", "final_layer", "<", "len", "(", "self", ".", "model_children", ")", ":", "\n", "                ", "print", "(", "\"Layer after output layer in backbone\"", ",", "self", ".", "model_children", "[", "self", ".", "final_layer", "]", ")", "\n", "\n", "", "", "self", ".", "output_channels", "=", "self", ".", "model", ".", "output_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.Backbone.forward": [[39, 55], ["enumerate", "backbone_models.Backbone.model.children", "child", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "final_layer", "=", "None", ")", ":", "\n", "# final_layer == 0 returns the input", "\n", "# final_layer == 1 returns the output after the first layer", "\n", "# final_layer == -1 returns the output before the last layer", "\n", "        ", "if", "final_layer", "is", "None", ":", "\n", "            ", "if", "self", ".", "final_layer", "is", "not", "None", ":", "\n", "                ", "final_layer", "=", "self", ".", "final_layer", "\n", "", "else", ":", "\n", "                ", "final_layer", "=", "len", "(", "self", ".", "model_children", ")", "+", "1", "\n", "", "", "if", "final_layer", "<", "0", ":", "\n", "            ", "final_layer", "=", "len", "(", "self", ".", "model_children", ")", "+", "final_layer", "\n", "", "for", "cc", ",", "child", "in", "enumerate", "(", "self", ".", "model", ".", "children", "(", ")", ")", ":", "\n", "            ", "if", "cc", ">=", "final_layer", ":", "\n", "                ", "return", "x", "\n", "", "x", "=", "child", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.ResNet18.__init__": [[58, 62], ["torchvision.models.resnet18", "backbone_models.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnet18", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "resnet18", "(", "args", ".", "use_imagenet_weights", ")", "\n", "model", ".", "output_channels", "=", "512", "\n", "super", "(", "ResNet18", ",", "self", ")", ".", "__init__", "(", "args", ",", "model", ",", "final_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.ResNet34.__init__": [[65, 69], ["torchvision.models.resnet34", "backbone_models.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnet34", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "resnet34", "(", "args", ".", "use_imagenet_weights", ")", "\n", "model", ".", "output_channels", "=", "512", "\n", "super", "(", "ResNet34", ",", "self", ")", ".", "__init__", "(", "args", ",", "model", ",", "final_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.ResNet50.__init__": [[72, 76], ["torchvision.models.resnet50", "backbone_models.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnet50", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "resnet50", "(", "args", ".", "use_imagenet_weights", ")", "\n", "model", ".", "output_channels", "=", "2048", "\n", "super", "(", "ResNet50", ",", "self", ")", ".", "__init__", "(", "args", ",", "model", ",", "final_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.ResNet50SiamFCDilated.__init__": [[79, 83], ["torchvision.models.resnet50", "backbone_models.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnet50", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "resnet50", "(", "args", ".", "use_imagenet_weights", ",", "replace_stride_with_dilation", "=", "[", "False", ",", "True", ",", "True", "]", ")", "\n", "model", ".", "output_channels", "=", "2048", "\n", "super", "(", "ResNet50SiamFCDilated", ",", "self", ")", ".", "__init__", "(", "args", ",", "model", ",", "final_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.ResNet18SiamFCDilated.__init__": [[86, 90], ["models.building_blocks.resnet.resnet18", "backbone_models.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.resnet.resnet18", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "model", "=", "my_resnet", ".", "resnet18", "(", "args", ".", "use_imagenet_weights", ",", "replace_stride_with_dilation", "=", "[", "False", ",", "True", ",", "True", "]", ")", "\n", "model", ".", "output_channels", "=", "512", "\n", "super", "(", "ResNet18SiamFCDilated", ",", "self", ")", ".", "__init__", "(", "args", ",", "model", ",", "final_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.EfficientNetB0.__init__": [[93, 97], ["efficientnet_pytorch.EfficientNet.from_name", "backbone_models.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "model", "=", "EfficientNet", ".", "from_name", "(", "\"efficientnet-b0\"", ")", "\n", "model", ".", "output_channels", "=", "1280", "\n", "super", "(", "EfficientNetB0", ",", "self", ")", ".", "__init__", "(", "args", ",", "model", ",", "final_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.EfficientNetB1.__init__": [[100, 104], ["efficientnet_pytorch.EfficientNet.from_name", "backbone_models.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "model", "=", "EfficientNet", ".", "from_name", "(", "\"efficientnet-b1\"", ")", "\n", "model", ".", "output_channels", "=", "1280", "\n", "super", "(", "EfficientNetB1", ",", "self", ")", ".", "__init__", "(", "args", ",", "model", ",", "final_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.EfficientNetB2.__init__": [[107, 111], ["efficientnet_pytorch.EfficientNet.from_name", "backbone_models.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "model", "=", "EfficientNet", ".", "from_name", "(", "\"efficientnet-b2\"", ")", "\n", "model", ".", "output_channels", "=", "1408", "\n", "super", "(", "EfficientNetB2", ",", "self", ")", ".", "__init__", "(", "args", ",", "model", ",", "final_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.EfficientNetB3.__init__": [[114, 118], ["efficientnet_pytorch.EfficientNet.from_name", "backbone_models.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "model", "=", "EfficientNet", ".", "from_name", "(", "\"efficientnet-b3\"", ")", "\n", "model", ".", "output_channels", "=", "1536", "\n", "super", "(", "EfficientNetB3", ",", "self", ")", ".", "__init__", "(", "args", ",", "model", ",", "final_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.building_blocks.backbone_models.EfficientNetB4.__init__": [[121, 125], ["efficientnet_pytorch.EfficientNet.from_name", "backbone_models.Backbone.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "final_layer", "=", "None", ")", ":", "\n", "        ", "model", "=", "EfficientNet", ".", "from_name", "(", "\"efficientnet-b4\"", ")", "\n", "model", ".", "output_channels", "=", "1792", "\n", "super", "(", "EfficientNetB4", ",", "self", ")", ".", "__init__", "(", "args", ",", "model", ",", "final_layer", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.youtube_scrape.download_kinetics._read_csv": [[27, 33], ["open", "csv.DictReader", "dict"], "function", ["None"], ["def", "_read_csv", "(", "csv_file", ")", ":", "\n", "    ", "with", "open", "(", "csv_file", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "f", ")", "\n", "all_rows", "=", "[", "dict", "(", "row", ")", "for", "row", "in", "reader", "]", "\n", "keys", "=", "reader", ".", "fieldnames", "\n", "", "return", "keys", ",", "all_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.youtube_scrape.download_kinetics.download_youtube_video": [[35, 67], ["int", "int", "dg_util.python_utils.youtube_utils.download_video", "os.path.join", "os.makedirs", "print", "dg_util.python_utils.video_utils.get_frames_by_time", "dg_util.python_utils.video_utils.remove_border", "enumerate", "os.remove", "len", "max", "dg_util.python_utils.video_utils.get_frames_by_time", "dg_util.python_utils.misc_util.max_resize", "cv2.imwrite", "traceback.print_exc", "int", "os.path.join", "int", "float"], "function", ["None"], ["", "def", "download_youtube_video", "(", "args", ")", ":", "\n", "    ", "row", ",", "subset_name", "=", "args", "\n", "video_id", "=", "row", "[", "\"youtube_id\"", "]", "\n", "time_start", "=", "int", "(", "row", "[", "\"time_start\"", "]", ")", "\n", "time_end", "=", "int", "(", "row", "[", "\"time_end\"", "]", ")", "\n", "video_path", "=", "youtube_utils", ".", "download_video", "(", "video_id", ",", "\"/tmp/ytdl/\"", ")", "\n", "if", "not", "video_path", ":", "\n", "        ", "print", "(", "\"Failed_to_download\"", ",", "video_id", ")", "\n", "return", "\n", "# Storing each video in its own folder is bad for the OS. Storing them all in one folder is also bad.", "\n", "# Storing them in 4096 subfolders seems to be good.", "\n", "", "path_for_images", "=", "os", ".", "path", ".", "join", "(", "image_folder", ",", "subset_name", ",", "video_id", "[", ":", "2", "]", ")", "\n", "os", ".", "makedirs", "(", "path_for_images", ",", "exist_ok", "=", "True", ")", "\n", "try", ":", "\n", "        ", "frames", "=", "video_utils", ".", "get_frames_by_time", "(", "video_path", ",", "start_time", "=", "time_start", ",", "end_time", "=", "time_end", ",", "fps", "=", "FPS", ")", "\n", "remainder", "=", "(", "time_end", "-", "time_start", ")", "*", "FPS", "-", "len", "(", "frames", ")", "\n", "if", "remainder", ">", "0", ":", "\n", "# Sometimes the annotations are wrong and give timestamps beyond the end of the video.", "\n", "            ", "time_start", "=", "max", "(", "0", ",", "time_start", "-", "int", "(", "float", "(", "remainder", ")", "/", "FPS", ")", ")", "\n", "time_end", "=", "time_end", "+", "int", "(", "remainder", "/", "FPS", ")", "\n", "frames", "=", "video_utils", ".", "get_frames_by_time", "(", "video_path", ",", "start_time", "=", "time_start", ",", "end_time", "=", "time_end", ",", "fps", "=", "FPS", ")", "\n", "# remove the black boundaries from YouTube videos that may be automatically added", "\n", "", "frames", "=", "video_utils", ".", "remove_border", "(", "frames", ")", "\n", "\n", "# resize the images and save them", "\n", "for", "frame_ind", ",", "frame", "in", "enumerate", "(", "frames", ")", ":", "\n", "            ", "frame", "=", "misc_util", ".", "max_resize", "(", "frame", ",", "MAX_SIDE_SIZE", ",", "always_resize", "=", "False", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "path_for_images", ",", "\"%s_%06d.jpg\"", "%", "(", "video_id", ",", "frame_ind", ")", ")", ",", "frame", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "", "", "except", "Exception", ":", "\n", "        ", "traceback", ".", "print_exc", "(", ")", "\n", "", "finally", ":", "\n", "        ", "os", ".", "remove", "(", "video_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.youtube_scrape.download_kinetics.download_youtube_videos": [[69, 89], ["multiprocessing.Pool", "glob.glob", "glob.glob", "set", "print", "print", "list", "print", "list", "random.shuffle", "list", "os.path.join", "os.path.join", "set.add", "len", "len", "filter", "len", "zip", "tqdm.tqdm", "mp.Pool.imap", "len", "len"], "function", ["None"], ["", "", "def", "download_youtube_videos", "(", "data_dict_rows", ",", "subset_name", ")", ":", "\n", "    ", "pool", "=", "mp", ".", "Pool", "(", "NUM_THREADS", ")", "\n", "\n", "images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_folder", ",", "subset_name", ",", "\"*/*.jpg\"", ")", ")", "\n", "images", "+=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "dataset_folder", ",", "\"images\"", ",", "\"%sfps\"", "%", "FPS", ",", "subset_name", ",", "\"*/*.jpg\"", ")", ")", "\n", "\n", "done_ids", "=", "set", "(", ")", "\n", "for", "image", "in", "images", ":", "\n", "        ", "vid_id", "=", "image", "[", "-", "22", ":", "-", "11", "]", "\n", "done_ids", ".", "add", "(", "vid_id", ")", "\n", "\n", "", "print", "(", "\"starting len\"", ",", "len", "(", "data_dict_rows", ")", ")", "\n", "print", "(", "\"done\"", ",", "len", "(", "done_ids", ")", ")", "\n", "del", "images", "\n", "data_dict_rows", "=", "list", "(", "filter", "(", "lambda", "row", ":", "row", "[", "\"youtube_id\"", "]", "not", "in", "done_ids", ",", "data_dict_rows", ")", ")", "\n", "del", "done_ids", "\n", "print", "(", "\"new len\"", ",", "len", "(", "data_dict_rows", ")", ")", "\n", "video_args", "=", "list", "(", "zip", "(", "data_dict_rows", ",", "[", "subset_name", "]", "*", "len", "(", "data_dict_rows", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "video_args", ")", "\n", "list", "(", "tqdm", ".", "tqdm", "(", "pool", ".", "imap", "(", "download_youtube_video", ",", "video_args", ")", ",", "total", "=", "len", "(", "video_args", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.youtube_scrape.download_kinetics.main": [[91, 98], ["print", "download_kinetics._read_csv", "os.makedirs", "download_kinetics.download_youtube_videos", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.youtube_scrape.download_kinetics._read_csv", "home.repos.pwc.inspect_result.danielgordon10_vince.youtube_scrape.download_kinetics.download_youtube_videos"], ["", "def", "main", "(", ")", ":", "\n", "# for subset_name in ['train', 'validate', 'test']:", "\n", "    ", "for", "subset_name", "in", "[", "\"validate\"", ",", "\"test\"", "]", ":", "\n", "        ", "print", "(", "\"subset\"", ",", "subset_name", ")", "\n", "keys", ",", "all_rows", "=", "_read_csv", "(", "os", ".", "path", ".", "join", "(", "annotation_folder", ",", "subset_name", "+", "\".csv\"", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "image_folder", ",", "subset_name", ")", ",", "exist_ok", "=", "True", ")", "\n", "download_youtube_videos", "(", "all_rows", ",", "subset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.youtube_scrape.cache_video_dataset.main": [[17, 66], ["arg_parser.parse_args", "sorted", "os.path.exists", "os.path.exists", "datasets.video_cacher_dataset.VideoCacherDataset", "torch.utils.data.DataLoader", "os.makedirs", "open", "open", "tqdm.tqdm", "glob.glob", "os.path.join", "ignore_set.extend", "os.path.join", "ignore_set.extend", "os.path.join", "os.path.join", "zip", "line.strip().split", "open", "line.strip", "line.strip", "line.strip", "open", "open", "open.write", "open.flush", "os.path.join", "os.path.join", "open.write", "open.flush"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.parse_args"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "arg_parser", ".", "parse_args", "(", ")", "\n", "\n", "data_subset", "=", "\"val\"", "\n", "args", ".", "data_path", "=", "\"/home/xkcd/datasets/r2v2_large_with_ids_debug\"", "\n", "\n", "# Good Params", "\n", "args", ".", "num_frames_to_cache", "=", "4", "\n", "args", ".", "video_sample_rate", "=", "150", "\n", "args", ".", "max_video_length", "=", "10", "\n", "args", ".", "only_use_shots", "=", "False", "\n", "args", ".", "max_side_length", "=", "480", "\n", "\n", "# Other stuff", "\n", "args", ".", "batch_size", "=", "1", "\n", "\n", "# Stops MKL from taking lots of memory because of resizes and such (torch kernels).", "\n", "os", ".", "environ", "[", "\"LRU_CACHE_CAPACITY\"", "]", "=", "\"1\"", "\n", "\n", "urls", "=", "sorted", "(", "glob", ".", "glob", "(", "\"youtube_scrape/urls*%s.csv\"", "%", "data_subset", ")", ",", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "video_ids", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "'\"'", ")", "[", "1", "]", "for", "line", "in", "open", "(", "urls", "[", "-", "1", "]", ")", "]", "\n", "\n", "ignore_set", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"failed_video_ids.txt\"", ")", ")", ":", "\n", "        ", "ignore_set", ".", "extend", "(", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"failed_video_ids.txt\"", ")", ")", "]", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"no_images_video_ids.txt\"", ")", ")", ":", "\n", "        ", "ignore_set", ".", "extend", "(", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"no_images_video_ids.txt\"", ")", ")", "]", ")", "\n", "\n", "", "yt_dataset", "=", "VideoCacherDataset", "(", "args", ",", "video_ids", ",", "data_subset", ",", "ignore_set", "=", "ignore_set", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "yt_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "False", "\n", ")", "\n", "\n", "os", ".", "makedirs", "(", "args", ".", "data_path", ",", "exist_ok", "=", "True", ")", "\n", "failed_video_ids_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"failed_video_ids.txt\"", ")", ",", "\"a+\"", ")", "\n", "no_image_video_ids_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "\"no_images_video_ids.txt\"", ")", ",", "\"a+\"", ")", "\n", "\n", "for", "data", "in", "tqdm", ".", "tqdm", "(", "train_loader", ")", ":", "\n", "\n", "        ", "for", "video_id", ",", "error_code", "in", "zip", "(", "*", "data", ")", ":", "\n", "            ", "if", "error_code", "==", "0", ":", "\n", "                ", "continue", "\n", "", "elif", "error_code", "==", "1", ":", "\n", "                ", "failed_video_ids_file", ".", "write", "(", "video_id", "+", "\"\\n\"", ")", "\n", "failed_video_ids_file", ".", "flush", "(", ")", "\n", "", "elif", "error_code", ">", "1", ":", "\n", "                ", "no_image_video_ids_file", ".", "write", "(", "video_id", "+", "\"\\n\"", ")", "\n", "no_image_video_ids_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.youtube_scrape.search_youtube_for_urls.search": [[14, 30], ["queue.put", "video_urls.extend", "len", "dg_util.python_utils.youtube_utils.search_youtube", "len"], "function", ["None"], ["def", "search", "(", "search_tuple", ":", "str", ",", "num_results", "=", "1000", ")", ":", "\n", "    ", "synset_id", ",", "search_text", "=", "search_tuple", "\n", "video_urls", "=", "[", "]", "\n", "count", "=", "0", "\n", "while", "len", "(", "video_urls", ")", "==", "0", "and", "count", "<", "10", ":", "\n", "        ", "count", "+=", "1", "\n", "try", ":", "\n", "# Find videos which are Creative Commons, < 4 minutes, sort by relevance.", "\n", "            ", "search_ids", "=", "youtube_utils", ".", "search_youtube", "(", "search_text", ",", "num_results", ",", "\"CAASBhABGAEwAQ%253D%253D\"", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "break", "\n", "", "video_urls", ".", "extend", "(", "search_ids", ")", "\n", "if", "len", "(", "video_urls", ")", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "", "", "queue", ".", "put", "(", "(", "search_tuple", ",", "video_urls", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.youtube_scrape.search_youtube_for_urls.write_to_file": [[32, 62], ["open", "open", "print", "sorted", "random.shuffle", "lines_val.sort", "lines_train.sort", "open.write", "open.close", "open.write", "open.close", "queue.get", "len", "vid_ids.keys", "len", "vid_ids[].append", "dg_util.python_utils.misc_util.get_time_str", "dg_util.python_utils.misc_util.get_time_str"], "function", ["None"], ["", "def", "write_to_file", "(", ")", ":", "\n", "    ", "out_file_train", "=", "open", "(", "\"youtube_scrape/urls_\"", "+", "misc_util", ".", "get_time_str", "(", ")", "+", "\"_relevance_train.csv\"", ",", "\"w\"", ")", "\n", "out_file_val", "=", "open", "(", "\"youtube_scrape/urls_\"", "+", "misc_util", ".", "get_time_str", "(", ")", "+", "\"_relevance_val.csv\"", ",", "\"w\"", ")", "\n", "vid_ids", "=", "{", "}", "\n", "num_add_attempt", "=", "0", "\n", "while", "True", ":", "\n", "        ", "search_tuple", ",", "urls", "=", "queue", ".", "get", "(", ")", "\n", "if", "urls", "is", "None", ":", "\n", "            ", "break", "\n", "", "if", "len", "(", "urls", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "for", "url", "in", "urls", ":", "\n", "            ", "num_add_attempt", "+=", "1", "\n", "if", "url", "not", "in", "vid_ids", ":", "\n", "                ", "vid_ids", "[", "url", "]", "=", "[", "]", "\n", "", "vid_ids", "[", "url", "]", ".", "append", "(", "\": \"", ".", "join", "(", "search_tuple", ")", ")", "\n", "", "", "print", "(", "\"num total\"", ",", "num_add_attempt", ",", "\"num final\"", ",", "len", "(", "vid_ids", ")", ")", "\n", "sorted_vid_ids", "=", "sorted", "(", "vid_ids", ".", "keys", "(", ")", ")", "\n", "random", ".", "shuffle", "(", "sorted_vid_ids", ")", "\n", "lines_val", "=", "sorted_vid_ids", "[", ":", "65536", "]", "\n", "lines_train", "=", "sorted_vid_ids", "[", "65536", ":", "]", "\n", "lines_val", ".", "sort", "(", ")", "\n", "lines_train", ".", "sort", "(", ")", "\n", "\n", "lines_train", "=", "[", "'\"'", "+", "key", "+", "'\", \"'", "+", "'\", \"'", ".", "join", "(", "vid_ids", "[", "key", "]", ")", "+", "'\"'", "for", "key", "in", "lines_train", "]", "\n", "lines_val", "=", "[", "'\"'", "+", "key", "+", "'\", \"'", "+", "'\", \"'", ".", "join", "(", "vid_ids", "[", "key", "]", ")", "+", "'\"'", "for", "key", "in", "lines_val", "]", "\n", "out_file_train", ".", "write", "(", "\"\\n\"", ".", "join", "(", "lines_train", ")", "+", "\"\\n\"", ")", "\n", "out_file_train", ".", "close", "(", ")", "\n", "out_file_val", ".", "write", "(", "\"\\n\"", ".", "join", "(", "lines_val", ")", "+", "\"\\n\"", ")", "\n", "out_file_val", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.EndTaskTrackingSolver.__init__": [[50, 54], ["end_task_tracking_solver.parse_args", "solvers.end_task_base_solver.EndTaskBaseSolver.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.parse_args", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "train_logger", "=", "None", ",", "val_logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "parse_args", "(", ")", "\n", "args", ".", "cfg", "=", "self", ".", "cfg", "\n", "super", "(", "EndTaskTrackingSolver", ",", "self", ")", ".", "__init__", "(", "args", ",", "train_logger", ",", "val_logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.EndTaskTrackingSolver.make_decoder_network": [[55, 57], ["models.end_task_tracking_model.SiamFCTrackingModel"], "methods", ["None"], ["", "def", "make_decoder_network", "(", "self", ",", "args", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "        ", "return", "SiamFCTrackingModel", "(", "args", ",", "self", ".", "cfg", ",", "self", ".", "feature_extractor", ".", "output_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.EndTaskTrackingSolver.setup_model_param_groups": [[58, 67], ["end_task_tracking_solver.EndTaskTrackingSolver.model.parameters"], "methods", ["None"], ["", "def", "setup_model_param_groups", "(", "self", ")", ":", "\n", "        ", "wd", "=", "0", "if", "self", ".", "freeze_feature_extractor", "else", "1e-4", "\n", "param_group", "=", "{", "\n", "\"params\"", ":", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "self", ".", "args", ".", "base_lr", ",", "\n", "\"weight_decay\"", ":", "wd", ",", "\n", "\"initial_lr\"", ":", "self", ".", "args", ".", "base_lr", ",", "\n", "}", "\n", "return", "[", "param_group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.EndTaskTrackingSolver.setup_other": [[68, 70], ["None"], "methods", ["None"], ["", "def", "setup_other", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.EndTaskTrackingSolver.convert_batch": [[71, 81], ["dict", "super().convert_batch", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.convert_batch"], ["", "def", "convert_batch", "(", "self", ",", "batch", ",", "batch_type", ":", "str", "=", "\"train\"", ")", "->", "Dict", ":", "\n", "        ", "exemplar_images", ",", "track_images", ",", "labels", "=", "batch", "\n", "batch", "=", "dict", "(", "\n", "data", "=", "exemplar_images", ",", "\n", "track_data", "=", "track_images", ",", "\n", "labels", "=", "labels", ",", "\n", "data_source", "=", "\"GOT10k\"", ",", "\n", "batch_type", "=", "(", "\"images\"", ",", "len", "(", "track_images", ")", ")", ",", "\n", ")", "\n", "return", "super", "(", "EndTaskTrackingSolver", ",", "self", ")", ".", "convert_batch", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.EndTaskTrackingSolver.forward": [[82, 99], ["end_task_tracking_solver.EndTaskTrackingSolver.model", "end_task_tracking_solver.EndTaskTrackingSolver.update", "end_task_tracking_solver.EndTaskTrackingSolver.feature_extractor.extract_features", "end_task_tracking_solver.EndTaskTrackingSolver.feature_extractor.extract_features", "exemplar_features[].to", "track_features[].to", "torch.no_grad", "end_task_tracking_solver.EndTaskTrackingSolver.feature_extractor.extract_features", "end_task_tracking_solver.EndTaskTrackingSolver.feature_extractor.extract_features", "exemplar_features[].detach().to", "track_features[].detach().to", "exemplar_features[].detach", "track_features[].detach"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "freeze_feature_extractor", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "exemplar_features", "=", "self", ".", "feature_extractor", ".", "extract_features", "(", "batch", "[", "\"data\"", "]", ")", "\n", "track_features", "=", "self", ".", "feature_extractor", ".", "extract_features", "(", "batch", "[", "\"track_data\"", "]", ")", "\n", "exemplar_features", "=", "exemplar_features", "[", "\"spatial_features\"", "]", ".", "detach", "(", ")", ".", "to", "(", "self", ".", "model", ".", "device", ")", "\n", "track_features", "=", "track_features", "[", "\"spatial_features\"", "]", ".", "detach", "(", ")", ".", "to", "(", "self", ".", "model", ".", "device", ")", "\n", "", "", "else", ":", "\n", "            ", "exemplar_features", "=", "self", ".", "feature_extractor", ".", "extract_features", "(", "batch", "[", "\"data\"", "]", ")", "\n", "track_features", "=", "self", ".", "feature_extractor", ".", "extract_features", "(", "batch", "[", "\"track_data\"", "]", ")", "\n", "exemplar_features", "=", "exemplar_features", "[", "\"spatial_features\"", "]", ".", "to", "(", "self", ".", "model", ".", "device", ")", "\n", "track_features", "=", "track_features", "[", "\"spatial_features\"", "]", ".", "to", "(", "self", ".", "model", ".", "device", ")", "\n", "\n", "", "output", "=", "self", ".", "model", "(", "exemplar_features", ",", "track_features", ")", "\n", "output", "=", "{", "\"responses\"", ":", "output", "}", "\n", "output", ".", "update", "(", "batch", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.EndTaskTrackingSolver.run_eval": [[100, 117], ["torch.no_grad", "end_task_tracking_solver.EndTaskTrackingSolver.feature_extractor.eval", "end_task_tracking_solver.EndTaskTrackingSolver.model.eval", "siamfc_pytorch.tracker.SiamNet", "siamfc_pytorch.tracker.TrackerSiamFC", "got10k.experiments.ExperimentOTB", "time.time", "got10k.experiments.ExperimentOTB.run", "time.time", "os.listdir", "got10k.experiments.ExperimentOTB.report", "print", "os.path.join", "str"], "methods", ["None"], ["", "def", "run_eval", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "feature_extractor", ".", "eval", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "tracker_net", "=", "SiamNet", "(", "self", ".", "feature_extractor", ",", "self", ".", "model", ")", "\n", "name", "=", "\"SiamFC_\"", "+", "self", ".", "model_name", "+", "\"_\"", "+", "self", ".", "args", ".", "description", "\n", "tracker", "=", "TrackerSiamFC", "(", "name", ",", "self", ".", "args", ",", "self", ".", "cfg", ",", "tracker_net", ")", "\n", "version", "=", "2015", "\n", "experiment", "=", "experiments", ".", "ExperimentOTB", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data_path", ",", "\"otb100\"", ")", ")", "# , version=version)", "\n", "# experiment = experiments.ExperimentVOT(os.path.join(self.args.data_path, \"vot\"), version=version, read_image=False)", "\n", "# experiment = experiments.ExperimentGOT10k(self.args.data_path)", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "experiment", ".", "run", "(", "tracker", ",", "visualize", "=", "False", ")", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "tracker_names", "=", "os", ".", "listdir", "(", "\"results/OTB%s\"", "%", "str", "(", "version", ")", ")", "\n", "experiment", ".", "report", "(", "tracker_names", ")", "\n", "print", "(", "\"time\"", ",", "t_end", "-", "t_start", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.parse_args": [[13, 47], ["kwargs.items", "cfg.update"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update"], ["def", "parse_args", "(", "**", "kwargs", ")", ":", "\n", "# default parameters", "\n", "    ", "cfg", "=", "{", "\n", "# basic parameters", "\n", "\"out_scale\"", ":", "0.001", ",", "\n", "\"exemplar_sz\"", ":", "120", ",", "\n", "\"instance_sz\"", ":", "255", ",", "\n", "\"context\"", ":", "0.5", ",", "\n", "# inference parameters", "\n", "\"scale_num\"", ":", "3", ",", "\n", "\"scale_step\"", ":", "1.0375", ",", "\n", "\"scale_lr\"", ":", "0.59", ",", "\n", "\"scale_penalty\"", ":", "0.9745", ",", "\n", "\"window_influence\"", ":", "0.176", ",", "\n", "\"response_sz\"", ":", "17", ",", "\n", "\"response_up\"", ":", "16", ",", "\n", "\"positive_label_width\"", ":", "5", ",", "\n", "\"total_stride\"", ":", "8", ",", "\n", "# train parameters", "\n", "\"epoch_num\"", ":", "50", ",", "\n", "\"batch_size\"", ":", "8", ",", "\n", "\"num_workers\"", ":", "32", ",", "\n", "\"initial_lr\"", ":", "1e-2", ",", "\n", "\"ultimate_lr\"", ":", "1e-5", ",", "\n", "\"weight_decay\"", ":", "5e-4", ",", "\n", "\"momentum\"", ":", "0.9", ",", "\n", "\"r_pos\"", ":", "16", ",", "\n", "\"r_neg\"", ":", "0", ",", "\n", "}", "\n", "\n", "for", "key", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "cfg", ":", "\n", "            ", "cfg", ".", "update", "(", "{", "key", ":", "val", "}", ")", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.__init__": [[34, 55], ["queue.Queue", "solvers.base_solver.BaseSolver.__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "train_logger", "=", "None", ",", "val_logger", "=", "None", ")", ":", "\n", "# Declare these before super call because super sets them up.", "\n", "        ", "self", ".", "num_frames", "=", "args", ".", "num_frames", "\n", "self", ".", "train_loaders", "=", "[", "]", "\n", "self", ".", "train_batch_iterators", "=", "[", "]", "\n", "self", ".", "train_loader_counts", "=", "[", "]", "\n", "self", ".", "train_batch_fns", "=", "[", "]", "\n", "self", ".", "train_data_names", "=", "[", "]", "\n", "self", ".", "val_loaders", "=", "[", "]", "\n", "self", ".", "val_batch_fns", "=", "[", "]", "\n", "self", ".", "val_data_names", "=", "[", "]", "\n", "self", ".", "vince_queue", ":", "StorageQueue", "=", "None", "\n", "self", ".", "queue_model", ":", "VinceQueueModel", "=", "None", "\n", "self", ".", "batch_count", "=", "0", "\n", "self", ".", "batch_queue", "=", "Queue", "(", "2", ")", "\n", "self", ".", "prefetch_thread", "=", "None", "\n", "self", ".", "kill_thread", "=", "False", "\n", "self", ".", "cifar_dataset", ":", "NPZDataset", "=", "None", "\n", "self", ".", "drawn_this_epoch", "=", "False", "\n", "\n", "super", "(", "VinceSolver", ",", "self", ")", ".", "__init__", "(", "args", ",", "train_logger", ",", "val_logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.setup_dataloader": [[56, 175], ["print", "time.time", "print", "print", "time.time", "print", "dg_util.python_utils.persistent_dataloader.PersistentDataLoader", "iter", "vince_solver.VinceSolver.train_loaders.append", "vince_solver.VinceSolver.train_batch_iterators.append", "vince_solver.VinceSolver.train_batch_fns.append", "vince_solver.VinceSolver.train_loader_counts.append", "vince_solver.VinceSolver.train_data_names.append", "dg_util.python_utils.persistent_dataloader.PersistentDataLoader", "vince_solver.VinceSolver.val_loaders.append", "vince_solver.VinceSolver.val_batch_fns.append", "vince_solver.VinceSolver.val_data_names.append", "dg_util.python_utils.persistent_dataloader.PersistentDataLoader", "iter", "vince_solver.VinceSolver.train_loaders.append", "vince_solver.VinceSolver.train_batch_iterators.append", "vince_solver.VinceSolver.train_batch_fns.append", "vince_solver.VinceSolver.train_loader_counts.append", "vince_solver.VinceSolver.train_data_names.append", "dg_util.python_utils.persistent_dataloader.PersistentDataLoader", "vince_solver.VinceSolver.val_loaders.append", "vince_solver.VinceSolver.val_batch_fns.append", "vince_solver.VinceSolver.val_data_names.append", "dg_util.python_utils.persistent_dataloader.PersistentDataLoader.set_dataset", "print", "dg_util.python_utils.persistent_dataloader.PersistentDataLoader.set_dataset", "print", "dg_util.python_utils.persistent_dataloader.PersistentDataLoader.set_dataset", "print", "dg_util.python_utils.persistent_dataloader.PersistentDataLoader.set_dataset", "print", "torchvision.ImageFolder", "len", "len", "torchvision.ImageFolder", "len", "len", "vince_solver.VinceSolver.args.dataset", "len", "len", "vince_solver.VinceSolver.args.dataset", "len", "len", "min", "min", "min", "min", "time.time", "os.path.join", "os.path.join", "time.time", "vince_solver.VinceSolver.args.transform", "vince_solver.VinceSolver.args.transform", "vince_solver.VinceSolver.args.transform", "vince_solver.VinceSolver.args.transform"], "methods", ["None"], ["", "def", "setup_dataloader", "(", "self", ")", ":", "\n", "        ", "torch_devices", "=", "self", ".", "args", ".", "pytorch_gpu_ids", "\n", "device", "=", "torch_devices", "[", "0", "]", "\n", "\n", "# Can use multiple datasets at once.", "\n", "# Delayed start. Create data loaders to make the processes, then create the datasets so they don't overwhelm", "\n", "# shared memory.", "\n", "print", "(", "\"creating data processes\"", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "args", ".", "use_imagenet", ":", "\n", "            ", "imagenet_train_loader", "=", "PersistentDataLoader", "(", "\n", "dataset", "=", "None", ",", "\n", "num_workers", "=", "min", "(", "self", ".", "args", ".", "num_workers", ",", "40", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "device", "=", "device", ",", "\n", "never_ending", "=", "True", ",", "\n", ")", "\n", "batch_iterator", "=", "iter", "(", "imagenet_train_loader", ")", "\n", "batch_fn", "=", "self", ".", "get_imagenet_batch", "\n", "self", ".", "train_loaders", ".", "append", "(", "imagenet_train_loader", ")", "\n", "self", ".", "train_batch_iterators", ".", "append", "(", "batch_iterator", ")", "\n", "self", ".", "train_batch_fns", ".", "append", "(", "batch_fn", ")", "\n", "self", ".", "train_loader_counts", ".", "append", "(", "0", ")", "\n", "self", ".", "train_data_names", ".", "append", "(", "\"ImageNet\"", ")", "\n", "\n", "imagenet_val_loader", "=", "PersistentDataLoader", "(", "\n", "dataset", "=", "None", ",", "num_workers", "=", "min", "(", "self", ".", "args", ".", "num_workers", ",", "10", ")", ",", "pin_memory", "=", "False", ",", "device", "=", "device", "\n", ")", "\n", "self", ".", "val_loaders", ".", "append", "(", "imagenet_val_loader", ")", "\n", "self", ".", "val_batch_fns", ".", "append", "(", "self", ".", "process_imagenet_data", ")", "\n", "self", ".", "val_data_names", ".", "append", "(", "\"ImageNet\"", ")", "\n", "\n", "", "if", "not", "self", ".", "args", ".", "disable_dataloader", "and", "self", ".", "args", ".", "use_videos", ":", "\n", "            ", "video_train_loader", "=", "PersistentDataLoader", "(", "\n", "dataset", "=", "None", ",", "\n", "num_workers", "=", "min", "(", "self", ".", "args", ".", "num_workers", ",", "40", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "device", "=", "device", ",", "\n", "never_ending", "=", "True", ",", "\n", ")", "\n", "batch_iterator", "=", "iter", "(", "video_train_loader", ")", "\n", "batch_fn", "=", "self", ".", "get_video_batch", "\n", "self", ".", "train_loaders", ".", "append", "(", "video_train_loader", ")", "\n", "self", ".", "train_batch_iterators", ".", "append", "(", "batch_iterator", ")", "\n", "self", ".", "train_batch_fns", ".", "append", "(", "batch_fn", ")", "\n", "self", ".", "train_loader_counts", ".", "append", "(", "0", ")", "\n", "self", ".", "train_data_names", ".", "append", "(", "\"R2V2\"", ")", "\n", "\n", "video_val_loader", "=", "PersistentDataLoader", "(", "\n", "dataset", "=", "None", ",", "num_workers", "=", "min", "(", "self", ".", "args", ".", "num_workers", ",", "20", ")", ",", "pin_memory", "=", "False", ",", "device", "=", "device", "\n", ")", "\n", "self", ".", "val_loaders", ".", "append", "(", "video_val_loader", ")", "\n", "self", ".", "val_batch_fns", ".", "append", "(", "self", ".", "process_video_data", ")", "\n", "self", ".", "val_data_names", ".", "append", "(", "\"R2V2\"", ")", "\n", "\n", "", "print", "(", "\"done in %.3f\"", "%", "(", "time", ".", "time", "(", ")", "-", "t_start", ")", ")", "\n", "print", "(", "\"creating datasets\"", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Now create the actual datasets", "\n", "if", "not", "self", ".", "args", ".", "disable_dataloader", "and", "self", ".", "args", ".", "use_imagenet", ":", "\n", "            ", "imagenet_train_loader", ".", "set_dataset", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "imagenet_data_path", ",", "\"train\"", ")", ",", "\n", "transform", "=", "self", ".", "args", ".", "transform", "(", "self", ".", "input_size", ",", "\"train\"", ",", "2", "*", "self", ".", "num_frames", ",", "stack", "=", "False", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "//", "self", ".", "num_frames", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", "\n", "print", "(", "\n", "\"Loaded ImageNet train\"", ",", "\n", "len", "(", "imagenet_train_loader", ".", "dataset", ")", ",", "\n", "\"images\"", ",", "\n", "len", "(", "imagenet_train_loader", ")", ",", "\n", "\"batches\"", ",", "\n", ")", "\n", "imagenet_val_loader", ".", "set_dataset", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "imagenet_data_path", ",", "\"val\"", ")", ",", "\n", "transform", "=", "self", ".", "args", ".", "transform", "(", "self", ".", "input_size", ",", "\"val\"", ",", "2", "*", "self", ".", "num_frames", ",", "stack", "=", "False", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "//", "self", ".", "num_frames", ",", "\n", "shuffle", "=", "True", ",", "\n", ")", "\n", "print", "(", "\n", "\"Loaded ImageNet val\"", ",", "len", "(", "imagenet_val_loader", ".", "dataset", ")", ",", "\"images\"", ",", "len", "(", "imagenet_val_loader", ")", ",", "\"batches\"", "\n", ")", "\n", "\n", "", "if", "not", "self", ".", "args", ".", "disable_dataloader", "and", "self", ".", "args", ".", "use_videos", ":", "\n", "            ", "video_train_loader", ".", "set_dataset", "(", "\n", "self", ".", "args", ".", "dataset", "(", "\n", "self", ".", "args", ",", "\n", "\"train\"", ",", "\n", "transform", "=", "self", ".", "args", ".", "transform", "(", "self", ".", "input_size", ",", "\"train\"", ")", ",", "\n", "num_images_to_return", "=", "self", ".", "num_frames", ",", "\n", ")", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "//", "self", ".", "num_frames", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "self", ".", "args", ".", "dataset", ".", "collate_fn", ",", "\n", "worker_init_fn", "=", "self", ".", "args", ".", "dataset", ".", "worker_init_fn", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "print", "(", "\"Loaded Video train\"", ",", "len", "(", "video_train_loader", ".", "dataset", ")", ",", "\"images\"", ",", "len", "(", "video_train_loader", ")", ",", "\"batches\"", ")", "\n", "\n", "# Use train transform to make it equally hard.", "\n", "video_val_loader", ".", "set_dataset", "(", "\n", "self", ".", "args", ".", "dataset", "(", "\n", "self", ".", "args", ",", "\n", "\"val\"", ",", "\n", "transform", "=", "self", ".", "args", ".", "transform", "(", "self", ".", "input_size", ",", "\"train\"", ")", ",", "\n", "num_images_to_return", "=", "self", ".", "num_frames", ",", "\n", ")", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "//", "self", ".", "num_frames", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "self", ".", "args", ".", "dataset", ".", "collate_fn", ",", "\n", "worker_init_fn", "=", "self", ".", "args", ".", "dataset", ".", "worker_init_fn", ",", "\n", ")", "\n", "print", "(", "\"Loaded Video val\"", ",", "len", "(", "video_val_loader", ".", "dataset", ")", ",", "\"images\"", ",", "len", "(", "video_val_loader", ")", ",", "\"batches\"", ")", "\n", "", "print", "(", "\"done in %.3f\"", "%", "(", "time", ".", "time", "(", ")", "-", "t_start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.iterations_per_epoch": [[176, 179], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "iterations_per_epoch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "args", ".", "iterations_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.process_imagenet_data": [[180, 201], ["dg_util.python_utils.pytorch_util.remove_dim", "dg_util.python_utils.pytorch_util.remove_dim", "labels.repeat_interleave.repeat_interleave.repeat_interleave", "len", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "process_imagenet_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "images", ",", "labels", "=", "data", "\n", "data", "=", "images", "[", ":", "self", ".", "num_frames", "]", "\n", "queue_data", "=", "images", "[", "self", ".", "num_frames", ":", "]", "\n", "if", "self", ".", "num_frames", ">", "1", ":", "\n", "            ", "data", "=", "pt_util", ".", "remove_dim", "(", "torch", ".", "stack", "(", "data", ",", "dim", "=", "1", ")", ",", "1", ")", "\n", "queue_data", "=", "pt_util", ".", "remove_dim", "(", "torch", ".", "stack", "(", "queue_data", ",", "dim", "=", "1", ")", ",", "1", ")", "\n", "labels", "=", "labels", ".", "repeat_interleave", "(", "self", ".", "num_frames", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "data", "[", "0", "]", "\n", "queue_data", "=", "queue_data", "[", "0", "]", "\n", "", "batch", "=", "{", "\n", "\"data\"", ":", "data", ",", "\n", "\"queue_data\"", ":", "queue_data", ",", "\n", "\"imagenet_labels\"", ":", "labels", ",", "\n", "\"data_source\"", ":", "\"IN\"", ",", "\n", "\"num_frames\"", ":", "self", ".", "num_frames", ",", "\n", "\"batch_type\"", ":", "\"images\"", ",", "\n", "\"batch_size\"", ":", "len", "(", "data", ")", ",", "\n", "}", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.get_imagenet_batch": [[202, 211], ["next", "vince_solver.VinceSolver.process_imagenet_data", "print", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.process_imagenet_data"], ["", "def", "get_imagenet_batch", "(", "self", ",", "loader_id", ")", ":", "\n", "        ", "data", "=", "next", "(", "self", ".", "train_batch_iterators", "[", "loader_id", "]", ")", "\n", "self", ".", "train_loader_counts", "[", "loader_id", "]", "+=", "1", "\n", "if", "self", ".", "train_loader_counts", "[", "loader_id", "]", "==", "(", "len", "(", "self", ".", "train_loaders", "[", "loader_id", "]", ")", "+", "1", ")", ":", "\n", "# Check this because using never-ending persistent dataloader which never throws stop iteration.", "\n", "            ", "self", ".", "train_loader_counts", "[", "loader_id", "]", "=", "0", "\n", "print", "(", "\"Hit ImageNet stop iteration. End of epoch.\"", ")", "\n", "return", "None", "\n", "", "return", "self", ".", "process_imagenet_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.process_video_data": [[212, 225], ["dg_util.python_utils.pytorch_util.remove_dim", "dg_util.python_utils.pytorch_util.remove_dim", "len", "torch.full", "len"], "methods", ["None"], ["", "def", "process_video_data", "(", "self", ",", "batch", ")", ":", "\n", "        ", "data", "=", "pt_util", ".", "remove_dim", "(", "batch", "[", "\"data\"", "]", ",", "1", ")", "\n", "queue_data", "=", "pt_util", ".", "remove_dim", "(", "batch", "[", "\"queue_data\"", "]", ",", "1", ")", "\n", "batch", "=", "{", "\n", "\"data\"", ":", "data", ",", "\n", "\"queue_data\"", ":", "queue_data", ",", "\n", "\"data_source\"", ":", "\"YT\"", ",", "\n", "\"batch_type\"", ":", "\"video\"", ",", "\n", "\"batch_size\"", ":", "len", "(", "data", ")", ",", "\n", "\"num_frames\"", ":", "self", ".", "num_frames", ",", "\n", "\"imagenet_labels\"", ":", "torch", ".", "full", "(", "(", "len", "(", "data", ")", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "\n", "}", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.get_video_batch": [[226, 235], ["next", "vince_solver.VinceSolver.process_video_data", "print", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.process_video_data"], ["", "def", "get_video_batch", "(", "self", ",", "loader_id", ")", ":", "\n", "        ", "batch", "=", "next", "(", "self", ".", "train_batch_iterators", "[", "loader_id", "]", ")", "\n", "self", ".", "train_loader_counts", "[", "loader_id", "]", "+=", "1", "\n", "if", "self", ".", "train_loader_counts", "[", "loader_id", "]", "==", "len", "(", "self", ".", "train_loaders", "[", "loader_id", "]", ")", "+", "1", ":", "\n", "# Check this because using never-ending persistent dataloader which never throws stop iteration.", "\n", "            ", "self", ".", "train_loader_counts", "[", "loader_id", "]", "=", "0", "\n", "print", "(", "\"Hit Video stop iteration. End of epoch.\"", ")", "\n", "return", "None", "\n", "", "return", "self", ".", "process_video_data", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.setup_other": [[236, 251], ["time.time", "print", "print", "torchvision.npz_dataset.NPZDataset", "print", "os.path.join", "os.path.dirname", "time.time"], "methods", ["None"], ["", "def", "setup_other", "(", "self", ")", ":", "\n", "        ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Loading CIFAR\"", ")", "\n", "if", "self", ".", "args", ".", "save", "or", "self", ".", "args", ".", "test_first", ":", "\n", "            ", "self", ".", "cifar_dataset", "=", "NPZDataset", "(", "\n", "self", ".", "args", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "os", ".", "pardir", ",", "\"datasets\"", ",", "\"cifar_data\"", ",", "\"cifar_{data_subset}.npz\"", "\n", ")", ",", "\n", "\"train\"", ",", "\n", "10000", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Not loading CIFAR, probably in debug\"", ")", "\n", "", "print", "(", "\"CIFAR loaded in %.3f\"", "%", "(", "time", ".", "time", "(", ")", "-", "t_start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.setup_optimizer": [[252, 266], ["vince_solver.VinceSolver.model.parameters", "torch.optim.SGD", "vince_solver.VinceSolver.print_optimizer", "amp.initialize"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.print_optimizer"], ["", "def", "setup_optimizer", "(", "self", ")", ":", "\n", "        ", "base_lr", "=", "self", ".", "args", ".", "base_lr", "\n", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", "\n", "param_groups", "=", "[", "{", "\"params\"", ":", "params", ",", "\"initial_lr\"", ":", "base_lr", "}", "]", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "param_groups", ",", "lr", "=", "base_lr", ",", "weight_decay", "=", "0.0001", ",", "momentum", "=", "0.9", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "if", "\"initial_lr\"", "not", "in", "param_group", ":", "\n", "                ", "param_group", "[", "\"initial_lr\"", "]", "=", "base_lr", "\n", "", "", "if", "self", ".", "use_apex", ":", "\n", "            ", "(", "self", ".", "model", ",", "self", ".", "queue_model", ")", ",", "optimizer", "=", "amp", ".", "initialize", "(", "[", "self", ".", "model", ",", "self", ".", "queue_model", "]", ",", "optimizer", ",", "\n", "opt_level", "=", "\"O1\"", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "print_optimizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.setup_model": [[267, 292], ["copy.deepcopy", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "models.vince_model.VinceModel", "print", "vince_solver.VinceSolver.model.restore", "vince_solver.VinceSolver.model.to", "models.vince_model.VinceQueueModel", "vince_solver.VinceSolver.queue_model.to", "utils.storage_queue.StorageQueue", "vince_solver.VinceSolver.start_prefetch", "vince_solver.VinceSolver.fill_queue_repeat", "str", "print", "copy.deepcopy.checkpoint_dir.split", "copy.deepcopy.checkpoint_dir.split", "copy.deepcopy.long_save_checkpoint_dir.split"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.base_model.BaseModel.restore", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.start_prefetch", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.fill_queue_repeat"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "torch_devices", "=", "self", ".", "args", ".", "pytorch_gpu_ids", "\n", "device", "=", "\"cuda:\"", "+", "str", "(", "torch_devices", "[", "0", "]", ")", "\n", "args", "=", "copy", ".", "deepcopy", "(", "self", ".", "args", ")", "\n", "args", ".", "title", "=", "os", ".", "path", ".", "join", "(", "args", ".", "title", ",", "\"VinceModel\"", ")", "\n", "args", ".", "tensorboard_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "*", "(", "args", ".", "checkpoint_dir", ".", "split", "(", "os", ".", "sep", ")", "[", "2", ":", "-", "1", "]", ")", ",", "constants", ".", "TIME_STR", "\n", ")", "\n", "args", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "*", "(", "args", ".", "checkpoint_dir", ".", "split", "(", "os", ".", "sep", ")", "[", "2", ":", "]", ")", ")", "\n", "args", ".", "long_save_checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "*", "(", "args", ".", "long_save_checkpoint_dir", ".", "split", "(", "os", ".", "sep", ")", "[", "2", ":", "-", "1", "]", ")", ",", "constants", ".", "TIME_STR", "\n", ")", "\n", "self", ".", "model", "=", "VinceModel", "(", "args", ")", "\n", "print", "(", "self", ".", "model", ")", "\n", "self", ".", "iteration", "=", "self", ".", "model", ".", "restore", "(", ")", "\n", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "self", ".", "queue_model", "=", "VinceQueueModel", "(", "args", ",", "self", ".", "model", ")", "\n", "self", ".", "queue_model", ".", "to", "(", "device", ")", "\n", "self", ".", "vince_queue", "=", "StorageQueue", "(", "args", ".", "vince_queue_size", ",", "args", ".", "vince_embedding_size", ",", "device", "=", "device", ")", "\n", "\n", "self", ".", "epoch", "=", "self", ".", "iteration", "//", "(", "self", ".", "args", ".", "iterations_per_epoch", "*", "self", ".", "args", ".", "batch_size", ")", "\n", "if", "self", ".", "iteration", ">", "0", ":", "\n", "            ", "print", "(", "\"Resuming epoch\"", ",", "self", ".", "epoch", ")", "\n", "", "self", ".", "start_prefetch", "(", ")", "\n", "self", ".", "fill_queue_repeat", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.fill_queue": [[293, 314], ["vince_solver.VinceSolver.queue_model.param_update", "vince_solver.VinceSolver.vince_queue.clear", "print", "print", "torch.no_grad", "tqdm.tqdm", "tqdm.tqdm.close", "vince_solver.VinceSolver.get_batch", "vince_solver.VinceSolver.queue_model", "zip", "vince_solver.VinceSolver.vince_queue.enqueue", "len", "tqdm.tqdm.update", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.param_update", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.clear", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.get_batch", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.enqueue", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update"], ["", "def", "fill_queue", "(", "self", ")", ":", "\n", "# Fill queue with many different batches.", "\n", "# Sync parameters because might as well.", "\n", "        ", "self", ".", "queue_model", ".", "param_update", "(", "self", ".", "model", ",", "0", ")", "\n", "num_added", "=", "0", "\n", "self", ".", "vince_queue", ".", "clear", "(", ")", "\n", "print", "(", "\"Filling queue\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pbar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "self", ".", "vince_queue", ".", "maxsize", ")", "\n", "while", "num_added", "<", "self", ".", "vince_queue", ".", "maxsize", ":", "\n", "                ", "batches_concat", ",", "batches", "=", "self", ".", "get_batch", "(", ")", "\n", "outputs", "=", "self", ".", "queue_model", "(", "batches_concat", ")", "\n", "for", "batch", ",", "output", "in", "zip", "(", "batches", ",", "outputs", ")", ":", "\n", "                    ", "images", "=", "batch", "[", "\"queue_data_cpu\"", "]", "\n", "self", ".", "vince_queue", ".", "enqueue", "(", "output", "[", "\"queue_embeddings\"", "]", ",", "images", ",", "batch", "[", "\"data_source\"", "]", ")", "\n", "num_added", "+=", "len", "(", "images", ")", "\n", "pbar", ".", "update", "(", "len", "(", "images", ")", ")", "\n", "if", "num_added", ">=", "self", ".", "vince_queue", ".", "maxsize", ":", "\n", "                        ", "break", "\n", "", "", "", "pbar", ".", "close", "(", ")", "\n", "", "print", "(", "\"Queue filled\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.fill_queue_repeat": [[315, 334], ["vince_solver.VinceSolver.queue_model.param_update", "vince_solver.VinceSolver.vince_queue.clear", "print", "torch.no_grad", "vince_solver.VinceSolver.get_batch", "vince_solver.VinceSolver.queue_model", "zip", "vince_solver.VinceSolver.vince_queue.enqueue", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.param_update", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.clear", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.get_batch", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.enqueue"], ["", "def", "fill_queue_repeat", "(", "self", ")", ":", "\n", "# Fill queue with the same batch over and over.", "\n", "# Sync parameters because might as well.", "\n", "        ", "self", ".", "queue_model", ".", "param_update", "(", "self", ".", "model", ",", "0", ")", "\n", "num_added", "=", "0", "\n", "self", ".", "vince_queue", ".", "clear", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batches_concat", ",", "batches", "=", "self", ".", "get_batch", "(", ")", "\n", "outputs", "=", "self", ".", "queue_model", "(", "batches_concat", ")", "\n", "while", "num_added", "<", "self", ".", "vince_queue", ".", "maxsize", ":", "\n", "                ", "for", "batch", ",", "output", "in", "zip", "(", "batches", ",", "outputs", ")", ":", "\n", "                    ", "images", "=", "batch", "[", "\"queue_data_cpu\"", "]", "\n", "self", ".", "vince_queue", ".", "enqueue", "(", "output", "[", "\"queue_embeddings\"", "]", ",", "images", ",", "batch", "[", "\"data_source\"", "]", ")", "\n", "num_added", "+=", "len", "(", "images", ")", "\n", "if", "num_added", ">=", "self", ".", "vince_queue", ".", "maxsize", ":", "\n", "                        ", "break", "\n", "", "", "", "", "self", ".", "vince_queue", ".", "current_tail", "=", "0", "\n", "self", ".", "vince_queue", ".", "full", "=", "False", "\n", "print", "(", "\"Queue filled with repeats\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.reset_epoch": [[335, 339], ["super().reset_epoch", "vince_solver.VinceSolver.queue_model.train"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.reset_epoch"], ["", "def", "reset_epoch", "(", "self", ")", ":", "\n", "        ", "super", "(", "VinceSolver", ",", "self", ")", ".", "reset_epoch", "(", ")", "\n", "self", ".", "queue_model", ".", "train", "(", ")", "\n", "self", ".", "drawn_this_epoch", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.prefetch_batches": [[340, 371], ["range", "len", "batches.append", "vince_solver.VinceSolver.batch_queue.put", "len", "vince_solver.VinceSolver.batch_queue.put", "len", "dg_util.python_utils.pytorch_util.stack_dicts_in_list", "isinstance", "val.to", "batch.items", "isinstance", "batches[].items"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "prefetch_batches", "(", "self", ")", ":", "\n", "        ", "while", "not", "self", ".", "kill_thread", ":", "\n", "            ", "batches", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "len", "(", "self", ".", "train_batch_fns", ")", ")", ":", "\n", "                ", "loader_id", "=", "self", ".", "batch_count", "%", "len", "(", "self", ".", "train_batch_fns", ")", "\n", "batch", "=", "self", ".", "train_batch_fns", "[", "loader_id", "]", "(", "loader_id", ")", "\n", "if", "batch", "is", "None", ":", "\n", "                    ", "self", ".", "batch_queue", ".", "put", "(", "None", ")", "\n", "batches", "=", "None", "\n", "break", "\n", "", "self", ".", "batch_count", "+=", "1", "\n", "initial_images", "=", "batch", "[", "\"queue_data\"", "]", "\n", "batch", "=", "{", "\n", "key", ":", "(", "val", ".", "to", "(", "self", ".", "model", ".", "device", ")", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", "else", "val", ")", "\n", "for", "key", ",", "val", "in", "batch", ".", "items", "(", ")", "\n", "}", "\n", "batch", "[", "\"queue_data_cpu\"", "]", "=", "initial_images", "\n", "batches", ".", "append", "(", "batch", ")", "\n", "\n", "", "if", "batches", "is", "not", "None", ":", "\n", "                ", "if", "len", "(", "batches", ")", "==", "1", ":", "\n", "                    ", "batches_concat", "=", "{", "\n", "key", ":", "val", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", "else", "[", "val", "]", "for", "key", ",", "val", "in", "batches", "[", "0", "]", ".", "items", "(", ")", "\n", "}", "\n", "", "else", ":", "\n", "                    ", "batches_concat", "=", "pt_util", ".", "stack_dicts_in_list", "(", "batches", ",", "axis", "=", "0", ",", "concat", "=", "True", ")", "\n", "", "batches_concat", "[", "\"batch_types\"", "]", "=", "batches_concat", "[", "\"batch_type\"", "]", "\n", "del", "batches_concat", "[", "\"batch_type\"", "]", "\n", "batches_concat", "[", "\"batch_sizes\"", "]", "=", "batches_concat", "[", "\"batch_size\"", "]", "\n", "del", "batches_concat", "[", "\"batch_size\"", "]", "\n", "self", ".", "batch_queue", ".", "put", "(", "(", "batches_concat", ",", "batches", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.start_prefetch": [[372, 375], ["threading.Thread", "vince_solver.VinceSolver.prefetch_thread.start"], "methods", ["None"], ["", "", "", "def", "start_prefetch", "(", "self", ")", ":", "\n", "        ", "self", ".", "prefetch_thread", "=", "Thread", "(", "target", "=", "self", ".", "prefetch_batches", ")", "\n", "self", ".", "prefetch_thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.end": [[376, 378], ["None"], "methods", ["None"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "self", ".", "kill_thread", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.get_batch": [[379, 385], ["vince_solver.VinceSolver.batch_queue.get", "vince_solver.VinceSolver.fill_queue_repeat", "vince_solver.VinceSolver.batch_queue.get"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.fill_queue_repeat"], ["", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "batches", "=", "self", ".", "batch_queue", ".", "get", "(", ")", "\n", "while", "batches", "is", "None", ":", "\n", "            ", "self", ".", "fill_queue_repeat", "(", ")", "\n", "batches", "=", "self", ".", "batch_queue", ".", "get", "(", ")", "\n", "", "return", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.run_train_iteration": [[386, 519], ["time.time", "time.time", "vince_solver.VinceSolver.get_batch", "time.time", "vince_solver.VinceSolver.time_meters[].update", "time.time", "time.time", "vince_solver.VinceSolver.time_meters[].update", "time.time", "vince_solver.VinceSolver.model.split_dict_by_type", "enumerate", "dg_util.python_utils.pytorch_util.stack_dicts_in_list", "dg_util.python_utils.pytorch_util.stack_dicts_in_list", "set", "set", "vince_solver.VinceSolver.items", "time.time", "vince_solver.VinceSolver.time_meters[].update", "time.time", "vince_solver.VinceSolver.optimizer.zero_grad", "vince_solver.VinceSolver.optimizer.step", "time.time", "vince_solver.VinceSolver.time_meters[].update", "enumerate", "vince_solver.VinceSolver.queue_model.vince_update", "time.time", "vince_solver.VinceSolver.time_meters[].update", "vince_solver.VinceSolver.queue_model", "vince_solver.VinceSolver.model.get_embeddings", "zip", "output.update", "output.update", "output.update", "output.update", "vince_solver.VinceSolver.model.loss", "vince_solver.VinceSolver.model.get_metrics", "loss_list.append", "metrics_list.append", "val.mean", "val.mean", "vince_solver.VinceSolver.items", "torch.isfinite", "vince_solver.VinceSolver.metric_meters[].update", "set.add", "loss.backward", "zip", "vince_solver.VinceSolver.vince_queue.enqueue", "vince_solver.VinceSolver.model.save", "log_dict.update", "log_dict.update", "random.random", "vince_solver.VinceSolver.queue_model", "vince_solver.VinceSolver.model.get_embeddings", "vince_solver.VinceSolver.queue_model", "vince_solver.VinceSolver.model.get_embeddings", "vince_solver.VinceSolver.vince_queue.dequeue", "vince_solver.VinceSolver.model", "vince_solver.VinceSolver.items", "vince_solver.VinceSolver.items", "vince_solver.VinceSolver.loss_meters[].update", "set.add", "vince_solver.VinceSolver.loss_meters[].update", "set.add", "traceback.print_exc", "pdb.set_trace", "print", "amp.scale_loss", "scaled_loss.backward", "print", "vince_solver.VinceSolver.model.get_image_output", "vince_solver.VinceSolver.train_logger.dict_log", "vince_solver.VinceSolver.items", "vince_solver.VinceSolver.time_meters.items", "vince_solver.VinceSolver.items", "len", "key.startswith", "isinstance", "enumerate", "vince_solver.VinceSolver.train_logger.image_summary", "vince_solver.VinceSolver.train_logger.image_summary", "len", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.get_batch", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.split_dict_by_type", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.vince_update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.get_embeddings", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.loss", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_metrics", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.enqueue", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.save", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.get_embeddings", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.get_embeddings", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.dequeue", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_image_output"], ["", "def", "run_train_iteration", "(", "self", ")", ":", "\n", "        ", "total_t_start", "=", "time", ".", "time", "(", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "image_batch_concat", ",", "image_batches", "=", "self", ".", "get_batch", "(", ")", "\n", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_meters", "[", "\"data_cache_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Feed in whole batch together through encoder (the most computationally expensive part).", "\n", "\n", "if", "self", ".", "args", ".", "jigsaw", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "queue_batches", "=", "self", ".", "queue_model", "(", "image_batch_concat", ",", "jigsaw", "=", "True", ",", "shuffle", "=", "True", ")", "\n", "outputs", "=", "self", ".", "model", ".", "get_embeddings", "(", "image_batch_concat", ",", "jigsaw", "=", "False", ",", "shuffle", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "queue_batches", "=", "self", ".", "queue_model", "(", "image_batch_concat", ",", "jigsaw", "=", "False", ",", "shuffle", "=", "True", ")", "\n", "outputs", "=", "self", ".", "model", ".", "get_embeddings", "(", "image_batch_concat", ",", "jigsaw", "=", "True", ",", "shuffle", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "queue_batches", "=", "self", ".", "queue_model", "(", "image_batch_concat", ",", "shuffle", "=", "True", ")", "\n", "outputs", "=", "self", ".", "model", ".", "get_embeddings", "(", "image_batch_concat", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "t_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_meters", "[", "\"forward_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "loss_list", "=", "[", "]", "\n", "metrics_list", "=", "[", "]", "\n", "# Feed in batch as separate mini-batches depending on batch type.", "\n", "image_batches", "=", "self", ".", "model", ".", "split_dict_by_type", "(", "\n", "image_batch_concat", "[", "\"batch_types\"", "]", ",", "image_batch_concat", "[", "\"batch_sizes\"", "]", ",", "image_batch_concat", "\n", ")", "\n", "\n", "for", "bb", ",", "(", "image_batch", ",", "queue_batch", ",", "output", ")", "in", "enumerate", "(", "zip", "(", "image_batches", ",", "queue_batches", ",", "outputs", ")", ")", ":", "\n", "            ", "output", ".", "update", "(", "self", ".", "vince_queue", ".", "dequeue", "(", ")", ")", "\n", "output", ".", "update", "(", "image_batch", ")", "\n", "output", ".", "update", "(", "queue_batch", ")", "\n", "\n", "output", ".", "update", "(", "self", ".", "model", "(", "output", ")", ")", "\n", "loss_dict", "=", "self", ".", "model", ".", "loss", "(", "output", ")", "\n", "metrics", "=", "self", ".", "model", ".", "get_metrics", "(", "output", ")", "\n", "loss_list", ".", "append", "(", "{", "key", ":", "val", "[", "0", "]", "*", "val", "[", "1", "]", "for", "key", ",", "val", "in", "loss_dict", ".", "items", "(", ")", "}", ")", "\n", "metrics_list", ".", "append", "(", "metrics", ")", "\n", "\n", "", "loss_dict", "=", "pt_util", ".", "stack_dicts_in_list", "(", "loss_list", ")", "\n", "loss_dict", "=", "{", "key", ":", "val", ".", "mean", "(", ")", "for", "key", ",", "val", "in", "loss_dict", ".", "items", "(", ")", "}", "\n", "metrics", "=", "pt_util", ".", "stack_dicts_in_list", "(", "metrics_list", ")", "\n", "metrics", "=", "{", "key", ":", "val", ".", "mean", "(", ")", "for", "key", ",", "val", "in", "metrics", ".", "items", "(", ")", "}", "\n", "\n", "updated_loss_meters", "=", "set", "(", ")", "\n", "try", ":", "\n", "            ", "total_loss", "=", "0", "\n", "for", "key", ",", "weighted_loss", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "                ", "total_loss", "=", "total_loss", "+", "weighted_loss", "\n", "self", ".", "loss_meters", "[", "key", "]", ".", "update", "(", "weighted_loss", ")", "\n", "updated_loss_meters", ".", "add", "(", "key", ")", "\n", "", "if", "\"total_loss\"", "in", "self", ".", "loss_meters", ":", "\n", "                ", "self", ".", "loss_meters", "[", "\"total_loss\"", "]", ".", "update", "(", "total_loss", ")", "\n", "updated_loss_meters", ".", "add", "(", "\"total_loss\"", ")", "\n", "", "loss", "=", "total_loss", "\n", "assert", "torch", ".", "isfinite", "(", "loss", ")", "\n", "", "except", "AssertionError", "as", "re", ":", "\n", "            ", "import", "pdb", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "print", "(", "\"anomoly\"", ",", "re", ")", "\n", "raise", "re", "\n", "\n", "", "updated_metric_meters", "=", "set", "(", ")", "\n", "for", "key", ",", "val", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "metric_meters", "[", "key", "]", ".", "update", "(", "val", ")", "\n", "updated_metric_meters", ".", "add", "(", "key", ")", "\n", "\n", "", "t_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_meters", "[", "\"metrics_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "use_apex", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "self", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_meters", "[", "\"backward_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "\n", "for", "bb", ",", "(", "image_batch", ",", "output", ")", "in", "enumerate", "(", "zip", "(", "image_batches", ",", "outputs", ")", ")", ":", "\n", "            ", "if", "not", "self", ".", "drawn_this_epoch", "and", "self", ".", "vince_queue", ".", "full", ":", "\n", "# If we haven't drawn yet and the queue is full of many different batches, draw now.", "\n", "                ", "if", "bb", "==", "len", "(", "image_batches", ")", "-", "1", ":", "\n", "                    ", "self", ".", "drawn_this_epoch", "=", "True", "\n", "", "print", "(", "\"Drawing Tensorboard images\"", ")", "\n", "image_output", "=", "self", ".", "model", ".", "get_image_output", "(", "output", ")", "\n", "if", "self", ".", "train_logger", "is", "not", "None", ":", "\n", "                    ", "for", "key", ",", "val", "in", "image_output", ".", "items", "(", ")", ":", "\n", "                        ", "if", "key", ".", "startswith", "(", "\"images\"", ")", ":", "\n", "                            ", "if", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "                                ", "for", "vv", ",", "item", "in", "enumerate", "(", "val", ")", ":", "\n", "                                    ", "self", ".", "train_logger", ".", "image_summary", "(", "\n", "self", ".", "full_name", "+", "\"_\"", "+", "key", "[", "len", "(", "\"images/\"", ")", ":", "]", ",", "item", ",", "self", ".", "iteration", "+", "vv", ",", "False", "\n", ")", "\n", "", "", "else", ":", "\n", "                                ", "self", ".", "train_logger", ".", "image_summary", "(", "\n", "self", ".", "full_name", "+", "\"_\"", "+", "key", "[", "len", "(", "\"images/\"", ")", ":", "]", ",", "val", ",", "self", ".", "iteration", ",", "False", "\n", ")", "\n", "\n", "# Must be done after image logger because images are reassigned in place.", "\n", "# update queue and queue params", "\n", "", "", "", "", "", "queue_images_cpu", "=", "image_batch", "[", "\"queue_data_cpu\"", "]", "\n", "self", ".", "vince_queue", ".", "enqueue", "(", "output", "[", "\"queue_embeddings\"", "]", ",", "queue_images_cpu", ",", "image_batch", "[", "\"data_source\"", "]", ")", "\n", "\n", "", "self", ".", "queue_model", ".", "vince_update", "(", "self", ".", "model", ")", "\n", "if", "self", ".", "logger_iteration", "%", "self", ".", "args", ".", "save_frequency", "==", "0", ":", "\n", "            ", "self", ".", "model", ".", "save", "(", "self", ".", "iteration", ",", "5", ")", "\n", "\n", "", "if", "self", ".", "logger_iteration", "%", "self", ".", "args", ".", "log_frequency", "==", "0", ":", "\n", "            ", "log_dict", "=", "{", "\"times/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "val", ".", "val", "for", "key", ",", "val", "in", "self", ".", "time_meters", ".", "items", "(", ")", "}", "\n", "log_dict", ".", "update", "(", "\n", "{", "\"losses/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "self", ".", "loss_meters", "[", "key", "]", ".", "val", "for", "key", "in", "updated_loss_meters", "}", "\n", ")", "\n", "log_dict", ".", "update", "(", "\n", "{", "\"metrics/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "self", ".", "metric_meters", "[", "key", "]", ".", "val", "for", "key", "in", "updated_metric_meters", "}", "\n", ")", "\n", "if", "self", ".", "train_logger", "is", "not", "None", ":", "\n", "                ", "self", ".", "train_logger", ".", "dict_log", "(", "log_dict", ",", "self", ".", "iteration", ")", "\n", "\n", "", "", "self", ".", "iteration", "+=", "self", ".", "args", ".", "batch_size", "\n", "\n", "total_t_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_meters", "[", "\"total_time\"", "]", ".", "update", "(", "total_t_end", "-", "total_t_start", ")", "\n", "self", ".", "logger_iteration", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.vince_solver.VinceSolver.run_val": [[520, 707], ["log_dict.update", "torch.no_grad", "vince_solver.VinceSolver.model.eval", "dict", "set", "set", "zip", "dg_util.python_utils.average_meter.AverageMeter", "dg_util.python_utils.pytorch_util.from_numpy().to().view", "dg_util.python_utils.pytorch_util.from_numpy().to().view", "print", "tqdm.tqdm", "numpy.transpose", "dg_util.python_utils.pytorch_util.to_numpy", "numpy.concatenate", "vince_solver.VinceSolver.val_logger.dict_log", "dg_util.python_utils.average_meter.RollingAverageMeter", "len", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.AverageMeter", "dg_util.python_utils.average_meter.AverageMeter", "print", "time.time", "time.time", "enumerate", "range", "data.to.to.to", "data.to.to.div_", "numpy.mean.append", "dg_util.python_utils.pytorch_util.to_numpy", "len", "numpy.mean", "sklearn.neighbors.KDTree", "[].squeeze", "numpy.mean", "epoch_metric_meters[].update", "set.add", "dg_util.python_utils.drawing.subplot", "vince_solver.VinceSolver.val_logger.image_summary", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "vince_solver.VinceSolver.model.loss().keys", "vince_solver.VinceSolver.model.get_metrics().keys", "loss_meters.keys", "metric_meters.keys", "tqdm.tqdm", "data_processor", "time.time", "time_meters[].update", "time.time", "data_processor.update", "data_processor.update", "data_processor.update", "data_processor.update", "vince_solver.VinceSolver.model.loss", "time.time", "time_meters[].update", "time.time", "vince_solver.VinceSolver.model.get_metrics", "set", "vince_solver.VinceSolver.items", "set", "vince_solver.VinceSolver.items", "time.time", "time_meters[].update", "time.time", "time_meters[].update", "time.time", "dg_util.python_utils.pytorch_util.from_numpy().to", "dg_util.python_utils.pytorch_util.from_numpy().to", "len", "vince_solver.VinceSolver.model.get_embeddings", "dg_util.python_utils.pytorch_util.to_numpy", "sklearn.neighbors.KDTree.query", "sklearn.neighbors.KDTree.query", "vince_solver.VinceSolver.vince_queue.dequeue", "vince_solver.VinceSolver.model", "vince_solver.VinceSolver.model.get_image_output", "loss_meters[].update", "epoch_loss_meters[].update", "set.add", "set.add", "loss_meters[].update", "epoch_loss_meters[].update", "set.add", "set.add", "torch.isfinite", "metric_meters[].update", "set.add", "epoch_metric_meters[].update", "set.add", "log_dict.update", "log_dict.update", "min", "vince_solver.VinceSolver.model.loss", "vince_solver.VinceSolver.model.get_metrics", "time.time", "isinstance", "val.to", "data_processor.items", "vince_solver.VinceSolver.queue_model", "vince_solver.VinceSolver.model.get_embeddings", "print", "vince_solver.VinceSolver.items", "vince_solver.VinceSolver.val_logger.dict_log", "dg_util.python_utils.pytorch_util.from_numpy", "dg_util.python_utils.pytorch_util.from_numpy", "len", "scipy.stats.mode", "nn_inds.reshape", "isinstance", "dict.items", "enumerate", "vince_solver.VinceSolver.val_logger.image_summary", "vince_solver.VinceSolver.val_logger.image_summary", "len", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.loss", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_metrics", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.get_embeddings", "home.repos.pwc.inspect_result.danielgordon10_vince.utils.storage_queue.StorageQueue.dequeue", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_image_output", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.loss", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_metrics", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.get_embeddings"], ["", "def", "run_val", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "time_meters", "=", "dict", "(", "\n", "total_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", "data_cache_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", "forward_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", "metrics_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", ")", "\n", "loss_meters", "=", "{", "key", ":", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", "for", "key", "in", "self", ".", "model", ".", "loss", "(", "None", ")", ".", "keys", "(", ")", "}", "\n", "if", "len", "(", "loss_meters", ")", ">", "1", ":", "\n", "                ", "loss_meters", "[", "\"total_loss\"", "]", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", "\n", "", "metric_meters", "=", "{", "\n", "metric", ":", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", "for", "metric", "in", "self", ".", "model", ".", "get_metrics", "(", "None", ")", ".", "keys", "(", ")", "\n", "}", "\n", "\n", "epoch_loss_meters", "=", "{", "\"epoch_\"", "+", "key", ":", "AverageMeter", "(", ")", "for", "key", "in", "loss_meters", ".", "keys", "(", ")", "}", "\n", "epoch_metric_meters", "=", "{", "\"epoch_\"", "+", "key", ":", "AverageMeter", "(", ")", "for", "key", "in", "metric_meters", ".", "keys", "(", ")", "}", "\n", "\n", "updated_epoch_loss_meters", "=", "set", "(", ")", "\n", "updated_epoch_metric_meters", "=", "set", "(", ")", "\n", "\n", "step_on", "=", "self", ".", "iteration", "\n", "\n", "for", "val_name", ",", "val_loader", ",", "data_processor", "in", "zip", "(", "self", ".", "val_data_names", ",", "self", ".", "val_loaders", ",", "self", ".", "val_batch_fns", ")", ":", "\n", "                ", "print", "(", "\"Running val for\"", ",", "val_name", ")", "\n", "total_t_start", "=", "time", ".", "time", "(", ")", "\n", "test_t_start", "=", "time", ".", "time", "(", ")", "\n", "for", "ii", ",", "image_batch", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "val_loader", ")", ")", ":", "\n", "                    ", "if", "test_t_start", "-", "time", ".", "time", "(", ")", ">", "5", "*", "60", ":", "\n", "# Break after 5 minutes.", "\n", "                        ", "break", "\n", "", "image_batch", "=", "data_processor", "(", "image_batch", ")", "\n", "image_batch", "[", "\"batch_types\"", "]", "=", "[", "image_batch", "[", "\"batch_type\"", "]", "]", "\n", "del", "image_batch", "[", "\"batch_type\"", "]", "\n", "image_batch", "[", "\"batch_sizes\"", "]", "=", "[", "image_batch", "[", "\"batch_size\"", "]", "]", "\n", "del", "image_batch", "[", "\"batch_size\"", "]", "\n", "image_batch", "=", "{", "\n", "key", ":", "(", "val", ".", "to", "(", "self", ".", "model", ".", "device", ",", "non_blocking", "=", "True", ")", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", "else", "val", ")", "\n", "for", "key", ",", "val", "in", "image_batch", ".", "items", "(", ")", "\n", "}", "\n", "\n", "batch_size", "=", "image_batch", "[", "\"data\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "time_meters", "[", "\"data_cache_time\"", "]", ".", "update", "(", "t_end", "-", "total_t_start", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "image_batch", ".", "update", "(", "self", ".", "queue_model", "(", "image_batch", ")", "[", "0", "]", ")", "\n", "image_batch", ".", "update", "(", "self", ".", "model", ".", "get_embeddings", "(", "image_batch", ")", "[", "0", "]", ")", "\n", "image_batch", ".", "update", "(", "self", ".", "vince_queue", ".", "dequeue", "(", ")", ")", "\n", "\n", "image_batch", ".", "update", "(", "self", ".", "model", "(", "image_batch", ")", ")", "\n", "output", "=", "image_batch", "\n", "loss_dict", "=", "self", ".", "model", ".", "loss", "(", "output", ")", "\n", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "time_meters", "[", "\"forward_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "metrics", "=", "self", ".", "model", ".", "get_metrics", "(", "output", ")", "\n", "if", "ii", "%", "self", ".", "args", ".", "image_log_frequency", "==", "0", ":", "\n", "                        ", "image_output", "=", "self", ".", "model", ".", "get_image_output", "(", "output", ")", "\n", "\n", "", "updated_loss_meters", "=", "set", "(", ")", "\n", "total_loss", "=", "0", "\n", "for", "key", ",", "val", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "                        ", "weighted_loss", "=", "val", "[", "0", "]", "*", "val", "[", "1", "]", "\n", "total_loss", "=", "total_loss", "+", "weighted_loss", "\n", "loss_meters", "[", "key", "]", ".", "update", "(", "weighted_loss", ")", "\n", "epoch_loss_meters", "[", "\"epoch_\"", "+", "key", "]", ".", "update", "(", "weighted_loss", ",", "batch_size", ")", "\n", "updated_loss_meters", ".", "add", "(", "key", ")", "\n", "updated_epoch_loss_meters", ".", "add", "(", "\"epoch_\"", "+", "key", ")", "\n", "", "if", "\"total_loss\"", "in", "loss_meters", ":", "\n", "                        ", "loss_meters", "[", "\"total_loss\"", "]", ".", "update", "(", "total_loss", ")", "\n", "epoch_loss_meters", "[", "\"epoch_total_loss\"", "]", ".", "update", "(", "total_loss", ",", "batch_size", ")", "\n", "updated_loss_meters", ".", "add", "(", "\"total_loss\"", ")", "\n", "updated_epoch_loss_meters", ".", "add", "(", "\"epoch_total_loss\"", ")", "\n", "", "loss", "=", "total_loss", "\n", "\n", "try", ":", "\n", "                        ", "assert", "torch", ".", "isfinite", "(", "loss", ")", "\n", "", "except", ":", "\n", "# output = self.model.forward(image_batch)", "\n", "                        ", "print", "(", "\"Nan loss\"", ",", "loss_dict", ")", "\n", "\n", "", "updated_metric_meters", "=", "set", "(", ")", "\n", "for", "key", ",", "val", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                        ", "metric_meters", "[", "key", "]", ".", "update", "(", "val", ")", "\n", "updated_metric_meters", ".", "add", "(", "key", ")", "\n", "epoch_metric_meters", "[", "\"epoch_\"", "+", "key", "]", ".", "update", "(", "val", ",", "batch_size", ")", "\n", "updated_epoch_metric_meters", ".", "add", "(", "\"epoch_\"", "+", "key", ")", "\n", "\n", "", "t_end", "=", "time", ".", "time", "(", ")", "\n", "time_meters", "[", "\"metrics_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "\n", "if", "ii", "%", "self", ".", "args", ".", "image_log_frequency", "==", "0", ":", "\n", "                        ", "if", "self", ".", "val_logger", "is", "not", "None", ":", "\n", "                            ", "for", "key", ",", "val", "in", "image_output", ".", "items", "(", ")", ":", "\n", "                                ", "if", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "                                    ", "for", "vv", ",", "item", "in", "enumerate", "(", "val", ")", ":", "\n", "                                        ", "self", ".", "val_logger", ".", "image_summary", "(", "\n", "self", ".", "full_name", "+", "\"_\"", "+", "key", "[", "len", "(", "\"images/\"", ")", ":", "]", ",", "item", ",", "step_on", "+", "vv", ",", "False", "\n", ")", "\n", "", "", "else", ":", "\n", "                                    ", "self", ".", "val_logger", ".", "image_summary", "(", "\n", "self", ".", "full_name", "+", "\"_\"", "+", "key", "[", "len", "(", "\"images/\"", ")", ":", "]", ",", "val", ",", "step_on", ",", "False", "\n", ")", "\n", "\n", "", "", "", "", "if", "ii", "%", "self", ".", "args", ".", "log_frequency", "==", "0", ":", "\n", "                        ", "log_dict", "=", "{", "\"times/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "val", ".", "val", "for", "key", ",", "val", "in", "time_meters", ".", "items", "(", ")", "}", "\n", "log_dict", ".", "update", "(", "\n", "{", "\n", "\"losses/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "loss_meters", "[", "key", "]", ".", "val", "\n", "for", "key", "in", "updated_loss_meters", "\n", "}", "\n", ")", "\n", "log_dict", ".", "update", "(", "\n", "{", "\n", "\"metrics/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "metric_meters", "[", "key", "]", ".", "val", "\n", "for", "key", "in", "updated_metric_meters", "\n", "}", "\n", ")", "\n", "if", "self", ".", "val_logger", "is", "not", "None", ":", "\n", "                            ", "self", ".", "val_logger", ".", "dict_log", "(", "log_dict", ",", "step_on", ")", "\n", "\n", "", "", "step_on", "+=", "self", ".", "args", ".", "batch_size", "\n", "total_t_end", "=", "time", ".", "time", "(", ")", "\n", "time_meters", "[", "\"total_time\"", "]", ".", "update", "(", "total_t_end", "-", "total_t_start", ")", "\n", "total_t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "##### CIFAR #####", "\n", "", "", "epoch_metric_meters", "[", "\"epoch_knn_cifar\"", "]", "=", "AverageMeter", "(", ")", "\n", "\n", "all_features", "=", "[", "]", "\n", "imagenet_mean", "=", "pt_util", ".", "from_numpy", "(", "constants", ".", "IMAGENET_MEAN", ")", ".", "to", "(", "self", ".", "model", ".", "device", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "imagenet_std", "=", "pt_util", ".", "from_numpy", "(", "constants", ".", "IMAGENET_STD", ")", ".", "to", "(", "self", ".", "model", ".", "device", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "print", "(", "\"Running CIFAR\"", ")", "\n", "for", "start_ind", "in", "tqdm", ".", "tqdm", "(", "range", "(", "0", ",", "len", "(", "self", ".", "cifar_dataset", ")", ",", "self", ".", "args", ".", "batch_size", ")", ")", ":", "\n", "                ", "data", "=", "self", ".", "cifar_dataset", ".", "data", "[", "\n", "start_ind", ":", "min", "(", "len", "(", "self", ".", "cifar_dataset", ")", ",", "start_ind", "+", "self", ".", "args", ".", "batch_size", ")", "\n", "]", "\n", "data", "=", "data", ".", "to", "(", "device", "=", "self", ".", "model", ".", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "data", "=", "data", "-", "imagenet_mean", "\n", "data", ".", "div_", "(", "imagenet_std", ")", "\n", "features", "=", "self", ".", "model", ".", "get_embeddings", "(", "{", "\"data\"", ":", "data", "}", ")", "[", "\"embeddings\"", "]", "\n", "all_features", ".", "append", "(", "pt_util", ".", "to_numpy", "(", "features", ")", ")", "\n", "", "all_images", "=", "np", ".", "transpose", "(", "pt_util", ".", "to_numpy", "(", "self", ".", "cifar_dataset", ".", "data", ")", ",", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "labels", "=", "pt_util", ".", "to_numpy", "(", "self", ".", "cifar_dataset", ".", "labels", ")", "\n", "all_features", "=", "np", ".", "concatenate", "(", "all_features", ",", "axis", "=", "0", ")", "\n", "if", "len", "(", "all_features", ".", "shape", ")", "==", "4", ":", "\n", "# all_features = pt_util.remove_dim(all_features, dim=(2, 3))", "\n", "                ", "all_features", "=", "np", ".", "mean", "(", "all_features", ",", "axis", "=", "(", "2", ",", "3", ")", ")", "\n", "\n", "", "if", "self", ".", "val_logger", "is", "not", "None", ":", "\n", "                ", "kdt", "=", "KDTree", "(", "all_features", ",", "leaf_size", "=", "40", ",", "metric", "=", "\"euclidean\"", ")", "\n", "neighbors", "=", "kdt", ".", "query", "(", "all_features", ",", "k", "=", "11", ")", "[", "1", "]", "\n", "# remove self match", "\n", "neighbors", "=", "neighbors", "[", ":", ",", "1", ":", "]", "\n", "preds_all", "=", "labels", "[", "neighbors", "]", "\n", "preds", "=", "scipy", ".", "stats", ".", "mode", "(", "preds_all", ",", "axis", "=", "1", ")", "[", "0", "]", ".", "squeeze", "(", "1", ")", "\n", "acc", "=", "np", ".", "mean", "(", "preds", "==", "labels", ")", "\n", "epoch_metric_meters", "[", "\"epoch_knn_cifar\"", "]", ".", "update", "(", "acc", ")", "\n", "updated_epoch_metric_meters", ".", "add", "(", "\"epoch_knn_cifar\"", ")", "\n", "\n", "nn_inds", "=", "kdt", ".", "query", "(", "all_features", "[", "0", ":", "100", ":", "10", "]", ",", "k", "=", "10", ")", "[", "1", "]", "\n", "image", "=", "drawing", ".", "subplot", "(", "\n", "all_images", "[", "nn_inds", ".", "reshape", "(", "-", "1", ")", "]", ",", "10", ",", "10", ",", "self", ".", "args", ".", "input_width", ",", "self", ".", "args", ".", "input_height", ",", "border", "=", "10", "\n", ")", "\n", "\n", "self", ".", "val_logger", ".", "image_summary", "(", "\n", "self", ".", "full_name", "+", "\"_kNN/cifar\"", ",", "image", ",", "step_on", ",", "increment_counter", "=", "False", ",", "max_size", "=", "1000", "\n", ")", "\n", "\n", "", "", "log_dict", "=", "{", "\n", "\"epoch/losses/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "epoch_loss_meters", "[", "key", "]", ".", "avg", "\n", "for", "key", "in", "updated_epoch_loss_meters", "\n", "}", "\n", "log_dict", ".", "update", "(", "\n", "{", "\n", "\"epoch/metrics/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "epoch_metric_meters", "[", "key", "]", ".", "avg", "\n", "for", "key", "in", "updated_epoch_metric_meters", "\n", "}", "\n", ")", "\n", "if", "self", ".", "val_logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "val_logger", ".", "dict_log", "(", "log_dict", ",", "step_on", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.__init__": [[25, 33], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "train_logger", "=", "None", ",", "val_logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "train_loader", "=", "None", "\n", "self", ".", "val_loader", "=", "None", "\n", "self", ".", "batch_iter", "=", "None", "\n", "self", ".", "feature_extractor", ":", "nn", ".", "Module", "=", "None", "\n", "\n", "super", "(", "EndTaskBaseSolver", ",", "self", ")", ".", "__init__", "(", "args", ",", "train_logger", ",", "val_logger", ")", "\n", "self", ".", "train_batch_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.setup_dataloader": [[34, 66], ["dg_util.python_utils.persistent_dataloader.PersistentDataLoader", "dg_util.python_utils.persistent_dataloader.PersistentDataLoader", "end_task_base_solver.EndTaskBaseSolver.train_loader.set_dataset", "iter", "end_task_base_solver.EndTaskBaseSolver.val_loader.set_dataset", "end_task_base_solver.EndTaskBaseSolver.args.dataset", "end_task_base_solver.EndTaskBaseSolver.args.dataset", "min", "min"], "methods", ["None"], ["", "def", "setup_dataloader", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "args", ".", "disable_dataloader", ":", "\n", "            ", "self", ".", "train_loader", "=", "PersistentDataLoader", "(", "\n", "dataset", "=", "None", ",", "\n", "num_workers", "=", "min", "(", "self", ".", "args", ".", "num_workers", ",", "40", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "never_ending", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "val_loader", "=", "PersistentDataLoader", "(", "\n", "dataset", "=", "None", ",", "\n", "num_workers", "=", "min", "(", "self", ".", "args", ".", "num_workers", ",", "40", ")", ",", "\n", "pin_memory", "=", "False", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "never_ending", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "train_loader", ".", "set_dataset", "(", "\n", "self", ".", "args", ".", "dataset", "(", "self", ".", "args", ",", "\"train\"", ")", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "self", ".", "args", ".", "dataset", ".", "collate_fn", ",", "\n", "worker_init_fn", "=", "self", ".", "args", ".", "dataset", ".", "worker_init_fn", ",", "\n", ")", "\n", "self", ".", "batch_iter", "=", "iter", "(", "self", ".", "train_loader", ")", "\n", "self", ".", "val_loader", ".", "set_dataset", "(", "\n", "self", ".", "args", ".", "dataset", "(", "self", ".", "args", ",", "\"val\"", ")", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "self", ".", "args", ".", "dataset", ".", "collate_fn", ",", "\n", "worker_init_fn", "=", "self", ".", "args", ".", "dataset", ".", "worker_init_fn", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.iterations_per_epoch": [[68, 71], ["len"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "iterations_per_epoch", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.setup_model_param_groups": [[72, 74], ["None"], "methods", ["None"], ["", "def", "setup_model_param_groups", "(", "self", ")", "->", "List", "[", "Dict", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.create_optimizer": [[75, 78], ["torch.optim.Adam"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_optimizer", "(", "param_groups", ",", "base_lr", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "param_groups", ",", "lr", "=", "base_lr", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.setup_optimizer": [[79, 107], ["end_task_base_solver.EndTaskBaseSolver.setup_model_param_groups", "end_task_base_solver.EndTaskBaseSolver.create_optimizer", "print", "end_task_base_solver.EndTaskBaseSolver.print_optimizer", "end_task_base_solver.EndTaskBaseSolver.append", "amp.initialize", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.parameters"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.setup_model_param_groups", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskImagenetSolver.create_optimizer", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.print_optimizer"], ["", "def", "setup_optimizer", "(", "self", ")", ":", "\n", "        ", "base_lr", "=", "self", ".", "args", ".", "base_lr", "\n", "param_groups", "=", "self", ".", "setup_model_param_groups", "(", ")", "\n", "\n", "if", "not", "self", ".", "freeze_feature_extractor", ":", "\n", "            ", "param_group", "=", "{", "\n", "\"params\"", ":", "self", ".", "feature_extractor", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "base_lr", ",", "\n", "\"weight_decay\"", ":", "1e-4", ",", "\n", "\"initial_lr\"", ":", "base_lr", ",", "\n", "}", "\n", "param_groups", ".", "append", "(", "param_group", ")", "\n", "\n", "# optimizer = torch.optim.SGD(param_groups, lr=base_lr, weight_decay=1e-4, momentum=0.9)", "\n", "", "optimizer", "=", "self", ".", "create_optimizer", "(", "param_groups", ",", "base_lr", ")", "\n", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "if", "\"initial_lr\"", "not", "in", "param_group", ":", "\n", "                ", "param_group", "[", "\"initial_lr\"", "]", "=", "base_lr", "\n", "\n", "", "", "if", "self", ".", "use_apex", ":", "\n", "            ", "(", "self", ".", "feature_extractor", ",", "self", ".", "model", ")", ",", "optimizer", "=", "amp", ".", "initialize", "(", "[", "self", ".", "feature_extractor", ",", "self", ".", "model", "]", ",", "\n", "optimizer", ",", "opt_level", "=", "\"O1\"", ",", "\n", "max_loss_scale", "=", "65536", ")", "\n", "\n", "", "print", "(", "\"optimizer\"", ",", "optimizer", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "print_optimizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.solver_model_name": [[108, 111], ["type", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "solver_model_name", "(", "self", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", ".", "__name__", "[", ":", "-", "len", "(", "\"Solver\"", ")", "]", "+", "\"Model\"", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.setup_feature_extractor": [[112, 130], ["copy.deepcopy", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "models.vince_model.VinceModel", "print", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.restore", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.to", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.eval", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.train", "copy.deepcopy.checkpoint_dir.split", "copy.deepcopy.long_save_checkpoint_dir.split", "copy.deepcopy.checkpoint_dir.split"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.base_model.BaseModel.restore", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "setup_feature_extractor", "(", "self", ")", ":", "\n", "        ", "args", "=", "copy", ".", "deepcopy", "(", "self", ".", "args", ")", "\n", "args", ".", "title", "=", "os", ".", "path", ".", "join", "(", "args", ".", "title", ",", "\"VinceModel\"", ")", "\n", "args", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "*", "(", "args", ".", "checkpoint_dir", ".", "split", "(", "os", ".", "sep", ")", "[", "2", ":", "]", ")", ")", "\n", "args", ".", "long_save_checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "*", "(", "args", ".", "long_save_checkpoint_dir", ".", "split", "(", "os", ".", "sep", ")", "[", "2", ":", "-", "1", "]", ")", ",", "constants", ".", "TIME_STR", "\n", ")", "\n", "args", ".", "tensorboard_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "*", "(", "args", ".", "checkpoint_dir", ".", "split", "(", "os", ".", "sep", ")", "[", "2", ":", "-", "1", "]", ")", ",", "constants", ".", "TIME_STR", "\n", ")", "\n", "self", ".", "feature_extractor", "=", "VinceModel", "(", "args", ")", "\n", "print", "(", "self", ".", "feature_extractor", ")", "\n", "self", ".", "feature_extractor", ".", "restore", "(", ")", "\n", "self", ".", "feature_extractor", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "freeze_feature_extractor", ":", "\n", "            ", "self", ".", "feature_extractor", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "feature_extractor", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.make_decoder_network": [[131, 133], ["None"], "methods", ["None"], ["", "", "def", "make_decoder_network", "(", "self", ",", "args", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.setup_model": [[134, 155], ["end_task_base_solver.EndTaskBaseSolver.setup_feature_extractor", "copy.deepcopy", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "end_task_base_solver.EndTaskBaseSolver.make_decoder_network", "end_task_base_solver.EndTaskBaseSolver.model.restore", "end_task_base_solver.EndTaskBaseSolver.model.to", "len", "end_task_base_solver.EndTaskBaseSolver.train_logger.network_conv_summary", "copy.deepcopy.checkpoint_dir.split", "copy.deepcopy.long_save_checkpoint_dir.split", "copy.deepcopy.checkpoint_dir.split"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.setup_feature_extractor", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.make_decoder_network", "home.repos.pwc.inspect_result.danielgordon10_vince.models.base_model.BaseModel.restore", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "setup_feature_extractor", "(", ")", "\n", "args", "=", "copy", ".", "deepcopy", "(", "self", ".", "args", ")", "\n", "args", ".", "title", "=", "os", ".", "path", ".", "join", "(", "args", ".", "title", ",", "self", ".", "solver_model_name", ")", "\n", "args", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "*", "(", "args", ".", "checkpoint_dir", ".", "split", "(", "os", ".", "sep", ")", "[", "2", ":", "]", ")", ")", "\n", "args", ".", "long_save_checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "*", "(", "args", ".", "long_save_checkpoint_dir", ".", "split", "(", "os", ".", "sep", ")", "[", "2", ":", "-", "1", "]", ")", ",", "constants", ".", "TIME_STR", "\n", ")", "\n", "args", ".", "tensorboard_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "base_logdir", ",", "args", ".", "title", ",", "*", "(", "args", ".", "checkpoint_dir", ".", "split", "(", "os", ".", "sep", ")", "[", "2", ":", "-", "1", "]", ")", ",", "constants", ".", "TIME_STR", "\n", ")", "\n", "self", ".", "model", "=", "self", ".", "make_decoder_network", "(", "args", ")", "\n", "\n", "self", ".", "iteration", "=", "self", ".", "model", ".", "restore", "(", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "train_loader", "is", "not", "None", ":", "\n", "            ", "self", ".", "epoch", "=", "self", ".", "iteration", "//", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "", "if", "self", ".", "freeze_feature_extractor", ":", "\n", "            ", "if", "self", ".", "train_logger", "is", "not", "None", ":", "\n", "                ", "self", ".", "train_logger", ".", "network_conv_summary", "(", "self", ".", "feature_extractor", ".", "feature_extractor", ".", "module", ",", "self", ".", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.reset_epoch": [[156, 165], ["super().reset_epoch", "end_task_base_solver.EndTaskBaseSolver.model.train", "end_task_base_solver.EndTaskBaseSolver.train_logger.network_conv_summary", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.eval", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.train"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.reset_epoch"], ["", "", "", "def", "reset_epoch", "(", "self", ")", ":", "\n", "        ", "super", "(", "EndTaskBaseSolver", ",", "self", ")", ".", "reset_epoch", "(", ")", "\n", "if", "not", "self", ".", "freeze_feature_extractor", "and", "self", ".", "train_logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "train_logger", ".", "network_conv_summary", "(", "self", ".", "feature_extractor", ".", "feature_extractor", ".", "module", ",", "self", ".", "iteration", ")", "\n", "", "if", "self", ".", "freeze_feature_extractor", ":", "\n", "            ", "self", ".", "feature_extractor", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "feature_extractor", ".", "train", "(", ")", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.convert_batch": [[166, 172], ["isinstance", "val.to", "batch.items"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "convert_batch", "(", "self", ",", "batch", ",", "batch_type", ":", "str", "=", "\"train\"", ")", "->", "Dict", ":", "\n", "        ", "batch", "=", "{", "\n", "key", ":", "(", "val", ".", "to", "(", "self", ".", "model", ".", "device", ",", "non_blocking", "=", "True", ")", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", "else", "val", ")", "\n", "for", "key", ",", "val", "in", "batch", ".", "items", "(", ")", "\n", "}", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.get_batch": [[173, 190], ["next", "end_task_base_solver.EndTaskBaseSolver.convert_batch", "len", "print", "end_task_base_solver.EndTaskBaseSolver.train_logger.scalar_summary", "end_task_base_solver.EndTaskBaseSolver.train_logger.scalar_summary"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.convert_batch"], ["", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "iter_output", "=", "next", "(", "self", ".", "batch_iter", ")", "\n", "self", ".", "train_batch_counter", "+=", "1", "\n", "if", "self", ".", "train_batch_counter", "==", "len", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "print", "(", "\"Hit stop iteration. End of epoch.\"", ")", "\n", "self", ".", "train_logger", ".", "scalar_summary", "(", "\n", "\"metrics/%s/epoch\"", "%", "self", ".", "full_name", ",", "self", ".", "epoch", ",", "step", "=", "self", ".", "iteration", ",", "increment_counter", "=", "False", "\n", ")", "\n", "self", ".", "train_logger", ".", "scalar_summary", "(", "\n", "\"metrics/%s/lr\"", "%", "self", ".", "full_name", ",", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "\n", "step", "=", "self", ".", "iteration", ",", "\n", "increment_counter", "=", "False", ",", "\n", ")", "\n", "self", ".", "train_batch_counter", "=", "0", "\n", "raise", "StopIteration", "\n", "", "return", "self", ".", "convert_batch", "(", "iter_output", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.get_val_batch": [[191, 198], ["iter", "range", "len", "next", "end_task_base_solver.EndTaskBaseSolver.convert_batch"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.convert_batch"], ["", "def", "get_val_batch", "(", "self", ")", ":", "\n", "# Useful for never_ending persistent dataloader which will never raise StopIteration on its own.", "\n", "        ", "val_iter", "=", "iter", "(", "self", ".", "val_loader", ")", "\n", "for", "_", "in", "range", "(", "len", "(", "self", ".", "val_loader", ")", ")", ":", "\n", "            ", "iter_output", "=", "next", "(", "val_iter", ")", "\n", "yield", "self", ".", "convert_batch", "(", "iter_output", ",", "\"val\"", ")", "\n", "", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.forward": [[199, 213], ["end_task_base_solver.EndTaskBaseSolver.model", "end_task_base_solver.EndTaskBaseSolver.update", "end_task_base_solver.EndTaskBaseSolver.update", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.extract_features", "features[].to", "torch.no_grad", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.extract_features", "features[].to().detach", "features[].to"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "freeze_feature_extractor", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "features", "=", "self", ".", "feature_extractor", ".", "extract_features", "(", "batch", "[", "\"data\"", "]", ")", "\n", "extracted_features", "=", "features", "[", "\"extracted_features\"", "]", ".", "to", "(", "self", ".", "model", ".", "device", ")", ".", "detach", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "feature_extractor", ".", "extract_features", "(", "batch", "[", "\"data\"", "]", ")", "\n", "extracted_features", "=", "features", "[", "\"extracted_features\"", "]", ".", "to", "(", "self", ".", "model", ".", "device", ")", "\n", "\n", "", "output", "=", "self", ".", "model", "(", "extracted_features", ")", "\n", "\n", "output", ".", "update", "(", "features", ")", "\n", "output", ".", "update", "(", "batch", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.run_train_iteration": [[214, 304], ["time.time", "time.time", "time.time", "end_task_base_solver.EndTaskBaseSolver.time_meters[].update", "time.time", "end_task_base_solver.EndTaskBaseSolver.forward", "end_task_base_solver.EndTaskBaseSolver.model.loss", "time.time", "end_task_base_solver.EndTaskBaseSolver.time_meters[].update", "time.time", "end_task_base_solver.EndTaskBaseSolver.model.get_metrics", "end_task_base_solver.EndTaskBaseSolver.items", "end_task_base_solver.EndTaskBaseSolver.items", "time.time", "end_task_base_solver.EndTaskBaseSolver.time_meters[].update", "time.time", "end_task_base_solver.EndTaskBaseSolver.optimizer.zero_grad", "end_task_base_solver.EndTaskBaseSolver.optimizer.step", "time.time", "end_task_base_solver.EndTaskBaseSolver.time_meters[].update", "time.time", "end_task_base_solver.EndTaskBaseSolver.time_meters[].update", "end_task_base_solver.EndTaskBaseSolver.get_batch", "end_task_base_solver.EndTaskBaseSolver.loss_meters[].update", "end_task_base_solver.EndTaskBaseSolver.loss_meters[].update", "torch.isfinite", "end_task_base_solver.EndTaskBaseSolver.metric_meters[].update", "loss.backward", "end_task_base_solver.EndTaskBaseSolver.model.get_image_output", "log_dict.update", "log_dict.update", "end_task_base_solver.EndTaskBaseSolver.save", "traceback.print_exc", "pdb.set_trace", "print", "amp.scale_loss", "scaled_loss.backward", "end_task_base_solver.EndTaskBaseSolver.items", "end_task_base_solver.EndTaskBaseSolver.train_logger.dict_log", "key.startswith", "end_task_base_solver.EndTaskBaseSolver.time_meters.items", "isinstance", "end_task_base_solver.EndTaskBaseSolver.loss_meters.items", "end_task_base_solver.EndTaskBaseSolver.metric_meters.items", "enumerate", "end_task_base_solver.EndTaskBaseSolver.train_logger.image_summary", "end_task_base_solver.EndTaskBaseSolver.train_logger.image_summary", "len", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.forward", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.loss", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_metrics", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.get_batch", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_image_output", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.save"], ["", "def", "run_train_iteration", "(", "self", ")", ":", "\n", "        ", "total_t_start", "=", "time", ".", "time", "(", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "            ", "image_batch", "=", "self", ".", "get_batch", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "return", "\n", "\n", "", "t_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_meters", "[", "\"data_cache_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "output", "=", "self", ".", "forward", "(", "image_batch", ")", "\n", "loss_dict", "=", "self", ".", "model", ".", "loss", "(", "output", ")", "\n", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_meters", "[", "\"forward_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "metrics", "=", "self", ".", "model", ".", "get_metrics", "(", "output", ")", "\n", "\n", "total_loss", "=", "0", "\n", "for", "key", ",", "val", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "            ", "weighted_loss", "=", "val", "[", "0", "]", "*", "val", "[", "1", "]", "\n", "total_loss", "=", "total_loss", "+", "weighted_loss", "\n", "self", ".", "loss_meters", "[", "key", "]", ".", "update", "(", "weighted_loss", ")", "\n", "", "if", "\"total_loss\"", "in", "self", ".", "loss_meters", ":", "\n", "            ", "self", ".", "loss_meters", "[", "\"total_loss\"", "]", ".", "update", "(", "total_loss", ")", "\n", "", "loss", "=", "total_loss", "\n", "\n", "try", ":", "\n", "            ", "assert", "torch", ".", "isfinite", "(", "loss", ")", "\n", "", "except", "AssertionError", "as", "re", ":", "\n", "            ", "import", "pdb", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "print", "(", "\"anomoly\"", ",", "re", ")", "\n", "raise", "re", "\n", "\n", "", "for", "key", ",", "val", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "metric_meters", "[", "key", "]", ".", "update", "(", "val", ")", "\n", "\n", "", "t_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_meters", "[", "\"metrics_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "use_apex", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "self", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_meters", "[", "\"backward_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "\n", "if", "self", ".", "logger_iteration", "%", "self", ".", "args", ".", "image_log_frequency", "==", "0", ":", "\n", "            ", "image_output", "=", "self", ".", "model", ".", "get_image_output", "(", "output", ")", "\n", "if", "self", ".", "train_logger", "is", "not", "None", ":", "\n", "                ", "for", "key", ",", "val", "in", "image_output", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "\"images\"", ")", ":", "\n", "                        ", "if", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "                            ", "for", "vv", ",", "item", "in", "enumerate", "(", "val", ")", ":", "\n", "                                ", "self", ".", "train_logger", ".", "image_summary", "(", "\n", "self", ".", "full_name", "+", "\"_\"", "+", "key", "[", "len", "(", "\"images/\"", ")", ":", "]", ",", "item", ",", "self", ".", "iteration", "+", "vv", ",", "False", "\n", ")", "\n", "", "", "else", ":", "\n", "                            ", "self", ".", "train_logger", ".", "image_summary", "(", "\n", "self", ".", "full_name", "+", "\"_\"", "+", "key", "[", "len", "(", "\"images/\"", ")", ":", "]", ",", "val", ",", "self", ".", "iteration", ",", "False", "\n", ")", "\n", "\n", "", "", "", "", "", "if", "self", ".", "logger_iteration", "%", "self", ".", "args", ".", "log_frequency", "==", "0", ":", "\n", "            ", "log_dict", "=", "{", "\"times/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "val", ".", "val", "for", "key", ",", "val", "in", "self", ".", "time_meters", ".", "items", "(", ")", "}", "\n", "log_dict", ".", "update", "(", "{", "\"losses/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "val", ".", "val", "for", "key", ",", "val", "in", "self", ".", "loss_meters", ".", "items", "(", ")", "}", ")", "\n", "log_dict", ".", "update", "(", "\n", "{", "\"metrics/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "val", ".", "val", "for", "key", ",", "val", "in", "self", ".", "metric_meters", ".", "items", "(", ")", "}", "\n", ")", "\n", "if", "self", ".", "train_logger", "is", "not", "None", ":", "\n", "                ", "self", ".", "train_logger", ".", "dict_log", "(", "log_dict", ",", "self", ".", "iteration", ")", "\n", "\n", "", "", "self", ".", "iteration", "+=", "self", ".", "args", ".", "batch_size", "\n", "\n", "if", "self", ".", "logger_iteration", "%", "self", ".", "args", ".", "save_frequency", "==", "0", ":", "\n", "            ", "self", ".", "save", "(", "5", ")", "\n", "\n", "", "total_t_end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time_meters", "[", "\"total_time\"", "]", ".", "update", "(", "total_t_end", "-", "total_t_start", ")", "\n", "self", ".", "logger_iteration", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.run_val": [[305, 401], ["log_dict.update", "torch.no_grad", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.eval", "end_task_base_solver.EndTaskBaseSolver.model.eval", "dict", "time.time", "enumerate", "end_task_base_solver.EndTaskBaseSolver.val_logger.dict_log", "dg_util.python_utils.average_meter.RollingAverageMeter", "len", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.AverageMeter", "dg_util.python_utils.average_meter.AverageMeter", "tqdm.tqdm", "time.time", "time_meters[].update", "time.time", "end_task_base_solver.EndTaskBaseSolver.forward", "end_task_base_solver.EndTaskBaseSolver.model.loss", "time.time", "time_meters[].update", "time.time", "end_task_base_solver.EndTaskBaseSolver.model.get_metrics", "end_task_base_solver.EndTaskBaseSolver.items", "end_task_base_solver.EndTaskBaseSolver.items", "time.time", "time_meters[].update", "time.time", "time_meters[].update", "time.time", "epoch_loss_meters.items", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "end_task_base_solver.EndTaskBaseSolver.model.loss().keys", "end_task_base_solver.EndTaskBaseSolver.model.get_metrics().keys", "loss_meters.keys", "metric_meters.keys", "end_task_base_solver.EndTaskBaseSolver.get_val_batch", "end_task_base_solver.EndTaskBaseSolver.model.get_image_output", "loss_meters[].update", "epoch_loss_meters[].update", "loss_meters[].update", "epoch_loss_meters[].update", "torch.isfinite", "metric_meters[].update", "epoch_metric_meters[].update", "log_dict.update", "log_dict.update", "epoch_metric_meters.items", "len", "pdb.set_trace", "print", "end_task_base_solver.EndTaskBaseSolver.items", "end_task_base_solver.EndTaskBaseSolver.val_logger.dict_log", "end_task_base_solver.EndTaskBaseSolver.model.loss", "end_task_base_solver.EndTaskBaseSolver.model.get_metrics", "isinstance", "dict.items", "enumerate", "end_task_base_solver.EndTaskBaseSolver.val_logger.image_summary", "loss_meters.items", "metric_meters.items", "end_task_base_solver.EndTaskBaseSolver.val_logger.image_summary"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.forward", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.loss", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_metrics", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.get_val_batch", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_image_output", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.loss", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_metrics"], ["", "def", "run_val", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "feature_extractor", ".", "eval", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "time_meters", "=", "dict", "(", "\n", "total_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", "data_cache_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", "forward_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", "metrics_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", ")", "\n", "loss_meters", "=", "{", "key", ":", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", "for", "key", "in", "self", ".", "model", ".", "loss", "(", "None", ")", ".", "keys", "(", ")", "}", "\n", "if", "len", "(", "loss_meters", ")", ">", "1", ":", "\n", "                ", "loss_meters", "[", "\"total_loss\"", "]", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", "\n", "", "metric_meters", "=", "{", "\n", "metric", ":", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", "for", "metric", "in", "self", ".", "model", ".", "get_metrics", "(", "None", ")", ".", "keys", "(", ")", "\n", "}", "\n", "\n", "epoch_loss_meters", "=", "{", "\"epoch_\"", "+", "key", ":", "AverageMeter", "(", ")", "for", "key", "in", "loss_meters", ".", "keys", "(", ")", "}", "\n", "epoch_metric_meters", "=", "{", "\"epoch_\"", "+", "key", ":", "AverageMeter", "(", ")", "for", "key", "in", "metric_meters", ".", "keys", "(", ")", "}", "\n", "\n", "step_on", "=", "self", ".", "iteration", "\n", "\n", "total_t_start", "=", "time", ".", "time", "(", ")", "\n", "for", "ii", ",", "image_batch", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "self", ".", "get_val_batch", "(", ")", ",", "total", "=", "len", "(", "self", ".", "val_loader", ")", ")", ")", ":", "\n", "                ", "batch_size", "=", "image_batch", "[", "\"data\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "time_meters", "[", "\"data_cache_time\"", "]", ".", "update", "(", "t_end", "-", "total_t_start", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "image_batch", ")", "\n", "loss_dict", "=", "self", ".", "model", ".", "loss", "(", "output", ")", "\n", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "time_meters", "[", "\"forward_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "metrics", "=", "self", ".", "model", ".", "get_metrics", "(", "output", ")", "\n", "if", "ii", "%", "self", ".", "args", ".", "image_log_frequency", "==", "0", ":", "\n", "                    ", "image_output", "=", "self", ".", "model", ".", "get_image_output", "(", "output", ")", "\n", "\n", "", "total_loss", "=", "0", "\n", "for", "key", ",", "val", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "                    ", "weighted_loss", "=", "val", "[", "0", "]", "*", "val", "[", "1", "]", "\n", "total_loss", "=", "total_loss", "+", "weighted_loss", "\n", "loss_meters", "[", "key", "]", ".", "update", "(", "weighted_loss", ")", "\n", "epoch_loss_meters", "[", "\"epoch_\"", "+", "key", "]", ".", "update", "(", "weighted_loss", ",", "batch_size", ")", "\n", "", "if", "\"total_loss\"", "in", "loss_meters", ":", "\n", "                    ", "loss_meters", "[", "\"total_loss\"", "]", ".", "update", "(", "total_loss", ")", "\n", "epoch_loss_meters", "[", "\"epoch_total_loss\"", "]", ".", "update", "(", "total_loss", ",", "batch_size", ")", "\n", "", "loss", "=", "total_loss", "\n", "\n", "try", ":", "\n", "                    ", "assert", "torch", ".", "isfinite", "(", "loss", ")", "\n", "", "except", "AssertionError", ":", "\n", "                    ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "print", "(", "\"Loss is infinite\"", ")", "\n", "\n", "", "for", "key", ",", "val", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                    ", "metric_meters", "[", "key", "]", ".", "update", "(", "val", ")", "\n", "epoch_metric_meters", "[", "\"epoch_\"", "+", "key", "]", ".", "update", "(", "val", ",", "batch_size", ")", "\n", "\n", "", "t_end", "=", "time", ".", "time", "(", ")", "\n", "time_meters", "[", "\"metrics_time\"", "]", ".", "update", "(", "t_end", "-", "t_start", ")", "\n", "\n", "if", "ii", "%", "self", ".", "args", ".", "image_log_frequency", "==", "0", ":", "\n", "                    ", "if", "self", ".", "val_logger", "is", "not", "None", ":", "\n", "                        ", "for", "key", ",", "val", "in", "image_output", ".", "items", "(", ")", ":", "\n", "                            ", "if", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "                                ", "for", "vv", ",", "item", "in", "enumerate", "(", "val", ")", ":", "\n", "                                    ", "self", ".", "val_logger", ".", "image_summary", "(", "self", ".", "full_name", "+", "\"/\"", "+", "key", ",", "item", ",", "step_on", "+", "vv", ",", "False", ")", "\n", "", "", "else", ":", "\n", "                                ", "self", ".", "val_logger", ".", "image_summary", "(", "self", ".", "full_name", "+", "\"/\"", "+", "key", ",", "val", ",", "step_on", ",", "False", ")", "\n", "\n", "", "", "", "", "if", "ii", "%", "self", ".", "args", ".", "log_frequency", "==", "0", ":", "\n", "                    ", "log_dict", "=", "{", "\"times/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "val", ".", "val", "for", "key", ",", "val", "in", "time_meters", ".", "items", "(", ")", "}", "\n", "log_dict", ".", "update", "(", "\n", "{", "\"losses/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "val", ".", "val", "for", "key", ",", "val", "in", "loss_meters", ".", "items", "(", ")", "}", "\n", ")", "\n", "log_dict", ".", "update", "(", "\n", "{", "\"metrics/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "val", ".", "val", "for", "key", ",", "val", "in", "metric_meters", ".", "items", "(", ")", "}", "\n", ")", "\n", "if", "self", ".", "val_logger", "is", "not", "None", ":", "\n", "                        ", "self", ".", "val_logger", ".", "dict_log", "(", "log_dict", ",", "step_on", ")", "\n", "\n", "", "", "step_on", "+=", "self", ".", "args", ".", "batch_size", "\n", "total_t_end", "=", "time", ".", "time", "(", ")", "\n", "time_meters", "[", "\"total_time\"", "]", ".", "update", "(", "total_t_end", "-", "total_t_start", ")", "\n", "total_t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "log_dict", "=", "{", "\"epoch/losses/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "val", ".", "avg", "for", "key", ",", "val", "in", "epoch_loss_meters", ".", "items", "(", ")", "}", "\n", "log_dict", ".", "update", "(", "\n", "{", "\"epoch/metrics/%s/%s\"", "%", "(", "self", ".", "full_name", ",", "key", ")", ":", "val", ".", "avg", "for", "key", ",", "val", "in", "epoch_metric_meters", ".", "items", "(", ")", "}", "\n", ")", "\n", "if", "self", ".", "val_logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "val_logger", ".", "dict_log", "(", "log_dict", ",", "step_on", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.run_eval": [[402, 418], ["dg_util.python_utils.persistent_dataloader.PersistentDataLoader", "end_task_base_solver.EndTaskBaseSolver.val_loader.set_dataset", "end_task_base_solver.EndTaskBaseSolver.run_val", "end_task_base_solver.EndTaskBaseSolver.args.dataset", "min"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.run_val"], ["", "", "def", "run_eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "val_loader", "=", "PersistentDataLoader", "(", "\n", "dataset", "=", "None", ",", "\n", "num_workers", "=", "min", "(", "self", ".", "args", ".", "num_workers", ",", "40", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "never_ending", "=", "True", ",", "\n", ")", "\n", "self", ".", "val_loader", ".", "set_dataset", "(", "\n", "self", ".", "args", ".", "dataset", "(", "self", ".", "args", ",", "\"val\"", ")", ",", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "self", ".", "args", ".", "dataset", ".", "collate_fn", ",", "\n", "worker_init_fn", "=", "self", ".", "args", ".", "dataset", ".", "worker_init_fn", ",", "\n", ")", "\n", "self", ".", "run_val", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.save": [[419, 423], ["end_task_base_solver.EndTaskBaseSolver.model.save", "end_task_base_solver.EndTaskBaseSolver.feature_extractor.save"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.save", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.save"], ["", "def", "save", "(", "self", ",", "num_to_keep", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "save", "(", "self", ".", "iteration", ",", "num_to_keep", ")", "\n", "if", "not", "self", ".", "freeze_feature_extractor", ":", "\n", "            ", "self", ".", "feature_extractor", ".", "save", "(", "self", ".", "iteration", ",", "num_to_keep", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskClassifierSolver.ind_to_label_func": [[14, 17], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "ind_to_label_func", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskClassifierSolver.make_decoder_network": [[18, 29], ["models.linear_model.MultiLinearModel", "print"], "methods", ["None"], ["", "def", "make_decoder_network", "(", "self", ",", "args", ")", ":", "\n", "        ", "model", "=", "MultiLinearModel", "(", "\n", "args", ",", "\n", "self", ".", "feature_extractor", ".", "output_channels", ",", "\n", "self", ".", "args", ".", "end_task_classifier_num_classes", ",", "\n", "[", "1", ",", "2", "]", ",", "\n", "self", ".", "ind_to_label_func", ",", "\n", "dropout", "=", "0", ",", "\n", ")", "\n", "print", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskClassifierSolver.setup_model_param_groups": [[30, 42], ["enumerate", "param_groups.append", "model.parameters"], "methods", ["None"], ["", "def", "setup_model_param_groups", "(", "self", ")", ":", "\n", "        ", "param_groups", "=", "[", "]", "\n", "wd", "=", "0", "if", "self", ".", "freeze_feature_extractor", "else", "1e-4", "\n", "for", "mm", ",", "model", "in", "enumerate", "(", "self", ".", "model", ".", "classifiers", ")", ":", "\n", "            ", "param_group", "=", "{", "\n", "\"params\"", ":", "model", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "self", ".", "args", ".", "base_lr", "*", "0.01", "**", "mm", ",", "\n", "\"weight_decay\"", ":", "wd", ",", "\n", "\"initial_lr\"", ":", "self", ".", "args", ".", "base_lr", "*", "0.01", "**", "mm", ",", "\n", "}", "\n", "param_groups", ".", "append", "(", "param_group", ")", "\n", "", "return", "param_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskImagenetSolver.setup_other": [[45, 47], ["None"], "methods", ["None"], ["    ", "def", "setup_other", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskImagenetSolver.get_transform": [[48, 51], ["utils.transforms.BasicImagenetTransform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_transform", "(", "size", ",", "data_subset", "=", "\"train\"", ")", ":", "\n", "        ", "return", "BasicImagenetTransform", "(", "size", ",", "data_subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskImagenetSolver.ind_to_label_func": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ind_to_label_func", "(", "self", ")", ":", "\n", "        ", "return", "imagenet_label_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskImagenetSolver.create_optimizer": [[56, 59], ["torch.optim.SGD"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_optimizer", "(", "param_groups", ",", "base_lr", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "SGD", "(", "param_groups", ",", "lr", "=", "base_lr", ",", "weight_decay", "=", "0", ",", "momentum", "=", "0.9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskImagenetSolver.convert_batch": [[60, 64], ["super().convert_batch", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.convert_batch"], ["", "def", "convert_batch", "(", "self", ",", "batch", ",", "batch_type", ":", "str", "=", "\"train\"", ")", "->", "Dict", ":", "\n", "        ", "data", ",", "labels", "=", "batch", "\n", "batch", "=", "{", "\"data\"", ":", "data", ",", "\"classifier_labels\"", ":", "labels", ",", "\"data_source\"", ":", "\"IN\"", ",", "\"batch_type\"", ":", "(", "\"images\"", ",", "len", "(", "data", ")", ")", "}", "\n", "return", "super", "(", "EndTaskImagenetSolver", ",", "self", ")", ".", "convert_batch", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskSunSceneSolver.ind_to_label_func": [[67, 70], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "ind_to_label_func", "(", "self", ")", ":", "\n", "        ", "return", "sun_scene_label_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskSunSceneSolver.setup_model_param_groups": [[71, 83], ["enumerate", "param_groups.append", "model.parameters"], "methods", ["None"], ["", "def", "setup_model_param_groups", "(", "self", ")", ":", "\n", "        ", "param_groups", "=", "[", "]", "\n", "wd", "=", "0", "if", "self", ".", "freeze_feature_extractor", "else", "1e-4", "\n", "for", "mm", ",", "model", "in", "enumerate", "(", "self", ".", "model", ".", "classifiers", ")", ":", "\n", "            ", "param_group", "=", "{", "\n", "\"params\"", ":", "model", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "self", ".", "args", ".", "base_lr", ",", "\n", "\"weight_decay\"", ":", "wd", ",", "\n", "\"initial_lr\"", ":", "self", ".", "args", ".", "base_lr", ",", "\n", "}", "\n", "param_groups", ".", "append", "(", "param_group", ")", "\n", "", "return", "param_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskSunSceneSolver.setup_other": [[84, 86], ["None"], "methods", ["None"], ["", "def", "setup_other", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_classifier_solver.EndTaskSunSceneSolver.convert_batch": [[87, 91], ["super().convert_batch", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.convert_batch"], ["", "def", "convert_batch", "(", "self", ",", "batch", ",", "batch_type", ":", "str", "=", "\"train\"", ")", "->", "Dict", ":", "\n", "        ", "batch", "[", "\"data_source\"", "]", "=", "\"SUN_Scenes\"", "\n", "batch", "[", "\"batch_type\"", "]", "=", "(", "\"images\"", ",", "len", "(", "batch", "[", "\"data\"", "]", ")", ")", "\n", "return", "super", "(", "EndTaskSunSceneSolver", ",", "self", ")", ".", "convert_batch", "(", "batch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.__init__": [[21, 45], ["base_solver.BaseSolver.setup_dataloader", "base_solver.BaseSolver.setup_other", "base_solver.BaseSolver.setup_model", "base_solver.BaseSolver.setup_optimizer"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.setup_dataloader", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.setup_other", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.setup_model", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.setup_optimizer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "args", ",", "train_logger", ":", "tensorboard_logger", ".", "Logger", "=", "None", ",", "val_logger", ":", "tensorboard_logger", ".", "Logger", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "use_apex", "=", "AMP", "and", "self", ".", "args", ".", "use_apex", "\n", "self", ".", "input_size", "=", "args", ".", "input_size", "\n", "self", ".", "model", ":", "nn", ".", "Module", "=", "None", "\n", "self", ".", "logger_iteration", "=", "0", "\n", "self", ".", "train_logger", "=", "None", "\n", "self", ".", "val_logger", "=", "None", "\n", "if", "not", "args", ".", "debug", ":", "\n", "            ", "self", ".", "train_logger", "=", "train_logger", "\n", "self", ".", "val_logger", "=", "val_logger", "\n", "", "self", ".", "time_meters", "=", "{", "}", "\n", "self", ".", "metric_meters", "=", "{", "}", "\n", "self", ".", "loss_meters", "=", "{", "}", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "optimizer", ":", "optim", ".", "Optimizer", "=", "None", "\n", "self", ".", "freeze_feature_extractor", "=", "self", ".", "args", ".", "freeze_feature_extractor", "\n", "self", ".", "setup_dataloader", "(", ")", "\n", "self", ".", "setup_other", "(", ")", "\n", "self", ".", "setup_model", "(", ")", "\n", "self", ".", "setup_optimizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.device": [[46, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "torch_devices", "=", "self", ".", "args", ".", "pytorch_gpu_ids", "\n", "device", "=", "torch_devices", "[", "0", "]", "\n", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.model_name": [[52, 57], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_name", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "model", "is", "None", ":", "\n", "            ", "return", "\"Unknown\"", "\n", "", "return", "type", "(", "self", ".", "model", ")", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.solver_name": [[58, 61], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "solver_name", "(", "self", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.full_name": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "full_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "solver_name", "+", "\"_\"", "+", "self", ".", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.setup_dataloader": [[66, 68], ["None"], "methods", ["None"], ["", "def", "setup_dataloader", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.iterations_per_epoch": [[69, 72], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "iterations_per_epoch", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.setup_other": [[73, 76], ["None"], "methods", ["None"], ["", "def", "setup_other", "(", "self", ")", ":", "\n", "# For setup after dataset stuff so they don't take crazy amounts of RAM.", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.get_batch": [[77, 79], ["None"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.setup_model": [[80, 82], ["None"], "methods", ["None"], ["", "def", "setup_model", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.setup_optimizer": [[83, 85], ["None"], "methods", ["None"], ["", "def", "setup_optimizer", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.end": [[86, 88], ["None"], "methods", ["None"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.print_optimizer": [[89, 106], ["print", "base_solver.BaseSolver.adjust_learning_rate", "print", "print", "print", "print", "print", "print", "print", "numpy.cos", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.adjust_learning_rate"], ["", "def", "print_optimizer", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"optimizer\"", ",", "self", ".", "optimizer", ")", "\n", "start_lr", "=", "self", ".", "adjust_learning_rate", "(", ")", "\n", "if", "self", ".", "args", ".", "lr_decay_type", "==", "\"cos\"", ":", "\n", "            ", "print", "(", "\"Cosine learning rate schedule\"", ")", "\n", "print", "(", "\"Start epoch\"", ",", "self", ".", "epoch", ",", "\"End epoch\"", ",", "self", ".", "args", ".", "epochs", ")", "\n", "print", "(", "\n", "\"Start LR\"", ",", "\n", "start_lr", ",", "\n", "\"End LR\"", ",", "\n", "start_lr", "*", "0.5", "*", "(", "1.0", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "(", "self", ".", "args", ".", "epochs", "-", "1", ")", "/", "self", ".", "args", ".", "epochs", ")", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Step learning rate schedule\"", ")", "\n", "print", "(", "\"Start epoch\"", ",", "self", ".", "epoch", ",", "\"End epoch\"", ",", "self", ".", "args", ".", "epochs", ")", "\n", "print", "(", "\"Steps\"", ",", "self", ".", "args", ".", "lr_step_schedule", ")", "\n", "print", "(", "\"Start LR\"", ",", "start_lr", ",", "\"End LR\"", ",", "start_lr", "*", "0.1", "**", "len", "(", "self", ".", "args", ".", "lr_step_schedule", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.adjust_learning_rate": [[107, 130], ["print", "base_solver.BaseSolver.train_logger.scalar_summary", "base_solver.BaseSolver.train_logger.scalar_summary", "numpy.cos"], "methods", ["None"], ["", "", "def", "adjust_learning_rate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "out_base_lr", "=", "self", ".", "args", ".", "base_lr", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "in_lr", "=", "param_group", "[", "\"initial_lr\"", "]", "\n", "out_lr", "=", "in_lr", "\n", "if", "self", ".", "args", ".", "lr_decay_type", "==", "\"cos\"", ":", "# cosine lr schedule", "\n", "                ", "out_lr", "*=", "0.5", "*", "(", "1.0", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "self", ".", "epoch", "/", "self", ".", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "                ", "for", "milestone", "in", "self", ".", "args", ".", "lr_step_schedule", ":", "\n", "                    ", "out_lr", "*=", "0.1", "if", "self", ".", "epoch", ">=", "milestone", "else", "1.0", "\n", "", "", "param_group", "[", "\"lr\"", "]", "=", "out_lr", "\n", "if", "in_lr", "==", "self", ".", "args", ".", "base_lr", ":", "\n", "                ", "out_base_lr", "=", "out_lr", "\n", "", "", "if", "self", ".", "train_logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "train_logger", ".", "scalar_summary", "(", "\n", "\"metrics/%s/epoch\"", "%", "self", ".", "full_name", ",", "self", ".", "epoch", ",", "step", "=", "self", ".", "iteration", ",", "increment_counter", "=", "False", "\n", ")", "\n", "self", ".", "train_logger", ".", "scalar_summary", "(", "\n", "\"metrics/%s/lr\"", "%", "self", ".", "full_name", ",", "out_base_lr", ",", "step", "=", "self", ".", "iteration", ",", "increment_counter", "=", "False", "\n", ")", "\n", "", "print", "(", "\"Epoch\"", ",", "self", ".", "epoch", ",", "\"Learning rate\"", ",", "out_base_lr", ")", "\n", "return", "out_base_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.reset_epoch": [[131, 154], ["base_solver.BaseSolver.time_meters.update", "base_solver.BaseSolver.metric_meters.update", "base_solver.BaseSolver.loss_meters.update", "base_solver.BaseSolver.adjust_learning_rate", "base_solver.BaseSolver.model.train", "dict", "len", "dg_util.python_utils.average_meter.RollingAverageMeter", "base_solver.BaseSolver.train_logger.network_conv_summary", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "dg_util.python_utils.average_meter.RollingAverageMeter", "base_solver.BaseSolver.model.get_metrics().keys", "base_solver.BaseSolver.model.loss().keys", "base_solver.BaseSolver.model.get_metrics", "base_solver.BaseSolver.model.loss"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.adjust_learning_rate", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.get_metrics", "home.repos.pwc.inspect_result.danielgordon10_vince.models.end_task_kinetics_400_model.Kinetics400Model.loss"], ["", "def", "reset_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger_iteration", "=", "0", "\n", "self", ".", "time_meters", ".", "update", "(", "\n", "dict", "(", "\n", "total_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", "data_cache_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", "forward_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", "metrics_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", "backward_time", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", ",", "\n", ")", "\n", ")", "\n", "self", ".", "metric_meters", ".", "update", "(", "\n", "{", "metric", ":", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", "for", "metric", "in", "self", ".", "model", ".", "get_metrics", "(", "None", ")", ".", "keys", "(", ")", "}", "\n", ")", "\n", "self", ".", "loss_meters", ".", "update", "(", "\n", "{", "key", ":", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", "for", "key", "in", "self", ".", "model", ".", "loss", "(", "None", ")", ".", "keys", "(", ")", "}", "\n", ")", "\n", "if", "len", "(", "self", ".", "loss_meters", ")", ">", "1", ":", "\n", "            ", "self", ".", "loss_meters", "[", "\"total_loss\"", "]", "=", "RollingAverageMeter", "(", "self", ".", "args", ".", "log_frequency", ")", "\n", "", "self", ".", "adjust_learning_rate", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "train_logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "train_logger", ".", "network_conv_summary", "(", "self", ".", "model", ",", "self", ".", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.run_train_iteration": [[155, 157], ["None"], "methods", ["None"], ["", "", "def", "run_train_iteration", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.run_n_train_iterations": [[158, 162], ["base_solver.BaseSolver.reset_epoch", "tqdm.tqdm", "range", "base_solver.BaseSolver.run_train_iteration"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.reset_epoch", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.run_train_iteration"], ["", "def", "run_n_train_iterations", "(", "self", ",", "num_iterations", ":", "int", ")", ":", "\n", "        ", "self", ".", "reset_epoch", "(", ")", "\n", "for", "_", "in", "tqdm", ".", "tqdm", "(", "range", "(", "num_iterations", ")", ")", ":", "\n", "            ", "self", ".", "run_train_iteration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.run_val": [[163, 165], ["None"], "methods", ["None"], ["", "", "def", "run_val", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.save": [[166, 168], ["base_solver.BaseSolver.model.save"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.base_solver.BaseSolver.save"], ["", "def", "save", "(", "self", ",", "num_to_keep", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "model", ".", "save", "(", "self", ".", "iteration", ",", "num_to_keep", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.ind_to_label_func": [[12, 15], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "ind_to_label_func", "(", "self", ")", ":", "\n", "        ", "return", "kinetics_400_label_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.make_decoder_network": [[16, 20], ["models.end_task_kinetics_400_model.Kinetics400Model", "print"], "methods", ["None"], ["", "def", "make_decoder_network", "(", "self", ",", "args", ")", ":", "\n", "        ", "model", "=", "Kinetics400Model", "(", "args", ",", "self", ".", "feature_extractor", ".", "output_channels", ",", "512", ",", "self", ".", "ind_to_label_func", ")", "\n", "print", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.setup_model_param_groups": [[21, 32], ["param_groups.append", "end_task_kinetics_400_solver.EndTaskKinetics400Solver.model.parameters"], "methods", ["None"], ["", "def", "setup_model_param_groups", "(", "self", ")", ":", "\n", "        ", "param_groups", "=", "[", "]", "\n", "wd", "=", "0", "if", "self", ".", "freeze_feature_extractor", "else", "1e-4", "\n", "param_group", "=", "{", "\n", "\"params\"", ":", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "self", ".", "args", ".", "base_lr", ",", "\n", "\"weight_decay\"", ":", "wd", ",", "\n", "\"initial_lr\"", ":", "self", ".", "args", ".", "base_lr", ",", "\n", "}", "\n", "param_groups", ".", "append", "(", "param_group", ")", "\n", "return", "param_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.setup_other": [[33, 35], ["None"], "methods", ["None"], ["", "def", "setup_other", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.convert_batch": [[36, 46], ["dg_util.python_utils.pytorch_util.remove_dim", "super().convert_batch", "len"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.convert_batch"], ["", "def", "convert_batch", "(", "self", ",", "batch", ",", "batch_type", ":", "str", "=", "\"train\"", ")", "->", "Dict", ":", "\n", "        ", "batch", "[", "\"data_source\"", "]", "=", "\"Kinetics400\"", "\n", "data", "=", "batch", "[", "\"data\"", "]", "\n", "batch_size", ",", "seq_len", "=", "data", ".", "shape", "[", ":", "2", "]", "\n", "data", "=", "pt_util", ".", "remove_dim", "(", "data", ",", "1", ")", "\n", "batch", "[", "\"data\"", "]", "=", "data", "\n", "batch", "[", "\"batch_type\"", "]", "=", "(", "\"images\"", ",", "len", "(", "batch", "[", "\"data\"", "]", ")", ")", "\n", "batch", "[", "\"batch_size\"", "]", "=", "batch_size", "\n", "batch", "[", "\"num_frames\"", "]", "=", "seq_len", "\n", "return", "super", "(", "EndTaskKinetics400Solver", ",", "self", ")", ".", "convert_batch", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_kinetics_400_solver.EndTaskKinetics400Solver.forward": [[47, 61], ["feature_extractor_outputs[].detach.to", "dg_util.python_utils.pytorch_util.split_dim", "end_task_kinetics_400_solver.EndTaskKinetics400Solver.model", "end_task_kinetics_400_solver.EndTaskKinetics400Solver.update", "end_task_kinetics_400_solver.EndTaskKinetics400Solver.feature_extractor.extract_features", "torch.no_grad", "end_task_kinetics_400_solver.EndTaskKinetics400Solver.feature_extractor.extract_features", "feature_extractor_outputs[].detach"], "methods", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.extract_features"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "freeze_feature_extractor", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "feature_extractor_outputs", "=", "self", ".", "feature_extractor", ".", "extract_features", "(", "batch", "[", "\"data\"", "]", ")", "\n", "extracted_features", "=", "feature_extractor_outputs", "[", "\"extracted_features\"", "]", ".", "detach", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "feature_extractor_outputs", "=", "self", ".", "feature_extractor", ".", "extract_features", "(", "batch", "[", "\"data\"", "]", ")", "\n", "extracted_features", "=", "feature_extractor_outputs", "[", "\"extracted_features\"", "]", "\n", "", "extracted_features", "=", "extracted_features", ".", "to", "(", "self", ".", "model", ".", "device", ")", "\n", "extracted_features", "=", "pt_util", ".", "split_dim", "(", "extracted_features", ",", "0", ",", "batch", "[", "\"batch_size\"", "]", ",", "batch", "[", "\"num_frames\"", "]", ")", "\n", "output", "=", "self", ".", "model", "(", "extracted_features", ")", "\n", "output", "=", "{", "\"outputs\"", ":", "output", "}", "\n", "output", ".", "update", "(", "batch", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.make_mean_and_std": [[31, 37], ["dg_util.python_utils.pytorch_util.fix_broadcast", "dg_util.python_utils.pytorch_util.fix_broadcast", "mean.to.to", "std.to.to"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["def", "make_mean_and_std", "(", "inputs", ",", "mean", ",", "std", ")", ":", "\n", "    ", "_", ",", "mean", "=", "pt_util", ".", "fix_broadcast", "(", "inputs", ",", "mean", ")", "\n", "_", ",", "std", "=", "pt_util", ".", "fix_broadcast", "(", "inputs", ",", "std", ")", "\n", "mean", "=", "mean", ".", "to", "(", "dtype", "=", "inputs", ".", "dtype", ",", "device", "=", "inputs", ".", "device", ")", "\n", "std", "=", "std", ".", "to", "(", "dtype", "=", "inputs", ".", "dtype", ",", "device", "=", "inputs", ".", "device", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8": [[39, 45], ["dg_util.python_utils.pytorch_util.from_numpy().squeeze", "pt_util.to_numpy().transpose.mul_", "pt_util.to_numpy().transpose.add_", "dg_util.python_utils.pytorch_util.to_numpy().transpose", "dg_util.python_utils.pytorch_util.from_numpy", "dg_util.python_utils.pytorch_util.to_numpy", "pt_util.to_numpy().transpose.to"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "to_uint8", "(", "images", ")", ":", "\n", "    ", "images", "=", "pt_util", ".", "from_numpy", "(", "images", ")", ".", "squeeze", "(", "0", ")", "\n", "images", ".", "mul_", "(", "std", ")", "\n", "images", ".", "add_", "(", "mean", ")", "\n", "images", "=", "pt_util", ".", "to_numpy", "(", "images", ".", "to", "(", "torch", ".", "uint8", ")", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.process_video_data": [[47, 60], ["dg_util.python_utils.pytorch_util.remove_dim", "dg_util.python_utils.pytorch_util.remove_dim", "len", "torch.full", "len"], "function", ["None"], ["", "def", "process_video_data", "(", "batch", ")", ":", "\n", "    ", "data", "=", "pt_util", ".", "remove_dim", "(", "batch", "[", "\"data\"", "]", ",", "1", ")", "\n", "queue_data", "=", "pt_util", ".", "remove_dim", "(", "batch", "[", "\"queue_data\"", "]", ",", "1", ")", "\n", "batch", "=", "{", "\n", "\"data\"", ":", "data", ",", "\n", "\"queue_data\"", ":", "queue_data", ",", "\n", "\"data_source\"", ":", "\"YT\"", ",", "\n", "\"batch_type\"", ":", "\"video\"", ",", "\n", "\"batch_size\"", ":", "len", "(", "data", ")", ",", "\n", "\"num_frames\"", ":", "args", ".", "num_frames", ",", "\n", "\"imagenet_labels\"", ":", "torch", ".", "full", "(", "(", "len", "(", "data", ")", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "\n", "}", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.attention.draw_attention": [[7, 24], ["dg_util.python_utils.pytorch_util.to_numpy", "dg_util.python_utils.pytorch_util.to_numpy", "numpy.clip", "dg_util.python_utils.misc_util.resize", "dg_util.python_utils.pytorch_util.fix_broadcast"], "function", ["None"], ["def", "draw_attention", "(", "image", ",", "attention", ",", "height_channel", "=", "0", ",", "width_channel", "=", "1", ")", ":", "\n", "    ", "dtype", "=", "image", ".", "dtype", "\n", "image", "=", "pt_util", ".", "to_numpy", "(", "image", ")", "\n", "attention", "=", "pt_util", ".", "to_numpy", "(", "attention", ")", "\n", "attention", "=", "np", ".", "clip", "(", "attention", ",", "0", ",", "1", ")", "\n", "im_width", "=", "image", ".", "shape", "[", "width_channel", "]", "\n", "im_height", "=", "image", ".", "shape", "[", "height_channel", "]", "\n", "attention", "=", "misc_util", ".", "resize", "(", "\n", "attention", ",", "\n", "(", "im_width", ",", "im_height", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ",", "\n", "height_channel", "=", "height_channel", ",", "\n", "width_channel", "=", "width_channel", ",", "\n", ")", "\n", "image", ",", "attention", "=", "pt_util", ".", "fix_broadcast", "(", "image", ",", "attention", ")", "\n", "image", "=", "(", "image", "*", "(", "1", "-", "attention", ")", "+", "255", "*", "attention", ")", ".", "astype", "(", "dtype", ")", "\n", "return", "image", "\n", "", ""]], "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.get_data_item": [[41, 51], ["isinstance", "data.squeeze.squeeze", "isinstance", "isinstance", "data.squeeze.squeeze"], "function", ["None"], ["def", "get_data_item", "(", "data", ")", ":", "\n", "    ", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "        ", "data", "=", "data", "[", "\"data\"", "]", "\n", "data", "=", "data", ".", "squeeze", "(", "1", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "list", ")", "or", "isinstance", "(", "data", ",", "tuple", ")", ":", "\n", "        ", "data", ",", "label", "=", "data", "\n", "data", "=", "data", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.dataset_nn": [[53, 89], ["torch.no_grad", "min", "numpy.zeros", "tqdm.tqdm", "tqdm.tqdm.close", "len", "view_nearest_neighbors.get_data_item", "utils.util_functions.to_uint8.to", "model.get_embeddings", "utils.util_functions.to_uint8", "tqdm.tqdm.update", "dg_util.python_utils.pytorch_util.to_numpy", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "dg_util.python_utils.pytorch_util.from_numpy().to", "torch.nn.functional.normalize", "int", "torch.zeros", "min", "dg_util.python_utils.pytorch_util.from_numpy", "len"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.get_data_item", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceModel.get_embeddings", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.dataset_mosaic.to_uint8", "home.repos.pwc.inspect_result.danielgordon10_vince.siamfc_pytorch.tracker.TrackerSiamFC.update", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to"], ["", "def", "dataset_nn", "(", "model", ",", "data_loader", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "num_to_compare", "=", "min", "(", "int", "(", "NUM_TO_COMPARE", "/", "args", ".", "batch_size", "+", "1", ")", "*", "args", ".", "batch_size", ",", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "\n", "# Get features", "\n", "image_array", "=", "np", ".", "zeros", "(", "(", "num_to_compare", ",", "args", ".", "input_height", ",", "args", ".", "input_width", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "features_array", "=", "None", "\n", "\n", "data_ind", "=", "0", "\n", "pbar", "=", "tqdm", ".", "tqdm", "(", "total", "=", "num_to_compare", ")", "\n", "for", "data", "in", "data_loader", ":", "\n", "            ", "data", "=", "get_data_item", "(", "data", ")", "\n", "data_size", "=", "data", ".", "shape", "[", "0", "]", "\n", "data", "=", "data", ".", "to", "(", "model", ".", "device", ")", "\n", "output", "=", "model", ".", "get_embeddings", "(", "{", "\"data\"", ":", "data", ",", "\"batch_type\"", ":", "(", "\"images\"", ",", "len", "(", "data", ")", ")", "}", ")", "\n", "features", "=", "output", "[", "\"extracted_features\"", "]", "\n", "\n", "if", "features_array", "is", "None", ":", "\n", "                ", "feature_size", "=", "features", ".", "shape", "[", "1", "]", "\n", "features_array", "=", "torch", ".", "zeros", "(", "(", "num_to_compare", ",", "feature_size", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "model", ".", "device", ")", "\n", "", "features_array", "[", "data_ind", ":", "data_ind", "+", "data_size", "]", "=", "features", "\n", "data", "=", "to_uint8", "(", "data", ")", "\n", "image_array", "[", "data_ind", ":", "min", "(", "num_to_compare", ",", "data_ind", "+", "data_size", ")", "]", "=", "data", "\n", "data_ind", "+=", "data_size", "\n", "pbar", ".", "update", "(", "data_size", ")", "\n", "if", "data_ind", ">=", "num_to_compare", ":", "\n", "                ", "break", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "if", "features_array", ".", "shape", "[", "1", "]", "!=", "64", ":", "\n", "            ", "features_array_new", "=", "pt_util", ".", "to_numpy", "(", "features_array", ")", "\n", "pca", "=", "PCA", "(", "n_components", "=", "64", ")", "\n", "features_array_new", "=", "pca", ".", "fit_transform", "(", "features_array_new", ")", "\n", "features_array_new", "=", "pt_util", ".", "from_numpy", "(", "features_array_new", ")", ".", "to", "(", "features_array", ".", "device", ")", "\n", "features_array", "=", "features_array_new", "\n", "features_array", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "features_array", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "features_array", ",", "image_array", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.draw_nns": [[91, 135], ["torch.manual_seed", "random.seed", "numpy.random.seed", "numpy.sort", "torch.mm", "torch.topk", "os.makedirs", "tqdm.tqdm", "numpy.random.choice", "os.path.join", "range", "source_images[].copy", "numpy.pad", "images.append", "range", "dg_util.python_utils.drawing.subplot", "cv2.imwrite", "dg_util.python_utils.pytorch_util.to_numpy", "neighbors[].copy", "images.append", "os.path.join", "int"], "function", ["None"], ["", "", "def", "draw_nns", "(", "source_features", ",", "source_images", ",", "source_name", ",", "target_features", "=", "None", ",", "target_images", "=", "None", ",", "target_name", "=", "None", ")", ":", "\n", "    ", "skip_first", "=", "False", "\n", "if", "target_features", "is", "None", ":", "\n", "        ", "target_features", "=", "source_features", "\n", "target_images", "=", "source_images", "\n", "target_name", "=", "source_name", "\n", "skip_first", "=", "True", "\n", "\n", "", "num_to_compare", "=", "target_features", ".", "shape", "[", "0", "]", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "rand_selection", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "choice", "(", "source_features", ".", "shape", "[", "0", "]", ",", "NUM_QUERIES", ",", "replace", "=", "False", ")", ")", "\n", "\n", "query_features", "=", "source_features", "[", "rand_selection", "]", "\n", "\n", "dists", "=", "torch", ".", "mm", "(", "query_features", ",", "target_features", ".", "T", ")", "\n", "val", ",", "neighbors", "=", "torch", ".", "topk", "(", "dists", ",", "k", "=", "(", "NUM_NEIGHBORS", "+", "int", "(", "skip_first", ")", ")", ",", "dim", "=", "1", ",", "sorted", "=", "True", ",", "largest", "=", "True", ")", "\n", "if", "skip_first", ":", "\n", "        ", "neighbors", "=", "neighbors", "[", ":", ",", "1", ":", "]", "\n", "\n", "", "neighbors", "=", "target_images", "[", "pt_util", ".", "to_numpy", "(", "neighbors", ")", "]", "\n", "os", ".", "makedirs", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "\"neighbors_from_%s_to_%s\"", "%", "(", "source_name", ",", "target_name", ")", ")", ",", "exist_ok", "=", "True", "\n", ")", "\n", "\n", "# Get images", "\n", "for", "ii", "in", "tqdm", ".", "tqdm", "(", "range", "(", "neighbors", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "        ", "images", "=", "[", "]", "\n", "image", "=", "source_images", "[", "rand_selection", "[", "ii", "]", "]", ".", "copy", "(", ")", "\n", "image", "=", "np", ".", "pad", "(", "image", ",", "(", "(", "10", ",", "10", ")", ",", "(", "10", ",", "10", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\"constant\"", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "for", "jj", "in", "range", "(", "neighbors", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "image", "=", "neighbors", "[", "ii", ",", "jj", "]", ".", "copy", "(", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "", "subplot", "=", "drawing", ".", "subplot", "(", "images", ",", "1", ",", "neighbors", ".", "shape", "[", "1", "]", "+", "1", ",", "args", ".", "input_width", ",", "args", ".", "input_height", ",", "border", "=", "5", ")", "\n", "cv2", ".", "imwrite", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "checkpoint_dir", ",", "\n", "\"neighbors_from_%s_to_%s\"", "%", "(", "source_name", ",", "target_name", ")", ",", "\n", "\"bsize_%06d_%03d.jpg\"", "%", "(", "num_to_compare", ",", "ii", ")", ",", "\n", ")", ",", "\n", "subplot", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.main": [[138, 184], ["torch.no_grad", "models.vince_model.VinceModel", "models.vince_model.VinceModel.restore", "models.vince_model.VinceModel.eval", "models.vince_model.VinceModel.to", "datasets.r2v2_dataset.R2V2Dataset", "torch.manual_seed", "random.seed", "numpy.random.seed", "dg_util.python_utils.persistent_dataloader.PersistentDataLoader", "view_nearest_neighbors.dataset_nn", "view_nearest_neighbors.draw_nns", "torch.manual_seed", "random.seed", "numpy.random.seed", "os.path.join", "utils.transforms.RepeatedImagenetTransform", "torchvision.ImageFolder", "torch.utils.data.dataloader.DataLoader", "view_nearest_neighbors.dataset_nn", "view_nearest_neighbors.draw_nns", "view_nearest_neighbors.draw_nns", "view_nearest_neighbors.draw_nns", "str", "utils.transforms.StandardVideoTransform"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.models.base_model.BaseModel.restore", "home.repos.pwc.inspect_result.danielgordon10_vince.models.vince_model.VinceQueueModel.to", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.dataset_nn", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.draw_nns", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.dataset_nn", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.draw_nns", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.draw_nns", "home.repos.pwc.inspect_result.danielgordon10_vince.visualizations.view_nearest_neighbors.draw_nns"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "torch_devices", "=", "args", ".", "pytorch_gpu_ids", "\n", "device", "=", "\"cuda:\"", "+", "str", "(", "torch_devices", "[", "0", "]", ")", "\n", "model", "=", "VinceModel", "(", "args", ")", "\n", "\n", "model", ".", "restore", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "yt_dataset", "=", "R2V2Dataset", "(", "\n", "args", ",", "\"val\"", ",", "transform", "=", "StandardVideoTransform", "(", "args", ".", "input_size", ",", "\"val\"", ")", ",", "num_images_to_return", "=", "1", "\n", ")", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "data_loader", "=", "PersistentDataLoader", "(", "\n", "yt_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "R2V2Dataset", ".", "collate_fn", ",", "\n", "worker_init_fn", "=", "R2V2Dataset", ".", "worker_init_fn", ",", "\n", ")", "\n", "\n", "yt_features", ",", "yt_images", "=", "dataset_nn", "(", "model", ",", "data_loader", ")", "\n", "del", "data_loader", "\n", "\n", "draw_nns", "(", "yt_features", ",", "yt_images", ",", "\"youtube\"", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "imagenet_data_path", ",", "data_subset", ")", "\n", "transform", "=", "RepeatedImagenetTransform", "(", "args", ".", "input_height", ",", "data_subset", "=", "\"val\"", ",", "repeats", "=", "1", ")", "\n", "imagenet_dataset", "=", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transform", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "imagenet_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "imagenet_features", ",", "imagenet_images", "=", "dataset_nn", "(", "model", ",", "data_loader", ")", "\n", "del", "data_loader", "\n", "\n", "draw_nns", "(", "imagenet_features", ",", "imagenet_images", ",", "\"imagenet\"", ")", "\n", "draw_nns", "(", "imagenet_features", ",", "imagenet_images", ",", "\"imagenet\"", ",", "yt_features", ",", "yt_images", ",", "\"youtube\"", ")", "\n", "draw_nns", "(", "yt_features", ",", "yt_images", ",", "\"youtube\"", ",", "imagenet_features", ",", "imagenet_images", ",", "\"imagenet\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danielgordon10_vince.end_tasks.end_task_eval.main": [[6, 10], ["arg_parser.parse_args", "arg_parser.parse_args.solver", "args.solver.run_eval"], "function", ["home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_tracking_solver.parse_args", "home.repos.pwc.inspect_result.danielgordon10_vince.solvers.end_task_base_solver.EndTaskBaseSolver.run_eval"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "arg_parser", ".", "parse_args", "(", ")", "\n", "solver", "=", "args", ".", "solver", "(", "args", ",", "None", ",", "None", ")", "\n", "solver", ".", "run_eval", "(", ")", "\n", "\n"]]}