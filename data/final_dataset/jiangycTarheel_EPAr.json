{"home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.prepro.main": [[14, 17], ["prepro.get_args", "prepro.prepro"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.get_args", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro"], ["def", "main", "(", ")", ":", "\n", "  ", "args", "=", "get_args", "(", ")", "\n", "prepro", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.prepro.get_args": [[19, 42], ["argparse.ArgumentParser", "os.path.expanduser", "os.path.join", "os.path.join", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "home", "=", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", "\n", "source_dir", "=", "os", ".", "path", ".", "join", "(", "home", ",", "\"data\"", ",", "\"squad\"", ")", "\n", "target_dir", "=", "\"data/squad\"", "\n", "glove_dir", "=", "os", ".", "path", ".", "join", "(", "home", ",", "\"data\"", ",", "\"glove\"", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "\"--source_dir\"", ",", "default", "=", "source_dir", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "\"--target_dir\"", ",", "default", "=", "target_dir", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_name\"", ",", "default", "=", "'train-v1.1.json'", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "\"--debug\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_ratio\"", ",", "default", "=", "0.9", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--glove_corpus\"", ",", "default", "=", "\"6B\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--glove_dir\"", ",", "default", "=", "glove_dir", ")", "\n", "parser", ".", "add_argument", "(", "\"--glove_vec_size\"", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "default", "=", "\"full\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--single_path\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--tokenizer\"", ",", "default", "=", "\"PTB\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--url\"", ",", "default", "=", "\"vision-server2.corp.ai2\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--port\"", ",", "default", "=", "8000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--split\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--suffix\"", ",", "default", "=", "\"\"", ")", "\n", "# TODO : put more args here", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.prepro.create_all": [[44, 55], ["os.path.join", "os.path.exists", "os.path.join", "json.load", "os.path.join", "json.load", "train_data[].extend", "print", "json.dump", "open", "open", "open"], "function", ["None"], ["", "def", "create_all", "(", "args", ")", ":", "\n", "  ", "out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "source_dir", ",", "\"all-v1.1.json\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "    ", "return", "\n", "", "train_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "source_dir", ",", "args", ".", "train_name", ")", "\n", "train_data", "=", "json", ".", "load", "(", "open", "(", "train_path", ",", "'r'", ")", ")", "\n", "dev_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "source_dir", ",", "args", ".", "dev_name", ")", "\n", "dev_data", "=", "json", ".", "load", "(", "open", "(", "dev_path", ",", "'r'", ")", ")", "\n", "train_data", "[", "'data'", "]", ".", "extend", "(", "dev_data", "[", "'data'", "]", ")", "\n", "print", "(", "\"dumping all data ...\"", ")", "\n", "json", ".", "dump", "(", "train_data", ",", "open", "(", "out_path", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.prepro.prepro": [[57, 77], ["os.path.exists", "os.makedirs", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.create_all", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "len"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.create_all", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each"], ["", "def", "prepro", "(", "args", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "target_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "args", ".", "target_dir", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "'full'", ":", "\n", "    ", "prepro_each", "(", "args", ",", "'train'", ",", "out_name", "=", "'train'", ")", "\n", "prepro_each", "(", "args", ",", "'dev'", ",", "out_name", "=", "'dev'", ")", "\n", "prepro_each", "(", "args", ",", "'dev'", ",", "out_name", "=", "'test'", ")", "\n", "", "elif", "args", ".", "mode", "==", "'all'", ":", "\n", "    ", "create_all", "(", "args", ")", "\n", "prepro_each", "(", "args", ",", "'dev'", ",", "0.0", ",", "0.0", ",", "out_name", "=", "'dev'", ")", "\n", "prepro_each", "(", "args", ",", "'dev'", ",", "0.0", ",", "0.0", ",", "out_name", "=", "'test'", ")", "\n", "prepro_each", "(", "args", ",", "'all'", ",", "out_name", "=", "'train'", ")", "\n", "", "elif", "args", ".", "mode", "==", "'single'", ":", "\n", "    ", "assert", "len", "(", "args", ".", "single_path", ")", ">", "0", "\n", "prepro_each", "(", "args", ",", "\"NULL\"", ",", "out_name", "=", "\"single\"", ",", "in_path", "=", "args", ".", "single_path", ")", "\n", "", "else", ":", "\n", "    ", "prepro_each", "(", "args", ",", "'train'", ",", "0.0", ",", "args", ".", "train_ratio", ",", "out_name", "=", "'train'", ")", "\n", "prepro_each", "(", "args", ",", "'train'", ",", "args", ".", "train_ratio", ",", "1.0", ",", "out_name", "=", "'dev'", ")", "\n", "prepro_each", "(", "args", ",", "'dev'", ",", "out_name", "=", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.prepro.save": [[79, 84], ["os.path.join", "os.path.join", "json.dump", "json.dump", "open", "open"], "function", ["None"], ["", "", "def", "save", "(", "args", ",", "data", ",", "shared", ",", "data_type", ")", ":", "\n", "  ", "data_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "target_dir", ",", "\"data_{}.json\"", ".", "format", "(", "data_type", ")", ")", "\n", "shared_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "target_dir", ",", "\"shared_{}.json\"", ".", "format", "(", "data_type", ")", ")", "\n", "json", ".", "dump", "(", "data", ",", "open", "(", "data_path", ",", "'w'", ")", ")", "\n", "json", ".", "dump", "(", "shared", ",", "open", "(", "shared_path", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.prepro.get_word2vec": [[86, 107], ["os.path.join", "print", "int", "int", "int", "int", "open", "tqdm.tqdm", "line.lstrip().rstrip().split", "list", "len", "len", "map", "line.lstrip().rstrip", "word.capitalize", "word.lower", "line.lstrip", "word.capitalize", "word.upper", "word.lower", "word.upper"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map"], ["", "def", "get_word2vec", "(", "args", ",", "word_counter", ")", ":", "\n", "  ", "glove_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "glove_dir", ",", "\"glove.{}.{}d.txt\"", ".", "format", "(", "args", ".", "glove_corpus", ",", "args", ".", "glove_vec_size", ")", ")", "\n", "sizes", "=", "{", "'6B'", ":", "int", "(", "4e5", ")", ",", "'42B'", ":", "int", "(", "1.9e6", ")", ",", "'840B'", ":", "int", "(", "2.2e6", ")", ",", "'2B'", ":", "int", "(", "1.2e6", ")", "}", "\n", "total", "=", "sizes", "[", "args", ".", "glove_corpus", "]", "\n", "word2vec_dict", "=", "{", "}", "\n", "with", "open", "(", "glove_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fh", ":", "\n", "    ", "for", "line", "in", "tqdm", "(", "fh", ",", "total", "=", "total", ")", ":", "\n", "      ", "array", "=", "line", ".", "lstrip", "(", ")", ".", "rstrip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "word", "=", "array", "[", "0", "]", "\n", "vector", "=", "list", "(", "map", "(", "float", ",", "array", "[", "1", ":", "]", ")", ")", "\n", "if", "word", "in", "word_counter", ":", "\n", "        ", "word2vec_dict", "[", "word", "]", "=", "vector", "\n", "", "elif", "word", ".", "capitalize", "(", ")", "in", "word_counter", ":", "\n", "        ", "word2vec_dict", "[", "word", ".", "capitalize", "(", ")", "]", "=", "vector", "\n", "", "elif", "word", ".", "lower", "(", ")", "in", "word_counter", ":", "\n", "        ", "word2vec_dict", "[", "word", ".", "lower", "(", ")", "]", "=", "vector", "\n", "", "elif", "word", ".", "upper", "(", ")", "in", "word_counter", ":", "\n", "        ", "word2vec_dict", "[", "word", ".", "upper", "(", ")", "]", "=", "vector", "\n", "\n", "", "", "", "print", "(", "\"{}/{} of word vocab have corresponding vectors in {}\"", ".", "format", "(", "len", "(", "word2vec_dict", ")", ",", "len", "(", "word_counter", ")", ",", "glove_path", ")", ")", "\n", "return", "word2vec_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.prepro.prepro_each": [[109, 239], ["json.load", "int", "int", "enumerate", "prepro.get_word2vec", "prepro.get_word2vec", "print", "prepro.save", "os.path.join", "open", "collections.Counter", "collections.Counter", "collections.Counter", "round", "round", "tqdm.tqdm", "x.append", "cx.append", "p.append", "enumerate", "CoreNLPInterface", "Exception", "context.replace.replace", "context.replace.replace", "list", "xp.append", "cxp.append", "pp.append", "token.replace().replace", "len", "len", "map", "squad.utils.process_tokens", "prepro.prepro_each.word_tokenize"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.get_word2vec", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.get_word2vec", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.save", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.process_tokens"], ["", "def", "prepro_each", "(", "args", ",", "data_type", ",", "start_ratio", "=", "0.0", ",", "stop_ratio", "=", "1.0", ",", "out_name", "=", "\"default\"", ",", "in_path", "=", "None", ")", ":", "\n", "  ", "if", "args", ".", "tokenizer", "==", "\"PTB\"", ":", "\n", "    ", "import", "nltk", "\n", "sent_tokenize", "=", "nltk", ".", "sent_tokenize", "\n", "def", "word_tokenize", "(", "tokens", ")", ":", "\n", "      ", "return", "[", "token", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", ".", "replace", "(", "\"``\"", ",", "'\"'", ")", "for", "token", "in", "nltk", ".", "word_tokenize", "(", "tokens", ")", "]", "\n", "", "", "elif", "args", ".", "tokenizer", "==", "'Stanford'", ":", "\n", "    ", "from", "my", ".", "corenlp_interface", "import", "CoreNLPInterface", "\n", "interface", "=", "CoreNLPInterface", "(", "args", ".", "url", ",", "args", ".", "port", ")", "\n", "sent_tokenize", "=", "interface", ".", "split_doc", "\n", "word_tokenize", "=", "interface", ".", "split_sent", "\n", "", "else", ":", "\n", "    ", "raise", "Exception", "(", ")", "\n", "\n", "", "if", "not", "args", ".", "split", ":", "\n", "    ", "sent_tokenize", "=", "lambda", "para", ":", "[", "para", "]", "\n", "\n", "", "source_path", "=", "in_path", "or", "os", ".", "path", ".", "join", "(", "args", ".", "source_dir", ",", "\"{}-{}v1.1.json\"", ".", "format", "(", "data_type", ",", "args", ".", "suffix", ")", ")", "\n", "source_data", "=", "json", ".", "load", "(", "open", "(", "source_path", ",", "'r'", ")", ")", "\n", "\n", "q", ",", "cq", ",", "y", ",", "rx", ",", "rcx", ",", "ids", ",", "idxs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "na", "=", "[", "]", "\n", "cy", "=", "[", "]", "\n", "x", ",", "cx", "=", "[", "]", ",", "[", "]", "\n", "answerss", "=", "[", "]", "\n", "p", "=", "[", "]", "\n", "word_counter", ",", "char_counter", ",", "lower_word_counter", "=", "Counter", "(", ")", ",", "Counter", "(", ")", ",", "Counter", "(", ")", "\n", "start_ai", "=", "int", "(", "round", "(", "len", "(", "source_data", "[", "'data'", "]", ")", "*", "start_ratio", ")", ")", "\n", "stop_ai", "=", "int", "(", "round", "(", "len", "(", "source_data", "[", "'data'", "]", ")", "*", "stop_ratio", ")", ")", "\n", "for", "ai", ",", "article", "in", "enumerate", "(", "tqdm", "(", "source_data", "[", "'data'", "]", "[", "start_ai", ":", "stop_ai", "]", ")", ")", ":", "\n", "    ", "xp", ",", "cxp", "=", "[", "]", ",", "[", "]", "\n", "pp", "=", "[", "]", "\n", "x", ".", "append", "(", "xp", ")", "\n", "cx", ".", "append", "(", "cxp", ")", "\n", "p", ".", "append", "(", "pp", ")", "\n", "for", "pi", ",", "para", "in", "enumerate", "(", "article", "[", "'paragraphs'", "]", ")", ":", "\n", "# wordss", "\n", "      ", "context", "=", "para", "[", "'context'", "]", "\n", "context", "=", "context", ".", "replace", "(", "\"''\"", ",", "'\" '", ")", "\n", "context", "=", "context", ".", "replace", "(", "\"``\"", ",", "'\" '", ")", "\n", "xi", "=", "list", "(", "map", "(", "word_tokenize", ",", "sent_tokenize", "(", "context", ")", ")", ")", "\n", "xi", "=", "[", "process_tokens", "(", "tokens", ")", "for", "tokens", "in", "xi", "]", "# process tokens", "\n", "# given xi, add chars", "\n", "cxi", "=", "[", "[", "list", "(", "xijk", ")", "for", "xijk", "in", "xij", "]", "for", "xij", "in", "xi", "]", "\n", "xp", ".", "append", "(", "xi", ")", "\n", "cxp", ".", "append", "(", "cxi", ")", "\n", "pp", ".", "append", "(", "context", ")", "\n", "\n", "for", "xij", "in", "xi", ":", "\n", "        ", "for", "xijk", "in", "xij", ":", "\n", "          ", "word_counter", "[", "xijk", "]", "+=", "len", "(", "para", "[", "'qas'", "]", ")", "\n", "lower_word_counter", "[", "xijk", ".", "lower", "(", ")", "]", "+=", "len", "(", "para", "[", "'qas'", "]", ")", "\n", "for", "xijkl", "in", "xijk", ":", "\n", "            ", "char_counter", "[", "xijkl", "]", "+=", "len", "(", "para", "[", "'qas'", "]", ")", "\n", "\n", "", "", "", "rxi", "=", "[", "ai", ",", "pi", "]", "\n", "assert", "len", "(", "x", ")", "-", "1", "==", "ai", "\n", "assert", "len", "(", "x", "[", "ai", "]", ")", "-", "1", "==", "pi", "\n", "for", "qa", "in", "para", "[", "'qas'", "]", ":", "\n", "# get words", "\n", "        ", "qi", "=", "word_tokenize", "(", "qa", "[", "'question'", "]", ")", "\n", "qi", "=", "process_tokens", "(", "qi", ")", "\n", "cqi", "=", "[", "list", "(", "qij", ")", "for", "qij", "in", "qi", "]", "\n", "yi", "=", "[", "]", "\n", "cyi", "=", "[", "]", "\n", "answers", "=", "[", "]", "\n", "for", "answer", "in", "qa", "[", "'answers'", "]", ":", "\n", "          ", "answer_text", "=", "answer", "[", "'text'", "]", "\n", "answers", ".", "append", "(", "answer_text", ")", "\n", "answer_start", "=", "answer", "[", "'answer_start'", "]", "\n", "answer_stop", "=", "answer_start", "+", "len", "(", "answer_text", ")", "\n", "# TODO : put some function that gives word_start, word_stop here", "\n", "yi0", ",", "yi1", "=", "get_word_span", "(", "context", ",", "xi", ",", "answer_start", ",", "answer_stop", ")", "\n", "# yi0 = answer['answer_word_start'] or [0, 0]", "\n", "# yi1 = answer['answer_word_stop'] or [0, 1]", "\n", "assert", "len", "(", "xi", "[", "yi0", "[", "0", "]", "]", ")", ">", "yi0", "[", "1", "]", "\n", "assert", "len", "(", "xi", "[", "yi1", "[", "0", "]", "]", ")", ">=", "yi1", "[", "1", "]", "\n", "w0", "=", "xi", "[", "yi0", "[", "0", "]", "]", "[", "yi0", "[", "1", "]", "]", "\n", "w1", "=", "xi", "[", "yi1", "[", "0", "]", "]", "[", "yi1", "[", "1", "]", "-", "1", "]", "\n", "i0", "=", "get_word_idx", "(", "context", ",", "xi", ",", "yi0", ")", "\n", "i1", "=", "get_word_idx", "(", "context", ",", "xi", ",", "(", "yi1", "[", "0", "]", ",", "yi1", "[", "1", "]", "-", "1", ")", ")", "\n", "cyi0", "=", "answer_start", "-", "i0", "\n", "cyi1", "=", "answer_stop", "-", "i1", "-", "1", "\n", "# print(answer_text, w0[cyi0:], w1[:cyi1+1])", "\n", "assert", "answer_text", "[", "0", "]", "==", "w0", "[", "cyi0", "]", ",", "(", "answer_text", ",", "w0", ",", "cyi0", ")", "\n", "assert", "answer_text", "[", "-", "1", "]", "==", "w1", "[", "cyi1", "]", "\n", "assert", "cyi0", "<", "32", ",", "(", "answer_text", ",", "w0", ")", "\n", "assert", "cyi1", "<", "32", ",", "(", "answer_text", ",", "w1", ")", "\n", "\n", "yi", ".", "append", "(", "[", "yi0", ",", "yi1", "]", ")", "\n", "cyi", ".", "append", "(", "[", "cyi0", ",", "cyi1", "]", ")", "\n", "\n", "", "if", "len", "(", "qa", "[", "'answers'", "]", ")", "==", "0", ":", "\n", "          ", "yi", ".", "append", "(", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "1", ")", "]", ")", "\n", "cyi", ".", "append", "(", "[", "0", ",", "1", "]", ")", "\n", "na", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "          ", "na", ".", "append", "(", "False", ")", "\n", "\n", "", "for", "qij", "in", "qi", ":", "\n", "          ", "word_counter", "[", "qij", "]", "+=", "1", "\n", "lower_word_counter", "[", "qij", ".", "lower", "(", ")", "]", "+=", "1", "\n", "for", "qijk", "in", "qij", ":", "\n", "            ", "char_counter", "[", "qijk", "]", "+=", "1", "\n", "\n", "", "", "q", ".", "append", "(", "qi", ")", "\n", "cq", ".", "append", "(", "cqi", ")", "\n", "y", ".", "append", "(", "yi", ")", "\n", "cy", ".", "append", "(", "cyi", ")", "\n", "rx", ".", "append", "(", "rxi", ")", "\n", "rcx", ".", "append", "(", "rxi", ")", "\n", "ids", ".", "append", "(", "qa", "[", "'id'", "]", ")", "\n", "idxs", ".", "append", "(", "len", "(", "idxs", ")", ")", "\n", "answerss", ".", "append", "(", "answers", ")", "\n", "\n", "", "", "if", "args", ".", "debug", ":", "\n", "      ", "break", "\n", "\n", "", "", "word2vec_dict", "=", "get_word2vec", "(", "args", ",", "word_counter", ")", "\n", "lower_word2vec_dict", "=", "get_word2vec", "(", "args", ",", "lower_word_counter", ")", "\n", "\n", "# add context here", "\n", "data", "=", "{", "'q'", ":", "q", ",", "'cq'", ":", "cq", ",", "'y'", ":", "y", ",", "'*x'", ":", "rx", ",", "'*cx'", ":", "rcx", ",", "'cy'", ":", "cy", ",", "\n", "'idxs'", ":", "idxs", ",", "'ids'", ":", "ids", ",", "'answerss'", ":", "answerss", ",", "'*p'", ":", "rx", ",", "'na'", ":", "na", "}", "\n", "shared", "=", "{", "'x'", ":", "x", ",", "'cx'", ":", "cx", ",", "'p'", ":", "p", ",", "\n", "'word_counter'", ":", "word_counter", ",", "'char_counter'", ":", "char_counter", ",", "'lower_word_counter'", ":", "lower_word_counter", ",", "\n", "'word2vec'", ":", "word2vec_dict", ",", "'lower_word2vec'", ":", "lower_word2vec_dict", "}", "\n", "\n", "print", "(", "\"saving ...\"", ")", "\n", "save", "(", "args", ",", "data", ",", "shared", ",", "out_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.utils.get_2d_spans": [[5, 20], ["spanss.append", "text.find", "spans.append", "len", "text.find", "print", "print", "Exception", "len"], "function", ["None"], ["def", "get_2d_spans", "(", "text", ",", "tokenss", ")", ":", "\n", "  ", "spanss", "=", "[", "]", "\n", "cur_idx", "=", "0", "\n", "for", "tokens", "in", "tokenss", ":", "\n", "    ", "spans", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "      ", "if", "text", ".", "find", "(", "token", ",", "cur_idx", ")", "<", "0", ":", "\n", "        ", "print", "(", "tokens", ")", "\n", "print", "(", "\"{} {} {}\"", ".", "format", "(", "token", ",", "cur_idx", ",", "text", ")", ")", "\n", "raise", "Exception", "(", ")", "\n", "", "cur_idx", "=", "text", ".", "find", "(", "token", ",", "cur_idx", ")", "\n", "spans", ".", "append", "(", "(", "cur_idx", ",", "cur_idx", "+", "len", "(", "token", ")", ")", ")", "\n", "cur_idx", "+=", "len", "(", "token", ")", "\n", "", "spanss", ".", "append", "(", "spans", ")", "\n", "", "return", "spanss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.utils.get_word_span": [[22, 32], ["utils.get_2d_spans", "enumerate", "enumerate", "len", "idxs.append"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_2d_spans"], ["", "def", "get_word_span", "(", "context", ",", "wordss", ",", "start", ",", "stop", ")", ":", "\n", "  ", "spanss", "=", "get_2d_spans", "(", "context", ",", "wordss", ")", "\n", "idxs", "=", "[", "]", "\n", "for", "sent_idx", ",", "spans", "in", "enumerate", "(", "spanss", ")", ":", "\n", "    ", "for", "word_idx", ",", "span", "in", "enumerate", "(", "spans", ")", ":", "\n", "      ", "if", "not", "(", "stop", "<=", "span", "[", "0", "]", "or", "start", ">=", "span", "[", "1", "]", ")", ":", "\n", "        ", "idxs", ".", "append", "(", "(", "sent_idx", ",", "word_idx", ")", ")", "\n", "\n", "", "", "", "assert", "len", "(", "idxs", ")", ">", "0", ",", "\"{} {} {} {}\"", ".", "format", "(", "context", ",", "spanss", ",", "start", ",", "stop", ")", "\n", "return", "idxs", "[", "0", "]", ",", "(", "idxs", "[", "-", "1", "]", "[", "0", "]", ",", "idxs", "[", "-", "1", "]", "[", "1", "]", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.utils.get_phrase": [[34, 60], ["utils.get_flat_idx", "utils.get_flat_idx", "sum", "enumerate", "context.find", "len"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_flat_idx", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_flat_idx"], ["", "def", "get_phrase", "(", "context", ",", "wordss", ",", "span", ")", ":", "\n", "  ", "\"\"\"\n  Obtain phrase as substring of context given start and stop indices in word level\n  :param context:\n  :param wordss:\n  :param start: [sent_idx, word_idx]\n  :param stop: [sent_idx, word_idx]\n  :return:\n  \"\"\"", "\n", "start", ",", "stop", "=", "span", "\n", "flat_start", "=", "get_flat_idx", "(", "wordss", ",", "start", ")", "\n", "flat_stop", "=", "get_flat_idx", "(", "wordss", ",", "stop", ")", "\n", "words", "=", "sum", "(", "wordss", ",", "[", "]", ")", "\n", "char_idx", "=", "0", "\n", "char_start", ",", "char_stop", "=", "None", ",", "None", "\n", "for", "word_idx", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "    ", "char_idx", "=", "context", ".", "find", "(", "word", ",", "char_idx", ")", "\n", "assert", "char_idx", ">=", "0", "\n", "if", "word_idx", "==", "flat_start", ":", "\n", "      ", "char_start", "=", "char_idx", "\n", "", "char_idx", "+=", "len", "(", "word", ")", "\n", "if", "word_idx", "==", "flat_stop", "-", "1", ":", "\n", "      ", "char_stop", "=", "char_idx", "\n", "", "", "assert", "char_start", "is", "not", "None", "\n", "assert", "char_stop", "is", "not", "None", "\n", "return", "context", "[", "char_start", ":", "char_stop", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.utils.get_flat_idx": [[62, 64], ["sum", "len"], "function", ["None"], ["", "def", "get_flat_idx", "(", "wordss", ",", "idx", ")", ":", "\n", "  ", "return", "sum", "(", "len", "(", "words", ")", "for", "words", "in", "wordss", "[", ":", "idx", "[", "0", "]", "]", ")", "+", "idx", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.utils.get_word_idx": [[66, 69], ["utils.get_2d_spans"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_2d_spans"], ["", "def", "get_word_idx", "(", "context", ",", "wordss", ",", "idx", ")", ":", "\n", "  ", "spanss", "=", "get_2d_spans", "(", "context", ",", "wordss", ")", "\n", "return", "spanss", "[", "idx", "[", "0", "]", "]", "[", "idx", "[", "1", "]", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.utils.process_tokens": [[71, 81], ["tokens.extend", "re.split"], "function", ["None"], ["", "def", "process_tokens", "(", "temp_tokens", ")", ":", "\n", "  ", "tokens", "=", "[", "]", "\n", "for", "token", "in", "temp_tokens", ":", "\n", "    ", "flag", "=", "False", "\n", "l", "=", "(", "\"-\"", ",", "\"\\u2212\"", ",", "\"\\u2014\"", ",", "\"\\u2013\"", ",", "\"/\"", ",", "\"~\"", ",", "'\"'", ",", "\"'\"", ",", "\"\\u201C\"", ",", "\"\\u2019\"", ",", "\"\\u201D\"", ",", "\"\\u2018\"", ",", "\"\\u00B0\"", ")", "\n", "# \\u2013 is en-dash. Used for number to nubmer", "\n", "# l = (\"-\", \"\\u2212\", \"\\u2014\", \"\\u2013\")", "\n", "# l = (\"\\u2013\",)", "\n", "tokens", ".", "extend", "(", "re", ".", "split", "(", "\"([{}])\"", ".", "format", "(", "\"\"", ".", "join", "(", "l", ")", ")", ",", "token", ")", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.utils.get_best_span": [[83, 101], ["enumerate", "zip", "range", "float", "len"], "function", ["None"], ["", "def", "get_best_span", "(", "ypi", ",", "yp2i", ")", ":", "\n", "  ", "max_val", "=", "0", "\n", "best_word_span", "=", "(", "0", ",", "1", ")", "\n", "best_sent_idx", "=", "0", "\n", "for", "f", ",", "(", "ypif", ",", "yp2if", ")", "in", "enumerate", "(", "zip", "(", "ypi", ",", "yp2i", ")", ")", ":", "\n", "    ", "argmax_j1", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "ypif", ")", ")", ":", "\n", "      ", "val1", "=", "ypif", "[", "argmax_j1", "]", "\n", "if", "val1", "<", "ypif", "[", "j", "]", ":", "\n", "        ", "val1", "=", "ypif", "[", "j", "]", "\n", "argmax_j1", "=", "j", "\n", "\n", "", "val2", "=", "yp2if", "[", "j", "]", "\n", "if", "val1", "*", "val2", ">", "max_val", ":", "\n", "        ", "best_word_span", "=", "(", "argmax_j1", ",", "j", ")", "\n", "best_sent_idx", "=", "f", "\n", "max_val", "=", "val1", "*", "val2", "\n", "", "", "", "return", "(", "(", "best_sent_idx", ",", "best_word_span", "[", "0", "]", ")", ",", "(", "best_sent_idx", ",", "best_word_span", "[", "1", "]", "+", "1", ")", ")", ",", "float", "(", "max_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.utils.get_best_span_wy": [[103, 134], ["min", "enumerate", "max", "numpy.max", "enumerate", "zip", "chunk_spans.append", "scores.append", "chunk_spans.append", "scores.append"], "function", ["None"], ["", "def", "get_best_span_wy", "(", "wypi", ",", "th", ")", ":", "\n", "  ", "chunk_spans", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "chunk_start", "=", "None", "\n", "score", "=", "0", "\n", "l", "=", "0", "\n", "th", "=", "min", "(", "th", ",", "np", ".", "max", "(", "wypi", ")", ")", "\n", "for", "f", ",", "wypif", "in", "enumerate", "(", "wypi", ")", ":", "\n", "    ", "for", "j", ",", "wypifj", "in", "enumerate", "(", "wypif", ")", ":", "\n", "      ", "if", "wypifj", ">=", "th", ":", "\n", "        ", "if", "chunk_start", "is", "None", ":", "\n", "          ", "chunk_start", "=", "f", ",", "j", "\n", "", "score", "+=", "wypifj", "\n", "l", "+=", "1", "\n", "", "else", ":", "\n", "        ", "if", "chunk_start", "is", "not", "None", ":", "\n", "          ", "chunk_stop", "=", "f", ",", "j", "\n", "chunk_spans", ".", "append", "(", "(", "chunk_start", ",", "chunk_stop", ")", ")", "\n", "scores", ".", "append", "(", "score", "/", "l", ")", "\n", "score", "=", "0", "\n", "l", "=", "0", "\n", "chunk_start", "=", "None", "\n", "", "", "", "if", "chunk_start", "is", "not", "None", ":", "\n", "      ", "chunk_stop", "=", "f", ",", "j", "+", "1", "\n", "chunk_spans", ".", "append", "(", "(", "chunk_start", ",", "chunk_stop", ")", ")", "\n", "scores", ".", "append", "(", "score", "/", "l", ")", "\n", "score", "=", "0", "\n", "l", "=", "0", "\n", "chunk_start", "=", "None", "\n", "\n", "", "", "return", "max", "(", "zip", "(", "chunk_spans", ",", "scores", ")", ",", "key", "=", "lambda", "pair", ":", "pair", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.squad.utils.get_span_score_pairs": [[136, 145], ["enumerate", "zip", "range", "len", "range", "len", "span_score_pairs.append"], "function", ["None"], ["", "def", "get_span_score_pairs", "(", "ypi", ",", "yp2i", ")", ":", "\n", "  ", "span_score_pairs", "=", "[", "]", "\n", "for", "f", ",", "(", "ypif", ",", "yp2if", ")", "in", "enumerate", "(", "zip", "(", "ypi", ",", "yp2i", ")", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "len", "(", "ypif", ")", ")", ":", "\n", "      ", "for", "k", "in", "range", "(", "j", ",", "len", "(", "yp2if", ")", ")", ":", "\n", "        ", "span", "=", "(", "(", "f", ",", "j", ")", ",", "(", "f", ",", "k", "+", "1", ")", ")", "\n", "score", "=", "ypif", "[", "j", "]", "*", "yp2if", "[", "k", "]", "\n", "span_score_pairs", ".", "append", "(", "(", "span", ",", "score", ")", ")", "\n", "", "", "", "return", "span_score_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.__init__": [[25, 49], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "context_dim", ",", "query_dim", ",", "hidden_dim", "=", "80", ",", "num_hops", "=", "6", ",", "bidirectional_input_unit", "=", "False", ",", "prediction", "=", "'span-single'", ",", "reuse_cell", "=", "True", ",", "is_train", "=", "None", ",", "use_control_unit", "=", "True", ",", "mode", "=", "\"train\"", ",", "output_unit_type", "=", "'similarity'", ",", "reasoning_unit", "=", "'answer_unit'", ",", "answer_state_update_rule", "=", "'mlp'", ")", ":", "\n", "    ", "\"\"\"\n    num_hops: the number of mac cell chained together, or number of reasoning steps.\n    bidriectional_input_unit: use bi-lstm for input unit. Default to false to save memory.\n    prediction: prediction layer. Could be 'span-single/dual', 'candidates'\n    reuse_cell: use one single cell for all reasoning steps. (not sure what Hudson and Mannning did.)\n    \"\"\"", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "context_dim", "=", "context_dim", "\n", "self", ".", "query_dim", "=", "query_dim", "\n", "self", ".", "num_hops", "=", "num_hops", "\n", "self", ".", "bidirectional_input_unit", "=", "bidirectional_input_unit", "\n", "self", ".", "prediction", "=", "prediction", "\n", "self", ".", "reuse_cell", "=", "reuse_cell", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "use_control_unit", "=", "use_control_unit", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "output_unit_type", "=", "output_unit_type", "\n", "self", ".", "reasoning_unit", "=", "reasoning_unit", "\n", "self", ".", "answer_state_update_rule", "=", "answer_state_update_rule", "\n", "self", ".", "top_attn", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.apply": [[50, 90], ["tensorflow.squeeze", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.squeeze", "tensorflow.variable_scope", "mac_layer.MACRnn.MACInputUnit", "range", "c_history.append", "m_history.append", "mac_layer.MACRnn.MACOutputUnit", "tensorflow.expand_dims", "mac_layer.MACRnn.MACCell", "mac_layer.MACRnn.MACCell", "mac_layer.MACRnn.MACOutputUnit", "mac_layer.MACRnn.MACOutputUnit", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACInputUnit", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACOutputUnit", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACCell", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACCell", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACOutputUnit", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACOutputUnit"], ["", "def", "apply", "(", "self", ",", "context", ",", "query", ",", "q_len", ",", "c_mask", ",", "q_mask", ",", "candidates", "=", "None", ",", "cand_mask", "=", "None", ",", "q_sub_st", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "self", ".", "batch_size", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", "\n", "query_dim", "=", "self", ".", "query_dim", "\n", "reuse_cell", "=", "self", ".", "reuse_cell", "\n", "context", "=", "tf", ".", "squeeze", "(", "context", ",", "axis", "=", "1", ")", "\n", "if", "candidates", "is", "not", "None", ":", "\n", "      ", "candidates", "=", "tf", ".", "squeeze", "(", "candidates", ",", "axis", "=", "1", ")", "\n", "", "c_state", "=", "tf", ".", "zeros", "(", "(", "batch_size", ",", "hidden_dim", ")", ")", "\n", "m_state", "=", "tf", ".", "zeros", "(", "(", "batch_size", ",", "hidden_dim", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'MACRnn'", ")", ":", "\n", "      ", "query", ",", "q_rep", "=", "self", ".", "MACInputUnit", "(", "query", ",", "q_len", ")", "\n", "\n", "c_history", "=", "[", "]", "\n", "m_history", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hops", ")", ":", "\n", "        ", "if", "reuse_cell", ":", "\n", "          ", "scope_str", "=", "'MACRnn-layer-%d'", "%", "0", "\n", "c_state", ",", "m_state", "=", "self", ".", "MACCell", "(", "i", ",", "query", ",", "q_rep", ",", "context", ",", "c_mask", ",", "q_mask", ",", "c_history", ",", "m_history", ",", "c_state", ",", "m_state", ",", "scope_str", ",", "reuse", "=", "(", "i", "!=", "0", ")", ")", "\n", "", "else", ":", "\n", "          ", "scope_str", "=", "'MACRnn-layer-%d'", "%", "i", "\n", "c_state", ",", "m_state", "=", "self", ".", "MACCell", "(", "i", ",", "query", ",", "q_rep", ",", "context", ",", "c_mask", ",", "q_mask", ",", "c_history", ",", "m_history", ",", "c_state", ",", "m_state", ",", "scope_str", ",", "reuse", "=", "False", ")", "\n", "\n", "", "c_history", ".", "append", "(", "c_state", ")", "\n", "m_history", ".", "append", "(", "m_state", ")", "\n", "\n", "", "if", "self", ".", "prediction", "==", "'candidates'", ":", "\n", "        ", "g1", "=", "self", ".", "MACOutputUnit", "(", "m_state", ",", "context", ",", "candidates", ")", "\n", "return", "tf", ".", "expand_dims", "(", "g1", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "prediction", "==", "'span-dual'", ":", "\n", "        ", "g1", ",", "g2", "=", "self", ".", "MACOutputUnit", "(", "m_state", ",", "context", ")", "\n", "return", "tf", ".", "expand_dims", "(", "g1", ",", "axis", "=", "1", ")", ",", "tf", ".", "expand_dims", "(", "g2", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "assert", "self", ".", "prediction", "==", "'span-single'", "\n", "g1", ",", "logits", "=", "self", ".", "MACOutputUnit", "(", "m_state", ",", "context", ")", "\n", "return", "tf", ".", "expand_dims", "(", "g1", ",", "axis", "=", "1", ")", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACInputUnit": [[91, 119], ["tensorflow.variable_scope", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.nn.dynamic_rnn", "tensorflow.einsum", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.dynamic_rnn"], ["", "", "", "def", "MACInputUnit", "(", "self", ",", "query", ",", "query_len", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Inputs: encodede query and length.\n    Outputs: query encoded by another lstm, and the final state of this lstm as \n             a fixed-size representation of this query.\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'input_unit'", ",", "initializer", "=", "tf", ".", "random_uniform_initializer", ",", "reuse", "=", "reuse", ")", ":", "\n", "      ", "hidden_dim", "=", "self", ".", "hidden_dim", "\n", "\n", "if", "self", ".", "bidirectional_input_unit", "is", "True", ":", "\n", "        ", "cell_fw", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "hidden_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "cell_bw", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "hidden_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "(", "encoder_outputs", ",", "(", "fw_st", ",", "bw_st", ")", ")", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "query", ",", "dtype", "=", "tf", ".", "float32", ",", "sequence_length", "=", "query_len", ",", "swap_memory", "=", "True", ")", "\n", "query_embed", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "encoder_outputs", ")", "\n", "query_rep", "=", "tf", ".", "concat", "(", "[", "fw_st", ".", "c", ",", "bw_st", ".", "c", "]", ",", "axis", "=", "1", ")", "\n", "W_emb", "=", "tf", ".", "get_variable", "(", "'W_emb'", ",", "[", "2", "*", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_emb", "=", "tf", ".", "get_variable", "(", "'b_emb'", ",", "[", "hidden_dim", "]", ")", "\n", "W_rep", "=", "tf", ".", "get_variable", "(", "'W_rep'", ",", "[", "2", "*", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_rep", "=", "tf", ".", "get_variable", "(", "'b_rep'", ",", "[", "hidden_dim", "]", ")", "\n", "query_embed", "=", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "query_embed", ",", "W_emb", ")", "+", "b_emb", "\n", "query_rep", "=", "tf", ".", "matmul", "(", "query_rep", ",", "W_rep", ")", "+", "b_rep", "\n", "", "else", ":", "\n", "        ", "cell_fw", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "hidden_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "query_embed", ",", "final_st", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell_fw", ",", "query", ",", "dtype", "=", "tf", ".", "float32", ",", "sequence_length", "=", "query_len", ")", "\n", "query_rep", "=", "final_st", ".", "c", "\n", "", "return", "query_embed", ",", "query_rep", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACCell": [[120, 191], ["tensorflow.einsum", "tensorflow.einsum", "tensorflow.stack", "tensorflow.stack", "tensorflow.variable_scope", "mac_layer.MACRnn.MACCell.control_unit"], "methods", ["None"], ["", "", "def", "MACCell", "(", "self", ",", "layer", ":", "int", ",", "cw", ",", "q", ",", "k", ",", "c_mask", ",", "q_mask", ",", "c_history", ",", "m_history", ",", "c_state", ",", "m_state", ",", "scope_str", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "hidden_dim", "=", "self", ".", "hidden_dim", "\n", "context_dim", "=", "self", ".", "context_dim", "\n", "query_dim", "=", "self", ".", "query_dim", "\n", "def", "control_unit", "(", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'control_unit'", ")", ":", "\n", "        ", "W_cq", "=", "tf", ".", "get_variable", "(", "'W_cq'", ",", "[", "2", "*", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_cq", "=", "tf", ".", "get_variable", "(", "'b_cq'", ",", "[", "hidden_dim", "]", ")", "\n", "cq", "=", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "[", "c_state", ",", "q", "]", ",", "axis", "=", "1", ")", ",", "W_cq", ")", "+", "b_cq", "\n", "\n", "W_ca", "=", "tf", ".", "get_variable", "(", "'W_ca'", ",", "[", "hidden_dim", ",", "1", "]", ")", "\n", "b_ca", "=", "tf", ".", "get_variable", "(", "'b_ca'", ",", "[", "1", "]", ")", "\n", "ca", "=", "tf", ".", "squeeze", "(", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "cq", ",", "cw", ")", ",", "W_ca", ")", ",", "axis", "=", "2", ")", "+", "b_ca", "\n", "cv", "=", "tf", ".", "nn", ".", "softmax", "(", "ca", ")", "\n", "", "return", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "cw", ",", "cv", ")", "\n", "\n", "", "def", "read_unit", "(", "new_c_state", ")", ":", "\n", "      ", "\"\"\"\n      Does not include the I' in the original MAC paper.\n      \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'read_unit'", ")", ":", "\n", "        ", "W_m", "=", "tf", ".", "get_variable", "(", "'W_m'", ",", "[", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_m", "=", "tf", ".", "get_variable", "(", "'b_m'", ",", "[", "hidden_dim", "]", ")", "\n", "W_k", "=", "tf", ".", "get_variable", "(", "'W_k'", ",", "[", "context_dim", ",", "hidden_dim", "]", ")", "\n", "b_k", "=", "tf", ".", "get_variable", "(", "'b_k'", ",", "[", "hidden_dim", "]", ")", "\n", "I", "=", "tf", ".", "einsum", "(", "'il,ijl->ijl'", ",", "tf", ".", "matmul", "(", "m_state", ",", "W_m", ")", "+", "b_m", ",", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "k", ",", "W_k", ")", "+", "b_k", ")", "# [batch_size, context_len, hidden_dim]", "\n", "\n", "\n", "W_ra", "=", "tf", ".", "get_variable", "(", "'W_ra'", ",", "[", "hidden_dim", ",", "1", "]", ")", "\n", "b_ra", "=", "tf", ".", "get_variable", "(", "'b_ra'", ",", "[", "1", "]", ")", "\n", "ra", "=", "tf", ".", "squeeze", "(", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "new_c_state", ",", "I", ")", ",", "W_ra", ")", ",", "axis", "=", "2", ")", "+", "b_ra", "\n", "rv", "=", "tf", ".", "nn", ".", "softmax", "(", "ra", ")", "\n", "", "return", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "k", ",", "rv", ")", "\n", "\n", "", "def", "write_unit", "(", "r", ",", "new_c_state", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'write_unit'", ")", ":", "\n", "        ", "W_m", "=", "tf", ".", "get_variable", "(", "'W_m'", ",", "[", "context_dim", "+", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_m", "=", "tf", ".", "get_variable", "(", "'b_m'", ",", "[", "hidden_dim", "]", ")", "\n", "m_prev", "=", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "[", "r", ",", "m_state", "]", ",", "axis", "=", "1", ")", ",", "W_m", ")", "+", "b_m", "\n", "\n", "if", "layer", ">", "0", "or", "self", ".", "reuse_cell", ":", "\n", "          ", "W_c", "=", "tf", ".", "get_variable", "(", "'W_c'", ",", "[", "hidden_dim", ",", "1", "]", ")", "\n", "b_c", "=", "tf", ".", "get_variable", "(", "'b_c'", ",", "[", "1", "]", ")", "\n", "#sa = tf.nn.softmax(tf.squeeze(tf.einsum('ijk,kl->ijl', tf.multiply(new_c_state, c_history), W_c), axis=2))", "\n", "W_s", "=", "tf", ".", "get_variable", "(", "'W_s'", ",", "[", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "\n", "", "W_p", "=", "tf", ".", "get_variable", "(", "'W_p'", ",", "[", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "[", "hidden_dim", "]", ")", "\n", "\n", "if", "layer", ">", "0", ":", "\n", "          ", "sa", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "squeeze", "(", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "new_c_state", ",", "c_history", ")", ",", "W_c", ")", "+", "b_c", ",", "axis", "=", "2", ")", ")", "\n", "m_sa", "=", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "m_history", ",", "sa", ")", "\n", "m_prime", "=", "tf", ".", "matmul", "(", "m_sa", ",", "W_s", ")", "+", "tf", ".", "matmul", "(", "m_prev", ",", "W_p", ")", "+", "b", "\n", "", "else", ":", "\n", "          ", "m_prime", "=", "tf", ".", "matmul", "(", "m_prev", ",", "W_p", ")", "+", "b", "\n", "\n", "", "W_c_2", "=", "tf", ".", "get_variable", "(", "'W_c_2'", ",", "[", "hidden_dim", ",", "1", "]", ")", "\n", "b_c_2", "=", "tf", ".", "get_variable", "(", "'b_c_2'", ",", "[", "1", "]", ")", "\n", "c_prime", "=", "tf", ".", "matmul", "(", "new_c_state", ",", "W_c_2", ")", "+", "b_c_2", "\n", "\n", "return", "tf", ".", "nn", ".", "sigmoid", "(", "c_prime", ")", "*", "m_state", "+", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "c_prime", ")", ")", "*", "m_prime", "\n", "\n", "", "", "if", "layer", ">", "0", ":", "\n", "      ", "c_history", "=", "tf", ".", "stack", "(", "c_history", ",", "axis", "=", "1", ")", "\n", "m_history", "=", "tf", ".", "stack", "(", "m_history", ",", "axis", "=", "1", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope_str", ",", "reuse", "=", "reuse", ")", "as", "scope", ":", "\n", "      ", "new_c_state", "=", "control_unit", "(", ")", "\n", "new_m_state", "=", "write_unit", "(", "read_unit", "(", "new_c_state", ")", ",", "new_c_state", ")", "\n", "\n", "", "return", "new_c_state", ",", "new_m_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACOutputUnit": [[192, 284], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.einsum", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.matmul", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.einsum", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.einsum", "tensorflow.reshape", "tensorflow.einsum", "tensorflow.squeeze", "tensorflow.shape", "tensorflow.einsum", "tensorflow.tile", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.tile", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.tile", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.tile", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.reshape", "tensorflow.einsum", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.einsum", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.shape", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.einsum", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.einsum", "tensorflow.nn.relu", "tensorflow.einsum", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "MACOutputUnit", "(", "self", ",", "m_state", ",", "context", ",", "candidates", "=", "None", ",", "query", "=", "None", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "hidden_dim", "=", "self", ".", "hidden_dim", "\n", "context_dim", "=", "self", ".", "context_dim", "\n", "with", "tf", ".", "variable_scope", "(", "'output_unit'", ",", "reuse", "=", "reuse", ")", ":", "\n", "      ", "if", "self", ".", "prediction", "==", "'candidates'", ":", "\n", "        ", "assert", "candidates", "is", "not", "None", "\n", "cand_dim", "=", "context_dim", "\n", "#cand_dim = candidates.get_shape()[-1]", "\n", "if", "self", ".", "output_unit_type", "==", "'similarity'", ":", "\n", "          ", "W_m", "=", "tf", ".", "get_variable", "(", "'W_m'", ",", "[", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_m", "=", "tf", ".", "get_variable", "(", "'b_m'", ",", "[", "hidden_dim", "]", ")", "\n", "M", "=", "tf", ".", "matmul", "(", "m_state", ",", "W_m", ")", "+", "b_m", "\n", "\n", "W_k", "=", "tf", ".", "get_variable", "(", "'W_k'", ",", "[", "cand_dim", ",", "hidden_dim", "]", ")", "\n", "b_k", "=", "tf", ".", "get_variable", "(", "'b_k'", ",", "[", "hidden_dim", "]", ")", "\n", "I", "=", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "candidates", ",", "W_k", ")", "+", "b_k", "\n", "\n", "g1", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "M", ",", "I", ")", "\n", "\n", "", "elif", "self", ".", "output_unit_type", "==", "'nested-triplet-mlp'", ":", "\n", "          ", "num_cand", "=", "tf", ".", "shape", "(", "candidates", ")", "[", "1", "]", "\n", "if", "self", ".", "reasoning_unit", "==", "'bi-attn'", "or", "self", ".", "reasoning_unit", "==", "'attention-lstm'", "or", "self", ".", "reasoning_unit", "==", "'concat_first_sent'", "or", "self", ".", "reasoning_unit", "==", "'concat_full_doc'", ":", "\n", "            ", "similarity", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "m_state", ",", "candidates", ")", "\n", "M", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "m_state", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "num_cand", ",", "1", "]", ")", "\n", "W1", "=", "tf", ".", "get_variable", "(", "'W1'", ",", "[", "3", "*", "cand_dim", ",", "2", "*", "cand_dim", "]", ")", "\n", "b1", "=", "tf", ".", "get_variable", "(", "'b1'", ",", "[", "2", "*", "cand_dim", "]", ")", "\n", "W2", "=", "tf", ".", "get_variable", "(", "'W2'", ",", "[", "2", "*", "cand_dim", ",", "cand_dim", "]", ")", "\n", "b2", "=", "tf", ".", "get_variable", "(", "'b2'", ",", "[", "cand_dim", "]", ")", "\n", "concat_in", "=", "tf", ".", "concat", "(", "axis", "=", "-", "1", ",", "values", "=", "[", "tf", ".", "reshape", "(", "M", ",", "[", "-", "1", ",", "cand_dim", "]", ")", ",", "tf", ".", "reshape", "(", "candidates", ",", "[", "-", "1", ",", "cand_dim", "]", ")", ",", "tf", ".", "reshape", "(", "similarity", ",", "[", "-", "1", ",", "cand_dim", "]", ")", "]", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "concat_in", ",", "W1", ")", "+", "b1", ")", ",", "W2", ")", "+", "b2", "\n", "", "else", ":", "\n", "            ", "W_k", "=", "tf", ".", "get_variable", "(", "'W_k'", ",", "[", "cand_dim", ",", "hidden_dim", "]", ")", "\n", "b_k", "=", "tf", ".", "get_variable", "(", "'b_k'", ",", "[", "hidden_dim", "]", ")", "\n", "similarity", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "m_state", ",", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "candidates", ",", "W_k", ")", ")", "+", "b_k", "\n", "M", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "m_state", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "num_cand", ",", "1", "]", ")", "\n", "W1", "=", "tf", ".", "get_variable", "(", "'W1'", ",", "[", "2", "*", "hidden_dim", "+", "cand_dim", ",", "hidden_dim", "]", ")", "\n", "b1", "=", "tf", ".", "get_variable", "(", "'b1'", ",", "[", "hidden_dim", "]", ")", "\n", "W2", "=", "tf", ".", "get_variable", "(", "'W2'", ",", "[", "hidden_dim", ",", "40", "]", ")", "\n", "b2", "=", "tf", ".", "get_variable", "(", "'b2'", ",", "[", "40", "]", ")", "\n", "concat_in", "=", "tf", ".", "concat", "(", "axis", "=", "-", "1", ",", "values", "=", "[", "tf", ".", "reshape", "(", "M", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", ",", "tf", ".", "reshape", "(", "candidates", ",", "[", "-", "1", ",", "cand_dim", "]", ")", ",", "tf", ".", "reshape", "(", "similarity", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", "]", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "concat_in", ",", "W1", ")", "+", "b1", ")", ",", "W2", ")", "+", "b2", "\n", "", "g1", "=", "tf", ".", "reshape", "(", "output", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "context_dim", "]", ")", "\n", "\n", "", "elif", "self", ".", "output_unit_type", "==", "'triplet-mlp'", ":", "\n", "          ", "assert", "query", "is", "not", "None", "\n", "assert", "self", ".", "reasoning_unit", "==", "'None'", "or", "self", ".", "reasoning_unit", "is", "None", "\n", "num_cand", "=", "tf", ".", "shape", "(", "candidates", ")", "[", "1", "]", "\n", "query_dim", "=", "self", ".", "query_dim", "\n", "W_q", "=", "tf", ".", "get_variable", "(", "'W_q'", ",", "[", "query_dim", ",", "hidden_dim", "]", ")", "\n", "b_q", "=", "tf", ".", "get_variable", "(", "'b_q'", ",", "[", "hidden_dim", "]", ")", "\n", "query", "=", "tf", ".", "matmul", "(", "query", ",", "W_q", ")", "+", "b_q", "\n", "query", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "query", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "num_cand", ",", "1", "]", ")", "\n", "\n", "W_k", "=", "tf", ".", "get_variable", "(", "'W_k'", ",", "[", "cand_dim", ",", "hidden_dim", "]", ")", "\n", "b_k", "=", "tf", ".", "get_variable", "(", "'b_k'", ",", "[", "hidden_dim", "]", ")", "\n", "similarity", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "m_state", ",", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "candidates", ",", "W_k", ")", ")", "+", "b_k", "\n", "M", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "m_state", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "num_cand", ",", "1", "]", ")", "\n", "W1", "=", "tf", ".", "get_variable", "(", "'W1'", ",", "[", "3", "*", "hidden_dim", "+", "cand_dim", ",", "hidden_dim", "]", ")", "\n", "b1", "=", "tf", ".", "get_variable", "(", "'b1'", ",", "[", "hidden_dim", "]", ")", "\n", "W2", "=", "tf", ".", "get_variable", "(", "'W2'", ",", "[", "hidden_dim", ",", "40", "]", ")", "\n", "b2", "=", "tf", ".", "get_variable", "(", "'b2'", ",", "[", "40", "]", ")", "\n", "concat_in", "=", "tf", ".", "concat", "(", "axis", "=", "-", "1", ",", "values", "=", "[", "tf", ".", "reshape", "(", "query", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", ",", "tf", ".", "reshape", "(", "M", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", ",", "tf", ".", "reshape", "(", "candidates", ",", "[", "-", "1", ",", "cand_dim", "]", ")", ",", "tf", ".", "reshape", "(", "similarity", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", "]", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "concat_in", ",", "W1", ")", "+", "b1", ")", ",", "W2", ")", "+", "b2", "\n", "g1", "=", "tf", ".", "reshape", "(", "output", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "40", "]", ")", "\n", "", "else", ":", "\n", "          ", "raise", "NotImplementedError", "\n", "\n", "", "return", "g1", "\n", "", "else", ":", "\n", "        ", "W_m", "=", "tf", ".", "get_variable", "(", "'W_m'", ",", "[", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_m", "=", "tf", ".", "get_variable", "(", "'b_m'", ",", "[", "hidden_dim", "]", ")", "\n", "W_k", "=", "tf", ".", "get_variable", "(", "'W_k'", ",", "[", "context_dim", ",", "hidden_dim", "]", ")", "\n", "b_k", "=", "tf", ".", "get_variable", "(", "'b_k'", ",", "[", "hidden_dim", "]", ")", "\n", "I", "=", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "context", ",", "W_k", ")", "+", "b_k", "\n", "M", "=", "tf", ".", "matmul", "(", "m_state", ",", "W_m", ")", "+", "b_m", "\n", "\n", "g1", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "M", ",", "I", ")", "\n", "\n", "if", "self", ".", "prediction", "==", "'span-dual'", ":", "\n", "          ", "p2", "=", "tf", ".", "concat", "(", "[", "I", ",", "g1", "]", ",", "axis", "=", "2", ")", "\n", "W_p", "=", "tf", ".", "get_variable", "(", "'W_p'", ",", "[", "2", "*", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_p", "=", "tf", ".", "get_variable", "(", "'b_p'", ",", "[", "hidden_dim", "]", ")", "\n", "I_prime", "=", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "p2", ",", "W_p", ")", "+", "b_p", "\n", "g2", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "M", ",", "I_prime", ")", "\n", "\n", "return", "g1", ",", "g2", "\n", "\n", "", "else", ":", "\n", "          ", "W_ra", "=", "tf", ".", "get_variable", "(", "'W_ra'", ",", "[", "hidden_dim", ",", "1", "]", ")", "\n", "b_ra", "=", "tf", ".", "get_variable", "(", "'b_ra'", ",", "[", "1", "]", ")", "\n", "ra", "=", "tf", ".", "squeeze", "(", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "g1", ",", "W_ra", ")", ",", "axis", "=", "2", ")", "+", "b_ra", "\n", "return", "g1", ",", "ra", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.HierarchicalAttnMACRnn.__init__": [[287, 326], ["mac_layer.MACRnn.__init__", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["  ", "def", "__init__", "(", "self", ",", "batch_size", ",", "context_dim", ",", "query_dim", ",", "hidden_dim", "=", "80", ",", "num_hops", "=", "6", ",", "bidirectional_input_unit", "=", "False", ",", "prediction", "=", "'candidates'", ",", "input_keep_prob", "=", "0.8", ",", "reuse_cell", "=", "True", ",", "is_train", "=", "None", ",", "use_control_unit", "=", "True", ",", "mode", "=", "\"train\"", ",", "read_strategy", "=", "'full'", ",", "output_unit_type", "=", "'similarity'", ",", "reasoning_unit", "=", "'answer_unit'", ",", "memory_state_update_rule", "=", "None", ",", "answer_state_update_rule", "=", "'mlp'", ",", "attention_style", "=", "'similarity'", ",", "answer_doc_ids", "=", "None", ",", "sents_len", "=", "None", ",", "oracle", "=", "None", ",", "reinforce", "=", "False", ",", "attention_cell_dropout", "=", "False", ",", "read_topk_docs", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    num_hops: the number of mac cell chained together, or number of reasoning steps.\n    bidriectional_input_unit: use bi-lstm for input unit. Default to false to save memory.\n    prediction: prediction layer. Could be 'span-single/dual', 'candidates'\n    reuse_cell: use one single cell for all reasoning steps. (not sure what Hudson and Mannning did.)\n    \"\"\"", "\n", "assert", "prediction", "==", "\"candidates\"", "\n", "assert", "reuse_cell", "==", "True", "\n", "super", "(", "HierarchicalAttnMACRnn", ",", "self", ")", ".", "__init__", "(", "batch_size", ",", "context_dim", ",", "query_dim", ",", "hidden_dim", ",", "num_hops", ",", "bidirectional_input_unit", ",", "prediction", ",", "reuse_cell", ",", "is_train", ",", "use_control_unit", ",", "mode", ",", "output_unit_type", ",", "reasoning_unit", ",", "answer_state_update_rule", ")", "\n", "self", ".", "input_keep_prob", "=", "input_keep_prob", "\n", "self", ".", "top_doc_attn", "=", "[", "]", "\n", "self", ".", "top_attn_prob", "=", "[", "]", "\n", "self", ".", "doc_attn", "=", "[", "]", "\n", "self", ".", "read_strategy", "=", "read_strategy", "\n", "self", ".", "rv_doc_history", "=", "[", "]", "\n", "self", ".", "doc_indices_history", "=", "[", "]", "\n", "self", ".", "attention_style", "=", "attention_style", "\n", "self", ".", "memory_state_update_rule", "=", "memory_state_update_rule", "\n", "self", ".", "oracle", "=", "oracle", "\n", "if", "self", ".", "oracle", "is", "not", "None", ":", "\n", "      ", "assert", "answer_doc_ids", "is", "not", "None", "\n", "self", ".", "answer_doc_ids", "=", "answer_doc_ids", "\n", "", "self", ".", "sents_len", "=", "sents_len", "\n", "self", ".", "answer_list", "=", "[", "]", "\n", "self", ".", "_c_state", "=", "tf", ".", "placeholder", "(", "'float'", ",", "[", "batch_size", ",", "query_dim", "]", ",", "name", "=", "'_c_state'", ")", "\n", "self", ".", "_m_state", "=", "tf", ".", "placeholder", "(", "'float'", ",", "[", "batch_size", ",", "hidden_dim", "]", ",", "name", "=", "'_m_state'", ")", "\n", "self", ".", "_a_state", "=", "tf", ".", "placeholder", "(", "'float'", ",", "[", "batch_size", ",", "hidden_dim", "]", ",", "name", "=", "'_a_state'", ")", "\n", "self", ".", "_c_history", "=", "tf", ".", "placeholder", "(", "'float'", ",", "[", "batch_size", ",", "None", ",", "query_dim", "]", ",", "name", "=", "'_c_history'", ")", "\n", "self", ".", "_m_history", "=", "tf", ".", "placeholder", "(", "'float'", ",", "[", "batch_size", ",", "None", ",", "hidden_dim", "]", ",", "name", "=", "'_m_history'", ")", "\n", "self", ".", "reinforce", "=", "reinforce", "\n", "self", ".", "attention_cell_dropout", "=", "attention_cell_dropout", "\n", "self", ".", "read_topk_docs", "=", "read_topk_docs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.HierarchicalAttnMACRnn.apply": [[328, 423], ["tensorflow.reduce_sum", "tensorflow.squeeze", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.cast", "tensorflow.variable_scope", "tensorflow.contrib.rnn.GRUCell", "range", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "mac_layer.HierarchicalAttnMACRnn.HierarchicalAttnMACCell", "mac_layer.HierarchicalAttnMACRnn.doc_attn_logits_lst.append", "mac_layer.HierarchicalAttnMACRnn.word_attn_logits_lst.append", "mac_layer.HierarchicalAttnMACRnn.doc_attn_weights_lst.append", "mac_layer.HierarchicalAttnMACRnn.c_history.append", "mac_layer.HierarchicalAttnMACRnn.m_history.append", "mac_layer.HierarchicalAttnMACRnn.a_history.append", "mac_layer.HierarchicalAttnMACRnn.HierarchicalAttnMACCell", "tensorflow.expand_dims", "tensorflow.matmul", "mac_layer.HierarchicalAttnMACRnn.MACOutputUnit", "mac_layer.HierarchicalAttnMACRnn.MACOutputUnit", "tensorflow.variable_scope", "tensorflow.reduce_max", "range", "tensorflow.stack", "tensorflow.cast", "reasoning_layers.utils.biattention_layer", "tensorflow.squeeze", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.BasicLSTMCell", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "my.tensorflow.nn.linear_logits", "tensorflow.nn.softmax", "tensorflow.einsum", "range", "range", "tensorflow.concat", "mac_layer.HierarchicalAttnMACRnn.concat_selected_doc_mask.append", "tensorflow.stack", "mac_layer.HierarchicalAttnMACRnn.MACOutputUnit", "mac_layer.HierarchicalAttnMACRnn.answer_list.append", "mac_layer.HierarchicalAttnMACRnn.MACOutputUnit", "mac_layer.HierarchicalAttnMACRnn.answer_list.append", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.ones", "tensorflow.zeros"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.HierarchicalAttnMACRnn.HierarchicalAttnMACCell", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.HierarchicalAttnMACRnn.HierarchicalAttnMACCell", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACOutputUnit", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACOutputUnit", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.utils.biattention_layer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACOutputUnit", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.MACRnn.MACOutputUnit"], ["", "def", "apply", "(", "self", ",", "context", ",", "context_st", ",", "query", ",", "query_st", ",", "q_sub_st", ",", "q_len", ",", "c_mask", ",", "cdoc_mask", ",", "q_mask", ",", "candidates", ",", "cand_mask", ",", "greedy_read", "=", "False", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "batch_size", "=", "self", ".", "batch_size", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", "\n", "query_dim", "=", "self", ".", "query_dim", "\n", "self", ".", "docs_len", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "c_mask", ",", "'int32'", ")", ",", "2", ")", "\n", "candidates", "=", "tf", ".", "squeeze", "(", "candidates", ",", "axis", "=", "1", ")", "\n", "c_state", "=", "tf", ".", "zeros", "(", "(", "batch_size", ",", "query_dim", ")", ")", "\n", "m_state", "=", "tf", ".", "zeros", "(", "(", "batch_size", ",", "hidden_dim", ")", ")", "\n", "a_state", "=", "tf", ".", "zeros", "(", "(", "batch_size", ",", "hidden_dim", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'MACRnn'", ")", ":", "\n", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'q_sub_proj'", ")", ":", "\n", "        ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "[", "query_dim", ",", "hidden_dim", "]", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "[", "hidden_dim", "]", ")", "\n", "m_state", "=", "tf", ".", "matmul", "(", "q_sub_st", ",", "W", ")", "+", "b", "\n", "\n", "", "self", ".", "c_history", "=", "[", "]", "\n", "self", ".", "m_history", "=", "[", "]", "\n", "self", ".", "a_history", "=", "[", "]", "\n", "self", ".", "doc_attn_logits_lst", "=", "[", "]", "\n", "self", ".", "word_attn_logits_lst", "=", "[", "]", "\n", "self", ".", "doc_attn_weights_lst", "=", "[", "]", "\n", "\n", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "hidden_dim", ")", "\n", "self", ".", "cell", "=", "cell", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_hops", ")", ":", "\n", "        ", "scope_str", "=", "'MACRnn-layer-%d'", "%", "0", "\n", "\n", "if", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_repeat_2nd_step'", "and", "i", ">", "1", ":", "\n", "          ", "m_state", "=", "self", ".", "m_history", "[", "0", "]", "\n", "a_state", "=", "self", ".", "a_history", "[", "0", "]", "\n", "\n", "", "c_state", ",", "m_state", ",", "a_state", ",", "doc_attn_logits", ",", "doc_attn_weights", ",", "word_attn_logits", "=", "self", ".", "HierarchicalAttnMACCell", "(", "i", ",", "cell", ",", "query", ",", "query_st", ",", "q_sub_st", ",", "context", ",", "context_st", ",", "c_mask", ",", "cdoc_mask", ",", "q_mask", ",", "self", ".", "c_history", ",", "self", ".", "m_history", ",", "c_state", ",", "m_state", ",", "a_state", ",", "scope_str", ",", "reuse", "=", "(", "reuse", "or", "i", "!=", "0", ")", ",", "greedy_read", "=", "greedy_read", ")", "\n", "\n", "self", ".", "doc_attn_logits_lst", ".", "append", "(", "doc_attn_logits", ")", "\n", "self", ".", "word_attn_logits_lst", ".", "append", "(", "word_attn_logits", ")", "\n", "self", ".", "doc_attn_weights_lst", ".", "append", "(", "doc_attn_weights", ")", "\n", "self", ".", "c_history", ".", "append", "(", "c_state", ")", "\n", "self", ".", "m_history", ".", "append", "(", "m_state", ")", "\n", "\n", "\n", "if", "(", "self", ".", "reasoning_unit", "==", "'concat_first_sent'", "or", "self", ".", "reasoning_unit", "==", "'concat_full_doc'", ")", "and", "i", "==", "self", ".", "num_hops", "-", "1", ":", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "\"concat_read_lstm\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "max_len", "=", "tf", ".", "reduce_max", "(", "self", ".", "concat_selected_doc_len", ")", "\n", "self", ".", "concat_selected_doc_mask", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "              ", "concat_selected_doc_mask_k", "=", "tf", ".", "concat", "(", "values", "=", "[", "tf", ".", "ones", "(", "[", "self", ".", "concat_selected_doc_len", "[", "k", "]", "]", ")", ",", "tf", ".", "zeros", "(", "[", "max_len", "-", "self", ".", "concat_selected_doc_len", "[", "k", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "concat_selected_doc_mask", ".", "append", "(", "concat_selected_doc_mask_k", ")", "\n", "\n", "", "self", ".", "concat_selected_doc", "=", "tf", ".", "stack", "(", "self", ".", "concat_selected_doc", ",", "axis", "=", "0", ")", "\n", "self", ".", "concat_selected_doc_mask", "=", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "self", ".", "concat_selected_doc_mask", ",", "axis", "=", "0", ")", ",", "'bool'", ")", "\n", "p0", "=", "biattention_layer", "(", "self", ".", "is_train", ",", "self", ".", "concat_selected_doc", ",", "query", ",", "h_mask", "=", "self", ".", "concat_selected_doc_mask", ",", "u_mask", "=", "q_mask", ")", "\n", "p0", "=", "tf", ".", "squeeze", "(", "p0", ",", "axis", "=", "1", ")", "\n", "cell_fw", "=", "BasicLSTMCell", "(", "40", ",", "state_is_tuple", "=", "True", ")", "\n", "cell_bw", "=", "BasicLSTMCell", "(", "40", ",", "state_is_tuple", "=", "True", ")", "\n", "cell_fw", "=", "SwitchableDropoutWrapper", "(", "cell_fw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ")", "\n", "cell_bw", "=", "SwitchableDropoutWrapper", "(", "cell_bw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ")", "\n", "\n", "(", "fw_h", ",", "bw_h", ")", ",", "_", "=", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "p0", ",", "self", ".", "concat_selected_doc_len", ",", "dtype", "=", "'float'", ")", "\n", "x", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "fw_h", ",", "bw_h", "]", ")", "\n", "logits", "=", "linear_logits", "(", "[", "x", "]", ",", "True", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ",", "mask", "=", "self", ".", "concat_selected_doc_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "scope", "=", "'logits1'", ")", "\n", "probs", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "doc_rep", "=", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "self", ".", "concat_selected_doc", ",", "probs", ")", "\n", "a_state", "=", "doc_rep", "\n", "\n", "", "", "self", ".", "a_history", ".", "append", "(", "a_state", ")", "\n", "\n", "", "if", "self", ".", "oracle", "==", "'extra'", ":", "\n", "        ", "scope_str", "=", "'MACRnn-layer-%d'", "%", "0", "\n", "if", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_repeat_2nd_step'", "and", "i", ">", "1", ":", "\n", "          ", "m_state", "=", "self", ".", "m_history", "[", "0", "]", "\n", "a_state", "=", "self", ".", "a_history", "[", "0", "]", "\n", "", "_", ",", "_", ",", "a_state", ",", "_", ",", "_", ",", "_", "=", "self", ".", "HierarchicalAttnMACCell", "(", "self", ".", "num_hops", ",", "cell", ",", "query", ",", "query_st", ",", "q_sub_st", ",", "context", ",", "context_st", ",", "c_mask", ",", "cdoc_mask", ",", "q_mask", ",", "self", ".", "c_history", ",", "self", ".", "m_history", ",", "c_state", ",", "m_state", ",", "a_state", ",", "scope_str", ",", "reuse", "=", "True", ",", "greedy_read", "=", "greedy_read", ")", "\n", "\n", "", "if", "self", ".", "prediction", "==", "'candidates'", ":", "\n", "        ", "if", "self", ".", "output_unit_type", "==", "'triplet-mlp'", ":", "\n", "          ", "g1", "=", "self", ".", "MACOutputUnit", "(", "a_state", ",", "context", ",", "candidates", ",", "query", "=", "query", ")", "\n", "if", "(", "self", ".", "reasoning_unit", "!=", "'concat_first_sent'", "and", "self", ".", "reasoning_unit", "!=", "'concat_full_doc'", ")", "and", "(", "self", ".", "reasoning_unit", "!=", "'attention-lstm'", "or", "self", ".", "read_strategy", "!=", "'one_doc_per_it'", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_hops", ")", ":", "\n", "              ", "gi", "=", "self", ".", "MACOutputUnit", "(", "self", ".", "a_history", "[", "i", "]", ",", "context", ",", "candidates", ",", "query", "=", "query", ")", "\n", "self", ".", "answer_list", ".", "append", "(", "tf", ".", "expand_dims", "(", "gi", ",", "axis", "=", "1", ")", ")", "\n", "", "", "", "else", ":", "\n", "          ", "g1", "=", "self", ".", "MACOutputUnit", "(", "a_state", ",", "context", ",", "candidates", ")", "\n", "if", "(", "self", ".", "reasoning_unit", "!=", "'concat_first_sent'", "and", "self", ".", "reasoning_unit", "!=", "'concat_full_doc'", ")", "and", "(", "self", ".", "reasoning_unit", "!=", "'attention-lstm'", "or", "self", ".", "read_strategy", "!=", "'one_doc_per_it'", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_hops", ")", ":", "\n", "              ", "gi", "=", "self", ".", "MACOutputUnit", "(", "self", ".", "a_history", "[", "i", "]", ",", "context", ",", "candidates", ",", "reuse", "=", "True", ")", "\n", "self", ".", "answer_list", ".", "append", "(", "tf", ".", "expand_dims", "(", "gi", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "", "", "return", "tf", ".", "expand_dims", "(", "g1", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.HierarchicalAttnMACRnn.initialize_state": [[424, 430], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul"], "methods", ["None"], ["", "", "", "def", "initialize_state", "(", "self", ",", "q_sub", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'initial_m'", ")", ":", "\n", "      ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "[", "self", ".", "hidden_dim", "*", "2", ",", "self", ".", "hidden_dim", "]", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "[", "self", ".", "hidden_dim", "]", ")", "\n", "new_state", "=", "tf", ".", "matmul", "(", "q_sub", ",", "W", ")", "+", "b", "\n", "", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.HierarchicalAttnMACRnn.HierarchicalAttnMACCell": [[432, 803], ["tensorflow.einsum", "tensorflow.stack", "tensorflow.stack", "tensorflow.variable_scope", "mac_layer.HierarchicalAttnMACRnn.HierarchicalAttnMACCell.read_unit"], "methods", ["None"], ["", "def", "HierarchicalAttnMACCell", "(", "self", ",", "layer", ":", "int", ",", "cell", ",", "cw", ",", "cw_st", ",", "q_sub_st", ",", "k", ",", "k_st", ",", "c_mask", ",", "cdoc_mask", ",", "q_mask", ",", "c_history", ",", "m_history", ",", "c_state", ",", "m_state", ",", "a_state", ",", "scope_str", ",", "reuse", "=", "False", ",", "out_of_graph", "=", "False", ",", "greedy_read", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    The 2nd implementation based on MAC Cell with hierarchical attention. \n    The read unit does not depend on c_state any more.\n    Added a_state.\n    Input: k [N, M, JX, context_dim]\n    \"\"\"", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", "\n", "context_dim", "=", "self", ".", "context_dim", "\n", "query_dim", "=", "self", ".", "query_dim", "\n", "\n", "\n", "def", "control_unit", "(", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'control_unit'", ")", ":", "\n", "        ", "W_cq", "=", "tf", ".", "get_variable", "(", "'W_cq'", ",", "[", "query_dim", "+", "hidden_dim", ",", "query_dim", "]", ")", "\n", "b_cq", "=", "tf", ".", "get_variable", "(", "'b_cq'", ",", "[", "query_dim", "]", ")", "\n", "cq", "=", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "[", "c_state", ",", "m_state", "]", ",", "axis", "=", "1", ")", ",", "W_cq", ")", "+", "b_cq", "\n", "pre_ca", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "cq", ",", "cw", ")", "\n", "ca", "=", "linear_logits", "(", "[", "pre_ca", "]", ",", "True", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ",", "is_train", "=", "self", ".", "is_train", ",", "mask", "=", "q_mask", ")", "\n", "cv", "=", "tf", ".", "nn", ".", "softmax", "(", "ca", ")", "\n", "", "return", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "cw", ",", "cv", ")", "\n", "\n", "", "def", "read_unit", "(", "m_state", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'read_unit'", ")", ":", "\n", "        ", "W_cm", "=", "tf", ".", "get_variable", "(", "'W_cm'", ",", "[", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_cm", "=", "tf", ".", "get_variable", "(", "'b_cm'", ",", "[", "hidden_dim", "]", ")", "\n", "cm_state", "=", "tf", ".", "matmul", "(", "m_state", ",", "W_cm", ")", "+", "b_cm", "\n", "\n", "if", "layer", ">", "1", "and", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_repeat_2nd_step'", ":", "\n", "          ", "ra_doc", "=", "self", ".", "doc_attn_logits_lst", "[", "1", "]", "\n", "rv_doc", "=", "self", ".", "doc_attn_weights_lst", "[", "1", "]", "\n", "", "else", ":", "\n", "          ", "W_k2", "=", "tf", ".", "get_variable", "(", "'W_k2'", ",", "[", "query_dim", ",", "hidden_dim", "]", ")", "\n", "b_k2", "=", "tf", ".", "get_variable", "(", "'b_k2'", ",", "[", "hidden_dim", "]", ")", "\n", "I_doc", "=", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "k_st", ",", "W_k2", ")", "+", "b_k2", "# [N, M, hidden_dim]", "\n", "pre_ra_doc", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "cm_state", ",", "I_doc", ")", "\n", "\n", "if", "self", ".", "attention_style", "==", "'Bahdanau'", ":", "\n", "            ", "W_b2", "=", "tf", ".", "get_variable", "(", "'W_b2'", ",", "[", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_b2", "=", "tf", ".", "get_variable", "(", "'b_b2'", ",", "[", "hidden_dim", "]", ")", "\n", "shape_1", "=", "tf", ".", "shape", "(", "I_doc", ")", "[", "1", "]", "\n", "tiled_cm_state", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "cm_state", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "shape_1", ",", "1", "]", ")", "\n", "concat_in", "=", "tf", ".", "reshape", "(", "tiled_cm_state", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", "+", "tf", ".", "reshape", "(", "I_doc", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", "+", "tf", ".", "reshape", "(", "pre_ra_doc", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", "\n", "pre_ra_doc", "=", "tf", ".", "matmul", "(", "concat_in", ",", "W_b2", ")", "+", "b_b2", "\n", "pre_ra_doc", "=", "tf", ".", "reshape", "(", "pre_ra_doc", ",", "[", "-", "1", ",", "shape_1", ",", "hidden_dim", "]", ")", "\n", "\n", "", "ra_doc", "=", "linear_logits", "(", "[", "pre_ra_doc", "]", ",", "True", ",", "is_train", "=", "self", ".", "is_train", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ",", "mask", "=", "cdoc_mask", ",", "scope", "=", "'logits2'", ")", "\n", "rv_doc", "=", "tf", ".", "nn", ".", "softmax", "(", "ra_doc", ")", "# document-level attention weight", "\n", "\n", "# Word-level attention", "\n", "", "if", "self", ".", "memory_state_update_rule", "is", "None", ":", "\n", "          ", "W_k", "=", "tf", ".", "get_variable", "(", "'W_k'", ",", "[", "context_dim", ",", "hidden_dim", "]", ")", "\n", "b_k", "=", "tf", ".", "get_variable", "(", "'b_k'", ",", "[", "hidden_dim", "]", ")", "\n", "I_word", "=", "tf", ".", "einsum", "(", "'ijkl,lm->ijkm'", ",", "k", ",", "W_k", ")", "+", "b_k", "\n", "pre_ra_word", "=", "tf", ".", "einsum", "(", "'il,ijkl->ijkl'", ",", "cm_state", ",", "I_word", ")", "\n", "\n", "if", "self", ".", "attention_style", "==", "'Bahdanau'", ":", "\n", "            ", "W_b", "=", "tf", ".", "get_variable", "(", "'W_b'", ",", "[", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_b", "=", "tf", ".", "get_variable", "(", "'b_b'", ",", "[", "hidden_dim", "]", ")", "\n", "shape_1", "=", "tf", ".", "shape", "(", "I_word", ")", "[", "1", "]", "\n", "shape_2", "=", "tf", ".", "shape", "(", "I_word", ")", "[", "2", "]", "\n", "tiled_cm_state", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "cm_state", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "shape_1", ",", "shape_2", ",", "1", "]", ")", "\n", "concat_in", "=", "tf", ".", "reshape", "(", "tiled_cm_state", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", "+", "tf", ".", "reshape", "(", "I_word", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", "+", "tf", ".", "reshape", "(", "pre_ra_word", ",", "[", "-", "1", ",", "hidden_dim", "]", ")", "\n", "pre_ra_word", "=", "tf", ".", "matmul", "(", "concat_in", ",", "W_b", ")", "+", "b_b", "\n", "pre_ra_word", "=", "tf", ".", "reshape", "(", "pre_ra_word", ",", "[", "-", "1", ",", "shape_1", ",", "shape_2", ",", "hidden_dim", "]", ")", "\n", "\n", "", "ra_word", "=", "linear_logits", "(", "[", "pre_ra_word", "]", ",", "True", ",", "is_train", "=", "self", ".", "is_train", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ",", "mask", "=", "c_mask", ",", "scope", "=", "'logits1'", ")", "\n", "rv_word", "=", "tf", ".", "nn", ".", "softmax", "(", "ra_word", ")", "# word-level attention weight", "\n", "r_doc", "=", "tf", ".", "einsum", "(", "'ijkl,ijk->ijl'", ",", "k", ",", "rv_word", ")", "# [N, M, context_dim]", "\n", "\n", "", "doc_indices", "=", "None", "\n", "if", "self", ".", "read_strategy", "==", "'one_doc_per_it'", "or", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_mask_all_read'", "or", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_mask_read_pairs'", "or", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_repeat_2nd_step'", ":", "\n", "          ", "if", "out_of_graph", "or", "layer", ">", "0", ":", "\n", "            ", "if", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_mask_read_pairs'", ":", "\n", "              ", "prev_read", "=", "self", ".", "doc_attn", "[", "layer", "-", "1", "]", "\n", "\n", "doc_idx", "=", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "self", ".", "doc_attn", ",", "axis", "=", "1", ")", ",", "axis", "=", "2", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "rv_doc", ")", "\n", "updates", "=", "tf", ".", "negative", "(", "tf", ".", "ones", "(", "[", "self", ".", "batch_size", ",", "layer", "]", ")", ")", "\n", "batch_nums", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "0", ",", "limit", "=", "self", ".", "batch_size", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "layer", ",", "1", "]", ")", "\n", "indices", "=", "tf", ".", "concat", "(", "[", "batch_nums", ",", "doc_idx", "]", ",", "axis", "=", "2", ")", "# [batch_size, layer, 2]", "\n", "", "elif", "self", ".", "read_strategy", "==", "'one_doc_per_it'", ":", "\n", "              ", "if", "out_of_graph", ":", "\n", "                ", "doc_idx", "=", "tf", ".", "stack", "(", "self", ".", "doc_attn", ",", "axis", "=", "1", ")", "[", ":", ",", "layer", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "doc_idx", "=", "self", ".", "doc_attn", "[", "layer", "-", "1", "]", "\n", "", "shape", "=", "tf", ".", "shape", "(", "rv_doc", ")", "\n", "updates", "=", "tf", ".", "negative", "(", "tf", ".", "ones", "(", "[", "self", ".", "batch_size", "]", ")", ")", "\n", "batch_nums", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "0", ",", "limit", "=", "self", ".", "batch_size", ")", ",", "axis", "=", "1", ")", "\n", "indices", "=", "tf", ".", "concat", "(", "[", "batch_nums", ",", "tf", ".", "reshape", "(", "doc_idx", ",", "[", "self", ".", "batch_size", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_mask_all_read'", "or", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_repeat_2nd_step'", ":", "\n", "#if self.mode == 'train':", "\n", "              ", "doc_idx", "=", "tf", ".", "stack", "(", "self", ".", "doc_attn", ",", "axis", "=", "1", ")", "\n", "# else:", "\n", "#   doc_idx = tf.expand_dims(tf.stack(self.doc_attn, axis=1), axis=2)", "\n", "shape", "=", "tf", ".", "shape", "(", "rv_doc", ")", "\n", "updates", "=", "tf", ".", "negative", "(", "tf", ".", "ones", "(", "[", "self", ".", "batch_size", ",", "layer", "]", ")", ")", "\n", "batch_nums", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "0", ",", "limit", "=", "self", ".", "batch_size", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "layer", ",", "1", "]", ")", "\n", "indices", "=", "tf", ".", "concat", "(", "[", "batch_nums", ",", "doc_idx", "]", ",", "axis", "=", "2", ")", "# [batch_size, layer, 2]", "\n", "updates_2", "=", "tf", ".", "ones", "(", "[", "self", ".", "batch_size", ",", "layer", "]", ")", "*", "1e-30", "\n", "very_small_number", "=", "tf", ".", "scatter_nd", "(", "indices", ",", "updates_2", ",", "shape", ")", "\n", "\n", "", "mask", "=", "tf", ".", "scatter_nd", "(", "indices", ",", "updates", ",", "shape", ")", "\n", "mask", "=", "mask", "+", "1", "\n", "rv_doc", "=", "rv_doc", "*", "mask", "\n", "\n", "if", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_mask_all_read'", "or", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_repeat_2nd_step'", ":", "\n", "              ", "rv_doc", "=", "rv_doc", "+", "very_small_number", "\n", "\n", "", "", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "oracle", "==", "'final'", "and", "layer", "==", "self", ".", "num_hops", "-", "1", ":", "\n", "              ", "new_doc_idx", "=", "tf", ".", "slice", "(", "self", ".", "answer_doc_ids", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "              ", "new_doc_idx", "=", "tf", ".", "expand_dims", "(", "tf", ".", "argmax", "(", "tf", ".", "log", "(", "rv_doc", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "", "elif", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "if", "(", "self", ".", "oracle", "==", "'final'", "and", "layer", "==", "self", ".", "num_hops", "-", "1", ")", "or", "(", "self", ".", "oracle", "==", "'extra'", "and", "layer", "==", "self", ".", "num_hops", ")", ":", "\n", "              ", "new_doc_idx", "=", "tf", ".", "slice", "(", "self", ".", "answer_doc_ids", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "              ", "if", "self", ".", "read_topk_docs", ">", "0", ":", "\n", "                ", "topk_doc_mask_1", "=", "tf", ".", "ones", "(", "[", "self", ".", "batch_size", ",", "tf", ".", "minimum", "(", "tf", ".", "shape", "(", "rv_doc", ")", "[", "1", "]", ",", "self", ".", "read_topk_docs", ")", "]", ")", "\n", "topk_doc_mask_0", "=", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "tf", ".", "maximum", "(", "tf", ".", "shape", "(", "rv_doc", ")", "[", "1", "]", "-", "self", ".", "read_topk_docs", ",", "0", ")", "]", ")", "\n", "topk_doc_mask", "=", "tf", ".", "concat", "(", "[", "topk_doc_mask_1", ",", "topk_doc_mask_0", "]", ",", "axis", "=", "1", ")", "\n", "rv_doc", "=", "rv_doc", "*", "topk_doc_mask", "\n", "\n", "", "if", "(", "greedy_read", "or", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_repeat_2nd_step'", ")", "and", "self", ".", "reinforce", "is", "False", ":", "\n", "                ", "new_doc_idx", "=", "tf", ".", "expand_dims", "(", "tf", ".", "argmax", "(", "tf", ".", "log", "(", "rv_doc", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "new_doc_idx", "=", "tf", ".", "multinomial", "(", "tf", ".", "log", "(", "rv_doc", ")", ",", "1", ")", "\n", "#new_doc_idx = tf.argmax(tf.log(rv_doc), axis=1)", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "new_doc_idx", "=", "tf", ".", "cast", "(", "new_doc_idx", ",", "'int32'", ")", "\n", "\n", "shape", "=", "tf", ".", "shape", "(", "rv_doc", ")", "\n", "updates", "=", "tf", ".", "ones", "(", "[", "self", ".", "batch_size", "]", ")", "\n", "batch_nums", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "0", ",", "limit", "=", "self", ".", "batch_size", ")", ",", "axis", "=", "1", ")", "\n", "doc_indices", "=", "tf", ".", "concat", "(", "[", "batch_nums", ",", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "new_doc_idx", ",", "[", "self", ".", "batch_size", ",", "1", "]", ")", ",", "'int32'", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "self", ".", "memory_state_update_rule", "==", "'bi-attn'", ":", "\n", "            ", "selected_doc", "=", "tf", ".", "gather_nd", "(", "k", ",", "indices", ")", "\n", "selected_mask", "=", "tf", ".", "gather_nd", "(", "c_mask", ",", "indices", ")", "\n", "p0", "=", "biattention_layer", "(", "self", ".", "is_train", ",", "selected_doc", ",", "cw", ",", "h_mask", "=", "selected_mask", ",", "u_mask", "=", "q_mask", ")", "\n", "p0", "=", "tf", ".", "squeeze", "(", "p0", ",", "axis", "=", "1", ")", "\n", "W_p0", "=", "tf", ".", "get_variable", "(", "'W_p0'", ",", "[", "hidden_dim", "*", "2", ",", "hidden_dim", "]", ")", "\n", "b_p0", "=", "tf", ".", "get_variable", "(", "'b_p0'", ",", "[", "hidden_dim", "]", ")", "\n", "I_word", "=", "tf", ".", "einsum", "(", "'ijk,km->ijm'", ",", "p0", ",", "W_p0", ")", "+", "b_p0", "\n", "pre_ra_word", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "cm_state", ",", "I_word", ")", "\n", "\n", "ra_word", "=", "linear_logits", "(", "[", "pre_ra_word", "]", ",", "True", ",", "is_train", "=", "self", ".", "is_train", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ",", "mask", "=", "selected_mask", ",", "scope", "=", "'logits1'", ")", "\n", "rv_word", "=", "tf", ".", "nn", ".", "softmax", "(", "ra_word", ")", "# word-level attention weight", "\n", "r_doc", "=", "tf", ".", "einsum", "(", "'ikl,ik->il'", ",", "p0", ",", "rv_word", ")", "# [N, M, context_dim]", "\n", "r", "=", "r_doc", "# No need to apply doc_mask again.", "\n", "", "else", ":", "\n", "            ", "r", "=", "tf", ".", "gather_nd", "(", "r_doc", ",", "doc_indices", ")", "\n", "", "print", "(", "'one_doc_per_it'", ")", "\n", "", "elif", "self", ".", "read_strategy", "==", "'mask_previous_max'", ":", "\n", "          ", "if", "layer", ">", "0", ":", "\n", "            ", "doc_idx", "=", "self", ".", "doc_attn", "[", "layer", "-", "1", "]", "\n", "shape", "=", "tf", ".", "shape", "(", "rv_doc", ")", "\n", "updates", "=", "tf", ".", "negative", "(", "tf", ".", "ones", "(", "[", "self", ".", "batch_size", "]", ")", ")", "\n", "batch_nums", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "0", ",", "limit", "=", "self", ".", "batch_size", ")", ",", "axis", "=", "1", ")", "\n", "indices", "=", "tf", ".", "concat", "(", "[", "batch_nums", ",", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "doc_idx", ",", "[", "self", ".", "batch_size", ",", "1", "]", ")", ",", "'int32'", ")", "]", ",", "axis", "=", "1", ")", "\n", "mask", "=", "tf", ".", "scatter_nd", "(", "indices", ",", "updates", ",", "shape", ")", "\n", "mask", "=", "mask", "+", "1", "\n", "#self.mask = mask", "\n", "rv_doc", "=", "rv_doc", "*", "mask", "\n", "\n", "", "new_doc_idx", "=", "tf", ".", "argmax", "(", "tf", ".", "log", "(", "rv_doc", ")", ",", "axis", "=", "1", ")", "\n", "r", "=", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "r_doc", ",", "rv_doc", ")", "\n", "", "else", ":", "\n", "          ", "assert", "self", ".", "read_strategy", "==", "'full'", "\n", "new_doc_idx", "=", "tf", ".", "argmax", "(", "tf", ".", "log", "(", "rv_doc", ")", ",", "axis", "=", "1", ")", "\n", "r", "=", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "r_doc", ",", "rv_doc", ")", "\n", "\n", "", "if", "out_of_graph", "is", "False", ":", "\n", "          ", "self", ".", "doc_attn", ".", "append", "(", "new_doc_idx", ")", "\n", "self", ".", "rv_doc_history", ".", "append", "(", "rv_doc", ")", "\n", "self", ".", "doc_indices_history", ".", "append", "(", "doc_indices", ")", "\n", "\n", "", "_", ",", "topk_docs", "=", "tf", ".", "nn", ".", "top_k", "(", "rv_doc", ",", "3", ")", "\n", "topk_words_prob", ",", "topk_words", "=", "tf", ".", "nn", ".", "top_k", "(", "rv_word", "[", ":", ",", "topk_docs", "[", "0", ",", "0", "]", "]", ",", "20", ")", "\n", "if", "out_of_graph", "is", "False", ":", "\n", "          ", "self", ".", "top_doc_attn", ".", "append", "(", "topk_docs", ")", "\n", "self", ".", "top_attn", ".", "append", "(", "topk_words", ")", "\n", "self", ".", "top_attn_prob", ".", "append", "(", "topk_words_prob", ")", "\n", "", "", "return", "r", ",", "ra_doc", ",", "rv_doc", ",", "ra_word", "\n", "\n", "", "def", "write_unit", "(", "r", ",", "new_c_state", ",", "c_history", ",", "m_history", ",", "query", "=", "None", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'write_unit'", ")", ":", "\n", "        ", "doc_indices", "=", "self", ".", "doc_indices_history", "[", "layer", "]", "\n", "new_m_state", ",", "output", "=", "cell", "(", "r", ",", "m_state", ")", "\n", "if", "self", ".", "reasoning_unit", "==", "'answer_unit'", ":", "\n", "\n", "          ", "W_c", "=", "tf", ".", "get_variable", "(", "'W_c'", ",", "[", "query_dim", ",", "hidden_dim", "]", ")", "\n", "b_c", "=", "tf", ".", "get_variable", "(", "'b_c'", ",", "[", "hidden_dim", "]", ")", "\n", "c_proj", "=", "tf", ".", "matmul", "(", "new_c_state", ",", "W_c", ")", "+", "b_c", "\n", "\n", "W1", "=", "tf", ".", "get_variable", "(", "'W1'", ",", "[", "3", "*", "hidden_dim", ",", "2", "*", "hidden_dim", "]", ")", "\n", "b1", "=", "tf", ".", "get_variable", "(", "'b1'", ",", "[", "2", "*", "hidden_dim", "]", ")", "\n", "W2", "=", "tf", ".", "get_variable", "(", "'W2'", ",", "[", "2", "*", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b2", "=", "tf", ".", "get_variable", "(", "'b2'", ",", "[", "hidden_dim", "]", ")", "\n", "concat_in", "=", "tf", ".", "concat", "(", "axis", "=", "-", "1", ",", "values", "=", "[", "output", ",", "c_proj", ",", "output", "*", "c_proj", "]", ")", "\n", "new_ans", "=", "tf", ".", "matmul", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "concat_in", ",", "W1", ")", "+", "b1", ")", ",", "W2", ")", "+", "b2", "\n", "\n", "\n", "if", "self", ".", "answer_state_update_rule", "==", "'bi-attn'", ":", "\n", "            ", "assert", "query", "is", "not", "None", "\n", "selected_doc", "=", "tf", ".", "einsum", "(", "'ijkl,ij->ikl'", ",", "k", ",", "doc_mask", ")", "\n", "selected_mask", "=", "tf", ".", "cast", "(", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "tf", ".", "cast", "(", "c_mask", ",", "'float32'", ")", ",", "doc_mask", ")", ",", "'bool'", ")", "\n", "p0", "=", "biattention_layer", "(", "self", ".", "is_train", ",", "selected_doc", ",", "query", ",", "h_mask", "=", "selected_mask", ",", "u_mask", "=", "q_mask", ")", "\n", "p0", "=", "tf", ".", "squeeze", "(", "p0", ",", "axis", "=", "1", ")", "\n", "\n", "logits", "=", "linear_logits", "(", "[", "selected_doc", ",", "p0", "]", ",", "True", ",", "is_train", "=", "self", ".", "is_train", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ",", "mask", "=", "selected_mask", ")", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "new_ans_2", "=", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "selected_doc", ",", "weights", ")", "\n", "W_a", "=", "tf", ".", "get_variable", "(", "'W_a'", ",", "[", "self", ".", "context_dim", ",", "hidden_dim", "]", ")", "\n", "b_a", "=", "tf", ".", "get_variable", "(", "'b_a'", ",", "[", "hidden_dim", "]", ")", "\n", "new_ans_2", "=", "tf", ".", "matmul", "(", "new_ans_2", ",", "W_a", ")", "+", "b_a", "\n", "new_ans", "=", "tf", ".", "concat", "(", "[", "new_ans", ",", "new_ans_2", "]", ",", "axis", "=", "-", "1", ")", "\n", "W_a2", "=", "tf", ".", "get_variable", "(", "'W_a2'", ",", "[", "hidden_dim", "*", "2", ",", "hidden_dim", "]", ")", "\n", "b_a2", "=", "tf", ".", "get_variable", "(", "'b_a2'", ",", "[", "hidden_dim", "]", ")", "\n", "new_ans", "=", "tf", ".", "matmul", "(", "new_ans", ",", "W_a2", ")", "+", "b_a2", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "answer_state_update_rule", "==", "'mlp'", "\n", "\n", "", "W_g", "=", "tf", ".", "get_variable", "(", "'W_g'", ",", "[", "hidden_dim", ",", "1", "]", ")", "\n", "b_g", "=", "tf", ".", "get_variable", "(", "'b_g'", ",", "[", "1", "]", ")", "\n", "gate", "=", "tf", ".", "matmul", "(", "output", "*", "c_proj", ",", "W_g", ")", "+", "b_g", "\n", "new_a_state", "=", "tf", ".", "sigmoid", "(", "gate", ")", "*", "new_ans", "+", "(", "1", "-", "tf", ".", "sigmoid", "(", "gate", ")", ")", "*", "a_state", "\n", "", "elif", "self", ".", "reasoning_unit", "==", "'mlp'", ":", "\n", "          ", "c_proj", "=", "new_c_state", "\n", "\n", "W1", "=", "tf", ".", "get_variable", "(", "'W1'", ",", "[", "3", "*", "query_dim", ",", "3", "*", "query_dim", "]", ")", "\n", "b1", "=", "tf", ".", "get_variable", "(", "'b1'", ",", "[", "3", "*", "query_dim", "]", ")", "\n", "W2", "=", "tf", ".", "get_variable", "(", "'W2'", ",", "[", "3", "*", "query_dim", ",", "hidden_dim", "]", ")", "\n", "b2", "=", "tf", ".", "get_variable", "(", "'b2'", ",", "[", "hidden_dim", "]", ")", "\n", "# concat_in = tf.concat(axis=-1, values=[output, c_proj, output*c_proj])", "\n", "concat_in", "=", "tf", ".", "concat", "(", "axis", "=", "-", "1", ",", "values", "=", "[", "r", ",", "c_proj", ",", "r", "*", "c_proj", "]", ")", "\n", "new_a_state", "=", "tf", ".", "matmul", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "concat_in", ",", "W1", ")", "+", "b1", ")", ",", "W2", ")", "+", "b2", "\n", "", "elif", "self", ".", "reasoning_unit", "==", "'bi-attn'", ":", "\n", "          ", "c_proj", "=", "new_c_state", "\n", "#selected_doc = tf.einsum('ijkl,ij->ikl', k, doc_mask)", "\n", "selected_doc", "=", "tf", ".", "gather_nd", "(", "k", ",", "doc_indices", ")", "\n", "#selected_mask = tf.cast(tf.einsum('ijk,ij->ik', tf.cast(c_mask, 'float32'), doc_mask), 'bool')", "\n", "selected_mask", "=", "tf", ".", "cast", "(", "tf", ".", "gather_nd", "(", "tf", ".", "cast", "(", "c_mask", ",", "'float32'", ")", ",", "doc_indices", ")", ",", "'bool'", ")", "\n", "p0", "=", "biattention_layer", "(", "self", ".", "is_train", ",", "selected_doc", ",", "query", ",", "h_mask", "=", "selected_mask", ",", "u_mask", "=", "q_mask", ")", "\n", "p0", "=", "tf", ".", "squeeze", "(", "p0", ",", "axis", "=", "1", ")", "\n", "\n", "logits", "=", "linear_logits", "(", "[", "selected_doc", ",", "p0", "]", ",", "True", ",", "is_train", "=", "self", ".", "is_train", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ",", "mask", "=", "selected_mask", ")", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "new_a_state", "=", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "selected_doc", ",", "weights", ")", "\n", "", "elif", "self", ".", "reasoning_unit", "==", "'concat_first_sent'", "or", "self", ".", "reasoning_unit", "==", "'concat_full_doc'", ":", "\n", "          ", "doc2", "=", "tf", ".", "gather_nd", "(", "k", ",", "doc_indices", ")", "\n", "doc2_mask", "=", "tf", ".", "cast", "(", "tf", ".", "gather_nd", "(", "tf", ".", "cast", "(", "c_mask", ",", "'float32'", ")", ",", "doc_indices", ")", ",", "'bool'", ")", "\n", "if", "self", ".", "reasoning_unit", "==", "'concat_first_sent'", ":", "\n", "            ", "doc2_first_sent_len", "=", "tf", ".", "gather_nd", "(", "self", ".", "sents_len", "[", ":", ",", ":", ",", "0", "]", ",", "doc_indices", ")", "\n", "", "else", ":", "\n", "            ", "doc2_first_sent_len", "=", "tf", ".", "gather_nd", "(", "self", ".", "docs_len", ",", "doc_indices", ")", "\n", "", "if", "layer", "==", "0", ":", "\n", "            ", "print", "(", "doc2", ".", "get_shape", "(", ")", ")", "\n", "print", "(", "tf", ".", "reshape", "(", "tf", ".", "slice", "(", "doc2", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "tf", ".", "reduce_max", "(", "doc2_first_sent_len", ")", ",", "-", "1", "]", ")", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "context_dim", "]", ")", ".", "get_shape", "(", ")", ")", "\n", "\n", "self", ".", "concat_selected_doc", "=", "tf", ".", "unstack", "(", "tf", ".", "reshape", "(", "tf", ".", "slice", "(", "doc2", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "tf", ".", "reduce_max", "(", "doc2_first_sent_len", ")", ",", "-", "1", "]", ")", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "context_dim", "]", ")", ",", "axis", "=", "0", ")", "\n", "assert", "len", "(", "self", ".", "concat_selected_doc", ")", "==", "self", ".", "batch_size", ",", "(", "len", "(", "self", ".", "concat_selected_doc", ")", ")", "\n", "self", ".", "concat_selected_doc_len", "=", "doc2_first_sent_len", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "              ", "prev_doc", "=", "tf", ".", "slice", "(", "self", ".", "concat_selected_doc", "[", "i", "]", ",", "[", "0", ",", "0", "]", ",", "[", "self", ".", "concat_selected_doc_len", "[", "i", "]", ",", "-", "1", "]", ")", "\n", "new_doc", "=", "tf", ".", "slice", "(", "doc2", "[", "i", "]", ",", "[", "0", ",", "0", "]", ",", "[", "doc2_first_sent_len", "[", "i", "]", ",", "-", "1", "]", ")", "\n", "padding_len", "=", "tf", ".", "reduce_max", "(", "self", ".", "concat_selected_doc_len", "+", "doc2_first_sent_len", ")", "-", "self", ".", "concat_selected_doc_len", "[", "i", "]", "-", "doc2_first_sent_len", "[", "i", "]", "\n", "padding", "=", "tf", ".", "zeros", "(", "[", "padding_len", ",", "context_dim", "]", ")", "\n", "self", ".", "concat_selected_doc", "[", "i", "]", "=", "tf", ".", "concat", "(", "[", "prev_doc", ",", "new_doc", ",", "padding", "]", ",", "axis", "=", "0", ")", "\n", "", "self", ".", "concat_selected_doc_len", "+=", "doc2_first_sent_len", "\n", "", "new_a_state", "=", "None", "\n", "", "elif", "self", ".", "reasoning_unit", "==", "'attention-lstm'", ":", "\n", "          ", "if", "layer", ">", "0", ":", "\n", "            ", "if", "self", ".", "read_strategy", "==", "'one_doc_per_it_and_repeat_2nd_step'", ":", "\n", "              ", "doc1_indices", "=", "self", ".", "doc_indices_history", "[", "0", "]", "\n", "", "else", ":", "\n", "              ", "doc1_indices", "=", "self", ".", "doc_indices_history", "[", "layer", "-", "1", "]", "\n", "", "doc1", "=", "tf", ".", "gather_nd", "(", "k", ",", "doc1_indices", ")", "\n", "doc1_mask", "=", "tf", ".", "cast", "(", "tf", ".", "gather_nd", "(", "tf", ".", "cast", "(", "c_mask", ",", "'float32'", ")", ",", "doc1_indices", ")", ",", "'bool'", ")", "\n", "", "else", ":", "\n", "            ", "doc1", "=", "cw", "\n", "doc1_mask", "=", "q_mask", "\n", "", "if", "self", ".", "read_strategy", "==", "'one_doc_per_it'", "and", "(", "layer", "<", "self", ".", "num_hops", "-", "1", "and", "layer", ">", "0", ")", ":", "\n", "            ", "new_a_state", "=", "None", "\n", "", "else", ":", "\n", "            ", "doc1_len", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "doc1_mask", ",", "'int32'", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "doc2", "=", "tf", ".", "gather_nd", "(", "k", ",", "doc_indices", ")", "\n", "doc2_mask", "=", "tf", ".", "cast", "(", "tf", ".", "gather_nd", "(", "tf", ".", "cast", "(", "c_mask", ",", "'float32'", ")", ",", "doc_indices", ")", ",", "'bool'", ")", "\n", "doc2_len", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "doc2_mask", ",", "'int32'", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "lstm_cell", "=", "BasicLSTMCell", "(", "hidden_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "\n", "attention_mechanism", "=", "tf", ".", "contrib", ".", "seq2seq", ".", "BahdanauAttention", "(", "\n", "num_units", "=", "hidden_dim", ",", "\n", "memory", "=", "doc1", ",", "\n", "memory_sequence_length", "=", "doc1_len", ")", "\n", "attention_cell", "=", "tf", ".", "contrib", ".", "seq2seq", ".", "AttentionWrapper", "(", "lstm_cell", ",", "attention_mechanism", ",", "output_attention", "=", "False", ")", "\n", "\n", "if", "self", ".", "attention_cell_dropout", ":", "\n", "              ", "attention_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "attention_cell", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ")", "\n", "\n", "", "decoder_initial_state", "=", "attention_cell", ".", "zero_state", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "\n", "lstm_output", ",", "_", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", "=", "attention_cell", ",", "\n", "inputs", "=", "doc2", ",", "\n", "sequence_length", "=", "doc2_len", ",", "\n", "initial_state", "=", "decoder_initial_state", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "W_x", "=", "tf", ".", "get_variable", "(", "'W_x'", ",", "[", "hidden_dim", ",", "context_dim", "]", ")", "\n", "b_x", "=", "tf", ".", "get_variable", "(", "'b_x'", ",", "[", "context_dim", "]", ")", "\n", "#x = tf.reshape(tf.einsum('ijk,kl->ijl', lstm_output, W_x) + b_x, [config.batch_size, self.tree_width, -1, d])", "\n", "x", "=", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "lstm_output", ",", "W_x", ")", "+", "b_x", "\n", "\n", "similarity_with_q_sub", "=", "tf", ".", "einsum", "(", "'ijk,ik->ijk'", ",", "x", ",", "q_sub_st", ")", "\n", "similarity_with_q_bod", "=", "tf", ".", "einsum", "(", "'ijk,ik->ijk'", ",", "x", ",", "cw_st", ")", "\n", "\n", "doc2_mask", "=", "tf", ".", "reshape", "(", "doc2_mask", ",", "[", "self", ".", "batch_size", ",", "-", "1", "]", ")", "\n", "logits_q_sub", "=", "linear_logits", "(", "[", "similarity_with_q_sub", "]", ",", "True", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ",", "mask", "=", "doc2_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "scope", "=", "'logits1'", ")", "\n", "logits_q_bod", "=", "linear_logits", "(", "[", "similarity_with_q_bod", "]", ",", "True", ",", "input_keep_prob", "=", "self", ".", "input_keep_prob", ",", "mask", "=", "doc2_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "scope", "=", "'logits2'", ")", "\n", "similarity_w_qsub_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "logits_q_sub", ")", "\n", "similarity_w_qbod_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "logits_q_bod", ")", "\n", "similarity_probs", "=", "(", "similarity_w_qsub_probs", "+", "similarity_w_qbod_probs", ")", "/", "2", "\n", "doc_rep", "=", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "doc2", ",", "similarity_probs", ")", "\n", "new_a_state", "=", "doc_rep", "\n", "\n", "qsub_topk_probs", ",", "qsub_topk_ids", "=", "tf", ".", "nn", ".", "top_k", "(", "similarity_w_qsub_probs", ",", "10", ")", "\n", "qbod_topk_probs", ",", "qbod_topk_ids", "=", "tf", ".", "nn", ".", "top_k", "(", "similarity_w_qbod_probs", ",", "10", ")", "\n", "if", "layer", ">", "0", ":", "\n", "              ", "self", ".", "qsub_topk_ids", ".", "append", "(", "qsub_topk_ids", ")", "\n", "self", ".", "qsub_topk_probs", ".", "append", "(", "qsub_topk_probs", ")", "\n", "self", ".", "qbod_topk_ids", ".", "append", "(", "qbod_topk_ids", ")", "\n", "self", ".", "qbod_topk_probs", ".", "append", "(", "qbod_topk_probs", ")", "\n", "self", ".", "qsub_all_probs", ".", "append", "(", "similarity_w_qsub_probs", ")", "\n", "", "else", ":", "\n", "              ", "self", ".", "qsub_topk_ids", "=", "[", "qsub_topk_ids", "]", "\n", "self", ".", "qsub_topk_probs", "=", "[", "qsub_topk_probs", "]", "\n", "self", ".", "qbod_topk_ids", "=", "[", "qbod_topk_ids", "]", "\n", "self", ".", "qbod_topk_probs", "=", "[", "qbod_topk_probs", "]", "\n", "self", ".", "qsub_all_probs", "=", "[", "similarity_w_qsub_probs", "]", "\n", "", "", "", "elif", "self", ".", "reasoning_unit", "==", "'None'", "or", "self", ".", "reasoning_unit", "is", "None", ":", "\n", "          ", "new_a_state", "=", "output", "\n", "", "else", ":", "\n", "          ", "raise", "NotImplementedError", "\n", "", "return", "new_m_state", ",", "new_a_state", "\n", "\n", "", "", "if", "out_of_graph", "is", "False", "and", "layer", ">", "0", ":", "\n", "      ", "c_history", "=", "tf", ".", "stack", "(", "c_history", ",", "axis", "=", "1", ")", "\n", "m_history", "=", "tf", ".", "stack", "(", "m_history", ",", "axis", "=", "1", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope_str", ",", "reuse", "=", "reuse", ")", "as", "scope", ":", "\n", "      ", "if", "self", ".", "use_control_unit", ":", "\n", "        ", "new_c_state", "=", "control_unit", "(", ")", "\n", "", "else", ":", "\n", "        ", "new_c_state", "=", "cw_st", "\n", "\n", "# Read unit", "\n", "", "r", ",", "ra_doc", ",", "rv_doc", ",", "ra_word", "=", "read_unit", "(", "m_state", ")", "\n", "# Write unit", "\n", "new_m_state", ",", "new_a_state", "=", "write_unit", "(", "r", ",", "new_c_state", ",", "c_history", ",", "m_history", ",", "cw", ")", "\n", "\n", "", "return", "new_c_state", ",", "new_m_state", ",", "new_a_state", ",", "ra_doc", ",", "rv_doc", ",", "ra_word", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.dynamic_mac_rnn": [[10, 18], ["cell.apply", "isinstance", "cell.apply"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.apply", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.apply"], ["def", "dynamic_mac_rnn", "(", "cell", ",", "context", ",", "query", ",", "q_len", ",", "c_mask", ",", "q_mask", ",", "q_sub_st", "=", "None", ",", "context_st", "=", "None", ",", "query_st", "=", "None", ",", "cdoc_mask", "=", "None", ",", "candidates", "=", "None", ",", "cand_mask", "=", "None", ",", "greedy_read", "=", "False", ")", ":", "\n", "  ", "if", "cdoc_mask", "is", "None", ":", "\n", "    ", "assert", "context_st", "is", "None", "\n", "return", "cell", ".", "apply", "(", "context", ",", "query", ",", "q_len", ",", "c_mask", ",", "q_mask", ",", "q_sub_st", "=", "q_sub_st", ",", "candidates", "=", "candidates", ",", "cand_mask", "=", "cand_mask", ")", "\n", "", "else", ":", "\n", "    ", "assert", "context_st", "is", "not", "None", "and", "q_sub_st", "is", "not", "None", "\n", "assert", "isinstance", "(", "cell", ",", "HierarchicalAttnMACRnn", ")", "\n", "return", "cell", ".", "apply", "(", "context", ",", "context_st", ",", "query", ",", "query_st", ",", "q_sub_st", ",", "q_len", ",", "c_mask", ",", "cdoc_mask", ",", "q_mask", ",", "candidates", "=", "candidates", ",", "cand_mask", "=", "cand_mask", ",", "greedy_read", "=", "greedy_read", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.gru_layer.GRURnn.__init__": [[15, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "context_dim", ",", "query_dim", ",", "hidden_dim", "=", "80", ",", "length", "=", "6", ",", "bidirectional_input_unit", "=", "False", ",", "reuse_cell", "=", "True", ",", "is_train", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    length: the number of mac cell chained together, or number of reasoning steps.\n    bidriectional_input_unit: use bi-lstm for input unit. Default to false to save memory.\n    prediction: prediction layer. Could be 'span-single/dual', 'candidates'\n    reuse_cell: use one single cell for all reasoning steps. (not sure what Hudson and Mannning did.)\n    \"\"\"", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "context_dim", "=", "context_dim", "\n", "self", ".", "query_dim", "=", "query_dim", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "bidirectional_input_unit", "=", "bidirectional_input_unit", "\n", "#self.prediction = prediction", "\n", "self", ".", "reuse_cell", "=", "reuse_cell", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.gru_layer.GRURnn.apply": [[33, 60], ["tensorflow.squeeze", "tensorflow.zeros", "tensorflow.squeeze", "tensorflow.variable_scope", "gru_layer.GRURnn.query_emb_unit", "tensorflow.contrib.rnn.GRUCell", "range", "gru_layer.GRURnn.GRUOutputUnit", "tensorflow.expand_dims", "gru_layer.GRURnn.GRUInputUnit", "tensorflow.contrib.rnn.GRUCell."], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.gru_layer.GRURnn.query_emb_unit", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.gru_layer.GRURnn.GRUOutputUnit", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.gru_layer.GRURnn.GRUInputUnit"], ["", "def", "apply", "(", "self", ",", "context", ",", "query", ",", "c_len", ",", "q_len", ",", "c_mask", ",", "q_mask", ",", "candidates", "=", "None", ",", "cand_mask", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "self", ".", "batch_size", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", "\n", "reuse_cell", "=", "self", ".", "reuse_cell", "\n", "context", "=", "tf", ".", "squeeze", "(", "context", ",", "axis", "=", "1", ")", "\n", "if", "candidates", "is", "not", "None", ":", "\n", "      ", "candidates", "=", "tf", ".", "squeeze", "(", "candidates", ",", "axis", "=", "1", ")", "\n", "", "s_state", "=", "tf", ".", "zeros", "(", "(", "batch_size", ",", "hidden_dim", ")", ")", "\n", "#m_state = tf.zeros((batch_size, hidden_dim))", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'GRURnn'", ")", ":", "\n", "      ", "query", ",", "q_rep", "=", "self", ".", "query_emb_unit", "(", "query", ",", "q_len", ")", "\n", "gru_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "hidden_dim", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "length", ")", ":", "\n", "        ", "if", "reuse_cell", ":", "\n", "          ", "scope_str", "=", "'GRURnn-layer-%d'", "%", "0", "\n", "gru_input", "=", "self", ".", "GRUInputUnit", "(", "i", ",", "query", ",", "context", ",", "c_mask", ",", "q_mask", ",", "s_state", ",", "scope_str", ",", "reuse", "=", "(", "i", "!=", "0", ")", ")", "\n", "output", ",", "_", "=", "gru_cell", "(", "gru_input", ",", "s_state", ")", "\n", "s_state", "=", "output", "\n", "", "else", ":", "\n", "          ", "raise", "NotImplementedError", "\n", "# scope_str = 'GRURnn-layer-%d' % i", "\n", "# s_state = self.GRUCell(i, query, context, s_state, c_mask, q_mask, scope_str, reuse=False)", "\n", "\n", "", "", "g1", "=", "self", ".", "GRUOutputUnit", "(", "s_state", ",", "candidates", ")", "\n", "return", "tf", ".", "expand_dims", "(", "g1", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.gru_layer.GRURnn.query_emb_unit": [[61, 89], ["tensorflow.variable_scope", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.nn.dynamic_rnn", "tensorflow.einsum", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.dynamic_rnn"], ["", "", "def", "query_emb_unit", "(", "self", ",", "query", ",", "query_len", ")", ":", "\n", "    ", "\"\"\"\n    Inputs: encodede query and length.\n    Outputs: query encoded by another lstm, and the final state of this lstm as \n             a fixed-size representation of this query.\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'input_unit'", ",", "initializer", "=", "tf", ".", "random_uniform_initializer", ")", ":", "\n", "      ", "hidden_dim", "=", "self", ".", "hidden_dim", "\n", "\n", "if", "self", ".", "bidirectional_input_unit", "is", "True", ":", "\n", "        ", "cell_fw", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "hidden_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "cell_bw", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "hidden_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "(", "encoder_outputs", ",", "(", "fw_st", ",", "bw_st", ")", ")", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "query", ",", "dtype", "=", "tf", ".", "float32", ",", "sequence_length", "=", "query_len", ",", "swap_memory", "=", "True", ")", "\n", "query_embed", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "encoder_outputs", ")", "\n", "query_rep", "=", "tf", ".", "concat", "(", "[", "fw_st", ".", "c", ",", "bw_st", ".", "c", "]", ",", "axis", "=", "1", ")", "\n", "W_emb", "=", "tf", ".", "get_variable", "(", "'W_emb'", ",", "[", "2", "*", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_emb", "=", "tf", ".", "get_variable", "(", "'b_emb'", ",", "[", "hidden_dim", "]", ")", "\n", "W_rep", "=", "tf", ".", "get_variable", "(", "'W_rep'", ",", "[", "2", "*", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_rep", "=", "tf", ".", "get_variable", "(", "'b_rep'", ",", "[", "hidden_dim", "]", ")", "\n", "query_embed", "=", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "query_embed", ",", "W_emb", ")", "+", "b_emb", "\n", "query_rep", "=", "tf", ".", "matmul", "(", "query_rep", ",", "W_rep", ")", "+", "b_rep", "\n", "", "else", ":", "\n", "        ", "cell_fw", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "hidden_dim", ",", "state_is_tuple", "=", "True", ")", "\n", "query_embed", ",", "final_st", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell_fw", ",", "query", ",", "dtype", "=", "tf", ".", "float32", ",", "sequence_length", "=", "query_len", ")", "\n", "query_rep", "=", "final_st", ".", "c", "\n", "", "return", "query_embed", ",", "query_rep", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.gru_layer.GRURnn.GRUOutputUnit": [[90, 103], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.einsum", "tensorflow.matmul", "tensorflow.einsum"], "methods", ["None"], ["", "", "def", "GRUOutputUnit", "(", "self", ",", "s_state", ",", "candidates", ")", ":", "\n", "    ", "hidden_dim", "=", "self", ".", "hidden_dim", "\n", "context_dim", "=", "self", ".", "context_dim", "\n", "with", "tf", ".", "variable_scope", "(", "'output_unit'", ")", ":", "\n", "      ", "W_m", "=", "tf", ".", "get_variable", "(", "'W_m'", ",", "[", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "b_m", "=", "tf", ".", "get_variable", "(", "'b_m'", ",", "[", "hidden_dim", "]", ")", "\n", "M", "=", "tf", ".", "matmul", "(", "s_state", ",", "W_m", ")", "+", "b_m", "\n", "\n", "W_k", "=", "tf", ".", "get_variable", "(", "'W_k'", ",", "[", "context_dim", ",", "hidden_dim", "]", ")", "\n", "b_k", "=", "tf", ".", "get_variable", "(", "'b_k'", ",", "[", "hidden_dim", "]", ")", "\n", "I", "=", "tf", ".", "einsum", "(", "'ijk,kl->ijl'", ",", "candidates", ",", "W_k", ")", "+", "b_k", "\n", "g1", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "M", ",", "I", ")", "\n", "return", "g1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.gru_layer.GRURnn.GRUInputUnit": [[104, 152], ["tensorflow.variable_scope", "gru_layer.GRURnn.GRUInputUnit.q_attn_read"], "methods", ["None"], ["", "", "def", "GRUInputUnit", "(", "self", ",", "layer", ":", "int", ",", "cw", ",", "k", ",", "c_mask", ",", "q_mask", ",", "s_state", ",", "scope_str", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "hidden_dim", "=", "self", ".", "hidden_dim", "\n", "context_dim", "=", "self", ".", "context_dim", "\n", "\n", "def", "q_attn_read", "(", "s", ",", "q", ",", "q_mask", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'q_attn_read'", ")", ":", "\n", "        ", "A_q", "=", "tf", ".", "get_variable", "(", "'A_q'", ",", "[", "hidden_dim", ",", "hidden_dim", "]", ")", "\n", "a_q", "=", "tf", ".", "get_variable", "(", "'a_q'", ",", "[", "hidden_dim", "]", ")", "\n", "_s", "=", "tf", ".", "matmul", "(", "s", ",", "A_q", ")", "+", "a_q", "\n", "q_it", "=", "tf", ".", "einsum", "(", "'ijk,ik->ij'", ",", "q", ",", "_s", ")", "\n", "q_it", "=", "tf", ".", "nn", ".", "softmax", "(", "q_it", ")", "\n", "q_t", "=", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "q", ",", "q_it", ")", "\n", "return", "q_t", "\n", "\n", "", "", "def", "c_attn_read", "(", "s", ",", "c", ",", "c_mask", ",", "q_t", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'c_attn_read'", ")", ":", "\n", "        ", "A_c", "=", "tf", ".", "get_variable", "(", "'A_c'", ",", "[", "hidden_dim", "*", "2", ",", "context_dim", "]", ")", "\n", "a_c", "=", "tf", ".", "get_variable", "(", "'a_c'", ",", "[", "context_dim", "]", ")", "\n", "_s", "=", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "[", "s", ",", "q_t", "]", ",", "axis", "=", "-", "1", ")", ",", "A_c", ")", "+", "a_c", "\n", "c_it", "=", "tf", ".", "einsum", "(", "'ijk,ik->ij'", ",", "c", ",", "_s", ")", "\n", "c_it", "=", "tf", ".", "nn", ".", "softmax", "(", "c_it", ")", "\n", "c_t", "=", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "c", ",", "c_it", ")", "\n", "\n", "# Cast the context embedding to the size of hidden_dim.", "\n", "W_c", "=", "tf", ".", "get_variable", "(", "'W_c'", ",", "[", "context_dim", ",", "hidden_dim", "]", ")", "\n", "b_c", "=", "tf", ".", "get_variable", "(", "'b_c'", ",", "[", "hidden_dim", "]", ")", "\n", "c_t", "=", "tf", ".", "matmul", "(", "c_t", ",", "W_c", ")", "+", "b_c", "\n", "return", "c_t", "\n", "\n", "", "", "def", "gate", "(", "x", ",", "y", ",", "s", ",", "reuse", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'gate'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "W1", "=", "tf", ".", "get_variable", "(", "'W1'", ",", "[", "hidden_dim", "*", "4", ",", "hidden_dim", "*", "2", "]", ")", "\n", "b1", "=", "tf", ".", "get_variable", "(", "'b1'", ",", "[", "hidden_dim", "*", "2", "]", ")", "\n", "gate_in", "=", "tf", ".", "concat", "(", "[", "s", ",", "x", ",", "y", ",", "x", "*", "y", "]", ",", "axis", "=", "-", "1", ")", "\n", "_x", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "gate_in", ",", "W1", ")", "+", "b1", ")", "\n", "W2", "=", "tf", ".", "get_variable", "(", "'W2'", ",", "[", "hidden_dim", "*", "2", ",", "hidden_dim", "]", ")", "\n", "b2", "=", "tf", ".", "get_variable", "(", "'b2'", ",", "[", "hidden_dim", "]", ")", "\n", "out", "=", "tf", ".", "matmul", "(", "_x", ",", "W2", ")", "+", "b2", "\n", "return", "out", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'GRU_input'", ",", "reuse", "=", "reuse", ")", ":", "\n", "      ", "q_t", "=", "q_attn_read", "(", "s_state", ",", "cw", ",", "q_mask", ")", "\n", "c_t", "=", "c_attn_read", "(", "s_state", ",", "k", ",", "c_mask", ",", "q_t", ")", "\n", "r_q", "=", "gate", "(", "q_t", ",", "c_t", ",", "s_state", ",", "reuse", "=", "reuse", ")", "\n", "r_c", "=", "gate", "(", "c_t", ",", "q_t", ",", "s_state", ",", "reuse", "=", "True", ")", "\n", "gru_input", "=", "tf", ".", "concat", "(", "[", "r_q", "*", "q_t", ",", "r_c", "*", "c_t", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "gru_input", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.gru_layer.dynamic_gru_rnn": [[5, 8], ["cell.apply"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.apply"], ["def", "dynamic_gru_rnn", "(", "cell", ",", "context", ",", "query", ",", "c_len", ",", "q_len", ",", "c_mask", ",", "q_mask", ",", "candidates", "=", "None", ",", "cand_mask", "=", "None", ")", ":", "\n", "  ", "out", "=", "cell", ".", "apply", "(", "context", ",", "query", ",", "c_len", ",", "q_len", ",", "c_mask", ",", "q_mask", ",", "candidates", "=", "candidates", ",", "cand_mask", "=", "cand_mask", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.Assembler.__init__": [[14, 19], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "is_train", ",", "model", ",", "context_dim", "=", "40", ")", ":", "\n", "    ", "self", ".", "config", "=", "config", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "context_dim", "=", "context_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.Assembler.build_forward": [[20, 22], ["None"], "methods", ["None"], ["", "def", "build_forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.Assembler.get_var_list": [[23, 27], ["len", "tensorflow.trainable_variables"], "methods", ["None"], ["", "def", "get_var_list", "(", "self", ")", ":", "\n", "    ", "var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "if", "'assembler'", "in", "var", ".", "name", "]", "\n", "assert", "len", "(", "var_list", ")", ">", "0", "\n", "return", "var_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.BiAttnAssembler.__init__": [[30, 32], ["assembler.Assembler.__init__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "is_train", ",", "model", ",", "context_dim", "=", "40", ")", ":", "\n", "    ", "super", "(", "BiAttnAssembler", ",", "self", ")", ".", "__init__", "(", "config", ",", "is_train", ",", "model", ",", "context_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.BiAttnAssembler.build_forward": [[33, 227], ["tensorflow.squeeze", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.squeeze", "my.tensorflow.nn.linear_logits", "tensorflow.nn.softmax", "tensorflow.einsum", "tensorflow.expand_dims", "my.tensorflow.nn.linear_logits", "tensorflow.shape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.expand_dims", "range", "tensorflow.reduce_max", "range", "tensorflow.stack", "tensorflow.cast", "tensorflow.gather_nd", "tensorflow.cast", "reasoning_layers.utils.biattention_layer", "range", "tensorflow.reduce_max", "range", "tensorflow.stack", "tensorflow.cast", "reasoning_layers.utils.biattention_layer", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.BasicLSTMCell", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.concat", "assembler.BiAttnAssembler.output_unit", "tensorflow.shape", "tensorflow.zeros_like", "tensorflow.gather_nd", "tensorflow.cast", "tensorflow.concat", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.concat", "assembler.BiAttnAssembler.concat_selected_doc_mask.append", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.cast", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.concat", "assembler.BiAttnAssembler.concat_selected_doc_mask.append", "tensorflow.stack", "tensorflow.variable_scope", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.BasicLSTMCell", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.BasicLSTMCell", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.gather_nd", "range", "range", "tensorflow.cast", "tensorflow.gather_nd", "tensorflow.concat", "range", "range", "tensorflow.nn.relu", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.slice", "assembler.BiAttnAssembler.concat_selected_doc.append", "tensorflow.slice", "tensorflow.slice", "tensorflow.zeros", "tensorflow.concat", "assembler.BiAttnAssembler.doc_lens.append", "assembler.BiAttnAssembler.prev_doc_lens.append", "assembler.BiAttnAssembler.new_doc_lens.append", "assembler.BiAttnAssembler.padding_lens.append", "tensorflow.squeeze", "tensorflow.cast", "tensorflow.slice", "assembler.BiAttnAssembler.concat_selected_doc.append", "tensorflow.slice", "tensorflow.slice", "tensorflow.zeros", "tensorflow.concat", "assembler.BiAttnAssembler.doc_lens.append", "assembler.BiAttnAssembler.prev_doc_lens.append", "assembler.BiAttnAssembler.new_doc_lens.append", "assembler.BiAttnAssembler.padding_lens.append", "tensorflow.ones", "tensorflow.zeros", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "print", "tensorflow.concat", "print", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.ones", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.reduce_max", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.stack", "tensorflow.reduce_max", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.concat", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.utils.biattention_layer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.utils.biattention_layer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.BiAttnAssembler.output_unit", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn"], ["", "def", "build_forward", "(", "self", ",", "k", ",", "c_mask", ",", "query", ",", "query_st", ",", "q_mask", ",", "cand_emb", ",", "cand_mask", ",", "drop_one_doc", "=", "False", ",", "dropped_hops", "=", "None", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "self", ".", "selected_sent_ids", "=", "self", ".", "model", ".", "selected_sent_ids", "\n", "cand_emb", "=", "tf", ".", "squeeze", "(", "cand_emb", ",", "axis", "=", "1", ")", "\n", "config", "=", "self", ".", "config", "\n", "model", "=", "self", ".", "model", "\n", "context_dim", "=", "self", ".", "context_dim", "\n", "x_acc_sents_len", "=", "model", ".", "x_sents_len_reconstruct", "\n", "self", ".", "x_acc_sents_len", "=", "x_acc_sents_len", "\n", "zero_prepend_x_acc_sents_len", "=", "tf", ".", "concat", "(", "[", "tf", ".", "expand_dims", "(", "tf", ".", "zeros_like", "(", "x_acc_sents_len", "[", ":", ",", ":", ",", "0", "]", ")", ",", "axis", "=", "2", ")", ",", "x_acc_sents_len", "]", ",", "axis", "=", "2", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'assembler'", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "      ", "if", "config", ".", "assembler_biattn_w_first_doc", ":", "\n", "        ", "assert", "config", ".", "assembler_merge_query_st", ",", "(", "\"If biattn with first doc, then has to merge query information in another way.\"", ")", "\n", "\n", "for", "hop", "in", "range", "(", "config", ".", "num_hops", "-", "1", ")", ":", "\n", "          ", "doc_indices", "=", "model", ".", "mac_rnn_cell", ".", "doc_indices_history", "[", "hop", "+", "1", "]", "\n", "doc2", "=", "tf", ".", "gather_nd", "(", "k", ",", "doc_indices", ")", "\n", "doc2_mask", "=", "tf", ".", "cast", "(", "tf", ".", "gather_nd", "(", "tf", ".", "cast", "(", "c_mask", ",", "'float32'", ")", ",", "doc_indices", ")", ",", "'bool'", ")", "\n", "#doc2_first_sent_len = tf.gather_nd(x_sents_len[:, :, 0], doc_indices)", "\n", "selected_sent_indices", "=", "tf", ".", "concat", "(", "[", "doc_indices", ",", "tf", ".", "expand_dims", "(", "self", ".", "selected_sent_ids", "[", ":", ",", "hop", "+", "1", "]", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "selected_sent_indices", "=", "selected_sent_indices", "\n", "doc2_selected_sent_end", "=", "tf", ".", "gather_nd", "(", "x_acc_sents_len", ",", "selected_sent_indices", ")", "\n", "doc2_selected_sent_start", "=", "tf", ".", "gather_nd", "(", "zero_prepend_x_acc_sents_len", ",", "selected_sent_indices", ")", "\n", "self", ".", "doc2_selected_sent_start", "=", "doc2_selected_sent_start", "\n", "self", ".", "doc2_selected_sent_end", "=", "doc2_selected_sent_end", "\n", "self", ".", "doc_lens", "=", "[", "]", "\n", "self", ".", "prev_doc_lens", "=", "[", "]", "\n", "self", ".", "new_doc_lens", "=", "[", "]", "\n", "self", ".", "padding_lens", "=", "[", "]", "\n", "if", "hop", "==", "0", ":", "\n", "            ", "self", ".", "concat_selected_doc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "              ", "new_doc", "=", "tf", ".", "slice", "(", "doc2", "[", "i", "]", ",", "[", "doc2_selected_sent_start", "[", "i", "]", ",", "0", "]", ",", "[", "doc2_selected_sent_end", "[", "i", "]", "-", "doc2_selected_sent_start", "[", "i", "]", ",", "-", "1", "]", ")", "\n", "self", ".", "concat_selected_doc", ".", "append", "(", "new_doc", ")", "\n", "", "self", ".", "concat_selected_doc_len", "=", "doc2_selected_sent_end", "-", "doc2_selected_sent_start", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "              ", "prev_doc", "=", "tf", ".", "slice", "(", "self", ".", "concat_selected_doc", "[", "i", "]", ",", "[", "0", ",", "0", "]", ",", "[", "self", ".", "concat_selected_doc_len", "[", "i", "]", ",", "-", "1", "]", ")", "\n", "new_doc", "=", "tf", ".", "slice", "(", "doc2", "[", "i", "]", ",", "[", "doc2_selected_sent_start", "[", "i", "]", ",", "0", "]", ",", "[", "doc2_selected_sent_end", "[", "i", "]", "-", "doc2_selected_sent_start", "[", "i", "]", ",", "-", "1", "]", ")", "\n", "padding_len", "=", "tf", ".", "reduce_max", "(", "self", ".", "concat_selected_doc_len", "+", "doc2_selected_sent_end", "-", "doc2_selected_sent_start", ")", "-", "self", ".", "concat_selected_doc_len", "[", "i", "]", "-", "(", "doc2_selected_sent_end", "[", "i", "]", "-", "doc2_selected_sent_start", "[", "i", "]", ")", "\n", "padding", "=", "tf", ".", "zeros", "(", "[", "padding_len", ",", "context_dim", "]", ")", "\n", "self", ".", "concat_selected_doc", "[", "i", "]", "=", "tf", ".", "concat", "(", "[", "prev_doc", ",", "new_doc", ",", "padding", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "doc_lens", ".", "append", "(", "tf", ".", "shape", "(", "tf", ".", "concat", "(", "[", "prev_doc", ",", "new_doc", ",", "padding", "]", ",", "axis", "=", "0", ")", ")", "[", "0", "]", ")", "\n", "self", ".", "prev_doc_lens", ".", "append", "(", "tf", ".", "shape", "(", "prev_doc", ")", "[", "0", "]", ")", "\n", "self", ".", "new_doc_lens", ".", "append", "(", "tf", ".", "shape", "(", "new_doc", ")", "[", "0", "]", ")", "\n", "self", ".", "padding_lens", ".", "append", "(", "padding_len", ")", "\n", "", "self", ".", "concat_selected_doc_len", "+=", "(", "doc2_selected_sent_end", "-", "doc2_selected_sent_start", ")", "\n", "\n", "", "", "max_len", "=", "tf", ".", "reduce_max", "(", "self", ".", "concat_selected_doc_len", ")", "\n", "self", ".", "concat_selected_doc_mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "          ", "concat_selected_doc_mask_i", "=", "tf", ".", "concat", "(", "values", "=", "[", "tf", ".", "ones", "(", "[", "self", ".", "concat_selected_doc_len", "[", "i", "]", "]", ")", ",", "tf", ".", "zeros", "(", "[", "max_len", "-", "self", ".", "concat_selected_doc_len", "[", "i", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "concat_selected_doc_mask", ".", "append", "(", "concat_selected_doc_mask_i", ")", "\n", "\n", "", "self", ".", "concat_selected_doc", "=", "tf", ".", "stack", "(", "self", ".", "concat_selected_doc", ",", "axis", "=", "0", ")", "\n", "self", ".", "concat_selected_doc_mask", "=", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "self", ".", "concat_selected_doc_mask", ",", "axis", "=", "0", ")", ",", "'bool'", ")", "\n", "\n", "first_doc_indices", "=", "model", ".", "mac_rnn_cell", ".", "doc_indices_history", "[", "0", "]", "\n", "doc1", "=", "tf", ".", "gather_nd", "(", "k", ",", "first_doc_indices", ")", "\n", "doc1_mask", "=", "tf", ".", "cast", "(", "tf", ".", "gather_nd", "(", "tf", ".", "cast", "(", "c_mask", ",", "'float32'", ")", ",", "first_doc_indices", ")", ",", "'bool'", ")", "\n", "p0", "=", "biattention_layer", "(", "self", ".", "is_train", ",", "self", ".", "concat_selected_doc", ",", "doc1", ",", "h_mask", "=", "self", ".", "concat_selected_doc_mask", ",", "u_mask", "=", "doc1_mask", ")", "\n", "", "else", ":", "\n", "        ", "if", "drop_one_doc", ":", "\n", "          ", "num_docs_to_concat", "=", "config", ".", "num_hops", "-", "1", "\n", "", "else", ":", "\n", "          ", "num_docs_to_concat", "=", "(", "config", ".", "num_hops", "+", "2", "if", "config", ".", "mac_read_strategy", "==", "'one_doc_per_it_and_repeat_for_3_hops'", "else", "(", "config", ".", "num_hops", "-", "1", ")", "*", "2", ")", "if", "config", ".", "assembler_repeat_first_doc", "else", "config", ".", "num_hops", "\n", "", "for", "hop", "in", "range", "(", "num_docs_to_concat", ")", ":", "\n", "          ", "if", "config", ".", "assembler_repeat_first_doc", ":", "\n", "            ", "if", "drop_one_doc", ":", "\n", "              ", "raise", "NotImplementedError", "\n", "", "if", "config", ".", "mac_read_strategy", "==", "'one_doc_per_it_and_repeat_for_3_hops'", ":", "\n", "              ", "doc_indices", "=", "model", ".", "mac_rnn_cell", ".", "doc_indices_history", "[", "0", "]", "if", "(", "hop", "%", "4", "==", "1", "or", "hop", "==", "0", ")", "else", "model", ".", "mac_rnn_cell", ".", "doc_indices_history", "[", "hop", "-", "int", "(", "hop", "/", "5", ")", "]", "\n", "", "else", ":", "\n", "              ", "doc_indices", "=", "model", ".", "mac_rnn_cell", ".", "doc_indices_history", "[", "0", "]", "if", "hop", "%", "2", "==", "0", "else", "model", ".", "mac_rnn_cell", ".", "doc_indices_history", "[", "int", "(", "hop", "/", "2", ")", "+", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "drop_one_doc", ":", "\n", "              ", "doc_indices", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "tf", ".", "stack", "(", "model", ".", "mac_rnn_cell", ".", "doc_indices_history", ")", ",", "[", "dropped_hops", "[", "hop", "]", ",", "0", ",", "0", "]", ",", "[", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "              ", "doc_indices", "=", "model", ".", "mac_rnn_cell", ".", "doc_indices_history", "[", "hop", "]", "\n", "", "", "doc2", "=", "tf", ".", "gather_nd", "(", "k", ",", "doc_indices", ")", "\n", "doc2_mask", "=", "tf", ".", "cast", "(", "tf", ".", "gather_nd", "(", "tf", ".", "cast", "(", "c_mask", ",", "'float32'", ")", ",", "doc_indices", ")", ",", "'bool'", ")", "\n", "#doc2_first_sent_len = tf.gather_nd(x_sents_len[:, :, 0], doc_indices)", "\n", "if", "config", ".", "assembler_repeat_first_doc", ":", "\n", "            ", "if", "config", ".", "mac_read_strategy", "==", "'one_doc_per_it_and_repeat_for_3_hops'", ":", "\n", "              ", "if", "hop", "%", "4", "==", "1", "or", "hop", "==", "0", ":", "\n", "                ", "selected_sent_indices", "=", "tf", ".", "concat", "(", "[", "doc_indices", ",", "tf", ".", "expand_dims", "(", "self", ".", "selected_sent_ids", "[", ":", ",", "0", "]", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "selected_sent_indices", "=", "tf", ".", "concat", "(", "[", "doc_indices", ",", "tf", ".", "expand_dims", "(", "self", ".", "selected_sent_ids", "[", ":", ",", "hop", "-", "int", "(", "hop", "/", "5", ")", "]", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "              ", "if", "hop", "%", "2", "==", "0", ":", "\n", "                ", "print", "(", "\"concat first doc\"", ")", "\n", "selected_sent_indices", "=", "tf", ".", "concat", "(", "[", "doc_indices", ",", "tf", ".", "expand_dims", "(", "self", ".", "selected_sent_ids", "[", ":", ",", "0", "]", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"concat second doc\"", ")", "\n", "selected_sent_indices", "=", "tf", ".", "concat", "(", "[", "doc_indices", ",", "tf", ".", "expand_dims", "(", "self", ".", "selected_sent_ids", "[", ":", ",", "int", "(", "hop", "/", "2", ")", "+", "1", "]", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "selected_sent_indices", "=", "tf", ".", "concat", "(", "[", "doc_indices", ",", "tf", ".", "expand_dims", "(", "self", ".", "selected_sent_ids", "[", ":", ",", "hop", "]", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "self", ".", "selected_sent_indices", "=", "selected_sent_indices", "\n", "doc2_selected_sent_end", "=", "tf", ".", "gather_nd", "(", "x_acc_sents_len", ",", "selected_sent_indices", ")", "\n", "doc2_selected_sent_start", "=", "tf", ".", "gather_nd", "(", "zero_prepend_x_acc_sents_len", ",", "selected_sent_indices", ")", "\n", "self", ".", "doc2_selected_sent_start", "=", "doc2_selected_sent_start", "\n", "self", ".", "doc2_selected_sent_end", "=", "doc2_selected_sent_end", "\n", "\n", "if", "hop", "==", "0", ":", "\n", "            ", "self", ".", "doc_lens", "=", "[", "]", "\n", "self", ".", "prev_doc_lens", "=", "[", "]", "\n", "self", ".", "new_doc_lens", "=", "[", "]", "\n", "self", ".", "padding_lens", "=", "[", "]", "\n", "self", ".", "concat_selected_doc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "              ", "new_doc", "=", "tf", ".", "slice", "(", "doc2", "[", "i", "]", ",", "[", "doc2_selected_sent_start", "[", "i", "]", ",", "0", "]", ",", "[", "doc2_selected_sent_end", "[", "i", "]", "-", "doc2_selected_sent_start", "[", "i", "]", ",", "-", "1", "]", ")", "\n", "self", ".", "concat_selected_doc", ".", "append", "(", "new_doc", ")", "\n", "", "self", ".", "concat_selected_doc_len", "=", "doc2_selected_sent_end", "-", "doc2_selected_sent_start", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "              ", "prev_doc", "=", "tf", ".", "slice", "(", "self", ".", "concat_selected_doc", "[", "i", "]", ",", "[", "0", ",", "0", "]", ",", "[", "self", ".", "concat_selected_doc_len", "[", "i", "]", ",", "-", "1", "]", ")", "\n", "new_doc", "=", "tf", ".", "slice", "(", "doc2", "[", "i", "]", ",", "[", "doc2_selected_sent_start", "[", "i", "]", ",", "0", "]", ",", "[", "doc2_selected_sent_end", "[", "i", "]", "-", "doc2_selected_sent_start", "[", "i", "]", ",", "-", "1", "]", ")", "\n", "padding_len", "=", "tf", ".", "reduce_max", "(", "self", ".", "concat_selected_doc_len", "+", "doc2_selected_sent_end", "-", "doc2_selected_sent_start", ")", "-", "self", ".", "concat_selected_doc_len", "[", "i", "]", "-", "(", "doc2_selected_sent_end", "[", "i", "]", "-", "doc2_selected_sent_start", "[", "i", "]", ")", "\n", "padding", "=", "tf", ".", "zeros", "(", "[", "padding_len", ",", "context_dim", "]", ")", "\n", "self", ".", "concat_selected_doc", "[", "i", "]", "=", "tf", ".", "concat", "(", "[", "prev_doc", ",", "new_doc", ",", "padding", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "doc_lens", ".", "append", "(", "tf", ".", "shape", "(", "tf", ".", "concat", "(", "[", "prev_doc", ",", "new_doc", ",", "padding", "]", ",", "axis", "=", "0", ")", ")", "[", "0", "]", ")", "\n", "self", ".", "prev_doc_lens", ".", "append", "(", "tf", ".", "shape", "(", "prev_doc", ")", "[", "0", "]", ")", "\n", "self", ".", "new_doc_lens", ".", "append", "(", "tf", ".", "shape", "(", "new_doc", ")", "[", "0", "]", ")", "\n", "self", ".", "padding_lens", ".", "append", "(", "padding_len", ")", "\n", "", "self", ".", "concat_selected_doc_len", "+=", "(", "doc2_selected_sent_end", "-", "doc2_selected_sent_start", ")", "\n", "\n", "", "", "max_len", "=", "tf", ".", "reduce_max", "(", "self", ".", "concat_selected_doc_len", ")", "\n", "self", ".", "concat_selected_doc_mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "          ", "concat_selected_doc_mask_i", "=", "tf", ".", "concat", "(", "values", "=", "[", "tf", ".", "ones", "(", "[", "self", ".", "concat_selected_doc_len", "[", "i", "]", "]", ")", ",", "tf", ".", "zeros", "(", "[", "max_len", "-", "self", ".", "concat_selected_doc_len", "[", "i", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "concat_selected_doc_mask", ".", "append", "(", "concat_selected_doc_mask_i", ")", "\n", "\n", "", "self", ".", "concat_selected_doc", "=", "tf", ".", "stack", "(", "self", ".", "concat_selected_doc", ",", "axis", "=", "0", ")", "\n", "self", ".", "concat_selected_doc_mask", "=", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "self", ".", "concat_selected_doc_mask", ",", "axis", "=", "0", ")", ",", "'bool'", ")", "\n", "p0", "=", "biattention_layer", "(", "self", ".", "is_train", ",", "self", ".", "concat_selected_doc", ",", "query", ",", "h_mask", "=", "self", ".", "concat_selected_doc_mask", ",", "u_mask", "=", "q_mask", ")", "\n", "\n", "", "p0", "=", "tf", ".", "squeeze", "(", "p0", ",", "axis", "=", "1", ")", "\n", "\n", "if", "config", ".", "assembler_bidaf_layer", ">", "1", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"layer_1\"", ")", ":", "\n", "          ", "cell_fw", "=", "BasicLSTMCell", "(", "40", ",", "state_is_tuple", "=", "True", ")", "\n", "cell_bw", "=", "BasicLSTMCell", "(", "40", ",", "state_is_tuple", "=", "True", ")", "\n", "cell_fw", "=", "SwitchableDropoutWrapper", "(", "cell_fw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "cell_bw", "=", "SwitchableDropoutWrapper", "(", "cell_bw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "\n", "(", "fw_h", ",", "bw_h", ")", ",", "_", "=", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "p0", ",", "self", ".", "concat_selected_doc_len", ",", "dtype", "=", "'float'", ")", "\n", "x", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "fw_h", ",", "bw_h", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"layer_2\"", ")", ":", "\n", "          ", "cell2_fw", "=", "BasicLSTMCell", "(", "40", ",", "state_is_tuple", "=", "True", ")", "\n", "cell2_bw", "=", "BasicLSTMCell", "(", "40", ",", "state_is_tuple", "=", "True", ")", "\n", "cell2_fw", "=", "SwitchableDropoutWrapper", "(", "cell2_fw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "cell2_bw", "=", "SwitchableDropoutWrapper", "(", "cell2_bw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "\n", "(", "fw_h", ",", "bw_h", ")", ",", "_", "=", "bidirectional_dynamic_rnn", "(", "cell2_fw", ",", "cell2_bw", ",", "x", ",", "self", ".", "concat_selected_doc_len", ",", "dtype", "=", "'float'", ")", "\n", "x", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "fw_h", ",", "bw_h", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "cell_fw", "=", "BasicLSTMCell", "(", "40", ",", "state_is_tuple", "=", "True", ")", "\n", "cell_bw", "=", "BasicLSTMCell", "(", "40", ",", "state_is_tuple", "=", "True", ")", "\n", "cell_fw", "=", "SwitchableDropoutWrapper", "(", "cell_fw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "cell_bw", "=", "SwitchableDropoutWrapper", "(", "cell_bw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "\n", "(", "fw_h", ",", "bw_h", ")", ",", "_", "=", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "p0", ",", "self", ".", "concat_selected_doc_len", ",", "dtype", "=", "'float'", ")", "\n", "x", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "fw_h", ",", "bw_h", "]", ")", "\n", "\n", "", "logits", "=", "linear_logits", "(", "[", "x", "]", ",", "True", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "mask", "=", "self", ".", "concat_selected_doc_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "scope", "=", "'a_state_logits'", ")", "\n", "probs", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "new_ans", "=", "tf", ".", "einsum", "(", "'ijk,ij->ik'", ",", "self", ".", "concat_selected_doc", ",", "probs", ")", "\n", "if", "config", ".", "assembler_merge_query_st", ":", "\n", "        ", "W_c", "=", "tf", ".", "get_variable", "(", "'W_c'", ",", "[", "40", ",", "40", "]", ")", "\n", "b_c", "=", "tf", ".", "get_variable", "(", "'b_c'", ",", "[", "40", "]", ")", "\n", "c_proj", "=", "tf", ".", "matmul", "(", "query_st", ",", "W_c", ")", "+", "b_c", "\n", "\n", "W1", "=", "tf", ".", "get_variable", "(", "'W1'", ",", "[", "3", "*", "40", ",", "2", "*", "40", "]", ")", "\n", "b1", "=", "tf", ".", "get_variable", "(", "'b1'", ",", "[", "2", "*", "40", "]", ")", "\n", "W2", "=", "tf", ".", "get_variable", "(", "'W2'", ",", "[", "2", "*", "40", ",", "40", "]", ")", "\n", "b2", "=", "tf", ".", "get_variable", "(", "'b2'", ",", "[", "40", "]", ")", "\n", "concat_in", "=", "tf", ".", "concat", "(", "axis", "=", "-", "1", ",", "values", "=", "[", "new_ans", ",", "c_proj", ",", "new_ans", "*", "c_proj", "]", ")", "\n", "a_state", "=", "tf", ".", "matmul", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "concat_in", ",", "W1", ")", "+", "b1", ")", ",", "W2", ")", "+", "b2", "\n", "", "else", ":", "\n", "        ", "a_state", "=", "new_ans", "\n", "", "g1", "=", "tf", ".", "expand_dims", "(", "self", ".", "output_unit", "(", "cand_emb", ",", "a_state", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "g1", "=", "g1", "\n", "self", ".", "cand_mask", "=", "cand_mask", "\n", "self", ".", "cand_emb", "=", "cand_emb", "\n", "logits", "=", "linear_logits", "(", "[", "g1", "]", ",", "True", ",", "is_train", "=", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "mask", "=", "cand_mask", ",", "scope", "=", "'g1_logits'", ")", "\n", "\n", "JX", "=", "tf", ".", "shape", "(", "g1", ")", "[", "2", "]", "\n", "self", ".", "g1_shape", "=", "tf", ".", "shape", "(", "g1", ")", "\n", "flat_logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "config", ".", "batch_size", ",", "JX", "]", ")", "\n", "flat_yp", "=", "tf", ".", "nn", ".", "softmax", "(", "flat_logits", ")", "# [-1, M*JX]", "\n", "yp", "=", "tf", ".", "reshape", "(", "flat_yp", ",", "[", "config", ".", "batch_size", ",", "1", ",", "JX", "]", ")", "\n", "self", ".", "logits", "=", "flat_logits", "\n", "self", ".", "yp", "=", "yp", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.BiAttnAssembler.output_unit": [[229, 245], ["tensorflow.variable_scope", "tensorflow.einsum", "tensorflow.tile", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.reshape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul"], "methods", ["None"], ["", "", "def", "output_unit", "(", "self", ",", "candidates", ",", "a_state", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'output_unit'", ",", "reuse", "=", "reuse", ")", ":", "\n", "      ", "context_dim", "=", "self", ".", "context_dim", "\n", "cand_dim", "=", "context_dim", "\n", "#cand_dim = candidates.get_shape()[-1]", "\n", "num_cand", "=", "tf", ".", "shape", "(", "candidates", ")", "[", "1", "]", "\n", "similarity", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "a_state", ",", "candidates", ")", "\n", "M", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "a_state", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "num_cand", ",", "1", "]", ")", "\n", "W1", "=", "tf", ".", "get_variable", "(", "'W1'", ",", "[", "3", "*", "cand_dim", ",", "2", "*", "cand_dim", "]", ")", "\n", "b1", "=", "tf", ".", "get_variable", "(", "'b1'", ",", "[", "2", "*", "cand_dim", "]", ")", "\n", "W2", "=", "tf", ".", "get_variable", "(", "'W2'", ",", "[", "2", "*", "cand_dim", ",", "cand_dim", "]", ")", "\n", "b2", "=", "tf", ".", "get_variable", "(", "'b2'", ",", "[", "cand_dim", "]", ")", "\n", "concat_in", "=", "tf", ".", "concat", "(", "axis", "=", "-", "1", ",", "values", "=", "[", "tf", ".", "reshape", "(", "M", ",", "[", "-", "1", ",", "cand_dim", "]", ")", ",", "tf", ".", "reshape", "(", "candidates", ",", "[", "-", "1", ",", "cand_dim", "]", ")", ",", "tf", ".", "reshape", "(", "similarity", ",", "[", "-", "1", ",", "cand_dim", "]", ")", "]", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "concat_in", ",", "W1", ")", "+", "b1", ")", ",", "W2", ")", "+", "b2", "\n", "g1", "=", "tf", ".", "reshape", "(", "output", ",", "[", "self", ".", "config", ".", "batch_size", ",", "-", "1", ",", "context_dim", "]", ")", "\n", "return", "g1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.BiAttnAssembler.get_sentence_ids": [[247, 313], ["sess.partial_run", "range", "numpy.array", "numpy.zeros", "numpy.zeros", "range", "numpy.array.append", "answer_cand_ids.append", "range", "len", "answer_cand_id.append", "numpy.argmax", "my_answer_phrase.lower", "numpy.amax", "enumerate", "assembler.compute_answer_span", "list", "len", "qangaroo.utils.get_word_span", "qangaroo.utils.get_word_span", "range", "numpy.argmax", "len", "answer_spans.append", "answer_spans.append"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.compute_answer_span", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_word_span", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_word_span", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax"], ["", "", "def", "get_sentence_ids", "(", "self", ",", "sess", ",", "cand_word", ",", "x", ",", "feed_dict", ",", "handle", ",", "model_id", "=", "0", ")", ":", "\n", "    ", "config", "=", "self", ".", "config", "\n", "ensemble_yps", "=", "[", "]", "\n", "qsub_topk_ids", ",", "qsub_topk_probs", ",", "qsub_all_probs", ",", "yp", ",", "yp_list", ",", "doc_lst", ",", "sents_len", "=", "sess", ".", "partial_run", "(", "handle", ",", "[", "self", ".", "model", ".", "mac_rnn_cell", ".", "qsub_topk_ids", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "qsub_topk_probs", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "qsub_all_probs", ",", "self", ".", "model", ".", "yp", ",", "self", ".", "model", ".", "yp_list", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "doc_attn", ",", "self", ".", "model", ".", "x_sents_len_reconstruct", "]", ",", "feed_dict", "=", "feed_dict", "if", "model_id", "==", "0", "else", "None", ")", "\n", "for", "i", "in", "range", "(", "config", ".", "num_hops", ")", ":", "\n", "#yp = sess.run(self.yp_list[i+1], feed_dict=feed_dict)", "\n", "      ", "ensemble_yps", ".", "append", "(", "yp_list", "[", "i", "]", ")", "\n", "", "ensemble_yps", "=", "np", ".", "array", "(", "ensemble_yps", ")", "\n", "answer_qsub_probs", "=", "np", ".", "zeros", "(", "[", "config", ".", "batch_size", ",", "config", ".", "num_hops", "]", ")", "\n", "sentence_ids", "=", "np", ".", "zeros", "(", "[", "config", ".", "batch_size", ",", "config", ".", "num_hops", "]", ")", "\n", "answer_cand_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "      ", "answer_cand_id", "=", "[", "]", "\n", "answer_cand_ids", ".", "append", "(", "answer_cand_id", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "ensemble_yps", ")", ")", ":", "\n", "        ", "if", "j", "==", "0", ":", "\n", "          ", "continue", "\n", "", "my_answer_id", "=", "np", ".", "argmax", "(", "ensemble_yps", "[", "j", ",", "i", "]", ",", "axis", "=", "-", "1", ")", "[", "0", "]", "\n", "answer_cand_id", ".", "append", "(", "my_answer_id", ")", "\n", "my_answer_phrase", "=", "cand_word", "[", "i", "]", "[", "my_answer_id", "]", "\n", "doc_selected", "=", "x", "[", "i", "]", "[", "doc_lst", "[", "j", "]", "[", "i", "]", "[", "0", "]", "]", "\n", "\n", "if", "my_answer_phrase", ".", "lower", "(", ")", "not", "in", "' '", ".", "join", "(", "doc_selected", ")", ".", "lower", "(", ")", ":", "\n", "          ", "continue", "\n", "", "else", ":", "\n", "          ", "answer_spans", "=", "[", "]", "\n", "answer_word_ids", "=", "[", "]", "\n", "next_answer_start", "=", "0", "\n", "next_answer_stop", "=", "0", "\n", "context", "=", "' '", ".", "join", "(", "x", "[", "i", "]", "[", "doc_lst", "[", "j", "]", "[", "i", "]", "[", "0", "]", "]", ")", "\n", "xi", "=", "x", "[", "i", "]", "[", "doc_lst", "[", "j", "]", "[", "i", "]", "[", "0", "]", "]", "\n", "next_context", "=", "context", "[", "next_answer_stop", ":", "]", "\n", "while", "True", ":", "\n", "            ", "next_answer_start", ",", "next_answer_stop", "=", "compute_answer_span", "(", "next_context", ",", "my_answer_phrase", ")", "\n", "next_context", "=", "next_context", "[", "next_answer_stop", ":", "]", "\n", "if", "next_answer_start", "is", "not", "None", ":", "\n", "              ", "if", "len", "(", "answer_spans", ")", ">", "0", ":", "\n", "                ", "answer_spans", ".", "append", "(", "(", "next_answer_start", "+", "answer_spans", "[", "-", "1", "]", "[", "1", "]", ",", "next_answer_stop", "+", "answer_spans", "[", "-", "1", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "answer_spans", ".", "append", "(", "(", "next_answer_start", ",", "next_answer_stop", ")", ")", "\n", "", "", "else", ":", "\n", "              ", "break", "\n", "\n", "", "if", "len", "(", "answer_spans", ")", ">", "1", ":", "\n", "              ", "next_yi0", ",", "next_yi1", "=", "get_word_span", "(", "context", ",", "xi", ",", "next_answer_start", "+", "answer_spans", "[", "-", "2", "]", "[", "1", "]", ",", "next_answer_stop", "+", "answer_spans", "[", "-", "2", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "              ", "next_yi0", ",", "next_yi1", "=", "get_word_span", "(", "context", ",", "xi", ",", "next_answer_start", ",", "next_answer_stop", ")", "\n", "", "answer_word_ids", "+=", "list", "(", "range", "(", "next_yi0", "[", "0", "]", ",", "next_yi1", "[", "0", "]", "+", "1", ")", ")", "\n", "\n", "", "answer_word_qsub_probs", "=", "[", "qsub_all_probs", "[", "j", "]", "[", "i", "]", "[", "answer_word_id", "]", "for", "answer_word_id", "in", "answer_word_ids", "]", "\n", "answer_qsub_probs", "[", "i", ",", "j", "]", "=", "np", ".", "amax", "(", "answer_word_qsub_probs", ")", "\n", "top_answer_word_id", "=", "answer_word_ids", "[", "np", ".", "argmax", "(", "answer_word_qsub_probs", ")", "]", "\n", "sentence_id", "=", "0", "\n", "for", "kid", ",", "k", "in", "enumerate", "(", "sents_len", "[", "i", ",", "doc_lst", "[", "j", "]", "[", "i", "]", "[", "0", "]", "]", ")", ":", "\n", "            ", "if", "k", ">", "top_answer_word_id", ":", "\n", "              ", "if", "kid", "==", "0", ":", "\n", "                ", "sentence_id", "=", "kid", "\n", "break", "\n", "", "elif", "sents_len", "[", "i", ",", "doc_lst", "[", "j", "]", "[", "i", "]", "[", "0", "]", "]", "[", "kid", "-", "1", "]", "<=", "top_answer_word_id", ":", "\n", "                ", "sentence_id", "=", "kid", "\n", "break", "\n", "", "", "", "sentence_ids", "[", "i", ",", "j", "]", "=", "sentence_id", "\n", "\n", "\n", "", "", "", "return", "sentence_ids", ",", "handle", ",", "answer_cand_ids", ",", "doc_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.compute_answer_span": [[315, 330], ["answer.replace().lower.replace().lower", "context.lower.lower", "re.search.start", "re.search", "len", "answer.replace().lower.replace", "print", "print"], "function", ["None"], ["", "", "def", "compute_answer_span", "(", "context", ",", "answer", ")", ":", "\n", "\n", "  ", "answer", "=", "answer", ".", "replace", "(", "' \u2013 '", ",", "' '", ")", ".", "lower", "(", ")", "\n", "context", "=", "context", ".", "lower", "(", ")", "\n", "try", ":", "\n", "    ", "a", "=", "re", ".", "search", "(", "r'({})'", ".", "format", "(", "answer", ")", ",", "context", ")", "\n", "", "except", ":", "\n", "    ", "print", "(", "answer", ")", "\n", "print", "(", "context", ")", "\n", "return", "None", ",", "None", "\n", "", "if", "a", "is", "None", ":", "\n", "    ", "return", "None", ",", "None", "\n", "", "start", "=", "a", ".", "start", "(", ")", "\n", "end", "=", "start", "+", "len", "(", "answer", ")", "\n", "return", "start", ",", "end", "\n", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.utils.biattention_layer": [[7, 23], ["tensorflow.variable_scope", "tensorflow.expand_dims", "tensorflow.expand_dims", "utils.bi_attention", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.bi_attention"], ["cur_idx", "=", "0", "\n", "for", "tokens", "in", "tokenss", ":", "\n", "    ", "spans", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "      ", "if", "text", ".", "find", "(", "token", ",", "cur_idx", ")", "<", "0", ":", "\n", "        ", "print", "(", "tokens", ")", "\n", "print", "(", "\"{} {} {}\"", ".", "format", "(", "token", ",", "cur_idx", ",", "text", ")", ")", "\n", "raise", "Exception", "(", ")", "\n", "", "cur_idx", "=", "text", ".", "find", "(", "token", ",", "cur_idx", ")", "\n", "spans", ".", "append", "(", "(", "cur_idx", ",", "cur_idx", "+", "len", "(", "token", ")", ")", ")", "\n", "cur_idx", "+=", "len", "(", "token", ")", "\n", "", "spanss", ".", "append", "(", "spans", ")", "\n", "", "return", "spanss", "\n", "\n", "\n", "", "def", "get_word_span", "(", "context", ",", "wordss", ",", "start", ",", "stop", ")", ":", "\n", "  ", "spanss", "=", "get_2d_spans", "(", "context", ",", "wordss", ")", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.utils.bi_attention": [[25, 55], ["tensorflow.variable_scope", "tensorflow.tile", "tensorflow.tile", "my.tensorflow.nn.get_logits", "my.tensorflow.nn.softsel", "my.tensorflow.nn.softsel", "tensorflow.tile", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "tensorflow.reduce_max", "tensorflow.expand_dims", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.get_collection", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_max", "tensorflow.expand_dims", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softsel", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softsel", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax"], ["for", "sent_idx", ",", "spans", "in", "enumerate", "(", "spanss", ")", ":", "\n", "    ", "for", "word_idx", ",", "span", "in", "enumerate", "(", "spans", ")", ":", "\n", "      ", "if", "not", "(", "stop", "<=", "span", "[", "0", "]", "or", "start", ">=", "span", "[", "1", "]", ")", ":", "\n", "        ", "idxs", ".", "append", "(", "(", "sent_idx", ",", "word_idx", ")", ")", "\n", "\n", "", "", "", "assert", "len", "(", "idxs", ")", ">", "0", ",", "\"{} {} {} {}\"", ".", "format", "(", "context", ",", "spanss", ",", "start", ",", "stop", ")", "\n", "return", "idxs", "[", "0", "]", ",", "(", "idxs", "[", "-", "1", "]", "[", "0", "]", ",", "idxs", "[", "-", "1", "]", "[", "1", "]", "+", "1", ")", "\n", "\n", "\n", "", "def", "get_phrase", "(", "context", ",", "wordss", ",", "span", ")", ":", "\n", "  ", "\"\"\"\n  Obtain phrase as substring of context given start and stop indices in word level\n  :param context:\n  :param wordss:\n  :param start: [sent_idx, word_idx]\n  :param stop: [sent_idx, word_idx]\n  :return:\n  \"\"\"", "\n", "start", ",", "stop", "=", "span", "\n", "flat_start", "=", "get_flat_idx", "(", "wordss", ",", "start", ")", "\n", "flat_stop", "=", "get_flat_idx", "(", "wordss", ",", "stop", ")", "\n", "words", "=", "sum", "(", "wordss", ",", "[", "]", ")", "\n", "char_idx", "=", "0", "\n", "char_start", ",", "char_stop", "=", "None", ",", "None", "\n", "for", "word_idx", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "    ", "char_idx", "=", "context", ".", "find", "(", "word", ",", "char_idx", ")", "\n", "assert", "char_idx", ">=", "0", "\n", "if", "word_idx", "==", "flat_start", ":", "\n", "      ", "char_start", "=", "char_idx", "\n", "", "char_idx", "+=", "len", "(", "word", ")", "\n", "if", "word_idx", "==", "flat_stop", "-", "1", ":", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.Data.get_size": [[15, 17], ["NotImplementedError"], "methods", ["None"], ["  ", "def", "get_size", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.Data.get_by_idxs": [[18, 30], ["collections.defaultdict", "read_data.Data.get_one", "read_data.Data.items", "data[].append"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.Data.get_one"], ["", "def", "get_by_idxs", "(", "self", ",", "idxs", ")", ":", "\n", "    ", "\"\"\"\n    Efficient way to obtain a batch of items from filesystem\n    :param idxs:\n    :return dict: {'X': [,], 'Y', }\n    \"\"\"", "\n", "data", "=", "defaultdict", "(", "list", ")", "\n", "for", "idx", "in", "idxs", ":", "\n", "      ", "each_data", "=", "self", ".", "get_one", "(", "idx", ")", "\n", "for", "key", ",", "val", "in", "each_data", ".", "items", "(", ")", ":", "\n", "        ", "data", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.Data.get_one": [[31, 33], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_one", "(", "self", ",", "idx", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.Data.get_empty": [[34, 36], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_empty", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.Data.__add__": [[37, 39], ["NotImplementedError"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.__init__": [[42, 49], ["read_data.DataSet.get_data_size", "len", "range"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_data_size"], ["  ", "def", "__init__", "(", "self", ",", "data", ",", "data_type", ",", "shared", "=", "None", ",", "valid_idxs", "=", "None", ")", ":", "\n", "    ", "self", ".", "data", "=", "data", "# e.g. {'X': [0, 1, 2], 'Y': [2, 3, 4]}", "\n", "self", ".", "data_type", "=", "data_type", "\n", "self", ".", "shared", "=", "shared", "\n", "total_num_examples", "=", "self", ".", "get_data_size", "(", ")", "\n", "self", ".", "valid_idxs", "=", "range", "(", "total_num_examples", ")", "if", "valid_idxs", "is", "None", "else", "valid_idxs", "\n", "self", ".", "num_examples", "=", "len", "(", "self", ".", "valid_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet._sort_key": [[50, 55], ["max", "map"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map"], ["", "def", "_sort_key", "(", "self", ",", "idx", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "rx", "=", "self", ".", "data", "[", "'*x'", "]", "[", "idx", "]", "\n", "x", "=", "self", ".", "shared", "[", "'x'", "]", "[", "rx", "[", "0", "]", "]", "[", "rx", "[", "1", "]", "]", "\n", "return", "max", "(", "map", "(", "len", ",", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_data_size": [[56, 62], ["isinstance", "Exception", "len", "isinstance", "next", "read_data.DataSet.data.get_size", "iter", "read_data.DataSet.data.values"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.Data.get_size"], ["", "def", "get_data_size", "(", "self", ")", ":", "\n", "    ", "if", "isinstance", "(", "self", ".", "data", ",", "dict", ")", ":", "\n", "      ", "return", "len", "(", "next", "(", "iter", "(", "self", ".", "data", ".", "values", "(", ")", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "data", ",", "Data", ")", ":", "\n", "      ", "return", "self", ".", "data", ".", "get_size", "(", ")", "\n", "", "raise", "Exception", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_by_idxs": [[63, 72], ["isinstance", "Exception", "collections.defaultdict", "read_data.DataSet.data.items", "isinstance", "out[].extend", "read_data.DataSet.data.get_by_idxs"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_by_idxs"], ["", "def", "get_by_idxs", "(", "self", ",", "idxs", ")", ":", "\n", "    ", "if", "isinstance", "(", "self", ".", "data", ",", "dict", ")", ":", "\n", "      ", "out", "=", "defaultdict", "(", "list", ")", "\n", "for", "key", ",", "val", "in", "self", ".", "data", ".", "items", "(", ")", ":", "\n", "        ", "out", "[", "key", "]", ".", "extend", "(", "val", "[", "idx", "]", "for", "idx", "in", "idxs", ")", "\n", "", "return", "out", "\n", "", "elif", "isinstance", "(", "self", ".", "data", ",", "Data", ")", ":", "\n", "      ", "return", "self", ".", "data", ".", "get_by_idxs", "(", "idxs", ")", "\n", "", "raise", "Exception", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_batches": [[73, 113], ["int", "int", "itertools.chain.from_iterable", "range", "math.ceil", "math.ceil", "random.sample", "tuple", "read_data.DataSet.get_by_idxs", "read_data.DataSet.items", "read_data.DataSet.update", "read_data.DataSet", "len", "sorted", "list", "grouped", "key.startswith", "list", "random.sample", "list", "my.tensorflow.grouper", "range", "my.tensorflow.grouper", "sorted_grouped", "my.tensorflow.grouper", "next", "my.utils.index"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_by_idxs", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.grouper", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.grouper", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.grouper", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.index"], ["", "def", "get_batches", "(", "self", ",", "batch_size", ",", "num_batches", "=", "None", ",", "shuffle", "=", "False", ",", "cluster", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param batch_size:\n    :param num_batches:\n    :param shuffle:\n    :param cluster: cluster examples by their lengths; this might give performance boost (i.e. faster training).\n    :return:\n    \"\"\"", "\n", "num_batches_per_epoch", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "num_examples", "/", "batch_size", ")", ")", "\n", "if", "num_batches", "is", "None", ":", "\n", "      ", "num_batches", "=", "num_batches_per_epoch", "\n", "", "num_epochs", "=", "int", "(", "math", ".", "ceil", "(", "num_batches", "/", "num_batches_per_epoch", ")", ")", "\n", "\n", "if", "shuffle", ":", "\n", "      ", "random_idxs", "=", "random", ".", "sample", "(", "self", ".", "valid_idxs", ",", "len", "(", "self", ".", "valid_idxs", ")", ")", "\n", "if", "cluster", ":", "\n", "        ", "sorted_idxs", "=", "sorted", "(", "random_idxs", ",", "key", "=", "self", ".", "_sort_key", ")", "\n", "sorted_grouped", "=", "lambda", ":", "list", "(", "grouper", "(", "sorted_idxs", ",", "batch_size", ")", ")", "\n", "grouped", "=", "lambda", ":", "random", ".", "sample", "(", "sorted_grouped", "(", ")", ",", "num_batches_per_epoch", ")", "\n", "", "else", ":", "\n", "        ", "random_grouped", "=", "lambda", ":", "list", "(", "grouper", "(", "random_idxs", ",", "batch_size", ")", ")", "\n", "grouped", "=", "random_grouped", "\n", "", "", "else", ":", "\n", "      ", "raw_grouped", "=", "lambda", ":", "list", "(", "grouper", "(", "self", ".", "valid_idxs", ",", "batch_size", ")", ")", "\n", "grouped", "=", "raw_grouped", "\n", "\n", "", "batch_idx_tuples", "=", "itertools", ".", "chain", ".", "from_iterable", "(", "grouped", "(", ")", "for", "_", "in", "range", "(", "num_epochs", ")", ")", "\n", "for", "_", "in", "range", "(", "num_batches", ")", ":", "\n", "      ", "batch_idxs", "=", "tuple", "(", "i", "for", "i", "in", "next", "(", "batch_idx_tuples", ")", "if", "i", "is", "not", "None", ")", "\n", "batch_data", "=", "self", ".", "get_by_idxs", "(", "batch_idxs", ")", "\n", "shared_batch_data", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "batch_data", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'*'", ")", ":", "\n", "          ", "assert", "self", ".", "shared", "is", "not", "None", "\n", "shared_key", "=", "key", "[", "1", ":", "]", "\n", "shared_batch_data", "[", "shared_key", "]", "=", "[", "index", "(", "self", ".", "shared", "[", "shared_key", "]", ",", "each", ")", "for", "each", "in", "val", "]", "\n", "", "", "batch_data", ".", "update", "(", "shared_batch_data", ")", "\n", "\n", "batch_ds", "=", "DataSet", "(", "batch_data", ",", "self", ".", "data_type", ",", "shared", "=", "self", ".", "shared", ")", "\n", "yield", "batch_idxs", ",", "batch_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_multi_batches": [[114, 120], ["read_data.DataSet.get_batches", "tuple", "zip", "my.tensorflow.grouper", "data_set.divide"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_batches", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.grouper", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.divide"], ["", "", "def", "get_multi_batches", "(", "self", ",", "batch_size", ",", "num_batches_per_step", ",", "num_steps", "=", "None", ",", "shuffle", "=", "False", ",", "cluster", "=", "False", ")", ":", "\n", "    ", "batch_size_per_step", "=", "batch_size", "*", "num_batches_per_step", "# num_batches_per_step = num_gpu", "\n", "batches", "=", "self", ".", "get_batches", "(", "batch_size_per_step", ",", "num_batches", "=", "num_steps", ",", "shuffle", "=", "shuffle", ",", "cluster", "=", "cluster", ")", "\n", "multi_batches", "=", "(", "tuple", "(", "zip", "(", "grouper", "(", "idxs", ",", "batch_size", ",", "shorten", "=", "True", ",", "num_groups", "=", "num_batches_per_step", ")", ",", "\n", "data_set", ".", "divide", "(", "num_batches_per_step", ")", ")", ")", "for", "idxs", ",", "data_set", "in", "batches", ")", "\n", "return", "multi_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_empty": [[121, 129], ["isinstance", "read_data.DataSet", "isinstance", "read_data.DataSet.data.get_empty", "Exception"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_empty"], ["", "def", "get_empty", "(", "self", ")", ":", "\n", "    ", "if", "isinstance", "(", "self", ".", "data", ",", "dict", ")", ":", "\n", "      ", "data", "=", "{", "key", ":", "[", "]", "for", "key", "in", "self", ".", "data", "}", "\n", "", "elif", "isinstance", "(", "self", ".", "data", ",", "Data", ")", ":", "\n", "      ", "data", "=", "self", ".", "data", ".", "get_empty", "(", ")", "\n", "", "else", ":", "\n", "      ", "raise", "Exception", "(", ")", "\n", "", "return", "DataSet", "(", "data", ",", "self", ".", "data_type", ",", "shared", "=", "self", ".", "shared", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.__add__": [[130, 140], ["isinstance", "read_data.DataSet", "isinstance", "list", "Exception", "read_data.DataSet.data.items"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "isinstance", "(", "self", ".", "data", ",", "dict", ")", ":", "\n", "      ", "data", "=", "{", "key", ":", "val", "+", "other", ".", "data", "[", "key", "]", "for", "key", ",", "val", "in", "self", ".", "data", ".", "items", "(", ")", "}", "\n", "", "elif", "isinstance", "(", "self", ".", "data", ",", "Data", ")", ":", "\n", "      ", "data", "=", "self", ".", "data", "+", "other", ".", "data", "\n", "", "else", ":", "\n", "      ", "raise", "Exception", "(", ")", "\n", "\n", "", "valid_idxs", "=", "list", "(", "self", ".", "valid_idxs", ")", "+", "[", "valid_idx", "+", "self", ".", "num_examples", "for", "valid_idx", "in", "other", ".", "valid_idxs", "]", "\n", "return", "DataSet", "(", "data", ",", "self", ".", "data_type", ",", "shared", "=", "self", ".", "shared", ",", "valid_idxs", "=", "valid_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.divide": [[141, 147], ["int", "my.tensorflow.grouper", "tuple", "math.ceil", "read_data.DataSet.get_by_idxs", "read_data.DataSet"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.grouper", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_by_idxs"], ["", "def", "divide", "(", "self", ",", "integer", ")", ":", "\n", "    ", "batch_size", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "num_examples", "/", "integer", ")", ")", "\n", "idxs_gen", "=", "grouper", "(", "self", ".", "valid_idxs", ",", "batch_size", ",", "shorten", "=", "True", ",", "num_groups", "=", "integer", ")", "\n", "data_gen", "=", "(", "self", ".", "get_by_idxs", "(", "idxs", ")", "for", "idxs", "in", "idxs_gen", ")", "\n", "ds_tuple", "=", "tuple", "(", "DataSet", "(", "data", ",", "self", ".", "data_type", ",", "shared", "=", "self", ".", "shared", ")", "for", "data", "in", "data_gen", ")", "\n", "return", "ds_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.load_metadata": [[149, 156], ["os.path.join", "open", "json.load", "json.load.items", "config.__setattr__"], "function", ["None"], ["", "", "def", "load_metadata", "(", "config", ",", "data_type", ")", ":", "\n", "  ", "metadata_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "\"metadata_{}.json\"", ".", "format", "(", "data_type", ")", ")", "\n", "with", "open", "(", "metadata_path", ",", "'r'", ")", "as", "fh", ":", "\n", "    ", "metadata", "=", "json", ".", "load", "(", "fh", ")", "\n", "for", "key", ",", "val", "in", "metadata", ".", "items", "(", ")", ":", "\n", "      ", "config", ".", "__setattr__", "(", "key", ",", "val", ")", "\n", "", "return", "metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.read_data": [[158, 224], ["os.path.join", "os.path.join", "len", "print", "read_data.DataSet", "open", "json.load", "open", "json.load", "next", "range", "json.load.keys", "json.load.values", "zip", "os.path.join", "json.dump", "json.load", "json.load.items", "len", "numpy.array", "iter", "mask.append", "len", "open", "open", "json.load.values", "read_data.get_qangaroo_data_filter.data_filter", "range", "enumerate", "enumerate", "new_word2idx_dict.items", "zip", "len", "enumerate", "enumerate", "range", "len", "char_counter.items", "word2vec_dict.keys", "word_counter.items", "word_counter.items"], "function", ["None"], ["", "", "def", "read_data", "(", "config", ",", "data_type", ",", "ref", ",", "data_filter", "=", "None", ")", ":", "\n", "  ", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "\"data_{}.json\"", ".", "format", "(", "data_type", ")", ")", "\n", "shared_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "\"shared_{}.json\"", ".", "format", "(", "data_type", ")", ")", "\n", "with", "open", "(", "data_path", ",", "'r'", ")", "as", "fh", ":", "\n", "    ", "data", "=", "json", ".", "load", "(", "fh", ")", "\n", "", "with", "open", "(", "shared_path", ",", "'r'", ")", "as", "fh", ":", "\n", "    ", "shared", "=", "json", ".", "load", "(", "fh", ")", "\n", "\n", "", "num_examples", "=", "len", "(", "next", "(", "iter", "(", "data", ".", "values", "(", ")", ")", ")", ")", "\n", "if", "data_filter", "is", "None", ":", "\n", "    ", "valid_idxs", "=", "range", "(", "num_examples", ")", "\n", "", "else", ":", "\n", "    ", "mask", "=", "[", "]", "\n", "keys", "=", "data", ".", "keys", "(", ")", "\n", "values", "=", "data", ".", "values", "(", ")", "\n", "for", "vals", "in", "zip", "(", "*", "values", ")", ":", "\n", "      ", "each", "=", "{", "key", ":", "val", "for", "key", ",", "val", "in", "zip", "(", "keys", ",", "vals", ")", "}", "\n", "mask", ".", "append", "(", "data_filter", "(", "each", ",", "shared", ")", ")", "\n", "", "valid_idxs", "=", "[", "idx", "for", "idx", "in", "range", "(", "len", "(", "mask", ")", ")", "if", "mask", "[", "idx", "]", "]", "\n", "\n", "", "print", "(", "\"Loaded {}/{} examples from {}\"", ".", "format", "(", "len", "(", "valid_idxs", ")", ",", "num_examples", ",", "data_type", ")", ")", "\n", "\n", "shared_path", "=", "config", ".", "shared_path", "or", "os", ".", "path", ".", "join", "(", "config", ".", "out_dir", ",", "\"shared.json\"", ")", "\n", "if", "not", "ref", ":", "\n", "    ", "word2vec_dict", "=", "shared", "[", "'lower_word2vec'", "]", "if", "config", ".", "lower_word", "else", "shared", "[", "'word2vec'", "]", "\n", "word_counter", "=", "shared", "[", "'lower_word_counter'", "]", "if", "config", ".", "lower_word", "else", "shared", "[", "'word_counter'", "]", "\n", "char_counter", "=", "shared", "[", "'char_counter'", "]", "\n", "if", "config", ".", "finetune", ":", "\n", "      ", "shared", "[", "'word2idx'", "]", "=", "{", "word", ":", "idx", "+", "2", "for", "idx", ",", "word", "in", "\n", "enumerate", "(", "word", "for", "word", ",", "count", "in", "word_counter", ".", "items", "(", ")", "\n", "if", "count", ">", "config", ".", "word_count_th", "or", "(", "config", ".", "known_if_glove", "and", "word", "in", "word2vec_dict", ")", ")", "}", "\n", "", "else", ":", "\n", "      ", "assert", "config", ".", "known_if_glove", "\n", "assert", "config", ".", "use_glove_for_unk", "\n", "shared", "[", "'word2idx'", "]", "=", "{", "word", ":", "idx", "+", "2", "for", "idx", ",", "word", "in", "\n", "enumerate", "(", "word", "for", "word", ",", "count", "in", "word_counter", ".", "items", "(", ")", "\n", "if", "count", ">", "config", ".", "word_count_th", "and", "word", "not", "in", "word2vec_dict", ")", "}", "\n", "", "shared", "[", "'char2idx'", "]", "=", "{", "char", ":", "idx", "+", "2", "for", "idx", ",", "char", "in", "\n", "enumerate", "(", "char", "for", "char", ",", "count", "in", "char_counter", ".", "items", "(", ")", "\n", "if", "count", ">", "config", ".", "char_count_th", ")", "}", "\n", "NULL", "=", "\"-NULL-\"", "\n", "UNK", "=", "\"-UNK-\"", "\n", "shared", "[", "'word2idx'", "]", "[", "NULL", "]", "=", "0", "\n", "shared", "[", "'word2idx'", "]", "[", "UNK", "]", "=", "1", "\n", "shared", "[", "'char2idx'", "]", "[", "NULL", "]", "=", "0", "\n", "shared", "[", "'char2idx'", "]", "[", "UNK", "]", "=", "1", "\n", "json", ".", "dump", "(", "{", "'word2idx'", ":", "shared", "[", "'word2idx'", "]", ",", "'char2idx'", ":", "shared", "[", "'char2idx'", "]", "}", ",", "open", "(", "shared_path", ",", "'w'", ")", ")", "\n", "", "else", ":", "\n", "    ", "new_shared", "=", "json", ".", "load", "(", "open", "(", "shared_path", ",", "'r'", ")", ")", "\n", "for", "key", ",", "val", "in", "new_shared", ".", "items", "(", ")", ":", "\n", "      ", "shared", "[", "key", "]", "=", "val", "\n", "\n", "", "", "if", "config", ".", "use_glove_for_unk", ":", "\n", "# create new word2idx and word2vec", "\n", "    ", "word2vec_dict", "=", "shared", "[", "'lower_word2vec'", "]", "if", "config", ".", "lower_word", "else", "shared", "[", "'word2vec'", "]", "\n", "new_word2idx_dict", "=", "{", "word", ":", "idx", "for", "idx", ",", "word", "in", "enumerate", "(", "word", "for", "word", "in", "word2vec_dict", ".", "keys", "(", ")", "if", "word", "not", "in", "shared", "[", "'word2idx'", "]", ")", "}", "\n", "shared", "[", "'new_word2idx'", "]", "=", "new_word2idx_dict", "\n", "offset", "=", "len", "(", "shared", "[", "'word2idx'", "]", ")", "\n", "word2vec_dict", "=", "shared", "[", "'lower_word2vec'", "]", "if", "config", ".", "lower_word", "else", "shared", "[", "'word2vec'", "]", "\n", "new_word2idx_dict", "=", "shared", "[", "'new_word2idx'", "]", "\n", "idx2vec_dict", "=", "{", "idx", ":", "word2vec_dict", "[", "word", "]", "for", "word", ",", "idx", "in", "new_word2idx_dict", ".", "items", "(", ")", "}", "\n", "new_emb_mat", "=", "np", ".", "array", "(", "[", "idx2vec_dict", "[", "idx", "]", "for", "idx", "in", "range", "(", "len", "(", "idx2vec_dict", ")", ")", "]", ",", "dtype", "=", "'float32'", ")", "\n", "shared", "[", "'new_emb_mat'", "]", "=", "new_emb_mat", "\n", "\n", "", "data_set", "=", "DataSet", "(", "data", ",", "data_type", ",", "shared", "=", "shared", ",", "valid_idxs", "=", "valid_idxs", ")", "\n", "return", "data_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.get_qangaroo_data_filter": [[226, 279], ["len", "any", "len", "len", "any", "Exception", "Exception", "len", "Exception", "len", "len", "len"], "function", ["None"], ["", "def", "get_qangaroo_data_filter", "(", "config", ")", ":", "\n", "  ", "def", "data_filter", "(", "data_point", ",", "shared", ")", ":", "\n", "    ", "assert", "shared", "is", "not", "None", "\n", "q", ",", "cq", ",", "y", ",", "x", ",", "cx", "=", "(", "data_point", "[", "key", "]", "for", "key", "in", "(", "'q'", ",", "'cq'", ",", "'y'", ",", "'x'", ",", "'cx'", ")", ")", "\n", "if", "len", "(", "q", ")", ">", "config", ".", "ques_size_th", ":", "\n", "      ", "return", "False", "\n", "", "xi", "=", "x", "\n", "\n", "if", "config", ".", "split_supports", ":", "\n", "      ", "if", "any", "(", "len", "(", "xij", ")", ">", "config", ".", "sent_size_th", "for", "xij", "in", "xi", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "len", "(", "xi", ")", ">", "config", ".", "num_sents_th", ":", "\n", "        ", "return", "False", "\n", "\n", "", "", "if", "config", ".", "reasoning_layer", "is", "not", "None", "and", "config", ".", "mac_prediction", "==", "'candidates'", ":", "\n", "      ", "if", "len", "(", "data_point", "[", "'cand_span'", "]", ")", "==", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "", "if", "config", ".", "data_filter", "==", "'max'", ":", "\n", "      ", "for", "start", ",", "stop", "in", "y", ":", "\n", "          ", "if", "stop", "[", "0", "]", ">=", "config", ".", "num_sents_th", ":", "\n", "            ", "raise", "Exception", "(", "\"stop[0] >= config.num_sents_th\"", ")", "\n", "return", "False", "\n", "", "if", "start", "[", "0", "]", "!=", "stop", "[", "0", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"start[0] != stop[0\"", ")", "\n", "return", "False", "\n", "", "if", "config", ".", "split_supports", "is", "True", ":", "\n", "            ", "if", "stop", "[", "1", "]", ">=", "config", ".", "para_size_th", ":", "\n", "              ", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "if", "stop", "[", "1", "]", ">=", "config", ".", "sent_size_th", ":", "\n", "              ", "return", "False", "\n", "", "", "", "", "elif", "config", ".", "data_filter", "==", "'valid'", ":", "\n", "      ", "if", "len", "(", "xi", ")", ">", "config", ".", "num_sents_th", ":", "\n", "        ", "return", "False", "\n", "", "if", "any", "(", "len", "(", "xij", ")", ">", "config", ".", "sent_size_th", "for", "xij", "in", "xi", ")", ":", "\n", "        ", "return", "False", "\n", "", "", "elif", "config", ".", "data_filter", "==", "'semi'", ":", "\n", "      ", "\"\"\"\n      Only answer sentence needs to be valid.\n      \"\"\"", "\n", "for", "start", ",", "stop", "in", "y", ":", "\n", "        ", "if", "stop", "[", "0", "]", ">=", "config", ".", "num_sents_th", ":", "\n", "          ", "return", "False", "\n", "", "if", "start", "[", "0", "]", "!=", "start", "[", "0", "]", ":", "\n", "          ", "return", "False", "\n", "", "if", "len", "(", "xi", "[", "start", "[", "0", "]", "]", ")", ">", "config", ".", "sent_size_th", ":", "\n", "          ", "return", "False", "\n", "", "", "", "else", ":", "\n", "      ", "raise", "Exception", "(", ")", "\n", "\n", "", "return", "True", "\n", "", "return", "data_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.update_config": [[282, 323], ["print", "print", "print", "print", "print", "print", "min", "len", "len", "len", "min", "min", "min", "next", "max", "max", "max", "max", "iter", "sum", "len", "max", "max", "len", "max", "max", "data_sets[].shared[].values", "map", "map", "len", "max", "max", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map"], ["", "def", "update_config", "(", "config", ",", "data_sets", ")", ":", "\n", "  ", "config", ".", "max_num_sents", "=", "0", "\n", "config", ".", "max_sent_size", "=", "0", "\n", "config", ".", "max_ques_size", "=", "0", "\n", "config", ".", "max_ques_sub_size", "=", "0", "\n", "config", ".", "max_word_size", "=", "0", "\n", "config", ".", "max_para_size", "=", "0", "\n", "for", "data_set", "in", "data_sets", ":", "\n", "    ", "data", "=", "data_set", ".", "data", "\n", "shared", "=", "data_set", ".", "shared", "\n", "for", "idx", "in", "data_set", ".", "valid_idxs", ":", "\n", "#rx = data['*x'][idx]", "\n", "      ", "q", "=", "data", "[", "'q'", "]", "[", "idx", "]", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "        ", "q_sub", "=", "data", "[", "'q2'", "]", "[", "idx", "]", "\n", "", "sents", "=", "data", "[", "'x'", "]", "[", "idx", "]", "\n", "config", ".", "max_para_size", "=", "max", "(", "config", ".", "max_para_size", ",", "sum", "(", "map", "(", "len", ",", "sents", ")", ")", ")", "\n", "config", ".", "max_num_sents", "=", "max", "(", "config", ".", "max_num_sents", ",", "len", "(", "sents", ")", ")", "\n", "config", ".", "max_sent_size", "=", "max", "(", "config", ".", "max_sent_size", ",", "max", "(", "map", "(", "len", ",", "sents", ")", ")", ")", "\n", "config", ".", "max_word_size", "=", "max", "(", "config", ".", "max_word_size", ",", "max", "(", "len", "(", "word", ")", "for", "sent", "in", "sents", "for", "word", "in", "sent", ")", ")", "\n", "if", "len", "(", "q", ")", ">", "0", ":", "\n", "        ", "config", ".", "max_ques_size", "=", "max", "(", "config", ".", "max_ques_size", ",", "len", "(", "q", ")", ")", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "          ", "config", ".", "max_ques_sub_size", "=", "max", "(", "config", ".", "max_ques_sub_size", ",", "len", "(", "q_sub", ")", ")", "\n", "", "config", ".", "max_word_size", "=", "max", "(", "config", ".", "max_word_size", ",", "max", "(", "len", "(", "word", ")", "for", "word", "in", "q", ")", ")", "\n", "", "", "", "print", "(", "config", ".", "max_para_size", ")", "\n", "print", "(", "config", ".", "max_num_sents", ")", "\n", "print", "(", "config", ".", "max_sent_size", ")", "\n", "if", "config", ".", "mode", "==", "'train'", ":", "\n", "    ", "config", ".", "max_num_sents", "=", "min", "(", "config", ".", "max_num_sents", ",", "config", ".", "num_sents_th", ")", "\n", "config", ".", "max_sent_size", "=", "min", "(", "config", ".", "max_sent_size", ",", "config", ".", "sent_size_th", ")", "\n", "config", ".", "max_para_size", "=", "min", "(", "config", ".", "max_para_size", ",", "config", ".", "para_size_th", ")", "\n", "", "print", "(", "config", ".", "max_para_size", ")", "\n", "print", "(", "config", ".", "max_num_sents", ")", "\n", "print", "(", "config", ".", "max_sent_size", ")", "\n", "\n", "config", ".", "max_word_size", "=", "min", "(", "config", ".", "max_word_size", ",", "config", ".", "word_size_th", ")", "\n", "\n", "config", ".", "char_vocab_size", "=", "len", "(", "data_sets", "[", "0", "]", ".", "shared", "[", "'char2idx'", "]", ")", "\n", "config", ".", "word_emb_size", "=", "len", "(", "next", "(", "iter", "(", "data_sets", "[", "0", "]", ".", "shared", "[", "'word2vec'", "]", ".", "values", "(", ")", ")", ")", ")", "\n", "config", ".", "word_vocab_size", "=", "len", "(", "data_sets", "[", "0", "]", ".", "shared", "[", "'word2idx'", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.get_pr.get_args": [[5, 11], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-t\"", ",", "\"--th\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "# TODO : put more args here", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.get_pr.get_pr": [[13, 27], ["sum", "sum", "sum", "sum", "print", "open", "json.load", "int", "int", "int", "int", "na.items", "na.items", "na.items", "na.items", "id_.startswith", "id_.startswith", "id_.startswith", "id_.startswith"], "function", ["None"], ["", "def", "get_pr", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "answers", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "na", "=", "answers", "[", "'na'", "]", "\n", "\n", "tp", "=", "sum", "(", "int", "(", "not", "id_", ".", "startswith", "(", "\"neg\"", ")", "and", "score", "<", "args", ".", "th", ")", "for", "id_", ",", "score", "in", "na", ".", "items", "(", ")", ")", "\n", "fp", "=", "sum", "(", "int", "(", "id_", ".", "startswith", "(", "\"neg\"", ")", "and", "score", "<", "args", ".", "th", ")", "for", "id_", ",", "score", "in", "na", ".", "items", "(", ")", ")", "\n", "tn", "=", "sum", "(", "int", "(", "id_", ".", "startswith", "(", "\"neg\"", ")", "and", "score", ">=", "args", ".", "th", ")", "for", "id_", ",", "score", "in", "na", ".", "items", "(", ")", ")", "\n", "fn", "=", "sum", "(", "int", "(", "not", "id_", ".", "startswith", "(", "\"neg\"", ")", "and", "score", ">=", "args", ".", "th", ")", "for", "id_", ",", "score", "in", "na", ".", "items", "(", ")", ")", "\n", "\n", "p", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "r", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "print", "(", "\"p={:.3f}, r={:.3f}\"", ".", "format", "(", "p", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.get_pr.main": [[29, 32], ["get_pr.get_args", "get_pr.get_pr"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.get_args", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.get_pr.get_pr"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "get_pr", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.cli.main": [[171, 257], ["os.path.join", "os.path.join", "basic.main.main", "str().zfill", "os.path.join", "os.path.join", "os.path.join", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "os.path.join", "os.path.join", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.main"], ["def", "main", "(", "_", ")", ":", "\n", "  ", "config", "=", "flags", ".", "FLAGS", "\n", "config", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "config", ".", "dataset", ")", "\n", "if", "config", ".", "mode", "==", "'test'", ":", "\n", "    ", "config", ".", "input_keep_prob", "=", "1.0", "\n", "config", ".", "highway_keep_prob", "=", "1.0", "\n", "\n", "", "if", "config", ".", "read_topk_docs", ">", "0", ":", "\n", "    ", "config", ".", "use_ranked_docs", "=", "True", "\n", "\n", "", "assert", "config", ".", "mac_prediction", "==", "'candidates'", "or", "config", ".", "mac_prediction", "==", "'span-single'", "or", "config", ".", "mac_prediction", "==", "'span-dual'", "\n", "config", ".", "out_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "out_base_dir", ",", "config", ".", "model_name", ",", "config", ".", "dataset", ",", "str", "(", "config", ".", "run_id", ")", ".", "zfill", "(", "2", ")", ")", "\n", "\n", "if", "config", ".", "hierarchical_attn", ":", "\n", "    ", "config", ".", "get_query_subject", "=", "True", "\n", "\n", "", "if", "config", ".", "medhop", ":", "\n", "    ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "\"medhop\"", ")", "\n", "config", ".", "num_steps", "=", "3000", "\n", "config", ".", "save_period", "=", "100", "\n", "config", ".", "log_period", "=", "10", "\n", "config", ".", "eval_period", "=", "6000", "\n", "config", ".", "val_num_batches", "=", "0", "\n", "\n", "", "if", "config", ".", "oracle", "==", "'extra'", ":", "\n", "    ", "assert", "config", ".", "use_assembler", "\n", "\n", "", "if", "config", ".", "split_supports", "is", "True", ":", "\n", "    ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'split-supports'", ")", "\n", "\n", "if", "config", ".", "select_top_n_doc", ">", "0", "or", "config", ".", "use_ranked_docs", ":", "\n", "      ", "if", "config", ".", "filter_by_annotations", "==", "'single'", ":", "\n", "        ", "if", "config", ".", "emb_dim", "==", "300", ":", "\n", "          ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'candi-2layer-tfidf-truncated500-300d840b-followsingle'", ")", "\n", "", "else", ":", "\n", "          ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'candi-2layer-tfidf-followsingle'", ")", "\n", "", "", "elif", "config", ".", "filter_by_annotations", "==", "'multiple'", ":", "\n", "        ", "if", "config", ".", "emb_dim", "==", "300", ":", "\n", "          ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'candi-2layer-tfidf-truncated500-300d840b-followmultiple'", ")", "\n", "", "else", ":", "\n", "          ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'candi-2layer-tfidf-followmultiple'", ")", "\n", "", "", "elif", "config", ".", "filter_by_annotations", "==", "'follow'", ":", "\n", "        ", "if", "config", ".", "emb_dim", "==", "300", ":", "\n", "          ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'candi-2layer-tfidf-truncated500-300d840b-follow'", ")", "\n", "", "else", ":", "\n", "          ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'candi-2layer-tfidf-follow'", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "config", ".", "emb_dim", "==", "100", ":", "\n", "          ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'candi-2layer-tfidf'", ")", "\n", "", "elif", "config", ".", "emb_dim", "==", "300", ":", "\n", "          ", "print", "(", "'300'", ")", "\n", "if", "config", ".", "truncate_at", "==", "500", ":", "\n", "            ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'candi-2layer-tfidf-truncated500-300d840b'", ")", "\n", "", "elif", "config", ".", "truncate_at", "==", "300", ":", "\n", "            ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'candi-2layer-tfidf-truncated300-300d840b'", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "(", "\"Large model must uses truncated data.\"", ")", "\n", "", "", "else", ":", "\n", "          ", "raise", "NotImplementedError", "\n", "", "", "", "else", ":", "\n", "      ", "if", "config", ".", "filter_by_annotations", "==", "'follow'", ":", "\n", "        ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'w-candi-follow'", ")", "\n", "", "elif", "config", ".", "filter_by_annotations", "==", "'single'", ":", "\n", "        ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'w-candi-followsingle'", ")", "\n", "", "elif", "config", ".", "filter_by_annotations", "==", "'multiple'", ":", "\n", "        ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'w-candi-followmultiple'", ")", "\n", "", "else", ":", "\n", "        ", "if", "config", ".", "emb_dim", "==", "100", ":", "\n", "          ", "if", "config", ".", "use_doc_selector", ":", "\n", "            ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'w-candi'", ")", "\n", "", "else", ":", "\n", "            ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'candi-2layer-tfidf'", ")", "\n", "", "", "elif", "config", ".", "emb_dim", "==", "300", ":", "\n", "          ", "print", "(", "'300'", ")", "\n", "if", "config", ".", "truncate_at", "==", "500", ":", "\n", "            ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'w-candi-truncated500-300d840b'", ")", "\n", "", "elif", "config", ".", "truncate_at", "==", "300", ":", "\n", "            ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'w-candi-truncated300-300d840b'", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "(", "\"Large model must uses truncated data.\"", ")", "\n", "", "", "else", ":", "\n", "          ", "raise", "NotImplementedError", "\n", "", "", "", "", "else", ":", "\n", "    ", "config", ".", "data_dir", "=", "join", "(", "config", ".", "data_dir", ",", "'concat-supports'", ")", "\n", "", "m", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main.Config.__init__": [[207, 209], ["main.Config.__dict__.update"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "**", "entries", ")", ":", "\n", "    ", "self", ".", "__dict__", ".", "update", "(", "entries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main.main": [[21, 30], ["main.set_dirs", "tensorflow.device", "main._train", "main._test", "ValueError"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main.set_dirs", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main._train", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main._test"], ["def", "main", "(", "config", ")", ":", "\n", "  ", "set_dirs", "(", "config", ")", "\n", "with", "tf", ".", "device", "(", "config", ".", "device", ")", ":", "\n", "    ", "if", "config", ".", "mode", "==", "'train'", ":", "\n", "      ", "_train", "(", "config", ")", "\n", "", "elif", "config", ".", "mode", "==", "'test'", ":", "\n", "      ", "_test", "(", "config", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"invalid value for 'mode': {}\"", ".", "format", "(", "config", ".", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main.set_dirs": [[32, 53], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "Exception", "os.path.exists", "os.makedirs", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir"], "function", ["None"], ["", "", "", "def", "set_dirs", "(", "config", ")", ":", "\n", "# create directories", "\n", "  ", "assert", "config", ".", "load", "or", "config", ".", "mode", "==", "'train'", ",", "\"config.load must be True if not training\"", "\n", "if", "not", "config", ".", "load", "and", "os", ".", "path", ".", "exists", "(", "config", ".", "out_dir", ")", ":", "\n", "    ", "raise", "Exception", "(", "\"no_load is set to True, but the out_dir already exists\"", ")", "\n", "#shutil.rmtree(config.out_dir)", "\n", "\n", "", "config", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "out_dir", ",", "\"save\"", ")", "\n", "config", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "out_dir", ",", "\"log\"", ")", "\n", "config", ".", "eval_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "out_dir", ",", "\"eval\"", ")", "\n", "config", ".", "answer_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "out_dir", ",", "\"answer\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "out_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "config", ".", "out_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "save_dir", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "config", ".", "save_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "log_dir", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "config", ".", "log_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "answer_dir", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "config", ".", "answer_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "eval_dir", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "config", ".", "eval_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main._train": [[56, 141], ["basic.read_data.read_data", "basic.read_data.read_data", "basic.read_data.update_config", "numpy.array", "pprint.pprint", "tensorflow.Session", "tqdm.tqdm", "basic.read_data.get_qangaroo_data_filter", "tf.Session.as_default", "basic.model.get_multi_gpu_models", "print", "basic.trainer.MultiGPUTrainer", "basic.graph_handler.GraphHandler", "basic.graph_handler.GraphHandler.initialize", "basic.read_data.read_data.get_multi_batches", "basic.trainer.MultiGPUTrainer.step", "basic.graph_handler.GraphHandler.save", "word2vec_dict.items", "tensorflow.ConfigProto", "basic.evaluator.MultiGPUF1CandidateEvaluator", "basic.evaluator.MultiGPUF1Evaluator", "int", "tf.Session.run", "basic.graph_handler.GraphHandler.add_summary", "basic.graph_handler.GraphHandler.save", "math.ceil", "basic.evaluator.MultiGPUF1Evaluator.get_evaluation_from_batches", "basic.graph_handler.GraphHandler.add_summaries", "basic.evaluator.MultiGPUF1Evaluator.get_evaluation_from_batches", "basic.graph_handler.GraphHandler.add_summaries", "numpy.random.multivariate_normal", "range", "my.tensorflow.get_num_params", "math.ceil", "len", "tqdm.tqdm", "tqdm.tqdm", "basic.graph_handler.GraphHandler.dump_eval", "basic.graph_handler.GraphHandler.dump_answer", "numpy.zeros", "numpy.eye", "basic.read_data.read_data.get_multi_batches", "basic.read_data.read_data.get_multi_batches"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.read_data", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.read_data", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.update_config", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.get_qangaroo_data_filter", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.get_multi_gpu_models", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.initialize", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_multi_batches", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.trainer.MultiGPUTrainer.step", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.save", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.add_summary", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.save", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.Evaluator.get_evaluation_from_batches", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.add_summaries", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.Evaluator.get_evaluation_from_batches", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.add_summaries", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.get_num_params", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.dump_eval", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.dump_answer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_multi_batches", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_multi_batches"], ["", "", "def", "_train", "(", "config", ")", ":", "\n", "  ", "if", "config", ".", "dataset", "==", "'qangaroo'", ":", "\n", "    ", "data_filter", "=", "get_qangaroo_data_filter", "(", "config", ")", "\n", "", "else", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n", "", "train_data", "=", "read_data", "(", "config", ",", "'train'", ",", "config", ".", "load", ",", "data_filter", "=", "data_filter", ")", "\n", "dev_data", "=", "read_data", "(", "config", ",", "'dev'", ",", "True", ",", "data_filter", "=", "data_filter", ")", "\n", "update_config", "(", "config", ",", "[", "train_data", ",", "dev_data", "]", ")", "\n", "\n", "word2vec_dict", "=", "train_data", ".", "shared", "[", "'lower_word2vec'", "]", "if", "config", ".", "lower_word", "else", "train_data", ".", "shared", "[", "'word2vec'", "]", "\n", "word2idx_dict", "=", "train_data", ".", "shared", "[", "'word2idx'", "]", "\n", "idx2vec_dict", "=", "{", "word2idx_dict", "[", "word", "]", ":", "vec", "for", "word", ",", "vec", "in", "word2vec_dict", ".", "items", "(", ")", "if", "word", "in", "word2idx_dict", "}", "\n", "emb_mat", "=", "np", ".", "array", "(", "[", "idx2vec_dict", "[", "idx", "]", "if", "idx", "in", "idx2vec_dict", "\n", "else", "np", ".", "random", ".", "multivariate_normal", "(", "np", ".", "zeros", "(", "config", ".", "word_emb_size", ")", ",", "np", ".", "eye", "(", "config", ".", "word_emb_size", ")", ")", "\n", "for", "idx", "in", "range", "(", "config", ".", "word_vocab_size", ")", "]", ")", "\n", "\n", "# construct model graph and variables (using default graph)", "\n", "pprint", "(", "config", ".", "__flags", ",", "indent", "=", "2", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "    ", "models", "=", "get_multi_gpu_models", "(", "config", ",", "emb_mat", ")", "\n", "model", "=", "models", "[", "0", "]", "\n", "print", "(", "\"num params: {}\"", ".", "format", "(", "get_num_params", "(", ")", ")", ")", "\n", "trainer", "=", "MultiGPUTrainer", "(", "config", ",", "models", ")", "\n", "if", "config", ".", "reasoning_layer", "is", "not", "None", "and", "config", ".", "mac_prediction", "==", "'candidates'", ":", "\n", "      ", "evaluator", "=", "MultiGPUF1CandidateEvaluator", "(", "config", ",", "models", ",", "tensor_dict", "=", "model", ".", "tensor_dict", "if", "config", ".", "vis", "else", "None", ")", "\n", "", "else", ":", "\n", "      ", "evaluator", "=", "MultiGPUF1Evaluator", "(", "config", ",", "models", ",", "tensor_dict", "=", "model", ".", "tensor_dict", "if", "config", ".", "vis", "else", "None", ")", "\n", "", "graph_handler", "=", "GraphHandler", "(", "config", ",", "model", ")", "# controls all tensors and variables in the graph, including loading /saving", "\n", "\n", "# Variables", "\n", "#gpu_options = tf.GPUOptions(allow_growth=True)", "\n", "#sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options))", "\n", "#sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True))", "\n", "graph_handler", ".", "initialize", "(", "sess", ")", "\n", "\n", "# Begin training", "\n", "", "num_steps", "=", "config", ".", "num_steps", "or", "int", "(", "math", ".", "ceil", "(", "train_data", ".", "num_examples", "/", "(", "config", ".", "batch_size", "*", "config", ".", "num_gpus", ")", ")", ")", "*", "config", ".", "num_epochs", "\n", "global_step", "=", "0", "\n", "\n", "for", "batches", "in", "tqdm", "(", "train_data", ".", "get_multi_batches", "(", "config", ".", "batch_size", ",", "config", ".", "num_gpus", ",", "\n", "num_steps", "=", "num_steps", ",", "shuffle", "=", "True", ",", "cluster", "=", "config", ".", "cluster", ")", ",", "total", "=", "num_steps", ")", ":", "\n", "\n", "    ", "INSUFFICIENT_DATA", "=", "False", "\n", "for", "batch", "in", "batches", ":", "\n", "      ", "_", ",", "ds", "=", "batch", "\n", "if", "len", "(", "ds", ".", "data", "[", "'x'", "]", ")", "<", "config", ".", "batch_size", ":", "\n", "        ", "INSUFFICIENT_DATA", "=", "True", "\n", "break", "\n", "", "", "if", "INSUFFICIENT_DATA", ":", "\n", "      ", "continue", "\n", "\n", "", "global_step", "=", "sess", ".", "run", "(", "model", ".", "global_step", ")", "+", "1", "# +1 because all calculations are done after step", "\n", "get_summary", "=", "global_step", "%", "config", ".", "log_period", "==", "0", "\n", "\n", "loss", ",", "summary", ",", "train_op", "=", "trainer", ".", "step", "(", "sess", ",", "batches", ",", "get_summary", "=", "get_summary", ")", "\n", "if", "get_summary", ":", "\n", "      ", "graph_handler", ".", "add_summary", "(", "summary", ",", "global_step", ")", "\n", "\n", "# occasional saving", "\n", "", "if", "global_step", "%", "config", ".", "save_period", "==", "0", ":", "\n", "      ", "graph_handler", ".", "save", "(", "sess", ",", "global_step", "=", "global_step", ")", "\n", "\n", "", "if", "not", "config", ".", "eval", ":", "\n", "      ", "continue", "\n", "\n", "# Occasional evaluation", "\n", "", "if", "global_step", "%", "config", ".", "eval_period", "==", "0", ":", "\n", "      ", "num_steps", "=", "math", ".", "ceil", "(", "dev_data", ".", "num_examples", "/", "(", "config", ".", "batch_size", "*", "config", ".", "num_gpus", ")", ")", "\n", "if", "0", "<", "config", ".", "val_num_batches", "<", "num_steps", ":", "\n", "        ", "num_steps", "=", "config", ".", "val_num_batches", "\n", "", "e_dev", "=", "evaluator", ".", "get_evaluation_from_batches", "(", "\n", "sess", ",", "tqdm", "(", "dev_data", ".", "get_multi_batches", "(", "config", ".", "batch_size", ",", "config", ".", "num_gpus", ",", "num_steps", "=", "num_steps", ")", ",", "total", "=", "num_steps", ")", ")", "\n", "graph_handler", ".", "add_summaries", "(", "e_dev", ".", "summaries", ",", "global_step", ")", "\n", "e_train", "=", "evaluator", ".", "get_evaluation_from_batches", "(", "\n", "sess", ",", "tqdm", "(", "train_data", ".", "get_multi_batches", "(", "config", ".", "batch_size", ",", "config", ".", "num_gpus", ",", "num_steps", "=", "num_steps", ")", ",", "total", "=", "num_steps", ")", "\n", ")", "\n", "graph_handler", ".", "add_summaries", "(", "e_train", ".", "summaries", ",", "global_step", ")", "\n", "if", "config", ".", "dump_eval", ":", "\n", "        ", "graph_handler", ".", "dump_eval", "(", "e_dev", ")", "\n", "", "if", "config", ".", "dump_answer", ":", "\n", "        ", "graph_handler", ".", "dump_answer", "(", "e_dev", ")", "\n", "", "", "", "if", "global_step", "%", "config", ".", "save_period", "!=", "0", ":", "\n", "    ", "graph_handler", ".", "save", "(", "sess", ",", "global_step", "=", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main._test": [[143, 198], ["basic.read_data.update_config", "pprint.pprint", "tensorflow.Session", "math.ceil", "tqdm.tqdm", "print", "basic.read_data.read_data", "basic.read_data.read_data", "numpy.array", "tf.Session.as_default", "basic.model.get_multi_gpu_models", "basic.evaluator.MultiGPUF1CandidateEvaluator", "basic.graph_handler.GraphHandler", "basic.graph_handler.GraphHandler.initialize", "csv.writer", "basic.read_data.read_data.get_multi_batches", "basic.evaluator.MultiGPUF1CandidateEvaluator.get_evaluation", "print", "basic.graph_handler.GraphHandler.dump_answer", "print", "basic.graph_handler.GraphHandler.dump_eval", "tensorflow.ConfigProto", "open", "csv.writer.writerow", "os.path.join", "os.path.join", "basic.graph_handler.GraphHandler.dump_eval", "new_word2idx_dict.items", "selected_docs.append", "os.path.exists", "os.mkdir", "str().zfill", "range", "str().zfill", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.update_config", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.read_data", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.read_data", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.get_multi_gpu_models", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.initialize", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_multi_batches", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluator.get_evaluation", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.dump_answer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.dump_eval", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.dump_eval"], ["", "", "def", "_test", "(", "config", ")", ":", "\n", "  ", "if", "config", ".", "save_selected_docs", ":", "\n", "    ", "test_data", "=", "read_data", "(", "config", ",", "'filtered_test'", ",", "True", ")", "\n", "", "else", ":", "\n", "    ", "test_data", "=", "read_data", "(", "config", ",", "'test'", ",", "True", ")", "\n", "", "update_config", "(", "config", ",", "[", "test_data", "]", ")", "\n", "\n", "if", "config", ".", "use_glove_for_unk", ":", "\n", "    ", "word2vec_dict", "=", "test_data", ".", "shared", "[", "'lower_word2vec'", "]", "if", "config", ".", "lower_word", "else", "test_data", ".", "shared", "[", "'word2vec'", "]", "\n", "new_word2idx_dict", "=", "test_data", ".", "shared", "[", "'new_word2idx'", "]", "\n", "idx2vec_dict", "=", "{", "idx", ":", "word2vec_dict", "[", "word", "]", "for", "word", ",", "idx", "in", "new_word2idx_dict", ".", "items", "(", ")", "}", "\n", "new_emb_mat", "=", "np", ".", "array", "(", "[", "idx2vec_dict", "[", "idx", "]", "for", "idx", "in", "range", "(", "len", "(", "idx2vec_dict", ")", ")", "]", ",", "dtype", "=", "'float32'", ")", "\n", "#config.new_emb_mat = new_emb_mat", "\n", "\n", "", "pprint", "(", "config", ".", "__flags", ",", "indent", "=", "2", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "    ", "models", "=", "get_multi_gpu_models", "(", "config", ",", "None", ")", "\n", "model", "=", "models", "[", "0", "]", "\n", "evaluator", "=", "MultiGPUF1CandidateEvaluator", "(", "config", ",", "models", ",", "tensor_dict", "=", "models", "[", "0", "]", ".", "tensor_dict", "if", "config", ".", "vis", "else", "None", ")", "\n", "graph_handler", "=", "GraphHandler", "(", "config", ",", "model", ")", "\n", "\n", "graph_handler", ".", "initialize", "(", "sess", ")", "\n", "", "num_steps", "=", "math", ".", "ceil", "(", "test_data", ".", "num_examples", "/", "(", "config", ".", "batch_size", "*", "config", ".", "num_gpus", ")", ")", "\n", "if", "0", "<", "config", ".", "test_num_batches", "<", "num_steps", ":", "\n", "    ", "num_steps", "=", "config", ".", "test_num_batches", "\n", "\n", "", "e", "=", "None", "\n", "if", "config", ".", "save_selected_docs", ":", "\n", "    ", "writer", "=", "csv", ".", "writer", "(", "open", "(", "\"model_chains.csv\"", ",", "'w'", ")", ")", "\n", "\n", "", "for", "multi_batch", "in", "tqdm", "(", "test_data", ".", "get_multi_batches", "(", "config", ".", "batch_size", ",", "config", ".", "num_gpus", ",", "num_steps", "=", "num_steps", ",", "cluster", "=", "config", ".", "cluster", ")", ",", "total", "=", "num_steps", ")", ":", "\n", "    ", "ei", ",", "doc_lst", "=", "evaluator", ".", "get_evaluation", "(", "sess", ",", "multi_batch", ")", "\n", "if", "config", ".", "save_selected_docs", ":", "\n", "      ", "selected_docs", "=", "[", "]", "\n", "for", "ranked_docs", "in", "doc_lst", ":", "\n", "        ", "selected_docs", ".", "append", "(", "ranked_docs", "[", "0", "]", "[", "0", "]", ")", "\n", "#print(selected_doc)", "\n", "", "writer", ".", "writerow", "(", "selected_docs", ")", "\n", "\n", "", "e", "=", "ei", "if", "e", "is", "None", "else", "e", "+", "ei", "\n", "if", "config", ".", "vis", ":", "\n", "      ", "eval_subdir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "eval_dir", ",", "\"{}-{}\"", ".", "format", "(", "ei", ".", "data_type", ",", "str", "(", "ei", ".", "global_step", ")", ".", "zfill", "(", "6", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "eval_subdir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "eval_subdir", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "eval_subdir", ",", "str", "(", "ei", ".", "idxs", "[", "0", "]", ")", ".", "zfill", "(", "8", ")", ")", "\n", "graph_handler", ".", "dump_eval", "(", "ei", ",", "path", "=", "path", ")", "\n", "\n", "", "", "print", "(", "e", ")", "\n", "if", "config", ".", "dump_answer", ":", "\n", "    ", "print", "(", "\"dumping answer ...\"", ")", "\n", "graph_handler", ".", "dump_answer", "(", "e", ")", "\n", "", "if", "config", ".", "dump_eval", ":", "\n", "    ", "print", "(", "\"dumping eval ...\"", ")", "\n", "graph_handler", ".", "dump_eval", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main._get_args": [[200, 204], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "_get_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"config_path\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main._run": [[211, 216], ["main._get_args", "open", "main.Config", "main.main", "json.load"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.main._get_args", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.main"], ["", "", "def", "_run", "(", ")", ":", "\n", "  ", "args", "=", "_get_args", "(", ")", "\n", "with", "open", "(", "args", ".", "config_path", ",", "'r'", ")", "as", "fh", ":", "\n", "    ", "config", "=", "Config", "(", "**", "json", ".", "load", "(", "fh", ")", ")", "\n", "main", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.batcher.get_feed_dict": [[6, 348], ["isinstance", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "enumerate", "enumerate", "numpy.sum", "enumerate", "numpy.stack", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "batcher.get_feed_dict._get_word"], "function", ["None"], ["def", "get_feed_dict", "(", "model", ",", "batch", ",", "is_train", ",", "supervised", "=", "True", ")", ":", "\n", "  ", "assert", "isinstance", "(", "batch", ",", "DataSet", ")", "\n", "config", "=", "model", ".", "config", "\n", "\n", "N", ",", "M", ",", "JX", ",", "JQ", ",", "VW", ",", "VC", ",", "d", ",", "W", "=", "config", ".", "batch_size", ",", "config", ".", "max_num_sents", ",", "config", ".", "max_sent_size", ",", "config", ".", "max_ques_size", ",", "config", ".", "word_vocab_size", ",", "config", ".", "char_vocab_size", ",", "config", ".", "hidden_size", ",", "config", ".", "max_word_size", "\n", "if", "config", ".", "split_supports", ":", "\n", "    ", "M", "=", "1", "\n", "\n", "", "feed_dict", "=", "{", "}", "\n", "\n", "if", "config", ".", "split_supports", ":", "\n", "    ", "x", ",", "cx", ",", "x_mask", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "else", ":", "\n", "    ", "x", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "JX", "]", ",", "dtype", "=", "'int32'", ")", "\n", "cx", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "JX", ",", "W", "]", ",", "dtype", "=", "'int32'", ")", "\n", "x_mask", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "JX", "]", ",", "dtype", "=", "'bool'", ")", "\n", "\n", "", "q", "=", "np", ".", "zeros", "(", "[", "N", ",", "JQ", "]", ",", "dtype", "=", "'int32'", ")", "\n", "cq", "=", "np", ".", "zeros", "(", "[", "N", ",", "JQ", ",", "W", "]", ",", "dtype", "=", "'int32'", ")", "\n", "q_mask", "=", "np", ".", "zeros", "(", "[", "N", ",", "JQ", "]", ",", "dtype", "=", "'bool'", ")", "\n", "x_group", "=", "np", ".", "zeros", "(", "[", "N", "]", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "q_sub", "=", "np", ".", "zeros", "(", "[", "N", ",", "config", ".", "max_ques_sub_size", "]", ",", "dtype", "=", "'int32'", ")", "\n", "cq_sub", "=", "np", ".", "zeros", "(", "[", "N", ",", "config", ".", "max_ques_sub_size", ",", "W", "]", ",", "dtype", "=", "'int32'", ")", "\n", "qsub_mask", "=", "np", ".", "zeros", "(", "[", "N", ",", "config", ".", "max_ques_sub_size", "]", ",", "dtype", "=", "'bool'", ")", "\n", "\n", "feed_dict", "[", "model", ".", "x", "]", "=", "x", "\n", "feed_dict", "[", "model", ".", "x_mask", "]", "=", "x_mask", "\n", "feed_dict", "[", "model", ".", "cx", "]", "=", "cx", "\n", "feed_dict", "[", "model", ".", "q", "]", "=", "q", "\n", "feed_dict", "[", "model", ".", "cq", "]", "=", "cq", "\n", "feed_dict", "[", "model", ".", "q_sub", "]", "=", "q_sub", "\n", "feed_dict", "[", "model", ".", "cq_sub", "]", "=", "cq_sub", "\n", "feed_dict", "[", "model", ".", "q_mask", "]", "=", "q_mask", "\n", "feed_dict", "[", "model", ".", "q_sub_mask", "]", "=", "qsub_mask", "\n", "feed_dict", "[", "model", ".", "is_train", "]", "=", "is_train", "\n", "\n", "feed_dict", "[", "model", ".", "x_group", "]", "=", "x_group", "\n", "\n", "if", "config", ".", "use_glove_for_unk", ":", "\n", "    ", "feed_dict", "[", "model", ".", "new_emb_mat", "]", "=", "batch", ".", "shared", "[", "'new_emb_mat'", "]", "\n", "\n", "", "X", "=", "batch", ".", "data", "[", "'x'", "]", "\n", "CX", "=", "batch", ".", "data", "[", "'cx'", "]", "\n", "\n", "if", "supervised", ":", "\n", "    ", "if", "config", ".", "split_supports", "is", "True", ":", "\n", "      ", "y", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "config", ".", "max_para_size", "]", ",", "dtype", "=", "'bool'", ")", "\n", "y2", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "config", ".", "max_para_size", "]", ",", "dtype", "=", "'bool'", ")", "\n", "wy", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "config", ".", "max_para_size", "]", ",", "dtype", "=", "'bool'", ")", "\n", "", "else", ":", "\n", "      ", "y", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "JX", "]", ",", "dtype", "=", "'bool'", ")", "\n", "y2", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "JX", "]", ",", "dtype", "=", "'bool'", ")", "\n", "wy", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "JX", "]", ",", "dtype", "=", "'bool'", ")", "\n", "", "na", "=", "np", ".", "zeros", "(", "[", "N", "]", ",", "dtype", "=", "'bool'", ")", "\n", "feed_dict", "[", "model", ".", "y", "]", "=", "y", "\n", "feed_dict", "[", "model", ".", "y2", "]", "=", "y2", "\n", "feed_dict", "[", "model", ".", "wy", "]", "=", "wy", "\n", "feed_dict", "[", "model", ".", "na", "]", "=", "na", "\n", "\n", "if", "config", ".", "supervise_final_doc", "or", "(", "config", ".", "oracle", "is", "not", "None", ")", ":", "\n", "      ", "answer_doc_ids", "=", "-", "np", ".", "ones", "(", "[", "N", ",", "10", "]", ",", "dtype", "=", "'int32'", ")", "\n", "answer_word_ids", "=", "-", "np", ".", "ones", "(", "[", "N", ",", "10", "]", ",", "dtype", "=", "'int32'", ")", "\n", "feed_dict", "[", "model", ".", "answer_doc_ids", "]", "=", "answer_doc_ids", "\n", "feed_dict", "[", "model", ".", "answer_word_ids", "]", "=", "answer_word_ids", "\n", "for", "i", ",", "(", "doc_id", ",", "word_id", ",", "nai", ")", "in", "enumerate", "(", "zip", "(", "batch", ".", "data", "[", "'answer_doc_ids'", "]", ",", "batch", ".", "data", "[", "'answer_ids_in_doc'", "]", ",", "batch", ".", "data", "[", "'na'", "]", ")", ")", ":", "\n", "        ", "if", "nai", ":", "\n", "          ", "if", "config", ".", "supervise_final_doc", "or", "config", ".", "oracle", "is", "not", "None", ":", "\n", "            ", "answer_doc_ids", "[", "i", ",", "0", "]", "=", "0", "\n", "answer_word_ids", "[", "i", ",", "0", "]", "=", "0", "\n", "", "continue", "\n", "", "assert", "len", "(", "doc_id", ")", "==", "len", "(", "word_id", ")", ",", "(", "len", "(", "doc_id", ")", ",", "len", "(", "word_id", ")", ")", "\n", "if", "config", ".", "shuffle_answer_doc_ids", ":", "\n", "          ", "joint_id", "=", "list", "(", "zip", "(", "doc_id", ",", "word_id", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "joint_id", ")", "# shuffle doc_ids and word_ids jointly to randomize the supervision label.", "\n", "doc_id", ",", "word_id", "=", "zip", "(", "*", "joint_id", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "min", "(", "10", ",", "len", "(", "doc_id", ")", ")", ")", ":", "\n", "          ", "if", "config", ".", "select_top_n_doc", ">", "0", ":", "\n", "            ", "if", "doc_id", "[", "j", "]", "<", "config", ".", "select_top_n_doc", ":", "\n", "              ", "answer_doc_ids", "[", "i", ",", "j", "]", "=", "doc_id", "[", "j", "]", "\n", "answer_word_ids", "[", "i", ",", "j", "]", "=", "word_id", "[", "j", "]", "\n", "", "else", ":", "\n", "              ", "answer_doc_ids", "[", "i", ",", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "config", ".", "select_top_n_doc", ")", "\n", "answer_word_ids", "[", "i", ",", "0", "]", "=", "0", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "answer_doc_ids", "[", "i", ",", "j", "]", "=", "doc_id", "[", "j", "]", "\n", "answer_word_ids", "[", "i", ",", "j", "]", "=", "word_id", "[", "j", "]", "\n", "\n", "", "", "", "for", "i", ",", "adis", "in", "enumerate", "(", "answer_doc_ids", ")", ":", "\n", "        ", "if", "config", ".", "supervise_final_doc", "and", "adis", "[", "0", "]", "==", "-", "1", ":", "\n", "          ", "answer_doc_ids", "[", "i", ",", "0", "]", "=", "0", "\n", "answer_word_ids", "[", "i", ",", "0", "]", "=", "0", "\n", "\n", "", "", "", "if", "config", ".", "supervise_first_doc", ":", "\n", "      ", "first_doc_ids", "=", "np", ".", "zeros", "(", "[", "N", "]", ",", "dtype", "=", "'int32'", ")", "\n", "feed_dict", "[", "model", ".", "first_doc_ids", "]", "=", "first_doc_ids", "\n", "if", "config", ".", "select_top_n_doc", "==", "0", ":", "\n", "        ", "for", "i", ",", "doc_id", "in", "enumerate", "(", "batch", ".", "data", "[", "'first_doc_ids'", "]", ")", ":", "\n", "          ", "first_doc_ids", "[", "i", "]", "=", "doc_id", "\n", "\n", "", "", "", "if", "config", ".", "mac_prediction", "==", "'candidates'", ":", "\n", "      ", "cand_spanss", "=", "batch", ".", "data", "[", "'cand_span'", "]", "\n", "cand_span_y", "=", "batch", ".", "data", "[", "'cand_span_y'", "]", "\n", "cand_wordss", "=", "batch", ".", "data", "[", "'cand_word'", "]", "\n", "cand_word_y", "=", "batch", ".", "data", "[", "'cand_word_y'", "]", "\n", "\n", "max_cand_size", "=", "0", "\n", "for", "ci", "in", "cand_spanss", ":", "\n", "        ", "max_cand_size", "=", "max", "(", "max_cand_size", ",", "len", "(", "ci", ")", ")", "\n", "\n", "", "candidate_spans", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "max_cand_size", ",", "2", "]", ",", "dtype", "=", "'int32'", ")", "\n", "candidate_span_y", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", "]", ",", "dtype", "=", "'int32'", ")", "\n", "num_exceed_cand", "=", "np", ".", "zeros", "(", "[", "N", ",", "M", ",", "max_cand_size", "]", ",", "dtype", "=", "'int32'", ")", "\n", "feed_dict", "[", "model", ".", "candidate_spans", "]", "=", "candidate_spans", "\n", "feed_dict", "[", "model", ".", "candidate_span_y", "]", "=", "candidate_span_y", "\n", "feed_dict", "[", "model", ".", "num_exceed_cand", "]", "=", "num_exceed_cand", "\n", "\n", "for", "i", ",", "(", "cand_spans", ",", "nai", ")", "in", "enumerate", "(", "zip", "(", "cand_spanss", ",", "batch", ".", "data", "[", "'na'", "]", ")", ")", ":", "\n", "        ", "num_exceed_candi", "=", "0", "\n", "num_exceed_cand_bfr_y", "=", "0", "\n", "for", "j", ",", "cand_span", "in", "enumerate", "(", "cand_spans", ")", ":", "\n", "          ", "assert", "cand_span", "[", "0", "]", "[", "0", "]", "==", "0", ",", "(", "cand_span", ")", "\n", "assert", "cand_span", "[", "1", "]", "[", "0", "]", "==", "0", ",", "(", "cand_span", ")", "\n", "\n", "# Ignore candidate spans that exceed max_para_size.", "\n", "if", "cand_span", "[", "0", "]", "[", "1", "]", ">", "config", ".", "max_para_size", "or", "cand_span", "[", "1", "]", "[", "1", "]", ">", "config", ".", "max_para_size", ":", "\n", "            ", "num_exceed_candi", "+=", "1", "\n", "if", "not", "nai", ":", "\n", "              ", "assert", "j", "!=", "cand_span_y", "[", "i", "]", "[", "0", "]", "\n", "if", "j", "<", "cand_span_y", "[", "i", "]", "[", "0", "]", ":", "\n", "                ", "num_exceed_cand_bfr_y", "+=", "1", "\n", "", "", "continue", "\n", "", "num_exceed_cand", "[", "i", ",", "0", ",", "j", "-", "num_exceed_candi", "]", "=", "num_exceed_candi", "\n", "candidate_spans", "[", "i", ",", "0", ",", "j", "-", "num_exceed_candi", ",", "0", "]", "=", "cand_span", "[", "0", "]", "[", "1", "]", "\n", "candidate_spans", "[", "i", ",", "0", ",", "j", "-", "num_exceed_candi", ",", "1", "]", "=", "cand_span", "[", "1", "]", "[", "1", "]", "\n", "\n", "", "if", "nai", ":", "\n", "#na[i] = nai", "\n", "          ", "continue", "\n", "\n", "", "assert", "cand_span_y", "[", "i", "]", "[", "0", "]", "<", "len", "(", "cand_spans", ")", ",", "(", "cand_span_y", "[", "i", "]", "[", "0", "]", ",", "len", "(", "cand_spans", ")", ")", "\n", "candidate_span_y", "[", "i", ",", "0", "]", "=", "cand_span_y", "[", "i", "]", "[", "0", "]", "-", "num_exceed_cand_bfr_y", "\n", "\n", "", "", "for", "i", ",", "(", "xi", ",", "cxi", ",", "yi", ",", "nai", ")", "in", "enumerate", "(", "zip", "(", "X", ",", "CX", ",", "batch", ".", "data", "[", "'y'", "]", ",", "batch", ".", "data", "[", "'na'", "]", ")", ")", ":", "\n", "      ", "if", "nai", ":", "\n", "        ", "na", "[", "i", "]", "=", "nai", "\n", "continue", "\n", "", "start_idx", ",", "stop_idx", "=", "random", ".", "choice", "(", "yi", ")", "\n", "j", ",", "k", "=", "start_idx", "\n", "j2", ",", "k2", "=", "stop_idx", "\n", "\n", "y", "[", "i", ",", "j", ",", "k", "]", "=", "True", "\n", "y2", "[", "i", ",", "j2", ",", "k2", "-", "1", "]", "=", "True", "\n", "if", "j", "==", "j2", ":", "\n", "        ", "wy", "[", "i", ",", "j", ",", "k", ":", "k2", "]", "=", "True", "\n", "", "else", ":", "\n", "        ", "wy", "[", "i", ",", "j", ",", "k", ":", "len", "(", "batch", ".", "data", "[", "'x'", "]", "[", "i", "]", "[", "j", "]", ")", "]", "=", "True", "\n", "wy", "[", "i", ",", "j2", ",", ":", "k2", "]", "=", "True", "\n", "\n", "\n", "", "", "", "def", "_get_word", "(", "word", ")", ":", "\n", "    ", "d", "=", "batch", ".", "shared", "[", "'word2idx'", "]", "\n", "for", "each", "in", "(", "word", ",", "word", ".", "lower", "(", ")", ",", "word", ".", "capitalize", "(", ")", ",", "word", ".", "upper", "(", ")", ")", ":", "\n", "      ", "if", "each", "in", "d", ":", "\n", "        ", "return", "d", "[", "each", "]", "\n", "", "", "if", "config", ".", "use_glove_for_unk", ":", "\n", "      ", "d2", "=", "batch", ".", "shared", "[", "'new_word2idx'", "]", "\n", "for", "each", "in", "(", "word", ",", "word", ".", "lower", "(", ")", ",", "word", ".", "capitalize", "(", ")", ",", "word", ".", "upper", "(", ")", ")", ":", "\n", "        ", "if", "each", "in", "d2", ":", "\n", "          ", "return", "d2", "[", "each", "]", "+", "len", "(", "d", ")", "\n", "", "", "", "return", "1", "\n", "\n", "", "def", "_get_char", "(", "char", ")", ":", "\n", "    ", "d", "=", "batch", ".", "shared", "[", "'char2idx'", "]", "\n", "if", "char", "in", "d", ":", "\n", "      ", "return", "d", "[", "char", "]", "\n", "", "return", "1", "\n", "\n", "", "if", "model", ".", "period_id", "is", "None", ":", "\n", "    ", "model", ".", "period_id", "=", "_get_word", "(", "'.'", ")", "\n", "print", "(", "\"period_id: %d\"", "%", "model", ".", "period_id", ")", "\n", "\n", "", "max_sent_size", "=", "0", "\n", "for", "xi", "in", "X", ":", "\n", "    ", "for", "xij", "in", "xi", ":", "\n", "      ", "max_sent_size", "=", "max", "(", "max_sent_size", ",", "len", "(", "xij", ")", ")", "\n", "\n", "", "", "if", "config", ".", "split_supports", "is", "True", ":", "\n", "    ", "assert", "max_sent_size", "<=", "config", ".", "max_sent_size", ",", "(", "max_sent_size", ")", "\n", "\n", "", "for", "i", ",", "xi", "in", "enumerate", "(", "X", ")", ":", "\n", "    ", "word_count", "=", "0", "\n", "\n", "for", "j", ",", "xij", "in", "enumerate", "(", "xi", ")", ":", "\n", "      ", "if", "j", "==", "config", ".", "max_num_sents", ":", "\n", "        ", "raise", "Exception", "(", "\"Exceed max_num_sents.\"", ")", "\n", "break", "\n", "", "if", "config", ".", "split_supports", "and", "word_count", ">=", "config", ".", "max_para_size", ":", "\n", "        ", "if", "config", ".", "supervise_first_doc", "and", "j", "<=", "first_doc_ids", "[", "i", "]", ":", "\n", "          ", "first_doc_ids", "[", "i", "]", "=", "0", "\n", "", "if", "config", ".", "supervise_final_doc", ":", "\n", "          ", "for", "count", ",", "id", "in", "enumerate", "(", "answer_doc_ids", "[", "i", "]", ")", ":", "\n", "            ", "if", "j", "<=", "id", ":", "\n", "              ", "if", "config", ".", "supervise_final_doc", "and", "count", "==", "0", ":", "# Must have a valid doc id as the label of the final attention loss.", "\n", "                ", "answer_doc_ids", "[", "i", "]", "=", "[", "0", "]", "+", "[", "-", "1", "]", "*", "9", "\n", "answer_word_ids", "[", "i", "]", "=", "[", "0", "]", "+", "[", "-", "1", "]", "*", "9", "\n", "", "else", ":", "\n", "                ", "answer_doc_ids", "[", "i", "]", "[", "count", ":", "]", "=", "-", "np", ".", "ones", "(", "10", "-", "count", ")", "\n", "answer_word_ids", "[", "i", "]", "[", "count", ":", "]", "=", "-", "np", ".", "ones", "(", "10", "-", "count", ")", "\n", "", "break", "\n", "", "", "", "break", "\n", "\n", "", "if", "config", ".", "split_supports", ":", "# Add every sentence as a separate batch.", "\n", "        ", "_xij", "=", "np", ".", "zeros", "(", "[", "1", ",", "max_sent_size", "]", ",", "dtype", "=", "'int32'", ")", "\n", "_xij_mask", "=", "np", ".", "zeros", "(", "[", "1", ",", "max_sent_size", "]", ",", "dtype", "=", "'bool'", ")", "\n", "x", ".", "append", "(", "_xij", ")", "\n", "x_mask", ".", "append", "(", "_xij_mask", ")", "\n", "\n", "", "for", "k", ",", "xijk", "in", "enumerate", "(", "xij", ")", ":", "\n", "        ", "if", "config", ".", "split_supports", "and", "word_count", ">=", "config", ".", "max_para_size", ":", "\n", "# same as word_count > config.max_sent_size if para_size_th and sent_size_th is set to same.", "\n", "          ", "break", "\n", "", "if", "k", "==", "config", ".", "max_sent_size", ":", "\n", "          ", "break", "\n", "", "each", "=", "_get_word", "(", "xijk", ")", "\n", "assert", "isinstance", "(", "each", ",", "int", ")", ",", "each", "\n", "if", "config", ".", "split_supports", ":", "\n", "          ", "x", "[", "-", "1", "]", "[", "0", ",", "k", "]", "=", "each", "\n", "x_mask", "[", "-", "1", "]", "[", "0", ",", "k", "]", "=", "True", "\n", "", "else", ":", "\n", "          ", "x", "[", "i", ",", "j", ",", "k", "]", "=", "each", "\n", "x_mask", "[", "i", ",", "j", ",", "k", "]", "=", "True", "\n", "\n", "", "word_count", "+=", "1", "\n", "", "x_group", "[", "i", "]", "+=", "1", "\n", "\n", "", "if", "config", ".", "split_supports", ":", "\n", "      ", "assert", "word_count", "<=", "config", ".", "max_para_size", ",", "(", "word_count", ")", "\n", "\n", "\n", "", "", "for", "i", ",", "cxi", "in", "enumerate", "(", "CX", ")", ":", "\n", "# Create a batch", "\n", "    ", "word_count", "=", "0", "\n", "\n", "for", "j", ",", "cxij", "in", "enumerate", "(", "cxi", ")", ":", "\n", "      ", "if", "j", "==", "config", ".", "max_num_sents", ":", "\n", "        ", "raise", "Exception", "(", "\"Exceed max_num_sents.\"", ")", "\n", "break", "\n", "", "if", "config", ".", "split_supports", "and", "word_count", ">=", "config", ".", "max_para_size", ":", "\n", "        ", "break", "\n", "\n", "", "if", "config", ".", "split_supports", ":", "# Add every sentence as a separate batch.", "\n", "        ", "_cxij", "=", "np", ".", "zeros", "(", "[", "1", ",", "max_sent_size", ",", "W", "]", ",", "dtype", "=", "'int32'", ")", "\n", "cx", ".", "append", "(", "_cxij", ")", "\n", "\n", "", "for", "k", ",", "cxijk", "in", "enumerate", "(", "cxij", ")", ":", "\n", "        ", "if", "config", ".", "split_supports", "and", "word_count", ">=", "config", ".", "max_para_size", ":", "\n", "          ", "break", "\n", "", "if", "k", "==", "config", ".", "max_sent_size", ":", "\n", "          ", "break", "\n", "\n", "", "for", "l", ",", "cxijkl", "in", "enumerate", "(", "cxijk", ")", ":", "\n", "          ", "if", "l", "==", "config", ".", "max_word_size", ":", "\n", "            ", "break", "\n", "", "if", "config", ".", "split_supports", ":", "\n", "            ", "cx", "[", "-", "1", "]", "[", "0", ",", "k", ",", "l", "]", "=", "_get_char", "(", "cxijkl", ")", "\n", "", "else", ":", "\n", "            ", "cx", "[", "i", ",", "j", ",", "k", ",", "l", "]", "=", "_get_char", "(", "cxijkl", ")", "\n", "\n", "", "", "word_count", "+=", "1", "#", "\n", "\n", "", "", "if", "config", ".", "split_supports", ":", "\n", "      ", "assert", "word_count", "<=", "config", ".", "max_para_size", ",", "(", "word_count", ")", "\n", "\n", "", "", "for", "i", ",", "qi", "in", "enumerate", "(", "batch", ".", "data", "[", "'q'", "]", ")", ":", "\n", "    ", "for", "j", ",", "qij", "in", "enumerate", "(", "qi", ")", ":", "\n", "      ", "q", "[", "i", ",", "j", "]", "=", "_get_word", "(", "qij", ")", "\n", "q_mask", "[", "i", ",", "j", "]", "=", "True", "\n", "\n", "", "", "for", "i", ",", "cqi", "in", "enumerate", "(", "batch", ".", "data", "[", "'cq'", "]", ")", ":", "\n", "    ", "for", "j", ",", "cqij", "in", "enumerate", "(", "cqi", ")", ":", "\n", "      ", "for", "k", ",", "cqijk", "in", "enumerate", "(", "cqij", ")", ":", "\n", "        ", "cq", "[", "i", ",", "j", ",", "k", "]", "=", "_get_char", "(", "cqijk", ")", "\n", "if", "k", "+", "1", "==", "config", ".", "max_word_size", ":", "\n", "          ", "break", "\n", "\n", "", "", "", "", "if", "config", ".", "get_query_subject", ":", "\n", "    ", "for", "i", ",", "qi", "in", "enumerate", "(", "batch", ".", "data", "[", "'q2'", "]", ")", ":", "\n", "      ", "for", "j", ",", "qij", "in", "enumerate", "(", "qi", ")", ":", "\n", "        ", "q_sub", "[", "i", ",", "j", "]", "=", "_get_word", "(", "qij", ")", "\n", "qsub_mask", "[", "i", ",", "j", "]", "=", "True", "\n", "\n", "", "", "for", "i", ",", "cqi", "in", "enumerate", "(", "batch", ".", "data", "[", "'cq2'", "]", ")", ":", "\n", "      ", "for", "j", ",", "cqij", "in", "enumerate", "(", "cqi", ")", ":", "\n", "        ", "for", "k", ",", "cqijk", "in", "enumerate", "(", "cqij", ")", ":", "\n", "          ", "cq_sub", "[", "i", ",", "j", ",", "k", "]", "=", "_get_char", "(", "cqijk", ")", "\n", "if", "k", "+", "1", "==", "config", ".", "max_word_size", ":", "\n", "            ", "break", "\n", "\n", "", "", "", "", "", "all_period_loc_plus_1", "=", "[", "]", "\n", "x_len", "=", "np", ".", "sum", "(", "np", ".", "asarray", "(", "x_mask", ")", ".", "astype", "(", "int", ")", ",", "axis", "=", "2", ")", "\n", "for", "i", ",", "xi", "in", "enumerate", "(", "x", ")", ":", "\n", "    ", "period_found", "=", "[", "j", "+", "1", "for", "j", ",", "period", "in", "enumerate", "(", "list", "(", "xi", "[", "0", "]", ")", ")", "if", "period", "==", "model", ".", "period_id", "]", "\n", "if", "len", "(", "period_found", ")", ">", "10", ":", "\n", "      ", "all_period_loc_plus_1", ".", "append", "(", "[", "period_found", "[", ":", "10", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "to_append", "=", "period_found", "+", "[", "x_len", "[", "i", "]", "[", "0", "]", "]", "*", "(", "10", "-", "len", "(", "period_found", ")", ")", "\n", "all_period_loc_plus_1", ".", "append", "(", "[", "to_append", "]", ")", "\n", "", "", "x_sents_len", "=", "all_period_loc_plus_1", "\n", "feed_dict", "[", "model", ".", "x_sents_len", "]", "=", "np", ".", "stack", "(", "x_sents_len", ")", "\n", "if", "supervised", ":", "\n", "    ", "if", "config", ".", "split_supports", "is", "False", ":", "\n", "      ", "assert", "np", ".", "sum", "(", "~", "(", "x_mask", "|", "~", "wy", ")", ")", "==", "0", "# if x_mask == 0, then wy must be 0", "\n", "\n", "", "", "num_examples", "=", "len", "(", "batch", ".", "data", "[", "'x'", "]", ")", "\n", "if", "num_examples", "<", "config", ".", "batch_size", "and", "(", "config", ".", "mac_reasoning_unit", "==", "'attention-lstm'", ")", ":", "# Last batch every epoch", "\n", "    ", "cutoff_1", "=", "np", ".", "sum", "(", "x_group", "[", ":", "(", "config", ".", "batch_size", "-", "num_examples", ")", "]", ")", "\n", "feed_dict", "[", "model", ".", "x", "]", "=", "np", ".", "stack", "(", "x", "+", "x", "[", ":", "cutoff_1", "]", ")", "\n", "feed_dict", "[", "model", ".", "cx", "]", "=", "np", ".", "stack", "(", "cx", "+", "cx", "[", ":", "cutoff_1", "]", ")", "\n", "feed_dict", "[", "model", ".", "x_mask", "]", "=", "np", ".", "stack", "(", "x_mask", "+", "x_mask", "[", ":", "cutoff_1", "]", ")", "\n", "feed_dict", "[", "model", ".", "x_sents_len", "]", "=", "np", ".", "stack", "(", "x_sents_len", "+", "x_sents_len", "[", ":", "cutoff_1", "]", ")", "\n", "\n", "cutoff_2", "=", "config", ".", "batch_size", "-", "num_examples", "\n", "feed_dict", "[", "model", ".", "x_group", "]", "=", "np", ".", "concatenate", "(", "[", "x_group", "[", ":", "num_examples", "]", ",", "x_group", "[", ":", "cutoff_2", "]", "]", ")", "\n", "feed_dict", "[", "model", ".", "q", "]", "=", "np", ".", "concatenate", "(", "[", "q", "[", ":", "num_examples", "]", ",", "q", "[", ":", "cutoff_2", "]", "]", ")", "\n", "feed_dict", "[", "model", ".", "cq", "]", "=", "np", ".", "concatenate", "(", "[", "cq", "[", ":", "num_examples", "]", ",", "cq", "[", ":", "cutoff_2", "]", "]", ")", "\n", "feed_dict", "[", "model", ".", "q_sub", "]", "=", "np", ".", "concatenate", "(", "[", "q_sub", "[", ":", "num_examples", "]", ",", "q_sub", "[", ":", "cutoff_2", "]", "]", ")", "\n", "feed_dict", "[", "model", ".", "cq_sub", "]", "=", "np", ".", "concatenate", "(", "[", "cq_sub", "[", ":", "num_examples", "]", ",", "cq_sub", "[", ":", "cutoff_2", "]", "]", ")", "\n", "feed_dict", "[", "model", ".", "q_mask", "]", "=", "np", ".", "concatenate", "(", "[", "q_mask", "[", ":", "num_examples", "]", ",", "q_mask", "[", ":", "cutoff_2", "]", "]", ")", "\n", "feed_dict", "[", "model", ".", "q_sub_mask", "]", "=", "np", ".", "concatenate", "(", "[", "qsub_mask", "[", ":", "num_examples", "]", ",", "qsub_mask", "[", ":", "cutoff_2", "]", "]", ")", "\n", "", "else", ":", "\n", "    ", "feed_dict", "[", "model", ".", "x", "]", "=", "np", ".", "stack", "(", "x", ")", "\n", "feed_dict", "[", "model", ".", "cx", "]", "=", "np", ".", "stack", "(", "cx", ")", "\n", "feed_dict", "[", "model", ".", "x_mask", "]", "=", "np", ".", "stack", "(", "x_mask", ")", "\n", "\n", "", "assert", "len", "(", "x", ")", "==", "len", "(", "x_mask", ")", "\n", "assert", "len", "(", "x", ")", "==", "sum", "(", "x_group", ")", ",", "(", "len", "(", "x", ")", ",", "sum", "(", "x_group", ")", ")", "\n", "return", "feed_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.trainer.Trainer.__init__": [[8, 19], ["isinstance", "tensorflow.train.AdamOptimizer", "model.get_loss", "model.get_var_list", "model.get_global_step", "trainer.Trainer.opt.compute_gradients", "trainer.Trainer.opt.apply_gradients"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_loss", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_var_list", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_global_step"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "model", ")", ":", "\n", "    ", "assert", "isinstance", "(", "model", ",", "Model", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "config", ".", "init_lr", ")", "\n", "self", ".", "loss", "=", "model", ".", "get_loss", "(", ")", "\n", "self", ".", "var_list", "=", "model", ".", "get_var_list", "(", ")", "\n", "self", ".", "global_step", "=", "model", ".", "get_global_step", "(", ")", "\n", "self", ".", "summary", "=", "model", ".", "summary", "\n", "self", ".", "grads", "=", "self", ".", "opt", ".", "compute_gradients", "(", "self", ".", "loss", ",", "var_list", "=", "self", ".", "var_list", ")", "\n", "self", ".", "train_op", "=", "self", ".", "opt", ".", "apply_gradients", "(", "self", ".", "grads", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.trainer.Trainer.get_train_op": [[20, 22], ["None"], "methods", ["None"], ["", "def", "get_train_op", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.trainer.Trainer.step": [[23, 35], ["isinstance", "trainer.Trainer.model.get_feed_dict", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict"], ["", "def", "step", "(", "self", ",", "sess", ",", "batch", ",", "get_summary", "=", "False", ")", ":", "\n", "    ", "assert", "isinstance", "(", "sess", ",", "tf", ".", "Session", ")", "\n", "_", ",", "ds", "=", "batch", "\n", "feed_dict", "=", "self", ".", "model", ".", "get_feed_dict", "(", "ds", ",", "True", ")", "\n", "\n", "if", "get_summary", ":", "\n", "      ", "loss", ",", "summary", ",", "train_op", "=", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "summary", ",", "self", ".", "train_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "      ", "loss", ",", "train_op", "=", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "train_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "summary", "=", "None", "\n", "", "return", "loss", ",", "summary", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.trainer.MultiGPUTrainer.__init__": [[38, 68], ["isinstance", "tensorflow.train.AdamOptimizer", "model.get_var_list", "model.get_global_step", "enumerate", "my.tensorflow.average_gradients", "tensorflow.clip_by_global_norm", "trainer.MultiGPUTrainer.opt.apply_gradients", "tensorflow.name_scope", "tensorflow.device", "model.get_loss", "trainer.MultiGPUTrainer.opt.compute_gradients", "losses.append", "grads_list.append", "tensorflow.add_n", "len", "zip", "tensorflow.control_dependencies", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_var_list", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_global_step", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.average_gradients", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_loss"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "models", ")", ":", "\n", "    ", "model", "=", "models", "[", "0", "]", "\n", "assert", "isinstance", "(", "model", ",", "Model", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "config", ".", "init_lr", ")", "\n", "self", ".", "var_list", "=", "model", ".", "get_var_list", "(", "'model_network'", ")", "\n", "self", ".", "global_step", "=", "model", ".", "get_global_step", "(", ")", "\n", "self", ".", "summary", "=", "model", ".", "summary", "\n", "self", ".", "models", "=", "models", "\n", "losses", ",", "grads_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "gpu_idx", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "      ", "with", "tf", ".", "name_scope", "(", "\"grads_{}\"", ".", "format", "(", "gpu_idx", ")", ")", ",", "tf", ".", "device", "(", "\"/{}:{}\"", ".", "format", "(", "config", ".", "device_type", ",", "gpu_idx", ")", ")", ":", "\n", "        ", "loss", "=", "model", ".", "get_loss", "(", ")", "\n", "grads", "=", "self", ".", "opt", ".", "compute_gradients", "(", "loss", ",", "var_list", "=", "self", ".", "var_list", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "grads_list", ".", "append", "(", "grads", ")", "\n", "\n", "", "self", ".", "loss", "=", "tf", ".", "add_n", "(", "losses", ")", "/", "len", "(", "losses", ")", "\n", "self", ".", "grads", "=", "average_gradients", "(", "grads_list", ")", "\n", "\n", "grad_vars", "=", "[", "x", "[", "1", "]", "for", "x", "in", "self", ".", "grads", "]", "\n", "gradients", "=", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "grads", "]", "\n", "clipped", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "gradients", ",", "2", ")", "\n", "\n", "self", ".", "train_op", "=", "self", ".", "opt", ".", "apply_gradients", "(", "zip", "(", "clipped", ",", "grad_vars", ")", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "self", ".", "train_op", "]", ")", ":", "\n", "        ", "self", ".", "dummy", "=", "tf", ".", "constant", "(", "0", ",", "name", "=", "'dummy'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.trainer.MultiGPUTrainer.setup_session_partial_run": [[70, 72], ["sess.partial_run_setup"], "methods", ["None"], ["", "", "", "def", "setup_session_partial_run", "(", "self", ",", "sess", ",", "fetches", ",", "feeds", ")", ":", "\n", "    ", "sess", ".", "partial_run_setup", "(", "fetches", ",", "feeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.trainer.MultiGPUTrainer.step": [[74, 137], ["isinstance", "zip", "math.isnan", "feed_dict.update", "list", "enumerate", "sess.partial_run_setup", "enumerate", "sess.run", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "exit", "model.get_feed_dict", "feed_dict.keys", "zip", "model.assembler.get_sentence_ids", "sess.partial_run", "sess.run", "sess.partial_run", "sess.run", "len"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.BiAttnAssembler.get_sentence_ids"], ["", "def", "step", "(", "self", ",", "sess", ",", "batches", ",", "get_summary", "=", "False", ")", ":", "\n", "    ", "partial_run", "=", "False", "\n", "assert", "isinstance", "(", "sess", ",", "tf", ".", "Session", ")", "\n", "feed_dict", "=", "{", "}", "\n", "for", "batch", ",", "model", "in", "zip", "(", "batches", ",", "self", ".", "models", ")", ":", "\n", "      ", "_", ",", "ds", "=", "batch", "\n", "feed_dict", ".", "update", "(", "model", ".", "get_feed_dict", "(", "ds", ",", "True", ",", "sess", ")", ")", "\n", "\n", "", "candidate_spans", "=", "feed_dict", "[", "self", ".", "model", ".", "candidate_spans", "]", "\n", "candidate_span_y", "=", "feed_dict", "[", "self", ".", "model", ".", "candidate_span_y", "]", "\n", "\n", "if", "self", ".", "config", ".", "use_assembler", ":", "\n", "      ", "new_feed_dict", "=", "{", "}", "\n", "to_run", "=", "[", "]", "\n", "feeds", "=", "list", "(", "feed_dict", ".", "keys", "(", ")", ")", "\n", "for", "mid", ",", "model", "in", "enumerate", "(", "self", ".", "models", ")", ":", "\n", "        ", "to_run", "+=", "[", "model", ".", "mac_rnn_cell", ".", "qsub_topk_ids", ",", "model", ".", "mac_rnn_cell", ".", "qsub_topk_probs", ",", "model", ".", "mac_rnn_cell", ".", "qsub_all_probs", ",", "model", ".", "yp", ",", "model", ".", "yp_list", ",", "model", ".", "mac_rnn_cell", ".", "doc_attn", ",", "model", ".", "x_sents_len_reconstruct", "]", "\n", "feeds", "+=", "[", "model", ".", "selected_sent_ids", "]", "\n", "\n", "", "to_run", "+=", "[", "self", ".", "loss", ",", "self", ".", "summary", ",", "self", ".", "dummy", "]", "if", "get_summary", "else", "[", "self", ".", "loss", ",", "self", ".", "dummy", "]", "\n", "handle", "=", "sess", ".", "partial_run_setup", "(", "to_run", ",", "feeds", ")", "\n", "\n", "for", "mid", ",", "(", "batch", ",", "model", ")", "in", "enumerate", "(", "zip", "(", "batches", ",", "self", ".", "models", ")", ")", ":", "\n", "        ", "data_cand_word", "=", "batch", "[", "1", "]", ".", "data", "[", "'cand_word'", "]", "\n", "data_x", "=", "batch", "[", "1", "]", ".", "data", "[", "'x'", "]", "\n", "if", "len", "(", "data_x", ")", "<", "self", ".", "config", ".", "batch_size", ":", "\n", "          ", "data_cand_word", "=", "data_cand_word", "+", "data_cand_word", "\n", "data_x", "=", "data_x", "+", "data_x", "\n", "", "partial_run", "=", "True", "\n", "sents_ids", ",", "handle", ",", "_", ",", "_", "=", "model", ".", "assembler", ".", "get_sentence_ids", "(", "sess", ",", "data_cand_word", ",", "data_x", ",", "feed_dict", ",", "handle", ",", "mid", ")", "\n", "new_feed_dict", "[", "model", ".", "selected_sent_ids", "]", "=", "sents_ids", "\n", "\n", "", "", "if", "get_summary", ":", "\n", "      ", "if", "partial_run", ":", "\n", "        ", "loss", ",", "summary", ",", "train_op", "=", "sess", ".", "partial_run", "(", "handle", ",", "[", "self", ".", "loss", ",", "self", ".", "summary", ",", "self", ".", "dummy", "]", ",", "feed_dict", "=", "new_feed_dict", ")", "\n", "", "else", ":", "\n", "        ", "loss", ",", "summary", ",", "train_op", "=", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "summary", ",", "self", ".", "train_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "partial_run", ":", "\n", "        ", "loss", ",", "train_op", "=", "sess", ".", "partial_run", "(", "handle", ",", "[", "self", ".", "loss", ",", "self", ".", "dummy", "]", ",", "feed_dict", "=", "new_feed_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "loss", ",", "train_op", "=", "sess", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "train_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "summary", "=", "None", "\n", "", "if", "math", ".", "isnan", "(", "loss", ")", ":", "\n", "      ", "logits", ",", "g1", ",", "cand_mask", ",", "cand_emb", "=", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "logits", ",", "self", ".", "model", ".", "g1", ",", "self", ".", "model", ".", "cand_mask", ",", "self", ".", "model", ".", "cand_emb", "]", ",", "feed_dict", ")", "\n", "print", "(", "logits", ")", "\n", "print", "(", "candidate_spans", "[", "0", "]", ")", "\n", "print", "(", "candidate_span_y", ")", "\n", "print", "(", "\"mask: \"", ")", "\n", "print", "(", "cand_mask", "[", "0", "]", ")", "\n", "print", "(", "\"cand_emb: \"", ")", "\n", "print", "(", "cand_emb", "[", "0", "]", ")", "\n", "print", "(", "feed_dict", "[", "self", ".", "model", ".", "answer_doc_ids", "]", ")", "\n", "print", "(", "feed_dict", "[", "self", ".", "model", ".", "first_doc_ids", "]", ")", "\n", "print", "(", "batches", "[", "0", "]", "[", "1", "]", ".", "data", "[", "'ids'", "]", ")", "\n", "exit", "(", ")", "\n", "", "return", "loss", ",", "summary", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.trainer.MultiGPUTrainer.step_docExpl_ansProp": [[139, 197], ["isinstance", "zip", "math.isnan", "feed_dict.update", "list", "enumerate", "sess.partial_run_setup", "enumerate", "sess.run", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "exit", "model.get_feed_dict", "feed_dict.keys", "zip", "model.assembler.get_sentence_ids", "sess.partial_run", "sess.run", "sess.partial_run", "sess.run", "len"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.BiAttnAssembler.get_sentence_ids"], ["", "def", "step_docExpl_ansProp", "(", "self", ",", "sess", ",", "batches", ",", "get_summary", "=", "False", ")", ":", "\n", "    ", "assert", "isinstance", "(", "sess", ",", "tf", ".", "Session", ")", "\n", "feed_dict", "=", "{", "}", "\n", "for", "batch", ",", "model", "in", "zip", "(", "batches", ",", "self", ".", "models", ")", ":", "\n", "      ", "_", ",", "ds", "=", "batch", "\n", "feed_dict", ".", "update", "(", "model", ".", "get_feed_dict", "(", "ds", ",", "True", ",", "sess", ")", ")", "\n", "\n", "", "partial_run", "=", "False", "\n", "\n", "if", "self", ".", "config", ".", "use_assembler", "is", "not", "None", ":", "\n", "      ", "new_feed_dict", "=", "{", "}", "\n", "to_run", "=", "[", "]", "\n", "feeds", "=", "list", "(", "feed_dict", ".", "keys", "(", ")", ")", "\n", "for", "mid", ",", "model", "in", "enumerate", "(", "self", ".", "models", ")", ":", "\n", "        ", "to_run", "+=", "[", "model", ".", "mac_rnn_cell", ".", "qsub_topk_ids", ",", "model", ".", "mac_rnn_cell", ".", "qsub_topk_probs", ",", "model", ".", "mac_rnn_cell", ".", "qsub_all_probs", ",", "model", ".", "yp", ",", "model", ".", "yp_list", ",", "model", ".", "mac_rnn_cell", ".", "doc_attn", ",", "model", ".", "x_sents_len_reconstruct", "]", "\n", "feeds", "+=", "[", "model", ".", "selected_sent_ids", "]", "\n", "\n", "", "to_run", "+=", "[", "self", ".", "loss_1", ",", "self", ".", "summary", ",", "self", ".", "dummy_1", "]", "if", "get_summary", "else", "[", "self", ".", "loss_1", ",", "self", ".", "dummy_1", "]", "\n", "handle", "=", "sess", ".", "partial_run_setup", "(", "to_run", ",", "feeds", ")", "\n", "\n", "for", "mid", ",", "(", "batch", ",", "model", ")", "in", "enumerate", "(", "zip", "(", "batches", ",", "self", ".", "models", ")", ")", ":", "\n", "        ", "data_cand_word", "=", "batch", "[", "1", "]", ".", "data", "[", "'cand_word'", "]", "\n", "data_x", "=", "batch", "[", "1", "]", ".", "data", "[", "'x'", "]", "\n", "if", "len", "(", "data_x", ")", "<", "self", ".", "config", ".", "batch_size", ":", "\n", "          ", "data_cand_word", "=", "data_cand_word", "+", "data_cand_word", "\n", "data_x", "=", "data_x", "+", "data_x", "\n", "", "partial_run", "=", "True", "\n", "\n", "sents_ids", ",", "handle", ",", "_", ",", "_", "=", "model", ".", "assembler", ".", "get_sentence_ids", "(", "sess", ",", "data_cand_word", ",", "data_x", ",", "feed_dict", ",", "handle", ",", "mid", ")", "\n", "new_feed_dict", "[", "model", ".", "selected_sent_ids", "]", "=", "sents_ids", "\n", "\n", "", "", "if", "get_summary", ":", "\n", "      ", "if", "partial_run", ":", "\n", "        ", "loss", ",", "summary", ",", "train_op", "=", "sess", ".", "partial_run", "(", "handle", ",", "[", "self", ".", "loss_1", ",", "self", ".", "summary", ",", "self", ".", "dummy_1", "]", ",", "feed_dict", "=", "new_feed_dict", ")", "\n", "", "else", ":", "\n", "        ", "loss", ",", "summary", ",", "train_op", "=", "sess", ".", "run", "(", "[", "self", ".", "loss_1", ",", "self", ".", "summary", ",", "self", ".", "train_op_1", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "partial_run", ":", "\n", "        ", "loss", ",", "train_op", "=", "sess", ".", "partial_run", "(", "handle", ",", "[", "self", ".", "loss_1", ",", "self", ".", "dummy_1", "]", ",", "feed_dict", "=", "new_feed_dict", ")", "\n", "", "else", ":", "\n", "        ", "loss", ",", "train_op", "=", "sess", ".", "run", "(", "[", "self", ".", "loss_1", ",", "self", ".", "train_op_1", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "summary", "=", "None", "\n", "\n", "", "if", "math", ".", "isnan", "(", "loss", ")", ":", "\n", "      ", "logits", ",", "g1", ",", "cand_mask", ",", "cand_emb", "=", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "logits", ",", "self", ".", "model", ".", "g1", ",", "self", ".", "model", ".", "cand_mask", ",", "self", ".", "model", ".", "cand_emb", "]", ",", "feed_dict", ")", "\n", "print", "(", "logits", ")", "\n", "print", "(", "candidate_spans", "[", "0", "]", ")", "\n", "print", "(", "candidate_span_y", ")", "\n", "print", "(", "\"mask: \"", ")", "\n", "print", "(", "cand_mask", "[", "0", "]", ")", "\n", "print", "(", "\"cand_emb: \"", ")", "\n", "print", "(", "cand_emb", "[", "0", "]", ")", "\n", "print", "(", "feed_dict", "[", "self", ".", "model", ".", "answer_doc_ids", "]", ")", "\n", "print", "(", "feed_dict", "[", "self", ".", "model", ".", "first_doc_ids", "]", ")", "\n", "print", "(", "batches", "[", "0", "]", "[", "1", "]", ".", "data", "[", "'ids'", "]", ")", "\n", "exit", "(", ")", "\n", "", "return", "loss", ",", "summary", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.trainer.MultiGPUTrainer.step_assembler": [[199, 263], ["isinstance", "zip", "math.isnan", "feed_dict.update", "list", "enumerate", "sess.partial_run_setup", "enumerate", "sess.run", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "exit", "model.get_feed_dict", "feed_dict.keys", "zip", "model.assembler.get_sentence_ids", "sess.partial_run", "sess.run", "sess.partial_run", "sess.run", "len"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.BiAttnAssembler.get_sentence_ids"], ["", "def", "step_assembler", "(", "self", ",", "sess", ",", "batches", ",", "get_summary", "=", "False", ")", ":", "\n", "    ", "partial_run", "=", "False", "\n", "assert", "isinstance", "(", "sess", ",", "tf", ".", "Session", ")", "\n", "feed_dict", "=", "{", "}", "\n", "for", "batch", ",", "model", "in", "zip", "(", "batches", ",", "self", ".", "models", ")", ":", "\n", "      ", "_", ",", "ds", "=", "batch", "\n", "feed_dict", ".", "update", "(", "model", ".", "get_feed_dict", "(", "ds", ",", "True", ",", "sess", ")", ")", "\n", "\n", "", "candidate_spans", "=", "feed_dict", "[", "self", ".", "model", ".", "candidate_spans", "]", "\n", "candidate_span_y", "=", "feed_dict", "[", "self", ".", "model", ".", "candidate_span_y", "]", "\n", "\n", "if", "self", ".", "config", ".", "use_assembler", ":", "\n", "      ", "new_feed_dict", "=", "{", "}", "\n", "to_run", "=", "[", "]", "\n", "feeds", "=", "list", "(", "feed_dict", ".", "keys", "(", ")", ")", "\n", "for", "mid", ",", "model", "in", "enumerate", "(", "self", ".", "models", ")", ":", "\n", "        ", "to_run", "+=", "[", "model", ".", "mac_rnn_cell", ".", "qsub_topk_ids", ",", "model", ".", "mac_rnn_cell", ".", "qsub_topk_probs", ",", "model", ".", "mac_rnn_cell", ".", "qsub_all_probs", ",", "model", ".", "yp", ",", "model", ".", "yp_list", ",", "model", ".", "mac_rnn_cell", ".", "doc_attn", ",", "model", ".", "x_sents_len_reconstruct", "]", "\n", "feeds", "+=", "[", "model", ".", "selected_sent_ids", "]", "\n", "\n", "", "to_run", "+=", "[", "self", ".", "loss_2", ",", "self", ".", "summary", ",", "self", ".", "dummy", "]", "if", "get_summary", "else", "[", "self", ".", "loss_2", ",", "self", ".", "dummy", "]", "\n", "handle", "=", "sess", ".", "partial_run_setup", "(", "to_run", ",", "feeds", ")", "\n", "\n", "for", "mid", ",", "(", "batch", ",", "model", ")", "in", "enumerate", "(", "zip", "(", "batches", ",", "self", ".", "models", ")", ")", ":", "\n", "        ", "data_cand_word", "=", "batch", "[", "1", "]", ".", "data", "[", "'cand_word'", "]", "\n", "data_x", "=", "batch", "[", "1", "]", ".", "data", "[", "'x'", "]", "\n", "if", "len", "(", "data_x", ")", "<", "self", ".", "config", ".", "batch_size", ":", "\n", "          ", "data_cand_word", "=", "data_cand_word", "+", "data_cand_word", "\n", "data_x", "=", "data_x", "+", "data_x", "\n", "", "partial_run", "=", "True", "\n", "\n", "sents_ids", ",", "handle", ",", "_", ",", "_", "=", "model", ".", "assembler", ".", "get_sentence_ids", "(", "sess", ",", "data_cand_word", ",", "data_x", ",", "feed_dict", ",", "handle", ",", "mid", ")", "\n", "new_feed_dict", "[", "model", ".", "selected_sent_ids", "]", "=", "sents_ids", "\n", "\n", "", "", "if", "get_summary", ":", "\n", "      ", "if", "partial_run", ":", "\n", "        ", "loss", ",", "summary", ",", "train_op", "=", "sess", ".", "partial_run", "(", "handle", ",", "[", "self", ".", "loss_2", ",", "self", ".", "summary", ",", "self", ".", "dummy", "]", ",", "feed_dict", "=", "new_feed_dict", ")", "\n", "", "else", ":", "\n", "        ", "loss", ",", "summary", ",", "train_op", "=", "sess", ".", "run", "(", "[", "self", ".", "loss_2", ",", "self", ".", "summary", ",", "self", ".", "train_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "partial_run", ":", "\n", "        ", "loss", ",", "train_op", "=", "sess", ".", "partial_run", "(", "handle", ",", "[", "self", ".", "loss_2", ",", "self", ".", "dummy", "]", ",", "feed_dict", "=", "new_feed_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "loss", ",", "train_op", "=", "sess", ".", "run", "(", "[", "self", ".", "loss_2", ",", "self", ".", "train_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "summary", "=", "None", "\n", "", "if", "math", ".", "isnan", "(", "loss", ")", ":", "\n", "      ", "logits", ",", "g1", ",", "cand_mask", ",", "cand_emb", "=", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "logits", ",", "self", ".", "model", ".", "g1", ",", "self", ".", "model", ".", "cand_mask", ",", "self", ".", "model", ".", "cand_emb", "]", ",", "feed_dict", ")", "\n", "print", "(", "logits", ")", "\n", "print", "(", "candidate_spans", "[", "0", "]", ")", "\n", "print", "(", "candidate_span_y", ")", "\n", "print", "(", "\"mask: \"", ")", "\n", "print", "(", "cand_mask", "[", "0", "]", ")", "\n", "print", "(", "\"cand_emb: \"", ")", "\n", "print", "(", "cand_emb", "[", "0", "]", ")", "\n", "print", "(", "feed_dict", "[", "self", ".", "model", ".", "answer_doc_ids", "]", ")", "\n", "print", "(", "feed_dict", "[", "self", ".", "model", ".", "first_doc_ids", "]", ")", "\n", "print", "(", "batches", "[", "0", "]", "[", "1", "]", ".", "data", "[", "'ids'", "]", ")", "\n", "exit", "(", ")", "\n", "", "return", "loss", ",", "summary", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.__init__": [[15, 21], ["tensorflow.train.Saver", "os.path.join"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "model", ")", ":", "\n", "    ", "self", ".", "config", "=", "config", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "config", ".", "max_to_keep", ")", "\n", "self", ".", "writer", "=", "None", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "save_dir", ",", "config", ".", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.initialize": [[22, 29], ["sess.run", "tensorflow.global_variables_initializer", "graph_handler.GraphHandler._load", "tensorflow.summary.FileWriter", "tensorflow.get_default_graph"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler._load"], ["", "def", "initialize", "(", "self", ",", "sess", ")", ":", "\n", "    ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "if", "self", ".", "config", ".", "load", ":", "\n", "      ", "self", ".", "_load", "(", "sess", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "mode", "==", "'train'", ":", "\n", "      ", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "config", ".", "log_dir", ",", "graph", "=", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.save": [[30, 33], ["tensorflow.train.Saver", "tensorflow.train.Saver.save"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.save"], ["", "", "def", "save", "(", "self", ",", "sess", ",", "global_step", "=", "None", ")", ":", "\n", "    ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "self", ".", "config", ".", "max_to_keep", ")", "\n", "saver", ".", "save", "(", "sess", ",", "self", ".", "save_path", ",", "global_step", "=", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler._load": [[34, 62], ["tensorflow.train.Saver", "print", "tensorflow.train.Saver.restore", "tensorflow.trainable_variables", "os.path.join", "tensorflow.train.get_checkpoint_state", "var.name.split", "tensorflow.global_variables", "var.name.split", "tensorflow.global_variables", "var.name.split", "ema.average_name", "var.name.split"], "methods", ["None"], ["", "def", "_load", "(", "self", ",", "sess", ")", ":", "\n", "    ", "config", "=", "self", ".", "config", "\n", "\n", "if", "config", ".", "restore_non_assembler_model", ":", "\n", "      ", "vars_", "=", "{", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ":", "var", "for", "var", "in", "tf", ".", "global_variables", "(", ")", "if", "'assembler'", "not", "in", "var", ".", "name", "}", "\n", "", "else", ":", "\n", "      ", "vars_", "=", "{", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ":", "var", "for", "var", "in", "tf", ".", "global_variables", "(", ")", "}", "\n", "", "if", "config", ".", "load_ema", "and", "config", ".", "mode", "!=", "'train'", ":", "\n", "      ", "ema", "=", "self", ".", "model", ".", "var_ema", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "        ", "if", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", "not", "in", "[", "*", "vars_", "]", ":", "\n", "          ", "continue", "\n", "", "else", ":", "\n", "          ", "del", "vars_", "[", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", "]", "\n", "vars_", "[", "ema", ".", "average_name", "(", "var", ")", "]", "=", "var", "\n", "\n", "", "", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "vars_", ",", "max_to_keep", "=", "config", ".", "max_to_keep", ")", "\n", "if", "config", ".", "load_path", ":", "\n", "      ", "save_path", "=", "config", ".", "load_path", "\n", "", "elif", "config", ".", "load_step", ">", "0", ":", "\n", "      ", "save_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "save_dir", ",", "\"{}-{}\"", ".", "format", "(", "config", ".", "model_name", ",", "config", ".", "load_step", ")", ")", "\n", "", "else", ":", "\n", "      ", "save_dir", "=", "config", ".", "save_dir", "\n", "checkpoint", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "save_dir", ")", "\n", "assert", "checkpoint", "is", "not", "None", ",", "\"cannot load checkpoint at {}\"", ".", "format", "(", "save_dir", ")", "\n", "save_path", "=", "checkpoint", ".", "model_checkpoint_path", "\n", "", "print", "(", "\"Loading saved model from {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.add_summary": [[63, 65], ["graph_handler.GraphHandler.writer.add_summary"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.add_summary"], ["", "def", "add_summary", "(", "self", ",", "summary", ",", "global_step", ")", ":", "\n", "    ", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.add_summaries": [[66, 69], ["graph_handler.GraphHandler.add_summary"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.add_summary"], ["", "def", "add_summaries", "(", "self", ",", "summaries", ",", "global_step", ")", ":", "\n", "    ", "for", "summary", "in", "summaries", ":", "\n", "      ", "self", ".", "add_summary", "(", "summary", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.dump_eval": [[70, 80], ["isinstance", "os.path.join", "gzip.open", "pickle.dump", "os.path.join", "open", "json.dump", "my.utils.short_floats", "str().zfill", "str().zfill", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.short_floats"], ["", "", "def", "dump_eval", "(", "self", ",", "e", ",", "precision", "=", "2", ",", "path", "=", "None", ")", ":", "\n", "    ", "assert", "isinstance", "(", "e", ",", "Evaluation", ")", "\n", "if", "self", ".", "config", ".", "dump_pickle", ":", "\n", "      ", "path", "=", "path", "or", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "eval_dir", ",", "\"{}-{}.pklz\"", ".", "format", "(", "e", ".", "data_type", ",", "str", "(", "e", ".", "global_step", ")", ".", "zfill", "(", "6", ")", ")", ")", "\n", "with", "gzip", ".", "open", "(", "path", ",", "'wb'", ",", "compresslevel", "=", "3", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "e", ".", "dict", ",", "fh", ")", "\n", "", "", "else", ":", "\n", "      ", "path", "=", "path", "or", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "eval_dir", ",", "\"{}-{}.json\"", ".", "format", "(", "e", ".", "data_type", ",", "str", "(", "e", ".", "global_step", ")", ".", "zfill", "(", "6", ")", ")", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "fh", ":", "\n", "        ", "json", ".", "dump", "(", "short_floats", "(", "e", ".", "dict", ",", "precision", ")", ",", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.graph_handler.GraphHandler.dump_answer": [[81, 86], ["isinstance", "os.path.join", "open", "json.dump", "str().zfill", "str"], "methods", ["None"], ["", "", "", "def", "dump_answer", "(", "self", ",", "e", ",", "path", "=", "None", ")", ":", "\n", "    ", "assert", "isinstance", "(", "e", ",", "Evaluation", ")", "\n", "path", "=", "path", "or", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "answer_dir", ",", "\"{}-{}.json\"", ".", "format", "(", "e", ".", "data_type", ",", "str", "(", "e", ".", "global_step", ")", ".", "zfill", "(", "6", ")", ")", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "fh", ":", "\n", "      ", "json", ".", "dump", "(", "e", ".", "id2answer_dict", ",", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.__init__": [[32, 110], ["tensorflow.get_variable", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.Model._build_forward", "model.Model._build_loss", "tensorflow.summary.merge_all", "tensorflow.summary.merge", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "model.Model._build_var_ema", "tensorflow.get_collection", "tensorflow.constant_initializer", "model.Model._build_ema"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model._build_forward", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model._build_loss", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model._build_var_ema", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model._build_ema"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "scope", ",", "emb_mat", ",", "rep", "=", "True", ")", ":", "\n", "    ", "self", ".", "scope", "=", "scope", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "emb_mat", "=", "emb_mat", "\n", "self", ".", "global_step", "=", "tf", ".", "get_variable", "(", "'global_step'", ",", "shape", "=", "[", "]", ",", "dtype", "=", "'int32'", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "if", "config", ".", "split_supports", "is", "True", ":", "\n", "      ", "N", ",", "M", ",", "JX", ",", "JQ", ",", "VW", ",", "VC", ",", "W", "=", "config", ".", "batch_size", ",", "1", ",", "config", ".", "max_para_size", ",", "config", ".", "max_ques_size", ",", "config", ".", "word_vocab_size", ",", "config", ".", "char_vocab_size", ",", "config", ".", "max_word_size", "\n", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "None", ",", "None", ",", "None", "]", ",", "name", "=", "'x'", ")", "\n", "self", ".", "cx", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "None", ",", "None", ",", "None", ",", "W", "]", ",", "name", "=", "'cx'", ")", "\n", "self", ".", "x_mask", "=", "tf", ".", "placeholder", "(", "'bool'", ",", "[", "None", ",", "None", ",", "None", "]", ",", "name", "=", "'x_mask'", ")", "\n", "self", ".", "x_sents_len", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "None", ",", "M", ",", "10", "]", ",", "name", "=", "'x_sents_len'", ")", "\n", "", "else", ":", "\n", "# Define forward inputs here", "\n", "      ", "N", ",", "M", ",", "JX", ",", "JQ", ",", "VW", ",", "VC", ",", "W", "=", "config", ".", "batch_size", ",", "config", ".", "max_num_sents", ",", "config", ".", "max_sent_size", ",", "config", ".", "max_ques_size", ",", "config", ".", "word_vocab_size", ",", "config", ".", "char_vocab_size", ",", "config", ".", "max_word_size", "\n", "\n", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", ",", "None", "]", ",", "name", "=", "'x'", ")", "\n", "self", ".", "cx", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", ",", "None", ",", "W", "]", ",", "name", "=", "'cx'", ")", "\n", "self", ".", "x_mask", "=", "tf", ".", "placeholder", "(", "'bool'", ",", "[", "N", ",", "None", ",", "None", "]", ",", "name", "=", "'x_mask'", ")", "\n", "\n", "", "self", ".", "q", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", "]", ",", "name", "=", "'q'", ")", "\n", "self", ".", "cq", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", ",", "W", "]", ",", "name", "=", "'cq'", ")", "\n", "self", ".", "q_sub", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", "]", ",", "name", "=", "'q_sub'", ")", "\n", "self", ".", "cq_sub", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", ",", "W", "]", ",", "name", "=", "'cq_sub'", ")", "\n", "self", ".", "q_mask", "=", "tf", ".", "placeholder", "(", "'bool'", ",", "[", "N", ",", "None", "]", ",", "name", "=", "'q_mask'", ")", "\n", "self", ".", "q_sub_mask", "=", "tf", ".", "placeholder", "(", "'bool'", ",", "[", "N", ",", "None", "]", ",", "name", "=", "'q_sub_mask'", ")", "\n", "self", ".", "y", "=", "tf", ".", "placeholder", "(", "'bool'", ",", "[", "N", ",", "None", ",", "None", "]", ",", "name", "=", "'y'", ")", "\n", "self", ".", "y2", "=", "tf", ".", "placeholder", "(", "'bool'", ",", "[", "N", ",", "None", ",", "None", "]", ",", "name", "=", "'y2'", ")", "\n", "self", ".", "wy", "=", "tf", ".", "placeholder", "(", "'bool'", ",", "[", "N", ",", "None", ",", "None", "]", ",", "name", "=", "'wy'", ")", "\n", "self", ".", "is_train", "=", "tf", ".", "placeholder", "(", "'bool'", ",", "[", "]", ",", "name", "=", "'is_train'", ")", "\n", "self", ".", "new_emb_mat", "=", "tf", ".", "placeholder", "(", "'float'", ",", "[", "None", ",", "config", ".", "word_emb_size", "]", ",", "name", "=", "'new_emb_mat'", ")", "\n", "self", ".", "na", "=", "tf", ".", "placeholder", "(", "'bool'", ",", "[", "N", "]", ",", "name", "=", "'na'", ")", "\n", "\n", "if", "(", "config", ".", "reasoning_layer", "is", "not", "None", "and", "config", ".", "mac_prediction", "==", "'candidates'", ")", ":", "\n", "      ", "self", ".", "candidate_spans", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", ",", "None", ",", "2", "]", ",", "name", "=", "'cand_spans'", ")", "\n", "self", ".", "candidate_span_y", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", "]", ",", "name", "=", "'cand_span_y'", ")", "\n", "self", ".", "num_exceed_cand", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", ",", "None", "]", ",", "name", "=", "'num_exceed_cand'", ")", "\n", "\n", "", "self", ".", "x_group", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", "]", ",", "name", "=", "'x_group'", ")", "# Define how sentences could be grouped into batch", "\n", "\n", "if", "config", ".", "supervise_first_doc", ":", "\n", "      ", "self", ".", "first_doc_ids", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", "]", ",", "name", "=", "'first_doc_ids'", ")", "\n", "\n", "", "if", "config", ".", "use_assembler", ":", "\n", "      ", "self", ".", "selected_sent_ids", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "config", ".", "batch_size", ",", "config", ".", "num_hops", "]", ",", "name", "=", "'selected_sent_ids'", ")", "\n", "\n", "", "self", ".", "answer_doc_ids", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", "]", ",", "name", "=", "'answer_doc_ids'", ")", "\n", "self", ".", "answer_word_ids", "=", "tf", ".", "placeholder", "(", "'int32'", ",", "[", "N", ",", "None", "]", ",", "name", "=", "'answer_word_ids'", ")", "\n", "\n", "self", ".", "period_id", "=", "None", "\n", "\n", "# Define misc", "\n", "self", ".", "tensor_dict", "=", "{", "}", "\n", "\n", "# Forward outputs / loss inputs", "\n", "self", ".", "logits", "=", "None", "\n", "self", ".", "yp", "=", "None", "\n", "self", ".", "var_list", "=", "None", "\n", "self", ".", "na_prob", "=", "None", "\n", "\n", "# Loss outputs", "\n", "self", ".", "loss", "=", "None", "\n", "\n", "self", ".", "_build_forward", "(", ")", "\n", "self", ".", "_build_loss", "(", ")", "\n", "self", ".", "var_ema", "=", "None", "\n", "if", "rep", ":", "\n", "      ", "self", ".", "_build_var_ema", "(", ")", "\n", "if", "config", ".", "mode", "==", "'train'", ":", "\n", "        ", "self", ".", "_build_ema", "(", ")", "\n", "\n", "", "", "self", ".", "summary", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "summary", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "\"summaries\"", ",", "scope", "=", "self", ".", "scope", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model._build_forward": [[112, 566], ["tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.BasicLSTMCell", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.BasicLSTMCell", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.BasicLSTMCell", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.BasicLSTMCell", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "my.tensorflow.rnn_cell.SwitchableDropoutWrapper", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.sigmoid", "tensorflow.variable_scope", "my.tensorflow.nn.highway_network", "tensorflow.get_variable_scope().reuse_variables", "my.tensorflow.nn.highway_network", "my.tensorflow.nn.get_logits", "my.tensorflow.nn.softsel", "tensorflow.tile", "tensorflow.concat", "my.tensorflow.nn.get_logits", "tensorflow.get_variable", "tensorflow.tile", "tensorflow.concat", "tensorflow.nn.softmax", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.concat", "tensorflow.nn.softmax", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.get_variable", "tensorflow.variable_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "list", "list", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.concat", "my.tensorflow.nn.highway_network", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.get_variable_scope().reuse_variables", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.concat", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.concat", "my.tensorflow.nn.select_topn_doc_idx", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "my.tensorflow.nn.reconstruct_batches", "my.tensorflow.nn.reconstruct_batches", "reasoning_layers.mac_layer.HierarchicalAttnMACRnn", "reasoning_layers.mac_layer.MACRnn", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "my.tensorflow.nn.get_logits", "tensorflow.nn.softmax", "tensorflow.einsum", "tensorflow.squeeze", "my.tensorflow.nn.span_to_avg_emb", "tensorflow.squeeze", "my.tensorflow.nn.get_logits", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.reshape", "tensorflow.slice", "tensorflow.slice", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "map", "map", "sum", "tensorflow.variable_scope", "my.tensorflow.nn.multi_conv1d", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.get_variable_scope", "tensorflow.variable_scope", "my.tensorflow.ops.bi_cudnn_rnn_encoder", "model.Model.", "tensorflow.get_variable_scope().reuse_variables", "my.tensorflow.ops.bi_cudnn_rnn_encoder", "tensorflow.variable_scope", "my.tensorflow.ops.bi_cudnn_rnn_encoder", "tensorflow.variable_scope", "my.tensorflow.ops.bi_cudnn_rnn_encoder", "tensorflow.expand_dims", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.get_variable_scope().reuse_variables", "my.tensorflow.rnn.bidirectional_dynamic_rnn", "tensorflow.concat", "range", "tensorflow.gather", "tensorflow.gather", "model.attention_layer", "tensorflow.get_variable", "tensorflow.get_variable", "range", "tensorflow.stack", "my.tensorflow.nn.reconstruct_batchesV2", "my.tensorflow.nn.reconstruct_batchesV2", "model.attention_layer", "model.attention_layer", "model.attention_layer", "model.attention_layer", "my.tensorflow.nn.span_to_avg_emb", "reasoning_layers.mac_layer.dynamic_mac_rnn", "my.tensorflow.nn.get_logits", "tensorflow.shape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "my.tensorflow.nn.span_to_avg_emb", "reasoning_layers.mac_layer.dynamic_mac_rnn", "my.tensorflow.nn.get_logits", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.variable_scope", "my.tensorflow.ops.bi_cudnn_rnn_encoder", "tensorflow.expand_dims", "tensorflow.variable_scope", "my.tensorflow.ops.bi_cudnn_rnn_encoder", "tensorflow.expand_dims", "tensorflow.variable_scope", "tensorflow.einsum", "tensorflow.tile", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.variable_scope", "tensorflow.squeeze", "my.tensorflow.ops.bi_cudnn_rnn_encoder", "tensorflow.expand_dims", "tensorflow.concat", "config.out_channel_dims.split", "config.filter_heights.split", "tensorflow.get_variable_scope().reuse_variables", "my.tensorflow.nn.multi_conv1d", "my.tensorflow.nn.multi_conv1d", "tensorflow.reshape", "tensorflow.expand_dims", "model.Model.", "tensorflow.squeeze", "tensorflow.squeeze", "model.Model.", "tensorflow.reduce_mean", "my.tensorflow.ops.bi_cudnn_rnn_encoder", "model.Model.", "tensorflow.get_variable_scope", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.einsum", "tensorflow.cond", "tensorflow.stack.append", "tensorflow.shape", "range", "attention_layer.get_shape", "tensorflow.concat.get_shape", "tensorflow.shape", "reasoning_layers.mac_layer.dynamic_mac_rnn", "my.tensorflow.nn.get_logits", "my.tensorflow.nn.get_logits", "reasoning_layers.mac_layer.dynamic_mac_rnn", "my.tensorflow.nn.softsel", "tensorflow.tile", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.concat", "tensorflow.squeeze", "my.tensorflow.nn.multi_conv1d", "my.tensorflow.nn.multi_conv1d", "my.tensorflow.get_initializer", "tensorflow.get_variable_scope", "tensorflow.expand_dims", "tensorflow.squeeze", "tensorflow.expand_dims", "tensorflow.get_variable_scope", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.zeros_like", "my.tensorflow.nn.get_logits", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "model.Model.yp_list.append", "model.Model.logits_list.append", "reasoning_layers.assembler.BiAttnAssembler", "model.Model.assembler.build_forward", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.nn.relu", "tensorflow.get_variable_scope", "tensorflow.squeeze", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.highway_network", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.highway_network", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softsel", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.highway_network", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.select_topn_doc_idx", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.reconstruct_batches", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.reconstruct_batches", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.span_to_avg_emb", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.multi_conv1d", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_rnn_encoder", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_rnn_encoder", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_rnn_encoder", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_rnn_encoder", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.attention_layer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.reconstruct_batchesV2", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.reconstruct_batchesV2", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.attention_layer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.attention_layer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.attention_layer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.attention_layer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.span_to_avg_emb", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.dynamic_mac_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.span_to_avg_emb", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.dynamic_mac_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_rnn_encoder", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_rnn_encoder", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_rnn_encoder", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.multi_conv1d", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.multi_conv1d", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_rnn_encoder", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.dynamic_mac_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.mac_layer.dynamic_mac_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softsel", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.multi_conv1d", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.multi_conv1d", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.get_initializer", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.BiAttnAssembler.build_forward"], ["", "def", "_build_forward", "(", "self", ")", ":", "\n", "    ", "config", "=", "self", ".", "config", "\n", "\n", "N", ",", "M", ",", "JX", ",", "JQ", ",", "VW", ",", "VC", ",", "d", ",", "W", "=", "config", ".", "batch_size", ",", "config", ".", "max_num_sents", ",", "config", ".", "max_sent_size", ",", "config", ".", "max_ques_size", ",", "config", ".", "word_vocab_size", ",", "config", ".", "char_vocab_size", ",", "config", ".", "hidden_size", ",", "config", ".", "max_word_size", "\n", "if", "config", ".", "split_supports", ":", "\n", "      ", "M", "=", "1", "\n", "", "JX", "=", "tf", ".", "shape", "(", "self", ".", "x", ")", "[", "2", "]", "\n", "JQ", "=", "tf", ".", "shape", "(", "self", ".", "q", ")", "[", "1", "]", "\n", "JQ_sub", "=", "tf", ".", "shape", "(", "self", ".", "q_sub", ")", "[", "1", "]", "\n", "\n", "M", "=", "tf", ".", "shape", "(", "self", ".", "x", ")", "[", "1", "]", "\n", "dc", ",", "dw", ",", "dco", "=", "config", ".", "char_emb_size", ",", "config", ".", "word_emb_size", ",", "config", ".", "char_out_size", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"emb\"", ")", ":", "\n", "      ", "if", "config", ".", "use_char_emb", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"emb_var\"", ")", ",", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "          ", "char_emb_mat", "=", "tf", ".", "get_variable", "(", "\"char_emb_mat\"", ",", "shape", "=", "[", "VC", ",", "dc", "]", ",", "dtype", "=", "'float'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"char\"", ")", ":", "\n", "          ", "Acx", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "char_emb_mat", ",", "self", ".", "cx", ")", "# [N, M, JX, W, dc]", "\n", "Acq", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "char_emb_mat", ",", "self", ".", "cq", ")", "# [N, JQ, W, dc]      ", "\n", "\n", "Acx", "=", "tf", ".", "reshape", "(", "Acx", ",", "[", "-", "1", ",", "JX", ",", "W", ",", "dc", "]", ")", "\n", "Acq", "=", "tf", ".", "reshape", "(", "Acq", ",", "[", "-", "1", ",", "JQ", ",", "W", ",", "dc", "]", ")", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "            ", "Acq_sub", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "char_emb_mat", ",", "self", ".", "cq_sub", ")", "# [N, JQ, W, dc]", "\n", "Acq_sub", "=", "tf", ".", "reshape", "(", "Acq_sub", ",", "[", "-", "1", ",", "JQ_sub", ",", "W", ",", "dc", "]", ")", "\n", "\n", "", "filter_sizes", "=", "list", "(", "map", "(", "int", ",", "config", ".", "out_channel_dims", ".", "split", "(", "','", ")", ")", ")", "\n", "heights", "=", "list", "(", "map", "(", "int", ",", "config", ".", "filter_heights", ".", "split", "(", "','", ")", ")", ")", "\n", "assert", "sum", "(", "filter_sizes", ")", "==", "dco", ",", "(", "filter_sizes", ",", "dco", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"conv\"", ")", ":", "\n", "            ", "xx", "=", "multi_conv1d", "(", "Acx", ",", "filter_sizes", ",", "heights", ",", "\"VALID\"", ",", "self", ".", "is_train", ",", "config", ".", "keep_prob", ",", "scope", "=", "\"xx\"", ")", "\n", "if", "config", ".", "share_cnn_weights", ":", "\n", "              ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "qq", "=", "multi_conv1d", "(", "Acq", ",", "filter_sizes", ",", "heights", ",", "\"VALID\"", ",", "self", ".", "is_train", ",", "config", ".", "keep_prob", ",", "scope", "=", "\"xx\"", ")", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "                ", "qq_sub", "=", "multi_conv1d", "(", "Acq_sub", ",", "filter_sizes", ",", "heights", ",", "\"VALID\"", ",", "self", ".", "is_train", ",", "config", ".", "keep_prob", ",", "scope", "=", "\"xx\"", ")", "\n", "\n", "", "", "else", ":", "\n", "              ", "qq", "=", "multi_conv1d", "(", "Acq", ",", "filter_sizes", ",", "heights", ",", "\"VALID\"", ",", "self", ".", "is_train", ",", "config", ".", "keep_prob", ",", "scope", "=", "\"qq\"", ")", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "                ", "qq_sub", "=", "multi_conv1d", "(", "Acq_sub", ",", "filter_sizes", ",", "heights", ",", "\"VALID\"", ",", "self", ".", "is_train", ",", "config", ".", "keep_prob", ",", "scope", "=", "\"qq\"", ")", "\n", "\n", "", "", "xx", "=", "tf", ".", "reshape", "(", "xx", ",", "[", "-", "1", ",", "M", ",", "JX", ",", "dco", "]", ")", "\n", "qq", "=", "tf", ".", "reshape", "(", "qq", ",", "[", "-", "1", ",", "JQ", ",", "dco", "]", ")", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "              ", "qq_sub", "=", "tf", ".", "reshape", "(", "qq_sub", ",", "[", "-", "1", ",", "JQ_sub", ",", "dco", "]", ")", "\n", "\n", "\n", "", "", "", "", "if", "config", ".", "use_word_emb", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"emb_var\"", ")", ",", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "          ", "if", "config", ".", "mode", "==", "'train'", ":", "\n", "            ", "word_emb_mat", "=", "tf", ".", "get_variable", "(", "\"word_emb_mat\"", ",", "dtype", "=", "'float'", ",", "shape", "=", "[", "VW", ",", "dw", "]", ",", "initializer", "=", "get_initializer", "(", "self", ".", "emb_mat", ")", ")", "\n", "", "else", ":", "\n", "            ", "word_emb_mat", "=", "tf", ".", "get_variable", "(", "\"word_emb_mat\"", ",", "shape", "=", "[", "VW", ",", "dw", "]", ",", "dtype", "=", "'float'", ")", "\n", "", "if", "config", ".", "use_glove_for_unk", ":", "\n", "            ", "word_emb_mat", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "word_emb_mat", ",", "self", ".", "new_emb_mat", "]", ")", "\n", "\n", "", "", "with", "tf", ".", "name_scope", "(", "\"word\"", ")", ":", "\n", "          ", "Ax", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "word_emb_mat", ",", "self", ".", "x", ")", "# [N, M, JX, d]", "\n", "Aq", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "word_emb_mat", ",", "self", ".", "q", ")", "# [N, JQ, d]", "\n", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "            ", "Aq_sub", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "word_emb_mat", ",", "self", ".", "q_sub", ")", "\n", "self", ".", "tensor_dict", "[", "'q_sub'", "]", "=", "Aq_sub", "\n", "\n", "", "self", ".", "tensor_dict", "[", "'x'", "]", "=", "Ax", "\n", "self", ".", "tensor_dict", "[", "'q'", "]", "=", "Aq", "\n", "", "if", "config", ".", "use_char_emb", ":", "\n", "          ", "xx", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "xx", ",", "Ax", "]", ")", "# [N, M, JX, di]", "\n", "qq", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "qq", ",", "Aq", "]", ")", "# [N, JQ, di]", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "            ", "qq_sub", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "qq_sub", ",", "Aq_sub", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "          ", "xx", "=", "Ax", "\n", "qq", "=", "Aq", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "            ", "qq_sub", "=", "Aq_sub", "\n", "\n", "# highway network", "\n", "", "", "", "", "if", "config", ".", "highway", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "\"highway\"", ")", ":", "\n", "        ", "xx", "=", "highway_network", "(", "xx", ",", "config", ".", "highway_num_layers", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "is_train", "=", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "highway_keep_prob", ")", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "qq", "=", "highway_network", "(", "qq", ",", "config", ".", "highway_num_layers", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "is_train", "=", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "highway_keep_prob", ")", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "          ", "qq_sub", "=", "highway_network", "(", "qq_sub", ",", "config", ".", "highway_num_layers", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "is_train", "=", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "highway_keep_prob", ")", "\n", "\n", "", "", "", "self", ".", "tensor_dict", "[", "'xx'", "]", "=", "xx", "\n", "self", ".", "tensor_dict", "[", "'qq'", "]", "=", "qq", "\n", "\n", "cell_fw", "=", "BasicLSTMCell", "(", "d", ",", "state_is_tuple", "=", "True", ")", "\n", "cell_bw", "=", "BasicLSTMCell", "(", "d", ",", "state_is_tuple", "=", "True", ")", "\n", "d_cell_fw", "=", "SwitchableDropoutWrapper", "(", "cell_fw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "d_cell_bw", "=", "SwitchableDropoutWrapper", "(", "cell_bw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "cell2_fw", "=", "BasicLSTMCell", "(", "d", ",", "state_is_tuple", "=", "True", ")", "\n", "cell2_bw", "=", "BasicLSTMCell", "(", "d", ",", "state_is_tuple", "=", "True", ")", "\n", "d_cell2_fw", "=", "SwitchableDropoutWrapper", "(", "cell2_fw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "d_cell2_bw", "=", "SwitchableDropoutWrapper", "(", "cell2_bw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "cell3_fw", "=", "BasicLSTMCell", "(", "d", ",", "state_is_tuple", "=", "True", ")", "\n", "cell3_bw", "=", "BasicLSTMCell", "(", "d", ",", "state_is_tuple", "=", "True", ")", "\n", "d_cell3_fw", "=", "SwitchableDropoutWrapper", "(", "cell3_fw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "d_cell3_bw", "=", "SwitchableDropoutWrapper", "(", "cell3_bw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "cell4_fw", "=", "BasicLSTMCell", "(", "d", ",", "state_is_tuple", "=", "True", ")", "\n", "cell4_bw", "=", "BasicLSTMCell", "(", "d", ",", "state_is_tuple", "=", "True", ")", "\n", "d_cell4_fw", "=", "SwitchableDropoutWrapper", "(", "cell4_fw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "d_cell4_bw", "=", "SwitchableDropoutWrapper", "(", "cell4_bw", ",", "self", ".", "is_train", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ")", "\n", "x_len", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "self", ".", "x_mask", ",", "'int32'", ")", ",", "2", ")", "# [N, M]", "\n", "q_len", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "self", ".", "q_mask", ",", "'int32'", ")", ",", "1", ")", "# [N]", "\n", "q_sub_len", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "self", ".", "q_sub_mask", ",", "'int32'", ")", ",", "1", ")", "# [N]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"prepro\"", ")", ":", "\n", "\n", "      ", "if", "config", ".", "cudnn_rnn", ":", "\n", "        ", "if", "config", ".", "reasoning_layer", "==", "'mac_rnn'", "and", "config", ".", "use_control_unit", "is", "False", ":", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "'u1'", ")", ":", "\n", "            ", "u_bod", ",", "_", "=", "bi_cudnn_rnn_encoder", "(", "'lstm'", ",", "config", ".", "hidden_size", ",", "1", ",", "1", "-", "config", ".", "input_keep_prob", ",", "qq", ",", "q_len", "-", "q_sub_len", ",", "self", ".", "is_train", ")", "\n", "u_st", "=", "zhong_selfatt", "(", "tf", ".", "expand_dims", "(", "u_bod", ",", "axis", "=", "1", ")", ",", "config", ".", "hidden_size", "*", "2", ",", "seq_len", "=", "q_len", "-", "q_sub_len", ",", "transform", "=", "'squeeze'", ")", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "u", ",", "_", "=", "bi_cudnn_rnn_encoder", "(", "'lstm'", ",", "config", ".", "hidden_size", ",", "1", ",", "1", "-", "config", ".", "input_keep_prob", ",", "qq", ",", "q_len", ",", "self", ".", "is_train", ")", "\n", "", "", "else", ":", "# go to this case if answer_state_update_rule == 'bi-attn'", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "'u1'", ")", ":", "\n", "            ", "u", ",", "_", "=", "bi_cudnn_rnn_encoder", "(", "'lstm'", ",", "config", ".", "hidden_size", ",", "1", ",", "1", "-", "config", ".", "input_keep_prob", ",", "qq", ",", "q_len", ",", "self", ".", "is_train", ")", "\n", "if", "config", ".", "reasoning_layer", "==", "'mac_rnn'", ":", "\n", "              ", "u_st", "=", "zhong_selfatt", "(", "tf", ".", "expand_dims", "(", "u", ",", "axis", "=", "1", ")", ",", "config", ".", "hidden_size", "*", "2", ",", "seq_len", "=", "q_len", ",", "transform", "=", "'squeeze'", ")", "\n", "\n", "", "", "", "q_sub_st", "=", "None", "\n", "if", "config", ".", "share_lstm_weights", ":", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "'u1'", ",", "reuse", "=", "True", ")", ":", "\n", "            ", "h", ",", "_", "=", "bi_cudnn_rnn_encoder", "(", "'lstm'", ",", "config", ".", "hidden_size", ",", "1", ",", "1", "-", "config", ".", "input_keep_prob", ",", "tf", ".", "squeeze", "(", "xx", ",", "axis", "=", "1", ")", ",", "tf", ".", "squeeze", "(", "x_len", ",", "axis", "=", "1", ")", ",", "self", ".", "is_train", ")", "\n", "h", "=", "tf", ".", "expand_dims", "(", "h", ",", "axis", "=", "1", ")", "\n", "if", "config", ".", "reasoning_layer", "==", "'mac_rnn'", ":", "\n", "              ", "h_st", "=", "zhong_selfatt", "(", "h", ",", "config", ".", "hidden_size", "*", "2", ",", "seq_len", "=", "tf", ".", "squeeze", "(", "x_len", ",", "axis", "=", "1", ")", ",", "transform", "=", "'squeeze'", ")", "\n", "", "else", ":", "# Need a dumy h_st", "\n", "              ", "h_st", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "squeeze", "(", "h", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "", "if", "config", ".", "get_query_subject", ":", "\n", "              ", "q_sub", ",", "_", "=", "bi_cudnn_rnn_encoder", "(", "'lstm'", ",", "config", ".", "hidden_size", ",", "1", ",", "1", "-", "config", ".", "input_keep_prob", ",", "qq_sub", ",", "q_sub_len", ",", "self", ".", "is_train", ")", "\n", "q_sub_st", "=", "zhong_selfatt", "(", "tf", ".", "expand_dims", "(", "q_sub", ",", "axis", "=", "1", ")", ",", "config", ".", "hidden_size", "*", "2", ",", "seq_len", "=", "q_sub_len", ",", "transform", "=", "'squeeze'", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "        ", "if", "config", ".", "reasoning_layer", "==", "'mac_rnn'", "and", "config", ".", "use_control_unit", "is", "False", ":", "\n", "# If control_unit is False, only encode the query body", "\n", "          ", "(", "fw_u", ",", "bw_u", ")", ",", "(", "fw_u_f_st", ",", "bw_u_f_st", ")", "=", "bidirectional_dynamic_rnn", "(", "d_cell_fw", ",", "d_cell_bw", ",", "qq", ",", "q_len", "-", "q_sub_len", ",", "dtype", "=", "'float'", ",", "scope", "=", "'u1'", ")", "# [N, J, d], [N, d]  ", "\n", "u_st", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "fw_u_f_st", ".", "c", ",", "bw_u_f_st", ".", "c", "]", ")", "\n", "#if config.bidaf:", "\n", "(", "fw_u", ",", "bw_u", ")", ",", "_", "=", "bidirectional_dynamic_rnn", "(", "d_cell_fw", ",", "d_cell_bw", ",", "qq", ",", "q_len", ",", "dtype", "=", "'float'", ",", "scope", "=", "'u1'", ")", "# [N, J, d], [N, d]  ", "\n", "u", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "fw_u", ",", "bw_u", "]", ")", "\n", "", "else", ":", "# go to this case if answer_state_update_rule == 'bi-attn'", "\n", "          ", "(", "fw_u", ",", "bw_u", ")", ",", "(", "fw_u_f_st", ",", "bw_u_f_st", ")", "=", "bidirectional_dynamic_rnn", "(", "d_cell_fw", ",", "d_cell_bw", ",", "qq", ",", "q_len", ",", "dtype", "=", "'float'", ",", "scope", "=", "'u1'", ")", "# [N, J, d], [N, d]  ", "\n", "u", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "fw_u", ",", "bw_u", "]", ")", "\n", "\n", "", "if", "config", ".", "share_lstm_weights", ":", "\n", "          ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "(", "fw_h", ",", "bw_h", ")", ",", "(", "fw_h_f_st", ",", "bw_h_f_st", ")", "=", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "xx", ",", "x_len", ",", "dtype", "=", "'float'", ",", "scope", "=", "'u1'", ")", "# [N, M, JX, 2d]", "\n", "h", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "fw_h", ",", "bw_h", "]", ")", "# [N, M, JX, 2d]", "\n", "h_st", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "fw_h_f_st", ".", "c", ",", "bw_h_f_st", ".", "c", "]", ")", "# [N, M, 2d]", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "            ", "_", ",", "(", "fw_u2_f_st", ",", "bw_u2_f_st", ")", "=", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "qq_sub", ",", "q_sub_len", ",", "dtype", "=", "'float'", ",", "scope", "=", "'u1'", ")", "# [N, M, JX, 2d]", "\n", "q_sub_st", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "fw_u2_f_st", ".", "c", ",", "bw_u2_f_st", ".", "c", "]", ")", "# [N, M, 2d]", "\n", "", "else", ":", "\n", "            ", "q_sub_st", "=", "None", "\n", "", "", "else", ":", "\n", "          ", "(", "fw_h", ",", "bw_h", ")", ",", "(", "fw_h_f_st", ",", "bw_h_f_st", ")", "=", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "xx", ",", "x_len", ",", "dtype", "=", "'float'", ",", "scope", "=", "'h1'", ")", "# [N, M, JX, 2d]", "\n", "h", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "fw_h", ",", "bw_h", "]", ")", "# [N, M, JX, 2d]", "\n", "h_st", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "fw_h_f_st", ".", "c", ",", "bw_h_f_st", ".", "c", "]", ")", "# [N, M, 2d]", "\n", "if", "config", ".", "get_query_subject", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "_", ",", "(", "fw_u2_f_st", ",", "bw_u2_f_st", ")", "=", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "qq_sub", ",", "q_sub_len", ",", "dtype", "=", "'float'", ",", "scope", "=", "'u1'", ")", "# [N, M, JX, 2d]", "\n", "q_sub_st", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "fw_u2_f_st", ".", "c", ",", "bw_u2_f_st", ".", "c", "]", ")", "# [N, M, 2d]", "\n", "", "else", ":", "\n", "            ", "q_sub_st", "=", "None", "\n", "", "", "", "self", ".", "tensor_dict", "[", "'u'", "]", "=", "u", "\n", "self", ".", "tensor_dict", "[", "'h'", "]", "=", "h", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"main\"", ")", ":", "\n", "      ", "context_dim", "=", "config", ".", "hidden_size", "*", "2", "\n", "# Reconstruct before bidaf because otherwise we need to build a larger query tensor.", "\n", "if", "config", ".", "split_supports", ":", "# Reconstruct batches into [N, M, JX, 2d]", "\n", "        ", "if", "config", ".", "select_top_n_doc", ">", "0", ":", "\n", "          ", "first_n_doc_idx", "=", "select_topn_doc_idx", "(", "N", ",", "config", ".", "select_top_n_doc", ",", "self", ".", "x_group", ")", "\n", "h_plus_one", "=", "tf", ".", "concat", "(", "[", "h", ",", "tf", ".", "expand_dims", "(", "tf", ".", "zeros_like", "(", "h", "[", "0", "]", ",", "tf", ".", "float32", ")", ",", "axis", "=", "0", ")", "]", ",", "axis", "=", "0", ")", "\n", "h_st_plus_one", "=", "tf", ".", "concat", "(", "[", "h_st", ",", "tf", ".", "expand_dims", "(", "tf", ".", "zeros_like", "(", "h_st", "[", "0", "]", ",", "tf", ".", "float32", ")", ",", "axis", "=", "0", ")", "]", ",", "axis", "=", "0", ")", "\n", "x_len_plus_one", "=", "tf", ".", "concat", "(", "[", "x_len", ",", "tf", ".", "expand_dims", "(", "tf", ".", "zeros_like", "(", "x_len", "[", "0", "]", ",", "tf", ".", "int32", ")", ",", "axis", "=", "0", ")", "]", ",", "axis", "=", "0", ")", "\n", "x_mask_plus_one", "=", "tf", ".", "concat", "(", "[", "self", ".", "x_mask", ",", "tf", ".", "expand_dims", "(", "tf", ".", "zeros_like", "(", "self", ".", "x_mask", "[", "0", "]", ",", "tf", ".", "bool", ")", ",", "axis", "=", "0", ")", "]", ",", "axis", "=", "0", ")", "\n", "top_n_h", "=", "tf", ".", "gather", "(", "h_plus_one", ",", "first_n_doc_idx", ")", "\n", "top_n_h_st", "=", "tf", ".", "gather", "(", "h_st_plus_one", ",", "first_n_doc_idx", ")", "\n", "top_n_x_len", "=", "tf", ".", "gather", "(", "x_len_plus_one", ",", "first_n_doc_idx", ")", "\n", "top_n_x_mask", "=", "tf", ".", "gather", "(", "x_mask_plus_one", ",", "first_n_doc_idx", ")", "\n", "\n", "", "if", "config", ".", "hierarchical_attn", "is", "False", ":", "\n", "          ", "h", ",", "x_len", ",", "x_mask", "=", "reconstruct_batches", "(", "h", ",", "x_len", ",", "self", ".", "x_group", ",", "target_batch_size", "=", "N", ",", "max_para_size", "=", "config", ".", "max_para_size", ",", "model", "=", "self", ")", "\n", "", "else", ":", "\n", "          ", "if", "config", ".", "bidaf", ":", "\n", "            ", "context_dim", "=", "config", ".", "hidden_size", "*", "4", "\n", "# Augment query to match ", "\n", "batch_nums", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "              ", "batch_nums", "=", "tf", ".", "concat", "(", "[", "batch_nums", ",", "tf", ".", "tile", "(", "[", "i", "]", ",", "[", "self", ".", "x_group", "[", "i", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "u_tiled", "=", "tf", ".", "gather", "(", "u", ",", "batch_nums", ")", "\n", "q_mask_tiled", "=", "tf", ".", "gather", "(", "self", ".", "q_mask", ",", "batch_nums", ")", "\n", "h", "=", "attention_layer", "(", "config", ",", "self", ".", "is_train", ",", "h", ",", "u_tiled", ",", "h_mask", "=", "self", ".", "x_mask", ",", "u_mask", "=", "q_mask_tiled", ",", "scope", "=", "\"p0\"", ",", "tensor_dict", "=", "self", ".", "tensor_dict", ")", "\n", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "[", "160", ",", "80", "]", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "[", "80", "]", ")", "\n", "h", "=", "tf", ".", "einsum", "(", "'ijkl,lm->ijkm'", ",", "h", ",", "W", ")", "+", "b", "\n", "", "h_reconstruct", ",", "_", ",", "_", "=", "reconstruct_batches", "(", "h", ",", "x_len", ",", "self", ".", "x_group", ",", "target_batch_size", "=", "N", ",", "max_para_size", "=", "config", ".", "max_para_size", ",", "model", "=", "self", ",", "emb_dim", "=", "context_dim", ")", "\n", "\n", "if", "config", ".", "select_top_n_doc", ">", "1", ":", "\n", "            ", "top_n_x_group", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "              ", "to_append", "=", "tf", ".", "cond", "(", "self", ".", "x_group", "[", "i", "]", ">", "config", ".", "select_top_n_doc", ",", "lambda", ":", "config", ".", "select_top_n_doc", ",", "lambda", ":", "self", ".", "x_group", "[", "i", "]", ")", "\n", "top_n_x_group", ".", "append", "(", "to_append", ")", "\n", "", "top_n_x_group", "=", "tf", ".", "stack", "(", "top_n_x_group", ")", "\n", "h", ",", "p_st", ",", "x_mask", ",", "pdoc_mask", ",", "self", ".", "x_sents_len_reconstruct", "=", "reconstruct_batchesV2", "(", "top_n_h", ",", "top_n_h_st", ",", "top_n_x_mask", ",", "top_n_x_group", ",", "self", ".", "x_sents_len", ",", "target_batch_size", "=", "N", ",", "max_para_size", "=", "config", ".", "max_para_size", ",", "model", "=", "self", ")", "\n", "", "else", ":", "\n", "            ", "h", ",", "p_st", ",", "x_mask", ",", "pdoc_mask", ",", "self", ".", "x_sents_len_reconstruct", "=", "reconstruct_batchesV2", "(", "h", ",", "h_st", ",", "self", ".", "x_mask", ",", "self", ".", "x_group", ",", "self", ".", "x_sents_len", ",", "target_batch_size", "=", "N", ",", "max_para_size", "=", "config", ".", "max_para_size", ",", "model", "=", "self", ")", "\n", "", "", "if", "config", ".", "select_top_n_doc", ">", "0", ":", "\n", "          ", "x_len", "=", "top_n_x_len", "\n", "", "", "else", ":", "\n", "        ", "x_mask", "=", "self", ".", "x_mask", "\n", "\n", "", "if", "config", ".", "bidaf", "and", "config", ".", "hierarchical_attn", "is", "False", ":", "\n", "        ", "context_dim", "=", "config", ".", "hidden_size", "*", "8", "\n", "if", "config", ".", "use_control_unit", "is", "False", "and", "config", ".", "reasoning_layer", "==", "'mac_rnn'", ":", "\n", "          ", "if", "config", ".", "select_top_n_doc", ">", "0", ":", "\n", "            ", "p0", "=", "attention_layer", "(", "config", ",", "self", ".", "is_train", ",", "top_n_h", ",", "u", ",", "h_mask", "=", "top_n_x_mask", ",", "u_mask", "=", "self", ".", "q_mask", ",", "scope", "=", "\"p0\"", ",", "tensor_dict", "=", "self", ".", "tensor_dict", ")", "\n", "", "else", ":", "\n", "            ", "p0", "=", "attention_layer", "(", "config", ",", "self", ".", "is_train", ",", "h", ",", "u", ",", "h_mask", "=", "x_mask", ",", "u_mask", "=", "self", ".", "q_mask", ",", "scope", "=", "\"p0\"", ",", "tensor_dict", "=", "self", ".", "tensor_dict", ")", "\n", "", "", "else", ":", "\n", "          ", "if", "config", ".", "select_top_n_doc", ">", "0", ":", "\n", "            ", "p0", "=", "attention_layer", "(", "config", ",", "self", ".", "is_train", ",", "top_n_h", ",", "u", ",", "h_mask", "=", "top_n_x_mask", ",", "u_mask", "=", "self", ".", "q_mask", ",", "scope", "=", "\"p0\"", ",", "tensor_dict", "=", "self", ".", "tensor_dict", ")", "\n", "", "else", ":", "\n", "            ", "p0", "=", "attention_layer", "(", "config", ",", "self", ".", "is_train", ",", "h", ",", "u", ",", "h_mask", "=", "x_mask", ",", "u_mask", "=", "self", ".", "q_mask", ",", "scope", "=", "\"p0\"", ",", "tensor_dict", "=", "self", ".", "tensor_dict", ")", "\n", "", "", "", "else", ":", "\n", "        ", "p0", "=", "h", "\n", "\n", "", "first_cell_fw", "=", "d_cell2_fw", "\n", "second_cell_fw", "=", "d_cell3_fw", "\n", "first_cell_bw", "=", "d_cell2_bw", "\n", "second_cell_bw", "=", "d_cell3_bw", "\n", "\n", "if", "config", ".", "reasoning_layer", "==", "'mac_rnn'", ":", "\n", "        ", "query_dim", "=", "config", ".", "hidden_size", "*", "2", "\n", "\n", "if", "config", ".", "hierarchical_attn", ":", "\n", "          ", "mac_rnn_cell", "=", "HierarchicalAttnMACRnn", "(", "config", ".", "batch_size", ",", "context_dim", ",", "query_dim", ",", "num_hops", "=", "config", ".", "num_hops", ",", "reuse_cell", "=", "config", ".", "reuse_cell", ",", "is_train", "=", "self", ".", "is_train", ",", "use_control_unit", "=", "config", ".", "use_control_unit", ",", "mode", "=", "config", ".", "mode", ",", "read_strategy", "=", "config", ".", "mac_read_strategy", ",", "output_unit_type", "=", "config", ".", "mac_output_unit", ",", "answer_state_update_rule", "=", "config", ".", "mac_answer_state_update_rule", ",", "reasoning_unit", "=", "config", ".", "mac_reasoning_unit", ",", "memory_state_update_rule", "=", "config", ".", "mac_memory_state_update_rule", ",", "answer_doc_ids", "=", "self", ".", "answer_doc_ids", "if", "config", ".", "supervise_final_doc", "or", "(", "config", ".", "oracle", "is", "not", "None", ")", "else", "None", ",", "sents_len", "=", "self", ".", "x_sents_len_reconstruct", ",", "oracle", "=", "config", ".", "oracle", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "attention_cell_dropout", "=", "config", ".", "attention_cell_dropout", ",", "read_topk_docs", "=", "config", ".", "read_topk_docs", ")", "\n", "self", ".", "mac_rnn_cell", "=", "mac_rnn_cell", "\n", "\n", "if", "config", ".", "mac_prediction", "==", "'candidates'", ":", "\n", "            ", "cand_emb", ",", "cand_mask", "=", "span_to_avg_emb", "(", "self", ".", "candidate_spans", ",", "h_reconstruct", ",", "config", ".", "batch_size", ",", "self", ")", "\n", "g1", "=", "dynamic_mac_rnn", "(", "mac_rnn_cell", ",", "p0", ",", "u", ",", "q_len", ",", "x_mask", ",", "self", ".", "q_mask", ",", "q_sub_st", "=", "q_sub_st", ",", "context_st", "=", "p_st", ",", "query_st", "=", "u_st", ",", "cdoc_mask", "=", "pdoc_mask", ",", "candidates", "=", "cand_emb", ",", "cand_mask", "=", "cand_mask", ")", "\n", "\n", "self", ".", "doc_attn_logits", "=", "mac_rnn_cell", ".", "doc_attn_logits_lst", "\n", "self", ".", "word_attn_logits", "=", "mac_rnn_cell", ".", "word_attn_logits_lst", "\n", "self", ".", "doc_labels", "=", "mac_rnn_cell", ".", "doc_attn", "\n", "self", ".", "g1", "=", "g1", "\n", "self", ".", "cand_mask", "=", "cand_mask", "\n", "self", ".", "cand_emb", "=", "cand_emb", "\n", "self", ".", "pdoc_mask", "=", "pdoc_mask", "\n", "self", ".", "p_st", "=", "p_st", "\n", "logits", "=", "get_logits", "(", "[", "g1", "]", ",", "d", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "mask", "=", "cand_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "func", "=", "config", ".", "answer_func", ",", "scope", "=", "'logits1'", ")", "\n", "\n", "JX", "=", "tf", ".", "shape", "(", "g1", ")", "[", "2", "]", "\n", "self", ".", "JX", "=", "JX", "\n", "self", ".", "g1_shape", "=", "tf", ".", "shape", "(", "g1", ")", "\n", "flat_logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "config", ".", "batch_size", ",", "M", "*", "JX", "]", ")", "\n", "flat_yp", "=", "tf", ".", "nn", ".", "softmax", "(", "flat_logits", ")", "# [-1, M*JX]", "\n", "yp", "=", "tf", ".", "reshape", "(", "flat_yp", ",", "[", "config", ".", "batch_size", ",", "M", ",", "JX", "]", ")", "\n", "self", ".", "logits", "=", "flat_logits", "\n", "self", ".", "yp", "=", "yp", "\n", "\n", "if", "config", ".", "use_assembler", "or", "config", ".", "attn_visualization", ":", "\n", "              ", "self", ".", "yp_list", "=", "[", "]", "\n", "self", ".", "logits_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config", ".", "num_hops", ")", ":", "\n", "                ", "logits", "=", "get_logits", "(", "[", "mac_rnn_cell", ".", "answer_list", "[", "i", "]", "]", ",", "d", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "mask", "=", "cand_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "func", "=", "config", ".", "answer_func", ",", "scope", "=", "'logits1'", ",", "reuse", "=", "True", ")", "\n", "flat_logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "config", ".", "batch_size", ",", "M", "*", "JX", "]", ")", "\n", "flat_yp", "=", "tf", ".", "nn", ".", "softmax", "(", "flat_logits", ")", "\n", "yp", "=", "tf", ".", "reshape", "(", "flat_yp", ",", "[", "config", ".", "batch_size", ",", "M", ",", "JX", "]", ")", "\n", "self", ".", "yp_list", ".", "append", "(", "yp", ")", "\n", "self", ".", "logits_list", ".", "append", "(", "flat_logits", ")", "\n", "\n", "", "", "if", "config", ".", "use_assembler", ":", "\n", "              ", "if", "config", ".", "assembler_type", "==", "'BiAttn'", ":", "\n", "                ", "self", ".", "assembler", "=", "BiAttnAssembler", "(", "config", ",", "self", ".", "is_train", ",", "self", ",", "context_dim", "=", "context_dim", ")", "\n", "self", ".", "assembler", ".", "build_forward", "(", "p0", ",", "x_mask", ",", "u", ",", "u_st", ",", "self", ".", "q_mask", ",", "cand_emb", ",", "cand_mask", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "          ", "mac_rnn_cell", "=", "MACRnn", "(", "config", ".", "batch_size", ",", "p0", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "u", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "num_hops", "=", "config", ".", "num_hops", ",", "prediction", "=", "config", ".", "mac_prediction", ",", "reuse_cell", "=", "config", ".", "reuse_cell", ",", "is_train", "=", "self", ".", "is_train", ",", "use_control_unit", "=", "config", ".", "use_control_unit", ",", "mode", "=", "config", ".", "mode", ")", "\n", "if", "config", ".", "mac_prediction", "==", "'candidates'", ":", "\n", "            ", "cand_emb", ",", "cand_mask", "=", "span_to_avg_emb", "(", "self", ".", "candidate_spans", ",", "p0", ",", "config", ".", "batch_size", ",", "self", ")", "\n", "g1", "=", "dynamic_mac_rnn", "(", "mac_rnn_cell", ",", "p0", ",", "u", ",", "q_len", ",", "x_mask", ",", "self", ".", "q_mask", ",", "candidates", "=", "cand_emb", ",", "cand_mask", "=", "cand_mask", ",", "q_sub_st", "=", "q_sub_st", ")", "\n", "self", ".", "g1", "=", "g1", "\n", "self", ".", "cand_mask", "=", "cand_mask", "\n", "self", ".", "cand_emb", "=", "cand_emb", "\n", "logits", "=", "get_logits", "(", "[", "g1", "]", ",", "d", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "mask", "=", "cand_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "func", "=", "config", ".", "answer_func", ",", "scope", "=", "'logits1'", ")", "\n", "\n", "JX", "=", "tf", ".", "shape", "(", "g1", ")", "[", "2", "]", "\n", "flat_logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "config", ".", "batch_size", ",", "M", "*", "JX", "]", ")", "\n", "flat_yp", "=", "tf", ".", "nn", ".", "softmax", "(", "flat_logits", ")", "# [-1, M*JX]", "\n", "yp", "=", "tf", ".", "reshape", "(", "flat_yp", ",", "[", "config", ".", "batch_size", ",", "M", ",", "JX", "]", ")", "\n", "self", ".", "logits", "=", "flat_logits", "\n", "self", ".", "yp", "=", "yp", "\n", "return", "\n", "\n", "", "elif", "config", ".", "mac_prediction", "==", "'span-dual'", ":", "\n", "            ", "g1", ",", "g2", "=", "dynamic_mac_rnn", "(", "mac_rnn_cell", ",", "p0", ",", "qq", ",", "q_len", ")", "\n", "if", "config", ".", "split_supports", "is", "True", ":", "\n", "              ", "M", "=", "1", "\n", "JX", "=", "config", ".", "max_para_size", "\n", "N", "=", "config", ".", "batch_size", "\n", "\n", "", "logits", "=", "get_logits", "(", "[", "g1", "]", ",", "d", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "\n", "mask", "=", "x_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "func", "=", "config", ".", "answer_func", ",", "scope", "=", "'logits1'", ")", "\n", "logits2", "=", "get_logits", "(", "[", "g2", "]", ",", "d", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "\n", "mask", "=", "x_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "func", "=", "config", ".", "answer_func", ",", "scope", "=", "'logits2'", ")", "\n", "", "else", ":", "\n", "            ", "assert", "config", ".", "mac_prediction", "==", "'span-single'", "\n", "g1", ",", "logits", "=", "dynamic_mac_rnn", "(", "mac_rnn_cell", ",", "p0", ",", "qq", ",", "q_len", ",", "x_mask", ",", "self", ".", "q_mask", ")", "\n", "if", "config", ".", "split_supports", "is", "True", ":", "\n", "              ", "M", "=", "1", "\n", "JX", "=", "config", ".", "max_para_size", "\n", "N", "=", "config", ".", "batch_size", "\n", "", "a1i", "=", "softsel", "(", "tf", ".", "reshape", "(", "g1", ",", "[", "N", ",", "M", "*", "JX", ",", "80", "]", ")", ",", "tf", ".", "reshape", "(", "logits", ",", "[", "N", ",", "M", "*", "JX", "]", ")", ")", "\n", "a1i", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "a1i", ",", "1", ")", ",", "1", ")", ",", "[", "1", ",", "M", ",", "JX", ",", "1", "]", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "if", "config", ".", "cudnn_rnn", ":", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "'g0'", ")", ":", "\n", "            ", "g0", ",", "_", "=", "bi_cudnn_rnn_encoder", "(", "'lstm'", ",", "config", ".", "hidden_size", ",", "1", ",", "1", "-", "config", ".", "input_keep_prob", ",", "tf", ".", "squeeze", "(", "p0", ",", "axis", "=", "1", ")", ",", "tf", ".", "squeeze", "(", "x_len", ",", "axis", "=", "1", ")", ",", "self", ".", "is_train", ")", "\n", "g0", "=", "tf", ".", "expand_dims", "(", "g0", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "          ", "(", "fw_g0", ",", "bw_g0", ")", ",", "_", "=", "bidirectional_dynamic_rnn", "(", "first_cell_fw", ",", "first_cell_bw", ",", "p0", ",", "x_len", ",", "dtype", "=", "'float'", ",", "scope", "=", "'g0'", ")", "# [N, M, JX, 2d]", "\n", "g0", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "fw_g0", ",", "bw_g0", "]", ")", "\n", "", "if", "config", ".", "cudnn_rnn", ":", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "'g1'", ")", ":", "\n", "            ", "g1", ",", "_", "=", "bi_cudnn_rnn_encoder", "(", "'lstm'", ",", "config", ".", "hidden_size", ",", "1", ",", "1", "-", "config", ".", "input_keep_prob", ",", "tf", ".", "squeeze", "(", "g0", ",", "axis", "=", "1", ")", ",", "tf", ".", "squeeze", "(", "x_len", ",", "axis", "=", "1", ")", ",", "self", ".", "is_train", ")", "\n", "g1", "=", "tf", ".", "expand_dims", "(", "g1", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "          ", "(", "fw_g1", ",", "bw_g1", ")", ",", "(", "fw_g1_f_st", ",", "bw_g1_f_st", ")", "=", "bidirectional_dynamic_rnn", "(", "second_cell_fw", ",", "second_cell_bw", ",", "g0", ",", "x_len", ",", "dtype", "=", "'float'", ",", "scope", "=", "'g1'", ")", "# [N, M, JX, 2d]", "\n", "g1", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "fw_g1", ",", "bw_g1", "]", ")", "\n", "\n", "", "if", "config", ".", "reasoning_layer", "==", "'bidaf'", "and", "config", ".", "mac_prediction", "==", "'candidates'", ":", "\n", "\n", "\n", "          ", "logits", "=", "get_logits", "(", "[", "g1", "]", ",", "d", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "mask", "=", "x_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "scope", "=", "'a_state_logits'", ")", "\n", "probs", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "a_state", "=", "tf", ".", "einsum", "(", "'ijkl,ijk->ijl'", ",", "h", ",", "probs", ")", "\n", "a_state", "=", "tf", ".", "squeeze", "(", "a_state", ",", "axis", "=", "1", ")", "\n", "cand_emb", ",", "cand_mask", "=", "span_to_avg_emb", "(", "self", ".", "candidate_spans", ",", "h", ",", "config", ".", "batch_size", ",", "self", ")", "\n", "cand_emb", "=", "tf", ".", "squeeze", "(", "cand_emb", ",", "axis", "=", "1", ")", "\n", "cand_dim", "=", "config", ".", "hidden_size", "*", "2", "\n", "with", "tf", ".", "variable_scope", "(", "'output_unit'", ")", ":", "\n", "            ", "num_cand", "=", "tf", ".", "shape", "(", "cand_emb", ")", "[", "1", "]", "\n", "similarity", "=", "tf", ".", "einsum", "(", "'ik,ijk->ijk'", ",", "a_state", ",", "cand_emb", ")", "\n", "M", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "a_state", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "num_cand", ",", "1", "]", ")", "\n", "W1", "=", "tf", ".", "get_variable", "(", "'W1'", ",", "[", "3", "*", "cand_dim", ",", "2", "*", "cand_dim", "]", ")", "\n", "b1", "=", "tf", ".", "get_variable", "(", "'b1'", ",", "[", "2", "*", "cand_dim", "]", ")", "\n", "W2", "=", "tf", ".", "get_variable", "(", "'W2'", ",", "[", "2", "*", "cand_dim", ",", "cand_dim", "]", ")", "\n", "b2", "=", "tf", ".", "get_variable", "(", "'b2'", ",", "[", "cand_dim", "]", ")", "\n", "concat_in", "=", "tf", ".", "concat", "(", "axis", "=", "-", "1", ",", "values", "=", "[", "tf", ".", "reshape", "(", "M", ",", "[", "-", "1", ",", "cand_dim", "]", ")", ",", "tf", ".", "reshape", "(", "cand_emb", ",", "[", "-", "1", ",", "cand_dim", "]", ")", ",", "tf", ".", "reshape", "(", "similarity", ",", "[", "-", "1", ",", "cand_dim", "]", ")", "]", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "concat_in", ",", "W1", ")", "+", "b1", ")", ",", "W2", ")", "+", "b2", "\n", "g1", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reshape", "(", "output", ",", "[", "self", ".", "config", ".", "batch_size", ",", "-", "1", ",", "40", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "logits", "=", "get_logits", "(", "[", "g1", "]", ",", "d", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "mask", "=", "cand_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "func", "=", "config", ".", "answer_func", ",", "scope", "=", "'logits1'", ")", "\n", "JX", "=", "tf", ".", "shape", "(", "g1", ")", "[", "2", "]", "\n", "flat_logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "config", ".", "batch_size", ",", "JX", "]", ")", "\n", "flat_yp", "=", "tf", ".", "nn", ".", "softmax", "(", "flat_logits", ")", "# [-1, M*JX]", "\n", "yp", "=", "tf", ".", "reshape", "(", "flat_yp", ",", "[", "config", ".", "batch_size", ",", "1", ",", "JX", "]", ")", "\n", "self", ".", "logits", "=", "flat_logits", "\n", "self", ".", "yp", "=", "yp", "\n", "return", "\n", "\n", "", "logits", "=", "get_logits", "(", "[", "g1", ",", "p0", "]", ",", "d", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "\n", "mask", "=", "x_mask", ",", "is_train", "=", "self", ".", "is_train", ",", "func", "=", "config", ".", "answer_func", ",", "scope", "=", "'logits1'", ")", "\n", "\n", "if", "config", ".", "split_supports", "is", "True", ":", "\n", "          ", "M", "=", "1", "\n", "JX", "=", "config", ".", "max_para_size", "\n", "N", "=", "config", ".", "batch_size", "\n", "", "a1i", "=", "softsel", "(", "tf", ".", "reshape", "(", "g1", ",", "[", "N", ",", "M", "*", "JX", ",", "2", "*", "d", "]", ")", ",", "tf", ".", "reshape", "(", "logits", ",", "[", "N", ",", "M", "*", "JX", "]", ")", ")", "\n", "a1i", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "a1i", ",", "1", ")", ",", "1", ")", ",", "[", "1", ",", "M", ",", "JX", ",", "1", "]", ")", "\n", "\n", "", "if", "config", ".", "reasoning_layer", "is", "None", "or", "config", ".", "mac_prediction", "==", "'span-single'", ":", "\n", "        ", "if", "config", ".", "cudnn_rnn", ":", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "'g2'", ")", ":", "\n", "            ", "g2_in", "=", "tf", ".", "squeeze", "(", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "p0", ",", "g1", ",", "a1i", ",", "g1", "*", "a1i", "]", ")", ",", "axis", "=", "1", ")", "\n", "g2", ",", "_", "=", "bi_cudnn_rnn_encoder", "(", "'lstm'", ",", "config", ".", "hidden_size", ",", "1", ",", "1", "-", "config", ".", "input_keep_prob", ",", "g2_in", ",", "tf", ".", "squeeze", "(", "x_len", ",", "axis", "=", "1", ")", ",", "self", ".", "is_train", ")", "\n", "g2", "=", "tf", ".", "expand_dims", "(", "g2", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "          ", "(", "fw_g2", ",", "bw_g2", ")", ",", "_", "=", "bidirectional_dynamic_rnn", "(", "d_cell4_fw", ",", "d_cell4_bw", ",", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "p0", ",", "g1", ",", "a1i", ",", "g1", "*", "a1i", "]", ")", ",", "\n", "x_len", ",", "dtype", "=", "'float'", ",", "scope", "=", "'g2'", ")", "# [N, M, JX, 2d]", "\n", "", "g2", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "fw_g2", ",", "bw_g2", "]", ")", "\n", "logits2", "=", "get_logits", "(", "[", "g2", ",", "p0", "]", ",", "d", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "input_keep_prob", "=", "config", ".", "input_keep_prob", ",", "\n", "mask", "=", "x_mask", ",", "\n", "is_train", "=", "self", ".", "is_train", ",", "func", "=", "config", ".", "answer_func", ",", "scope", "=", "'logits2'", ")", "\n", "\n", "", "flat_logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "-", "1", ",", "M", "*", "JX", "]", ")", "\n", "flat_yp", "=", "tf", ".", "nn", ".", "softmax", "(", "flat_logits", ")", "# [-1, M*JX]", "\n", "flat_logits2", "=", "tf", ".", "reshape", "(", "logits2", ",", "[", "-", "1", ",", "M", "*", "JX", "]", ")", "\n", "flat_yp2", "=", "tf", ".", "nn", ".", "softmax", "(", "flat_logits2", ")", "\n", "\n", "if", "config", ".", "na", ":", "\n", "        ", "na_bias", "=", "tf", ".", "get_variable", "(", "\"na_bias\"", ",", "shape", "=", "[", "]", ",", "dtype", "=", "'float'", ")", "\n", "na_bias_tiled", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "na_bias", ",", "[", "1", ",", "1", "]", ")", ",", "[", "N", ",", "1", "]", ")", "# [N, 1]", "\n", "concat_flat_logits", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "na_bias_tiled", ",", "flat_logits", "]", ")", "\n", "concat_flat_yp", "=", "tf", ".", "nn", ".", "softmax", "(", "concat_flat_logits", ")", "\n", "na_prob", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "concat_flat_yp", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", ",", "[", "1", "]", ")", "\n", "flat_yp", "=", "tf", ".", "slice", "(", "concat_flat_yp", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "\n", "concat_flat_logits2", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "na_bias_tiled", ",", "flat_logits2", "]", ")", "\n", "concat_flat_yp2", "=", "tf", ".", "nn", ".", "softmax", "(", "concat_flat_logits2", ")", "\n", "na_prob2", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "concat_flat_yp2", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", ",", "[", "1", "]", ")", "# [N]", "\n", "flat_yp2", "=", "tf", ".", "slice", "(", "concat_flat_yp2", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "\n", "self", ".", "concat_logits", "=", "concat_flat_logits", "\n", "self", ".", "concat_logits2", "=", "concat_flat_logits2", "\n", "self", ".", "na_prob", "=", "na_prob", "*", "na_prob2", "\n", "\n", "", "yp", "=", "tf", ".", "reshape", "(", "flat_yp", ",", "[", "-", "1", ",", "M", ",", "JX", "]", ")", "\n", "yp2", "=", "tf", ".", "reshape", "(", "flat_yp2", ",", "[", "-", "1", ",", "M", ",", "JX", "]", ")", "\n", "wyp", "=", "tf", ".", "nn", ".", "sigmoid", "(", "logits2", ")", "\n", "\n", "self", ".", "logits", "=", "flat_logits", "\n", "self", ".", "logits2", "=", "flat_logits2", "\n", "self", ".", "yp", "=", "yp", "\n", "self", ".", "yp2", "=", "yp2", "\n", "self", ".", "wyp", "=", "wyp", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model._build_loss": [[568, 683], ["tensorflow.reduce_max", "tensorflow.add_n", "tensorflow.add_n", "tensorflow.summary.scalar", "tensorflow.add_to_collection", "tensorflow.shape", "tensorflow.shape", "tensorflow.cast", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.add_to_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.add_to_collection", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.summary.scalar", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.add_to_collection", "tensorflow.shape", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.add_to_collection", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.add_to_collection", "tensorflow.add_to_collection", "tensorflow.slice", "tensorflow.slice", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.concat", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.concat", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.range", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.range", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "", "def", "_build_loss", "(", "self", ")", ":", "\n", "    ", "config", "=", "self", ".", "config", "\n", "JX", "=", "tf", ".", "shape", "(", "self", ".", "x", ")", "[", "2", "]", "\n", "#", "\n", "N", "=", "config", ".", "batch_size", "\n", "if", "config", ".", "split_supports", "is", "True", ":", "\n", "      ", "M", "=", "1", "\n", "JX", "=", "config", ".", "max_para_size", "\n", "", "else", ":", "\n", "      ", "M", "=", "tf", ".", "shape", "(", "self", ".", "x", ")", "[", "1", "]", "\n", "\n", "", "JQ", "=", "tf", ".", "shape", "(", "self", ".", "q", ")", "[", "1", "]", "\n", "\n", "loss_mask", "=", "tf", ".", "reduce_max", "(", "tf", ".", "cast", "(", "self", ".", "q_mask", ",", "'float'", ")", ",", "1", ")", "\n", "if", "config", ".", "wy", ":", "\n", "      ", "losses", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "logits", "=", "tf", ".", "reshape", "(", "self", ".", "logits2", ",", "[", "-", "1", ",", "M", ",", "JX", "]", ")", ",", "labels", "=", "tf", ".", "cast", "(", "self", ".", "wy", ",", "'float'", ")", ")", "# [N, M, JX]", "\n", "num_pos", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "self", ".", "wy", ",", "'float'", ")", ")", "\n", "num_neg", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "self", ".", "x_mask", ",", "'float'", ")", ")", "-", "num_pos", "\n", "damp_ratio", "=", "num_pos", "/", "num_neg", "\n", "dampened_losses", "=", "losses", "*", "(", "\n", "(", "tf", ".", "cast", "(", "self", ".", "x_mask", ",", "'float'", ")", "-", "tf", ".", "cast", "(", "self", ".", "wy", ",", "'float'", ")", ")", "*", "damp_ratio", "+", "tf", ".", "cast", "(", "self", ".", "wy", ",", "'float'", ")", ")", "\n", "new_losses", "=", "tf", ".", "reduce_sum", "(", "dampened_losses", ",", "[", "1", ",", "2", "]", ")", "\n", "ce_loss", "=", "tf", ".", "reduce_mean", "(", "loss_mask", "*", "new_losses", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "ce_loss", ")", "\n", "", "else", ":", "\n", "      ", "if", "config", ".", "reasoning_layer", "is", "not", "None", "and", "config", ".", "mac_prediction", "==", "'candidates'", ":", "\n", "        ", "losses", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "logits", ",", "labels", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "self", ".", "candidate_span_y", ",", "[", "config", ".", "batch_size", "]", ")", ",", "'int32'", ")", ")", "\n", "ce_loss", "=", "tf", ".", "reduce_mean", "(", "loss_mask", "*", "losses", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "ce_loss", ")", "\n", "", "else", ":", "\n", "        ", "if", "config", ".", "na", ":", "\n", "          ", "na", "=", "tf", ".", "reshape", "(", "self", ".", "na", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "concat_y", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "na", ",", "tf", ".", "reshape", "(", "self", ".", "y", ",", "[", "-", "1", ",", "M", "*", "JX", "]", ")", "]", ")", "\n", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "concat_logits", ",", "labels", "=", "tf", ".", "cast", "(", "concat_y", ",", "'float'", ")", ")", "\n", "concat_y2", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "na", ",", "tf", ".", "reshape", "(", "self", ".", "y2", ",", "[", "-", "1", ",", "M", "*", "JX", "]", ")", "]", ")", "\n", "losses2", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "concat_logits2", ",", "labels", "=", "tf", ".", "cast", "(", "concat_y2", ",", "'float'", ")", ")", "\n", "", "else", ":", "\n", "          ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "logits", ",", "labels", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "self", ".", "y", ",", "[", "-", "1", ",", "M", "*", "JX", "]", ")", ",", "'float'", ")", ")", "\n", "losses2", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "logits2", ",", "labels", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "self", ".", "y2", ",", "[", "-", "1", ",", "M", "*", "JX", "]", ")", ",", "'float'", ")", ")", "\n", "", "ce_loss", "=", "tf", ".", "reduce_mean", "(", "loss_mask", "*", "losses", ")", "\n", "ce_loss2", "=", "tf", ".", "reduce_mean", "(", "loss_mask", "*", "losses2", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "ce_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "\"losses\"", ",", "ce_loss2", ")", "\n", "\n", "", "", "self", ".", "loss", "=", "tf", ".", "add_n", "(", "tf", ".", "get_collection", "(", "'losses'", ",", "scope", "=", "self", ".", "scope", ")", ",", "name", "=", "'loss'", ")", "\n", "self", ".", "ansProp_loss", "=", "tf", ".", "add_n", "(", "tf", ".", "get_collection", "(", "'losses'", ",", "scope", "=", "self", ".", "scope", ")", ",", "name", "=", "'ansProp_loss'", ")", "\n", "self", ".", "docExpl_ansProp_loss", "=", "self", ".", "ansProp_loss", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "self", ".", "loss", ".", "op", ".", "name", ",", "self", ".", "loss", ")", "\n", "tf", ".", "add_to_collection", "(", "'ema/scalar'", ",", "self", ".", "loss", ")", "\n", "\n", "if", "config", ".", "supervise_first_doc", ":", "\n", "      ", "doc_first_attn_loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "doc_attn_logits", "[", "0", "]", ",", "labels", "=", "self", ".", "first_doc_ids", ")", "\n", "doc_first_attn_loss", "=", "tf", ".", "reduce_mean", "(", "doc_first_attn_loss", ",", "name", "=", "'doc_first_attn_loss'", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'doc_first_attn_loss'", ",", "doc_first_attn_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "'ema/scalar'", ",", "doc_first_attn_loss", ")", "\n", "self", ".", "loss", "=", "self", ".", "loss", "+", "config", ".", "first_attn_loss_coeff", "*", "doc_first_attn_loss", "\n", "self", ".", "docExpl_loss", "=", "config", ".", "first_attn_loss_coeff", "*", "doc_first_attn_loss", "\n", "", "else", ":", "\n", "      ", "self", ".", "docExpl_loss", "=", "0.", "\n", "\n", "", "if", "config", ".", "supervise_final_doc", ":", "\n", "      ", "answer_doc_ids", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "self", ".", "answer_doc_ids", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "answer_word_ids", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "self", ".", "answer_word_ids", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "if", "config", ".", "mac_read_strategy", "==", "'one_doc_per_it_and_repeat_2nd_step'", ":", "\n", "        ", "doc_attn_logits", "=", "self", ".", "doc_attn_logits", "[", "1", "]", "\n", "\n", "if", "config", ".", "mac_memory_state_update_rule", "is", "None", ":", "\n", "          ", "batch_nums", "=", "tf", ".", "range", "(", "0", ",", "limit", "=", "N", ")", "\n", "doc_indices", "=", "tf", ".", "stack", "(", "[", "batch_nums", ",", "answer_doc_ids", "]", ",", "axis", "=", "1", ")", "\n", "word_attn_logits", "=", "tf", ".", "gather_nd", "(", "self", ".", "word_attn_logits", "[", "1", "]", ",", "doc_indices", ")", "\n", "", "else", ":", "\n", "          ", "word_attn_logits", "=", "self", ".", "word_attn_logits", "[", "1", "]", "\n", "", "", "else", ":", "\n", "        ", "doc_attn_logits", "=", "self", ".", "doc_attn_logits", "[", "-", "1", "]", "\n", "if", "config", ".", "mac_memory_state_update_rule", "is", "None", ":", "\n", "          ", "batch_nums", "=", "tf", ".", "range", "(", "0", ",", "limit", "=", "N", ")", "\n", "doc_indices", "=", "tf", ".", "stack", "(", "[", "batch_nums", ",", "answer_doc_ids", "]", ",", "axis", "=", "1", ")", "\n", "word_attn_logits", "=", "tf", ".", "gather_nd", "(", "self", ".", "word_attn_logits", "[", "-", "1", "]", ",", "doc_indices", ")", "\n", "", "else", ":", "\n", "          ", "word_attn_logits", "=", "self", ".", "word_attn_logits", "[", "-", "1", "]", "\n", "\n", "", "", "doc_final_attn_loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "doc_attn_logits", ",", "labels", "=", "answer_doc_ids", ")", "\n", "\n", "word_attn_loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "word_attn_logits", ",", "labels", "=", "answer_word_ids", ")", "\n", "\n", "doc_final_attn_loss", "=", "tf", ".", "reduce_mean", "(", "doc_final_attn_loss", ",", "name", "=", "'doc_final_attn_loss'", ")", "\n", "word_attn_loss", "=", "tf", ".", "reduce_mean", "(", "word_attn_loss", ",", "name", "=", "'word_attn_loss'", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'doc_final_attn_loss'", ",", "doc_final_attn_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'word_attn_loss'", ",", "word_attn_loss", ")", "\n", "\n", "tf", ".", "add_to_collection", "(", "'ema/scalar'", ",", "word_attn_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "'ema/scalar'", ",", "doc_final_attn_loss", ")", "\n", "\n", "self", ".", "docExpl_loss", "+=", "config", ".", "attn_loss_coeff", "*", "(", "doc_final_attn_loss", "+", "word_attn_loss", ")", "\n", "self", ".", "loss", "=", "self", ".", "loss", "+", "config", ".", "attn_loss_coeff", "*", "doc_final_attn_loss", "+", "config", ".", "attn_loss_coeff", "*", "word_attn_loss", "\n", "self", ".", "docExpl_ansProp_loss", "+=", "self", ".", "docExpl_loss", "\n", "tf", ".", "summary", ".", "scalar", "(", "'total_loss'", ",", "self", ".", "loss", ")", "\n", "\n", "", "if", "config", ".", "use_assembler", ":", "\n", "      ", "assembler_losses", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "assembler", ".", "logits", ",", "labels", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "self", ".", "candidate_span_y", ",", "[", "config", ".", "batch_size", "]", ")", ",", "'int32'", ")", ")", "\n", "self", ".", "assembler_loss", "=", "tf", ".", "reduce_mean", "(", "loss_mask", "*", "assembler_losses", ",", "name", "=", "'assembler_loss'", ")", "\n", "self", ".", "loss", "+=", "config", ".", "assembler_loss_coeff", "*", "self", ".", "assembler_loss", "\n", "tf", ".", "summary", ".", "scalar", "(", "'assembler_loss'", ",", "self", ".", "assembler_loss", ")", "\n", "tf", ".", "add_to_collection", "(", "'ema/scalar'", ",", "self", ".", "assembler_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model._build_ema": [[685, 699], ["tensorflow.train.ExponentialMovingAverage", "ema.apply", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "ema.average", "tensorflow.summary.scalar", "ema.average", "tensorflow.summary.histogram", "tensorflow.control_dependencies", "tensorflow.identity"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.apply"], ["", "", "def", "_build_ema", "(", "self", ")", ":", "\n", "    ", "self", ".", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "self", ".", "config", ".", "decay", ")", "\n", "ema", "=", "self", ".", "ema", "\n", "tensors", "=", "tf", ".", "get_collection", "(", "\"ema/scalar\"", ",", "scope", "=", "self", ".", "scope", ")", "+", "tf", ".", "get_collection", "(", "\"ema/vector\"", ",", "scope", "=", "self", ".", "scope", ")", "\n", "ema_op", "=", "ema", ".", "apply", "(", "tensors", ")", "\n", "for", "var", "in", "tf", ".", "get_collection", "(", "\"ema/scalar\"", ",", "scope", "=", "self", ".", "scope", ")", ":", "\n", "      ", "ema_var", "=", "ema", ".", "average", "(", "var", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "ema_var", ".", "op", ".", "name", ",", "ema_var", ")", "\n", "", "for", "var", "in", "tf", ".", "get_collection", "(", "\"ema/vector\"", ",", "scope", "=", "self", ".", "scope", ")", ":", "\n", "      ", "ema_var", "=", "ema", ".", "average", "(", "var", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "ema_var", ".", "op", ".", "name", ",", "ema_var", ")", "\n", "\n", "", "with", "tf", ".", "control_dependencies", "(", "[", "ema_op", "]", ")", ":", "\n", "      ", "self", ".", "loss", "=", "tf", ".", "identity", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model._build_var_ema": [[701, 707], ["tensorflow.train.ExponentialMovingAverage", "ema.apply", "tensorflow.trainable_variables", "tensorflow.control_dependencies", "tensorflow.identity"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.apply"], ["", "", "def", "_build_var_ema", "(", "self", ")", ":", "\n", "    ", "self", ".", "var_ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "self", ".", "config", ".", "var_decay", ")", "\n", "ema", "=", "self", ".", "var_ema", "\n", "ema_op", "=", "ema", ".", "apply", "(", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "ema_op", "]", ")", ":", "\n", "      ", "self", ".", "loss", "=", "tf", ".", "identity", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_loss": [[709, 711], ["None"], "methods", ["None"], ["", "", "def", "get_loss", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_global_step": [[713, 715], ["None"], "methods", ["None"], ["", "def", "get_global_step", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_var_list": [[717, 733], ["len", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.trainable_variables"], "methods", ["None"], ["", "def", "get_var_list", "(", "self", ",", "model_name", ")", ":", "\n", "    ", "if", "model_name", "==", "'expl+prop'", ":", "\n", "      ", "self", ".", "var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "if", "'assembler'", "not", "in", "var", ".", "name", "]", "\n", "", "elif", "model_name", "==", "'expl+prop_only'", ":", "\n", "      ", "self", ".", "var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "if", "'MACRnn'", "in", "var", ".", "name", "or", "'main/logits1'", "in", "var", ".", "name", "]", "\n", "", "elif", "model_name", "==", "'assembler'", ":", "\n", "      ", "self", ".", "var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "if", "'MACRnn'", "not", "in", "var", ".", "name", "and", "'main/logits1'", "not", "in", "var", ".", "name", "]", "\n", "", "elif", "model_name", "==", "'assembler_only'", ":", "\n", "      ", "self", ".", "var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "if", "'assembler'", "in", "var", ".", "name", "]", "\n", "", "elif", "model_name", "==", "'model_network'", "or", "model_name", "==", "'all'", ":", "\n", "      ", "self", ".", "var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "]", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "\n", "", "assert", "len", "(", "self", ".", "var_list", ")", ">", "0", "\n", "return", "self", ".", "var_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict": [[735, 737], ["basic.batcher.get_feed_dict"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict"], ["", "def", "get_feed_dict", "(", "self", ",", "batch", ",", "is_train", ",", "supervised", "=", "True", ")", ":", "\n", "    ", "return", "_get_feed_dict", "(", "self", ",", "batch", ",", "is_train", ",", "supervised", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.get_multi_gpu_models": [[19, 29], ["tensorflow.variable_scope", "range", "tensorflow.get_variable_scope", "tensorflow.name_scope", "tensorflow.device", "model.Model", "models.append", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope"], "function", ["None"], ["def", "get_multi_gpu_models", "(", "config", ",", "emb_mat", "=", "None", ")", ":", "\n", "  ", "models", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "tf", ".", "get_variable_scope", "(", ")", ")", "as", "vscope", ":", "\n", "    ", "for", "gpu_idx", "in", "range", "(", "config", ".", "num_gpus", ")", ":", "\n", "      ", "with", "tf", ".", "name_scope", "(", "\"model_{}\"", ".", "format", "(", "gpu_idx", ")", ")", "as", "scope", ",", "tf", ".", "device", "(", "\"/{}:{}\"", ".", "format", "(", "config", ".", "device_type", ",", "gpu_idx", ")", ")", ":", "\n", "        ", "if", "gpu_idx", ">", "0", ":", "\n", "          ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "model", "=", "Model", "(", "config", ",", "scope", ",", "emb_mat", ",", "rep", "=", "gpu_idx", "==", "0", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.bi_attention": [[739, 769], ["tensorflow.variable_scope", "tensorflow.tile", "tensorflow.tile", "my.tensorflow.nn.get_logits", "my.tensorflow.nn.softsel", "my.tensorflow.nn.softsel", "tensorflow.tile", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "tensorflow.reduce_max", "tensorflow.expand_dims", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.get_collection", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_max", "tensorflow.expand_dims", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softsel", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softsel", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax"], ["", "", "def", "bi_attention", "(", "config", ",", "is_train", ",", "h", ",", "u", ",", "h_mask", "=", "None", ",", "u_mask", "=", "None", ",", "scope", "=", "None", ",", "tensor_dict", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"bi_attention\"", ")", ":", "\n", "    ", "JX", "=", "tf", ".", "shape", "(", "h", ")", "[", "2", "]", "\n", "M", "=", "tf", ".", "shape", "(", "h", ")", "[", "1", "]", "\n", "JQ", "=", "tf", ".", "shape", "(", "u", ")", "[", "1", "]", "\n", "h_aug", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "h", ",", "3", ")", ",", "[", "1", ",", "1", ",", "1", ",", "JQ", ",", "1", "]", ")", "\n", "u_aug", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "u", ",", "1", ")", ",", "1", ")", ",", "[", "1", ",", "M", ",", "JX", ",", "1", ",", "1", "]", ")", "\n", "if", "h_mask", "is", "None", ":", "\n", "      ", "hu_mask", "=", "None", "\n", "", "else", ":", "\n", "      ", "h_mask_aug", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "h_mask", ",", "3", ")", ",", "[", "1", ",", "1", ",", "1", ",", "JQ", "]", ")", "\n", "u_mask_aug", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "u_mask", ",", "1", ")", ",", "1", ")", ",", "[", "1", ",", "M", ",", "JX", ",", "1", "]", ")", "\n", "hu_mask", "=", "h_mask_aug", "&", "u_mask_aug", "\n", "\n", "", "u_logits", "=", "get_logits", "(", "[", "h_aug", ",", "u_aug", "]", ",", "None", ",", "True", ",", "wd", "=", "config", ".", "wd", ",", "mask", "=", "hu_mask", ",", "\n", "is_train", "=", "is_train", ",", "func", "=", "config", ".", "logit_func", ",", "scope", "=", "'u_logits'", ")", "# [N, M, JX, JQ]", "\n", "u_a", "=", "softsel", "(", "u_aug", ",", "u_logits", ")", "# [N, M, JX, d]", "\n", "h_a", "=", "softsel", "(", "h", ",", "tf", ".", "reduce_max", "(", "u_logits", ",", "3", ")", ")", "# [N, M, d]", "\n", "h_a", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "h_a", ",", "2", ")", ",", "[", "1", ",", "1", ",", "JX", ",", "1", "]", ")", "\n", "\n", "if", "tensor_dict", "is", "not", "None", ":", "\n", "      ", "a_u", "=", "tf", ".", "nn", ".", "softmax", "(", "u_logits", ")", "# [N, M, JX, JQ]", "\n", "a_h", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reduce_max", "(", "u_logits", ",", "3", ")", ")", "\n", "tensor_dict", "[", "'a_u'", "]", "=", "a_u", "\n", "tensor_dict", "[", "'a_h'", "]", "=", "a_h", "\n", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", ")", "\n", "for", "var", "in", "variables", ":", "\n", "        ", "tensor_dict", "[", "var", ".", "name", "]", "=", "var", "\n", "\n", "", "", "return", "u_a", ",", "h_a", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.attention_layer": [[771, 785], ["tensorflow.variable_scope", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "model.bi_attention", "tensorflow.tile", "tensorflow.concat", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_mean"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.bi_attention"], ["", "", "def", "attention_layer", "(", "config", ",", "is_train", ",", "h", ",", "u", ",", "h_mask", "=", "None", ",", "u_mask", "=", "None", ",", "scope", "=", "None", ",", "tensor_dict", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"attention_layer\"", ")", ":", "\n", "    ", "JX", "=", "tf", ".", "shape", "(", "h", ")", "[", "2", "]", "\n", "M", "=", "tf", ".", "shape", "(", "h", ")", "[", "1", "]", "\n", "JQ", "=", "tf", ".", "shape", "(", "u", ")", "[", "1", "]", "\n", "if", "config", ".", "q2c_att", "or", "config", ".", "c2q_att", ":", "\n", "      ", "u_a", ",", "h_a", "=", "bi_attention", "(", "config", ",", "is_train", ",", "h", ",", "u", ",", "h_mask", "=", "h_mask", ",", "u_mask", "=", "u_mask", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "", "if", "not", "config", ".", "c2q_att", ":", "\n", "      ", "u_a", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_mean", "(", "u", ",", "1", ")", ",", "1", ")", ",", "1", ")", ",", "[", "1", ",", "M", ",", "JX", ",", "1", "]", ")", "\n", "", "if", "config", ".", "q2c_att", ":", "\n", "      ", "p0", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "h", ",", "u_a", ",", "h", "*", "u_a", ",", "h", "*", "h_a", "]", ")", "\n", "", "else", ":", "\n", "      ", "p0", "=", "tf", ".", "concat", "(", "axis", "=", "3", ",", "values", "=", "[", "h", ",", "u_a", ",", "h", "*", "u_a", "]", ")", "\n", "", "return", "p0", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.zhong_selfatt": [[787, 807], ["tensorflow.expand_dims", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "tensorflow.nn.softmax", "tensorflow.einsum", "tensorflow.sequence_mask", "tensorflow.squeeze", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.einsum", "tensorflow.squeeze", "tensorflow.shape", "tensorflow.einsum"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax"], ["", "", "def", "zhong_selfatt", "(", "U", ",", "dim", ",", "mask", "=", "None", ",", "seq_len", "=", "None", ",", "transform", "=", "None", ",", "scope", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "  ", "if", "mask", "is", "None", ":", "\n", "    ", "assert", "seq_len", "is", "not", "None", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "sequence_mask", "(", "seq_len", ",", "tf", ".", "shape", "(", "U", ")", "[", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", "or", "'zhong_selfAttention'", ",", "reuse", "=", "reuse", ")", ":", "\n", "    ", "W1", "=", "tf", ".", "get_variable", "(", "\"W1\"", ",", "[", "dim", ",", "dim", "]", ")", "\n", "b1", "=", "tf", ".", "get_variable", "(", "\"b1\"", ",", "[", "dim", ",", "]", ")", "\n", "W2", "=", "tf", ".", "get_variable", "(", "\"W2\"", ",", "[", "dim", ",", "1", "]", ")", "\n", "b2", "=", "tf", ".", "get_variable", "(", "\"b2\"", ",", "[", "1", ",", "]", ")", "\n", "layer1_output", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "einsum", "(", "'ijkl,lt->ijkt'", ",", "U", ",", "W1", ")", "+", "b1", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "squeeze", "(", "tf", ".", "einsum", "(", "'ijkl,lt->ijkt'", ",", "layer1_output", ",", "W2", ")", "+", "b2", ",", "axis", "=", "-", "1", ")", ")", "\n", "masked_logits", "=", "logits", "*", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "'float'", ")", "\n", "att", "=", "tf", ".", "nn", ".", "softmax", "(", "masked_logits", ")", "\n", "output", "=", "tf", ".", "einsum", "(", "\"ijkl,ijk->ijl\"", ",", "U", ",", "att", ")", "\n", "if", "transform", "==", "'expand'", ":", "\n", "      ", "output", "=", "tf", ".", "expand_dims", "(", "output", ",", "axis", "=", "1", ")", "\n", "", "elif", "transform", "==", "'squeeze'", ":", "\n", "      ", "output", "=", "tf", ".", "squeeze", "(", "output", ",", "axis", "=", "1", ")", "\n", "", "", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.Evaluation.__init__": [[14, 31], ["len", "evaluator.Evaluation.tensor_dict.items", "val.tolist", "tensor_dict.items"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "self", ".", "data_type", "=", "data_type", "\n", "self", ".", "global_step", "=", "global_step", "\n", "self", ".", "idxs", "=", "idxs", "\n", "self", ".", "yp", "=", "yp", "\n", "self", ".", "num_examples", "=", "len", "(", "yp", ")", "\n", "self", ".", "tensor_dict", "=", "None", "\n", "self", ".", "dict", "=", "{", "'data_type'", ":", "data_type", ",", "\n", "'global_step'", ":", "global_step", ",", "\n", "'yp'", ":", "yp", ",", "\n", "'idxs'", ":", "idxs", ",", "\n", "'num_examples'", ":", "self", ".", "num_examples", "}", "\n", "if", "tensor_dict", "is", "not", "None", ":", "\n", "      ", "self", ".", "tensor_dict", "=", "{", "key", ":", "val", ".", "tolist", "(", ")", "for", "key", ",", "val", "in", "tensor_dict", ".", "items", "(", ")", "}", "\n", "for", "key", ",", "val", "in", "self", ".", "tensor_dict", ".", "items", "(", ")", ":", "\n", "        ", "self", ".", "dict", "[", "key", "]", "=", "val", "\n", "", "", "self", ".", "summaries", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.Evaluation.__repr__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "\"{} step {}\"", ".", "format", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.Evaluation.__add__": [[35, 46], ["evaluator.Evaluation", "evaluator.Evaluation.tensor_dict.items"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "other", "==", "0", ":", "\n", "      ", "return", "self", "\n", "", "assert", "self", ".", "data_type", "==", "other", ".", "data_type", "\n", "assert", "self", ".", "global_step", "==", "other", ".", "global_step", "\n", "new_yp", "=", "self", ".", "yp", "+", "other", ".", "yp", "\n", "new_idxs", "=", "self", ".", "idxs", "+", "other", ".", "idxs", "\n", "new_tensor_dict", "=", "None", "\n", "if", "self", ".", "tensor_dict", "is", "not", "None", ":", "\n", "      ", "new_tensor_dict", "=", "{", "key", ":", "val", "+", "other", ".", "tensor_dict", "[", "key", "]", "for", "key", ",", "val", "in", "self", ".", "tensor_dict", ".", "items", "(", ")", "}", "\n", "", "return", "Evaluation", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ",", "new_idxs", ",", "new_yp", ",", "tensor_dict", "=", "new_tensor_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.Evaluation.__radd__": [[47, 49], ["evaluator.Evaluation.__add__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateEvaluation.__add__"], ["", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "    ", "return", "self", ".", "__add__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.LabeledEvaluation.__init__": [[52, 56], ["evaluator.Evaluation.__init__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["  ", "def", "__init__", "(", "self", ",", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "y", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "LabeledEvaluation", ",", "self", ")", ".", "__init__", "(", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "dict", "[", "'y'", "]", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.LabeledEvaluation.__add__": [[57, 68], ["evaluator.LabeledEvaluation", "numpy.concatenate", "evaluator.LabeledEvaluation.tensor_dict.items"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "other", "==", "0", ":", "\n", "      ", "return", "self", "\n", "", "assert", "self", ".", "data_type", "==", "other", ".", "data_type", "\n", "assert", "self", ".", "global_step", "==", "other", ".", "global_step", "\n", "new_yp", "=", "self", ".", "yp", "+", "other", ".", "yp", "\n", "new_y", "=", "self", ".", "y", "+", "other", ".", "y", "\n", "new_idxs", "=", "self", ".", "idxs", "+", "other", ".", "idxs", "\n", "if", "self", ".", "tensor_dict", "is", "not", "None", ":", "\n", "      ", "new_tensor_dict", "=", "{", "key", ":", "np", ".", "concatenate", "(", "(", "val", ",", "other", ".", "tensor_dict", "[", "key", "]", ")", ",", "axis", "=", "0", ")", "for", "key", ",", "val", "in", "self", ".", "tensor_dict", ".", "items", "(", ")", "}", "\n", "", "return", "LabeledEvaluation", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ",", "new_idxs", ",", "new_yp", ",", "new_y", ",", "tensor_dict", "=", "new_tensor_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.AccuracyEvaluation.__init__": [[71, 82], ["evaluator.LabeledEvaluation.__init__", "tensorflow.Summary", "tensorflow.Summary", "sum", "len", "tensorflow.Summary.Value", "tensorflow.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["  ", "def", "__init__", "(", "self", ",", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "y", ",", "correct", ",", "loss", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "AccuracyEvaluation", ",", "self", ")", ".", "__init__", "(", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "y", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "correct", "=", "correct", "\n", "self", ".", "acc", "=", "sum", "(", "correct", ")", "/", "len", "(", "correct", ")", "\n", "self", ".", "dict", "[", "'loss'", "]", "=", "loss", "\n", "self", ".", "dict", "[", "'correct'", "]", "=", "correct", "\n", "self", ".", "dict", "[", "'acc'", "]", "=", "self", ".", "acc", "\n", "loss_summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'{}/loss'", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "self", ".", "loss", ")", "]", ")", "\n", "acc_summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'{}/acc'", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "self", ".", "acc", ")", "]", ")", "\n", "self", ".", "summaries", "=", "[", "loss_summary", ",", "acc_summary", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.AccuracyEvaluation.__repr__": [[83, 85], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "\"{} step {}: accuracy={}, loss={}\"", ".", "format", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ",", "self", ".", "acc", ",", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.AccuracyEvaluation.__add__": [[86, 99], ["evaluator.AccuracyEvaluation", "len", "numpy.concatenate", "evaluator.AccuracyEvaluation.tensor_dict.items"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "other", "==", "0", ":", "\n", "      ", "return", "self", "\n", "", "assert", "self", ".", "data_type", "==", "other", ".", "data_type", "\n", "assert", "self", ".", "global_step", "==", "other", ".", "global_step", "\n", "new_idxs", "=", "self", ".", "idxs", "+", "other", ".", "idxs", "\n", "new_yp", "=", "self", ".", "yp", "+", "other", ".", "yp", "\n", "new_y", "=", "self", ".", "y", "+", "other", ".", "y", "\n", "new_correct", "=", "self", ".", "correct", "+", "other", ".", "correct", "\n", "new_loss", "=", "(", "self", ".", "loss", "*", "self", ".", "num_examples", "+", "other", ".", "loss", "*", "other", ".", "num_examples", ")", "/", "len", "(", "new_correct", ")", "\n", "if", "self", ".", "tensor_dict", "is", "not", "None", ":", "\n", "      ", "new_tensor_dict", "=", "{", "key", ":", "np", ".", "concatenate", "(", "(", "val", ",", "other", ".", "tensor_dict", "[", "key", "]", ")", ",", "axis", "=", "0", ")", "for", "key", ",", "val", "in", "self", ".", "tensor_dict", ".", "items", "(", ")", "}", "\n", "", "return", "AccuracyEvaluation", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ",", "new_idxs", ",", "new_yp", ",", "new_y", ",", "new_correct", ",", "new_loss", ",", "tensor_dict", "=", "new_tensor_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.Evaluator.__init__": [[102, 108], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "model", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "self", ".", "config", "=", "config", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "global_step", "=", "model", ".", "global_step", "\n", "self", ".", "yp", "=", "model", ".", "yp", "\n", "self", ".", "tensor_dict", "=", "{", "}", "if", "tensor_dict", "is", "None", "else", "tensor_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.Evaluator.get_evaluation": [[109, 117], ["evaluator.Evaluator.model.get_feed_dict", "sess.run", "dict", "evaluator.Evaluation", "zip", "int", "yp.tolist", "list", "evaluator.Evaluator.tensor_dict.keys", "evaluator.Evaluator.tensor_dict.values"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict"], ["", "def", "get_evaluation", "(", "self", ",", "sess", ",", "batch", ")", ":", "\n", "    ", "idxs", ",", "data_set", "=", "batch", "\n", "feed_dict", "=", "self", ".", "model", ".", "get_feed_dict", "(", "data_set", ",", "False", ",", "supervised", "=", "False", ")", "\n", "global_step", ",", "yp", ",", "vals", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "yp", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "yp", "=", "yp", "[", ":", "data_set", ".", "num_examples", "]", "\n", "tensor_dict", "=", "dict", "(", "zip", "(", "self", ".", "tensor_dict", ".", "keys", "(", ")", ",", "vals", ")", ")", "\n", "e", "=", "Evaluation", "(", "data_set", ".", "data_type", ",", "int", "(", "global_step", ")", ",", "idxs", ",", "yp", ".", "tolist", "(", ")", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.Evaluator.get_evaluation_from_batches": [[118, 121], ["sum", "evaluator.Evaluator.get_evaluation"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluator.get_evaluation"], ["", "def", "get_evaluation_from_batches", "(", "self", ",", "sess", ",", "batches", ")", ":", "\n", "    ", "e", "=", "sum", "(", "self", ".", "get_evaluation", "(", "sess", ",", "batch", ")", "for", "batch", "in", "batches", ")", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.LabeledEvaluator.__init__": [[124, 127], ["evaluator.Evaluator.__init__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "model", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "LabeledEvaluator", ",", "self", ")", ".", "__init__", "(", "config", ",", "model", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "y", "=", "model", ".", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.LabeledEvaluator.get_evaluation": [[128, 137], ["evaluator.LabeledEvaluator.model.get_feed_dict", "sess.run", "dict", "evaluator.LabeledEvaluation", "zip", "int", "yp.tolist", "y.tolist", "list", "evaluator.LabeledEvaluator.tensor_dict.keys", "evaluator.LabeledEvaluator.tensor_dict.values"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict"], ["", "def", "get_evaluation", "(", "self", ",", "sess", ",", "batch", ")", ":", "\n", "    ", "idxs", ",", "data_set", "=", "batch", "\n", "feed_dict", "=", "self", ".", "model", ".", "get_feed_dict", "(", "data_set", ",", "False", ",", "supervised", "=", "False", ")", "\n", "global_step", ",", "yp", ",", "vals", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "yp", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "yp", "=", "yp", "[", ":", "data_set", ".", "num_examples", "]", "\n", "y", "=", "feed_dict", "[", "self", ".", "y", "]", "\n", "tensor_dict", "=", "dict", "(", "zip", "(", "self", ".", "tensor_dict", ".", "keys", "(", ")", ",", "vals", ")", ")", "\n", "e", "=", "LabeledEvaluation", "(", "data_set", ".", "data_type", ",", "int", "(", "global_step", ")", ",", "idxs", ",", "yp", ".", "tolist", "(", ")", ",", "y", ".", "tolist", "(", ")", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.AccuracyEvaluator.__init__": [[140, 143], ["evaluator.LabeledEvaluator.__init__", "model.get_loss"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_loss"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "model", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "AccuracyEvaluator", ",", "self", ")", ".", "__init__", "(", "config", ",", "model", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "loss", "=", "model", ".", "get_loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.AccuracyEvaluator.get_evaluation": [[144, 155], ["isinstance", "evaluator.AccuracyEvaluator.model.get_feed_dict", "sess.run", "dict", "evaluator.AccuracyEvaluation", "evaluator.AccuracyEvaluator.__class__.compare", "zip", "int", "yp.tolist", "float", "list", "zip", "evaluator.AccuracyEvaluator.tensor_dict.keys", "evaluator.AccuracyEvaluator.tensor_dict.values"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluator.compare"], ["", "def", "get_evaluation", "(", "self", ",", "sess", ",", "batch", ")", ":", "\n", "    ", "idxs", ",", "data_set", "=", "batch", "\n", "assert", "isinstance", "(", "data_set", ",", "DataSet", ")", "\n", "feed_dict", "=", "self", ".", "model", ".", "get_feed_dict", "(", "data_set", ",", "False", ")", "\n", "global_step", ",", "yp", ",", "loss", ",", "vals", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "yp", ",", "self", ".", "loss", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "y", "=", "data_set", ".", "data", "[", "'y'", "]", "\n", "yp", "=", "yp", "[", ":", "data_set", ".", "num_examples", "]", "\n", "correct", "=", "[", "self", ".", "__class__", ".", "compare", "(", "yi", ",", "ypi", ")", "for", "yi", ",", "ypi", "in", "zip", "(", "y", ",", "yp", ")", "]", "\n", "tensor_dict", "=", "dict", "(", "zip", "(", "self", ".", "tensor_dict", ".", "keys", "(", ")", ",", "vals", ")", ")", "\n", "e", "=", "AccuracyEvaluation", "(", "data_set", ".", "data_type", ",", "int", "(", "global_step", ")", ",", "idxs", ",", "yp", ".", "tolist", "(", ")", ",", "y", ",", "correct", ",", "float", "(", "loss", ")", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.AccuracyEvaluator.compare": [[156, 162], ["int", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax"], ["", "@", "staticmethod", "\n", "def", "compare", "(", "yi", ",", "ypi", ")", ":", "\n", "    ", "for", "start", ",", "stop", "in", "yi", ":", "\n", "      ", "if", "start", "==", "int", "(", "np", ".", "argmax", "(", "ypi", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.AccuracyEvaluator2.compare": [[165, 173], ["int", "int", "numpy.argmax", "numpy.argmax", "tuple", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax"], ["  ", "@", "staticmethod", "\n", "def", "compare", "(", "yi", ",", "ypi", ")", ":", "\n", "    ", "for", "start", ",", "stop", "in", "yi", ":", "\n", "      ", "para_start", "=", "int", "(", "np", ".", "argmax", "(", "np", ".", "max", "(", "ypi", ",", "1", ")", ")", ")", "\n", "sent_start", "=", "int", "(", "np", ".", "argmax", "(", "ypi", "[", "para_start", "]", ")", ")", "\n", "if", "tuple", "(", "start", ")", "==", "(", "para_start", ",", "sent_start", ")", ":", "\n", "        ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluation.__init__": [[176, 183], ["evaluator.Evaluation.__init__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["  ", "def", "__init__", "(", "self", ",", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "yp2", ",", "loss", ",", "id2answer_dict", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "ForwardEvaluation", ",", "self", ")", ".", "__init__", "(", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "yp2", "=", "yp2", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "dict", "[", "'loss'", "]", "=", "loss", "\n", "self", ".", "dict", "[", "'yp2'", "]", "=", "yp2", "\n", "self", ".", "id2answer_dict", "=", "id2answer_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluation.__add__": [[184, 199], ["dict", "dict", "evaluator.ForwardEvaluation", "len", "list", "list", "list", "list", "numpy.concatenate", "evaluator.ForwardEvaluation.id2answer_dict.items", "other.id2answer_dict.items", "evaluator.ForwardEvaluation.id2answer_dict[].items", "other.id2answer_dict[].items", "evaluator.ForwardEvaluation.tensor_dict.items"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "other", "==", "0", ":", "\n", "      ", "return", "self", "\n", "", "assert", "self", ".", "data_type", "==", "other", ".", "data_type", "\n", "assert", "self", ".", "global_step", "==", "other", ".", "global_step", "\n", "new_idxs", "=", "self", ".", "idxs", "+", "other", ".", "idxs", "\n", "new_yp", "=", "self", ".", "yp", "+", "other", ".", "yp", "\n", "new_yp2", "=", "self", ".", "yp2", "+", "other", ".", "yp2", "\n", "new_loss", "=", "(", "self", ".", "loss", "*", "self", ".", "num_examples", "+", "other", ".", "loss", "*", "other", ".", "num_examples", ")", "/", "len", "(", "new_yp", ")", "\n", "new_id2answer_dict", "=", "dict", "(", "list", "(", "self", ".", "id2answer_dict", ".", "items", "(", ")", ")", "+", "list", "(", "other", ".", "id2answer_dict", ".", "items", "(", ")", ")", ")", "\n", "new_id2score_dict", "=", "dict", "(", "list", "(", "self", ".", "id2answer_dict", "[", "'scores'", "]", ".", "items", "(", ")", ")", "+", "list", "(", "other", ".", "id2answer_dict", "[", "'scores'", "]", ".", "items", "(", ")", ")", ")", "\n", "new_id2answer_dict", "[", "'scores'", "]", "=", "new_id2score_dict", "\n", "if", "self", ".", "tensor_dict", "is", "not", "None", ":", "\n", "      ", "new_tensor_dict", "=", "{", "key", ":", "np", ".", "concatenate", "(", "(", "val", ",", "other", ".", "tensor_dict", "[", "key", "]", ")", ",", "axis", "=", "0", ")", "for", "key", ",", "val", "in", "self", ".", "tensor_dict", ".", "items", "(", ")", "}", "\n", "", "return", "ForwardEvaluation", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ",", "new_idxs", ",", "new_yp", ",", "new_yp2", ",", "new_loss", ",", "new_id2answer_dict", ",", "tensor_dict", "=", "new_tensor_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluation.__repr__": [[200, 202], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "\"{} step {}: loss={:.4f}\"", ".", "format", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ",", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1Evaluation.__init__": [[205, 216], ["evaluator.AccuracyEvaluation.__init__", "float", "tensorflow.Summary", "evaluator.F1Evaluation.summaries.append", "numpy.mean", "tensorflow.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["  ", "def", "__init__", "(", "self", ",", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "yp2", ",", "y", ",", "correct", ",", "loss", ",", "f1s", ",", "id2answer_dict", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "F1Evaluation", ",", "self", ")", ".", "__init__", "(", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "y", ",", "correct", ",", "loss", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "yp2", "=", "yp2", "\n", "self", ".", "f1s", "=", "f1s", "\n", "self", ".", "f1", "=", "float", "(", "np", ".", "mean", "(", "f1s", ")", ")", "\n", "self", ".", "dict", "[", "'yp2'", "]", "=", "yp2", "\n", "self", ".", "dict", "[", "'f1s'", "]", "=", "f1s", "\n", "self", ".", "dict", "[", "'f1'", "]", "=", "self", ".", "f1", "\n", "self", ".", "id2answer_dict", "=", "id2answer_dict", "\n", "f1_summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'{}/f1'", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "self", ".", "f1", ")", "]", ")", "\n", "self", ".", "summaries", ".", "append", "(", "f1_summary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1Evaluation.__add__": [[217, 240], ["dict", "dict", "evaluator.F1Evaluation", "len", "dict", "list", "list", "list", "list", "evaluator.F1Evaluation.id2answer_dict.items", "other.id2answer_dict.items", "evaluator.F1Evaluation.id2answer_dict[].items", "other.id2answer_dict[].items", "list", "list", "evaluator.F1Evaluation.id2answer_dict[].items", "other.id2answer_dict[].items"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "other", "==", "0", ":", "\n", "      ", "return", "self", "\n", "", "assert", "self", ".", "data_type", "==", "other", ".", "data_type", "\n", "assert", "self", ".", "global_step", "==", "other", ".", "global_step", "\n", "new_idxs", "=", "self", ".", "idxs", "+", "other", ".", "idxs", "\n", "new_yp", "=", "self", ".", "yp", "+", "other", ".", "yp", "\n", "new_yp2", "=", "self", ".", "yp2", "+", "other", ".", "yp2", "\n", "new_y", "=", "self", ".", "y", "+", "other", ".", "y", "\n", "new_correct", "=", "self", ".", "correct", "+", "other", ".", "correct", "\n", "new_f1s", "=", "self", ".", "f1s", "+", "other", ".", "f1s", "\n", "new_loss", "=", "(", "self", ".", "loss", "*", "self", ".", "num_examples", "+", "other", ".", "loss", "*", "other", ".", "num_examples", ")", "/", "len", "(", "new_correct", ")", "\n", "new_id2answer_dict", "=", "dict", "(", "list", "(", "self", ".", "id2answer_dict", ".", "items", "(", ")", ")", "+", "list", "(", "other", ".", "id2answer_dict", ".", "items", "(", ")", ")", ")", "\n", "new_id2score_dict", "=", "dict", "(", "list", "(", "self", ".", "id2answer_dict", "[", "'scores'", "]", ".", "items", "(", ")", ")", "+", "list", "(", "other", ".", "id2answer_dict", "[", "'scores'", "]", ".", "items", "(", ")", ")", ")", "\n", "new_id2answer_dict", "[", "'scores'", "]", "=", "new_id2score_dict", "\n", "if", "'na'", "in", "self", ".", "id2answer_dict", ":", "\n", "      ", "new_id2na_dict", "=", "dict", "(", "list", "(", "self", ".", "id2answer_dict", "[", "'na'", "]", ".", "items", "(", ")", ")", "+", "list", "(", "other", ".", "id2answer_dict", "[", "'na'", "]", ".", "items", "(", ")", ")", ")", "\n", "new_id2answer_dict", "[", "'na'", "]", "=", "new_id2na_dict", "\n", "", "e", "=", "F1Evaluation", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ",", "new_idxs", ",", "new_yp", ",", "new_yp2", ",", "new_y", ",", "new_correct", ",", "new_loss", ",", "new_f1s", ",", "new_id2answer_dict", ")", "\n", "if", "'wyp'", "in", "self", ".", "dict", ":", "\n", "      ", "new_wyp", "=", "self", ".", "dict", "[", "'wyp'", "]", "+", "other", ".", "dict", "[", "'wyp'", "]", "\n", "e", ".", "dict", "[", "'wyp'", "]", "=", "new_wyp", "\n", "", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1Evaluation.__repr__": [[241, 243], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "\"{} step {}: accuracy={:.4f}, f1={:.4f}, loss={:.4f}\"", ".", "format", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ",", "self", ".", "acc", ",", "self", ".", "f1", ",", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateEvaluation.__init__": [[246, 257], ["evaluator.AccuracyEvaluation.__init__", "float", "tensorflow.Summary", "evaluator.F1CandidateEvaluation.summaries.append", "numpy.mean", "tensorflow.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["  ", "def", "__init__", "(", "self", ",", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "y", ",", "correct", ",", "loss", ",", "f1s", ",", "id2answer_dict", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "F1CandidateEvaluation", ",", "self", ")", ".", "__init__", "(", "data_type", ",", "global_step", ",", "idxs", ",", "yp", ",", "y", ",", "correct", ",", "loss", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "#self.yp2 = yp2", "\n", "self", ".", "f1s", "=", "f1s", "\n", "self", ".", "f1", "=", "float", "(", "np", ".", "mean", "(", "f1s", ")", ")", "\n", "#self.dict['yp2'] = yp2", "\n", "self", ".", "dict", "[", "'f1s'", "]", "=", "f1s", "\n", "self", ".", "dict", "[", "'f1'", "]", "=", "self", ".", "f1", "\n", "self", ".", "id2answer_dict", "=", "id2answer_dict", "\n", "f1_summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'{}/f1'", ".", "format", "(", "data_type", ")", ",", "simple_value", "=", "self", ".", "f1", ")", "]", ")", "\n", "self", ".", "summaries", ".", "append", "(", "f1_summary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateEvaluation.__add__": [[258, 281], ["dict", "dict", "evaluator.F1CandidateEvaluation", "len", "dict", "list", "list", "list", "list", "evaluator.F1CandidateEvaluation.id2answer_dict.items", "other.id2answer_dict.items", "evaluator.F1CandidateEvaluation.id2answer_dict[].items", "other.id2answer_dict[].items", "list", "list", "evaluator.F1CandidateEvaluation.id2answer_dict[].items", "other.id2answer_dict[].items"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "    ", "if", "other", "==", "0", ":", "\n", "      ", "return", "self", "\n", "", "assert", "self", ".", "data_type", "==", "other", ".", "data_type", "\n", "assert", "self", ".", "global_step", "==", "other", ".", "global_step", "\n", "new_idxs", "=", "self", ".", "idxs", "+", "other", ".", "idxs", "\n", "new_yp", "=", "self", ".", "yp", "+", "other", ".", "yp", "\n", "#new_yp2 = self.yp2 + other.yp2", "\n", "new_y", "=", "self", ".", "y", "+", "other", ".", "y", "\n", "new_correct", "=", "self", ".", "correct", "+", "other", ".", "correct", "\n", "new_f1s", "=", "self", ".", "f1s", "+", "other", ".", "f1s", "\n", "new_loss", "=", "(", "self", ".", "loss", "*", "self", ".", "num_examples", "+", "other", ".", "loss", "*", "other", ".", "num_examples", ")", "/", "len", "(", "new_correct", ")", "\n", "new_id2answer_dict", "=", "dict", "(", "list", "(", "self", ".", "id2answer_dict", ".", "items", "(", ")", ")", "+", "list", "(", "other", ".", "id2answer_dict", ".", "items", "(", ")", ")", ")", "\n", "new_id2score_dict", "=", "dict", "(", "list", "(", "self", ".", "id2answer_dict", "[", "'scores'", "]", ".", "items", "(", ")", ")", "+", "list", "(", "other", ".", "id2answer_dict", "[", "'scores'", "]", ".", "items", "(", ")", ")", ")", "\n", "new_id2answer_dict", "[", "'scores'", "]", "=", "new_id2score_dict", "\n", "if", "'na'", "in", "self", ".", "id2answer_dict", ":", "\n", "      ", "new_id2na_dict", "=", "dict", "(", "list", "(", "self", ".", "id2answer_dict", "[", "'na'", "]", ".", "items", "(", ")", ")", "+", "list", "(", "other", ".", "id2answer_dict", "[", "'na'", "]", ".", "items", "(", ")", ")", ")", "\n", "new_id2answer_dict", "[", "'na'", "]", "=", "new_id2na_dict", "\n", "", "e", "=", "F1CandidateEvaluation", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ",", "new_idxs", ",", "new_yp", ",", "new_y", ",", "new_correct", ",", "new_loss", ",", "new_f1s", ",", "new_id2answer_dict", ")", "\n", "if", "'wyp'", "in", "self", ".", "dict", ":", "\n", "      ", "new_wyp", "=", "self", ".", "dict", "[", "'wyp'", "]", "+", "other", ".", "dict", "[", "'wyp'", "]", "\n", "e", ".", "dict", "[", "'wyp'", "]", "=", "new_wyp", "\n", "", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateEvaluation.__repr__": [[282, 284], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "\"{} step {}: accuracy={:.4f}, f1={:.4f}, loss={:.4f}\"", ".", "format", "(", "self", ".", "data_type", ",", "self", ".", "global_step", ",", "self", ".", "acc", ",", "self", ".", "f1", ",", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1Evaluator.__init__": [[287, 294], ["evaluator.LabeledEvaluator.__init__", "model.get_loss"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_loss"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "model", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "F1Evaluator", ",", "self", ")", ".", "__init__", "(", "config", ",", "model", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "yp2", "=", "model", ".", "yp2", "\n", "self", ".", "wyp", "=", "model", ".", "wyp", "\n", "self", ".", "loss", "=", "model", ".", "get_loss", "(", ")", "\n", "if", "config", ".", "na", ":", "\n", "      ", "self", ".", "na", "=", "model", ".", "na_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1Evaluator.get_evaluation": [[295, 344], ["evaluator.F1Evaluator._split_batch", "isinstance", "evaluator.F1Evaluator._get_feed_dict", "dict", "evaluator.F1Evaluation", "sess.run", "sess.run", "zip", "zip", "squad.utils.get_phrase", "evaluator.F1Evaluator.__class__.compare2", "evaluator.F1Evaluator.__class__.span_f1", "zip", "int", "yp.tolist", "yp2.tolist", "float", "wyp.tolist", "len", "len", "len", "len", "evaluator.F1Evaluator.get_evaluation._get2"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateDocSelEvaluator._split_batch", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateDocSelEvaluator._get_feed_dict", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_phrase", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluator.compare2", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_f1"], ["", "", "def", "get_evaluation", "(", "self", ",", "sess", ",", "batch", ")", ":", "\n", "    ", "idxs", ",", "data_set", "=", "self", ".", "_split_batch", "(", "batch", ")", "\n", "assert", "isinstance", "(", "data_set", ",", "DataSet", ")", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "batch", ")", "\n", "if", "self", ".", "config", ".", "na", ":", "\n", "      ", "global_step", ",", "yp", ",", "yp2", ",", "wyp", ",", "loss", ",", "na", ",", "vals", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "yp", ",", "self", ".", "yp2", ",", "self", ".", "wyp", ",", "self", ".", "loss", ",", "self", ".", "na", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "      ", "global_step", ",", "yp", ",", "yp2", ",", "wyp", ",", "loss", ",", "vals", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "yp", ",", "self", ".", "yp2", ",", "self", ".", "wyp", ",", "self", ".", "loss", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "y", "=", "data_set", ".", "data", "[", "'y'", "]", "\n", "\n", "yp", ",", "yp2", ",", "wyp", "=", "yp", "[", ":", "data_set", ".", "num_examples", "]", ",", "yp2", "[", ":", "data_set", ".", "num_examples", "]", ",", "wyp", "[", ":", "data_set", ".", "num_examples", "]", "\n", "if", "self", ".", "config", ".", "wy", ":", "\n", "      ", "spans", ",", "scores", "=", "zip", "(", "*", "[", "get_best_span_wy", "(", "wypi", ",", "self", ".", "config", ".", "th", ")", "for", "wypi", "in", "wyp", "]", ")", "\n", "", "else", ":", "\n", "      ", "spans", ",", "scores", "=", "zip", "(", "*", "[", "get_best_span", "(", "ypi", ",", "yp2i", ")", "for", "ypi", ",", "yp2i", "in", "zip", "(", "yp", ",", "yp2", ")", "]", ")", "\n", "\n", "", "def", "_get", "(", "xi", ",", "span", ")", ":", "\n", "      ", "if", "len", "(", "xi", ")", "<=", "span", "[", "0", "]", "[", "0", "]", ":", "\n", "        ", "return", "[", "\"\"", "]", "\n", "", "if", "len", "(", "xi", "[", "span", "[", "0", "]", "[", "0", "]", "]", ")", "<=", "span", "[", "1", "]", "[", "1", "]", ":", "\n", "        ", "return", "[", "\"\"", "]", "\n", "", "return", "xi", "[", "span", "[", "0", "]", "[", "0", "]", "]", "[", "span", "[", "0", "]", "[", "1", "]", ":", "span", "[", "1", "]", "[", "1", "]", "]", "\n", "\n", "", "def", "_get2", "(", "context", ",", "xi", ",", "span", ")", ":", "\n", "      ", "if", "len", "(", "xi", ")", "<=", "span", "[", "0", "]", "[", "0", "]", ":", "\n", "        ", "return", "\"\"", "\n", "", "if", "len", "(", "xi", "[", "span", "[", "0", "]", "[", "0", "]", "]", ")", "<=", "span", "[", "1", "]", "[", "1", "]", ":", "\n", "        ", "return", "\"\"", "\n", "", "return", "get_phrase", "(", "context", ",", "xi", ",", "span", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "split_supports", ":", "\n", "      ", "id2answer_dict", "=", "{", "id_", ":", "_get2", "(", "context", "[", "0", "]", ",", "xi", ",", "span", ")", "\n", "for", "id_", ",", "xi", ",", "span", ",", "context", "in", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "data_set", ".", "data", "[", "'x2'", "]", ",", "spans", ",", "data_set", ".", "data", "[", "'p2'", "]", ")", "}", "\n", "", "else", ":", "\n", "      ", "id2answer_dict", "=", "{", "id_", ":", "_get2", "(", "context", "[", "0", "]", ",", "xi", ",", "span", ")", "\n", "for", "id_", ",", "xi", ",", "span", ",", "context", "in", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "data_set", ".", "data", "[", "'x'", "]", ",", "spans", ",", "data_set", ".", "data", "[", "'p'", "]", ")", "}", "\n", "", "id2score_dict", "=", "{", "id_", ":", "score", "for", "id_", ",", "score", "in", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "scores", ")", "}", "\n", "id2answer_dict", "[", "'scores'", "]", "=", "id2score_dict", "\n", "if", "self", ".", "config", ".", "na", ":", "\n", "      ", "id2na_dict", "=", "{", "id_", ":", "float", "(", "each", ")", "for", "id_", ",", "each", "in", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "na", ")", "}", "\n", "id2answer_dict", "[", "'na'", "]", "=", "id2na_dict", "\n", "", "correct", "=", "[", "self", ".", "__class__", ".", "compare2", "(", "yi", ",", "span", ")", "for", "yi", ",", "span", "in", "zip", "(", "y", ",", "spans", ")", "]", "\n", "f1s", "=", "[", "self", ".", "__class__", ".", "span_f1", "(", "yi", ",", "span", ")", "for", "yi", ",", "span", "in", "zip", "(", "y", ",", "spans", ")", "]", "\n", "tensor_dict", "=", "dict", "(", "zip", "(", "self", ".", "tensor_dict", ".", "keys", "(", ")", ",", "vals", ")", ")", "\n", "e", "=", "F1Evaluation", "(", "data_set", ".", "data_type", ",", "int", "(", "global_step", ")", ",", "idxs", ",", "yp", ".", "tolist", "(", ")", ",", "yp2", ".", "tolist", "(", ")", ",", "y", ",", "\n", "correct", ",", "float", "(", "loss", ")", ",", "f1s", ",", "id2answer_dict", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "if", "self", ".", "config", ".", "wy", ":", "\n", "      ", "e", ".", "dict", "[", "'wyp'", "]", "=", "wyp", ".", "tolist", "(", ")", "\n", "", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1Evaluator._split_batch": [[345, 347], ["None"], "methods", ["None"], ["", "def", "_split_batch", "(", "self", ",", "batch", ")", ":", "\n", "    ", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1Evaluator._get_feed_dict": [[348, 350], ["evaluator.F1Evaluator.model.get_feed_dict"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict"], ["", "def", "_get_feed_dict", "(", "self", ",", "batch", ")", ":", "\n", "    ", "return", "self", ".", "model", ".", "get_feed_dict", "(", "batch", "[", "1", "]", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1Evaluator.compare": [[351, 360], ["my.utils.argmax", "numpy.zeros", "numpy.ones", "tuple", "my.utils.argmax"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax"], ["", "@", "staticmethod", "\n", "def", "compare", "(", "yi", ",", "ypi", ",", "yp2i", ")", ":", "\n", "    ", "for", "start", ",", "stop", "in", "yi", ":", "\n", "      ", "aypi", "=", "argmax", "(", "ypi", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "yp2i", ".", "shape", ")", "\n", "mask", "[", "aypi", "[", "0", "]", ",", "aypi", "[", "1", "]", ":", "]", "=", "np", ".", "ones", "(", "[", "yp2i", ".", "shape", "[", "1", "]", "-", "aypi", "[", "1", "]", "]", ")", "\n", "if", "tuple", "(", "start", ")", "==", "aypi", "and", "(", "stop", "[", "0", "]", ",", "stop", "[", "1", "]", "-", "1", ")", "==", "argmax", "(", "yp2i", "*", "mask", ")", ":", "\n", "        ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1Evaluator.compare2": [[361, 367], ["tuple", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compare2", "(", "yi", ",", "span", ")", ":", "\n", "    ", "for", "start", ",", "stop", "in", "yi", ":", "\n", "      ", "if", "tuple", "(", "start", ")", "==", "span", "[", "0", "]", "and", "tuple", "(", "stop", ")", "==", "span", "[", "1", "]", ":", "\n", "        ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1Evaluator.span_f1": [[368, 378], ["my.nltk_utils.span_f1", "max"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_f1"], ["", "@", "staticmethod", "\n", "def", "span_f1", "(", "yi", ",", "span", ")", ":", "\n", "    ", "max_f1", "=", "0", "\n", "for", "start", ",", "stop", "in", "yi", ":", "\n", "      ", "if", "start", "[", "0", "]", "==", "span", "[", "0", "]", "[", "0", "]", ":", "\n", "        ", "true_span", "=", "start", "[", "1", "]", ",", "stop", "[", "1", "]", "\n", "pred_span", "=", "span", "[", "0", "]", "[", "1", "]", ",", "span", "[", "1", "]", "[", "1", "]", "\n", "f1", "=", "span_f1", "(", "true_span", ",", "pred_span", ")", "\n", "max_f1", "=", "max", "(", "f1", ",", "max_f1", ")", "\n", "", "", "return", "max_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateEvaluator.__init__": [[381, 388], ["evaluator.LabeledEvaluator.__init__", "model.get_loss"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_loss"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "model", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "F1CandidateEvaluator", ",", "self", ")", ".", "__init__", "(", "config", ",", "model", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "loss", "=", "model", ".", "get_loss", "(", ")", "\n", "if", "config", ".", "na", ":", "\n", "      ", "self", ".", "na", "=", "model", ".", "na_prob", "\n", "", "self", ".", "not_in_first_sent_count", "=", "0", "\n", "self", ".", "found_answer_doc_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateEvaluator.get_evaluation": [[389, 545], ["evaluator.F1CandidateEvaluator._split_batch", "isinstance", "evaluator.F1CandidateEvaluator._get_feed_dict", "numpy.argmax", "zip", "dict", "evaluator.F1CandidateEvaluation", "list", "enumerate", "sess.partial_run_setup", "enumerate", "print", "enumerate", "numpy.squeeze", "print", "print", "squad.utils.get_phrase", "numpy.argmax", "evaluator.F1CandidateEvaluator.__class__.compare2", "evaluator.F1CandidateEvaluator.__class__.span_f1", "zip", "int", "yp.tolist", "float", "wyp.tolist", "evaluator.F1CandidateEvaluator.keys", "list", "zip", "model.assembler.get_sentence_ids", "sess.partial_run", "sess.run", "enumerate", "numpy.squeeze", "len", "len", "len", "len", "enumerate", "evaluator.F1CandidateEvaluator.get_evaluation._get2"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateDocSelEvaluator._split_batch", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateDocSelEvaluator._get_feed_dict", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_phrase", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluator.compare2", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_f1", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.reasoning_layers.assembler.BiAttnAssembler.get_sentence_ids"], ["", "def", "get_evaluation", "(", "self", ",", "sess", ",", "batch", ")", ":", "\n", "    ", "idxs", ",", "data_set", "=", "self", ".", "_split_batch", "(", "batch", ")", "\n", "assert", "isinstance", "(", "data_set", ",", "DataSet", ")", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "batch", ")", "\n", "partial_run", "=", "False", "\n", "config", "=", "self", ".", "config", "\n", "doc_lst", "=", "None", "\n", "\n", "if", "config", ".", "use_assembler", ":", "\n", "      ", "new_feed_dict", "=", "{", "}", "\n", "to_run", "=", "[", "]", "\n", "feeds", "=", "list", "(", "feed_dict", ".", "keys", "(", ")", ")", "\n", "for", "mid", ",", "model", "in", "enumerate", "(", "self", ".", "models", ")", ":", "\n", "        ", "to_run", "+=", "[", "model", ".", "mac_rnn_cell", ".", "qsub_topk_ids", ",", "model", ".", "mac_rnn_cell", ".", "qsub_topk_probs", ",", "model", ".", "mac_rnn_cell", ".", "qsub_all_probs", ",", "model", ".", "yp", ",", "model", ".", "yp_list", ",", "model", ".", "mac_rnn_cell", ".", "doc_attn", ",", "model", ".", "x_sents_len_reconstruct", "]", "\n", "feeds", "+=", "[", "model", ".", "assembler", ".", "selected_sent_ids", "]", "\n", "\n", "", "to_run", "+=", "[", "self", ".", "global_step", ",", "self", ".", "model", ".", "assembler", ".", "yp", ",", "self", ".", "loss", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", "\n", "handle", "=", "sess", ".", "partial_run_setup", "(", "to_run", ",", "feeds", ")", "\n", "\n", "for", "mid", ",", "(", "single_batch", ",", "model", ")", "in", "enumerate", "(", "zip", "(", "batch", ",", "self", ".", "models", ")", ")", ":", "\n", "        ", "data_cand_word", "=", "single_batch", "[", "1", "]", ".", "data", "[", "'cand_word'", "]", "\n", "data_x", "=", "single_batch", "[", "1", "]", ".", "data", "[", "'x'", "]", "\n", "if", "len", "(", "data_x", ")", "<=", "self", ".", "config", ".", "batch_size", ":", "\n", "          ", "data_cand_word", "=", "data_cand_word", "+", "data_cand_word", "\n", "data_x", "=", "data_x", "+", "data_x", "\n", "", "partial_run", "=", "True", "\n", "\n", "sents_ids", ",", "handle", ",", "tree_answer_cand_ids", ",", "doc_lst", "=", "model", ".", "assembler", ".", "get_sentence_ids", "(", "sess", ",", "data_cand_word", ",", "data_x", ",", "feed_dict", ",", "handle", ",", "mid", ")", "\n", "new_feed_dict", "[", "model", ".", "assembler", ".", "selected_sent_ids", "]", "=", "sents_ids", "\n", "\n", "", "if", "config", ".", "attn_visualization", ":", "\n", "        ", "feed_dict", "[", "self", ".", "model", ".", "assembler", ".", "selected_sent_ids", "]", "=", "sents_ids", "\n", "", "else", ":", "\n", "        ", "partial_run", "=", "True", "\n", "to_run", "=", "[", "self", ".", "global_step", ",", "self", ".", "model", ".", "assembler", ".", "yp", ",", "self", ".", "loss", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", "\n", "\n", "", "", "if", "partial_run", ":", "\n", "      ", "if", "self", ".", "config", ".", "na", ":", "\n", "        ", "global_step", ",", "yp", ",", "loss", ",", "na", ",", "vals", "=", "sess", ".", "partial_run", "(", "handle", ",", "to_run", ",", "feed_dict", "=", "new_feed_dict", ")", "\n", "", "else", ":", "\n", "        ", "if", "self", ".", "config", ".", "mode", "==", "'test'", "and", "self", ".", "config", ".", "attn_visualization", ":", "\n", "          ", "attn_lst", ",", "doc_lst", ",", "global_step", ",", "yp", ",", "loss", ",", "vals", "=", "sess", ".", "partial_run", "(", "handle", ",", "to_run", ",", "feed_dict", "=", "new_feed_dict", ")", "\n", "", "elif", "config", ".", "use_assembler", ":", "\n", "          ", "global_step", ",", "yp", ",", "loss", ",", "vals", "=", "sess", ".", "partial_run", "(", "handle", ",", "to_run", ",", "feed_dict", "=", "new_feed_dict", ")", "\n", "", "else", ":", "\n", "          ", "global_step", ",", "yp", ",", "loss", ",", "vals", "=", "sess", ".", "partial_run", "(", "handle", ",", "to_run", ",", "feed_dict", "=", "new_feed_dict", ")", "\n", "", "", "", "else", ":", "\n", "      ", "if", "self", ".", "config", ".", "na", ":", "\n", "        ", "global_step", ",", "yp", ",", "loss", ",", "na", ",", "vals", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "yp", ",", "self", ".", "loss", ",", "self", ".", "na", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "        ", "if", "config", ".", "mode", "==", "'test'", "and", "config", ".", "attn_visualization", ":", "\n", "          ", "if", "config", ".", "mac_reasoning_unit", "==", "'attention-lstm'", ":", "\n", "            ", "attn_lst", ",", "attn_lst_bod", ",", "doc_lst", ",", "doc_weights", ",", "word_weights", ",", "word_weights_bod", ",", "global_step", ",", "yp", ",", "loss", ",", "vals", ",", "yp_list", "=", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "mac_rnn_cell", ".", "qsub_topk_ids", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "qbod_topk_ids", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "top_doc_attn", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "doc_attn_weights_lst", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "qsub_topk_probs", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "qbod_topk_probs", ",", "self", ".", "global_step", ",", "self", ".", "yp", ",", "self", ".", "loss", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", ",", "self", ".", "model", ".", "yp_list", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "            ", "attn_lst", ",", "doc_lst", ",", "doc_weights", ",", "word_weights", ",", "global_step", ",", "yp", ",", "loss", ",", "vals", ",", "yp_list", "=", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "mac_rnn_cell", ".", "top_attn", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "top_doc_attn", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "doc_attn_weights_lst", ",", "self", ".", "model", ".", "mac_rnn_cell", ".", "top_attn_prob", ",", "self", ".", "global_step", ",", "self", ".", "yp", ",", "self", ".", "loss", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", ",", "self", ".", "model", ".", "yp_list", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "ensemble_yps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "config", ".", "num_hops", ")", ":", "\n", "            ", "ensemble_yps", ".", "append", "(", "yp_list", "[", "i", "]", ")", "\n", "", "ensemble_yps", "=", "np", ".", "array", "(", "ensemble_yps", ")", "\n", "", "elif", "config", ".", "use_assembler", ":", "\n", "          ", "global_step", ",", "yp", ",", "loss", ",", "vals", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "model", ".", "assembler", ".", "yp", ",", "self", ".", "loss", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "          ", "global_step", ",", "yp", ",", "loss", ",", "vals", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "yp", ",", "self", ".", "loss", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "", "", "", "cand_span_y", "=", "data_set", ".", "data", "[", "'cand_span_y'", "]", "\n", "cand_span", "=", "data_set", ".", "data", "[", "'cand_span'", "]", "\n", "yp", "=", "yp", "[", ":", "data_set", ".", "num_examples", "]", "\n", "\n", "y_answer", "=", "np", ".", "argmax", "(", "yp", ",", "axis", "=", "-", "1", ")", "\n", "y", "=", "data_set", ".", "data", "[", "'y'", "]", "\n", "\n", "if", "self", ".", "config", ".", "mode", "==", "'test'", "and", "self", ".", "config", ".", "attn_visualization", ":", "\n", "      ", "p2", "=", "data_set", ".", "data", "[", "'p2'", "]", "\n", "x", "=", "data_set", ".", "data", "[", "'x'", "]", "\n", "print", "(", "data_set", ".", "data", "[", "'q'", "]", ")", "\n", "for", "i", ",", "attn", "in", "enumerate", "(", "attn_lst", ")", ":", "\n", "        ", "for", "j", ",", "att", "in", "enumerate", "(", "attn", ")", ":", "\n", "          ", "if", "att", "[", "0", "]", ">=", "len", "(", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", ")", ":", "\n", "            ", "print", "(", "\"exceed length\"", ")", "\n", "continue", "\n", "", "print", "(", "'doc attention'", ")", "\n", "print", "(", "doc_lst", "[", "i", "]", ")", "\n", "print", "(", "'word attention'", ")", "\n", "\n", "print", "(", "'%s %s %s %s %s'", "%", "(", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "att", "[", "0", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "att", "[", "1", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "att", "[", "2", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "att", "[", "3", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "att", "[", "4", "]", "]", ")", ")", "\n", "print", "(", "'%s %s %s %s %s'", "%", "(", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "att", "[", "5", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "att", "[", "6", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "att", "[", "7", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "att", "[", "8", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "att", "[", "9", "]", "]", ")", ")", "\n", "print", "(", "'word attention weights'", ")", "\n", "print", "(", "word_weights", "[", "i", "]", ")", "\n", "\n", "if", "config", ".", "mac_reasoning_unit", "==", "'attention-lstm'", ":", "\n", "            ", "print", "(", "'q_body word attention'", ")", "\n", "print", "(", "'%s %s %s %s %s'", "%", "(", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "attn_lst_bod", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "attn_lst_bod", "[", "i", "]", "[", "j", "]", "[", "1", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "attn_lst_bod", "[", "i", "]", "[", "j", "]", "[", "2", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "attn_lst_bod", "[", "i", "]", "[", "j", "]", "[", "3", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "attn_lst_bod", "[", "i", "]", "[", "j", "]", "[", "4", "]", "]", ")", ")", "\n", "print", "(", "'%s %s %s %s %s'", "%", "(", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "attn_lst_bod", "[", "i", "]", "[", "j", "]", "[", "5", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "attn_lst_bod", "[", "i", "]", "[", "j", "]", "[", "6", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "attn_lst_bod", "[", "i", "]", "[", "j", "]", "[", "7", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "attn_lst_bod", "[", "i", "]", "[", "j", "]", "[", "8", "]", "]", ",", "x", "[", "0", "]", "[", "doc_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", "]", "[", "attn_lst_bod", "[", "i", "]", "[", "j", "]", "[", "9", "]", "]", ")", ")", "\n", "print", "(", "'q_body word attention weights'", ")", "\n", "print", "(", "word_weights_bod", "[", "i", "]", ")", "\n", "\n", "", "", "", "answers", "=", "np", ".", "squeeze", "(", "np", ".", "squeeze", "(", "np", ".", "argmax", "(", "ensemble_yps", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "correctness", "=", "[", "(", "answer", "==", "cand_span_y", "[", "0", "]", "[", "0", "]", ")", "for", "answer", "in", "answers", "]", "\n", "print", "(", "answers", ")", "\n", "print", "(", "correctness", ")", "\n", "\n", "", "spans", ",", "scores", "=", "zip", "(", "*", "[", "get_best_candidate", "(", "ypi", ",", "cand_spani", ")", "for", "ypi", ",", "cand_spani", "in", "zip", "(", "yp", ",", "cand_span", ")", "]", ")", "\n", "\n", "def", "_get", "(", "xi", ",", "span", ")", ":", "\n", "      ", "if", "len", "(", "xi", ")", "<=", "span", "[", "0", "]", "[", "0", "]", ":", "\n", "        ", "return", "[", "\"\"", "]", "\n", "", "if", "len", "(", "xi", "[", "span", "[", "0", "]", "[", "0", "]", "]", ")", "<=", "span", "[", "1", "]", "[", "1", "]", ":", "\n", "        ", "return", "[", "\"\"", "]", "\n", "", "return", "xi", "[", "span", "[", "0", "]", "[", "0", "]", "]", "[", "span", "[", "0", "]", "[", "1", "]", ":", "span", "[", "1", "]", "[", "1", "]", "]", "\n", "\n", "", "def", "_get2", "(", "context", ",", "xi", ",", "span", ")", ":", "\n", "      ", "if", "len", "(", "xi", ")", "<=", "span", "[", "0", "]", "[", "0", "]", ":", "\n", "        ", "return", "\"\"", "\n", "", "if", "len", "(", "xi", "[", "span", "[", "0", "]", "[", "0", "]", "]", ")", "<=", "span", "[", "1", "]", "[", "1", "]", ":", "\n", "        ", "return", "\"\"", "\n", "", "return", "get_phrase", "(", "context", ",", "xi", ",", "span", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "split_supports", ":", "\n", "      ", "if", "self", ".", "config", ".", "mode", "==", "'test'", ":", "\n", "        ", "for", "idx", ",", "(", "id_", ",", "cand_", ",", "real_cand_", ")", "in", "enumerate", "(", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "data_set", ".", "data", "[", "'cand_word_found'", "]", ",", "data_set", ".", "data", "[", "'real_cand_word_found'", "]", ")", ")", ":", "\n", "          ", "for", "idyp", ",", "_yp", "in", "enumerate", "(", "yp", "[", "idx", "]", "[", "0", "]", ")", ":", "\n", "            ", "if", "cand_", "[", "idyp", "]", "in", "real_cand_", ":", "\n", "              ", "yp", "[", "idx", "]", "[", "0", "]", "[", "idyp", "]", "+=", "1e-7", "\n", "", "", "", "", "cand_index", "=", "np", ".", "argmax", "(", "yp", ",", "axis", "=", "-", "1", ")", "\n", "num_exceed_cand", "=", "feed_dict", "[", "self", ".", "model", ".", "num_exceed_cand", "]", "\n", "id2answer_dict", "=", "{", "id_", ":", "cand_", "[", "cand_index_", "]", "\n", "for", "idx", ",", "(", "id_", ",", "cand_", ",", "cand_index_", ")", "in", "enumerate", "(", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "data_set", ".", "data", "[", "'cand_word_found'", "]", ",", "cand_index", "[", ":", ",", "0", "]", ")", ")", "}", "\n", "", "else", ":", "\n", "      ", "id2answer_dict", "=", "{", "id_", ":", "_get2", "(", "context", "[", "0", "]", ",", "xi", ",", "span", ")", "\n", "for", "id_", ",", "xi", ",", "span", ",", "context", "in", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "data_set", ".", "data", "[", "'x'", "]", ",", "spans", ",", "data_set", ".", "data", "[", "'p'", "]", ")", "}", "\n", "", "id2score_dict", "=", "{", "id_", ":", "score", "for", "id_", ",", "score", "in", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "scores", ")", "}", "\n", "id2answer_dict", "[", "'scores'", "]", "=", "id2score_dict", "\n", "if", "self", ".", "config", ".", "na", ":", "\n", "      ", "id2na_dict", "=", "{", "id_", ":", "float", "(", "each", ")", "for", "id_", ",", "each", "in", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "na", ")", "}", "\n", "id2answer_dict", "[", "'na'", "]", "=", "id2na_dict", "\n", "\n", "", "correct", "=", "[", "self", ".", "__class__", ".", "compare2", "(", "yi", ",", "span", ")", "for", "yi", ",", "span", "in", "zip", "(", "y", ",", "spans", ")", "]", "\n", "\n", "f1s", "=", "[", "self", ".", "__class__", ".", "span_f1", "(", "yi", ",", "span", ")", "for", "yi", ",", "span", "in", "zip", "(", "y", ",", "spans", ")", "]", "\n", "tensor_dict", "=", "dict", "(", "zip", "(", "self", ".", "tensor_dict", ".", "keys", "(", ")", ",", "vals", ")", ")", "\n", "e", "=", "F1CandidateEvaluation", "(", "data_set", ".", "data_type", ",", "int", "(", "global_step", ")", ",", "idxs", ",", "yp", ".", "tolist", "(", ")", ",", "y", ",", "\n", "correct", ",", "float", "(", "loss", ")", ",", "f1s", ",", "id2answer_dict", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "if", "self", ".", "config", ".", "wy", ":", "\n", "      ", "e", ".", "dict", "[", "'wyp'", "]", "=", "wyp", ".", "tolist", "(", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "mode", "==", "'test'", ":", "\n", "      ", "return", "e", ",", "doc_lst", "\n", "", "else", ":", "\n", "      ", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateEvaluator._split_batch": [[546, 548], ["None"], "methods", ["None"], ["", "", "def", "_split_batch", "(", "self", ",", "batch", ")", ":", "\n", "    ", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateEvaluator._get_feed_dict": [[549, 551], ["evaluator.F1CandidateEvaluator.model.get_feed_dict"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict"], ["", "def", "_get_feed_dict", "(", "self", ",", "batch", ")", ":", "\n", "    ", "return", "self", ".", "model", ".", "get_feed_dict", "(", "batch", "[", "1", "]", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateEvaluator.compare2": [[552, 558], ["tuple", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compare2", "(", "yi", ",", "span", ")", ":", "\n", "    ", "for", "start", ",", "stop", "in", "yi", ":", "\n", "      ", "if", "tuple", "(", "start", ")", "==", "span", "[", "0", "]", "and", "tuple", "(", "stop", ")", "==", "span", "[", "1", "]", ":", "\n", "        ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateEvaluator.span_f1": [[559, 569], ["my.nltk_utils.span_f1", "max"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_f1"], ["", "@", "staticmethod", "\n", "def", "span_f1", "(", "yi", ",", "span", ")", ":", "\n", "    ", "max_f1", "=", "0", "\n", "for", "start", ",", "stop", "in", "yi", ":", "\n", "      ", "if", "start", "[", "0", "]", "==", "span", "[", "0", "]", "[", "0", "]", ":", "\n", "        ", "true_span", "=", "start", "[", "1", "]", ",", "stop", "[", "1", "]", "\n", "pred_span", "=", "span", "[", "0", "]", "[", "1", "]", ",", "span", "[", "1", "]", "[", "1", "]", "\n", "f1", "=", "span_f1", "(", "true_span", ",", "pred_span", ")", "\n", "max_f1", "=", "max", "(", "f1", ",", "max_f1", ")", "\n", "", "", "return", "max_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1Evaluator.__init__": [[572, 585], ["evaluator.F1Evaluator.__init__", "tensorflow.name_scope", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.add_n", "len", "my.tensorflow.padded_reshape", "my.tensorflow.padded_reshape", "my.tensorflow.padded_reshape", "model.get_loss"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.padded_reshape", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.padded_reshape", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.padded_reshape", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_loss"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "models", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "MultiGPUF1Evaluator", ",", "self", ")", ".", "__init__", "(", "config", ",", "models", "[", "0", "]", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "models", "=", "models", "\n", "with", "tf", ".", "name_scope", "(", "\"eval_concat\"", ")", ":", "\n", "\n", "      ", "if", "config", ".", "split_supports", "==", "True", ":", "\n", "        ", "N", ",", "M", ",", "JX", "=", "config", ".", "batch_size", ",", "1", ",", "config", ".", "max_para_size", "\n", "", "else", ":", "\n", "        ", "N", ",", "M", ",", "JX", "=", "config", ".", "batch_size", ",", "config", ".", "max_num_sents", ",", "config", ".", "max_sent_size", "\n", "", "self", ".", "yp", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "padded_reshape", "(", "model", ".", "yp", ",", "[", "N", ",", "M", ",", "JX", "]", ")", "for", "model", "in", "models", "]", ")", "\n", "self", ".", "yp2", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "padded_reshape", "(", "model", ".", "yp2", ",", "[", "N", ",", "M", ",", "JX", "]", ")", "for", "model", "in", "models", "]", ")", "\n", "self", ".", "wy", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "padded_reshape", "(", "model", ".", "wy", ",", "[", "N", ",", "M", ",", "JX", "]", ")", "for", "model", "in", "models", "]", ")", "\n", "self", ".", "loss", "=", "tf", ".", "add_n", "(", "[", "model", ".", "get_loss", "(", ")", "for", "model", "in", "models", "]", ")", "/", "len", "(", "models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1Evaluator._split_batch": [[586, 591], ["zip", "sum", "sum", "data_sets[].get_empty"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_empty"], ["", "", "def", "_split_batch", "(", "self", ",", "batches", ")", ":", "\n", "    ", "idxs_list", ",", "data_sets", "=", "zip", "(", "*", "batches", ")", "\n", "idxs", "=", "sum", "(", "idxs_list", ",", "(", ")", ")", "\n", "data_set", "=", "sum", "(", "data_sets", ",", "data_sets", "[", "0", "]", ".", "get_empty", "(", ")", ")", "\n", "return", "idxs", ",", "data_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1Evaluator._get_feed_dict": [[592, 597], ["zip", "feed_dict.update", "model.get_feed_dict"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict"], ["", "def", "_get_feed_dict", "(", "self", ",", "batches", ")", ":", "\n", "    ", "feed_dict", "=", "{", "}", "\n", "for", "model", ",", "(", "_", ",", "data_set", ")", "in", "zip", "(", "self", ".", "models", ",", "batches", ")", ":", "\n", "      ", "feed_dict", ".", "update", "(", "model", ".", "get_feed_dict", "(", "data_set", ",", "False", ")", ")", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateEvaluator.__init__": [[600, 612], ["evaluator.F1CandidateEvaluator.__init__", "tensorflow.name_scope", "tensorflow.concat", "tensorflow.add_n", "len", "tensorflow.reduce_max", "tensorflow.reduce_max", "my.tensorflow.padded_reshape", "model.get_loss", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.padded_reshape", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_loss"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "models", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "MultiGPUF1CandidateEvaluator", ",", "self", ")", ".", "__init__", "(", "config", ",", "models", "[", "0", "]", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "models", "=", "models", "\n", "with", "tf", ".", "name_scope", "(", "\"eval_concat\"", ")", ":", "\n", "\n", "      ", "if", "config", ".", "split_supports", "==", "True", ":", "\n", "        ", "N", ",", "M", ",", "JX", "=", "config", ".", "batch_size", ",", "1", ",", "tf", ".", "reduce_max", "(", "[", "tf", ".", "shape", "(", "model", ".", "yp", ")", "[", "2", "]", "for", "model", "in", "models", "]", ")", "\n", "", "else", ":", "\n", "        ", "N", ",", "M", ",", "JX", "=", "config", ".", "batch_size", ",", "config", ".", "max_num_sents", ",", "tf", ".", "reduce_max", "(", "[", "tf", ".", "shape", "(", "model", ".", "yp", ")", "[", "2", "]", "for", "model", "in", "models", "]", ")", "\n", "\n", "", "self", ".", "yp", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "padded_reshape", "(", "model", ".", "yp", ",", "[", "N", ",", "M", ",", "JX", "]", ")", "for", "model", "in", "models", "]", ")", "\n", "self", ".", "loss", "=", "tf", ".", "add_n", "(", "[", "model", ".", "get_loss", "(", ")", "for", "model", "in", "models", "]", ")", "/", "len", "(", "models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateEvaluator._split_batch": [[613, 618], ["zip", "sum", "sum", "data_sets[].get_empty"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_empty"], ["", "", "def", "_split_batch", "(", "self", ",", "batches", ")", ":", "\n", "    ", "idxs_list", ",", "data_sets", "=", "zip", "(", "*", "batches", ")", "\n", "idxs", "=", "sum", "(", "idxs_list", ",", "(", ")", ")", "\n", "data_set", "=", "sum", "(", "data_sets", ",", "data_sets", "[", "0", "]", ".", "get_empty", "(", ")", ")", "\n", "return", "idxs", ",", "data_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateEvaluator._get_feed_dict": [[619, 624], ["zip", "feed_dict.update", "model.get_feed_dict"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict"], ["", "def", "_get_feed_dict", "(", "self", ",", "batches", ")", ":", "\n", "    ", "feed_dict", "=", "{", "}", "\n", "for", "model", ",", "(", "_", ",", "data_set", ")", "in", "zip", "(", "self", ".", "models", ",", "batches", ")", ":", "\n", "      ", "feed_dict", ".", "update", "(", "model", ".", "get_feed_dict", "(", "data_set", ",", "False", ")", ")", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateDocSelEvaluator.__init__": [[627, 629], ["evaluator.F1CandidateEvaluator.__init__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "model", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "F1CandidateDocSelEvaluator", ",", "self", ")", ".", "__init__", "(", "config", ",", "model", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.F1CandidateDocSelEvaluator.get_evaluation": [[630, 647], ["evaluator.F1CandidateDocSelEvaluator._split_batch", "isinstance", "evaluator.F1CandidateDocSelEvaluator._get_feed_dict", "sess.run", "range", "range", "print"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateDocSelEvaluator._split_batch", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateDocSelEvaluator._get_feed_dict"], ["", "def", "get_evaluation", "(", "self", ",", "sess", ",", "batch", ")", ":", "\n", "    ", "idxs", ",", "data_set", "=", "self", ".", "_split_batch", "(", "batch", ")", "\n", "assert", "isinstance", "(", "data_set", ",", "DataSet", ")", "\n", "feed_dict", "=", "self", ".", "_get_feed_dict", "(", "batch", ")", "\n", "partial_run", "=", "False", "\n", "config", "=", "self", ".", "config", "\n", "\n", "doc_lst", ",", "answer_doc_ids", "=", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "mac_rnn_cell", ".", "top_doc_attn", ",", "self", ".", "model", ".", "answer_doc_ids", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "for", "i", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "config", ".", "num_hops", ")", ":", "\n", "        ", "selected_doc_id", "=", "doc_lst", "[", "j", "]", "[", "i", "]", "[", "0", "]", "\n", "if", "selected_doc_id", "in", "answer_doc_ids", "[", "i", "]", ":", "\n", "          ", "self", ".", "found_answer_doc_count", "+=", "1", "\n", "print", "(", "self", ".", "found_answer_doc_count", ")", "\n", "break", "\n", "\n", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateDocSelEvaluator.__init__": [[650, 663], ["evaluator.F1CandidateDocSelEvaluator.__init__", "tensorflow.name_scope", "tensorflow.concat", "tensorflow.add_n", "len", "tensorflow.reduce_max", "tensorflow.reduce_max", "my.tensorflow.padded_reshape", "model.get_loss", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.padded_reshape", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_loss"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "models", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "MultiGPUF1CandidateDocSelEvaluator", ",", "self", ")", ".", "__init__", "(", "config", ",", "models", "[", "0", "]", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "\n", "self", ".", "models", "=", "models", "\n", "with", "tf", ".", "name_scope", "(", "\"eval_concat\"", ")", ":", "\n", "\n", "      ", "if", "config", ".", "split_supports", "==", "True", ":", "\n", "        ", "N", ",", "M", ",", "JX", "=", "config", ".", "batch_size", ",", "1", ",", "tf", ".", "reduce_max", "(", "[", "tf", ".", "shape", "(", "model", ".", "yp", ")", "[", "2", "]", "for", "model", "in", "models", "]", ")", "\n", "", "else", ":", "\n", "        ", "N", ",", "M", ",", "JX", "=", "config", ".", "batch_size", ",", "config", ".", "max_num_sents", ",", "tf", ".", "reduce_max", "(", "[", "tf", ".", "shape", "(", "model", ".", "yp", ")", "[", "2", "]", "for", "model", "in", "models", "]", ")", "\n", "\n", "", "self", ".", "yp", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "padded_reshape", "(", "model", ".", "yp", ",", "[", "N", ",", "M", ",", "JX", "]", ")", "for", "model", "in", "models", "]", ")", "\n", "self", ".", "loss", "=", "tf", ".", "add_n", "(", "[", "model", ".", "get_loss", "(", ")", "for", "model", "in", "models", "]", ")", "/", "len", "(", "models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateDocSelEvaluator._split_batch": [[664, 669], ["zip", "sum", "sum", "data_sets[].get_empty"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.read_data.DataSet.get_empty"], ["", "", "def", "_split_batch", "(", "self", ",", "batches", ")", ":", "\n", "    ", "idxs_list", ",", "data_sets", "=", "zip", "(", "*", "batches", ")", "\n", "idxs", "=", "sum", "(", "idxs_list", ",", "(", ")", ")", "\n", "data_set", "=", "sum", "(", "data_sets", ",", "data_sets", "[", "0", "]", ".", "get_empty", "(", ")", ")", "\n", "return", "idxs", ",", "data_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.MultiGPUF1CandidateDocSelEvaluator._get_feed_dict": [[670, 675], ["zip", "feed_dict.update", "model.get_feed_dict"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict"], ["", "def", "_get_feed_dict", "(", "self", ",", "batches", ")", ":", "\n", "    ", "feed_dict", "=", "{", "}", "\n", "for", "model", ",", "(", "_", ",", "data_set", ")", "in", "zip", "(", "self", ".", "models", ",", "batches", ")", ":", "\n", "      ", "feed_dict", ".", "update", "(", "model", ".", "get_feed_dict", "(", "data_set", ",", "False", ")", ")", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluator.__init__": [[678, 684], ["evaluator.Evaluator.__init__", "model.get_loss"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_loss"], ["  ", "def", "__init__", "(", "self", ",", "config", ",", "model", ",", "tensor_dict", "=", "None", ")", ":", "\n", "    ", "super", "(", "ForwardEvaluator", ",", "self", ")", ".", "__init__", "(", "config", ",", "model", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "self", ".", "yp2", "=", "model", ".", "yp2", "\n", "self", ".", "loss", "=", "model", ".", "get_loss", "(", ")", "\n", "if", "config", ".", "na", ":", "\n", "      ", "self", ".", "na", "=", "model", ".", "na_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluator.get_evaluation": [[685, 723], ["isinstance", "evaluator.ForwardEvaluator.model.get_feed_dict", "zip", "dict", "evaluator.ForwardEvaluation", "sess.run", "sess.run", "squad.utils.get_phrase", "evaluator.ForwardEvaluator.get_evaluation._get2"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.model.Model.get_feed_dict", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_phrase"], ["", "", "def", "get_evaluation", "(", "self", ",", "sess", ",", "batch", ")", ":", "\n", "    ", "idxs", ",", "data_set", "=", "batch", "\n", "assert", "isinstance", "(", "data_set", ",", "DataSet", ")", "\n", "feed_dict", "=", "self", ".", "model", ".", "get_feed_dict", "(", "data_set", ",", "False", ")", "\n", "\n", "if", "self", ".", "config", ".", "na", ":", "\n", "      ", "global_step", ",", "yp", ",", "yp2", ",", "loss", ",", "na", ",", "vals", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "yp", ",", "self", ".", "yp2", ",", "self", ".", "loss", ",", "self", ".", "na", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "      ", "global_step", ",", "yp", ",", "yp2", ",", "loss", ",", "vals", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "yp", ",", "self", ".", "yp2", ",", "self", ".", "loss", ",", "list", "(", "self", ".", "tensor_dict", ".", "values", "(", ")", ")", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "", "yp", ",", "yp2", "=", "yp", "[", ":", "data_set", ".", "num_examples", "]", ",", "yp2", "[", ":", "data_set", ".", "num_examples", "]", "\n", "spans", ",", "scores", "=", "zip", "(", "*", "[", "get_best_span", "(", "ypi", ",", "yp2i", ")", "for", "ypi", ",", "yp2i", "in", "zip", "(", "yp", ",", "yp2", ")", "]", ")", "\n", "\n", "def", "_get", "(", "xi", ",", "span", ")", ":", "\n", "      ", "if", "len", "(", "xi", ")", "<=", "span", "[", "0", "]", "[", "0", "]", ":", "\n", "        ", "return", "[", "\"\"", "]", "\n", "", "if", "len", "(", "xi", "[", "span", "[", "0", "]", "[", "0", "]", "]", ")", "<=", "span", "[", "1", "]", "[", "1", "]", ":", "\n", "        ", "return", "[", "\"\"", "]", "\n", "", "return", "xi", "[", "span", "[", "0", "]", "[", "0", "]", "]", "[", "span", "[", "0", "]", "[", "1", "]", ":", "span", "[", "1", "]", "[", "1", "]", "]", "\n", "\n", "", "def", "_get2", "(", "context", ",", "xi", ",", "span", ")", ":", "\n", "      ", "if", "len", "(", "xi", ")", "<=", "span", "[", "0", "]", "[", "0", "]", ":", "\n", "        ", "return", "\"\"", "\n", "", "if", "len", "(", "xi", "[", "span", "[", "0", "]", "[", "0", "]", "]", ")", "<=", "span", "[", "1", "]", "[", "1", "]", ":", "\n", "        ", "return", "\"\"", "\n", "", "return", "get_phrase", "(", "context", ",", "xi", ",", "span", ")", "\n", "\n", "", "id2answer_dict", "=", "{", "id_", ":", "_get2", "(", "context", ",", "xi", ",", "span", ")", "\n", "for", "id_", ",", "xi", ",", "span", ",", "context", "in", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "data_set", ".", "data", "[", "'x'", "]", ",", "spans", ",", "data_set", ".", "data", "[", "'p'", "]", ")", "}", "\n", "id2score_dict", "=", "{", "id_", ":", "score", "for", "id_", ",", "score", "in", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "scores", ")", "}", "\n", "id2answer_dict", "[", "'scores'", "]", "=", "id2score_dict", "\n", "if", "self", ".", "config", ".", "na", ":", "\n", "      ", "id2na_dict", "=", "{", "id_", ":", "float", "(", "each", ")", "for", "id_", ",", "each", "in", "zip", "(", "data_set", ".", "data", "[", "'ids'", "]", ",", "na", ")", "}", "\n", "id2answer_dict", "[", "'na'", "]", "=", "id2na_dict", "\n", "", "tensor_dict", "=", "dict", "(", "zip", "(", "self", ".", "tensor_dict", ".", "keys", "(", ")", ",", "vals", ")", ")", "\n", "e", "=", "ForwardEvaluation", "(", "data_set", ".", "data_type", ",", "int", "(", "global_step", ")", ",", "idxs", ",", "yp", ".", "tolist", "(", ")", ",", "yp2", ".", "tolist", "(", ")", ",", "float", "(", "loss", ")", ",", "id2answer_dict", ",", "tensor_dict", "=", "tensor_dict", ")", "\n", "# TODO : wy support", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluator.compare": [[724, 733], ["my.utils.argmax", "numpy.zeros", "numpy.ones", "tuple", "my.utils.argmax"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax"], ["", "@", "staticmethod", "\n", "def", "compare", "(", "yi", ",", "ypi", ",", "yp2i", ")", ":", "\n", "    ", "for", "start", ",", "stop", "in", "yi", ":", "\n", "      ", "aypi", "=", "argmax", "(", "ypi", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "yp2i", ".", "shape", ")", "\n", "mask", "[", "aypi", "[", "0", "]", ",", "aypi", "[", "1", "]", ":", "]", "=", "np", ".", "ones", "(", "[", "yp2i", ".", "shape", "[", "1", "]", "-", "aypi", "[", "1", "]", "]", ")", "\n", "if", "tuple", "(", "start", ")", "==", "aypi", "and", "(", "stop", "[", "0", "]", ",", "stop", "[", "1", "]", "-", "1", ")", "==", "argmax", "(", "yp2i", "*", "mask", ")", ":", "\n", "        ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluator.compare2": [[734, 740], ["tuple", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compare2", "(", "yi", ",", "span", ")", ":", "\n", "    ", "for", "start", ",", "stop", "in", "yi", ":", "\n", "      ", "if", "tuple", "(", "start", ")", "==", "span", "[", "0", "]", "and", "tuple", "(", "stop", ")", "==", "span", "[", "1", "]", ":", "\n", "        ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.ForwardEvaluator.span_f1": [[741, 751], ["my.nltk_utils.span_f1", "max"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_f1"], ["", "@", "staticmethod", "\n", "def", "span_f1", "(", "yi", ",", "span", ")", ":", "\n", "    ", "max_f1", "=", "0", "\n", "for", "start", ",", "stop", "in", "yi", ":", "\n", "      ", "if", "start", "[", "0", "]", "==", "span", "[", "0", "]", "[", "0", "]", ":", "\n", "        ", "true_span", "=", "start", "[", "1", "]", ",", "stop", "[", "1", "]", "\n", "pred_span", "=", "span", "[", "0", "]", "[", "1", "]", ",", "span", "[", "1", "]", "[", "1", "]", "\n", "f1", "=", "span_f1", "(", "true_span", ",", "pred_span", ")", "\n", "max_f1", "=", "max", "(", "f1", ",", "max_f1", ")", "\n", "", "", "return", "max_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.basic.evaluator.compute_answer_span": [[753, 762], ["answer.replace().lower.replace().lower", "context.lower.lower", "re.search", "re.search.start", "len", "answer.replace().lower.replace"], "function", ["None"], ["", "", "def", "compute_answer_span", "(", "context", ",", "answer", ")", ":", "\n", "  ", "answer", "=", "answer", ".", "replace", "(", "' \u2013 '", ",", "' '", ")", ".", "lower", "(", ")", "\n", "context", "=", "context", ".", "lower", "(", ")", "\n", "a", "=", "re", ".", "search", "(", "r'({})'", ".", "format", "(", "answer", ")", ",", "context", ")", "\n", "if", "a", "is", "None", ":", "\n", "    ", "return", "None", ",", "None", "\n", "", "start", "=", "a", ".", "start", "(", ")", "\n", "end", "=", "start", "+", "len", "(", "answer", ")", "\n", "return", "start", ",", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.__init__": [[11, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "url", ",", "port", ")", ":", "\n", "        ", "self", ".", "_url", "=", "url", "\n", "self", ".", "_port", "=", "port", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get": [[15, 29], ["in_.encode.encode.encode", "range", "requests.post", "requests.post.content.decode", "time.sleep"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "type_", ",", "in_", ",", "num_max_requests", "=", "100", ")", ":", "\n", "        ", "in_", "=", "in_", ".", "encode", "(", "\"utf-8\"", ")", "\n", "url", "=", "\"http://{}:{}/{}\"", ".", "format", "(", "self", ".", "_url", ",", "self", ".", "_port", ",", "type_", ")", "\n", "out", "=", "None", "\n", "for", "_", "in", "range", "(", "num_max_requests", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "r", "=", "requests", ".", "post", "(", "url", ",", "data", "=", "in_", ")", "\n", "out", "=", "r", ".", "content", ".", "decode", "(", "'utf-8'", ")", "\n", "if", "out", "==", "'error'", ":", "\n", "                    ", "out", "=", "None", "\n", "", "break", "\n", "", "except", ":", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.split_doc": [[30, 33], ["corenlp_interface.CoreNLPInterface.get", "json.loads"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get"], ["", "def", "split_doc", "(", "self", ",", "doc", ")", ":", "\n", "        ", "out", "=", "self", ".", "get", "(", "\"doc\"", ",", "doc", ")", "\n", "return", "out", "if", "out", "is", "None", "else", "json", ".", "loads", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.split_sent": [[34, 37], ["corenlp_interface.CoreNLPInterface.get", "json.loads"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get"], ["", "def", "split_sent", "(", "self", ",", "sent", ")", ":", "\n", "        ", "out", "=", "self", ".", "get", "(", "\"sent\"", ",", "sent", ")", "\n", "return", "out", "if", "out", "is", "None", "else", "json", ".", "loads", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get_dep": [[38, 41], ["corenlp_interface.CoreNLPInterface.get", "json.loads"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get"], ["", "def", "get_dep", "(", "self", ",", "sent", ")", ":", "\n", "        ", "out", "=", "self", ".", "get", "(", "\"dep\"", ",", "sent", ")", "\n", "return", "out", "if", "out", "is", "None", "else", "json", ".", "loads", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get_const": [[42, 45], ["corenlp_interface.CoreNLPInterface.get"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get"], ["", "def", "get_const", "(", "self", ",", "sent", ")", ":", "\n", "        ", "out", "=", "self", ".", "get", "(", "\"const\"", ",", "sent", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get_const_tree": [[46, 49], ["corenlp_interface.CoreNLPInterface.get_const", "nltk.tree.Tree.fromstring"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get_const"], ["", "def", "get_const_tree", "(", "self", ",", "sent", ")", ":", "\n", "        ", "out", "=", "self", ".", "get_const", "(", "sent", ")", "\n", "return", "out", "if", "out", "is", "None", "else", "nltk", ".", "tree", ".", "Tree", ".", "fromstring", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.dep2tree": [[50, 56], ["networkx.DiGraph", "networkx.DiGraph.add_edge"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "dep2tree", "(", "dep", ")", ":", "\n", "        ", "tree", "=", "nx", ".", "DiGraph", "(", ")", "\n", "for", "dep", ",", "i", ",", "gov", ",", "j", ",", "label", "in", "dep", ":", "\n", "            ", "tree", ".", "add_edge", "(", "gov", ",", "dep", ",", "label", "=", "label", ")", "\n", "", "return", "tree", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils._set_span": [[5, 19], ["isinstance", "nltk_utils._set_span", "len"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils._set_span"], ["def", "_set_span", "(", "t", ",", "i", ")", ":", "\n", "    ", "if", "isinstance", "(", "t", "[", "0", "]", ",", "str", ")", ":", "\n", "        ", "t", ".", "span", "=", "(", "i", ",", "i", "+", "len", "(", "t", ")", ")", "\n", "", "else", ":", "\n", "        ", "first", "=", "True", "\n", "for", "c", "in", "t", ":", "\n", "            ", "cur_span", "=", "_set_span", "(", "c", ",", "i", ")", "\n", "i", "=", "cur_span", "[", "1", "]", "\n", "if", "first", ":", "\n", "                ", "min_", "=", "cur_span", "[", "0", "]", "\n", "first", "=", "False", "\n", "", "", "max_", "=", "cur_span", "[", "1", "]", "\n", "t", ".", "span", "=", "(", "min_", ",", "max_", ")", "\n", "", "return", "t", ".", "span", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.set_span": [[21, 28], ["isinstance", "nltk_utils._set_span", "print", "exit"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils._set_span"], ["", "def", "set_span", "(", "t", ")", ":", "\n", "    ", "assert", "isinstance", "(", "t", ",", "nltk", ".", "tree", ".", "Tree", ")", "\n", "try", ":", "\n", "        ", "return", "_set_span", "(", "t", ",", "0", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "t", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.tree_contains_span": [[30, 39], ["set", "tree.subtrees"], "function", ["None"], ["", "", "def", "tree_contains_span", "(", "tree", ",", "span", ")", ":", "\n", "    ", "\"\"\"\n    Assumes that tree span has been set with set_span\n    Returns true if any subtree of t has exact span as the given span\n    :param t:\n    :param span:\n    :return bool:\n    \"\"\"", "\n", "return", "span", "in", "set", "(", "t", ".", "span", "for", "t", "in", "tree", ".", "subtrees", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_len": [[41, 43], ["None"], "function", ["None"], ["", "def", "span_len", "(", "span", ")", ":", "\n", "    ", "return", "span", "[", "1", "]", "-", "span", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_overlap": [[45, 51], ["max", "min"], "function", ["None"], ["", "def", "span_overlap", "(", "s1", ",", "s2", ")", ":", "\n", "    ", "start", "=", "max", "(", "s1", "[", "0", "]", ",", "s2", "[", "0", "]", ")", "\n", "stop", "=", "min", "(", "s1", "[", "1", "]", ",", "s2", "[", "1", "]", ")", "\n", "if", "stop", ">", "start", ":", "\n", "        ", "return", "start", ",", "stop", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_prec": [[53, 58], ["nltk_utils.span_overlap", "nltk_utils.span_len", "nltk_utils.span_len"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_overlap", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_len", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_len"], ["", "def", "span_prec", "(", "true_span", ",", "pred_span", ")", ":", "\n", "    ", "overlap", "=", "span_overlap", "(", "true_span", ",", "pred_span", ")", "\n", "if", "overlap", "is", "None", ":", "\n", "        ", "return", "0", "\n", "", "return", "span_len", "(", "overlap", ")", "/", "span_len", "(", "pred_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_recall": [[60, 65], ["nltk_utils.span_overlap", "nltk_utils.span_len", "nltk_utils.span_len"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_overlap", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_len", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_len"], ["", "def", "span_recall", "(", "true_span", ",", "pred_span", ")", ":", "\n", "    ", "overlap", "=", "span_overlap", "(", "true_span", ",", "pred_span", ")", "\n", "if", "overlap", "is", "None", ":", "\n", "        ", "return", "0", "\n", "", "return", "span_len", "(", "overlap", ")", "/", "span_len", "(", "true_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_f1": [[67, 73], ["nltk_utils.span_prec", "nltk_utils.span_recall"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_prec", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_recall"], ["", "def", "span_f1", "(", "true_span", ",", "pred_span", ")", ":", "\n", "    ", "p", "=", "span_prec", "(", "true_span", ",", "pred_span", ")", "\n", "r", "=", "span_recall", "(", "true_span", ",", "pred_span", ")", "\n", "if", "p", "==", "0", "or", "r", "==", "0", ":", "\n", "        ", "return", "0.0", "\n", "", "return", "2", "*", "p", "*", "r", "/", "(", "p", "+", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.find_max_f1_span": [[75, 77], ["nltk_utils.find_max_f1_subtree"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.find_max_f1_subtree"], ["", "def", "find_max_f1_span", "(", "tree", ",", "span", ")", ":", "\n", "    ", "return", "find_max_f1_subtree", "(", "tree", ",", "span", ")", ".", "span", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.find_max_f1_subtree": [[79, 81], ["max", "nltk_utils.span_f1", "tree.subtrees"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.span_f1"], ["", "def", "find_max_f1_subtree", "(", "tree", ",", "span", ")", ":", "\n", "    ", "return", "max", "(", "(", "(", "t", ",", "span_f1", "(", "span", ",", "t", ".", "span", ")", ")", "for", "t", "in", "tree", ".", "subtrees", "(", ")", ")", ",", "key", "=", "lambda", "p", ":", "p", "[", "1", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.tree2matrix": [[83, 107], ["nltk_utils.set_span", "len", "numpy.zeros", "numpy.zeros", "tree.subtrees", "tree.height", "tree.leaves", "node2num", "subtree.subtrees", "subtree.height", "isinstance", "isinstance", "range"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.set_span"], ["", "def", "tree2matrix", "(", "tree", ",", "node2num", ",", "row_size", "=", "None", ",", "col_size", "=", "None", ",", "dtype", "=", "'int32'", ")", ":", "\n", "    ", "set_span", "(", "tree", ")", "\n", "D", "=", "tree", ".", "height", "(", ")", "-", "1", "\n", "B", "=", "len", "(", "tree", ".", "leaves", "(", ")", ")", "\n", "row_size", "=", "row_size", "or", "D", "\n", "col_size", "=", "col_size", "or", "B", "\n", "matrix", "=", "np", ".", "zeros", "(", "[", "row_size", ",", "col_size", "]", ",", "dtype", "=", "dtype", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "row_size", ",", "col_size", ",", "col_size", "]", ",", "dtype", "=", "'bool'", ")", "\n", "\n", "for", "subtree", "in", "tree", ".", "subtrees", "(", ")", ":", "\n", "        ", "row", "=", "subtree", ".", "height", "(", ")", "-", "2", "\n", "col", "=", "subtree", ".", "span", "[", "0", "]", "\n", "matrix", "[", "row", ",", "col", "]", "=", "node2num", "(", "subtree", ")", "\n", "for", "subsub", "in", "subtree", ".", "subtrees", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "subsub", ",", "nltk", ".", "tree", ".", "Tree", ")", ":", "\n", "                ", "mask", "[", "row", ",", "col", ",", "subsub", ".", "span", "[", "0", "]", "]", "=", "True", "\n", "if", "not", "isinstance", "(", "subsub", "[", "0", "]", ",", "nltk", ".", "tree", ".", "Tree", ")", ":", "\n", "                    ", "c", "=", "subsub", ".", "span", "[", "0", "]", "\n", "for", "r", "in", "range", "(", "row", ")", ":", "\n", "                        ", "mask", "[", "r", ",", "c", ",", "c", "]", "=", "True", "\n", "", "", "", "else", ":", "\n", "                ", "mask", "[", "row", ",", "col", ",", "col", "]", "=", "True", "\n", "\n", "", "", "", "return", "matrix", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.nltk_utils.load_compressed_tree": [[109, 127], ["nltk_utils.load_compressed_tree.compress_tree"], "function", ["None"], ["", "def", "load_compressed_tree", "(", "s", ")", ":", "\n", "\n", "    ", "def", "compress_tree", "(", "tree", ")", ":", "\n", "        ", "assert", "not", "isinstance", "(", "tree", ",", "str", ")", "\n", "if", "len", "(", "tree", ")", "==", "1", ":", "\n", "            ", "if", "isinstance", "(", "tree", "[", "0", "]", ",", "nltk", ".", "tree", ".", "Tree", ")", ":", "\n", "                ", "return", "compress_tree", "(", "tree", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "return", "tree", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "t", "in", "enumerate", "(", "tree", ")", ":", "\n", "                ", "if", "isinstance", "(", "t", ",", "nltk", ".", "tree", ".", "Tree", ")", ":", "\n", "                    ", "tree", "[", "i", "]", "=", "compress_tree", "(", "t", ")", "\n", "", "else", ":", "\n", "                    ", "tree", "[", "i", "]", "=", "t", "\n", "", "", "return", "tree", "\n", "\n", "", "", "return", "compress_tree", "(", "nltk", ".", "tree", ".", "Tree", ".", "fromstring", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.zip_save.get_args": [[10, 16], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'paths'", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--out'", ",", "default", "=", "'save.zip'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.zip_save.zip_save": [[18, 44], ["os.path.join", "tqdm.tqdm", "os.system", "os.path.exists", "os.makedirs", "os.path.split", "os.path.split", "os.path.split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "shutil.copy", "shutil.copy", "os.path.exists", "os.makedirs", "open", "fh.write"], "function", ["None"], ["", "def", "zip_save", "(", "args", ")", ":", "\n", "    ", "temp_dir", "=", "\".\"", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "\"save\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "for", "save_source_path", "in", "tqdm", "(", "args", ".", "paths", ")", ":", "\n", "# path = \"out/basic/30/save/basic-18000\"", "\n", "# target_path = \"save_dir/30/save\"", "\n", "# also output full path name to \"save_dir/30/readme.txt", "\n", "# need to also extract \"out/basic/30/shared.json\"", "\n", "        ", "temp", ",", "_", "=", "os", ".", "path", ".", "split", "(", "save_source_path", ")", "# \"out/basic/30/save\", _", "\n", "model_dir", ",", "_", "=", "os", ".", "path", ".", "split", "(", "temp", ")", "# \"out/basic/30, _", "\n", "_", ",", "model_name", "=", "os", ".", "path", ".", "split", "(", "model_dir", ")", "\n", "cur_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cur_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cur_dir", ")", "\n", "", "save_target_path", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "\"save\"", ")", "\n", "shared_target_path", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "\"shared.json\"", ")", "\n", "readme_path", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "\"readme.txt\"", ")", "\n", "shared_source_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"shared.json\"", ")", "\n", "shutil", ".", "copy", "(", "save_source_path", ",", "save_target_path", ")", "\n", "shutil", ".", "copy", "(", "shared_source_path", ",", "shared_target_path", ")", "\n", "with", "open", "(", "readme_path", ",", "'w'", ")", "as", "fh", ":", "\n", "            ", "fh", ".", "write", "(", "save_source_path", ")", "\n", "\n", "", "", "os", ".", "system", "(", "\"zip {} -r {}\"", ".", "format", "(", "args", ".", "out", ",", "save_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.zip_save.main": [[45, 48], ["zip_save.get_args", "zip_save.zip_save"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.get_args", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.zip_save.zip_save"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "zip_save", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.mytqdm": [[8, 14], ["tqdm.tqdm", "tqdm.tqdm.set_description"], "function", ["None"], ["for", "tokens", "in", "tokenss", ":", "\n", "    ", "spans", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "      ", "if", "text", ".", "find", "(", "token", ",", "cur_idx", ")", "<", "0", ":", "\n", "        ", "print", "(", "tokens", ")", "\n", "print", "(", "\"{} {} {}\"", ".", "format", "(", "token", ",", "cur_idx", ",", "text", ")", ")", "\n", "raise", "Exception", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.json_pretty_dump": [[16, 18], ["json.dump"], "function", ["None"], ["spans", ".", "append", "(", "(", "cur_idx", ",", "cur_idx", "+", "len", "(", "token", ")", ")", ")", "\n", "cur_idx", "+=", "len", "(", "token", ")", "\n", "", "spanss", ".", "append", "(", "spans", ")", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.index": [[20, 22], ["utils.index", "len"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.index"], ["\n", "\n", "", "def", "get_word_span", "(", "context", ",", "wordss", ",", "start", ",", "stop", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.fill": [[24, 36], ["numpy.zeros", "collections.deque", "collections.deque.appendleft", "len", "collections.deque.pop", "len", "enumerate", "collections.deque.appendleft"], "function", ["None"], ["idxs", "=", "[", "]", "\n", "for", "sent_idx", ",", "spans", "in", "enumerate", "(", "spanss", ")", ":", "\n", "    ", "for", "word_idx", ",", "span", "in", "enumerate", "(", "spans", ")", ":", "\n", "      ", "if", "not", "(", "stop", "<=", "span", "[", "0", "]", "or", "start", ">=", "span", "[", "1", "]", ")", ":", "\n", "        ", "idxs", ".", "append", "(", "(", "sent_idx", ",", "word_idx", ")", ")", "\n", "\n", "", "", "", "assert", "len", "(", "idxs", ")", ">", "0", ",", "\"{} {} {} {}\"", ".", "format", "(", "context", ",", "spanss", ",", "start", ",", "stop", ")", "\n", "return", "idxs", "[", "0", "]", ",", "(", "idxs", "[", "-", "1", "]", "[", "0", "]", ",", "idxs", "[", "-", "1", "]", "[", "1", "]", "+", "1", ")", "\n", "\n", "\n", "", "def", "get_phrase", "(", "context", ",", "wordss", ",", "span", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.short_floats": [[38, 53], ["utils.short_floats._short_floats"], "function", ["None"], ["\n", "start", ",", "stop", "=", "span", "\n", "flat_start", "=", "get_flat_idx", "(", "wordss", ",", "start", ")", "\n", "flat_stop", "=", "get_flat_idx", "(", "wordss", ",", "stop", ")", "\n", "words", "=", "sum", "(", "wordss", ",", "[", "]", ")", "\n", "char_idx", "=", "0", "\n", "char_start", ",", "char_stop", "=", "None", ",", "None", "\n", "for", "word_idx", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "    ", "char_idx", "=", "context", ".", "find", "(", "word", ",", "char_idx", ")", "\n", "assert", "char_idx", ">=", "0", "\n", "if", "word_idx", "==", "flat_start", ":", "\n", "      ", "char_start", "=", "char_idx", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax": [[55, 57], ["numpy.unravel_index", "x.argmax"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.utils.argmax"], ["if", "word_idx", "==", "flat_stop", "-", "1", ":", "\n", "      ", "char_stop", "=", "char_idx", "\n", "", "", "assert", "char_start", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.dynamic_rnn": [[8, 22], ["my.tensorflow.flatten", "tensorflow.python.ops.rnn.dynamic_rnn", "my.tensorflow.reconstruct", "tensorflow.cast", "my.tensorflow.flatten"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.reconstruct", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten"], ["def", "dynamic_rnn", "(", "cell", ",", "inputs", ",", "sequence_length", "=", "None", ",", "initial_state", "=", "None", ",", "\n", "dtype", "=", "None", ",", "parallel_iterations", "=", "None", ",", "swap_memory", "=", "False", ",", "\n", "time_major", "=", "False", ",", "scope", "=", "None", ")", ":", "\n", "    ", "assert", "not", "time_major", "# TODO : to be implemented later!", "\n", "flat_inputs", "=", "flatten", "(", "inputs", ",", "2", ")", "# [-1, J, d]", "\n", "flat_len", "=", "None", "if", "sequence_length", "is", "None", "else", "tf", ".", "cast", "(", "flatten", "(", "sequence_length", ",", "0", ")", ",", "'int64'", ")", "\n", "\n", "flat_outputs", ",", "final_state", "=", "_dynamic_rnn", "(", "cell", ",", "flat_inputs", ",", "sequence_length", "=", "flat_len", ",", "\n", "initial_state", "=", "initial_state", ",", "dtype", "=", "dtype", ",", "\n", "parallel_iterations", "=", "parallel_iterations", ",", "swap_memory", "=", "swap_memory", ",", "\n", "time_major", "=", "time_major", ",", "scope", "=", "scope", ")", "\n", "\n", "outputs", "=", "reconstruct", "(", "flat_outputs", ",", "inputs", ",", "2", ")", "\n", "return", "outputs", ",", "final_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bw_dynamic_rnn": [[24, 43], ["my.tensorflow.flatten", "tensorflow.python.ops.rnn.dynamic_rnn", "my.tensorflow.reconstruct", "tensorflow.cast", "tensorflow.reverse", "tensorflow.reverse_sequence", "tensorflow.reverse", "tensorflow.reverse_sequence", "my.tensorflow.flatten"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.reconstruct", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten"], ["", "def", "bw_dynamic_rnn", "(", "cell", ",", "inputs", ",", "sequence_length", "=", "None", ",", "initial_state", "=", "None", ",", "\n", "dtype", "=", "None", ",", "parallel_iterations", "=", "None", ",", "swap_memory", "=", "False", ",", "\n", "time_major", "=", "False", ",", "scope", "=", "None", ")", ":", "\n", "    ", "assert", "not", "time_major", "# TODO : to be implemented later!", "\n", "\n", "flat_inputs", "=", "flatten", "(", "inputs", ",", "2", ")", "# [-1, J, d]", "\n", "flat_len", "=", "None", "if", "sequence_length", "is", "None", "else", "tf", ".", "cast", "(", "flatten", "(", "sequence_length", ",", "0", ")", ",", "'int64'", ")", "\n", "\n", "flat_inputs", "=", "tf", ".", "reverse", "(", "flat_inputs", ",", "1", ")", "if", "sequence_length", "is", "None", "else", "tf", ".", "reverse_sequence", "(", "flat_inputs", ",", "sequence_length", ",", "1", ")", "\n", "flat_outputs", ",", "final_state", "=", "_dynamic_rnn", "(", "cell", ",", "flat_inputs", ",", "sequence_length", "=", "flat_len", ",", "\n", "initial_state", "=", "initial_state", ",", "dtype", "=", "dtype", ",", "\n", "parallel_iterations", "=", "parallel_iterations", ",", "swap_memory", "=", "swap_memory", ",", "\n", "time_major", "=", "time_major", ",", "scope", "=", "scope", ")", "\n", "flat_outputs", "=", "tf", ".", "reverse", "(", "flat_outputs", ",", "1", ")", "if", "sequence_length", "is", "None", "else", "tf", ".", "reverse_sequence", "(", "flat_outputs", ",", "sequence_length", ",", "1", ")", "\n", "\n", "outputs", "=", "reconstruct", "(", "flat_outputs", ",", "inputs", ",", "2", ")", "\n", "return", "outputs", ",", "final_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn": [[45, 64], ["my.tensorflow.flatten", "tensorflow.python.ops.rnn.bidirectional_dynamic_rnn", "my.tensorflow.reconstruct", "my.tensorflow.reconstruct", "tensorflow.cast", "my.tensorflow.flatten"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.reconstruct", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.reconstruct", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten"], ["", "def", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "inputs", ",", "sequence_length", "=", "None", ",", "\n", "initial_state_fw", "=", "None", ",", "initial_state_bw", "=", "None", ",", "\n", "dtype", "=", "None", ",", "parallel_iterations", "=", "None", ",", "\n", "swap_memory", "=", "False", ",", "time_major", "=", "False", ",", "scope", "=", "None", ")", ":", "\n", "    ", "assert", "not", "time_major", "\n", "\n", "flat_inputs", "=", "flatten", "(", "inputs", ",", "2", ")", "# [-1, J, d]", "\n", "flat_len", "=", "None", "if", "sequence_length", "is", "None", "else", "tf", ".", "cast", "(", "flatten", "(", "sequence_length", ",", "0", ")", ",", "'int64'", ")", "\n", "\n", "(", "flat_fw_outputs", ",", "flat_bw_outputs", ")", ",", "final_state", "=", "_bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "flat_inputs", ",", "sequence_length", "=", "flat_len", ",", "\n", "initial_state_fw", "=", "initial_state_fw", ",", "initial_state_bw", "=", "initial_state_bw", ",", "\n", "dtype", "=", "dtype", ",", "parallel_iterations", "=", "parallel_iterations", ",", "swap_memory", "=", "swap_memory", ",", "\n", "time_major", "=", "time_major", ",", "scope", "=", "scope", ")", "\n", "\n", "fw_outputs", "=", "reconstruct", "(", "flat_fw_outputs", ",", "inputs", ",", "2", ")", "\n", "bw_outputs", "=", "reconstruct", "(", "flat_bw_outputs", ",", "inputs", ",", "2", ")", "\n", "# FIXME : final state is not reshaped!", "\n", "return", "(", "fw_outputs", ",", "bw_outputs", ")", ",", "final_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_rnn": [[66, 82], ["my.tensorflow.flatten", "tensorflow.nn.bidirectional_dynamic_rnn", "my.tensorflow.reconstruct", "my.tensorflow.reconstruct", "tensorflow.cast", "my.tensorflow.flatten"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.reconstruct", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.reconstruct", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten"], ["", "def", "bidirectional_rnn", "(", "cell_fw", ",", "cell_bw", ",", "inputs", ",", "\n", "initial_state_fw", "=", "None", ",", "initial_state_bw", "=", "None", ",", "\n", "dtype", "=", "None", ",", "sequence_length", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "\n", "    ", "flat_inputs", "=", "flatten", "(", "inputs", ",", "2", ")", "# [-1, J, d]", "\n", "flat_len", "=", "None", "if", "sequence_length", "is", "None", "else", "tf", ".", "cast", "(", "flatten", "(", "sequence_length", ",", "0", ")", ",", "'int64'", ")", "\n", "\n", "(", "flat_fw_outputs", ",", "flat_bw_outputs", ")", ",", "final_state", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "cell_fw", ",", "cell_bw", ",", "flat_inputs", ",", "sequence_length", "=", "flat_len", ",", "\n", "initial_state_fw", "=", "initial_state_fw", ",", "initial_state_bw", "=", "initial_state_bw", ",", "\n", "dtype", "=", "dtype", ",", "scope", "=", "scope", ")", "\n", "\n", "fw_outputs", "=", "reconstruct", "(", "flat_fw_outputs", ",", "inputs", ",", "2", ")", "\n", "bw_outputs", "=", "reconstruct", "(", "flat_bw_outputs", ",", "inputs", ",", "2", ")", "\n", "# FIXME : final state is not reshaped!", "\n", "return", "(", "fw_outputs", ",", "bw_outputs", ")", ",", "final_state", "\n", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.exp_mask": [[9, 12], ["tensorflow.cast", "tensorflow.sequence_mask", "tensorflow.shape"], "function", ["None"], ["def", "exp_mask", "(", "val", ",", "mask", ")", ":", "\n", "  ", "mask", "=", "tf", ".", "cast", "(", "tf", ".", "sequence_mask", "(", "mask", ",", "tf", ".", "shape", "(", "val", ")", "[", "1", "]", ")", ",", "tf", ".", "float32", ")", "\n", "return", "val", "*", "mask", "+", "(", "1", "-", "mask", ")", "*", "VERY_NEGATIVE_NUMBER", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.get_cudnn_rnn": [[13, 22], ["ValueError"], "function", ["None"], ["", "def", "get_cudnn_rnn", "(", "cell_type", ")", ":", "\n", "  ", "if", "cell_type", "==", "'rnn'", ":", "\n", "    ", "return", "tf", ".", "contrib", ".", "cudnnrnn", ".", "CudnnRNNRelu", "\n", "", "elif", "cell_type", "==", "'gru'", ":", "\n", "    ", "return", "tf", ".", "contrib", ".", "cudnnrnn", ".", "CudnnGRU", "\n", "", "elif", "cell_type", "==", "'lstm'", ":", "\n", "    ", "return", "tf", ".", "contrib", ".", "cudnnrnn", ".", "CudnnLSTM", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Invalid cell type! Got %s\"", "%", "(", "cell_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.create_multi_rnn": [[23, 52], ["add_dropout", "create_cell", "tensorflow.contrib.rnn.DropoutWrapper", "add_dropout", "cell", "tensorflow.contrib.rnn.MultiRNNCell", "cell", "range", "ValueError"], "function", ["None"], ["", "", "def", "create_multi_rnn", "(", "cell_type", ",", "hidden_size", ",", "layers", ",", "keep_prob", ")", ":", "\n", "  ", "is_cudnn", "=", "False", "\n", "\n", "if", "cell_type", "==", "'rnn'", ":", "\n", "    ", "create_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicRNNCell", "\n", "", "elif", "cell_type", "==", "'gru'", ":", "\n", "    ", "create_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "\n", "", "elif", "cell_type", "==", "'basic_lstm'", ":", "\n", "    ", "create_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "\n", "", "elif", "cell_type", "==", "'lstm'", ":", "\n", "    ", "create_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "\n", "", "elif", "cell_type", "==", "'cudnn_lstm'", ":", "\n", "    ", "create_cell", "=", "tf", ".", "contrib", ".", "cudnn_rnn", ".", "CudnnCompatibleLSTMCell", "\n", "", "elif", "cell_type", "==", "'cudnn_gru'", ":", "\n", "    ", "create_cell", "=", "tf", ".", "contrib", ".", "cudnn_rnn", ".", "CudnnCompatibleGRUCell", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Invalid cell type! Got %s\"", "%", "(", "cell_type", ")", ")", "\n", "\n", "", "cell", "=", "lambda", ":", "create_cell", "(", "num_units", "=", "hidden_size", ")", "\n", "add_dropout", "=", "lambda", "cell", ":", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "\n", "cell", ",", "\n", "input_keep_prob", "=", "keep_prob", ",", "\n", "seed", "=", "11235", ")", "\n", "\n", "if", "layers", "==", "1", "and", "not", "is_cudnn", ":", "\n", "    ", "return", "add_dropout", "(", "cell", "(", ")", ")", "\n", "\n", "", "cells", "=", "[", "cell", "(", ")", "for", "_", "in", "range", "(", "layers", ")", "]", "\n", "return", "add_dropout", "(", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "cells", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.dot_product_attention": [[53, 62], ["tensorflow.matmul", "tensorflow.get_variable"], "function", ["None"], ["", "def", "dot_product_attention", "(", "tensor1", ",", "tensor2", ",", "with_bias", "=", "True", ")", ":", "\n", "  ", "'''a = t1 * t2 + b'''", "\n", "dots", "=", "tf", ".", "matmul", "(", "tensor1", ",", "tensor2", ",", "transpose_b", "=", "True", ")", "\n", "\n", "if", "with_bias", ":", "\n", "    ", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "dots", "+=", "bias", "\n", "\n", "", "return", "dots", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.tri_linear_attention": [[63, 86], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.get_variable", "tensorflow.tensordot", "tensorflow.get_variable", "tensorflow.tensordot", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.expand_dims", "keys.shape.as_list", "x.shape.as_list", "x.shape.as_list"], "function", ["None"], ["", "def", "tri_linear_attention", "(", "x", ",", "keys", ",", "with_bias", "=", "True", ")", ":", "\n", "  ", "'''a = w1t1 + w2t2 + t1w3t2 + b'''", "\n", "init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "key_w", "=", "tf", ".", "get_variable", "(", "\"key_w\"", ",", "shape", "=", "keys", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", ",", "initializer", "=", "init", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "key_logits", "=", "tf", ".", "tensordot", "(", "keys", ",", "key_w", ",", "axes", "=", "[", "[", "2", "]", ",", "[", "0", "]", "]", ")", "# (batch, key_len)", "\n", "\n", "x_w", "=", "tf", ".", "get_variable", "(", "\"input_w\"", ",", "shape", "=", "x", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", ",", "initializer", "=", "init", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "x_logits", "=", "tf", ".", "tensordot", "(", "x", ",", "x_w", ",", "axes", "=", "[", "[", "2", "]", ",", "[", "0", "]", "]", ")", "# (batch, x_len)", "\n", "\n", "dot_w", "=", "tf", ".", "get_variable", "(", "\"dot_w\"", ",", "shape", "=", "x", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", ",", "initializer", "=", "init", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# Compute x * dot_weights first, the batch mult with x", "\n", "x_dots", "=", "x", "*", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "dot_w", ",", "0", ")", ",", "0", ")", "\n", "dot_logits", "=", "tf", ".", "matmul", "(", "x_dots", ",", "keys", ",", "transpose_b", "=", "True", ")", "\n", "\n", "out", "=", "dot_logits", "+", "tf", ".", "expand_dims", "(", "key_logits", ",", "1", ")", "+", "tf", ".", "expand_dims", "(", "x_logits", ",", "2", ")", "\n", "\n", "if", "with_bias", ":", "\n", "    ", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "out", "+=", "bias", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bahdanau_attention": [[87, 115], ["tensorflow.get_variable", "print", "print", "tensorflow.einsum", "tensorflow.get_variable", "tensorflow.einsum", "tensorflow.python.ops.math_ops.tanh", "tensorflow.get_variable", "tensorflow.squeeze", "query.get_shape().as_list", "query.get_shape().as_list", "tf.get_variable.get_shape().as_list", "keys.get_shape().as_list", "tensorflow.get_variable", "tensorflow.einsum", "query.get_shape", "query.get_shape", "tf.get_variable.get_shape", "keys.get_shape"], "function", ["None"], ["", "def", "bahdanau_attention", "(", "query", ",", "keys", ",", "num_units", ",", "with_bias", "=", "True", ")", ":", "\n", "  ", "'''\n  a = v * tanh(Wq q + Wk k + b)\n  '''", "\n", "hq", "=", "query", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "Wq", "=", "tf", ".", "get_variable", "(", "\"Wq\"", ",", "[", "hq", ",", "num_units", "]", ",", "query", ".", "dtype", ")", "\n", "\n", "print", "(", "query", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "print", "(", "Wq", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "aq", "=", "tf", ".", "einsum", "(", "\"bij,jk->bik\"", ",", "query", ",", "Wq", ")", "# [b, 1, h_attn]", "\n", "\n", "hk", "=", "keys", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "Wk", "=", "tf", ".", "get_variable", "(", "\"Wk\"", ",", "[", "hk", ",", "num_units", "]", ",", "keys", ".", "dtype", ")", "\n", "\n", "ak", "=", "tf", ".", "einsum", "(", "\"bij,jk->bik\"", ",", "keys", ",", "Wk", ")", "# [b, n, h_attn]", "\n", "\n", "pre_tanh", "=", "aq", "+", "ak", "# [b x n x h_attn]", "\n", "\n", "if", "with_bias", ":", "\n", "    ", "b", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "shape", "=", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "pre_tanh", "+=", "b", "\n", "\n", "", "out", "=", "math_ops", ".", "tanh", "(", "pre_tanh", ")", "# [b x n x h_attn]", "\n", "\n", "v", "=", "tf", ".", "get_variable", "(", "\"V\"", ",", "[", "num_units", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "return", "tf", ".", "squeeze", "(", "tf", ".", "einsum", "(", "\"bij,jk->bik\"", ",", "out", ",", "v", ")", ",", "2", ")", "# [b x n]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.compute_attention_mask": [[117, 128], ["tensorflow.sequence_mask", "tensorflow.sequence_mask", "tensorflow.logical_and", "tensorflow.expand_dims", "tensorflow.expand_dims", "NotImplementedError"], "function", ["None"], ["", "def", "compute_attention_mask", "(", "x_mask", ",", "mem_mask", ",", "x_word_dim", ",", "key_word_dim", ")", ":", "\n", "  ", "\"\"\" computes a (batch, x_word_dim, key_word_dim) bool mask for clients that want masking \"\"\"", "\n", "if", "x_mask", "is", "None", "and", "mem_mask", "is", "None", ":", "\n", "    ", "return", "None", "\n", "", "elif", "x_mask", "is", "None", "or", "mem_mask", "is", "None", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "x_mask", "=", "tf", ".", "sequence_mask", "(", "x_mask", ",", "x_word_dim", ")", "\n", "mem_mask", "=", "tf", ".", "sequence_mask", "(", "mem_mask", ",", "key_word_dim", ")", "\n", "join_mask", "=", "tf", ".", "logical_and", "(", "tf", ".", "expand_dims", "(", "x_mask", ",", "2", ")", ",", "tf", ".", "expand_dims", "(", "mem_mask", ",", "1", ")", ")", "\n", "return", "join_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.attention_layer": [[129, 164], ["sim_func", "ops.compute_attention_mask", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.shape", "tensorflow.shape", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.compute_attention_mask", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax"], ["", "def", "attention_layer", "(", "x", ",", "a", ",", "x_mask", ",", "a_mask", ",", "sim_func", ",", "scope", "=", "\"\"", ",", "\n", "output_alignment", "=", "False", ")", ":", "\n", "  ", "'''\n  computes enhanced representation of x attending on a\n  x: tensor, shape [b x n x h]\n  a: tensor, shape [b x m x h]\n  x_mask: tensor, true length of x, shape [b]\n  a_mask: tensor, true length of a, shape [b]\n  sim_func: similarity function used to compute attention scores, has\n    signature sim_func(tensor1, tensor2) -> attn score\n  '''", "\n", "n", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "m", "=", "tf", ".", "shape", "(", "a", ")", "[", "1", "]", "\n", "\n", "dist_matrix", "=", "sim_func", "(", "x", ",", "a", ")", "\n", "#print(\"Sim matrix:\")", "\n", "#print(dist_matrix.get_shape().as_list()) # b x n x m", "\n", "\n", "joint_mask", "=", "compute_attention_mask", "(", "x_mask", ",", "a_mask", ",", "n", ",", "m", ")", "\n", "if", "joint_mask", "is", "not", "None", ":", "\n", "    ", "dist_matrix", "+=", "VERY_NEGATIVE_NUMBER", "*", "(", "1", "-", "tf", ".", "cast", "(", "joint_mask", ",", "dist_matrix", ".", "dtype", ")", ")", "\n", "\n", "", "probs", "=", "tf", ".", "nn", ".", "softmax", "(", "dist_matrix", ")", "# b x n x m", "\n", "#print(\"Probs:\")", "\n", "#print(probs.get_shape().as_list())", "\n", "\n", "attention_vector", "=", "tf", ".", "matmul", "(", "probs", ",", "a", ")", "# b x n x h", "\n", "#print(\"Attn vect:\")", "\n", "#print(attention_vector.get_shape().as_list())", "\n", "\n", "if", "output_alignment", ":", "\n", "    ", "return", "attention_vector", ",", "probs", "\n", "", "else", ":", "\n", "    ", "return", "attention_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bidaf_attention": [[165, 199], ["sim_func", "ops.compute_attention_mask", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.reduce_max", "tensorflow.nn.softmax", "tensorflow.einsum", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.shape", "tensorflow.shape", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.compute_attention_mask", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax"], ["", "", "def", "bidaf_attention", "(", "context_h", ",", "query_h", ",", "context_mask", ",", "query_mask", ",", "sim_func", ",", "\n", "output_alignment", "=", "False", ")", ":", "\n", "  ", "'''\n  slightly modified version of c. clark's bidaf code\n  output_alignment: boolean, whether to print out the alignment matrix\n  '''", "\n", "context_word_dim", "=", "tf", ".", "shape", "(", "context_h", ")", "[", "1", "]", "\n", "query_word_dim", "=", "tf", ".", "shape", "(", "query_h", ")", "[", "1", "]", "\n", "\n", "dist_matrix", "=", "sim_func", "(", "context_h", ",", "query_h", ")", "\n", "joint_mask", "=", "compute_attention_mask", "(", "context_mask", ",", "query_mask", ",", "\n", "context_word_dim", ",", "query_word_dim", ")", "\n", "if", "joint_mask", "is", "not", "None", ":", "\n", "    ", "dist_matrix", "+=", "VERY_NEGATIVE_NUMBER", "*", "(", "1", "-", "tf", ".", "cast", "(", "joint_mask", ",", "dist_matrix", ".", "dtype", ")", ")", "\n", "", "query_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "dist_matrix", ")", "\n", "# probability of each query_word per context_word", "\n", "\n", "# Batch matrix multiplication to get the attended vectors", "\n", "select_query", "=", "tf", ".", "matmul", "(", "query_probs", ",", "query_h", ")", "# (batch, context_words, q_dim)", "\n", "\n", "# select query-to-context", "\n", "context_dist", "=", "tf", ".", "reduce_max", "(", "dist_matrix", ",", "axis", "=", "2", ")", "# (batch, context_word``s)", "\n", "context_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "context_dist", ")", "# (batch, context_words)", "\n", "select_context", "=", "tf", ".", "einsum", "(", "\"ai,aik->ak\"", ",", "context_probs", ",", "context_h", ")", "# (batch, context_dim)", "\n", "select_context", "=", "tf", ".", "expand_dims", "(", "select_context", ",", "1", ")", "\n", "\n", "output", "=", "tf", ".", "concat", "(", "[", "context_h", ",", "select_query", ",", "context_h", "*", "select_query", ",", "\n", "context_h", "*", "select_context", "]", ",", "axis", "=", "2", ")", "\n", "\n", "if", "output_alignment", ":", "\n", "    ", "return", "output", ",", "query_probs", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.mem_nn_hop": [[200, 220], ["tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax"], ["", "def", "mem_nn_hop", "(", "input", ",", "memories", ")", ":", "\n", "  ", "'''\n  mem_nn_hop: one hop of a memory network (https://www.arxiv.org/pdf/1503.08895.pdf)\n  input: tensor, the input (question), shape [b x h]\n  memories: tensor, memories to look at (context), shape [b x n x h]\n  '''", "\n", "u_k", "=", "input", "\n", "\n", "# hack to get around no reduce_dot", "\n", "u_temp", "=", "tf", ".", "transpose", "(", "tf", ".", "expand_dims", "(", "u_k", ",", "-", "1", ")", ",", "[", "0", ",", "2", ",", "1", "]", ")", "# [b x 1 x h]", "\n", "dotted", "=", "tf", ".", "reduce_sum", "(", "memories", "*", "u_temp", ",", "2", ")", "# dot product --> b x n", "\n", "\n", "# Calculate probabilities", "\n", "probs", "=", "tf", ".", "nn", ".", "softmax", "(", "dotted", ")", "# b x n", "\n", "probs_temp", "=", "tf", ".", "transpose", "(", "tf", ".", "expand_dims", "(", "probs", ",", "-", "1", ")", ",", "[", "0", ",", "2", ",", "1", "]", ")", "# b x 1 x n", "\n", "c_temp", "=", "tf", ".", "transpose", "(", "memories", ",", "[", "0", ",", "2", ",", "1", "]", ")", "# b x h x n", "\n", "o_k", "=", "tf", ".", "reduce_sum", "(", "c_temp", "*", "probs_temp", ",", "2", ")", "# b x h", "\n", "u_k", "=", "u_k", "+", "o_k", "\n", "\n", "return", "u_k", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.mem_nn": [[221, 234], ["tensorflow.reduce_sum", "print", "range", "mem_nn_hop.get_shape().as_list", "ops.mem_nn_hop", "mem_nn_hop.get_shape"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.mem_nn_hop"], ["", "def", "mem_nn", "(", "input", ",", "memories", ",", "input_pos_enc", ",", "n", ")", ":", "\n", "  ", "'''\n  mem_nn: memory network\n  input: tensor, the input (question), shape [b x m x h]\n  memories: tensor, memories to look at (context), shape [b x n x h]\n  input_pos_enc: tensor, pos. encoding of the input, shape [b x m x h]\n  n: int, # of hops to perform\n  '''", "\n", "u", "=", "tf", ".", "reduce_sum", "(", "input_pos_enc", "*", "input", ",", "1", ")", "# [b x h]", "\n", "print", "(", "u", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "    ", "u", "=", "mem_nn_hop", "(", "u", ",", "memories", ")", "\n", "", "return", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.fuse_gate": [[235, 246], ["tensorflow.layers.dense", "tensorflow.layers.dense", "print", "tensorflow.sigmoid", "lhs.shape.as_list", "tf.layers.dense.get_shape().as_list", "rhs.shape.as_list", "tf.layers.dense.get_shape"], "function", ["None"], ["", "def", "fuse_gate", "(", "lhs", ",", "rhs", ")", ":", "\n", "  ", "dim", "=", "lhs", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "assert", "rhs", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "==", "dim", "\n", "lhs1", "=", "tf", ".", "layers", ".", "dense", "(", "lhs", ",", "dim", ",", "activation", "=", "None", ",", "name", "=", "'lhs1'", ")", "\n", "rhs1", "=", "tf", ".", "layers", ".", "dense", "(", "rhs", ",", "dim", ",", "activation", "=", "None", ",", "name", "=", "'rhs1'", ")", "\n", "\n", "print", "(", "lhs1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "z", "=", "tf", ".", "sigmoid", "(", "lhs1", "+", "rhs1", ")", "\n", "\n", "return", "z", "*", "lhs", "+", "(", "1", "-", "z", ")", "*", "rhs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.diin_fuse_gate": [[248, 278], ["tensorflow.layers.dense", "tensorflow.layers.dense", "print", "tensorflow.tanh", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.sigmoid", "print", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.sigmoid", "print", "print", "lhs.shape.as_list", "lhs_1.get_shape().as_list", "tf.sigmoid.get_shape().as_list", "tf.sigmoid.get_shape().as_list", "out.get_shape().as_list", "rhs.shape.as_list", "lhs_1.get_shape", "tf.sigmoid.get_shape", "tf.sigmoid.get_shape", "out.get_shape"], "function", ["None"], ["", "def", "diin_fuse_gate", "(", "lhs", ",", "rhs", ")", ":", "\n", "  ", "dim", "=", "lhs", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "assert", "rhs", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "==", "dim", "\n", "\n", "lhs1", "=", "tf", ".", "layers", ".", "dense", "(", "lhs", ",", "dim", ",", "activation", "=", "None", ",", "name", "=", "'lhs1'", ")", "\n", "rhs1", "=", "tf", ".", "layers", ".", "dense", "(", "rhs", ",", "dim", ",", "activation", "=", "None", ",", "name", "=", "'rhs1'", ")", "\n", "\n", "print", "(", "lhs_1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "z", "=", "tf", ".", "tanh", "(", "lhs1", "+", "rhs1", ")", "\n", "\n", "lhs2", "=", "tf", ".", "layers", ".", "dense", "(", "lhs", ",", "dim", ",", "activation", "=", "None", ",", "name", "=", "'lhs2'", ")", "\n", "rhs2", "=", "tf", ".", "layers", ".", "dense", "(", "rhs", ",", "dim", ",", "activation", "=", "None", ",", "name", "=", "'rhs2'", ")", "\n", "\n", "f", "=", "tf", ".", "sigmoid", "(", "lhs2", "+", "rhs2", ")", "\n", "\n", "print", "(", "f", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "lhs3", "=", "tf", ".", "layers", ".", "dense", "(", "lhs", ",", "dim", ",", "activation", "=", "None", ",", "name", "=", "'lhs3'", ")", "\n", "rhs3", "=", "tf", ".", "layers", ".", "dense", "(", "rhs", ",", "dim", ",", "activation", "=", "None", ",", "name", "=", "'rhs3'", ")", "\n", "\n", "r", "=", "tf", ".", "sigmoid", "(", "lhs3", "+", "rhs3", ")", "\n", "\n", "print", "(", "r", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "out", "=", "f", "*", "lhs", "+", "r", "*", "z", "\n", "\n", "print", "(", "out", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.concat_with_product": [[279, 281], ["tensorflow.concat", "len"], "function", ["None"], ["", "def", "concat_with_product", "(", "t1", ",", "t2", ")", ":", "\n", "  ", "return", "tf", ".", "concat", "(", "[", "t1", ",", "t2", ",", "t1", "*", "t2", "]", ",", "axis", "=", "len", "(", "t1", ".", "shape", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.self_attention_encoder": [[282, 318], ["sim_func", "ops.compute_attention_mask", "tensorflow.nn.softmax", "print", "print", "tensorflow.matmul", "print", "print", "tensorflow.shape", "tf.nn.softmax.get_shape().as_list", "merge_function.get_shape().as_list", "merge_function", "tensorflow.cast", "tf.nn.softmax.get_shape", "merge_function.get_shape"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.compute_attention_mask", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax"], ["", "def", "self_attention_encoder", "(", "x", ",", "sim_func", ",", "mask", "=", "None", ",", "merge_function", "=", "None", ",", "\n", "output_alignment", "=", "False", ")", ":", "\n", "  ", "'''\n  self attention encoder\n  x: tensor, thing to encode, shape [b x n x h]\n  sim_func: similarity function of two tensors\n  mask: length of x, tensor, shape [b]\n  merge_function: function of two inputs to merge x with x_self_attn, often a\n    fuse gate\n  output_alignment: boolean, whether to return the alignment matrix\n  '''", "\n", "\n", "x_dim", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "\n", "dist", "=", "sim_func", "(", "x", ",", "x", ")", "# [b x n x n]", "\n", "joint_mask", "=", "compute_attention_mask", "(", "mask", ",", "mask", ",", "x_dim", ",", "x_dim", ")", "\n", "if", "joint_mask", "is", "not", "None", ":", "\n", "    ", "dist", "+=", "VERY_NEGATIVE_NUMBER", "*", "(", "1", "-", "tf", ".", "cast", "(", "joint_mask", ",", "\n", "dist", ".", "dtype", ")", ")", "\n", "\n", "", "dist", "=", "tf", ".", "nn", ".", "softmax", "(", "dist", ")", "# [b x n x n]", "\n", "print", "(", "\"[b x n x n]\"", ")", "\n", "print", "(", "dist", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "out", "=", "tf", ".", "matmul", "(", "dist", ",", "x", ")", "# [b x n x h]", "\n", "\n", "print", "(", "\"[b x n x h]\"", ")", "\n", "print", "(", "out", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "if", "merge_function", "is", "not", "None", ":", "\n", "    ", "out", "=", "merge_function", "(", "x", ",", "out", ")", "\n", "\n", "", "if", "output_alignment", ":", "\n", "    ", "return", "out", ",", "dist", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_rnn_encoder": [[319, 343], ["ops.create_multi_rnn", "ops.create_multi_rnn", "tensorflow.concat", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.nn.bidirectional_dynamic_rnn", "output_layer"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.create_multi_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.create_multi_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.bidirectional_dynamic_rnn"], ["", "def", "bi_rnn_encoder", "(", "cell_type", ",", "hidden_size", ",", "num_layers", ",", "keep_prob", ",", "inputs", ",", "\n", "input_lengths", ",", "output_layer", "=", "None", ")", ":", "\n", "  ", "fw_cell", "=", "create_multi_rnn", "(", "cell_type", ",", "hidden_size", ",", "num_layers", ",", "keep_prob", ")", "\n", "bw_cell", "=", "create_multi_rnn", "(", "cell_type", ",", "hidden_size", ",", "num_layers", ",", "keep_prob", ")", "\n", "if", "input_lengths", "!=", "None", ":", "\n", "    ", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "fw_cell", ",", "\n", "bw_cell", ",", "\n", "inputs", ",", "\n", "input_lengths", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "    ", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "fw_cell", ",", "\n", "bw_cell", ",", "\n", "inputs", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "outputs", "=", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "2", ")", "\n", "\n", "if", "output_layer", "is", "not", "None", ":", "\n", "    ", "outputs", "=", "output_layer", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", ",", "final_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.rnn_encoder": [[344, 357], ["ops.create_multi_rnn", "tensorflow.nn.dynamic_rnn", "output_layer"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.create_multi_rnn", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn.dynamic_rnn"], ["", "def", "rnn_encoder", "(", "cell_type", ",", "hidden_size", ",", "num_layers", ",", "keep_prob", ",", "inputs", ",", "\n", "input_lengths", ",", "output_layer", "=", "None", ")", ":", "\n", "  ", "cell", "=", "create_multi_rnn", "(", "cell_type", ",", "hidden_size", ",", "num_layers", ",", "keep_prob", ")", "\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", ",", "\n", "inputs", ",", "\n", "input_lengths", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "if", "output_layer", "is", "not", "None", ":", "\n", "    ", "outputs", "=", "output_layer", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", ",", "final_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_rnn_encoder": [[358, 380], ["RnnLayer", "tensorflow.layers.dropout", "RnnLayer.apply", "print", "output_layer.get_shape().as_list", "output_layer", "ValueError", "output_layer.get_shape"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.dropout", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.apply"], ["", "def", "bi_cudnn_rnn_encoder", "(", "cell_type", ",", "hidden_size", ",", "num_layers", ",", "dropout_rate", ",", "inputs", ",", "\n", "input_lengths", ",", "is_train", ",", "output_layer", "=", "None", ")", ":", "\n", "  ", "if", "cell_type", "==", "'lstm'", ":", "\n", "    ", "RnnLayer", "=", "CudnnLstm", "\n", "", "elif", "cell_type", "==", "'gru'", ":", "\n", "    ", "RnnLayer", "=", "CudnnGru", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", ")", "\n", "\n", "", "layer", "=", "RnnLayer", "(", "\n", "n_units", "=", "hidden_size", ",", "\n", "n_layers", "=", "num_layers", ")", "\n", "\n", "inputs", "=", "tf", ".", "layers", ".", "dropout", "(", "inputs", ",", "dropout_rate", ",", "training", "=", "is_train", ")", "\n", "\n", "outputs", "=", "layer", ".", "apply", "(", "is_train", ",", "inputs", ",", "input_lengths", ")", "\n", "print", "(", "outputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "if", "output_layer", "is", "not", "None", ":", "\n", "    ", "outputs", "=", "output_layer", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_maxout_rnn_encoder": [[381, 405], ["range", "tensorflow.reduce_max", "print", "tensorflow.stack", "tf.reduce_max.get_shape().as_list", "tensorflow.variable_scope", "ops.bi_cudnn_rnn_encoder", "outputs.append", "tf.reduce_max.get_shape"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.ops.bi_cudnn_rnn_encoder"], ["", "def", "bi_cudnn_maxout_rnn_encoder", "(", "cell_type", ",", "hidden_size", ",", "num_layers", ",", "\n", "dropout_rate", ",", "inputs", ",", "input_lengths", ",", "is_train", ",", "output_layer", "=", "None", ",", "\n", "num_rnns", "=", "2", ")", ":", "\n", "  ", "outputs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_rnns", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"worker_%d\"", "%", "i", ")", ":", "\n", "      ", "cur_output", ",", "_", "=", "bi_cudnn_rnn_encoder", "(", "\n", "cell_type", ",", "\n", "hidden_size", ",", "\n", "num_layers", ",", "\n", "dropout_rate", ",", "\n", "inputs", ",", "\n", "input_lengths", ",", "\n", "is_train", ",", "\n", "output_layer", ")", "\n", "\n", "outputs", ".", "append", "(", "cur_output", ")", "\n", "\n", "", "", "out", "=", "tf", ".", "reduce_max", "(", "tf", ".", "stack", "(", "outputs", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "\n", "print", "(", "out", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "return", "out", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.SwitchableDropoutWrapper.__init__": [[9, 14], ["tensorflow.contrib.rnn.DropoutWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cell", ",", "is_train", ",", "input_keep_prob", "=", "1.0", ",", "output_keep_prob", "=", "1.0", ",", "\n", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", "SwitchableDropoutWrapper", ",", "self", ")", ".", "__init__", "(", "cell", ",", "input_keep_prob", "=", "input_keep_prob", ",", "output_keep_prob", "=", "output_keep_prob", ",", "\n", "seed", "=", "seed", ")", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.SwitchableDropoutWrapper.__call__": [[15, 26], ["super().__call__", "tensorflow.get_variable_scope().reuse_variables", "rnn_cell.SwitchableDropoutWrapper._cell", "tensorflow.cond", "isinstance", "state.__class__", "tensorflow.cond", "tensorflow.get_variable_scope", "tensorflow.cond", "zip"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.__call__"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "        ", "outputs_do", ",", "new_state_do", "=", "super", "(", "SwitchableDropoutWrapper", ",", "self", ")", ".", "__call__", "(", "inputs", ",", "state", ",", "scope", "=", "scope", ")", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "outputs", ",", "new_state", "=", "self", ".", "_cell", "(", "inputs", ",", "state", ",", "scope", ")", "\n", "outputs", "=", "tf", ".", "cond", "(", "self", ".", "is_train", ",", "lambda", ":", "outputs_do", ",", "lambda", ":", "outputs", ")", "\n", "if", "isinstance", "(", "state", ",", "tuple", ")", ":", "\n", "            ", "new_state", "=", "state", ".", "__class__", "(", "*", "[", "tf", ".", "cond", "(", "self", ".", "is_train", ",", "lambda", ":", "new_state_do_i", ",", "lambda", ":", "new_state_i", ")", "\n", "for", "new_state_do_i", ",", "new_state_i", "in", "zip", "(", "new_state_do", ",", "new_state", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "new_state", "=", "tf", ".", "cond", "(", "self", ".", "is_train", ",", "lambda", ":", "new_state_do", ",", "lambda", ":", "new_state", ")", "\n", "", "return", "outputs", ",", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.TreeRNNCell.__init__": [[29, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cell", ",", "input_size", ",", "reduce_func", ")", ":", "\n", "        ", "self", ".", "_cell", "=", "cell", "\n", "self", ".", "_input_size", "=", "input_size", "\n", "self", ".", "_reduce_func", "=", "reduce_func", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.TreeRNNCell.__call__": [[34, 52], ["tensorflow.variable_scope", "tensorflow.slice", "tensorflow.slice", "tensorflow.expand_dims", "tensorflow.tile", "rnn_cell.TreeRNNCell._reduce_func", "tensorflow.reshape", "rnn_cell.TreeRNNCell._cell", "tensorflow.shape", "tensorflow.reshape", "tensorflow.expand_dims", "my.tensorflow.exp_mask", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.exp_mask"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: [N*B, I + B]\n        :param state: [N*B, d]\n        :param scope:\n        :return: [N*B, d]\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "self", ".", "__class__", ".", "__name__", ")", ":", "\n", "            ", "d", "=", "self", ".", "state_size", "\n", "x", "=", "tf", ".", "slice", "(", "inputs", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "self", ".", "_input_size", "]", ")", "# [N*B, I]", "\n", "mask", "=", "tf", ".", "slice", "(", "inputs", ",", "[", "0", ",", "self", ".", "_input_size", "]", ",", "[", "-", "1", ",", "-", "1", "]", ")", "# [N*B, B]", "\n", "B", "=", "tf", ".", "shape", "(", "mask", ")", "[", "1", "]", "\n", "prev_state", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reshape", "(", "state", ",", "[", "-", "1", ",", "B", ",", "d", "]", ")", ",", "1", ")", "# [N, B, d] -> [N, 1, B, d]", "\n", "mask", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "reshape", "(", "mask", ",", "[", "-", "1", ",", "B", ",", "B", "]", ")", ",", "-", "1", ")", ",", "[", "1", ",", "1", ",", "1", ",", "d", "]", ")", "# [N, B, B, d]", "\n", "# prev_state = self._reduce_func(tf.tile(prev_state, [1, B, 1, 1]), 2)", "\n", "prev_state", "=", "self", ".", "_reduce_func", "(", "exp_mask", "(", "prev_state", ",", "mask", ")", ",", "2", ")", "# [N, B, d]", "\n", "prev_state", "=", "tf", ".", "reshape", "(", "prev_state", ",", "[", "-", "1", ",", "d", "]", ")", "# [N*B, d]", "\n", "return", "self", ".", "_cell", "(", "x", ",", "prev_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.TreeRNNCell.state_size": [[53, 56], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cell", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.TreeRNNCell.output_size": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cell", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.NoOpCell.__init__": [[63, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_units", ")", ":", "\n", "        ", "self", ".", "_num_units", "=", "num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.NoOpCell.__call__": [[66, 68], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "        ", "return", "state", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.NoOpCell.state_size": [[69, 72], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.NoOpCell.output_size": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.MatchCell.__init__": [[79, 84], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cell", ",", "input_size", ",", "q_len", ")", ":", "\n", "        ", "self", ".", "_cell", "=", "cell", "\n", "self", ".", "_input_size", "=", "input_size", "\n", "# FIXME : This won't be needed with good shape guessing", "\n", "self", ".", "_q_len", "=", "q_len", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.MatchCell.state_size": [[85, 88], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cell", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.MatchCell.output_size": [[89, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cell", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.MatchCell.__call__": [[93, 114], ["tensorflow.variable_scope", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.tanh", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.concat", "rnn_cell.MatchCell._cell", "tensorflow.expand_dims", "tensorflow.expand_dims", "my.tensorflow.nn.linear", "my.tensorflow.exp_mask", "my.tensorflow.nn.linear", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.exp_mask", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param inputs: [N, d + JQ + JQ * d]\n        :param state: [N, d]\n        :param scope:\n        :return:\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "self", ".", "__class__", ".", "__name__", ")", ":", "\n", "            ", "c_prev", ",", "h_prev", "=", "state", "\n", "x", "=", "tf", ".", "slice", "(", "inputs", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "self", ".", "_input_size", "]", ")", "\n", "q_mask", "=", "tf", ".", "slice", "(", "inputs", ",", "[", "0", ",", "self", ".", "_input_size", "]", ",", "[", "-", "1", ",", "self", ".", "_q_len", "]", ")", "# [N, JQ]", "\n", "qs", "=", "tf", ".", "slice", "(", "inputs", ",", "[", "0", ",", "self", ".", "_input_size", "+", "self", ".", "_q_len", "]", ",", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "qs", "=", "tf", ".", "reshape", "(", "qs", ",", "[", "-", "1", ",", "self", ".", "_q_len", ",", "self", ".", "_input_size", "]", ")", "# [N, JQ, d]", "\n", "x_tiled", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "x", ",", "1", ")", ",", "[", "1", ",", "self", ".", "_q_len", ",", "1", "]", ")", "# [N, JQ, d]", "\n", "h_prev_tiled", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "h_prev", ",", "1", ")", ",", "[", "1", ",", "self", ".", "_q_len", ",", "1", "]", ")", "# [N, JQ, d]", "\n", "f", "=", "tf", ".", "tanh", "(", "linear", "(", "[", "qs", ",", "x_tiled", ",", "h_prev_tiled", "]", ",", "self", ".", "_input_size", ",", "True", ",", "scope", "=", "'f'", ")", ")", "# [N, JQ, d]", "\n", "a", "=", "tf", ".", "nn", ".", "softmax", "(", "exp_mask", "(", "linear", "(", "f", ",", "1", ",", "True", ",", "squeeze", "=", "True", ",", "scope", "=", "'a'", ")", ",", "q_mask", ")", ")", "# [N, JQ]", "\n", "q", "=", "tf", ".", "reduce_sum", "(", "qs", "*", "tf", ".", "expand_dims", "(", "a", ",", "-", "1", ")", ",", "1", ")", "\n", "z", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "x", ",", "q", "]", ")", "# [N, 2d]", "\n", "return", "self", ".", "_cell", "(", "z", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.__init__": [[117, 139], ["my.tensorflow.flatten", "my.tensorflow.flatten", "rnn_cell.AttentionCell.get_linear_controller", "rnn_cell.AttentionCell.get_concat_mapper", "rnn_cell.AttentionCell.get_sim_mapper"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.get_linear_controller", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.get_concat_mapper", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.get_sim_mapper"], ["    ", "def", "__init__", "(", "self", ",", "cell", ",", "memory", ",", "mask", "=", "None", ",", "controller", "=", "None", ",", "mapper", "=", "None", ",", "input_keep_prob", "=", "1.0", ",", "is_train", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Early fusion attention cell: uses the (inputs, state) to control the current attention.\n\n        :param cell:\n        :param memory: [N, M, m]\n        :param mask:\n        :param controller: (inputs, prev_state, memory) -> memory_logits\n        \"\"\"", "\n", "self", ".", "_cell", "=", "cell", "\n", "self", ".", "_memory", "=", "memory", "\n", "self", ".", "_mask", "=", "mask", "\n", "self", ".", "_flat_memory", "=", "flatten", "(", "memory", ",", "2", ")", "\n", "self", ".", "_flat_mask", "=", "flatten", "(", "mask", ",", "1", ")", "\n", "if", "controller", "is", "None", ":", "\n", "            ", "controller", "=", "AttentionCell", ".", "get_linear_controller", "(", "True", ",", "is_train", "=", "is_train", ")", "\n", "", "self", ".", "_controller", "=", "controller", "\n", "if", "mapper", "is", "None", ":", "\n", "            ", "mapper", "=", "AttentionCell", ".", "get_concat_mapper", "(", ")", "\n", "", "elif", "mapper", "==", "'sim'", ":", "\n", "            ", "mapper", "=", "AttentionCell", ".", "get_sim_mapper", "(", ")", "\n", "", "self", ".", "_mapper", "=", "mapper", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.state_size": [[140, 143], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cell", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.output_size": [[144, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cell", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.__call__": [[148, 154], ["tensorflow.variable_scope", "rnn_cell.AttentionCell._controller", "my.tensorflow.nn.softsel", "rnn_cell.AttentionCell._mapper", "rnn_cell.AttentionCell._cell"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softsel"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"AttentionCell\"", ")", ":", "\n", "            ", "memory_logits", "=", "self", ".", "_controller", "(", "inputs", ",", "state", ",", "self", ".", "_flat_memory", ")", "\n", "sel_mem", "=", "softsel", "(", "self", ".", "_flat_memory", ",", "memory_logits", ",", "mask", "=", "self", ".", "_flat_mask", ")", "# [N, m]", "\n", "new_inputs", ",", "new_state", "=", "self", ".", "_mapper", "(", "inputs", ",", "state", ",", "sel_mem", ")", "\n", "return", "self", ".", "_cell", "(", "new_inputs", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.get_double_linear_controller": [[155, 180], ["len", "tensorflow.tile", "isinstance", "tensorflow.concat", "my.tensorflow.nn.double_linear_logits", "memory.get_shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.double_linear_logits"], ["", "", "@", "staticmethod", "\n", "def", "get_double_linear_controller", "(", "size", ",", "bias", ",", "input_keep_prob", "=", "1.0", ",", "is_train", "=", "None", ")", ":", "\n", "        ", "def", "double_linear_controller", "(", "inputs", ",", "state", ",", "memory", ")", ":", "\n", "            ", "\"\"\"\n\n            :param inputs: [N, i]\n            :param state: [N, d]\n            :param memory: [N, M, m]\n            :return: [N, M]\n            \"\"\"", "\n", "rank", "=", "len", "(", "memory", ".", "get_shape", "(", ")", ")", "\n", "_memory_size", "=", "tf", ".", "shape", "(", "memory", ")", "[", "rank", "-", "2", "]", "\n", "tiled_inputs", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "inputs", ",", "1", ")", ",", "[", "1", ",", "_memory_size", ",", "1", "]", ")", "\n", "if", "isinstance", "(", "state", ",", "tuple", ")", ":", "\n", "                ", "tiled_states", "=", "[", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "each", ",", "1", ")", ",", "[", "1", ",", "_memory_size", ",", "1", "]", ")", "\n", "for", "each", "in", "state", "]", "\n", "", "else", ":", "\n", "                ", "tiled_states", "=", "[", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "state", ",", "1", ")", ",", "[", "1", ",", "_memory_size", ",", "1", "]", ")", "]", "\n", "\n", "# [N, M, d]", "\n", "", "in_", "=", "tf", ".", "concat", "(", "[", "tiled_inputs", "]", "+", "tiled_states", "+", "[", "memory", "]", ",", "axis", "=", "2", ")", "\n", "out", "=", "double_linear_logits", "(", "in_", ",", "size", ",", "bias", ",", "input_keep_prob", "=", "input_keep_prob", ",", "\n", "is_train", "=", "is_train", ")", "\n", "return", "out", "\n", "", "return", "double_linear_controller", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.get_linear_controller": [[181, 198], ["len", "tensorflow.tile", "isinstance", "tensorflow.concat", "my.tensorflow.nn.linear", "memory.get_shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear"], ["", "@", "staticmethod", "\n", "def", "get_linear_controller", "(", "bias", ",", "input_keep_prob", "=", "1.0", ",", "is_train", "=", "None", ")", ":", "\n", "        ", "def", "linear_controller", "(", "inputs", ",", "state", ",", "memory", ")", ":", "\n", "            ", "rank", "=", "len", "(", "memory", ".", "get_shape", "(", ")", ")", "\n", "_memory_size", "=", "tf", ".", "shape", "(", "memory", ")", "[", "rank", "-", "2", "]", "\n", "tiled_inputs", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "inputs", ",", "1", ")", ",", "[", "1", ",", "_memory_size", ",", "1", "]", ")", "\n", "if", "isinstance", "(", "state", ",", "tuple", ")", ":", "\n", "                ", "tiled_states", "=", "[", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "each", ",", "1", ")", ",", "[", "1", ",", "_memory_size", ",", "1", "]", ")", "\n", "for", "each", "in", "state", "]", "\n", "", "else", ":", "\n", "                ", "tiled_states", "=", "[", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "state", ",", "1", ")", ",", "[", "1", ",", "_memory_size", ",", "1", "]", ")", "]", "\n", "\n", "# [N, M, d]", "\n", "", "in_", "=", "tf", ".", "concat", "(", "[", "tiled_inputs", "]", "+", "tiled_states", "+", "[", "memory", "]", ",", "axis", "=", "2", ")", "\n", "out", "=", "linear", "(", "in_", ",", "1", ",", "bias", ",", "squeeze", "=", "True", ",", "input_keep_prob", "=", "input_keep_prob", ",", "is_train", "=", "is_train", ")", "\n", "return", "out", "\n", "", "return", "linear_controller", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.get_concat_mapper": [[199, 211], ["tensorflow.concat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_concat_mapper", "(", ")", ":", "\n", "        ", "def", "concat_mapper", "(", "inputs", ",", "state", ",", "sel_mem", ")", ":", "\n", "            ", "\"\"\"\n\n            :param inputs: [N, i]\n            :param state: [N, d]\n            :param sel_mem: [N, m]\n            :return: (new_inputs, new_state) tuple\n            \"\"\"", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "inputs", ",", "sel_mem", "]", ")", ",", "state", "\n", "", "return", "concat_mapper", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.rnn_cell.AttentionCell.get_sim_mapper": [[212, 224], ["tensorflow.concat", "tensorflow.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_sim_mapper", "(", ")", ":", "\n", "        ", "def", "sim_mapper", "(", "inputs", ",", "state", ",", "sel_mem", ")", ":", "\n", "            ", "\"\"\"\n            Assume that inputs and sel_mem are the same size\n            :param inputs: [N, i]\n            :param state: [N, d]\n            :param sel_mem: [N, i]\n            :return: (new_inputs, new_state) tuple\n            \"\"\"", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "inputs", ",", "sel_mem", ",", "inputs", "*", "sel_mem", ",", "tf", ".", "abs", "(", "inputs", "-", "sel_mem", ")", "]", ")", ",", "state", "\n", "", "return", "sim_mapper", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.reconstruct_batchesV3": [[10, 57], ["tensorflow.reduce_max", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.control_dependencies", "range", "tensorflow.add", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.control_flow_ops.while_loop", "tf.stack.append", "tf.stack.append", "tf.stack.append", "tf.stack.append", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensorflow.assert_equal", "tensorflow.assert_equal", "tensor_array_ops.TensorArray.stack", "tensor_array_ops.TensorArray.stack", "tensor_array_ops.TensorArray.stack", "tensor_array_ops.TensorArray.stack", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.constant"], "function", ["None"], ["def", "reconstruct_batchesV3", "(", "x_new", ",", "x", ",", "cx", ",", "x_mask", ",", "group", ",", "target_batch_size", ",", "max_para_size", ",", "model", ")", ":", "\n", "  ", "\"\"\"\n  For reconstruction of raw input (not embeddings).\n  \"\"\"", "\n", "out_x_new", "=", "[", "]", "\n", "out_x", "=", "[", "]", "\n", "out_cx", "=", "[", "]", "\n", "out_xmask", "=", "[", "]", "\n", "\n", "start_batch", "=", "0", "\n", "#emb_dim = 160", "\n", "#max_doc_num = tf.shape(p0)[1]", "\n", "max_doc_num", "=", "tf", ".", "reduce_max", "(", "group", ")", "\n", "\n", "def", "outer_while_body", "(", "j", ",", "x_new", ",", "x", ",", "cs", ",", "x_mask", ",", "start_batch", ",", "out_x_newi", ",", "out_xi", ",", "out_cxi", ",", "out_xmaski", ",", "group_len", ")", ":", "\n", "# with tf.control_dependencies([tf.assert_equal(tf.shape(p0)[0], tf.shape(p_mask)[0])]):", "\n", "    ", "out_x_newi", "=", "tf", ".", "cond", "(", "j", "<", "group_len", ",", "lambda", ":", "out_x_newi", ".", "write", "(", "j", ",", "x_new", "[", "start_batch", "+", "j", "]", ")", ",", "lambda", ":", "out_x_newi", ".", "write", "(", "j", ",", "tf", ".", "zeros_like", "(", "x_new", "[", "0", "]", ")", ")", ")", "\n", "out_xi", "=", "tf", ".", "cond", "(", "j", "<", "group_len", ",", "lambda", ":", "out_xi", ".", "write", "(", "j", ",", "x", "[", "start_batch", "+", "j", ",", "0", "]", ")", ",", "lambda", ":", "out_xi", ".", "write", "(", "j", ",", "tf", ".", "zeros_like", "(", "x", "[", "0", ",", "0", "]", ")", ")", ")", "\n", "out_cxi", "=", "tf", ".", "cond", "(", "j", "<", "group_len", ",", "lambda", ":", "out_cxi", ".", "write", "(", "j", ",", "cx", "[", "start_batch", "+", "j", ",", "0", "]", ")", ",", "lambda", ":", "out_cxi", ".", "write", "(", "j", ",", "tf", ".", "zeros_like", "(", "cx", "[", "0", ",", "0", "]", ")", ")", ")", "\n", "out_xmaski", "=", "tf", ".", "cond", "(", "j", "<", "group_len", ",", "lambda", ":", "out_xmaski", ".", "write", "(", "j", ",", "x_mask", "[", "start_batch", "+", "j", ",", "0", "]", ")", ",", "lambda", ":", "out_xmaski", ".", "write", "(", "j", ",", "tf", ".", "zeros_like", "(", "x_mask", "[", "0", ",", "0", "]", ")", ")", ")", "\n", "\n", "return", "tf", ".", "add", "(", "j", ",", "1", ")", ",", "x_new", ",", "x", ",", "cx", ",", "x_mask", ",", "start_batch", ",", "out_x_newi", ",", "out_xi", ",", "out_cxi", ",", "out_xmaski", ",", "group_len", "\n", "\n", "", "with", "tf", ".", "control_dependencies", "(", "[", "tf", ".", "assert_equal", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "tf", ".", "reduce_sum", "(", "group", ")", ")", ",", "tf", ".", "assert_equal", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "x_mask", ")", "[", "0", "]", ")", "]", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "target_batch_size", ")", ":", "\n", "      ", "out_x_newi", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "int32", ",", "size", "=", "max_doc_num", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "out_xi", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "int32", ",", "size", "=", "max_doc_num", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "out_cxi", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "int32", ",", "size", "=", "max_doc_num", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "out_xmaski", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "bool", ",", "size", "=", "max_doc_num", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "\n", "j", ",", "x_new", ",", "x", ",", "cx", ",", "x_mask", ",", "start_batch", ",", "out_x_newi", ",", "out_xi", ",", "out_cxi", ",", "out_xmaski", ",", "group_len", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "j", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ",", "_5", ",", "_6", ",", "_7", ",", "_8", ",", "_9", ",", "_10", ":", "j", "<", "max_doc_num", ",", "\n", "body", "=", "outer_while_body", ",", "\n", "loop_vars", "=", "[", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "x_new", ",", "x", ",", "cx", ",", "x_mask", ",", "start_batch", ",", "out_x_newi", ",", "out_xi", ",", "out_cxi", ",", "out_xmaski", ",", "group", "[", "i", "]", "]", ")", "\n", "\n", "start_batch", "+=", "group", "[", "i", "]", "\n", "out_x_new", ".", "append", "(", "out_x_newi", ".", "stack", "(", ")", ")", "\n", "out_x", ".", "append", "(", "out_xi", ".", "stack", "(", ")", ")", "\n", "out_cx", ".", "append", "(", "out_cxi", ".", "stack", "(", ")", ")", "\n", "out_xmask", ".", "append", "(", "out_xmaski", ".", "stack", "(", ")", ")", "\n", "\n", "", "", "out_x_new", "=", "tf", ".", "stack", "(", "out_x_new", ",", "axis", "=", "0", ")", "\n", "out_x", "=", "tf", ".", "stack", "(", "out_x", ",", "axis", "=", "0", ")", "\n", "out_cx", "=", "tf", ".", "stack", "(", "out_cx", ",", "axis", "=", "0", ")", "\n", "out_xmask", "=", "tf", ".", "stack", "(", "out_xmask", ",", "axis", "=", "0", ")", "\n", "\n", "return", "out_x_new", ",", "out_x", ",", "out_cx", ",", "out_xmask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.combine_docs": [[60, 78], ["tensorflow.maximum", "range", "tensorflow.stack", "tensorflow.slice", "range", "tensorflow.stack", "tf.stack.append", "tensorflow.slice", "tensorflow.zeros", "tensorflow.concat", "tf.stack.append"], "function", ["None"], ["", "def", "combine_docs", "(", "doc_1", ",", "doc_2", ",", "doc_1_len", ",", "doc_2_len", ",", "batch_size", ",", "wd", ",", "emb_dim", ")", ":", "\n", "  ", "combined_docs", "=", "[", "]", "\n", "max_len", "=", "tf", ".", "maximum", "(", "doc_1_len", "+", "doc_2_len", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "    ", "combined_doc", "=", "[", "]", "\n", "#combined_docs.append(combined_doc)", "\n", "doc_1_slice", "=", "tf", ".", "slice", "(", "doc_1", "[", "i", "]", ",", "[", "0", ",", "0", "]", ",", "[", "doc_1_len", "[", "i", "]", ",", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "wd", ")", ":", "\n", "      ", "doc_2_slice", "=", "tf", ".", "slice", "(", "doc_2", "[", "i", ",", "j", "]", ",", "[", "0", ",", "0", "]", ",", "[", "doc_2_len", "[", "i", "]", "[", "j", "]", ",", "-", "1", "]", ")", "\n", "zero_pad", "=", "tf", ".", "zeros", "(", "[", "max_len", "-", "doc_1_len", "[", "i", "]", "-", "doc_2_len", "[", "i", "]", "[", "j", "]", ",", "emb_dim", "]", ")", "\n", "new_doc", "=", "tf", ".", "concat", "(", "[", "doc_1_slice", ",", "doc_2_slice", ",", "zero_pad", "]", ",", "axis", "=", "0", ")", "\n", "combined_doc", ".", "append", "(", "new_doc", ")", "\n", "\n", "", "combined_doc", "=", "tf", ".", "stack", "(", "combined_doc", ",", "axis", "=", "0", ")", "\n", "combined_docs", ".", "append", "(", "combined_doc", ")", "\n", "\n", "", "combined_docs", "=", "tf", ".", "stack", "(", "combined_docs", ",", "axis", "=", "0", ")", "\n", "return", "combined_docs", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.select_topn_doc_idx": [[80, 102], ["tensorflow.reduce_sum", "tensorflow.python.ops.tensor_array_ops.TensorArray", "range", "first_n_doc_idx.write.stack", "tensorflow.cond", "first_n_doc_idx.write.write", "tensorflow.python.ops.control_flow_ops.while_loop", "tensorflow.minimum", "range", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.constant", "tensorflow.minimum"], "function", ["None"], ["", "def", "select_topn_doc_idx", "(", "batch_size", ",", "topn", ",", "x_group", ")", ":", "\n", "  ", "size", "=", "tf", ".", "reduce_sum", "(", "[", "tf", ".", "minimum", "(", "x_group", "[", "i", "]", ",", "topn", ")", "for", "i", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "first_n_doc_idx", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "int32", ",", "size", "=", "size", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "\n", "def", "while_body", "(", "j", ",", "i", ",", "first_n_doc_idx", ",", "x_group", ",", "counter", ")", ":", "\n", "    ", "to_append", "=", "tf", ".", "cond", "(", "tf", ".", "reduce_sum", "(", "x_group", ")", ">", "tf", ".", "reduce_sum", "(", "x_group", "[", ":", "i", "]", ")", "+", "j", ",", "lambda", ":", "tf", ".", "reduce_sum", "(", "x_group", "[", ":", "i", "]", ")", "+", "j", ",", "lambda", ":", "tf", ".", "reduce_sum", "(", "x_group", "[", ":", "i", "]", ")", ")", "\n", "first_n_doc_idx", "=", "first_n_doc_idx", ".", "write", "(", "counter", ",", "to_append", ")", "\n", "return", "j", "+", "1", ",", "i", ",", "first_n_doc_idx", ",", "x_group", ",", "counter", "+", "1", "\n", "\n", "", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# if i == 0:", "\n", "#   for j in range(topn):", "\n", "#     first_n_doc_idx = first_n_doc_idx.write(j)", "\n", "# else:", "\n", "    ", "j", ",", "_", ",", "first_n_doc_idx", ",", "_", ",", "counter", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "j", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ":", "j", "<", "tf", ".", "minimum", "(", "x_group", "[", "i", "]", ",", "topn", ")", ",", "\n", "body", "=", "while_body", ",", "\n", "loop_vars", "=", "[", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "i", ",", "first_n_doc_idx", ",", "x_group", ",", "counter", "]", ")", "\n", "\n", "", "first_n_doc_idx", "=", "first_n_doc_idx", ".", "stack", "(", ")", "\n", "return", "first_n_doc_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.span_to_avg_emb": [[104, 137], ["tensorflow.unstack", "tensorflow.unstack", "range", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.cond", "avg_emb_ta.write.write", "mask_ta.write.write", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.control_flow_ops.while_loop", "tf.expand_dims.append", "tf.expand_dims.append", "tensorflow.stack", "tensorflow.stack", "tensor_array_ops.TensorArray.stack", "tensor_array_ops.TensorArray.stack", "tensorflow.reduce_mean", "tensorflow.zeros_like", "tensorflow.shape", "tensorflow.shape", "tensorflow.constant", "tensorflow.shape"], "function", ["None"], ["", "def", "span_to_avg_emb", "(", "original_span", ",", "original_context", ",", "batch_size", ",", "model", ")", ":", "\n", "  ", "spans", "=", "tf", ".", "unstack", "(", "tf", ".", "squeeze", "(", "original_span", ",", "axis", "=", "1", ")", ")", "\n", "contexts", "=", "tf", ".", "unstack", "(", "tf", ".", "squeeze", "(", "original_context", ",", "axis", "=", "1", ")", ")", "\n", "\n", "def", "while_body", "(", "j", ",", "avg_emb_ta", ",", "mask_ta", ",", "span", ",", "context", ")", ":", "\n", "    ", "avg_emb", "=", "tf", ".", "cond", "(", "span", "[", "j", ",", "1", "]", "-", "span", "[", "j", ",", "0", "]", ">", "0", ",", "lambda", ":", "tf", ".", "reduce_mean", "(", "context", "[", "span", "[", "j", ",", "0", "]", ":", "span", "[", "j", ",", "1", "]", ",", ":", "]", ",", "axis", "=", "-", "2", ")", ",", "lambda", ":", "tf", ".", "zeros_like", "(", "context", "[", "span", "[", "j", ",", "0", "]", "]", ")", ")", "\n", "\n", "avg_emb_ta", "=", "avg_emb_ta", ".", "write", "(", "j", ",", "avg_emb", ")", "\n", "mask_ta", "=", "mask_ta", ".", "write", "(", "j", ",", "(", "span", "[", "j", ",", "1", "]", "-", "span", "[", "j", ",", "0", "]", ">", "0", ")", ")", "\n", "return", "j", "+", "1", ",", "avg_emb_ta", ",", "mask_ta", ",", "span", ",", "context", "\n", "\n", "", "candidate_emb", "=", "[", "]", "\n", "mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "    ", "span", "=", "spans", "[", "i", "]", "\n", "context", "=", "contexts", "[", "i", "]", "\n", "\n", "avg_emb_i", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "tf", ".", "shape", "(", "span", ")", "[", "0", "]", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "mask_i", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "bool", ",", "size", "=", "tf", ".", "shape", "(", "span", ")", "[", "0", "]", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "\n", "j", ",", "avg_emb_i", ",", "mask_i", ",", "span", ",", "context", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "j", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ":", "j", "<", "tf", ".", "shape", "(", "span", ")", "[", "0", "]", ",", "body", "=", "while_body", ",", "loop_vars", "=", "[", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "avg_emb_i", ",", "mask_i", ",", "span", ",", "context", "]", ")", "\n", "\n", "candidate_emb", ".", "append", "(", "avg_emb_i", ".", "stack", "(", ")", ")", "\n", "mask", ".", "append", "(", "mask_i", ".", "stack", "(", ")", ")", "\n", "\n", "", "candidate_emb", "=", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "candidate_emb", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "mask", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "#model.cand_mask = mask", "\n", "#model.candidate_emb = candidate_emb", "\n", "return", "candidate_emb", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.reconstruct_batchesV2": [[139, 193], ["tensorflow.reduce_max", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.control_dependencies", "range", "tensorflow.add", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.control_flow_ops.while_loop", "tf.stack.append", "tf.stack.append", "tf.stack.append", "tf.stack.append", "tf.stack.append", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensorflow.assert_equal", "tensorflow.assert_equal", "tensor_array_ops.TensorArray.stack", "tensor_array_ops.TensorArray.stack", "tensor_array_ops.TensorArray.stack", "tensor_array_ops.TensorArray.stack", "tensor_array_ops.TensorArray.stack", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.zeros_like", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.constant"], "function", ["None"], ["", "def", "reconstruct_batchesV2", "(", "p0", ",", "p_st", ",", "p_mask", ",", "group", ",", "sents_len", ",", "target_batch_size", ",", "max_para_size", ",", "model", ")", ":", "\n", "  ", "\"\"\"\n  For hierarchical mac cell.\n  \"\"\"", "\n", "out_p0", "=", "[", "]", "\n", "out_pst", "=", "[", "]", "\n", "out_pmask", "=", "[", "]", "\n", "out_pdocmask", "=", "[", "]", "\n", "out_sents_len", "=", "[", "]", "\n", "start_batch", "=", "0", "\n", "#emb_dim = 160", "\n", "#max_doc_num = tf.shape(p0)[1]", "\n", "max_doc_num", "=", "tf", ".", "reduce_max", "(", "group", ")", "\n", "\n", "def", "outer_while_body", "(", "j", ",", "p0", ",", "p_st", ",", "p_mask", ",", "sents_len", ",", "start_batch", ",", "out_p0i", ",", "out_psti", ",", "out_pmaski", ",", "out_pdocmaski", ",", "out_sents_leni", ",", "group_len", ")", ":", "\n", "# with tf.control_dependencies([tf.assert_equal(tf.shape(p0)[0], tf.shape(p_mask)[0])]):", "\n", "    ", "out_p0i", "=", "tf", ".", "cond", "(", "j", "<", "group_len", ",", "lambda", ":", "out_p0i", ".", "write", "(", "j", ",", "p0", "[", "start_batch", "+", "j", ",", "0", "]", ")", ",", "lambda", ":", "out_p0i", ".", "write", "(", "j", ",", "tf", ".", "zeros_like", "(", "p0", "[", "0", ",", "0", "]", ")", ")", ")", "\n", "out_psti", "=", "tf", ".", "cond", "(", "j", "<", "group_len", ",", "lambda", ":", "out_psti", ".", "write", "(", "j", ",", "p_st", "[", "start_batch", "+", "j", "]", ")", ",", "lambda", ":", "out_psti", ".", "write", "(", "j", ",", "tf", ".", "zeros_like", "(", "p_st", "[", "0", "]", ")", ")", ")", "\n", "out_pmaski", "=", "tf", ".", "cond", "(", "j", "<", "group_len", ",", "lambda", ":", "out_pmaski", ".", "write", "(", "j", ",", "p_mask", "[", "start_batch", "+", "j", ",", "0", "]", ")", ",", "lambda", ":", "out_pmaski", ".", "write", "(", "j", ",", "tf", ".", "zeros_like", "(", "p_mask", "[", "0", ",", "0", "]", ")", ")", ")", "\n", "out_pdocmaski", "=", "tf", ".", "cond", "(", "j", "<", "group_len", ",", "lambda", ":", "out_pdocmaski", ".", "write", "(", "j", ",", "True", ")", ",", "lambda", ":", "out_pdocmaski", ".", "write", "(", "j", ",", "False", ")", ")", "\n", "out_sents_leni", "=", "tf", ".", "cond", "(", "j", "<", "group_len", ",", "lambda", ":", "out_sents_leni", ".", "write", "(", "j", ",", "sents_len", "[", "start_batch", "+", "j", ",", "0", "]", ")", ",", "lambda", ":", "out_sents_leni", ".", "write", "(", "j", ",", "tf", ".", "zeros_like", "(", "sents_len", "[", "0", ",", "0", "]", ")", ")", ")", "\n", "# k, p0, j, start_batch, out_i, mask_i, group = control_flow_ops.while_loop(", "\n", "#   cond=lambda k, _1, _2, _3, _4, _5: k < x_len[start_batch+j, 0],", "\n", "#   body=inner_while_body,", "\n", "#   loop_vars=[tf.constant(0, dtype=tf.int32), p0, j, start_batch, \\", "\n", "#   out_i, mask_i, group])", "\n", "return", "tf", ".", "add", "(", "j", ",", "1", ")", ",", "p0", ",", "p_st", ",", "p_mask", ",", "sents_len", ",", "start_batch", ",", "out_p0i", ",", "out_psti", ",", "out_pmaski", ",", "out_pdocmaski", ",", "out_sents_leni", ",", "group_len", "\n", "\n", "", "with", "tf", ".", "control_dependencies", "(", "[", "tf", ".", "assert_equal", "(", "tf", ".", "shape", "(", "p0", ")", "[", "0", "]", ",", "tf", ".", "reduce_sum", "(", "group", ")", ")", ",", "tf", ".", "assert_equal", "(", "tf", ".", "shape", "(", "p0", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "p_mask", ")", "[", "0", "]", ")", "]", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "target_batch_size", ")", ":", "\n", "      ", "out_p0i", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "max_doc_num", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "out_psti", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "max_doc_num", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "out_pmaski", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "bool", ",", "size", "=", "max_doc_num", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "out_pdocmaski", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "bool", ",", "size", "=", "max_doc_num", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "out_sents_leni", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "int32", ",", "size", "=", "max_doc_num", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "j", ",", "p0", ",", "p_st", ",", "p_mask", ",", "sents_len", ",", "start_batch", ",", "out_p0i", ",", "out_psti", ",", "out_pmaski", ",", "out_pdocmaski", ",", "out_sents_leni", ",", "group_len", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "j", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ",", "_5", ",", "_6", ",", "_7", ",", "_8", ",", "_9", ",", "_10", ",", "_11", ":", "j", "<", "max_doc_num", ",", "\n", "body", "=", "outer_while_body", ",", "\n", "loop_vars", "=", "[", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "p0", ",", "p_st", ",", "p_mask", ",", "sents_len", ",", "start_batch", ",", "out_p0i", ",", "out_psti", ",", "out_pmaski", ",", "out_pdocmaski", ",", "out_sents_leni", ",", "group", "[", "i", "]", "]", ")", "\n", "\n", "start_batch", "+=", "group", "[", "i", "]", "\n", "out_p0", ".", "append", "(", "out_p0i", ".", "stack", "(", ")", ")", "\n", "out_pst", ".", "append", "(", "out_psti", ".", "stack", "(", ")", ")", "\n", "out_pmask", ".", "append", "(", "out_pmaski", ".", "stack", "(", ")", ")", "\n", "out_pdocmask", ".", "append", "(", "out_pdocmaski", ".", "stack", "(", ")", ")", "\n", "out_sents_len", ".", "append", "(", "out_sents_leni", ".", "stack", "(", ")", ")", "\n", "\n", "", "", "out_p0", "=", "tf", ".", "stack", "(", "out_p0", ",", "axis", "=", "0", ")", "\n", "out_pst", "=", "tf", ".", "stack", "(", "out_pst", ",", "axis", "=", "0", ")", "\n", "out_pmask", "=", "tf", ".", "stack", "(", "out_pmask", ",", "axis", "=", "0", ")", "\n", "out_pdocmask", "=", "tf", ".", "stack", "(", "out_pdocmask", ",", "axis", "=", "0", ")", "\n", "out_sents_len", "=", "tf", ".", "stack", "(", "out_sents_len", ",", "axis", "=", "0", ")", "\n", "\n", "return", "out_p0", ",", "out_pst", ",", "out_pmask", ",", "out_pdocmask", ",", "out_sents_len", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.reconstruct_batches": [[195, 251], ["range", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.shape", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensorflow.python.ops.control_flow_ops.while_loop", "tensor_array_ops.TensorArray.write", "tensor_array_ops.TensorArray.write", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.control_flow_ops.while_loop", "tensorflow.python.ops.control_flow_ops.while_loop", "tf.expand_dims.append", "tf.expand_dims.append", "tf.expand_dims.append", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.zeros", "tensor_array_ops.TensorArray.stack", "tensor_array_ops.TensorArray.stack", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant"], "function", ["None"], ["", "def", "reconstruct_batches", "(", "p0", ",", "x_len", ",", "group", ",", "target_batch_size", ",", "max_para_size", ",", "model", ",", "emb_dim", "=", "40", ")", ":", "\n", "  ", "out", "=", "[", "]", "\n", "mask", "=", "[", "]", "\n", "start_batch", "=", "0", "\n", "M", "=", "tf", ".", "shape", "(", "p0", ")", "[", "1", "]", "\n", "#emb_dim = 160", "\n", "#d = tf.shape(p0)[3]", "\n", "\n", "def", "inner_while_body", "(", "k", ",", "tracker", ",", "p0", ",", "j", ",", "start_batch", ",", "out_i", ",", "mask_i", ")", ":", "\n", "    ", "out_i", "=", "out_i", ".", "write", "(", "tracker", ",", "p0", "[", "start_batch", "+", "j", ",", "0", ",", "k", "]", ")", "\n", "mask_i", "=", "mask_i", ".", "write", "(", "tracker", ",", "True", ")", "\n", "return", "k", "+", "1", ",", "tracker", "+", "1", ",", "p0", ",", "j", ",", "start_batch", ",", "out_i", ",", "mask_i", "\n", "\n", "", "def", "outer_while_body", "(", "j", ",", "len_tracker", ",", "p0", ",", "x_len", ",", "start_batch", ",", "out_i", ",", "mask_i", ")", ":", "\n", "    ", "k", ",", "len_tracker", ",", "p0", ",", "j", ",", "start_batch", ",", "out_i", ",", "mask_i", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "k", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ",", "_5", ",", "_6", ":", "k", "<", "x_len", "[", "start_batch", "+", "j", ",", "0", "]", ",", "\n", "body", "=", "inner_while_body", ",", "\n", "loop_vars", "=", "[", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "len_tracker", ",", "p0", ",", "j", ",", "start_batch", ",", "out_i", ",", "mask_i", "]", ")", "\n", "return", "j", "+", "1", ",", "len_tracker", ",", "p0", ",", "x_len", ",", "start_batch", ",", "out_i", ",", "mask_i", "\n", "\n", "", "def", "outer_while_body_2", "(", "j", ",", "p0", ",", "out_i", ",", "mask_i", ",", "emb_dim", ")", ":", "\n", "    ", "out_i", "=", "out_i", ".", "write", "(", "j", ",", "tf", ".", "zeros", "(", "shape", "=", "[", "emb_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "mask_i", "=", "mask_i", ".", "write", "(", "j", ",", "False", ")", "\n", "return", "j", "+", "1", ",", "p0", ",", "out_i", ",", "mask_i", ",", "emb_dim", "\n", "\n", "", "sent_len", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "target_batch_size", ")", ":", "\n", "    ", "out_i", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "max_para_size", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "mask_i", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "bool", ",", "size", "=", "max_para_size", ",", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "\n", "j", ",", "len_i", ",", "p0", ",", "x_len", ",", "start_batch", ",", "out_i", ",", "mask_i", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "j", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ",", "_5", ",", "_6", ":", "j", "<", "group", "[", "i", "]", ",", "\n", "body", "=", "outer_while_body", ",", "\n", "loop_vars", "=", "[", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "p0", ",", "x_len", ",", "start_batch", ",", "out_i", ",", "mask_i", "]", ")", "\n", "\n", "j", ",", "p0", ",", "out_i", ",", "mask_i", ",", "emb_dim", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "j", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ":", "j", "<", "max_para_size", ",", "\n", "body", "=", "outer_while_body_2", ",", "\n", "loop_vars", "=", "[", "len_i", ",", "p0", ",", "out_i", ",", "mask_i", ",", "emb_dim", "]", ")", "\n", "\n", "start_batch", "+=", "group", "[", "i", "]", "\n", "out", ".", "append", "(", "out_i", ".", "stack", "(", ")", ")", "\n", "mask", ".", "append", "(", "mask_i", ".", "stack", "(", ")", ")", "\n", "sent_len", ".", "append", "(", "len_i", ")", "\n", "#assert len(out) == target_batch_size", "\n", "\n", "", "sent_len", "=", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "sent_len", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "model", ".", "recon_x_len", "=", "sent_len", "\n", "out", "=", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "out", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "mask", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "#assert out.get_shape()[0] == target_batch_size, (target_batch_size)", "\n", "#out.set_shape([target_batch_size, 1, None, emb_dim])", "\n", "#mask.set_shape([target_batch_size, 1, max_para_size])", "\n", "return", "out", ",", "sent_len", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear": [[252, 273], ["my.tensorflow.reconstruct", "ValueError", "tensorflow.python.util.nest.is_sequence", "my.tensorflow.flatten", "tensorflow.variable_scope", "tensorflow.contrib.rnn.python.ops.core_rnn_cell._linear", "tensorflow.squeeze", "my.tensorflow.add_wd", "tensorflow.python.util.nest.is_sequence", "tensorflow.cond", "tensorflow.constant_initializer", "tensorflow.nn.dropout", "len", "args[].get_shape().as_list", "args[].get_shape"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.reconstruct", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.add_wd", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.dropout"], ["", "def", "linear", "(", "args", ",", "output_size", ",", "bias", ",", "bias_start", "=", "0.0", ",", "scope", "=", "None", ",", "squeeze", "=", "False", ",", "wd", "=", "0.0", ",", "input_keep_prob", "=", "1.0", ",", "\n", "is_train", "=", "None", ")", ":", "\n", "  ", "if", "args", "is", "None", "or", "(", "nest", ".", "is_sequence", "(", "args", ")", "and", "not", "args", ")", ":", "\n", "    ", "raise", "ValueError", "(", "\"`args` must be specified\"", ")", "\n", "", "if", "not", "nest", ".", "is_sequence", "(", "args", ")", ":", "\n", "    ", "args", "=", "[", "args", "]", "\n", "\n", "", "flat_args", "=", "[", "flatten", "(", "arg", ",", "1", ")", "for", "arg", "in", "args", "]", "\n", "if", "input_keep_prob", "<", "1.0", ":", "\n", "    ", "assert", "is_train", "is", "not", "None", "\n", "flat_args", "=", "[", "tf", ".", "cond", "(", "is_train", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "arg", ",", "input_keep_prob", ")", ",", "lambda", ":", "arg", ")", "\n", "for", "arg", "in", "flat_args", "]", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", "or", "'Linear'", ")", ":", "\n", "    ", "flat_out", "=", "_linear", "(", "flat_args", ",", "output_size", ",", "bias", ",", "bias_initializer", "=", "tf", ".", "constant_initializer", "(", "bias_start", ")", ")", "\n", "", "out", "=", "reconstruct", "(", "flat_out", ",", "args", "[", "0", "]", ",", "1", ")", "\n", "if", "squeeze", ":", "\n", "    ", "out", "=", "tf", ".", "squeeze", "(", "out", ",", "[", "len", "(", "args", "[", "0", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "-", "1", "]", ")", "\n", "", "if", "wd", ":", "\n", "    ", "add_wd", "(", "wd", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.dropout": [[275, 282], ["tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.cond"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.dropout"], ["", "def", "dropout", "(", "x", ",", "keep_prob", ",", "is_train", ",", "noise_shape", "=", "None", ",", "seed", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "name_scope", "(", "name", "or", "\"dropout\"", ")", ":", "\n", "    ", "if", "keep_prob", "<", "1.0", ":", "\n", "      ", "d", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "keep_prob", ",", "noise_shape", "=", "noise_shape", ",", "seed", "=", "seed", ")", "\n", "out", "=", "tf", ".", "cond", "(", "is_train", ",", "lambda", ":", "d", ",", "lambda", ":", "x", ")", "\n", "return", "out", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax": [[284, 293], ["tensorflow.name_scope", "my.tensorflow.flatten", "tensorflow.nn.softmax", "my.tensorflow.reconstruct", "my.tensorflow.exp_mask"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.reconstruct", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.exp_mask"], ["", "", "def", "softmax", "(", "logits", ",", "mask", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "name_scope", "(", "scope", "or", "\"Softmax\"", ")", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "      ", "logits", "=", "exp_mask", "(", "logits", ",", "mask", ")", "\n", "", "flat_logits", "=", "flatten", "(", "logits", ",", "1", ")", "\n", "flat_out", "=", "tf", ".", "nn", ".", "softmax", "(", "flat_logits", ")", "\n", "out", "=", "reconstruct", "(", "flat_out", ",", "logits", ",", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softsel": [[295, 309], ["tensorflow.name_scope", "nn.softmax", "len", "tensorflow.reduce_sum", "target.get_shape().as_list", "tensorflow.expand_dims", "target.get_shape"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.softmax"], ["", "", "def", "softsel", "(", "target", ",", "logits", ",", "mask", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"\n\n  :param target: [ ..., J, d] dtype=float\n  :param logits: [ ..., J], dtype=float\n  :param mask: [ ..., J], dtype=bool\n  :param scope:\n  :return: [..., d], dtype=float\n  \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "scope", "or", "\"Softsel\"", ")", ":", "\n", "    ", "a", "=", "softmax", "(", "logits", ",", "mask", "=", "mask", ")", "\n", "target_rank", "=", "len", "(", "target", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "out", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "expand_dims", "(", "a", ",", "-", "1", ")", "*", "target", ",", "target_rank", "-", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.double_linear_logits": [[311, 320], ["tensorflow.variable_scope", "tensorflow.tanh", "nn.linear", "nn.linear", "my.tensorflow.exp_mask"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.exp_mask"], ["", "", "def", "double_linear_logits", "(", "args", ",", "size", ",", "bias", ",", "bias_start", "=", "0.0", ",", "scope", "=", "None", ",", "mask", "=", "None", ",", "wd", "=", "0.0", ",", "input_keep_prob", "=", "1.0", ",", "is_train", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"Double_Linear_Logits\"", ")", ":", "\n", "    ", "first", "=", "tf", ".", "tanh", "(", "linear", "(", "args", ",", "size", ",", "bias", ",", "bias_start", "=", "bias_start", ",", "scope", "=", "'first'", ",", "\n", "wd", "=", "wd", ",", "input_keep_prob", "=", "input_keep_prob", ",", "is_train", "=", "is_train", ")", ")", "\n", "second", "=", "linear", "(", "first", ",", "1", ",", "bias", ",", "bias_start", "=", "bias_start", ",", "squeeze", "=", "True", ",", "scope", "=", "'second'", ",", "\n", "wd", "=", "wd", ",", "input_keep_prob", "=", "input_keep_prob", ",", "is_train", "=", "is_train", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "      ", "second", "=", "exp_mask", "(", "second", ",", "mask", ")", "\n", "", "return", "second", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear_logits": [[322, 329], ["tensorflow.variable_scope", "nn.linear", "my.tensorflow.exp_mask"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.exp_mask"], ["", "", "def", "linear_logits", "(", "args", ",", "bias", ",", "bias_start", "=", "0.0", ",", "scope", "=", "None", ",", "mask", "=", "None", ",", "wd", "=", "0.0", ",", "input_keep_prob", "=", "1.0", ",", "is_train", "=", "None", ",", "reuse", "=", "False", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"Linear_Logits\"", ",", "reuse", "=", "reuse", ")", ":", "\n", "    ", "logits", "=", "linear", "(", "args", ",", "1", ",", "bias", ",", "bias_start", "=", "bias_start", ",", "squeeze", "=", "True", ",", "scope", "=", "'first'", ",", "\n", "wd", "=", "wd", ",", "input_keep_prob", "=", "input_keep_prob", ",", "is_train", "=", "is_train", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "      ", "logits", "=", "exp_mask", "(", "logits", ",", "mask", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.sum_logits": [[331, 342], ["tensorflow.name_scope", "len", "sum", "ValueError", "tensorflow.python.util.nest.is_sequence", "args[].get_shape", "my.tensorflow.exp_mask", "tensorflow.python.util.nest.is_sequence", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.exp_mask"], ["", "", "def", "sum_logits", "(", "args", ",", "mask", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "name_scope", "(", "name", "or", "\"sum_logits\"", ")", ":", "\n", "    ", "if", "args", "is", "None", "or", "(", "nest", ".", "is_sequence", "(", "args", ")", "and", "not", "args", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\"`args` must be specified\"", ")", "\n", "", "if", "not", "nest", ".", "is_sequence", "(", "args", ")", ":", "\n", "      ", "args", "=", "[", "args", "]", "\n", "", "rank", "=", "len", "(", "args", "[", "0", "]", ".", "get_shape", "(", ")", ")", "\n", "logits", "=", "sum", "(", "tf", ".", "reduce_sum", "(", "arg", ",", "rank", "-", "1", ")", "for", "arg", "in", "args", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "      ", "logits", "=", "exp_mask", "(", "logits", ",", "mask", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.get_logits": [[344, 377], ["nn.sum_logits", "nn.linear_logits", "nn.double_linear_logits", "nn.sum_logits", "len", "nn.linear_logits", "len", "nn.linear", "nn.sum_logits", "len", "args[].get_shape", "nn.linear_logits", "Exception", "len"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.sum_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.double_linear_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.sum_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.sum_logits", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear_logits"], ["", "", "def", "get_logits", "(", "args", ",", "size", ",", "bias", ",", "bias_start", "=", "0.0", ",", "scope", "=", "None", ",", "mask", "=", "None", ",", "wd", "=", "0.0", ",", "input_keep_prob", "=", "1.0", ",", "is_train", "=", "None", ",", "func", "=", "None", ",", "reuse", "=", "False", ")", ":", "\n", "  ", "if", "func", "is", "None", ":", "\n", "    ", "func", "=", "\"sum\"", "\n", "", "if", "func", "==", "'sum'", ":", "\n", "    ", "return", "sum_logits", "(", "args", ",", "mask", "=", "mask", ",", "name", "=", "scope", ")", "\n", "", "elif", "func", "==", "'linear'", ":", "\n", "    ", "return", "linear_logits", "(", "args", ",", "bias", ",", "bias_start", "=", "bias_start", ",", "scope", "=", "scope", ",", "mask", "=", "mask", ",", "wd", "=", "wd", ",", "input_keep_prob", "=", "input_keep_prob", ",", "\n", "is_train", "=", "is_train", ",", "reuse", "=", "reuse", ")", "\n", "", "elif", "func", "==", "'double'", ":", "\n", "    ", "return", "double_linear_logits", "(", "args", ",", "size", ",", "bias", ",", "bias_start", "=", "bias_start", ",", "scope", "=", "scope", ",", "mask", "=", "mask", ",", "wd", "=", "wd", ",", "input_keep_prob", "=", "input_keep_prob", ",", "\n", "is_train", "=", "is_train", ")", "\n", "", "elif", "func", "==", "'dot'", ":", "\n", "    ", "assert", "len", "(", "args", ")", "==", "2", "\n", "arg", "=", "args", "[", "0", "]", "*", "args", "[", "1", "]", "\n", "return", "sum_logits", "(", "[", "arg", "]", ",", "mask", "=", "mask", ",", "name", "=", "scope", ")", "\n", "", "elif", "func", "==", "'mul_linear'", ":", "\n", "    ", "assert", "len", "(", "args", ")", "==", "2", "\n", "arg", "=", "args", "[", "0", "]", "*", "args", "[", "1", "]", "\n", "return", "linear_logits", "(", "[", "arg", "]", ",", "bias", ",", "bias_start", "=", "bias_start", ",", "scope", "=", "scope", ",", "mask", "=", "mask", ",", "wd", "=", "wd", ",", "input_keep_prob", "=", "input_keep_prob", ",", "\n", "is_train", "=", "is_train", ")", "\n", "", "elif", "func", "==", "'proj'", ":", "\n", "    ", "assert", "len", "(", "args", ")", "==", "2", "\n", "d", "=", "args", "[", "1", "]", ".", "get_shape", "(", ")", "[", "-", "1", "]", "\n", "proj", "=", "linear", "(", "[", "args", "[", "0", "]", "]", ",", "d", ",", "False", ",", "bias_start", "=", "bias_start", ",", "scope", "=", "scope", ",", "wd", "=", "wd", ",", "input_keep_prob", "=", "input_keep_prob", ",", "\n", "is_train", "=", "is_train", ")", "\n", "return", "sum_logits", "(", "[", "proj", "*", "args", "[", "1", "]", "]", ",", "mask", "=", "mask", ")", "\n", "", "elif", "func", "==", "'tri_linear'", ":", "\n", "    ", "assert", "len", "(", "args", ")", "==", "2", "\n", "new_arg", "=", "args", "[", "0", "]", "*", "args", "[", "1", "]", "\n", "return", "linear_logits", "(", "[", "args", "[", "0", "]", ",", "args", "[", "1", "]", ",", "new_arg", "]", ",", "bias", ",", "bias_start", "=", "bias_start", ",", "scope", "=", "scope", ",", "mask", "=", "mask", ",", "wd", "=", "wd", ",", "input_keep_prob", "=", "input_keep_prob", ",", "\n", "is_train", "=", "is_train", ")", "\n", "", "else", ":", "\n", "    ", "raise", "Exception", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.highway_layer": [[379, 388], ["tensorflow.variable_scope", "nn.linear", "tensorflow.nn.relu", "nn.linear", "tensorflow.nn.sigmoid", "arg.get_shape"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.linear"], ["", "", "def", "highway_layer", "(", "arg", ",", "bias", ",", "bias_start", "=", "0.0", ",", "scope", "=", "None", ",", "wd", "=", "0.0", ",", "input_keep_prob", "=", "1.0", ",", "is_train", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"highway_layer\"", ")", ":", "\n", "    ", "d", "=", "arg", ".", "get_shape", "(", ")", "[", "-", "1", "]", "\n", "trans", "=", "linear", "(", "[", "arg", "]", ",", "d", ",", "bias", ",", "bias_start", "=", "bias_start", ",", "scope", "=", "'trans'", ",", "wd", "=", "wd", ",", "input_keep_prob", "=", "input_keep_prob", ",", "is_train", "=", "is_train", ")", "\n", "trans", "=", "tf", ".", "nn", ".", "relu", "(", "trans", ")", "\n", "gate", "=", "linear", "(", "[", "arg", "]", ",", "d", ",", "bias", ",", "bias_start", "=", "bias_start", ",", "scope", "=", "'gate'", ",", "wd", "=", "wd", ",", "input_keep_prob", "=", "input_keep_prob", ",", "is_train", "=", "is_train", ")", "\n", "gate", "=", "tf", ".", "nn", ".", "sigmoid", "(", "gate", ")", "\n", "out", "=", "gate", "*", "trans", "+", "(", "1", "-", "gate", ")", "*", "arg", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.highway_network": [[390, 399], ["tensorflow.variable_scope", "range", "nn.highway_layer"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.highway_layer"], ["", "", "def", "highway_network", "(", "arg", ",", "num_layers", ",", "bias", ",", "bias_start", "=", "0.0", ",", "scope", "=", "None", ",", "wd", "=", "0.0", ",", "input_keep_prob", "=", "1.0", ",", "is_train", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"highway_network\"", ")", ":", "\n", "    ", "prev", "=", "arg", "\n", "cur", "=", "None", "\n", "for", "layer_idx", "in", "range", "(", "num_layers", ")", ":", "\n", "      ", "cur", "=", "highway_layer", "(", "prev", ",", "bias", ",", "bias_start", "=", "bias_start", ",", "scope", "=", "\"layer_{}\"", ".", "format", "(", "layer_idx", ")", ",", "wd", "=", "wd", ",", "\n", "input_keep_prob", "=", "input_keep_prob", ",", "is_train", "=", "is_train", ")", "\n", "prev", "=", "cur", "\n", "", "return", "cur", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.conv1d": [[401, 412], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reduce_max", "dropout.get_shape", "nn.dropout", "tensorflow.nn.conv2d", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.dropout"], ["", "", "def", "conv1d", "(", "in_", ",", "filter_size", ",", "height", ",", "padding", ",", "is_train", "=", "None", ",", "keep_prob", "=", "1.0", ",", "scope", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"conv1d\"", ")", ":", "\n", "    ", "num_channels", "=", "in_", ".", "get_shape", "(", ")", "[", "-", "1", "]", "\n", "filter_", "=", "tf", ".", "get_variable", "(", "\"filter\"", ",", "shape", "=", "[", "1", ",", "height", ",", "num_channels", ",", "filter_size", "]", ",", "dtype", "=", "'float'", ")", "\n", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "shape", "=", "[", "filter_size", "]", ",", "dtype", "=", "'float'", ")", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "if", "is_train", "is", "not", "None", "and", "keep_prob", "<", "1.0", ":", "\n", "      ", "in_", "=", "dropout", "(", "in_", ",", "keep_prob", ",", "is_train", ")", "\n", "", "xxc", "=", "tf", ".", "nn", ".", "conv2d", "(", "in_", ",", "filter_", ",", "strides", ",", "padding", ")", "+", "bias", "# [N*M, JX, W/filter_stride, d]", "\n", "out", "=", "tf", ".", "reduce_max", "(", "tf", ".", "nn", ".", "relu", "(", "xxc", ")", ",", "2", ")", "# [-1, JX, d]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.multi_conv1d": [[414, 425], ["tensorflow.variable_scope", "zip", "tensorflow.concat", "len", "len", "nn.conv1d", "outs.append"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.nn.conv1d"], ["", "", "def", "multi_conv1d", "(", "in_", ",", "filter_sizes", ",", "heights", ",", "padding", ",", "is_train", "=", "None", ",", "keep_prob", "=", "1.0", ",", "scope", "=", "None", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"multi_conv1d\"", ")", ":", "\n", "    ", "assert", "len", "(", "filter_sizes", ")", "==", "len", "(", "heights", ")", "\n", "outs", "=", "[", "]", "\n", "for", "filter_size", ",", "height", "in", "zip", "(", "filter_sizes", ",", "heights", ")", ":", "\n", "      ", "if", "filter_size", "==", "0", ":", "\n", "        ", "continue", "\n", "", "out", "=", "conv1d", "(", "in_", ",", "filter_size", ",", "height", ",", "padding", ",", "is_train", "=", "is_train", ",", "keep_prob", "=", "keep_prob", ",", "scope", "=", "\"conv1d_{}\"", ".", "format", "(", "height", ")", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "", "concat_out", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "outs", ")", "\n", "return", "concat_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.get_initializer": [[15, 18], ["None"], "function", ["None"], ["def", "get_initializer", "(", "matrix", ")", ":", "\n", "    ", "def", "_initializer", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ",", "**", "kwargs", ")", ":", "return", "matrix", "\n", "return", "_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.variable_on_cpu": [[20, 34], ["tensorflow.device", "tensorflow.get_variable"], "function", ["None"], ["", "def", "variable_on_cpu", "(", "name", ",", "shape", ",", "initializer", ")", ":", "\n", "    ", "\"\"\"Helper to create a Variable stored on CPU memory.\n\n    Args:\n      name: name of the variable\n      shape: list of ints\n      initializer: initializer for Variable\n\n    Returns:\n      Variable Tensor\n    \"\"\"", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "        ", "var", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "initializer", "=", "initializer", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.variable_with_weight_decay": [[36, 58], ["general.variable_on_cpu", "tensorflow.truncated_normal_initializer", "tensorflow.multiply", "tensorflow.add_to_collection", "tensorflow.nn.l2_loss"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.variable_on_cpu"], ["", "def", "variable_with_weight_decay", "(", "name", ",", "shape", ",", "stddev", ",", "wd", ")", ":", "\n", "    ", "\"\"\"Helper to create an initialized Variable with weight decay.\n\n    Note that the Variable is initialized with a truncated normal distribution.\n    A weight decay is added only if one is specified.\n\n    Args:\n      name: name of the variable\n      shape: list of ints\n      stddev: standard deviation of a truncated Gaussian\n      wd: add L2Loss weight decay multiplied by this float. If None, weight\n          decay is not added for this Variable.\n\n    Returns:\n      Variable Tensor\n    \"\"\"", "\n", "var", "=", "variable_on_cpu", "(", "name", ",", "shape", ",", "\n", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "if", "wd", ":", "\n", "        ", "weight_decay", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", ",", "wd", ",", "name", "=", "'weight_loss'", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "weight_decay", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.average_gradients": [[60, 97], ["zip", "tensorflow.concat", "tensorflow.reduce_mean", "average_grads.append", "tensorflow.expand_dims", "grads.append"], "function", ["None"], ["", "def", "average_gradients", "(", "tower_grads", ")", ":", "\n", "    ", "\"\"\"Calculate the average gradient for each shared variable across all towers.\n\n    Note that this function provides a synchronization point across all towers.\n\n    Args:\n      tower_grads: List of lists of (gradient, variable) tuples. The outer list\n        is over individual gradients. The inner list is over the gradient\n        calculation for each tower.\n    Returns:\n       List of pairs of (gradient, variable) where the gradient has been averaged\n       across all towers.\n    \"\"\"", "\n", "average_grads", "=", "[", "]", "\n", "for", "grad_and_vars", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "        ", "grads", "=", "[", "]", "\n", "for", "g", ",", "var", "in", "grad_and_vars", ":", "\n", "# Add 0 dimension to the gradients to represent the tower.", "\n", "            ", "assert", "g", "is", "not", "None", ",", "var", ".", "name", "\n", "expanded_g", "=", "tf", ".", "expand_dims", "(", "g", ",", "0", ")", "\n", "\n", "# Append on a 'tower' dimension which we will average over below.", "\n", "grads", ".", "append", "(", "expanded_g", ")", "\n", "\n", "# Average over the 'tower' dimension.", "\n", "", "grad", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "grads", ")", "\n", "grad", "=", "tf", ".", "reduce_mean", "(", "grad", ",", "0", ")", "\n", "\n", "# Keep in mind that the Variables are redundant because they are shared", "\n", "# across towers. So .. we will just return the first tower's pointer to", "\n", "# the Variable.", "\n", "v", "=", "grad_and_vars", "[", "0", "]", "[", "1", "]", "\n", "grad_and_var", "=", "(", "grad", ",", "v", ")", "\n", "average_grads", ".", "append", "(", "grad_and_var", ")", "\n", "", "return", "average_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.mask": [[99, 103], ["tensorflow.multiply", "tensorflow.cast"], "function", ["None"], ["", "def", "mask", "(", "val", ",", "mask", ",", "name", "=", "None", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "'mask'", "\n", "", "return", "tf", ".", "multiply", "(", "val", ",", "tf", ".", "cast", "(", "mask", ",", "'float'", ")", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.exp_mask": [[105, 120], ["tensorflow.add", "tensorflow.cast"], "function", ["None"], ["", "def", "exp_mask", "(", "val", ",", "mask", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Give very negative number to unmasked elements in val.\n    For example, [-3, -2, 10], [True, True, False] -> [-3, -2, -1e9].\n    Typically, this effectively masks in exponential space (e.g. softmax)\n    Args:\n        val: values to be masked\n        mask: masking boolean tensor, same shape as tensor\n        name: name for output tensor\n\n    Returns:\n        Same shape as val, where some elements are very small (exponentially zero)\n    \"\"\"", "\n", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "\"exp_mask\"", "\n", "", "return", "tf", ".", "add", "(", "val", ",", "(", "1", "-", "tf", ".", "cast", "(", "mask", ",", "'float'", ")", ")", "*", "VERY_NEGATIVE_NUMBER", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.flatten": [[122, 129], ["tensor.get_shape().as_list", "functools.reduce", "tensorflow.reshape", "len", "tensor.get_shape", "range", "range", "tensorflow.shape", "tensorflow.shape", "len"], "function", ["None"], ["", "def", "flatten", "(", "tensor", ",", "keep", ")", ":", "\n", "    ", "fixed_shape", "=", "tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "start", "=", "len", "(", "fixed_shape", ")", "-", "keep", "\n", "left", "=", "reduce", "(", "mul", ",", "[", "fixed_shape", "[", "i", "]", "or", "tf", ".", "shape", "(", "tensor", ")", "[", "i", "]", "for", "i", "in", "range", "(", "start", ")", "]", ")", "\n", "out_shape", "=", "[", "left", "]", "+", "[", "fixed_shape", "[", "i", "]", "or", "tf", ".", "shape", "(", "tensor", ")", "[", "i", "]", "for", "i", "in", "range", "(", "start", ",", "len", "(", "fixed_shape", ")", ")", "]", "\n", "flat", "=", "tf", ".", "reshape", "(", "tensor", ",", "out_shape", ")", "\n", "return", "flat", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.reconstruct": [[131, 143], ["ref.get_shape().as_list", "tensor.get_shape().as_list", "tensorflow.reshape", "len", "len", "ref.get_shape", "tensor.get_shape", "range", "range", "tensorflow.shape", "tensorflow.shape", "len"], "function", ["None"], ["", "def", "reconstruct", "(", "tensor", ",", "ref", ",", "keep", ")", ":", "\n", "    ", "ref_shape", "=", "ref", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "tensor_shape", "=", "tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "ref_stop", "=", "len", "(", "ref_shape", ")", "-", "keep", "\n", "tensor_start", "=", "len", "(", "tensor_shape", ")", "-", "keep", "\n", "pre_shape", "=", "[", "ref_shape", "[", "i", "]", "or", "tf", ".", "shape", "(", "ref", ")", "[", "i", "]", "for", "i", "in", "range", "(", "ref_stop", ")", "]", "\n", "keep_shape", "=", "[", "tensor_shape", "[", "i", "]", "or", "tf", ".", "shape", "(", "tensor", ")", "[", "i", "]", "for", "i", "in", "range", "(", "tensor_start", ",", "len", "(", "tensor_shape", ")", ")", "]", "\n", "# pre_shape = [tf.shape(ref)[i] for i in range(len(ref.get_shape().as_list()[:-keep]))]", "\n", "# keep_shape = tensor.get_shape().as_list()[-keep:]", "\n", "target_shape", "=", "pre_shape", "+", "keep_shape", "\n", "out", "=", "tf", ".", "reshape", "(", "tensor", ",", "target_shape", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.add_wd": [[145, 152], ["tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.get_variable_scope", "tensorflow.multiply", "tensorflow.add_to_collection", "tensorflow.nn.l2_loss"], "function", ["None"], ["", "def", "add_wd", "(", "wd", ",", "scope", "=", "None", ")", ":", "\n", "    ", "scope", "=", "scope", "or", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "scope", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"weight_decay\"", ")", ":", "\n", "        ", "for", "var", "in", "variables", ":", "\n", "            ", "weight_decay", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", ",", "wd", ",", "name", "=", "\"{}/wd\"", ".", "format", "(", "var", ".", "op", ".", "name", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.grouper": [[154, 166], ["itertools.zip_longest", "list", "isinstance", "list", "iter", "tuple", "itertools.zip_longest", "range"], "function", ["None"], ["", "", "", "def", "grouper", "(", "iterable", ",", "n", ",", "fillvalue", "=", "None", ",", "shorten", "=", "False", ",", "num_groups", "=", "None", ")", ":", "\n", "    ", "args", "=", "[", "iter", "(", "iterable", ")", "]", "*", "n", "\n", "out", "=", "zip_longest", "(", "*", "args", ",", "fillvalue", "=", "fillvalue", ")", "\n", "out", "=", "list", "(", "out", ")", "\n", "if", "num_groups", "is", "not", "None", ":", "\n", "        ", "default", "=", "(", "fillvalue", ",", ")", "*", "n", "\n", "assert", "isinstance", "(", "num_groups", ",", "int", ")", "\n", "out", "=", "list", "(", "each", "for", "each", ",", "_", "in", "zip_longest", "(", "out", ",", "range", "(", "num_groups", ")", ",", "fillvalue", "=", "default", ")", ")", "\n", "", "if", "shorten", ":", "\n", "        ", "assert", "fillvalue", "is", "None", "\n", "out", "=", "(", "tuple", "(", "e", "for", "e", "in", "each", "if", "e", "is", "not", "None", ")", "for", "each", "in", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.padded_reshape": [[167, 170], ["tensorflow.pad", "range", "len", "tensorflow.shape"], "function", ["None"], ["", "def", "padded_reshape", "(", "tensor", ",", "shape", ",", "mode", "=", "'CONSTANT'", ",", "name", "=", "None", ")", ":", "\n", "    ", "paddings", "=", "[", "[", "0", ",", "shape", "[", "i", "]", "-", "tf", ".", "shape", "(", "tensor", ")", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "shape", ")", ")", "]", "\n", "return", "tf", ".", "pad", "(", "tensor", ",", "paddings", ",", "mode", "=", "mode", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.general.get_num_params": [[172, 178], ["tensorflow.trainable_variables", "variable.get_shape", "functools.reduce"], "function", ["None"], ["", "def", "get_num_params", "(", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "variable", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "        ", "shape", "=", "variable", ".", "get_shape", "(", ")", "\n", "num_params", "+=", "reduce", "(", "mul", ",", "[", "dim", ".", "value", "for", "dim", "in", "shape", "]", ",", "1", ")", "\n", "", "return", "num_params", "\n", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers._CudnnRnn.__init__": [[43, 68], ["TruncatedNormal", "ValueError", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "kind", ",", "\n", "n_units", ",", "\n", "n_layers", "=", "1", ",", "\n", "# Its not obvious how to compute fan_in/fan_out for these models", "\n", "# so we recommend avoiding glorot initialization for now", "\n", "w_init", "=", "TruncatedNormal", "(", "stddev", "=", "0.05", ")", ",", "\n", "recurrent_init", "=", "None", ",", "\n", "bidirectional", "=", "True", ",", "\n", "learn_initial_states", "=", "False", ",", "\n", "lstm_bias", "=", "1", ",", "\n", "keep_recurrent", "=", "1", ")", ":", "\n", "        ", "if", "bidirectional", "is", "None", "or", "n_layers", "is", "None", "or", "n_units", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "if", "kind", "not", "in", "[", "\"GRU\"", ",", "\"LSTM\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "self", ".", "_kind", "=", "kind", "\n", "self", ".", "keep_recurrent", "=", "keep_recurrent", "\n", "self", ".", "lstm_bias", "=", "lstm_bias", "\n", "self", ".", "n_units", "=", "n_units", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "w_init", "=", "w_init", "\n", "self", ".", "recurrent_init", "=", "recurrent_init", "\n", "self", ".", "learn_initial_states", "=", "learn_initial_states", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers._CudnnRnn._apply_transposed": [[69, 145], ["cudnn_recurrent_layers.get_keras_initialization", "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM.params_size().eval", "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM.params_to_canonical", "tensorflow.get_variable", "cudnn_recurrent_layers.get_keras_initialization", "x.shape.as_list", "ValueError", "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnGRU", "tensorflow.zeros", "zip", "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM.canonical_to_params", "cudnn_rnn_ops.CudnnLSTM.set_shape", "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM.canonical_to_params", "tensorflow.cond", "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM.", "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM.", "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM", "ValueError", "tensorflow.contrib.cudnn_rnn.python.ops.cudnn_rnn_ops.CudnnLSTM.params_size", "NotImplementedError", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.get_variable", "tensorflow.tile", "tensorflow.zeros", "str", "tensorflow.constant", "tensorflow.zeros", "init_weights.append", "init_weights.append", "tensorflow.ones_like", "tensorflow.zeros_initializer", "tensorflow.expand_dims", "tensorflow.reshape", "get_keras_initialization.", "tensorflow.floor", "tensorflow.expand_dims", "r_init", "tensorflow.shape", "tensorflow.shape().eval", "len", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.random_uniform", "tensorflow.shape", "len"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.get_keras_initialization", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.get_keras_initialization"], ["", "def", "_apply_transposed", "(", "self", ",", "is_train", ",", "x", ")", ":", "\n", "        ", "w_init", "=", "get_keras_initialization", "(", "self", ".", "w_init", ")", "\n", "r_init", "=", "None", "if", "self", ".", "recurrent_init", "is", "None", "else", "get_keras_initialization", "(", "self", ".", "recurrent_init", ")", "\n", "x_size", "=", "x", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "if", "x_size", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Last dimension must be defined (have shape %s)\"", "%", "str", "(", "x", ".", "shape", ")", ")", "\n", "\n", "", "if", "self", ".", "_kind", "==", "\"GRU\"", ":", "\n", "            ", "cell", "=", "cudnn_rnn_ops", ".", "CudnnGRU", "(", "self", ".", "n_layers", ",", "self", ".", "n_units", ",", "x_size", ",", "input_mode", "=", "\"linear_input\"", ")", "\n", "", "elif", "self", ".", "_kind", "==", "\"LSTM\"", ":", "\n", "            ", "cell", "=", "cudnn_rnn_ops", ".", "CudnnLSTM", "(", "self", ".", "n_layers", ",", "self", ".", "n_units", ",", "x_size", ",", "input_mode", "=", "\"linear_input\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "n_params", "=", "cell", ".", "params_size", "(", ")", ".", "eval", "(", ")", "\n", "weights", ",", "biases", "=", "cell", ".", "params_to_canonical", "(", "tf", ".", "zeros", "(", "[", "n_params", "]", ")", ")", "\n", "\n", "def", "init", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ")", ":", "\n", "# This a bit hacky, since the api for these models is akward. We have to compute the shape of", "\n", "# the weights / biases by calling `cell.params_to_canonical` with a unused tensor, and then", "\n", "# use .eval() to actually get the shape. Then we can apply the user-requested initialzers", "\n", "            ", "if", "self", ".", "_kind", "==", "\"LSTM\"", ":", "\n", "                ", "is_recurrent", "=", "[", "False", ",", "False", ",", "False", ",", "False", ",", "True", ",", "True", ",", "True", ",", "True", "]", "\n", "is_forget_bias", "=", "[", "False", ",", "True", ",", "False", ",", "False", ",", "False", ",", "True", ",", "False", ",", "False", "]", "\n", "", "else", ":", "\n", "                ", "is_recurrent", "=", "[", "False", ",", "False", ",", "False", ",", "True", ",", "True", ",", "True", "]", "\n", "is_forget_bias", "=", "[", "False", "]", "*", "6", "\n", "\n", "", "init_biases", "=", "[", "tf", ".", "constant", "(", "self", ".", "lstm_bias", "/", "2.0", ",", "tf", ".", "float32", ",", "(", "self", ".", "n_units", ",", ")", ")", "if", "z", "else", "tf", ".", "zeros", "(", "self", ".", "n_units", ")", "\n", "for", "z", "in", "is_forget_bias", "]", "\n", "init_weights", "=", "[", "]", "\n", "\n", "for", "w", ",", "r", "in", "zip", "(", "weights", ",", "is_recurrent", ")", ":", "\n", "                ", "if", "r", "and", "r_init", "is", "not", "None", ":", "\n", "                    ", "init_weights", ".", "append", "(", "tf", ".", "reshape", "(", "r_init", "(", "(", "self", ".", "n_units", ",", "self", ".", "n_units", ")", ",", "w", ".", "dtype", ")", ",", "tf", ".", "shape", "(", "w", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "init_weights", ".", "append", "(", "w_init", "(", "tf", ".", "shape", "(", "w", ")", ".", "eval", "(", ")", ",", "w", ".", "dtype", ")", ")", "\n", "", "", "out", "=", "cell", ".", "canonical_to_params", "(", "init_weights", ",", "init_biases", ")", "\n", "out", ".", "set_shape", "(", "(", "n_params", ",", ")", ")", "\n", "\n", "return", "out", "\n", "\n", "", "parameters", "=", "tf", ".", "get_variable", "(", "\n", "\"gru_parameters\"", ",", "\n", "n_params", ",", "\n", "tf", ".", "float32", ",", "\n", "initializer", "=", "init", "\n", ")", "\n", "\n", "if", "self", ".", "keep_recurrent", "<", "1", ":", "\n", "# Not super well test, try to figure out which indices in `parameters` are recurrent weights and drop them", "\n", "# this is implementing drop-connect for the recurrent weights", "\n", "            ", "is_recurrent", "=", "weights", "[", ":", "len", "(", "weights", ")", "//", "2", "]", "+", "[", "tf", ".", "ones_like", "(", "w", ")", "for", "w", "in", "weights", "[", "len", "(", "weights", ")", "//", "2", ":", "]", "]", "\n", "recurrent_mask", "=", "cell", ".", "canonical_to_params", "(", "is_recurrent", ",", "biases", ")", "# ones at recurrent weights", "\n", "recurrent_mask", "=", "1", "-", "recurrent_mask", "*", "(", "1", "-", "self", ".", "keep_recurrent", ")", "# ones are non-recurrent param, keep_prob elsewhere", "\n", "parameters", "=", "tf", ".", "cond", "(", "is_train", ",", "\n", "lambda", ":", "tf", ".", "floor", "(", "tf", ".", "random_uniform", "(", "(", "n_params", ",", ")", ")", "+", "recurrent_mask", ")", "*", "parameters", ",", "\n", "lambda", ":", "parameters", ")", "\n", "\n", "", "if", "self", ".", "_kind", "==", "\"LSTM\"", ":", "\n", "            ", "if", "self", ".", "learn_initial_states", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "else", ":", "\n", "                ", "initial_state_h", "=", "tf", ".", "zeros", "(", "(", "self", ".", "n_layers", ",", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", ",", "self", ".", "n_units", ")", ",", "tf", ".", "float32", ")", "\n", "initial_state_c", "=", "tf", ".", "zeros", "(", "(", "self", ".", "n_layers", ",", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", ",", "self", ".", "n_units", ")", ",", "tf", ".", "float32", ")", "\n", "", "out", "=", "cell", "(", "x", ",", "initial_state_h", ",", "initial_state_c", ",", "parameters", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "learn_initial_states", ":", "\n", "                ", "initial_state", "=", "tf", ".", "get_variable", "(", "\"initial_state\"", ",", "self", ".", "n_units", ",", "\n", "tf", ".", "float32", ",", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "initial_state", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "initial_state", ",", "0", ")", ",", "0", ")", ",", "\n", "[", "self", ".", "n_layers", ",", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "initial_state", "=", "tf", ".", "zeros", "(", "(", "self", ".", "n_layers", ",", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", ",", "self", ".", "n_units", ")", ",", "tf", ".", "float32", ")", "\n", "", "out", "=", "cell", "(", "x", ",", "initial_state", ",", "parameters", ",", "True", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map": [[148, 168], ["tensorflow.transpose", "tensorflow.transpose", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.variable_scope", "tensorflow.variable_scope", "cudnn_recurrent_layers.CudnnRnnMapper._apply_transposed", "tensorflow.cast", "cudnn_recurrent_layers.CudnnRnnMapper._apply_transposed", "tensorflow.reverse_sequence", "tensorflow.reverse", "tensorflow.sequence_mask", "cudnn_recurrent_layers.CudnnRnnMapper._apply_transposed", "cudnn_recurrent_layers.CudnnRnnMapper._apply_transposed", "tensorflow.reverse_sequence", "tensorflow.reverse", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers._CudnnRnn._apply_transposed", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers._CudnnRnn._apply_transposed", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers._CudnnRnn._apply_transposed", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers._CudnnRnn._apply_transposed"], ["    ", "def", "map", "(", "self", ",", "is_train", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"forward\"", ")", ":", "\n", "                ", "fw", "=", "self", ".", "_apply_transposed", "(", "is_train", ",", "x", ")", "[", "0", "]", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"backward\"", ")", ":", "\n", "                ", "if", "mask", "is", "not", "None", ":", "\n", "                    ", "bw", "=", "self", ".", "_apply_transposed", "(", "is_train", ",", "tf", ".", "reverse_sequence", "(", "x", ",", "mask", ",", "0", ",", "1", ")", ")", "[", "0", "]", "\n", "bw", "=", "tf", ".", "reverse_sequence", "(", "bw", ",", "mask", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "bw", "=", "self", ".", "_apply_transposed", "(", "is_train", ",", "tf", ".", "reverse", "(", "x", ",", "0", ")", ")", "[", "0", "]", "\n", "bw", "=", "tf", ".", "reverse", "(", "bw", ",", "0", ")", "\n", "", "", "out", "=", "tf", ".", "concat", "(", "[", "fw", ",", "bw", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "_apply_transposed", "(", "is_train", ",", "x", ")", "[", "0", "]", "\n", "", "out", "=", "tf", ".", "transpose", "(", "out", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "out", "*=", "tf", ".", "expand_dims", "(", "tf", ".", "cast", "(", "tf", ".", "sequence_mask", "(", "mask", ",", "tf", ".", "shape", "(", "out", ")", "[", "1", "]", ")", ",", "tf", ".", "float32", ")", ",", "2", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnGru.__init__": [[171, 181], ["TruncatedNormal", "cudnn_recurrent_layers._CudnnRnn.__init__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_units", ",", "\n", "n_layers", "=", "1", ",", "\n", "keep_recurrent", "=", "1", ",", "\n", "w_init", "=", "TruncatedNormal", "(", "stddev", "=", "0.05", ")", ",", "\n", "recurrent_init", "=", "None", ",", "\n", "bidirectional", "=", "True", ",", "\n", "learn_initial_states", "=", "False", ")", ":", "\n", "        ", "super", "(", "CudnnGru", ",", "self", ")", ".", "__init__", "(", "\"GRU\"", ",", "n_units", ",", "n_layers", ",", "w_init", ",", "recurrent_init", ",", "bidirectional", ",", "\n", "learn_initial_states", ",", "1", ",", "keep_recurrent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnGru.apply": [[182, 184], ["cudnn_recurrent_layers.CudnnRnnMapper.map"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map"], ["", "def", "apply", "(", "self", ",", "is_train", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "super", "(", "CudnnGru", ",", "self", ")", ".", "map", "(", "is_train", ",", "x", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnGru.__setstate__": [[185, 196], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "\"state\"", "in", "state", ":", "\n", "            ", "if", "\"_kind\"", "not", "in", "state", "[", "\"state\"", "]", ":", "\n", "                ", "state", "[", "\"state\"", "]", "[", "\"_kind\"", "]", "=", "\"GRU\"", "\n", "", "if", "\"learn_initial_states\"", "not", "in", "state", "[", "\"state\"", "]", ":", "\n", "                ", "state", "[", "\"state\"", "]", "[", "\"learn_initial_states\"", "]", "=", "False", "\n", "", "if", "\"recurrent_init\"", "not", "in", "state", "[", "\"state\"", "]", ":", "\n", "                ", "state", "[", "\"state\"", "]", "[", "\"recurrent_init\"", "]", "=", "None", "\n", "", "if", "\"keep_recurrent\"", "not", "in", "state", "[", "\"state\"", "]", ":", "\n", "                ", "state", "[", "\"state\"", "]", "[", "\"keep_recurrent\"", "]", "=", "1", "\n", "", "", "super", "(", "CudnnGru", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__": [[199, 209], ["TruncatedNormal", "cudnn_recurrent_layers._CudnnRnn.__init__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_units", ",", "\n", "n_layers", "=", "1", ",", "\n", "lstm_bias", "=", "1", ",", "\n", "w_init", "=", "TruncatedNormal", "(", "stddev", "=", "0.05", ")", ",", "\n", "recurrent_init", "=", "None", ",", "\n", "bidirectional", "=", "True", ",", "\n", "learn_initial_states", "=", "False", ")", ":", "\n", "        ", "super", "(", "CudnnLstm", ",", "self", ")", ".", "__init__", "(", "\"LSTM\"", ",", "n_units", ",", "n_layers", ",", "w_init", ",", "recurrent_init", ",", "bidirectional", ",", "\n", "learn_initial_states", ",", "lstm_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.apply": [[210, 212], ["cudnn_recurrent_layers.CudnnRnnMapper.map"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map"], ["", "def", "apply", "(", "self", ",", "is_train", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "super", "(", "CudnnLstm", ",", "self", ")", ".", "map", "(", "is_train", ",", "x", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__setstate__": [[213, 220], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnLstm.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "\"state\"", "in", "state", ":", "\n", "            ", "if", "\"recurrent_init\"", "not", "in", "state", "[", "\"state\"", "]", ":", "\n", "                ", "state", "[", "\"state\"", "]", "[", "\"recurrent_init\"", "]", "=", "None", "\n", "", "if", "\"keep_recurrent\"", "not", "in", "state", "[", "\"state\"", "]", ":", "\n", "                ", "state", "[", "\"state\"", "]", "[", "\"keep_recurrent\"", "]", "=", "1", "\n", "", "", "super", "(", "CudnnLstm", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers._wrap_init": [[13, 19], ["init_fn", "ValueError"], "function", ["None"], ["def", "_wrap_init", "(", "init_fn", ")", ":", "\n", "    ", "def", "wrapped", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ")", ":", "\n", "        ", "if", "partition_info", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "return", "init_fn", "(", "shape", ",", "dtype", ")", "\n", "", "return", "wrapped", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.get_keras_initialization": [[21, 25], ["cudnn_recurrent_layers._wrap_init", "tensorflow.contrib.keras.initializers.get"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers._wrap_init", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get"], ["", "def", "get_keras_initialization", "(", "name", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "return", "_wrap_init", "(", "initializers", ".", "get", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.get_keras_activation": [[27, 29], ["tensorflow.contrib.keras.activations.get"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.my.corenlp_interface.CoreNLPInterface.get"], ["", "def", "get_keras_activation", "(", "name", ")", ":", "\n", "    ", "return", "activations", ".", "get", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.dropout": [[32, 36], ["tensorflow.cond", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.dropout"], ["", "def", "dropout", "(", "x", ",", "keep_prob", ",", "is_train", ",", "noise_shape", "=", "None", ",", "seed", "=", "None", ")", ":", "\n", "    ", "if", "keep_prob", ">=", "1.0", ":", "\n", "        ", "return", "x", "\n", "", "return", "tf", ".", "cond", "(", "is_train", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "keep_prob", ",", "noise_shape", "=", "noise_shape", ",", "seed", "=", "seed", ")", ",", "lambda", ":", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.main": [[15, 18], ["prepro.get_args", "prepro.prepro"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.get_args", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro"], ["  ", "args", "=", "get_args", "(", ")", "\n", "prepro", "(", "args", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.get_args": [[20, 121], ["argparse.ArgumentParser", "os.path.expanduser", "os.path.join", "os.path.join", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "home", "=", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", "\n", "source_dir", "=", "os", ".", "path", ".", "join", "(", "home", ",", "\"data\"", ",", "\"squad\"", ")", "\n", "target_dir", "=", "\"data/squad\"", "\n", "glove_dir", "=", "os", ".", "path", ".", "join", "(", "home", ",", "\"data\"", ",", "\"glove\"", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "\"--source_dir\"", ",", "default", "=", "source_dir", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "\"--target_dir\"", ",", "default", "=", "target_dir", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_name\"", ",", "default", "=", "'train-v1.1.json'", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "\"--debug\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_ratio\"", ",", "default", "=", "0.9", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--glove_corpus\"", ",", "default", "=", "\"6B\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--glove_dir\"", ",", "default", "=", "glove_dir", ")", "\n", "parser", ".", "add_argument", "(", "\"--glove_vec_size\"", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "default", "=", "\"full\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--single_path\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--tokenizer\"", ",", "default", "=", "\"PTB\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--url\"", ",", "default", "=", "\"vision-server2.corp.ai2\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--port\"", ",", "default", "=", "8000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--split\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--suffix\"", ",", "default", "=", "\"\"", ")", "\n", "# TODO : put more args here", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "", "def", "create_all", "(", "args", ")", ":", "\n", "  ", "out_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "source_dir", ",", "\"all-v1.1.json\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "    ", "return", "\n", "", "train_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "source_dir", ",", "args", ".", "train_name", ")", "\n", "train_data", "=", "json", ".", "load", "(", "open", "(", "train_path", ",", "'r'", ")", ")", "\n", "dev_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "source_dir", ",", "args", ".", "dev_name", ")", "\n", "dev_data", "=", "json", ".", "load", "(", "open", "(", "dev_path", ",", "'r'", ")", ")", "\n", "train_data", "[", "'data'", "]", ".", "extend", "(", "dev_data", "[", "'data'", "]", ")", "\n", "print", "(", "\"dumping all data ...\"", ")", "\n", "json", ".", "dump", "(", "train_data", ",", "open", "(", "out_path", ",", "'w'", ")", ")", "\n", "\n", "\n", "", "def", "prepro", "(", "args", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "target_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "args", ".", "target_dir", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "'full'", ":", "\n", "    ", "prepro_each", "(", "args", ",", "'train'", ",", "out_name", "=", "'train'", ")", "\n", "prepro_each", "(", "args", ",", "'dev'", ",", "out_name", "=", "'dev'", ")", "\n", "prepro_each", "(", "args", ",", "'dev'", ",", "out_name", "=", "'test'", ")", "\n", "", "elif", "args", ".", "mode", "==", "'all'", ":", "\n", "    ", "create_all", "(", "args", ")", "\n", "prepro_each", "(", "args", ",", "'dev'", ",", "0.0", ",", "0.0", ",", "out_name", "=", "'dev'", ")", "\n", "prepro_each", "(", "args", ",", "'dev'", ",", "0.0", ",", "0.0", ",", "out_name", "=", "'test'", ")", "\n", "prepro_each", "(", "args", ",", "'all'", ",", "out_name", "=", "'train'", ")", "\n", "", "elif", "args", ".", "mode", "==", "'single'", ":", "\n", "    ", "assert", "len", "(", "args", ".", "single_path", ")", ">", "0", "\n", "prepro_each", "(", "args", ",", "\"NULL\"", ",", "out_name", "=", "\"single\"", ",", "in_path", "=", "args", ".", "single_path", ")", "\n", "", "else", ":", "\n", "    ", "prepro_each", "(", "args", ",", "'train'", ",", "0.0", ",", "args", ".", "train_ratio", ",", "out_name", "=", "'train'", ")", "\n", "prepro_each", "(", "args", ",", "'train'", ",", "args", ".", "train_ratio", ",", "1.0", ",", "out_name", "=", "'dev'", ")", "\n", "prepro_each", "(", "args", ",", "'dev'", ",", "out_name", "=", "'test'", ")", "\n", "\n", "\n", "", "", "def", "save", "(", "args", ",", "data", ",", "shared", ",", "data_type", ")", ":", "\n", "  ", "data_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "target_dir", ",", "\"data_{}.json\"", ".", "format", "(", "data_type", ")", ")", "\n", "shared_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "target_dir", ",", "\"shared_{}.json\"", ".", "format", "(", "data_type", ")", ")", "\n", "json", ".", "dump", "(", "data", ",", "open", "(", "data_path", ",", "'w'", ")", ")", "\n", "json", ".", "dump", "(", "shared", ",", "open", "(", "shared_path", ",", "'w'", ")", ")", "\n", "\n", "\n", "", "def", "get_word2vec", "(", "args", ",", "word_counter", ")", ":", "\n", "  ", "glove_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "glove_dir", ",", "\"glove.{}.{}d.txt\"", ".", "format", "(", "args", ".", "glove_corpus", ",", "args", ".", "glove_vec_size", ")", ")", "\n", "sizes", "=", "{", "'6B'", ":", "int", "(", "4e5", ")", ",", "'42B'", ":", "int", "(", "1.9e6", ")", ",", "'840B'", ":", "int", "(", "2.2e6", ")", ",", "'2B'", ":", "int", "(", "1.2e6", ")", "}", "\n", "total", "=", "sizes", "[", "args", ".", "glove_corpus", "]", "\n", "word2vec_dict", "=", "{", "}", "\n", "with", "open", "(", "glove_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fh", ":", "\n", "    ", "for", "line", "in", "tqdm", "(", "fh", ",", "total", "=", "total", ")", ":", "\n", "      ", "array", "=", "line", ".", "lstrip", "(", ")", ".", "rstrip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "word", "=", "array", "[", "0", "]", "\n", "vector", "=", "list", "(", "map", "(", "float", ",", "array", "[", "1", ":", "]", ")", ")", "\n", "if", "word", "in", "word_counter", ":", "\n", "        ", "word2vec_dict", "[", "word", "]", "=", "vector", "\n", "", "elif", "word", ".", "capitalize", "(", ")", "in", "word_counter", ":", "\n", "        ", "word2vec_dict", "[", "word", ".", "capitalize", "(", ")", "]", "=", "vector", "\n", "", "elif", "word", ".", "lower", "(", ")", "in", "word_counter", ":", "\n", "        ", "word2vec_dict", "[", "word", ".", "lower", "(", ")", "]", "=", "vector", "\n", "", "elif", "word", ".", "upper", "(", ")", "in", "word_counter", ":", "\n", "        ", "word2vec_dict", "[", "word", ".", "upper", "(", ")", "]", "=", "vector", "\n", "\n", "", "", "", "print", "(", "\"{}/{} of word vocab have corresponding vectors in {}\"", ".", "format", "(", "len", "(", "word2vec_dict", ")", ",", "len", "(", "word_counter", ")", ",", "glove_path", ")", ")", "\n", "return", "word2vec_dict", "\n", "\n", "\n", "", "def", "prepro_each", "(", "args", ",", "data_type", ",", "start_ratio", "=", "0.0", ",", "stop_ratio", "=", "1.0", ",", "out_name", "=", "\"default\"", ",", "in_path", "=", "None", ")", ":", "\n", "  ", "if", "args", ".", "tokenizer", "==", "\"PTB\"", ":", "\n", "    ", "import", "nltk", "\n", "sent_tokenize", "=", "nltk", ".", "sent_tokenize", "\n", "def", "word_tokenize", "(", "tokens", ")", ":", "\n", "      ", "return", "[", "token", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", ".", "replace", "(", "\"``\"", ",", "'\"'", ")", "for", "token", "in", "nltk", ".", "word_tokenize", "(", "tokens", ")", "]", "\n", "", "", "elif", "args", ".", "tokenizer", "==", "'Stanford'", ":", "\n", "    ", "from", "my", ".", "corenlp_interface", "import", "CoreNLPInterface", "\n", "interface", "=", "CoreNLPInterface", "(", "args", ".", "url", ",", "args", ".", "port", ")", "\n", "sent_tokenize", "=", "interface", ".", "split_doc", "\n", "word_tokenize", "=", "interface", ".", "split_sent", "\n", "", "else", ":", "\n", "    ", "raise", "Exception", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.create_all": [[122, 133], ["os.path.join", "os.path.exists", "os.path.join", "json.load", "os.path.join", "json.load", "train_data[].extend", "print", "json.dump", "open", "open", "open"], "function", ["None"], ["\n", "", "if", "not", "args", ".", "split", ":", "\n", "    ", "sent_tokenize", "=", "lambda", "para", ":", "[", "para", "]", "\n", "\n", "", "source_path", "=", "in_path", "or", "os", ".", "path", ".", "join", "(", "args", ".", "source_dir", ",", "\"{}-{}v1.1.json\"", ".", "format", "(", "data_type", ",", "args", ".", "suffix", ")", ")", "\n", "source_data", "=", "json", ".", "load", "(", "open", "(", "source_path", ",", "'r'", ")", ")", "\n", "\n", "q", ",", "cq", ",", "y", ",", "rx", ",", "rcx", ",", "ids", ",", "idxs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "na", "=", "[", "]", "\n", "cy", "=", "[", "]", "\n", "x", ",", "cx", "=", "[", "]", ",", "[", "]", "\n", "answerss", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro": [[135, 165], ["os.path.exists", "os.makedirs", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.create_all", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "prepro.prepro_each", "len"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.create_all", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each"], ["word_counter", ",", "char_counter", ",", "lower_word_counter", "=", "Counter", "(", ")", ",", "Counter", "(", ")", ",", "Counter", "(", ")", "\n", "start_ai", "=", "int", "(", "round", "(", "len", "(", "source_data", "[", "'data'", "]", ")", "*", "start_ratio", ")", ")", "\n", "stop_ai", "=", "int", "(", "round", "(", "len", "(", "source_data", "[", "'data'", "]", ")", "*", "stop_ratio", ")", ")", "\n", "for", "ai", ",", "article", "in", "enumerate", "(", "tqdm", "(", "source_data", "[", "'data'", "]", "[", "start_ai", ":", "stop_ai", "]", ")", ")", ":", "\n", "    ", "xp", ",", "cxp", "=", "[", "]", ",", "[", "]", "\n", "pp", "=", "[", "]", "\n", "x", ".", "append", "(", "xp", ")", "\n", "cx", ".", "append", "(", "cxp", ")", "\n", "p", ".", "append", "(", "pp", ")", "\n", "for", "pi", ",", "para", "in", "enumerate", "(", "article", "[", "'paragraphs'", "]", ")", ":", "\n", "# wordss", "\n", "      ", "context", "=", "para", "[", "'context'", "]", "\n", "context", "=", "context", ".", "replace", "(", "\"''\"", ",", "'\" '", ")", "\n", "context", "=", "context", ".", "replace", "(", "\"``\"", ",", "'\" '", ")", "\n", "xi", "=", "list", "(", "map", "(", "word_tokenize", ",", "sent_tokenize", "(", "context", ")", ")", ")", "\n", "xi", "=", "[", "process_tokens", "(", "tokens", ")", "for", "tokens", "in", "xi", "]", "# process tokens", "\n", "# given xi, add chars", "\n", "cxi", "=", "[", "[", "list", "(", "xijk", ")", "for", "xijk", "in", "xij", "]", "for", "xij", "in", "xi", "]", "\n", "xp", ".", "append", "(", "xi", ")", "\n", "cxp", ".", "append", "(", "cxi", ")", "\n", "pp", ".", "append", "(", "context", ")", "\n", "\n", "for", "xij", "in", "xi", ":", "\n", "        ", "for", "xijk", "in", "xij", ":", "\n", "          ", "word_counter", "[", "xijk", "]", "+=", "len", "(", "para", "[", "'qas'", "]", ")", "\n", "lower_word_counter", "[", "xijk", ".", "lower", "(", ")", "]", "+=", "len", "(", "para", "[", "'qas'", "]", ")", "\n", "for", "xijkl", "in", "xijk", ":", "\n", "            ", "char_counter", "[", "xijkl", "]", "+=", "len", "(", "para", "[", "'qas'", "]", ")", "\n", "\n", "", "", "", "rxi", "=", "[", "ai", ",", "pi", "]", "\n", "assert", "len", "(", "x", ")", "-", "1", "==", "ai", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.save": [[167, 172], ["os.path.join", "os.path.join", "json.dump", "json.dump", "open", "open"], "function", ["None"], ["for", "qa", "in", "para", "[", "'qas'", "]", ":", "\n", "# get words", "\n", "        ", "qi", "=", "word_tokenize", "(", "qa", "[", "'question'", "]", ")", "\n", "qi", "=", "process_tokens", "(", "qi", ")", "\n", "cqi", "=", "[", "list", "(", "qij", ")", "for", "qij", "in", "qi", "]", "\n", "yi", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.get_word2vec": [[174, 195], ["os.path.join", "print", "int", "int", "int", "int", "open", "tqdm.tqdm", "line.lstrip().rstrip().split", "list", "len", "len", "map", "line.lstrip().rstrip", "word.capitalize", "word.lower", "line.lstrip", "word.capitalize", "word.upper", "word.lower", "word.upper"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.tensorflow.cudnn_recurrent_layers.CudnnRnnMapper.map"], ["answers", "=", "[", "]", "\n", "for", "answer", "in", "qa", "[", "'answers'", "]", ":", "\n", "          ", "answer_text", "=", "answer", "[", "'text'", "]", "\n", "answers", ".", "append", "(", "answer_text", ")", "\n", "answer_start", "=", "answer", "[", "'answer_start'", "]", "\n", "answer_stop", "=", "answer_start", "+", "len", "(", "answer_text", ")", "\n", "# TODO : put some function that gives word_start, word_stop here", "\n", "yi0", ",", "yi1", "=", "get_word_span", "(", "context", ",", "xi", ",", "answer_start", ",", "answer_stop", ")", "\n", "# yi0 = answer['answer_word_start'] or [0, 0]", "\n", "# yi1 = answer['answer_word_stop'] or [0, 1]", "\n", "assert", "len", "(", "xi", "[", "yi0", "[", "0", "]", "]", ")", ">", "yi0", "[", "1", "]", "\n", "assert", "len", "(", "xi", "[", "yi1", "[", "0", "]", "]", ")", ">=", "yi1", "[", "1", "]", "\n", "w0", "=", "xi", "[", "yi0", "[", "0", "]", "]", "[", "yi0", "[", "1", "]", "]", "\n", "w1", "=", "xi", "[", "yi1", "[", "0", "]", "]", "[", "yi1", "[", "1", "]", "-", "1", "]", "\n", "i0", "=", "get_word_idx", "(", "context", ",", "xi", ",", "yi0", ")", "\n", "i1", "=", "get_word_idx", "(", "context", ",", "xi", ",", "(", "yi1", "[", "0", "]", ",", "yi1", "[", "1", "]", "-", "1", ")", ")", "\n", "cyi0", "=", "answer_start", "-", "i0", "\n", "cyi1", "=", "answer_stop", "-", "i1", "-", "1", "\n", "# print(answer_text, w0[cyi0:], w1[:cyi1+1])", "\n", "assert", "answer_text", "[", "0", "]", "==", "w0", "[", "cyi0", "]", ",", "(", "answer_text", ",", "w0", ",", "cyi0", ")", "\n", "assert", "answer_text", "[", "-", "1", "]", "==", "w1", "[", "cyi1", "]", "\n", "assert", "cyi0", "<", "32", ",", "(", "answer_text", ",", "w0", ")", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.compute_answer_span": [[197, 217], ["answer.replace().lower.replace().lower", "context.lower.lower", "re.search", "re.search", "re.search.start", "len", "answer.replace().lower.replace", "re.search.start", "len"], "function", ["None"], ["\n", "yi", ".", "append", "(", "[", "yi0", ",", "yi1", "]", ")", "\n", "cyi", ".", "append", "(", "[", "cyi0", ",", "cyi1", "]", ")", "\n", "\n", "", "if", "len", "(", "qa", "[", "'answers'", "]", ")", "==", "0", ":", "\n", "          ", "yi", ".", "append", "(", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "1", ")", "]", ")", "\n", "cyi", ".", "append", "(", "[", "0", ",", "1", "]", ")", "\n", "na", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "          ", "na", ".", "append", "(", "False", ")", "\n", "\n", "", "for", "qij", "in", "qi", ":", "\n", "          ", "word_counter", "[", "qij", "]", "+=", "1", "\n", "lower_word_counter", "[", "qij", ".", "lower", "(", ")", "]", "+=", "1", "\n", "for", "qijk", "in", "qij", ":", "\n", "            ", "char_counter", "[", "qijk", "]", "+=", "1", "\n", "\n", "", "", "q", ".", "append", "(", "qi", ")", "\n", "cq", ".", "append", "(", "cqi", ")", "\n", "y", ".", "append", "(", "yi", ")", "\n", "cy", ".", "append", "(", "cyi", ")", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro._compute_candidate_span": [[219, 241], ["candidate.replace().lower.replace().lower", "context.lower.lower", "re.search", "candidate.replace().lower.replace", "re.search.start", "len", "re.search", "re.search.start", "len"], "function", ["None"], ["rcx", ".", "append", "(", "rxi", ")", "\n", "ids", ".", "append", "(", "qa", "[", "'id'", "]", ")", "\n", "idxs", ".", "append", "(", "len", "(", "idxs", ")", ")", "\n", "answerss", ".", "append", "(", "answers", ")", "\n", "\n", "", "", "if", "args", ".", "debug", ":", "\n", "      ", "break", "\n", "\n", "", "", "word2vec_dict", "=", "get_word2vec", "(", "args", ",", "word_counter", ")", "\n", "lower_word2vec_dict", "=", "get_word2vec", "(", "args", ",", "lower_word_counter", ")", "\n", "\n", "# add context here", "\n", "data", "=", "{", "'q'", ":", "q", ",", "'cq'", ":", "cq", ",", "'y'", ":", "y", ",", "'*x'", ":", "rx", ",", "'*cx'", ":", "rcx", ",", "'cy'", ":", "cy", ",", "\n", "'idxs'", ":", "idxs", ",", "'ids'", ":", "ids", ",", "'answerss'", ":", "answerss", ",", "'*p'", ":", "rx", ",", "'na'", ":", "na", "}", "\n", "shared", "=", "{", "'x'", ":", "x", ",", "'cx'", ":", "cx", ",", "'p'", ":", "p", ",", "\n", "'word_counter'", ":", "word_counter", ",", "'char_counter'", ":", "char_counter", ",", "'lower_word_counter'", ":", "lower_word_counter", ",", "\n", "'word2vec'", ":", "word2vec_dict", ",", "'lower_word2vec'", ":", "lower_word2vec_dict", "}", "\n", "\n", "print", "(", "\"saving ...\"", ")", "\n", "save", "(", "args", ",", "data", ",", "shared", ",", "out_name", ")", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "  ", "main", "(", ")", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.compute_candidate_spans": [[243, 284], ["enumerate", "candidate.replace().lower.replace().lower", "context.lower.lower", "re.search", "candidate.replace().lower.replace", "candidates_found.append", "out_spans.append", "real_candidates_found.append", "print", "print", "re.search", "re.search.start", "len", "candidates_found.append", "re.search.start", "out_spans.append", "print", "print", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.find_doc_with_answer": [[286, 294], ["enumerate"], "function", ["None"], []], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.prepro_each": [[296, 719], ["json.load", "int", "int", "sklearn.feature_extraction.text.TfidfVectorizer", "enumerate", "prepro.get_word2vec", "prepro.get_word2vec", "print", "print", "print", "os.path.join", "open", "collections.Counter", "collections.Counter", "collections.Counter", "round", "round", "random.shuffle", "tqdm.tqdm", "article[].replace", "x.append", "cx.append", "p.append", "x2.append", "p2.append", "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", "sklearn.feature_extraction.text.TfidfVectorizer.transform", "sklearn.metrics.pairwise_distances().ravel", "numpy.lexsort", "first_doc_ids.append", "nltk.word_tokenize"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.get_word2vec", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.prepro.get_word2vec"], []], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_2d_spans": [[5, 22], ["spanss.append", "text.find", "spans.append", "len", "text.find", "print", "print", "print", "print", "Exception", "len"], "function", ["None"], ["def", "get_2d_spans", "(", "text", ",", "tokenss", ")", ":", "\n", "  ", "spanss", "=", "[", "]", "\n", "cur_idx", "=", "0", "\n", "for", "tokens", "in", "tokenss", ":", "\n", "    ", "spans", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "      ", "if", "text", ".", "find", "(", "token", ",", "cur_idx", ")", "<", "0", ":", "\n", "        ", "print", "(", "tokens", ")", "\n", "print", "(", "\"{} {} {}\"", ".", "format", "(", "token", ",", "cur_idx", ",", "text", ")", ")", "\n", "raise", "Exception", "(", ")", "\n", "", "cur_idx", "=", "text", ".", "find", "(", "token", ",", "cur_idx", ")", "\n", "spans", ".", "append", "(", "(", "cur_idx", ",", "cur_idx", "+", "len", "(", "token", ")", ")", ")", "\n", "cur_idx", "+=", "len", "(", "token", ")", "\n", "", "spanss", ".", "append", "(", "spans", ")", "\n", "", "return", "spanss", "\n", "\n", "\n", "", "def", "get_word_span", "(", "context", ",", "wordss", ",", "start", ",", "stop", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_word_span": [[24, 34], ["utils.get_2d_spans", "enumerate", "enumerate", "len", "idxs.append"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_2d_spans"], ["idxs", "=", "[", "]", "\n", "for", "sent_idx", ",", "spans", "in", "enumerate", "(", "spanss", ")", ":", "\n", "    ", "for", "word_idx", ",", "span", "in", "enumerate", "(", "spans", ")", ":", "\n", "      ", "if", "not", "(", "stop", "<=", "span", "[", "0", "]", "or", "start", ">=", "span", "[", "1", "]", ")", ":", "\n", "        ", "idxs", ".", "append", "(", "(", "sent_idx", ",", "word_idx", ")", ")", "\n", "\n", "", "", "", "assert", "len", "(", "idxs", ")", ">", "0", ",", "\"{} {} {} {}\"", ".", "format", "(", "context", ",", "spanss", ",", "start", ",", "stop", ")", "\n", "return", "idxs", "[", "0", "]", ",", "(", "idxs", "[", "-", "1", "]", "[", "0", "]", ",", "idxs", "[", "-", "1", "]", "[", "1", "]", "+", "1", ")", "\n", "\n", "\n", "", "def", "get_phrase", "(", "context", ",", "wordss", ",", "span", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_phrase": [[36, 62], ["utils.get_flat_idx", "utils.get_flat_idx", "sum", "enumerate", "context.find", "len"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_flat_idx", "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_flat_idx"], ["\n", "start", ",", "stop", "=", "span", "\n", "flat_start", "=", "get_flat_idx", "(", "wordss", ",", "start", ")", "\n", "flat_stop", "=", "get_flat_idx", "(", "wordss", ",", "stop", ")", "\n", "words", "=", "sum", "(", "wordss", ",", "[", "]", ")", "\n", "char_idx", "=", "0", "\n", "char_start", ",", "char_stop", "=", "None", ",", "None", "\n", "for", "word_idx", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "    ", "char_idx", "=", "context", ".", "find", "(", "word", ",", "char_idx", ")", "\n", "assert", "char_idx", ">=", "0", "\n", "if", "word_idx", "==", "flat_start", ":", "\n", "      ", "char_start", "=", "char_idx", "\n", "", "char_idx", "+=", "len", "(", "word", ")", "\n", "if", "word_idx", "==", "flat_stop", "-", "1", ":", "\n", "      ", "char_stop", "=", "char_idx", "\n", "", "", "assert", "char_start", "is", "not", "None", "\n", "assert", "char_stop", "is", "not", "None", "\n", "return", "context", "[", "char_start", ":", "char_stop", "]", "\n", "\n", "\n", "", "def", "get_flat_idx", "(", "wordss", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_flat_idx": [[64, 66], ["sum", "len"], "function", ["None"], ["\n", "\n", "", "def", "get_word_idx", "(", "context", ",", "wordss", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_word_idx": [[68, 71], ["utils.get_2d_spans"], "function", ["home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_2d_spans"], ["return", "spanss", "[", "idx", "[", "0", "]", "]", "[", "idx", "[", "1", "]", "]", "[", "0", "]", "\n", "\n", "\n", "", "def", "process_tokens", "(", "temp_tokens", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.process_tokens_medhop": [[73, 80], ["tokens.extend", "re.split"], "function", ["None"], ["for", "token", "in", "temp_tokens", ":", "\n", "    ", "flag", "=", "False", "\n", "l", "=", "(", "\"-\"", ",", "\"\\u2212\"", ",", "\"\\u2014\"", ",", "\"\\u2013\"", ",", "\"/\"", ",", "\"~\"", ",", "'\"'", ",", "\"'\"", ",", "\"\\u201C\"", ",", "\"\\u2019\"", ",", "\"\\u201D\"", ",", "\"\\u2018\"", ",", "\"\\u00B0\"", ")", "\n", "# \\u2013 is en-dash. Used for number to nubmer", "\n", "# l = (\"-\", \"\\u2212\", \"\\u2014\", \"\\u2013\")", "\n", "# l = (\"\\u2013\",)", "\n", "tokens", ".", "extend", "(", "re", ".", "split", "(", "\"([{}])\"", ".", "format", "(", "\"\"", ".", "join", "(", "l", ")", ")", ",", "token", ")", ")", "\n", "", "return", "tokens", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.process_tokens": [[81, 92], ["re.split", "tokens.append"], "function", ["None"], ["\n", "\n", "", "def", "get_best_span", "(", "ypi", ",", "yp2i", ")", ":", "\n", "  ", "max_val", "=", "0", "\n", "best_word_span", "=", "(", "0", ",", "1", ")", "\n", "best_sent_idx", "=", "0", "\n", "for", "f", ",", "(", "ypif", ",", "yp2if", ")", "in", "enumerate", "(", "zip", "(", "ypi", ",", "yp2i", ")", ")", ":", "\n", "    ", "argmax_j1", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "ypif", ")", ")", ":", "\n", "      ", "val1", "=", "ypif", "[", "argmax_j1", "]", "\n", "if", "val1", "<", "ypif", "[", "j", "]", ":", "\n", "        ", "val1", "=", "ypif", "[", "j", "]", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_best_candidate": [[94, 115], ["enumerate", "range", "float", "len", "print", "print"], "function", ["None"], ["\n", "", "val2", "=", "yp2if", "[", "j", "]", "\n", "if", "val1", "*", "val2", ">", "max_val", ":", "\n", "        ", "best_word_span", "=", "(", "argmax_j1", ",", "j", ")", "\n", "best_sent_idx", "=", "f", "\n", "max_val", "=", "val1", "*", "val2", "\n", "", "", "", "return", "(", "(", "best_sent_idx", ",", "best_word_span", "[", "0", "]", ")", ",", "(", "best_sent_idx", ",", "best_word_span", "[", "1", "]", "+", "1", ")", ")", ",", "float", "(", "max_val", ")", "\n", "\n", "\n", "", "def", "get_best_span_wy", "(", "wypi", ",", "th", ")", ":", "\n", "  ", "chunk_spans", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "chunk_start", "=", "None", "\n", "score", "=", "0", "\n", "l", "=", "0", "\n", "th", "=", "min", "(", "th", ",", "np", ".", "max", "(", "wypi", ")", ")", "\n", "for", "f", ",", "wypif", "in", "enumerate", "(", "wypi", ")", ":", "\n", "    ", "for", "j", ",", "wypifj", "in", "enumerate", "(", "wypif", ")", ":", "\n", "      ", "if", "wypifj", ">=", "th", ":", "\n", "        ", "if", "chunk_start", "is", "None", ":", "\n", "          ", "chunk_start", "=", "f", ",", "j", "\n", "", "score", "+=", "wypifj", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_best_span": [[116, 134], ["enumerate", "zip", "range", "float", "len"], "function", ["None"], ["l", "+=", "1", "\n", "", "else", ":", "\n", "        ", "if", "chunk_start", "is", "not", "None", ":", "\n", "          ", "chunk_stop", "=", "f", ",", "j", "\n", "chunk_spans", ".", "append", "(", "(", "chunk_start", ",", "chunk_stop", ")", ")", "\n", "scores", ".", "append", "(", "score", "/", "l", ")", "\n", "score", "=", "0", "\n", "l", "=", "0", "\n", "chunk_start", "=", "None", "\n", "", "", "", "if", "chunk_start", "is", "not", "None", ":", "\n", "      ", "chunk_stop", "=", "f", ",", "j", "+", "1", "\n", "chunk_spans", ".", "append", "(", "(", "chunk_start", ",", "chunk_stop", ")", ")", "\n", "scores", ".", "append", "(", "score", "/", "l", ")", "\n", "score", "=", "0", "\n", "l", "=", "0", "\n", "chunk_start", "=", "None", "\n", "\n", "", "", "return", "max", "(", "zip", "(", "chunk_spans", ",", "scores", ")", ",", "key", "=", "lambda", "pair", ":", "pair", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_best_span_wy": [[136, 167], ["min", "enumerate", "max", "numpy.max", "enumerate", "zip", "chunk_spans.append", "scores.append", "chunk_spans.append", "scores.append"], "function", ["None"], ["", "def", "get_span_score_pairs", "(", "ypi", ",", "yp2i", ")", ":", "\n", "  ", "span_score_pairs", "=", "[", "]", "\n", "for", "f", ",", "(", "ypif", ",", "yp2if", ")", "in", "enumerate", "(", "zip", "(", "ypi", ",", "yp2i", ")", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "len", "(", "ypif", ")", ")", ":", "\n", "      ", "for", "k", "in", "range", "(", "j", ",", "len", "(", "yp2if", ")", ")", ":", "\n", "        ", "span", "=", "(", "(", "f", ",", "j", ")", ",", "(", "f", ",", "k", "+", "1", ")", ")", "\n", "score", "=", "ypif", "[", "j", "]", "*", "yp2if", "[", "k", "]", "\n", "span_score_pairs", ".", "append", "(", "(", "span", ",", "score", ")", ")", "\n", "", "", "", "return", "span_score_pairs", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.jiangycTarheel_EPAr.qangaroo.utils.get_span_score_pairs": [[169, 178], ["enumerate", "zip", "range", "len", "range", "len", "span_score_pairs.append"], "function", ["None"], []]}