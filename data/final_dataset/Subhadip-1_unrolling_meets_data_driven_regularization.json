{"home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.torch_wrapper.OperatorFunction.forward": [[13, 97], ["torch_wrapper.copy_if_zero_strides", "torch.from_numpy().to", "isinstance", "TypeError", "ctx.save_for_backward", "input.cpu().detach().numpy", "str().strip", "ValueError", "copy_if_zero_strides.reshape", "numpy.stack().astype", "numpy.asarray().astype.reshape", "numpy.asarray().astype", "results.append", "torch.from_numpy", "input.cpu().detach", "len", "str", "operator", "numpy.stack", "numpy.asarray", "len", "operator", "input.cpu"], "methods", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.torch_wrapper.copy_if_zero_strides"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "operator", ",", "input", ")", ":", "\n", "        ", "\"\"\"Evaluate forward pass on the input.\n        Parameters\n        ----------\n        ctx : context object\n            Object to communicate information between forward and backward\n            passes.\n        operator : `Operator`\n            ODL operator to be wrapped. For gradient computations to\n            work, ``operator.derivative(x).adjoint`` must be implemented.\n        input : `torch.Tensor`\n            Point at which to evaluate the operator.\n        Returns\n        -------\n        result : `torch.Tensor`\n            Tensor holding the result of the evaluation.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "operator", ",", "Operator", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"`operator` must be an `Operator` instance, got {!r}\"", "\n", "\"\"", ".", "format", "(", "operator", ")", "\n", ")", "\n", "\n", "# Save operator for backward; input only needs to be saved if", "\n", "# the operator is nonlinear (for `operator.derivative(input)`)", "\n", "", "ctx", ".", "operator", "=", "operator", "\n", "\n", "if", "not", "operator", ".", "is_linear", ":", "\n", "# Only needed for nonlinear operators", "\n", "            ", "ctx", ".", "save_for_backward", "(", "input", ")", "\n", "\n", "# TODO(kohr-h): use GPU memory directly when possible", "\n", "# TODO(kohr-h): remove `copy_if_zero_strides` when NumPy 1.16.0", "\n", "# is required", "\n", "", "input_arr", "=", "copy_if_zero_strides", "(", "input", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# Determine how to loop over extra shape \"left\" of the operator", "\n", "# domain shape", "\n", "in_shape", "=", "input_arr", ".", "shape", "\n", "op_in_shape", "=", "operator", ".", "domain", ".", "shape", "\n", "if", "operator", ".", "is_functional", ":", "\n", "            ", "op_out_shape", "=", "(", ")", "\n", "op_out_dtype", "=", "operator", ".", "domain", ".", "dtype", "\n", "", "else", ":", "\n", "            ", "op_out_shape", "=", "operator", ".", "range", ".", "shape", "\n", "op_out_dtype", "=", "operator", ".", "range", ".", "dtype", "\n", "\n", "", "extra_shape", "=", "in_shape", "[", ":", "-", "len", "(", "op_in_shape", ")", "]", "\n", "if", "in_shape", "[", "-", "len", "(", "op_in_shape", ")", ":", "]", "!=", "op_in_shape", ":", "\n", "            ", "shp_str", "=", "str", "(", "op_in_shape", ")", ".", "strip", "(", "'(,)'", ")", "\n", "raise", "ValueError", "(", "\n", "'input tensor has wrong shape: expected (*, {}), got {}'", "\n", "''", ".", "format", "(", "shp_str", ",", "in_shape", ")", "\n", ")", "\n", "\n", "# Store some information on the context object", "\n", "", "ctx", ".", "op_in_shape", "=", "op_in_shape", "\n", "ctx", ".", "op_out_shape", "=", "op_out_shape", "\n", "ctx", ".", "extra_shape", "=", "extra_shape", "\n", "ctx", ".", "op_in_dtype", "=", "operator", ".", "domain", ".", "dtype", "\n", "ctx", ".", "op_out_dtype", "=", "op_out_dtype", "\n", "\n", "# Evaluate the operator on all inputs in a loop", "\n", "if", "extra_shape", ":", "\n", "# Multiple inputs: flatten extra axes, then do one entry at a time", "\n", "            ", "input_arr_flat_extra", "=", "input_arr", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "op_in_shape", ")", "\n", "results", "=", "[", "]", "\n", "for", "inp", "in", "input_arr_flat_extra", ":", "\n", "                ", "results", ".", "append", "(", "operator", "(", "inp", ")", ")", "\n", "\n", "# Stack results, reshape to the expected output shape and enforce", "\n", "# correct dtype", "\n", "", "result_arr", "=", "np", ".", "stack", "(", "results", ")", ".", "astype", "(", "op_out_dtype", ",", "copy", "=", "False", ")", "\n", "result_arr", "=", "result_arr", ".", "reshape", "(", "extra_shape", "+", "op_out_shape", ")", "\n", "", "else", ":", "\n", "# Single input: evaluate directly", "\n", "            ", "result_arr", "=", "np", ".", "asarray", "(", "\n", "operator", "(", "input_arr", ")", "\n", ")", ".", "astype", "(", "op_out_dtype", ",", "copy", "=", "False", ")", "\n", "\n", "# Convert back to tensor", "\n", "", "tensor", "=", "torch", ".", "from_numpy", "(", "result_arr", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.torch_wrapper.OperatorFunction.backward": [[98, 189], ["torch_wrapper.copy_if_zero_strides", "torch.from_numpy().to", "torch_wrapper.copy_if_zero_strides", "grad_output.detach().cpu().numpy", "ValueError", "copy_if_zero_strides.reshape", "numpy.stack().astype", "numpy.asarray().astype.reshape", "ctx.saved_tensors[].detach().cpu().numpy", "copy_if_zero_strides.reshape", "zip", "numpy.asarray().astype", "numpy.asarray().astype", "torch.from_numpy", "grad_output.detach().cpu", "results.append", "results.append", "numpy.stack", "ctx.saved_tensors[].detach().cpu", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "grad_output.detach", "operator.adjoint", "operator.derivative().adjoint", "operator.adjoint", "operator.derivative().adjoint", "ctx.saved_tensors[].detach", "operator.derivative", "operator.derivative"], "methods", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.torch_wrapper.copy_if_zero_strides", "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.torch_wrapper.copy_if_zero_strides"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\n", "# Return early if there's nothing to do", "\n", "        ", "if", "not", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "operator", "=", "ctx", ".", "operator", "\n", "\n", "# Get `operator` and `input` from the context object (the input", "\n", "# is only needed for nonlinear operators)", "\n", "if", "not", "operator", ".", "is_linear", ":", "\n", "# TODO: implement directly for GPU data", "\n", "# TODO(kohr-h): remove `copy_if_zero_strides` when NumPy 1.16.0", "\n", "# is required", "\n", "            ", "input_arr", "=", "copy_if_zero_strides", "(", "\n", "ctx", ".", "saved_tensors", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "\n", "# ODL weights spaces, pytorch doesn't, so we need to handle this", "\n", "", "try", ":", "\n", "            ", "dom_weight", "=", "operator", ".", "domain", ".", "weighting", ".", "const", "\n", "", "except", "AttributeError", ":", "\n", "            ", "dom_weight", "=", "1.0", "\n", "", "try", ":", "\n", "            ", "ran_weight", "=", "operator", ".", "range", ".", "weighting", ".", "const", "\n", "", "except", "AttributeError", ":", "\n", "            ", "ran_weight", "=", "1.0", "\n", "", "scaling", "=", "dom_weight", "/", "ran_weight", "\n", "\n", "# Convert `grad_output` to NumPy array", "\n", "grad_output_arr", "=", "copy_if_zero_strides", "(", "\n", "grad_output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "\n", "# Get shape information from the context object", "\n", "op_in_shape", "=", "ctx", ".", "op_in_shape", "\n", "op_out_shape", "=", "ctx", ".", "op_out_shape", "\n", "extra_shape", "=", "ctx", ".", "extra_shape", "\n", "op_in_dtype", "=", "ctx", ".", "op_in_dtype", "\n", "\n", "# Check if `grad_output` is consistent with `extra_shape` and", "\n", "# `op_out_shape`", "\n", "if", "grad_output_arr", ".", "shape", "!=", "extra_shape", "+", "op_out_shape", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'expected tensor of shape {}, got shape {}'", "\n", "''", ".", "format", "(", "extra_shape", "+", "op_out_shape", ",", "grad_output_arr", ".", "shape", ")", "\n", ")", "\n", "\n", "# Evaluate the (derivative) adjoint on all inputs in a loop", "\n", "", "if", "extra_shape", ":", "\n", "# Multiple gradients: flatten extra axes, then do one entry", "\n", "# at a time", "\n", "            ", "grad_output_arr_flat_extra", "=", "grad_output_arr", ".", "reshape", "(", "\n", "(", "-", "1", ",", ")", "+", "op_out_shape", "\n", ")", "\n", "\n", "results", "=", "[", "]", "\n", "if", "operator", ".", "is_linear", ":", "\n", "                ", "for", "ograd", "in", "grad_output_arr_flat_extra", ":", "\n", "                    ", "results", ".", "append", "(", "np", ".", "asarray", "(", "operator", ".", "adjoint", "(", "ograd", ")", ")", ")", "\n", "", "", "else", ":", "\n", "# Need inputs, flattened in the same way as the gradients", "\n", "                ", "input_arr_flat_extra", "=", "input_arr", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "op_in_shape", ")", "\n", "for", "ograd", ",", "inp", "in", "zip", "(", "\n", "grad_output_arr_flat_extra", ",", "input_arr_flat_extra", "\n", ")", ":", "\n", "                    ", "results", ".", "append", "(", "\n", "np", ".", "asarray", "(", "operator", ".", "derivative", "(", "inp", ")", ".", "adjoint", "(", "ograd", ")", ")", "\n", ")", "\n", "\n", "# Stack results, reshape to the expected output shape and enforce", "\n", "# correct dtype", "\n", "", "", "result_arr", "=", "np", ".", "stack", "(", "results", ")", ".", "astype", "(", "op_in_dtype", ",", "copy", "=", "False", ")", "\n", "result_arr", "=", "result_arr", ".", "reshape", "(", "extra_shape", "+", "op_in_shape", ")", "\n", "", "else", ":", "\n", "# Single gradient: evaluate directly", "\n", "            ", "if", "operator", ".", "is_linear", ":", "\n", "                ", "result_arr", "=", "np", ".", "asarray", "(", "\n", "operator", ".", "adjoint", "(", "grad_output_arr", ")", "\n", ")", ".", "astype", "(", "op_in_dtype", ",", "copy", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "result_arr", "=", "np", ".", "asarray", "(", "\n", "operator", ".", "derivative", "(", "input_arr", ")", ".", "adjoint", "(", "grad_output_arr", ")", "\n", ")", ".", "astype", "(", "op_in_dtype", ",", "copy", "=", "False", ")", "\n", "\n", "# Apply scaling, convert to tensor and return", "\n", "", "", "if", "scaling", "!=", "1.0", ":", "\n", "            ", "result_arr", "*=", "scaling", "\n", "", "grad_input", "=", "torch", ".", "from_numpy", "(", "result_arr", ")", ".", "to", "(", "grad_output", ".", "device", ")", "\n", "return", "None", ",", "grad_input", "# return `None` for the `operator` part", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.torch_wrapper.OperatorModule.__init__": [[196, 200], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.LPD.__init__"], ["def", "__init__", "(", "self", ",", "operator", ")", ":", "\n", "        ", "\"\"\"Initialize a new instance.\"\"\"", "\n", "super", "(", "OperatorModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "operator", "=", "operator", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.torch_wrapper.OperatorModule.forward": [[201, 215], ["tuple", "len", "len", "OperatorFunction.apply", "str().strip", "ValueError", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Compute forward-pass of this module on ``x``.\n        \"\"\"", "\n", "in_shape", "=", "tuple", "(", "x", ".", "shape", ")", "\n", "in_ndim", "=", "len", "(", "in_shape", ")", "\n", "op_in_shape", "=", "self", ".", "operator", ".", "domain", ".", "shape", "\n", "op_in_ndim", "=", "len", "(", "op_in_shape", ")", "\n", "if", "in_ndim", "<=", "op_in_ndim", "or", "in_shape", "[", "-", "op_in_ndim", ":", "]", "!=", "op_in_shape", ":", "\n", "            ", "shp_str", "=", "str", "(", "op_in_shape", ")", ".", "strip", "(", "'()'", ")", "\n", "raise", "ValueError", "(", "\n", "'input tensor has wrong shape: expected (N, *, {}), got {}'", "\n", "''", ".", "format", "(", "shp_str", ",", "in_shape", ")", "\n", ")", "\n", "", "return", "OperatorFunction", ".", "apply", "(", "self", ".", "operator", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.torch_wrapper.OperatorModule.__repr__": [[216, 228], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return ``repr(self)``.\"\"\"", "\n", "op_name", "=", "self", ".", "operator", ".", "__class__", ".", "__name__", "\n", "op_in_shape", "=", "self", ".", "operator", ".", "domain", ".", "shape", "\n", "if", "len", "(", "op_in_shape", ")", "==", "1", ":", "\n", "            ", "op_in_shape", "=", "op_in_shape", "[", "0", "]", "\n", "", "op_out_shape", "=", "self", ".", "operator", ".", "range", ".", "shape", "\n", "if", "len", "(", "op_out_shape", ")", "==", "1", ":", "\n", "            ", "op_out_shape", "=", "op_out_shape", "[", "0", "]", "\n", "\n", "", "return", "'{}({}) ({} -> {})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "op_name", ",", "op_in_shape", ",", "op_out_shape", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.torch_wrapper.copy_if_zero_strides": [[231, 235], ["isinstance", "arr.copy"], "function", ["None"], ["", "", "def", "copy_if_zero_strides", "(", "arr", ")", ":", "\n", "    ", "\"\"\"Workaround for NumPy issue #9165 with 0 in arr.strides.\"\"\"", "\n", "assert", "isinstance", "(", "arr", ",", "np", ".", "ndarray", ")", "\n", "return", "arr", ".", "copy", "(", ")", "if", "0", "in", "arr", ".", "strides", "else", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.simulate_projections_for_train_and_test.compute_projection": [[21, 45], ["odl.uniform_discr", "odl.tomo.RayTransform", "odl.tomo.fbp_op", "torch_wrapper.OperatorModule().to", "torch_wrapper.OperatorModule().to", "torch_wrapper.OperatorModule().to.", "torch_wrapper.OperatorModule().to.", "odl.tomo.geometry.parallel.parallel_beam_geometry", "odl.tomo.geometry.conebeam.cone_beam_geometry", "phantom.size", "phantom.size", "torch_wrapper.OperatorModule", "torch_wrapper.OperatorModule", "torch.randn().to", "torch.randn", "fwd_op.size"], "function", ["None"], ["def", "compute_projection", "(", "phantom", ",", "num_angles", "=", "num_angles", ",", "det_shape", "=", "det_shape", ",", "space_range", "=", "space_range", ",", "geom", "=", "geom", ",", "noise_std_dev", "=", "noise_std_dev", ")", ":", "\n", "    ", "space", "=", "odl", ".", "uniform_discr", "(", "[", "-", "space_range", ",", "-", "space_range", "]", ",", "[", "space_range", ",", "space_range", "]", ",", "(", "phantom", ".", "size", "(", "2", ")", ",", "phantom", ".", "size", "(", "3", ")", ")", ",", "dtype", "=", "'float32'", ",", "weighting", "=", "1.0", ")", "\n", "if", "(", "geom", "==", "'parallel_beam'", ")", ":", "\n", "        ", "geometry", "=", "odl", ".", "tomo", ".", "geometry", ".", "parallel", ".", "parallel_beam_geometry", "(", "space", ",", "num_angles", "=", "num_angles", ",", "det_shape", "=", "det_shape", ")", "\n", "", "else", ":", "\n", "        ", "geometry", "=", "odl", ".", "tomo", ".", "geometry", ".", "conebeam", ".", "cone_beam_geometry", "(", "space", ",", "src_radius", "=", "1.6", "*", "space_range", ",", "det_radius", "=", "1.6", "*", "space_range", ",", "num_angles", "=", "num_angles", ",", "det_shape", "=", "det_shape", ")", "\n", "\n", "\n", "", "fwd_op_odl", "=", "odl", ".", "tomo", ".", "RayTransform", "(", "space", ",", "geometry", ",", "impl", "=", "'astra_cuda'", ")", "\n", "fbp_op_odl", "=", "odl", ".", "tomo", ".", "fbp_op", "(", "fwd_op_odl", ")", "\n", "\n", "fwd_op", "=", "torch_wrapper", ".", "OperatorModule", "(", "fwd_op_odl", ")", ".", "to", "(", "device", ")", "\n", "fbp_op", "=", "torch_wrapper", ".", "OperatorModule", "(", "fbp_op_odl", ")", ".", "to", "(", "device", ")", "\n", "\n", "#print('op_norm = %.4f'%(1.1 * odl.power_method_opnorm(fwd_op_odl)))", "\n", "\n", "sinogram", "=", "fwd_op", "(", "phantom", ")", "\n", "sinogram_noisy", "=", "sinogram", "+", "noise_std_dev", "*", "torch", ".", "randn", "(", "sinogram", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "fbp", "=", "fbp_op", "(", "sinogram_noisy", ")", "\n", "\n", "return", "sinogram_noisy", ",", "fbp", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.simulate_projections_for_train_and_test.compute_adjoint": [[47, 62], ["odl.uniform_discr", "odl.tomo.RayTransform", "torch_wrapper.OperatorModule().to", "torch_wrapper.OperatorModule().to.", "odl.tomo.geometry.parallel.parallel_beam_geometry", "odl.tomo.geometry.conebeam.cone_beam_geometry", "torch_wrapper.OperatorModule"], "function", ["None"], ["", "def", "compute_adjoint", "(", "sinogram", ",", "img_size", "=", "img_size", ",", "num_angles", "=", "num_angles", ",", "det_shape", "=", "det_shape", ",", "space_range", "=", "space_range", ",", "geom", "=", "geom", ",", "noise_std_dev", "=", "noise_std_dev", ")", ":", "\n", "    ", "space", "=", "odl", ".", "uniform_discr", "(", "[", "-", "space_range", ",", "-", "space_range", "]", ",", "[", "space_range", ",", "space_range", "]", ",", "(", "img_size", ",", "img_size", ")", ",", "dtype", "=", "'float32'", ",", "weighting", "=", "1.0", ")", "\n", "if", "(", "geom", "==", "'parallel_beam'", ")", ":", "\n", "        ", "geometry", "=", "odl", ".", "tomo", ".", "geometry", ".", "parallel", ".", "parallel_beam_geometry", "(", "space", ",", "num_angles", "=", "num_angles", ",", "det_shape", "=", "det_shape", ")", "\n", "", "else", ":", "\n", "        ", "geometry", "=", "odl", ".", "tomo", ".", "geometry", ".", "conebeam", ".", "cone_beam_geometry", "(", "space", ",", "src_radius", "=", "20.0", ",", "det_radius", "=", "20.0", ",", "num_angles", "=", "num_angles", ",", "det_shape", "=", "det_shape", ")", "\n", "\n", "", "fwd_op_odl", "=", "odl", ".", "tomo", ".", "RayTransform", "(", "space", ",", "geometry", ",", "impl", "=", "'astra_cuda'", ")", "\n", "adjoint_op_odl", "=", "fwd_op_odl", ".", "adjoint", "\n", "\n", "adjoint_op", "=", "torch_wrapper", ".", "OperatorModule", "(", "adjoint_op_odl", ")", ".", "to", "(", "device", ")", "\n", "\n", "x_adj", "=", "adjoint_op", "(", "sinogram", ")", "\n", "return", "x_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.mayo_utils.mayo_dataset.__init__": [[16, 24], ["torchvision.transforms.Compose", "sorted", "sorted", "sorted", "glob.glob", "glob.glob", "glob.glob", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transforms_", "=", "None", ",", "aligned", "=", "True", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transforms_", ")", "\n", "self", ".", "aligned", "=", "aligned", "\n", "\n", "self", ".", "files_A", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'%s/Sinogram'", "%", "mode", ")", "+", "'/*.*'", ")", ")", "\n", "self", ".", "files_C", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'%s/FBP'", "%", "mode", ")", "+", "'/*.*'", ")", ")", "\n", "\n", "self", ".", "files_B", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'%s/Phantom'", "%", "mode", ")", "+", "'/*.*'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.mayo_utils.mayo_dataset.__getitem__": [[27, 39], ["mayo_utils.mayo_dataset.transform", "mayo_utils.mayo_dataset.transform", "PIL.Image.fromarray", "PIL.Image.fromarray", "mayo_utils.mayo_dataset.transform", "mayo_utils.mayo_dataset.transform", "numpy.load", "numpy.load", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.load", "numpy.load", "len", "len", "random.randint", "len", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sinogram", "=", "self", ".", "transform", "(", "Image", ".", "fromarray", "(", "np", ".", "load", "(", "self", ".", "files_A", "[", "index", "%", "len", "(", "self", ".", "files_A", ")", "]", ")", ")", ")", "\n", "fbp", "=", "self", ".", "transform", "(", "Image", ".", "fromarray", "(", "np", ".", "load", "(", "self", ".", "files_C", "[", "index", "%", "len", "(", "self", ".", "files_C", ")", "]", ")", ")", ")", "\n", "\n", "if", "self", ".", "aligned", ":", "\n", "            ", "phantom", "=", "self", ".", "transform", "(", "Image", ".", "fromarray", "(", "np", ".", "load", "(", "self", ".", "files_B", "[", "index", "%", "len", "(", "self", ".", "files_B", ")", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "phantom", "=", "self", ".", "transform", "(", "Image", ".", "fromarray", "(", "np", ".", "load", "(", "self", ".", "files_B", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "files_B", ")", "-", "1", ")", "]", ")", ")", ")", "\n", "\n", "\n", "\n", "", "return", "{", "'fbp'", ":", "fbp", ",", "'phantom'", ":", "phantom", ",", "'sinogram'", ":", "sinogram", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.mayo_utils.mayo_dataset.__len__": [[40, 42], ["max", "len", "len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "[", "len", "(", "self", ".", "files_A", ")", ",", "len", "(", "self", ".", "files_B", ")", ",", "len", "(", "self", ".", "files_C", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.mayo_utils.cut_image": [[44, 48], ["numpy.maximum", "numpy.minimum"], "function", ["None"], ["", "", "def", "cut_image", "(", "image", ",", "vmin", ",", "vmax", ")", ":", "\n", "    ", "image", "=", "np", ".", "maximum", "(", "image", ",", "vmin", ")", "\n", "image", "=", "np", ".", "minimum", "(", "image", ",", "vmax", ")", "\n", "return", "image", "", "", ""]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.unrolled_adv_reg_train.compute_variational_loss": [[131, 135], ["sq_loss", "adv_reg", "fwd_op", "prior.mean"], "function", ["None"], ["def", "compute_variational_loss", "(", "adv_reg", ",", "fwd_op", ",", "image", ",", "sinogram", ",", "lambda_adv_prior", "=", "lambda_adv_prior", ")", ":", "\n", "    ", "data_loss", "=", "sq_loss", "(", "sinogram", ",", "fwd_op", "(", "image", ")", ")", "\n", "prior_plus_l2", ",", "prior", "=", "adv_reg", "(", "image", ")", "\n", "return", "data_loss", "+", "lambda_adv_prior", "*", "prior", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.ConvBlock.__init__": [[10, 17], ["torch.Module.__init__", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.LPD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "stride", "=", "1", ",", "kernel_size", "=", "5", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "pad", ",", "bias", "=", "True", ")", "]", "\n", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.ConvBlock.forward": [[18, 20], ["adversarial_reg_models.ConvBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.ConvNetClassifier.__init__": [[23, 47], ["torch.Module.__init__", "adversarial_reg_models.ConvBlock", "adversarial_reg_models.ConvBlock", "adversarial_reg_models.ConvBlock", "adversarial_reg_models.ConvBlock", "adversarial_reg_models.ConvBlock", "adversarial_reg_models.ConvBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.LPD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "1", ",", "n_filters", "=", "16", ",", "add_l2", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvNetClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "ConvBlock", "(", "in_channels", ",", "n_filters", ")", "\n", "self", ".", "conv2", "=", "ConvBlock", "(", "n_filters", ",", "2", "*", "n_filters", ")", "\n", "\n", "self", ".", "conv3", "=", "ConvBlock", "(", "2", "*", "n_filters", ",", "2", "*", "n_filters", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv4", "=", "ConvBlock", "(", "2", "*", "n_filters", ",", "4", "*", "n_filters", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv5", "=", "ConvBlock", "(", "4", "*", "n_filters", ",", "4", "*", "n_filters", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv6", "=", "ConvBlock", "(", "4", "*", "n_filters", ",", "8", "*", "n_filters", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "16", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", "=", "36992", ",", "out_features", "=", "512", ",", "bias", "=", "True", ")", "\n", "self", ".", "act1", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "in_features", "=", "512", ",", "out_features", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "add_l2", "=", "add_l2", "\n", "if", "self", ".", "add_l2", ":", "\n", "            ", "self", ".", "l2_penalty", "=", "nn", ".", "Parameter", "(", "-", "12.0", "*", "torch", ".", "ones", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.ConvNetClassifier.forward": [[49, 70], ["adversarial_reg_models.ConvNetClassifier.conv1", "adversarial_reg_models.ConvNetClassifier.conv2", "adversarial_reg_models.ConvNetClassifier.conv3", "adversarial_reg_models.ConvNetClassifier.conv4", "adversarial_reg_models.ConvNetClassifier.conv5", "adversarial_reg_models.ConvNetClassifier.conv6", "adversarial_reg_models.ConvNetClassifier.act", "adversarial_reg_models.ConvNetClassifier.act1", "adversarial_reg_models.ConvNetClassifier.fc2", "adversarial_reg_models.ConvNetClassifier.avg_pool", "adversarial_reg_models.ConvNetClassifier.fc1", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "adversarial_reg_models.ConvNetClassifier.view", "inp.size", "adversarial_reg_models.ConvNetClassifier.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "inp.view", "inp.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "# x = bs x in_channels x img_size x img_size", "\n", "        ", "inp", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "act", "(", "self", ".", "avg_pool", "(", "x", ")", ")", "\n", "\n", "z", "=", "self", ".", "act1", "(", "self", ".", "fc1", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", ")", "\n", "z", "=", "self", ".", "fc2", "(", "z", ")", "\n", "\n", "if", "self", ".", "add_l2", ":", "#add a small l2 term for coercivity", "\n", "            ", "l2_term", "=", "torch", ".", "sum", "(", "inp", ".", "view", "(", "inp", ".", "size", "(", "0", ")", ",", "-", "1", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "inp", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "z_plus_l2", "=", "z", "+", "(", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "l2_penalty", ")", ")", "*", "l2_term", "\n", "", "else", ":", "\n", "            ", "z_plus_l2", "=", "z", "\n", "\n", "", "return", "z_plus_l2", ",", "z", "# output is of size bs x 1", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.ResBlock.__init__": [[73, 85], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "adversarial_reg_models.ConvBlock", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.LPD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "n_filters", "=", "16", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "ConvBlock", "(", "in_size", ",", "n_filters", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ")", "]", "\n", "if", "downsample", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "n_filters", ",", "n_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_size", ",", "n_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "n_filters", ",", "n_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_size", ",", "n_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.ResBlock.forward": [[86, 88], ["adversarial_reg_models.ResBlock.model", "adversarial_reg_models.ResBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "+", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.ResNetClassifier.__init__": [[90, 114], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "adversarial_reg_models.ResBlock", "adversarial_reg_models.ResBlock", "adversarial_reg_models.ResBlock", "adversarial_reg_models.ResBlock", "adversarial_reg_models.ResBlock", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.LPD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "n_filters", "=", "16", ",", "add_l2", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNetClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "n_filters", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "res", "=", "ResBlock", "(", "n_filters", ",", "n_filters", ")", "\n", "\n", "self", ".", "res_down1", "=", "ResBlock", "(", "n_filters", ",", "2", "*", "n_filters", ",", "downsample", "=", "True", ")", "\n", "self", ".", "res_down2", "=", "ResBlock", "(", "2", "*", "n_filters", ",", "2", "*", "n_filters", ",", "downsample", "=", "True", ")", "\n", "self", ".", "res_down3", "=", "ResBlock", "(", "2", "*", "n_filters", ",", "4", "*", "n_filters", ",", "downsample", "=", "True", ")", "\n", "self", ".", "res_down4", "=", "ResBlock", "(", "4", "*", "n_filters", ",", "8", "*", "n_filters", ",", "downsample", "=", "True", ")", "\n", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "16", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "act", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", "=", "36992", ",", "out_features", "=", "512", ",", "bias", "=", "True", ")", "\n", "self", ".", "act1", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "in_features", "=", "512", ",", "out_features", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "\n", "self", ".", "add_l2", "=", "add_l2", "\n", "if", "self", ".", "add_l2", ":", "\n", "            ", "self", ".", "l2_penalty", "=", "nn", ".", "Parameter", "(", "-", "12.0", "*", "torch", ".", "ones", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.ResNetClassifier.forward": [[116, 138], ["adversarial_reg_models.ResNetClassifier.conv1", "adversarial_reg_models.ResNetClassifier.res", "adversarial_reg_models.ResNetClassifier.res_down1", "adversarial_reg_models.ResNetClassifier.res_down2", "adversarial_reg_models.ResNetClassifier.res_down3", "adversarial_reg_models.ResNetClassifier.res_down4", "adversarial_reg_models.ResNetClassifier.act", "adversarial_reg_models.ResNetClassifier.act1", "adversarial_reg_models.ResNetClassifier.fc2", "adversarial_reg_models.ResNetClassifier.avg_pool", "adversarial_reg_models.ResNetClassifier.fc1", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "adversarial_reg_models.ResNetClassifier.view", "inp.size", "adversarial_reg_models.ResNetClassifier.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "inp.view", "inp.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "inp", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "res", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "res_down1", "(", "x", ")", "\n", "x", "=", "self", ".", "res_down2", "(", "x", ")", "\n", "x", "=", "self", ".", "res_down3", "(", "x", ")", "\n", "x", "=", "self", ".", "res_down4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "act", "(", "self", ".", "avg_pool", "(", "x", ")", ")", "\n", "\n", "z", "=", "self", ".", "act1", "(", "self", ".", "fc1", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", ")", "\n", "z", "=", "self", ".", "fc2", "(", "z", ")", "\n", "\n", "if", "self", ".", "add_l2", ":", "#add a small l2 term for coercivity", "\n", "            ", "l2_term", "=", "torch", ".", "sum", "(", "inp", ".", "view", "(", "inp", ".", "size", "(", "0", ")", ",", "-", "1", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "inp", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "z_plus_l2", "=", "z", "+", "(", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "l2_penalty", ")", ")", "*", "l2_term", "\n", "", "else", ":", "\n", "            ", "z_plus_l2", "=", "z", "\n", "\n", "", "return", "z_plus_l2", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.cnn_data_space.__init__": [[141, 150], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.LPD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters", "=", "32", ",", "n_in_channels", "=", "3", ",", "n_out_channels", "=", "1", ",", "kernel_size", "=", "5", ")", ":", "\n", "        ", "super", "(", "cnn_data_space", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "n_in_channels", ",", "out_channels", "=", "n_filters", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "pad", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "n_filters", ",", "n_filters", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "pad", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "n_filters", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "pad", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "act1", "=", "nn", ".", "PReLU", "(", "num_parameters", "=", "1", ",", "init", "=", "0.25", ")", "\n", "self", ".", "act2", "=", "nn", ".", "PReLU", "(", "num_parameters", "=", "1", ",", "init", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.cnn_data_space.forward": [[152, 162], ["h.type.type.type", "y.type.type.type", "z.type.type.type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "adversarial_reg_models.cnn_data_space.act1", "adversarial_reg_models.cnn_data_space.act2", "adversarial_reg_models.cnn_data_space.conv3", "adversarial_reg_models.cnn_data_space.conv1", "adversarial_reg_models.cnn_data_space.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "y", ",", "z", ")", ":", "\n", "        ", "h", "=", "h", ".", "type", "(", "dtype", ")", "\n", "y", "=", "y", ".", "type", "(", "dtype", ")", "\n", "z", "=", "z", ".", "type", "(", "dtype", ")", "\n", "\n", "dh1", "=", "torch", ".", "cat", "(", "(", "h", ",", "y", ",", "z", ")", ",", "dim", "=", "1", ")", "\n", "dh2", "=", "self", ".", "act1", "(", "self", ".", "conv1", "(", "dh1", ")", ")", "\n", "dh3", "=", "self", ".", "act2", "(", "self", ".", "conv2", "(", "dh2", ")", ")", "\n", "dh4", "=", "self", ".", "conv3", "(", "dh3", ")", "\n", "return", "h", "+", "dh4", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.cnn_image_space.__init__": [[164, 173], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.LPD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters", "=", "32", ",", "n_in_channels", "=", "2", ",", "n_out_channels", "=", "1", ",", "kernel_size", "=", "5", ")", ":", "\n", "        ", "super", "(", "cnn_image_space", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "n_in_channels", ",", "out_channels", "=", "n_filters", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "pad", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "n_filters", ",", "n_filters", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "pad", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "n_filters", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "pad", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "act1", "=", "nn", ".", "PReLU", "(", "num_parameters", "=", "1", ",", "init", "=", "0.25", ")", "\n", "self", ".", "act2", "=", "nn", ".", "PReLU", "(", "num_parameters", "=", "1", ",", "init", "=", "0.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.cnn_image_space.forward": [[174, 183], ["x.type.type.type", "u.type.type.type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "adversarial_reg_models.cnn_image_space.act1", "adversarial_reg_models.cnn_image_space.act2", "adversarial_reg_models.cnn_image_space.conv3", "adversarial_reg_models.cnn_image_space.conv1", "adversarial_reg_models.cnn_image_space.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "u", ")", ":", "\n", "        ", "x", "=", "x", ".", "type", "(", "dtype", ")", "\n", "u", "=", "u", ".", "type", "(", "dtype", ")", "\n", "\n", "dx1", "=", "torch", ".", "cat", "(", "(", "x", ",", "u", ")", ",", "dim", "=", "1", ")", "\n", "dx2", "=", "self", ".", "act1", "(", "self", ".", "conv1", "(", "dx1", ")", ")", "\n", "dx3", "=", "self", ".", "act2", "(", "self", ".", "conv2", "(", "dx2", ")", ")", "\n", "dx4", "=", "self", ".", "conv3", "(", "dx3", ")", "\n", "return", "x", "+", "dx4", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.LPD.__init__": [[185, 197], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "torch.ones().to().type", "cnn_image_space().to", "cnn_data_space().to", "range", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "adversarial_reg_models.cnn_image_space", "adversarial_reg_models.cnn_data_space", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.LPD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fwd_op", ",", "adjoint_op", ",", "n_filters", "=", "32", ",", "niter", "=", "20", ",", "sigma", "=", "0.01", ",", "tau", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "LPD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fwd_op", "=", "fwd_op", "\n", "self", ".", "adjoint_op", "=", "adjoint_op", "\n", "self", ".", "niter", "=", "niter", "\n", "self", ".", "n_filters", "=", "n_filters", "\n", "\n", "self", ".", "sigma", "=", "nn", ".", "Parameter", "(", "sigma", "*", "torch", ".", "ones", "(", "self", ".", "niter", ")", ".", "to", "(", "device", ")", ".", "type", "(", "dtype", ")", ")", "\n", "self", ".", "tau", "=", "nn", ".", "Parameter", "(", "tau", "*", "torch", ".", "ones", "(", "self", ".", "niter", ")", ".", "to", "(", "device", ")", ".", "type", "(", "dtype", ")", ")", "\n", "self", ".", "cnn_image_layers", "=", "nn", ".", "ModuleList", "(", "[", "cnn_image_space", "(", "n_filters", "=", "self", ".", "n_filters", ")", ".", "to", "(", "device", ")", "for", "i", "in", "range", "(", "self", ".", "niter", ")", "]", ")", "\n", "self", ".", "cnn_data_layers", "=", "nn", ".", "ModuleList", "(", "[", "cnn_data_space", "(", "n_filters", "=", "self", ".", "n_filters", ")", ".", "to", "(", "device", ")", "for", "i", "in", "range", "(", "self", ".", "niter", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.LPD.forward": [[198, 207], ["torch.zeros_like().type", "torch.zeros_like().type", "torch.zeros_like().type", "torch.zeros_like().type", "torch.zeros_like().type", "torch.zeros_like().type", "torch.zeros_like().type", "torch.zeros_like().type", "torch.zeros_like().type", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "adversarial_reg_models.LPD.fwd_op", "adversarial_reg_models.LPD.adjoint_op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y", ",", "x_init", ")", ":", "\n", "        ", "x", "=", "x_init", "\n", "#h = self.fwd_op(x_init)", "\n", "#h = y", "\n", "h", "=", "torch", ".", "zeros_like", "(", "y", ")", ".", "type", "(", "dtype", ")", "\n", "for", "iteration", "in", "range", "(", "self", ".", "niter", ")", ":", "\n", "            ", "h", "=", "self", ".", "cnn_data_layers", "[", "iteration", "]", "(", "h", ",", "y", ",", "self", ".", "sigma", "[", "iteration", "]", "*", "self", ".", "fwd_op", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "cnn_image_layers", "[", "iteration", "]", "(", "x", ",", "self", ".", "tau", "[", "iteration", "]", "*", "self", ".", "adjoint_op", "(", "h", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.adversarial_reg_models.compute_gradient_penalty": [[209, 225], ["torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "network", "torch.cuda.FloatTensor().requires_grad_", "torch.cuda.FloatTensor().requires_grad_", "torch.cuda.FloatTensor().requires_grad_", "gradients.view.view", "numpy.random.random", "torch.grad", "gradients.view.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "real_samples.size", "numpy.ones", "gradients.view.norm"], "function", ["None"], ["", "", "def", "compute_gradient_penalty", "(", "network", ",", "real_samples", ",", "fake_samples", ")", ":", "\n", "    ", "\"\"\"Calculates the gradient penalty loss for WGAN\"\"\"", "\n", "# Random weight term for interpolation between real and fake samples", "\n", "alpha", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "random", ".", "random", "(", "(", "real_samples", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ")", ")", "\n", "# Get random interpolation between real and fake samples", "\n", "interpolates", "=", "(", "alpha", "*", "real_samples", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_samples", ")", ")", ".", "requires_grad_", "(", "True", ")", "\n", "#validity = net(interpolates)", "\n", "out_plus_l2", ",", "out", "=", "network", "(", "interpolates", ")", "\n", "fake", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "ones", "(", "out", ".", "shape", ")", ")", ".", "requires_grad_", "(", "False", ")", "\n", "# Get gradient w.r.t. interpolates", "\n", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "out", ",", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "fake", ",", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "gradients", "=", "gradients", ".", "view", "(", "gradients", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "gradient_penalty", "", "", ""]], "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.unrolled_adv_reg_eval.var_optimizer": [[70, 103], ["x_init.clone().detach().requires_grad_().to", "torch.optim.SGD", "x_ground_truth.cpu().detach().numpy", "numpy.arange", "x_init.clone().detach().requires_grad_().to.cpu().detach().numpy().squeeze", "mayo_utils.cut_image", "skimage.measure.compare_psnr", "skimage.measure.compare_ssim", "numpy.max", "numpy.min", "torch.optim.SGD.zero_grad", "fwd_op", "torch.sqrt", "adv_reg", "variational_loss.backward", "torch.optim.SGD.step", "x_init.clone().detach().requires_grad_().to.cpu().detach().numpy().squeeze", "skimage.measure.compare_psnr", "skimage.measure.compare_ssim", "numpy.squeeze", "numpy.squeeze", "x_init.clone().detach().requires_grad_", "x_ground_truth.cpu().detach", "sq_loss", "prior.mean", "numpy.squeeze", "numpy.squeeze", "print", "x_init.clone().detach().requires_grad_().to.cpu().detach().numpy", "x_init.clone().detach().requires_grad_().to.cpu().detach().numpy", "variational_loss.item", "regularizer.item", "x_init.clone().detach", "x_ground_truth.cpu", "x_init.clone().detach().requires_grad_().to.cpu().detach", "x_init.clone().detach().requires_grad_().to.cpu().detach", "x_init.clone", "x_init.clone().detach().requires_grad_().to.cpu", "x_init.clone().detach().requires_grad_().to.cpu"], "function", ["home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.mayo_utils.cut_image", "home.repos.pwc.inspect_result.Subhadip-1_unrolling_meets_data_driven_regularization.None.torch_wrapper.OperatorFunction.backward"], ["def", "var_optimizer", "(", "adv_reg", ",", "x_init", ",", "x_ground_truth", ",", "y_test", ",", "n_iter", ",", "lambda_var", ",", "lr", "=", "0.50", ")", ":", "\n", "    ", "x_out", "=", "x_init", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", ".", "to", "(", "device", ")", "\n", "x_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "x_out", "]", ",", "lr", "=", "lr", ")", "\n", "x_test_np", "=", "x_ground_truth", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "data_range", "=", "np", ".", "max", "(", "x_test_np", ")", "-", "np", ".", "min", "(", "x_test_np", ")", "\n", "\n", "for", "iteration", "in", "np", ".", "arange", "(", "n_iter", ")", ":", "\n", "        ", "x_optimizer", ".", "zero_grad", "(", ")", "\n", "y_out", "=", "fwd_op", "(", "x_out", ")", "\n", "data_loss", "=", "torch", ".", "sqrt", "(", "sq_loss", "(", "y_test", ",", "y_out", ")", ")", "#RMSE works better than MSE", "\n", "\n", "####### compute the regularization term ############", "\n", "prior_plus_l2", ",", "prior", "=", "adv_reg", "(", "x_out", ")", "\n", "regularizer", "=", "lambda_var", "*", "prior", ".", "mean", "(", ")", "\n", "variational_loss", "=", "data_loss", "+", "regularizer", "\n", "variational_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "x_optimizer", ".", "step", "(", ")", "\n", "\n", "x_np", "=", "x_out", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "psnr", "=", "compare_psnr", "(", "np", ".", "squeeze", "(", "x_test_np", ")", ",", "x_np", ",", "data_range", "=", "data_range", ")", "\n", "ssim", "=", "compare_ssim", "(", "np", ".", "squeeze", "(", "x_test_np", ")", ",", "x_np", ",", "data_range", "=", "data_range", ")", "\n", "\n", "if", "(", "iteration", "%", "20", "==", "0", ")", ":", "\n", "            ", "recon_log", "=", "'[iter: {:d}/{:d}\\t PSNR: {:.4f}, SSIM: {:.4f}, var_loss: {:.6f}, regularization: AR {:.6f}\\n]'", ".", "format", "(", "iteration", ",", "n_iter", ",", "psnr", ",", "ssim", ",", "variational_loss", ".", "item", "(", ")", ",", "regularizer", ".", "item", "(", ")", ")", "\n", "print", "(", "recon_log", ")", "\n", "\n", "\n", "", "", "x_np", "=", "x_out", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "x_np", "=", "mayo_utils", ".", "cut_image", "(", "x_np", ",", "vmin", "=", "0.0", ",", "vmax", "=", "1.0", ")", "\n", "psnr", "=", "compare_psnr", "(", "np", ".", "squeeze", "(", "x_test_np", ")", ",", "x_np", ",", "data_range", "=", "data_range", ")", "\n", "ssim", "=", "compare_ssim", "(", "np", ".", "squeeze", "(", "x_test_np", ")", ",", "x_np", ",", "data_range", "=", "data_range", ")", "\n", "return", "x_np", "\n", "\n"]]}