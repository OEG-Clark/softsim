{"home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.None.fusion_methods.generate_dataset": [[15, 99], ["numpy.array", "numpy.nan_to_num", "numpy.array", "numpy.nan_to_num", "numpy.array", "numpy.array", "NotImplementedError", "numpy.array", "numpy.array", "numpy.array", "numpy.random.shuffle", "numpy.zeros", "np.array.append", "splitted_features.extend", "numpy.random.shuffle", "np.array.append", "np.array.append", "np.array.append", "numpy.zeros", "np.array.append", "print", "numpy.zeros", "numpy.expand_dims", "part_list.append", "sequenced_features.append", "fusion_methods.chunks", "numpy.array", "numpy.array", "np.zeros.flatten", "len", "numpy.all", "part_list.copy", "numpy.all", "len", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.None.fusion_methods.chunks"], ["def", "generate_dataset", "(", "features", ",", "grid_size", ",", "shuffle", "=", "True", ",", "audio_weight", "=", "1", ",", "video_weight", "=", "1", ",", "context", "=", "0", ")", ":", "\n", "    ", "small_constant", "=", "1e-6", "\n", "\n", "if", "context", "==", "0", ":", "\n", "        ", "if", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "features", ")", "\n", "", "video_features", "=", "np", ".", "array", "(", "[", "feat", "[", "0", "]", "*", "video_weight", "for", "feat", "in", "features", "]", ")", "\n", "video_features", "[", "video_features", "==", "0", "]", "=", "small_constant", "\n", "video_features", "=", "np", ".", "nan_to_num", "(", "video_features", ",", "nan", "=", "small_constant", ")", "\n", "\n", "audio_features", "=", "np", ".", "array", "(", "[", "feat", "[", "1", "]", "*", "audio_weight", "for", "feat", "in", "features", "]", ")", "\n", "audio_features", "[", "audio_features", "==", "0", "]", "=", "small_constant", "\n", "video_features", "=", "np", ".", "nan_to_num", "(", "video_features", ",", "nan", "=", "small_constant", ")", "\n", "\n", "index_target", "=", "np", ".", "array", "(", "[", "feat", "[", "2", "]", "for", "feat", "in", "features", "]", ")", "\n", "\n", "position_target", "=", "[", "]", "\n", "for", "feat", "in", "features", ":", "\n", "            ", "target", "=", "np", ".", "zeros", "(", "grid_size", ")", "\n", "for", "point", "in", "feat", "[", "3", "]", ":", "\n", "                ", "if", "not", "np", ".", "all", "(", "point", "==", "0", ")", ":", "\n", "                    ", "target", "[", "(", "int", "(", "point", "[", "0", "]", ")", ",", "int", "(", "point", "[", "1", "]", ")", ")", "]", "+=", "1", "\n", "", "", "position_target", ".", "append", "(", "np", ".", "expand_dims", "(", "target", ",", "2", ")", ")", "\n", "", "position_target", "=", "np", ".", "array", "(", "position_target", ")", "\n", "position_target", "[", "position_target", "==", "0", "]", "=", "small_constant", "\n", "# position_target = np.array([feat[3].flatten() for feat in features])", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Adding Context Information is not yet implemented\"", ")", "\n", "\n", "# Sorting Features by sequence no.", "\n", "sequenced_features", "=", "[", "]", "\n", "part_list", "=", "[", "]", "\n", "current_sequence", "=", "features", "[", "0", "]", "[", "4", "]", "\n", "for", "feat", "in", "features", ":", "\n", "            ", "if", "feat", "[", "4", "]", "==", "current_sequence", ":", "\n", "                ", "part_list", ".", "append", "(", "feat", ")", "\n", "", "else", ":", "\n", "                ", "current_sequence", "=", "feat", "[", "4", "]", "\n", "sequenced_features", ".", "append", "(", "part_list", ".", "copy", "(", ")", ")", "\n", "part_list", "=", "[", "]", "\n", "\n", "# Splitting sequences in even chunks", "\n", "", "", "splitted_features", "=", "[", "]", "\n", "for", "sequence", "in", "sequenced_features", ":", "\n", "            ", "splitted_features", ".", "extend", "(", "chunks", "(", "sequence", ",", "context", ")", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "splitted_features", ")", "\n", "", "video_features", "=", "[", "]", "\n", "audio_features", "=", "[", "]", "\n", "index_target", "=", "[", "]", "\n", "position_target", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "chunk", "in", "splitted_features", ":", "\n", "# Extracting video features", "\n", "            ", "video_features", ".", "append", "(", "np", ".", "array", "(", "[", "frame", "[", "0", "]", "*", "video_weight", "for", "frame", "in", "chunk", "]", ")", ")", "\n", "\n", "# Extracting audio features", "\n", "audio_features", ".", "append", "(", "np", ".", "array", "(", "[", "frame", "[", "1", "]", "*", "audio_weight", "for", "frame", "in", "chunk", "]", ")", ")", "\n", "\n", "# Extracting speaker number", "\n", "index_target", ".", "append", "(", "chunk", "[", "context", "]", "[", "2", "]", ")", "\n", "\n", "# Extracting target", "\n", "target", "=", "np", ".", "zeros", "(", "grid_size", ")", "\n", "for", "point", "in", "chunk", "[", "context", "]", "[", "3", "]", ":", "\n", "                ", "if", "not", "np", ".", "all", "(", "point", "==", "0", ")", ":", "\n", "                    ", "target", "[", "(", "int", "(", "point", "[", "0", "]", ")", ",", "int", "(", "point", "[", "1", "]", ")", ")", "]", "+=", "1", "\n", "", "", "position_target", ".", "append", "(", "target", ".", "flatten", "(", ")", ")", "\n", "\n", "i", "+=", "1", "\n", "print", "(", "\"\\rcalculated: {0:.2f}%\"", ".", "format", "(", "100", "*", "i", "/", "len", "(", "splitted_features", ")", ")", ",", "end", "=", "''", ")", "\n", "\n", "# Converting Lists to arrays", "\n", "", "video_features", "=", "np", ".", "array", "(", "video_features", ")", "\n", "video_features", "[", "video_features", "==", "0", "]", "=", "small_constant", "\n", "\n", "audio_features", "=", "np", ".", "array", "(", "audio_features", ")", "\n", "audio_features", "[", "audio_features", "==", "0", "]", "=", "small_constant", "\n", "\n", "position_target", "=", "np", ".", "array", "(", "position_target", ")", "\n", "position_target", "[", "position_target", "==", "0", "]", "=", "small_constant", "\n", "\n", "", "return", "[", "audio_features", ",", "video_features", "]", ",", "[", "index_target", ",", "position_target", ",", "np", ".", "zeros", "(", "len", "(", "index_target", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.None.fusion_methods.chunks": [[101, 103], ["range", "range", "len"], "function", ["None"], ["", "def", "chunks", "(", "l", ",", "context", ")", ":", "\n", "    ", "return", "[", "[", "l", "[", "i", "-", "context", "+", "j", "]", "for", "j", "in", "range", "(", "context", "+", "1", ")", "]", "for", "i", "in", "range", "(", "context", ",", "len", "(", "l", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.None.fusion_methods.dummy_loss": [[105, 107], ["keras.zeros"], "function", ["None"], ["", "def", "dummy_loss", "(", "y_pred", ",", "y_true", ")", ":", "\n", "    ", "return", "K", ".", "zeros", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.None.fusion_methods.scalar_log_func": [[109, 112], ["keras.layers.Reshape", "keras.layers.Add", "keras.log", "keras.log"], "function", ["None"], ["", "def", "scalar_log_func", "(", "x", ")", ":", "\n", "    ", "lamb", "=", "Reshape", "(", "(", "1", ",", "1", ")", ")", "(", "x", "[", "2", "]", ")", "\n", "return", "Add", "(", ")", "(", "[", "lamb", "*", "K", ".", "log", "(", "x", "[", "0", "]", ")", ",", "(", "1", "-", "lamb", ")", "*", "K", ".", "log", "(", "x", "[", "1", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.None.fusion_methods.matrix_log_func": [[114, 118], ["keras.layers.Add", "keras.log", "keras.log"], "function", ["None"], ["", "def", "matrix_log_func", "(", "x", ")", ":", "\n", "    ", "lamb_a", "=", "x", "[", "2", "]", "\n", "lamb_v", "=", "x", "[", "3", "]", "\n", "return", "Add", "(", ")", "(", "[", "lamb_a", "*", "K", ".", "log", "(", "x", "[", "0", "]", ")", ",", "lamb_v", "*", "K", ".", "log", "(", "x", "[", "1", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.None.fusion_methods.naive_log_func": [[120, 122], ["keras.layers.Add", "keras.log", "keras.log"], "function", ["None"], ["", "def", "naive_log_func", "(", "x", ")", ":", "\n", "    ", "return", "Add", "(", ")", "(", "[", "K", ".", "log", "(", "x", "[", "0", "]", ")", ",", "K", ".", "log", "(", "x", "[", "1", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.None.fusion_methods.get_model": [[124, 218], ["keras.layers.Input", "keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.models.Model.summary", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.core.Activation", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.core.Activation", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.core.Activation", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.core.Activation", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.core.Activation", "keras.layers.Conv2DTranspose", "keras.layers.Add", "keras.layers.core.Activation", "keras.layers.Add", "keras.layers.core.Activation", "keras.layers.Add", "keras.layers.core.Activation", "keras.layers.Add", "keras.layers.core.Activation", "keras.layers.Conv2DTranspose", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.core.Activation", "keras.layers.Dense", "keras.layers.core.Activation", "keras.layers.Flatten", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.core.Activation", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.core.Activation", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.core.Activation", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.core.Activation", "keras.layers.Concatenate", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Lambda", "keras.layers.Reshape", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.layers.BatchNormalization", "keras.optimizers.Adam", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose"], "function", ["None"], ["", "def", "get_model", "(", "grid_size", ",", "lr", ",", "fusion_type", "=", "\"matrix\"", ")", ":", "\n", "# Defining Model", "\n", "    ", "audio_in", "=", "Input", "(", "shape", "=", "grid_size", ")", "\n", "video_in", "=", "Input", "(", "shape", "=", "grid_size", ")", "\n", "\n", "if", "fusion_type", "==", "\"scalar\"", ":", "\n", "        ", "aud_flat", "=", "Flatten", "(", ")", "(", "audio_in", ")", "\n", "vid_flat", "=", "Flatten", "(", ")", "(", "video_in", ")", "\n", "\n", "aud_dense", "=", "Dense", "(", "64", ")", "(", "aud_flat", ")", "\n", "aud_dense", "=", "BatchNormalization", "(", ")", "(", "aud_dense", ")", "\n", "aud_dense", "=", "Activation", "(", "'relu'", ")", "(", "aud_dense", ")", "\n", "aud_dense", "=", "Dense", "(", "32", ")", "(", "aud_dense", ")", "\n", "aud_dense", "=", "BatchNormalization", "(", ")", "(", "aud_dense", ")", "\n", "aud_dense", "=", "Activation", "(", "'relu'", ")", "(", "aud_dense", ")", "\n", "\n", "vid_dense", "=", "Dense", "(", "64", ")", "(", "vid_flat", ")", "\n", "vid_dense", "=", "BatchNormalization", "(", ")", "(", "vid_dense", ")", "\n", "vid_dense", "=", "Activation", "(", "'relu'", ")", "(", "vid_dense", ")", "\n", "vid_dense", "=", "Dense", "(", "32", ")", "(", "vid_dense", ")", "\n", "vid_dense", "=", "BatchNormalization", "(", ")", "(", "vid_dense", ")", "\n", "vid_dense", "=", "Activation", "(", "'relu'", ")", "(", "vid_dense", ")", "\n", "\n", "aud_vid_comb", "=", "Concatenate", "(", ")", "(", "[", "aud_dense", ",", "vid_dense", "]", ")", "\n", "lamb", "=", "Dense", "(", "16", ",", "activation", "=", "'relu'", ")", "(", "aud_vid_comb", ")", "\n", "lamb", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "lamb", ")", "\n", "\n", "inputs", "=", "Lambda", "(", "scalar_log_func", ")", "(", "[", "audio_in", ",", "video_in", ",", "lamb", "]", ")", "\n", "inputs", "=", "Reshape", "(", "(", "grid_size", "[", "0", "]", ",", "grid_size", "[", "1", "]", ",", "1", ")", ")", "(", "inputs", ")", "\n", "\n", "", "if", "fusion_type", "==", "\"matrix\"", ":", "\n", "        ", "audio_conv", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "audio_in", ")", "\n", "audio_conv", "=", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "audio_conv", ")", "\n", "lamb_a", "=", "Conv2D", "(", "1", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ")", "(", "audio_conv", ")", "\n", "\n", "video_conv", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "video_in", ")", "\n", "video_conv", "=", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "video_conv", ")", "\n", "lamb_v", "=", "Conv2D", "(", "1", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ")", "(", "video_conv", ")", "\n", "\n", "inputs", "=", "Lambda", "(", "matrix_log_func", ")", "(", "[", "audio_in", ",", "video_in", ",", "lamb_a", ",", "lamb_v", "]", ")", "\n", "", "else", ":", "\n", "        ", "inputs", "=", "Lambda", "(", "naive_log_func", ")", "(", "[", "audio_in", ",", "video_in", "]", ")", "\n", "\n", "", "cnn1", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "inputs", ")", "\n", "cnn1", "=", "BatchNormalization", "(", ")", "(", "cnn1", ")", "\n", "cnn1", "=", "Activation", "(", "'relu'", ")", "(", "cnn1", ")", "\n", "\n", "cnn2", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "cnn1", ")", "\n", "cnn2", "=", "BatchNormalization", "(", ")", "(", "cnn2", ")", "\n", "cnn2", "=", "Activation", "(", "'relu'", ")", "(", "cnn2", ")", "\n", "\n", "cnn3", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "cnn2", ")", "\n", "cnn3", "=", "BatchNormalization", "(", ")", "(", "cnn3", ")", "\n", "cnn3", "=", "Activation", "(", "'relu'", ")", "(", "cnn3", ")", "\n", "\n", "cnn4", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "cnn3", ")", "\n", "cnn4", "=", "BatchNormalization", "(", ")", "(", "cnn4", ")", "\n", "cnn4", "=", "Activation", "(", "'relu'", ")", "(", "cnn4", ")", "\n", "\n", "cnn5", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "cnn4", ")", "\n", "cnn5", "=", "BatchNormalization", "(", ")", "(", "cnn5", ")", "\n", "cnn5", "=", "Activation", "(", "'relu'", ")", "(", "cnn5", ")", "\n", "\n", "dnn1", "=", "Conv2DTranspose", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "cnn5", ")", "\n", "\n", "dnn2", "=", "Add", "(", ")", "(", "[", "dnn1", ",", "Conv2DTranspose", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "cnn4", ")", "]", ")", "\n", "dnn2", "=", "Activation", "(", "'relu'", ")", "(", "BatchNormalization", "(", ")", "(", "dnn2", ")", ")", "\n", "\n", "dnn3", "=", "Add", "(", ")", "(", "[", "dnn2", ",", "Conv2DTranspose", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "cnn3", ")", "]", ")", "\n", "dnn3", "=", "Activation", "(", "'relu'", ")", "(", "BatchNormalization", "(", ")", "(", "dnn3", ")", ")", "\n", "\n", "dnn4", "=", "Add", "(", ")", "(", "[", "dnn3", ",", "Conv2DTranspose", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "cnn2", ")", "]", ")", "\n", "dnn4", "=", "Activation", "(", "'relu'", ")", "(", "BatchNormalization", "(", ")", "(", "dnn4", ")", ")", "\n", "\n", "dnn5", "=", "Add", "(", ")", "(", "[", "dnn4", ",", "Conv2DTranspose", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "cnn1", ")", "]", ")", "\n", "dnn5", "=", "Activation", "(", "'relu'", ")", "(", "BatchNormalization", "(", ")", "(", "dnn5", ")", ")", "\n", "\n", "out", "=", "Conv2DTranspose", "(", "1", ",", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "name", "=", "\"doa\"", ",", "activation", "=", "'relu'", ")", "(", "dnn5", ")", "\n", "\n", "# Branching", "\n", "input_neurons", "=", "Flatten", "(", ")", "(", "out", ")", "\n", "speakers", "=", "Dense", "(", "32", ")", "(", "input_neurons", ")", "\n", "speakers", "=", "Dropout", "(", "rate", "=", "0.4", ")", "(", "speakers", ")", "\n", "speakers", "=", "Activation", "(", "'relu'", ")", "(", "speakers", ")", "\n", "speakers", "=", "Dense", "(", "4", ")", "(", "speakers", ")", "\n", "speakers", "=", "Activation", "(", "'sigmoid'", ",", "name", "=", "\"speaker\"", ")", "(", "speakers", ")", "\n", "\n", "doa", "=", "out", "\n", "\n", "# Building Model", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "audio_in", ",", "video_in", "]", ",", "outputs", "=", "[", "speakers", ",", "doa", "]", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "Adam", "(", "lr", "=", "lr", ")", ",", "loss", "=", "[", "'binary_crossentropy'", ",", "'mean_squared_error'", "]", ")", "\n", "model", ".", "summary", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.AudioLocalizer.__init__": [[19, 32], ["tensorflow.ConfigProto", "tensorflow.Session", "keras.backend.tensorflow_backend.set_session", "keras.models.load_model", "tensorflow.GPUOptions"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_path", "=", "\"model/audio_recognizer_1920.h5\"", ",", "resolution", "=", "(", "450", ",", "720", ")", ",", "grid_size", "=", "(", "10", ",", "12", ")", ",", "fft", "=", "True", ")", ":", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "per_process_gpu_memory_fraction", "=", "0.8", ")", "\n", "# device_count = {'GPU': 1}", "\n", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "session", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "set_session", "(", "session", ")", "\n", "self", ".", "fft", "=", "fft", "\n", "self", ".", "model", "=", "load_model", "(", "model_path", ")", "\n", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "pixel_per_cell", "=", "(", "self", ".", "resolution", "[", "0", "]", "//", "self", ".", "grid_size", "[", "0", "]", ",", "self", ".", "resolution", "[", "1", "]", "//", "self", ".", "grid_size", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.AudioLocalizer.predict_direction": [[33, 40], ["numpy.reshape", "models.AudioLocalizer._get_stft", "models.AudioLocalizer.model.predict", "models.AudioLocalizer._prediction_to_heatmap", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._get_stft", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.AudioLocalizer._prediction_to_heatmap"], ["", "def", "predict_direction", "(", "self", ",", "audio_input", ",", "heatmap", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "fft", ":", "\n", "            ", "audio_input", "=", "self", ".", "_get_stft", "(", "audio_input", ")", "\n", "", "prediction", "=", "np", ".", "reshape", "(", "self", ".", "model", ".", "predict", "(", "np", ".", "expand_dims", "(", "audio_input", ",", "0", ")", ",", "batch_size", "=", "1", ")", ",", "self", ".", "grid_size", ")", "\n", "if", "heatmap", ":", "\n", "            ", "prediction", "=", "self", ".", "_prediction_to_heatmap", "(", "prediction", ")", "\n", "", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.AudioLocalizer._prediction_to_heatmap": [[41, 44], ["cv2.resize", "spatial_stream_weights.utils.swap"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.swap"], ["", "def", "_prediction_to_heatmap", "(", "self", ",", "prediction", ")", ":", "\n", "        ", "upscaled_prediction", "=", "cv2", ".", "resize", "(", "prediction", ",", "ut", ".", "swap", "(", "self", ".", "resolution", ")", ")", "\n", "return", "upscaled_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.AudioLocalizer._prediction_to_bb": [[45, 52], ["p.reshape().numpy.reshape().numpy.reshape().numpy", "spatial_stream_weights.utils.grid_to_point", "numpy.unravel_index", "p.reshape().numpy.reshape().numpy.reshape", "p.reshape().numpy.reshape().numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.grid_to_point"], ["", "def", "_prediction_to_bb", "(", "self", ",", "prediction", ")", ":", "\n", "        ", "bb", "=", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", ")", "\n", "for", "p", "in", "prediction", ".", "data", ":", "\n", "            ", "p", "=", "p", ".", "reshape", "(", "self", ".", "grid_size", ")", ".", "numpy", "(", ")", "\n", "p_idx", "=", "ut", ".", "grid_to_point", "(", "np", ".", "unravel_index", "(", "p", ".", "argmax", "(", ")", ",", "p", ".", "shape", ")", ",", "self", ".", "grid_size", ",", "self", ".", "resolution", ")", "\n", "bb", "=", "(", "[", "p_idx", "[", "0", "]", ",", "p_idx", "[", "1", "]", ",", "self", ".", "pixel_per_cell", "[", "1", "]", ",", "self", ".", "pixel_per_cell", "[", "0", "]", "]", ",", ")", "\n", "", "return", "bb", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.AudioLocalizer._get_stft": [[53, 66], ["spatial_stream_weights.utils.sec_to_samples", "numpy.moveaxis", "scipy.signal.stft", "numpy.array", "signal[].astype", "range", "list", "itertools.chain.from_iterable", "numpy.abs", "numpy.angle"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.sec_to_samples"], ["", "@", "staticmethod", "\n", "def", "_get_stft", "(", "signal", ",", "sampling_rate", "=", "48000", ",", "num_channels", "=", "6", ")", ":", "\n", "        ", "n_fft", "=", "2048", "\n", "l_window_sec", "=", "0.04", "\n", "l_window_samples", "=", "ut", ".", "sec_to_samples", "(", "l_window_sec", ",", "sampling_rate", ")", "\n", "overlap_samples", "=", "l_window_samples", "//", "2", "\n", "\n", "stfts", "=", "[", "stft", "(", "signal", "[", ":", ",", "i", "]", ".", "astype", "(", "float", ")", ",", "sampling_rate", ",", "nfft", "=", "n_fft", ",", "\n", "nperseg", "=", "l_window_samples", ",", "noverlap", "=", "overlap_samples", ")", "\n", "for", "i", "in", "range", "(", "num_channels", ")", "]", "\n", "x", "=", "np", ".", "moveaxis", "(", "np", ".", "array", "(", "list", "(", "chain", ".", "from_iterable", "(", "(", "np", ".", "abs", "(", "channel", "[", "2", "]", "[", "1", ":", "]", ".", "T", ")", ",", "np", ".", "angle", "(", "channel", "[", "2", "]", ")", "[", "1", ":", "]", ".", "T", ")", "\n", "for", "channel", "in", "stfts", ")", ")", ")", ",", "0", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.AudioLocalizer.clear": [[67, 75], ["keras.backend.tensorflow_backend.clear_session", "range", "numba.cuda.select_device", "numba.cuda.close", "gc.collect"], "methods", ["None"], ["", "def", "clear", "(", "self", ",", "clear_model", "=", "False", ")", ":", "\n", "        ", "clear_session", "(", ")", "\n", "if", "clear_model", ":", "\n", "            ", "del", "self", ".", "model", "\n", "cuda", ".", "select_device", "(", "0", ")", "\n", "cuda", ".", "close", "(", ")", "\n", "", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "            ", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.VideoLocalizer.__init__": [[78, 87], ["argparse.Namespace", "yolo.yolo.YOLO"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "args", ".", "model", "=", "'model-weights/YOLO_Face.h5'", "\n", "args", ".", "anchors", "=", "'cfg/yolo_anchors.txt'", "\n", "args", ".", "classes", "=", "'cfg/face_classes.txt'", "\n", "args", ".", "score", "=", "0", "\n", "args", ".", "iou", "=", "0.5", "\n", "args", ".", "img_size", "=", "(", "832", ",", "832", ")", "\n", "self", ".", "yolo_detector", "=", "YOLO", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.VideoLocalizer.predict_faces": [[88, 93], ["models.VideoLocalizer._detect_faces", "len"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.VideoLocalizer._detect_faces"], ["", "def", "predict_faces", "(", "self", ",", "frame", ")", ":", "\n", "        ", "bbs", "=", "self", ".", "_detect_faces", "(", "frame", ")", "\n", "if", "len", "(", "bbs", ")", "==", "0", ":", "\n", "            ", "bbs", "=", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", ")", "\n", "", "return", "bbs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.VideoLocalizer._detect_faces": [[94, 107], ["PIL.Image.fromarray", "yolo.yolo.detect_img", "cv2.cvtColor", "max", "max", "min", "min", "numpy.array", "numpy.floor().astype", "numpy.floor().astype", "numpy.floor().astype", "numpy.floor().astype", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "def", "_detect_faces", "(", "self", ",", "input_frame", ")", ":", "\n", "        ", "pil_frame", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "input_frame", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "bbs", ",", "_", "=", "detect_img", "(", "self", ".", "yolo_detector", ",", "True", ",", "pil_frame", ")", "\n", "index", "=", "0", "\n", "for", "bb", "in", "bbs", ":", "\n", "            ", "top", ",", "left", ",", "bottom", ",", "right", "=", "bb", "\n", "top", "=", "max", "(", "0", ",", "np", ".", "floor", "(", "top", "+", "0.5", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "left", "=", "max", "(", "0", ",", "np", ".", "floor", "(", "left", "+", "0.5", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "bottom", "=", "min", "(", "pil_frame", ".", "size", "[", "1", "]", ",", "np", ".", "floor", "(", "bottom", "+", "0.5", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "right", "=", "min", "(", "pil_frame", ".", "size", "[", "0", "]", ",", "np", ".", "floor", "(", "right", "+", "0.5", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "bbs", "[", "index", "]", "=", "np", ".", "array", "(", "[", "left", ",", "top", ",", "right", "-", "left", ",", "bottom", "-", "top", "]", ")", "\n", "index", "=", "index", "+", "1", "\n", "", "return", "bbs", "", "", "", ""]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.compute_evaluation_metrics": [[18, 33], ["outputs.cpu().detach().numpy().flatten.cpu().detach().numpy().flatten", "targets.cpu().detach().numpy().flatten.cpu().detach().numpy().flatten", "numpy.abs", "len", "numpy.mean", "numpy.sum", "numpy.rad2deg", "outputs.cpu().detach().numpy().flatten.cpu().detach().numpy", "targets.cpu().detach().numpy().flatten.cpu().detach().numpy", "numpy.arctan2", "numpy.sin", "numpy.cos", "outputs.cpu().detach().numpy().flatten.cpu().detach", "targets.cpu().detach().numpy().flatten.cpu().detach", "outputs.cpu().detach().numpy().flatten.cpu", "targets.cpu().detach().numpy().flatten.cpu"], "function", ["None"], ["def", "compute_evaluation_metrics", "(", "outputs", ",", "targets", ",", "detection_threshold", "=", "5", ")", ":", "\n", "    ", "outputs", "=", "outputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "targets", "=", "targets", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n", "residuals", "=", "outputs", "-", "targets", "\n", "\n", "azimuth_errors", "=", "np", ".", "abs", "(", "np", ".", "rad2deg", "(", "np", ".", "arctan2", "(", "np", ".", "sin", "(", "residuals", ")", ",", "np", ".", "cos", "(", "residuals", ")", ")", ")", ")", "\n", "num_samples", "=", "len", "(", "azimuth_errors", ")", "\n", "\n", "crmse", "=", "np", ".", "mean", "(", "azimuth_errors", ")", "\n", "\n", "true_positives", "=", "np", ".", "sum", "(", "azimuth_errors", "<", "detection_threshold", ")", "\n", "accuracy", "=", "true_positives", "/", "num_samples", "\n", "\n", "return", "crmse", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.convert_bb": [[35, 41], ["None"], "function", ["None"], ["", "def", "convert_bb", "(", "x", ",", "y", ",", "w", ",", "h", ")", ":", "\n", "    ", "x_min", "=", "x", "\n", "x_max", "=", "x", "+", "w", "\n", "y_min", "=", "y", "\n", "y_max", "=", "y", "+", "h", "\n", "return", "x_min", ",", "y_min", ",", "x_max", ",", "y_max", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.convert_annotation": [[43, 49], ["utils.convert_bb", "output.append"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.convert_bb"], ["", "def", "convert_annotation", "(", "gt", ")", ":", "\n", "    ", "output", "=", "[", "[", "]", "]", "\n", "for", "speaker", "in", "gt", ":", "\n", "        ", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "=", "convert_bb", "(", "speaker", "[", "1", "]", ",", "speaker", "[", "2", "]", ",", "speaker", "[", "3", "]", ",", "speaker", "[", "4", "]", ")", "\n", "output", ".", "append", "(", "[", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.face_detected_correctly": [[51, 57], ["utils.calculate_iou", "utils.convert_bb", "utils.convert_bb"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.calculate_iou", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.convert_bb", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.convert_bb"], ["", "def", "face_detected_correctly", "(", "gt", ",", "predicted", ",", "threshold", ")", ":", "\n", "    ", "if", "calculate_iou", "(", "convert_bb", "(", "gt", "[", "0", "]", ",", "gt", "[", "1", "]", ",", "gt", "[", "2", "]", ",", "gt", "[", "3", "]", ")", ",", "\n", "convert_bb", "(", "predicted", "[", "0", "]", ",", "predicted", "[", "1", "]", ",", "predicted", "[", "2", "]", ",", "predicted", "[", "3", "]", ")", ")", ">", "threshold", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.calculate_iou": [[60, 69], ["shapely.geometry.box", "shapely.geometry.box", "all", "all", "shapely.geometry.box.intersection", "shapely.geometry.box.union"], "function", ["None"], ["", "", "def", "calculate_iou", "(", "box_1", ",", "box_2", ")", ":", "\n", "    ", "if", "all", "(", "item", "==", "0", "for", "item", "in", "box_1", ")", "and", "all", "(", "item", "==", "0", "for", "item", "in", "box_2", ")", ":", "\n", "        ", "return", "1", "\n", "", "poly_1", "=", "box", "(", "box_1", "[", "0", "]", ",", "box_1", "[", "1", "]", ",", "box_1", "[", "2", "]", ",", "box_1", "[", "3", "]", ")", "\n", "poly_2", "=", "box", "(", "box_2", "[", "0", "]", ",", "box_2", "[", "1", "]", ",", "box_2", "[", "2", "]", ",", "box_2", "[", "3", "]", ")", "\n", "intersection", "=", "poly_1", ".", "intersection", "(", "poly_2", ")", ".", "area", "\n", "union", "=", "poly_1", ".", "union", "(", "poly_2", ")", ".", "area", "\n", "iou", "=", "intersection", "/", "union", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.get_rating": [[71, 81], ["all", "utils.calculate_iou", "all", "utils.convert_bb", "utils.convert_bb"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.calculate_iou", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.convert_bb", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.convert_bb"], ["", "def", "get_rating", "(", "gt", ",", "predicted", ",", "threshold", ",", "yolo", "=", "False", ")", ":", "\n", "    ", "if", "all", "(", "item", "==", "0", "for", "item", "in", "predicted", ")", "and", "not", "all", "(", "item", "==", "0", "for", "item", "in", "gt", ")", ":", "\n", "        ", "return", "'FN'", "\n", "", "else", ":", "\n", "        ", "iou", "=", "calculate_iou", "(", "convert_bb", "(", "gt", "[", "0", "]", ",", "gt", "[", "1", "]", ",", "gt", "[", "2", "]", ",", "gt", "[", "3", "]", ")", ",", "\n", "convert_bb", "(", "predicted", "[", "0", "]", ",", "predicted", "[", "1", "]", ",", "predicted", "[", "2", "]", ",", "predicted", "[", "3", "]", ")", ")", "\n", "if", "iou", ">=", "threshold", ":", "\n", "            ", "return", "'TP'", "\n", "", "else", ":", "\n", "            ", "return", "'FP'", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.pad_image": [[83, 105], ["numpy.pad", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "", "", "def", "pad_image", "(", "image", ",", "multiple", ")", ":", "\n", "    ", "pad_0", "=", "(", "0", ",", "0", ")", "\n", "pad_1", "=", "(", "0", ",", "0", ")", "\n", "\n", "if", "not", "(", "image", ".", "shape", "[", "0", "]", "%", "multiple", "==", "0", ")", ":", "\n", "        ", "size_0", "=", "image", ".", "shape", "[", "0", "]", "+", "(", "multiple", "-", "image", ".", "shape", "[", "0", "]", "%", "multiple", ")", "\n", "pad_size_0", "=", "size_0", "-", "image", ".", "shape", "[", "0", "]", "\n", "if", "pad_size_0", "%", "2", "==", "0", ":", "\n", "            ", "pad_0", "=", "(", "int", "(", "pad_size_0", "/", "2", ")", ",", "int", "(", "pad_size_0", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "pad_0", "=", "(", "int", "(", "np", ".", "floor", "(", "pad_size_0", "/", "2", ")", "+", "1", ")", ",", "int", "(", "np", ".", "floor", "(", "pad_size_0", "/", "2", ")", ")", ")", "\n", "\n", "", "", "if", "not", "(", "image", ".", "shape", "[", "1", "]", "%", "multiple", "==", "0", ")", ":", "\n", "        ", "size_1", "=", "image", ".", "shape", "[", "1", "]", "+", "(", "multiple", "-", "image", ".", "shape", "[", "1", "]", "%", "multiple", ")", "\n", "pad_size_1", "=", "size_1", "-", "image", ".", "shape", "[", "1", "]", "\n", "if", "pad_size_1", "%", "2", "==", "0", ":", "\n", "            ", "pad_1", "=", "(", "int", "(", "pad_size_1", "/", "2", ")", ",", "int", "(", "pad_size_1", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "pad_1", "=", "(", "int", "(", "np", ".", "floor", "(", "pad_size_1", "/", "2", ")", "+", "1", ")", ",", "int", "(", "np", ".", "floor", "(", "pad_size_1", "/", "2", ")", ")", ")", "\n", "\n", "", "", "image", "=", "np", ".", "pad", "(", "image", ",", "(", "pad_0", ",", "pad_1", ")", ",", "mode", "=", "'constant'", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.calculate_precision": [[107, 109], ["None"], "function", ["None"], ["", "def", "calculate_precision", "(", "TP", ",", "FP", ")", ":", "\n", "    ", "return", "TP", "/", "(", "TP", "+", "FP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.calculate_recall": [[111, 113], ["None"], "function", ["None"], ["", "def", "calculate_recall", "(", "TP", ",", "FN", ")", ":", "\n", "    ", "return", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.sec_to_samples": [[115, 118], ["int"], "function", ["None"], ["", "def", "sec_to_samples", "(", "sec", ",", "sampling_rate", ")", ":", "\n", "    ", "out", "=", "int", "(", "sec", "*", "sampling_rate", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.point_to_grid": [[120, 126], ["utils.cap_cell", "int", "int"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.cap_cell"], ["", "def", "point_to_grid", "(", "point", ",", "grid_size", ",", "resolution", ")", ":", "\n", "    ", "pixel_per_cell", "=", "(", "resolution", "[", "0", "]", "/", "grid_size", "[", "0", "]", ",", "resolution", "[", "1", "]", "/", "grid_size", "[", "1", "]", ")", "\n", "cell", "=", "(", "int", "(", "point", "[", "0", "]", "//", "pixel_per_cell", "[", "0", "]", ")", ",", "\n", "int", "(", "point", "[", "1", "]", "//", "pixel_per_cell", "[", "1", "]", ")", ")", "\n", "cell", "=", "cap_cell", "(", "cell", ",", "grid_size", ")", "\n", "return", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.cap_cell": [[128, 134], ["None"], "function", ["None"], ["", "def", "cap_cell", "(", "cell", ",", "grid_size", ")", ":", "\n", "    ", "if", "cell", "[", "0", "]", ">", "grid_size", "[", "0", "]", "-", "1", ":", "\n", "        ", "cell", "=", "(", "grid_size", "[", "0", "]", "-", "1", ",", "cell", "[", "1", "]", ")", "\n", "", "if", "cell", "[", "1", "]", ">", "grid_size", "[", "1", "]", "-", "1", ":", "\n", "        ", "cell", "=", "(", "cell", "[", "0", "]", ",", "grid_size", "[", "1", "]", "-", "1", ")", "\n", "", "return", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.grid_to_point": [[136, 140], ["int", "int"], "function", ["None"], ["", "def", "grid_to_point", "(", "cell", ",", "grid_size", ",", "resolution", ")", ":", "\n", "    ", "pixel_per_cell", "=", "(", "resolution", "[", "0", "]", "//", "grid_size", "[", "0", "]", ",", "resolution", "[", "1", "]", "//", "grid_size", "[", "1", "]", ")", "\n", "point", "=", "(", "int", "(", "cell", "[", "0", "]", "*", "pixel_per_cell", "[", "0", "]", ")", ",", "int", "(", "cell", "[", "1", "]", "*", "pixel_per_cell", "[", "1", "]", ")", ")", "\n", "return", "point", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.bb_to_center": [[142, 144], ["None"], "function", ["None"], ["", "def", "bb_to_center", "(", "x", ",", "y", ",", "w", ",", "h", ")", ":", "\n", "    ", "return", "x", "+", "h", "/", "2", ",", "y", "+", "w", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.calculate_distance": [[146, 150], ["numpy.array", "numpy.array", "numpy.linalg.norm"], "function", ["None"], ["", "def", "calculate_distance", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "predicted", "=", "np", ".", "array", "(", "predicted", ")", "\n", "target", "=", "np", ".", "array", "(", "target", ")", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "predicted", "-", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.calculate_error": [[152, 163], ["true.to.to", "pred.to.to", "zip", "t.reshape().numpy.reshape().numpy", "p.reshape().numpy.reshape().numpy", "numpy.unravel_index", "numpy.unravel_index", "t.reshape().numpy.argmax", "p.reshape().numpy.argmax", "numpy.sqrt", "t.reshape().numpy.reshape", "p.reshape().numpy.reshape", "numpy.power", "numpy.power"], "function", ["None"], ["", "def", "calculate_error", "(", "true", ",", "pred", ",", "grid_size", ")", ":", "\n", "    ", "true", "=", "true", ".", "to", "(", "'cpu'", ")", "\n", "pred", "=", "pred", ".", "to", "(", "'cpu'", ")", "\n", "error", "=", "0", "\n", "for", "t", ",", "p", "in", "zip", "(", "true", ".", "data", ",", "pred", ".", "data", ")", ":", "\n", "        ", "t", "=", "t", ".", "reshape", "(", "grid_size", ")", ".", "numpy", "(", ")", "\n", "p", "=", "p", ".", "reshape", "(", "grid_size", ")", ".", "numpy", "(", ")", "\n", "t_idx", "=", "np", ".", "unravel_index", "(", "t", ".", "argmax", "(", ")", ",", "t", ".", "shape", ")", "\n", "p_idx", "=", "np", ".", "unravel_index", "(", "p", ".", "argmax", "(", ")", ",", "p", ".", "shape", ")", "\n", "error", "=", "error", "+", "np", ".", "sqrt", "(", "np", ".", "power", "(", "t_idx", "[", "0", "]", "-", "p_idx", "[", "0", "]", ",", "2", ")", "+", "np", ".", "power", "(", "t_idx", "[", "1", "]", "-", "p_idx", "[", "1", "]", ",", "2", ")", ")", "\n", "", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.normalize_sound": [[165, 169], ["x.astype.astype", "x.astype.min", "x.astype.max", "x.astype.min"], "function", ["None"], ["", "def", "normalize_sound", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "astype", "(", "np", ".", "float", ")", "\n", "x", "=", "(", "x", "-", "x", ".", "min", "(", ")", ")", "/", "(", "x", ".", "max", "(", ")", "-", "x", ".", "min", "(", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.apply_fft": [[171, 183], ["utils.sec_to_samples", "torch.from_numpy", "scipy.signal.stft", "numpy.moveaxis", "signal[].astype", "range", "numpy.array", "list", "itertools.chain.from_iterable", "numpy.abs", "numpy.angle"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.sec_to_samples"], ["", "def", "apply_fft", "(", "signal", ",", "sampling_rate", ",", "num_channels", ")", ":", "\n", "    ", "n_fft", "=", "256", "\n", "l_window_sec", "=", "0.005", "\n", "l_window_samples", "=", "sec_to_samples", "(", "l_window_sec", ",", "sampling_rate", ")", "\n", "overlap_samples", "=", "l_window_samples", "//", "4", "\n", "# hop_samples = ut.sec_to_samples(l_window_sec-overlap_sec, sampling_rate)", "\n", "stfts", "=", "[", "stft", "(", "signal", "[", ":", ",", "i", "]", ".", "astype", "(", "float", ")", ",", "sampling_rate", ",", "nfft", "=", "n_fft", ",", "\n", "nperseg", "=", "l_window_samples", ",", "noverlap", "=", "overlap_samples", ")", "\n", "for", "i", "in", "range", "(", "num_channels", ")", "]", "\n", "x", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "np", ".", "array", "(", "list", "(", "chain", ".", "from_iterable", "(", "\n", "(", "np", ".", "abs", "(", "channel", "[", "2", "]", "[", "1", ":", "]", ".", "T", ")", ",", "np", ".", "angle", "(", "channel", "[", "2", "]", ")", "[", "1", ":", "]", ".", "T", ")", "for", "channel", "in", "stfts", ")", ")", ")", ",", "1", ",", "2", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.transform_dataset": [[185, 226], ["print", "print", "joblib.load.get_data_array", "joblib.load.get_data_array", "joblib.load.get_data_array", "print", "joblib.load", "joblib.load", "joblib.load", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "open", "pickle.dump", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal.get_data_array", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal.get_data_array", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal.get_data_array"], ["", "def", "transform_dataset", "(", "dataset", "=", "None", ",", "dataset_path", "=", "\"cached_files\"", ",", "sets", "=", "(", "\"train\"", ",", "\"test\"", ",", "\"val\"", ")", ")", ":", "\n", "    ", "if", "dataset", "is", "None", ":", "\n", "# Restoring dataset from file:", "\n", "        ", "print", "(", "\"Loading dataset from: \"", ",", "dataset_path", ")", "\n", "if", "\"train\"", "in", "sets", ":", "\n", "            ", "train_set", "=", "joblib", ".", "load", "(", "dataset_path", "+", "\"/train_set\"", ")", "\n", "", "else", ":", "\n", "            ", "train_set", "=", "None", "\n", "", "if", "\"test\"", "in", "sets", ":", "\n", "            ", "test_set", "=", "joblib", ".", "load", "(", "dataset_path", "+", "\"/test_set\"", ")", "\n", "", "else", ":", "\n", "            ", "test_set", "=", "None", "\n", "", "if", "\"val\"", "in", "sets", ":", "\n", "            ", "val_set", "=", "joblib", ".", "load", "(", "dataset_path", "+", "\"/val_set\"", ")", "\n", "", "else", ":", "\n", "            ", "val_set", "=", "None", "\n", "", "", "else", ":", "\n", "        ", "train_set", "=", "dataset", "[", "0", "]", "\n", "test_set", "=", "dataset", "[", "1", "]", "\n", "val_set", "=", "dataset", "[", "2", "]", "\n", "\n", "print", "(", "\"Converting Pytorch dataset to Keras Format.\"", ")", "\n", "train_data", "=", "train_set", ".", "get_data_array", "(", ")", "\n", "test_data", "=", "test_set", ".", "get_data_array", "(", ")", "\n", "val_data", "=", "val_set", ".", "get_data_array", "(", ")", "\n", "\n", "train_set", "=", "(", "np", ".", "array", "(", "[", "np", ".", "squeeze", "(", "tup", "[", "0", "]", ")", "for", "tup", "in", "train_data", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "np", ".", "squeeze", "(", "tup", "[", "2", "]", ")", "for", "tup", "in", "train_data", "]", ")", ")", "\n", "\n", "test_set", "=", "(", "np", ".", "array", "(", "[", "np", ".", "squeeze", "(", "tup", "[", "0", "]", ")", "for", "tup", "in", "test_data", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "np", ".", "squeeze", "(", "tup", "[", "2", "]", ")", "for", "tup", "in", "test_data", "]", ")", ")", "\n", "\n", "val_set", "=", "(", "np", ".", "array", "(", "[", "np", ".", "squeeze", "(", "tup", "[", "0", "]", ")", "for", "tup", "in", "val_data", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "np", ".", "squeeze", "(", "tup", "[", "2", "]", ")", "for", "tup", "in", "val_data", "]", ")", ")", "\n", "\n", "# Saving dataset to Cache", "\n", "print", "(", "\"Caching Dataset to: \"", ",", "dataset_path", ")", "\n", "with", "open", "(", "dataset_path", ",", "'wb+'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "train_set", ",", "test_set", ",", "val_set", "]", ",", "f", ",", "protocol", "=", "4", ")", "\n", "\n", "", "", "return", "train_set", ",", "test_set", ",", "val_set", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.swap": [[228, 230], ["None"], "function", ["None"], ["", "def", "swap", "(", "tup", ")", ":", "\n", "    ", "return", "tup", "[", "1", "]", ",", "tup", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.extract_target_table": [[232, 242], ["numpy.zeros", "numpy.zeros", "range", "numpy.unravel_index", "heatmap.argmax", "numpy.count_nonzero"], "function", ["None"], ["", "def", "extract_target_table", "(", "heatmap", ")", ":", "\n", "    ", "positions", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ")", "\n", "persons_visible", "=", "np", ".", "zeros", "(", "4", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "index", "=", "np", ".", "unravel_index", "(", "heatmap", ".", "argmax", "(", ")", ",", "heatmap", ".", "shape", ")", "\n", "if", "heatmap", "[", "index", "]", ">", "0", "and", "np", ".", "count_nonzero", "(", "index", ")", ">", "0", ":", "\n", "            ", "heatmap", "[", "index", "]", "=", "0", "\n", "positions", "[", "i", "]", "=", "index", "\n", "persons_visible", "[", "i", "]", "=", "1", "\n", "", "", "return", "persons_visible", ",", "positions", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.mark_cell": [[244, 248], ["utils.point_to_grid", "utils.bb_to_center"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.point_to_grid", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.bb_to_center"], ["", "def", "mark_cell", "(", "target", ",", "x", ",", "y", ",", "w", ",", "h", ",", "grid_size", ",", "resolution", ")", ":", "\n", "    ", "cell", "=", "point_to_grid", "(", "bb_to_center", "(", "x", ",", "y", ",", "h", ",", "w", ")", ",", "grid_size", ",", "resolution", ")", "\n", "target", "[", "cell", "]", "=", "target", "[", "cell", "]", "+", "1", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.detect_faces": [[250, 263], ["PIL.Image.fromarray", "yolo.yolo.detect_img", "cv2.cvtColor", "max", "max", "min", "min", "numpy.array", "numpy.floor().astype", "numpy.floor().astype", "numpy.floor().astype", "numpy.floor().astype", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "def", "detect_faces", "(", "input_frame", ",", "yolo_detector", ")", ":", "\n", "    ", "pil_frame", "=", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "input_frame", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "bbs", ",", "_", "=", "detect_img", "(", "yolo_detector", ",", "True", ",", "pil_frame", ")", "\n", "index", "=", "0", "\n", "for", "bb", "in", "bbs", ":", "\n", "        ", "top", ",", "left", ",", "bottom", ",", "right", "=", "bb", "\n", "top", "=", "max", "(", "0", ",", "np", ".", "floor", "(", "top", "+", "0.5", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "left", "=", "max", "(", "0", ",", "np", ".", "floor", "(", "left", "+", "0.5", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "bottom", "=", "min", "(", "pil_frame", ".", "size", "[", "1", "]", ",", "np", ".", "floor", "(", "bottom", "+", "0.5", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "right", "=", "min", "(", "pil_frame", ".", "size", "[", "0", "]", ",", "np", ".", "floor", "(", "right", "+", "0.5", ")", ".", "astype", "(", "'int32'", ")", ")", "\n", "bbs", "[", "index", "]", "=", "np", ".", "array", "(", "[", "left", ",", "top", ",", "right", "-", "left", ",", "bottom", "-", "top", "]", ")", "\n", "index", "=", "index", "+", "1", "\n", "", "return", "bbs", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.get_audio_features": [[265, 289], ["spatial_stream_weights.models.AudioLocalizer", "len", "numpy.reshape", "utils.extract_target_table", "spatial_stream_weights.models.AudioLocalizer.predict_direction", "train_output.append", "print", "data[].split"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.extract_target_table", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.AudioLocalizer.predict_direction"], ["", "def", "get_audio_features", "(", "data_array", ",", "grid_size", ")", ":", "\n", "# Get Raw Data", "\n", "    ", "train_output", "=", "[", "]", "\n", "\n", "# Creating Audio Localizer", "\n", "predictor", "=", "AudioLocalizer", "(", "grid_size", "=", "grid_size", ",", "fft", "=", "False", ")", "\n", "\n", "# Extract Features and Labels", "\n", "counter", "=", "0", "\n", "total", "=", "len", "(", "data_array", ")", "\n", "for", "data", "in", "data_array", ":", "\n", "\n", "# Getting Target data", "\n", "        ", "true_label", "=", "np", ".", "reshape", "(", "data", "[", "2", "]", ",", "grid_size", ")", "\n", "persons_visible", ",", "positions", "=", "extract_target_table", "(", "true_label", ")", "\n", "\n", "# Prediction from Audio", "\n", "audio_prediction", "=", "predictor", ".", "predict_direction", "(", "data", "[", "0", "]", ",", "heatmap", "=", "False", ")", "\n", "\n", "train_output", ".", "append", "(", "(", "audio_prediction", ",", "persons_visible", ",", "positions", ",", "data", "[", "3", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", "[", "3", ":", "]", ")", ")", "\n", "\n", "counter", "+=", "1", "\n", "print", "(", "\"\\rcalculated: {0:.2f}%\"", ".", "format", "(", "100", "*", "counter", "/", "total", ")", ",", "end", "=", "''", ")", "\n", "", "return", "train_output", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.get_video_features": [[291, 315], ["argparse.Namespace", "yolo.yolo.YOLO", "len", "range", "utils.detect_faces", "numpy.zeros", "print", "numpy.squeeze().astype", "utils.mark_cell", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.detect_faces", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.mark_cell"], ["", "def", "get_video_features", "(", "input_array", ",", "output_array", ",", "grid_size", ",", "resolution", ")", ":", "\n", "# Creating  YOLO detector", "\n", "    ", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "args", ".", "model", "=", "'model-weights/YOLO_Face.h5'", "\n", "args", ".", "anchors", "=", "'cfg/yolo_anchors.txt'", "\n", "args", ".", "classes", "=", "'cfg/face_classes.txt'", "\n", "args", ".", "score", "=", "0.5", "\n", "args", ".", "iou", "=", "0.45", "\n", "args", ".", "img_size", "=", "(", "832", ",", "832", ")", "\n", "yolo_detector", "=", "YOLO", "(", "args", ")", "\n", "\n", "total", "=", "len", "(", "input_array", ")", "\n", "for", "i", "in", "range", "(", "total", ")", ":", "\n", "# Prediction from Video", "\n", "        ", "data", "=", "input_array", "[", "i", "]", "\n", "faces_frame", "=", "detect_faces", "(", "np", ".", "squeeze", "(", "data", "[", "1", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "yolo_detector", ")", "\n", "video_prediction", "=", "np", ".", "zeros", "(", "grid_size", ")", "\n", "for", "bb", "in", "faces_frame", ":", "\n", "            ", "video_prediction", "=", "mark_cell", "(", "video_prediction", ",", "bb", "[", "1", "]", ",", "bb", "[", "0", "]", ",", "bb", "[", "2", "]", ",", "bb", "[", "3", "]", ",", "grid_size", ",", "resolution", ")", "\n", "", "output_array", "[", "i", "]", "=", "(", "video_prediction", ",", ")", "+", "output_array", "[", "i", "]", "\n", "\n", "print", "(", "\"\\rcalculated: {0:.2f}%\"", ".", "format", "(", "100", "*", "(", "i", "+", "1", ")", "/", "total", ")", ",", "end", "=", "''", ")", "\n", "\n", "", "return", "output_array", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.get_speaker_number": [[317, 324], ["numpy.full", "len", "len", "numpy.array", "np.full.resize", "numpy.where"], "function", ["None"], ["", "def", "get_speaker_number", "(", "array", ")", ":", "\n", "    ", "speakers", "=", "np", ".", "full", "(", "len", "(", "np", ".", "where", "(", "array", ">", "0.5", ")", "[", "0", "]", ")", ",", "1", ")", "\n", "if", "len", "(", "speakers", ")", ">=", "4", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "speakers", ".", "resize", "(", "4", ",", "refcheck", "=", "False", ")", "\n", "return", "speakers", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.calculate_metrics": [[326, 360], ["numpy.squeeze", "len", "len", "numpy.argwhere", "numpy.argwhere", "numpy.squeeze", "numpy.squeeze", "range", "range", "len", "numpy.argmax", "numpy.unravel_index", "targets.append", "numpy.argmax", "numpy.unravel_index", "utils.coord_in_range"], "function", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.coord_in_range"], ["", "", "def", "calculate_metrics", "(", "test_list", ",", "grid_size", ",", "threshold", "=", "0.5", ")", ":", "\n", "    ", "counter", "=", "0", "\n", "accuracy", "=", "0", "\n", "total_speakers", "=", "0", "\n", "for", "pred", "in", "test_list", ":", "\n", "# Frame recall", "\n", "        ", "prediction", "=", "np", ".", "squeeze", "(", "pred", "[", "0", "]", "[", "0", "]", ")", "\n", "target", "=", "pred", "[", "1", "]", "\n", "prediction", "[", "prediction", "<", "threshold", "]", "=", "0", "\n", "speaker_predicted", "=", "len", "(", "np", ".", "argwhere", "(", "prediction", ")", ")", "\n", "speaker_target", "=", "len", "(", "np", ".", "argwhere", "(", "target", ")", ")", "\n", "total_speakers", "+=", "speaker_target", "\n", "\n", "if", "speaker_target", "==", "speaker_predicted", ":", "\n", "            ", "counter", "+=", "1", "\n", "# binary frame accuracy", "\n", "prediction_image", "=", "np", ".", "squeeze", "(", "pred", "[", "0", "]", "[", "1", "]", ")", "\n", "target_image", "=", "np", ".", "squeeze", "(", "pred", "[", "2", "]", ")", "\n", "targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "speaker_target", ")", ":", "\n", "                ", "ind", "=", "np", ".", "argmax", "(", "target_image", ",", "axis", "=", "None", ")", "\n", "ind", "=", "np", ".", "unravel_index", "(", "ind", ",", "grid_size", ")", "\n", "target_image", "[", "ind", "]", "=", "0", "\n", "targets", ".", "append", "(", "ind", ")", "\n", "", "for", "i", "in", "range", "(", "speaker_predicted", ")", ":", "\n", "                ", "ind", "=", "np", ".", "argmax", "(", "prediction_image", ",", "axis", "=", "None", ")", "\n", "ind", "=", "np", ".", "unravel_index", "(", "ind", ",", "grid_size", ")", "\n", "prediction_image", "[", "ind", "]", "=", "0", "\n", "for", "target", "in", "targets", ":", "\n", "                    ", "if", "coord_in_range", "(", "ind", ",", "target", ")", ":", "\n", "                        ", "accuracy", "+=", "1", "\n", "break", "\n", "\n", "", "", "", "", "", "return", "counter", "/", "len", "(", "test_list", ")", ",", "accuracy", "/", "total_speakers", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.coord_in_range": [[362, 367], ["None"], "function", ["None"], ["", "def", "coord_in_range", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "if", "(", "target", "[", "0", "]", "-", "1", "<=", "predicted", "[", "0", "]", "<=", "target", "[", "0", "]", "+", "1", ")", "and", "(", "target", "[", "1", "]", "-", "1", "<=", "predicted", "[", "1", "]", "<=", "target", "[", "1", "]", "+", "1", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR.__init__": [[21, 37], ["datasets.AVDIAR._get_sequence_paths"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._get_sequence_paths"], ["def", "__init__", "(", "self", ",", "root", ":", "str", ",", "number_speakers", ":", "int", ",", "\n", "sample_length", ":", "float", "=", "5", ",", "test_set", ":", "bool", "=", "False", ",", "rgb", ":", "bool", "=", "False", ",", "room_ids", ":", "tuple", "=", "(", "1", ",", "2", ",", "3", ")", ",", "fft", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Constructor of the AVDIAR_TRAIN class\n        :param root: path to the root folder\n        :param number_speakers: number of speakers the dataset should contain\n        :param sample_length: length of video samples in seconds\n        \"\"\"", "\n", "self", ".", "test_set", "=", "test_set", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "number_speakers", "=", "number_speakers", "\n", "self", ".", "sample_length", "=", "sample_length", "\n", "self", ".", "room_ids", "=", "room_ids", "\n", "self", ".", "dirs", "=", "self", ".", "_get_sequence_paths", "(", ")", "\n", "self", ".", "rgb", "=", "rgb", "\n", "self", ".", "fft", "=", "fft", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_sequence_paths": [[38, 53], ["list", "os.path.join", "os.listdir", "open", "json.load", "os.path.join", "paths.remove", "int", "path.split"], "methods", ["None"], ["", "def", "_get_sequence_paths", "(", "self", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Function that returns the paths to all subfolders in the root directory as a list\n        :return: path list\n        \"\"\"", "\n", "paths", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "path", ")", "for", "path", "in", "os", ".", "listdir", "(", "self", ".", "root", ")", "\n", "if", "(", "int", "(", "path", ".", "split", "(", "'-'", ")", "[", "1", "]", "[", "0", "]", ")", "==", "self", ".", "number_speakers", ")", "or", "(", "self", ".", "number_speakers", "==", "-", "1", ")", "]", "\n", "# Check for Room IDs only leaving the paths where the Room IDs match", "\n", "room_ids", "=", "list", "(", "self", ".", "room_ids", ")", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'summary.json'", ")", ")", "as", "json_file", ":", "\n", "                ", "summary", "=", "json", ".", "load", "(", "json_file", ")", "\n", "if", "not", "summary", "[", "'CalibrationID'", "]", "in", "room_ids", ":", "\n", "                    ", "paths", ".", "remove", "(", "path", ")", "\n", "", "", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_video_sequence": [[54, 100], ["cv2.VideoCapture", "range", "cv2.VideoCapture.release", "numpy.zeros", "numpy.zeros", "os.path.join", "cv2.VideoCapture.isOpened", "IOError", "range", "cv2.VideoCapture.read", "cv2.VideoCapture.read", "IOError", "int", "int", "int", "int", "cv2.cvtColor"], "methods", ["None"], ["", "def", "_get_video_sequence", "(", "self", ",", "summary", ":", "dict", ",", "path", ":", "str", ",", "sample_length_frames", ":", "int", ",", "\n", "start_frame", ":", "int", ",", "length_frames", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Reads in a sequence of a video inside the specified folder, starting at the given start frame with a specified\n        length.\n        :param summary: dict containing the meta information summary\n        :param path: path to the sample subfolder\n        :param sample_length_frames: total length of the sequence as a number of frames\n        :param start_frame: starting frame\n        :param length_frames: total number of frames of the video file\n        :return: video sequence as numpy array\n        \"\"\"", "\n", "# Preallocate memory", "\n", "resolution", "=", "summary", "[", "\"Image_Resoultion_WH\"", "]", "\n", "if", "not", "self", ".", "rgb", ":", "\n", "            ", "frames", "=", "np", ".", "zeros", "(", "(", "sample_length_frames", ",", "int", "(", "resolution", "[", "1", "]", ")", ",", "int", "(", "resolution", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "frames", "=", "np", ".", "zeros", "(", "(", "sample_length_frames", ",", "int", "(", "resolution", "[", "1", "]", ")", ",", "int", "(", "resolution", "[", "0", "]", ")", ",", "3", ")", ")", "\n", "\n", "# Opening video file", "\n", "", "cap", "=", "cv2", ".", "VideoCapture", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"Video/\"", "+", "summary", "[", "\"SequenceName\"", "]", "+", "\"_CAM1.mp4\"", ")", ")", "\n", "if", "not", "cap", ".", "isOpened", "(", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"Error opening video stream or file: \"", ",", "path", ")", "\n", "\n", "# forwarding to start frame", "\n", "", "if", "not", "start_frame", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "length_frames", "+", "start_frame", ")", ":", "\n", "                ", "_", ",", "_", "=", "cap", ".", "read", "(", ")", "\n", "if", "i", "==", "start_frame", "-", "1", ":", "\n", "                    ", "break", "\n", "\n", "# picking out frames", "\n", "", "", "", "for", "i", "in", "range", "(", "sample_length_frames", ")", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "\n", "if", "ret", ":", "\n", "                ", "if", "not", "self", ".", "rgb", ":", "\n", "                    ", "frames", "[", "i", "]", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "", "else", ":", "\n", "                    ", "frames", "[", "i", "]", "=", "frame", "\n", "", "", "else", ":", "\n", "                ", "raise", "IOError", "(", "\"Error opening video frame: \"", ",", "frame", ")", "\n", "\n", "# Close file and return video sequence", "\n", "", "", "cap", ".", "release", "(", ")", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_annotation": [[101, 162], ["open", "csv.reader", "csv.reader.__next__", "numpy.zeros", "open.close", "os.path.join", "int", "range", "numpy.array", "range", "int", "numpy.array", "int", "numpy.array", "int", "numpy.array", "int", "float", "float", "float", "float", "int", "float", "float", "float", "float", "int", "int", "int", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "_get_annotation", "(", "self", ",", "path", ":", "str", ",", "sample_length_frames", ":", "int", ",", "start_frame", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Reads the annotation file and returns the annotation for the specified frames\n        :param path: path to the sample subfolder\n        :param sample_length_frames: total length of the sequence as a number of frames\n        :param start_frame: starting frame\n        :return: annotation as numpy array in the format: [frame_no, spaker_no, bb_left, bb_top, bb_width, bb_height]\n        \"\"\"", "\n", "# Reading csv file", "\n", "file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"GroundTruth/face_bb.txt\"", ")", ",", "'r'", ")", "\n", "csv_file", "=", "csv", ".", "reader", "(", "file", ",", "delimiter", "=", "','", ")", "\n", "\n", "# Reading first file to determine the first annotated frame", "\n", "first_row", "=", "csv_file", ".", "__next__", "(", ")", "\n", "\n", "# Preallocate annotation array", "\n", "face_bbs", "=", "np", ".", "zeros", "(", "(", "sample_length_frames", ",", "self", ".", "number_speakers", ",", "5", ")", ")", "\n", "frame_count", "=", "0", "\n", "\n", "speaker_counter", "=", "0", "\n", "# If sequence starts before the speaker enters the video the array is zero padded", "\n", "if", "int", "(", "first_row", "[", "0", "]", ")", ">", "start_frame", ":", "\n", "            ", "for", "_", "in", "range", "(", "int", "(", "first_row", "[", "0", "]", ")", "-", "start_frame", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "number_speakers", ")", ":", "\n", "                    ", "face_bbs", "[", "frame_count", ",", "j", "]", "=", "np", ".", "array", "(", "[", "start_frame", "+", "frame_count", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "", "frame_count", "=", "frame_count", "+", "1", "\n", "# Entering the first frame into the array", "\n", "", "face_bbs", "[", "int", "(", "first_row", "[", "0", "]", ")", ",", "0", "]", "=", "np", ".", "array", "(", "[", "int", "(", "first_row", "[", "0", "]", ")", ",", "float", "(", "first_row", "[", "2", "]", ")", ",", "float", "(", "first_row", "[", "3", "]", ")", ",", "float", "(", "first_row", "[", "4", "]", ")", ",", "float", "(", "first_row", "[", "5", "]", ")", "]", ")", "\n", "if", "self", ".", "number_speakers", "==", "1", ":", "\n", "                ", "frame_count", "=", "frame_count", "+", "1", "\n", "", "else", ":", "\n", "                ", "speaker_counter", "=", "speaker_counter", "+", "1", "\n", "\n", "# If the sequence starts with the first annotated frame the this frame is put into the output array", "\n", "", "", "elif", "int", "(", "first_row", "[", "0", "]", ")", "==", "start_frame", ":", "\n", "            ", "face_bbs", "[", "0", ",", "speaker_counter", "]", "=", "np", ".", "array", "(", "[", "start_frame", ",", "float", "(", "first_row", "[", "2", "]", ")", ",", "float", "(", "first_row", "[", "3", "]", ")", ",", "float", "(", "first_row", "[", "4", "]", ")", ",", "float", "(", "first_row", "[", "5", "]", ")", "]", ")", "\n", "if", "self", ".", "number_speakers", "==", "1", ":", "\n", "                ", "frame_count", "=", "frame_count", "+", "1", "\n", "", "else", ":", "\n", "                ", "speaker_counter", "=", "speaker_counter", "+", "1", "\n", "\n", "# Reading the remaining annotation", "\n", "", "", "for", "row", "in", "csv_file", ":", "\n", "            ", "if", "not", "(", "frame_count", "+", "start_frame", "==", "int", "(", "row", "[", "0", "]", ")", ")", "and", "(", "frame_count", "+", "start_frame", "==", "int", "(", "row", "[", "0", "]", ")", "-", "1", ")", ":", "\n", "                ", "frame_count", "=", "frame_count", "+", "1", "\n", "speaker_counter", "=", "0", "\n", "if", "frame_count", ">=", "sample_length_frames", ":", "\n", "                    ", "break", "\n", "", "", "if", "frame_count", "+", "start_frame", "==", "int", "(", "row", "[", "0", "]", ")", ":", "\n", "                ", "face_bbs", "[", "frame_count", ",", "speaker_counter", "]", "=", "np", ".", "array", "(", "[", "int", "(", "row", "[", "0", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", ",", "float", "(", "row", "[", "3", "]", ")", ",", "float", "(", "row", "[", "4", "]", ")", ",", "float", "(", "row", "[", "5", "]", ")", "]", ")", "\n", "if", "speaker_counter", "==", "self", ".", "number_speakers", "-", "1", ":", "\n", "                    ", "speaker_counter", "=", "0", "\n", "frame_count", "=", "frame_count", "+", "1", "\n", "", "else", ":", "\n", "                    ", "speaker_counter", "=", "speaker_counter", "+", "1", "\n", "", "", "if", "frame_count", ">=", "sample_length_frames", ":", "\n", "                ", "break", "\n", "\n", "# Closing file and returning result", "\n", "", "", "file", ".", "close", "(", ")", "\n", "return", "face_bbs", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_sound_sequence": [[163, 185], ["scipy.io.wavfile.read", "int", "int", "numpy.reshape", "os.path.join", "numpy.floor", "numpy.floor"], "methods", ["None"], ["", "def", "_get_sound_sequence", "(", "self", ",", "path", ":", "str", ",", "summary", ":", "dict", ",", "start_frame", ":", "int", ",", "sample_length_frames", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n\n        :param path: path to the sample subfolder\n        :param summary: dict containing the meta information summary\n        :param start_frame: starting frame\n        :param sample_length_frames: total length of the sequence as a number of frames\n        :return: sound sequence as numpy array\n        \"\"\"", "\n", "# Reading wav file", "\n", "sampling_rate", ",", "signal", "=", "wavfile", ".", "read", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'Audio/'", "+", "summary", "[", "\"SequenceName\"", "]", "+", "\".wav\"", ")", ")", "\n", "\n", "# Calculating starting sample from start frame", "\n", "start_sample", "=", "int", "(", "np", ".", "floor", "(", "start_frame", "/", "25", "*", "sampling_rate", ")", ")", "\n", "\n", "# Calculating length of sound sequence in samples from the length in frames", "\n", "length_sample", "=", "int", "(", "np", ".", "floor", "(", "sample_length_frames", "/", "25", "*", "sampling_rate", ")", ")", "\n", "\n", "# Cutting output array to the specified length", "\n", "signal", "=", "signal", "[", "start_sample", ":", "start_sample", "+", "length_sample", "]", "\n", "signal", "=", "np", ".", "reshape", "(", "signal", ",", "(", "sample_length_frames", ",", "-", "1", ",", "6", ")", ")", "\n", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_fft": [[186, 198], ["spatial_stream_weights.utils.sec_to_samples", "torch.from_numpy", "scipy.signal.stft", "numpy.moveaxis", "signal[].astype", "range", "numpy.array", "list", "itertools.chain.from_iterable", "numpy.abs", "numpy.angle"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.sec_to_samples"], ["", "def", "_get_fft", "(", "self", ",", "signal", ",", "sampling_rate", ",", "num_channels", ")", ":", "\n", "        ", "n_fft", "=", "256", "\n", "l_window_sec", "=", "0.005", "\n", "l_window_samples", "=", "ut", ".", "sec_to_samples", "(", "l_window_sec", ",", "sampling_rate", ")", "\n", "overlap_samples", "=", "l_window_samples", "//", "4", "\n", "# hop_samples = ut.sec_to_samples(l_window_sec-overlap_sec, sampling_rate)", "\n", "stfts", "=", "[", "stft", "(", "signal", "[", ":", ",", "i", "]", ".", "astype", "(", "float", ")", ",", "sampling_rate", ",", "nfft", "=", "n_fft", ",", "\n", "nperseg", "=", "l_window_samples", ",", "noverlap", "=", "overlap_samples", ")", "\n", "for", "i", "in", "range", "(", "num_channels", ")", "]", "\n", "x", "=", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "np", ".", "array", "(", "list", "(", "chain", ".", "from_iterable", "(", "\n", "(", "np", ".", "abs", "(", "channel", "[", "2", "]", "[", "1", ":", "]", ".", "T", ")", ",", "np", ".", "angle", "(", "channel", "[", "2", "]", ")", "[", "1", ":", "]", ".", "T", ")", "for", "channel", "in", "stfts", ")", ")", ")", ",", "1", ",", "2", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR.__len__": [[199, 201], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "len", "(", "self", ".", "dirs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR.__getitem__": [[202, 245], ["os.path.join", "os.path.join", "int", "open", "json.load", "numpy.floor", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.random.randint", "datasets.AVDIAR._get_annotation", "datasets.AVDIAR._get_video_sequence", "datasets.AVDIAR._get_sound_sequence", "datasets.AVDIAR.append", "datasets.AVDIAR.append", "datasets.AVDIAR.append", "datasets.AVDIAR._get_annotation", "datasets.AVDIAR._get_video_sequence", "datasets.AVDIAR._get_sound_sequence"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_annotation", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_video_sequence", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_sound_sequence", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_annotation", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_video_sequence", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIAR._get_sound_sequence"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", "->", "tuple", ":", "\n", "        ", "\"\"\"\n        Function to get the new item from the dataset\n        :param index: index of the new item in the dataset\n        :return: tuple of video_sequence(ndarray) sound_sequence(ndarray) and annotation(ndarray)\n        \"\"\"", "\n", "# Caching current path", "\n", "path", "=", "self", ".", "dirs", "[", "index", "]", "\n", "\n", "# Reading meta information", "\n", "sum_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"summary.json\"", ")", "\n", "with", "open", "(", "sum_path", ")", "as", "json_file", ":", "\n", "            ", "summary", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "length_frames", "=", "summary", "[", "\"Number_of_Image\"", "]", "\n", "\n", "# Getting Video Path", "\n", "video_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"Video/\"", "+", "summary", "[", "\"SequenceName\"", "]", "+", "\"_CAM1.mp4\"", ")", "\n", "\n", "# Getting sample length in frames", "\n", "sample_length_frames", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "sample_length", "*", "summary", "[", "\"Video_FPS\"", "]", ")", ")", "\n", "\n", "# Getting data and annotation", "\n", "if", "self", ".", "test_set", ":", "\n", "# Last second is reserved for audio training", "\n", "            ", "start_frames", "=", "range", "(", "0", ",", "sample_length_frames", "*", "(", "length_frames", "//", "sample_length_frames", ")", ",", "sample_length_frames", "-", "\n", "(", "5", "*", "summary", "[", "\"Video_FPS\"", "]", ")", ")", "\n", "annotation", "=", "[", "]", "\n", "video_sequence", "=", "[", "]", "\n", "sound_sequence", "=", "[", "]", "\n", "for", "frame", "in", "start_frames", ":", "\n", "                ", "annotation", ".", "append", "(", "self", ".", "_get_annotation", "(", "path", ",", "sample_length_frames", ",", "frame", ")", ")", "\n", "video_sequence", ".", "append", "(", "self", ".", "_get_video_sequence", "(", "summary", ",", "path", ",", "sample_length_frames", ",", "frame", ",", "length_frames", ")", ")", "\n", "sound_sequence", ".", "append", "(", "self", ".", "_get_sound_sequence", "(", "path", ",", "summary", ",", "frame", ",", "sample_length_frames", ")", ")", "\n", "", "annotation", "=", "np", ".", "array", "(", "annotation", ")", "\n", "video_sequence", "=", "np", ".", "array", "(", "video_sequence", ",", "dtype", "=", "\"uint8\"", ")", "\n", "sound_sequence", "=", "np", ".", "array", "(", "sound_sequence", ")", "\n", "", "else", ":", "\n", "# Last second is reserved for audio training", "\n", "            ", "start_frame", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "length_frames", "-", "sample_length_frames", ")", "\n", "annotation", "=", "self", ".", "_get_annotation", "(", "path", ",", "sample_length_frames", ",", "start_frame", ")", "\n", "video_sequence", "=", "self", ".", "_get_video_sequence", "(", "summary", ",", "path", ",", "sample_length_frames", ",", "start_frame", ",", "length_frames", ")", "\n", "sound_sequence", "=", "self", ".", "_get_sound_sequence", "(", "path", ",", "summary", ",", "start_frame", ",", "sample_length_frames", ")", "\n", "", "return", "video_sequence", ",", "sound_sequence", ",", "annotation", ",", "video_path", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal.__init__": [[248, 257], ["datasets.AvCal._get_sequence_paths", "datasets.AvCal._get_min_sound_length"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._get_sequence_paths", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal._get_min_sound_length"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "room_id", ",", "grid_size", ",", "samples", ")", ":", "\n", "        ", "self", ".", "target_resolution", "=", "(", "450", ",", "720", ")", "\n", "self", ".", "resolution", "=", "(", "1200", ",", "1920", ")", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "room_id", "=", "room_id", "\n", "self", ".", "dirs", "=", "self", ".", "_get_sequence_paths", "(", ")", "\n", "self", ".", "min_sound_length", "=", "self", ".", "_get_min_sound_length", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal._get_sequence_paths": [[258, 267], ["numpy.random.shuffle", "os.path.join", "str", "os.listdir"], "methods", ["None"], ["", "def", "_get_sequence_paths", "(", "self", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Function that returns the paths to all subfolders with specified room id in the root directory as a list\n        :return: path list\n        \"\"\"", "\n", "sub_folder", "=", "self", ".", "root", "+", "\"AV_CALIB-ID-\"", "+", "str", "(", "self", ".", "room_id", ")", "+", "\"/wn\"", "\n", "paths", "=", "[", "os", ".", "path", ".", "join", "(", "sub_folder", ",", "path", ")", "for", "path", "in", "os", ".", "listdir", "(", "sub_folder", ")", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "paths", ")", "\n", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal._get_min_sound_length": [[268, 271], ["min", "len", "scipy.io.wavfile.read"], "methods", ["None"], ["", "def", "_get_min_sound_length", "(", "self", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "[", "len", "(", "wavfile", ".", "read", "(", "path", ")", "[", "1", "]", ")", "for", "path", "in", "self", ".", "dirs", "]", ")", "\n", "return", "min_length", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal.__len__": [[272, 274], ["int", "numpy.floor", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "np", ".", "floor", "(", "self", ".", "min_sound_length", "/", "self", ".", "samples", ")", "*", "len", "(", "self", ".", "dirs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal.__getitem__": [[275, 282], ["datasets.AvCal._get_audio_features", "datasets.AvCal._get_position_data"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal._get_audio_features", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal._get_position_data"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Function to get a new item from the dataset\n        :param index: index of the new item in the dataset\n        :return: tuple of video_sequence(ndarray) sound_sequence(ndarray) and annotation(ndarray)\n        \"\"\"", "\n", "return", "self", ".", "_get_audio_features", "(", "index", ")", ",", "self", ".", "_get_position_data", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal._get_audio_features": [[283, 291], ["numpy.floor", "scipy.io.wavfile.read", "signal[].astype", "datasets.AvCal._get_stft_tf", "len", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal._get_stft_tf"], ["", "def", "_get_audio_features", "(", "self", ",", "index", ")", ":", "\n", "# Reading wav file", "\n", "        ", "mode", "=", "np", ".", "floor", "(", "index", "/", "len", "(", "self", ".", "dirs", ")", ")", "\n", "index", "=", "index", "%", "len", "(", "self", ".", "dirs", ")", "\n", "sampling_rate", ",", "signal", "=", "wavfile", ".", "read", "(", "self", ".", "dirs", "[", "index", "]", ")", "\n", "x", "=", "signal", "[", "int", "(", "mode", "*", "self", ".", "samples", ")", ":", "int", "(", "mode", "*", "self", ".", "samples", "+", "self", ".", "samples", ")", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "# return x", "\n", "return", "self", ".", "_get_stft_tf", "(", "x", ",", "sampling_rate", ",", "signal", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal._get_stft_tf": [[293, 307], ["spatial_stream_weights.utils.sec_to_samples", "numpy.moveaxis", "torch.from_numpy", "scipy.signal.stft", "numpy.array", "signal[].astype", "range", "list", "itertools.chain.from_iterable", "numpy.abs", "numpy.angle"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.sec_to_samples"], ["", "def", "_get_stft_tf", "(", "self", ",", "signal", ",", "sampling_rate", ",", "num_channels", ")", ":", "\n", "        ", "n_fft", "=", "2048", "\n", "l_window_sec", "=", "0.04", "\n", "# overlap_sec = 0.008", "\n", "l_window_samples", "=", "ut", ".", "sec_to_samples", "(", "l_window_sec", ",", "sampling_rate", ")", "\n", "# overlap_samples = ut.sec_to_samples(overlap_sec, sampling_rate)", "\n", "overlap_samples", "=", "l_window_samples", "//", "2", "\n", "# hop_samples = ut.sec_to_samples(l_window_sec-overlap_sec, sampling_rate)", "\n", "stfts", "=", "[", "stft", "(", "signal", "[", ":", ",", "i", "]", ".", "astype", "(", "float", ")", ",", "sampling_rate", ",", "nfft", "=", "n_fft", ",", "\n", "nperseg", "=", "l_window_samples", ",", "noverlap", "=", "overlap_samples", ")", "\n", "for", "i", "in", "range", "(", "num_channels", ")", "]", "\n", "x", "=", "np", ".", "moveaxis", "(", "np", ".", "array", "(", "list", "(", "chain", ".", "from_iterable", "(", "(", "np", ".", "abs", "(", "channel", "[", "2", "]", "[", "1", ":", "]", ".", "T", ")", ",", "np", ".", "angle", "(", "channel", "[", "2", "]", ")", "[", "1", ":", "]", ".", "T", ")", "\n", "for", "channel", "in", "stfts", ")", ")", ")", ",", "0", ",", "2", ")", "\n", "return", "torch", ".", "from_numpy", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AvCal._get_position_data": [[308, 330], ["numpy.zeros", "open", "csv.reader", "range", "csv.reader.__next__", "numpy.array", "len", "csv.reader.__next__", "float", "float", "str"], "methods", ["None"], ["", "def", "_get_position_data", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "index", "%", "len", "(", "self", ".", "dirs", ")", "\n", "y", "=", "np", ".", "zeros", "(", "self", ".", "grid_size", ")", "\n", "path", "=", "self", ".", "root", "+", "\"AV_CALIB-ID-\"", "+", "str", "(", "self", ".", "room_id", ")", "+", "\"/speaker_position.txt\"", "\n", "\n", "# Reading csv file", "\n", "file", "=", "open", "(", "path", ",", "'r'", ")", "\n", "csv_file", "=", "csv", ".", "reader", "(", "file", ",", "delimiter", "=", "','", ")", "\n", "\n", "# Forwarding to index", "\n", "for", "_", "in", "range", "(", "index", ")", ":", "\n", "            ", "csv_file", ".", "__next__", "(", ")", "\n", "\n", "", "scale_x", "=", "self", ".", "target_resolution", "[", "0", "]", "/", "self", ".", "resolution", "[", "0", "]", "\n", "scale_y", "=", "self", ".", "target_resolution", "[", "1", "]", "/", "self", ".", "resolution", "[", "1", "]", "\n", "row", "=", "csv_file", ".", "__next__", "(", ")", "\n", "speaker_x", "=", "float", "(", "row", "[", "4", "]", ")", "*", "scale_x", "\n", "speaker_y", "=", "float", "(", "row", "[", "3", "]", ")", "*", "scale_y", "\n", "# cell = ut.point_to_grid((speaker_x, speaker_y), self.grid_size, self.target_resolution)", "\n", "# y[cell] = 1", "\n", "# y = np.reshape(y, self.grid_size[0]*self.grid_size[1])", "\n", "return", "np", ".", "array", "(", "[", "speaker_x", ",", "speaker_y", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal.__init__": [[333, 349], ["datasets.AVDIARCal._get_sequence_paths", "datasets.AVDIARCal._read_all_data", "int", "int", "print", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._get_sequence_paths", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._read_all_data"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "\"AVDIAR_TRAIN/\"", ",", "room_ids", "=", "(", "1", ",", "2", ",", "3", ")", ",", "grid_size", "=", "(", "20", ",", "24", ")", ",", "\n", "sample_length", "=", "48000", "*", "2", ",", "resolution", "=", "(", "450", ",", "720", ")", ",", "shuffle", "=", "True", ",", "vad", "=", "False", ")", ":", "\n", "        ", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "vad", "=", "vad", "\n", "if", "sample_length", "%", "1920", "==", "0", ":", "\n", "            ", "self", ".", "sample_length", "=", "int", "(", "sample_length", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sample_length", "=", "int", "(", "1920", "*", "np", ".", "ceil", "(", "sample_length", "/", "1920", ")", ")", "\n", "print", "(", "\"Sample length must be a multiple of 1920, using {} instead\"", ".", "format", "(", "self", ".", "sample_length", ")", ")", "\n", "", "self", ".", "grid_size", "=", "grid_size", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "room_ids", "=", "room_ids", "\n", "\n", "self", ".", "dirs", "=", "self", ".", "_get_sequence_paths", "(", ")", "\n", "self", ".", "data", "=", "self", ".", "_read_all_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal.get_data_array": [[350, 352], ["None"], "methods", ["None"], ["", "def", "get_data_array", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._read_all_data": [[353, 435], ["int", "print", "numpy.floor", "numpy.split", "cv2.VideoCapture", "os.path.join", "open", "csv.reader", "reversed", "range", "numpy.zeros", "numpy.zeros", "zip", "print", "numpy.random.shuffle", "scipy.io.wavfile.read", "re.split", "os.path.join", "cv2.VideoCapture.isOpened", "IOError", "range", "annotation.insert", "int", "annotation.append", "os.path.join", "open", "csv.reader", "csv.reader.__next__", "datasets.AVDIARCal._check_vad", "len", "int", "int", "float", "float", "float", "float", "current_frame.append", "frames.append", "current_frame.clear", "current_frame.append", "data.append", "numpy.zeros", "numpy.zeros", "numpy.array", "float", "datasets.AVDIARCal._mark_cell", "float", "float", "cv2.VideoCapture.read", "range", "datasets.AVDIARCal._get_stft", "numpy.array", "numpy.reshape", "len", "len"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._check_vad", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.models.AudioLocalizer.clear", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._mark_cell", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._get_stft"], ["", "def", "_read_all_data", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "counter", "=", "0", "\n", "sample_length_frames", "=", "int", "(", "self", ".", "sample_length", "/", "1920", ")", "\n", "for", "path", "in", "self", ".", "dirs", ":", "\n", "# Reading audio file", "\n", "            ", "audio", "=", "wavfile", ".", "read", "(", "path", ")", "[", "1", "]", "\n", "num_frames", "=", "np", ".", "floor", "(", "len", "(", "audio", ")", "/", "1920", ")", "\n", "audio", "=", "audio", "[", ":", "int", "(", "num_frames", "*", "1920", ")", "]", "\n", "audio", "=", "np", ".", "split", "(", "audio", ",", "num_frames", ")", "\n", "\n", "# Reading video file", "\n", "sequence_name", "=", "re", ".", "split", "(", "r'/|\\\\'", ",", "path", ")", "[", "1", "]", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "sequence_name", ",", "'Video'", ",", "sequence_name", "+", "'_CAM1.mp4'", ")", ")", "\n", "if", "not", "cap", ".", "isOpened", "(", ")", ":", "\n", "                ", "raise", "IOError", "(", "\"Error opening video stream or file: \"", ",", "path", ")", "\n", "\n", "# Reading csv file", "\n", "", "annotation_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "sequence_name", ",", "'GroundTruth'", ",", "'face_bb.txt'", ")", "\n", "file", "=", "open", "(", "annotation_path", ",", "'r'", ")", "\n", "csv_file", "=", "csv", ".", "reader", "(", "file", ",", "delimiter", "=", "','", ")", "\n", "annotation", "=", "[", "(", "int", "(", "row", "[", "0", "]", ")", ",", "float", "(", "row", "[", "3", "]", ")", ",", "float", "(", "row", "[", "2", "]", ")", ",", "float", "(", "row", "[", "4", "]", ")", ",", "float", "(", "row", "[", "5", "]", ")", ")", "for", "row", "in", "csv_file", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "annotation", "[", "0", "]", "[", "0", "]", ")", ")", ":", "\n", "                ", "annotation", ".", "insert", "(", "0", ",", "(", "i", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "annotation", "[", "len", "(", "annotation", ")", "-", "1", "]", "[", "0", "]", ",", "int", "(", "num_frames", ")", ")", ":", "\n", "                ", "annotation", ".", "append", "(", "(", "i", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ")", ")", "\n", "\n", "", "current_frame_index", "=", "0", "\n", "frames", "=", "[", "]", "\n", "current_frame", "=", "[", "]", "\n", "for", "row", "in", "annotation", ":", "\n", "                ", "if", "row", "[", "0", "]", "==", "current_frame_index", ":", "\n", "                    ", "current_frame", ".", "append", "(", "row", ")", "\n", "", "else", ":", "\n", "                    ", "if", "row", "[", "0", "]", ">", "num_frames", ":", "\n", "                        ", "break", "\n", "", "current_frame_index", "=", "row", "[", "0", "]", "\n", "frames", ".", "append", "(", "np", ".", "array", "(", "current_frame", ")", ")", "\n", "current_frame", ".", "clear", "(", ")", "\n", "current_frame", ".", "append", "(", "row", ")", "\n", "\n", "", "", "audio_sequence", "=", "np", ".", "zeros", "(", "(", "self", ".", "sample_length", ",", "6", ")", ")", "\n", "\n", "# Reading vad", "\n", "\n", "if", "self", ".", "vad", ":", "\n", "                ", "vad_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "sequence_name", ",", "'GroundTruth'", ",", "'vad.rttm'", ")", "\n", "file", "=", "open", "(", "vad_path", ",", "'r'", ")", "\n", "csv_file", "=", "csv", ".", "reader", "(", "file", ",", "delimiter", "=", "' '", ")", "\n", "# Skipping header", "\n", "_", "=", "csv_file", ".", "__next__", "(", ")", "\n", "vad_data", "=", "[", "(", "float", "(", "row", "[", "3", "]", ")", ",", "float", "(", "row", "[", "3", "]", ")", "+", "float", "(", "row", "[", "4", "]", ")", ")", "for", "row", "in", "csv_file", "]", "\n", "", "else", ":", "\n", "                ", "vad_data", "=", "None", "\n", "# Preparing data for training", "\n", "", "y", "=", "np", ".", "zeros", "(", "self", ".", "grid_size", ")", "\n", "current_frame_index", "=", "0", "\n", "marked_counter", "=", "0", "\n", "for", "anno", ",", "samples", "in", "zip", "(", "frames", ",", "audio", ")", ":", "\n", "                ", "if", "current_frame_index", "==", "sample_length_frames", ":", "\n", "                    ", "if", "marked_counter", "==", "0", ":", "\n", "                        ", "marked_counter", "=", "1", "\n", "", "video", "=", "[", "cap", ".", "read", "(", ")", "[", "1", "]", "for", "_", "in", "range", "(", "current_frame_index", ")", "]", "\n", "data", ".", "append", "(", "(", "self", ".", "_get_stft", "(", "audio_sequence", ",", "48000", ",", "6", ")", ",", "np", ".", "array", "(", "video", ")", ",", "\n", "np", ".", "reshape", "(", "y", "/", "marked_counter", ",", "self", ".", "grid_size", "[", "0", "]", "*", "self", ".", "grid_size", "[", "1", "]", ")", ",", "sequence_name", ")", ")", "\n", "y", "=", "np", ".", "zeros", "(", "self", ".", "grid_size", ")", "\n", "audio_sequence", "=", "np", ".", "zeros", "(", "(", "self", ".", "sample_length", ",", "6", ")", ")", "\n", "marked_counter", "=", "0", "\n", "current_frame_index", "=", "0", "\n", "", "if", "self", ".", "_check_vad", "(", "anno", "[", "0", "]", "[", "0", "]", "/", "25", ",", "vad_data", ")", ":", "\n", "                    ", "for", "face", "in", "anno", ":", "\n", "                        ", "y", "=", "self", ".", "_mark_cell", "(", "y", ",", "face", "[", "1", "]", ",", "face", "[", "2", "]", ",", "face", "[", "3", "]", ",", "face", "[", "4", "]", ")", "\n", "marked_counter", "+=", "1", "\n", "", "", "audio_sequence", "[", "current_frame_index", "*", "1920", ":", "current_frame_index", "*", "1920", "+", "1920", "]", "=", "samples", "\n", "current_frame_index", "+=", "1", "\n", "", "counter", "+=", "1", "\n", "print", "(", "\"\\rreading data... {0:.2f}%\"", ".", "format", "(", "counter", "/", "len", "(", "self", ".", "dirs", ")", "*", "100", ")", ",", "end", "=", "''", ")", "\n", "", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "data", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._get_sequence_paths": [[436, 451], ["os.path.join", "numpy.random.shuffle", "os.listdir", "open", "json.load", "os.path.join", "paths.remove", "re.split", "os.path.split"], "methods", ["None"], ["", "def", "_get_sequence_paths", "(", "self", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        Function that returns the paths to all subfolders with specified room id in the root directory as a list\n        :return: path list\n        \"\"\"", "\n", "paths", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "path", ",", "'Audio'", ",", "path", "+", "'.wav'", ")", "for", "path", "in", "os", ".", "listdir", "(", "self", ".", "root", ")", "]", "\n", "# Check for Room IDs only leaving the paths where the Room IDs match", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "re", ".", "split", "(", "r'/|\\\\'", ",", "os", ".", "path", ".", "split", "(", "path", ")", "[", "0", "]", ")", "[", "1", "]", ",", "'summary.json'", ")", ")", "as", "json_file", ":", "\n", "                ", "summary", "=", "json", ".", "load", "(", "json_file", ")", "\n", "if", "not", "summary", "[", "'CalibrationID'", "]", "in", "self", ".", "room_ids", ":", "\n", "                    ", "paths", ".", "remove", "(", "path", ")", "\n", "", "", "", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "paths", ")", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._mark_cell": [[452, 457], ["spatial_stream_weights.utils.point_to_grid", "spatial_stream_weights.utils.bb_to_center"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.point_to_grid", "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.bb_to_center"], ["", "def", "_mark_cell", "(", "self", ",", "target", ",", "x", ",", "y", ",", "w", ",", "h", ")", ":", "\n", "        ", "cell", "=", "ut", ".", "point_to_grid", "(", "ut", ".", "bb_to_center", "(", "x", ",", "y", ",", "h", ",", "w", ")", ",", "\n", "self", ".", "grid_size", ",", "self", ".", "resolution", ")", "\n", "target", "[", "cell", "]", "=", "target", "[", "cell", "]", "+", "1", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._get_stft": [[458, 472], ["spatial_stream_weights.utils.sec_to_samples", "numpy.moveaxis", "scipy.signal.stft", "numpy.array", "signal[].astype", "range", "list", "itertools.chain.from_iterable", "numpy.abs", "numpy.angle"], "methods", ["home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.utils.sec_to_samples"], ["", "def", "_get_stft", "(", "self", ",", "signal", ",", "sampling_rate", ",", "num_channels", ")", ":", "\n", "        ", "n_fft", "=", "2048", "\n", "l_window_sec", "=", "0.04", "\n", "# overlap_sec = 0.008", "\n", "l_window_samples", "=", "ut", ".", "sec_to_samples", "(", "l_window_sec", ",", "sampling_rate", ")", "\n", "# overlap_samples = ut.sec_to_samples(overlap_sec, sampling_rate)", "\n", "overlap_samples", "=", "l_window_samples", "//", "2", "\n", "# hop_samples = ut.sec_to_samples(l_window_sec-overlap_sec, sampling_rate)", "\n", "stfts", "=", "[", "stft", "(", "signal", "[", ":", ",", "i", "]", ".", "astype", "(", "float", ")", ",", "sampling_rate", ",", "nfft", "=", "n_fft", ",", "\n", "nperseg", "=", "l_window_samples", ",", "noverlap", "=", "overlap_samples", ")", "\n", "for", "i", "in", "range", "(", "num_channels", ")", "]", "\n", "x", "=", "np", ".", "moveaxis", "(", "np", ".", "array", "(", "list", "(", "chain", ".", "from_iterable", "(", "(", "np", ".", "abs", "(", "channel", "[", "2", "]", "[", "1", ":", "]", ".", "T", ")", ",", "np", ".", "angle", "(", "channel", "[", "2", "]", ")", "[", "1", ":", "]", ".", "T", ")", "\n", "for", "channel", "in", "stfts", ")", ")", ")", ",", "0", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal._check_vad": [[473, 481], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_check_vad", "(", "frame", ",", "vad", ")", ":", "\n", "        ", "if", "vad", "is", "None", ":", "\n", "            ", "return", "True", "\n", "", "for", "time_frame", "in", "vad", ":", "\n", "            ", "if", "(", "time_frame", "[", "0", "]", "<=", "frame", ")", "and", "(", "frame", "<=", "time_frame", "[", "1", "]", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal.__len__": [[482, 484], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rub-ksv_spatial-stream-weights.spatial_stream_weights.datasets.AVDIARCal.__getitem__": [[485, 492], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Function to get a new item from the dataset\n        :param index: index of the new item in the dataset\n        :return: tuple of video_sequence(ndarray) sound_sequence(ndarray) and annotation(ndarray)\n        \"\"\"", "\n", "return", "self", ".", "data", "[", "index", "]", "[", "0", "]", ",", "self", ".", "data", "[", "index", "]", "[", "1", "]", "\n", "", "", ""]]}