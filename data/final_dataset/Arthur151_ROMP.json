{"home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base.__init__": [[30, 37], ["base.Base.load_config_dict", "base.Base._init_log", "base.Base._init_params", "vars", "visualization.visualization.Visualizer", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base.load_config_dict", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._init_log", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._init_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "project_dir", "=", "config", ".", "project_dir", "\n", "hparams_dict", "=", "self", ".", "load_config_dict", "(", "vars", "(", "args", "(", ")", ")", ")", "\n", "self", ".", "_init_log", "(", "hparams_dict", ")", "\n", "self", ".", "_init_params", "(", ")", "\n", "if", "self", ".", "save_visualization_on_img", ":", "\n", "            ", "self", ".", "visualizer", "=", "Visualizer", "(", "resolution", "=", "(", "512", ",", "512", ")", ",", "result_img_dir", "=", "self", ".", "result_img_dir", ",", "with_renderer", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._build_model_": [[38, 62], ["logging.info", "models.build_model", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "load_model", "load_model", "train_entire_model", "load_model.to", "models.balanced_dataparallel.DataParallel", "torch.DataParallel", "torch.DataParallel", "load_model.cuda", "load_model.cuda"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.build.build_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.load_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.load_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.train_entire_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel"], ["", "", "def", "_build_model_", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'start building model.'", ")", "\n", "model", "=", "build_model", "(", ")", "\n", "if", "self", ".", "fine_tune", "or", "self", ".", "eval", ":", "\n", "            ", "drop_prefix", "=", "''", "\n", "if", "self", ".", "model_version", "==", "6", ":", "\n", "                ", "model", "=", "load_model", "(", "self", ".", "model_path", ",", "model", ",", "prefix", "=", "'module.'", ",", "drop_prefix", "=", "drop_prefix", ",", "fix_loaded", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "load_model", "(", "self", ".", "model_path", ",", "model", ",", "prefix", "=", "'module.'", ",", "drop_prefix", "=", "drop_prefix", ",", "fix_loaded", "=", "False", ")", "\n", "train_entire_model", "(", "model", ")", "\n", "", "", "if", "self", ".", "distributed_training", ":", "\n", "            ", "print", "(", "'local_rank'", ",", "self", ".", "local_rank", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ",", "self", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "local_rank", ")", "\n", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "assert", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ".", "to", "(", "device", ")", ",", "device_ids", "=", "[", "self", ".", "local_rank", "]", ",", "output_device", "=", "self", ".", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "master_batch_size", "!=", "-", "1", ":", "\n", "# balance the multi-GPU memory via adjusting the batch size of each GPU.", "\n", "                ", "self", ".", "model", "=", "DataParallel", "(", "model", ".", "cuda", "(", ")", ",", "device_ids", "=", "self", ".", "gpus", ",", "chunk_sizes", "=", "self", ".", "chunk_sizes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._build_optimizer": [[63, 73], ["torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "logging.info", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "GradScaler", "base.Base.model.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "base.Base.model.parameters"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info"], ["", "", "", "def", "_build_optimizer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "optimizer_type", "==", "'Adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "optimizer_type", "==", "'SGD'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "", "if", "self", ".", "model_precision", "==", "'fp16'", ":", "\n", "            ", "self", ".", "scaler", "=", "GradScaler", "(", ")", "\n", "", "self", ".", "e_sche", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "optimizer", ",", "milestones", "=", "[", "60", ",", "80", "]", ",", "gamma", "=", "self", ".", "adjust_lr_factor", ")", "\n", "\n", "logging", ".", "info", "(", "'finished build model.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._init_log": [[74, 88], ["os.path.join", "os.makedirs", "os.path.join", "write2log", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "save_yaml", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "base.Base.log_file.replace", "time.strftime"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.write2log", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.save_yaml"], ["", "def", "_init_log", "(", "self", ",", "hparams_dict", ")", ":", "\n", "        ", "self", ".", "log_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "'{}'", ".", "format", "(", "self", ".", "tab", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "log_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "'{}.log'", ".", "format", "(", "self", ".", "tab", ")", ")", "\n", "write2log", "(", "self", ".", "log_file", ",", "'================ Training Loss (%s) ================\\n'", "%", "time", ".", "strftime", "(", "\"%c\"", ")", ")", "\n", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "self", ".", "log_path", ")", "\n", "save_yaml", "(", "hparams_dict", ",", "self", ".", "log_file", ".", "replace", "(", "'.log'", ",", "'.yml'", ")", ")", "\n", "\n", "self", ".", "result_img_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "root_dir", ",", "'result_images'", ",", "'{}_on_gpu{}_val'", ".", "format", "(", "self", ".", "tab", ",", "self", ".", "gpu", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "result_img_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "train_img_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "root_dir", ",", "'result_image_train'", ",", "'{}_on_gpu{}_val'", ".", "format", "(", "self", ".", "tab", ",", "self", ".", "gpu", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "train_img_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "model_save_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "root_dir", ",", "'checkpoints'", ",", "'{}_on_gpu{}_val'", ".", "format", "(", "self", ".", "tab", ",", "self", ".", "gpu", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "model_save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._init_params": [[89, 113], ["logging.info", "numpy.array", "numpy.array", "numpy.array", "constants.joint_mapping", "int", "range", "str().split", "base.Base.chunk_sizes.append", "len", "str", "len", "numpy.ones().astype", "len", "len", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "self", ".", "global_count", "=", "0", "\n", "self", ".", "eval_cfg", "=", "{", "'mode'", ":", "'matching_gts'", ",", "'is_training'", ":", "False", ",", "'calc_loss'", ":", "False", ",", "'with_nms'", ":", "False", ",", "'with_2d_matching'", ":", "True", "}", "\n", "self", ".", "val_cfg", "=", "{", "'mode'", ":", "'parsing'", ",", "'calc_loss'", ":", "False", ",", "'with_nms'", ":", "False", "}", "\n", "self", ".", "gpus", "=", "[", "int", "(", "i", ")", "for", "i", "in", "str", "(", "self", ".", "gpu", ")", ".", "split", "(", "','", ")", "]", "\n", "\n", "self", ".", "chunk_sizes", "=", "[", "]", "\n", "if", "not", "self", ".", "distributed_training", "and", "self", ".", "master_batch_size", "!=", "-", "1", ":", "\n", "            ", "self", ".", "chunk_sizes", "=", "[", "self", ".", "master_batch_size", "]", "\n", "rest_batch_size", "=", "(", "self", ".", "batch_size", "-", "self", ".", "master_batch_size", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "gpus", ")", "-", "1", ")", ":", "\n", "                ", "slave_chunk_size", "=", "rest_batch_size", "//", "(", "len", "(", "self", ".", "gpus", ")", "-", "1", ")", "\n", "if", "i", "<", "rest_batch_size", "%", "(", "len", "(", "self", ".", "gpus", ")", "-", "1", ")", ":", "\n", "                    ", "slave_chunk_size", "+=", "1", "\n", "", "self", ".", "chunk_sizes", ".", "append", "(", "slave_chunk_size", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "chunk_sizes", "=", "(", "np", ".", "ones", "(", "len", "(", "self", ".", "gpus", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "*", "(", "self", ".", "batch_size", "//", "(", "len", "(", "self", ".", "gpus", ")", ")", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "", "logging", ".", "info", "(", "'training chunk_sizes:{}'", ".", "format", "(", "self", ".", "chunk_sizes", ")", ")", "\n", "\n", "self", ".", "lr_hip_idx", "=", "np", ".", "array", "(", "[", "constants", ".", "SMPL_ALL_54", "[", "'L_Hip'", "]", ",", "constants", ".", "SMPL_ALL_54", "[", "'R_Hip'", "]", "]", ")", "\n", "self", ".", "lr_hip_idx_lsp", "=", "np", ".", "array", "(", "[", "constants", ".", "LSP_14", "[", "'L_Hip'", "]", ",", "constants", ".", "LSP_14", "[", "'R_Hip'", "]", "]", ")", "\n", "self", ".", "kintree_parents", "=", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "9", ",", "9", ",", "12", ",", "13", ",", "14", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "self", ".", "All54_to_LSP14_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_ALL_54", ",", "constants", ".", "LSP_14", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base.network_forward": [[114, 125], ["get_remove_keys", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "meta_data.update", "reorganize_items", "len", "model", "outputs[].cpu().numpy", "autocast", "model", "outputs[].cpu"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.get_remove_keys", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.reorganize_items"], ["", "def", "network_forward", "(", "self", ",", "model", ",", "meta_data", ",", "cfg_dict", ")", ":", "\n", "        ", "ds_org", ",", "imgpath_org", "=", "get_remove_keys", "(", "meta_data", ",", "keys", "=", "[", "'data_set'", ",", "'imgpath'", "]", ")", "\n", "meta_data", "[", "'batch_ids'", "]", "=", "torch", ".", "arange", "(", "len", "(", "meta_data", "[", "'image'", "]", ")", ")", "\n", "if", "self", ".", "model_precision", "==", "'fp16'", ":", "\n", "            ", "with", "autocast", "(", ")", ":", "\n", "                ", "outputs", "=", "model", "(", "meta_data", ",", "**", "cfg_dict", ")", "\n", "", "", "else", ":", "\n", "            ", "outputs", "=", "model", "(", "meta_data", ",", "**", "self", ".", "train_cfg", ")", "\n", "", "meta_data", ".", "update", "(", "{", "'imgpath'", ":", "imgpath_org", ",", "'data_set'", ":", "ds_org", "}", ")", "\n", "outputs", "[", "'meta_data'", "]", "[", "'data_set'", "]", ",", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", "=", "reorganize_items", "(", "[", "ds_org", ",", "imgpath_org", "]", ",", "outputs", "[", "'reorganize_idx'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_data_loader": [[126, 139], ["logging.info", "dataset.mixed_dataset.MixedDataset", "base.Base.dataset.split", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "_create_data_loader", "(", "self", ",", "train_flag", "=", "True", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'gathering mixed image datasets.'", ")", "\n", "datasets", "=", "MixedDataset", "(", "self", ".", "dataset", ".", "split", "(", "','", ")", ",", "self", ".", "sample_prob_dict", ",", "train_flag", "=", "train_flag", ")", "\n", "batch_size", "=", "self", ".", "batch_size", "if", "train_flag", "else", "self", ".", "val_batch_size", "\n", "if", "self", ".", "distributed_training", ":", "\n", "            ", "data_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "datasets", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "datasets", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "data_sampler", ",", "drop_last", "=", "True", "if", "train_flag", "else", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "self", ".", "nw", ")", "#shuffle = True", "\n", "", "else", ":", "\n", "            ", "return", "DataLoader", "(", "dataset", "=", "datasets", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", "if", "train_flag", "else", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "self", ".", "nw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader": [[140, 145], ["logging.info", "dataset.mixed_dataset.SingleDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info"], ["", "", "def", "_create_single_data_loader", "(", "self", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'gathering single image datasets.'", ")", "\n", "datasets", "=", "SingleDataset", "(", "**", "kwargs", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "datasets", ",", "shuffle", "=", "shuffle", ",", "batch_size", "=", "self", ".", "val_batch_size", ",", "drop_last", "=", "drop_last", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "self", ".", "nw_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base.set_up_val_loader": [[146, 178], ["base.Base.eval_datasets.split", "logging.info", "logging.info", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "base.Base._create_single_data_loader", "list", "list", "base.Base.dataset_val_list.keys", "base.Base.evaluation_results_dict.keys"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader"], ["", "def", "set_up_val_loader", "(", "self", ")", ":", "\n", "        ", "eval_datasets", "=", "self", ".", "eval_datasets", ".", "split", "(", "','", ")", "\n", "self", ".", "evaluation_results_dict", "=", "{", "}", "\n", "self", ".", "val_best_PAMPJPE", "=", "{", "}", "\n", "for", "ds", "in", "eval_datasets", ":", "\n", "            ", "self", ".", "evaluation_results_dict", "[", "ds", "]", "=", "{", "'MPJPE'", ":", "[", "]", ",", "'PAMPJPE'", ":", "[", "]", "}", "\n", "", "self", ".", "dataset_val_list", ",", "self", ".", "dataset_test_list", "=", "{", "}", ",", "{", "}", "\n", "if", "'relative'", "in", "eval_datasets", ":", "\n", "            ", "self", ".", "dataset_val_list", "[", "'relative'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'relative_human'", ",", "split", "=", "'val'", ",", "train_flag", "=", "False", ")", "\n", "self", ".", "dataset_test_list", "[", "'relative'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'relative_human'", ",", "split", "=", "'test'", ",", "train_flag", "=", "False", ")", "\n", "self", ".", "evaluation_results_dict", "[", "'relative'", "]", "=", "{", "'PCRD'", ":", "[", "0.63", "]", ",", "'AGE_baby'", ":", "[", "0.34", "]", "}", "\n", "", "if", "'mpiinf'", "in", "eval_datasets", ":", "\n", "            ", "self", ".", "dataset_val_list", "[", "'mpiinf'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'mpiinf_val'", ",", "train_flag", "=", "False", ")", "\n", "self", ".", "dataset_test_list", "[", "'mpiinf'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'mpiinf_test'", ",", "train_flag", "=", "False", ")", "\n", "self", ".", "val_best_PAMPJPE", "[", "'mpiinf'", "]", "=", "80", "\n", "", "if", "'mupots'", "in", "eval_datasets", ":", "\n", "            ", "self", ".", "dataset_val_list", "[", "'mupots'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'mupots'", ",", "train_flag", "=", "False", ",", "split", "=", "'val'", ")", "\n", "self", ".", "dataset_test_list", "[", "'mupots'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'mupots'", ",", "train_flag", "=", "False", ",", "split", "=", "'test'", ")", "\n", "", "if", "'h36m'", "in", "eval_datasets", ":", "\n", "            ", "self", ".", "dataset_val_list", "[", "'h36m'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'h36m'", ",", "train_flag", "=", "False", ",", "split", "=", "'val'", ")", "\n", "self", ".", "dataset_test_list", "[", "'h36m'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'h36m'", ",", "train_flag", "=", "False", ",", "split", "=", "'test'", ")", "\n", "self", ".", "val_best_PAMPJPE", "[", "'h36m'", "]", "=", "53", "\n", "", "if", "'pw3d_pc'", "in", "eval_datasets", ":", "\n", "            ", "self", ".", "dataset_test_list", "[", "'pw3d_pc'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'pw3d'", ",", "train_flag", "=", "False", ",", "split", "=", "'all'", ",", "mode", "=", "'PC'", ")", "\n", "", "if", "'pw3d'", "in", "eval_datasets", ":", "\n", "            ", "self", ".", "dataset_val_list", "[", "'pw3d_vibe'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'pw3d'", ",", "train_flag", "=", "False", ",", "mode", "=", "'vibe'", ",", "split", "=", "'val'", ",", "regress_smpl", "=", "False", ")", "\n", "self", ".", "dataset_test_list", "[", "'pw3d_vibe'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'pw3d'", ",", "train_flag", "=", "False", ",", "mode", "=", "'vibe'", ",", "split", "=", "'test'", ",", "regress_smpl", "=", "False", ")", "\n", "self", ".", "val_best_PAMPJPE", "[", "'pw3d_vibe'", "]", "=", "46", "if", "'pw3d'", "in", "self", ".", "dataset", "else", "50", "\n", "", "if", "'agora'", "in", "eval_datasets", ":", "\n", "            ", "self", ".", "dataset_val_list", "[", "'agora'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'agora'", ",", "train_flag", "=", "False", ",", "split", "=", "'validation'", ")", "\n", "", "logging", ".", "info", "(", "'dataset_val_list:{}'", ".", "format", "(", "list", "(", "self", ".", "dataset_val_list", ".", "keys", "(", ")", ")", ")", ")", "\n", "logging", ".", "info", "(", "'evaluation_results_dict:{}'", ".", "format", "(", "list", "(", "self", ".", "evaluation_results_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base.load_config_dict": [[179, 190], ["config_dict.items", "logging.getLogger().setLevel", "logging.info", "logging.info", "setattr", "logging.getLogger().setLevel", "logging.getLogger", "logging.getLogger"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info"], ["", "def", "load_config_dict", "(", "self", ",", "config_dict", ")", ":", "\n", "        ", "hparams_dict", "=", "{", "}", "\n", "for", "i", ",", "j", "in", "config_dict", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "i", ",", "j", ")", "\n", "hparams_dict", "[", "i", "]", "=", "j", "\n", "", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "if", "self", ".", "distributed_training", "and", "self", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "            ", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "WARN", ")", "\n", "", "logging", ".", "info", "(", "config_dict", ")", "\n", "logging", ".", "info", "(", "'-'", "*", "66", ")", "\n", "return", "hparams_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base.track_memory_usage_here": [[191, 194], ["base.Base.gpu_tracker.track"], "methods", ["None"], ["", "def", "track_memory_usage_here", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "track_memory_usage", ":", "\n", "            ", "self", ".", "gpu_tracker", ".", "track", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.calc_outputs_evaluation_matrix": [[9, 91], ["set", "[].contiguous().cuda", "evaluation.evaluation_matrix._calc_matched_PCKh_", "[].append", "np.where", "real_3d[].contiguous", "[].contiguous", "[].contiguous", "real_3d[].contiguous", "[].float", "outputs[].float", "[].contiguous().detach().cpu().numpy", "outputs[].detach().cpu().numpy", "outputs[].detach().cpu", "[].append", "evaluation.evaluation_matrix._calc_relative_depth_error_withgts_", "evaluation.evaluation_matrix._calc_relative_depth_error_weak_", "evaluation.evaluation_matrix._calc_relative_age_error_weak_", "loss_funcs.calc_mpjpe", "[].append", "[].append", "[].append", "[].contiguous", "args", "np.concatenate", "args", "torch.norm().mean", "[].append", "abs_error.float().cpu().numpy", "loss_funcs.calc_pampjpe().float().cpu().numpy", "[].append", "abs_error.astype", "rt_error.astype", "np.array", "[].contiguous().detach().cpu", "outputs[].detach().cpu", "outputs[].detach", "args", "np.arange", "loss_funcs.calc_pck().cpu().numpy", "[].contiguous", "[].cuda", "loss_funcs._calc_MPJAE", "[].append", "np.array", "torch.norm", "abs_error.float().cpu", "loss_funcs.calc_pampjpe().float().cpu", "[].contiguous().detach", "outputs[].detach", "outputs[].detach().cpu.numpy", "trans_gts.cpu().numpy", "loss_funcs.calc_pck().cpu", "abs_error.float", "loss_funcs.calc_pampjpe().float", "torch.cat", "[].contiguous", "trans_gts.cpu", "loss_funcs.calc_pck", "mpjpe_pck_batch.reshape", "loss_funcs.calc_pampjpe"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation._calc_matched_PCKh_", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix._calc_relative_depth_error_withgts_", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation._calc_relative_depth_error_weak_", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix._calc_relative_age_error_weak_", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_mpjpe", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss._calc_MPJAE", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pck", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pampjpe"], ["def", "calc_outputs_evaluation_matrix", "(", "self", ",", "outputs", ",", "ED", ")", ":", "\n", "    ", "for", "ds", "in", "set", "(", "outputs", "[", "'meta_data'", "]", "[", "'data_set'", "]", ")", ":", "\n", "        ", "val_idx", "=", "np", ".", "where", "(", "np", ".", "array", "(", "outputs", "[", "'meta_data'", "]", "[", "'data_set'", "]", ")", "==", "ds", ")", "[", "0", "]", "\n", "real_3d", "=", "outputs", "[", "'meta_data'", "]", "[", "'kp_3d'", "]", "[", "val_idx", "]", ".", "contiguous", "(", ")", ".", "cuda", "(", ")", "\n", "if", "ds", "in", "constants", ".", "dataset_smpl2lsp", ":", "\n", "            ", "real_3d", "=", "real_3d", "[", ":", ",", "self", ".", "All54_to_LSP14_mapper", "]", ".", "contiguous", "(", ")", "\n", "if", "(", "self", ".", "All54_to_LSP14_mapper", "==", "-", "1", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "real_3d", "[", ":", ",", "self", ".", "All54_to_LSP14_mapper", "==", "-", "1", "]", "=", "-", "2.", "\n", "\n", "", "predicts", "=", "outputs", "[", "'joints_h36m17'", "]", "[", ":", ",", ":", "14", "]", ".", "contiguous", "(", ")", "\n", "align_inds", "=", "[", "constants", ".", "LSP_14", "[", "'R_Hip'", "]", ",", "\n", "constants", ".", "LSP_14", "[", "'L_Hip'", "]", "]", "\n", "bones", ",", "colors", ",", "kp_colors", "=", "constants", ".", "lsp14_connMat", ",", "constants", ".", "cm_body14", ",", "constants", ".", "lsp14_kpcm", "\n", "", "else", ":", "\n", "            ", "predicts", "=", "outputs", "[", "'j3d'", "]", "[", "val_idx", ",", ":", "24", "]", ".", "contiguous", "(", ")", "\n", "real_3d", "=", "real_3d", "[", ":", ",", ":", "24", "]", ".", "contiguous", "(", ")", "\n", "align_inds", "=", "[", "constants", ".", "SMPL_24", "[", "'Pelvis_SMPL'", "]", "]", "\n", "bones", ",", "colors", ",", "kp_colors", "=", "constants", ".", "smpl24_connMat", ",", "constants", ".", "cm_smpl24", ",", "constants", ".", "smpl24_kpcm", "\n", "\n", "", "mPCKh", "=", "_calc_matched_PCKh_", "(", "outputs", "[", "'meta_data'", "]", "[", "'full_kp2d'", "]", ".", "float", "(", ")", ",", "outputs", "[", "'pj2d'", "]", ".", "float", "(", ")", ",", "outputs", "[", "'meta_data'", "]", "[", "'valid_masks'", "]", "[", ":", ",", "0", "]", ")", "\n", "ED", "[", "'mPCKh'", "]", "[", "ds", "]", ".", "append", "(", "mPCKh", ")", "\n", "matched_mask", "=", "mPCKh", ">", "args", "(", ")", ".", "matching_pckh_thresh", "\n", "if", "ds", "in", "constants", ".", "dataset_depth", ":", "\n", "            ", "predicts_j3ds", "=", "outputs", "[", "'j3d'", "]", "[", "val_idx", "]", ".", "contiguous", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predicts_pj2ds", "=", "outputs", "[", "'pj2d_org'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "ds", "in", "[", "'agora'", ",", "'mini'", "]", ":", "\n", "                ", "predicts_j3ds", "=", "predicts_j3ds", "[", ":", ",", ":", "24", "]", "-", "predicts_j3ds", "[", ":", ",", "[", "0", "]", "]", "\n", "predicts_pj2ds", "=", "predicts_pj2ds", "[", ":", ",", ":", "24", "]", "\n", "#trans_preds = estimate_translation(predicts_j3ds, predicts_pj2ds, \\", "\n", "#    proj_mats=outputs['meta_data']['camMats'].cpu().numpy(), cam_dists=outputs['meta_data']['camDists'].cpu().numpy(),pnp_algorithm='cv2')", "\n", "", "trans_preds", "=", "outputs", "[", "'cam_trans'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "trans_gts", "=", "outputs", "[", "'meta_data'", "]", "[", "'root_trans'", "]", "\n", "\n", "# _calc_absolute_depth_error(trans_preds.numpy(), trans_gts.cpu().numpy())", "\n", "ED", "[", "'root_depth'", "]", "[", "ds", "]", ".", "append", "(", "np", ".", "concatenate", "(", "[", "trans_preds", ".", "numpy", "(", ")", "[", "None", "]", ",", "trans_gts", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "None", "]", "]", ")", ")", "\n", "age_gts", "=", "outputs", "[", "'meta_data'", "]", "[", "'depth_info'", "]", "[", ":", ",", "0", "]", "if", "'depth_info'", "in", "outputs", "[", "'meta_data'", "]", "else", "None", "\n", "relative_depth_errors", "=", "_calc_relative_depth_error_withgts_", "(", "trans_preds", "[", ":", ",", "2", "]", ",", "trans_gts", "[", ":", ",", "2", "]", ",", "outputs", "[", "'reorganize_idx'", "]", ",", "\n", "age_gts", "=", "age_gts", ",", "matched_mask", "=", "matched_mask", ")", "\n", "for", "dr_type", "in", "constants", ".", "relative_depth_types", ":", "\n", "                ", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "dr_type", "]", "+=", "relative_depth_errors", "[", "dr_type", "]", "\n", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "dr_type", "+", "'_age'", "]", "+=", "relative_depth_errors", "[", "dr_type", "+", "'_age'", "]", "\n", "\n", "", "", "if", "ds", "in", "ED", "[", "'depth_relative'", "]", ":", "\n", "            ", "age_gts", "=", "outputs", "[", "'meta_data'", "]", "[", "'depth_info'", "]", "[", ":", ",", "0", "]", "if", "'depth_info'", "in", "outputs", "[", "'meta_data'", "]", "else", "None", "\n", "relative_depth_errors", "=", "_calc_relative_depth_error_weak_", "(", "outputs", "[", "'cam_trans'", "]", "[", ":", ",", "2", "]", ",", "outputs", "[", "'meta_data'", "]", "[", "'depth_info'", "]", "[", ":", ",", "3", "]", ",", "\n", "outputs", "[", "'reorganize_idx'", "]", ",", "age_gts", "=", "age_gts", ",", "matched_mask", "=", "matched_mask", ")", "\n", "for", "dr_type", "in", "constants", ".", "relative_depth_types", ":", "\n", "                ", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "dr_type", "]", "+=", "relative_depth_errors", "[", "dr_type", "]", "\n", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "dr_type", "+", "'_age'", "]", "+=", "relative_depth_errors", "[", "dr_type", "+", "'_age'", "]", "\n", "", "", "if", "ds", "in", "ED", "[", "'age_relative'", "]", "and", "args", "(", ")", ".", "learn_relative", ":", "\n", "            ", "relative_age_errors", "=", "_calc_relative_age_error_weak_", "(", "outputs", "[", "'Age_preds'", "]", ",", "outputs", "[", "'meta_data'", "]", "[", "'depth_info'", "]", "[", ":", ",", "0", "]", ",", "matched_mask", "=", "matched_mask", ")", "\n", "for", "age_type", "in", "constants", ".", "relative_age_types", ":", "\n", "                ", "ED", "[", "'age_relative'", "]", "[", "ds", "]", "[", "age_type", "]", "+=", "relative_age_errors", "[", "age_type", "]", "\n", "\n", "", "", "if", "ds", "not", "in", "constants", ".", "dataset_nokp3ds", ":", "\n", "            ", "if", "args", "(", ")", ".", "calc_PVE_error", "and", "ds", "in", "constants", ".", "PVE_ds", ":", "\n", "                ", "batch_PVE", "=", "torch", ".", "norm", "(", "\n", "outputs", "[", "'meta_data'", "]", "[", "'verts'", "]", "[", "val_idx", "]", "-", "outputs", "[", "'verts'", "]", "[", "val_idx", "]", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "ED", "[", "'PVE_new'", "]", "[", "ds", "]", ".", "append", "(", "batch_PVE", ")", "\n", "\n", "", "abs_error", ",", "aligned_poses", "=", "calc_mpjpe", "(", "real_3d", ",", "predicts", ",", "align_inds", "=", "align_inds", ",", "return_org", "=", "True", ")", "\n", "abs_error", "=", "abs_error", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "1000", "\n", "rt_error", "=", "calc_pampjpe", "(", "real_3d", ",", "predicts", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "1000", "\n", "kp3d_vis", "=", "(", "*", "aligned_poses", ",", "bones", ")", "\n", "\n", "if", "self", ".", "calc_pck", ":", "\n", "                ", "pck_joints_sampled", "=", "constants", ".", "SMPL_MAJOR_JOINTS", "if", "real_3d", ".", "shape", "[", "1", "]", "==", "24", "else", "np", ".", "arange", "(", "12", ")", "\n", "mpjpe_pck_batch", "=", "calc_pck", "(", "\n", "real_3d", ",", "predicts", ",", "lrhip", "=", "lrhip", ",", "pck_joints", "=", "pck_joints_sampled", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "1000", "\n", "ED", "[", "'PCK3D'", "]", "[", "ds", "]", ".", "append", "(", "(", "mpjpe_pck_batch", ".", "reshape", "(", "-", "1", ")", "<", "self", ".", "PCK_thresh", ")", ".", "astype", "(", "np", ".", "float32", ")", "*", "100", ")", "\n", "if", "ds", "in", "constants", ".", "MPJAE_ds", ":", "\n", "                    ", "rel_pose_pred", "=", "torch", ".", "cat", "(", "[", "outputs", "[", "'params'", "]", "[", "'global_orient'", "]", "[", "val_idx", "]", ",", "outputs", "[", "'params'", "]", "[", "'body_pose'", "]", "[", "val_idx", "]", "]", ",", "1", ")", "[", ":", ",", ":", "22", "*", "3", "]", ".", "contiguous", "(", ")", "\n", "rel_pose_real", "=", "outputs", "[", "'meta_data'", "]", "[", "'params'", "]", "[", "val_idx", ",", ":", "22", "*", "3", "]", ".", "cuda", "(", ")", "\n", "MPJAE_error", "=", "_calc_MPJAE", "(", "rel_pose_pred", ",", "rel_pose_real", ")", "\n", "ED", "[", "'MPJAE'", "]", "[", "ds", "]", ".", "append", "(", "MPJAE_error", ")", "\n", "\n", "", "", "ED", "[", "'MPJPE'", "]", "[", "ds", "]", ".", "append", "(", "abs_error", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "ED", "[", "'PA_MPJPE'", "]", "[", "ds", "]", ".", "append", "(", "rt_error", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "ED", "[", "'imgpaths'", "]", "[", "ds", "]", ".", "append", "(", "np", ".", "array", "(", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", ")", "[", "val_idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "kp3d_vis", "=", "None", "\n", "", "", "return", "ED", ",", "kp3d_vis", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.val_result": [[92, 133], ["torch.no_grad", "nn.DataParallel().eval", "eval._init_error_dict", "enumerate", "print", "eval.print_results", "meta_data.copy", "eval.calc_outputs_evaluation_matrix", "nn.DataParallel", "eval..network_forward", "outputs[].sum", "print", "print", "set", "eval..visualizer.visulize_result", "eval..network_forward", "np.arange", "show_items.append", "len", "max", "min", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval._init_error_dict", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.print_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.calc_outputs_evaluation_matrix", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base.network_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visulize_result", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base.network_forward"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "val_result", "(", "self", ",", "loader_val", ",", "evaluation", "=", "False", ",", "vis_results", "=", "False", ")", ":", "\n", "    ", "eval_model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ".", "module", ")", ".", "eval", "(", ")", "\n", "ED", "=", "_init_error_dict", "(", ")", "\n", "\n", "for", "iter_num", ",", "meta_data", "in", "enumerate", "(", "loader_val", ")", ":", "\n", "        ", "if", "meta_data", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "meta_data_org", "=", "meta_data", ".", "copy", "(", ")", "\n", "try", ":", "\n", "            ", "outputs", "=", "self", ".", "network_forward", "(", "eval_model", ",", "meta_data", ",", "self", ".", "eval_cfg", ")", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "outputs", "[", "'detection_flag'", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "print", "(", "'Detection failure!!! {}'", ".", "format", "(", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", ")", ")", "\n", "continue", "\n", "\n", "", "ED", ",", "kp3d_vis", "=", "calc_outputs_evaluation_matrix", "(", "\n", "self", ",", "outputs", ",", "ED", ")", "\n", "\n", "if", "iter_num", "%", "(", "self", ".", "val_batch_size", "*", "2", ")", "==", "0", ":", "\n", "            ", "print", "(", "'{}/{}'", ".", "format", "(", "iter_num", ",", "len", "(", "loader_val", ")", ")", ")", "\n", "#eval_results = print_results(ED.copy())", "\n", "if", "not", "evaluation", ":", "\n", "                ", "outputs", "=", "self", ".", "network_forward", "(", "eval_model", ",", "meta_data_org", ",", "self", ".", "val_cfg", ")", "\n", "", "vis_ids", "=", "np", ".", "arange", "(", "max", "(", "min", "(", "self", ".", "val_batch_size", ",", "len", "(", "outputs", "[", "'reorganize_idx'", "]", ")", ")", ",", "8", ")", "//", "4", ")", ",", "None", "\n", "save_name", "=", "'{}_{}'", ".", "format", "(", "self", ".", "global_count", ",", "iter_num", ")", "\n", "for", "ds_name", "in", "set", "(", "outputs", "[", "'meta_data'", "]", "[", "'data_set'", "]", ")", ":", "\n", "                ", "save_name", "+=", "'_{}'", ".", "format", "(", "ds_name", ")", "\n", "", "show_items", "=", "[", "'mesh'", ",", "'joint_sampler'", ",", "'pj2d'", ",", "'classify'", "]", "\n", "if", "kp3d_vis", "is", "not", "None", ":", "\n", "                ", "show_items", ".", "append", "(", "'j3d'", ")", "\n", "", "self", ".", "visualizer", ".", "visulize_result", "(", "outputs", ",", "outputs", "[", "'meta_data'", "]", ",", "show_items", "=", "show_items", ",", "vis_cfg", "=", "{", "'settings'", ":", "[", "'save_img'", "]", ",", "'vids'", ":", "vis_ids", ",", "'save_dir'", ":", "self", ".", "result_img_dir", ",", "'save_name'", ":", "save_name", "}", ",", "kp3ds", "=", "kp3d_vis", ")", "#'org_img', ", "\n", "\n", "", "", "print", "(", "'{} on local_rank {}'", ".", "format", "(", "[", "'Evaluation'", "if", "evaluation", "else", "'Validation'", "]", ",", "self", ".", "local_rank", ")", ")", "\n", "eval_results", "=", "print_results", "(", "ED", ")", "\n", "\n", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.print_results": [[135, 226], ["ED[].items", "ED[].items", "ED[].items", "ED[].items", "eval_results.update", "eval_results.update", "eval.print_table", "sum", "sum", "eval.process_matrix", "eval.process_matrix", "args", "eval_results.update", "args", "len", "print", "evaluation.h36m_evaluation_act_wise", "evaluation.h36m_evaluation_act_wise", "PrettyTable", "PrettyTable.add_row", "PrettyTable.add_row", "print", "len", "np.concatenate", "np.abs().mean", "np.sqrt().mean", "print", "torch.cat", "torch.cat", "torch.cat", "np.array", "print", "enumerate", "torch.cat", "len", "torch.cat", "range", "eval.process_matrix", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "torch.cat", "len", "torch.cat", "list", "torch.cat.sum", "len", "len", "len", "np.concatenate().mean", "np.array", "np.array", "np.abs", "np.sqrt", "len", "len", "len", "torch.cat.sum", "np.array.sum", "enumerate", "near_error_results.float", "age_error_results[].sum", "len", "age_error_results.values", "len", "torch.cat().mean", "np.sum", "torch.abs", "np.concatenate", "dr_corrects[].sum().item", "dr_corrects[].sum().item", "dr_corrects[].sum().item", "age_mask.sum", "torch.cat", "dr_corrects[].sum", "age_mask.sum", "dr_corrects[].sum", "dr_corrects[].sum", "dr_corrects[].sum"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.print_table", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.process_matrix", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.process_matrix", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_ds_utils.h36m_evaluation_act_wise", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_ds_utils.h36m_evaluation_act_wise", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.process_matrix", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "print_results", "(", "ED", ")", ":", "\n", "    ", "eval_results", "=", "{", "}", "\n", "for", "key", ",", "results", "in", "ED", "[", "'root_depth'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "results", ")", ">", "0", ":", "\n", "            ", "results_all", "=", "np", ".", "concatenate", "(", "results", ",", "axis", "=", "1", ")", "\n", "axis_error", "=", "np", ".", "abs", "(", "results_all", "[", "0", "]", "-", "results_all", "[", "1", "]", ")", ".", "mean", "(", "0", ")", "\n", "root_error", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "results_all", "[", "0", "]", "-", "results_all", "[", "1", "]", ")", "**", "2", ",", "axis", "=", "1", ")", ")", ".", "mean", "(", ")", "\n", "print", "(", "'Root trans error of {}: {:.4f} | axis-wise (x,y,z) error: {}'", ".", "format", "(", "key", ",", "root_error", ",", "axis_error", ")", ")", "\n", "\n", "", "", "for", "ds", ",", "results", "in", "ED", "[", "'depth_relative'", "]", ".", "items", "(", ")", ":", "\n", "        ", "result_length", "=", "sum", "(", "[", "len", "(", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "dr_type", "]", ")", "for", "dr_type", "in", "constants", ".", "relative_depth_types", "]", ")", "\n", "if", "result_length", ">", "0", ":", "\n", "            ", "eq_dists", "=", "torch", ".", "cat", "(", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "'eq'", "]", ",", "0", ")", "\n", "cd_dists", "=", "torch", ".", "cat", "(", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "'cd'", "]", ",", "0", ")", "\n", "fd_dists", "=", "torch", ".", "cat", "(", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "'fd'", "]", ",", "0", ")", "\n", "age_flag", "=", "len", "(", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "'eq_age'", "]", ")", ">", "0", "\n", "if", "age_flag", ":", "\n", "                ", "eq_age_ids", "=", "torch", ".", "cat", "(", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "'eq_age'", "]", ",", "0", ")", "\n", "cd_age_ids", "=", "torch", ".", "cat", "(", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "'cd_age'", "]", ",", "0", ")", "\n", "fd_age_ids", "=", "torch", ".", "cat", "(", "ED", "[", "'depth_relative'", "]", "[", "ds", "]", "[", "'fd_age'", "]", ",", "0", ")", "\n", "dr_age_ids", "=", "torch", ".", "cat", "(", "[", "eq_age_ids", ",", "cd_age_ids", ",", "fd_age_ids", "]", ",", "0", ")", "\n", "", "dr_all", "=", "np", ".", "array", "(", "[", "len", "(", "eq_dists", ")", ",", "len", "(", "cd_dists", ")", ",", "len", "(", "fd_dists", ")", "]", ")", "\n", "for", "dr_thresh", "in", "[", "0.2", "]", ":", "#[0.1,0.15,0.2,0.25,0.3]:", "\n", "                ", "dr_corrects", "=", "[", "torch", ".", "abs", "(", "eq_dists", ")", "<", "dr_thresh", ",", "cd_dists", "<", "-", "dr_thresh", ",", "fd_dists", ">", "dr_thresh", "]", "\n", "print", "(", "'Thresh: {} | Equal {} close {} far {}'", ".", "format", "(", "dr_thresh", ",", "dr_corrects", "[", "0", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "dr_all", "[", "0", "]", ",", "dr_corrects", "[", "1", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "dr_all", "[", "1", "]", ",", "dr_corrects", "[", "2", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "dr_all", "[", "2", "]", ")", ")", "\n", "dr_corrects", "=", "torch", ".", "cat", "(", "dr_corrects", ",", "0", ")", "\n", "eval_results", "[", "'{}-PCRD_{}'", ".", "format", "(", "ds", ",", "dr_thresh", ")", "]", "=", "dr_corrects", ".", "sum", "(", ")", "/", "dr_all", ".", "sum", "(", ")", "\n", "if", "age_flag", ":", "\n", "                    ", "for", "age_ind", ",", "age_name", "in", "enumerate", "(", "constants", ".", "relative_age_types", ")", ":", "\n", "                        ", "age_mask", "=", "(", "dr_age_ids", "==", "age_ind", ")", ".", "sum", "(", "-", "1", ")", ".", "bool", "(", ")", "\n", "if", "age_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                            ", "eval_results", "[", "'{}-PCRD_{}_{}'", ".", "format", "(", "ds", ",", "dr_thresh", ",", "age_name", ")", "]", "=", "dr_corrects", "[", "age_mask", "]", ".", "sum", "(", ")", "/", "age_mask", ".", "sum", "(", ")", "\n", "\n", "", "", "", "", "", "", "for", "ds", ",", "results", "in", "ED", "[", "'age_relative'", "]", ".", "items", "(", ")", ":", "\n", "        ", "result_length", "=", "sum", "(", "[", "len", "(", "ED", "[", "'age_relative'", "]", "[", "ds", "]", "[", "age_type", "]", ")", "for", "age_type", "in", "constants", ".", "relative_age_types", "]", ")", "\n", "if", "result_length", ">", "0", ":", "\n", "            ", "print", "(", "'Relative age evaluation results:'", ")", "\n", "age_error_results", "=", "{", "}", "\n", "for", "age_id", ",", "age_type", "in", "enumerate", "(", "constants", ".", "relative_age_types", ")", ":", "\n", "                ", "age_pred_ids", "=", "torch", ".", "cat", "(", "ED", "[", "'age_relative'", "]", "[", "ds", "]", "[", "age_type", "]", ",", "0", ")", "\n", "age_error_results", "[", "age_type", "]", "=", "(", "age_pred_ids", "==", "age_id", ")", ".", "float", "(", ")", "\n", "if", "age_id", "==", "0", ":", "\n", "                    ", "near_error_results", "=", "(", "age_pred_ids", "==", "1", ")", ".", "float", "(", ")", "\n", "", "elif", "age_id", "==", "1", ":", "\n", "                    ", "near_error_results", "=", "(", "age_pred_ids", "==", "0", ")", ".", "float", "(", ")", "+", "(", "age_pred_ids", "==", "2", ")", ".", "float", "(", ")", "\n", "", "elif", "age_id", "==", "2", ":", "\n", "                    ", "near_error_results", "=", "(", "age_pred_ids", "==", "1", ")", ".", "float", "(", ")", "+", "(", "age_pred_ids", "==", "3", ")", ".", "float", "(", ")", "\n", "", "elif", "age_id", "==", "3", ":", "\n", "                    ", "near_error_results", "=", "(", "age_pred_ids", "==", "2", ")", ".", "float", "(", ")", "\n", "", "age_error_results", "[", "age_type", "]", "+=", "near_error_results", ".", "float", "(", ")", "*", "0.667", "\n", "eval_results", "[", "'{}-acc_{}'", ".", "format", "(", "ds", ",", "age_type", ")", "]", "=", "age_error_results", "[", "age_type", "]", ".", "sum", "(", ")", "/", "len", "(", "age_error_results", "[", "age_type", "]", ")", "\n", "\n", "", "age_all_results", "=", "torch", ".", "cat", "(", "list", "(", "age_error_results", ".", "values", "(", ")", ")", ",", "0", ")", "\n", "eval_results", "[", "'{}-age_acc'", ".", "format", "(", "ds", ")", "]", "=", "age_all_results", ".", "sum", "(", ")", "/", "len", "(", "age_all_results", ")", "\n", "\n", "", "", "for", "ds", ",", "results", "in", "ED", "[", "'mPCKh'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "ED", "[", "'mPCKh'", "]", "[", "ds", "]", ")", ">", "0", ":", "\n", "            ", "mPCKh", "=", "torch", ".", "cat", "(", "ED", "[", "'mPCKh'", "]", "[", "ds", "]", ",", "0", ")", "\n", "mPCKh", "=", "mPCKh", "[", "mPCKh", "!=", "-", "1", "]", "\n", "for", "thresh", "in", "range", "(", "6", ",", "7", ")", ":", "#range(1,11):", "\n", "                ", "thresh", "=", "thresh", "/", "10.", "\n", "eval_results", "[", "'{}-mPCKh_{}'", ".", "format", "(", "ds", ",", "thresh", ")", "]", "=", "(", "mPCKh", ">=", "thresh", ")", ".", "sum", "(", ")", "/", "len", "(", "mPCKh", ")", "\n", "\n", "", "", "", "eval_results", ".", "update", "(", "process_matrix", "(", "ED", "[", "'MPJPE'", "]", ",", "'MPJPE'", ")", ")", "\n", "eval_results", ".", "update", "(", "process_matrix", "(", "ED", "[", "'PA_MPJPE'", "]", ",", "'PA_MPJPE'", ")", ")", "\n", "if", "args", "(", ")", ".", "calc_pck", ":", "\n", "        ", "eval_results", ".", "update", "(", "process_matrix", "(", "ED", "[", "'PCK3D'", "]", ",", "'PCK3D'", ")", ")", "\n", "\n", "", "if", "args", "(", ")", ".", "calc_PVE_error", ":", "\n", "        ", "for", "ds_name", "in", "constants", ".", "PVE_ds", ":", "\n", "            ", "if", "len", "(", "ED", "[", "'PVE_new'", "]", "[", "ds_name", "]", ")", ">", "0", ":", "\n", "                ", "eval_results", "[", "'{}-PVE'", ".", "format", "(", "ds_name", ")", "]", "=", "torch", ".", "cat", "(", "ED", "[", "'PVE_new'", "]", "[", "ds_name", "]", ",", "0", ")", ".", "mean", "(", ")", "*", "1000", "\n", "\n", "", "", "", "for", "ds_name", "in", "constants", ".", "MPJAE_ds", ":", "\n", "        ", "if", "ds_name", "in", "ED", "[", "'MPJAE'", "]", ":", "\n", "            ", "if", "len", "(", "ED", "[", "'MPJAE'", "]", "[", "ds_name", "]", ")", ">", "0", ":", "\n", "                ", "eval_results", "[", "'{}-MPJAE'", ".", "format", "(", "ds_name", ")", "]", "=", "np", ".", "concatenate", "(", "ED", "[", "'MPJAE'", "]", "[", "ds_name", "]", ",", "axis", "=", "0", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "", "print_table", "(", "eval_results", ")", "\n", "\n", "if", "len", "(", "ED", "[", "'MPJPE'", "]", "[", "'h36m'", "]", ")", ">", "0", ":", "\n", "        ", "print", "(", "'Detail results on Human3.6M dataset:'", ")", "\n", "PA_MPJPE_acts", "=", "h36m_evaluation_act_wise", "(", "np", ".", "concatenate", "(", "ED", "[", "'PA_MPJPE'", "]", "[", "'h36m'", "]", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "np", ".", "array", "(", "ED", "[", "'imgpaths'", "]", "[", "'h36m'", "]", ")", ",", "axis", "=", "0", ")", ",", "constants", ".", "h36m_action_names", ")", "\n", "MPJPE_acts", "=", "h36m_evaluation_act_wise", "(", "np", ".", "concatenate", "(", "ED", "[", "'MPJPE'", "]", "[", "'h36m'", "]", ",", "axis", "=", "0", ")", ",", "np", ".", "concatenate", "(", "np", ".", "array", "(", "ED", "[", "'imgpaths'", "]", "[", "'h36m'", "]", ")", ",", "axis", "=", "0", ")", ",", "constants", ".", "h36m_action_names", ")", "\n", "table", "=", "PrettyTable", "(", "[", "'Protocol'", "]", "+", "constants", ".", "h36m_action_names", ")", "\n", "table", ".", "add_row", "(", "[", "'1'", "]", "+", "MPJPE_acts", ")", "\n", "table", ".", "add_row", "(", "[", "'2'", "]", "+", "PA_MPJPE_acts", ")", "\n", "print", "(", "table", ")", "\n", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.process_matrix": [[227, 235], ["matrix.items", "len", "np.concatenate", "result[].mean", "np.isnan"], "function", ["None"], ["", "def", "process_matrix", "(", "matrix", ",", "name", ",", "times", "=", "1.", ")", ":", "\n", "    ", "eval_results", "=", "{", "}", "\n", "for", "ds", ",", "error_list", "in", "matrix", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "error_list", ")", ">", "0", ":", "\n", "            ", "result", "=", "np", ".", "concatenate", "(", "error_list", ",", "axis", "=", "0", ")", "\n", "result", "=", "result", "[", "~", "np", ".", "isnan", "(", "result", ")", "]", ".", "mean", "(", ")", "\n", "eval_results", "[", "'{}-{}'", ".", "format", "(", "ds", ",", "name", ")", "]", "=", "result", "*", "times", "\n", "", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval._init_error_dict": [[236, 248], ["range"], "function", ["None"], ["", "def", "_init_error_dict", "(", ")", ":", "\n", "    ", "ED", "=", "{", "}", "\n", "ED", "[", "'MPJPE'", "]", ",", "ED", "[", "'PA_MPJPE'", "]", ",", "ED", "[", "'PCK3D'", "]", ",", "ED", "[", "'imgpaths'", "]", "=", "[", "{", "ds", ":", "[", "]", "for", "ds", "in", "constants", ".", "dataset_involved", "}", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "ED", "[", "'MPJAE'", "]", "=", "{", "ds", ":", "[", "]", "for", "ds", "in", "constants", ".", "MPJAE_ds", "}", "\n", "ED", "[", "'PVE_new'", "]", "=", "{", "ds", ":", "[", "]", "for", "ds", "in", "constants", ".", "PVE_ds", "}", "\n", "ED", "[", "'PVE'", "]", "=", "{", "ds", ":", "{", "'target_theta'", ":", "[", "]", ",", "'pred_theta'", ":", "[", "]", "}", "for", "ds", "in", "constants", ".", "PVE_ds", "}", "\n", "ED", "[", "'ds_bias'", "]", "=", "{", "ds", ":", "{", "'scale'", ":", "[", "]", ",", "'trans'", ":", "[", "]", "}", "for", "ds", "in", "constants", ".", "dataset_involved", "}", "\n", "ED", "[", "'root_depth'", "]", "=", "{", "ds", ":", "[", "]", "for", "ds", "in", "constants", ".", "dataset_depth", "}", "\n", "ED", "[", "'mPCKh'", "]", "=", "{", "ds", ":", "[", "]", "for", "ds", "in", "constants", ".", "dataset_kp2ds", "}", "\n", "ED", "[", "'depth_relative'", "]", "=", "{", "ds", ":", "{", "'eq'", ":", "[", "]", ",", "'cd'", ":", "[", "]", ",", "'fd'", ":", "[", "]", ",", "'eq_age'", ":", "[", "]", ",", "'cd_age'", ":", "[", "]", ",", "'fd_age'", ":", "[", "]", "}", "for", "ds", "in", "constants", ".", "dataset_relative_depth", "+", "constants", ".", "dataset_depth", "}", "\n", "ED", "[", "'age_relative'", "]", "=", "{", "ds", ":", "{", "age_name", ":", "[", "]", "for", "age_name", "in", "constants", ".", "relative_age_types", "}", "for", "ds", "in", "constants", ".", "dataset_relative_age", "}", "\n", "return", "ED", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.print_table": [[249, 272], ["eval_results.items", "PrettyTable", "enumerate", "print", "print", "name.split", "name.split", "raw_dict.items", "PrettyTable.add_row", "matrix_list.append", "np.zeros().tolist", "np.zeros"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "print_table", "(", "eval_results", ")", ":", "\n", "    ", "matrix_dict", "=", "{", "}", "\n", "em_col_id", "=", "0", "\n", "matrix_list", "=", "[", "]", "\n", "for", "name", "in", "eval_results", ":", "\n", "        ", "ds", ",", "em", "=", "name", ".", "split", "(", "'-'", ")", "\n", "if", "em", "not", "in", "matrix_dict", ":", "\n", "            ", "matrix_dict", "[", "em", "]", "=", "em_col_id", "\n", "matrix_list", ".", "append", "(", "em", ")", "\n", "em_col_id", "+=", "1", "\n", "\n", "", "", "raw_dict", "=", "{", "}", "\n", "for", "name", ",", "result", "in", "eval_results", ".", "items", "(", ")", ":", "\n", "        ", "ds", ",", "em", "=", "name", ".", "split", "(", "'-'", ")", "\n", "if", "ds", "not", "in", "raw_dict", ":", "\n", "            ", "raw_dict", "[", "ds", "]", "=", "np", ".", "zeros", "(", "em_col_id", ")", ".", "tolist", "(", ")", "\n", "", "raw_dict", "[", "ds", "]", "[", "matrix_dict", "[", "em", "]", "]", "=", "'{:.3f}'", ".", "format", "(", "result", ")", "\n", "\n", "", "table", "=", "PrettyTable", "(", "[", "'DS/EM'", "]", "+", "matrix_list", ")", "\n", "for", "idx", ",", "(", "ds", ",", "mat_list", ")", "in", "enumerate", "(", "raw_dict", ".", "items", "(", ")", ")", ":", "\n", "        ", "table", ".", "add_row", "(", "[", "ds", "]", "+", "mat_list", ")", "\n", "", "print", "(", "table", ")", "\n", "print", "(", "'-'", "*", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.train.Trainer.__init__": [[8, 20], ["base.Base.__init__", "train.Trainer._build_model_", "train.Trainer._build_optimizer", "train.Trainer.set_up_val_loader", "loss_funcs.Loss", "train.Trainer._create_data_loader", "loss_funcs.Learnable_Loss().cuda", "logging.info", "loss_funcs.Learnable_Loss", "args", "train.Trainer.loader.dataset._get_ID_num_"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._build_model_", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._build_optimizer", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base.set_up_val_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.MixedDataset._get_ID_num_"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_build_model_", "(", ")", "\n", "self", ".", "_build_optimizer", "(", ")", "\n", "self", ".", "set_up_val_loader", "(", ")", "\n", "self", ".", "_calc_loss", "=", "Loss", "(", ")", "\n", "self", ".", "loader", "=", "self", ".", "_create_data_loader", "(", "train_flag", "=", "True", ")", "\n", "self", ".", "merge_losses", "=", "Learnable_Loss", "(", "self", ".", "loader", ".", "dataset", ".", "_get_ID_num_", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "train_cfg", "=", "{", "'mode'", ":", "'matching_gts'", ",", "'is_training'", ":", "True", ",", "'update_data'", ":", "True", ",", "'calc_loss'", ":", "True", "if", "self", ".", "model_return_loss", "else", "False", ",", "'with_nms'", ":", "False", ",", "'with_2d_matching'", ":", "True", ",", "'new_training'", ":", "args", "(", ")", ".", "new_training", "}", "\n", "logging", ".", "info", "(", "'Initialization of Trainer finished!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.train.Trainer.train": [[21, 36], ["init_seeds", "logging.info", "train.Trainer.model.train", "range", "train.Trainer.summary_writer.close", "fix_backbone", "train_entire_model", "train.Trainer.train_epoch", "train_entire_model"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.init_seeds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.train", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.fix_backbone", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.train_entire_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.train_epoch", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.train_entire_model"], ["", "def", "train", "(", "self", ")", ":", "\n", "# Speed-reproducibility tradeoff: ", "\n", "# cuda_deterministic=False is faster but less reproducible, cuda_deterministic=True is slower but more reproducible", "\n", "        ", "init_seeds", "(", "self", ".", "local_rank", ",", "cuda_deterministic", "=", "False", ")", "\n", "logging", ".", "info", "(", "'start training'", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "fix_backbone_training_scratch", ":", "\n", "            ", "fix_backbone", "(", "self", ".", "model", ",", "exclude_key", "=", "[", "'backbone.'", "]", ")", "\n", "", "else", ":", "\n", "            ", "train_entire_model", "(", "self", ".", "model", ")", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "if", "epoch", "==", "1", ":", "\n", "                ", "train_entire_model", "(", "self", ".", "model", ")", "\n", "", "self", ".", "train_epoch", "(", "epoch", ")", "\n", "", "self", ".", "summary_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.train.Trainer.train_step": [[37, 55], ["train.Trainer.optimizer.zero_grad", "train.Trainer.network_forward", "train.Trainer.merge_losses", "torch.isnan", "train.Trainer.update", "train.Trainer.scaler.scale().backward", "train.Trainer.scaler.step", "train.Trainer.scaler.update", "loss.backward", "train.Trainer.optimizer.step", "train.Trainer._calc_loss", "torch.zeros", "train.Trainer.scaler.scale"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base.network_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer._calc_loss"], ["", "def", "train_step", "(", "self", ",", "meta_data", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "self", ".", "network_forward", "(", "self", ".", "model", ",", "meta_data", ",", "self", ".", "train_cfg", ")", "\n", "\n", "if", "not", "self", ".", "model_return_loss", ":", "\n", "            ", "outputs", ".", "update", "(", "self", ".", "_calc_loss", "(", "outputs", ")", ")", "\n", "", "loss", ",", "outputs", "=", "self", ".", "merge_losses", "(", "outputs", ",", "self", ".", "train_cfg", "[", "'new_training'", "]", ")", "\n", "\n", "if", "torch", ".", "isnan", "(", "loss", ")", ":", "\n", "            ", "return", "outputs", ",", "torch", ".", "zeros", "(", "1", ")", "\n", "", "if", "self", ".", "model_precision", "==", "'fp16'", ":", "\n", "            ", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "return", "outputs", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.train.Trainer.train_log_visualization": [[56, 79], ["losses.update", "losses_dict.update", "loss.item", "logging.info", "write2log", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalars", "losses.reset", "losses_dict.reset", "data_time.reset", "train.Trainer.summary_writer.flush", "determ_worst_best", "set", "train.Trainer.visualizer.visulize_result", "len", "losses_dict.avg", "losses_dict.avg"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.write2log", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.reset", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.reset", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.reset", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.flush", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_ds_utils.determ_worst_best", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visulize_result", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.avg", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.avg"], ["", "def", "train_log_visualization", "(", "self", ",", "outputs", ",", "loss", ",", "run_time", ",", "data_time", ",", "losses", ",", "losses_dict", ",", "epoch", ",", "iter_index", ")", ":", "\n", "        ", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "losses_dict", ".", "update", "(", "outputs", "[", "'loss_dict'", "]", ")", "\n", "if", "self", ".", "global_count", "%", "self", ".", "print_freq", "==", "0", ":", "\n", "            ", "message", "=", "'Epoch: [{0}][{1}/{2}] Time {data_time.avg:.2f} RUN {run_time.avg:.2f} Lr {lr} Loss {loss.avg:.2f} | Losses {3}'", ".", "format", "(", "\n", "epoch", ",", "iter_index", "+", "1", ",", "len", "(", "self", ".", "loader", ")", ",", "losses_dict", ".", "avg", "(", ")", ",", "#Acc {3} | accuracies.avg(), ", "\n", "data_time", "=", "data_time", ",", "run_time", "=", "run_time", ",", "loss", "=", "losses", ",", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "logging", ".", "info", "(", "message", ")", "\n", "write2log", "(", "self", ".", "log_file", ",", "'%s\\n'", "%", "message", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'loss'", ",", "losses", ".", "avg", ",", "self", ".", "global_count", ")", "\n", "self", ".", "summary_writer", ".", "add_scalars", "(", "'loss_items'", ",", "losses_dict", ".", "avg", "(", ")", ",", "self", ".", "global_count", ")", "\n", "\n", "losses", ".", "reset", "(", ")", ";", "losses_dict", ".", "reset", "(", ")", ";", "data_time", ".", "reset", "(", ")", "#accuracies.reset(); ", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "", "if", "self", ".", "global_count", "%", "(", "4", "*", "self", ".", "print_freq", ")", "==", "0", "or", "self", ".", "global_count", "==", "50", ":", "\n", "            ", "vis_ids", ",", "vis_errors", "=", "determ_worst_best", "(", "outputs", "[", "'kp_error'", "]", ",", "top_n", "=", "3", ")", "\n", "save_name", "=", "'{}'", ".", "format", "(", "self", ".", "global_count", ")", "\n", "for", "ds_name", "in", "set", "(", "outputs", "[", "'meta_data'", "]", "[", "'data_set'", "]", ")", ":", "\n", "                ", "save_name", "+=", "'_{}'", ".", "format", "(", "ds_name", ")", "\n", "\n", "", "train_vis_dict", "=", "self", ".", "visualizer", ".", "visulize_result", "(", "outputs", ",", "outputs", "[", "'meta_data'", "]", ",", "show_items", "=", "[", "'org_img'", ",", "'mesh'", ",", "'joint_sampler'", ",", "'pj2d'", ",", "'centermap'", "]", ",", "vis_cfg", "=", "{", "'settings'", ":", "[", "'save_img'", "]", ",", "'vids'", ":", "vis_ids", ",", "'save_dir'", ":", "self", ".", "train_img_dir", ",", "'save_name'", ":", "save_name", ",", "'verrors'", ":", "[", "vis_errors", "]", ",", "'error_names'", ":", "[", "'E'", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.train.Trainer.train_epoch": [[80, 114], ["AverageMeter_Dict", "time.time", "enumerate", "save_model", "train.Trainer.e_sche.step", "AverageMeter", "data_time.update", "time.time", "train.Trainer.train_step", "time.time", "range", "train.Trainer.validation", "args", "run_time.update", "train.Trainer.train_log_visualization", "save_model", "train.Trainer.validation", "torch.distributed.barrier", "time.time", "args", "time.time"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.save_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.train.Trainer.train_step", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.validation", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.train.Trainer.train_log_visualization", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.save_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.validation", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "def", "train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "run_time", ",", "data_time", ",", "losses", "=", "[", "AverageMeter", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "losses_dict", "=", "AverageMeter_Dict", "(", ")", "\n", "batch_start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "iter_index", ",", "meta_data", "in", "enumerate", "(", "self", ".", "loader", ")", ":", "\n", "            ", "if", "self", ".", "fast_eval_iter", "==", "0", ":", "\n", "                ", "self", ".", "validation", "(", "epoch", ")", "\n", "break", "\n", "", "self", ".", "global_count", "+=", "1", "\n", "if", "args", "(", ")", ".", "new_training", ":", "\n", "                ", "if", "self", ".", "global_count", "==", "args", "(", ")", ".", "new_training_iters", ":", "\n", "                    ", "self", ".", "train_cfg", "[", "'new_training'", "]", ",", "self", ".", "val_cfg", "[", "'new_training'", "]", ",", "self", ".", "eval_cfg", "[", "'new_training'", "]", "=", "False", ",", "False", ",", "False", "\n", "\n", "", "", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "batch_start_time", ")", "\n", "run_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "outputs", ",", "loss", "=", "self", ".", "train_step", "(", "meta_data", ")", "\n", "\n", "if", "self", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                ", "run_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "run_start_time", ")", "\n", "self", ".", "train_log_visualization", "(", "outputs", ",", "loss", ",", "run_time", ",", "data_time", ",", "losses", ",", "losses_dict", ",", "epoch", ",", "iter_index", ")", "\n", "\n", "", "if", "self", ".", "global_count", "%", "self", ".", "test_interval", "==", "0", "or", "self", ".", "global_count", "==", "self", ".", "fast_eval_iter", ":", "#self.print_freq*2", "\n", "                ", "save_model", "(", "self", ".", "model", ",", "'{}_val_cache.pkl'", ".", "format", "(", "self", ".", "tab", ")", ",", "parent_folder", "=", "self", ".", "model_save_dir", ")", "\n", "self", ".", "validation", "(", "epoch", ")", "\n", "\n", "", "if", "self", ".", "distributed_training", ":", "\n", "# wait for rank 0 process finish the job", "\n", "                ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "", "batch_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "title", "=", "'{}_epoch_{}.pkl'", ".", "format", "(", "self", ".", "tab", ",", "epoch", ")", "\n", "save_model", "(", "self", ".", "model", ",", "title", ",", "parent_folder", "=", "self", ".", "model_save_dir", ")", "\n", "self", ".", "e_sche", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.train.Trainer.validation": [[115, 151], ["logging.info", "train.Trainer.dataset_val_list.items", "logging.info", "save_model", "train.Trainer.model.train", "train.Trainer.summary_writer.flush", "logging.info", "eval.val_result", "[].append", "[].append", "eval.val_result", "eval.val_result", "train.Trainer.summary_writer.add_scalars", "max", "max"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.save_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.train", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.flush", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.val_result", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.val_result", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.val_result"], ["", "def", "validation", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'evaluation result on {} iters: '", ".", "format", "(", "epoch", ")", ")", "\n", "for", "ds_name", ",", "val_loader", "in", "self", ".", "dataset_val_list", ".", "items", "(", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'Evaluation on {}'", ".", "format", "(", "ds_name", ")", ")", "\n", "eval_results", "=", "val_result", "(", "self", ",", "loader_val", "=", "val_loader", ",", "evaluation", "=", "False", ")", "\n", "if", "ds_name", "==", "'relative'", ":", "\n", "                ", "if", "'relativity-PCRD_0.2'", "not", "in", "eval_results", ":", "\n", "                    ", "continue", "\n", "", "PCRD", "=", "eval_results", "[", "'relativity-PCRD_0.2'", "]", "\n", "age_baby_acc", "=", "eval_results", "[", "'relativity-acc_baby'", "]", "\n", "if", "PCRD", ">", "max", "(", "self", ".", "evaluation_results_dict", "[", "'relative'", "]", "[", "'PCRD'", "]", ")", "or", "age_baby_acc", ">", "max", "(", "self", ".", "evaluation_results_dict", "[", "'relative'", "]", "[", "'AGE_baby'", "]", ")", ":", "\n", "                    ", "eval_results", "=", "val_result", "(", "self", ",", "loader_val", "=", "self", ".", "dataset_test_list", "[", "'relative'", "]", ",", "evaluation", "=", "True", ")", "\n", "\n", "", "self", ".", "evaluation_results_dict", "[", "'relative'", "]", "[", "'PCRD'", "]", ".", "append", "(", "PCRD", ")", "\n", "self", ".", "evaluation_results_dict", "[", "'relative'", "]", "[", "'AGE_baby'", "]", ".", "append", "(", "age_baby_acc", ")", "\n", "\n", "", "else", ":", "\n", "                ", "MPJPE", ",", "PA_MPJPE", "=", "eval_results", "[", "'{}-{}'", ".", "format", "(", "ds_name", ",", "'MPJPE'", ")", "]", ",", "eval_results", "[", "'{}-{}'", ".", "format", "(", "ds_name", ",", "'PA_MPJPE'", ")", "]", "\n", "test_flag", "=", "False", "\n", "if", "ds_name", "in", "self", ".", "dataset_test_list", ":", "\n", "                    ", "test_flag", "=", "True", "\n", "if", "ds_name", "in", "self", ".", "val_best_PAMPJPE", ":", "\n", "                        ", "if", "PA_MPJPE", "<", "self", ".", "val_best_PAMPJPE", "[", "ds_name", "]", ":", "\n", "                            ", "self", ".", "val_best_PAMPJPE", "[", "ds_name", "]", "=", "PA_MPJPE", "\n", "", "else", ":", "\n", "                            ", "test_flag", "=", "False", "\n", "", "", "", "if", "test_flag", "or", "self", ".", "test_interval", "<", "100", ":", "\n", "                    ", "eval_results", "=", "val_result", "(", "self", ",", "loader_val", "=", "self", ".", "dataset_test_list", "[", "ds_name", "]", ",", "evaluation", "=", "True", ")", "\n", "self", ".", "summary_writer", ".", "add_scalars", "(", "'{}-test'", ".", "format", "(", "ds_name", ")", ",", "eval_results", ",", "self", ".", "global_count", ")", "\n", "\n", "", "", "", "title", "=", "'{}_{:.4f}_{:.4f}_{}.pkl'", ".", "format", "(", "epoch", ",", "MPJPE", ",", "PA_MPJPE", ",", "self", ".", "tab", ")", "\n", "logging", ".", "info", "(", "'Model saved as {}'", ".", "format", "(", "title", ")", ")", "\n", "save_model", "(", "self", ".", "model", ",", "title", ",", "parent_folder", "=", "self", ".", "model_save_dir", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.train.Trainer.get_running_results": [[152, 157], ["np.array", "np.array", "np.mean", "np.var", "np.mean", "np.var"], "methods", ["None"], ["", "def", "get_running_results", "(", "self", ",", "ds", ")", ":", "\n", "        ", "mpjpe", "=", "np", ".", "array", "(", "self", ".", "evaluation_results_dict", "[", "ds", "]", "[", "'MPJPE'", "]", ")", "\n", "pampjpe", "=", "np", ".", "array", "(", "self", ".", "evaluation_results_dict", "[", "ds", "]", "[", "'PAMPJPE'", "]", ")", "\n", "mpjpe_mean", ",", "mpjpe_var", ",", "pampjpe_mean", ",", "pampjpe_var", "=", "np", ".", "mean", "(", "mpjpe", ")", ",", "np", ".", "var", "(", "mpjpe", ")", ",", "np", ".", "mean", "(", "pampjpe", ")", ",", "np", ".", "var", "(", "pampjpe", ")", "\n", "return", "mpjpe_mean", ",", "mpjpe_var", ",", "pampjpe_mean", ",", "pampjpe_var", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.train.main": [[158, 162], ["ConfigContext", "train.Trainer", "Trainer.train", "parse_args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.train", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "with", "ConfigContext", "(", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", ":", "\n", "        ", "trainer", "=", "Trainer", "(", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.__init__": [[11, 31], ["base.Base.__init__", "pretrain.Trainer._build_model_", "pretrain.Trainer._build_optimizer", "pretrain.Trainer.set_up_validation", "loss_funcs.Learnable_Loss().cuda", "pretrain.Trainer.optimizer.add_param_group", "pretrain.Trainer._create_data_loader", "os.makedirs", "logging.info", "maps_utils.HeatmapParser", "loss_funcs.maps_loss.Heatmap_AE_loss", "maps_utils.CenterMap", "loss_funcs.Learnable_Loss", "pretrain.Trainer.mutli_task_uncertainty_weighted_loss.parameters", "args", "args", "args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._build_model_", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._build_optimizer", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.set_up_validation", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_build_model_", "(", ")", "\n", "self", ".", "_build_optimizer", "(", ")", "\n", "self", ".", "set_up_validation", "(", ")", "\n", "self", ".", "mutli_task_uncertainty_weighted_loss", "=", "Learnable_Loss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "optimizer", ".", "add_param_group", "(", "{", "'params'", ":", "self", ".", "mutli_task_uncertainty_weighted_loss", ".", "parameters", "(", ")", "}", ")", "\n", "self", ".", "loader", "=", "self", ".", "_create_data_loader", "(", "train_flag", "=", "True", ")", "\n", "if", "args", "(", ")", ".", "learn_2dpose", "or", "args", "(", ")", ".", "learn_AE", ":", "\n", "            ", "self", ".", "heatmap_parser", "=", "HeatmapParser", "(", ")", "\n", "self", ".", "heatmap_aeloss", "=", "Heatmap_AE_loss", "(", "17", ",", "loss_type_HM", "=", "args", "(", ")", ".", "HMloss_type", ",", "loss_type_AE", "=", "'exp'", ")", "\n", "self", ".", "centermap_parser", "=", "CenterMap", "(", ")", "\n", "", "self", ".", "train_cfg", "=", "{", "'mode'", ":", "'train'", ",", "'update_data'", ":", "True", ",", "'calc_loss'", ":", "True", "if", "self", ".", "model_return_loss", "else", "False", ",", "'new_training'", ":", "Flase", "}", "\n", "self", ".", "eval_cfg", "=", "{", "'mode'", ":", "'train'", ",", "'calc_loss'", ":", "False", "}", "\n", "self", ".", "val_cfg", "=", "{", "'mode'", ":", "'val'", ",", "'calc_loss'", ":", "False", "}", "\n", "\n", "self", ".", "result_save_dir", "=", "'/export/home/suny/pretrain_result_images'", "\n", "os", ".", "makedirs", "(", "self", ".", "result_save_dir", ",", "exist_ok", "=", "True", ")", "\n", "logging", ".", "info", "(", "'Initialization of Trainer finished!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.set_up_validation": [[32, 39], ["pretrain.Trainer._create_single_data_loader", "pretrain.Trainer._create_single_data_loader", "logging.info", "list", "pretrain.Trainer.dataset_val_list.keys"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info"], ["", "def", "set_up_validation", "(", "self", ")", ":", "\n", "        ", "self", ".", "evaluation_results_dict", "=", "{", "}", "\n", "self", ".", "dataset_val_list", ",", "self", ".", "dataset_test_list", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "dataset_val_list", "[", "'coco'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'coco'", ",", "train_flag", "=", "False", ",", "regress_smpl", "=", "False", ")", "\n", "self", ".", "dataset_val_list", "[", "'crowdhuman'", "]", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'crowdhuman'", ",", "train_flag", "=", "False", ")", "\n", "\n", "logging", ".", "info", "(", "'dataset_val_list:{}'", ".", "format", "(", "list", "(", "self", ".", "dataset_val_list", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer._calc_loss": [[40, 56], ["meta_data[].to", "list", "pretrain.Trainer.heatmap_AE_loss", "meta_data[].to.sum", "loss_funcs.maps_loss.focal_loss", "loss_dict.keys", "isinstance", "meta_data[].to", "meta_data[].to", "[].to", "loss_dict[].mean", "eval"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.heatmap_AE_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.focal_loss"], ["", "def", "_calc_loss", "(", "self", ",", "outputs", ",", "meta_data", ")", ":", "\n", "        ", "device", "=", "outputs", "[", "'center_map'", "]", ".", "device", "\n", "loss_dict", "=", "{", "}", "\n", "if", "'kp_ae_maps'", "in", "outputs", ":", "\n", "            ", "loss_dict", "[", "'heatmap'", "]", ",", "loss_dict", "[", "'AE'", "]", "=", "self", ".", "heatmap_AE_loss", "(", "meta_data", "[", "'full_kp2d'", "]", ".", "to", "(", "device", ")", ",", "outputs", "[", "'kp_ae_maps'", "]", ",", "meta_data", "[", "'heatmap'", "]", ".", "to", "(", "device", ")", ",", "meta_data", "[", "'AE_joints'", "]", ")", "\n", "", "all_person_mask", "=", "meta_data", "[", "'all_person_detected_mask'", "]", ".", "to", "(", "device", ")", "\n", "if", "all_person_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "loss_dict", "[", "'CenterMap'", "]", "=", "focal_loss", "(", "outputs", "[", "'center_map'", "]", "[", "all_person_mask", "]", ",", "meta_data", "[", "'centermap'", "]", "[", "all_person_mask", "]", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "loss_names", "=", "list", "(", "loss_dict", ".", "keys", "(", ")", ")", "\n", "for", "name", "in", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "loss_dict", "[", "name", "]", ",", "tuple", ")", ":", "\n", "                ", "loss_dict", "[", "name", "]", "=", "loss_dict", "[", "name", "]", "[", "0", "]", "\n", "", "loss_dict", "[", "name", "]", "=", "loss_dict", "[", "name", "]", ".", "mean", "(", ")", "*", "eval", "(", "'args.{}_weight'", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "return", "{", "'loss_dict'", ":", "loss_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.heatmap_AE_loss": [[57, 63], ["pretrain.Trainer.heatmap_aeloss"], "methods", ["None"], ["", "def", "heatmap_AE_loss", "(", "self", ",", "real", ",", "pred", ",", "heatmap_gt", ",", "joints", ")", ":", "\n", "#heatmap_gt = self.heatmap_generator.batch_process(real)", "\n", "#joints = self.joint_generator.batch_process(real)", "\n", "        ", "heatmaps_loss", ",", "push_loss", ",", "pull_loss", "=", "self", ".", "heatmap_aeloss", "(", "pred", ",", "heatmap_gt", ",", "joints", ")", "\n", "AE_loss", "=", "pull_loss", "+", "push_loss", "\n", "return", "heatmaps_loss", ",", "AE_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.train": [[64, 77], ["init_seeds", "logging.info", "pretrain.Trainer.model.train", "range", "pretrain.Trainer.summary_writer.close", "fix_backbone", "pretrain.Trainer.train_epoch", "train_entire_model"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.init_seeds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.train", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.fix_backbone", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.train_epoch", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.train_entire_model"], ["", "def", "train", "(", "self", ")", ":", "\n", "# Speed-reproducibility tradeoff: ", "\n", "# cuda_deterministic=False is faster but less reproducible, cuda_deterministic=True is slower but more reproducible", "\n", "        ", "init_seeds", "(", "self", ".", "local_rank", ",", "cuda_deterministic", "=", "False", ")", "\n", "logging", ".", "info", "(", "'start training'", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "not", "self", ".", "fine_tune", "and", "self", ".", "fix_backbone_training_scratch", ":", "\n", "            ", "fix_backbone", "(", "self", ".", "model", ",", "exclude_key", "=", "[", "'backbone.'", "]", ")", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "if", "epoch", "==", "1", ":", "\n", "                ", "train_entire_model", "(", "self", ".", "model", ")", "\n", "", "self", ".", "train_epoch", "(", "epoch", ")", "\n", "", "self", ".", "summary_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.train_epoch": [[78, 125], ["AverageMeter_Dict", "time.time", "enumerate", "save_model", "AverageMeter", "data_time.update", "time.time", "pretrain.Trainer.optimizer.zero_grad", "time.time", "range", "pretrain.Trainer.update", "pretrain.Trainer.mutli_task_uncertainty_weighted_loss", "pretrain.Trainer.scaler.scale().backward", "pretrain.Trainer.scaler.step", "pretrain.Trainer.scaler.update", "pretrain.Trainer.model", "pretrain.Trainer.update", "pretrain.Trainer.mutli_task_uncertainty_weighted_loss", "loss.backward", "pretrain.Trainer.optimizer.step", "run_time.update", "losses.update", "AverageMeter_Dict.update", "pretrain.Trainer.validation", "time.time", "autocast", "pretrain.Trainer.model", "pretrain.Trainer._calc_loss", "pretrain.Trainer._calc_loss", "loss.item", "print", "write2log", "pretrain.Trainer.summary_writer.add_scalar", "pretrain.Trainer.summary_writer.add_scalars", "losses.reset", "AverageMeter_Dict.reset", "data_time.reset", "pretrain.Trainer.summary_writer.flush", "pretrain.Trainer.scaler.scale", "time.time", "len", "AverageMeter_Dict.avg", "AverageMeter_Dict.avg"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.save_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.validation", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer._calc_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer._calc_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.write2log", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.reset", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.reset", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.reset", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.flush", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.avg", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.avg"], ["", "def", "train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "run_time", ",", "data_time", ",", "losses", "=", "[", "AverageMeter", "(", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "losses_dict", "=", "AverageMeter_Dict", "(", ")", "\n", "batch_start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "iter_index", ",", "meta_data", "in", "enumerate", "(", "self", ".", "loader", ")", ":", "\n", "            ", "self", ".", "global_count", "+=", "1", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "batch_start_time", ")", "\n", "run_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "model_precision", "==", "'fp16'", ":", "\n", "                ", "with", "autocast", "(", ")", ":", "\n", "                    ", "outputs", "=", "self", ".", "model", "(", "meta_data", ")", "\n", "", "outputs", ".", "update", "(", "self", ".", "_calc_loss", "(", "outputs", ",", "meta_data", ")", ")", "\n", "loss", ",", "outputs", "=", "self", ".", "mutli_task_uncertainty_weighted_loss", "(", "outputs", ")", "\n", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "self", ".", "model", "(", "meta_data", ")", "\n", "outputs", ".", "update", "(", "self", ".", "_calc_loss", "(", "outputs", ",", "meta_data", ")", ")", "\n", "loss", ",", "outputs", "=", "self", ".", "mutli_task_uncertainty_weighted_loss", "(", "outputs", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "self", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                ", "run_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "run_start_time", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "losses_dict", ".", "update", "(", "outputs", "[", "'loss_dict'", "]", ")", "\n", "if", "self", ".", "global_count", "%", "self", ".", "print_freq", "==", "0", ":", "\n", "                    ", "message", "=", "'Epoch: [{0}][{1}/{2}] Time {data_time.avg:.2f} RUN {run_time.avg:.2f} Lr {lr} Loss {loss.avg:.2f} | Losses {3}'", ".", "format", "(", "\n", "epoch", ",", "iter_index", "+", "1", ",", "len", "(", "self", ".", "loader", ")", ",", "losses_dict", ".", "avg", "(", ")", ",", "#Acc {3} | accuracies.avg(), ", "\n", "data_time", "=", "data_time", ",", "run_time", "=", "run_time", ",", "loss", "=", "losses", ",", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "print", "(", "message", ")", "\n", "write2log", "(", "self", ".", "log_file", ",", "'%s\\n'", "%", "message", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'loss'", ",", "losses", ".", "avg", ",", "self", ".", "global_count", ")", "\n", "self", ".", "summary_writer", ".", "add_scalars", "(", "'loss_items'", ",", "losses_dict", ".", "avg", "(", ")", ",", "self", ".", "global_count", ")", "\n", "\n", "losses", ".", "reset", "(", ")", ";", "losses_dict", ".", "reset", "(", ")", ";", "data_time", ".", "reset", "(", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "self", ".", "global_count", "%", "self", ".", "test_interval", "==", "0", "or", "(", "self", ".", "global_count", "==", "10", "and", "self", ".", "fast_eval", ")", ":", "\n", "                ", "self", ".", "validation", "(", "epoch", ")", "\n", "", "batch_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "title", "=", "'{}_epoch_{}.pkl'", ".", "format", "(", "self", ".", "tab", ",", "epoch", ")", "\n", "save_model", "(", "self", ".", "model", ",", "title", ",", "parent_folder", "=", "self", ".", "model_save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.validation": [[126, 154], ["nn.DataParallel.eval", "logging.info", "pretrain.Trainer.dataset_val_list.items", "logging.info", "save_model", "pretrain.Trainer.model.train", "logging.info", "enumerate", "nn.DataParallel", "nn.DataParallel.", "pretrain.Trainer.visualize_outputs_hmae", "autocast", "nn.DataParallel.", "args", "args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.save_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.train", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.visualize_outputs_hmae", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "validation", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "distributed_training", ":", "\n", "            ", "eval_model", "=", "self", ".", "model", ".", "module", "\n", "", "elif", "self", ".", "master_batch_size", "!=", "-", "1", ":", "\n", "            ", "eval_model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ".", "module", ")", "\n", "", "else", ":", "\n", "            ", "eval_model", "=", "self", ".", "model", "\n", "", "eval_model", ".", "eval", "(", ")", "\n", "logging", ".", "info", "(", "'evaluation result on {} iters: '", ".", "format", "(", "epoch", ")", ")", "\n", "for", "ds_name", ",", "val_loader", "in", "self", ".", "dataset_val_list", ".", "items", "(", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'Evaluation on {}'", ".", "format", "(", "ds_name", ")", ")", "\n", "for", "iter_index", ",", "meta_data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                ", "if", "self", ".", "model_precision", "==", "'fp16'", ":", "\n", "                    ", "with", "autocast", "(", ")", ":", "\n", "                        ", "outputs", "=", "eval_model", "(", "meta_data", ")", "\n", "", "", "else", ":", "\n", "                    ", "outputs", "=", "eval_model", "(", "meta_data", ")", "\n", "", "if", "args", "(", ")", ".", "learn_2dpose", "or", "args", "(", ")", ".", "learn_AE", ":", "\n", "                    ", "self", ".", "visualize_outputs_hmae", "(", "outputs", ",", "meta_data", ",", "epoch", ")", "\n", "\n", "", "if", "iter_index", "==", "5", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "title", "=", "'{}_{}.pkl'", ".", "format", "(", "epoch", ",", "self", ".", "tab", ")", "\n", "logging", ".", "info", "(", "'Model saved as {}'", ".", "format", "(", "title", ")", ")", "\n", "save_model", "(", "eval_model", ",", "title", ",", "parent_folder", "=", "self", ".", "model_save_dir", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.visualize_outputs_offsets": [[155, 176], ["outputs[].cpu().numpy", "outputs[].detach().cpu().numpy", "outputs[].cpu().numpy", "np.unique", "visualization.visualization.make_heatmaps", "visualization.visualization.draw_skeleton", "visualization.visualization.draw_skeleton_multiperson", "np.concatenate", "os.path.join", "cv2.imwrite", "outputs[].cpu", "outputs[].detach().cpu", "outputs[].cpu", "np.where", "len", "print", "[].numpy", "img.copy", "img.copy", "img.copy", "float", "len", "str", "os.path.basename", "outputs[].detach", "args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.make_heatmaps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "visualize_outputs_offsets", "(", "self", ",", "outputs", ",", "meta_data", ",", "epoch", ")", ":", "\n", "        ", "centers_pred", "=", "outputs", "[", "'centers_pred'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "kp2d_preds", "=", "outputs", "[", "'joint_sampler'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "batch_ids", "=", "outputs", "[", "'reorganize_idx'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "bid", "in", "np", ".", "unique", "(", "batch_ids", ")", ":", "\n", "            ", "cids", "=", "np", ".", "where", "(", "batch_ids", "==", "bid", ")", "[", "0", "]", "\n", "img_path", "=", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", "[", "cids", "[", "0", "]", "]", "\n", "if", "len", "(", "cids", ")", "==", "0", ":", "\n", "                ", "print", "(", "'detection failed on {}'", ".", "format", "(", "img_path", ")", ")", "\n", "", "img", "=", "meta_data", "[", "'image_org'", "]", "[", "bid", "]", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "centermap_color", "=", "make_heatmaps", "(", "img", ".", "copy", "(", ")", ",", "outputs", "[", "'center_map'", "]", "[", "bid", "]", ")", "\n", "\n", "centers", "=", "(", "centers_pred", "[", "cids", "]", "/", "float", "(", "args", "(", ")", ".", "centermap_size", ")", "*", "img", ".", "shape", "[", "1", "]", ")", "\n", "center_img", "=", "draw_skeleton", "(", "img", ".", "copy", "(", ")", ",", "centers", ",", "r", "=", "6", ")", "\n", "\n", "kp2ds", "=", "(", "(", "kp2d_preds", "[", "cids", "]", "+", "1", ")", "/", "2", "*", "img", ".", "shape", "[", "1", "]", ")", ".", "reshape", "(", "(", "len", "(", "cids", ")", ",", "-", "1", ",", "2", ")", ")", "\n", "skeleton_img", "=", "draw_skeleton_multiperson", "(", "img", ".", "copy", "(", ")", ",", "kp2ds", ",", "bones", "=", "constants", ".", "joint_sampler_connMat", ",", "cm", "=", "constants", ".", "cm_body25", ")", "\n", "\n", "result_img", "=", "np", ".", "concatenate", "(", "[", "centermap_color", ",", "center_img", ",", "skeleton_img", "]", ",", "1", ")", "\n", "save_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "result_save_dir", ",", "str", "(", "epoch", ")", "+", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "\n", "cv2", ".", "imwrite", "(", "save_name", ",", "result_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.visualize_outputs_hmae": [[177, 196], ["pretrain.Trainer.centermap_parser.parse_centermap", "pretrain.Trainer.parse_kps", "enumerate", "center_yxs[].cpu().numpy", "visualization.visualization.make_heatmaps", "visualization.visualization.draw_skeleton_multiperson", "visualization.visualization.draw_skeleton", "np.concatenate", "os.path.join", "cv2.imwrite", "torch.where", "[].numpy", "img.copy", "img.copy", "img.copy", "center_yxs[].cpu", "float", "str", "os.path.basename", "args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parse_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.make_heatmaps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "def", "visualize_outputs_hmae", "(", "self", ",", "outputs", ",", "meta_data", ",", "epoch", ")", ":", "\n", "        ", "center_preds_info", "=", "self", ".", "centermap_parser", ".", "parse_centermap", "(", "outputs", "[", "'center_map'", "]", ")", "\n", "batch_ids", ",", "topk_inds", ",", "center_yxs", ",", "topk_score", "=", "center_preds_info", "\n", "kp2d_preds", "=", "self", ".", "parse_kps", "(", "outputs", "[", "'kp_ae_maps'", "]", ")", "\n", "for", "bid", ",", "img_path", "in", "enumerate", "(", "meta_data", "[", "'imgpath'", "]", ")", ":", "\n", "            ", "cids", "=", "torch", ".", "where", "(", "batch_ids", "==", "bid", ")", "[", "0", "]", "\n", "centers", "=", "center_yxs", "[", "cids", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "kp2ds", "=", "kp2d_preds", "[", "bid", "]", "\n", "img", "=", "meta_data", "[", "'image_org'", "]", "[", "bid", "]", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "kp2ds", "=", "(", "(", "kp2ds", "+", "1", ")", "/", "2", "*", "img", ".", "shape", "[", "1", "]", ")", "\n", "centers", "=", "(", "centers", "[", ":", ",", ":", ":", "-", "1", "]", "/", "float", "(", "args", "(", ")", ".", "centermap_size", ")", "*", "img", ".", "shape", "[", "1", "]", ")", "\n", "centermap_color", "=", "make_heatmaps", "(", "img", ".", "copy", "(", ")", ",", "outputs", "[", "'center_map'", "]", "[", "bid", "]", ")", "\n", "\n", "skeleton_img", "=", "draw_skeleton_multiperson", "(", "img", ".", "copy", "(", ")", ",", "kp2ds", ",", "bones", "=", "constants", ".", "body17_connMat", ",", "cm", "=", "constants", ".", "cm_body17", ")", "\n", "center_img", "=", "draw_skeleton", "(", "img", ".", "copy", "(", ")", ",", "centers", ",", "r", "=", "6", ")", "\n", "\n", "result_img", "=", "np", ".", "concatenate", "(", "[", "centermap_color", ",", "center_img", ",", "skeleton_img", "]", ",", "1", ")", "\n", "save_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "result_save_dir", ",", "str", "(", "epoch", ")", "+", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "\n", "cv2", ".", "imwrite", "(", "save_name", ",", "result_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.parse_kps": [[197, 200], ["pretrain.Trainer.heatmap_parser.batch_parse", "heatmap_AEs.detach"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.batch_parse"], ["", "", "def", "parse_kps", "(", "self", ",", "heatmap_AEs", ",", "kp2d_thresh", "=", "0.1", ")", ":", "\n", "        ", "kp2ds", ",", "scores_each_person", "=", "self", ".", "heatmap_parser", ".", "batch_parse", "(", "heatmap_AEs", ".", "detach", "(", ")", ")", "\n", "return", "kp2ds", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.main": [[201, 205], ["ConfigContext", "pretrain.Trainer", "pretrain.Trainer.train", "parse_args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer.train", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "with", "ConfigContext", "(", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", ":", "\n", "        ", "trainer", "=", "Trainer", "(", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.Demo.__init__": [[10, 17], ["base.Base.__init__", "test.Demo._build_model_", "print", "args", "args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._build_model_", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Demo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_build_model_", "(", ")", "\n", "self", ".", "test_cfg", "=", "{", "'mode'", ":", "'parsing'", ",", "'calc_loss'", ":", "False", ",", "'with_nms'", ":", "True", ",", "'new_training'", ":", "args", "(", ")", ".", "new_training", "}", "\n", "self", ".", "eval_dataset", "=", "args", "(", ")", ".", "eval_dataset", "\n", "self", ".", "save_mesh", "=", "False", "\n", "print", "(", "'Initialization finished!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.Demo.test_eval": [[18, 28], ["eval.val_result", "test.Demo._create_single_data_loader", "test.Demo._create_single_data_loader", "test.Demo._create_single_data_loader", "test.Demo._create_single_data_loader"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.eval.val_result", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader"], ["", "def", "test_eval", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "eval_dataset", "==", "'pw3d_test'", ":", "\n", "            ", "data_loader", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'pw3d'", ",", "train_flag", "=", "False", ",", "mode", "=", "'vibe'", ",", "split", "=", "'test'", ")", "\n", "", "elif", "self", ".", "eval_dataset", "==", "'pw3d_oc'", ":", "\n", "            ", "data_loader", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'pw3d'", ",", "train_flag", "=", "False", ",", "split", "=", "'all'", ",", "mode", "=", "'OC'", ")", "\n", "", "elif", "self", ".", "eval_dataset", "==", "'pw3d_pc'", ":", "\n", "            ", "data_loader", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'pw3d'", ",", "train_flag", "=", "False", ",", "split", "=", "'all'", ",", "mode", "=", "'PC'", ")", "\n", "", "elif", "self", ".", "eval_dataset", "==", "'pw3d_nc'", ":", "\n", "            ", "data_loader", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'pw3d'", ",", "train_flag", "=", "False", ",", "split", "=", "'all'", ",", "mode", "=", "'NC'", ")", "\n", "", "MPJPE", ",", "PA_MPJPE", ",", "eval_results", "=", "val_result", "(", "self", ",", "loader_val", "=", "data_loader", ",", "evaluation", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.Demo.net_forward": [[29, 44], ["get_remove_keys", "torch.arange", "reorganize_items", "len", "test.Demo.model", "outputs[].cpu().numpy", "autocast", "test.Demo.model", "outputs[].cpu"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.get_remove_keys", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.reorganize_items"], ["", "def", "net_forward", "(", "self", ",", "meta_data", ",", "mode", "=", "'val'", ")", ":", "\n", "        ", "if", "mode", "==", "'val'", ":", "\n", "            ", "cfg_dict", "=", "self", ".", "test_cfg", "\n", "", "elif", "mode", "==", "'eval'", ":", "\n", "            ", "cfg_dict", "=", "self", ".", "eval_cfg", "\n", "", "ds_org", ",", "imgpath_org", "=", "get_remove_keys", "(", "meta_data", ",", "keys", "=", "[", "'data_set'", ",", "'imgpath'", "]", ")", "\n", "meta_data", "[", "'batch_ids'", "]", "=", "torch", ".", "arange", "(", "len", "(", "meta_data", "[", "'image'", "]", ")", ")", "\n", "if", "self", ".", "model_precision", "==", "'fp16'", ":", "\n", "            ", "with", "autocast", "(", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "model", "(", "meta_data", ",", "**", "cfg_dict", ")", "\n", "", "", "else", ":", "\n", "            ", "outputs", "=", "self", ".", "model", "(", "meta_data", ",", "**", "cfg_dict", ")", "\n", "\n", "", "outputs", "[", "'meta_data'", "]", "[", "'data_set'", "]", ",", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", "=", "reorganize_items", "(", "[", "ds_org", ",", "imgpath_org", "]", ",", "outputs", "[", "'reorganize_idx'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.Demo.test_cmu_panoptic": [[45, 92], ["torch.from_numpy().float", "test.Demo._create_single_data_loader", "test.Demo.model.eval", "print", "print", "print", "mpjpe_cacher.items", "print", "AverageMeter", "torch.no_grad", "enumerate", "np.array().mean", "print", "avg_all.append", "np.array().mean", "torch.from_numpy", "test.Demo.net_forward", "outputs[].float", "J_regressor_h36m[].expand().to", "torch.matmul", "meta_data[].cuda", "mpjpes.mean.mean.mean", "loss_funcs.calc_pampjpe", "bias.append", "zip", "np.load", "transform_mat[].reshape().mean().cpu().numpy", "print", "print", "mpjpe_cacher.items", "np.array", "np.array", "J_regressor_h36m[].expand", "torch.sqrt", "len", "np.array().mean", "print", "args", "transform_mat[].reshape().mean().cpu", "os.path.basename", "mpjpe_cacher[].update", "float", "np.array", "transform_mat[].reshape().mean", "mpjpe.item", "transform_mat[].reshape"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.net_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pampjpe", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update"], ["", "def", "test_cmu_panoptic", "(", "self", ")", ":", "\n", "        ", "action_name", "=", "[", "'haggling'", ",", "'mafia'", ",", "'ultimatum'", ",", "'pizza'", "]", "\n", "mpjpe_cacher", "=", "{", "aname", ":", "AverageMeter", "(", ")", "for", "aname", "in", "action_name", "}", "\n", "J_regressor_h36m", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "args", "(", ")", ".", "smpl_J_reg_h37m_path", ")", ")", ".", "float", "(", ")", "\n", "data_loader", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'cmup'", ",", "train_flag", "=", "False", ",", "split", "=", "'test'", ")", "\n", "bias", "=", "[", "]", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "test_iter", ",", "meta_data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "net_forward", "(", "meta_data", ",", "mode", "=", "'eval'", ")", "\n", "meta_data", "=", "outputs", "[", "'meta_data'", "]", "\n", "pred_vertices", "=", "outputs", "[", "'verts'", "]", ".", "float", "(", ")", "\n", "J_regressor_batch", "=", "J_regressor_h36m", "[", "None", ",", ":", "]", ".", "expand", "(", "pred_vertices", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ".", "to", "(", "pred_vertices", ".", "device", ")", "\n", "pred_kp3ds", "=", "torch", ".", "matmul", "(", "J_regressor_batch", ",", "pred_vertices", ")", "\n", "gt_kp3ds", "=", "meta_data", "[", "'kp_3d'", "]", ".", "cuda", "(", ")", "\n", "visible_kpts", "=", "(", "gt_kp3ds", "[", ":", ",", ":", ",", "0", "]", ">", "-", "2.", ")", ".", "float", "(", ")", "\n", "pred_kp3ds", "-=", "pred_kp3ds", "[", ":", ",", "[", "0", "]", "]", "\n", "gt_kp3ds", "-=", "gt_kp3ds", "[", ":", ",", "[", "0", "]", "]", "\n", "\n", "# following the code of coherece reconstruction of multiperson Jiang et. al.", "\n", "# Brought from https://github.com/JiangWenPL/multiperson/blob/4d3dbae945e22bb1e270521b061a837976699685/mmdetection/mmdet/core/utils/eval_utils.py#L265", "\n", "mpjpes", "=", "(", "torch", ".", "sqrt", "(", "(", "(", "pred_kp3ds", "-", "gt_kp3ds", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "*", "visible_kpts", ")", "*", "1000", "\n", "mpjpes", "=", "mpjpes", ".", "mean", "(", "-", "1", ")", "\n", "\n", "pampjpes", ",", "transform_mat", "=", "calc_pampjpe", "(", "gt_kp3ds", ",", "pred_kp3ds", ",", "return_transform_mat", "=", "True", ")", "#pelvis:0 # rhip:4, lhip:1, rshoulder:14,lshoulder:11", "\n", "pampjpes", "=", "pampjpes", "*", "1000", "\n", "#print(transform_mat[2].reshape(-1,3).mean(0))", "\n", "bias", ".", "append", "(", "transform_mat", "[", "2", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", ".", "mean", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "for", "img_path", ",", "mpjpe", "in", "zip", "(", "meta_data", "[", "'imgpath'", "]", ",", "mpjpes", ")", ":", "\n", "                    ", "for", "aname", "in", "action_name", ":", "\n", "                        ", "if", "aname", "in", "os", ".", "path", ".", "basename", "(", "img_path", ")", ":", "\n", "                            ", "mpjpe_cacher", "[", "aname", "]", ".", "update", "(", "float", "(", "mpjpe", ".", "item", "(", ")", ")", ")", "\n", "", "", "", "if", "test_iter", "%", "50", "==", "0", ":", "\n", "                    ", "print", "(", "test_iter", ",", "'/'", ",", "len", "(", "data_loader", ")", ")", "\n", "print", "(", "'dataset bias: '", ",", "np", ".", "array", "(", "bias", ")", ".", "mean", "(", "0", ")", ")", "\n", "for", "key", ",", "value", "in", "mpjpe_cacher", ".", "items", "(", ")", ":", "\n", "                        ", "print", "(", "'MPJPE results of {}: {}'", ".", "format", "(", "key", ",", "value", ".", "avg", ")", ")", "\n", "\n", "", "", "", "", "print", "(", "'-'", "*", "30", ")", "\n", "print", "(", "'Final results:'", ")", "\n", "print", "(", "'dataset bias: '", ",", "np", ".", "array", "(", "bias", ")", ".", "mean", "(", "0", ")", ")", "\n", "avg_all", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "mpjpe_cacher", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "key", ",", "value", ".", "avg", ")", "\n", "avg_all", ".", "append", "(", "value", ".", "avg", ")", "\n", "", "print", "(", "'MPJPE results:'", ",", "np", ".", "array", "(", "avg_all", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.Demo.test_crowdpose": [[93, 135], ["os.path.join", "os.makedirs", "os.path.join", "test.Demo.model.eval", "constants.joint_mapping", "test.Demo._create_single_data_loader", "os.path.join", "COCO", "COCO.loadRes", "COCOeval", "COCOeval.evaluate", "COCOeval.accumulate", "COCOeval.summarize", "torch.no_grad", "enumerate", "open", "json.dump", "test.Demo.net_forward", "[].detach().contiguous().cpu().numpy", "enumerate", "args", "zip", "int", "np.concatenate().reshape().tolist", "predicted_results.append", "vis_dict[].append", "print", "[].detach().contiguous().cpu", "len", "os.path.basename().split", "np.concatenate().reshape", "[].detach().contiguous", "os.path.basename", "np.concatenate", "[].detach", "np.ones"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadRes", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.evaluate", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.accumulate", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.summarize", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.net_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "test_crowdpose", "(", "self", ",", "set_name", "=", "'val'", ")", ":", "\n", "        ", "import", "json", "\n", "from", "crowdposetools", ".", "coco", "import", "COCO", "\n", "from", "crowdposetools", ".", "cocoeval", "import", "COCOeval", "\n", "\n", "predicted_results", "=", "[", "]", "\n", "test_save_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "project_dir", ",", "'results_out/results_crowdpose'", ")", "\n", "os", ".", "makedirs", "(", "test_save_dir", ",", "exist_ok", "=", "True", ")", "\n", "results_json_name", "=", "os", ".", "path", ".", "join", "(", "config", ".", "project_dir", ",", "'results_out/V{}_crowdpose_{}_{}.json'", ".", "format", "(", "self", ".", "model_version", ",", "set_name", ",", "self", ".", "backbone", ")", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "kp2d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_ALL_54", ",", "constants", ".", "Crowdpose_14", ")", "\n", "data_loader", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'crowdpose'", ",", "train_flag", "=", "False", ",", "split", "=", "set_name", ")", "\n", "vis_dict", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "test_iter", ",", "meta_data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "net_forward", "(", "meta_data", ",", "mode", "=", "'val'", ")", "\n", "meta_data", "=", "outputs", "[", "'meta_data'", "]", "\n", "pj2ds_onorg", "=", "outputs", "[", "'pj2d_org'", "]", "[", ":", ",", "kp2d_mapper", "]", ".", "detach", "(", ")", ".", "contiguous", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "pj2d_onorg", ",", "imgpath", ")", "in", "enumerate", "(", "zip", "(", "pj2ds_onorg", ",", "meta_data", "[", "'imgpath'", "]", ")", ")", ":", "\n", "                    ", "image_id", "=", "int", "(", "os", ".", "path", ".", "basename", "(", "imgpath", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "keypoints", "=", "np", ".", "concatenate", "(", "[", "pj2d_onorg", ",", "np", ".", "ones", "(", "(", "pj2d_onorg", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "predicted_results", ".", "append", "(", "{", "'image_id'", ":", "image_id", ",", "'category_id'", ":", "1", ",", "'keypoints'", ":", "keypoints", ",", "'score'", ":", "1", "}", ")", "\n", "\n", "if", "imgpath", "not", "in", "vis_dict", ":", "\n", "                        ", "vis_dict", "[", "imgpath", "]", "=", "[", "]", "\n", "", "vis_dict", "[", "imgpath", "]", ".", "append", "(", "pj2d_onorg", ")", "\n", "\n", "", "if", "test_iter", "%", "50", "==", "0", ":", "\n", "                    ", "print", "(", "test_iter", ",", "'/'", ",", "len", "(", "data_loader", ")", ")", "\n", "", "", "", "with", "open", "(", "results_json_name", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "predicted_results", ",", "f", ")", "\n", "\n", "", "gt_file", "=", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "dataset_rootdir", ",", "'crowdpose/json/crowdpose_{}.json'", ".", "format", "(", "set_name", ")", ")", "\n", "\n", "cocoGt", "=", "COCO", "(", "gt_file", ")", "\n", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "results_json_name", ")", "\n", "cocoEval", "=", "COCOeval", "(", "cocoGt", ",", "cocoDt", ",", "'keypoints'", ")", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.get_crowdpose_crowd_index": [[144, 167], ["os.path.join", "os.path.exists", "os.path.join", "np.savez", "open", "json.load", "annot_dict[].append", "int", "info_dict[].replace", "np.load"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "", "def", "get_crowdpose_crowd_index", "(", ")", ":", "\n", "    ", "root_dir", "=", "\"/media/yusun/Extreme SSD/dataset/crowdpose/\"", "\n", "annot_dict_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'crowdpose_test_personnum_crowd_Index_dict.npz'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "annot_dict_file", ")", ":", "\n", "        ", "import", "json", "\n", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "annot_file", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"json/crowdpose_test.json\"", ")", "\n", "with", "open", "(", "annot_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "annots", "=", "json", ".", "load", "(", "f", ")", "\n", "", "annot_dict", "=", "{", "}", "\n", "for", "annot_info", "in", "annots", "[", "'annotations'", "]", ":", "\n", "            ", "image_id", ",", "person_id", ",", "crowd_flag", "=", "annot_info", "[", "'image_id'", "]", ",", "annot_info", "[", "'id'", "]", ",", "annot_info", "[", "'iscrowd'", "]", "\n", "if", "image_id", "not", "in", "annot_dict", ":", "\n", "                ", "annot_dict", "[", "image_id", "]", "=", "[", "]", "\n", "", "annot_dict", "[", "image_id", "]", ".", "append", "(", "person_id", ")", "\n", "\n", "", "for", "info_dict", "in", "annots", "[", "'images'", "]", ":", "\n", "            ", "image_id", "=", "int", "(", "info_dict", "[", "'file_name'", "]", ".", "replace", "(", "'.jpg'", ",", "''", ")", ")", "\n", "annot_dict", "[", "image_id", "]", "=", "[", "info_dict", "[", "'crowdIndex'", "]", "]", "+", "annot_dict", "[", "image_id", "]", "\n", "", "np", ".", "savez", "(", "annot_dict_file", ",", "annots", "=", "annot_dict", ")", "\n", "", "else", ":", "\n", "        ", "annot_dict", "=", "np", ".", "load", "(", "annot_dict_file", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "", "return", "annot_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test._calc_pn_fps": [[169, 184], ["runtime_dict.items", "person_num_runtime_dict.items", "sorted", "person_num_runtime_dict[].append", "list", "print", "len", "np.array().mean", "pn_fps.keys", "np.array"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "_calc_pn_fps", "(", "runtime_dict", ",", "person_num_crowd_index_dict", ")", ":", "\n", "    ", "person_num_runtime_dict", "=", "{", "}", "\n", "for", "img_id", ",", "runtime", "in", "runtime_dict", ".", "items", "(", ")", ":", "\n", "        ", "crowd_index", "=", "person_num_crowd_index_dict", "[", "img_id", "]", "[", "0", "]", "\n", "person_num", "=", "len", "(", "person_num_crowd_index_dict", "[", "img_id", "]", ")", "-", "1", "\n", "if", "person_num", "not", "in", "person_num_runtime_dict", ":", "\n", "            ", "person_num_runtime_dict", "[", "person_num", "]", "=", "[", "]", "\n", "", "person_num_runtime_dict", "[", "person_num", "]", ".", "append", "(", "runtime", ")", "\n", "", "pn_fps", "=", "{", "}", "\n", "for", "person_num", ",", "runtime_list", "in", "person_num_runtime_dict", ".", "items", "(", ")", ":", "\n", "        ", "pn_fps", "[", "person_num", "]", "=", "1.", "/", "np", ".", "array", "(", "runtime_list", ")", ".", "mean", "(", "0", ")", "\n", "", "for", "pn", "in", "sorted", "(", "list", "(", "pn_fps", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "print", "(", "'{} : {:.2f}'", ".", "format", "(", "pn", ",", "pn_fps", "[", "pn", "]", ")", ")", "\n", "\n", "", "return", "person_num_runtime_dict", ",", "pn_fps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.main": [[185, 202], ["ConfigContext", "test.Demo", "parse_args", "Demo.test_crowdpose", "args", "args", "Demo.test_crowdpose", "args", "args", "Demo.test_cmu_panoptic", "args", "Demo.eval_MuPoTs", "args", "Demo.test_runtime_crowdpose", "Demo.test_eval", "args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.Demo.test_crowdpose", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.Demo.test_crowdpose", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.Demo.test_cmu_panoptic", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.test.Demo.test_eval", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "with", "ConfigContext", "(", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", ":", "\n", "        ", "demo", "=", "Demo", "(", ")", "\n", "if", "args", "(", ")", ".", "eval_dataset", "==", "'crowdpose_val'", ":", "\n", "            ", "args", "(", ")", ".", "eval_2dpose", "=", "True", "\n", "demo", ".", "test_crowdpose", "(", "set_name", "=", "'val'", ")", "\n", "", "elif", "args", "(", ")", ".", "eval_dataset", "==", "'crowdpose_test'", ":", "\n", "            ", "args", "(", ")", ".", "eval_2dpose", "=", "True", "\n", "demo", ".", "test_crowdpose", "(", "set_name", "=", "'test'", ")", "\n", "", "elif", "args", "(", ")", ".", "eval_dataset", "==", "'cmup'", ":", "\n", "            ", "demo", ".", "test_cmu_panoptic", "(", ")", "\n", "", "elif", "args", "(", ")", ".", "eval_dataset", "==", "'MuPoTs'", ":", "\n", "            ", "demo", ".", "eval_MuPoTs", "(", ")", "\n", "", "elif", "args", "(", ")", ".", "eval_dataset", "==", "'runtime'", ":", "\n", "            ", "demo", ".", "test_runtime_crowdpose", "(", ")", "\n", "", "else", ":", "\n", "            ", "demo", ".", "test_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp._init_paths_.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.CenterMap.__init__": [[9, 15], ["post_parser.CenterMap.generate_kernels"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.CenterMap3D.generate_kernels"], ["    ", "def", "__init__", "(", "self", ",", "conf_thresh", ")", ":", "\n", "        ", "self", ".", "size", "=", "64", "\n", "self", ".", "max_person", "=", "64", "\n", "self", ".", "sigma", "=", "1", "\n", "self", ".", "conf_thresh", "=", "conf_thresh", "\n", "self", ".", "gk_group", ",", "self", ".", "pool_group", "=", "self", ".", "generate_kernels", "(", "[", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.CenterMap.generate_kernels": [[16, 26], ["set", "numpy.arange", "numpy.exp", "torch.nn.MaxPool2d"], "methods", ["None"], ["", "def", "generate_kernels", "(", "self", ",", "kernel_size_list", ")", ":", "\n", "        ", "gk_group", ",", "pool_group", "=", "{", "}", ",", "{", "}", "\n", "for", "kernel_size", "in", "set", "(", "kernel_size_list", ")", ":", "\n", "            ", "x", "=", "np", ".", "arange", "(", "0", ",", "kernel_size", ",", "1", ",", "float", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", ",", "y0", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "gaussian_distribution", "=", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", "\n", "gk_group", "[", "kernel_size", "]", "=", "np", ".", "exp", "(", "gaussian_distribution", ")", "\n", "pool_group", "[", "kernel_size", "]", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", ",", "1", ",", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "\n", "", "return", "gk_group", ",", "pool_group", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.CenterMap.parse_centermap": [[27, 48], ["post_parser.nms", "torch.topk", "torch.topk", "gather_feature().reshape", "gather_feature().reshape", "gather_feature().reshape", "torch.stack().permute", "nms.reshape", "topk_scores.reshape", "index.long", "torch.where", "post_parser.gather_feature", "post_parser.gather_feature", "post_parser.gather_feature", "torch.stack", "gather_feature().reshape.long", "gather_feature().reshape.view", "gather_feature().reshape.reshape", "gather_feature().reshape.reshape"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature"], ["", "def", "parse_centermap", "(", "self", ",", "center_maps", ")", ":", "\n", "        ", "center_map_nms", "=", "nms", "(", "center_maps", ",", "pool_func", "=", "self", ".", "pool_group", "[", "5", "]", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "center_map_nms", ".", "shape", "\n", "K", "=", "self", ".", "max_person", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "center_map_nms", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", ",", "K", ")", "\n", "topk_inds", "=", "topk_inds", "%", "(", "h", "*", "w", ")", "\n", "topk_ys", "=", "(", "topk_inds", ".", "long", "(", ")", "//", "w", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "w", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "# get all topk in in a batch", "\n", "topk_score", ",", "index", "=", "torch", ".", "topk", "(", "topk_scores", ".", "reshape", "(", "b", ",", "-", "1", ")", ",", "K", ")", "\n", "# div by K because index is grouped by K(C x K shape)", "\n", "topk_clses", "=", "index", ".", "long", "(", ")", "//", "K", "\n", "topk_inds", "=", "gather_feature", "(", "topk_inds", ".", "view", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "topk_ys", "=", "gather_feature", "(", "topk_ys", ".", "reshape", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "topk_xs", "=", "gather_feature", "(", "topk_xs", ".", "reshape", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "\n", "mask", "=", "topk_score", ">", "self", ".", "conf_thresh", "\n", "batch_ids", "=", "torch", ".", "where", "(", "mask", ")", "[", "0", "]", "\n", "center_yxs", "=", "torch", ".", "stack", "(", "[", "topk_ys", "[", "mask", "]", ",", "topk_xs", "[", "mask", "]", "]", ")", ".", "permute", "(", "(", "1", ",", "0", ")", ")", "\n", "return", "batch_ids", ",", "topk_inds", "[", "mask", "]", ",", "center_yxs", ",", "topk_score", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.SMPL_parser.__init__": [[117, 120], ["torch.nn.Module.__init__", "smpl.SMPL"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "super", "(", "SMPL_parser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smpl_model", "=", "SMPL", "(", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.SMPL_parser.forward": [[121, 126], ["post_parser.SMPL_parser.smpl_model", "outputs.update"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "root_align", "=", "False", ")", ":", "\n", "        ", "verts", ",", "joints", ",", "face", "=", "self", ".", "smpl_model", "(", "outputs", "[", "'smpl_betas'", "]", ",", "outputs", "[", "'smpl_thetas'", "]", ",", "root_align", "=", "root_align", ")", "\n", "outputs", ".", "update", "(", "{", "'verts'", ":", "verts", ",", "'joints'", ":", "joints", ",", "'smpl_face'", ":", "face", "}", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.nms": [[50, 55], ["pool_func", "torch.eq().float", "torch.eq"], "function", ["None"], ["", "", "def", "nms", "(", "det", ",", "pool_func", "=", "None", ")", ":", "\n", "    ", "maxm", "=", "pool_func", "(", "det", ")", "\n", "maxm", "=", "torch", ".", "eq", "(", "maxm", ",", "det", ")", ".", "float", "(", ")", "\n", "det", "=", "det", "*", "maxm", "\n", "return", "det", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.gather_feature": [[56, 65], ["fmap.reshape.size", "index.unsqueeze().expand.unsqueeze().expand", "fmap.reshape.gather", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "fmap.reshape.reshape", "index.unsqueeze().expand.unsqueeze", "len", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.gather"], ["", "def", "gather_feature", "(", "fmap", ",", "index", ",", "mask", "=", "None", ")", ":", "\n", "    ", "dim", "=", "fmap", ".", "size", "(", "-", "1", ")", "\n", "index", "=", "index", ".", "unsqueeze", "(", "len", "(", "index", ".", "shape", ")", ")", ".", "expand", "(", "*", "index", ".", "shape", ",", "dim", ")", "\n", "fmap", "=", "fmap", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "index", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "fmap", ")", "\n", "fmap", "=", "fmap", "[", "mask", "]", "\n", "fmap", "=", "fmap", ".", "reshape", "(", "-", "1", ",", "dim", ")", "\n", "", "return", "fmap", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.pack_params_dict": [[66, 80], ["enumerate", "utils.rot6D_to_angular", "utils.rot6D_to_angular", "torch.cat", "torch.cat", "zip", "idx_list.append", "params_pred[].contiguous", "torch.zeros().to", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular"], ["", "def", "pack_params_dict", "(", "params_pred", ")", ":", "\n", "    ", "idx_list", ",", "params_dict", "=", "[", "0", "]", ",", "{", "}", "\n", "part_name", "=", "[", "'cam'", ",", "'global_orient'", ",", "'body_pose'", ",", "'smpl_betas'", "]", "\n", "part_idx", "=", "[", "3", ",", "6", ",", "21", "*", "6", ",", "10", "]", "\n", "for", "i", ",", "(", "idx", ",", "name", ")", "in", "enumerate", "(", "zip", "(", "part_idx", ",", "part_name", ")", ")", ":", "\n", "        ", "idx_list", ".", "append", "(", "idx_list", "[", "i", "]", "+", "idx", ")", "\n", "params_dict", "[", "name", "]", "=", "params_pred", "[", ":", ",", "idx_list", "[", "i", "]", ":", "idx_list", "[", "i", "+", "1", "]", "]", ".", "contiguous", "(", ")", "\n", "", "params_dict", "[", "'body_pose'", "]", "=", "rot6D_to_angular", "(", "params_dict", "[", "'body_pose'", "]", ")", "\n", "params_dict", "[", "'global_orient'", "]", "=", "rot6D_to_angular", "(", "params_dict", "[", "'global_orient'", "]", ")", "\n", "N", "=", "params_dict", "[", "'body_pose'", "]", ".", "shape", "[", "0", "]", "\n", "params_dict", "[", "'body_pose'", "]", "=", "torch", ".", "cat", "(", "[", "params_dict", "[", "'body_pose'", "]", ",", "torch", ".", "zeros", "(", "N", ",", "6", ")", ".", "to", "(", "params_dict", "[", "'body_pose'", "]", ".", "device", ")", "]", ",", "1", ")", "\n", "params_dict", "[", "'smpl_thetas'", "]", "=", "torch", ".", "cat", "(", "[", "params_dict", "[", "'global_orient'", "]", ",", "params_dict", "[", "'body_pose'", "]", "]", ",", "1", ")", "\n", "\n", "return", "params_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.convert_proejection_from_input_to_orgimg": [[81, 89], ["max"], "function", ["None"], ["", "def", "convert_proejection_from_input_to_orgimg", "(", "kps", ",", "offsets", ")", ":", "\n", "    ", "top", ",", "bottom", ",", "left", ",", "right", ",", "h", ",", "w", "=", "offsets", "\n", "img_pad_size", "=", "max", "(", "h", ",", "w", ")", "\n", "kps", "[", ":", ",", ":", ",", "0", "]", "=", "(", "kps", "[", ":", ",", ":", ",", "0", "]", "+", "1", ")", "*", "img_pad_size", "/", "2", "-", "left", "\n", "kps", "[", ":", ",", ":", ",", "1", "]", "=", "(", "kps", "[", ":", ",", ":", ",", "1", "]", "+", "1", ")", "*", "img_pad_size", "/", "2", "-", "top", "\n", "if", "kps", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "kps", "[", ":", ",", ":", ",", "2", "]", "=", "(", "kps", "[", ":", ",", ":", ",", "2", "]", "+", "1", ")", "*", "img_pad_size", "/", "2", "\n", "", "return", "kps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.convert_cam_to_3d_trans": [[90, 95], ["torch.stack"], "function", ["None"], ["", "def", "convert_cam_to_3d_trans", "(", "cams", ",", "weight", "=", "2.", ")", ":", "\n", "    ", "(", "s", ",", "tx", ",", "ty", ")", "=", "cams", "[", ":", ",", "0", "]", ",", "cams", "[", ":", ",", "1", "]", ",", "cams", "[", ":", ",", "2", "]", "\n", "depth", ",", "dx", ",", "dy", "=", "1.", "/", "s", ",", "tx", "/", "s", ",", "ty", "/", "s", "\n", "trans3d", "=", "torch", ".", "stack", "(", "[", "dx", ",", "dy", ",", "depth", "]", ",", "1", ")", "*", "weight", "\n", "return", "trans3d", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.convert_cam_to_3d_trans2": [[96, 102], ["j3ds[].contiguous().detach().cpu().numpy", "utils.estimate_translation().to", "j3ds[].contiguous().detach().cpu", "[].detach().cpu().numpy", "utils.estimate_translation", "j3ds[].contiguous().detach", "[].detach().cpu", "numpy.array", "j3ds[].contiguous", "[].detach"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.estimate_translation"], ["", "def", "convert_cam_to_3d_trans2", "(", "j3ds", ",", "pj3d", ")", ":", "\n", "    ", "predicts_j3ds", "=", "j3ds", "[", ":", ",", ":", "24", "]", ".", "contiguous", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predicts_pj2ds", "=", "(", "pj3d", "[", ":", ",", ":", ",", ":", "2", "]", "[", ":", ",", ":", "24", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1", ")", "*", "256", "\n", "cam_trans", "=", "estimate_translation", "(", "predicts_j3ds", ",", "predicts_pj2ds", ",", "focal_length", "=", "443.4", ",", "img_size", "=", "np", ".", "array", "(", "[", "512", ",", "512", "]", ")", ")", ".", "to", "(", "j3ds", ".", "device", ")", "\n", "return", "cam_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.body_mesh_projection2image": [[104, 115], ["utils.batch_orth_proj", "post_parser.convert_cam_to_3d_trans2", "utils.batch_orth_proj", "post_parser.convert_proejection_from_input_to_orgimg", "post_parser.convert_proejection_from_input_to_orgimg"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.batch_orth_proj", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.convert_cam_to_3d_trans2", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.batch_orth_proj", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.convert_proejection_from_input_to_orgimg", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.convert_proejection_from_input_to_orgimg"], ["", "def", "body_mesh_projection2image", "(", "j3d_preds", ",", "cam_preds", ",", "vertices", "=", "None", ",", "input2org_offsets", "=", "None", ")", ":", "\n", "    ", "pj3d", "=", "batch_orth_proj", "(", "j3d_preds", ",", "cam_preds", ",", "mode", "=", "'2d'", ")", "\n", "pred_cam_t", "=", "convert_cam_to_3d_trans2", "(", "j3d_preds", ",", "pj3d", ")", "\n", "projected_outputs", "=", "{", "'pj2d'", ":", "pj3d", "[", ":", ",", ":", ",", ":", "2", "]", ",", "'cam_trans'", ":", "pred_cam_t", "}", "\n", "if", "vertices", "is", "not", "None", ":", "\n", "        ", "projected_outputs", "[", "'verts_camed'", "]", "=", "batch_orth_proj", "(", "vertices", ",", "cam_preds", ",", "mode", "=", "'3d'", ",", "keep_dim", "=", "True", ")", "\n", "\n", "", "if", "input2org_offsets", "is", "not", "None", ":", "\n", "        ", "projected_outputs", "[", "'pj2d_org'", "]", "=", "convert_proejection_from_input_to_orgimg", "(", "projected_outputs", "[", "'pj2d'", "]", ",", "input2org_offsets", ")", "\n", "projected_outputs", "[", "'verts_camed_org'", "]", "=", "convert_proejection_from_input_to_orgimg", "(", "projected_outputs", "[", "'verts_camed'", "]", ",", "input2org_offsets", ")", "\n", "", "return", "projected_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.parameter_sampling": [[128, 134], ["maps[].contiguous", "maps.view().permute().contiguous.view().permute().contiguous", "maps.view().permute().contiguous.view().permute", "maps.view().permute().contiguous.view"], "function", ["None"], ["", "", "def", "parameter_sampling", "(", "maps", ",", "batch_ids", ",", "flat_inds", ",", "use_transform", "=", "True", ")", ":", "\n", "    ", "if", "use_transform", ":", "\n", "        ", "batch", ",", "channel", "=", "maps", ".", "shape", "[", ":", "2", "]", "\n", "maps", "=", "maps", ".", "view", "(", "batch", ",", "channel", ",", "-", "1", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", ".", "contiguous", "(", ")", "\n", "", "results", "=", "maps", "[", "batch_ids", ",", "flat_inds", "]", ".", "contiguous", "(", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.parsing_outputs": [[135, 147], ["centermap_parser.parse_centermap", "post_parser.parameter_sampling", "post_parser.pack_params_dict", "post_parser.parameter_sampling", "len", "print", "torch.stack"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parameter_sampling", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.pack_params_dict", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parameter_sampling", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "parsing_outputs", "(", "center_maps", ",", "params_maps", ",", "centermap_parser", ")", ":", "\n", "    ", "center_preds_info", "=", "centermap_parser", ".", "parse_centermap", "(", "center_maps", ")", "\n", "batch_ids", ",", "flat_inds", ",", "cyxs", ",", "center_confs", "=", "center_preds_info", "\n", "if", "len", "(", "batch_ids", ")", "==", "0", ":", "\n", "        ", "print", "(", "'None person detected'", ")", "\n", "return", "None", "\n", "\n", "", "params_pred", "=", "parameter_sampling", "(", "params_maps", ",", "batch_ids", ",", "flat_inds", ",", "use_transform", "=", "True", ")", "\n", "parsed_results", "=", "pack_params_dict", "(", "params_pred", ")", "\n", "parsed_results", "[", "'center_preds'", "]", "=", "torch", ".", "stack", "(", "[", "flat_inds", "%", "64", ",", "flat_inds", "//", "64", "]", ",", "1", ")", "*", "512", "//", "64", "\n", "parsed_results", "[", "'center_confs'", "]", "=", "parameter_sampling", "(", "center_maps", ",", "batch_ids", ",", "flat_inds", ",", "use_transform", "=", "True", ")", "\n", "return", "parsed_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.main.ROMP.__init__": [[63, 69], ["torch.nn.Module.__init__", "utils.determine_device", "main.ROMP._build_model_", "main.ROMP._initilization_"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.determine_device", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._build_model_", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._initilization_"], ["    ", "def", "__init__", "(", "self", ",", "romp_settings", ")", ":", "\n", "        ", "super", "(", "ROMP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "settings", "=", "romp_settings", "\n", "self", ".", "tdevice", "=", "determine_device", "(", "self", ".", "settings", ".", "GPU", ")", "\n", "self", ".", "_build_model_", "(", ")", "\n", "self", ".", "_initilization_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.main.ROMP._build_model_": [[70, 90], ["model.to.ROMPv1().eval", "model.to.to.load_state_dict", "model.to.to.to", "torch.nn.DataParallel", "print", "onnxruntime.InferenceSession", "print", "torch.load", "model.to.ROMPv1", "print", "torch.cuda.is_available", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system", "os.system"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "_build_model_", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "settings", ".", "onnx", ":", "\n", "            ", "model", "=", "ROMPv1", "(", ")", ".", "eval", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "settings", ".", "model_path", ",", "map_location", "=", "self", ".", "tdevice", ")", ")", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "tdevice", ")", "\n", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "onnxruntime", "\n", "", "except", ":", "\n", "                ", "print", "(", "'To use onnx model, we need to install the onnxruntime python package. Please install it by youself if failed!'", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "os", ".", "system", "(", "'pip install onnxruntime'", ")", "\n", "", "else", ":", "\n", "                    ", "os", ".", "system", "(", "'pip install onnxruntime-gpu'", ")", "\n", "", "import", "onnxruntime", "\n", "", "print", "(", "'creating onnx model'", ")", "\n", "self", ".", "ort_session", "=", "onnxruntime", ".", "InferenceSession", "(", "self", ".", "settings", ".", "model_onnx_path", ",", "providers", "=", "[", "'TensorrtExecutionProvider'", ",", "'CUDAExecutionProvider'", ",", "'CPUExecutionProvider'", "]", ")", "\n", "print", "(", "'created!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.main.ROMP._initilization_": [[91, 103], ["post_parser.CenterMap", "post_parser.SMPL_parser().to", "main.ROMP._initialize_optimization_tools_", "main.ROMP.settings.show_items.split", "vis_human.setup_renderer", "post_parser.SMPL_parser"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._initialize_optimization_tools_", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.main.setup_renderer"], ["", "", "def", "_initilization_", "(", "self", ")", ":", "\n", "        ", "self", ".", "centermap_parser", "=", "CenterMap", "(", "conf_thresh", "=", "self", ".", "settings", ".", "center_thresh", ")", "\n", "\n", "if", "self", ".", "settings", ".", "calc_smpl", ":", "\n", "            ", "self", ".", "smpl_parser", "=", "SMPL_parser", "(", "self", ".", "settings", ".", "smpl_path", ")", ".", "to", "(", "self", ".", "tdevice", ")", "\n", "\n", "", "if", "self", ".", "settings", ".", "temporal_optimize", ":", "\n", "            ", "self", ".", "_initialize_optimization_tools_", "(", ")", "\n", "\n", "", "if", "self", ".", "settings", ".", "render_mesh", ":", "\n", "            ", "self", ".", "visualize_items", "=", "self", ".", "settings", ".", "show_items", ".", "split", "(", "','", ")", "\n", "self", ".", "renderer", "=", "setup_renderer", "(", "name", "=", "self", ".", "settings", ".", "renderer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.main.ROMP.single_image_forward": [[104, 114], ["utils.img_preprocess", "torch.pow", "post_parser.parsing_outputs", "main.ROMP.ort_session.run", "main.ROMP.model", "torch.from_numpy().to", "torch.from_numpy().to", "input_image.to", "input_image.numpy().astype", "torch.from_numpy", "torch.from_numpy", "input_image.numpy"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.img_preprocess", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.post_parser.parsing_outputs", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.image.Image_processor.run"], ["", "", "def", "single_image_forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "input_image", ",", "image_pad_info", "=", "img_preprocess", "(", "image", ")", "\n", "if", "self", ".", "settings", ".", "onnx", ":", "\n", "            ", "center_maps", ",", "params_maps", "=", "self", ".", "ort_session", ".", "run", "(", "None", ",", "{", "'image'", ":", "input_image", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "}", ")", "\n", "center_maps", ",", "params_maps", "=", "torch", ".", "from_numpy", "(", "center_maps", ")", ".", "to", "(", "self", ".", "tdevice", ")", ",", "torch", ".", "from_numpy", "(", "params_maps", ")", ".", "to", "(", "self", ".", "tdevice", ")", "\n", "", "else", ":", "\n", "            ", "center_maps", ",", "params_maps", "=", "self", ".", "model", "(", "input_image", ".", "to", "(", "self", ".", "tdevice", ")", ")", "\n", "", "params_maps", "[", ":", ",", "0", "]", "=", "torch", ".", "pow", "(", "1.1", ",", "params_maps", "[", ":", ",", "0", "]", ")", "\n", "parsed_results", "=", "parsing_outputs", "(", "center_maps", ",", "params_maps", ",", "self", ".", "centermap_parser", ")", "\n", "return", "parsed_results", ",", "image_pad_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.main.ROMP._initialize_optimization_tools_": [[115, 126], ["Tracker", "print", "os.system", "os.system", "os.system", "os.system"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "_initialize_optimization_tools_", "(", "self", ")", ":", "\n", "        ", "self", ".", "OE_filters", "=", "{", "}", "\n", "if", "not", "self", ".", "settings", ".", "show_largest", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "norfair", "import", "Tracker", "\n", "", "except", ":", "\n", "                ", "print", "(", "'To perform temporal optimization, installing norfair for tracking.'", ")", "\n", "os", ".", "system", "(", "'pip install norfair'", ")", "\n", "from", "norfair", "import", "Tracker", "\n", "", "self", ".", "tracker", "=", "Tracker", "(", "distance_function", "=", "euclidean_distance", ",", "distance_threshold", "=", "120", ")", "\n", "self", ".", "tracker_initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.main.ROMP.temporal_optimization": [[127, 155], ["utils.check_filter_state", "torch.argmax", "utils.smooth_results", "main.ROMP.tracker.update", "utils.get_tracked_ids", "enumerate", "numpy.array().astype", "Detection", "range", "len", "utils.smooth_results", "pred_cams.cpu().numpy", "main.ROMP.tracker.update", "utils.create_OneEuroFilter", "numpy.array", "pred_cams.cpu"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.check_filter_state", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.smooth_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.get_tracked_ids", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.smooth_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.create_OneEuroFilter"], ["", "", "def", "temporal_optimization", "(", "self", ",", "outputs", ",", "signal_ID", ")", ":", "\n", "        ", "check_filter_state", "(", "self", ".", "OE_filters", ",", "signal_ID", ",", "self", ".", "settings", ".", "show_largest", ",", "self", ".", "settings", ".", "smooth_coeff", ")", "\n", "if", "self", ".", "settings", ".", "show_largest", ":", "\n", "            ", "max_id", "=", "torch", ".", "argmax", "(", "outputs", "[", "'cam'", "]", "[", ":", ",", "0", "]", ")", "\n", "outputs", "[", "'smpl_thetas'", "]", ",", "outputs", "[", "'smpl_betas'", "]", ",", "outputs", "[", "'cam'", "]", "=", "smooth_results", "(", "self", ".", "OE_filters", "[", "signal_ID", "]", ",", "outputs", "[", "'smpl_thetas'", "]", "[", "max_id", "]", ",", "outputs", "[", "'smpl_betas'", "]", "[", "max_id", "]", ",", "outputs", "[", "'cam'", "]", "[", "max_id", "]", ")", "\n", "", "else", ":", "\n", "            ", "pred_cams", "=", "outputs", "[", "'cam'", "]", "\n", "from", "norfair", "import", "Detection", "\n", "detections", "=", "[", "Detection", "(", "points", "=", "cam", "[", "[", "2", ",", "1", "]", "]", "*", "512", ")", "for", "cam", "in", "pred_cams", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "if", "not", "self", ".", "tracker_initialized", ":", "\n", "                ", "for", "_", "in", "range", "(", "8", ")", ":", "\n", "                    ", "tracked_objects", "=", "self", ".", "tracker", ".", "update", "(", "detections", "=", "detections", ")", "\n", "", "", "tracked_objects", "=", "self", ".", "tracker", ".", "update", "(", "detections", "=", "detections", ")", "\n", "if", "len", "(", "tracked_objects", ")", "==", "0", ":", "\n", "                ", "return", "outputs", "\n", "", "tracked_ids", "=", "get_tracked_ids", "(", "detections", ",", "tracked_objects", ")", "\n", "for", "ind", ",", "tid", "in", "enumerate", "(", "tracked_ids", ")", ":", "\n", "                ", "if", "tid", "not", "in", "self", ".", "OE_filters", "[", "signal_ID", "]", ":", "\n", "                    ", "self", ".", "OE_filters", "[", "signal_ID", "]", "[", "tid", "]", "=", "create_OneEuroFilter", "(", "self", ".", "settings", ".", "smooth_coeff", ")", "\n", "\n", "", "outputs", "[", "'smpl_thetas'", "]", "[", "ind", "]", ",", "outputs", "[", "'smpl_betas'", "]", "[", "ind", "]", ",", "outputs", "[", "'cam'", "]", "[", "ind", "]", "=", "smooth_results", "(", "self", ".", "OE_filters", "[", "signal_ID", "]", "[", "tid", "]", ",", "outputs", "[", "'smpl_thetas'", "]", "[", "ind", "]", ",", "outputs", "[", "'smpl_betas'", "]", "[", "ind", "]", ",", "outputs", "[", "'cam'", "]", "[", "ind", "]", ")", "\n", "\n", "", "outputs", "[", "'track_ids'", "]", "=", "np", ".", "array", "(", "tracked_ids", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.main.ROMP.forward": [[156, 174], ["utils.time_cost", "main.ROMP.single_image_forward", "utils.convert_cam_to_3d_trans", "utils.convert_tensor2numpy", "main.ROMP.temporal_optimization", "main.ROMP.smpl_parser", "vis_human.rendering_romp_bev_results.update", "vis_human.rendering_romp_bev_results", "cv2.imshow", "utils.wait_func", "post_parser.body_mesh_projection2image"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.time_cost", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.single_image_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.convert_cam_to_3d_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.convert_tensor2numpy", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.temporal_optimization", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.main.rendering_romp_bev_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.wait_func", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.body_mesh_projection2image"], ["", "@", "time_cost", "(", "'ROMP'", ")", "\n", "def", "forward", "(", "self", ",", "image", ",", "signal_ID", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", ",", "image_pad_info", "=", "self", ".", "single_image_forward", "(", "image", ")", "\n", "if", "outputs", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "self", ".", "settings", ".", "temporal_optimize", ":", "\n", "            ", "outputs", "=", "self", ".", "temporal_optimization", "(", "outputs", ",", "signal_ID", ")", "\n", "", "outputs", "[", "'cam_trans'", "]", "=", "convert_cam_to_3d_trans", "(", "outputs", "[", "'cam'", "]", ")", "\n", "if", "self", ".", "settings", ".", "calc_smpl", ":", "\n", "            ", "outputs", "=", "self", ".", "smpl_parser", "(", "outputs", ",", "root_align", "=", "self", ".", "settings", ".", "root_align", ")", "\n", "outputs", ".", "update", "(", "body_mesh_projection2image", "(", "outputs", "[", "'joints'", "]", ",", "outputs", "[", "'cam'", "]", ",", "vertices", "=", "outputs", "[", "'verts'", "]", ",", "input2org_offsets", "=", "image_pad_info", ")", ")", "\n", "", "if", "self", ".", "settings", ".", "render_mesh", ":", "\n", "            ", "rendering_cfgs", "=", "{", "'mesh_color'", ":", "'identity'", ",", "'items'", ":", "self", ".", "visualize_items", ",", "'renderer'", ":", "self", ".", "settings", ".", "renderer", "}", "# 'identity'", "\n", "outputs", "=", "rendering_romp_bev_results", "(", "self", ".", "renderer", ",", "outputs", ",", "image", ",", "rendering_cfgs", ")", "\n", "", "if", "self", ".", "settings", ".", "show", ":", "\n", "            ", "cv2", ".", "imshow", "(", "'rendered'", ",", "outputs", "[", "'rendered_image'", "]", ")", "\n", "wait_func", "(", "self", ".", "settings", ".", "mode", ")", "\n", "", "return", "convert_tensor2numpy", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.main.romp_settings": [[17, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available", "os.path.exists", "os.path.exists", "utils.download_model", "os.path.exists", "os.path.exists", "utils.download_model", "utils.download_model", "os.join", "os.join", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.expanduser", "os.expanduser", "os.expanduser", "os.expanduser"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.download_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.download_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.download_model"], ["def", "romp_settings", "(", "input_args", "=", "sys", ".", "argv", "[", "1", ":", "]", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'ROMP: Monocular, One-stage, Regression of Multiple 3D People'", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'image'", ",", "help", "=", "'Inferece mode, including image, video, webcam'", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Path to the input image / video'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--save_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'ROMP_results'", ")", ",", "help", "=", "'Path to save the results'", ")", "\n", "parser", ".", "add_argument", "(", "'--GPU'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'The gpu device number to run the inference on. If GPU=-1, then running in cpu mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--onnx'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to use ONNX for acceleration.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--temporal_optimize'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to use OneEuro filter to smooth the results'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "help", "=", "'The confidence threshold of positive detection in 2D human body center heatmap.'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_largest'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to show the largest person only'", ")", "\n", "parser", ".", "add_argument", "(", "'-sc'", ",", "'--smooth_coeff'", ",", "type", "=", "float", ",", "default", "=", "3.", ",", "help", "=", "'The smoothness coeff of OneEuro filter, the smaller, the smoother.'", ")", "\n", "parser", ".", "add_argument", "(", "'--calc_smpl'", ",", "action", "=", "'store_false'", ",", "help", "=", "'Whether to calculate the smpl mesh from estimated SMPL parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'--render_mesh'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to render the estimated 3D mesh mesh to image'", ")", "\n", "parser", ".", "add_argument", "(", "'--renderer'", ",", "type", "=", "str", ",", "default", "=", "'sim3dr'", ",", "help", "=", "'Choose the renderer for visualizaiton: pyrender (great but slow), sim3dr (fine but fast)'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to show the rendered results'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_items'", ",", "type", "=", "str", ",", "default", "=", "'mesh'", ",", "help", "=", "'The items to visualized, including mesh,pj2d,j3d,mesh_bird_view,mesh_side_view,center_conf. splited with ,'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_video'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to save the video results'", ")", "\n", "parser", ".", "add_argument", "(", "'--frame_rate'", ",", "type", "=", "int", ",", "default", "=", "24", ",", "help", "=", "'The frame_rate of saved video results'", ")", "\n", "parser", ".", "add_argument", "(", "'--smpl_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'.romp'", ",", "'smpl_packed_info.pth'", ")", ",", "help", "=", "'The path of smpl model file'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'.romp'", ",", "'ROMP.pkl'", ")", ",", "help", "=", "'The path of ROMP checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_onnx_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'.romp'", ",", "'ROMP.onnx'", ")", ",", "help", "=", "'The path of ROMP onnx checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--root_align'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'Please set this config as True to use the ROMP checkpoints trained by yourself.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "input_args", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "GPU", "=", "-", "1", "\n", "args", ".", "temporal_optimize", "=", "False", "\n", "", "if", "args", ".", "show", ":", "\n", "        ", "args", ".", "render_mesh", "=", "True", "\n", "", "if", "args", ".", "render_mesh", "or", "args", ".", "show_largest", ":", "\n", "        ", "args", ".", "calc_smpl", "=", "True", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "smpl_path", ")", ":", "\n", "        ", "smpl_url", "=", "'https://github.com/Arthur151/ROMP/releases/download/V2.0/smpl_packed_info.pth'", "\n", "download_model", "(", "smpl_url", ",", "args", ".", "smpl_path", ",", "'SMPL'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "model_path", ")", ":", "\n", "        ", "romp_url", "=", "'https://github.com/Arthur151/ROMP/releases/download/V2.0/ROMP.pkl'", "\n", "download_model", "(", "romp_url", ",", "args", ".", "model_path", ",", "'ROMP'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "model_onnx_path", ")", "and", "args", ".", "onnx", ":", "\n", "        ", "romp_onnx_url", "=", "'https://github.com/Arthur151/ROMP/releases/download/V2.0/ROMP.onnx'", "\n", "download_model", "(", "romp_onnx_url", ",", "args", ".", "model_onnx_path", ",", "'ROMP'", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.main.main": [[175, 202], ["main.romp_settings", "main.ROMP", "utils.ResultSaver", "cv2.imread", "ROMP.", "utils.ResultSaver.", "utils.collect_frame_path", "utils.ResultSaver", "utils.progress_bar", "utils.save_video_results", "utils.WebcamVideoStream", "utils.WebcamVideoStream.start", "utils.WebcamVideoStream.stop", "cv2.imread", "ROMP.", "utils.ResultSaver.", "utils.ResultSaver.save_video", "utils.WebcamVideoStream.read", "ROMP."], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.main.romp_settings", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.collect_frame_path", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.progress_bar", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.save_video_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.WebcamVideoStream.stop", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.ResultSaver.save_video", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "romp_settings", "(", ")", "\n", "romp", "=", "ROMP", "(", "args", ")", "\n", "if", "args", ".", "mode", "==", "'image'", ":", "\n", "        ", "saver", "=", "ResultSaver", "(", "args", ".", "mode", ",", "args", ".", "save_path", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "args", ".", "input", ")", "\n", "outputs", "=", "romp", "(", "image", ")", "\n", "saver", "(", "outputs", ",", "args", ".", "input", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "'video'", ":", "\n", "        ", "frame_paths", ",", "video_save_path", "=", "collect_frame_path", "(", "args", ".", "input", ",", "args", ".", "save_path", ")", "\n", "saver", "=", "ResultSaver", "(", "args", ".", "mode", ",", "args", ".", "save_path", ")", "\n", "for", "frame_path", "in", "progress_bar", "(", "frame_paths", ")", ":", "\n", "            ", "image", "=", "cv2", ".", "imread", "(", "frame_path", ")", "\n", "outputs", "=", "romp", "(", "image", ")", "\n", "saver", "(", "outputs", ",", "frame_path", ")", "\n", "", "save_video_results", "(", "saver", ".", "frame_save_paths", ")", "\n", "if", "args", ".", "save_video", ":", "\n", "            ", "saver", ".", "save_video", "(", "video_save_path", ",", "frame_rate", "=", "args", ".", "frame_rate", ")", "\n", "\n", "", "", "if", "args", ".", "mode", "==", "'webcam'", ":", "\n", "        ", "cap", "=", "WebcamVideoStream", "(", "0", ")", "\n", "cap", ".", "start", "(", ")", "\n", "while", "True", ":", "\n", "            ", "frame", "=", "cap", ".", "read", "(", ")", "\n", "outputs", "=", "romp", "(", "frame", ")", "\n", "", "cap", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.BasicBlock.__init__": [[57, 66], ["torch.Module.__init__", "model.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "model.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.conv3x3", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.BasicBlock.forward": [[67, 84], ["model.BasicBlock.conv1", "model.BasicBlock.bn1", "model.BasicBlock.relu", "model.BasicBlock.conv2", "model.BasicBlock.bn2", "model.BasicBlock.relu", "model.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.Bottleneck.__init__": [[88, 102], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "BN", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.Bottleneck.forward": [[103, 124], ["model.Bottleneck.conv1", "model.Bottleneck.bn1", "model.Bottleneck.relu", "model.Bottleneck.conv2", "model.Bottleneck.bn2", "model.Bottleneck.relu", "model.Bottleneck.conv3", "model.Bottleneck.bn3", "model.Bottleneck.relu", "model.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HighResolutionModule.__init__": [[130, 144], ["torch.Module.__init__", "model.HighResolutionModule._make_branches", "model.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HighResolutionModule._make_one_branch": [[145, 168], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HighResolutionModule._make_branches": [[169, 177], ["range", "torch.ModuleList", "torch.ModuleList", "branches.append", "model.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HighResolutionModule._make_fuse_layers": [[178, 222], ["range", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HighResolutionModule.get_num_inchannels": [[223, 225], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HighResolutionModule.forward": [[226, 245], ["range", "range", "len", "range", "x_fuse.append", "model.HighResolutionModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HigherResolutionNet.__init__": [[248, 253], ["torch.Module.__init__", "model.HigherResolutionNet.make_baseline"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.make_baseline"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "HigherResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "make_baseline", "(", ")", "\n", "self", ".", "backbone_channels", "=", "32", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HigherResolutionNet._make_transition_layer": [[254, 288], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels_cur_layer", "[", "i", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outchannels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HigherResolutionNet._make_layer": [[289, 304], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "BN", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "BN", "=", "BN", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "BN", "=", "BN", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HigherResolutionNet._make_stage": [[305, 335], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "model.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "\n", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HigherResolutionNet.make_baseline": [[336, 381], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "model.HigherResolutionNet._make_layer", "model.HigherResolutionNet._make_transition_layer", "model.HigherResolutionNet._make_stage", "model.HigherResolutionNet._make_transition_layer", "model.HigherResolutionNet._make_stage", "model.HigherResolutionNet._make_transition_layer", "model.HigherResolutionNet._make_stage", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_stage", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_stage", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_stage"], ["", "def", "make_baseline", "(", "self", ")", ":", "\n", "# stem net", "\n", "        ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "4", ",", "BN", "=", "nn", ".", "BatchNorm2d", ")", "\n", "\n", "self", ".", "stage2_cfg", "=", "{", "'NUM_MODULES'", ":", "1", ",", "'NUM_BRANCHES'", ":", "2", ",", "'BLOCK'", ":", "'BASIC'", ",", "'NUM_BLOCKS'", ":", "[", "4", ",", "4", "]", ",", "'NUM_CHANNELS'", ":", "[", "32", ",", "64", "]", ",", "'FUSE_METHOD'", ":", "'SUM'", "}", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "256", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "{", "'NUM_MODULES'", ":", "4", ",", "'NUM_BRANCHES'", ":", "3", ",", "'BLOCK'", ":", "'BASIC'", ",", "'NUM_BLOCKS'", ":", "[", "4", ",", "4", ",", "4", "]", ",", "'NUM_CHANNELS'", ":", "[", "32", ",", "64", ",", "128", "]", ",", "'FUSE_METHOD'", ":", "'SUM'", "}", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "{", "'NUM_MODULES'", ":", "3", ",", "'NUM_BRANCHES'", ":", "4", ",", "'BLOCK'", ":", "'BASIC'", ",", "'NUM_BLOCKS'", ":", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "'NUM_CHANNELS'", ":", "[", "32", ",", "64", ",", "128", ",", "256", "]", ",", "'FUSE_METHOD'", ":", "'SUM'", "}", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.HigherResolutionNet.forward": [[382, 418], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.HigherResolutionNet.conv1", "model.HigherResolutionNet.bn1", "model.HigherResolutionNet.relu", "model.HigherResolutionNet.conv2", "model.HigherResolutionNet.bn2", "model.HigherResolutionNet.relu", "model.HigherResolutionNet.layer1", "range", "model.HigherResolutionNet.stage2", "range", "model.HigherResolutionNet.stage3", "range", "model.HigherResolutionNet.stage4", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "model.BHWC_to_BCHW"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.BHWC_to_BCHW"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "(", "BHWC_to_BCHW", "(", "x", ")", "/", "255.", ")", "*", "2.0", "-", "1.0", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "x", "=", "y_list", "[", "0", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.ROMPv1.__init__": [[421, 426], ["torch.Module.__init__", "print", "model.HigherResolutionNet", "model.ROMPv1._build_head"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._build_head"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ROMPv1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'Using ROMP v1'", ")", "\n", "self", ".", "backbone", "=", "HigherResolutionNet", "(", ")", "\n", "self", ".", "_build_head", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.ROMPv1._build_head": [[427, 435], ["model.ROMPv1._make_final_layers", "model.get_coord_maps"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_final_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.get_coord_maps"], ["", "def", "_build_head", "(", "self", ")", ":", "\n", "        ", "self", ".", "outmap_size", "=", "64", "\n", "params_num", ",", "cam_dim", "=", "3", "+", "22", "*", "6", "+", "10", ",", "3", "\n", "self", ".", "head_cfg", "=", "{", "'NUM_HEADS'", ":", "1", ",", "'NUM_CHANNELS'", ":", "64", ",", "'NUM_BASIC_BLOCKS'", ":", "2", "}", "\n", "self", ".", "output_cfg", "=", "{", "'NUM_PARAMS_MAP'", ":", "params_num", "-", "cam_dim", ",", "'NUM_CENTER_MAP'", ":", "1", ",", "'NUM_CAM_MAP'", ":", "cam_dim", "}", "\n", "\n", "self", ".", "final_layers", "=", "self", ".", "_make_final_layers", "(", "self", ".", "backbone", ".", "backbone_channels", ")", "\n", "self", ".", "coordmaps", "=", "get_coord_maps", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.ROMPv1._make_final_layers": [[436, 444], ["final_layers.append", "final_layers.append", "final_layers.append", "torch.ModuleList", "torch.ModuleList", "model.ROMPv1._make_head_layers", "model.ROMPv1._make_head_layers", "model.ROMPv1._make_head_layers"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers"], ["", "def", "_make_final_layers", "(", "self", ",", "input_channels", ")", ":", "\n", "        ", "final_layers", "=", "[", "None", "]", "\n", "input_channels", "+=", "2", "\n", "final_layers", ".", "append", "(", "self", ".", "_make_head_layers", "(", "input_channels", ",", "self", ".", "output_cfg", "[", "'NUM_PARAMS_MAP'", "]", ")", ")", "\n", "final_layers", ".", "append", "(", "self", ".", "_make_head_layers", "(", "input_channels", ",", "self", ".", "output_cfg", "[", "'NUM_CENTER_MAP'", "]", ")", ")", "\n", "final_layers", ".", "append", "(", "self", ".", "_make_head_layers", "(", "input_channels", ",", "self", ".", "output_cfg", "[", "'NUM_CAM_MAP'", "]", ")", ")", "\n", "\n", "return", "nn", ".", "ModuleList", "(", "final_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.ROMPv1._make_head_layers": [[445, 469], ["head_layers.append", "range", "head_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "head_layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.BasicBlock"], "methods", ["None"], ["", "def", "_make_head_layers", "(", "self", ",", "input_channels", ",", "output_channels", ")", ":", "\n", "        ", "head_layers", "=", "[", "]", "\n", "num_channels", "=", "self", ".", "head_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "\n", "head_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "input_channels", ",", "\n", "out_channels", "=", "num_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "head_cfg", "[", "'NUM_HEADS'", "]", ")", ":", "\n", "            ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "head_cfg", "[", "'NUM_BASIC_BLOCKS'", "]", ")", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "BasicBlock", "(", "num_channels", ",", "num_channels", ")", ")", ")", "\n", "", "head_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "\n", "", "head_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "output_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "head_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.ROMPv1.forward": [[470, 482], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.ROMPv1.backbone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.ROMPv1.coordmaps.to().repeat", "model.ROMPv1.coordmaps.to"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "image", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "self", ".", "coordmaps", ".", "to", "(", "x", ".", "device", ")", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "params_maps", "=", "self", ".", "final_layers", "[", "1", "]", "(", "x", ")", "\n", "center_maps", "=", "self", ".", "final_layers", "[", "2", "]", "(", "x", ")", "\n", "cam_maps", "=", "self", ".", "final_layers", "[", "3", "]", "(", "x", ")", "\n", "# to make sure that scale is always a positive value", "\n", "#cam_maps[:, 0] = torch.pow(1.1,cam_maps[:, 0]) # not supported by tensorRT", "\n", "params_maps", "=", "torch", ".", "cat", "(", "[", "cam_maps", ",", "params_maps", "]", ",", "1", ")", "\n", "return", "center_maps", ",", "params_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.get_coord_maps": [[8, 38], ["torch.ones", "torch.ones", "xx_ones.unsqueeze.unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "xx_range.unsqueeze.unsqueeze", "torch.matmul", "torch.matmul", "xx_channel.permute.unsqueeze", "torch.ones", "torch.ones", "yy_ones.unsqueeze.unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "yy_range.unsqueeze.unsqueeze", "torch.matmul", "torch.matmul", "yy_channel.permute.unsqueeze", "xx_channel.permute.permute", "yy_channel.permute.permute", "torch.cat", "torch.cat", "xx_channel.permute.float", "yy_channel.permute.float", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["def", "get_coord_maps", "(", "size", "=", "128", ")", ":", "\n", "    ", "xx_ones", "=", "torch", ".", "ones", "(", "[", "1", ",", "size", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "xx_ones", "=", "xx_ones", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "xx_range", "=", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "xx_range", "=", "xx_range", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "xx_channel", "=", "torch", ".", "matmul", "(", "xx_ones", ",", "xx_range", ")", "\n", "xx_channel", "=", "xx_channel", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "yy_ones", "=", "torch", ".", "ones", "(", "[", "1", ",", "size", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "yy_ones", "=", "yy_ones", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "yy_range", "=", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "yy_range", "=", "yy_range", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "yy_channel", "=", "torch", ".", "matmul", "(", "yy_range", ",", "yy_ones", ")", "\n", "yy_channel", "=", "yy_channel", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "yy_channel", "=", "yy_channel", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "float", "(", ")", "/", "(", "size", "-", "1", ")", "\n", "yy_channel", "=", "yy_channel", ".", "float", "(", ")", "/", "(", "size", "-", "1", ")", "\n", "\n", "xx_channel", "=", "xx_channel", "*", "2", "-", "1", "\n", "yy_channel", "=", "yy_channel", "*", "2", "-", "1", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "xx_channel", ",", "yy_channel", "]", ",", "dim", "=", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.BHWC_to_BCHW": [[39, 45], ["x.unsqueeze().transpose().squeeze", "x.unsqueeze().transpose", "x.unsqueeze"], "function", ["None"], ["", "def", "BHWC_to_BCHW", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    :param x: torch tensor, B x H x W x C\n    :return:  torch tensor, B x C x H x W\n    \"\"\"", "\n", "return", "x", ".", "unsqueeze", "(", "1", ")", ".", "transpose", "(", "1", ",", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.conv3x3": [[49, 53], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.export_model_to_onnx_static": [[484, 499], ["ROMPv1().cuda", "torch.load", "torch.load", "ROMPv1().cuda.load_state_dict", "torch.rand().cuda", "torch.rand().cuda", "torch.onnx.export", "torch.onnx.export", "print", "model.ROMPv1", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "def", "export_model_to_onnx_static", "(", ")", ":", "\n", "    ", "model", "=", "ROMPv1", "(", ")", ".", "cuda", "(", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "'/home/yusun/.romp/ROMP.pkl'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "save_file", "=", "'/home/yusun/.romp/ROMP.onnx'", "\n", "\n", "image", "=", "torch", ".", "rand", "(", "1", ",", "512", ",", "512", ",", "3", ")", ".", "cuda", "(", ")", "\n", "torch", ".", "onnx", ".", "export", "(", "model", ",", "(", "image", ")", ",", "\n", "save_file", ",", "\n", "input_names", "=", "[", "'image'", "]", ",", "\n", "output_names", "=", "[", "'center_maps'", ",", "'params_maps'", "]", ",", "\n", "export_params", "=", "True", ",", "\n", "opset_version", "=", "12", ",", "\n", "do_constant_folding", "=", "True", ")", "\n", "print", "(", "'ROMP onnx saved into: '", ",", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.test_model": [[500, 512], ["ROMPv1().cuda", "torch.load", "torch.load", "ROMPv1().cuda.load_state_dict", "ROMPv1().cuda.", "model.items", "torch.rand().cuda", "torch.rand().cuda", "isinstance", "model.ROMPv1", "print", "isinstance", "torch.rand", "torch.rand", "print", "print"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "test_model", "(", ")", ":", "\n", "    ", "model", "=", "ROMPv1", "(", ")", ".", "cuda", "(", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "'/home/yusun/.romp/ROMP.pkl'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "#, strict=False", "\n", "outputs", "=", "model", "(", "torch", ".", "rand", "(", "1", ",", "512", ",", "512", ",", "3", ")", ".", "cuda", "(", ")", ")", "\n", "for", "key", ",", "value", "in", "outputs", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "tuple", ")", ":", "\n", "            ", "print", "(", "key", ",", "value", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "            ", "print", "(", "key", ",", "value", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "key", ",", "value", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.model.test_onnx": [[513, 532], ["onnx.load", "onnx.checker.check_model", "onnxruntime.InferenceSession", "range", "print", "print", "cv2.imread().astype", "time.time", "onnxruntime.InferenceSession.run", "time.time", "cost_time.append", "np.mean", "cv2.imread"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.image.Image_processor.run"], ["", "", "", "def", "test_onnx", "(", ")", ":", "\n", "    ", "onnx_path", "=", "\"/home/yusun/.romp/ROMP.onnx\"", "\n", "import", "onnx", ",", "onnxruntime", "\n", "onnx_model", "=", "onnx", ".", "load", "(", "onnx_path", ")", "\n", "onnx", ".", "checker", ".", "check_model", "(", "onnx_model", ")", "\n", "ort_session", "=", "onnxruntime", ".", "InferenceSession", "(", "onnx_path", ")", "\n", "\n", "import", "time", "\n", "import", "cv2", "\n", "import", "numpy", "as", "np", "\n", "cost_time", "=", "[", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "'/home/yusun/CenterMesh/simple_romp/test/ages_croped.png'", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", "None", "]", "\n", "for", "_", "in", "range", "(", "200", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "ort_outs", "=", "ort_session", ".", "run", "(", "None", ",", "{", "'image'", ":", "image", "}", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "cost_time", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "", "print", "(", "'cost time '", ",", "np", ".", "mean", "(", "cost_time", ")", ")", "\n", "print", "(", "cost_time", "[", ":", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.ResultSaver.__init__": [[44, 54], ["len", "os.dirname", "os.dirname", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.splitext", "os.splitext"], "methods", ["None"], ["torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "\n", "", "def", "load_classes", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Loads class labels at 'path'\n    \"\"\"", "\n", "fp", "=", "open", "(", "path", ",", "'r'", ")", "\n", "names", "=", "fp", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "return", "list", "(", "filter", "(", "None", ",", "names", ")", ")", "# filter removes empty strings (such as last line)", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.ResultSaver.__call__": [[55, 77], ["cv2.imwrite", "os.basename", "os.basename", "cv2.imread", "utils.ResultSaver.frame_save_paths.append", "os.join", "os.join", "outputs.pop", "numpy.savez", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext", "os.splitext"], "methods", ["None"], ["\n", "\n", "", "def", "model_info", "(", "model", ")", ":", "# Plots a line-by-line description of a PyTorch model", "\n", "    ", "n_p", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", ")", "# number parameters", "\n", "n_g", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", "if", "x", ".", "requires_grad", ")", "# number gradients", "\n", "print", "(", "'\\n%5s %50s %9s %12s %20s %12s %12s'", "%", "(", "'layer'", ",", "'name'", ",", "'gradient'", ",", "'parameters'", ",", "'shape'", ",", "'mu'", ",", "'sigma'", ")", ")", "\n", "for", "i", ",", "(", "name", ",", "p", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "name", "=", "name", ".", "replace", "(", "'module_list.'", ",", "''", ")", "\n", "print", "(", "'%5g %50s %9s %12g %20s %12.3g %12.3g'", "%", "(", "\n", "i", ",", "name", ",", "p", ".", "requires_grad", ",", "p", ".", "numel", "(", ")", ",", "list", "(", "p", ".", "shape", ")", ",", "p", ".", "mean", "(", ")", ",", "p", ".", "std", "(", ")", ")", ")", "\n", "", "print", "(", "'Model Summary: %g layers, %g parameters, %g gradients\\n'", "%", "(", "i", "+", "1", ",", "n_p", ",", "n_g", ")", ")", "\n", "\n", "\n", "\n", "", "def", "plot_one_box", "(", "x", ",", "img", ",", "color", "=", "None", ",", "label", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "# Plots one bounding box on image img", "\n", "    ", "tl", "=", "line_thickness", "or", "round", "(", "0.0004", "*", "max", "(", "img", ".", "shape", "[", "0", ":", "2", "]", ")", ")", "+", "1", "# line thickness", "\n", "color", "=", "color", "or", "[", "random", ".", "randint", "(", "0", ",", "255", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "c1", ",", "c2", "=", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ",", "(", "int", "(", "x", "[", "2", "]", ")", ",", "int", "(", "x", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "# font thickness", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "tl", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "t_size", "[", "1", "]", "-", "3", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.ResultSaver.save_video": [[78, 86], ["cv2.VideoWriter", "cv2.VideoWriter.release", "len", "cv2.VideoWriter_fourcc", "cv2.VideoWriter.write", "cv2.imread", "cv2.imread"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write"], ["cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "# filled", "\n", "cv2", ".", "putText", "(", "img", ",", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "2", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "\n", "", "", "def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.03", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.WebcamVideoStream.__init__": [[113, 125], ["utils.WebcamVideoStream.stream.read", "cv2.VideoCapture", "cv2.VideoCapture"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read"], ["    ", "gain_w", "=", "float", "(", "img_size", "[", "0", "]", ")", "/", "img0_shape", "[", "1", "]", "# gain  = old / new", "\n", "gain_h", "=", "float", "(", "img_size", "[", "1", "]", ")", "/", "img0_shape", "[", "0", "]", "\n", "gain", "=", "min", "(", "gain_w", ",", "gain_h", ")", "\n", "pad_x", "=", "(", "img_size", "[", "0", "]", "-", "img0_shape", "[", "1", "]", "*", "gain", ")", "/", "2", "# width padding", "\n", "pad_y", "=", "(", "img_size", "[", "1", "]", "-", "img0_shape", "[", "0", "]", "*", "gain", ")", "/", "2", "# height padding", "\n", "coords", "[", ":", ",", "[", "0", ",", "2", "]", "]", "-=", "pad_x", "\n", "coords", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "pad_y", "\n", "coords", "[", ":", ",", "0", ":", "4", "]", "/=", "gain", "\n", "coords", "[", ":", ",", ":", "4", "]", "=", "torch", ".", "clamp", "(", "coords", "[", ":", ",", ":", "4", "]", ",", "min", "=", "0", ")", "\n", "return", "coords", "\n", "\n", "\n", "", "def", "ap_per_class", "(", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.WebcamVideoStream.start": [[126, 130], ["threading.Thread().start", "threading.Thread"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start"], ["    "]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.WebcamVideoStream.update": [[130, 138], ["utils.WebcamVideoStream.stream.read"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read"], ["\n", "\n", "# lists/pytorch to numpy", "\n", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", "=", "np", ".", "array", "(", "tp", ")", ",", "np", ".", "array", "(", "conf", ")", ",", "np", ".", "array", "(", "pred_cls", ")", ",", "np", ".", "array", "(", "target_cls", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.WebcamVideoStream.read": [[138, 141], ["None"], "methods", ["None"], ["tp", ",", "conf", ",", "pred_cls", ",", "target_cls", "=", "np", ".", "array", "(", "tp", ")", ",", "np", ".", "array", "(", "conf", ")", ",", "np", ".", "array", "(", "pred_cls", ")", ",", "np", ".", "array", "(", "target_cls", ")", "\n", "\n", "# Sort by objectness", "\n", "i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.WebcamVideoStream.stop": [[141, 144], ["None"], "methods", ["None"], ["i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n", "tp", ",", "conf", ",", "pred_cls", "=", "tp", "[", "i", "]", ",", "conf", "[", "i", "]", ",", "pred_cls", "[", "i", "]", "\n", "\n", "# Find unique classes", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.LowPassFilter.__init__": [[204, 207], ["None"], "methods", ["None"], ["return", "ap", "\n", "\n", "\n", "", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.LowPassFilter.process": [[208, 216], ["None"], "methods", ["None"], ["    ", "\"\"\"\n    Returns the IoU of two bounding boxes\n    \"\"\"", "\n", "N", ",", "M", "=", "len", "(", "box1", ")", ",", "len", "(", "box2", ")", "\n", "if", "x1y1x2y2", ":", "\n", "# Get the coordinates of bounding boxes", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", ":", ",", "0", "]", ",", "box1", "[", ":", ",", "1", "]", ",", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.OneEuroFilter.__init__": [[218, 227], ["utils.LowPassFilter", "utils.LowPassFilter"], "methods", ["None"], ["        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", ":", ",", "0", "]", "-", "box1", "[", ":", ",", "2", "]", "/", "2", ",", "box1", "[", ":", ",", "0", "]", "+", "box1", "[", ":", ",", "2", "]", "/", "2", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", ":", ",", "1", "]", "-", "box1", "[", ":", ",", "3", "]", "/", "2", ",", "box1", "[", ":", ",", "1", "]", "+", "box1", "[", ":", ",", "3", "]", "/", "2", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", ":", ",", "0", "]", "-", "box2", "[", ":", ",", "2", "]", "/", "2", ",", "box2", "[", ":", ",", "0", "]", "+", "box2", "[", ":", ",", "2", "]", "/", "2", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", ":", ",", "1", "]", "-", "box2", "[", ":", ",", "3", "]", "/", "2", ",", "box2", "[", ":", ",", "1", "]", "+", "box2", "[", ":", ",", "3", "]", "/", "2", "\n", "\n", "# get the coordinates of the intersection rectangle", "\n", "", "inter_rect_x1", "=", "torch", ".", "max", "(", "b1_x1", ".", "unsqueeze", "(", "1", ")", ",", "b2_x1", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "b1_y1", ".", "unsqueeze", "(", "1", ")", ",", "b2_y1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "b1_x2", ".", "unsqueeze", "(", "1", ")", ",", "b2_x2", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "b1_y2", ".", "unsqueeze", "(", "1", ")", ",", "b2_y2", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.OneEuroFilter.compute_alpha": [[228, 232], ["None"], "methods", ["None"], ["# Intersection area", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", ",", "0", ")", "*", "torch", ".", "clamp", "(", "inter_rect_y2", "-", "inter_rect_y1", ",", "0", ")", "\n", "# Union Area", "\n", "b1_area", "=", "(", "(", "b1_x2", "-", "b1_x1", ")", "*", "(", "b1_y2", "-", "b1_y1", ")", ")", "\n", "b1_area", "=", "(", "(", "b1_x2", "-", "b1_x1", ")", "*", "(", "b1_y2", "-", "b1_y1", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "N", ",", "M", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.OneEuroFilter.process": [[233, 247], ["utils.OneEuroFilter.dx_filter.process", "isinstance", "utils.OneEuroFilter.x_filter.process", "utils.OneEuroFilter.compute_alpha", "isinstance", "print", "utils.OneEuroFilter.compute_alpha", "isinstance", "utils.OneEuroFilter.compute_alpha", "numpy.abs", "numpy.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.compute_alpha", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.compute_alpha", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.compute_alpha"], ["b2_area", "=", "(", "(", "b2_x2", "-", "b2_x1", ")", "*", "(", "b2_y2", "-", "b2_y1", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "N", ",", "M", ")", "\n", "\n", "return", "inter_area", "/", "(", "b1_area", "+", "b2_area", "-", "inter_area", "+", "1e-16", ")", "\n", "\n", "\n", "", "def", "build_targets_max", "(", "target", ",", "anchor_wh", ",", "nA", ",", "nC", ",", "nGh", ",", "nGw", ")", ":", "\n", "    ", "\"\"\"\n    returns nT, nCorrect, tx, ty, tw, th, tconf, tcls\n    \"\"\"", "\n", "nB", "=", "len", "(", "target", ")", "# number of images in batch", "\n", "\n", "txy", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "2", ")", ".", "cuda", "(", ")", "# batch size, anchors, grid size", "\n", "twh", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "2", ")", ".", "cuda", "(", ")", "\n", "tconf", "=", "torch", ".", "LongTensor", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ")", ".", "fill_", "(", "0", ")", ".", "cuda", "(", ")", "\n", "tcls", "=", "torch", ".", "ByteTensor", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "nC", ")", ".", "fill_", "(", "0", ")", ".", "cuda", "(", ")", "# nC = number of classes", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.ProgressBar.__init__": [[772, 784], ["re.sub", "len", "len", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.ProgressBar.__call__": [[785, 799], ["int", "print", "float"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.ProgressBar.done": [[800, 804], ["utils.ProgressBar.", "print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.padding_image": [[16, 25], ["max", "numpy.zeros", "torch.Tensor", "int", "int", "int", "int"], "function", ["None"], ["torch", ".", "set_printoptions", "(", "linewidth", "=", "1320", ",", "precision", "=", "5", ",", "profile", "=", "'long'", ")", "\n", "np", ".", "set_printoptions", "(", "linewidth", "=", "320", ",", "formatter", "=", "{", "'float_kind'", ":", "'{:11.5g}'", ".", "format", "}", ")", "# format short g, %precision=5", "\n", "\n", "def", "write_results", "(", "filename", ",", "results", ")", ":", "\n", "    ", "save_format", "=", "'{frame},{id},{x1},{y1}\\n'", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "frame_id", ",", "centers", ",", "track_ids", "in", "results", ":", "\n", "            ", "for", "center", ",", "track_id", "in", "zip", "(", "centers", ",", "track_ids", ")", ":", "\n", "                ", "if", "track_id", "<", "0", ":", "\n", "                    ", "continue", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.img_preprocess": [[26, 31], ["cv2.cvtColor", "utils.padding_image", "[].float", "torch.from_numpy", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.padding_image"], ["", "x1", ",", "y1", "=", "center", "\n", "line", "=", "save_format", ".", "format", "(", "frame", "=", "frame_id", ",", "id", "=", "track_id", ",", "x1", "=", "x1", ",", "y1", "=", "y1", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "", "", "print", "(", "'save results to {}'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "", "def", "mkdir_if_missing", "(", "d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.convert_tensor2numpy": [[32, 42], ["list", "outputs.keys", "isinstance", "outputs[].cpu().numpy", "outputs[].cpu"], "function", ["None"], ["    ", "if", "not", "osp", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n", "\n", "", "", "def", "float3", "(", "x", ")", ":", "# format floats to 3 decimals", "\n", "    ", "return", "float", "(", "format", "(", "x", ",", "'.3f'", ")", ")", "\n", "\n", "\n", "", "def", "init_seeds", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.save_video_results": [[88, 110], ["enumerate", "os.join", "numpy.savez", "os.basename", "enumerate", "os.dirname", "[].append", "os.splitext", "numpy.load", "[].append"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "\n", "", "", "def", "xyxy2xywh", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x1, y1, x2, y2] to [x, y, w, h]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "-", "x", "[", ":", ",", "0", "]", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "3", "]", "-", "x", "[", ":", ",", "1", "]", "\n", "return", "y", "\n", "\n", "\n", "", "def", "xywh2xyxy", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x, y, w, h] to [x1, y1, x2, y2]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "2", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "3", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "return", "y", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.video2frame": [[145, 152], ["cv2.VideoCapture", "range", "int", "cv2.VideoCapture.read", "cv2.VideoCapture.get", "os.path.join", "os.path.join", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read"], ["unique_classes", "=", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "pred_cls", ",", "target_cls", ")", ",", "0", ")", ")", "\n", "\n", "# Create Precision-Recall curve and compute AP for each class", "\n", "ap", ",", "p", ",", "r", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "unique_classes", ":", "\n", "        ", "i", "=", "pred_cls", "==", "c", "\n", "n_gt", "=", "sum", "(", "target_cls", "==", "c", ")", "# Number of ground truth objects", "\n", "n_p", "=", "sum", "(", "i", ")", "# Number of predicted objects", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.collect_frame_path": [[153, 183], ["os.exists", "os.join", "os.isfile", "os.isdir", "len", "os.dirname", "os.splitext", "os.join", "print", "os.makedirs", "os.makedirs", "os.join", "os.basename", "utils.video2frame", "sorted", "os.splitext", "os.splitext", "os.splitext", "Exception", "os.listdir", "os.listdir", "os.basename", "os.basename", "os.join"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.video2frame"], ["\n", "if", "(", "n_p", "==", "0", ")", "and", "(", "n_gt", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "", "elif", "(", "n_p", "==", "0", ")", "or", "(", "n_gt", "==", "0", ")", ":", "\n", "            ", "ap", ".", "append", "(", "0", ")", "\n", "r", ".", "append", "(", "0", ")", "\n", "p", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "# Accumulate FPs and TPs", "\n", "            ", "fpc", "=", "np", ".", "cumsum", "(", "1", "-", "tp", "[", "i", "]", ")", "\n", "tpc", "=", "np", ".", "cumsum", "(", "tp", "[", "i", "]", ")", "\n", "\n", "# Recall", "\n", "recall_curve", "=", "tpc", "/", "(", "n_gt", "+", "1e-16", ")", "\n", "r", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "n_gt", "+", "1e-16", ")", ")", "\n", "\n", "# Precision", "\n", "precision_curve", "=", "tpc", "/", "(", "tpc", "+", "fpc", ")", "\n", "p", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "tpc", "[", "-", "1", "]", "+", "fpc", "[", "-", "1", "]", ")", ")", "\n", "\n", "# AP from recall-precision curve", "\n", "ap", ".", "append", "(", "compute_ap", "(", "recall_curve", ",", "precision_curve", ")", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "ap", ")", ",", "unique_classes", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "array", "(", "r", ")", ",", "np", ".", "array", "(", "p", ")", "\n", "\n", "\n", "", "def", "compute_ap", "(", "recall", ",", "precision", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.smooth_global_rot_matrix": [[188, 202], ["batch_rodrigues().squeeze", "OE_filter.process", "rotation_matrix_to_angle_axis().reshape", "utils.transform_rot_representation", "OE_filter.process", "utils.transform_rot_representation", "torch.from_numpy().float().to", "pred_rots.cpu().numpy", "utils.batch_rodrigues", "utils.rotation_matrix_to_angle_axis", "torch.from_numpy().float", "OE_filter.process.reshape", "pred_rots.cpu", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.transform_rot_representation", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.transform_rot_representation", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rotation_matrix_to_angle_axis"], ["# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "recall", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "precision", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.check_filter_state": [[248, 258], ["len", "len", "utils.create_OneEuroFilter"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.create_OneEuroFilter"], ["tid", "=", "torch", ".", "LongTensor", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "1", ")", ".", "fill_", "(", "-", "1", ")", ".", "cuda", "(", ")", "\n", "for", "b", "in", "range", "(", "nB", ")", ":", "\n", "        ", "t", "=", "target", "[", "b", "]", "\n", "t_id", "=", "t", "[", ":", ",", "1", "]", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "t", "=", "t", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "5", "]", "]", "\n", "nTb", "=", "len", "(", "t", ")", "# number of targets", "\n", "if", "nTb", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "#gxy, gwh = t[:, 1:3] * nG, t[:, 3:5] * nG", "\n", "", "gxy", ",", "gwh", "=", "t", "[", ":", ",", "1", ":", "3", "]", ".", "clone", "(", ")", ",", "t", "[", ":", ",", "3", ":", "5", "]", ".", "clone", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.create_OneEuroFilter": [[259, 261], ["utils.OneEuroFilter", "utils.OneEuroFilter", "utils.OneEuroFilter", "utils.OneEuroFilter"], "function", ["None"], ["gxy", "[", ":", ",", "0", "]", "=", "gxy", "[", ":", ",", "0", "]", "*", "nGw", "\n", "gxy", "[", ":", ",", "1", "]", "=", "gxy", "[", ":", ",", "1", "]", "*", "nGh", "\n", "gwh", "[", ":", ",", "0", "]", "=", "gwh", "[", ":", ",", "0", "]", "*", "nGw", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.smooth_results": [[263, 272], ["utils.smooth_global_rot_matrix", "torch.cat", "filters[].process", "filters[].process", "filters[].process"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.smooth_global_rot_matrix", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process"], ["gi", "=", "torch", ".", "clamp", "(", "gxy", "[", ":", ",", "0", "]", ",", "min", "=", "0", ",", "max", "=", "nGw", "-", "1", ")", ".", "long", "(", ")", "\n", "gj", "=", "torch", ".", "clamp", "(", "gxy", "[", ":", ",", "1", "]", ",", "min", "=", "0", ",", "max", "=", "nGh", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "# Get grid box indices and prevent overflows (i.e. 13.01 on 13 anchors)", "\n", "#gi, gj = torch.clamp(gxy.long(), min=0, max=nG - 1).t()", "\n", "#gi, gj = gxy.long().t()", "\n", "\n", "# iou of targets-anchors (using wh only)", "\n", "box1", "=", "gwh", "\n", "box2", "=", "anchor_wh", ".", "unsqueeze", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.euclidean_distance": [[274, 276], ["numpy.linalg.norm"], "function", ["None"], ["iou", "=", "inter_area", "/", "(", "box1", ".", "prod", "(", "1", ")", "+", "box2", ".", "prod", "(", "2", ")", "-", "inter_area", "+", "1e-16", ")", "\n", "\n", "# Select best iou_pred and anchor", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.get_tracked_ids": [[277, 283], ["numpy.array", "numpy.array", "numpy.array", "numpy.argmin", "numpy.linalg.norm"], "function", ["None"], ["iou_best", ",", "a", "=", "iou", ".", "max", "(", "0", ")", "# best anchor [0-2] for each target", "\n", "\n", "# Select best unique target-anchor combinations", "\n", "if", "nTb", ">", "1", ":", "\n", "            ", "_", ",", "iou_order", "=", "torch", ".", "sort", "(", "-", "iou_best", ")", "# best to worst", "\n", "\n", "# Unique anchor selection", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.get_tracked_ids3D": [[284, 290], ["numpy.array", "numpy.array", "numpy.array", "numpy.argmin", "numpy.linalg.norm", "np.array.reshape", "point.reshape"], "function", ["None"], ["u", "=", "torch", ".", "stack", "(", "(", "gi", ",", "gj", ",", "a", ")", ",", "0", ")", "[", ":", ",", "iou_order", "]", "\n", "# _, first_unique = np.unique(u, axis=1, return_index=True)  # first unique indices", "\n", "first_unique", "=", "return_torch_unique_index", "(", "u", ",", "torch", ".", "unique", "(", "u", ",", "dim", "=", "1", ")", ")", "# torch alternative", "\n", "i", "=", "iou_order", "[", "first_unique", "]", "\n", "# best anchor must share significant commonality (iou) with target", "\n", "i", "=", "i", "[", "iou_best", "[", "i", "]", ">", "0.60", "]", "# TODO: examine arbitrary threshold", "\n", "if", "len", "(", "i", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.convert_kp2d_from_input_to_orgimg": [[296, 302], ["offsets.float().to.float().to", "torch.stack", "torch.stack.unsqueeze", "offsets.float().to.float", "img_pad_size.unsqueeze"], "function", ["None"], ["                ", "t", "=", "t", ".", "view", "(", "1", ",", "5", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "iou_best", "<", "0.60", ":", "\n", "                ", "continue", "\n", "\n", "", "", "tc", ",", "gxy", ",", "gwh", "=", "t", "[", ":", ",", "0", "]", ".", "long", "(", ")", ",", "t", "[", ":", ",", "1", ":", "3", "]", ".", "clone", "(", ")", ",", "t", "[", ":", ",", "3", ":", "5", "]", ".", "clone", "(", ")", "\n", "gxy", "[", ":", ",", "0", "]", "=", "gxy", "[", ":", ",", "0", "]", "*", "nGw", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.convert_cam_to_3d_trans": [[303, 308], ["torch.stack"], "function", ["None"], ["gxy", "[", ":", ",", "1", "]", "=", "gxy", "[", ":", ",", "1", "]", "*", "nGh", "\n", "gwh", "[", ":", ",", "0", "]", "=", "gwh", "[", ":", ",", "0", "]", "*", "nGw", "\n", "gwh", "[", ":", ",", "1", "]", "=", "gwh", "[", ":", ",", "1", "]", "*", "nGh", "\n", "\n", "# XY coordinates", "\n", "txy", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "gxy", "-", "gxy", ".", "floor", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.batch_orth_proj": [[309, 316], ["camera.view.view", "camera[].unsqueeze", "torch.cat", "X[].unsqueeze"], "function", ["None"], ["\n", "# Width and height", "\n", "twh", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "torch", ".", "log", "(", "gwh", "/", "anchor_wh", "[", "a", "]", ")", "# yolo method", "\n", "# twh[b, a, gj, gi] = torch.sqrt(gwh / anchor_wh[a]) / 2 # power method", "\n", "\n", "# One-hot encoding of label", "\n", "tcls", "[", "b", ",", "a", ",", "gj", ",", "gi", ",", "tc", "]", "=", "1", "\n", "tconf", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "1", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.vertices_kp3d_projection": [[317, 330], ["utils.batch_orth_proj", "utils.batch_orth_proj", "j3ds[].contiguous().detach().cpu().numpy", "estimate_translation().to", "utils.convert_kp2d_from_input_to_orgimg", "j3ds[].contiguous().detach().cpu", "[].detach().cpu().numpy", "utils.estimate_translation", "j3ds[].contiguous().detach", "[].detach().cpu", "numpy.array", "j3ds[].contiguous", "[].detach"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.batch_orth_proj", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.batch_orth_proj", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.convert_kp2d_from_input_to_orgimg", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.estimate_translation"], ["tid", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "t_id", ".", "unsqueeze", "(", "1", ")", "\n", "", "tbox", "=", "torch", ".", "cat", "(", "[", "txy", ",", "twh", "]", ",", "-", "1", ")", "\n", "return", "tconf", ",", "tbox", ",", "tid", "\n", "\n", "\n", "\n", "\n", "", "def", "generate_anchor", "(", "nGh", ",", "nGw", ",", "anchor_wh", ")", ":", "\n", "    ", "nA", "=", "len", "(", "anchor_wh", ")", "\n", "yy", ",", "xx", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "nGh", ")", ",", "torch", ".", "arange", "(", "nGw", ")", ")", "\n", "xx", ",", "yy", "=", "xx", ".", "cuda", "(", ")", ",", "yy", ".", "cuda", "(", ")", "\n", "\n", "mesh", "=", "torch", ".", "stack", "(", "[", "xx", ",", "yy", "]", ",", "dim", "=", "0", ")", "# Shape 2, nGh, nGw", "\n", "mesh", "=", "mesh", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "nA", ",", "1", ",", "1", ",", "1", ")", ".", "float", "(", ")", "# Shape nA x 2 x nGh x nGw", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.estimate_translation_cv2": [[331, 346], ["numpy.array", "cv2.solvePnPRansac", "numpy.eye"], "function", ["None"], ["anchor_offset_mesh", "=", "anchor_wh", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "nGh", ",", "nGw", ")", "# Shape nA x 2 x nGh x nGw", "\n", "anchor_mesh", "=", "torch", ".", "cat", "(", "[", "mesh", ",", "anchor_offset_mesh", "]", ",", "dim", "=", "1", ")", "# Shape nA x 4 x nGh x nGw", "\n", "return", "anchor_mesh", "\n", "\n", "", "def", "encode_delta", "(", "gt_box_list", ",", "fg_anchor_list", ")", ":", "\n", "    ", "px", ",", "py", ",", "pw", ",", "ph", "=", "fg_anchor_list", "[", ":", ",", "0", "]", ",", "fg_anchor_list", "[", ":", ",", "1", "]", ",", "fg_anchor_list", "[", ":", ",", "2", "]", ",", "fg_anchor_list", "[", ":", ",", "3", "]", "\n", "gx", ",", "gy", ",", "gw", ",", "gh", "=", "gt_box_list", "[", ":", ",", "0", "]", ",", "gt_box_list", "[", ":", ",", "1", "]", ",", "gt_box_list", "[", ":", ",", "2", "]", ",", "gt_box_list", "[", ":", ",", "3", "]", "\n", "dx", "=", "(", "gx", "-", "px", ")", "/", "pw", "\n", "dy", "=", "(", "gy", "-", "py", ")", "/", "ph", "\n", "dw", "=", "torch", ".", "log", "(", "gw", "/", "pw", ")", "\n", "dh", "=", "torch", ".", "log", "(", "gh", "/", "ph", ")", "\n", "return", "torch", ".", "stack", "(", "[", "dx", ",", "dy", ",", "dw", ",", "dh", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "def", "decode_delta", "(", "delta", ",", "fg_anchor_list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.estimate_translation_np": [[347, 390], ["numpy.array", "numpy.reshape", "numpy.reshape", "numpy.tile", "numpy.tile", "numpy.reshape", "numpy.diagflat", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.linalg.solve", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "numpy.sqrt", "numpy.reshape", "numpy.tile", "numpy.tile", "numpy.reshape", "numpy.array", "numpy.array"], "function", ["None"], ["    ", "px", ",", "py", ",", "pw", ",", "ph", "=", "fg_anchor_list", "[", ":", ",", "0", "]", ",", "fg_anchor_list", "[", ":", ",", "1", "]", ",", "fg_anchor_list", "[", ":", ",", "2", "]", ",", "fg_anchor_list", "[", ":", ",", "3", "]", "\n", "dx", ",", "dy", ",", "dw", ",", "dh", "=", "delta", "[", ":", ",", "0", "]", ",", "delta", "[", ":", ",", "1", "]", ",", "delta", "[", ":", ",", "2", "]", ",", "delta", "[", ":", ",", "3", "]", "\n", "gx", "=", "pw", "*", "dx", "+", "px", "\n", "gy", "=", "ph", "*", "dy", "+", "py", "\n", "gw", "=", "pw", "*", "torch", ".", "exp", "(", "dw", ")", "\n", "gh", "=", "ph", "*", "torch", ".", "exp", "(", "dh", ")", "\n", "return", "torch", ".", "stack", "(", "[", "gx", ",", "gy", ",", "gw", ",", "gh", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "def", "decode_delta_map", "(", "delta_map", ",", "anchors", ")", ":", "\n", "    ", "'''\n    :param: delta_map, shape (nB, nA, nGh, nGw, 4)\n    :param: anchors, shape (nA,4)\n    '''", "\n", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "_", "=", "delta_map", ".", "shape", "\n", "anchor_mesh", "=", "generate_anchor", "(", "nGh", ",", "nGw", ",", "anchors", ")", "\n", "anchor_mesh", "=", "anchor_mesh", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "# Shpae (nA x nGh x nGw) x 4", "\n", "anchor_mesh", "=", "anchor_mesh", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "nB", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "pred_list", "=", "decode_delta", "(", "delta_map", ".", "view", "(", "-", "1", ",", "4", ")", ",", "anchor_mesh", ".", "view", "(", "-", "1", ",", "4", ")", ")", "\n", "pred_map", "=", "pred_list", ".", "view", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "4", ")", "\n", "return", "pred_map", "\n", "\n", "\n", "", "def", "pooling_nms", "(", "heatmap", ",", "kernel", "=", "1", ")", ":", "\n", "    ", "pad", "=", "(", "kernel", "-", "1", ")", "//", "2", "\n", "hmax", "=", "F", ".", "max_pool2d", "(", "heatmap", ",", "(", "kernel", ",", "kernel", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", ")", "\n", "keep", "=", "(", "hmax", "==", "heatmap", ")", ".", "float", "(", ")", "\n", "return", "keep", "*", "heatmap", "\n", "\n", "\n", "", "def", "non_max_suppression", "(", "prediction", ",", "conf_thres", "=", "0.5", ",", "nms_thres", "=", "0.2", ")", ":", "\n", "    ", "\"\"\"\n    Removes detections with lower object confidence score than 'conf_thres'\n    Non-Maximum Suppression to further filter detections.\n    Returns detections with shape:\n        (x1, y1, x2, y2, object_conf, class_score, class_pred)\n    \"\"\"", "\n", "\n", "output", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "prediction", ")", ")", "]", "\n", "for", "image_i", ",", "pred", "in", "enumerate", "(", "prediction", ")", ":", "\n", "# Filter out confidence scores below threshold", "\n", "# Get score and class with highest confidence", "\n", "\n", "        ", "v", "=", "pred", "[", ":", ",", "4", "]", ">", "conf_thres", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.estimate_translation": [[391, 437], ["numpy.array", "torch.is_tensor", "torch.is_tensor", "numpy.zeros", "range", "torch.from_numpy().float", "joints_3d.detach().cpu().numpy.detach().cpu().numpy", "joints_2d.detach().cpu().numpy.detach().cpu().numpy", "valid_mask.sum", "len", "utils.estimate_translation_cv2", "torch.from_numpy", "joints_3d.detach().cpu().numpy.detach().cpu", "joints_2d.detach().cpu().numpy.detach().cpu", "range", "range", "len", "utils.estimate_translation_np", "len", "len", "valid_mask[].astype", "joints_3d.detach().cpu().numpy.detach", "joints_2d.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.estimate_translation_cv2", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.estimate_translation_np"], ["v", "=", "v", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "v", ".", "shape", ")", "==", "0", ":", "\n", "            ", "v", "=", "v", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "pred", "=", "pred", "[", "v", "]", "\n", "\n", "# If none are remaining => process next image", "\n", "nP", "=", "pred", ".", "shape", "[", "0", "]", "\n", "if", "not", "nP", ":", "\n", "            ", "continue", "\n", "# From (center x, center y, width, height) to (x1, y1, x2, y2)", "\n", "", "pred", "[", ":", ",", ":", "4", "]", "=", "xywh2xyxy", "(", "pred", "[", ":", ",", ":", "4", "]", ")", "\n", "nms_indices", "=", "nms", "(", "pred", "[", ":", ",", ":", "4", "]", ",", "pred", "[", ":", ",", "4", "]", ",", "nms_thres", ")", "\n", "det_max", "=", "pred", "[", "nms_indices", "]", "\n", "\n", "if", "len", "(", "det_max", ")", ">", "0", ":", "\n", "# Add max detections to outputs", "\n", "            ", "output", "[", "image_i", "]", "=", "det_max", "if", "output", "[", "image_i", "]", "is", "None", "else", "torch", ".", "cat", "(", "(", "output", "[", "image_i", "]", ",", "det_max", ")", ")", "\n", "\n", "", "", "return", "output", "\n", "\n", "\n", "", "def", "return_torch_unique_index", "(", "u", ",", "uv", ")", ":", "\n", "    ", "n", "=", "uv", ".", "shape", "[", "1", "]", "# number of columns", "\n", "first_unique", "=", "torch", ".", "zeros", "(", "n", ",", "device", "=", "u", ".", "device", ")", ".", "long", "(", ")", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "first_unique", "[", "j", "]", "=", "(", "uv", "[", ":", ",", "j", ":", "j", "+", "1", "]", "==", "u", ")", ".", "all", "(", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "\n", "", "return", "first_unique", "\n", "\n", "\n", "", "def", "strip_optimizer_from_checkpoint", "(", "filename", "=", "'weights/best.pt'", ")", ":", "\n", "# Strip optimizer from *.pt files for lighter files (reduced by 2/3 size)", "\n", "\n", "    ", "a", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "'cpu'", ")", "\n", "a", "[", "'optimizer'", "]", "=", "[", "]", "\n", "torch", ".", "save", "(", "a", ",", "filename", ".", "replace", "(", "'.pt'", ",", "'_lite.pt'", ")", ")", "\n", "\n", "\n", "", "def", "plot_results", "(", ")", ":", "\n", "# Plot YOLO training results file 'results.txt'", "\n", "# import os; os.system('wget https://storage.googleapis.com/ultralytics/yolov3/results_v1.txt')", "\n", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "14", ",", "7", ")", ")", "\n", "s", "=", "[", "'X + Y'", ",", "'Width + Height'", ",", "'Confidence'", ",", "'Classification'", ",", "'Total Loss'", ",", "'mAP'", ",", "'Recall'", ",", "'Precision'", "]", "\n", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "'results*.txt'", ")", ")", "\n", "for", "f", "in", "files", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.joint_mapping": [[443, 449], ["numpy.array", "numpy.ones", "len"], "function", ["None"], ["plt", ".", "title", "(", "s", "[", "i", "]", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "plt", ".", "legend", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.rot6D_to_angular": [[471, 476], ["rot6d_to_rotmat().view", "rotation_matrix_to_angle_axis().reshape", "utils.rot6d_to_rotmat", "utils.rotation_matrix_to_angle_axis", "rot6d_to_rotmat().view.reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6d_to_rotmat", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rotation_matrix_to_angle_axis"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.rot6d_to_rotmat": [[477, 492], ["x.view.view", "torch.nn.functional.normalize", "torch.sum", "torch.nn.functional.normalize", "torch.cross", "torch.stack"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.batch_rodrigues": [[493, 506], ["torch.norm", "torch.unsqueeze", "torch.div", "torch.cos", "torch.sin", "torch.cat", "utils.quat2mat", "rot_mat.view.view"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.quat2mat"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.quat2mat": [[507, 534], ["quat.size", "torch.stack().view", "norm_quat.norm", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack"], "function", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.rotation_matrix_to_angle_axis": [[535, 553], ["utils.rotation_matrix_to_quaternion", "utils.quaternion_to_angle_axis", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rotation_matrix_to_quaternion", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.quaternion_to_angle_axis"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.quaternion_to_angle_axis": [[554, 605], ["torch.sqrt", "torch.where", "torch.is_tensor", "TypeError", "ValueError", "torch.where", "torch.ones_like", "torch.zeros_like", "torch.atan2", "torch.atan2", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.rotation_matrix_to_quaternion": [[606, 683], ["torch.transpose", "torch.stack", "t0.repeat().t", "torch.stack", "t1.repeat().t", "torch.stack", "t2.repeat().t", "torch.stack", "t3.repeat().t", "mask_c0.view().type_as.view().type_as", "mask_c1.view().type_as.view().type_as", "mask_c2.view().type_as.view().type_as", "mask_c3.view().type_as.view().type_as", "torch.sqrt", "torch.is_tensor", "TypeError", "len", "ValueError", "t0.repeat", "t1.repeat", "t2.repeat", "t3.repeat", "mask_c0.view().type_as.view", "mask_c1.view().type_as.view", "mask_c2.view().type_as.view", "mask_c3.view().type_as.view", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.transform_rot_representation": [[686, 716], ["R.from_matrix", "R.from_euler.as_matrix", "R.from_quat", "R.from_euler.as_quat", "R.from_rotvec", "R.from_euler.as_rotvec", "R.from_euler", "R.from_euler.as_euler", "rot.max"], "function", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.time_cost": [[722, 736], ["time.time", "func", "time.time", "print"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.determine_device": [[737, 743], ["torch.device", "torch.device"], "function", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.download_model": [[744, 758], ["os.makedirs", "os.makedirs", "print", "wget.download", "os.path.dirname", "os.path.dirname", "print", "print", "print", "os.system", "os.system"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.download", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.wait_func": [[759, 767], ["print", "cv2.waitKey", "cv2.waitKey"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.progress_bar": [[805, 812], ["utils.ProgressBar", "enumerate", "utils.ProgressBar.done", "len", "ProgressBar."], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.ProgressBar.done"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.VertexJointSelector.__init__": [[18, 23], ["torch.Module.__init__", "smpl.VertexJointSelector.register_buffer", "smpl.VertexJointSelector.register_buffer", "smpl.VertexJointSelector.register_buffer"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["self", ".", "register_buffer", "(", "'J_regressor_extra9'", ",", "J_regressor_extra9", ")", "\n", "self", ".", "register_buffer", "(", "'J_regressor_h36m17'", ",", "J_regressor_h36m17", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "vertices", ",", "joints", ")", ":", "\n", "        ", "extra_joints21", "=", "torch", ".", "index_select", "(", "vertices", ",", "1", ",", "self", ".", "extra_joints_idxs", ")", "\n", "extra_joints9", "=", "torch", ".", "einsum", "(", "'bik,ji->bjk'", ",", "[", "vertices", ",", "self", ".", "J_regressor_extra9", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.VertexJointSelector.forward": [[24, 36], ["torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["joints_h36m17", "=", "torch", ".", "einsum", "(", "'bik,ji->bjk'", ",", "[", "vertices", ",", "self", ".", "J_regressor_h36m17", "]", ")", "\n", "# 54 joints = 24 smpl joints + 21 face & feet & hands joints + 9 extra joints from different datasets + 17 joints from h36m", "\n", "joints54_17", "=", "torch", ".", "cat", "(", "[", "joints", ",", "extra_joints21", ",", "extra_joints9", ",", "joints_h36m17", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# use the middle of hip used in the most 2D pose datasets, not the o-th Pelvis of SMPL 24 joint", "\n", "#joints_h36m17_pelvis = joints_h36m17[:,14].unsqueeze(1)", "\n", "#joints_h36m17 = joints_h36m17 - joints_h36m17_pelvis", "\n", "\n", "return", "joints54_17", "\n", "\n", "", "", "class", "SMPL", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "model_path", ",", "model_type", "=", "'smpl'", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "        ", "super", "(", "SMPL", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.SMPL.__init__": [[38, 60], ["torch.Module.__init__", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "smpl.VertexJointSelector", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["model_info", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "\n", "self", ".", "vertex_joint_selector", "=", "VertexJointSelector", "(", "model_info", "[", "'extra_joints_index'", "]", ",", "model_info", "[", "'J_regressor_extra9'", "]", ",", "model_info", "[", "'J_regressor_h36m17'", "]", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "self", ".", "register_buffer", "(", "'faces_tensor'", ",", "model_info", "[", "'f'", "]", ")", "\n", "# The vertices of the template model", "\n", "self", ".", "register_buffer", "(", "'v_template'", ",", "model_info", "[", "'v_template'", "]", ")", "\n", "# The shape components, take the top 10 PCA componence.", "\n", "if", "model_type", "==", "'smpl'", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'shapedirs'", ",", "model_info", "[", "'shapedirs'", "]", ")", "\n", "", "elif", "model_type", "==", "'smpla'", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'shapedirs'", ",", "model_info", "[", "'smpla_shapedirs'", "]", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'J_regressor'", ",", "model_info", "[", "'J_regressor'", "]", ")", "\n", "# Pose blend shape basis: 6890 x 3 x 207, reshaped to 6890*3 x 207, then transpose to 207 x 6890*3", "\n", "self", ".", "register_buffer", "(", "'posedirs'", ",", "model_info", "[", "'posedirs'", "]", ")", "\n", "# indices of parents for each joints", "\n", "self", ".", "register_buffer", "(", "'parents'", ",", "model_info", "[", "'kintree_table'", "]", ")", "\n", "self", ".", "register_buffer", "(", "'lbs_weights'", ",", "model_info", "[", "'weights'", "]", ")", "\n", "\n", "#@time_cost('SMPL')", "\n", "", "def", "forward", "(", "self", ",", "betas", "=", "None", ",", "poses", "=", "None", ",", "root_align", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.SMPL.forward": [[62, 109], ["isinstance", "isinstance", "smpl.lbs", "smpl.SMPL.vertex_joint_selector", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "joints54[].mean().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "joints54[].mean"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.lbs"], ["\n", "if", "isinstance", "(", "betas", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "betas", "=", "torch", ".", "from_numpy", "(", "betas", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "", "if", "isinstance", "(", "poses", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "poses", "=", "torch", ".", "from_numpy", "(", "poses", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "\n", "", "default_device", "=", "self", ".", "shapedirs", ".", "device", "\n", "betas", ",", "poses", "=", "betas", ".", "to", "(", "default_device", ")", ",", "poses", ".", "to", "(", "default_device", ")", "\n", "\n", "vertices", ",", "joints", "=", "lbs", "(", "betas", ",", "poses", ",", "self", ".", "v_template", ",", "\n", "self", ".", "shapedirs", ",", "self", ".", "posedirs", ",", "\n", "self", ".", "J_regressor", ",", "self", ".", "parents", ",", "\n", "self", ".", "lbs_weights", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "joints54_17", "=", "self", ".", "vertex_joint_selector", "(", "vertices", ",", "joints", ")", "\n", "\n", "if", "root_align", ":", "\n", "# use the Pelvis of most 2D image, not the original Pelvis", "\n", "            ", "root_trans", "=", "joints54_17", "[", ":", ",", "[", "45", ",", "46", "]", "]", ".", "mean", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "joints54_17", "=", "joints54_17", "-", "root_trans", "\n", "vertices", "=", "vertices", "-", "root_trans", "\n", "\n", "", "return", "vertices", ",", "joints54_17", "\n", "\n", "\n", "", "", "def", "lbs", "(", "betas", ",", "pose", ",", "v_template", ",", "shapedirs", ",", "posedirs", ",", "J_regressor", ",", "parents", ",", "\n", "lbs_weights", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.lbs": [[111, 189], ["torch.einsum", "torch.einsum", "torch.einsum", "posedirs.type.type", "torch.eye", "torch.eye", "torch.eye", "batch_rodrigues().view().type", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "smpl.batch_rigid_transform", "lbs_weights.unsqueeze().expand", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.einsum", "torch.einsum", "torch.einsum", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "batch_rodrigues().view", "torch.matmul", "torch.matmul", "torch.matmul", "lbs_weights.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "posedirs.type.type", "A.view", "smpl.batch_rodrigues", "pose.view"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.batch_rigid_transform", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues"], ["\n", "\n", "batch_size", "=", "betas", ".", "shape", "[", "0", "]", "\n", "# Add shape contribution", "\n", "v_shaped", "=", "v_template", "+", "torch", ".", "einsum", "(", "'bl,mkl->bmk'", ",", "[", "betas", ",", "shapedirs", "]", ")", "\n", "# Get the joints", "\n", "# NxJx3 array", "\n", "J", "=", "torch", ".", "einsum", "(", "'bik,ji->bjk'", ",", "[", "v_shaped", ",", "J_regressor", "]", ")", "\n", "dtype", "=", "pose", ".", "dtype", "\n", "posedirs", "=", "posedirs", ".", "type", "(", "dtype", ")", "\n", "\n", "# 3. Add pose blend shapes", "\n", "# N x J x 3 x 3", "\n", "ident", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "J_regressor", ".", "device", ")", "\n", "rot_mats", "=", "batch_rodrigues", "(", "\n", "pose", ".", "view", "(", "-", "1", ",", "3", ")", ",", "dtype", "=", "dtype", ")", ".", "view", "(", "[", "batch_size", ",", "-", "1", ",", "3", ",", "3", "]", ")", ".", "type", "(", "dtype", ")", "\n", "pose_feature", "=", "(", "rot_mats", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "-", "ident", ")", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", ".", "type", "(", "dtype", ")", "\n", "# (N x P) x (P, V * 3) -> N x V x 3", "\n", "pose_offsets", "=", "torch", ".", "matmul", "(", "pose_feature", ",", "posedirs", ".", "type", "(", "dtype", ")", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", "\n", "\n", "v_posed", "=", "pose_offsets", "+", "v_shaped", "\n", "# 4. Get the global joint location", "\n", "J_transformed", ",", "A", "=", "batch_rigid_transform", "(", "rot_mats", ",", "J", ",", "parents", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# 5. Do skinning:", "\n", "# W is N x V x (J + 1)", "\n", "W", "=", "lbs_weights", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "expand", "(", "[", "batch_size", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "# (N x V x (J + 1)) x (N x (J + 1) x 16)", "\n", "num_joints", "=", "J_regressor", ".", "shape", "[", "0", "]", "\n", "T", "=", "torch", ".", "matmul", "(", "W", ",", "A", ".", "view", "(", "batch_size", ",", "num_joints", ",", "16", ")", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "\n", "homogen_coord", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "v_posed", ".", "shape", "[", "1", "]", ",", "1", "]", ",", "\n", "dtype", "=", "dtype", ",", "device", "=", "J_regressor", ".", "device", ")", "\n", "v_posed_homo", "=", "torch", ".", "cat", "(", "[", "v_posed", ",", "homogen_coord", "]", ",", "dim", "=", "2", ")", "\n", "v_homo", "=", "torch", ".", "matmul", "(", "T", ",", "torch", ".", "unsqueeze", "(", "v_posed_homo", ",", "dim", "=", "-", "1", ")", ")", "\n", "verts", "=", "v_homo", "[", ":", ",", ":", ",", ":", "3", ",", "0", "]", "\n", "\n", "return", "verts", ",", "J_transformed", "\n", "\n", "\n", "", "def", "batch_rodrigues", "(", "rot_vecs", ",", "epsilon", "=", "1e-8", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.batch_rodrigues": [[191, 223], ["torch.norm", "torch.norm", "torch.norm", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.split", "torch.split", "torch.split", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.cat", "torch.cat", "torch.cat", "torch.eye", "torch.eye", "torch.eye", "torch.bmm", "torch.bmm", "torch.bmm"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["\n", "\n", "batch_size", "=", "rot_vecs", ".", "shape", "[", "0", "]", "\n", "device", "=", "rot_vecs", ".", "device", "\n", "\n", "angle", "=", "torch", ".", "norm", "(", "rot_vecs", "+", "1e-8", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "rot_dir", "=", "rot_vecs", "/", "angle", "\n", "\n", "cos", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "cos", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "sin", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "sin", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Bx1 arrays", "\n", "rx", ",", "ry", ",", "rz", "=", "torch", ".", "split", "(", "rot_dir", ",", "1", ",", "dim", "=", "1", ")", "\n", "K", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "3", ",", "3", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "K", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "-", "rz", ",", "ry", ",", "rz", ",", "zeros", ",", "-", "rx", ",", "-", "ry", ",", "rx", ",", "zeros", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "(", "batch_size", ",", "3", ",", "3", ")", ")", "\n", "\n", "ident", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "rot_mat", "=", "ident", "+", "sin", "*", "K", "+", "(", "1", "-", "cos", ")", "*", "torch", ".", "bmm", "(", "K", ",", "K", ")", "\n", "return", "rot_mat", "\n", "\n", "", "def", "transform_mat", "(", "R", ",", "t", ")", ":", "\n", "    ", "''' Creates a batch of transformation matrices\n        Args:\n            - R: Bx3x3 array of a batch of rotation matrices\n            - t: Bx3x1 array of a batch of translation vectors\n        Returns:\n            - T: Bx4x4 Transformation matrix\n    '''", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.transform_mat": [[224, 235], ["torch.cat", "torch.cat", "torch.cat", "torch.pad", "torch.pad"], "function", ["None"], ["# No padding left or right, only add an extra row", "\n", "return", "torch", ".", "cat", "(", "[", "F", ".", "pad", "(", "R", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ",", "\n", "F", ".", "pad", "(", "t", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "value", "=", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "\n", "", "def", "batch_rigid_transform", "(", "rot_mats", ",", "joints", ",", "parents", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.batch_rigid_transform": [[236, 291], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.clone", "transform_mat().reshape", "range", "torch.stack", "torch.stack", "torch.stack", "torch.pad", "torch.matmul", "torch.matmul", "torch.matmul", "transform_chain.append", "torch.pad", "smpl.transform_mat", "torch.matmul", "torch.matmul", "torch.matmul", "rot_mats.reshape", "joints.clone.reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.transform_mat"], ["\n", "\n", "joints", "=", "torch", ".", "unsqueeze", "(", "joints", ",", "dim", "=", "-", "1", ")", "\n", "\n", "rel_joints", "=", "joints", ".", "clone", "(", ")", "\n", "rel_joints", "[", ":", ",", "1", ":", "]", "-=", "joints", "[", ":", ",", "parents", "[", "1", ":", "]", "]", "\n", "\n", "transforms_mat", "=", "transform_mat", "(", "\n", "rot_mats", ".", "reshape", "(", "-", "1", ",", "3", ",", "3", ")", ",", "\n", "rel_joints", ".", "reshape", "(", "-", "1", ",", "3", ",", "1", ")", ")", ".", "reshape", "(", "-", "1", ",", "joints", ".", "shape", "[", "1", "]", ",", "4", ",", "4", ")", "\n", "\n", "transform_chain", "=", "[", "transforms_mat", "[", ":", ",", "0", "]", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "parents", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Subtract the joint location at the rest pose", "\n", "# No need for rotation, since it's identity when at rest", "\n", "        ", "curr_res", "=", "torch", ".", "matmul", "(", "transform_chain", "[", "parents", "[", "i", "]", "]", ",", "\n", "transforms_mat", "[", ":", ",", "i", "]", ")", "\n", "transform_chain", ".", "append", "(", "curr_res", ")", "\n", "\n", "", "transforms", "=", "torch", ".", "stack", "(", "transform_chain", ",", "dim", "=", "1", ")", "\n", "\n", "# The last column of the transformations contains the posed joints", "\n", "posed_joints", "=", "transforms", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "\n", "# The last column of the transformations contains the posed joints", "\n", "posed_joints", "=", "transforms", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "\n", "joints_homogen", "=", "F", ".", "pad", "(", "joints", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "rel_transforms", "=", "transforms", "-", "F", ".", "pad", "(", "\n", "torch", ".", "matmul", "(", "transforms", ",", "joints_homogen", ")", ",", "[", "3", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "return", "posed_joints", ",", "rel_transforms", "\n", "\n", "", "def", "export_smpl_to_onnx_dynamic", "(", "smpl_model", ",", "save_file", ",", "bs", "=", "1", ")", ":", "\n", "    ", "\"support dynamics batch size but slow\"", "\n", "a", "=", "torch", ".", "rand", "(", "[", "bs", ",", "10", "]", ")", ".", "cuda", "(", ")", "\n", "b", "=", "torch", ".", "rand", "(", "[", "bs", ",", "72", "]", ")", ".", "cuda", "(", ")", "\n", "dynamic_axes", "=", "{", "'smpl_betas'", ":", "[", "0", "]", ",", "'smpl_thetas'", ":", "[", "0", "]", ",", "'verts'", ":", "[", "0", "]", ",", "'joints'", ":", "[", "0", "]", "}", "\n", "torch", ".", "onnx", ".", "export", "(", "smpl_model", ",", "(", "a", ",", "b", ")", ",", "\n", "save_file", ",", "\n", "input_names", "=", "[", "'smpl_betas'", ",", "'smpl_thetas'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.export_smpl_to_onnx_dynamic": [[292, 306], ["torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "print", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["output_names", "=", "[", "'verts'", ",", "'joints'", ",", "'faces'", "]", ",", "\n", "export_params", "=", "True", ",", "\n", "opset_version", "=", "12", ",", "\n", "do_constant_folding", "=", "True", ",", "\n", "dynamic_axes", "=", "dynamic_axes", ")", "\n", "print", "(", "'SMPL onnx saved into: '", ",", "save_file", ")", "\n", "\n", "", "def", "export_smpl_to_onnx_static", "(", "smpl_model", ",", "save_file", ",", "bs", "=", "1", ")", ":", "\n", "\n", "    ", "a", "=", "torch", ".", "rand", "(", "[", "bs", ",", "10", "]", ")", ".", "cuda", "(", ")", "\n", "b", "=", "torch", ".", "rand", "(", "[", "bs", ",", "72", "]", ")", ".", "cuda", "(", ")", "\n", "torch", ".", "onnx", ".", "export", "(", "smpl_model", ",", "(", "a", ",", "b", ")", ",", "\n", "save_file", ",", "\n", "input_names", "=", "[", "'smpl_betas'", ",", "'smpl_thetas'", "]", ",", "\n", "output_names", "=", "[", "'verts'", ",", "'joints'", ",", "'faces'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.export_smpl_to_onnx_static": [[307, 319], ["torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "print", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["export_params", "=", "True", ",", "\n", "opset_version", "=", "12", ",", "\n", "do_constant_folding", "=", "True", ")", "\n", "print", "(", "'SMPL onnx saved into: '", ",", "save_file", ")", "\n", "\n", "", "def", "test_smpl", "(", "smpl_model", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "import", "time", ",", "cv2", "\n", "from", "visualization", "import", "render_human_mesh", "\n", "cost_time", "=", "[", "]", "\n", "batch_size", "=", "1", "\n", "a", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "10", "]", ")", ".", "type", "(", "dtype", ")", "#.cuda()", "\n", "b", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "72", "]", ")", ".", "type", "(", "dtype", ")", "#.cuda()", "\n", "image_length", "=", "1024", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.test_smpl": [[320, 345], ["torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "range", "print", "print", "numpy.ones", "time.time", "smpl_model", "outputs[].cpu().numpy().astype", "render_human_mesh", "print", "cv2.imshow", "cv2.waitKey", "time.time", "cost_time.append", "numpy.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "outputs[].cpu().numpy", "numpy.array().astype", "outputs[].cpu", "outputs[].cpu().numpy", "numpy.array", "outputs[].cpu"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["bg_image", "=", "np", ".", "ones", "(", "(", "image_length", ",", "image_length", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "\n", "for", "_", "in", "range", "(", "200", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "outputs", "=", "smpl_model", "(", "a", ",", "b", ")", "\n", "verts_np", "=", "(", "outputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "image_length", "/", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "+", "+", "np", ".", "array", "(", "[", "[", "[", ".5", ",", ".5", ",", "0", "]", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "*", "image_length", "\n", "faces_np", "=", "outputs", "[", "2", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "rendered_image", "=", "render_human_mesh", "(", "bg_image", ",", "verts_np", ",", "faces_np", ")", "\n", "print", "(", "rendered_image", ".", "shape", ")", "\n", "cv2", ".", "imshow", "(", "'rendering'", ",", "rendered_image", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "cost_time", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "", "print", "(", "'cost time '", ",", "np", ".", "mean", "(", "cost_time", ")", ")", "\n", "print", "(", "cost_time", "[", ":", "10", "]", ")", "\n", "#for key, item in outputs.items():", "\n", "#    print(key, item.shape)", "\n", "return", "\n", "\n", "", "def", "test_onnx", "(", "dtype", "=", "np", ".", "float32", ",", "batch_size", "=", "1", ")", ":", "\n", "    ", "smpl_onnx_path", "=", "\"smpl.onnx\"", "\n", "import", "onnx", ",", "onnxruntime", "\n", "#onnx_model = onnx.load(smpl_onnx_path)", "\n", "#onnx.checker.check_model(onnx_model)", "\n", "ort_session", "=", "onnxruntime", ".", "InferenceSession", "(", "smpl_onnx_path", ")", "\n", "\n", "import", "time", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.test_onnx": [[346, 367], ["onnxruntime.InferenceSession", "numpy.random.random().astype", "numpy.random.random().astype", "range", "print", "print", "time.time", "onnxruntime.InferenceSession.run", "time.time", "cost_time.append", "numpy.mean", "numpy.random.random", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.image.Image_processor.run"], ["cost_time", "=", "[", "]", "\n", "\n", "a", "=", "np", ".", "random", ".", "random", "(", "[", "batch_size", ",", "10", "]", ")", ".", "astype", "(", "dtype", ")", "\n", "b", "=", "np", ".", "random", ".", "random", "(", "[", "batch_size", ",", "72", "]", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "ort_inputs", "=", "{", "'smpl_betas'", ":", "a", ",", "'smpl_thetas'", ":", "b", "}", "\n", "for", "_", "in", "range", "(", "200", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "ort_outs", "=", "ort_session", ".", "run", "(", "None", ",", "ort_inputs", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "cost_time", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "", "print", "(", "'cost time '", ",", "np", ".", "mean", "(", "cost_time", ")", ")", "\n", "print", "(", "cost_time", "[", ":", "10", "]", ")", "\n", "\n", "", "def", "prepare_smpl_model", "(", "dtype", ")", ":", "\n", "    ", "model_path", "=", "'/home/yusun/CenterMesh/model_data/parameters/smpl_packed_info.pth'", "\n", "smpl_model", "=", "SMPL", "(", "model_path", ",", "dtype", "=", "dtype", ")", ".", "eval", "(", ")", "#.cuda()", "\n", "return", "smpl_model", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "#test_onnx(batch_size=1)", "\n", "    ", "dtype", "=", "torch", ".", "float32", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.smpl.prepare_smpl_model": [[368, 372], ["SMPL().eval", "smpl.SMPL"], "function", ["None"], ["smpl_model", "=", "prepare_smpl_model", "(", "dtype", ")", "\n", "test_smpl", "(", "smpl_model", ")", "\n", "#export_smpl_to_onnx_static(smpl_model, 'smpl.onnx', bs=1)", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.ConfigContext.__init__": [[248, 251], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "parsed_args", "=", "None", ")", ":", "\n", "        ", "if", "parsed_args", "is", "not", "None", ":", "\n", "            ", "self", ".", "parsed_args", "=", "parsed_args", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.ConfigContext.__enter__": [[252, 260], ["config.ConfigContext.clean", "open", "yaml.dump"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.ConfigContext.clean", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "# if a yaml is left over here, remove it", "\n", "        ", "self", ".", "clean", "(", ")", "\n", "# store all the parsed_args in a yaml file", "\n", "with", "open", "(", "self", ".", "yaml_filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "d", "=", "self", ".", "parsed_args", ".", "__dict__", "\n", "yaml", ".", "dump", "(", "d", ",", "f", ")", "\n", "", "return", "self", ".", "parsed_args", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.ConfigContext.__forceyaml__": [[261, 273], ["config.ConfigContext.clean", "open", "yaml.dump", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.ConfigContext.clean", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "__forceyaml__", "(", "self", ",", "filepath", ")", ":", "\n", "# if a yaml is left over here, remove it", "\n", "        ", "self", ".", "yaml_filename", "=", "filepath", "\n", "self", ".", "clean", "(", ")", "\n", "# store all the parsed_args in a yaml file", "\n", "with", "open", "(", "self", ".", "yaml_filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "d", "=", "self", ".", "parsed_args", ".", "__dict__", "\n", "yaml", ".", "dump", "(", "d", ",", "f", ")", "\n", "print", "(", "\"----------------------------------------------\"", ")", "\n", "print", "(", "\"__forceyaml__ DUMPING YAML \"", ")", "\n", "print", "(", "\"self.yaml_filename\"", ",", "self", ".", "yaml_filename", ")", "\n", "print", "(", "\"----------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.ConfigContext.clean": [[274, 277], ["os.path.exists", "os.remove"], "methods", ["None"], ["", "", "def", "clean", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "yaml_filename", ")", ":", "\n", "            ", "os", ".", "remove", "(", "self", ".", "yaml_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.ConfigContext.__exit__": [[278, 281], ["config.ConfigContext.clean"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.ConfigContext.clean"], ["", "", "def", "__exit__", "(", "self", ",", "exception_type", ",", "exception_value", ",", "traceback", ")", ":", "\n", "# delete the yaml file", "\n", "        ", "self", ".", "clean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args": [[28, 238], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "str", "os.path.join", "configs_update[].items", "open", "yaml.full_load", "isinstance", "configs_update[].items", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "isinstance", "exec", "exec", "exec"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args"], ["def", "parse_args", "(", "input_args", "=", "None", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'ROMP: Monocular, One-stage, Regression of Multiple 3D People'", ")", "\n", "parser", ".", "add_argument", "(", "'--tab'", ",", "type", "=", "str", ",", "default", "=", "'ROMP_v1'", ",", "help", "=", "'additional tabs'", ")", "\n", "parser", ".", "add_argument", "(", "'--configs_yml'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "project_dir", ",", "'configs/v1.yml'", ")", ",", "help", "=", "'settings'", ")", "\n", "parser", ".", "add_argument", "(", "'--inputs'", ",", "type", "=", "str", ",", "help", "=", "'path to inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "help", "=", "'path to save outputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--interactive_vis'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to show the results in an interactive mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_largest_person_only'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to only show the results of the largest person in the image'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_mesh_stand_on_image'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to show the estimated meshes standing on the image'", ")", "\n", "parser", ".", "add_argument", "(", "'--surrounding_camera'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to surround the camera around the origin'", ")", "\n", "parser", ".", "add_argument", "(", "'--soi_camera'", ",", "type", "=", "str", ",", "default", "=", "'far'", ",", "help", "=", "'camera mode of show_mesh_stand_on_image: far / close'", ")", "\n", "parser", ".", "add_argument", "(", "'--make_tracking'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to make tracking'", ")", "\n", "parser", ".", "add_argument", "(", "'--temporal_optimization'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to optimize the temporal smoothness'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dict_results'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to save the predictions to a dict (.npz)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_visualization_on_img'", ",", "action", "=", "'store_false'", ",", "help", "=", "'whether to rendering the mesh back to image, which is time consuming'", ")", "\n", "parser", ".", "add_argument", "(", "'--fps_save'", ",", "type", "=", "int", ",", "default", "=", "24", ",", "help", "=", "'the fps of the save video'", ")", "\n", "parser", ".", "add_argument", "(", "'--character'", ",", "type", "=", "str", ",", "default", "=", "'smpl'", ",", "help", "=", "'character: smpl / nvxia'", ")", "\n", "parser", ".", "add_argument", "(", "'--renderer'", ",", "type", "=", "str", ",", "default", "=", "'pytorch3d'", ",", "help", "=", "'character: pytorch3d / pyrender'", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'do nothing, just to deal with the invalid input args from jupyter notebook'", ")", "\n", "\n", "V6_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'V6 - BEV options'", ")", "\n", "V6_group", ".", "add_argument", "(", "'--bv_with_fv_condition'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "V6_group", ".", "add_argument", "(", "'--add_offsetmap'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "V6_group", ".", "add_argument", "(", "'--fv_conditioned_way'", ",", "type", "=", "str", ",", "default", "=", "'attention'", ")", "\n", "V6_group", ".", "add_argument", "(", "'--num_depth_level'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'number of depth.'", ")", "\n", "V6_group", ".", "add_argument", "(", "'--scale_anchor'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "V6_group", ".", "add_argument", "(", "'--sampling_aggregation_way'", ",", "type", "=", "str", ",", "default", "=", "'floor'", ")", "\n", "V6_group", ".", "add_argument", "(", "'--cam_dist_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "# focal length: when FOV=50 deg, 548 = H/2 * 1/(tan(FOV/2)) = 512/2. * 1./np.tan(np.radians(25))", "\n", "# focal length: when FOV=60 deg, 443.4 = H/2 * 1/(tan(FOV/2)) = 512/2. * 1./np.tan(np.radians(30))", "\n", "# focal length: when FOV=72 deg, 352 = H/2 * 1/(tan(FOV/2)) = 512/2. * 1./np.tan(np.radians(36))", "\n", "V6_group", ".", "add_argument", "(", "'--focal_length'", ",", "type", "=", "float", ",", "default", "=", "443.4", ",", "help", "=", "'Default focal length, adopted from JTA dataset'", ")", "\n", "V6_group", ".", "add_argument", "(", "'--FOV'", ",", "type", "=", "int", ",", "default", "=", "60", ",", "help", "=", "'Field of View'", ")", "\n", "V6_group", ".", "add_argument", "(", "'--matching_pckh_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.6", ",", "help", "=", "'Threshold to determine the sucess matching based on pckh'", ")", "\n", "V6_group", ".", "add_argument", "(", "'--baby_threshold'", ",", "type", "=", "float", ",", "default", "=", "0.8", ")", "\n", "V6_group", ".", "add_argument", "(", "'--calc_smpl_mesh'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "V6_group", ".", "add_argument", "(", "'--calc_mesh_loss'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "\n", "relative_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'options for learning relativites'", ")", "\n", "relative_group", ".", "add_argument", "(", "'--learn_relative'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "relative_group", ".", "add_argument", "(", "'--learn_relative_shape'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "relative_group", ".", "add_argument", "(", "'--learn_relative_age'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "relative_group", ".", "add_argument", "(", "'--learn_relative_depth'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "relative_group", ".", "add_argument", "(", "'--depth_loss_type'", ",", "type", "=", "str", ",", "default", "=", "'Piecewise'", ",", "help", "=", "'Log | Piecewise | '", ")", "\n", "\n", "mode_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'mode options'", ")", "\n", "# mode settings", "\n", "mode_group", ".", "add_argument", "(", "'--model_return_loss'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'wether return loss value from the model for balanced GPU memory usage'", ")", "\n", "mode_group", ".", "add_argument", "(", "'--model_version'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'model version'", ")", "\n", "mode_group", ".", "add_argument", "(", "'--multi_person'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'whether to make Multi-person Recovery'", ")", "\n", "mode_group", ".", "add_argument", "(", "'--new_training'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'learning centermap only in first few iterations for stable training.'", ")", "\n", "mode_group", ".", "add_argument", "(", "'--perspective_proj'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether to use perspective projection, else use orthentic projection.'", ")", "\n", "mode_group", ".", "add_argument", "(", "'--image_loading_mode'", ",", "type", "=", "str", ",", "default", "=", "'image'", ",", "help", "=", "'The Base Class (image, image_relative) used for loading dataset.'", ")", "\n", "\n", "train_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'training options'", ")", "\n", "# basic training settings", "\n", "train_group", ".", "add_argument", "(", "'--lr'", ",", "help", "=", "'lr'", ",", "default", "=", "3e-4", ",", "type", "=", "float", ")", "\n", "train_group", ".", "add_argument", "(", "'--adjust_lr_factor'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'factor for adjusting the lr'", ")", "\n", "train_group", ".", "add_argument", "(", "'--weight_decay'", ",", "help", "=", "'weight_decay'", ",", "default", "=", "1e-6", ",", "type", "=", "float", ")", "\n", "train_group", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "120", ",", "help", "=", "'training epochs'", ")", "\n", "train_group", ".", "add_argument", "(", "'--fine_tune'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'whether to run online'", ")", "\n", "train_group", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu'", ")", "\n", "train_group", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "64", ",", "help", "=", "'batch_size'", ",", "type", "=", "int", ")", "\n", "train_group", ".", "add_argument", "(", "'--input_size'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "help", "=", "'size of input image'", ")", "\n", "train_group", ".", "add_argument", "(", "'--master_batch_size'", ",", "default", "=", "-", "1", ",", "help", "=", "'batch_size'", ",", "type", "=", "int", ")", "\n", "train_group", ".", "add_argument", "(", "'--nw'", ",", "default", "=", "4", ",", "help", "=", "'number of workers'", ",", "type", "=", "int", ")", "\n", "train_group", ".", "add_argument", "(", "'--optimizer_type'", ",", "type", "=", "str", ",", "default", "=", "'Adam'", ",", "help", "=", "'choice of optimizer'", ")", "\n", "train_group", ".", "add_argument", "(", "'--fix_backbone_training_scratch'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether to fix the backbone features if we train the model from scratch.'", ")", "\n", "\n", "model_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'model settings'", ")", "\n", "# model settings", "\n", "model_group", ".", "add_argument", "(", "'--backbone'", ",", "type", "=", "str", ",", "default", "=", "'hrnetv4'", ",", "help", "=", "'backbone model: resnet50 or hrnet'", ")", "\n", "model_group", ".", "add_argument", "(", "'--model_precision'", ",", "type", "=", "str", ",", "default", "=", "'fp16'", ",", "help", "=", "'the model precision: fp16/fp32'", ")", "\n", "model_group", ".", "add_argument", "(", "'--deconv_num'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "model_group", ".", "add_argument", "(", "'--head_block_num'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of conv block in head'", ")", "\n", "model_group", ".", "add_argument", "(", "'--merge_smpl_camera_head'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "model_group", ".", "add_argument", "(", "'--use_coordmaps'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'use the coordmaps'", ")", "\n", "model_group", ".", "add_argument", "(", "'--hrnet_pretrain'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "project_dir", ",", "'trained_models/pretrain_hrnet.pkl'", ")", ")", "\n", "model_group", ".", "add_argument", "(", "'--resnet_pretrain'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "project_dir", ",", "'trained_models/pretrain_resnet.pkl'", ")", ")", "\n", "\n", "loss_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'loss options'", ")", "\n", "# loss settings", "\n", "loss_group", ".", "add_argument", "(", "'--loss_thresh'", ",", "default", "=", "1000", ",", "type", "=", "float", ",", "help", "=", "'max loss value for a single loss'", ")", "\n", "loss_group", ".", "add_argument", "(", "'--max_supervise_num'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'max person number supervised in each batch for stable GPU memory usage'", ")", "\n", "loss_group", ".", "add_argument", "(", "'--supervise_cam_params'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "loss_group", ".", "add_argument", "(", "'--match_preds_to_gts_for_supervision'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether to match preds to gts for supervision'", ")", "\n", "loss_group", ".", "add_argument", "(", "'--matching_mode'", ",", "type", "=", "str", ",", "default", "=", "'all'", ",", "help", "=", "'all | random_one | '", ")", "\n", "loss_group", ".", "add_argument", "(", "'--supervise_global_rot'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether supervise the global rotation of the estimated SMPL model'", ")", "\n", "loss_group", ".", "add_argument", "(", "'--HMloss_type'", ",", "type", "=", "str", ",", "default", "=", "'MSE'", ",", "help", "=", "'supervision for 2D pose heatmap: MSE or focal loss'", ")", "\n", "\n", "eval_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'evaluation options'", ")", "\n", "# basic evaluation settings", "\n", "eval_group", ".", "add_argument", "(", "'--eval'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether to run evaluation'", ")", "\n", "# 'agora',, 'mpiinf' ,'pw3d', 'jta','h36m','pw3d','pw3d_pc','oh','h36m' # 'mupots','oh','h36m','mpiinf_test','oh',", "\n", "eval_group", ".", "add_argument", "(", "'--eval_datasets'", ",", "type", "=", "str", ",", "default", "=", "'pw3d'", ",", "help", "=", "'whether to run evaluation'", ")", "\n", "eval_group", ".", "add_argument", "(", "'--val_batch_size'", ",", "default", "=", "64", ",", "help", "=", "'valiation batch_size'", ",", "type", "=", "int", ")", "\n", "eval_group", ".", "add_argument", "(", "'--test_interval'", ",", "default", "=", "2000", ",", "help", "=", "'interval iteration between validation'", ",", "type", "=", "int", ")", "\n", "eval_group", ".", "add_argument", "(", "'--fast_eval_iter'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'whether to run validation on a few iterations, like 200.'", ")", "\n", "eval_group", ".", "add_argument", "(", "'--top_n_error_vis'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'visulize the top n results during validation'", ")", "\n", "eval_group", ".", "add_argument", "(", "'--eval_2dpose'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "eval_group", ".", "add_argument", "(", "'--calc_pck'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether calculate PCK during evaluation'", ")", "\n", "eval_group", ".", "add_argument", "(", "'--PCK_thresh'", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "'training epochs'", ")", "\n", "eval_group", ".", "add_argument", "(", "'--calc_PVE_error'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "\n", "maps_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'Maps options'", ")", "\n", "maps_group", ".", "add_argument", "(", "'--centermap_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'the size of center map'", ")", "\n", "maps_group", ".", "add_argument", "(", "'--centermap_conf_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "help", "=", "'the threshold of the centermap confidence for the valid subject'", ")", "\n", "maps_group", ".", "add_argument", "(", "'--collision_aware_centermap'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether to use collision_aware_centermap'", ")", "\n", "maps_group", ".", "add_argument", "(", "'--collision_factor'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'whether to use collision_aware_centermap'", ")", "\n", "maps_group", ".", "add_argument", "(", "'--center_def_kp'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'center definition: keypoints or bbox'", ")", "\n", "\n", "distributed_train_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'options for distributed training'", ")", "\n", "distributed_train_group", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'local rank for distributed training'", ")", "\n", "distributed_train_group", ".", "add_argument", "(", "'--distributed_training'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'wether train model in distributed mode'", ")", "\n", "\n", "distillation_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'options for distillation'", ")", "\n", "distillation_group", ".", "add_argument", "(", "'--distillation_learning'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "distillation_group", ".", "add_argument", "(", "'--teacher_model_path'", ",", "type", "=", "str", ",", "default", "=", "'/export/home/suny/CenterMesh/trained_models/3dpw_88_57.8.pkl'", ")", "\n", "\n", "log_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'log options'", ")", "\n", "# basic log settings", "\n", "log_group", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'training epochs'", ")", "\n", "log_group", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'trained model path'", ")", "\n", "log_group", ".", "add_argument", "(", "'--log-path'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'log/'", ")", ",", "help", "=", "'Path to save log file'", ")", "\n", "\n", "hm_ae_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'learning 2D pose/associate embeddings options'", ")", "\n", "hm_ae_group", ".", "add_argument", "(", "'--learn_2dpose'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "hm_ae_group", ".", "add_argument", "(", "'--learn_AE'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "hm_ae_group", ".", "add_argument", "(", "'--learn_kp2doffset'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "\n", "augmentation_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'augmentation options'", ")", "\n", "# augmentation settings", "\n", "augmentation_group", ".", "add_argument", "(", "'--shuffle_crop_mode'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether to shuffle the data loading mode between crop / uncrop for indoor 3D pose dataset only'", ")", "\n", "augmentation_group", ".", "add_argument", "(", "'--shuffle_crop_ratio_3d'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "help", "=", "'the probability of changing the data loading mode from uncrop multi_person to crop single person'", ")", "\n", "augmentation_group", ".", "add_argument", "(", "'--shuffle_crop_ratio_2d'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'the probability of changing the data loading mode from uncrop multi_person to crop single person'", ")", "\n", "augmentation_group", ".", "add_argument", "(", "'--Synthetic_occlusion_ratio'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "help", "=", "'whether to use use Synthetic occlusion'", ")", "\n", "augmentation_group", ".", "add_argument", "(", "'--color_jittering_ratio'", ",", "default", "=", "0.2", ",", "type", "=", "float", ",", "help", "=", "'whether to use use color jittering'", ")", "\n", "augmentation_group", ".", "add_argument", "(", "'--rotate_prob'", ",", "default", "=", "0.2", ",", "type", "=", "float", ",", "help", "=", "'whether to use rotation augmentation'", ")", "\n", "\n", "dataset_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'datasets options'", ")", "\n", "#dataset setting:", "\n", "dataset_group", ".", "add_argument", "(", "'--dataset_rootdir'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'dataset/'", ")", ",", "help", "=", "'root dir of all datasets'", ")", "\n", "dataset_group", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'h36m,mpii,coco,aich,up,ochuman,lsp,movi'", ",", "help", "=", "'which datasets are used'", ")", "\n", "dataset_group", ".", "add_argument", "(", "'--voc_dir'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'dataset/VOCdevkit/VOC2012/'", ")", ",", "help", "=", "'VOC dataset path'", ")", "\n", "dataset_group", ".", "add_argument", "(", "'--max_person'", ",", "default", "=", "64", ",", "type", "=", "int", ",", "help", "=", "'max person number of each image'", ")", "\n", "dataset_group", ".", "add_argument", "(", "'--homogenize_pose_space'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether to homogenize the pose space of 3D datasets'", ")", "\n", "dataset_group", ".", "add_argument", "(", "'--use_eft'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'wether use eft annotations for training'", ")", "\n", "\n", "smpl_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'SMPL options'", ")", "\n", "smpl_group", ".", "add_argument", "(", "'--smpl_mesh_root_align'", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "smpl_group", ".", "add_argument", "(", "'--Rot_type'", ",", "type", "=", "str", ",", "default", "=", "'6D'", ",", "help", "=", "'rotation representation type: angular, 6D'", ")", "\n", "smpl_group", ".", "add_argument", "(", "'--rot_dim'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'rotation representation type: 3D angular, 6D'", ")", "\n", "smpl_group", ".", "add_argument", "(", "'--cam_dim'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'the dimention of camera param'", ")", "\n", "smpl_group", ".", "add_argument", "(", "'--beta_dim'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'the dimention of SMPL shape param, beta'", ")", "\n", "smpl_group", ".", "add_argument", "(", "'--smpl_joint_num'", ",", "type", "=", "int", ",", "default", "=", "22", ",", "help", "=", "'joint number of SMPL model we estimate'", ")", "\n", "\n", "#smpl_group.add_argument('--smpl_model_path',type = str,default = os.path.join(model_dir,'parameters'),help = 'smpl model path')", "\n", "#smpl_group.add_argument('--smpl_J_reg_h37m_path',type = str,default = os.path.join(model_dir, 'parameters', 'J_regressor_h36m.npy'),help = 'SMPL regressor for 17 joints from H36M datasets')", "\n", "#smpl_group.add_argument('--smpl_J_reg_extra_path',type = str,default = os.path.join(model_dir, 'parameters', 'J_regressor_extra.npy'),help = 'SMPL regressor for 9 extra joints from different datasets')", "\n", "\n", "smpl_group", ".", "add_argument", "(", "'--smpl_model_path'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "smpl_model_dir", ",", "'smpl_packed_info.pth'", ")", ",", "help", "=", "'smpl model path'", ")", "\n", "smpl_group", ".", "add_argument", "(", "'--smpla_model_path'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "smpl_model_dir", ",", "'SMPLA_NEUTRAL.pth'", ")", ",", "help", "=", "'smpl model path'", ")", "#SMPLA_FEMALE gets better MPJPE #smpla_packed_info.pth", "\n", "smpl_group", ".", "add_argument", "(", "'--smil_model_path'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "smpl_model_dir", ",", "'smil_packed_info.pth'", ")", ",", "help", "=", "'smpl model path'", ")", "\n", "smpl_group", ".", "add_argument", "(", "'--smpl_prior_path'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'parameters'", ",", "'gmm_08.pkl'", ")", ",", "help", "=", "'smpl model path'", ")", "\n", "\n", "smpl_group", ".", "add_argument", "(", "'--smpl_uvmap'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'parameters'", ",", "'smpl_vt_ft.npz'", ")", ",", "help", "=", "'smpl UV Map coordinates for each vertice'", ")", "\n", "smpl_group", ".", "add_argument", "(", "'--wardrobe'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'wardrobe'", ")", ",", "help", "=", "'path of smpl UV textures'", ")", "\n", "smpl_group", ".", "add_argument", "(", "'--mesh_cloth'", ",", "type", "=", "str", ",", "default", "=", "'031'", ",", "help", "=", "'pick up cloth from the wardrobe or simplely use a single color'", ")", "\n", "\n", "smpl_group", ".", "add_argument", "(", "'--nvxia_model_path'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'characters'", ",", "'nvxia'", ")", ",", "help", "=", "'path to nvxia model'", ")", "\n", "\n", "debug_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "'Debug options'", ")", "\n", "debug_group", ".", "add_argument", "(", "'--track_memory_usage'", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "\n", "parsed_args", "=", "parser", ".", "parse_args", "(", "args", "=", "input_args", ")", "\n", "parsed_args", ".", "gpu", "=", "str", "(", "parsed_args", ".", "gpu", ")", "\n", "parsed_args", ".", "adjust_lr_epoch", "=", "[", "]", "\n", "parsed_args", ".", "kernel_sizes", "=", "[", "5", "]", "\n", "config_yml_path", "=", "os", ".", "path", ".", "join", "(", "project_dir", ",", "parsed_args", ".", "configs_yml", ")", "\n", "with", "open", "(", "config_yml_path", ")", "as", "file", ":", "\n", "        ", "configs_update", "=", "yaml", ".", "full_load", "(", "file", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "configs_update", "[", "'ARGS'", "]", ".", "items", "(", ")", ":", "\n", "# make sure to update the configurations from .yml that not appears in input_args.", "\n", "        ", "appear_in_input_args", "=", "False", "\n", "for", "input_arg", "in", "input_args", ":", "\n", "            ", "if", "isinstance", "(", "input_arg", ",", "str", ")", ":", "\n", "                ", "if", "'--{}'", ".", "format", "(", "key", ")", "in", "input_arg", ":", "\n", "                    ", "appear_in_input_args", "=", "True", "\n", "", "", "", "if", "appear_in_input_args", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "            ", "exec", "(", "\"parsed_args.{} = '{}'\"", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "", "else", ":", "\n", "            ", "exec", "(", "\"parsed_args.{} = {}\"", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "\n", "", "", "if", "'loss_weight'", "in", "configs_update", ":", "\n", "        ", "for", "key", ",", "value", "in", "configs_update", "[", "'loss_weight'", "]", ".", "items", "(", ")", ":", "\n", "            ", "exec", "(", "\"parsed_args.{}_weight = {}\"", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "", "", "if", "'sample_prob'", "in", "configs_update", ":", "\n", "        ", "parsed_args", ".", "sample_prob_dict", "=", "configs_update", "[", "'sample_prob'", "]", "\n", "\n", "", "parsed_args", ".", "tab", "=", "'{}_cm{}_{}'", ".", "format", "(", "parsed_args", ".", "backbone", ",", "\n", "parsed_args", ".", "centermap_size", ",", "\n", "parsed_args", ".", "tab", ",", "\n", "parsed_args", ".", "dataset", ")", "\n", "\n", "return", "parsed_args", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args": [[282, 284], ["None"], "function", ["None"], ["", "", "def", "args", "(", ")", ":", "\n", "    ", "return", "ConfigContext", ".", "parsed_args", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.constants.joint_mapping": [[4, 10], ["numpy.array", "numpy.ones", "len"], "function", ["None"], ["def", "joint_mapping", "(", "source_format", ",", "target_format", ")", ":", "\n", "    ", "mapping", "=", "np", ".", "ones", "(", "len", "(", "target_format", ")", ",", "dtype", "=", "np", ".", "int", ")", "*", "-", "1", "\n", "for", "joint_name", "in", "target_format", ":", "\n", "        ", "if", "joint_name", "in", "source_format", ":", "\n", "            ", "mapping", "[", "target_format", "[", "joint_name", "]", "]", "=", "source_format", "[", "joint_name", "]", "\n", "", "", "return", "np", ".", "array", "(", "mapping", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.constants.get_cam3dmap_anchor": [[354, 366], ["numpy.array", "zip", "numpy.concatenate", "np.concatenate.append", "numpy.tan", "numpy.array", "numpy.radians", "numpy.arange"], "function", ["None"], ["def", "get_cam3dmap_anchor", "(", "FOV", ",", "centermap_size", ")", ":", "\n", "    ", "depth_level", "=", "np", ".", "array", "(", "[", "1", ",", "10", ",", "20", ",", "100", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "#map_coord_range_each_level = (np.array([4/64., 50/64., 6/64., 4/64.], dtype=np.float32) * args().centermap_size).astype(np.int)", "\n", "map_coord_range_each_level", "=", "(", "np", ".", "array", "(", "[", "2", "/", "64.", ",", "25", "/", "64.", ",", "3", "/", "64.", ",", "2", "/", "64.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "*", "centermap_size", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "scale_level", "=", "1", "/", "np", ".", "tan", "(", "np", ".", "radians", "(", "FOV", "/", "2.", ")", ")", "/", "depth_level", "\n", "cam3dmap_anchor", "=", "[", "]", "\n", "scale_cache", "=", "8", "\n", "for", "scale", ",", "coord_range", "in", "zip", "(", "scale_level", ",", "map_coord_range_each_level", ")", ":", "\n", "        ", "cam3dmap_anchor", ".", "append", "(", "scale_cache", "-", "np", ".", "arange", "(", "1", ",", "coord_range", "+", "1", ")", "/", "coord_range", "*", "(", "scale_cache", "-", "scale", ")", ")", "\n", "scale_cache", "=", "scale", "\n", "", "cam3dmap_anchor", "=", "np", ".", "concatenate", "(", "cam3dmap_anchor", ")", "\n", "return", "cam3dmap_anchor", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.center_utils.denormalize_center": [[7, 17], ["isinstance", "config.args", "center.long.astype", "isinstance", "center.long.long"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["def", "denormalize_center", "(", "center", ",", "size", "=", "args", "(", ")", ".", "centermap_size", ")", ":", "\n", "    ", "center", "=", "(", "center", "+", "1", ")", "/", "2", "*", "size", "\n", "\n", "center", "[", "center", "<", "1", "]", "=", "1", "\n", "center", "[", "center", ">", "size", "-", "1", "]", "=", "size", "-", "1", "\n", "if", "isinstance", "(", "center", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "center", "=", "center", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "elif", "isinstance", "(", "center", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "center", "=", "center", ".", "long", "(", ")", "\n", "", "return", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.center_utils.process_gt_center": [[18, 25], ["torch.where", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "process_gt_center", "(", "center_normed", ")", ":", "\n", "    ", "valid_mask", "=", "center_normed", "[", ":", ",", ":", ",", "0", "]", ">", "-", "1", "\n", "valid_inds", "=", "torch", ".", "where", "(", "valid_mask", ")", "\n", "valid_batch_inds", ",", "valid_person_ids", "=", "valid_inds", "[", "0", "]", ",", "valid_inds", "[", "1", "]", "\n", "center_gt", "=", "(", "(", "center_normed", "+", "1", ")", "/", "2", "*", "args", "(", ")", ".", "centermap_size", ")", ".", "long", "(", ")", "\n", "center_gt_valid", "=", "center_gt", "[", "valid_mask", "]", "\n", "return", "(", "valid_batch_inds", ",", "valid_person_ids", ",", "center_gt_valid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.center_utils.parse_gt_center3d": [[27, 34], ["torch.where", "cam_utils.convert_cam_params_to_centermap_coords", "center_utils.denormalize_center", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.convert_cam_params_to_centermap_coords", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.denormalize_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "parse_gt_center3d", "(", "cam_mask", ",", "cams", ",", "size", "=", "args", "(", ")", ".", "centermap_size", ")", ":", "\n", "    ", "batch_ids", ",", "person_ids", "=", "torch", ".", "where", "(", "cam_mask", ")", "\n", "cam_params", "=", "cams", "[", "batch_ids", ",", "person_ids", "]", "\n", "centermap_coords", "=", "convert_cam_params_to_centermap_coords", "(", "cam_params", ")", "\n", "czyxs", "=", "denormalize_center", "(", "centermap_coords", ",", "size", "=", "size", ")", "\n", "#sample_view_ids = determine_sample_view(batch_ids,czyxs)", "\n", "return", "batch_ids", ",", "person_ids", ",", "czyxs", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.OpenCVCapture.__init__": [[39, 46], ["cv2.VideoCapture", "cv2.VideoCapture", "demo_utils.OpenCVCapture.cap.get", "int", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ",", "video_file", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "        ", "if", "video_file", "is", "None", ":", "\n", "            ", "self", ".", "cap", "=", "cv2", ".", "VideoCapture", "(", "int", "(", "args", "(", ")", ".", "cam_id", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cap", "=", "cv2", ".", "VideoCapture", "(", "video_file", ")", "\n", "self", ".", "length", "=", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", "\n", "", "self", ".", "whether_to_show", "=", "show", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.OpenCVCapture.read": [[48, 58], ["demo_utils.OpenCVCapture.cap.read", "cv2.imshow", "cv2.waitKey", "numpy.flip().copy", "cv2.resize", "numpy.flip"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.flip"], ["", "def", "read", "(", "self", ",", "return_rgb", "=", "True", ")", ":", "\n", "        ", "flag", ",", "frame", "=", "self", ".", "cap", ".", "read", "(", ")", "\n", "if", "not", "flag", ":", "\n", "          ", "return", "None", "\n", "", "if", "self", ".", "whether_to_show", ":", "\n", "            ", "cv2", ".", "imshow", "(", "'webcam'", ",", "cv2", ".", "resize", "(", "frame", ",", "(", "240", ",", "320", ")", ")", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "", "if", "return_rgb", ":", "\n", "            ", "frame", "=", "np", ".", "flip", "(", "frame", ",", "-", "1", ")", ".", "copy", "(", ")", "# BGR to RGB", "\n", "", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.__init__": [[60, 64], ["os.listdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_folder", ")", ":", "\n", "        ", "self", ".", "image_folder", "=", "image_folder", "\n", "self", ".", "image_list", "=", "os", ".", "listdir", "(", "self", ".", "image_folder", ")", "\n", "self", ".", "current_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read": [[65, 71], ["cv2.imread", "numpy.flip().copy", "os.path.join", "len", "numpy.flip"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.flip"], ["", "def", "read", "(", "self", ")", ":", "\n", "        ", "frame", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "self", ".", "image_list", "[", "self", ".", "current_num", "]", ")", ")", "\n", "self", ".", "current_num", "+=", "1", "\n", "if", "self", ".", "current_num", "==", "len", "(", "self", ".", "image_list", ")", ":", "\n", "            ", "self", ".", "current_num", "=", "0", "\n", "", "return", "np", ".", "flip", "(", "frame", ",", "-", "1", ")", ".", "copy", "(", ")", "# BGR to RGB", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.__init__": [[74, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "thresh", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "thresh", "=", "thresh", "\n", "self", ".", "runtime", "=", "0", "\n", "self", ".", "frame_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start": [[79, 81], ["time.time"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.count": [[82, 88], ["demo_utils.Time_counter.start", "time.time"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start"], ["", "def", "count", "(", "self", ",", "frame_num", "=", "1", ")", ":", "\n", "        ", "time_cost", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "if", "time_cost", "<", "self", ".", "thresh", ":", "\n", "            ", "self", ".", "runtime", "+=", "time_cost", "\n", "self", ".", "frame_num", "+=", "frame_num", "\n", "", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.fps": [[89, 92], ["print", "print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "fps", "(", "self", ")", ":", "\n", "        ", "print", "(", "'average per-frame runtime:'", ",", "self", ".", "runtime", "/", "self", ".", "frame_num", ")", "\n", "print", "(", "'FPS: {}, not including visualization time. '", ".", "format", "(", "self", ".", "frame_num", "/", "self", ".", "runtime", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.reset": [[93, 96], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "runtime", "=", "0", "\n", "self", ".", "frame_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.get_video_bn": [[20, 25], ["os.path.basename", "os.path.basename.replace"], "function", ["None"], ["def", "get_video_bn", "(", "video_file_path", ")", ":", "\n", "    ", "basename", "=", "os", ".", "path", ".", "basename", "(", "video_file_path", ")", "\n", "for", "ext", "in", "constants", ".", "video_exts", ":", "\n", "        ", "basename", ".", "replace", "(", "ext", ",", "''", ")", "\n", "", "return", "basename", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.save_meshes": [[26, 35], ["numpy.unique", "enumerate", "enumerate", "numpy.where", "os.path.join().replace().replace().replace", "utils.save_obj", "[].detach().cpu().numpy().astype", "obj_name.replace", "os.path.join().replace().replace", "[].detach().cpu().numpy", "os.path.join().replace", "[].detach().cpu", "os.path.join", "[].detach", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.save_obj"], ["", "def", "save_meshes", "(", "reorganize_idx", ",", "outputs", ",", "output_dir", ",", "smpl_faces", ")", ":", "\n", "    ", "vids_org", "=", "np", ".", "unique", "(", "reorganize_idx", ")", "\n", "for", "idx", ",", "vid", "in", "enumerate", "(", "vids_org", ")", ":", "\n", "        ", "verts_vids", "=", "np", ".", "where", "(", "reorganize_idx", "==", "vid", ")", "[", "0", "]", "\n", "img_path", "=", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", "[", "verts_vids", "[", "0", "]", "]", "\n", "obj_name", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'{}'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", ")", ".", "replace", "(", "'.mp4'", ",", "''", ")", ".", "replace", "(", "'.jpg'", ",", "''", ")", ".", "replace", "(", "'.png'", ",", "''", ")", "+", "'.obj'", "\n", "for", "subject_idx", ",", "batch_idx", "in", "enumerate", "(", "verts_vids", ")", ":", "\n", "            ", "save_obj", "(", "outputs", "[", "'verts'", "]", "[", "batch_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", ",", "smpl_faces", ",", "obj_name", ".", "replace", "(", "'.obj'", ",", "'_{}.obj'", ".", "format", "(", "subject_idx", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.video2frame": [[97, 107], ["demo_utils.OpenCVCapture", "os.makedirs", "range", "int", "demo_utils.OpenCVCapture.read", "os.path.join", "cv2.imwrite", "frame_list.append"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read"], ["", "", "def", "video2frame", "(", "video_name", ",", "frame_save_dir", "=", "None", ")", ":", "\n", "    ", "cap", "=", "OpenCVCapture", "(", "video_name", ")", "\n", "os", ".", "makedirs", "(", "frame_save_dir", ",", "exist_ok", "=", "True", ")", "\n", "frame_list", "=", "[", "]", "\n", "for", "frame_id", "in", "range", "(", "int", "(", "cap", ".", "length", ")", ")", ":", "\n", "        ", "frame", "=", "cap", ".", "read", "(", "return_rgb", "=", "False", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "frame_save_dir", ",", "'{:06d}.jpg'", ".", "format", "(", "frame_id", ")", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "frame", ")", "\n", "frame_list", ".", "append", "(", "save_path", ")", "\n", "", "return", "frame_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.frames2video": [[108, 114], ["imageio.get_writer", "imageio.get_writer.close", "imageio.imread", "imageio.get_writer.append_data"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close"], ["", "def", "frames2video", "(", "images_path", ",", "video_name", ",", "fps", "=", "30", ")", ":", "\n", "    ", "writer", "=", "imageio", ".", "get_writer", "(", "video_name", ",", "format", "=", "'mp4'", ",", "mode", "=", "'I'", ",", "fps", "=", "fps", ")", "\n", "for", "path", "in", "images_path", ":", "\n", "        ", "image", "=", "imageio", ".", "imread", "(", "path", ")", "\n", "writer", ".", "append_data", "(", "image", ")", "\n", "", "writer", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.RandomErasing.__init__": [[218, 223], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sl", "=", "0.01", ",", "sh", "=", "0.03", ",", "r1", "=", "0.4", ",", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.RandomErasing.__call__": [[224, 243], ["range", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "int", "int", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "round", "round", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img_h", ",", "img_w", ",", "img_c", "=", "img", ".", "shape", "\n", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img_h", "*", "img_w", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img_w", "and", "h", "<", "img_h", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img_h", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img_w", "-", "w", ")", "\n", "img", "[", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "0", "\n", "\n", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.Synthetic_occlusion.__init__": [[348, 353], ["print", "augments.load_occluders", "print", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.load_occluders", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "print", "(", "'Loading occluders from Pascal VOC dataset...'", ")", "\n", "# path = 'something/something/VOCtrainval_11-May-2012/VOCdevkit/VOC2012'", "\n", "self", ".", "occluders", "=", "load_occluders", "(", "pascal_voc_root_path", "=", "path", ")", "\n", "print", "(", "'Found {} suitable objects'", ".", "format", "(", "len", "(", "self", ".", "occluders", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.Synthetic_occlusion.__call__": [[354, 357], ["augments.occlude_with_objects"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.occlude_with_objects"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "occluded_img", "=", "occlude_with_objects", "(", "img", ",", "self", ".", "occluders", ")", "\n", "return", "occluded_img", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.convert_bbox2scale": [[28, 33], ["max", "min"], "function", ["None"], ["def", "convert_bbox2scale", "(", "ltrb", ",", "input_size", ")", ":", "\n", "    ", "h", ",", "w", "=", "input_size", "\n", "l", ",", "t", ",", "r", ",", "b", "=", "ltrb", "\n", "scale", "=", "max", "(", "r", "-", "l", ",", "b", "-", "t", ")", "/", "min", "(", "h", ",", "w", ")", "\n", "return", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.calc_aabb": [[34, 39], ["numpy.array", "numpy.array", "numpy.array", "numpy.min", "numpy.min", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "calc_aabb", "(", "ptSets", ")", ":", "\n", "    ", "ptLeftTop", "=", "np", ".", "array", "(", "[", "np", ".", "min", "(", "ptSets", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "ptSets", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "ptRightBottom", "=", "np", ".", "array", "(", "[", "np", ".", "max", "(", "ptSets", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "ptSets", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "\n", "return", "np", ".", "array", "(", "[", "ptLeftTop", ",", "ptRightBottom", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.flip_kps": [[40, 50], ["None"], "function", ["None"], ["", "def", "flip_kps", "(", "kps", ",", "width", "=", "None", ",", "is_pose", "=", "True", ",", "flipped_parts", "=", "constants", ".", "All54_flip", ")", ":", "\n", "    ", "if", "is_pose", ":", "\n", "        ", "kps", "=", "kps", "[", "flipped_parts", "]", "\n", "", "invalid_mask", "=", "kps", "[", ":", ",", "-", "1", "]", "==", "-", "2", "\n", "if", "width", "is", "not", "None", ":", "\n", "        ", "kps", "[", ":", ",", "0", "]", "=", "width", "-", "kps", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "kps", "[", ":", ",", "0", "]", "=", "-", "kps", "[", ":", ",", "0", "]", "\n", "", "kps", "[", "invalid_mask", "]", "=", "-", "2", "\n", "return", "kps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.rot_imgplane": [[51, 64], ["numpy.eye", "numpy.einsum", "numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "rot_imgplane", "(", "kp3d", ",", "angle", ")", ":", "\n", "    ", "if", "angle", "==", "0", ":", "\n", "        ", "return", "kp3d", "\n", "", "invalid_mask", "=", "kp3d", "[", ":", ",", "-", "1", "]", "==", "-", "2", "\n", "# in-plane rotation", "\n", "rot_mat", "=", "np", ".", "eye", "(", "3", ")", "\n", "rot_rad", "=", "angle", "*", "np", ".", "pi", "/", "180", "\n", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "rot_mat", "[", "0", ",", ":", "2", "]", "=", "[", "cs", ",", "-", "sn", "]", "\n", "rot_mat", "[", "1", ",", ":", "2", "]", "=", "[", "sn", ",", "cs", "]", "\n", "kp3d", "=", "np", ".", "einsum", "(", "'ij,kj->ki'", ",", "rot_mat", ",", "kp3d", ")", "\n", "kp3d", "[", "invalid_mask", "]", "=", "-", "2", "\n", "return", "kp3d", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.rot_aa": [[65, 77], ["numpy.array", "cv2.Rodrigues", "cv2.Rodrigues", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.deg2rad", "numpy.sin", "numpy.deg2rad", "numpy.deg2rad", "numpy.deg2rad"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.Rodrigues", "home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.Rodrigues"], ["", "def", "rot_aa", "(", "aa", ",", "rot", ")", ":", "\n", "    ", "\"\"\"Rotate axis angle parameters.\"\"\"", "\n", "# pose parameters", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "np", ".", "deg2rad", "(", "rot", ")", ")", ",", "-", "np", ".", "sin", "(", "np", ".", "deg2rad", "(", "rot", ")", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "np", ".", "deg2rad", "(", "rot", ")", ")", ",", "np", ".", "cos", "(", "np", ".", "deg2rad", "(", "rot", ")", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "# find the rotation of the body in camera frame", "\n", "per_rdg", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "aa", ")", "\n", "# apply the global rotation to the global orientation", "\n", "resrot", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "np", ".", "dot", "(", "R", ",", "per_rdg", ")", ")", "\n", "aa", "=", "(", "resrot", ".", "T", ")", "[", "0", "]", "\n", "return", "aa", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.flip_pose": [[78, 86], ["None"], "function", ["None"], ["", "def", "flip_pose", "(", "pose", ")", ":", "\n", "#Flip pose.The flipping is based on SMPL parameters.", "\n", "    ", "flipped_parts", "=", "constants", ".", "SMPL_POSE_FLIP_PERM", "\n", "pose", "=", "pose", "[", "flipped_parts", "]", "\n", "# we also negate the second and the third dimension of the axis-angle", "\n", "pose", "[", "1", ":", ":", "3", "]", "=", "-", "pose", "[", "1", ":", ":", "3", "]", "\n", "pose", "[", "2", ":", ":", "3", "]", "=", "-", "pose", "[", "2", ":", ":", "3", "]", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.pose_processing": [[87, 98], ["augments.rot_aa", "augments.flip_pose"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.rot_aa", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.flip_pose"], ["", "def", "pose_processing", "(", "pose", ",", "rot", ",", "flip", ",", "valid_grot", "=", "False", ",", "valid_pose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Process SMPL theta parameters  and apply all augmentation transforms.\"\"\"", "\n", "\n", "if", "valid_grot", ":", "\n", "# rotation or the pose parameters", "\n", "        ", "pose", "[", ":", "3", "]", "=", "rot_aa", "(", "pose", "[", ":", "3", "]", ",", "rot", ")", "\n", "# flip the pose parameters", "\n", "", "if", "flip", "and", "valid_pose", ":", "\n", "        ", "pose", "=", "flip_pose", "(", "pose", ")", "\n", "\n", "", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.image_crop_pad": [[100, 146], ["imgaug.Sequential", "numpy.array", "imgaug.Sequential", "iaa.Sequential.", "print", "augments.image_crop_pad.calc_crop_trbl_from_bbox"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "image_crop_pad", "(", "image", ",", "kp2ds", "=", "None", ",", "crop_trbl", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", ",", "bbox", "=", "None", ",", "pad_ratio", "=", "1.", ",", "pad_trbl", "=", "None", ",", "draw_kp_on_image", "=", "False", ")", ":", "\n", "    ", "'''\n    Perform augmentation of image (and kp2ds) via x-y translation, rotation, and scale variation.\n    Input args:\n        image : np.array, size H x W x 3\n        kp2ds : np.array, size N x K x 2/3, the K 2D joints of N people\n        crop_trbl : tuple, size 4, represent the cropped size on top, right, bottom, left side, Each entry may be a single int.\n        bbox : np.array/list/tuple, size 4, represent the left, top, right, bottom, we can derive the crop_trbl from the bbox\n        pad_ratio : float, ratio = width / height\n        pad_trbl: np.array/list/tuple, size 4, represent the pad size on top, right, bottom, left side, Each entry may be a single int.\n    return:\n        augmented image: np.array, size H x W x 3\n        augmented kp2ds if given, in the same size as input kp2ds\n    '''", "\n", "if", "bbox", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "bbox", ")", "==", "4", ",", "print", "(", "'bbox input of image_crop_pad is supposed to be in length 4!, while {} is given'", ".", "format", "(", "bbox", ")", ")", "\n", "def", "calc_crop_trbl_from_bbox", "(", "bbox", ",", "image_shape", ")", ":", "\n", "            ", "l", ",", "t", ",", "r", ",", "b", "=", "bbox", "\n", "h", ",", "w", "=", "image_shape", "[", ":", "2", "]", "\n", "return", "(", "int", "(", "max", "(", "0", ",", "t", ")", ")", ",", "int", "(", "max", "(", "0", ",", "w", "-", "r", ")", ")", ",", "int", "(", "max", "(", "0", ",", "h", "-", "b", ")", ")", ",", "int", "(", "max", "(", "0", ",", "l", ")", ")", ")", "\n", "", "crop_trbl", "=", "calc_crop_trbl_from_bbox", "(", "bbox", ",", "image", ".", "shape", ")", "\n", "", "crop_func", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Crop", "(", "px", "=", "crop_trbl", ",", "keep_size", "=", "False", ")", "]", ")", "\n", "image_aug", "=", "np", ".", "array", "(", "crop_func", "(", "image", "=", "image", ")", ")", "\n", "if", "pad_trbl", "is", "None", ":", "\n", "        ", "pad_trbl", "=", "compute_paddings_to_reach_aspect_ratio", "(", "image_aug", ".", "shape", ",", "pad_ratio", ")", "\n", "", "pad_func", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Pad", "(", "px", "=", "pad_trbl", ",", "keep_size", "=", "False", ")", "]", ")", "\n", "image_aug", "=", "pad_func", "(", "image", "=", "image_aug", ")", "\n", "\n", "kp2ds_aug", "=", "None", "\n", "if", "kp2ds", "is", "not", "None", ":", "\n", "# org_shape = kp2ds.shape", "\n", "# kp2ds_ia = convert2keypointsonimage(kp2ds.reshape(-1, org_shape[-1]), image.shape)", "\n", "# kp2ds_aug = pad_func(keypoints=crop_func(keypoints=kp2ds_ia)).to_xy_array().reshape(org_shape)", "\n", "        ", "leftTop", "=", "np", ".", "array", "(", "[", "[", "crop_trbl", "[", "3", "]", "-", "pad_trbl", "[", "3", "]", ",", "crop_trbl", "[", "0", "]", "-", "pad_trbl", "[", "0", "]", "]", "]", ")", "\n", "leftTop3", "=", "np", ".", "array", "(", "[", "[", "crop_trbl", "[", "3", "]", "-", "pad_trbl", "[", "3", "]", ",", "crop_trbl", "[", "0", "]", "-", "pad_trbl", "[", "0", "]", ",", "0", "]", "]", ")", "\n", "invalid_mask", "=", "[", "kp2d", "<=", "0", "for", "kp2d", "in", "kp2ds", "]", "\n", "kp2ds_aug", "=", "[", "kp2d", "-", "leftTop", "if", "kp2d", ".", "shape", "[", "-", "1", "]", "==", "2", "else", "kp2d", "-", "leftTop3", "for", "kp2d", "in", "kp2ds", "]", "\n", "for", "ind", ",", "iv_mask", "in", "enumerate", "(", "invalid_mask", ")", ":", "\n", "            ", "kp2ds_aug", "[", "ind", "]", "[", "iv_mask", "]", "=", "-", "2.", "\n", "# if draw_kp_on_image:", "\n", "#     for inds, kp2d in enumerate(kp2ds):", "\n", "#         kps = convert2keypointsonimage(kp2d[:,:2], image.shape)", "\n", "#         image = kps.draw_on_image(image, size=7)", "\n", "#         kps_aug = convert2keypointsonimage(kp2ds_aug[inds,:,:2], image_aug.shape)", "\n", "#         image_aug = kps_aug.draw_on_image(image_aug, size=7)", "\n", "", "", "return", "image_aug", ",", "kp2ds_aug", ",", "np", ".", "array", "(", "[", "*", "image_aug", ".", "shape", "[", ":", "2", "]", ",", "*", "crop_trbl", ",", "*", "pad_trbl", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.image_pad_white_bg": [[147, 153], ["imgaug.Sequential", "iaa.Sequential.", "imgaug.augmenters.compute_paddings_to_reach_aspect_ratio", "numpy.array", "imgaug.Pad"], "function", ["None"], ["", "def", "image_pad_white_bg", "(", "image", ",", "pad_trbl", "=", "None", ",", "pad_ratio", "=", "1.", ",", "pad_cval", "=", "255", ")", ":", "\n", "    ", "if", "pad_trbl", "is", "None", ":", "\n", "        ", "pad_trbl", "=", "compute_paddings_to_reach_aspect_ratio", "(", "image", ".", "shape", ",", "pad_ratio", ")", "\n", "", "pad_func", "=", "iaa", ".", "Sequential", "(", "[", "iaa", ".", "Pad", "(", "px", "=", "pad_trbl", ",", "keep_size", "=", "False", ",", "pad_mode", "=", "'constant'", ",", "pad_cval", "=", "pad_cval", ")", "]", ")", "\n", "image_aug", "=", "pad_func", "(", "image", "=", "image", ")", "\n", "return", "image_aug", ",", "np", ".", "array", "(", "[", "*", "image_aug", ".", "shape", "[", ":", "2", "]", ",", "*", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "*", "pad_trbl", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.process_image": [[154, 172], ["augments.image_pad_white_bg", "augments.image_crop_pad", "augments.img_kp_rotate", "numpy.fliplr", "augments.flip_kps", "zip"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.image_pad_white_bg", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.image_crop_pad", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.img_kp_rotate", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.flip_kps"], ["", "def", "process_image", "(", "originImage", ",", "full_kp2ds", "=", "None", ",", "augments", "=", "None", ",", "is_pose2d", "=", "[", "True", "]", ",", "random_crop", "=", "False", ")", ":", "\n", "    ", "orgImage_white_bg", ",", "pad_trbl", "=", "image_pad_white_bg", "(", "originImage", ")", "\n", "if", "full_kp2ds", "is", "None", "and", "augments", "is", "None", ":", "\n", "        ", "return", "orgImage_white_bg", ",", "pad_trbl", "\n", "\n", "", "crop_bbox", "=", "None", "\n", "if", "augments", "is", "not", "None", ":", "\n", "        ", "rot", ",", "flip", ",", "crop_bbox", ",", "img_scale", "=", "augments", "\n", "\n", "if", "rot", "!=", "0", ":", "\n", "            ", "originImage", ",", "full_kp2ds", "=", "img_kp_rotate", "(", "originImage", ",", "full_kp2ds", ",", "rot", ")", "\n", "\n", "", "if", "flip", ":", "\n", "            ", "originImage", "=", "np", ".", "fliplr", "(", "originImage", ")", "\n", "full_kp2ds", "=", "[", "flip_kps", "(", "kps_i", ",", "width", "=", "originImage", ".", "shape", "[", "1", "]", ",", "is_pose", "=", "is_2d_pose", ")", "for", "kps_i", ",", "is_2d_pose", "in", "zip", "(", "full_kp2ds", ",", "is_pose2d", ")", "]", "\n", "\n", "", "", "image_aug", ",", "kp2ds_aug", ",", "offsets", "=", "image_crop_pad", "(", "originImage", ",", "kp2ds", "=", "full_kp2ds", ",", "bbox", "=", "crop_bbox", ",", "pad_ratio", "=", "1.", ")", "\n", "return", "image_aug", ",", "orgImage_white_bg", ",", "kp2ds_aug", ",", "offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.get_image_cut_box": [[173, 206], ["augments.get_image_cut_box._expand_crop_box"], "function", ["None"], ["", "def", "get_image_cut_box", "(", "leftTop", ",", "rightBottom", ",", "ExpandsRatio", ",", "Center", "=", "None", ",", "force_square", "=", "False", ")", ":", "\n", "    ", "ExpandsRatio", "=", "[", "ExpandsRatio", ",", "ExpandsRatio", ",", "ExpandsRatio", ",", "ExpandsRatio", "]", "\n", "\n", "def", "_expand_crop_box", "(", "lt", ",", "rb", ",", "scale", ")", ":", "\n", "        ", "center", "=", "(", "lt", "+", "rb", ")", "/", "2.0", "\n", "xl", ",", "xr", ",", "yt", ",", "yb", "=", "lt", "[", "0", "]", "-", "center", "[", "0", "]", ",", "rb", "[", "0", "]", "-", "center", "[", "0", "]", ",", "lt", "[", "1", "]", "-", "center", "[", "1", "]", ",", "rb", "[", "1", "]", "-", "center", "[", "1", "]", "\n", "\n", "xl", ",", "xr", ",", "yt", ",", "yb", "=", "xl", "*", "scale", "[", "0", "]", ",", "xr", "*", "scale", "[", "1", "]", ",", "yt", "*", "scale", "[", "2", "]", ",", "yb", "*", "scale", "[", "3", "]", "\n", "#expand it", "\n", "lt", ",", "rb", "=", "np", ".", "array", "(", "[", "center", "[", "0", "]", "+", "xl", ",", "center", "[", "1", "]", "+", "yt", "]", ")", ",", "np", ".", "array", "(", "[", "center", "[", "0", "]", "+", "xr", ",", "center", "[", "1", "]", "+", "yb", "]", ")", "\n", "lb", ",", "rt", "=", "np", ".", "array", "(", "[", "center", "[", "0", "]", "+", "xl", ",", "center", "[", "1", "]", "+", "yb", "]", ")", ",", "np", ".", "array", "(", "[", "center", "[", "0", "]", "+", "xr", ",", "center", "[", "1", "]", "+", "yt", "]", ")", "\n", "center", "=", "(", "lt", "+", "rb", ")", "/", "2", "\n", "return", "center", ",", "lt", ",", "rt", ",", "rb", ",", "lb", "\n", "\n", "", "if", "Center", "==", "None", ":", "\n", "        ", "Center", "=", "(", "leftTop", "+", "rightBottom", ")", "//", "2", "\n", "\n", "", "Center", ",", "leftTop", ",", "rightTop", ",", "rightBottom", ",", "leftBottom", "=", "_expand_crop_box", "(", "leftTop", ",", "rightBottom", ",", "ExpandsRatio", ")", "\n", "\n", "offset", "=", "(", "rightBottom", "-", "leftTop", ")", "//", "2", "\n", "\n", "cx", "=", "offset", "[", "0", "]", "\n", "cy", "=", "offset", "[", "1", "]", "\n", "\n", "if", "force_square", ":", "\n", "        ", "r", "=", "max", "(", "cx", ",", "cy", ")", "\n", "cx", "=", "r", "\n", "cy", "=", "r", "\n", "\n", "", "x", "=", "int", "(", "Center", "[", "0", "]", ")", "\n", "y", "=", "int", "(", "Center", "[", "1", "]", ")", "\n", "\n", "return", "[", "x", "-", "cx", ",", "y", "-", "cy", "]", ",", "[", "x", "+", "cx", ",", "y", "+", "cy", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.random_erase": [[246, 248], ["RE"], "function", ["None"], ["def", "random_erase", "(", "image", ")", ":", "\n", "    ", "return", "RE", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.RGB_mix": [[249, 255], ["numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "RGB_mix", "(", "image", ",", "pn", ")", ":", "\n", "# in the rgb image we add pixel noise in a channel-wise manner", "\n", "    ", "image", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "minimum", "(", "255.0", ",", "np", ".", "maximum", "(", "0.0", ",", "image", "[", ":", ",", ":", ",", "0", "]", "*", "pn", "[", "0", "]", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "minimum", "(", "255.0", ",", "np", ".", "maximum", "(", "0.0", ",", "image", "[", ":", ",", ":", ",", "1", "]", "*", "pn", "[", "1", "]", ")", ")", "\n", "image", "[", ":", ",", ":", ",", "2", "]", "=", "np", ".", "minimum", "(", "255.0", ",", "np", ".", "maximum", "(", "0.0", ",", "image", "[", ":", ",", ":", ",", "2", "]", "*", "pn", "[", "2", "]", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.convert2keypointsonimage": [[256, 259], ["imgaug.augmentables.KeypointsOnImage", "imgaug.augmentables.Keypoint"], "function", ["None"], ["", "def", "convert2keypointsonimage", "(", "kp2d", ",", "image_shape", ")", ":", "\n", "    ", "kps", "=", "KeypointsOnImage", "(", "[", "Keypoint", "(", "x", "=", "x", ",", "y", "=", "y", ")", "for", "x", ",", "y", "in", "kp2d", "]", ",", "shape", "=", "image_shape", ")", "\n", "return", "kps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.img_kp_rotate": [[260, 292], ["imgaug.Sequential", "numpy.array", "imgaug.Affine", "iaa.Sequential.", "enumerate", "augments.convert2keypointsonimage", "iaa.Sequential.", "aug_seq.to_xy_array", "kp2ds_aug.append"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.convert2keypointsonimage"], ["", "def", "img_kp_rotate", "(", "image", ",", "kp2ds", "=", "None", ",", "rotate", "=", "0", ")", ":", "\n", "    ", "'''\n    Perform augmentation of image (and kp2ds) via rotation.\n    Input args:\n        image : np.array, size H x W x 3\n        kp2ds : np.array, size N x K x 2/3, the K 2D joints of N people\n        rotate : int, radians angle of rotation on image plane, such as 30 degree\n    return:\n        augmented image: np.array, size H x W x 3\n        augmented kp2ds if given, in the same size as input kp2ds\n    '''", "\n", "aug_list", "=", "[", "]", "\n", "if", "rotate", "!=", "0", ":", "\n", "        ", "aug_list", "+=", "[", "iaa", ".", "Affine", "(", "rotate", "=", "rotate", ")", "]", "\n", "aug_seq", "=", "iaa", ".", "Sequential", "(", "aug_list", ")", "\n", "image_aug", "=", "np", ".", "array", "(", "aug_seq", "(", "image", "=", "image", ")", ")", "\n", "if", "kp2ds", "is", "not", "None", ":", "\n", "            ", "kp2ds_aug", "=", "[", "]", "\n", "for", "idx", ",", "kp2d", "in", "enumerate", "(", "kp2ds", ")", ":", "\n", "                ", "kps", "=", "convert2keypointsonimage", "(", "kp2d", "[", ":", ",", ":", "2", "]", ",", "image", ".", "shape", ")", "\n", "#image = kps.draw_on_image(image, size=7)", "\n", "kps_aug", "=", "aug_seq", "(", "keypoints", "=", "kps", ")", "\n", "#image_aug = kps_aug.draw_on_image(image_aug, size=7)", "\n", "kp2d", "[", ":", ",", ":", "2", "]", "=", "kps_aug", ".", "to_xy_array", "(", ")", "\n", "kp2ds_aug", ".", "append", "(", "kp2d", ")", "\n", "", "", "else", ":", "\n", "            ", "kp2ds_aug", "=", "None", "\n", "\n", "", "", "if", "kp2ds", "is", "not", "None", ":", "\n", "        ", "return", "image_aug", ",", "kp2ds_aug", "\n", "", "else", ":", "\n", "        ", "return", "image_aug", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.img_kp_trans_rotate_scale": [[293, 329], ["imgaug.Sequential", "numpy.array", "iaa.Sequential.", "enumerate", "imgaug.TranslateX", "imgaug.TranslateY", "imgaug.Affine", "imgaug.Affine", "augments.convert2keypointsonimage", "convert2keypointsonimage.draw_on_image", "iaa.Sequential.", "aug_seq.draw_on_image", "aug_seq.to_xy_array", "kp2ds_aug.append"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.convert2keypointsonimage"], ["", "", "def", "img_kp_trans_rotate_scale", "(", "image", ",", "kp2ds", "=", "None", ",", "rotate", "=", "0", ",", "trans", "=", "None", ",", "scale", "=", "None", ")", ":", "\n", "    ", "'''\n    Perform augmentation of image (and kp2ds) via x-y translation, rotation, and scale variation.\n    Input args:\n        image : np.array, size H x W x 3\n        kp2ds : np.array, size N x K x 2/3, the K 2D joints of N people\n        rotate : int, radians angle of rotation on image plane, such as 30 degree\n        trans : np.array/list/tuple, (tx, ty), translation on the image plane along x, y axis\n        scale : np.array/list/tuple, (sx, sy), scale variation on the image plane along x, y axis\n    return:\n        augmented image: np.array, size H x W x 3\n        augmented kp2ds if given, in the same size as input kp2ds\n    '''", "\n", "aug_list", "=", "[", "]", "\n", "if", "trans", "is", "not", "None", ":", "\n", "        ", "tx", ",", "ty", "=", "trans", "\n", "aug_list", "+=", "[", "iaa", ".", "TranslateX", "(", "px", "=", "tx", ")", ",", "iaa", ".", "TranslateY", "(", "px", "=", "ty", ")", "]", "\n", "", "if", "rotate", "!=", "0", ":", "\n", "        ", "aug_list", "+=", "[", "iaa", ".", "Affine", "(", "rotate", "=", "rotate", ")", "]", "\n", "", "if", "scale", "is", "not", "None", ":", "\n", "        ", "aug_list", "+=", "[", "iaa", ".", "Affine", "(", "scale", "=", "scale", ")", "]", "\n", "\n", "", "aug_seq", "=", "iaa", ".", "Sequential", "(", "aug_list", ")", "\n", "image_aug", "=", "np", ".", "array", "(", "aug_seq", "(", "image", "=", "image", ")", ")", "\n", "if", "kp2ds", "is", "not", "None", ":", "\n", "        ", "kp2ds_aug", "=", "[", "]", "\n", "for", "idx", ",", "kp2d", "in", "enumerate", "(", "kp2ds", ")", ":", "\n", "            ", "kps", "=", "convert2keypointsonimage", "(", "kp2d", "[", ":", ",", ":", "2", "]", ",", "image", ".", "shape", ")", "\n", "image", "=", "kps", ".", "draw_on_image", "(", "image", ",", "size", "=", "7", ")", "\n", "kps_aug", "=", "aug_seq", "(", "keypoints", "=", "kps", ")", "\n", "image_aug", "=", "kps_aug", ".", "draw_on_image", "(", "image_aug", ",", "size", "=", "7", ")", "\n", "kp2d", "[", ":", ",", ":", "2", "]", "=", "kps_aug", ".", "to_xy_array", "(", ")", "\n", "kp2ds_aug", ".", "append", "(", "kp2d", ")", "\n", "", "return", "image_aug", ",", "kp2ds_aug", "\n", "", "else", ":", "\n", "        ", "return", "image_aug", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.augment_blur": [[330, 342], ["numpy.random.randint", "cv2.blur", "cv2.GaussianBlur", "cv2.medianBlur", "numpy.random.randint", "cv2.bilateralFilter"], "function", ["None"], ["", "", "def", "augment_blur", "(", "image", ")", ":", "\n", "    ", "choise", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "if", "choise", "==", "0", ":", "\n", "        ", "image", "=", "cv2", ".", "blur", "(", "image", ",", "(", "3", ",", "3", ")", ")", "\n", "", "elif", "choise", "==", "1", ":", "\n", "        ", "image", "=", "cv2", ".", "GaussianBlur", "(", "image", ",", "(", "3", ",", "3", ")", ",", "0", ")", "\n", "", "elif", "choise", "==", "2", ":", "\n", "        ", "image", "=", "cv2", ".", "medianBlur", "(", "image", ",", "3", ")", "\n", "", "elif", "choise", "==", "3", ":", "\n", "        ", "sigma", "=", "np", ".", "random", ".", "randint", "(", "20", ",", "30", ")", "\n", "image", "=", "cv2", ".", "bilateralFilter", "(", "image", ",", "3", ",", "sigma", ",", "sigma", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.load_occluders": [[359, 410], ["cv2.getStructuringElement", "augments.list_filepaths", "os.path.join", "os.path.join", "xml.etree.ElementTree.parse().getroot", "enumerate", "im_filename.replace", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.asarray", "numpy.asarray", "xml.etree.ElementTree.parse().getroot.findall", "xml.etree.ElementTree.parse().getroot.find", "PIL.Image.open", "PIL.Image.open", "cv2.erode", "numpy.concatenate", "augments.resize_by_factor", "occluders.append", "xml.etree.ElementTree.parse", "xml.etree.ElementTree.parse().getroot.find", "obj.find", "boxes.append", "cv2.countNonZero", "obj.find", "obj.find", "obj.find", "int", "obj.find.find"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.list_filepaths", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.resize_by_factor", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.parse"], ["", "", "def", "load_occluders", "(", "pascal_voc_root_path", ")", ":", "\n", "    ", "occluders", "=", "[", "]", "\n", "structuring_element", "=", "cv2", ".", "getStructuringElement", "(", "cv2", ".", "MORPH_ELLIPSE", ",", "(", "8", ",", "8", ")", ")", "\n", "\n", "annotation_paths", "=", "list_filepaths", "(", "os", ".", "path", ".", "join", "(", "pascal_voc_root_path", ",", "'Annotations'", ")", ")", "\n", "for", "annotation_path", "in", "annotation_paths", ":", "\n", "        ", "xml_root", "=", "xml", ".", "etree", ".", "ElementTree", ".", "parse", "(", "annotation_path", ")", ".", "getroot", "(", ")", "\n", "is_segmented", "=", "(", "xml_root", ".", "find", "(", "'segmented'", ")", ".", "text", "!=", "'0'", ")", "\n", "\n", "if", "not", "is_segmented", ":", "\n", "            ", "continue", "\n", "\n", "", "boxes", "=", "[", "]", "\n", "for", "i_obj", ",", "obj", "in", "enumerate", "(", "xml_root", ".", "findall", "(", "'object'", ")", ")", ":", "\n", "            ", "is_person", "=", "(", "obj", ".", "find", "(", "'name'", ")", ".", "text", "==", "'person'", ")", "\n", "is_difficult", "=", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", "!=", "'0'", ")", "\n", "is_truncated", "=", "(", "obj", ".", "find", "(", "'truncated'", ")", ".", "text", "!=", "'0'", ")", "\n", "if", "not", "is_person", "and", "not", "is_difficult", "and", "not", "is_truncated", ":", "\n", "                ", "bndbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "box", "=", "[", "int", "(", "bndbox", ".", "find", "(", "s", ")", ".", "text", ")", "for", "s", "in", "[", "'xmin'", ",", "'ymin'", ",", "'xmax'", ",", "'ymax'", "]", "]", "\n", "boxes", ".", "append", "(", "(", "i_obj", ",", "box", ")", ")", "\n", "\n", "", "", "if", "not", "boxes", ":", "\n", "            ", "continue", "\n", "\n", "", "im_filename", "=", "xml_root", ".", "find", "(", "'filename'", ")", ".", "text", "\n", "seg_filename", "=", "im_filename", ".", "replace", "(", "'jpg'", ",", "'png'", ")", "\n", "\n", "im_path", "=", "os", ".", "path", ".", "join", "(", "pascal_voc_root_path", ",", "'JPEGImages'", ",", "im_filename", ")", "\n", "seg_path", "=", "os", ".", "path", ".", "join", "(", "pascal_voc_root_path", ",", "'SegmentationObject'", ",", "seg_filename", ")", "\n", "\n", "im", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "im_path", ")", ")", "\n", "labels", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "seg_path", ")", ")", "\n", "\n", "for", "i_obj", ",", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", "in", "boxes", ":", "\n", "            ", "object_mask", "=", "(", "labels", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "==", "i_obj", "+", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "object_image", "=", "im", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "if", "cv2", ".", "countNonZero", "(", "object_mask", ")", "<", "500", ":", "\n", "# Ignore small objects", "\n", "                ", "continue", "\n", "\n", "# Reduce the opacity of the mask along the border for smoother blending", "\n", "", "eroded", "=", "cv2", ".", "erode", "(", "object_mask", ",", "structuring_element", ")", "\n", "object_mask", "[", "eroded", "<", "object_mask", "]", "=", "192", "\n", "object_with_mask", "=", "np", ".", "concatenate", "(", "[", "object_image", ",", "object_mask", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Downscale for efficiency", "\n", "object_with_mask", "=", "resize_by_factor", "(", "object_with_mask", ",", "0.5", ")", "\n", "occluders", ".", "append", "(", "object_with_mask", ")", "\n", "\n", "", "", "return", "occluders", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.occlude_with_objects": [[412, 431], ["im.copy", "numpy.asarray", "numpy.random.randint", "range", "min", "random.choice", "random.choice", "random.choice", "numpy.random.uniform", "augments.resize_by_factor", "numpy.random.uniform", "augments.paste_over"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.resize_by_factor", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.paste_over"], ["", "def", "occlude_with_objects", "(", "im", ",", "occluders", ")", ":", "\n", "    ", "\"\"\"Returns an augmented version of `im`, containing some occluders from the Pascal VOC dataset.\"\"\"", "\n", "\n", "result", "=", "im", ".", "copy", "(", ")", "\n", "width_height", "=", "np", ".", "asarray", "(", "[", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", "]", ")", "\n", "im_scale_factor", "=", "min", "(", "width_height", ")", "/", "256", "\n", "count", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "8", ")", "\n", "\n", "for", "_", "in", "range", "(", "count", ")", ":", "\n", "        ", "occluder", "=", "random", ".", "choice", "(", "occluders", ")", "\n", "\n", "random_scale_factor", "=", "np", ".", "random", ".", "uniform", "(", "0.2", ",", "1.0", ")", "\n", "scale_factor", "=", "random_scale_factor", "*", "im_scale_factor", "\n", "occluder", "=", "resize_by_factor", "(", "occluder", ",", "scale_factor", ")", "\n", "\n", "center", "=", "np", ".", "random", ".", "uniform", "(", "[", "0", ",", "0", "]", ",", "width_height", ")", "\n", "paste_over", "(", "im_src", "=", "occluder", ",", "im_dst", "=", "result", ",", "center", "=", "center", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.paste_over": [[433, 464], ["numpy.asarray", "numpy.asarray", "numpy.round().astype", "numpy.clip", "numpy.clip", "region_src[].astype", "numpy.round"], "function", ["None"], ["", "def", "paste_over", "(", "im_src", ",", "im_dst", ",", "center", ")", ":", "\n", "    ", "\"\"\"Pastes `im_src` onto `im_dst` at a specified position, with alpha blending, in place.\n    Locations outside the bounds of `im_dst` are handled as expected (only a part or none of\n    `im_src` becomes visible).\n    Args:\n        im_src: The RGBA image to be pasted onto `im_dst`. Its size can be arbitrary.\n        im_dst: The target image.\n        alpha: A float (0.0-1.0) array of the same size as `im_src` controlling the alpha blending\n            at each pixel. Large values mean more visibility for `im_src`.\n        center: coordinates in `im_dst` where the center of `im_src` should be placed.\n    \"\"\"", "\n", "\n", "width_height_src", "=", "np", ".", "asarray", "(", "[", "im_src", ".", "shape", "[", "1", "]", ",", "im_src", ".", "shape", "[", "0", "]", "]", ")", "\n", "width_height_dst", "=", "np", ".", "asarray", "(", "[", "im_dst", ".", "shape", "[", "1", "]", ",", "im_dst", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "center", "=", "np", ".", "round", "(", "center", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "raw_start_dst", "=", "center", "-", "width_height_src", "//", "2", "\n", "raw_end_dst", "=", "raw_start_dst", "+", "width_height_src", "\n", "\n", "start_dst", "=", "np", ".", "clip", "(", "raw_start_dst", ",", "0", ",", "width_height_dst", ")", "\n", "end_dst", "=", "np", ".", "clip", "(", "raw_end_dst", ",", "0", ",", "width_height_dst", ")", "\n", "region_dst", "=", "im_dst", "[", "start_dst", "[", "1", "]", ":", "end_dst", "[", "1", "]", ",", "start_dst", "[", "0", "]", ":", "end_dst", "[", "0", "]", "]", "\n", "\n", "start_src", "=", "start_dst", "-", "raw_start_dst", "\n", "end_src", "=", "width_height_src", "+", "(", "end_dst", "-", "raw_end_dst", ")", "\n", "region_src", "=", "im_src", "[", "start_src", "[", "1", "]", ":", "end_src", "[", "1", "]", ",", "start_src", "[", "0", "]", ":", "end_src", "[", "0", "]", "]", "\n", "color_src", "=", "region_src", "[", "...", ",", "0", ":", "3", "]", "\n", "alpha", "=", "region_src", "[", "...", ",", "3", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "\n", "im_dst", "[", "start_dst", "[", "1", "]", ":", "end_dst", "[", "1", "]", ",", "start_dst", "[", "0", "]", ":", "end_dst", "[", "0", "]", "]", "=", "(", "\n", "alpha", "*", "color_src", "+", "(", "1", "-", "alpha", ")", "*", "region_dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.resize_by_factor": [[466, 473], ["tuple", "cv2.resize", "numpy.round().astype", "numpy.round", "numpy.array"], "function", ["None"], ["", "def", "resize_by_factor", "(", "im", ",", "factor", ")", ":", "\n", "    ", "\"\"\"Returns a copy of `im` resized by `factor`, using bilinear interp for up and area interp\n    for downscaling.\n    \"\"\"", "\n", "new_size", "=", "tuple", "(", "np", ".", "round", "(", "np", ".", "array", "(", "[", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", "]", ")", "*", "factor", ")", ".", "astype", "(", "int", ")", ")", "\n", "interp", "=", "cv2", ".", "INTER_LINEAR", "if", "factor", ">", "1.0", "else", "cv2", ".", "INTER_AREA", "\n", "return", "cv2", ".", "resize", "(", "im", ",", "new_size", ",", "fx", "=", "factor", ",", "fy", "=", "factor", ",", "interpolation", "=", "interp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.list_filepaths": [[475, 479], ["os.listdir", "os.listdir", "sorted", "os.path.join", "os.path.join", "filter"], "function", ["None"], ["", "def", "list_filepaths", "(", "dirpath", ")", ":", "\n", "    ", "names", "=", "os", ".", "listdir", "(", "dirpath", ")", "\n", "paths", "=", "[", "os", ".", "path", ".", "join", "(", "dirpath", ",", "name", ")", "for", "name", "in", "names", "]", "\n", "return", "sorted", "(", "filter", "(", "os", ".", "path", ".", "isfile", ",", "paths", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.process_cam_params": [[14, 18], ["None"], "function", ["None"], ["def", "process_cam_params", "(", "cam_maps", ")", ":", "\n", "# to make sure that scale is always a positive value", "\n", "    ", "cam_maps", "[", "...", ",", "0", "]", "=", "(", "cam_maps", "[", "...", ",", "0", "]", "+", "1.", ")", "/", "2.", "\n", "return", "cam_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.convert_scale_to_depth_level": [[19, 22], ["torch.argmin", "torch.argmin", "cam3dmap_anchor.to", "torch.abs", "torch.abs", "scale[].repeat"], "function", ["None"], ["", "def", "convert_scale_to_depth_level", "(", "scale", ")", ":", "\n", "    ", "cam3dmap_anchors", "=", "cam3dmap_anchor", ".", "to", "(", "scale", ".", "device", ")", "[", "None", "]", "\n", "return", "torch", ".", "argmin", "(", "torch", ".", "abs", "(", "scale", "[", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "scale_num", ")", "-", "cam3dmap_anchors", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.convert_cam_params_to_centermap_coords": [[23, 31], ["torch.ones_like", "torch.ones_like", "cam_params[].clone", "cam3dmap_anchor.to", "len", "torch.argmin().float", "torch.argmin().float", "config.args", "torch.argmin", "torch.argmin", "torch.abs", "torch.abs", "cam_params[].repeat"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "convert_cam_params_to_centermap_coords", "(", "cam_params", ")", ":", "\n", "    ", "center_coords", "=", "torch", ".", "ones_like", "(", "cam_params", ")", "\n", "center_coords", "[", ":", ",", "1", ":", "]", "=", "cam_params", "[", ":", ",", "1", ":", "]", ".", "clone", "(", ")", "\n", "cam3dmap_anchors", "=", "cam3dmap_anchor", ".", "to", "(", "cam_params", ".", "device", ")", "[", "None", "]", "\n", "if", "len", "(", "cam_params", ")", "!=", "0", ":", "\n", "        ", "center_coords", "[", ":", ",", "0", "]", "=", "torch", ".", "argmin", "(", "torch", ".", "abs", "(", "cam_params", "[", ":", ",", "[", "0", "]", "]", ".", "repeat", "(", "1", ",", "scale_num", ")", "-", "cam3dmap_anchors", ")", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "/", "args", "(", ")", ".", "centermap_size", "*", "2.", "-", "1.", "\n", "\n", "", "return", "center_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.normalize_trans_to_cam_params": [[32, 42], ["numpy.zeros_like", "cam_utils._check_valid_cam"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils._check_valid_cam"], ["", "def", "normalize_trans_to_cam_params", "(", "trans", ")", ":", "\n", "# calculate (scale, Y trans, X trans) as camera parameters", "\n", "    ", "normed_cams", "=", "np", ".", "zeros_like", "(", "trans", ")", "\n", "#tan_fov = np.tan(np.radians(args().FOV/2.))", "\n", "normed_cams", "[", ":", ",", "0", "]", "=", "1", "/", "(", "trans", "[", ":", ",", "2", "]", "*", "tan_fov", ")", "\n", "normed_cams", "[", ":", ",", "1", "]", "=", "trans", "[", ":", ",", "1", "]", "/", "(", "trans", "[", ":", ",", "2", "]", "*", "tan_fov", ")", "\n", "normed_cams", "[", ":", ",", "2", "]", "=", "trans", "[", ":", ",", "0", "]", "/", "(", "trans", "[", ":", ",", "2", "]", "*", "tan_fov", ")", "\n", "\n", "_check_valid_cam", "(", "normed_cams", ")", "\n", "return", "normed_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.convert_scale_to_depth": [[43, 45], ["None"], "function", ["None"], ["", "def", "convert_scale_to_depth", "(", "scale", ")", ":", "\n", "    ", "return", "1", "/", "(", "scale", "*", "tan_fov", "+", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.denormalize_cam_params_to_trans": [[46, 61], ["torch.flip", "torch.flip", "convert_scale_to_depth().unsqueeze", "torch.cat", "torch.cat", "cam_utils.convert_scale_to_depth"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.flip", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.flip", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.convert_scale_to_depth"], ["", "def", "denormalize_cam_params_to_trans", "(", "normed_cams", ",", "positive_constrain", "=", "False", ")", ":", "\n", "#convert the predicted camera parameters to 3D translation in camera space.", "\n", "    ", "scale", "=", "normed_cams", "[", ":", ",", "0", "]", "\n", "if", "positive_constrain", ":", "\n", "        ", "positive_mask", "=", "(", "normed_cams", "[", ":", ",", "0", "]", ">", "0", ")", ".", "float", "(", ")", "\n", "scale", "=", "scale", "*", "positive_mask", "\n", "\n", "", "trans_XY_normed", "=", "torch", ".", "flip", "(", "normed_cams", "[", ":", ",", "1", ":", "]", ",", "[", "1", "]", ")", "\n", "# convert from predicted scale to depth", "\n", "depth", "=", "convert_scale_to_depth", "(", "scale", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# convert from predicted X-Y translation on image plane to X-Y coordinates on camera space.", "\n", "trans_XY", "=", "trans_XY_normed", "*", "depth", "*", "tan_fov", "\n", "trans", "=", "torch", ".", "cat", "(", "[", "trans_XY", ",", "depth", "]", ",", "1", ")", "\n", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils._check_valid_cam": [[64, 70], ["print", "print", "print"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["def", "_check_valid_cam", "(", "normed_cams", ")", ":", "\n", "# scale value is in 0~1", "\n", "    ", "assert", "(", "(", "normed_cams", "[", ":", ",", "0", "]", "<", "0", ")", "*", "(", "normed_cams", "[", ":", ",", "0", "]", ">", "1", ")", ")", ".", "sum", "(", ")", "==", "0", ",", "print", "(", "'camera scale must in 0~1, but we get {}'", ".", "format", "(", "normed_cams", "[", ":", ",", "0", "]", ")", ")", "\n", "# normalized translation in X-Y axis must in -1~1", "\n", "assert", "(", "(", "normed_cams", "[", ":", ",", "1", "]", "<", "-", "1", ")", "*", "(", "normed_cams", "[", ":", ",", "1", "]", ">", "1", ")", ")", ".", "sum", "(", ")", "==", "0", ",", "print", "(", "'Y translation must in -1~1, but we get {}'", ".", "format", "(", "normed_cams", "[", ":", ",", "1", "]", ")", ")", "\n", "assert", "(", "(", "normed_cams", "[", ":", ",", "2", "]", "<", "-", "1", ")", "*", "(", "normed_cams", "[", ":", ",", "2", "]", ">", "1", ")", ")", ".", "sum", "(", ")", "==", "0", ",", "print", "(", "'X translation must in -1~1, but we get {}'", ".", "format", "(", "normed_cams", "[", ":", ",", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.estimate_translation_cv2": [[72, 90], ["numpy.array", "cv2.solvePnPRansac", "config.args", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "estimate_translation_cv2", "(", "joints_3d", ",", "joints_2d", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "img_size", "=", "np", ".", "array", "(", "[", "512.", ",", "512.", "]", ")", ",", "proj_mat", "=", "None", ",", "cam_dist", "=", "None", ")", ":", "\n", "    ", "if", "proj_mat", "is", "None", ":", "\n", "        ", "camK", "=", "np", ".", "eye", "(", "3", ")", "\n", "camK", "[", "0", ",", "0", "]", ",", "camK", "[", "1", ",", "1", "]", "=", "focal_length", ",", "focal_length", "\n", "camK", "[", ":", "2", ",", "2", "]", "=", "img_size", "//", "2", "\n", "", "else", ":", "\n", "        ", "camK", "=", "proj_mat", "\n", "", "ret", ",", "rvec", ",", "tvec", ",", "inliers", "=", "cv2", ".", "solvePnPRansac", "(", "joints_3d", ",", "joints_2d", ",", "camK", ",", "cam_dist", ",", "flags", "=", "cv2", ".", "SOLVEPNP_EPNP", ",", "reprojectionError", "=", "20", ",", "iterationsCount", "=", "100", ")", "\n", "\n", "if", "inliers", "is", "None", ":", "\n", "#print('cv2.solvePnPRansac failed, with valid kp number as {}'.format(joints_3d.shape))", "\n", "        ", "return", "INVALID_TRANS", "\n", "", "else", ":", "\n", "#rot_pred = np.eye(3)", "\n", "        ", "tra_pred", "=", "tvec", "[", ":", ",", "0", "]", "\n", "#cv2.Rodrigues(rvec, rot_pred)                ", "\n", "return", "tra_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.estimate_translation_np": [[91, 134], ["numpy.array", "numpy.reshape", "numpy.reshape", "numpy.tile", "numpy.tile", "numpy.reshape", "numpy.diagflat", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.linalg.solve", "config.args", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "numpy.sqrt", "numpy.reshape", "numpy.tile", "numpy.tile", "numpy.reshape", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "def", "estimate_translation_np", "(", "joints_3d", ",", "joints_2d", ",", "joints_conf", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "img_size", "=", "np", ".", "array", "(", "[", "512.", ",", "512.", "]", ")", ",", "proj_mat", "=", "None", ")", ":", "\n", "    ", "\"\"\"Find camera translation that brings 3D joints joints_3d closest to 2D the corresponding joints_2d.\n    Input:\n        joints_3d: (25, 3) 3D joint locations\n        joints: (25, 3) 2D joint locations and confidence\n    Returns:\n        (3,) camera translation vector\n    \"\"\"", "\n", "\n", "num_joints", "=", "joints_3d", ".", "shape", "[", "0", "]", "\n", "if", "proj_mat", "is", "None", ":", "\n", "# focal length", "\n", "        ", "f", "=", "np", ".", "array", "(", "[", "focal_length", ",", "focal_length", "]", ")", "\n", "# optical center", "\n", "center", "=", "img_size", "/", "2.", "\n", "", "else", ":", "\n", "        ", "f", "=", "np", ".", "array", "(", "[", "proj_mat", "[", "0", ",", "0", "]", ",", "proj_mat", "[", "1", ",", "1", "]", "]", ")", "\n", "center", "=", "proj_mat", "[", ":", "2", ",", "2", "]", "\n", "\n", "# transformations", "\n", "", "Z", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "joints_3d", "[", ":", ",", "2", "]", ",", "(", "2", ",", "1", ")", ")", ".", "T", ",", "-", "1", ")", "\n", "XY", "=", "np", ".", "reshape", "(", "joints_3d", "[", ":", ",", "0", ":", "2", "]", ",", "-", "1", ")", "\n", "O", "=", "np", ".", "tile", "(", "center", ",", "num_joints", ")", "\n", "F", "=", "np", ".", "tile", "(", "f", ",", "num_joints", ")", "\n", "weight2", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "np", ".", "sqrt", "(", "joints_conf", ")", ",", "(", "2", ",", "1", ")", ")", ".", "T", ",", "-", "1", ")", "\n", "\n", "# least squares", "\n", "Q", "=", "np", ".", "array", "(", "[", "F", "*", "np", ".", "tile", "(", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", ",", "num_joints", ")", ",", "F", "*", "np", ".", "tile", "(", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ",", "num_joints", ")", ",", "O", "-", "np", ".", "reshape", "(", "joints_2d", ",", "-", "1", ")", "]", ")", ".", "T", "\n", "c", "=", "(", "np", ".", "reshape", "(", "joints_2d", ",", "-", "1", ")", "-", "O", ")", "*", "Z", "-", "F", "*", "XY", "\n", "\n", "# weighted least squares", "\n", "W", "=", "np", ".", "diagflat", "(", "weight2", ")", "\n", "Q", "=", "np", ".", "dot", "(", "W", ",", "Q", ")", "\n", "c", "=", "np", ".", "dot", "(", "W", ",", "c", ")", "\n", "\n", "# square matrix", "\n", "A", "=", "np", ".", "dot", "(", "Q", ".", "T", ",", "Q", ")", "\n", "b", "=", "np", ".", "dot", "(", "Q", ".", "T", ",", "c", ")", "\n", "\n", "# solution", "\n", "trans", "=", "np", ".", "linalg", ".", "solve", "(", "A", ",", "b", ")", "\n", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.estimate_translation": [[136, 186], ["numpy.array", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "numpy.zeros", "range", "torch.from_numpy().float", "torch.from_numpy().float", "config.args", "joints_3d.detach().cpu().numpy.detach().cpu().numpy", "joints_2d.detach().cpu().numpy.detach().cpu().numpy", "valid_mask.sum", "len", "cam_utils.estimate_translation_cv2", "torch.from_numpy", "torch.from_numpy", "joints_3d.detach().cpu().numpy.detach().cpu", "joints_2d.detach().cpu().numpy.detach().cpu", "range", "range", "len", "cam_utils.estimate_translation_np", "len", "len", "valid_mask[].astype", "joints_3d.detach().cpu().numpy.detach", "joints_2d.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.estimate_translation_cv2", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.estimate_translation_np"], ["", "def", "estimate_translation", "(", "joints_3d", ",", "joints_2d", ",", "pts_mnum", "=", "4", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "proj_mats", "=", "None", ",", "cam_dists", "=", "None", ",", "img_size", "=", "np", ".", "array", "(", "[", "512.", ",", "512.", "]", ")", ",", "pnp_algorithm", "=", "'cv2'", ")", ":", "\n", "    ", "\"\"\"Find camera translation that brings 3D joints joints_3d closest to 2D the corresponding joints_2d.\n    Input:\n        joints_3d: (B, K, 3) 3D joint locations\n        joints: (B, K, 2) 2D joint coordinates\n    Returns:\n        (B, 3) camera translation vectors\n    \"\"\"", "\n", "\n", "#device = joints_3d.device", "\n", "# Use only joints 25:49 (GT joints)", "\n", "if", "torch", ".", "is_tensor", "(", "joints_3d", ")", ":", "\n", "        ", "joints_3d", "=", "joints_3d", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "joints_2d", ")", ":", "\n", "        ", "joints_2d", "=", "joints_2d", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "joints_2d", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "        ", "joints_conf", "=", "joints_2d", "[", ":", ",", ":", ",", "-", "1", "]", ">", "-", "2.", "\n", "", "elif", "joints_2d", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "joints_conf", "=", "joints_2d", "[", ":", ",", ":", ",", "-", "1", "]", ">", "0", "\n", "", "joints3d_conf", "=", "joints_3d", "[", ":", ",", ":", ",", "-", "1", "]", "!=", "-", "2.", "\n", "\n", "trans", "=", "np", ".", "zeros", "(", "(", "joints_3d", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "proj_mats", "is", "None", ":", "\n", "        ", "proj_mats", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "joints_2d", ")", ")", "]", "\n", "", "if", "cam_dists", "is", "None", ":", "\n", "        ", "cam_dists", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "joints_2d", ")", ")", "]", "\n", "# Find the translation for each example in the batch", "\n", "", "for", "i", "in", "range", "(", "joints_3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "S_i", "=", "joints_3d", "[", "i", "]", "\n", "joints_i", "=", "joints_2d", "[", "i", ",", ":", ",", ":", "2", "]", "\n", "valid_mask", "=", "joints_conf", "[", "i", "]", "*", "joints3d_conf", "[", "i", "]", "\n", "if", "valid_mask", ".", "sum", "(", ")", "<", "pts_mnum", ":", "\n", "            ", "trans", "[", "i", "]", "=", "INVALID_TRANS", "\n", "continue", "\n", "", "if", "len", "(", "img_size", ".", "shape", ")", "==", "1", ":", "\n", "            ", "imgsize", "=", "img_size", "\n", "", "elif", "len", "(", "img_size", ".", "shape", ")", "==", "2", ":", "\n", "            ", "imgsize", "=", "img_size", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "pnp_algorithm", "==", "'cv2'", ":", "\n", "            ", "trans", "[", "i", "]", "=", "estimate_translation_cv2", "(", "S_i", "[", "valid_mask", "]", ",", "joints_i", "[", "valid_mask", "]", ",", "\n", "focal_length", "=", "focal_length", ",", "img_size", "=", "imgsize", ",", "proj_mat", "=", "proj_mats", "[", "i", "]", ",", "cam_dist", "=", "cam_dists", "[", "i", "]", ")", "\n", "", "elif", "pnp_algorithm", "==", "'np'", ":", "\n", "            ", "trans", "[", "i", "]", "=", "estimate_translation_np", "(", "S_i", "[", "valid_mask", "]", ",", "joints_i", "[", "valid_mask", "]", ",", "valid_mask", "[", "valid_mask", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "focal_length", "=", "focal_length", ",", "img_size", "=", "imgsize", ",", "proj_mat", "=", "proj_mats", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "return", "torch", ".", "from_numpy", "(", "trans", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.LowPassFilter.__init__": [[36, 39], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "prev_raw_value", "=", "None", "\n", "self", ".", "prev_filtered_value", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.LowPassFilter.process": [[40, 48], ["None"], "methods", ["None"], ["", "def", "process", "(", "self", ",", "value", ",", "alpha", ")", ":", "\n", "    ", "if", "self", ".", "prev_raw_value", "is", "None", ":", "\n", "      ", "s", "=", "value", "\n", "", "else", ":", "\n", "      ", "s", "=", "alpha", "*", "value", "+", "(", "1.0", "-", "alpha", ")", "*", "self", ".", "prev_filtered_value", "\n", "", "self", ".", "prev_raw_value", "=", "value", "\n", "self", ".", "prev_filtered_value", "=", "s", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.__init__": [[50, 57], ["temporal_optimization.LowPassFilter", "temporal_optimization.LowPassFilter"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "mincutoff", "=", "1.0", ",", "beta", "=", "0.0", ",", "dcutoff", "=", "1.0", ",", "freq", "=", "30", ")", ":", "\n", "    ", "self", ".", "freq", "=", "freq", "\n", "self", ".", "mincutoff", "=", "mincutoff", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "dcutoff", "=", "dcutoff", "\n", "self", ".", "x_filter", "=", "LowPassFilter", "(", ")", "\n", "self", ".", "dx_filter", "=", "LowPassFilter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.compute_alpha": [[58, 62], ["None"], "methods", ["None"], ["", "def", "compute_alpha", "(", "self", ",", "cutoff", ")", ":", "\n", "    ", "te", "=", "1.0", "/", "self", ".", "freq", "\n", "tau", "=", "1.0", "/", "(", "2", "*", "np", ".", "pi", "*", "cutoff", ")", "\n", "return", "1.0", "/", "(", "1.0", "+", "tau", "/", "te", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process": [[63, 72], ["temporal_optimization.OneEuroFilter.dx_filter.process", "temporal_optimization.OneEuroFilter.x_filter.process", "temporal_optimization.OneEuroFilter.compute_alpha", "print", "temporal_optimization.OneEuroFilter.compute_alpha", "numpy.abs", "temporal_optimization.OneEuroFilter.compute_alpha"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.compute_alpha", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.compute_alpha", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.compute_alpha"], ["", "def", "process", "(", "self", ",", "x", ",", "print_inter", "=", "False", ")", ":", "\n", "    ", "prev_x", "=", "self", ".", "x_filter", ".", "prev_raw_value", "\n", "dx", "=", "0.0", "if", "prev_x", "is", "None", "else", "(", "x", "-", "prev_x", ")", "*", "self", ".", "freq", "\n", "edx", "=", "self", ".", "dx_filter", ".", "process", "(", "dx", ",", "self", ".", "compute_alpha", "(", "self", ".", "dcutoff", ")", ")", "\n", "\n", "cutoff", "=", "self", ".", "mincutoff", "+", "self", ".", "beta", "*", "np", ".", "abs", "(", "edx", ")", "\n", "if", "print_inter", ":", "\n", "      ", "print", "(", "self", ".", "compute_alpha", "(", "cutoff", ")", ")", "\n", "", "return", "self", ".", "x_filter", ".", "process", "(", "x", ",", "self", ".", "compute_alpha", "(", "cutoff", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.extract_motion_sequence": [[5, 17], ["sorted", "video_track_ids.items", "numpy.unique", "list", "np.unique.extend", "numpy.array", "results_track_video.keys", "video_track_ids.items", "frame_ids_appear.items", "numpy.where", "numpy.array"], "function", ["None"], ["def", "extract_motion_sequence", "(", "results_track_video", ",", "video_track_ids", ")", ":", "\n", "    ", "motion_sequence", "=", "{", "}", "\n", "frame_ids", "=", "sorted", "(", "list", "(", "results_track_video", ".", "keys", "(", ")", ")", ")", "\n", "subject_ids", "=", "[", "]", "\n", "for", "fid", ",", "track_ids", "in", "video_track_ids", ".", "items", "(", ")", ":", "\n", "        ", "subject_ids", ".", "extend", "(", "track_ids", ")", "\n", "", "subject_ids", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "subject_ids", ")", ")", "\n", "for", "subject_id", "in", "subject_ids", ":", "\n", "        ", "frame_ids_appear", "=", "{", "fid", ":", "np", ".", "where", "(", "np", ".", "array", "(", "track_ids", ")", "==", "subject_id", ")", "[", "0", "]", "[", "0", "]", "for", "fid", ",", "track_ids", "in", "video_track_ids", ".", "items", "(", ")", "if", "subject_id", "in", "track_ids", "}", "\n", "motion_sequence", "[", "subject_id", "]", "=", "[", "results_track_video", "[", "frame_ids", "[", "fid", "]", "]", "[", "sid", "]", "for", "fid", ",", "sid", "in", "frame_ids_appear", ".", "items", "(", ")", "]", "\n", "\n", "", "return", "motion_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.create_OneEuroFilter": [[18, 20], ["temporal_optimization.OneEuroFilter", "temporal_optimization.OneEuroFilter", "temporal_optimization.OneEuroFilter", "temporal_optimization.OneEuroFilter"], "function", ["None"], ["", "def", "create_OneEuroFilter", "(", "smooth_coeff", ")", ":", "\n", "  ", "return", "{", "'cam'", ":", "OneEuroFilter", "(", "3.", ",", ".0", ")", ",", "'global_orient'", ":", "OneEuroFilter", "(", "2.", ",", ".0", ")", ",", "'poses'", ":", "OneEuroFilter", "(", "smooth_coeff", ",", "0", ")", ",", "'betas'", ":", "OneEuroFilter", "(", "0.6", ",", ".0", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.temporal_optimize_result": [[22, 31], ["filter_dict[].process", "filter_dict[].process", "numpy.array", "filter_dict[].process", "numpy.array().reshape", "pose_euler[].reshape", "util.transform_rot_representation", "numpy.array", "result[].reshape", "util.transform_rot_representation", "filter_dict[].process.reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.transform_rot_representation", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.transform_rot_representation"], ["", "def", "temporal_optimize_result", "(", "result", ",", "filter_dict", ")", ":", "\n", "  ", "result", "[", "'cam'", "]", "=", "filter_dict", "[", "'cam'", "]", ".", "process", "(", "result", "[", "'cam'", "]", ")", "\n", "result", "[", "'betas'", "]", "=", "filter_dict", "[", "'betas'", "]", ".", "process", "(", "result", "[", "'betas'", "]", ")", "\n", "pose_euler", "=", "np", ".", "array", "(", "[", "transform_rot_representation", "(", "vec", ",", "input_type", "=", "'vec'", ",", "out_type", "=", "'euler'", ")", "for", "vec", "in", "result", "[", "'poses'", "]", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "]", ")", "\n", "#global_orient_euler = filter_dict['global_orient'].process(pose_euler[:1])", "\n", "#result['poses'][:3] = transform_rot_representation(global_orient_euler, input_type='euler',out_type='vec')", "\n", "body_pose_euler", "=", "filter_dict", "[", "'poses'", "]", ".", "process", "(", "pose_euler", "[", "1", ":", "]", ".", "reshape", "(", "-", "1", ")", ")", "#,print_inter=True", "\n", "result", "[", "'poses'", "]", "[", "3", ":", "]", "=", "np", ".", "array", "(", "[", "transform_rot_representation", "(", "bodypose", ",", "input_type", "=", "'euler'", ",", "out_type", "=", "'vec'", ")", "for", "bodypose", "in", "body_pose_euler", ".", "reshape", "(", "-", "1", ",", "3", ")", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.filter_out_incorrect_trans": [[9, 18], ["numpy.logical_and", "projection.perspective_projection", "print", "config.args", "torch.Tensor", "len", "len", "np.logical_and.sum", "trans[].numpy", "config.args", "config.args", "numpy.linalg.norm", "perspective_projection.numpy"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["def", "filter_out_incorrect_trans", "(", "kp_3ds", ",", "trans", ",", "kp_2ds", ",", "thresh", "=", "20", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "center_offset", "=", "torch", ".", "Tensor", "(", "[", "args", "(", ")", ".", "input_size", ",", "args", "(", ")", ".", "input_size", "]", ")", "/", "2.", ")", ":", "\n", "    ", "valid_mask", "=", "np", ".", "logical_and", "(", "kp_3ds", "[", ":", ",", ":", ",", "-", "1", "]", "!=", "-", "2.", ",", "kp_2ds", "[", ":", ",", ":", ",", "-", "1", "]", ">", "0", ")", "\n", "projected_kp2ds", "=", "perspective_projection", "(", "kp_3ds", ",", "translation", "=", "trans", ",", "camera_center", "=", "center_offset", ",", "focal_length", "=", "focal_length", ",", "normalize", "=", "False", ")", "\n", "dists", "=", "(", "np", ".", "linalg", ".", "norm", "(", "projected_kp2ds", ".", "numpy", "(", ")", "-", "kp_2ds", ",", "axis", "=", "-", "1", ",", "ord", "=", "2", ")", "*", "valid_mask", ")", ".", "sum", "(", "-", "1", ")", "/", "(", "valid_mask", ".", "sum", "(", "-", "1", ")", "+", "1e-3", ")", "\n", "cam_mask", "=", "dists", "<", "thresh", "\n", "assert", "len", "(", "trans", ")", "==", "len", "(", "cam_mask", ")", ",", "print", "(", "'len(trans)==len(cam_mask) fail, trans {}; cam_mask {}'", ".", "format", "(", "trans", ",", "cam_mask", ")", ")", "\n", "cam_mask", "[", "trans", "[", ":", ",", "2", "]", ".", "numpy", "(", ")", "<=", "0", "]", "=", "False", "\n", "trans", "=", "trans", "[", "cam_mask", "]", "\n", "return", "trans", ",", "cam_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.convert_kp2d_from_input_to_orgimg": [[19, 27], ["offsets.float().to.float().to", "torch.stack", "torch.stack.unsqueeze", "torch.cat", "offsets.float().to.float", "img_pad_size.unsqueeze", "img_pad_size.unsqueeze"], "function", ["None"], ["", "def", "convert_kp2d_from_input_to_orgimg", "(", "kp2ds", ",", "offsets", ")", ":", "\n", "    ", "offsets", "=", "offsets", ".", "float", "(", ")", ".", "to", "(", "kp2ds", ".", "device", ")", "\n", "img_pad_size", ",", "crop_trbl", ",", "pad_trbl", "=", "offsets", "[", ":", ",", ":", "2", "]", ",", "offsets", "[", ":", ",", "2", ":", "6", "]", ",", "offsets", "[", ":", ",", "6", ":", "10", "]", "\n", "leftTop", "=", "torch", ".", "stack", "(", "[", "crop_trbl", "[", ":", ",", "3", "]", "-", "pad_trbl", "[", ":", ",", "3", "]", ",", "crop_trbl", "[", ":", ",", "0", "]", "-", "pad_trbl", "[", ":", ",", "0", "]", "]", ",", "1", ")", "\n", "kp2ds_on_orgimg", "=", "(", "kp2ds", "[", ":", ",", ":", ",", ":", "2", "]", "+", "1", ")", "*", "img_pad_size", ".", "unsqueeze", "(", "1", ")", "/", "2", "+", "leftTop", ".", "unsqueeze", "(", "1", ")", "\n", "if", "kp2ds", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "kp2ds_on_orgimg", "=", "torch", ".", "cat", "(", "[", "kp2ds_on_orgimg", ",", "(", "kp2ds", "[", ":", ",", ":", ",", "[", "2", "]", "]", "+", "1", ")", "*", "img_pad_size", ".", "unsqueeze", "(", "1", ")", "[", ":", ",", ":", ",", "[", "0", "]", "]", "/", "2", "]", ",", "-", "1", ")", "\n", "", "return", "kp2ds_on_orgimg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.convert_cam_to_3d_trans": [[28, 33], ["torch.stack"], "function", ["None"], ["", "def", "convert_cam_to_3d_trans", "(", "cams", ",", "weight", "=", "2.", ")", ":", "\n", "    ", "(", "s", ",", "tx", ",", "ty", ")", "=", "cams", "[", ":", ",", "0", "]", ",", "cams", "[", ":", ",", "1", "]", ",", "cams", "[", ":", ",", "2", "]", "\n", "depth", ",", "dx", ",", "dy", "=", "1.", "/", "s", ",", "tx", "/", "s", ",", "ty", "/", "s", "\n", "trans3d", "=", "torch", ".", "stack", "(", "[", "dx", ",", "dy", ",", "depth", "]", ",", "1", ")", "*", "weight", "\n", "return", "trans3d", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.vertices_kp3d_projection": [[34, 58], ["utils.cam_utils.denormalize_cam_params_to_trans", "projection.perspective_projection", "projection.batch_orth_proj", "projection.convert_cam_to_3d_trans", "projection.convert_kp2d_from_input_to_orgimg", "projection.convert_kp2d_from_input_to_orgimg", "config.args", "pj3d[].float", "projection.perspective_projection", "pj3d_h36m17[].float", "projection.perspective_projection", "projection.batch_orth_proj", "projection.convert_kp2d_from_input_to_orgimg", "vertices.clone().detach", "config.args", "config.args", "vertices.clone", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.denormalize_cam_params_to_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.batch_orth_proj", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.convert_cam_to_3d_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.convert_kp2d_from_input_to_orgimg", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.convert_kp2d_from_input_to_orgimg", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.batch_orth_proj", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.convert_kp2d_from_input_to_orgimg", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "vertices_kp3d_projection", "(", "j3d_preds", ",", "cam_preds", ",", "joints_h36m17_preds", "=", "None", ",", "vertices", "=", "None", ",", "input2orgimg_offsets", "=", "None", ",", "presp", "=", "args", "(", ")", ".", "model_version", ">", "3", ")", ":", "\n", "    ", "if", "presp", ":", "\n", "        ", "pred_cam_t", "=", "denormalize_cam_params_to_trans", "(", "cam_preds", ",", "positive_constrain", "=", "False", ")", "\n", "pj3d", "=", "perspective_projection", "(", "j3d_preds", ",", "translation", "=", "pred_cam_t", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "normalize", "=", "True", ")", "\n", "projected_outputs", "=", "{", "'cam_trans'", ":", "pred_cam_t", ",", "'pj2d'", ":", "pj3d", "[", ":", ",", ":", ",", ":", "2", "]", ".", "float", "(", ")", "}", "\n", "if", "joints_h36m17_preds", "is", "not", "None", ":", "\n", "            ", "pj3d_h36m17", "=", "perspective_projection", "(", "joints_h36m17_preds", ",", "translation", "=", "pred_cam_t", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "normalize", "=", "True", ")", "\n", "projected_outputs", "[", "'pj2d_h36m17'", "]", "=", "pj3d_h36m17", "[", ":", ",", ":", ",", ":", "2", "]", ".", "float", "(", ")", "\n", "", "if", "vertices", "is", "not", "None", ":", "\n", "            ", "projected_outputs", "[", "'verts_camed'", "]", "=", "perspective_projection", "(", "vertices", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "translation", "=", "pred_cam_t", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "normalize", "=", "True", ",", "keep_dim", "=", "True", ")", "\n", "projected_outputs", "[", "'verts_camed'", "]", "[", ":", ",", ":", ",", "2", "]", "=", "vertices", "[", ":", ",", ":", ",", "2", "]", "\n", "", "", "else", ":", "\n", "        ", "pj3d", "=", "batch_orth_proj", "(", "j3d_preds", ",", "cam_preds", ",", "mode", "=", "'2d'", ")", "\n", "pred_cam_t", "=", "convert_cam_to_3d_trans", "(", "cam_preds", ")", "\n", "projected_outputs", "=", "{", "'pj2d'", ":", "pj3d", "[", ":", ",", ":", ",", ":", "2", "]", ",", "'cam_trans'", ":", "pred_cam_t", "}", "\n", "if", "vertices", "is", "not", "None", ":", "\n", "            ", "projected_outputs", "[", "'verts_camed'", "]", "=", "batch_orth_proj", "(", "vertices", ",", "cam_preds", ",", "mode", "=", "'3d'", ",", "keep_dim", "=", "True", ")", "\n", "\n", "", "", "if", "input2orgimg_offsets", "is", "not", "None", ":", "\n", "        ", "projected_outputs", "[", "'pj2d_org'", "]", "=", "convert_kp2d_from_input_to_orgimg", "(", "projected_outputs", "[", "'pj2d'", "]", ",", "input2orgimg_offsets", ")", "\n", "projected_outputs", "[", "'verts_camed_org'", "]", "=", "convert_kp2d_from_input_to_orgimg", "(", "projected_outputs", "[", "'verts_camed'", "]", ",", "input2orgimg_offsets", ")", "\n", "if", "'pj2d_h36m17'", "in", "projected_outputs", ":", "\n", "            ", "projected_outputs", "[", "'pj2d_org_h36m17'", "]", "=", "convert_kp2d_from_input_to_orgimg", "(", "projected_outputs", "[", "'pj2d_h36m17'", "]", ",", "input2orgimg_offsets", ")", "\n", "", "", "return", "projected_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.project_2D": [[60, 69], ["cams[].unsqueeze"], "function", ["None"], ["", "def", "project_2D", "(", "kp3d", ",", "cams", ",", "keep_dim", "=", "False", ")", ":", "\n", "    ", "d", ",", "f", ",", "t", "=", "cams", "[", "0", "]", ",", "cams", "[", "1", "]", ",", "cams", "[", "2", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "pose2d", "=", "kp3d", "[", ":", ",", ":", "2", "]", "/", "(", "kp3d", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", "+", "d", ")", "\n", "pose2d", "=", "pose2d", "*", "f", "+", "t", "\n", "if", "keep_dim", ":", "\n", "        ", "kp3d", "[", ":", ",", ":", "2", "]", "=", "pose2d", "\n", "return", "kp3d", "\n", "", "else", ":", "\n", "        ", "return", "pose2d", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.batch_orth_proj": [[71, 78], ["camera.view.view", "camera[].unsqueeze", "torch.cat", "X[].unsqueeze"], "function", ["None"], ["", "", "def", "batch_orth_proj", "(", "X", ",", "camera", ",", "mode", "=", "'2d'", ",", "keep_dim", "=", "False", ")", ":", "\n", "    ", "camera", "=", "camera", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", "\n", "X_camed", "=", "X", "[", ":", ",", ":", ",", ":", "2", "]", "*", "camera", "[", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "X_camed", "+=", "camera", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "if", "keep_dim", ":", "\n", "        ", "X_camed", "=", "torch", ".", "cat", "(", "[", "X_camed", ",", "X", "[", ":", ",", ":", ",", "2", "]", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "-", "1", ")", "\n", "", "return", "X_camed", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.batch_persp_depth": [[80, 85], ["projection.perspective_projection"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection"], ["", "def", "batch_persp_depth", "(", "pred_joints", ",", "trans_xyz", ",", "depth_pred", ",", "tan_fov", ",", "keep_dim", "=", "False", ")", ":", "\n", "    ", "pred_joints_proj", "=", "perspective_projection", "(", "pred_joints", ",", "trans_xyz", ",", "tan_fov", ")", "\n", "if", "not", "keep_dim", ":", "\n", "        ", "pred_joints_proj", "=", "pred_joints_proj", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "", "return", "pred_joints_proj", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.perspective_projection_normed": [[86, 102], ["numpy.tan", "config.args", "numpy.radians", "translation.unsqueeze", "points[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "perspective_projection_normed", "(", "points", ",", "translation", ",", "FOV", "=", "args", "(", ")", ".", "FOV", ")", ":", "\n", "    ", "'''\n    This function computes the perspective projection of 3D points \n        and output 2D coordinates on normalized image plane (-1 ~ 1)\n        points: torch.float32, B x N x 3, 3D body joints\n        translation: torch.float32, B x 3,  predicted camera parameters (scale, trans_y on image, trans_x on image) \n        FOV: int, Field of view in degree, here we adopt the FOV of a standard camera, 50 degree. \n    '''", "\n", "\n", "tan_fov", "=", "np", ".", "tan", "(", "np", ".", "radians", "(", "FOV", "/", "2.", ")", ")", "\n", "\n", "points", "=", "points", "+", "translation", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Apply perspective distortion", "\n", "projected_points", "=", "points", "[", ":", ",", ":", ",", ":", "-", "1", "]", "/", "(", "points", "[", ":", ",", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "+", "1e-9", ")", "/", "tan_fov", "\n", "return", "projected_points", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.perspective_projection": [[107, 155], ["isinstance", "isinstance", "torch.zeros", "torch.matmul", "config.args", "torch.from_numpy().float", "torch.from_numpy().float", "torch.einsum", "print", "print", "projected_points[].contiguous.contiguous", "torch.zeros.contiguous", "projected_points[].contiguous", "torch.from_numpy().float.unsqueeze", "points[].unsqueeze", "torch.isnan().sum", "torch.isnan().sum", "len", "torch.from_numpy", "torch.from_numpy", "float", "torch.isnan", "torch.isnan", "torch.where", "torch.where", "torch.isnan", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["def", "perspective_projection", "(", "points", ",", "translation", "=", "None", ",", "rotation", "=", "None", ",", "keep_dim", "=", "False", ",", "\n", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "camera_center", "=", "None", ",", "img_size", "=", "512", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    This function computes the perspective projection of a set of points.\n    Input:\n        points (bs, N, 3): 3D points\n        rotation (bs, 3, 3): Camera rotation\n        translation (bs, 3): Camera translation\n        focal_length (bs,) or scalar: Focal length\n        camera_center (bs, 2): Camera center\n    \"\"\"", "\n", "if", "isinstance", "(", "points", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "points", "=", "torch", ".", "from_numpy", "(", "points", ")", ".", "float", "(", ")", "\n", "", "if", "isinstance", "(", "translation", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "translation", "=", "torch", ".", "from_numpy", "(", "translation", ")", ".", "float", "(", ")", "\n", "", "batch_size", "=", "points", ".", "shape", "[", "0", "]", "\n", "K", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "3", ",", "3", "]", ",", "device", "=", "points", ".", "device", ")", "\n", "K", "[", ":", ",", "0", ",", "0", "]", "=", "focal_length", "\n", "K", "[", ":", ",", "1", ",", "1", "]", "=", "focal_length", "\n", "K", "[", ":", ",", "2", ",", "2", "]", "=", "1.", "\n", "if", "camera_center", "is", "not", "None", ":", "\n", "        ", "K", "[", ":", ",", "-", "1", ",", ":", "-", "1", "]", "=", "camera_center", "\n", "\n", "# Transform points", "\n", "", "if", "rotation", "is", "not", "None", ":", "\n", "        ", "points", "=", "torch", ".", "einsum", "(", "'bij,bkj->bki'", ",", "rotation", ",", "points", ")", "\n", "", "if", "translation", "is", "not", "None", ":", "\n", "        ", "points", "=", "points", "+", "translation", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Apply perspective distortion", "\n", "", "projected_points", "=", "points", "/", "(", "points", "[", ":", ",", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "+", "1e-4", ")", "\n", "if", "torch", ".", "isnan", "(", "points", ")", ".", "sum", "(", ")", ">", "0", "or", "torch", ".", "isnan", "(", "projected_points", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "       ", "print", "(", "'translation:'", ",", "translation", "[", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "translation", ")", ")", "[", "0", "]", "]", ")", "\n", "print", "(", "'points nan value number:'", ",", "len", "(", "torch", ".", "where", "(", "torch", ".", "isnan", "(", "points", ")", ")", "[", "0", "]", ")", ")", "\n", "#print('projected_points nan value:', projected_points[torch.where(torch.isnan(projected_points))[0]])", "\n", "# print('projected_points nan', torch.where(torch.isnan(projected_points)))", "\n", "# import pdb; pdb.set_trace()", "\n", "\n", "# Apply camera intrinsics", "\n", "# projected_points = torch.einsum('bij,bkj->bki', K, projected_points)[:, :, :-1]", "\n", "", "projected_points", "=", "torch", ".", "matmul", "(", "projected_points", ".", "contiguous", "(", ")", ",", "K", ".", "contiguous", "(", ")", ")", "\n", "if", "not", "keep_dim", ":", "\n", "        ", "projected_points", "=", "projected_points", "[", ":", ",", ":", ",", ":", "-", "1", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "return", "projected_points", "/", "float", "(", "img_size", ")", "*", "2.", "\n", "\n", "", "return", "projected_points", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.justify_detection_state": [[7, 14], ["detection_flag.sum", "reorganize_idx[].long", "detection_flag.bool"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["def", "justify_detection_state", "(", "detection_flag", ",", "reorganize_idx", ")", ":", "\n", "    ", "if", "detection_flag", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "detection_flag", "=", "False", "\n", "", "else", ":", "\n", "        ", "reorganize_idx", "=", "reorganize_idx", "[", "detection_flag", ".", "bool", "(", ")", "]", ".", "long", "(", ")", "\n", "detection_flag", "=", "True", "\n", "", "return", "detection_flag", ",", "reorganize_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.copy_state_dict": [[15, 49], ["cur_state_dict.keys", "print", "key.replace.replace", "train_utils.copy_state_dict._get_params"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "copy_state_dict", "(", "cur_state_dict", ",", "pre_state_dict", ",", "prefix", "=", "'module.'", ",", "drop_prefix", "=", "''", ",", "fix_loaded", "=", "False", ")", ":", "\n", "    ", "success_layers", ",", "failed_layers", "=", "[", "]", ",", "[", "]", "\n", "def", "_get_params", "(", "key", ")", ":", "\n", "        ", "key", "=", "key", ".", "replace", "(", "drop_prefix", ",", "''", ")", "\n", "key", "=", "prefix", "+", "key", "\n", "if", "key", "in", "pre_state_dict", ":", "\n", "            ", "return", "pre_state_dict", "[", "key", "]", "\n", "", "return", "None", "\n", "\n", "", "for", "k", "in", "cur_state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "v", "=", "_get_params", "(", "k", ")", "\n", "try", ":", "\n", "            ", "if", "v", "is", "None", ":", "\n", "                ", "failed_layers", ".", "append", "(", "k", ")", "\n", "continue", "\n", "", "cur_state_dict", "[", "k", "]", ".", "copy_", "(", "v", ")", "\n", "if", "prefix", "in", "k", "and", "prefix", "!=", "''", ":", "\n", "                ", "k", "=", "k", ".", "split", "(", "prefix", ")", "[", "1", "]", "\n", "", "success_layers", ".", "append", "(", "k", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'copy param {} failed, mismatched'", ".", "format", "(", "k", ")", ")", "# logging.info", "\n", "continue", "\n", "", "", "print", "(", "'missing parameters of layers:{}'", ".", "format", "(", "failed_layers", ")", ")", "\n", "\n", "if", "fix_loaded", "and", "len", "(", "failed_layers", ")", ">", "0", ":", "\n", "        ", "logging", ".", "info", "(", "'fixing the layers that were loaded successfully, while train the layers that failed,'", ")", "\n", "for", "k", "in", "cur_state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "k", "in", "success_layers", ":", "\n", "                    ", "cur_state_dict", "[", "k", "]", ".", "requires_grad", "=", "False", "\n", "", "", "except", ":", "\n", "                ", "logging", ".", "info", "(", "'fixing the layer {} failed'", ".", "format", "(", "k", ")", ")", "\n", "\n", "", "", "", "return", "success_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.load_model": [[50, 62], ["logging.info", "os.path.exists", "torch.load", "model.state_dict", "isinstance", "train_utils.copy_state_dict", "logging.warning"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.copy_state_dict"], ["", "def", "load_model", "(", "path", ",", "model", ",", "prefix", "=", "'module.'", ",", "drop_prefix", "=", "''", ",", "optimizer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'using fine_tune model: {}'", ".", "format", "(", "path", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "pretrained_model", "=", "torch", ".", "load", "(", "path", ")", "\n", "current_model", "=", "model", ".", "state_dict", "(", ")", "\n", "if", "isinstance", "(", "pretrained_model", ",", "dict", ")", ":", "\n", "            ", "if", "'model_state_dict'", "in", "pretrained_model", ":", "\n", "                ", "pretrained_model", "=", "pretrained_model", "[", "'model_state_dict'", "]", "\n", "", "", "copy_state_dict", "(", "current_model", ",", "pretrained_model", ",", "prefix", "=", "prefix", ",", "drop_prefix", "=", "drop_prefix", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "warning", "(", "'model {} not exist!'", ".", "format", "(", "path", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.save_single_model": [[63, 67], ["logging.info", "torch.save", "model.module.state_dict"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info"], ["", "def", "save_single_model", "(", "model", ",", "path", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'saving {}'", ".", "format", "(", "path", ")", ")", "\n", "#model_save = {'model_state_dict':model.state_dict(),'optimizer_state_dict':optimizer.state_dict()}", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.save_model": [[68, 76], ["train_utils.save_single_model", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.save_single_model"], ["", "def", "save_model", "(", "model", ",", "title", ",", "parent_folder", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "parent_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "parent_folder", ")", "\n", "\n", "", "if", "parent_folder", "is", "not", "None", ":", "\n", "        ", "title", "=", "os", ".", "path", ".", "join", "(", "parent_folder", ",", "title", ")", "\n", "# better results if not load previous optimizer, start a new optimizer.", "\n", "", "save_single_model", "(", "model", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.process_idx": [[77, 85], ["reorganize_idx.cpu().numpy.cpu().numpy", "numpy.unique", "reorganize_idx.cpu().numpy.cpu", "numpy.where"], "function", ["None"], ["", "def", "process_idx", "(", "reorganize_idx", ",", "vids", "=", "None", ")", ":", "\n", "    ", "result_size", "=", "reorganize_idx", ".", "shape", "[", "0", "]", "\n", "reorganize_idx", "=", "reorganize_idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "used_idx", "=", "reorganize_idx", "[", "vids", "]", "if", "vids", "is", "not", "None", "else", "reorganize_idx", "\n", "used_org_inds", "=", "np", ".", "unique", "(", "used_idx", ")", "\n", "per_img_inds", "=", "[", "np", ".", "where", "(", "reorganize_idx", "==", "org_idx", ")", "[", "0", "]", "for", "org_idx", "in", "used_org_inds", "]", "\n", "\n", "return", "used_org_inds", ",", "per_img_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.determine_rendering_order": [[87, 102], ["main_render_mask.sum().item", "range", "numpy.zeros", "len", "numpy.zeros", "other_render_mask.sum().item", "other_render_mask.sum().item", "main_render_mask.sum", "other_render_mask.sum", "other_render_mask.sum"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "determine_rendering_order", "(", "rendered_img", ",", "thresh", "=", "0.", ")", ":", "\n", "    ", "main_renders", "=", "rendered_img", "[", "0", "]", "\n", "main_render_mask", "=", "(", "main_renders", "[", ":", ",", ":", ",", "-", "1", "]", ">", "thresh", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "H", ",", "W", "=", "main_renders", ".", "shape", "[", ":", "2", "]", "\n", "render_scale_map", "=", "np", ".", "zeros", "(", "(", "H", ",", "W", ")", ")", "+", "1", "\n", "render_scale_map", "[", "main_render_mask", "]", "=", "main_render_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "for", "jdx", "in", "range", "(", "1", ",", "len", "(", "rendered_img", ")", ")", ":", "\n", "        ", "other_renders", "=", "rendered_img", "[", "jdx", "]", "\n", "other_render_mask", "=", "(", "other_renders", "[", ":", ",", ":", ",", "-", "1", "]", ">", "thresh", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "render_scale_map_other", "=", "np", ".", "zeros", "(", "(", "H", ",", "W", ")", ")", "\n", "render_scale_map_other", "[", "other_render_mask", "]", "=", "other_render_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "other_render_mask", "=", "render_scale_map_other", ">", "render_scale_map", "\n", "render_scale_map", "[", "other_render_mask", "]", "=", "other_render_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "main_renders", "[", "other_render_mask", "]", "=", "other_renders", "[", "other_render_mask", "]", "\n", "", "return", "main_renders", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.fix_backbone": [[122, 129], ["logging.info", "enumerate", "params.named_parameters"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info"], ["", "def", "fix_backbone", "(", "params", ",", "exclude_key", "=", "[", "'backbone.'", "]", ")", ":", "\n", "    ", "for", "exclude_name", "in", "exclude_key", ":", "\n", "        ", "for", "index", ",", "(", "name", ",", "param", ")", "in", "enumerate", "(", "params", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "exclude_name", "in", "name", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "", "logging", ".", "info", "(", "'Fix params that include in {}'", ".", "format", "(", "exclude_key", ")", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.print_dict": [[131, 148], ["print", "dt.items", "print", "isinstance", "len", "list", "print", "train_utils.print_dict", "isinstance", "list", "dt.keys", "print", "isinstance", "dt.keys", "print", "isinstance", "len", "print", "torch.is_tensor", "len", "print", "print"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.debug_utils.print_dict", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "print_dict", "(", "dt", ")", ":", "\n", "    ", "print", "(", "'Dict has {} keys: {}'", ".", "format", "(", "len", "(", "list", "(", "dt", ".", "keys", "(", ")", ")", ")", ",", "list", "(", "dt", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "key", ",", "value", "in", "dt", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "print", "(", "'Dict {}'", ".", "format", "(", "key", ")", ")", "\n", "print_dict", "(", "value", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "            ", "print", "(", "'List {}, length {}'", ".", "format", "(", "key", ",", "len", "(", "value", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "tuple", ")", ":", "\n", "            ", "print", "(", "'Tuple {}, length {}'", ".", "format", "(", "key", ",", "len", "(", "value", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "print", "(", "'Np {}, shape {}, dtype {}'", ".", "format", "(", "key", ",", "value", ".", "shape", ",", "value", ".", "dtype", ")", ")", "\n", "", "elif", "torch", ".", "is_tensor", "(", "value", ")", ":", "\n", "            ", "print", "(", "'Torch Tensor {}, shape {}, on {}'", ".", "format", "(", "key", ",", "value", ".", "shape", ",", "value", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "key", ",", "value", ")", "\n", "", "", "print", "(", "'-'", "*", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.get_remove_keys": [[149, 156], ["targets.append"], "function", ["None"], ["", "def", "get_remove_keys", "(", "dt", ",", "keys", "=", "[", "]", ")", ":", "\n", "    ", "targets", "=", "[", "]", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "targets", ".", "append", "(", "dt", "[", "key", "]", ")", "\n", "", "for", "key", "in", "keys", ":", "\n", "        ", "del", "dt", "[", "key", "]", "\n", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.reorganize_items": [[158, 164], ["enumerate", "range", "items_new[].append", "len"], "function", ["None"], ["", "def", "reorganize_items", "(", "items", ",", "reorganize_idx", ")", ":", "\n", "    ", "items_new", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "items", ")", ")", "]", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "items", ")", ":", "\n", "        ", "for", "ridx", "in", "reorganize_idx", ":", "\n", "            ", "items_new", "[", "idx", "]", ".", "append", "(", "item", "[", "ridx", "]", ")", "\n", "", "", "return", "items_new", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.exclude_params": [[166, 175], ["logging.info", "enumerate", "params.named_parameters", "del_keys.append"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info"], ["", "def", "exclude_params", "(", "params", ",", "excluding", "=", "[", "'parser'", ",", "'loss'", "]", ")", ":", "\n", "    ", "del_keys", "=", "[", "]", "\n", "for", "exclude_name", "in", "excluding", ":", "\n", "        ", "for", "index", ",", "(", "name", ",", "param", ")", "in", "enumerate", "(", "params", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "exclude_name", "in", "name", ":", "\n", "                ", "del_keys", ".", "append", "(", "name", ")", "\n", "", "param", ".", "requires_grad", "=", "False", "\n", "", "", "logging", ".", "info", "(", "'Remove {} params from optimzer list'", ".", "format", "(", "del_keys", ")", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.print_net": [[177, 187], ["print", "model.parameters", "len", "print", "print", "states.append"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "print_net", "(", "model", ",", "name", ")", ":", "\n", "    ", "print", "(", "name", ",", "'requires_grad'", ")", "\n", "states", "=", "[", "]", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "states", ".", "append", "(", "param", ".", "name", ")", "\n", "", "", "if", "len", "(", "states", ")", "<", "1", ":", "\n", "        ", "print", "(", "'All parameters are trainable.'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.write2log": [[188, 191], ["open", "f.write"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write"], ["", "", "def", "write2log", "(", "log_file", ",", "massage", ")", ":", "\n", "    ", "with", "open", "(", "log_file", ",", "\"a\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "massage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.process_pretrained": [[192, 202], ["list", "model_dict.keys", "int", "key.split", "key.split", "str"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "", "def", "process_pretrained", "(", "model_dict", ")", ":", "\n", "    ", "keys", "=", "list", "(", "model_dict", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "'module.net.features'", "in", "key", ":", "\n", "            ", "num", "=", "int", "(", "key", ".", "split", "(", "'.'", ")", "[", "-", "2", "]", ")", "\n", "if", "num", "==", "0", ":", "\n", "                ", "continue", "\n", "", "type_name", "=", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "model_dict", "[", "'module.net.features.'", "+", "str", "(", "num", "+", "1", ")", "+", "'.'", "+", "type_name", "]", "=", "model_dict", "[", "key", "]", "\n", "", "", "return", "model_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.train_entire_model": [[204, 219], ["enumerate", "net.named_parameters", "len", "logging.info", "logging.info", "exclude_layer.append"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info"], ["", "def", "train_entire_model", "(", "net", ")", ":", "\n", "    ", "exclude_layer", "=", "[", "]", "\n", "for", "index", ",", "(", "name", ",", "param", ")", "in", "enumerate", "(", "net", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "if", "'smpl'", "not", "in", "name", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "else", ":", "\n", "            ", "if", "param", ".", "requires_grad", ":", "\n", "                ", "exclude_layer", ".", "append", "(", "name", ")", "\n", "", "param", ".", "requires_grad", "=", "False", "\n", "", "", "if", "len", "(", "exclude_layer", ")", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "'Training all layers.'", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'Train all layers, except: {}'", ".", "format", "(", "exclude_layer", ")", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.init_seeds": [[220, 232], ["random.seed", "numpy.random.seed", "torch.manual_seed"], "function", ["None"], ["", "def", "init_seeds", "(", "seed", "=", "0", ",", "cuda_deterministic", "=", "False", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "# Speed-reproducibility tradeoff https://pytorch.org/docs/stable/notes/randomness.html", "\n", "if", "cuda_deterministic", ":", "# slower, more reproducible", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "", "else", ":", "# faster, less reproducible", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular": [[5, 11], ["rot6d_to_rotmat().view", "rotation_matrix_to_angle_axis().reshape", "rot_6D.rot6d_to_rotmat", "rot_6D.rotation_matrix_to_angle_axis", "rot6d_to_rotmat().view.reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6d_to_rotmat", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rotation_matrix_to_angle_axis"], ["def", "rot6D_to_angular", "(", "rot6D", ")", ":", "\n", "    ", "batch_size", "=", "rot6D", ".", "shape", "[", "0", "]", "\n", "pred_rotmat", "=", "rot6d_to_rotmat", "(", "rot6D", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "pose", "=", "rotation_matrix_to_angle_axis", "(", "\n", "pred_rotmat", ".", "reshape", "(", "-", "1", ",", "3", ",", "3", ")", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6d_to_rotmat_batch": [[12, 32], ["x.view.view", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.cross", "torch.stack", "torch.einsum().unsqueeze", "torch.einsum"], "function", ["None"], ["", "def", "rot6d_to_rotmat_batch", "(", "x", ")", ":", "\n", "    ", "\"\"\"Convert 6D rotation representation to 3x3 rotation matrix.\n    Based on Zhou et al., \"On the Continuity of Rotation Representations in Neural Networks\", CVPR 2019\n    Input:\n        (B,6) Batch of 6-D rotation representations\n    Output:\n        (B,3,3) Batch of corresponding rotation matrices\n    \"\"\"", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "2", ")", "\n", "a1", "=", "x", "[", ":", ",", ":", ",", "0", "]", "\n", "a2", "=", "x", "[", ":", ",", ":", ",", "1", "]", "\n", "b1", "=", "F", ".", "normalize", "(", "a1", ")", "\n", "b2", "=", "F", ".", "normalize", "(", "a2", "-", "torch", ".", "einsum", "(", "'bi,bi->b'", ",", "b1", ",", "a2", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "b1", ")", "\n", "\n", "# inp = a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1", "\n", "# denom = inp.pow(2).sum(dim=1).sqrt().unsqueeze(-1) + 1e-8", "\n", "# b2 = inp / denom", "\n", "\n", "b3", "=", "torch", ".", "cross", "(", "b1", ",", "b2", ")", "\n", "return", "torch", ".", "stack", "(", "(", "b1", ",", "b2", ",", "b3", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6d_to_rotmat": [[33, 48], ["x.view.view", "torch.nn.functional.normalize", "torch.sum", "torch.nn.functional.normalize", "torch.cross", "torch.stack"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "rot6d_to_rotmat", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "2", ")", "\n", "\n", "# Normalize the first vector", "\n", "b1", "=", "F", ".", "normalize", "(", "x", "[", ":", ",", ":", ",", "0", "]", ",", "dim", "=", "1", ",", "eps", "=", "1e-6", ")", "\n", "\n", "dot_prod", "=", "torch", ".", "sum", "(", "b1", "*", "x", "[", ":", ",", ":", ",", "1", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "# Compute the second vector by finding the orthogonal complement to it", "\n", "b2", "=", "F", ".", "normalize", "(", "x", "[", ":", ",", ":", ",", "1", "]", "-", "dot_prod", "*", "b1", ",", "dim", "=", "-", "1", ",", "eps", "=", "1e-6", ")", "\n", "\n", "# Finish building the basis by taking the cross product", "\n", "b3", "=", "torch", ".", "cross", "(", "b1", ",", "b2", ",", "dim", "=", "1", ")", "\n", "rot_mats", "=", "torch", ".", "stack", "(", "[", "b1", ",", "b2", ",", "b3", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "rot_mats", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.batch_rodrigues": [[50, 63], ["torch.norm", "torch.unsqueeze", "torch.div", "torch.cos", "torch.sin", "torch.cat", "rot_6D.quat2mat", "rot_mat.view.view"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.quat2mat"], ["", "def", "batch_rodrigues", "(", "axisang", ")", ":", "\n", "# This function is borrowed from https://github.com/MandyMo/pytorch_HMR/blob/master/src/util.py#L37", "\n", "# axisang N x 3", "\n", "    ", "axisang_norm", "=", "torch", ".", "norm", "(", "axisang", "+", "1e-8", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "angle", "=", "torch", ".", "unsqueeze", "(", "axisang_norm", ",", "-", "1", ")", "\n", "axisang_normalized", "=", "torch", ".", "div", "(", "axisang", ",", "angle", ")", "\n", "angle", "=", "angle", "*", "0.5", "\n", "v_cos", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "v_sin", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "quat", "=", "torch", ".", "cat", "(", "[", "v_cos", ",", "v_sin", "*", "axisang_normalized", "]", ",", "dim", "=", "1", ")", "\n", "rot_mat", "=", "quat2mat", "(", "quat", ")", "\n", "rot_mat", "=", "rot_mat", ".", "view", "(", "rot_mat", ".", "shape", "[", "0", "]", ",", "9", ")", "\n", "return", "rot_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.quat2mat": [[65, 94], ["quat.size", "torch.stack().view", "norm_quat.norm", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack"], "function", ["None"], ["", "def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "\"\"\"\n    This function is borrowed from https://github.com/MandyMo/pytorch_HMR/blob/master/src/util.py#L50\n\n    Convert quaternion coefficients to rotation matrix.\n    Args:\n        quat: size = [batch_size, 4] 4 <===>(w, x, y, z)\n    Returns:\n        Rotation matrix corresponding to the quaternion -- size = [batch_size, 3, 3]\n    \"\"\"", "\n", "norm_quat", "=", "quat", "\n", "norm_quat", "=", "norm_quat", "/", "norm_quat", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "norm_quat", "[", ":", ",", "0", "]", ",", "norm_quat", "[", ":", ",", "1", "]", ",", "norm_quat", "[", ":", ",", "\n", "2", "]", ",", "norm_quat", "[", ":", ",", "\n", "3", "]", "\n", "\n", "batch_size", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "\n", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "2", "*", "wz", "+", "2", "*", "xy", ",", "\n", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "\n", "w2", "-", "x2", "-", "y2", "+", "z2", "\n", "]", ",", "\n", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rotation_matrix_to_angle_axis": [[415, 433], ["rot_6D.rotation_matrix_to_quaternion", "rot_6D.quaternion_to_angle_axis", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rotation_matrix_to_quaternion", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.quaternion_to_angle_axis"], ["def", "rotation_matrix_to_angle_axis", "(", "rotation_matrix", ")", ":", "\n", "    ", "\"\"\"\n    Convert 3x4 rotation matrix to Rodrigues vector\n    Args:\n        rotation_matrix (Tensor): rotation matrix.\n    Returns:\n        Tensor: Rodrigues vector transformation.\n    Shape:\n        - Input: :math:`(N, 3, 4)`\n        - Output: :math:`(N, 3)`\n    Example:\n        >>> input = torch.rand(2, 3, 4)  # Nx4x4\n        >>> output = tgm.rotation_matrix_to_angle_axis(input)  # Nx3\n    \"\"\"", "\n", "quaternion", "=", "rotation_matrix_to_quaternion", "(", "rotation_matrix", ")", "\n", "aa", "=", "quaternion_to_angle_axis", "(", "quaternion", ")", "\n", "aa", "[", "torch", ".", "isnan", "(", "aa", ")", "]", "=", "0.0", "\n", "return", "aa", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.quaternion_to_angle_axis": [[434, 485], ["torch.sqrt", "torch.where", "torch.is_tensor", "TypeError", "ValueError", "torch.where", "torch.ones_like", "torch.zeros_like", "torch.atan2", "torch.atan2", "type"], "function", ["None"], ["", "def", "quaternion_to_angle_axis", "(", "quaternion", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    This function is borrowed from https://github.com/kornia/kornia\n\n    Convert quaternion vector to angle axis of rotation.\n\n    Adapted from ceres C++ library: ceres-solver/include/ceres/rotation.h\n\n    Args:\n        quaternion (torch.Tensor): tensor with quaternions.\n\n    Return:\n        torch.Tensor: tensor with angle axis of rotation.\n\n    Shape:\n        - Input: :math:`(*, 4)` where `*` means, any number of dimensions\n        - Output: :math:`(*, 3)`\n\n    Example:\n        >>> quaternion = torch.rand(2, 4)  # Nx4\n        >>> angle_axis = tgm.quaternion_to_angle_axis(quaternion)  # Nx3\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "quaternion", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", ".", "format", "(", "\n", "type", "(", "quaternion", ")", ")", ")", "\n", "\n", "", "if", "not", "quaternion", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input must be a tensor of shape Nx4 or 4. Got {}\"", "\n", ".", "format", "(", "quaternion", ".", "shape", ")", ")", "\n", "# unpack input and compute conversion", "\n", "", "q1", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "1", "]", "\n", "q2", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "2", "]", "\n", "q3", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "3", "]", "\n", "sin_squared_theta", ":", "torch", ".", "Tensor", "=", "q1", "*", "q1", "+", "q2", "*", "q2", "+", "q3", "*", "q3", "\n", "\n", "sin_theta", ":", "torch", ".", "Tensor", "=", "torch", ".", "sqrt", "(", "sin_squared_theta", ")", "\n", "cos_theta", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "0", "]", "\n", "two_theta", ":", "torch", ".", "Tensor", "=", "2.0", "*", "torch", ".", "where", "(", "\n", "cos_theta", "<", "0.0", ",", "\n", "torch", ".", "atan2", "(", "-", "sin_theta", ",", "-", "cos_theta", ")", ",", "\n", "torch", ".", "atan2", "(", "sin_theta", ",", "cos_theta", ")", ")", "\n", "\n", "k_pos", ":", "torch", ".", "Tensor", "=", "two_theta", "/", "sin_theta", "\n", "k_neg", ":", "torch", ".", "Tensor", "=", "2.0", "*", "torch", ".", "ones_like", "(", "sin_theta", ")", "\n", "k", ":", "torch", ".", "Tensor", "=", "torch", ".", "where", "(", "sin_squared_theta", ">", "0.0", ",", "k_pos", ",", "k_neg", ")", "\n", "\n", "angle_axis", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros_like", "(", "quaternion", ")", "[", "...", ",", ":", "3", "]", "\n", "angle_axis", "[", "...", ",", "0", "]", "+=", "q1", "*", "k", "\n", "angle_axis", "[", "...", ",", "1", "]", "+=", "q2", "*", "k", "\n", "angle_axis", "[", "...", ",", "2", "]", "+=", "q3", "*", "k", "\n", "return", "angle_axis", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rotation_matrix_to_quaternion": [[486, 562], ["torch.transpose", "torch.stack", "t0.repeat().t", "torch.stack", "t1.repeat().t", "torch.stack", "t2.repeat().t", "torch.stack", "t3.repeat().t", "mask_c0.view().type_as.view().type_as", "mask_c1.view().type_as.view().type_as", "mask_c2.view().type_as.view().type_as", "mask_c3.view().type_as.view().type_as", "torch.is_tensor", "TypeError", "len", "ValueError", "t0.repeat", "t1.repeat", "t2.repeat", "t3.repeat", "mask_c0.view().type_as.view", "mask_c1.view().type_as.view", "mask_c2.view().type_as.view", "mask_c3.view().type_as.view", "torch.sqrt", "type"], "function", ["None"], ["", "def", "rotation_matrix_to_quaternion", "(", "rotation_matrix", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"\n    This function is borrowed from https://github.com/kornia/kornia\n\n    Convert 3x4 rotation matrix to 4d quaternion vector\n\n    This algorithm is based on algorithm described in\n    https://github.com/KieranWynn/pyquaternion/blob/master/pyquaternion/quaternion.py#L201\n\n    Args:\n        rotation_matrix (Tensor): the rotation matrix to convert.\n\n    Return:\n        Tensor: the rotation in quaternion\n\n    Shape:\n        - Input: :math:`(N, 3, 4)`\n        - Output: :math:`(N, 4)`\n\n    Example:\n        >>> input = torch.rand(4, 3, 4)  # Nx3x4\n        >>> output = tgm.rotation_matrix_to_quaternion(input)  # Nx4\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "rotation_matrix", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", ".", "format", "(", "\n", "type", "(", "rotation_matrix", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "rotation_matrix", ".", "shape", ")", ">", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Input size must be a three dimensional tensor. Got {}\"", ".", "format", "(", "\n", "rotation_matrix", ".", "shape", ")", ")", "\n", "\n", "", "rmat_t", "=", "torch", ".", "transpose", "(", "rotation_matrix", ",", "1", ",", "2", ")", "\n", "\n", "mask_d2", "=", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "<", "eps", "\n", "\n", "mask_d0_d1", "=", "rmat_t", "[", ":", ",", "0", ",", "0", "]", ">", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "\n", "mask_d0_nd1", "=", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "<", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "\n", "\n", "t0", "=", "1", "+", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q0", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "\n", "t0", ",", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "0", ",", "2", "]", "]", ",", "-", "1", ")", "\n", "t0_rep", "=", "t0", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t1", "=", "1", "-", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q1", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "t1", ",", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "1", "]", "]", ",", "-", "1", ")", "\n", "t1_rep", "=", "t1", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t2", "=", "1", "-", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q2", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "t2", "]", ",", "-", "1", ")", "\n", "t2_rep", "=", "t2", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t3", "=", "1", "+", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q3", "=", "torch", ".", "stack", "(", "[", "t3", ",", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "0", "]", "]", ",", "-", "1", ")", "\n", "t3_rep", "=", "t3", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "mask_c0", "=", "mask_d2", "*", "mask_d0_d1", "\n", "mask_c1", "=", "mask_d2", "*", "~", "mask_d0_d1", "\n", "mask_c2", "=", "~", "mask_d2", "*", "mask_d0_nd1", "\n", "mask_c3", "=", "~", "mask_d2", "*", "~", "mask_d0_nd1", "\n", "mask_c0", "=", "mask_c0", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q0", ")", "\n", "mask_c1", "=", "mask_c1", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q1", ")", "\n", "mask_c2", "=", "mask_c2", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q2", ")", "\n", "mask_c3", "=", "mask_c3", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q3", ")", "\n", "\n", "q", "=", "q0", "*", "mask_c0", "+", "q1", "*", "mask_c1", "+", "q2", "*", "mask_c2", "+", "q3", "*", "mask_c3", "\n", "q", "=", "q", "/", "torch", ".", "sqrt", "(", "t0_rep", "*", "mask_c0", "+", "t1_rep", "*", "mask_c1", "+", "# noqa", "\n", "t2_rep", "*", "mask_c2", "+", "t3_rep", "*", "mask_c3", ")", "*", "0.5", "# noqa", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.__init__": [[36, 38], ["util.AverageMeter_Dict.reset"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.reset": [[39, 42], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "dict_store", "=", "{", "}", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.update": [[43, 51], ["val.items", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "util.AverageMeter_Dict.dict_store[].append", "value.item.item.item"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "val", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "dict_store", ":", "\n", "                ", "self", ".", "dict_store", "[", "key", "]", "=", "[", "]", "\n", "", "if", "torch", ".", "is_tensor", "(", "value", ")", ":", "\n", "                ", "value", "=", "value", ".", "item", "(", ")", "\n", "", "self", ".", "dict_store", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "", "self", ".", "count", "+=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum": [[52, 57], ["util.AverageMeter_Dict.dict_store.items", "round", "float", "util.AverageMeter_Dict.sum"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "sum", "(", "self", ")", ":", "\n", "        ", "dict_sum", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "dict_store", ".", "items", "(", ")", ":", "\n", "            ", "dict_sum", "[", "k", "]", "=", "round", "(", "float", "(", "sum", "(", "v", ")", ")", ",", "2", ")", "\n", "", "return", "dict_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.avg": [[58, 64], ["util.AverageMeter_Dict.sum", "util.AverageMeter_Dict.items", "round"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "avg", "(", "self", ")", ":", "\n", "        ", "dict_sum", "=", "self", ".", "sum", "(", ")", "\n", "dict_avg", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "dict_sum", ".", "items", "(", ")", ":", "\n", "            ", "dict_avg", "[", "k", "]", "=", "round", "(", "v", "/", "self", ".", "count", ",", "2", ")", "\n", "", "return", "dict_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.__init__": [[69, 71], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.reset": [[72, 77], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0.", "\n", "self", ".", "avg", "=", "0.", "\n", "self", ".", "sum", "=", "0.", "\n", "self", ".", "count", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter.update": [[78, 83], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.get_kp2d_on_org_img": [[22, 31], ["print", "torch.is_tensor", "torch.is_tensor", "numpy.ones_like", "offset.detach().cpu().numpy.detach().cpu().numpy", "offset.detach().cpu().numpy.detach().cpu", "offset.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["def", "get_kp2d_on_org_img", "(", "kp2d", ",", "offset", ")", ":", "\n", "    ", "assert", "kp2d", ".", "shape", "[", "1", "]", ">=", "2", ",", "print", "(", "'Espected shape of kp2d is Kx2, while get {}'", ".", "formt", "(", "kp2d", ".", "shape", ")", ")", "\n", "if", "torch", ".", "is_tensor", "(", "offset", ")", ":", "\n", "        ", "offset", "=", "offset", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "pad_size_h", ",", "pad_size_w", ",", "lt_h", ",", "rb_h", ",", "lt_w", ",", "rb_w", ",", "offset_h", ",", "size_h", ",", "offset_w", ",", "size_w", ",", "length", "=", "offset", "\n", "kp2d_onorg", "=", "np", ".", "ones_like", "(", "kp2d", ")", "\n", "kp2d_onorg", "[", ":", ",", "0", "]", "=", "(", "kp2d", "[", ":", ",", "0", "]", "+", "1", ")", "/", "2", "*", "pad_size_w", "-", "offset_w", "+", "lt_w", "\n", "kp2d_onorg", "[", ":", ",", "1", "]", "=", "(", "kp2d", "[", ":", ",", "1", "]", "+", "1", ")", "/", "2", "*", "pad_size_h", "-", "offset_h", "+", "lt_w", "\n", "return", "kp2d_onorg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.normalize_kps": [[85, 94], ["None"], "function", ["None"], ["", "", "def", "normalize_kps", "(", "kps", ",", "image_shape", ",", "resize", "=", "512", ",", "set_minus", "=", "True", ")", ":", "\n", "    ", "kps", "[", ":", ",", "0", "]", "*=", "1.0", "*", "resize", "/", "image_shape", "[", "0", "]", "\n", "kps", "[", ":", ",", "1", "]", "*=", "1.0", "*", "resize", "/", "image_shape", "[", "1", "]", "\n", "kps", "[", ":", ",", ":", "2", "]", "=", "2.0", "*", "kps", "[", ":", ",", ":", "2", "]", "/", "resize", "-", "1.0", "\n", "\n", "if", "kps", ".", "shape", "[", "1", "]", ">", "2", "and", "set_minus", ":", "\n", "        ", "kps", "[", "kps", "[", ":", ",", "2", "]", "<", "0.1", ",", ":", "2", "]", "=", "-", "2.", "\n", "", "kps", "=", "kps", "[", ":", ",", ":", "2", "]", "\n", "return", "kps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.collect_image_list": [[98, 111], ["util.collect_image_list.collect_image_from_subfolders"], "function", ["None"], ["", "def", "collect_image_list", "(", "image_folder", "=", "None", ",", "collect_subdirs", "=", "False", ",", "img_exts", "=", "None", ")", ":", "\n", "\n", "    ", "def", "collect_image_from_subfolders", "(", "image_folder", ",", "file_list", ",", "collect_subdirs", ",", "img_exts", ")", ":", "\n", "        ", "for", "path", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_folder", ",", "'*'", ")", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", "and", "collect_subdirs", ":", "\n", "                ", "collect_image_from_subfolders", "(", "path", ",", "file_list", ",", "collect_subdirs", ",", "img_exts", ")", "\n", "", "elif", "os", ".", "path", ".", "splitext", "(", "path", ")", "[", "1", "]", "in", "img_exts", ":", "\n", "                ", "file_list", ".", "append", "(", "path", ")", "\n", "", "", "return", "file_list", "\n", "\n", "", "file_list", "=", "collect_image_from_subfolders", "(", "image_folder", ",", "[", "]", ",", "collect_subdirs", ",", "img_exts", ")", "\n", "\n", "return", "file_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.save_result_dict_tonpz": [[113, 124], ["results.items", "os.path.join", "numpy.savez", "platform.system", "img_path.split", "img_path.split", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "save_result_dict_tonpz", "(", "results", ",", "test_save_dir", ")", ":", "\n", "    ", "for", "img_path", ",", "result_dict", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "'Windows'", ":", "\n", "            ", "path_list", "=", "img_path", ".", "split", "(", "'\\\\'", ")", "\n", "", "else", ":", "\n", "            ", "path_list", "=", "img_path", ".", "split", "(", "'/'", ")", "\n", "", "file_name", "=", "'_'", ".", "join", "(", "path_list", ")", "\n", "file_name", "=", "'_'", ".", "join", "(", "os", ".", "path", ".", "splitext", "(", "file_name", ")", ")", ".", "replace", "(", "'.'", ",", "''", ")", "+", "'.npz'", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "test_save_dir", ",", "file_name", ")", "\n", "# get the results: np.load('/path/to/person_overlap.npz',allow_pickle=True)['results'][()]", "\n", "np", ".", "savez", "(", "save_path", ",", "results", "=", "result_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.fig2data": [[126, 143], ["fig.canvas.draw", "fig.canvas.get_width_height", "numpy.fromstring", "numpy.roll", "fig.canvas.tostring_argb"], "function", ["None"], ["", "", "def", "fig2data", "(", "fig", ")", ":", "\n", "    ", "\"\"\"\n    @brief Convert a Matplotlib figure to a 4D numpy array with RGBA channels and return it\n    @param fig a matplotlib figure\n    @return a numpy 3D array of RGBA values\n    \"\"\"", "\n", "# draw the renderer", "\n", "fig", ".", "canvas", ".", "draw", "(", ")", "\n", "\n", "# Get the RGBA buffer from the figure", "\n", "w", ",", "h", "=", "fig", ".", "canvas", ".", "get_width_height", "(", ")", "\n", "buf", "=", "np", ".", "fromstring", "(", "fig", ".", "canvas", ".", "tostring_argb", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "buf", ".", "shape", "=", "(", "w", ",", "h", ",", "4", ")", "\n", "\n", "# canvas.tostring_argb give pixmap in ARGB mode. Roll the ALPHA channel to have it in RGBA mode", "\n", "buf", "=", "np", ".", "roll", "(", "buf", ",", "3", ",", "axis", "=", "2", ")", "\n", "return", "buf", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.plt2np": [[144, 157], ["io.BytesIO", "plt.savefig", "io.BytesIO.seek", "Image.open", "numpy.asarray", "io.BytesIO.close"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close"], ["", "def", "plt2np", "(", "plt", ")", ":", "\n", "#\u7533\u8bf7\u7f13\u51b2\u5730\u5740", "\n", "    ", "buffer_", "=", "BytesIO", "(", ")", "#using buffer,great way!", "\n", "#\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u800c\u4e0d\u662f\u5728\u672c\u5730\u78c1\u76d8\uff0c\u6ce8\u610f\u8fd9\u4e2a\u9ed8\u8ba4\u8ba4\u4e3a\u4f60\u8981\u4fdd\u5b58\u7684\u5c31\u662fplt\u4e2d\u7684\u5185\u5bb9", "\n", "plt", ".", "savefig", "(", "buffer_", ",", "format", "=", "'png'", ")", "\n", "buffer_", ".", "seek", "(", "0", ")", "\n", "#\u7528PIL\u6216CV2\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6", "\n", "dataPIL", "=", "Image", ".", "open", "(", "buffer_", ")", "\n", "#\u8f6c\u6362\u4e3anparrary\uff0cPIL\u8f6c\u6362\u5c31\u975e\u5e38\u5feb\u4e86,data\u5373\u4e3a\u6240\u9700", "\n", "data", "=", "np", ".", "asarray", "(", "dataPIL", ")", "\n", "\n", "buffer_", ".", "close", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.save_pkl": [[158, 164], ["util.check_file_and_remake", "name.replace", "open", "pickle.dump", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.check_file_and_remake", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump"], ["", "def", "save_pkl", "(", "info", ",", "name", "=", "'../data/info.pkl'", ")", ":", "\n", "    ", "check_file_and_remake", "(", "name", ".", "replace", "(", "os", ".", "path", ".", "basename", "(", "name", ")", ",", "''", ")", ")", "\n", "if", "name", "[", "-", "4", ":", "]", "!=", "'.pkl'", ":", "\n", "        ", "name", "+=", "'.pkl'", "\n", "", "with", "open", "(", "name", ",", "'wb'", ")", "as", "outfile", ":", "\n", "        ", "pickle", ".", "dump", "(", "info", ",", "outfile", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.save_yaml": [[165, 168], ["open", "yaml.dump"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump"], ["", "", "def", "save_yaml", "(", "dict_file", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "documents", "=", "yaml", ".", "dump", "(", "dict_file", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.read_pkl": [[169, 172], ["open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "", "def", "read_pkl", "(", "name", "=", "'../data/info.pkl'", ")", ":", "\n", "    ", "with", "open", "(", "name", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.read_pkl_coding": [[173, 179], ["open", "pickle._Unpickler", "pickle._Unpickler.load"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "", "def", "read_pkl_coding", "(", "name", "=", "'../data/info.pkl'", ")", ":", "\n", "    ", "with", "open", "(", "name", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "p", "=", "u", ".", "load", "(", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.check_file_and_remake": [[180, 186], ["os.path.isdir", "os.path.isdir", "os.makedirs", "shutil.rmtree"], "function", ["None"], ["", "def", "check_file_and_remake", "(", "path", ",", "remove", "=", "False", ")", ":", "\n", "    ", "if", "remove", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "path", ")", "\n", "", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.save_h5": [[187, 195], ["util.check_file_and_remake", "h5py.File", "info.items", "h5py.File.close", "name.replace", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.check_file_and_remake", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close"], ["", "", "def", "save_h5", "(", "info", ",", "name", ")", ":", "\n", "    ", "check_file_and_remake", "(", "name", ".", "replace", "(", "os", ".", "path", ".", "basename", "(", "name", ")", ",", "''", ")", ")", "\n", "if", "name", "[", "-", "3", ":", "]", "!=", "'.h5'", ":", "\n", "        ", "name", "+=", "'.h5'", "\n", "", "f", "=", "h5py", ".", "File", "(", "name", ",", "'w'", ")", "\n", "for", "item", ",", "value", "in", "info", ".", "items", "(", ")", ":", "\n", "        ", "f", "[", "item", "]", "=", "value", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.read_h5": [[196, 205], ["h5py.File", "h5py.File.items", "h5py.File.close", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close"], ["", "def", "read_h5", "(", "name", ")", ":", "\n", "    ", "if", "name", "[", "-", "3", ":", "]", "!=", "'.h5'", ":", "\n", "        ", "name", "+=", "'.h5'", "\n", "", "f", "=", "h5py", ".", "File", "(", "name", ",", "'r'", ")", "\n", "info", "=", "{", "}", "\n", "for", "item", ",", "value", "in", "f", ".", "items", "(", ")", ":", "\n", "        ", "info", "[", "item", "]", "=", "np", ".", "array", "(", "value", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.save_obj": [[206, 214], ["open", "fp.write", "fp.write"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write"], ["", "def", "save_obj", "(", "verts", ",", "faces", ",", "obj_mesh_name", "=", "'mesh.obj'", ")", ":", "\n", "#print('Saving:',obj_mesh_name)", "\n", "    ", "with", "open", "(", "obj_mesh_name", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "for", "v", "in", "verts", ":", "\n", "            ", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", "\n", "\n", "", "for", "f", "in", "faces", ":", "# Faces are 1-based, not 0-based in obj files", "\n", "            ", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "f", "[", "0", "]", "+", "1", ",", "f", "[", "1", "]", "+", "1", ",", "f", "[", "2", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.save_json": [[215, 219], ["json.dumps", "open", "json_file.write"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write"], ["", "", "", "def", "save_json", "(", "dicts", ",", "name", ")", ":", "\n", "    ", "json_str", "=", "json", ".", "dumps", "(", "dicts", ")", "\n", "with", "open", "(", "name", ",", "'w'", ")", "as", "json_file", ":", "\n", "        ", "json_file", ".", "write", "(", "json_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.BHWC_to_BCHW": [[222, 228], ["x.unsqueeze().transpose().squeeze", "x.unsqueeze().transpose", "x.unsqueeze"], "function", ["None"], ["", "", "def", "BHWC_to_BCHW", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    :param x: torch tensor, B x H x W x C\n    :return:  torch tensor, B x C x H x W\n    \"\"\"", "\n", "return", "x", ".", "unsqueeze", "(", "1", ")", ".", "transpose", "(", "1", ",", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.wrap": [[231, 263], ["list", "enumerate", "func", "isinstance", "list", "enumerate", "tuple", "type", "torch.from_numpy", "torch.from_numpy", "type", "result.squeeze.numpy", "args[].unsqueeze", "type", "res.squeeze.numpy", "result.squeeze.squeeze", "res.squeeze.squeeze"], "function", ["None"], ["", "def", "wrap", "(", "func", ",", "*", "args", ",", "unsqueeze", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    \u5bf9pytorch\u7684\u51fd\u6570\u8fdb\u884c\u5c01\u88c5\uff0c\u4f7f\u5176\u53ef\u4ee5\u88abnparray\u8c03\u7528\u3002\n    Wrap a torch function so it can be called with NumPy arrays.\n    Input and return types are seamlessly converted.\n    \"\"\"", "\n", "\n", "# Convert input types where applicable", "\n", "args", "=", "list", "(", "args", ")", "\n", "for", "i", ",", "arg", "in", "enumerate", "(", "args", ")", ":", "\n", "        ", "if", "type", "(", "arg", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "args", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "arg", ")", "\n", "if", "unsqueeze", ":", "\n", "                ", "args", "[", "i", "]", "=", "args", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "", "", "result", "=", "func", "(", "*", "args", ")", "\n", "\n", "# Convert output types where applicable", "\n", "if", "isinstance", "(", "result", ",", "tuple", ")", ":", "\n", "        ", "result", "=", "list", "(", "result", ")", "\n", "for", "i", ",", "res", "in", "enumerate", "(", "result", ")", ":", "\n", "            ", "if", "type", "(", "res", ")", "==", "torch", ".", "Tensor", ":", "\n", "                ", "if", "unsqueeze", ":", "\n", "                    ", "res", "=", "res", ".", "squeeze", "(", "0", ")", "\n", "", "result", "[", "i", "]", "=", "res", ".", "numpy", "(", ")", "\n", "", "", "return", "tuple", "(", "result", ")", "\n", "", "elif", "type", "(", "result", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "if", "unsqueeze", ":", "\n", "            ", "result", "=", "result", ".", "squeeze", "(", "0", ")", "\n", "", "return", "result", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.write_words2img": [[265, 303], ["ImageFont.truetype", "ImageDraw.Draw", "str", "enumerate", "numpy.asarray", "numpy.zeros", "Image.fromarray", "numpy.asarray", "numpy.zeros", "Image.fromarray", "range", "numpy.uint8", "numpy.uint8", "ImageDraw.Draw.text", "ImageDraw.Draw.text", "len", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "def", "write_words2img", "(", "img", ",", "height_use", ",", "words", ",", "line_length", "=", "20", ",", "line_height", "=", "36", ",", "width_min", "=", "1420", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "duan_space", "=", "True", ")", ":", "\n", "    ", "font", "=", "ImageFont", ".", "truetype", "(", "\"/export/home/suny/shoes_attributes/data/song.ttf\"", ",", "28", ")", "\n", "\n", "words_list", "=", "[", "words", "[", "i", ":", "i", "+", "line_length", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "words", ")", ",", "line_length", ")", "]", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "if", "height_use", "==", "0", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img_new", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", "+", "width_min", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img_new", "[", ":", ",", ":", ",", ":", "]", "=", "255", "\n", "try", ":", "\n", "            ", "img_new", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "img", "\n", "", "except", "Exception", "as", "error", ":", "\n", "            ", "print", "(", "error", ")", "\n", "return", "None", ",", "height_use", ",", "False", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img_new", ")", ")", "\n", "w", "+=", "width_min", "\n", "\n", "", "if", "h", "<", "height_use", "+", "line_height", "*", "len", "(", "words_list", ")", "+", "1", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img_new", "=", "np", ".", "zeros", "(", "(", "height_use", "+", "line_height", "*", "(", "len", "(", "words_list", ")", "+", "1", ")", ",", "w", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img_new", "[", ":", ",", ":", ",", ":", "]", "=", "255", "\n", "img_new", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "img", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img_new", ")", ")", "\n", "\n", "", "draw", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "\n", "words", "=", "str", "(", "words", ")", "\n", "\n", "for", "num", ",", "line", "in", "enumerate", "(", "words_list", ")", ":", "\n", "        ", "if", "num", "==", "0", "and", "duan_space", ":", "\n", "            ", "height_use", "+=", "line_height", "\n", "draw", ".", "text", "(", "(", "w", "-", "width_min", "+", "10", ",", "height_use", ")", ",", "line", ",", "fill", "=", "(", "255", ",", "0", ",", "0", ")", ",", "font", "=", "font", ")", "\n", "", "else", ":", "\n", "            ", "draw", ".", "text", "(", "(", "w", "-", "width_min", "+", "10", ",", "height_use", ")", ",", "line", ",", "fill", "=", "color", ",", "font", "=", "font", ")", "\n", "", "height_use", "+=", "line_height", "\n", "\n", "", "return", "img", ",", "height_use", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.shrink": [[304, 373], ["max", "max", "max", "max", "min", "min", "min", "min", "max", "max", "max", "max"], "function", ["None"], ["", "def", "shrink", "(", "leftTop", ",", "rightBottom", ",", "width", ",", "height", ")", ":", "\n", "    ", "xl", "=", "-", "leftTop", "[", "0", "]", "\n", "xr", "=", "rightBottom", "[", "0", "]", "-", "width", "\n", "\n", "yt", "=", "-", "leftTop", "[", "1", "]", "\n", "yb", "=", "rightBottom", "[", "1", "]", "-", "height", "\n", "\n", "cx", "=", "(", "leftTop", "[", "0", "]", "+", "rightBottom", "[", "0", "]", ")", "/", "2", "\n", "cy", "=", "(", "leftTop", "[", "1", "]", "+", "rightBottom", "[", "1", "]", ")", "/", "2", "\n", "\n", "r", "=", "(", "rightBottom", "[", "0", "]", "-", "leftTop", "[", "0", "]", ")", "/", "2", "\n", "\n", "sx", "=", "max", "(", "xl", ",", "0", ")", "+", "max", "(", "xr", ",", "0", ")", "\n", "sy", "=", "max", "(", "yt", ",", "0", ")", "+", "max", "(", "yb", ",", "0", ")", "\n", "\n", "if", "(", "xl", "<=", "0", "and", "xr", "<=", "0", ")", "or", "(", "yt", "<=", "0", "and", "yb", "<=", "0", ")", ":", "\n", "        ", "return", "leftTop", ",", "rightBottom", "\n", "", "elif", "leftTop", "[", "0", "]", ">=", "0", "and", "leftTop", "[", "1", "]", ">=", "0", ":", "# left top corner is in box", "\n", "        ", "l", "=", "min", "(", "yb", ",", "xr", ")", "\n", "r", "=", "r", "-", "l", "/", "2", "\n", "cx", "=", "cx", "-", "l", "/", "2", "\n", "cy", "=", "cy", "-", "l", "/", "2", "\n", "", "elif", "rightBottom", "[", "0", "]", "<=", "width", "and", "rightBottom", "[", "1", "]", "<=", "height", ":", "# right bottom corner is in box", "\n", "        ", "l", "=", "min", "(", "yt", ",", "xl", ")", "\n", "r", "=", "r", "-", "l", "/", "2", "\n", "cx", "=", "cx", "+", "l", "/", "2", "\n", "cy", "=", "cy", "+", "l", "/", "2", "\n", "", "elif", "leftTop", "[", "0", "]", ">=", "0", "and", "rightBottom", "[", "1", "]", "<=", "height", ":", "#left bottom corner is in box", "\n", "        ", "l", "=", "min", "(", "xr", ",", "yt", ")", "\n", "r", "=", "r", "-", "l", "/", "2", "\n", "cx", "=", "cx", "-", "l", "/", "2", "\n", "cy", "=", "cy", "+", "l", "/", "2", "\n", "", "elif", "rightBottom", "[", "0", "]", "<=", "width", "and", "leftTop", "[", "1", "]", ">=", "0", ":", "#right top corner is in box", "\n", "        ", "l", "=", "min", "(", "xl", ",", "yb", ")", "\n", "r", "=", "r", "-", "l", "/", "2", "\n", "cx", "=", "cx", "+", "l", "/", "2", "\n", "cy", "=", "cy", "-", "l", "/", "2", "\n", "", "elif", "xl", "<", "0", "or", "xr", "<", "0", "or", "yb", "<", "0", "or", "yt", "<", "0", ":", "\n", "        ", "return", "leftTop", ",", "rightBottom", "\n", "", "elif", "sx", ">=", "sy", ":", "\n", "        ", "sx", "=", "max", "(", "xl", ",", "0", ")", "+", "max", "(", "0", ",", "xr", ")", "\n", "sy", "=", "max", "(", "yt", ",", "0", ")", "+", "max", "(", "0", ",", "yb", ")", "\n", "# cy = height / 2", "\n", "if", "yt", ">=", "0", "and", "yb", ">=", "0", ":", "\n", "            ", "cy", "=", "height", "/", "2", "\n", "", "elif", "yt", ">=", "0", ":", "\n", "            ", "cy", "=", "cy", "+", "sy", "/", "2", "\n", "", "else", ":", "\n", "            ", "cy", "=", "cy", "-", "sy", "/", "2", "\n", "", "r", "=", "r", "-", "sy", "/", "2", "\n", "\n", "if", "xl", ">=", "sy", "/", "2", "and", "xr", ">=", "sy", "/", "2", ":", "\n", "            ", "pass", "\n", "", "elif", "xl", "<", "sy", "/", "2", ":", "\n", "            ", "cx", "=", "cx", "-", "(", "sy", "/", "2", "-", "xl", ")", "\n", "", "else", ":", "\n", "            ", "cx", "=", "cx", "+", "(", "sy", "/", "2", "-", "xr", ")", "\n", "", "", "elif", "sx", "<", "sy", ":", "\n", "        ", "cx", "=", "width", "/", "2", "\n", "r", "=", "r", "-", "sx", "/", "2", "\n", "if", "yt", ">=", "sx", "/", "2", "and", "yb", ">=", "sx", "/", "2", ":", "\n", "            ", "pass", "\n", "", "elif", "yt", "<", "sx", "/", "2", ":", "\n", "            ", "cy", "=", "cy", "-", "(", "sx", "/", "2", "-", "yt", ")", "\n", "", "else", ":", "\n", "            ", "cy", "=", "cy", "+", "(", "sx", "/", "2", "-", "yb", ")", "\n", "\n", "\n", "", "", "return", "[", "cx", "-", "r", ",", "cy", "-", "r", "]", ",", "[", "cx", "+", "r", ",", "cy", "+", "r", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.calc_aabb_batch": [[374, 380], ["numpy.concatenate", "numpy.array", "numpy.array", "ptLeftTop.reshape", "ptRightBottom.reshape", "numpy.min", "numpy.min", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "calc_aabb_batch", "(", "ptSets_batch", ")", ":", "\n", "    ", "batch_size", "=", "ptSets_batch", ".", "shape", "[", "0", "]", "\n", "ptLeftTop", "=", "np", ".", "array", "(", "[", "np", ".", "min", "(", "ptSets_batch", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", ",", "np", ".", "min", "(", "ptSets_batch", "[", ":", ",", ":", ",", "1", "]", ",", "axis", "=", "1", ")", "]", ")", ".", "T", "\n", "ptRightBottom", "=", "np", ".", "array", "(", "[", "np", ".", "max", "(", "ptSets_batch", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", ",", "np", ".", "max", "(", "ptSets_batch", "[", ":", ",", ":", ",", "1", "]", ",", "axis", "=", "1", ")", "]", ")", ".", "T", "\n", "bbox", "=", "np", ".", "concatenate", "(", "(", "ptLeftTop", ".", "reshape", "(", "batch_size", ",", "1", ",", "2", ")", ",", "ptRightBottom", ".", "reshape", "(", "batch_size", ",", "1", ",", "2", ")", ")", ",", "axis", "=", "1", ")", "\n", "return", "bbox", "\n", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.calc_obb": [[386, 398], ["numpy.cov", "numpy.linalg.eig", "numpy.transpose", "numpy.dot", "numpy.min", "numpy.max", "numpy.array", "numpy.dot", "numpy.linalg.inv"], "function", ["None"], ["def", "calc_obb", "(", "ptSets", ")", ":", "\n", "    ", "ca", "=", "np", ".", "cov", "(", "ptSets", ",", "y", "=", "None", ",", "rowvar", "=", "0", ",", "bias", "=", "1", ")", "\n", "v", ",", "vect", "=", "np", ".", "linalg", ".", "eig", "(", "ca", ")", "\n", "tvect", "=", "np", ".", "transpose", "(", "vect", ")", "\n", "ar", "=", "np", ".", "dot", "(", "ptSets", ",", "np", ".", "linalg", ".", "inv", "(", "tvect", ")", ")", "\n", "mina", "=", "np", ".", "min", "(", "ar", ",", "axis", "=", "0", ")", "\n", "maxa", "=", "np", ".", "max", "(", "ar", ",", "axis", "=", "0", ")", "\n", "diff", "=", "(", "maxa", "-", "mina", ")", "*", "0.5", "\n", "center", "=", "mina", "+", "diff", "\n", "corners", "=", "np", ".", "array", "(", "[", "center", "+", "[", "-", "diff", "[", "0", "]", ",", "-", "diff", "[", "1", "]", "]", ",", "center", "+", "[", "diff", "[", "0", "]", ",", "-", "diff", "[", "1", "]", "]", ",", "center", "+", "[", "diff", "[", "0", "]", ",", "diff", "[", "1", "]", "]", ",", "center", "+", "[", "-", "diff", "[", "0", "]", ",", "diff", "[", "1", "]", "]", "]", ")", "\n", "corners", "=", "np", ".", "dot", "(", "corners", ",", "tvect", ")", "\n", "return", "corners", "[", "0", "]", ",", "corners", "[", "1", "]", ",", "corners", "[", "2", "]", ",", "corners", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.transform_rot_representation": [[405, 434], ["scipy.spatial.transform.Rotation.from_matrix", "R.from_euler.as_matrix", "scipy.spatial.transform.Rotation.from_quat", "R.from_euler.as_quat", "scipy.spatial.transform.Rotation.from_rotvec", "R.from_euler.as_rotvec", "scipy.spatial.transform.Rotation.from_euler", "R.from_euler.as_euler", "rot.max"], "function", ["None"], ["", "def", "transform_rot_representation", "(", "rot", ",", "input_type", "=", "'mat'", ",", "out_type", "=", "'vec'", ")", ":", "\n", "    ", "'''\n    make transformation between different representation of 3D rotation\n    input_type / out_type (np.array):\n        'mat': rotation matrix (3*3)\n        'quat': quaternion (4)\n        'vec': rotation vector (3)\n        'euler': Euler degrees in x,y,z (3)\n    '''", "\n", "if", "input_type", "==", "'mat'", ":", "\n", "        ", "r", "=", "R", ".", "from_matrix", "(", "rot", ")", "\n", "", "elif", "input_type", "==", "'quat'", ":", "\n", "        ", "r", "=", "R", ".", "from_quat", "(", "rot", ")", "\n", "", "elif", "input_type", "==", "'vec'", ":", "\n", "        ", "r", "=", "R", ".", "from_rotvec", "(", "rot", ")", "\n", "", "elif", "input_type", "==", "'euler'", ":", "\n", "        ", "if", "rot", ".", "max", "(", ")", "<", "4", ":", "\n", "            ", "rot", "=", "rot", "*", "180", "/", "np", ".", "pi", "\n", "", "r", "=", "R", ".", "from_euler", "(", "'xyz'", ",", "rot", ",", "degrees", "=", "True", ")", "\n", "\n", "", "if", "out_type", "==", "'mat'", ":", "\n", "        ", "out", "=", "r", ".", "as_matrix", "(", ")", "\n", "", "elif", "out_type", "==", "'quat'", ":", "\n", "        ", "out", "=", "r", ".", "as_quat", "(", ")", "\n", "", "elif", "out_type", "==", "'vec'", ":", "\n", "        ", "out", "=", "r", ".", "as_rotvec", "(", ")", "\n", "", "elif", "out_type", "==", "'euler'", ":", "\n", "        ", "out", "=", "r", ".", "as_euler", "(", "'xyz'", ",", "degrees", "=", "False", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.compute_similarity_transform": [[436, 485], ["S1.mean", "S2.mean", "numpy.sum", "X1.dot", "numpy.linalg.svd", "numpy.eye", "numpy.sign", "V.dot", "numpy.linalg.det", "np.eye.dot", "numpy.trace", "U.dot", "V.dot.dot", "V.dot.dot", "V.dot.dot"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "compute_similarity_transform", "(", "S1", ",", "S2", ")", ":", "\n", "    ", "'''\n    Computes a similarity transform (sR, t) that takes\n    a set of 3D points S1 (3 x N) closest to a set of 3D points S2,\n    where R is an 3x3 rotation matrix, t 3x1 translation, s scale.\n    i.e. solves the orthogonal Procrutes problem.\n    '''", "\n", "transposed", "=", "False", "\n", "if", "S1", ".", "shape", "[", "0", "]", "!=", "3", "and", "S1", ".", "shape", "[", "0", "]", "!=", "2", ":", "\n", "        ", "S1", "=", "S1", ".", "T", "\n", "S2", "=", "S2", ".", "T", "\n", "transposed", "=", "True", "\n", "", "assert", "(", "S2", ".", "shape", "[", "1", "]", "==", "S1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# 1. Remove mean.", "\n", "mu1", "=", "S1", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "mu2", "=", "S2", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "X1", "=", "S1", "-", "mu1", "\n", "X2", "=", "S2", "-", "mu2", "\n", "\n", "# 2. Compute variance of X1 used for scale.", "\n", "var1", "=", "np", ".", "sum", "(", "X1", "**", "2", ")", "\n", "\n", "# 3. The outer product of X1 and X2.", "\n", "K", "=", "X1", ".", "dot", "(", "X2", ".", "T", ")", "\n", "\n", "# 4. Solution that Maximizes trace(R'K) is R=U*V', where U, V are", "\n", "# singular vectors of K.", "\n", "U", ",", "s", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "K", ")", "\n", "V", "=", "Vh", ".", "T", "\n", "# Construct Z that fixes the orientation of R to get det(R)=1.", "\n", "Z", "=", "np", ".", "eye", "(", "U", ".", "shape", "[", "0", "]", ")", "\n", "Z", "[", "-", "1", ",", "-", "1", "]", "*=", "np", ".", "sign", "(", "np", ".", "linalg", ".", "det", "(", "U", ".", "dot", "(", "V", ".", "T", ")", ")", ")", "\n", "# Construct R.", "\n", "R", "=", "V", ".", "dot", "(", "Z", ".", "dot", "(", "U", ".", "T", ")", ")", "\n", "\n", "# 5. Recover scale.", "\n", "scale", "=", "np", ".", "trace", "(", "R", ".", "dot", "(", "K", ")", ")", "/", "var1", "\n", "\n", "# 6. Recover translation.", "\n", "t", "=", "mu2", "-", "scale", "*", "(", "R", ".", "dot", "(", "mu1", ")", ")", "\n", "\n", "# 7. Error:", "\n", "S1_hat", "=", "scale", "*", "R", ".", "dot", "(", "S1", ")", "+", "t", "\n", "\n", "if", "transposed", ":", "\n", "        ", "S1_hat", "=", "S1_hat", ".", "T", "\n", "\n", "", "return", "S1_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.batch_rodrigues": [[487, 502], ["torch.norm", "torch.norm", "torch.unsqueeze", "torch.unsqueeze", "torch.div", "torch.div", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cat", "torch.cat", "util.quat2mat"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.quat2mat"], ["", "def", "batch_rodrigues", "(", "param", ")", ":", "\n", "#param N x 3", "\n", "    ", "batch_size", "=", "param", ".", "shape", "[", "0", "]", "\n", "#\u6cbf\u7b2c\u4e8c\u7ef4\uff083\u4e2a\u6570\uff09\u8fdb\u884c\u6c42\u4e8c\u6b21\u8303\u6570\uff1a||x||\uff0c\u4e0b\u9762\u5c31\u662f\u8fdb\u884c\u6807\u51c6\u5316\uff0c\u6bcf\u4e09\u4e2a\u6570\u9664\u4ee5\u4ed6\u4eec\u7684\u8303\u6570\u3002", "\n", "l1norm", "=", "torch", ".", "norm", "(", "param", "+", "1e-8", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "angle", "=", "torch", ".", "unsqueeze", "(", "l1norm", ",", "-", "1", ")", "\n", "normalized", "=", "torch", ".", "div", "(", "param", ",", "angle", ")", "\n", "angle", "=", "angle", "*", "0.5", "\n", "#\u4e0a\u9762\u7b97\u51fa\u7684\u662f\u4e00\u4e2a\u5411\u91cf\u7684\u957f\u5ea6\uff1asqrt(x**2+y**2+z**2)/2,\u6240\u4ee5\u8fd9\u4e2a\u957f\u5ea6\u7684\u7684cos", "\n", "v_cos", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "v_sin", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "#\u7528\u56db\u5143\u7ec4\u8868\u793a\u4e09\u7ef4\u65cb\u8f6c\uff0c\u6709\u65f6\u95f4\u770b\u4e00\u4e0b\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7", "\n", "quat", "=", "torch", ".", "cat", "(", "[", "v_cos", ",", "v_sin", "*", "normalized", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "quat2mat", "(", "quat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.quat2mat": [[503, 525], ["quat.size", "torch.stack().view", "torch.stack().view", "norm_quat.norm", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "\"\"\"Convert quaternion coefficients to rotation matrix.\n    \u628a\u56db\u5143\u7ec4\u7684\u7cfb\u6570\u8f6c\u5316\u6210\u65cb\u8f6c\u77e9\u9635\u3002\u56db\u5143\u7ec4\u8868\u793a\u4e09\u7ef4\u65cb\u8f6c\n    Args:\n        quat: size = [B, 4] 4 <===>(w, x, y, z)\n    Returns:\n        Rotation matrix corresponding to the quaternion -- size = [B, 3, 3]\n    \"\"\"", "\n", "norm_quat", "=", "quat", "\n", "norm_quat", "=", "norm_quat", "/", "norm_quat", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "norm_quat", "[", ":", ",", "0", "]", ",", "norm_quat", "[", ":", ",", "1", "]", ",", "norm_quat", "[", ":", ",", "2", "]", ",", "norm_quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.batch_global_rigid_transformation": [[526, 573], ["torch.unsqueeze", "torch.unsqueeze", "util.batch_global_rigid_transformation.make_A"], "function", ["None"], ["", "def", "batch_global_rigid_transformation", "(", "Rs", ",", "Js", ",", "parent", ",", "rotate_base", "=", "False", ",", "root_rot_mat", "=", "None", ")", ":", "\n", "    ", "'''\n    \u8fdb\u884c\u6210\u5806\u7684\u5168\u5c40\u521a\u6027\u53d8\u6362\u3002\n    '''", "\n", "N", "=", "Rs", ".", "shape", "[", "0", "]", "\n", "#\u786e\u5b9a\u6839\u8282\u70b9\u7684\u65cb\u8f6c\u53d8\u6362\u3002", "\n", "if", "rotate_base", ":", "\n", "        ", "np_rot_x", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "-", "1", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "np_rot_x", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "np_rot_x", ",", "[", "N", ",", "1", "]", ")", ",", "[", "N", ",", "3", ",", "3", "]", ")", "\n", "rot_x", "=", "torch", ".", "from_numpy", "(", "np_rot_x", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "root_rotation", "=", "torch", ".", "matmul", "(", "Rs", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "rot_x", ")", "\n", "", "elif", "root_rot_mat", "is", "not", "None", ":", "\n", "        ", "np_rot_x", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "root_rot_mat", ",", "[", "N", ",", "1", "]", ")", ",", "[", "N", ",", "3", ",", "3", "]", ")", "\n", "rot_x", "=", "torch", ".", "from_numpy", "(", "np_rot_x", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "root_rotation", "=", "torch", ".", "matmul", "(", "Rs", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "rot_x", ")", "\n", "", "else", ":", "\n", "        ", "root_rotation", "=", "Rs", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "", "Js", "=", "torch", ".", "unsqueeze", "(", "Js", ",", "-", "1", ")", "\n", "\n", "def", "make_A", "(", "R", ",", "t", ")", ":", "\n", "        ", "R_homo", "=", "F", ".", "pad", "(", "R", ",", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ")", "\n", "t_homo", "=", "torch", ".", "cat", "(", "[", "t", ",", "torch", ".", "ones", "(", "N", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "cat", "(", "[", "R_homo", ",", "t_homo", "]", ",", "2", ")", "\n", "\n", "", "A0", "=", "make_A", "(", "root_rotation", ",", "Js", "[", ":", ",", "0", "]", ")", "\n", "results", "=", "[", "A0", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "parent", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "j_here", "=", "Js", "[", ":", ",", "i", "]", "-", "Js", "[", ":", ",", "parent", "[", "i", "]", "]", "\n", "A_here", "=", "make_A", "(", "Rs", "[", ":", ",", "i", "]", ",", "j_here", ")", "\n", "res_here", "=", "torch", ".", "matmul", "(", "results", "[", "parent", "[", "i", "]", "]", ",", "A_here", ")", "\n", "results", ".", "append", "(", "res_here", ")", "\n", "\n", "", "results", "=", "torch", ".", "stack", "(", "results", ",", "dim", "=", "1", ")", "\n", "\n", "new_J", "=", "results", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "#print('result',results)", "\n", "Js_w0", "=", "torch", ".", "cat", "(", "[", "Js", ",", "torch", ".", "zeros", "(", "N", ",", "24", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "]", ",", "dim", "=", "2", ")", "\n", "#print('js w ',Js_w0)", "\n", "init_bone", "=", "torch", ".", "matmul", "(", "results", ",", "Js_w0", ")", "\n", "#print('init_bone before padded',init_bone)", "\n", "init_bone", "=", "F", ".", "pad", "(", "init_bone", ",", "[", "3", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "#print('init_bone padded',init_bone)", "\n", "A", "=", "results", "-", "init_bone", "\n", "#print('new_J:',new_J)", "\n", "\n", "return", "new_J", ",", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.batch_global_rigid_transformation_cpu": [[574, 616], ["torch.unsqueeze", "torch.unsqueeze", "util.batch_global_rigid_transformation.make_A"], "function", ["None"], ["", "def", "batch_global_rigid_transformation_cpu", "(", "Rs", ",", "Js", ",", "parent", ",", "rotate_base", "=", "False", ",", "root_rot_mat", "=", "None", ")", ":", "\n", "    ", "'''\n    \u8fdb\u884c\u6210\u5806\u7684\u5168\u5c40\u521a\u6027\u53d8\u6362\u3002\n    '''", "\n", "N", "=", "Rs", ".", "shape", "[", "0", "]", "\n", "#\u786e\u5b9a\u6839\u8282\u70b9\u7684\u65cb\u8f6c\u53d8\u6362\u3002", "\n", "if", "rotate_base", ":", "\n", "        ", "np_rot_x", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "-", "1", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "np_rot_x", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "np_rot_x", ",", "[", "N", ",", "1", "]", ")", ",", "[", "N", ",", "3", ",", "3", "]", ")", "\n", "rot_x", "=", "torch", ".", "from_numpy", "(", "np_rot_x", ")", ".", "float", "(", ")", "\n", "root_rotation", "=", "torch", ".", "matmul", "(", "Rs", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "rot_x", ")", "\n", "", "elif", "root_rot_mat", "is", "not", "None", ":", "\n", "        ", "np_rot_x", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "root_rot_mat", ",", "[", "N", ",", "1", "]", ")", ",", "[", "N", ",", "3", ",", "3", "]", ")", "\n", "rot_x", "=", "torch", ".", "from_numpy", "(", "np_rot_x", ")", ".", "float", "(", ")", "\n", "root_rotation", "=", "torch", ".", "matmul", "(", "Rs", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "rot_x", ")", "\n", "", "else", ":", "\n", "        ", "root_rotation", "=", "Rs", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "", "Js", "=", "torch", ".", "unsqueeze", "(", "Js", ",", "-", "1", ")", "\n", "\n", "def", "make_A", "(", "R", ",", "t", ")", ":", "\n", "        ", "R_homo", "=", "F", ".", "pad", "(", "R", ",", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ")", "\n", "t_homo", "=", "torch", ".", "cat", "(", "[", "t", ",", "torch", ".", "ones", "(", "N", ",", "1", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "cat", "(", "[", "R_homo", ",", "t_homo", "]", ",", "2", ")", "\n", "\n", "", "A0", "=", "make_A", "(", "root_rotation", ",", "Js", "[", ":", ",", "0", "]", ")", "\n", "results", "=", "[", "A0", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "parent", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "j_here", "=", "Js", "[", ":", ",", "i", "]", "-", "Js", "[", ":", ",", "parent", "[", "i", "]", "]", "\n", "A_here", "=", "make_A", "(", "Rs", "[", ":", ",", "i", "]", ",", "j_here", ")", "\n", "res_here", "=", "torch", ".", "matmul", "(", "results", "[", "parent", "[", "i", "]", "]", ",", "A_here", ")", "\n", "results", ".", "append", "(", "res_here", ")", "\n", "\n", "", "results", "=", "torch", ".", "stack", "(", "results", ",", "dim", "=", "1", ")", "\n", "\n", "new_J", "=", "results", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "Js_w0", "=", "torch", ".", "cat", "(", "[", "Js", ",", "torch", ".", "zeros", "(", "N", ",", "24", ",", "1", ",", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "init_bone", "=", "torch", ".", "matmul", "(", "results", ",", "Js_w0", ")", "\n", "init_bone", "=", "F", ".", "pad", "(", "init_bone", ",", "[", "3", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "A", "=", "results", "-", "init_bone", "\n", "\n", "return", "new_J", ",", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.batch_lrotmin": [[617, 624], ["param[].contiguous", "util.batch_rodrigues", "torch.eye().float", "torch.eye().float", "Rs.sub.sub", "Rs.sub.view", "param[].contiguous.view", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues"], ["", "def", "batch_lrotmin", "(", "param", ")", ":", "\n", "    ", "param", "=", "param", "[", ":", ",", "3", ":", "]", ".", "contiguous", "(", ")", "\n", "Rs", "=", "batch_rodrigues", "(", "param", ".", "view", "(", "-", "1", ",", "3", ")", ")", "\n", "e", "=", "torch", ".", "eye", "(", "3", ")", ".", "float", "(", ")", "\n", "Rs", "=", "Rs", ".", "sub", "(", "1.0", ",", "e", ")", "\n", "\n", "return", "Rs", ".", "view", "(", "-", "1", ",", "23", "*", "9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rotation_matrix_to_angle_axis": [[626, 656], ["util.rotation_matrix_to_quaternion", "util.quaternion_to_angle_axis", "torch.cat.reshape", "torch.tensor().reshape().expand", "torch.tensor().reshape().expand", "torch.cat", "torch.cat", "torch.isnan", "torch.isnan", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rotation_matrix_to_quaternion", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.quaternion_to_angle_axis"], ["", "def", "rotation_matrix_to_angle_axis", "(", "rotation_matrix", ")", ":", "\n", "    ", "\"\"\"\n    This function is borrowed from https://github.com/kornia/kornia\n\n    Convert 3x4 rotation matrix to Rodrigues vector\n\n    Args:\n        rotation_matrix (Tensor): rotation matrix.\n\n    Returns:\n        Tensor: Rodrigues vector transformation.\n\n    Shape:\n        - Input: :math:`(N, 3, 4)`\n        - Output: :math:`(N, 3)`\n\n    Example:\n        >>> input = torch.rand(2, 3, 4)  # Nx4x4\n        >>> output = tgm.rotation_matrix_to_angle_axis(input)  # Nx3\n    \"\"\"", "\n", "if", "rotation_matrix", ".", "shape", "[", "1", ":", "]", "==", "(", "3", ",", "3", ")", ":", "\n", "        ", "rot_mat", "=", "rotation_matrix", ".", "reshape", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "hom", "=", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "rotation_matrix", ".", "device", ")", ".", "reshape", "(", "1", ",", "3", ",", "1", ")", ".", "expand", "(", "rot_mat", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", "\n", "rotation_matrix", "=", "torch", ".", "cat", "(", "[", "rot_mat", ",", "hom", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "quaternion", "=", "rotation_matrix_to_quaternion", "(", "rotation_matrix", ")", "\n", "aa", "=", "quaternion_to_angle_axis", "(", "quaternion", ")", "\n", "aa", "[", "torch", ".", "isnan", "(", "aa", ")", "]", "=", "0.0", "\n", "return", "aa", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.quaternion_to_angle_axis": [[658, 709], ["torch.sqrt", "torch.sqrt", "torch.where", "torch.where", "torch.is_tensor", "torch.is_tensor", "TypeError", "ValueError", "torch.where", "torch.where", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.atan2", "torch.atan2", "torch.atan2", "torch.atan2", "type"], "function", ["None"], ["", "def", "quaternion_to_angle_axis", "(", "quaternion", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    This function is borrowed from https://github.com/kornia/kornia\n\n    Convert quaternion vector to angle axis of rotation.\n\n    Adapted from ceres C++ library: ceres-solver/include/ceres/rotation.h\n\n    Args:\n        quaternion (torch.Tensor): tensor with quaternions.\n\n    Return:\n        torch.Tensor: tensor with angle axis of rotation.\n\n    Shape:\n        - Input: :math:`(*, 4)` where `*` means, any number of dimensions\n        - Output: :math:`(*, 3)`\n\n    Example:\n        >>> quaternion = torch.rand(2, 4)  # Nx4\n        >>> angle_axis = tgm.quaternion_to_angle_axis(quaternion)  # Nx3\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "quaternion", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", ".", "format", "(", "\n", "type", "(", "quaternion", ")", ")", ")", "\n", "\n", "", "if", "not", "quaternion", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input must be a tensor of shape Nx4 or 4. Got {}\"", "\n", ".", "format", "(", "quaternion", ".", "shape", ")", ")", "\n", "# unpack input and compute conversion", "\n", "", "q1", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "1", "]", "\n", "q2", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "2", "]", "\n", "q3", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "3", "]", "\n", "sin_squared_theta", ":", "torch", ".", "Tensor", "=", "q1", "*", "q1", "+", "q2", "*", "q2", "+", "q3", "*", "q3", "\n", "\n", "sin_theta", ":", "torch", ".", "Tensor", "=", "torch", ".", "sqrt", "(", "sin_squared_theta", ")", "\n", "cos_theta", ":", "torch", ".", "Tensor", "=", "quaternion", "[", "...", ",", "0", "]", "\n", "two_theta", ":", "torch", ".", "Tensor", "=", "2.0", "*", "torch", ".", "where", "(", "\n", "cos_theta", "<", "0.0", ",", "\n", "torch", ".", "atan2", "(", "-", "sin_theta", ",", "-", "cos_theta", ")", ",", "\n", "torch", ".", "atan2", "(", "sin_theta", ",", "cos_theta", ")", ")", "\n", "\n", "k_pos", ":", "torch", ".", "Tensor", "=", "two_theta", "/", "sin_theta", "\n", "k_neg", ":", "torch", ".", "Tensor", "=", "2.0", "*", "torch", ".", "ones_like", "(", "sin_theta", ")", "\n", "k", ":", "torch", ".", "Tensor", "=", "torch", ".", "where", "(", "sin_squared_theta", ">", "0.0", ",", "k_pos", ",", "k_neg", ")", "\n", "\n", "angle_axis", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros_like", "(", "quaternion", ")", "[", "...", ",", ":", "3", "]", "\n", "angle_axis", "[", "...", ",", "0", "]", "+=", "q1", "*", "k", "\n", "angle_axis", "[", "...", ",", "1", "]", "+=", "q2", "*", "k", "\n", "angle_axis", "[", "...", ",", "2", "]", "+=", "q3", "*", "k", "\n", "return", "angle_axis", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rotation_matrix_to_quaternion": [[711, 792], ["torch.transpose", "torch.transpose", "torch.stack", "torch.stack", "t0.repeat().t", "torch.stack", "torch.stack", "t1.repeat().t", "torch.stack", "torch.stack", "t2.repeat().t", "torch.stack", "torch.stack", "t3.repeat().t", "mask_c0.view().type_as.view().type_as", "mask_c1.view().type_as.view().type_as", "mask_c2.view().type_as.view().type_as", "mask_c3.view().type_as.view().type_as", "torch.sqrt", "torch.sqrt", "torch.is_tensor", "torch.is_tensor", "TypeError", "len", "ValueError", "ValueError", "t0.repeat", "t1.repeat", "t2.repeat", "t3.repeat", "mask_c0.view().type_as.view", "mask_c1.view().type_as.view", "mask_c2.view().type_as.view", "mask_c3.view().type_as.view", "type"], "function", ["None"], ["", "def", "rotation_matrix_to_quaternion", "(", "rotation_matrix", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"\n    This function is borrowed from https://github.com/kornia/kornia\n\n    Convert 3x4 rotation matrix to 4d quaternion vector\n\n    This algorithm is based on algorithm described in\n    https://github.com/KieranWynn/pyquaternion/blob/master/pyquaternion/quaternion.py#L201\n\n    Args:\n        rotation_matrix (Tensor): the rotation matrix to convert.\n\n    Return:\n        Tensor: the rotation in quaternion\n\n    Shape:\n        - Input: :math:`(N, 3, 4)`\n        - Output: :math:`(N, 4)`\n\n    Example:\n        >>> input = torch.rand(4, 3, 4)  # Nx3x4\n        >>> output = tgm.rotation_matrix_to_quaternion(input)  # Nx4\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "rotation_matrix", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", ".", "format", "(", "\n", "type", "(", "rotation_matrix", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "rotation_matrix", ".", "shape", ")", ">", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Input size must be a three dimensional tensor. Got {}\"", ".", "format", "(", "\n", "rotation_matrix", ".", "shape", ")", ")", "\n", "", "if", "not", "rotation_matrix", ".", "shape", "[", "-", "2", ":", "]", "==", "(", "3", ",", "4", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Input size must be a N x 3 x 4  tensor. Got {}\"", ".", "format", "(", "\n", "rotation_matrix", ".", "shape", ")", ")", "\n", "\n", "", "rmat_t", "=", "torch", ".", "transpose", "(", "rotation_matrix", ",", "1", ",", "2", ")", "\n", "\n", "mask_d2", "=", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "<", "eps", "\n", "\n", "mask_d0_d1", "=", "rmat_t", "[", ":", ",", "0", ",", "0", "]", ">", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "\n", "mask_d0_nd1", "=", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "<", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "\n", "\n", "t0", "=", "1", "+", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q0", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "\n", "t0", ",", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "0", ",", "2", "]", "]", ",", "-", "1", ")", "\n", "t0_rep", "=", "t0", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t1", "=", "1", "-", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q1", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "t1", ",", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "1", "]", "]", ",", "-", "1", ")", "\n", "t1_rep", "=", "t1", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t2", "=", "1", "-", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q2", "=", "torch", ".", "stack", "(", "[", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "0", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "t2", "]", ",", "-", "1", ")", "\n", "t2_rep", "=", "t2", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "t3", "=", "1", "+", "rmat_t", "[", ":", ",", "0", ",", "0", "]", "+", "rmat_t", "[", ":", ",", "1", ",", "1", "]", "+", "rmat_t", "[", ":", ",", "2", ",", "2", "]", "\n", "q3", "=", "torch", ".", "stack", "(", "[", "t3", ",", "rmat_t", "[", ":", ",", "1", ",", "2", "]", "-", "rmat_t", "[", ":", ",", "2", ",", "1", "]", ",", "\n", "rmat_t", "[", ":", ",", "2", ",", "0", "]", "-", "rmat_t", "[", ":", ",", "0", ",", "2", "]", ",", "\n", "rmat_t", "[", ":", ",", "0", ",", "1", "]", "-", "rmat_t", "[", ":", ",", "1", ",", "0", "]", "]", ",", "-", "1", ")", "\n", "t3_rep", "=", "t3", ".", "repeat", "(", "4", ",", "1", ")", ".", "t", "(", ")", "\n", "\n", "mask_c0", "=", "mask_d2", "*", "mask_d0_d1", "\n", "mask_c1", "=", "mask_d2", "*", "~", "mask_d0_d1", "\n", "mask_c2", "=", "~", "mask_d2", "*", "mask_d0_nd1", "\n", "mask_c3", "=", "~", "mask_d2", "*", "~", "mask_d0_nd1", "\n", "mask_c0", "=", "mask_c0", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q0", ")", "\n", "mask_c1", "=", "mask_c1", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q1", ")", "\n", "mask_c2", "=", "mask_c2", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q2", ")", "\n", "mask_c3", "=", "mask_c3", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "q3", ")", "\n", "\n", "q", "=", "q0", "*", "mask_c0", "+", "q1", "*", "mask_c1", "+", "q2", "*", "mask_c2", "+", "q3", "*", "mask_c3", "\n", "q", "/=", "torch", ".", "sqrt", "(", "t0_rep", "*", "mask_c0", "+", "t1_rep", "*", "mask_c1", "+", "# noqa", "\n", "t2_rep", "*", "mask_c2", "+", "t3_rep", "*", "mask_c3", ")", "# noqa", "\n", "q", "*=", "0.5", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.line_intersect": [[798, 804], ["None"], "function", ["None"], ["def", "line_intersect", "(", "sa", ",", "sb", ")", ":", "\n", "    ", "al", ",", "ar", ",", "bl", ",", "br", "=", "sa", "[", "0", "]", ",", "sa", "[", "1", "]", ",", "sb", "[", "0", "]", ",", "sb", "[", "1", "]", "\n", "assert", "al", "<=", "ar", "and", "bl", "<=", "br", "\n", "if", "al", ">=", "br", "or", "bl", ">=", "ar", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rectangle_intersect": [[809, 817], ["util.line_intersect", "util.line_intersect"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.line_intersect", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.line_intersect"], ["def", "rectangle_intersect", "(", "ra", ",", "rb", ")", ":", "\n", "    ", "ax", "=", "[", "ra", "[", "0", "]", "[", "0", "]", ",", "ra", "[", "1", "]", "[", "0", "]", "]", "\n", "ay", "=", "[", "ra", "[", "0", "]", "[", "1", "]", ",", "ra", "[", "1", "]", "[", "1", "]", "]", "\n", "\n", "bx", "=", "[", "rb", "[", "0", "]", "[", "0", "]", ",", "rb", "[", "1", "]", "[", "0", "]", "]", "\n", "by", "=", "[", "rb", "[", "0", "]", "[", "1", "]", ",", "rb", "[", "1", "]", "[", "1", "]", "]", "\n", "\n", "return", "line_intersect", "(", "ax", ",", "bx", ")", "and", "line_intersect", "(", "ay", ",", "by", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.get_intersected_rectangle": [[818, 831], ["lt0.copy", "rb0.copy", "max", "max", "min", "min", "util.rectangle_intersect"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rectangle_intersect"], ["", "def", "get_intersected_rectangle", "(", "lt0", ",", "rb0", ",", "lt1", ",", "rb1", ")", ":", "\n", "    ", "if", "not", "rectangle_intersect", "(", "[", "lt0", ",", "rb0", "]", ",", "[", "lt1", ",", "rb1", "]", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "", "lt", "=", "lt0", ".", "copy", "(", ")", "\n", "rb", "=", "rb0", ".", "copy", "(", ")", "\n", "\n", "lt", "[", "0", "]", "=", "max", "(", "lt", "[", "0", "]", ",", "lt1", "[", "0", "]", ")", "\n", "lt", "[", "1", "]", "=", "max", "(", "lt", "[", "1", "]", ",", "lt1", "[", "1", "]", ")", "\n", "\n", "rb", "[", "0", "]", "=", "min", "(", "rb", "[", "0", "]", ",", "rb1", "[", "0", "]", ")", "\n", "rb", "[", "1", "]", "=", "min", "(", "rb", "[", "1", "]", ",", "rb1", "[", "1", "]", ")", "\n", "return", "lt", ",", "rb", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.get_union_rectangle": [[832, 842], ["lt0.copy", "rb0.copy", "min", "min", "max", "max"], "function", ["None"], ["", "def", "get_union_rectangle", "(", "lt0", ",", "rb0", ",", "lt1", ",", "rb1", ")", ":", "\n", "    ", "lt", "=", "lt0", ".", "copy", "(", ")", "\n", "rb", "=", "rb0", ".", "copy", "(", ")", "\n", "\n", "lt", "[", "0", "]", "=", "min", "(", "lt", "[", "0", "]", ",", "lt1", "[", "0", "]", ")", "\n", "lt", "[", "1", "]", "=", "min", "(", "lt", "[", "1", "]", ",", "lt1", "[", "1", "]", ")", "\n", "\n", "rb", "[", "0", "]", "=", "max", "(", "rb", "[", "0", "]", ",", "rb1", "[", "0", "]", ")", "\n", "rb", "[", "1", "]", "=", "max", "(", "rb", "[", "1", "]", ",", "rb1", "[", "1", "]", ")", "\n", "return", "lt", ",", "rb", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.get_rectangle_area": [[843, 845], ["None"], "function", ["None"], ["", "def", "get_rectangle_area", "(", "lt", ",", "rb", ")", ":", "\n", "    ", "return", "(", "rb", "[", "0", "]", "-", "lt", "[", "0", "]", ")", "*", "(", "rb", "[", "1", "]", "-", "lt", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.get_rectangle_intersect_ratio": [[846, 853], ["util.get_intersected_rectangle", "util.get_union_rectangle", "util.get_rectangle_area", "util.get_rectangle_area"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.get_intersected_rectangle", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.get_union_rectangle", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.get_rectangle_area", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.get_rectangle_area"], ["", "def", "get_rectangle_intersect_ratio", "(", "lt0", ",", "rb0", ",", "lt1", ",", "rb1", ")", ":", "\n", "    ", "(", "lt0", ",", "rb0", ")", ",", "(", "lt1", ",", "rb1", ")", "=", "get_intersected_rectangle", "(", "lt0", ",", "rb0", ",", "lt1", ",", "rb1", ")", ",", "get_union_rectangle", "(", "lt0", ",", "rb0", ",", "lt1", ",", "rb1", ")", "\n", "\n", "if", "lt0", "is", "None", ":", "\n", "        ", "return", "0.0", "\n", "", "else", ":", "\n", "        ", "return", "1.0", "*", "get_rectangle_area", "(", "lt0", ",", "rb0", ")", "/", "get_rectangle_area", "(", "lt1", ",", "rb1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pyrd.Renderer.__init__": [[8, 18], ["pyrender.OffscreenRenderer", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "focal_length", "=", "600", ",", "height", "=", "512", ",", "width", "=", "512", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "renderer", "=", "pyrender", ".", "OffscreenRenderer", "(", "height", ",", "width", ")", "\n", "self", ".", "camera_center", "=", "np", ".", "array", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", "]", ")", "\n", "self", ".", "focal_length", "=", "focal_length", "\n", "self", ".", "colors", "=", "[", "\n", "(", ".7", ",", ".7", ",", ".6", ",", "1.", ")", ",", "\n", "(", ".7", ",", ".5", ",", ".5", ",", "1.", ")", ",", "# Pink", "\n", "(", ".5", ",", ".5", ",", ".7", ",", "1.", ")", ",", "# Blue", "\n", "(", ".5", ",", ".55", ",", ".3", ",", "1.", ")", ",", "# capsule", "\n", "(", ".3", ",", ".5", ",", ".55", ",", "1.", ")", ",", "# Yellow", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pyrd.Renderer.__call__": [[20, 81], ["trimesh.transformations.rotation_matrix", "verts.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "pyrender.Scene", "pyrender.camera.IntrinsicsCamera", "pyrender.Scene.add", "pyrender.DirectionalLight", "range", "renderer_pyrd.Renderer.renderer.render", "numpy.radians", "faces.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "numpy.eye", "trimesh.Trimesh", "pyrender.Mesh.from_trimesh.apply_transform", "numpy.array", "pyrender.MetallicRoughnessMaterial", "pyrender.Mesh.from_trimesh", "pyrender.Scene.add", "numpy.eye", "pyrender.Scene.add", "pyrender.Scene.add", "pyrender.Scene.add", "verts.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "numpy.array", "numpy.array", "numpy.array", "faces.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "verts.detach().cpu().numpy.detach().cpu().numpy.detach", "faces.detach().cpu().numpy.detach().cpu().numpy.detach", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.Sim3DR.render"], ["", "def", "__call__", "(", "self", ",", "verts", ",", "faces", ",", "colors", "=", "None", ",", "focal_length", "=", "None", ",", "camera_pose", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# Need to flip x-axis", "\n", "        ", "rot", "=", "trimesh", ".", "transformations", ".", "rotation_matrix", "(", "\n", "np", ".", "radians", "(", "180", ")", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "\n", "#self.renderer.viewport_height = img.shape[0]", "\n", "#self.renderer.viewport_width = img.shape[1]", "\n", "num_people", "=", "verts", ".", "shape", "[", "0", "]", "\n", "verts", "=", "verts", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "isinstance", "(", "faces", ",", "torch", ".", "Tensor", ")", ":", "\n", "        \t", "faces", "=", "faces", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Create a scene for each image and render all meshes", "\n", "", "scene", "=", "pyrender", ".", "Scene", "(", "bg_color", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "ambient_light", "=", "(", "0.3", ",", "0.3", ",", "0.3", ")", ")", "\n", "\n", "\n", "# Create camera. Camera will always be at [0,0,0]", "\n", "# CHECK If I need to swap x and y", "\n", "if", "camera_pose", "is", "None", ":", "\n", "            ", "camera_pose", "=", "np", ".", "eye", "(", "4", ")", "\n", "\n", "", "if", "focal_length", "is", "None", ":", "\n", "            ", "fx", ",", "fy", "=", "self", ".", "focal_length", ",", "self", ".", "focal_length", "\n", "", "else", ":", "\n", "            ", "fx", ",", "fy", "=", "focal_length", ",", "focal_length", "\n", "", "camera", "=", "pyrender", ".", "camera", ".", "IntrinsicsCamera", "(", "fx", "=", "fx", ",", "fy", "=", "fy", ",", "\n", "cx", "=", "self", ".", "camera_center", "[", "0", "]", ",", "cy", "=", "self", ".", "camera_center", "[", "1", "]", ")", "\n", "scene", ".", "add", "(", "camera", ",", "pose", "=", "camera_pose", ")", "\n", "# Create light source", "\n", "light", "=", "pyrender", ".", "DirectionalLight", "(", "color", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "intensity", "=", "0.5", ")", "\n", "# for every person in the scene", "\n", "for", "n", "in", "range", "(", "num_people", ")", ":", "\n", "            ", "mesh", "=", "trimesh", ".", "Trimesh", "(", "verts", "[", "n", "]", ",", "faces", "[", "n", "]", ")", "\n", "mesh", ".", "apply_transform", "(", "rot", ")", "\n", "trans", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "if", "colors", "is", "None", ":", "\n", "                ", "mesh_color", "=", "self", ".", "colors", "[", "0", "]", "#self.colors[n % len(self.colors)]", "\n", "", "else", ":", "\n", "                ", "mesh_color", "=", "colors", "[", "n", "%", "len", "(", "colors", ")", "]", "\n", "", "material", "=", "pyrender", ".", "MetallicRoughnessMaterial", "(", "\n", "metallicFactor", "=", "0.2", ",", "\n", "alphaMode", "=", "'OPAQUE'", ",", "\n", "baseColorFactor", "=", "mesh_color", ")", "\n", "mesh", "=", "pyrender", ".", "Mesh", ".", "from_trimesh", "(", "\n", "mesh", ",", "\n", "material", "=", "material", ")", "\n", "scene", ".", "add", "(", "mesh", ",", "'mesh'", ")", "\n", "\n", "# Use 3 directional lights", "\n", "light_pose", "=", "np", ".", "eye", "(", "4", ")", "\n", "light_pose", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "[", "0", ",", "-", "1", ",", "1", "]", ")", "+", "trans", "\n", "scene", ".", "add", "(", "light", ",", "pose", "=", "light_pose", ")", "\n", "light_pose", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "1", "]", ")", "+", "trans", "\n", "scene", ".", "add", "(", "light", ",", "pose", "=", "light_pose", ")", "\n", "light_pose", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "2", "]", ")", "+", "trans", "\n", "scene", ".", "add", "(", "light", ",", "pose", "=", "light_pose", ")", "\n", "# Alpha channel was not working previously need to check again", "\n", "# Until this is fixed use hack with depth image to get the opacity", "\n", "", "color", ",", "rend_depth", "=", "self", ".", "renderer", ".", "render", "(", "scene", ",", "flags", "=", "pyrender", ".", "RenderFlags", ".", "RGBA", ")", "\n", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pyrd.Renderer.delete": [[82, 84], ["renderer_pyrd.Renderer.renderer.delete"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.pyrenderer.Py3DR.delete"], ["", "def", "delete", "(", "self", ")", ":", "\n", "        ", "self", ".", "renderer", ".", "delete", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pyrd.get_renderer": [[85, 100], ["renderer_pyrd.Renderer", "pickle.load", "np_v_template.repeat.repeat", "Renderer.", "cv2.imwrite", "open", "torch.from_numpy().cuda().float", "model[].astype", "os.path.join", "torch.from_numpy().cuda", "args", "torch.from_numpy", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "def", "get_renderer", "(", "test", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "renderer", "=", "Renderer", "(", "**", "kwargs", ")", "\n", "if", "test", ":", "\n", "        ", "import", "cv2", ",", "pickle", ",", "os", "\n", "import", "torch", "\n", "from", "config", "import", "args", "\n", "model", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "smpl_model_path", ",", "'SMPL_NEUTRAL.pkl'", ")", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "np_v_template", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "model", "[", "'v_template'", "]", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "[", "None", "]", "\n", "face", "=", "model", "[", "'f'", "]", ".", "astype", "(", "np", ".", "int32", ")", "[", "None", "]", "\n", "np_v_template", "=", "np_v_template", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "np_v_template", "[", "1", "]", "+=", "0.3", "\n", "np_v_template", "[", ":", ",", ":", ",", "2", "]", "+=", "6", "\n", "result", "=", "renderer", "(", "np_v_template", ",", "face", ")", "\n", "cv2", ".", "imwrite", "(", "'test_pyrenderer.png'", ",", "(", "result", "[", ":", ",", ":", ",", ":", "3", "]", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "return", "renderer", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.vedo_visualizer.Vedo_visualizer.__init__": [[38, 52], ["Light", "Light", "Light", "Light", "config.args", "pickle.load", "numpy.load", "numpy.array", "vedo_visualizer.parse_nvxia_uvmap", "open", "config.args", "os.path.join", "cv2.imread", "os.path.join", "numpy.array", "os.path.join", "config.args", "config.args", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.parse_nvxia_uvmap", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "if", "args", "(", ")", ".", "character", "==", "'smpl'", ":", "\n", "            ", "self", ".", "faces", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "smpl_model_path", ",", "'SMPL_NEUTRAL.pkl'", ")", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "[", "'f'", "]", "\n", "", "elif", "args", "(", ")", ".", "character", "==", "'nvxia'", ":", "\n", "            ", "params_dict", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "nvxia_model_path", ",", "'nvxia.npz'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "faces", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "face", ")", "for", "face", "in", "params_dict", "[", "'polygons'", "]", "]", ")", "\n", "self", ".", "texture_file", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "nvxia_model_path", ",", "'Kachujin_diffuse.png'", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "self", ".", "uvs", "=", "parse_nvxia_uvmap", "(", "params_dict", "[", "'uvmap'", "]", ",", "self", ".", "faces", ")", "\n", "", "self", ".", "scene_bg_color", "=", "[", "240", ",", "255", ",", "255", "]", "\n", "self", ".", "default_camera", "=", "{", "'pos'", ":", "{", "'far'", ":", "(", "0", ",", "800", ",", "1000", ")", ",", "'close'", ":", "(", "0", ",", "200", ",", "800", ")", "}", "[", "args", "(", ")", ".", "soi_camera", "]", "}", "\n", "# Light([0,800,1000], c='white')", "\n", "self", ".", "lights", "=", "[", "Light", "(", "[", "0", ",", "800", ",", "1000", "]", ",", "intensity", "=", "0.6", ",", "c", "=", "'white'", ")", ",", "Light", "(", "[", "0", ",", "-", "800", ",", "1000", "]", ",", "intensity", "=", "0.6", ",", "c", "=", "'white'", ")", ",", "Light", "(", "[", "0", ",", "800", ",", "-", "1000", "]", ",", "intensity", "=", "0.6", ",", "c", "=", "'white'", ")", ",", "Light", "(", "[", "0", ",", "-", "800", ",", "-", "1000", "]", ",", "intensity", "=", "0.6", ",", "c", "=", "'white'", ")", "]", "\n", "vedo", ".", "settings", ".", "screeshotLargeImage", "=", "True", "\n", "vedo", ".", "settings", ".", "screeshotScale", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.vedo_visualizer.Vedo_visualizer.plot_multi_meshes_batch": [[53, 76], ["enumerate", "numpy.unique", "numpy.array", "vedo_visualizer.Vedo_visualizer.plot_multi_meshes", "vedo_visualizer.Vedo_visualizer.close", "vertices[].detach().cpu().numpy", "cam_params[].detach().cpu().numpy", "[].cpu().numpy().astype", "vedo_visualizer.Vedo_visualizer.render_rotating", "vedo_visualizer.Vedo_visualizer.render_one_time", "zip", "numpy.where", "os.path.join", "os.path.join", "cv2.imwrite", "vertices[].detach().cpu", "cam_params[].detach().cpu", "[].cpu().numpy", "config.args", "os.path.basename", "config.args", "os.path.basename", "vertices[].detach", "cam_params[].detach", "[].cpu"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.plot_multi_meshes", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.render_rotating", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.render_one_time", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "plot_multi_meshes_batch", "(", "self", ",", "vertices", ",", "cam_params", ",", "meta_data", ",", "reorganize_idx", ",", "save_img", "=", "True", ",", "interactive_show", "=", "False", ",", "rotate_frames", "=", "[", "]", ")", ":", "\n", "        ", "result_save_names", "=", "[", "]", "\n", "for", "inds", ",", "img_id", "in", "enumerate", "(", "np", ".", "unique", "(", "reorganize_idx", ")", ")", ":", "\n", "            ", "single_img_verts_inds", "=", "np", ".", "array", "(", "np", ".", "where", "(", "reorganize_idx", "==", "img_id", ")", "[", "0", "]", ")", "\n", "\n", "plt", "=", "self", ".", "plot_multi_meshes", "(", "vertices", "[", "single_img_verts_inds", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "cam_params", "[", "single_img_verts_inds", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "meta_data", "[", "'image'", "]", "[", "single_img_verts_inds", "[", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "interactive_show", "=", "interactive_show", ")", "\n", "\n", "if", "img_id", "in", "rotate_frames", ":", "\n", "                ", "result_imgs", ",", "rot_angles", "=", "self", ".", "render_rotating", "(", "plt", ")", "\n", "save_names", "=", "[", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "output_dir", ",", "'3D_meshes-'", "+", "os", ".", "path", ".", "basename", "(", "meta_data", "[", "'imgpath'", "]", "[", "single_img_verts_inds", "[", "0", "]", "]", "+", "'_{:03d}.jpg'", ".", "format", "(", "ra", ")", ")", ")", "for", "ra", "in", "rot_angles", "]", "\n", "", "else", ":", "\n", "                ", "result_imgs", "=", "self", ".", "render_one_time", "(", "plt", ",", "self", ".", "default_camera", ")", "\n", "save_names", "=", "[", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "output_dir", ",", "'3D_meshes-'", "+", "os", ".", "path", ".", "basename", "(", "meta_data", "[", "'imgpath'", "]", "[", "single_img_verts_inds", "[", "0", "]", "]", "+", "'.jpg'", ")", ")", "]", "\n", "\n", "", "plt", ".", "close", "(", ")", "\n", "result_save_names", "+=", "save_names", "\n", "if", "save_img", ":", "\n", "                ", "for", "save_name", ",", "result_img", "in", "zip", "(", "save_names", ",", "result_imgs", ")", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "save_name", ",", "result_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "", "", "return", "result_save_names", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.vedo_visualizer.Vedo_visualizer.plot_multi_meshes": [[77, 111], ["Plotter", "Picture", "Picture.rotateX().z().x", "enumerate", "numpy.stack", "enumerate", "max", "max", "zip", "vedo_visualizer.convert_cam_to_stand_on_image_trans", "numpy.stack.append", "Mesh", "visulize_list.append", "Picture.rotateX().z", "mesh.c().smooth.c().smooth.c().smooth", "config.args", "mesh.c().smooth.c().smooth.c", "mesh.c().smooth.c().smooth.texture().smooth", "Picture.rotateX", "mesh.c().smooth.c().smooth.c", "mesh_colors[].astype", "config.args", "mesh.c().smooth.c().smooth.texture"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.convert_cam_to_stand_on_image_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "plot_multi_meshes", "(", "self", ",", "vertices", ",", "cam_params", ",", "img", ",", "mesh_colors", "=", "None", ",", "interactive_show", "=", "False", ",", "rotate_cam", "=", "False", ")", ":", "\n", "        ", "plt", "=", "Plotter", "(", "bg", "=", "[", "240", ",", "255", ",", "255", "]", ",", "axes", "=", "0", ",", "offscreen", "=", "not", "interactive_show", ")", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "pic", "=", "Picture", "(", "img", ")", "\n", "\n", "pic", ".", "rotateX", "(", "-", "90", ")", ".", "z", "(", "h", "//", "2", ")", ".", "x", "(", "-", "w", "//", "2", ")", "\n", "verts_enlarge_scale", "=", "max", "(", "h", ",", "w", ")", "/", "5", "\n", "cam_enlarge_scale", "=", "max", "(", "h", ",", "w", ")", "/", "3", "\n", "\n", "plt", "+=", "pic", "\n", "vertices_vis", "=", "[", "]", "\n", "\n", "for", "inds", ",", "(", "vert", ",", "cam", ")", "in", "enumerate", "(", "zip", "(", "vertices", ",", "cam_params", ")", ")", ":", "\n", "            ", "trans_3d", "=", "convert_cam_to_stand_on_image_trans", "(", "cam", ",", "cam_enlarge_scale", ")", "#enlarge_scale", "\n", "vert", "[", ":", ",", "1", ":", "]", "*=", "-", "1", "\n", "vert", "=", "vert", "*", "verts_enlarge_scale", "\n", "vert", "+=", "trans_3d", "[", "None", "]", "\n", "vertices_vis", ".", "append", "(", "vert", ")", "\n", "", "vertices_vis", "=", "np", ".", "stack", "(", "vertices_vis", ",", "0", ")", "\n", "\n", "visulize_list", "=", "[", "]", "\n", "for", "inds", ",", "vert", "in", "enumerate", "(", "vertices_vis", ")", ":", "\n", "            ", "mesh", "=", "Mesh", "(", "[", "vert", ",", "self", ".", "faces", "]", ")", "\n", "if", "args", "(", ")", ".", "character", "==", "'smpl'", ":", "\n", "                ", "mesh", "=", "mesh", ".", "c", "(", "[", "255", ",", "255", ",", "255", "]", ")", ".", "smooth", "(", "niter", "=", "20", ")", "\n", "if", "mesh_colors", "is", "not", "None", ":", "\n", "                    ", "mesh", ".", "c", "(", "mesh_colors", "[", "inds", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "", "elif", "args", "(", ")", ".", "character", "==", "'nvxia'", ":", "\n", "                ", "mesh", ".", "texture", "(", "self", ".", "texture_file", ",", "tcoords", "=", "self", ".", "uvs", ")", ".", "smooth", "(", "niter", "=", "20", ")", "#.lighting('glossy')", "\n", "", "visulize_list", ".", "append", "(", "mesh", ")", "\n", "", "plt", "+=", "visulize_list", "\n", "for", "light", "in", "self", ".", "lights", ":", "\n", "            ", "plt", "+=", "light", "\n", "", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.vedo_visualizer.Vedo_visualizer.render_rotating": [[112, 136], ["numpy.zeros().astype", "numpy.concatenate", "numpy.concatenate", "plt.camera.Elevation", "enumerate", "config.args", "numpy.ones", "numpy.sin", "numpy.sin", "plt.show", "plt.topicture", "plt.topicture._data.GetDimensions", "plt.topicture._data.GetPointData().GetScalars", "vtk.util.numpy_support.vtk_to_numpy().reshape", "result_imgs.append", "numpy.arange", "numpy.zeros", "len", "numpy.arange().astype", "plt.topicture._data.GetPointData", "vtk.util.numpy_support.vtk_to_numpy", "numpy.arange().astype", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "render_rotating", "(", "self", ",", "plt", ",", "internal", "=", "5", ")", ":", "\n", "        ", "result_imgs", "=", "[", "]", "\n", "pause_num", "=", "args", "(", ")", ".", "fps_save", "\n", "pause", "=", "np", ".", "zeros", "(", "pause_num", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "change_time", "=", "90", "//", "internal", "\n", "roates", "=", "np", ".", "ones", "(", "change_time", ")", "*", "internal", "\n", "go_up", "=", "np", ".", "sin", "(", "np", ".", "arange", "(", "change_time", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "change_time", ")", "*", "1", "\n", "go_down", "=", "np", ".", "sin", "(", "np", ".", "arange", "(", "change_time", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "change_time", "-", "1", ")", "*", "1", "\n", "#top2front = np.ones(pause_num) * -((90-30)/pause_num)", "\n", "azimuth_angles", "=", "np", ".", "concatenate", "(", "[", "pause", ",", "roates", ",", "roates", ",", "roates", ",", "roates", "]", ")", "\n", "elevation_angles", "=", "np", ".", "concatenate", "(", "[", "pause", ",", "go_up", ",", "go_down", ",", "go_up", ",", "go_down", "]", ")", "\n", "#rot_angles = np.concatenate([pause, roates, pause, roates, pause, roates, pause, roates, pause])", "\n", "plt", ".", "camera", ".", "Elevation", "(", "20", ")", "\n", "for", "rid", ",", "azimuth_angle", "in", "enumerate", "(", "azimuth_angles", ")", ":", "\n", "# if rid==pause_num:", "\n", "#     plt.camera.Elevation(30)", "\n", "#     plt.camera.Azimuth(0)", "\n", "            ", "plt", ".", "show", "(", "azimuth", "=", "azimuth_angle", ",", "elevation", "=", "elevation_angles", "[", "rid", "]", ")", "\n", "result_img", "=", "plt", ".", "topicture", "(", "scale", "=", "2", ")", "\n", "rows", ",", "cols", ",", "_", "=", "result_img", ".", "_data", ".", "GetDimensions", "(", ")", "\n", "vtkimage", "=", "result_img", ".", "_data", ".", "GetPointData", "(", ")", ".", "GetScalars", "(", ")", "\n", "image_result", "=", "vtk_to_numpy", "(", "vtkimage", ")", ".", "reshape", "(", "(", "rows", ",", "cols", ",", "3", ")", ")", "\n", "result_imgs", ".", "append", "(", "image_result", "[", ":", ":", "-", "1", "]", ")", "\n", "", "return", "result_imgs", ",", "np", ".", "arange", "(", "len", "(", "azimuth_angles", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.vedo_visualizer.Vedo_visualizer.render_one_time": [[137, 148], ["plt.show", "plt.topicture", "plt.topicture._data.GetDimensions", "plt.topicture._data.GetPointData().GetScalars", "vtk.util.numpy_support.vtk_to_numpy().reshape", "plt.topicture._data.GetPointData", "vtk.util.numpy_support.vtk_to_numpy"], "methods", ["None"], ["", "def", "render_one_time", "(", "self", ",", "plt", ",", "camera_pose", ")", ":", "\n", "        ", "image_result", "=", "plt", ".", "show", "(", "camera", "=", "camera_pose", ")", "#elevation=10,azimuth=0,,bg=self.bg_path ", "\n", "result_img", "=", "plt", ".", "topicture", "(", "scale", "=", "2", ")", "\n", "rows", ",", "cols", ",", "_", "=", "result_img", ".", "_data", ".", "GetDimensions", "(", ")", "\n", "vtkimage", "=", "result_img", ".", "_data", ".", "GetPointData", "(", ")", ".", "GetScalars", "(", ")", "\n", "image_result", "=", "vtk_to_numpy", "(", "vtkimage", ")", ".", "reshape", "(", "(", "rows", ",", "cols", ",", "3", ")", ")", "\n", "image_result", "=", "image_result", "[", ":", ":", "-", "1", "]", "\n", "#result_img.write(save_name)", "\n", "#screenshot(save_name) #returnNumpy=True", "\n", "\n", "return", "[", "image_result", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.vedo_visualizer.convert_cam_to_stand_on_image_trans": [[16, 27], ["utils.cam_utils.convert_cam_to_3d_trans", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.convert_cam_to_3d_trans"], ["def", "convert_cam_to_stand_on_image_trans", "(", "cam", ",", "enlarge_scale", "=", "3", ")", ":", "\n", "    ", "trans_3d", "=", "convert_cam_to_3d_trans", "(", "cam", ")", "\n", "stand_on_image_trans", "=", "np", ".", "zeros", "(", "3", ")", "\n", "# The x-axis is supposed to be adapted to the proper scale", "\n", "stand_on_image_trans", "[", "0", "]", "=", "trans_3d", "[", "0", "]", "*", "0.3", "\n", "stand_on_image_trans", "[", "1", "]", "=", "0.6", "#0.46 #0.5 - trans_3d[1] * 0.2", "\n", "#stand_on_image_trans[1] = 0.56", "\n", "#stand_on_image_trans[2] = trans_3d[1] - trans_3d[2]/3 + 2.6", "\n", "stand_on_image_trans", "[", "2", "]", "=", "trans_3d", "[", "1", "]", "*", "0.4", "#- trans_3d[2]/3  0.4", "\n", "stand_on_image_trans", "*=", "enlarge_scale", "\n", "return", "stand_on_image_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.vedo_visualizer.parse_nvxia_uvmap": [[28, 35], ["numpy.zeros", "zip", "numpy.max"], "function", ["None"], ["", "def", "parse_nvxia_uvmap", "(", "uvs", ",", "face", ")", ":", "\n", "    ", "verts_num", "=", "np", ".", "max", "(", "face", ")", "+", "1", "\n", "uvs_verts", "=", "np", ".", "zeros", "(", "(", "verts_num", ",", "2", ")", ")", "\n", "for", "uv", ",", "f", "in", "zip", "(", "uvs", ",", "face", ")", ":", "\n", "        ", "uvs_verts", "[", "f", "]", "=", "uv", "[", ":", ",", ":", "2", "]", "\n", "#uvs_verts[:,1] = 1-uvs_verts[:,1]", "\n", "", "return", "uvs_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.__init__": [[16, 24], ["numpy.array", "open3d_visualizer.Open3d_visualizer._init_viewer_", "open3d_visualizer.Open3d_visualizer.prepare_single_person_scene", "open3d_visualizer.Open3d_visualizer.prepare_multi_person_scene"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer._init_viewer_", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.prepare_single_person_scene", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.prepare_multi_person_scene"], ["    ", "def", "__init__", "(", "self", ",", "multi_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "window_size", "=", "np", ".", "array", "(", "[", "1280", ",", "1080", "]", ")", "\n", "#self.window_size = np.array([720,720])", "\n", "self", ".", "_init_viewer_", "(", ")", "\n", "if", "not", "multi_mode", ":", "\n", "            ", "self", ".", "prepare_single_person_scene", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "prepare_multi_person_scene", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer._init_viewer_": [[25, 28], ["open3d.visualization.Visualizer", "open3d_visualizer.Open3d_visualizer.viewer.create_window"], "methods", ["None"], ["", "", "def", "_init_viewer_", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", "=", "o3d", ".", "visualization", ".", "Visualizer", "(", ")", "\n", "self", ".", "viewer", ".", "create_window", "(", "width", "=", "self", ".", "window_size", "[", "0", "]", ",", "height", "=", "self", ".", "window_size", "[", "1", "]", ",", "window_name", "=", "'ROMP - output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer._set_view_configs_": [[29, 50], ["open3d_visualizer.Open3d_visualizer.viewer.get_view_control", "open3d_visualizer.Open3d_visualizer.convert_to_pinhole_camera_parameters", "open3d_visualizer.Open3d_visualizer.convert_to_pinhole_camera_parameters.intrinsic.intrinsic_matrix.copy", "numpy.eye", "open3d_visualizer.Open3d_visualizer.convert_from_pinhole_camera_parameters", "open3d_visualizer.Open3d_visualizer.set_constant_z_far", "open3d_visualizer.Open3d_visualizer.viewer.get_render_option", "open3d_visualizer.Open3d_visualizer.load_from_json", "open3d_visualizer.Open3d_visualizer.viewer.update_renderer", "numpy.tan", "max", "numpy.radians", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "_set_view_configs_", "(", "self", ",", "cam_location", ",", "focal_length", "=", "1000", ")", ":", "\n", "        ", "view_control", "=", "self", ".", "viewer", ".", "get_view_control", "(", ")", "\n", "cam_params", "=", "view_control", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "\n", "intrinsics", "=", "cam_params", ".", "intrinsic", ".", "intrinsic_matrix", ".", "copy", "(", ")", "\n", "focal_length", "=", "max", "(", "self", ".", "window_size", ")", "/", "2.", "/", "np", ".", "tan", "(", "np", ".", "radians", "(", "args", "(", ")", ".", "FOV", "/", "2.", ")", ")", "\n", "intrinsics", "[", "0", ",", "0", "]", ",", "intrinsics", "[", "1", ",", "1", "]", "=", "focal_length", ",", "focal_length", "\n", "cam_params", ".", "intrinsic", ".", "intrinsic_matrix", "=", "intrinsics", "\n", "#print('Open3d_visualizer Camera intrinsic matrix: ', intrinsics)", "\n", "\n", "extrinsics", "=", "np", ".", "eye", "(", "4", ")", "\n", "extrinsics", "[", "0", ":", "3", ",", "3", "]", "=", "cam_location", "\n", "#print('Open3d_visualizer Camera extrinsic matrix: ', extrinsics)", "\n", "cam_params", ".", "extrinsic", "=", "extrinsics", "\n", "\n", "view_control", ".", "convert_from_pinhole_camera_parameters", "(", "cam_params", ")", "\n", "view_control", ".", "set_constant_z_far", "(", "100", ")", "\n", "\n", "render_option", "=", "self", ".", "viewer", ".", "get_render_option", "(", ")", "\n", "render_option", ".", "load_from_json", "(", "'romp/lib/visualization/vis_cfgs/render_option.json'", ")", "\n", "self", ".", "viewer", ".", "update_renderer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.update_viewer": [[51, 54], ["open3d_visualizer.Open3d_visualizer.viewer.poll_events", "open3d_visualizer.Open3d_visualizer.viewer.update_renderer"], "methods", ["None"], ["", "def", "update_viewer", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "poll_events", "(", ")", "\n", "self", ".", "viewer", ".", "update_renderer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.prepare_single_person_scene": [[55, 64], ["visualization.create_meshes.create_body_mesh", "open3d_visualizer.Open3d_visualizer.viewer.add_geometry", "numpy.array", "open3d_visualizer.Open3d_visualizer._set_view_configs_", "open3d_visualizer.Open3d_visualizer.create_filter", "open3d_visualizer.Open3d_visualizer.update_viewer", "config.args", "numpy.tan", "numpy.radians", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_body_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer._set_view_configs_", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.create_filter", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.update_viewer", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "prepare_single_person_scene", "(", "self", ")", ":", "\n", "        ", "self", ".", "mesh", "=", "create_body_mesh", "(", ")", "\n", "self", ".", "viewer", ".", "add_geometry", "(", "self", ".", "mesh", ")", "\n", "cam_location", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "if", "not", "args", "(", ")", ".", "add_trans", ":", "\n", "            ", "cam_location", "[", "2", "]", "=", "2.6", "/", "np", ".", "tan", "(", "np", ".", "radians", "(", "args", "(", ")", ".", "FOV", "/", "2.", ")", ")", "\n", "", "self", ".", "_set_view_configs_", "(", "cam_location", "=", "cam_location", ")", "\n", "self", ".", "smoother", "=", "self", ".", "create_filter", "(", ")", "\n", "self", ".", "update_viewer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.create_filter": [[65, 67], ["utils.temporal_optimization.OneEuroFilter", "utils.temporal_optimization.OneEuroFilter"], "methods", ["None"], ["", "def", "create_filter", "(", "self", ")", ":", "\n", "        ", "return", "{", "'verts'", ":", "OneEuroFilter", "(", "4.", ",", "0", ")", ",", "'trans'", ":", "OneEuroFilter", "(", "3.", ",", "0.", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.process_single_mesh": [[68, 79], ["smoother[].process", "open3d.utility.Vector3dVector", "mesh_ob.compute_triangle_normals", "mesh_ob.compute_vertex_normals", "open3d_visualizer.Open3d_visualizer.viewer.update_geometry", "open3d_visualizer.convert_trans_scale", "smoother[].process"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.convert_trans_scale", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process"], ["", "def", "process_single_mesh", "(", "self", ",", "verts", ",", "trans", ",", "smoother", ",", "mesh_ob", ")", ":", "\n", "        ", "verts", "=", "smoother", "[", "'verts'", "]", ".", "process", "(", "verts", ")", "\n", "#verts = np.matmul(self.view_mat, verts.T).T", "\n", "if", "trans", "is", "not", "None", ":", "\n", "            ", "trans_converted", "=", "convert_trans_scale", "(", "trans", ")", "\n", "verts", "+=", "smoother", "[", "'trans'", "]", ".", "process", "(", "trans_converted", ")", "[", "None", "]", "\n", "\n", "", "mesh_ob", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "verts", ")", "\n", "mesh_ob", ".", "compute_triangle_normals", "(", ")", "\n", "mesh_ob", ".", "compute_vertex_normals", "(", ")", "\n", "self", ".", "viewer", ".", "update_geometry", "(", "mesh_ob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.run": [[80, 83], ["open3d_visualizer.Open3d_visualizer.process_single_mesh", "open3d_visualizer.Open3d_visualizer.update_viewer"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.process_single_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.update_viewer"], ["", "def", "run", "(", "self", ",", "verts", ",", "trans", "=", "None", ")", ":", "\n", "        ", "self", ".", "process_single_mesh", "(", "verts", ",", "trans", ",", "self", ".", "smoother", ",", "self", ".", "mesh", ")", "\n", "self", ".", "update_viewer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.prepare_multi_person_scene": [[84, 100], ["list", "open3d.utility.Vector3dVector", "numpy.array", "open3d_visualizer.Open3d_visualizer._set_view_configs_", "range", "visualization.create_meshes.create_body_mesh", "numpy.zeros", "open3d_visualizer.Open3d_visualizer.viewer.add_geometry", "open3d_visualizer.Open3d_visualizer.update_viewer", "open3d_visualizer.Open3d_visualizer.reset_mesh", "open3d_visualizer.Open3d_visualizer.update_viewer", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer._set_view_configs_", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_body_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.update_viewer", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.reset_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.update_viewer"], ["", "def", "prepare_multi_person_scene", "(", "self", ",", "start_person_num", "=", "6", ")", ":", "\n", "        ", "self", ".", "pid2mid_dict", "=", "{", "}", "\n", "self", ".", "mesh_usage_change_cacher", "=", "[", "]", "\n", "self", ".", "mesh_num", "=", "start_person_num", "\n", "self", ".", "mesh_ids_available", "=", "list", "(", "range", "(", "start_person_num", ")", ")", "\n", "self", ".", "meshes", "=", "{", "mid", ":", "create_body_mesh", "(", ")", "for", "mid", "in", "self", ".", "mesh_ids_available", "}", "\n", "self", ".", "zero_mesh", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "meshes", "[", "0", "]", ".", "vertices", ")", ",", "3", ")", ")", ")", "\n", "self", ".", "filter_dict", "=", "{", "}", "\n", "for", "mid", "in", "self", ".", "mesh_ids_available", ":", "\n", "            ", "self", ".", "viewer", ".", "add_geometry", "(", "self", ".", "meshes", "[", "mid", "]", ")", "\n", "self", ".", "update_viewer", "(", ")", "\n", "", "for", "mid", "in", "self", ".", "mesh_ids_available", ":", "\n", "            ", "self", ".", "reset_mesh", "(", "mid", ")", "\n", "self", ".", "update_viewer", "(", ")", "\n", "", "cam_location", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "_set_view_configs_", "(", "cam_location", "=", "cam_location", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.add_mesh": [[101, 113], ["print", "open3d_visualizer.Open3d_visualizer.mesh_ids_available.append", "visualization.create_meshes.create_body_mesh", "open3d_visualizer.Open3d_visualizer.create_filter", "visualization.create_meshes.create_body_mesh.compute_triangle_normals", "visualization.create_meshes.create_body_mesh.compute_vertex_normals", "open3d_visualizer.Open3d_visualizer.viewer.add_geometry"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_body_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.create_filter"], ["", "def", "add_mesh", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Adding new Mesh {}'", ".", "format", "(", "self", ".", "mesh_num", ")", ")", "\n", "self", ".", "mesh_ids_available", ".", "append", "(", "self", ".", "mesh_num", ")", "\n", "new_mesh", "=", "create_body_mesh", "(", ")", "\n", "self", ".", "filter_dict", "[", "self", ".", "mesh_num", "]", "=", "self", ".", "create_filter", "(", ")", "\n", "new_mesh", ".", "vertices", "=", "self", ".", "zero_mesh", "\n", "new_mesh", ".", "compute_triangle_normals", "(", ")", "\n", "new_mesh", ".", "compute_vertex_normals", "(", ")", "\n", "self", ".", "meshes", "[", "self", ".", "mesh_num", "]", "=", "new_mesh", "\n", "self", ".", "viewer", ".", "add_geometry", "(", "self", ".", "meshes", "[", "self", ".", "mesh_num", "]", ")", "\n", "#self.update_viewer()", "\n", "self", ".", "mesh_num", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.reset_mesh": [[114, 123], ["print", "open3d_visualizer.Open3d_visualizer.meshes[].compute_triangle_normals", "open3d_visualizer.Open3d_visualizer.meshes[].compute_vertex_normals", "open3d_visualizer.Open3d_visualizer.create_filter", "open3d_visualizer.Open3d_visualizer.viewer.update_geometry", "open3d_visualizer.Open3d_visualizer.mesh_ids_available.append"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.create_filter"], ["", "def", "reset_mesh", "(", "self", ",", "mesh_id", ")", ":", "\n", "        ", "print", "(", "'Reseting Mesh {}'", ".", "format", "(", "mesh_id", ")", ")", "\n", "self", ".", "meshes", "[", "mesh_id", "]", ".", "vertices", "=", "self", ".", "zero_mesh", "\n", "self", ".", "meshes", "[", "mesh_id", "]", ".", "compute_triangle_normals", "(", ")", "\n", "self", ".", "meshes", "[", "mesh_id", "]", ".", "compute_vertex_normals", "(", ")", "\n", "self", ".", "filter_dict", "[", "mesh_id", "]", "=", "self", ".", "create_filter", "(", ")", "\n", "if", "mesh_id", "not", "in", "self", ".", "mesh_ids_available", ":", "\n", "            ", "self", ".", "mesh_ids_available", ".", "append", "(", "mesh_id", ")", "\n", "", "self", ".", "viewer", ".", "update_geometry", "(", "self", ".", "meshes", "[", "mesh_id", "]", ")", "\n", "#self.update_viewer()", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.run_multiperson": [[125, 143], ["print", "zip", "open3d_visualizer.Open3d_visualizer.update_viewer", "len", "len", "len", "open3d_visualizer.Open3d_visualizer.process_single_mesh", "open3d_visualizer.Open3d_visualizer.mesh_ids_available.pop", "open3d_visualizer.Open3d_visualizer.reset_mesh", "open3d_visualizer.Open3d_visualizer.pid2mid_dict.pop", "len", "open3d_visualizer.Open3d_visualizer.add_mesh"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.update_viewer", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.process_single_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.reset_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.add_mesh"], ["", "def", "run_multiperson", "(", "self", ",", "verts", ",", "trans", "=", "None", ",", "tracked_ids", "=", "None", ")", ":", "\n", "#print('recieving {} people'.format(len(verts)))", "\n", "        ", "assert", "len", "(", "verts", ")", "==", "len", "(", "trans", ")", "==", "len", "(", "tracked_ids", ")", ",", "print", "(", "'length is not equal~'", ")", "\n", "for", "vert", ",", "tran", ",", "pid", "in", "zip", "(", "verts", ",", "trans", ",", "tracked_ids", ")", ":", "\n", "            ", "if", "pid", "not", "in", "self", ".", "pid2mid_dict", ":", "\n", "                ", "if", "len", "(", "self", ".", "mesh_ids_available", ")", "==", "0", ":", "\n", "                    ", "self", ".", "add_mesh", "(", ")", "\n", "", "self", ".", "pid2mid_dict", "[", "pid", "]", "=", "self", ".", "mesh_ids_available", ".", "pop", "(", ")", "\n", "", "mesh_id", "=", "self", ".", "pid2mid_dict", "[", "pid", "]", "\n", "self", ".", "process_single_mesh", "(", "vert", ",", "tran", ",", "self", ".", "filter_dict", "[", "mesh_id", "]", ",", "self", ".", "meshes", "[", "mesh_id", "]", ")", "\n", "\n", "# reset the disappeared people", "\n", "", "for", "pid", "in", "self", ".", "mesh_usage_change_cacher", ":", "\n", "            ", "if", "pid", "in", "self", ".", "pid2mid_dict", "and", "pid", "not", "in", "tracked_ids", ":", "\n", "                ", "self", ".", "reset_mesh", "(", "self", ".", "pid2mid_dict", "[", "pid", "]", ")", "\n", "self", ".", "pid2mid_dict", ".", "pop", "(", "pid", ",", "None", ")", "\n", "", "", "self", ".", "mesh_usage_change_cacher", "=", "tracked_ids", "\n", "self", ".", "update_viewer", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.convert_trans_scale": [[11, 14], ["numpy.array"], "function", ["None"], ["def", "convert_trans_scale", "(", "trans", ")", ":", "\n", "    ", "trans", "*=", "np", ".", "array", "(", "[", "0.4", ",", "0.6", ",", "0.7", "]", ")", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.__init__": [[33, 60], ["numpy.radians", "numpy.array", "visualization.Plotter3dPoses", "torch.load", "torch.load", "torch.load", "torch.load", "renderer_pt3d.get_renderer", "config.args", "config.args", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "pytorch3d.renderer.look_at_view_transform", "renderer_pt3d.get_renderer", "config.args", "config.args", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pt3d.get_renderer", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pt3d.get_renderer", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ",", "resolution", "=", "(", "512", ",", "512", ")", ",", "result_img_dir", "=", "None", ",", "with_renderer", "=", "False", ")", ":", "\n", "        ", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "FOV", "=", "np", ".", "radians", "(", "args", "(", ")", ".", "FOV", ")", "\n", "self", ".", "smpl_face", "=", "torch", ".", "load", "(", "args", "(", ")", ".", "smpl_model_path", ")", "[", "'f'", "]", "\n", "if", "with_renderer", ":", "\n", "            ", "self", ".", "perps_proj", "=", "args", "(", ")", ".", "perspective_proj", "\n", "T", "=", "None", "if", "self", ".", "perps_proj", "else", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "100", "]", "]", ")", "\n", "self", ".", "renderer", "=", "get_renderer", "(", "resolution", "=", "self", ".", "resolution", ",", "perps", "=", "self", ".", "perps_proj", ",", "T", "=", "T", ")", "\n", "if", "args", "(", ")", ".", "model_version", ">=", "4", ":", "\n", "# dervice the camera pose/position via setting the object location (at) and the view dist/evelevation/azim in a sphere coodinate", "\n", "# The position is just a sphere coodinate which takes \"at\" as the origin with the corresponding angles.", "\n", "# World coordinates (right-hand coord _|/ ) +Y up, +X left and +Z in.", "\n", "                ", "R", ",", "T", "=", "look_at_view_transform", "(", "dist", "=", "5", ",", "elev", "=", "80", ",", "azim", "=", "180", ",", "at", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "3", "]", "]", ")", ")", "\n", "self", ".", "bv_renderer", "=", "get_renderer", "(", "resolution", "=", "self", ".", "resolution", ",", "perps", "=", "False", ",", "R", "=", "R", ",", "T", "=", "T", ")", "\n", "", "", "self", ".", "result_img_dir", "=", "result_img_dir", "\n", "self", ".", "heatmap_kpnum", "=", "17", "\n", "self", ".", "vis_size", "=", "resolution", "\n", "self", ".", "mesh_color", "=", "(", "torch", ".", "Tensor", "(", "[", "[", "[", "0.65098039", ",", "0.74117647", ",", "0.85882353", "]", "]", "]", ")", "*", "255", ")", ".", "long", "(", ")", "\n", "self", ".", "color_table", "=", "np", ".", "array", "(", "[", "[", "255", ",", "0", ",", "0", "]", ",", "[", "0", ",", "255", ",", "0", "]", ",", "[", "0", ",", "0", ",", "255", "]", ",", "[", "0", ",", "255", ",", "255", "]", ",", "[", "255", ",", "0", ",", "255", "]", ",", "[", "255", ",", "255", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "128", ",", "0", ",", "128", "]", "]", ")", "\n", "self", ".", "skeleton_3D_ploter", "=", "Plotter3dPoses", "(", ")", "\n", "self", ".", "color_class_dict", "=", "{", "0", ":", "{", "0", ":", "[", "0.94", ",", "1.", ",", "1.", "]", ",", "1", ":", "[", "0.49", ",", "1.", ",", "0", "]", ",", "2", ":", "[", "0", ",", "1.", ",", "1.", "]", ",", "3", ":", "[", "1.", ",", "0.98", ",", "0.804", "]", ",", "-", "1", ":", "[", ".9", ",", ".9", ",", ".8", "]", "}", ",", "1", ":", "{", "0", ":", "[", "1.", ",", "0.753", ",", "0.796", "]", ",", "1", ":", "[", "1", ",", "0.647", ",", "0", "]", ",", "2", ":", "[", "1", ",", "0.431", ",", "0.706", "]", ",", "3", ":", "[", "1.", ",", "0.98", ",", "0.804", "]", ",", "-", "1", ":", "[", ".9", ",", ".9", ",", ".8", "]", "}", ",", "2", ":", "{", "0", ":", "[", ".9", ",", ".9", ",", ".8", "]", ",", "1", ":", "[", ".9", ",", ".9", ",", ".8", "]", ",", "2", ":", "[", ".9", ",", ".9", ",", ".8", "]", ",", "3", ":", "[", ".9", ",", ".9", ",", ".8", "]", ",", "-", "1", ":", "[", ".9", ",", ".9", ",", ".8", "]", "}", "}", "\n", "# adult lightcyan\u3000\u6d45\u84dd\uff1b\u3000teen Chartreuse \u8349\u7eff\u8272;  kid Cyan \u9752\u8272; baby RosyBrown \u73ab\u7470\u8910;  -1 silver \u94f6\u8272", "\n", "self", ".", "age_color_dict", "=", "{", "0", ":", "[", "0.94", ",", "1.", ",", "1.", "]", ",", "1", ":", "[", "0.49", ",", "1.", ",", "0", "]", ",", "2", ":", "[", "0", ",", "1.", ",", "1.", "]", ",", "3", ":", "[", "1.", ",", "0.41", ",", "0.41", "]", ",", "-", "1", ":", "[", ".9", ",", ".9", ",", ".8", "]", "}", "\n", "self", ".", "age_name_dict", "=", "{", "0", ":", "'adult'", ",", "1", ":", "'teen'", ",", "2", ":", "'kid'", ",", "3", ":", "'baby'", ",", "-", "1", ":", "'NotSure'", "}", "\n", "self", ".", "gender_name_dict", "=", "{", "0", ":", "'male'", ",", "1", ":", "'female'", ",", "2", ":", "'neutral'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visualize_renderer_verts_list": [[62, 100], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "enumerate", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy", "torch.cat().cpu().numpy.astype", "torch.cat().cpu().numpy.astype", "verts.contiguous", "zip", "torch.cat().cpu().numpy.append", "torch.cat().cpu().numpy.append", "visualization.Visualizer.smpl_face.repeat().to", "trans[].unsqueeze", "visualization.calc_auto_cam_params", "isinstance", "renderer", "renderer", "utils.train_utils.determine_rendering_order", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "visualization.Visualizer.smpl_face.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.calc_auto_cam_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.determine_rendering_order"], ["", "def", "visualize_renderer_verts_list", "(", "self", ",", "verts_list", ",", "faces_list", "=", "None", ",", "images", "=", "None", ",", "bird_view", "=", "False", ",", "auto_cam", "=", "False", ",", "cam_params", "=", "None", ",", "colors", "=", "torch", ".", "Tensor", "(", "[", ".9", ",", ".9", ",", ".8", "]", ")", ",", "trans", "=", "None", ",", "thresh", "=", "0.", ")", ":", "\n", "        ", "verts_list", "=", "[", "verts", ".", "contiguous", "(", ")", "for", "verts", "in", "verts_list", "]", "\n", "if", "faces_list", "is", "None", ":", "\n", "            ", "faces_list", "=", "[", "self", ".", "smpl_face", ".", "repeat", "(", "len", "(", "verts", ")", ",", "1", ",", "1", ")", ".", "to", "(", "verts", ".", "device", ")", "for", "verts", "in", "verts_list", "]", "\n", "\n", "", "if", "bird_view", ":", "\n", "            ", "renderer", "=", "self", ".", "bv_renderer", "\n", "", "else", ":", "\n", "            ", "renderer", "=", "self", ".", "renderer", "\n", "", "rendered_imgs", "=", "[", "]", "\n", "for", "ind", ",", "(", "verts", ",", "faces", ")", "in", "enumerate", "(", "zip", "(", "verts_list", ",", "faces_list", ")", ")", ":", "\n", "            ", "if", "trans", "is", "not", "None", ":", "\n", "                ", "verts", "+=", "trans", "[", "ind", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "if", "auto_cam", ":", "\n", "                ", "cam_params", "=", "calc_auto_cam_params", "(", "verts", ")", "\n", "\n", "", "color", "=", "colors", "[", "ind", "]", "if", "isinstance", "(", "colors", ",", "list", ")", "else", "colors", "\n", "#if color is None:", "\n", "#    print('None color,', color, colors)", "\n", "\n", "if", "self", ".", "perps_proj", ":", "\n", "                ", "rendered_img", "=", "renderer", "(", "verts", ",", "faces", ",", "colors", "=", "color", ",", "merge_meshes", "=", "True", ",", "cam_params", "=", "cam_params", ")", "\n", "", "else", ":", "\n", "                ", "verts", "[", ":", ",", ":", ",", "2", "]", "-=", "1.", "\n", "rendered_img", "=", "renderer", "(", "verts", ",", "faces", ",", "colors", "=", "color", ",", "merge_meshes", "=", "False", ",", "cam_params", "=", "cam_params", ")", "\n", "rendered_img", "=", "determine_rendering_order", "(", "rendered_img", ")", "\n", "", "rendered_imgs", ".", "append", "(", "rendered_img", ")", "\n", "", "rendered_imgs", "=", "torch", ".", "cat", "(", "rendered_imgs", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "rendered_imgs", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "            ", "transparent", "=", "rendered_imgs", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "\n", "rendered_imgs", "=", "rendered_imgs", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "*", "255", "\n", "\n", "", "visible_weight", "=", "0.9", "\n", "if", "images", "is", "not", "None", ":", "\n", "            ", "valid_mask", "=", "(", "transparent", ">", "thresh", ")", "[", ":", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "rendered_imgs", "=", "rendered_imgs", "*", "valid_mask", "*", "visible_weight", "+", "images", "*", "valid_mask", "*", "(", "1", "-", "visible_weight", ")", "+", "(", "1", "-", "valid_mask", ")", "*", "images", "\n", "", "return", "rendered_imgs", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.mark_classify_results_on_img": [[101, 111], ["range", "len", "zip", "cv2.putText", "int", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "mark_classify_results_on_img", "(", "self", ",", "images", ",", "class_preds", ",", "class_probs", ",", "center_coords", ")", ":", "\n", "        ", "for", "img_id", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "            ", "for", "class_pred", ",", "class_prob", ",", "center_coord", "in", "zip", "(", "class_preds", "[", "img_id", "]", ",", "class_probs", "[", "img_id", "]", ",", "center_coords", "[", "img_id", "]", ")", ":", "\n", "                ", "age_cls", ",", "age_prob", "=", "class_pred", ",", "int", "(", "class_prob", "*", "100", ")", "\n", "center_loc", "=", "(", "center_coord", "*", "(", "args", "(", ")", ".", "input_size", "/", "args", "(", ")", ".", "centermap_size", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "text", "=", "'{} {}%'", ".", "format", "(", "self", ".", "age_name_dict", "[", "age_cls", "]", ",", "age_prob", ")", "\n", "cv2", ".", "putText", "(", "images", "[", "img_id", "]", ",", "text", ",", "(", "center_loc", "[", "0", "]", ",", "center_loc", "[", "1", "]", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "(", "255", ",", "0", ",", "0", ")", ",", "1", ")", "\n", "#text2 = '{} {}%'.format(self.gender_name_dict[gender_cls], gender_prob)#[reorganize_idx[vids]==used_idx_org[idx]]", "\n", "#cv2.putText(images[img_id], text2, (center_loc[0], center_loc[1]+14), cv2.FONT_HERSHEY_PLAIN, 1.2, (255,0,0), 1)", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.show_verts_on_imgs": [[112, 156], ["visualization.Visualizer.visualize_renderer_verts_list", "enumerate", "[].detach", "[].detach", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "visualization.Visualizer.visualize_renderer_verts_list", "meta_data[].cpu().numpy().astype", "cv2.imread", "cv2.resize", "rendering_onorg_images.append", "org_imgs.copy", "visualization.Visualizer.mark_classify_results_on_img", "visualization.Visualizer.visualize_renderer_verts_list", "[].detach", "web_vis.convert_image_list", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "[].detach().cpu().numpy", "org_imgs.copy", "meta_data[].cpu().numpy", "web_vis.convert_image_list", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu", "web_vis.convert_image_list", "meta_data[].cpu", "[].detach", "[].detach", "[].detach"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visualize_renderer_verts_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visualize_renderer_verts_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.mark_classify_results_on_img", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visualize_renderer_verts_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.convert_image_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.convert_image_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.convert_image_list"], ["", "def", "show_verts_on_imgs", "(", "self", ",", "outputs", ",", "meta_data", ",", "all_inds", ",", "org_imgs", ",", "mesh_colors", "=", "None", ",", "img_names", "=", "None", ",", "put_org", "=", "True", ",", "plot_dict", "=", "None", ",", "save2html", "=", "True", ",", "drop_texts", "=", "False", ")", ":", "\n", "        ", "used_org_inds", ",", "per_img_inds", ",", "img_inds_org", "=", "all_inds", "\n", "if", "self", ".", "perps_proj", ":", "\n", "            ", "per_img_verts_list", "=", "[", "outputs", "[", "'verts'", "]", "[", "inds", "]", ".", "detach", "(", ")", "for", "inds", "in", "per_img_inds", "]", "\n", "trans", "=", "[", "outputs", "[", "'cam_trans'", "]", "[", "inds", "]", ".", "detach", "(", ")", "for", "inds", "in", "per_img_inds", "]", "\n", "\n", "if", "mesh_colors", "is", "None", ":", "\n", "                ", "mesh_colors", "=", "torch", ".", "Tensor", "(", "[", ".9", ",", ".9", ",", ".8", "]", ")", "\n", "if", "'Age_preds'", "in", "outputs", "and", "'kid_offsets_pred'", "in", "outputs", ":", "\n", "                    ", "class_preds", "=", "[", "outputs", "[", "'Age_preds'", "]", "[", "inds", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "inds", "in", "per_img_inds", "]", "\n", "class_probs", "=", "[", "outputs", "[", "'kid_offsets_pred'", "]", "[", "inds", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "inds", "in", "per_img_inds", "]", "\n", "mesh_colors", "=", "[", "torch", ".", "Tensor", "(", "[", "self", ".", "age_color_dict", "[", "age", "]", "for", "age", "in", "age_preds", "]", ")", "for", "age_preds", "in", "class_preds", "]", "\n", "", "", "rendered_imgs", "=", "self", ".", "visualize_renderer_verts_list", "(", "per_img_verts_list", ",", "images", "=", "org_imgs", ".", "copy", "(", ")", ",", "trans", "=", "trans", ",", "colors", "=", "mesh_colors", ")", "\n", "\n", "if", "'Age_preds'", "in", "outputs", "and", "'kid_offsets_pred'", "in", "outputs", ":", "\n", "                ", "if", "not", "drop_texts", ":", "\n", "                    ", "center_preds", "=", "[", "outputs", "[", "'center_preds'", "]", "[", "inds", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "inds", "in", "per_img_inds", "]", "\n", "rendered_imgs", "=", "self", ".", "mark_classify_results_on_img", "(", "rendered_imgs", ",", "class_preds", ",", "class_probs", ",", "center_preds", ")", "\n", "rendered_imgs_bv", "=", "self", ".", "visualize_renderer_verts_list", "(", "per_img_verts_list", ",", "trans", "=", "trans", ",", "colors", "=", "mesh_colors", ",", "bird_view", "=", "True", ",", "auto_cam", "=", "True", ")", "\n", "if", "plot_dict", "is", "not", "None", ":", "\n", "                        ", "plot_dict", "[", "'mesh_rendering_imgs_bv'", "]", "=", "{", "'figs'", ":", "convert_image_list", "(", "rendered_imgs_bv", ")", ",", "'type'", ":", "'image'", "}", "if", "save2html", "else", "{", "'figs'", ":", "rendered_imgs_bv", ",", "'type'", ":", "'image'", "}", "\n", "\n", "", "", "", "", "elif", "'verts_camed'", "in", "outputs", ":", "\n", "            ", "per_img_verts_list", "=", "[", "outputs", "[", "'verts_camed'", "]", "[", "inds", "]", ".", "detach", "(", ")", "for", "inds", "in", "per_img_inds", "]", "\n", "rendered_imgs", "=", "self", ".", "visualize_renderer_verts_list", "(", "per_img_verts_list", ",", "images", "=", "org_imgs", ".", "copy", "(", ")", ",", "colors", "=", "mesh_colors", ")", "\n", "\n", "", "if", "put_org", ":", "\n", "            ", "offsets", "=", "meta_data", "[", "'offsets'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int", ")", "[", "img_inds_org", "]", "\n", "img_pad_size", ",", "crop_trbl", ",", "pad_trbl", "=", "offsets", "[", ":", ",", ":", "2", "]", ",", "offsets", "[", ":", ",", "2", ":", "6", "]", ",", "offsets", "[", ":", ",", "6", ":", "10", "]", "\n", "rendering_onorg_images", "=", "[", "]", "\n", "for", "inds", ",", "j", "in", "enumerate", "(", "used_org_inds", ")", ":", "\n", "                ", "org_imge", "=", "cv2", ".", "imread", "(", "img_names", "[", "inds", "]", ")", "\n", "(", "ih", ",", "iw", ")", ",", "(", "ph", ",", "pw", ")", "=", "org_imge", ".", "shape", "[", ":", "2", "]", ",", "img_pad_size", "[", "inds", "]", "\n", "resized_images", "=", "cv2", ".", "resize", "(", "rendered_imgs", "[", "inds", "]", ",", "(", "ph", "+", "1", ",", "pw", "+", "1", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "(", "ct", ",", "cr", ",", "cb", ",", "cl", ")", ",", "(", "pt", ",", "pr", ",", "pb", ",", "pl", ")", "=", "crop_trbl", "[", "inds", "]", ",", "pad_trbl", "[", "inds", "]", "\n", "org_imge", "[", "ct", ":", "ih", "-", "cb", ",", "cl", ":", "iw", "-", "cr", "]", "=", "resized_images", "[", "pt", ":", "ph", "-", "pb", ",", "pl", ":", "pw", "-", "pr", "]", "\n", "rendering_onorg_images", ".", "append", "(", "org_imge", ")", "\n", "", "if", "plot_dict", "is", "not", "None", ":", "\n", "                ", "plot_dict", "[", "'mesh_rendering_orgimgs'", "]", "=", "{", "'figs'", ":", "convert_image_list", "(", "rendering_onorg_images", ")", ",", "'type'", ":", "'image'", "}", "if", "save2html", "else", "{", "'figs'", ":", "rendering_onorg_images", ",", "'type'", ":", "'image'", "}", "\n", "", "rendered_imgs", "=", "rendering_onorg_images", "\n", "\n", "", "if", "plot_dict", "is", "not", "None", ":", "\n", "            ", "plot_dict", "[", "'mesh_rendering_imgs'", "]", "=", "{", "'figs'", ":", "convert_image_list", "(", "rendered_imgs", ")", ",", "'type'", ":", "'image'", "}", "if", "save2html", "else", "{", "'figs'", ":", "rendered_imgs", ",", "'type'", ":", "'image'", "}", "\n", "", "return", "rendered_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visulize_result": [[158, 234], ["dict", "os.makedirs", "utils.train_utils.process_idx", "collections.OrderedDict", "numpy.array", "meta_data[].cpu().numpy().astype", "outputs[].sum", "web_vis.write_to_html", "visualization.Visualizer.show_verts_on_imgs", "enumerate", "enumerate", "enumerate", "meta_data[].cpu().numpy", "copy.deepcopy", "web_vis.convert_image_list.append", "web_vis.convert_image_list", "cv2.resize", "heatmaps_AEmaps.append", "cv2.resize", "web_vis.convert_image_list.append", "web_vis.convert_image_list", "web_vis.convert_image_list", "web_vis.convert_3dpose_to_line_figs", "zip", "numpy.array", "org_imgs[].copy", "numpy.vstack", "org_imgs[].copy", "visualization.make_heatmaps", "meta_data[].cpu", "visualization.Visualizer.skeleton_3D_ploter.encircle_plot", "skeleton_3ds.append", "print", "len", "visualization.Visualizer.draw_skeleton"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.process_idx", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.write_to_html", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.show_verts_on_imgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.convert_image_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.convert_image_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.convert_image_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.convert_3dpose_to_line_figs", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.make_heatmaps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses.encircle_plot", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton"], ["", "def", "visulize_result", "(", "self", ",", "outputs", ",", "meta_data", ",", "show_items", "=", "[", "'org_img'", ",", "'mesh'", "]", ",", "vis_cfg", "=", "default_cfg", ",", "save2html", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "vis_cfg", "=", "dict", "(", "default_cfg", ",", "**", "vis_cfg", ")", "\n", "if", "vis_cfg", "[", "'save_dir'", "]", "is", "None", ":", "\n", "            ", "vis_cfg", "[", "'save_dir'", "]", "=", "self", ".", "result_img_dir", "\n", "", "os", ".", "makedirs", "(", "vis_cfg", "[", "'save_dir'", "]", ",", "exist_ok", "=", "True", ")", "\n", "\n", "used_org_inds", ",", "per_img_inds", "=", "process_idx", "(", "outputs", "[", "'reorganize_idx'", "]", ",", "vids", "=", "vis_cfg", "[", "'vids'", "]", ")", "\n", "img_inds_org", "=", "[", "inds", "[", "0", "]", "for", "inds", "in", "per_img_inds", "]", "\n", "img_names", "=", "np", ".", "array", "(", "meta_data", "[", "'imgpath'", "]", ")", "[", "img_inds_org", "]", "\n", "org_imgs", "=", "meta_data", "[", "'image'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "img_inds_org", "]", "\n", "detection_flag", "=", "outputs", "[", "'detection_flag'", "]", ".", "sum", "(", ")", ">", "0", "\n", "\n", "plot_dict", "=", "OrderedDict", "(", ")", "\n", "for", "vis_name", "in", "show_items", ":", "\n", "            ", "if", "vis_name", "==", "'org_img'", ":", "\n", "                ", "if", "save2html", ":", "\n", "                    ", "plot_dict", "[", "'org_img'", "]", "=", "{", "'figs'", ":", "convert_image_list", "(", "org_imgs", ")", ",", "'type'", ":", "'image'", "}", "\n", "", "else", ":", "\n", "                    ", "plot_dict", "[", "'org_img'", "]", "=", "{", "'figs'", ":", "org_imgs", ",", "'type'", ":", "'image'", "}", "\n", "\n", "", "", "if", "vis_name", "==", "'mesh'", "and", "detection_flag", ":", "\n", "                ", "rendered_imgs", "=", "self", ".", "show_verts_on_imgs", "(", "outputs", ",", "meta_data", ",", "(", "used_org_inds", ",", "per_img_inds", ",", "img_inds_org", ")", ",", "org_imgs", ",", "img_names", "=", "img_names", ",", "put_org", "=", "'put_org'", "in", "vis_cfg", "[", "'settings'", "]", ",", "plot_dict", "=", "plot_dict", ",", "save2html", "=", "save2html", ")", "\n", "\n", "", "if", "vis_name", "==", "'j3d'", "and", "detection_flag", ":", "\n", "                ", "real_aligned", ",", "pred_aligned", ",", "pos3d_vis_mask", ",", "joint3d_bones", "=", "kwargs", "[", "'kp3ds'", "]", "\n", "real_3ds", "=", "(", "real_aligned", "*", "pos3d_vis_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predicts", "=", "(", "pred_aligned", "*", "pos3d_vis_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "save2html", ":", "\n", "                    ", "plot_dict", "[", "'j3d'", "]", "=", "{", "'figs'", ":", "convert_3dpose_to_line_figs", "(", "[", "predicts", ",", "real_3ds", "]", ",", "joint3d_bones", ")", ",", "'type'", ":", "'skeleton'", "}", "\n", "", "else", ":", "\n", "                    ", "skeleton_3ds", "=", "[", "]", "\n", "for", "inds", "in", "per_img_inds", ":", "\n", "                        ", "for", "real_pose_3d", ",", "pred_pose_3d", "in", "zip", "(", "real_3ds", "[", "inds", "]", ",", "predicts", "[", "inds", "]", ")", ":", "\n", "                            ", "skeleton_3d", "=", "self", ".", "skeleton_3D_ploter", ".", "encircle_plot", "(", "[", "real_pose_3d", ",", "pred_pose_3d", "]", ",", "joint3d_bones", ",", "colors", "=", "[", "(", "255", ",", "0", ",", "0", ")", ",", "(", "0", ",", "255", ",", "255", ")", "]", ")", "\n", "skeleton_3ds", ".", "append", "(", "skeleton_3d", ")", "\n", "", "", "plot_dict", "[", "'j3d'", "]", "=", "{", "'figs'", ":", "np", ".", "array", "(", "skeleton_3ds", ")", ",", "'type'", ":", "'skeleton'", "}", "\n", "\n", "", "", "if", "vis_name", "==", "'pj2d'", "and", "detection_flag", "and", "outputs", "[", "'pj2d'", "]", ".", "shape", "[", "1", "]", "==", "54", ":", "\n", "                ", "kp_imgs", "=", "[", "]", "\n", "for", "img_id", ",", "inds_list", "in", "enumerate", "(", "per_img_inds", ")", ":", "\n", "                    ", "org_img", "=", "copy", ".", "deepcopy", "(", "org_imgs", "[", "img_id", "]", ")", "\n", "try", ":", "\n", "                        ", "for", "kp2d_vis", "in", "outputs", "[", "'pj2d'", "]", "[", "inds_list", "]", ":", "\n", "                            ", "if", "len", "(", "kp2d_vis", ")", ">", "0", ":", "\n", "                                ", "kp2d_vis", "=", "(", "(", "kp2d_vis", "+", "1", ")", "/", "2", "*", "org_imgs", ".", "shape", "[", "1", "]", ")", "\n", "#org_img = draw_skeleton(org_img, kp2d_vis, bones=constants.body17_connMat, cm=constants.cm_body17)", "\n", "org_img", "=", "draw_skeleton", "(", "org_img", ",", "kp2d_vis", ",", "bones", "=", "constants", ".", "All54_connMat", ",", "cm", "=", "constants", ".", "cm_All54", ")", "\n", "", "", "", "except", "Exception", "as", "error", ":", "\n", "                        ", "print", "(", "error", ",", "' reported while drawing 2D pose'", ")", "\n", "", "kp_imgs", ".", "append", "(", "org_img", ")", "\n", "", "if", "save2html", ":", "\n", "                    ", "kp_imgs", "=", "convert_image_list", "(", "kp_imgs", ")", "\n", "", "plot_dict", "[", "'pj2d'", "]", "=", "{", "'figs'", ":", "kp_imgs", ",", "'type'", ":", "'image'", "}", "\n", "\n", "", "if", "vis_name", "==", "'hp_aes'", "and", "'kp_ae_maps'", "in", "outputs", "and", "detection_flag", ":", "\n", "                ", "heatmaps_AEmaps", "=", "[", "]", "\n", "#hp_aes = torch.nn.functional.interpolate(hp_aes[vids],size=(img_size,img_size),mode='bilinear',align_corners=True)", "\n", "for", "img_id", ",", "hp_ae", "in", "enumerate", "(", "outputs", "[", "'kp_ae_maps'", "]", "[", "used_org_inds", "]", ")", ":", "\n", "                    ", "img_bk", "=", "cv2", ".", "resize", "(", "org_imgs", "[", "img_id", "]", ".", "copy", "(", ")", ",", "(", "hp_ae", ".", "shape", "[", "1", "]", ",", "hp_ae", ".", "shape", "[", "2", "]", ")", ")", "\n", "heatmaps_AEmaps", ".", "append", "(", "np", ".", "vstack", "(", "[", "make_heatmaps", "(", "img_bk", ",", "hp_ae", "[", ":", "self", ".", "heatmap_kpnum", "]", ")", ",", "make_tagmaps", "(", "img_bk", ",", "hp_ae", "[", "self", ".", "heatmap_kpnum", ":", "]", ")", "]", ")", ")", "\n", "\n", "", "", "if", "vis_name", "==", "'centermap'", "and", "'center_map'", "in", "outputs", "and", "detection_flag", ":", "\n", "                ", "centermaps_list", "=", "[", "]", "\n", "for", "img_id", ",", "centermap", "in", "enumerate", "(", "outputs", "[", "'center_map'", "]", "[", "used_org_inds", "]", ")", ":", "\n", "                    ", "img_bk", "=", "cv2", ".", "resize", "(", "org_imgs", "[", "img_id", "]", ".", "copy", "(", ")", ",", "org_imgs", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "centermaps_list", ".", "append", "(", "make_heatmaps", "(", "img_bk", ",", "centermap", ")", ")", "\n", "", "if", "save2html", ":", "\n", "                    ", "centermaps_list", "=", "convert_image_list", "(", "centermaps_list", ")", "\n", "", "plot_dict", "[", "'centermap'", "]", "=", "{", "'figs'", ":", "centermaps_list", ",", "'type'", ":", "'image'", "}", "\n", "\n", "", "", "if", "save2html", ":", "\n", "            ", "write_to_html", "(", "img_names", ",", "plot_dict", ",", "vis_cfg", ")", "\n", "\n", "", "return", "plot_dict", ",", "img_names", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.draw_skeleton": [[235, 237], ["visualization.Visualizer.draw_skeleton"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton"], ["", "def", "draw_skeleton", "(", "self", ",", "image", ",", "pts", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "draw_skeleton", "(", "image", ",", "pts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.draw_skeleton_multiperson": [[238, 240], ["visualization.Visualizer.draw_skeleton_multiperson"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson"], ["", "def", "draw_skeleton_multiperson", "(", "self", ",", "image", ",", "pts", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "draw_skeleton_multiperson", "(", "image", ",", "pts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Plotter3dPoses.__init__": [[342, 359], ["numpy.array", "numpy.float32", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "axes.append", "axes.append", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "canvas_size", "=", "(", "512", ",", "512", ")", ",", "origin", "=", "(", "0.5", ",", "0.5", ")", ",", "scale", "=", "200", ")", ":", "\n", "        ", "self", ".", "canvas_size", "=", "canvas_size", "\n", "self", ".", "origin", "=", "np", ".", "array", "(", "[", "origin", "[", "1", "]", "*", "canvas_size", "[", "1", "]", ",", "origin", "[", "0", "]", "*", "canvas_size", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "# x, y", "\n", "self", ".", "scale", "=", "np", ".", "float32", "(", "scale", ")", "\n", "self", ".", "theta", ",", "self", ".", "phi", "=", "0", ",", "np", ".", "pi", "/", "2", "#np.pi/4, -np.pi/6", "\n", "axis_length", "=", "200", "\n", "axes", "=", "[", "\n", "np", ".", "array", "(", "[", "[", "-", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", ",", "0", "]", ",", "[", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "-", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", ",", "0", "]", ",", "[", "-", "axis_length", "/", "2", ",", "axis_length", "/", "2", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "-", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", ",", "0", "]", ",", "[", "-", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", ",", "axis_length", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "]", "\n", "step", "=", "20", "\n", "for", "step_id", "in", "range", "(", "axis_length", "//", "step", "+", "1", ")", ":", "# add grid", "\n", "            ", "axes", ".", "append", "(", "np", ".", "array", "(", "[", "[", "-", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", "+", "step_id", "*", "step", ",", "0", "]", ",", "\n", "[", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", "+", "step_id", "*", "step", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "axes", ".", "append", "(", "np", ".", "array", "(", "[", "[", "-", "axis_length", "/", "2", "+", "step_id", "*", "step", ",", "-", "axis_length", "/", "2", ",", "0", "]", ",", "\n", "[", "-", "axis_length", "/", "2", "+", "step_id", "*", "step", ",", "axis_length", "/", "2", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "self", ".", "axes", "=", "np", ".", "array", "(", "axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Plotter3dPoses.plot": [[360, 367], ["visualization.Plotter3dPoses._get_rotation", "zip", "visualization.Plotter3dPoses._plot_edges", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._get_rotation", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._plot_edges"], ["", "def", "plot", "(", "self", ",", "pose_3ds", ",", "bones", ",", "colors", "=", "[", "(", "255", ",", "255", ",", "255", ")", "]", ",", "img", "=", "None", ")", ":", "\n", "        ", "img", "=", "np", ".", "ones", "(", "(", "self", ".", "canvas_size", "[", "0", "]", ",", "self", ".", "canvas_size", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "if", "img", "is", "None", "else", "img", "\n", "R", "=", "self", ".", "_get_rotation", "(", "self", ".", "theta", ",", "self", ".", "phi", ")", "\n", "#self._draw_axes(img, R)", "\n", "for", "vertices", ",", "color", "in", "zip", "(", "pose_3ds", ",", "colors", ")", ":", "\n", "            ", "self", ".", "_plot_edges", "(", "img", ",", "vertices", ",", "bones", ",", "R", ",", "color", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Plotter3dPoses.encircle_plot": [[368, 381], ["zip", "numpy.array", "visualization.Plotter3dPoses._get_rotation", "zip", "numpy.ones", "numpy.array", "visualization.Plotter3dPoses._plot_edges"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._get_rotation", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._plot_edges"], ["", "def", "encircle_plot", "(", "self", ",", "pose_3ds", ",", "bones", ",", "colors", "=", "[", "(", "255", ",", "255", ",", "255", ")", "]", ",", "img", "=", "None", ")", ":", "\n", "        ", "img", "=", "np", ".", "ones", "(", "(", "self", ".", "canvas_size", "[", "0", "]", ",", "self", ".", "canvas_size", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "if", "img", "is", "None", "else", "img", "\n", "#encircle_theta, encircle_phi = [0, np.pi/4, np.pi/2, 3*np.pi/4], [np.pi/2,np.pi/2,np.pi/2,np.pi/2]", "\n", "encircle_theta", ",", "encircle_phi", "=", "[", "0", ",", "0", ",", "0", ",", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "/", "2", ",", "np", ".", "pi", "/", "2", ",", "np", ".", "pi", "/", "2", "]", ",", "[", "np", ".", "pi", "/", "2", ",", "5", "*", "np", ".", "pi", "/", "7", ",", "-", "2", "*", "np", ".", "pi", "/", "7", ",", "np", ".", "pi", "/", "2", ",", "5", "*", "np", ".", "pi", "/", "7", ",", "-", "2", "*", "np", ".", "pi", "/", "7", ",", "np", ".", "pi", "/", "2", ",", "5", "*", "np", ".", "pi", "/", "7", ",", "-", "2", "*", "np", ".", "pi", "/", "7", ",", "]", "\n", "encircle_origin", "=", "np", ".", "array", "(", "[", "[", "0.165", ",", "0.165", "]", ",", "[", "0.165", ",", "0.495", "]", ",", "[", "0.165", ",", "0.825", "]", ",", "[", "0.495", ",", "0.165", "]", ",", "[", "0.495", ",", "0.495", "]", ",", "[", "0.495", ",", "0.825", "]", ",", "[", "0.825", ",", "0.165", "]", ",", "[", "0.825", ",", "0.495", "]", ",", "[", "0.825", ",", "0.825", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "*", "np", ".", "array", "(", "self", ".", "canvas_size", ")", "[", "None", "]", "\n", "for", "self", ".", "theta", ",", "self", ".", "phi", ",", "self", ".", "origin", "in", "zip", "(", "encircle_theta", ",", "encircle_phi", ",", "encircle_origin", ")", ":", "\n", "            ", "R", "=", "self", ".", "_get_rotation", "(", "self", ".", "theta", ",", "self", ".", "phi", ")", "\n", "#self._draw_axes(img, R)", "\n", "for", "vertices", ",", "color", "in", "zip", "(", "pose_3ds", ",", "colors", ")", ":", "\n", "                ", "self", ".", "_plot_edges", "(", "img", ",", "vertices", "*", "0.6", ",", "bones", ",", "R", ",", "color", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Plotter3dPoses._draw_axes": [[382, 388], ["numpy.dot", "axe.astype.astype.astype", "cv2.line", "tuple", "tuple"], "methods", ["None"], ["", "def", "_draw_axes", "(", "self", ",", "img", ",", "R", ")", ":", "\n", "        ", "axes_2d", "=", "np", ".", "dot", "(", "self", ".", "axes", ",", "R", ")", "\n", "axes_2d", "=", "axes_2d", "+", "self", ".", "origin", "\n", "for", "axe", "in", "axes_2d", ":", "\n", "            ", "axe", "=", "axe", ".", "astype", "(", "int", ")", "\n", "cv2", ".", "line", "(", "img", ",", "tuple", "(", "axe", "[", "0", "]", ")", ",", "tuple", "(", "axe", "[", "1", "]", ")", ",", "(", "128", ",", "128", ",", "128", ")", ",", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Plotter3dPoses._plot_edges": [[389, 398], ["numpy.dot", "enumerate", "vertices.reshape", "edge_vertices.astype.astype.astype", "cv2.line", "tuple", "tuple", "numpy.dot.reshape"], "methods", ["None"], ["", "", "def", "_plot_edges", "(", "self", ",", "img", ",", "vertices", ",", "edges", ",", "R", ",", "color", ")", ":", "\n", "        ", "vertices_2d", "=", "np", ".", "dot", "(", "vertices", ",", "R", ")", "\n", "edges_vertices", "=", "vertices_2d", ".", "reshape", "(", "(", "-", "1", ",", "2", ")", ")", "[", "edges", "]", "*", "self", ".", "scale", "+", "self", ".", "origin", "\n", "org_verts", "=", "vertices", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "[", "edges", "]", "\n", "for", "inds", ",", "edge_vertices", "in", "enumerate", "(", "edges_vertices", ")", ":", "\n", "            ", "if", "0", "in", "org_verts", "[", "inds", "]", ":", "\n", "                ", "continue", "\n", "", "edge_vertices", "=", "edge_vertices", ".", "astype", "(", "int", ")", "\n", "cv2", ".", "line", "(", "img", ",", "tuple", "(", "edge_vertices", "[", "0", "]", ")", ",", "tuple", "(", "edge_vertices", "[", "1", "]", ")", ",", "color", ",", "2", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Plotter3dPoses._get_rotation": [[399, 406], ["numpy.array", "cos", "sin", "sin", "sin", "cos", "sin", "cos"], "methods", ["None"], ["", "", "def", "_get_rotation", "(", "self", ",", "theta", ",", "phi", ")", ":", "\n", "        ", "sin", ",", "cos", "=", "math", ".", "sin", ",", "math", ".", "cos", "\n", "return", "np", ".", "array", "(", "[", "\n", "[", "cos", "(", "theta", ")", ",", "sin", "(", "theta", ")", "*", "sin", "(", "phi", ")", "]", ",", "\n", "[", "-", "sin", "(", "theta", ")", ",", "cos", "(", "theta", ")", "*", "sin", "(", "phi", ")", "]", ",", "\n", "[", "0", ",", "-", "cos", "(", "phi", ")", "]", "\n", "]", ",", "dtype", "=", "np", ".", "float32", ")", "# transposed", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.calc_auto_cam_params": [[242, 255], ["dict", "pytorch3d.renderer.look_at_view_transform", "verts[].max().item", "verts[].min().item", "verts[].max().item", "verts[].min().item", "verts[].max().item", "verts[].min().item", "numpy.mean", "numpy.mean", "numpy.mean", "max", "torch.Tensor", "torch.Tensor", "verts[].max", "verts[].min", "verts[].max", "verts[].min", "verts[].max", "verts[].min"], "function", ["None"], ["", "", "def", "calc_auto_cam_params", "(", "verts", ")", ":", "\n", "    ", "x_max", ",", "x_min", "=", "verts", "[", ":", ",", ":", ",", "0", "]", ".", "max", "(", ")", ".", "item", "(", ")", ",", "verts", "[", ":", ",", ":", ",", "0", "]", ".", "min", "(", ")", ".", "item", "(", ")", "\n", "y_max", ",", "y_min", "=", "verts", "[", ":", ",", ":", ",", "1", "]", ".", "max", "(", ")", ".", "item", "(", ")", ",", "verts", "[", ":", ",", ":", ",", "1", "]", ".", "min", "(", ")", ".", "item", "(", ")", "\n", "z_max", ",", "z_min", "=", "verts", "[", ":", ",", ":", ",", "2", "]", ".", "max", "(", ")", ".", "item", "(", ")", ",", "verts", "[", ":", ",", ":", ",", "2", "]", ".", "min", "(", ")", ".", "item", "(", ")", "\n", "cx", ",", "cy", ",", "cz", "=", "np", ".", "mean", "(", "[", "x_max", ",", "x_min", "]", ")", ",", "np", ".", "mean", "(", "[", "y_max", ",", "y_min", "]", ")", ",", "np", ".", "mean", "(", "[", "z_max", ",", "z_min", "]", ")", "\n", "span", "=", "max", "(", "x_max", "-", "x_min", ",", "y_max", "-", "y_min", ",", "z_max", "-", "z_min", ")", "/", "2.", "+", "1", "\n", "#xyz_ranges = dict(znear=max(cz-span, 0.5), zfar=cz+span, max_y=cy+span, min_y=cy-span, max_x=cx+span, min_x=cx-span)", "\n", "xyz_ranges", "=", "dict", "(", "znear", "=", "0.5", ",", "zfar", "=", "100", ",", "max_y", "=", "span", ",", "min_y", "=", "-", "span", ",", "max_x", "=", "span", ",", "min_x", "=", "-", "span", ")", "\n", "#height =  2* span / np.tan(np.radians(fov/2.))", "\n", "height", "=", "20", "\n", "R", ",", "T", "=", "look_at_view_transform", "(", "dist", "=", "height", ",", "elev", "=", "280", ",", "azim", "=", "0", ",", "at", "=", "torch", ".", "Tensor", "(", "[", "[", "cy", ",", "cx", ",", "cz", "]", "]", ")", ")", "\n", "#return (R, T, fov)", "\n", "return", "(", "R", ",", "T", ",", "xyz_ranges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.make_heatmaps": [[257, 279], ["heatmaps.mul().clamp().byte().detach().cpu().numpy.mul().clamp().byte().detach().cpu().numpy", "numpy.zeros", "range", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "cv2.applyColorMap", "heatmaps.mul().clamp().byte().detach().cpu().numpy.mul().clamp().byte().detach().cpu", "heatmaps.mul().clamp().byte().detach().cpu().numpy.mul().clamp().byte().detach", "heatmaps.mul().clamp().byte().detach().cpu().numpy.mul().clamp().byte", "heatmaps.mul().clamp().byte().detach().cpu().numpy.mul().clamp", "heatmaps.mul().clamp().byte().detach().cpu().numpy.mul"], "function", ["None"], ["", "def", "make_heatmaps", "(", "image", ",", "heatmaps", ")", ":", "\n", "    ", "heatmaps", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "heatmaps", "[", "None", "]", ",", "size", "=", "image", ".", "shape", "[", ":", "2", "]", ",", "mode", "=", "'bilinear'", ")", "[", "0", "]", "\n", "heatmaps", "=", "heatmaps", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "num_joints", ",", "height", ",", "width", "=", "heatmaps", ".", "shape", "\n", "image_grid", "=", "np", ".", "zeros", "(", "(", "height", ",", "(", "num_joints", "+", "1", ")", "*", "width", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "j", "in", "range", "(", "num_joints", ")", ":", "\n", "        ", "heatmap", "=", "heatmaps", "[", "j", ",", ":", ",", ":", "]", "\n", "colored_heatmap", "=", "cv2", ".", "applyColorMap", "(", "heatmap", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "image_fused", "=", "colored_heatmap", "*", "0.7", "+", "image", "*", "0.3", "\n", "\n", "width_begin", "=", "width", "*", "(", "j", "+", "1", ")", "\n", "width_end", "=", "width", "*", "(", "j", "+", "2", ")", "\n", "image_grid", "[", ":", ",", "width_begin", ":", "width_end", ",", ":", "]", "=", "image_fused", "\n", "\n", "", "image_grid", "[", ":", ",", "0", ":", "width", ",", ":", "]", "=", "image", "\n", "\n", "return", "image_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.make_tagmaps": [[281, 308], ["cv2.resize", "numpy.zeros", "range", "float", "float", "tagmap.add().div().mul().clamp().byte().detach().cpu().numpy.add().div().mul().clamp().byte().detach().cpu().numpy", "cv2.applyColorMap", "int", "int", "tagmap.add().div().mul().clamp().byte().detach().cpu().numpy.min", "tagmap.add().div().mul().clamp().byte().detach().cpu().numpy.max", "tagmap.add().div().mul().clamp().byte().detach().cpu().numpy.add().div().mul().clamp().byte().detach().cpu", "tagmap.add().div().mul().clamp().byte().detach().cpu().numpy.add().div().mul().clamp().byte().detach", "tagmap.add().div().mul().clamp().byte().detach().cpu().numpy.add().div().mul().clamp().byte", "tagmap.add().div().mul().clamp().byte().detach().cpu().numpy.add().div().mul().clamp", "tagmap.add().div().mul().clamp().byte().detach().cpu().numpy.add().div().mul", "tagmap.add().div().mul().clamp().byte().detach().cpu().numpy.add().div", "tagmap.add().div().mul().clamp().byte().detach().cpu().numpy.add"], "function", ["None"], ["", "def", "make_tagmaps", "(", "image", ",", "tagmaps", ")", ":", "\n", "    ", "num_joints", ",", "height", ",", "width", "=", "tagmaps", ".", "shape", "\n", "image_resized", "=", "cv2", ".", "resize", "(", "image", ",", "(", "int", "(", "width", ")", ",", "int", "(", "height", ")", ")", ")", "\n", "\n", "image_grid", "=", "np", ".", "zeros", "(", "(", "height", ",", "(", "num_joints", "+", "1", ")", "*", "width", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "j", "in", "range", "(", "num_joints", ")", ":", "\n", "        ", "tagmap", "=", "tagmaps", "[", "j", ",", ":", ",", ":", "]", "\n", "min", "=", "float", "(", "tagmap", ".", "min", "(", ")", ")", "\n", "max", "=", "float", "(", "tagmap", ".", "max", "(", ")", ")", "\n", "tagmap", "=", "tagmap", ".", "add", "(", "-", "min", ")", ".", "div", "(", "max", "-", "min", "+", "1e-5", ")", ".", "mul", "(", "255", ")", ".", "clamp", "(", "0", ",", "255", ")", ".", "byte", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "colored_tagmap", "=", "cv2", ".", "applyColorMap", "(", "tagmap", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "image_fused", "=", "colored_tagmap", "*", "0.9", "+", "image_resized", "*", "0.1", "\n", "\n", "width_begin", "=", "width", "*", "(", "j", "+", "1", ")", "\n", "width_end", "=", "width", "*", "(", "j", "+", "2", ")", "\n", "image_grid", "[", ":", ",", "width_begin", ":", "width_end", ",", ":", "]", "=", "image_fused", "\n", "\n", "", "image_grid", "[", ":", ",", "0", ":", "width", ",", ":", "]", "=", "image_resized", "\n", "\n", "return", "image_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.draw_skeleton": [[310, 333], ["enumerate", "numpy.concatenate().tolist", "len", "numpy.array().astype", "cm[].astype", "cv2.circle", "len", "len", "numpy.concatenate", "numpy.concatenate", "cv2.line", "cv2.putText", "numpy.array", "int", "int", "int", "int", "int", "int", "str", "int", "int", "int", "int", "int", "range", "len", "range", "len", "len", "len"], "function", ["None"], ["", "def", "draw_skeleton", "(", "image", ",", "pts", ",", "bones", "=", "None", ",", "cm", "=", "None", ",", "label_kp_order", "=", "False", ",", "r", "=", "3", ")", ":", "\n", "    ", "for", "i", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "\n", "        ", "if", "len", "(", "pt", ")", ">", "1", ":", "\n", "            ", "if", "pt", "[", "0", "]", ">", "0", "and", "pt", "[", "1", "]", ">", "0", ":", "\n", "                ", "image", "=", "cv2", ".", "circle", "(", "image", ",", "(", "int", "(", "pt", "[", "0", "]", ")", ",", "int", "(", "pt", "[", "1", "]", ")", ")", ",", "r", ",", "(", "255", ",", "0", ",", "0", ")", ",", "-", "1", ")", "\n", "if", "label_kp_order", "and", "i", "in", "bones", ":", "\n", "                    ", "img", "=", "cv2", ".", "putText", "(", "image", ",", "str", "(", "i", ")", ",", "(", "int", "(", "pt", "[", "0", "]", ")", ",", "int", "(", "pt", "[", "1", "]", ")", ")", ",", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "1", ",", "(", "255", ",", "215", ",", "0", ")", ",", "1", ")", "\n", "\n", "", "", "", "", "if", "bones", "is", "not", "None", ":", "\n", "        ", "if", "cm", "is", "None", ":", "\n", "            ", "set_colors", "=", "np", ".", "array", "(", "[", "[", "255", ",", "0", ",", "0", "]", "for", "i", "in", "range", "(", "len", "(", "bones", ")", ")", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "bones", ")", ">", "len", "(", "cm", ")", ":", "\n", "                ", "cm", "=", "np", ".", "concatenate", "(", "[", "cm", "for", "_", "in", "range", "(", "len", "(", "bones", ")", "//", "len", "(", "cm", ")", "+", "1", ")", "]", ",", "0", ")", "\n", "", "set_colors", "=", "cm", "[", ":", "len", "(", "bones", ")", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "", "bones", "=", "np", ".", "concatenate", "(", "[", "bones", ",", "set_colors", "]", ",", "1", ")", ".", "tolist", "(", ")", "\n", "for", "line", "in", "bones", ":", "\n", "            ", "pa", "=", "pts", "[", "line", "[", "0", "]", "]", "\n", "pb", "=", "pts", "[", "line", "[", "1", "]", "]", "\n", "if", "(", "pa", ">", "0", ")", ".", "all", "(", ")", "and", "(", "pb", ">", "0", ")", ".", "all", "(", ")", ":", "\n", "                ", "xa", ",", "ya", ",", "xb", ",", "yb", "=", "int", "(", "pa", "[", "0", "]", ")", ",", "int", "(", "pa", "[", "1", "]", ")", ",", "int", "(", "pb", "[", "0", "]", ")", ",", "int", "(", "pb", "[", "1", "]", ")", "\n", "image", "=", "cv2", ".", "line", "(", "image", ",", "(", "xa", ",", "ya", ")", ",", "(", "xb", ",", "yb", ")", ",", "(", "int", "(", "line", "[", "2", "]", ")", ",", "int", "(", "line", "[", "3", "]", ")", ",", "int", "(", "line", "[", "4", "]", ")", ")", ",", "r", ")", "\n", "", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.draw_skeleton_multiperson": [[334, 338], ["visualization.draw_skeleton"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton"], ["", "def", "draw_skeleton_multiperson", "(", "image", ",", "pts_group", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "pts", "in", "pts_group", ":", "\n", "        ", "image", "=", "draw_skeleton", "(", "image", ",", "pts", ",", "**", "kwargs", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.test_visualizer": [[407, 409], ["visualization.Visualizer", "config.args", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "def", "test_visualizer", "(", ")", ":", "\n", "    ", "visualizer", "=", "Visualizer", "(", "resolution", "=", "(", "512", ",", "512", ")", ",", "input_size", "=", "args", "(", ")", ".", "input_size", ",", "result_img_dir", "=", "args", "(", ")", ".", "result_img_dir", ",", "with_renderer", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.get_uvs": [[11, 17], ["numpy.load", "numpy.concatenate().reshape", "numpy.concatenate", "range"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["def", "get_uvs", "(", "uvmap_path", ")", ":", "\n", "    ", "uv_map_vt_ft", "=", "np", ".", "load", "(", "uvmap_path", ",", "allow_pickle", "=", "True", ")", "\n", "vt", ",", "ft", "=", "uv_map_vt_ft", "[", "'vt'", "]", ",", "uv_map_vt_ft", "[", "'ft'", "]", "\n", "uvs", "=", "np", ".", "concatenate", "(", "[", "vt", "[", "ft", "[", ":", ",", "ind", "]", "]", "[", ":", ",", "None", "]", "for", "ind", "in", "range", "(", "3", ")", "]", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "uvs", "[", ":", ",", "1", "]", "=", "1", "-", "uvs", "[", ":", ",", "1", "]", "\n", "return", "uvs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.parse_nvxia_uvmap": [[18, 22], ["uvmap[].reshape"], "function", ["None"], ["", "def", "parse_nvxia_uvmap", "(", "uvmap", ")", ":", "\n", "    ", "uvs", "=", "uvmap", "[", ":", ",", ":", ",", ":", "2", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "uvs", "[", ":", ",", "1", "]", "=", "1", "-", "uvs", "[", ":", ",", "1", "]", "\n", "return", "uvs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh_with_uvmap": [[24, 38], ["open3d.geometry.TriangleMesh", "open3d.utility.Vector3dVector", "open3d.utility.Vector3iVector", "o3d.geometry.TriangleMesh.compute_vertex_normals", "open3d.io.read_image", "open3d.utility.Vector2dVector", "open3d.utility.IntVector", "open3d.io.read_image", "numpy.zeros", "len"], "function", ["None"], ["", "def", "create_mesh_with_uvmap", "(", "vertices", ",", "faces", ",", "texture_path", "=", "None", ",", "uvs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "mesh", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "vertices", ")", "\n", "mesh", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "faces", ")", "\n", "if", "texture_path", "is", "not", "None", "and", "uvs", "is", "not", "None", ":", "\n", "        ", "if", "o3d_version", "==", "9", ":", "\n", "            ", "mesh", ".", "texture", "=", "o3d", ".", "io", ".", "read_image", "(", "texture_path", ")", "\n", "mesh", ".", "triangle_uvs", "=", "uvs", "\n", "", "elif", "o3d_version", ">=", "11", ":", "\n", "            ", "mesh", ".", "textures", "=", "[", "o3d", ".", "io", ".", "read_image", "(", "texture_path", ")", "]", "\n", "mesh", ".", "triangle_uvs", "=", "o3d", ".", "utility", ".", "Vector2dVector", "(", "uvs", ")", "\n", "mesh", ".", "triangle_material_ids", "=", "o3d", ".", "utility", ".", "IntVector", "(", "np", ".", "zeros", "(", "(", "len", "(", "faces", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "", "", "mesh", ".", "compute_vertex_normals", "(", ")", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh": [[40, 50], ["open3d.geometry.TriangleMesh", "open3d.utility.Vector3dVector", "open3d.utility.Vector3iVector", "o3d.geometry.TriangleMesh.compute_vertex_normals", "open3d.utility.Vector3dVector", "o3d.geometry.TriangleMesh.paint_uniform_color"], "function", ["None"], ["", "def", "create_mesh", "(", "vertices", ",", "faces", ",", "colors", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "mesh", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "vertices", ")", "\n", "mesh", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "faces", ")", "\n", "if", "colors", "is", "not", "None", ":", "\n", "        ", "mesh", ".", "vertex_colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "colors", ")", "\n", "", "else", ":", "\n", "        ", "mesh", ".", "paint_uniform_color", "(", "[", "1.", ",", "0.8", ",", "0.8", "]", ")", "\n", "", "mesh", ".", "compute_vertex_normals", "(", ")", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_smpl_mesh": [[51, 80], ["pickle.load", "open", "create_meshes.get_uvs", "create_meshes.create_mesh_with_uvmap", "os.path.join", "print", "os.path.join", "os.path.join", "create_meshes.create_mesh", "create_meshes.create_mesh", "config.args", "config.args", "config.args", "config.args", "random.sample", "config.args", "numpy.array", "config.args", "list", "config.args", "config.args", "constants.wardrobe.keys", "config.args", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.get_uvs", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh_with_uvmap", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "create_smpl_mesh", "(", ")", ":", "\n", "# if multi_mode:", "\n", "#     self.current_mesh_num = 10", "\n", "#     self.zero_vertices = o3d.utility.Vector3dVector(np.zeros((6890,3)))", "\n", "#     self.meshes = []", "\n", "#     for _ in range(self.current_mesh_num):", "\n", "#         new_mesh = self.create_smpl_mesh(self.verts_mean)", "\n", "#         self.meshes.append(new_mesh)", "\n", "#     self.set_meshes_zero(list(range(self.current_mesh_num)))", "\n", "\n", "    ", "smpl_param_dict", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "smpl_model_path", ",", "'SMPL_NEUTRAL.pkl'", ")", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "faces", "=", "smpl_param_dict", "[", "'f'", "]", "\n", "vertices", "=", "smpl_param_dict", "[", "'v_template'", "]", "\n", "if", "args", "(", ")", ".", "mesh_cloth", "in", "constants", ".", "wardrobe", "or", "args", "(", ")", ".", "mesh_cloth", "==", "'random'", ":", "\n", "        ", "uvs", "=", "get_uvs", "(", "args", "(", ")", ".", "smpl_uvmap", ")", "\n", "if", "args", "(", ")", ".", "mesh_cloth", "==", "'random'", ":", "\n", "            ", "mesh_cloth_id", "=", "random", ".", "sample", "(", "list", "(", "constants", ".", "wardrobe", ".", "keys", "(", ")", ")", ",", "1", ")", "[", "0", "]", "\n", "print", "(", "'choose mesh_cloth: '", ",", "mesh_cloth_id", ",", "constants", ".", "wardrobe", "[", "mesh_cloth_id", "]", ")", "\n", "texture_file", "=", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "wardrobe", ",", "constants", ".", "wardrobe", "[", "mesh_cloth_id", "]", ")", "\n", "", "else", ":", "\n", "            ", "texture_file", "=", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "wardrobe", ",", "constants", ".", "wardrobe", "[", "args", "(", ")", ".", "mesh_cloth", "]", ")", "\n", "", "mesh", "=", "create_mesh_with_uvmap", "(", "vertices", ",", "faces", ",", "texture_path", "=", "texture_file", ",", "uvs", "=", "uvs", ")", "\n", "", "elif", "args", "(", ")", ".", "mesh_cloth", "in", "constants", ".", "mesh_color_dict", ":", "\n", "        ", "mesh_color", "=", "np", ".", "array", "(", "constants", ".", "mesh_color_dict", "[", "args", "(", ")", ".", "mesh_cloth", "]", ")", "/", "255.", "\n", "mesh", "=", "create_mesh", "(", "vertices", "=", "vertices", ",", "faces", "=", "faces", ",", "colors", "=", "mesh_color", ")", "\n", "", "else", ":", "\n", "        ", "mesh", "=", "create_mesh", "(", "vertices", "=", "vertices", ",", "faces", "=", "faces", ")", "\n", "\n", "", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_nvxia_mesh": [[81, 90], ["os.path.join", "numpy.load", "numpy.array", "os.path.join", "create_meshes.parse_nvxia_uvmap", "create_meshes.create_mesh_with_uvmap", "config.args", "numpy.array", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.parse_nvxia_uvmap", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh_with_uvmap", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "create_nvxia_mesh", "(", ")", ":", "\n", "    ", "params_path", "=", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "nvxia_model_path", ",", "'nvxia.npz'", ")", "\n", "params_dict", "=", "np", ".", "load", "(", "params_path", ",", "allow_pickle", "=", "True", ")", "\n", "vertices", "=", "params_dict", "[", "'coordinates'", "]", "\n", "faces", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "face", ")", "for", "face", "in", "params_dict", "[", "'polygons'", "]", "]", ")", "\n", "texture_file", "=", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "nvxia_model_path", ",", "'Kachujin_diffuse.png'", ")", "\n", "uvs", "=", "parse_nvxia_uvmap", "(", "params_dict", "[", "'uvmap'", "]", ")", "\n", "mesh", "=", "create_mesh_with_uvmap", "(", "vertices", ",", "faces", ",", "texture_path", "=", "texture_file", ",", "uvs", "=", "uvs", ")", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_body_mesh": [[91, 101], ["create_meshes.create_smpl_mesh", "config.args", "print", "create_meshes.create_nvxia_mesh", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_smpl_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_nvxia_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "create_body_mesh", "(", ")", ":", "\n", "    ", "if", "args", "(", ")", ".", "character", "==", "'smpl'", ":", "\n", "        ", "mesh", "=", "create_smpl_mesh", "(", ")", "\n", "#self.view_mat = axangle2mat([1, 0, 0], np.pi) # align different coordinate systems", "\n", "", "elif", "args", "(", ")", ".", "character", "==", "'nvxia'", ":", "\n", "        ", "print", "(", "'Loading NvXia model for visualization'", ")", "\n", "mesh", "=", "create_nvxia_mesh", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_body_model": [[102, 112], ["SMPL", "config.args", "create_nvxia_model", "config.args", "config.args", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "create_body_model", "(", ")", ":", "\n", "    ", "if", "args", "(", ")", ".", "character", "==", "'smpl'", ":", "\n", "        ", "from", "models", ".", "smpl", "import", "SMPL", "\n", "model", "=", "SMPL", "(", "args", "(", ")", ".", "smpl_model_path", ")", "\n", "", "elif", "args", "(", ")", ".", "character", "==", "'nvxia'", ":", "\n", "        ", "from", "models", ".", "nvxia", "import", "create_nvxia_model", "\n", "model", "=", "create_nvxia_model", "(", "args", "(", ")", ".", "nvxia_model_path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocket.__init__": [[76, 89], ["print", "socket.socket", "socket.socket.bind", "socket.socket.listen", "queue.Queue", "threading.Thread", "socket_utils.BaseSocket.t.start"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start"], ["    ", "def", "__init__", "(", "self", ",", "host", ",", "port", ",", "debug", "=", "False", ")", "->", "None", ":", "\n", "# \u521b\u5efa socket \u5bf9\u8c61", "\n", "        ", "print", "(", "'[Info] server start'", ")", "\n", "serversocket", "=", "socket", ".", "socket", "(", "\n", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "serversocket", ".", "bind", "(", "(", "host", ",", "port", ")", ")", "\n", "serversocket", ".", "listen", "(", "1", ")", "\n", "self", ".", "serversocket", "=", "serversocket", "\n", "self", ".", "queue", "=", "Queue", "(", ")", "\n", "self", ".", "t", "=", "Thread", "(", "target", "=", "self", ".", "run", ")", "\n", "self", ".", "t", ".", "start", "(", ")", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "disconnect", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocket.recvLine": [[90, 101], ["result.endswith", "sock.recv", "result.strip().decode", "result.strip"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode"], ["", "@", "staticmethod", "\n", "def", "recvLine", "(", "sock", ")", ":", "\n", "        ", "flag", "=", "True", "\n", "result", "=", "b''", "\n", "while", "not", "result", ".", "endswith", "(", "b'\\n'", ")", ":", "\n", "            ", "res", "=", "sock", ".", "recv", "(", "1", ")", "\n", "if", "not", "res", ":", "\n", "                ", "flag", "=", "False", "\n", "break", "\n", "", "result", "+=", "res", "\n", "", "return", "flag", ",", "result", ".", "strip", "(", ")", ".", "decode", "(", "'ascii'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocket.recvAll": [[102, 110], ["int", "result.decode", "len", "sock.recv", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode"], ["", "@", "staticmethod", "\n", "def", "recvAll", "(", "sock", ",", "l", ")", ":", "\n", "        ", "l", "=", "int", "(", "l", ")", "\n", "result", "=", "b''", "\n", "while", "(", "len", "(", "result", ")", "<", "l", ")", ":", "\n", "            ", "t", "=", "sock", ".", "recv", "(", "l", "-", "len", "(", "result", ")", ")", "\n", "result", "+=", "t", "\n", "", "return", "result", ".", "decode", "(", "'ascii'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocket.run": [[111, 126], ["socket_utils.BaseSocket.serversocket.accept", "print", "clientsocket.close", "socket_utils.BaseSocket.recvLine", "socket_utils.BaseSocket.recvAll", "socket_utils.BaseSocket.queue.put", "str", "print", "socket_utils.log", "str"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocket.recvLine", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocket.recvAll", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "clientsocket", ",", "addr", "=", "self", ".", "serversocket", ".", "accept", "(", ")", "\n", "print", "(", "\"[Info] Connect: %s\"", "%", "str", "(", "addr", ")", ")", "\n", "self", ".", "disconnect", "=", "False", "\n", "while", "True", ":", "\n", "                ", "flag", ",", "l", "=", "self", ".", "recvLine", "(", "clientsocket", ")", "\n", "if", "not", "flag", ":", "\n", "                    ", "print", "(", "\"[Info] Disonnect: %s\"", "%", "str", "(", "addr", ")", ")", "\n", "self", ".", "disconnect", "=", "True", "\n", "break", "\n", "", "data", "=", "self", ".", "recvAll", "(", "clientsocket", ",", "l", ")", "\n", "if", "self", ".", "debug", ":", "log", "(", "'[Info] Recv data'", ")", "\n", "self", ".", "queue", ".", "put", "(", "data", ")", "\n", "", "clientsocket", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocket.update": [[127, 133], ["time.sleep", "socket_utils.BaseSocket.queue.empty", "socket_utils.log", "socket_utils.BaseSocket.queue.get", "socket_utils.BaseSocket.main"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.main"], ["", "", "def", "update", "(", "self", ")", ":", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "while", "not", "self", ".", "queue", ".", "empty", "(", ")", ":", "\n", "            ", "log", "(", "'update'", ")", "\n", "data", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "self", ".", "main", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocket.main": [[134, 136], ["print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "def", "main", "(", "self", ",", "datas", ")", ":", "\n", "        ", "print", "(", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocket.__del__": [[137, 140], ["socket_utils.BaseSocket.serversocket.close", "socket_utils.BaseSocket.t.join"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "serversocket", ".", "close", "(", ")", "\n", "self", ".", "t", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocketClient.__init__": [[143, 149], ["socket.socket", "socket.socket.connect", "socket.gethostname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "host", "=", "'127.0.0.1'", ",", "port", "=", "9999", ")", "->", "None", ":", "\n", "        ", "if", "host", "==", "'auto'", ":", "\n", "            ", "host", "=", "socket", ".", "gethostname", "(", ")", "\n", "", "s", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "s", ".", "connect", "(", "(", "host", ",", "port", ")", ")", "\n", "self", ".", "s", "=", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocketClient.send": [[150, 154], ["socket_utils.encode_detect", "socket_utils.BaseSocketClient.s.send", "socket_utils.BaseSocketClient.s.sendall", "bytes", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.encode_detect", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.send"], ["", "def", "send", "(", "self", ",", "data", ")", ":", "\n", "        ", "val", "=", "encode_detect", "(", "data", ")", "\n", "self", ".", "s", ".", "send", "(", "bytes", "(", "'{}\\n'", ".", "format", "(", "len", "(", "val", ")", ")", ",", "'ascii'", ")", ")", "\n", "self", ".", "s", ".", "sendall", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocketClient.send_smpl": [[155, 159], ["socket_utils.encode_smpl", "socket_utils.BaseSocketClient.s.send", "socket_utils.BaseSocketClient.s.sendall", "bytes", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.encode_smpl", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.send"], ["", "def", "send_smpl", "(", "self", ",", "data", ")", ":", "\n", "        ", "val", "=", "encode_smpl", "(", "data", ")", "\n", "self", ".", "s", ".", "send", "(", "bytes", "(", "\"{}\\n\"", ".", "format", "(", "len", "(", "val", ")", ")", ",", "'ascii'", ")", ")", "\n", "self", ".", "s", ".", "sendall", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocketClient.close": [[160, 162], ["socket_utils.BaseSocketClient.s.close"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "s", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.Results_sender.__init__": [[164, 169], ["socket_utils.BaseSocketClient", "queue.Queue", "threading.Thread", "socket_utils.Results_sender.t.start"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "client", "=", "BaseSocketClient", "(", ")", "\n", "self", ".", "queue", "=", "Queue", "(", ")", "\n", "self", ".", "t", "=", "Thread", "(", "target", "=", "self", ".", "run", ")", "\n", "self", ".", "t", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.Results_sender.run": [[170, 177], ["time.sleep", "socket_utils.Results_sender.queue.empty", "socket_utils.log", "socket_utils.Results_sender.queue.get", "socket_utils.Results_sender.client.send_smpl"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocketClient.send_smpl"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "while", "not", "self", ".", "queue", ".", "empty", "(", ")", ":", "\n", "                ", "log", "(", "'update'", ")", "\n", "data", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "self", ".", "client", ".", "send_smpl", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.Results_sender.send_results": [[178, 198], ["print", "enumerate", "socket_utils.Results_sender.queue.put", "results.append", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "", "def", "send_results", "(", "self", ",", "poses", "=", "None", ",", "betas", "=", "None", ",", "verts", "=", "None", ",", "kp3ds", "=", "None", ",", "trans", "=", "None", ",", "ids", "=", "[", "]", ")", ":", "\n", "\n", "        ", "results", "=", "[", "]", "\n", "print", "(", "'sending detected {} person results'", ".", "format", "(", "len", "(", "ids", ")", ")", ")", "\n", "for", "ind", ",", "pid", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "result", "=", "{", "}", "\n", "result", "[", "'id'", "]", "=", "pid", "\n", "# if kp3ds is not None:", "\n", "#     result['keypoints3d'] = kp3ds[[ind]]", "\n", "# if verts is not None:", "\n", "#     result['vertices'] = verts[[ind]]", "\n", "if", "trans", "is", "not", "None", ":", "\n", "                ", "result", "[", "'transl'", "]", "=", "trans", "[", "[", "ind", "]", "]", "\n", "", "if", "poses", "is", "not", "None", ":", "\n", "                ", "result", "[", "'poses'", "]", "=", "poses", "[", "[", "ind", "]", "]", "\n", "", "if", "betas", "is", "not", "None", ":", "\n", "                ", "result", "[", "'betas'", "]", "=", "betas", "[", "[", "ind", "]", "]", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "self", ".", "queue", ".", "put", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender.__init__": [[200, 207], ["socket.socket", "socket.socket.bind", "socket.socket.listen", "print", "socket.socket.accept"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["    ", "def", "__init__", "(", "self", ",", "host", "=", "'127.0.0.1'", ",", "port", "=", "9999", ")", "->", "None", ":", "\n", "        ", "s", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "s", ".", "bind", "(", "(", "host", ",", "port", ")", ")", "\n", "s", ".", "listen", "(", "1", ")", "\n", "print", "(", "f'bind on {port}'", ")", "\n", "self", ".", "sock", ",", "addr", "=", "s", ".", "accept", "(", ")", "\n", "self", ".", "s", "=", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender.send": [[208, 215], ["socket_utils.SocketClient_blender.sock.recv", "json.dumps().encode", "socket_utils.SocketClient_blender.sock.send", "socket_utils.SocketClient_blender.close", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.encode", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.send", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close"], ["", "def", "send", "(", "self", ",", "data_list", ")", ":", "\n", "        ", "d", "=", "self", ".", "sock", ".", "recv", "(", "1024", ")", "\n", "if", "not", "d", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "#data, addr = self.s.recvfrom(1024)", "\n", "", "data_send", "=", "json", ".", "dumps", "(", "data_list", ")", ".", "encode", "(", "'utf-8'", ")", "\n", "self", ".", "sock", ".", "send", "(", "data_send", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender.close": [[216, 218], ["socket_utils.SocketClient_blender.s.close"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "s", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.__init__": [[220, 225], ["socket.socket", "socket.socket.bind", "print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["    ", "def", "__init__", "(", "self", ",", "host", "=", "'127.0.0.1'", ",", "port", "=", "9999", ")", "->", "None", ":", "\n", "        ", "s", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_DGRAM", ")", "\n", "s", ".", "bind", "(", "(", "host", ",", "port", ")", ")", "\n", "print", "(", "f'bind on {port}'", ")", "\n", "self", ".", "s", "=", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.send": [[226, 230], ["socket_utils.SocketClient_blender_old.s.recvfrom", "json.dumps", "socket_utils.SocketClient_blender_old.s.sendto", "bytes", "json.dumps.encode"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.encode"], ["", "def", "send", "(", "self", ",", "data_list", ")", ":", "\n", "        ", "data", ",", "addr", "=", "self", ".", "s", ".", "recvfrom", "(", "1024", ")", "\n", "data_send", "=", "json", ".", "dumps", "(", "data_list", ")", "\n", "self", ".", "s", ".", "sendto", "(", "bytes", "(", "data_send", ".", "encode", "(", "'utf-8'", ")", ")", ",", "addr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close": [[231, 233], ["socket_utils.SocketClient_blender_old.s.close"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "s", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.myarray2string": [[9, 19], ["range", "res.append", "len", "res.append", "separator.join"], "function", ["None"], ["def", "myarray2string", "(", "array", ",", "separator", "=", "', '", ",", "fmt", "=", "'%.3f'", ",", "indent", "=", "8", ")", ":", "\n", "    ", "assert", "len", "(", "array", ".", "shape", ")", "==", "2", ",", "'Only support MxN matrix, {}'", ".", "format", "(", "array", ".", "shape", ")", "\n", "blank", "=", "' '", "*", "indent", "\n", "res", "=", "[", "'['", "]", "\n", "for", "i", "in", "range", "(", "array", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "res", ".", "append", "(", "blank", "+", "'  '", "+", "'[{}]'", ".", "format", "(", "separator", ".", "join", "(", "[", "fmt", "%", "(", "d", ")", "for", "d", "in", "array", "[", "i", "]", "]", ")", ")", ")", "\n", "if", "i", "!=", "array", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "            ", "res", "[", "-", "1", "]", "+=", "', '", "\n", "", "", "res", ".", "append", "(", "blank", "+", "']'", ")", "\n", "return", "'\\r\\n'", ".", "join", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.write_common_results": [[20, 52], ["out_text.append", "enumerate", "out_text.append", "out_text.append", "list", "out_text.append", "mkout", "socket_utils.myarray2string", "output.keys", "out_text.append", "out_text.append", "out_text.append", "open", "f.writelines", "data.keys", "out_text.append", "out_text.append", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.myarray2string"], ["", "def", "write_common_results", "(", "dumpname", "=", "None", ",", "results", "=", "[", "]", ",", "keys", "=", "[", "]", ",", "fmt", "=", "'%2.3f'", ")", ":", "\n", "    ", "format_out", "=", "{", "'float_kind'", ":", "lambda", "x", ":", "fmt", "%", "x", "}", "\n", "out_text", "=", "[", "]", "\n", "out_text", ".", "append", "(", "'[\\n'", ")", "\n", "for", "idata", ",", "data", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "out_text", ".", "append", "(", "'    {\\n'", ")", "\n", "output", "=", "{", "}", "\n", "output", "[", "'id'", "]", "=", "data", "[", "'id'", "]", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "if", "key", "not", "in", "data", ".", "keys", "(", ")", ":", "continue", "\n", "# BUG: This function will failed if the rows of the data[key] is too large", "\n", "# output[key] = np.array2string(data[key], max_line_width=1000, separator=', ', formatter=format_out)", "\n", "output", "[", "key", "]", "=", "myarray2string", "(", "data", "[", "key", "]", ",", "separator", "=", "', '", ",", "fmt", "=", "fmt", ")", "\n", "", "out_keys", "=", "list", "(", "output", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "out_keys", ":", "\n", "            ", "out_text", ".", "append", "(", "'        \\\"{}\\\": {}'", ".", "format", "(", "key", ",", "output", "[", "key", "]", ")", ")", "\n", "if", "key", "!=", "out_keys", "[", "-", "1", "]", ":", "\n", "                ", "out_text", ".", "append", "(", "',\\n'", ")", "\n", "", "else", ":", "\n", "                ", "out_text", ".", "append", "(", "'\\n'", ")", "\n", "", "", "out_text", ".", "append", "(", "'    }'", ")", "\n", "if", "idata", "!=", "len", "(", "results", ")", "-", "1", ":", "\n", "            ", "out_text", ".", "append", "(", "',\\n'", ")", "\n", "", "else", ":", "\n", "            ", "out_text", ".", "append", "(", "'\\n'", ")", "\n", "", "", "out_text", ".", "append", "(", "']\\n'", ")", "\n", "if", "dumpname", "is", "not", "None", ":", "\n", "        ", "mkout", "(", "dumpname", ")", "\n", "with", "open", "(", "dumpname", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "writelines", "(", "out_text", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "''", ".", "join", "(", "out_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.encode_detect": [[53, 57], ["socket_utils.write_common_results", "res.replace().replace().replace.replace().replace().replace", "res.replace().replace().replace.encode", "res.replace().replace().replace.replace().replace", "res.replace().replace().replace.replace"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.write_common_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.encode"], ["", "", "def", "encode_detect", "(", "data", ")", ":", "\n", "    ", "res", "=", "write_common_results", "(", "None", ",", "data", ",", "[", "'keypoints3d'", "]", ")", "\n", "res", "=", "res", ".", "replace", "(", "'\\r'", ",", "''", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "replace", "(", "' '", ",", "''", ")", "\n", "return", "res", ".", "encode", "(", "'ascii'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.encode_smpl": [[58, 62], ["socket_utils.write_common_results", "res.replace().replace().replace.replace().replace().replace", "res.replace().replace().replace.encode", "res.replace().replace().replace.replace().replace", "res.replace().replace().replace.replace"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.write_common_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.encode"], ["", "def", "encode_smpl", "(", "data", ")", ":", "\n", "    ", "res", "=", "write_common_results", "(", "None", ",", "data", ",", "[", "'poses'", ",", "'betas'", ",", "'vertices'", ",", "'transl'", "]", ")", "\n", "res", "=", "res", ".", "replace", "(", "'\\r'", ",", "''", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "replace", "(", "' '", ",", "''", ")", "\n", "return", "res", ".", "encode", "(", "'ascii'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.encode_image": [[63, 69], ["cv2.imencode", "numpy.array", "np.array.tostring", "int"], "function", ["None"], ["", "def", "encode_image", "(", "image", ")", ":", "\n", "    ", "fourcc", "=", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "90", "]", "\n", "result", ",", "img_encode", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "image", ",", "fourcc", ")", "\n", "data", "=", "np", ".", "array", "(", "img_encode", ")", "# numpy array\ub85c \uc548\ubc14\uafd4\uc8fc\uba74 ERROR", "\n", "stringData", "=", "data", ".", "tostring", "(", ")", "\n", "return", "stringData", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log": [[70, 74], ["datetime.now().strftime", "print", "datetime.now"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "log", "(", "x", ")", ":", "\n", "    ", "from", "datetime", "import", "datetime", "\n", "time_now", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m-%d-%H:%M:%S.%f \"", ")", "\n", "print", "(", "time_now", "+", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pt3d.MeshRendererWithDepth.__init__": [[37, 41], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rasterizer", ",", "shader", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rasterizer", "=", "rasterizer", "\n", "self", ".", "shader", "=", "shader", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pt3d.MeshRendererWithDepth.forward": [[42, 46], ["renderer_pt3d.MeshRendererWithDepth.rasterizer", "renderer_pt3d.MeshRendererWithDepth.shader"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "meshes_world", ",", "**", "kwargs", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "fragments", "=", "self", ".", "rasterizer", "(", "meshes_world", ",", "**", "kwargs", ")", "\n", "images", "=", "self", ".", "shader", "(", "fragments", ",", "meshes_world", ",", "**", "kwargs", ")", "\n", "return", "(", "images", ",", "fragments", ".", "zbuf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pt3d.Renderer.__init__": [[48, 106], ["torch.nn.Module.__init__", "pytorch3d.renderer.RasterizationSettings", "config.args", "torch.device", "torch.device", "torch.Tensor", "torch.Tensor", "pytorch3d.renderer.FoVPerspectiveCameras", "pytorch3d.renderer.PointLights", "pytorch3d.renderer.DirectionalLights", "pytorch3d.renderer.MeshRenderer", "renderer_pt3d.MeshRendererWithDepth", "config.args", "pytorch3d.renderer.FoVOrthographicCameras", "pytorch3d.renderer.FoVOrthographicCameras", "torch.Tensor", "config.args", "torch.Tensor", "pytorch3d.renderer.MeshRasterizer", "pytorch3d.renderer.SoftPhongShader", "pytorch3d.renderer.MeshRasterizer", "pytorch3d.renderer.SoftPhongShader", "str().split", "str", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ",", "resolution", "=", "(", "512", ",", "512", ")", ",", "perps", "=", "True", ",", "R", "=", "None", ",", "T", "=", "None", ",", "fov", "=", "args", "(", ")", ".", "FOV", ",", "use_gpu", "=", "args", "(", ")", ".", "gpu", "!=", "'-1'", ",", "with_depth", "=", "False", ")", ":", "\n", "        ", "super", "(", "Renderer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "perps", "=", "perps", "\n", "self", ".", "with_depth", "=", "with_depth", "\n", "if", "use_gpu", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "str", "(", "args", "(", ")", ".", "gpu", ")", ".", "split", "(", "','", ")", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "if", "R", "is", "None", ":", "\n", "            ", "R", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "1.", ",", "0.", ",", "0.", "]", ",", "[", "0.", ",", "1.", ",", "0.", "]", ",", "[", "0.", ",", "0.", ",", "1.", "]", "]", "]", ")", "\n", "", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", "]", "]", ")", "\n", "\n", "", "if", "self", ".", "perps", ":", "\n", "# Initialize a camera.", "\n", "            ", "self", ".", "cameras", "=", "FoVPerspectiveCameras", "(", "R", "=", "R", ",", "T", "=", "T", ",", "fov", "=", "fov", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "lights", "=", "PointLights", "(", "ambient_color", "=", "(", "(", "0.56", ",", "0.56", ",", "0.56", ")", ",", ")", ",", "location", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", "]", "]", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "if", "args", "(", ")", ".", "model_version", "==", "1", ":", "\n", "                ", "self", ".", "cameras", "=", "FoVOrthographicCameras", "(", "R", "=", "R", ",", "T", "=", "T", ",", "znear", "=", "0.", ",", "zfar", "=", "100.0", ",", "max_y", "=", "1.0", ",", "min_y", "=", "-", "1.0", ",", "max_x", "=", "1.0", ",", "min_x", "=", "-", "1.0", ",", "device", "=", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "cameras", "=", "FoVOrthographicCameras", "(", "R", "=", "R", ",", "T", "=", "T", ",", "znear", "=", "0.", ",", "zfar", "=", "100.0", ",", "max_y", "=", "2.0", ",", "min_y", "=", "-", "2.0", ",", "max_x", "=", "2.0", ",", "min_x", "=", "-", "2.0", ",", "device", "=", "self", ".", "device", ")", "\n", "", "self", ".", "lights", "=", "DirectionalLights", "(", "ambient_color", "=", "(", "(", "0.6", ",", "0.6", ",", "0.6", ")", ",", ")", ",", "direction", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "-", "1.", ",", "0.", "]", "]", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Define the settings for rasterization and shading. Here we set the output image to be of size", "\n", "# 512x512. As we are rendering images for visualization purposes only we will set faces_per_pixel=1", "\n", "# and blur_radius=0.0. ", "\n", "", "raster_settings", "=", "RasterizationSettings", "(", "\n", "image_size", "=", "resolution", "[", "0", "]", ",", "\n", "blur_radius", "=", "0.0", ",", "\n", "faces_per_pixel", "=", "1", ",", "\n", "bin_size", "=", "0", ",", "# to avoid the warning.", "\n", ")", "\n", "\n", "# Create a Phong renderer by composing a rasterizer and a shader. The textured Phong shader will ", "\n", "# interpolate the texture uv coordinates for each vertex, sample from a texture image and ", "\n", "# apply the Phong lighting model", "\n", "if", "not", "with_depth", ":", "\n", "            ", "self", ".", "renderer", "=", "MeshRenderer", "(", "\n", "rasterizer", "=", "MeshRasterizer", "(", "\n", "cameras", "=", "self", ".", "cameras", ",", "\n", "raster_settings", "=", "raster_settings", "\n", ")", ",", "\n", "shader", "=", "SoftPhongShader", "(", "\n", "device", "=", "self", ".", "device", ",", "\n", "cameras", "=", "self", ".", "cameras", ",", "\n", "lights", "=", "self", ".", "lights", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "renderer", "=", "MeshRendererWithDepth", "(", "\n", "rasterizer", "=", "MeshRasterizer", "(", "\n", "cameras", "=", "self", ".", "cameras", ",", "\n", "raster_settings", "=", "raster_settings", "\n", ")", ",", "\n", "shader", "=", "SoftPhongShader", "(", "\n", "device", "=", "self", ".", "device", ",", "\n", "cameras", "=", "self", ".", "cameras", ",", "\n", "lights", "=", "self", ".", "lights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pt3d.Renderer.__call__": [[107, 129], ["torch.Tensor", "print", "torch.ones_like", "renderer_pt3d.set_mesh_color", "pytorch3d.renderer.TexturesVertex", "pytorch3d.structures.Meshes", "len", "verts.to", "faces.to", "pytorch3d.structures.join_meshes_as_scene", "renderer_pt3d.Renderer.renderer", "renderer_pt3d.Renderer.renderer", "pytorch3d.renderer.FoVPerspectiveCameras", "pytorch3d.renderer.FoVOrthographicCameras"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pt3d.set_mesh_color"], ["", "", "def", "__call__", "(", "self", ",", "verts", ",", "faces", ",", "colors", "=", "torch", ".", "Tensor", "(", "mesh_color_table", "[", "'neutral'", "]", ")", ",", "merge_meshes", "=", "True", ",", "cam_params", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "verts", ".", "shape", ")", "==", "3", ",", "print", "(", "'The input verts of visualizer is bounded to be 3-dims (Nx6890 x3) tensor'", ")", "\n", "verts", ",", "faces", "=", "verts", ".", "to", "(", "self", ".", "device", ")", ",", "faces", ".", "to", "(", "self", ".", "device", ")", "\n", "verts_rgb", "=", "torch", ".", "ones_like", "(", "verts", ")", "\n", "verts_rgb", "=", "set_mesh_color", "(", "verts_rgb", ",", "colors", ")", "\n", "textures", "=", "TexturesVertex", "(", "verts_features", "=", "verts_rgb", ")", "\n", "verts", "[", ":", ",", ":", ",", ":", "2", "]", "*=", "-", "1", "\n", "meshes", "=", "Meshes", "(", "verts", ",", "faces", ",", "textures", ")", "\n", "if", "merge_meshes", ":", "\n", "            ", "meshes", "=", "join_meshes_as_scene", "(", "meshes", ")", "\n", "", "if", "cam_params", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "perps", ":", "\n", "                ", "R", ",", "T", ",", "fov", "=", "cam_params", "\n", "new_cam", "=", "FoVPerspectiveCameras", "(", "R", "=", "R", ",", "T", "=", "T", ",", "fov", "=", "fov", ",", "device", "=", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "R", ",", "T", ",", "xyz_ranges", "=", "cam_params", "\n", "new_cam", "=", "FoVOrthographicCameras", "(", "R", "=", "R", ",", "T", "=", "T", ",", "**", "xyz_ranges", ",", "device", "=", "self", ".", "device", ")", "\n", "", "images", "=", "self", ".", "renderer", "(", "meshes", ",", "cameras", "=", "new_cam", ")", "\n", "", "else", ":", "\n", "            ", "images", "=", "self", ".", "renderer", "(", "meshes", ")", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pt3d.set_mesh_color": [[130, 138], ["torch.Tensor", "len", "len", "torch.Tensor.unsqueeze"], "function", ["None"], ["", "", "def", "set_mesh_color", "(", "verts_rgb", ",", "colors", ")", ":", "\n", "    ", "if", "colors", "is", "None", ":", "\n", "        ", "colors", "=", "torch", ".", "Tensor", "(", "mesh_color_table", "[", "'neutral'", "]", ")", "\n", "", "if", "len", "(", "colors", ".", "shape", ")", "==", "1", ":", "\n", "        ", "verts_rgb", "[", ":", ",", ":", "]", "=", "colors", "\n", "", "elif", "len", "(", "colors", ".", "shape", ")", "==", "2", ":", "\n", "        ", "verts_rgb", "[", ":", ",", ":", "]", "=", "colors", ".", "unsqueeze", "(", "1", ")", "\n", "", "return", "verts_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.renderer_pt3d.get_renderer": [[139, 156], ["renderer_pt3d.Renderer", "print", "pickle.load", "np_v_template.repeat.repeat", "face.repeat.repeat", "Renderer.cpu().numpy", "range", "numpy.tan", "open", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda", "len", "cv2.imwrite", "numpy.radians", "os.path.join", "Renderer.cpu", "torch.from_numpy().cuda", "torch.from_numpy", "config.args", "model[].astype", "Renderer.", "config.args", "torch.from_numpy", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "get_renderer", "(", "test", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "renderer", "=", "Renderer", "(", "**", "kwargs", ")", "\n", "if", "test", ":", "\n", "        ", "import", "cv2", "\n", "dist", "=", "1", "/", "np", ".", "tan", "(", "np", ".", "radians", "(", "args", "(", ")", ".", "FOV", "/", "2.", ")", ")", "\n", "print", "(", "'dist:'", ",", "dist", ")", "\n", "model", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "smpl_model_path", ",", "'smpl'", ",", "'SMPL_NEUTRAL.pkl'", ")", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "np_v_template", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "model", "[", "'v_template'", "]", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "[", "None", "]", "\n", "face", "=", "torch", ".", "from_numpy", "(", "model", "[", "'f'", "]", ".", "astype", "(", "np", ".", "int32", ")", ")", ".", "cuda", "(", ")", "[", "None", "]", "\n", "np_v_template", "=", "np_v_template", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "np_v_template", "[", "1", "]", "+=", "0.3", "\n", "np_v_template", "[", ":", ",", ":", ",", "2", "]", "+=", "dist", "\n", "face", "=", "face", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "result", "=", "renderer", "(", "np_v_template", ",", "face", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "ri", "in", "range", "(", "len", "(", "result", ")", ")", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "'test{}.png'", ".", "format", "(", "ri", ")", ",", "(", "result", "[", "ri", ",", ":", ",", ":", ",", ":", "3", "]", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "", "return", "renderer", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.convert_3dpose_to_line_figs": [[15, 37], ["enumerate", "bones.max", "zip", "pandas.DataFrame.from_dict", "plotly.line_3d", "figs.append", "bones.max"], "function", ["None"], ["def", "convert_3dpose_to_line_figs", "(", "poses", ",", "bones", ",", "pred_color", "=", "'goldenrod'", ",", "gt_color", "=", "'red'", ")", ":", "\n", "    ", "figs", "=", "[", "]", "\n", "items_name", "=", "[", "\"x\"", ",", "\"y\"", ",", "\"z\"", ",", "'class'", ",", "'joint_name'", "]", "\n", "if", "bones", ".", "max", "(", ")", "==", "13", ":", "\n", "        ", "joint_names", "=", "constants", ".", "LSP_14_names", "\n", "", "elif", "bones", ".", "max", "(", ")", "==", "23", ":", "\n", "        ", "joint_names", "=", "constants", ".", "SMPL_24_names", "\n", "", "for", "batch_inds", ",", "(", "pred", ",", "real", ")", "in", "enumerate", "(", "zip", "(", "*", "poses", ")", ")", ":", "\n", "        ", "pose_dict", ",", "color_maps", "=", "{", "}", ",", "{", "}", "\n", "for", "bone_inds", "in", "bones", ":", "\n", "            ", "si", ",", "ei", "=", "bone_inds", "\n", "bone_name", "=", "'{}-{}'", ".", "format", "(", "joint_names", "[", "si", "]", ",", "joint_names", "[", "ei", "]", ")", "\n", "pose_dict", "[", "'p_'", "+", "bone_name", "+", "'_s'", "]", "=", "[", "*", "pred", "[", "si", "]", ",", "'p_'", "+", "bone_name", ",", "joint_names", "[", "si", "]", "]", "\n", "pose_dict", "[", "'p_'", "+", "bone_name", "+", "'_e'", "]", "=", "[", "*", "pred", "[", "ei", "]", ",", "'p_'", "+", "bone_name", ",", "joint_names", "[", "ei", "]", "]", "\n", "color_maps", "[", "'p_'", "+", "bone_name", "]", "=", "pred_color", "\n", "pose_dict", "[", "'r_'", "+", "bone_name", "+", "'_s'", "]", "=", "[", "*", "real", "[", "si", "]", ",", "'r_'", "+", "bone_name", ",", "joint_names", "[", "si", "]", "]", "\n", "pose_dict", "[", "'r_'", "+", "bone_name", "+", "'_e'", "]", "=", "[", "*", "real", "[", "ei", "]", ",", "'r_'", "+", "bone_name", ",", "joint_names", "[", "ei", "]", "]", "\n", "color_maps", "[", "'r_'", "+", "bone_name", "]", "=", "gt_color", "\n", "", "pred_real_pose_df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "pose_dict", ",", "orient", "=", "'index'", ",", "columns", "=", "items_name", ")", "\n", "pose3d_fig", "=", "px", ".", "line_3d", "(", "pred_real_pose_df", ",", "x", "=", "\"x\"", ",", "y", "=", "\"y\"", ",", "z", "=", "\"z\"", ",", "color", "=", "'class'", ",", "color_discrete_map", "=", "color_maps", ")", "#, text='joint_name'", "\n", "figs", ".", "append", "(", "pose3d_fig", ")", "\n", "", "return", "figs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.write_to_html": [[38, 56], ["ipywidgets.widgets.Layout", "enumerate", "ipywidgets.widgets.VBox", "os.path.join", "ipywidgets.embed.embed_minimal_html", "ipywidgets.Widget.close_all", "list", "containers.append", "plot_dict.keys", "Hboxes.append", "ipywidgets.widgets.HBox", "len", "plotly.FigureWidget", "img_name.replace", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "write_to_html", "(", "img_names", ",", "plot_dict", ",", "vis_cfg", ")", ":", "\n", "    ", "containers", "=", "[", "]", "\n", "raw_layout", "=", "Layout", "(", "overflow_x", "=", "'scroll'", ",", "border", "=", "'2px solid black'", ",", "width", "=", "'1900px'", ",", "height", "=", "''", ",", "\n", "flex_direction", "=", "'row'", ",", "display", "=", "'flex'", ")", "\n", "for", "inds", ",", "img_name", "in", "enumerate", "(", "img_names", ")", ":", "\n", "        ", "Hboxes", "=", "[", "]", "\n", "for", "item", "in", "list", "(", "plot_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "inds", ">=", "len", "(", "plot_dict", "[", "item", "]", "[", "'figs'", "]", ")", ":", "\n", "                ", "continue", "\n", "", "fig", "=", "plot_dict", "[", "item", "]", "[", "'figs'", "]", "[", "inds", "]", "\n", "fig", "[", "'layout'", "]", "=", "{", "\"title\"", ":", "{", "\"text\"", ":", "img_name", ".", "replace", "(", "args", "(", ")", ".", "dataset_rootdir", ",", "''", ")", "}", "}", "\n", "Hboxes", ".", "append", "(", "go", ".", "FigureWidget", "(", "fig", ")", ")", "\n", "", "containers", ".", "append", "(", "HBox", "(", "Hboxes", ",", "layout", "=", "raw_layout", ")", ")", "\n", "", "all_figs", "=", "VBox", "(", "containers", ")", "\n", "save_name", "=", "os", ".", "path", ".", "join", "(", "vis_cfg", "[", "'save_dir'", "]", ",", "vis_cfg", "[", "'save_name'", "]", "+", "'.html'", ")", "\n", "embed_minimal_html", "(", "save_name", ",", "views", "=", "[", "all_figs", "]", ",", "title", "=", "vis_cfg", "[", "'save_name'", "]", ",", "drop_defaults", "=", "True", ")", "\n", "ipywidgets", ".", "Widget", ".", "close_all", "(", ")", "\n", "del", "all_figs", ",", "containers", ",", "Hboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.web_vis.convert_image_list": [[57, 62], ["figs.append", "plotly.imshow"], "function", ["None"], ["", "def", "convert_image_list", "(", "images", ")", ":", "\n", "    ", "figs", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "        ", "figs", ".", "append", "(", "px", ".", "imshow", "(", "img", ")", ")", "\n", "", "return", "figs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.__init__": [[360, 384], ["init_dict.items", "dict.__init__", "set", "type", "vis_utils_py36_o3d9.CN", "vis_utils_py36_o3d9._valid_type"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._valid_type"], ["def", "__init__", "(", "self", ",", "init_dict", "=", "None", ",", "key_list", "=", "None", ")", ":", "\n", "# Recursively convert nested dictionaries in init_dict into CNs", "\n", "        ", "init_dict", "=", "{", "}", "if", "init_dict", "is", "None", "else", "init_dict", "\n", "key_list", "=", "[", "]", "if", "key_list", "is", "None", "else", "key_list", "\n", "for", "k", ",", "v", "in", "init_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "v", ")", "is", "dict", ":", "\n", "# Convert dict to CN", "\n", "                ", "init_dict", "[", "k", "]", "=", "CN", "(", "v", ",", "key_list", "=", "key_list", "+", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "# Check for valid leaf type or nested CN", "\n", "                ", "assert", "_valid_type", "(", "v", ",", "allow_cfg_node", "=", "True", ")", "\n", "", "", "super", "(", "CN", ",", "self", ")", ".", "__init__", "(", "init_dict", ")", "\n", "# Manage if the CN is frozen or not", "\n", "self", ".", "__dict__", "[", "CN", ".", "IMMUTABLE", "]", "=", "False", "\n", "# Deprecated options", "\n", "# If an option is removed from the code and you don't want to break existing", "\n", "# yaml configs, you can add the full config key as a string to the set below.", "\n", "self", ".", "__dict__", "[", "CN", ".", "DEPRECATED_KEYS", "]", "=", "set", "(", ")", "\n", "# Renamed options", "\n", "# If you rename a config option, record the mapping from the old name to the new", "\n", "# name in the dictionary below. Optionally, if the type also changed, you can", "\n", "# make the value a tuple that specifies first the renamed key and then", "\n", "# instructions for how to edit the config file.", "\n", "self", ".", "__dict__", "[", "CN", ".", "RENAMED_KEYS", "]", "=", "{", "\n", "# 'EXAMPLE.OLD.KEY': 'EXAMPLE.NEW.KEY',  # Dummy example to follow", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.__getattr__": [[392, 397], ["AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.__setattr__": [[398, 410], ["vis_utils_py36_o3d9.CN.is_frozen", "vis_utils_py36_o3d9._valid_type", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.is_frozen", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._valid_type"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "is_frozen", "(", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Attempted to set {} to {}, but CN is immutable\"", ".", "format", "(", "\n", "name", ",", "value", "\n", ")", "\n", ")", "\n", "\n", "", "assert", "name", "not", "in", "self", ".", "__dict__", "\n", "assert", "_valid_type", "(", "value", ",", "allow_cfg_node", "=", "True", ")", "\n", "\n", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.__str__": [[411, 431], ["vis_utils_py36_o3d9.CN.items", "s_.split", "s_.split.pop", "vis_utils_py36_o3d9.CN.__str__._indent"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "def", "_indent", "(", "s_", ",", "num_spaces", ")", ":", "\n", "            ", "s", "=", "s_", ".", "split", "(", "\"\\n\"", ")", "\n", "if", "len", "(", "s", ")", "==", "1", ":", "\n", "                ", "return", "s_", "\n", "", "first", "=", "s", ".", "pop", "(", "0", ")", "\n", "s", "=", "[", "(", "num_spaces", "*", "\" \"", ")", "+", "line", "for", "line", "in", "s", "]", "\n", "s", "=", "\"\\n\"", ".", "join", "(", "s", ")", "\n", "s", "=", "first", "+", "\"\\n\"", "+", "s", "\n", "return", "s", "\n", "\n", "", "r", "=", "\"\"", "\n", "s", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "seperator", "=", "\"\\n\"", "if", "isinstance", "(", "v", ",", "CN", ")", "else", "\" \"", "\n", "attr_str", "=", "\"{}:{}{}\"", ".", "format", "(", "str", "(", "k", ")", ",", "seperator", ",", "str", "(", "v", ")", ")", "\n", "attr_str", "=", "_indent", "(", "attr_str", ",", "4", ")", "\n", "s", ".", "append", "(", "attr_str", ")", "\n", "", "r", "+=", "\"\\n\"", ".", "join", "(", "s", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.__repr__": [[432, 434], ["dict.__repr__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "super", "(", "CN", ",", "self", ")", ".", "__repr__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.dump": [[435, 439], ["_to_dict", "yaml.safe_dump"], "methods", ["None"], ["", "def", "dump", "(", "self", ")", ":", "\n", "        ", "\"\"\"Dump to a string.\"\"\"", "\n", "self_as_dict", "=", "_to_dict", "(", "self", ")", "\n", "return", "yaml", ".", "safe_dump", "(", "self_as_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.merge_from_file": [[440, 449], ["vis_utils_py36_o3d9.CN.merge_from_other_cfg", "open", "vis_utils_py36_o3d9.load_cfg", "load_cfg.keys", "print", "vis_utils_py36_o3d9.CN.merge_from_file"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_other_cfg", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.load_cfg", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_file"], ["", "def", "merge_from_file", "(", "self", ",", "cfg_filename", ")", ":", "\n", "        ", "\"\"\"Load a yaml config file and merge it this CN.\"\"\"", "\n", "with", "open", "(", "cfg_filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "cfg", "=", "load_cfg", "(", "f", ")", "\n", "", "if", "'parent'", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "            ", "if", "cfg", ".", "parent", "!=", "'none'", ":", "\n", "                ", "print", "(", "'[Config] merge from parent file: {}'", ".", "format", "(", "cfg", ".", "parent", ")", ")", "\n", "self", ".", "merge_from_file", "(", "cfg", ".", "parent", ")", "\n", "", "", "self", ".", "merge_from_other_cfg", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.merge_from_other_cfg": [[450, 453], ["vis_utils_py36_o3d9._merge_a_into_b"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._merge_a_into_b"], ["", "def", "merge_from_other_cfg", "(", "self", ",", "cfg_other", ")", ":", "\n", "        ", "\"\"\"Merge `cfg_other` into this CN.\"\"\"", "\n", "_merge_a_into_b", "(", "cfg_other", ",", "self", ",", "self", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.merge_from_list": [[454, 472], ["zip", "vis_utils_py36_o3d9.CN.key_is_deprecated", "vis_utils_py36_o3d9.CN.key_is_renamed", "full_key.split", "vis_utils_py36_o3d9._decode_cfg_value", "vis_utils_py36_o3d9._check_and_coerce_cfg_value_type", "vis_utils_py36_o3d9.CN.raise_key_rename_error"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.key_is_deprecated", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.key_is_renamed", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._decode_cfg_value", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._check_and_coerce_cfg_value_type", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.raise_key_rename_error"], ["", "def", "merge_from_list", "(", "self", ",", "cfg_list", ")", ":", "\n", "        ", "\"\"\"Merge config (keys, values) in a list (e.g., from command line) into\n        this CN. For example, `cfg_list = ['FOO.BAR', 0.5]`.\n        \"\"\"", "\n", "root", "=", "self", "\n", "for", "full_key", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "            ", "if", "root", ".", "key_is_deprecated", "(", "full_key", ")", ":", "\n", "                ", "continue", "\n", "", "if", "root", ".", "key_is_renamed", "(", "full_key", ")", ":", "\n", "                ", "root", ".", "raise_key_rename_error", "(", "full_key", ")", "\n", "", "key_list", "=", "full_key", ".", "split", "(", "\".\"", ")", "\n", "d", "=", "self", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "                ", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "value", "=", "_decode_cfg_value", "(", "v", ")", "\n", "value", "=", "_check_and_coerce_cfg_value_type", "(", "value", ",", "d", "[", "subkey", "]", ",", "subkey", ",", "full_key", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.freeze": [[473, 476], ["vis_utils_py36_o3d9.CN._immutable"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN._immutable"], ["", "", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make this CN and all of its children immutable.\"\"\"", "\n", "self", ".", "_immutable", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.defrost": [[477, 480], ["vis_utils_py36_o3d9.CN._immutable"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN._immutable"], ["", "def", "defrost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make this CN and all of its children mutable.\"\"\"", "\n", "self", ".", "_immutable", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.is_frozen": [[481, 484], ["None"], "methods", ["None"], ["", "def", "is_frozen", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return mutability.\"\"\"", "\n", "return", "self", ".", "__dict__", "[", "CN", ".", "IMMUTABLE", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN._immutable": [[485, 497], ["vis_utils_py36_o3d9.CN.__dict__.values", "vis_utils_py36_o3d9.CN.values", "isinstance", "isinstance", "v._immutable", "v._immutable"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN._immutable", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN._immutable"], ["", "def", "_immutable", "(", "self", ",", "is_immutable", ")", ":", "\n", "        ", "\"\"\"Set immutability to is_immutable and recursively apply the setting\n        to all nested CNs.\n        \"\"\"", "\n", "self", ".", "__dict__", "[", "CN", ".", "IMMUTABLE", "]", "=", "is_immutable", "\n", "# Recursively set immutable state", "\n", "for", "v", "in", "self", ".", "__dict__", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "CN", ")", ":", "\n", "                ", "v", ".", "_immutable", "(", "is_immutable", ")", "\n", "", "", "for", "v", "in", "self", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "CN", ")", ":", "\n", "                ", "v", ".", "_immutable", "(", "is_immutable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.clone": [[498, 501], ["copy.deepcopy"], "methods", ["None"], ["", "", "", "def", "clone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Recursively copy this CN.\"\"\"", "\n", "return", "copy", ".", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.register_deprecated_key": [[502, 507], ["vis_utils_py36_o3d9.CN.__dict__[].add"], "methods", ["None"], ["", "def", "register_deprecated_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Register key (e.g. `FOO.BAR`) a deprecated option. When merging deprecated\n        keys a warning is generated and the key is ignored.\n        \"\"\"", "\n", "self", ".", "__dict__", "[", "CN", ".", "DEPRECATED_KEYS", "]", ".", "add", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.register_renamed_key": [[508, 517], ["None"], "methods", ["None"], ["", "def", "register_renamed_key", "(", "self", ",", "old_name", ",", "new_name", ",", "message", "=", "None", ")", ":", "\n", "        ", "\"\"\"Register a key as having been renamed from `old_name` to `new_name`.\n        When merging a renamed key, an exception is thrown alerting to user to\n        the fact that the key has been renamed.\n        \"\"\"", "\n", "value", "=", "new_name", "\n", "if", "message", ":", "\n", "            ", "value", "=", "(", "new_name", ",", "message", ")", "\n", "", "self", ".", "__dict__", "[", "CN", ".", "RENAMED_KEYS", "]", "[", "old_name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.key_is_deprecated": [[518, 524], ["print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "key_is_deprecated", "(", "self", ",", "full_key", ")", ":", "\n", "        ", "\"\"\"Test if a key is deprecated.\"\"\"", "\n", "if", "full_key", "in", "self", ".", "__dict__", "[", "CN", ".", "DEPRECATED_KEYS", "]", ":", "\n", "            ", "print", "(", "\"Deprecated config key (ignoring): {}\"", ".", "format", "(", "full_key", ")", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.key_is_renamed": [[525, 528], ["None"], "methods", ["None"], ["", "def", "key_is_renamed", "(", "self", ",", "full_key", ")", ":", "\n", "        ", "\"\"\"Test if a key is renamed.\"\"\"", "\n", "return", "full_key", "in", "self", ".", "__dict__", "[", "CN", ".", "RENAMED_KEYS", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CN.raise_key_rename_error": [[529, 539], ["isinstance", "KeyError"], "methods", ["None"], ["", "def", "raise_key_rename_error", "(", "self", ",", "full_key", ")", ":", "\n", "        ", "new_key", "=", "self", ".", "__dict__", "[", "CN", ".", "RENAMED_KEYS", "]", "[", "full_key", "]", "\n", "if", "isinstance", "(", "new_key", ",", "tuple", ")", ":", "\n", "            ", "msg", "=", "\" Note: \"", "+", "new_key", "[", "1", "]", "\n", "new_key", "=", "new_key", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"\"", "\n", "", "raise", "KeyError", "(", "\n", "\"Key {} was renamed to {}; please update your config.{}\"", ".", "format", "(", "\n", "full_key", ",", "new_key", ",", "msg", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.BaseConfig.load_from_args": [[543, 551], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "cls.load"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["    ", "@", "classmethod", "\n", "def", "load_from_args", "(", "cls", ")", ":", "\n", "        ", "import", "argparse", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "'config/vis/base.yml'", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "default", "=", "None", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "cls", ".", "load", "(", "filename", "=", "args", ".", "cfg", ",", "opts", "=", "args", ".", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.BaseConfig.load": [[552, 563], ["vis_utils_py36_o3d9.CN", "cls.init", "cls.parse", "cls.print", "cls.init.merge_from_file", "len", "cls.init.merge_from_list"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.Config.init", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.parse", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_file", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_list"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "filename", "=", "None", ",", "opts", "=", "[", "]", ")", "->", "CN", ":", "\n", "        ", "cfg", "=", "CN", "(", ")", "\n", "cfg", "=", "cls", ".", "init", "(", "cfg", ")", "\n", "if", "filename", "is", "not", "None", ":", "\n", "            ", "cfg", ".", "merge_from_file", "(", "filename", ")", "\n", "", "if", "len", "(", "opts", ")", ">", "0", ":", "\n", "            ", "cfg", ".", "merge_from_list", "(", "opts", ")", "\n", "", "cls", ".", "parse", "(", "cfg", ")", "\n", "cls", ".", "print", "(", "cfg", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.BaseConfig.init": [[564, 567], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init", "(", "cfg", ")", ":", "\n", "        ", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.BaseConfig.parse": [[568, 571], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parse", "(", "cfg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.BaseConfig.print": [[572, 578], ["vis_utils_py36_o3d9.BaseConfig.print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "@", "staticmethod", "\n", "def", "print", "(", "cfg", ")", ":", "\n", "        ", "print", "(", "'[Info] --------------'", ")", "\n", "print", "(", "'[Info] Configuration:'", ")", "\n", "print", "(", "'[Info] --------------'", ")", "\n", "print", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.Config.init": [[580, 622], ["vis_utils_py36_o3d9.CN", "vis_utils_py36_o3d9.CN", "vis_utils_py36_o3d9.CN", "vis_utils_py36_o3d9.CN", "vis_utils_py36_o3d9.CN", "vis_utils_py36_o3d9.CN"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "init", "(", "cfg", ")", ":", "\n", "# input and output", "\n", "        ", "cfg", ".", "host", "=", "'auto'", "\n", "cfg", ".", "port", "=", "9999", "\n", "cfg", ".", "width", "=", "1920", "\n", "cfg", ".", "height", "=", "1080", "\n", "\n", "cfg", ".", "max_human", "=", "5", "\n", "cfg", ".", "track", "=", "True", "\n", "cfg", ".", "block", "=", "True", "# block visualization or not, True for visualize each frame, False in realtime applications", "\n", "cfg", ".", "rotate", "=", "False", "\n", "cfg", ".", "debug", "=", "False", "\n", "cfg", ".", "write", "=", "False", "\n", "cfg", ".", "out", "=", "'/'", "\n", "# scene:", "\n", "cfg", ".", "scene_module", "=", "\"easymocap.visualize.o3dwrapper\"", "\n", "cfg", ".", "scene", "=", "CN", "(", ")", "\n", "cfg", ".", "extra", "=", "CN", "(", ")", "\n", "cfg", ".", "range", "=", "CN", "(", ")", "\n", "cfg", ".", "new_frames", "=", "0", "\n", "\n", "# skel", "\n", "cfg", ".", "skel", "=", "CN", "(", ")", "\n", "cfg", ".", "skel", ".", "joint_radius", "=", "0.02", "\n", "cfg", ".", "body_model_template", "=", "\"none\"", "\n", "# camera", "\n", "cfg", ".", "camera", "=", "CN", "(", ")", "\n", "cfg", ".", "camera", ".", "phi", "=", "0", "\n", "cfg", ".", "camera", ".", "theta", "=", "-", "90", "+", "60", "\n", "cfg", ".", "camera", ".", "cx", "=", "0.", "\n", "cfg", ".", "camera", ".", "cy", "=", "0.", "\n", "cfg", ".", "camera", ".", "cz", "=", "6.", "\n", "cfg", ".", "camera", ".", "set_camera", "=", "False", "\n", "cfg", ".", "camera", ".", "camera_pose", "=", "[", "]", "\n", "# range", "\n", "cfg", ".", "range", "=", "CN", "(", ")", "\n", "cfg", ".", "range", ".", "minr", "=", "[", "-", "100", ",", "-", "100", ",", "-", "10", "]", "\n", "cfg", ".", "range", ".", "maxr", "=", "[", "100", ",", "100", ",", "10", "]", "\n", "cfg", ".", "range", ".", "rate_inlier", "=", "0.8", "\n", "cfg", ".", "range", ".", "min_conf", "=", "0.1", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.Config.parse": [[623, 642], ["socket.gethostname", "numpy.array", "numpy.array.tolist", "numpy.deg2rad", "numpy.deg2rad", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parse", "(", "cfg", ")", ":", "\n", "        ", "if", "cfg", ".", "host", "==", "'auto'", ":", "\n", "            ", "cfg", ".", "host", "=", "socket", ".", "gethostname", "(", ")", "\n", "", "if", "cfg", ".", "camera", ".", "set_camera", ":", "\n", "            ", "pass", "\n", "", "else", ":", "# use default camera", "\n", "# theta, phi = cfg.camera.theta, cfg.camera.phi", "\n", "            ", "theta", ",", "phi", "=", "np", ".", "deg2rad", "(", "cfg", ".", "camera", ".", "theta", ")", ",", "np", ".", "deg2rad", "(", "cfg", ".", "camera", ".", "phi", ")", "\n", "cx", ",", "cy", ",", "cz", "=", "cfg", ".", "camera", ".", "cx", ",", "cfg", ".", "camera", ".", "cy", ",", "cfg", ".", "camera", ".", "cz", "\n", "st", ",", "ct", "=", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "\n", "sp", ",", "cp", "=", "np", ".", "sin", "(", "phi", ")", ",", "np", ".", "cos", "(", "phi", ")", "\n", "dist", "=", "6", "\n", "camera_pose", "=", "np", ".", "array", "(", "[", "\n", "[", "cp", ",", "-", "st", "*", "sp", ",", "ct", "*", "sp", ",", "cx", "]", ",", "\n", "[", "sp", ",", "st", "*", "cp", ",", "-", "ct", "*", "cp", ",", "cy", "]", ",", "\n", "[", "0.", ",", "ct", ",", "st", ",", "cz", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "cfg", ".", "camera", ".", "camera_pose", "=", "camera_pose", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.Timer.tic": [[647, 650], ["time.time"], "methods", ["None"], ["@", "classmethod", "\n", "def", "tic", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "tmp", "=", "time", ".", "time", "(", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.Timer.toc": [[650, 655], ["time.time"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "toc", "(", "cls", ")", ":", "\n", "        ", "res", "=", "(", "time", ".", "time", "(", ")", "-", "cls", ".", "tmp", ")", "*", "1000", "\n", "cls", ".", "tmp", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.Timer.report": [[656, 663], ["cls.records.items", "print", "contents.append", "tabulate.tabulate", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "@", "classmethod", "\n", "def", "report", "(", "cls", ")", ":", "\n", "        ", "header", "=", "[", "''", ",", "'Time(ms)'", "]", "\n", "contents", "=", "[", "]", "\n", "for", "key", ",", "val", "in", "cls", ".", "records", ".", "items", "(", ")", ":", "\n", "            ", "contents", ".", "append", "(", "[", "'{:20s}'", ".", "format", "(", "key", ")", ",", "'{:.2f}'", ".", "format", "(", "sum", "(", "val", ")", "/", "len", "(", "val", ")", ")", "]", ")", "\n", "", "print", "(", "tabulate", ".", "tabulate", "(", "contents", ",", "header", ",", "tablefmt", "=", "'fancy_grid'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.Timer.__init__": [[664, 669], ["Timer.records.keys"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "name", ",", "silent", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "silent", "=", "silent", "\n", "if", "name", "not", "in", "Timer", ".", "records", ".", "keys", "(", ")", ":", "\n", "            ", "Timer", ".", "records", "[", "name", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.Timer.__enter__": [[670, 672], ["time.time"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.Timer.__exit__": [[673, 684], ["time.time", "Timer.records[].append", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "exc_tb", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "Timer", ".", "records", "[", "self", ".", "name", "]", ".", "append", "(", "(", "end", "-", "self", ".", "start", ")", "*", "1000", ")", "\n", "if", "not", "self", ".", "silent", ":", "\n", "            ", "t", "=", "(", "end", "-", "self", ".", "start", ")", "*", "1000", "\n", "if", "t", ">", "1000", ":", "\n", "                ", "print", "(", "'-> [{:20s}]: {:5.1f}s'", ".", "format", "(", "self", ".", "name", ",", "t", "/", "1000", ")", ")", "\n", "", "elif", "t", ">", "1e3", "*", "60", "*", "60", ":", "\n", "                ", "print", "(", "'-> [{:20s}]: {:5.1f}min'", ".", "format", "(", "self", ".", "name", ",", "t", "/", "1e3", "/", "60", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'-> [{:20s}]: {:5.1f}ms'", ".", "format", "(", "self", ".", "name", ",", "(", "end", "-", "self", ".", "start", ")", "*", "1000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.BaseCrit.__init__": [[687, 691], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_conf", ",", "min_joints", "=", "3", ")", "->", "None", ":", "\n", "        ", "self", ".", "min_conf", "=", "min_conf", "\n", "self", ".", "min_joints", "=", "min_joints", "\n", "self", ".", "name", "=", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.BaseCrit.__call__": [[692, 698], ["len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "keypoints3d", ",", "**", "kwargs", ")", ":", "\n", "# keypoints3d: (N, 4)", "\n", "        ", "conf", "=", "keypoints3d", "[", "...", ",", "-", "1", "]", "\n", "conf", "[", "conf", "<", "self", ".", "min_conf", "]", "=", "0", "\n", "idx", "=", "keypoints3d", "[", "...", ",", "-", "1", "]", ">", "self", ".", "min_conf", "\n", "return", "len", "(", "idx", ")", ">", "self", ".", "min_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CritRange.__init__": [[700, 705], ["vis_utils_py36_o3d9.BaseCrit.__init__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "minr", ",", "maxr", ",", "rate_inlier", ",", "min_conf", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "min_conf", ")", "\n", "self", ".", "min", "=", "minr", "\n", "self", ".", "max", "=", "maxr", "\n", "self", ".", "rate", "=", "rate_inlier", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.CritRange.__call__": [[706, 714], ["crit.sum"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "__call__", "(", "self", ",", "keypoints3d", ",", "**", "kwargs", ")", ":", "\n", "        ", "idx", "=", "keypoints3d", "[", "...", ",", "-", "1", "]", ">", "self", ".", "min_conf", "\n", "k3d", "=", "keypoints3d", "[", "idx", ",", ":", "3", "]", "\n", "crit", "=", "(", "k3d", "[", ":", ",", "0", "]", ">", "self", ".", "min", "[", "0", "]", ")", "&", "(", "k3d", "[", ":", ",", "0", "]", "<", "self", ".", "max", "[", "0", "]", ")", "&", "(", "k3d", "[", ":", ",", "1", "]", ">", "self", ".", "min", "[", "1", "]", ")", "&", "(", "k3d", "[", ":", ",", "1", "]", "<", "self", ".", "max", "[", "1", "]", ")", "&", "(", "k3d", "[", ":", ",", "2", "]", ">", "self", ".", "min", "[", "2", "]", ")", "&", "(", "k3d", "[", ":", ",", "2", "]", "<", "self", ".", "max", "[", "2", "]", ")", "\n", "self", ".", "log", "=", "'{}: {}'", ".", "format", "(", "self", ".", "name", ",", "k3d", ")", "\n", "return", "crit", ".", "sum", "(", ")", "/", "crit", ".", "shape", "[", "0", "]", ">", "self", ".", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.convert_verts_to_cam_space": [[19, 25], ["None"], "function", ["None"], ["def", "convert_verts_to_cam_space", "(", "vertices", ")", ":", "\n", "# x - right, y - into, z - up", "\n", "    ", "vertices", "=", "vertices", "[", ":", ",", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "vertices", "[", ":", ",", "2", "]", "*=", "-", "1", "\n", "vertices", "[", ":", ",", "1", "]", "-=", "3", "\n", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.get_uvs": [[26, 32], ["numpy.load", "numpy.concatenate().reshape", "numpy.concatenate", "range"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "get_uvs", "(", "uvmap_path", ")", ":", "\n", "    ", "uv_map_vt_ft", "=", "np", ".", "load", "(", "uvmap_path", ",", "allow_pickle", "=", "True", ")", "\n", "vt", ",", "ft", "=", "uv_map_vt_ft", "[", "'vt'", "]", ",", "uv_map_vt_ft", "[", "'ft'", "]", "\n", "uvs", "=", "np", ".", "concatenate", "(", "[", "vt", "[", "ft", "[", ":", ",", "ind", "]", "]", "[", ":", ",", "None", "]", "for", "ind", "in", "range", "(", "3", ")", "]", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "uvs", "[", ":", ",", "1", "]", "=", "1", "-", "uvs", "[", ":", ",", "1", "]", "\n", "return", "uvs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.load_sphere": [[33, 38], ["os.path.dirname", "numpy.loadtxt", "numpy.loadtxt", "join", "join"], "function", ["None"], ["", "def", "load_sphere", "(", ")", ":", "\n", "    ", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "faces", "=", "np", ".", "loadtxt", "(", "join", "(", "cur_dir", ",", "'sphere_faces_20.txt'", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "vertices", "=", "np", ".", "loadtxt", "(", "join", "(", "cur_dir", ",", "'sphere_vertices_20.txt'", ")", ")", "\n", "return", "vertices", ",", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.load_cylinder": [[39, 44], ["os.path.dirname", "numpy.loadtxt", "numpy.loadtxt", "join", "join"], "function", ["None"], ["", "def", "load_cylinder", "(", ")", ":", "\n", "    ", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "faces", "=", "np", ".", "loadtxt", "(", "join", "(", "cur_dir", ",", "'cylinder_faces_20.txt'", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "vertices", "=", "np", ".", "loadtxt", "(", "join", "(", "cur_dir", ",", "'cylinder_vertices_20.txt'", ")", ")", "\n", "return", "vertices", ",", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.create_point_": [[45, 61], ["vis_utils_py36_o3d9.load_sphere", "vert[].repeat", "numpy.vstack", "face[].repeat", "numpy.vstack", "numpy.arange().reshape", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.load_sphere"], ["", "def", "create_point_", "(", "points", ",", "r", "=", "0.01", ")", ":", "\n", "    ", "\"\"\" create sphere\n    Args:\n        points (array): (N, 3)/(N, 4)\n        r (float, optional): radius. Defaults to 0.01.\n    \"\"\"", "\n", "nPoints", "=", "points", ".", "shape", "[", "0", "]", "\n", "vert", ",", "face", "=", "load_sphere", "(", ")", "\n", "nVerts", "=", "vert", ".", "shape", "[", "0", "]", "\n", "vert", "=", "vert", "[", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "points", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "vert", "=", "vert", "+", "points", "[", ":", ",", "None", ",", ":", "]", "\n", "verts", "=", "np", ".", "vstack", "(", "vert", ")", "\n", "face", "=", "face", "[", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "points", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "face", "=", "face", "+", "nVerts", "*", "np", ".", "arange", "(", "nPoints", ")", ".", "reshape", "(", "nPoints", ",", "1", ",", "1", ")", "\n", "faces", "=", "np", ".", "vstack", "(", "face", ")", "\n", "return", "{", "'vertices'", ":", "verts", ",", "'faces'", ":", "faces", ",", "'name'", ":", "'points'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.calRot": [[62, 70], ["numpy.cross", "cv2.Rodrigues", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.arccos", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.Rodrigues"], ["", "def", "calRot", "(", "axis", ",", "direc", ")", ":", "\n", "    ", "direc", "=", "direc", "/", "np", ".", "linalg", ".", "norm", "(", "direc", ")", "\n", "axis", "=", "axis", "/", "np", ".", "linalg", ".", "norm", "(", "axis", ")", "\n", "rotdir", "=", "np", ".", "cross", "(", "axis", ",", "direc", ")", "\n", "rotdir", "=", "rotdir", "/", "np", ".", "linalg", ".", "norm", "(", "rotdir", ")", "\n", "rotdir", "=", "rotdir", "*", "np", ".", "arccos", "(", "np", ".", "dot", "(", "direc", ",", "axis", ")", ")", "\n", "rotmat", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "rotdir", ")", "\n", "return", "rotmat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.create_line_": [[71, 82], ["numpy.linalg.norm", "vis_utils_py36_o3d9.load_cylinder", "vis_utils_py36_o3d9.calRot", "numpy.array", "col.reshape().repeat", "col.reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.load_cylinder", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.calRot"], ["", "def", "create_line_", "(", "start", ",", "end", ",", "r", "=", "0.01", ",", "col", "=", "None", ")", ":", "\n", "    ", "length", "=", "np", ".", "linalg", ".", "norm", "(", "end", "[", ":", "3", "]", "-", "start", "[", ":", "3", "]", ")", "\n", "vertices", ",", "faces", "=", "load_cylinder", "(", ")", "\n", "vertices", "[", ":", ",", ":", "2", "]", "*=", "r", "\n", "vertices", "[", ":", ",", "2", "]", "*=", "length", "/", "2", "\n", "rotmat", "=", "calRot", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ",", "end", "-", "start", ")", "\n", "vertices", "=", "vertices", "@", "rotmat", ".", "T", "+", "(", "start", "+", "end", ")", "/", "2", "\n", "ret", "=", "{", "'vertices'", ":", "vertices", ",", "'faces'", ":", "faces", ",", "'name'", ":", "'line'", "}", "\n", "if", "col", "is", "not", "None", ":", "\n", "        ", "ret", "[", "'colors'", "]", "=", "col", ".", "reshape", "(", "-", "1", ",", "3", ")", ".", "repeat", "(", "vertices", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.create_ground_": [[83, 121], ["isinstance", "print", "range", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.array", "numpy.array", "numpy.array", "range", "numpy.stack", "numpy.stack", "np.vstack.append", "np.vstack.append", "np.vstack.append", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "create_ground_", "(", "\n", "center", "=", "[", "0", ",", "0", ",", "0", "]", ",", "xdir", "=", "[", "1", ",", "0", ",", "0", "]", ",", "ydir", "=", "[", "0", ",", "1", ",", "0", "]", ",", "# \u4f4d\u7f6e", "\n", "step", "=", "1", ",", "xrange", "=", "10", ",", "yrange", "=", "10", ",", "# \u5c3a\u5bf8", "\n", "white", "=", "[", "1.", ",", "1.", ",", "1.", "]", ",", "black", "=", "[", "0.", ",", "0.", ",", "0.", "]", ",", "# \u989c\u8272", "\n", "two_sides", "=", "True", "\n", ")", ":", "\n", "    ", "if", "isinstance", "(", "center", ",", "list", ")", ":", "\n", "        ", "center", "=", "np", ".", "array", "(", "center", ")", "\n", "xdir", "=", "np", ".", "array", "(", "xdir", ")", "\n", "ydir", "=", "np", ".", "array", "(", "ydir", ")", "\n", "", "print", "(", "'[Vis Info] {}, x: {}, y: {}'", ".", "format", "(", "center", ",", "xdir", ",", "ydir", ")", ")", "\n", "xdir", "=", "xdir", "*", "step", "\n", "ydir", "=", "ydir", "*", "step", "\n", "vertls", ",", "trils", ",", "colls", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "cnt", "=", "0", "\n", "min_x", "=", "-", "xrange", "if", "two_sides", "else", "0", "\n", "min_y", "=", "-", "yrange", "if", "two_sides", "else", "0", "\n", "for", "i", "in", "range", "(", "min_x", ",", "xrange", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "min_y", ",", "yrange", ")", ":", "\n", "            ", "point0", "=", "center", "+", "i", "*", "xdir", "+", "j", "*", "ydir", "\n", "point1", "=", "center", "+", "(", "i", "+", "1", ")", "*", "xdir", "+", "j", "*", "ydir", "\n", "point2", "=", "center", "+", "(", "i", "+", "1", ")", "*", "xdir", "+", "(", "j", "+", "1", ")", "*", "ydir", "\n", "point3", "=", "center", "+", "(", "i", ")", "*", "xdir", "+", "(", "j", "+", "1", ")", "*", "ydir", "\n", "if", "(", "i", "%", "2", "==", "0", "and", "j", "%", "2", "==", "0", ")", "or", "(", "i", "%", "2", "==", "1", "and", "j", "%", "2", "==", "1", ")", ":", "\n", "                ", "col", "=", "white", "\n", "", "else", ":", "\n", "                ", "col", "=", "black", "\n", "", "vert", "=", "np", ".", "stack", "(", "[", "point0", ",", "point1", ",", "point2", ",", "point3", "]", ")", "\n", "col", "=", "np", ".", "stack", "(", "[", "col", "for", "_", "in", "range", "(", "vert", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "tri", "=", "np", ".", "array", "(", "[", "[", "2", ",", "3", ",", "0", "]", ",", "[", "0", ",", "1", ",", "2", "]", "]", ")", "+", "vert", ".", "shape", "[", "0", "]", "*", "cnt", "\n", "cnt", "+=", "1", "\n", "vertls", ".", "append", "(", "vert", ")", "\n", "trils", ".", "append", "(", "tri", ")", "\n", "colls", ".", "append", "(", "col", ")", "\n", "", "", "vertls", "=", "np", ".", "vstack", "(", "vertls", ")", "\n", "trils", "=", "np", ".", "vstack", "(", "trils", ")", "\n", "colls", "=", "np", ".", "vstack", "(", "colls", ")", "\n", "return", "{", "'vertices'", ":", "vertls", ",", "'faces'", ":", "trils", ",", "'colors'", ":", "colls", ",", "'name'", ":", "'ground'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.get_rotation_from_two_directions": [[123, 133], ["numpy.cross", "cv2.Rodrigues", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.eye", "numpy.linalg.norm", "numpy.arccos", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.Rodrigues"], ["", "def", "get_rotation_from_two_directions", "(", "direc0", ",", "direc1", ")", ":", "\n", "    ", "direc0", "=", "direc0", "/", "np", ".", "linalg", ".", "norm", "(", "direc0", ")", "\n", "direc1", "=", "direc1", "/", "np", ".", "linalg", ".", "norm", "(", "direc1", ")", "\n", "rotdir", "=", "np", ".", "cross", "(", "direc0", ",", "direc1", ")", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "rotdir", ")", "<", "1e-2", ":", "\n", "        ", "return", "np", ".", "eye", "(", "3", ")", "\n", "", "rotdir", "=", "rotdir", "/", "np", ".", "linalg", ".", "norm", "(", "rotdir", ")", "\n", "rotdir", "=", "rotdir", "*", "np", ".", "arccos", "(", "np", ".", "dot", "(", "direc0", ",", "direc1", ")", ")", "\n", "rotmat", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "rotdir", ")", "\n", "return", "rotmat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.create_plane": [[157, 168], ["PLANE_VERTICES.copy", "vis_utils_py36_o3d9.get_rotation_from_two_directions", "numpy.array().reshape", "numpy.array", "numpy.array", "PLANE_FACES.copy", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.get_rotation_from_two_directions"], ["def", "create_plane", "(", "normal", ",", "center", ",", "dx", "=", "1", ",", "dy", "=", "1", ",", "dz", "=", "0.005", ",", "color", "=", "[", "0.8", ",", "0.8", ",", "0.8", "]", ")", ":", "\n", "    ", "vertices", "=", "PLANE_VERTICES", ".", "copy", "(", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "vertices", "[", ":", ",", "0", "]", "*", "dx", "-", "dx", "/", "2", "\n", "vertices", "[", ":", ",", "1", "]", "=", "vertices", "[", ":", ",", "1", "]", "*", "dy", "-", "dy", "/", "2", "\n", "vertices", "[", ":", ",", "2", "]", "=", "vertices", "[", ":", ",", "2", "]", "*", "dz", "-", "dz", "/", "2", "\n", "# \u6839\u636enormal\u8ba1\u7b97\u65cb\u8f6c", "\n", "rotmat", "=", "get_rotation_from_two_directions", "(", "\n", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ",", "np", ".", "array", "(", "normal", ")", ")", "\n", "vertices", "=", "vertices", "@", "rotmat", ".", "T", "\n", "vertices", "+=", "np", ".", "array", "(", "center", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "return", "{", "'vertices'", ":", "vertices", ",", "'faces'", ":", "PLANE_FACES", ".", "copy", "(", ")", ",", "'name'", ":", "'plane'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.create_point": [[169, 171], ["create_meshes.create_mesh", "vis_utils_py36_o3d9.create_point_"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_point_"], ["", "def", "create_point", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "create_mesh", "(", "**", "create_point_", "(", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.create_line": [[172, 174], ["create_meshes.create_mesh", "vis_utils_py36_o3d9.create_line_"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_line_"], ["", "def", "create_line", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "create_mesh", "(", "**", "create_line_", "(", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.create_ground": [[175, 178], ["vis_utils_py36_o3d9.create_ground_", "create_meshes.create_mesh"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_ground_", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh"], ["", "def", "create_ground", "(", "**", "kwargs", ")", ":", "\n", "    ", "ground", "=", "create_ground_", "(", "**", "kwargs", ")", "\n", "return", "create_mesh", "(", "**", "ground", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.create_coord": [[179, 184], ["open3d.geometry.TriangleMesh.create_coordinate_frame", "o3d.geometry.TriangleMesh.create_coordinate_frame.scale"], "function", ["None"], ["", "def", "create_coord", "(", "camera", "=", "[", "0", ",", "0", ",", "0", "]", ",", "radius", "=", "1", ",", "scale", "=", "1", ")", ":", "\n", "    ", "camera_frame", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "\n", "size", "=", "radius", ",", "origin", "=", "camera", ")", "\n", "camera_frame", ".", "scale", "(", "scale", ")", "\n", "return", "camera_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.create_bbox": [[185, 193], ["open3d.geometry.AxisAlignedBoundingBox", "min_bound.copy", "max_bound.copy"], "function", ["None"], ["", "def", "create_bbox", "(", "min_bound", "=", "(", "-", "3.", ",", "-", "3.", ",", "0", ")", ",", "max_bound", "=", "(", "3.", ",", "3.", ",", "2", ")", ",", "flip", "=", "False", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "min_bound_", "=", "min_bound", ".", "copy", "(", ")", "\n", "max_bound_", "=", "max_bound", ".", "copy", "(", ")", "\n", "min_bound", "=", "[", "min_bound_", "[", "0", "]", ",", "-", "max_bound_", "[", "1", "]", ",", "-", "max_bound_", "[", "2", "]", "]", "\n", "max_bound", "=", "[", "max_bound_", "[", "0", "]", ",", "-", "min_bound_", "[", "1", "]", ",", "-", "min_bound_", "[", "2", "]", "]", "\n", "", "bbox", "=", "o3d", ".", "geometry", ".", "AxisAlignedBoundingBox", "(", "min_bound", ",", "max_bound", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.load_cfg": [[197, 205], ["vis_utils_py36_o3d9._load_cfg_from_file"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._load_cfg_from_file"], ["def", "load_cfg", "(", "cfg_file_obj_or_str", ")", ":", "\n", "    ", "\"\"\"Load a cfg. Supports loading from:\n        - A file object backed by a YAML file\n        - A file object backed by a Python source file that exports an attribute\n          \"cfg\" that is either a dict or a CN\n        - A string that can be parsed as valid YAML\n    \"\"\"", "\n", "return", "_load_cfg_from_file", "(", "cfg_file_obj_or_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9._merge_a_into_b": [[206, 239], ["a.items", "b.clear", "a.pop", "isinstance", "a.keys", "root.key_is_deprecated", "copy.deepcopy", "vis_utils_py36_o3d9._decode_cfg_value", "vis_utils_py36_o3d9._check_and_coerce_cfg_value_type", "root.key_is_renamed", "vis_utils_py36_o3d9._merge_a_into_b", "root.raise_key_rename_error", "copy.deepcopy", "vis_utils_py36_o3d9._decode_cfg_value", "b.update"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.timer.Timer.clear", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.key_is_deprecated", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._decode_cfg_value", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._check_and_coerce_cfg_value_type", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.key_is_renamed", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._merge_a_into_b", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.raise_key_rename_error", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._decode_cfg_value", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update"], ["", "def", "_merge_a_into_b", "(", "a", ",", "b", ",", "root", ",", "key_list", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "if", "'_no_merge_'", "in", "a", ".", "keys", "(", ")", "and", "a", "[", "'_no_merge_'", "]", ":", "\n", "        ", "b", ".", "clear", "(", ")", "\n", "a", ".", "pop", "(", "'_no_merge_'", ")", "\n", "\n", "", "for", "k", ",", "v_", "in", "a", ".", "items", "(", ")", ":", "\n", "        ", "full_key", "=", "\".\"", ".", "join", "(", "key_list", "+", "[", "k", "]", ")", "\n", "# a must specify keys that are in b", "\n", "if", "k", "not", "in", "b", ":", "\n", "            ", "if", "root", ".", "key_is_deprecated", "(", "full_key", ")", ":", "\n", "                ", "continue", "\n", "", "elif", "root", ".", "key_is_renamed", "(", "full_key", ")", ":", "\n", "                ", "root", ".", "raise_key_rename_error", "(", "full_key", ")", "\n", "", "else", ":", "\n", "                ", "v", "=", "copy", ".", "deepcopy", "(", "v_", ")", "\n", "v", "=", "_decode_cfg_value", "(", "v", ")", "\n", "b", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "v", "=", "copy", ".", "deepcopy", "(", "v_", ")", "\n", "v", "=", "_decode_cfg_value", "(", "v", ")", "\n", "v", "=", "_check_and_coerce_cfg_value_type", "(", "v", ",", "b", "[", "k", "]", ",", "k", ",", "full_key", ")", "\n", "\n", "# Recursively merge dicts", "\n", "", "if", "isinstance", "(", "v", ",", "CN", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "v", ",", "b", "[", "k", "]", ",", "root", ",", "key_list", "+", "[", "k", "]", ")", "\n", "", "except", "BaseException", ":", "\n", "                ", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9._decode_cfg_value": [[241, 272], ["isinstance", "vis_utils_py36_o3d9.CN", "isinstance", "ast.literal_eval"], "function", ["None"], ["", "", "", "def", "_decode_cfg_value", "(", "v", ")", ":", "\n", "    ", "\"\"\"Decodes a raw config value (e.g., from a yaml config files or command\n    line argument) into a Python object.\n    \"\"\"", "\n", "# Configs parsed from raw yaml will contain dictionary keys that need to be", "\n", "# converted to CN objects", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "        ", "return", "CN", "(", "v", ")", "\n", "# All remaining processing is only applied to strings", "\n", "", "if", "not", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "        ", "return", "v", "\n", "# Try to interpret `v` as a:", "\n", "#   string, number, tuple, list, dict, boolean, or None", "\n", "", "try", ":", "\n", "        ", "v", "=", "literal_eval", "(", "v", ")", "\n", "# The following two excepts allow v to pass through when it represents a", "\n", "# string.", "\n", "#", "\n", "# Longer explanation:", "\n", "# The type of v is always a string (before calling literal_eval), but", "\n", "# sometimes it *represents* a string and other times a data structure, like", "\n", "# a list. In the case that v represents a string, what we got back from the", "\n", "# yaml parser is 'foo' *without quotes* (so, not '\"foo\"'). literal_eval is", "\n", "# ok with '\"foo\"', but will raise a ValueError if given 'foo'. In other", "\n", "# cases, like paths (v = 'foo/bar' and not v = '\"foo/bar\"'), literal_eval", "\n", "# will raise a SyntaxError.", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "except", "SyntaxError", ":", "\n", "        ", "pass", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9._check_and_coerce_cfg_value_type": [[274, 312], ["type", "type", "ValueError", "casts.append", "vis_utils_py36_o3d9._check_and_coerce_cfg_value_type.conditional_cast"], "function", ["None"], ["", "def", "_check_and_coerce_cfg_value_type", "(", "replacement", ",", "original", ",", "key", ",", "full_key", ")", ":", "\n", "    ", "\"\"\"Checks that `replacement`, which is intended to replace `original` is of\n    the right type. The type is correct if it matches exactly or is one of a few\n    cases in which the type can be easily coerced.\n    \"\"\"", "\n", "original_type", "=", "type", "(", "original", ")", "\n", "replacement_type", "=", "type", "(", "replacement", ")", "\n", "\n", "# The types must match (with some exceptions)", "\n", "if", "replacement_type", "==", "original_type", ":", "\n", "        ", "return", "replacement", "\n", "\n", "# Cast replacement from from_type to to_type if the replacement and original", "\n", "# types match from_type and to_type", "\n", "", "def", "conditional_cast", "(", "from_type", ",", "to_type", ")", ":", "\n", "        ", "if", "replacement_type", "==", "from_type", "and", "original_type", "==", "to_type", ":", "\n", "            ", "return", "True", ",", "to_type", "(", "replacement", ")", "\n", "", "else", ":", "\n", "            ", "return", "False", ",", "None", "\n", "\n", "# Conditionally casts", "\n", "# list <-> tuple", "\n", "", "", "casts", "=", "[", "(", "tuple", ",", "list", ")", ",", "(", "list", ",", "tuple", ")", ",", "(", "int", ",", "float", ")", ",", "(", "float", ",", "int", ")", "]", "\n", "# For py2: allow converting from str (bytes) to a unicode string", "\n", "try", ":", "\n", "        ", "casts", ".", "append", "(", "(", "str", ",", "unicode", ")", ")", "# noqa: F821", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "\n", "", "for", "(", "from_type", ",", "to_type", ")", "in", "casts", ":", "\n", "        ", "converted", ",", "converted_value", "=", "conditional_cast", "(", "from_type", ",", "to_type", ")", "\n", "if", "converted", ":", "\n", "            ", "return", "converted_value", "\n", "\n", "", "", "raise", "ValueError", "(", "\n", "\"Type mismatch ({} vs. {}) with values ({} vs. {}) for config \"", "\n", "\"key: {}\"", ".", "format", "(", "\n", "original_type", ",", "replacement_type", ",", "original", ",", "replacement", ",", "full_key", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9._load_cfg_from_file": [[315, 326], ["os.path.splitext", "vis_utils_py36_o3d9._load_cfg_from_yaml_str", "file_obj.read", "vis_utils_py36_o3d9._load_cfg_py_source", "Exception", "_YAML_EXTS.union"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._load_cfg_from_yaml_str", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._load_cfg_py_source"], ["", "def", "_load_cfg_from_file", "(", "file_obj", ")", ":", "\n", "    ", "\"\"\"Load a config from a YAML file or a Python source file.\"\"\"", "\n", "_", ",", "file_extension", "=", "os", ".", "path", ".", "splitext", "(", "file_obj", ".", "name", ")", "\n", "if", "file_extension", "in", "_YAML_EXTS", ":", "\n", "        ", "return", "_load_cfg_from_yaml_str", "(", "file_obj", ".", "read", "(", ")", ")", "\n", "", "elif", "file_extension", "in", "_PY_EXTS", ":", "\n", "        ", "return", "_load_cfg_py_source", "(", "file_obj", ".", "name", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\n", "\"Attempt to load from an unsupported file type {}; \"", "\n", "\"only {} are supported\"", ".", "format", "(", "file_obj", ",", "_YAML_EXTS", ".", "union", "(", "_PY_EXTS", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9._load_cfg_from_yaml_str": [[329, 333], ["yaml.safe_load", "vis_utils_py36_o3d9.CN"], "function", ["None"], ["", "", "def", "_load_cfg_from_yaml_str", "(", "str_obj", ")", ":", "\n", "    ", "\"\"\"Load a config from a YAML string encoding.\"\"\"", "\n", "cfg_as_dict", "=", "yaml", ".", "safe_load", "(", "str_obj", ")", "\n", "return", "CN", "(", "cfg_as_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9._load_cfg_py_source": [[335, 343], ["_load_module_from_file", "type", "vis_utils_py36_o3d9.CN"], "function", ["None"], ["", "def", "_load_cfg_py_source", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config from a Python source file.\"\"\"", "\n", "module", "=", "_load_module_from_file", "(", "\"yacs.config.override\"", ",", "filename", ")", "\n", "VALID_ATTR_TYPES", "=", "{", "dict", ",", "CN", "}", "\n", "if", "type", "(", "module", ".", "cfg", ")", "is", "dict", ":", "\n", "        ", "return", "CN", "(", "module", ".", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "return", "module", ".", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9._valid_type": [[347, 349], ["type", "type"], "function", ["None"], ["def", "_valid_type", "(", "value", ",", "allow_cfg_node", "=", "False", ")", ":", "\n", "    ", "return", "(", "type", "(", "value", ")", "in", "_VALID_TYPES", ")", "or", "(", "allow_cfg_node", "and", "type", "(", "value", ")", "==", "CN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.generate_colorbar": [[715, 727], ["cv2.applyColorMap().squeeze", "random.seed", "random.shuffle", "rgb.tolist.tolist", "numpy.clip", "cv2.applyColorMap", "range", "numpy.arange"], "function", ["None"], ["", "", "def", "generate_colorbar", "(", "N", "=", "20", ",", "cmap", "=", "'jet'", ")", ":", "\n", "    ", "bar", "=", "(", "(", "np", ".", "arange", "(", "N", ")", "/", "(", "N", "-", "1", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "colorbar", "=", "cv2", ".", "applyColorMap", "(", "bar", ",", "cv2", ".", "COLORMAP_JET", ")", ".", "squeeze", "(", ")", "\n", "if", "False", ":", "\n", "        ", "colorbar", "=", "np", ".", "clip", "(", "colorbar", "+", "64", ",", "0", ",", "255", ")", "\n", "", "import", "random", "\n", "random", ".", "seed", "(", "666", ")", "\n", "index", "=", "[", "i", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "random", ".", "shuffle", "(", "index", ")", "\n", "rgb", "=", "colorbar", "[", "index", ",", ":", "]", "\n", "rgb", "=", "rgb", ".", "tolist", "(", ")", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.get_rgb": [[751, 762], ["isinstance", "colors_table.get", "tuple", "int", "len"], "function", ["None"], ["def", "get_rgb", "(", "index", ")", ":", "\n", "    ", "if", "isinstance", "(", "index", ",", "int", ")", ":", "\n", "        ", "if", "index", "==", "-", "1", ":", "\n", "            ", "return", "(", "255", ",", "255", ",", "255", ")", "\n", "", "if", "index", "<", "-", "1", ":", "\n", "            ", "return", "(", "0", ",", "0", ",", "0", ")", "\n", "", "col", "=", "colors_bar_rgb", "[", "index", "%", "len", "(", "colors_bar_rgb", ")", "]", "\n", "", "else", ":", "\n", "        ", "col", "=", "colors_table", ".", "get", "(", "index", ",", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "col", "=", "tuple", "(", "[", "int", "(", "c", "*", "255", ")", "for", "c", "in", "col", "[", ":", ":", "-", "1", "]", "]", ")", "\n", "", "return", "col", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_py36_o3d9.get_rgb_01": [[763, 766], ["vis_utils_py36_o3d9.get_rgb"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.get_rgb"], ["", "def", "get_rgb_01", "(", "index", ")", ":", "\n", "    ", "col", "=", "get_rgb", "(", "index", ")", "\n", "return", "[", "i", "*", "1.", "/", "255", "for", "i", "in", "col", "[", ":", "3", "]", "]", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_client.send_rand": [[9, 33], ["range", "range", "client.close", "np.random.rand", "np.random.rand", "np.random.rand", "datas.append", "range", "client.send_smpl", "time.sleep", "np.random.rand", "np.random.rand"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocketClient.send_smpl"], ["def", "send_rand", "(", "client", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "N_person", "=", "4", "\n", "datas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N_person", ")", ":", "\n", "        ", "transl", "=", "(", "np", ".", "random", ".", "rand", "(", "1", ",", "3", ")", "-", "0.5", ")", "*", "3", "\n", "kpts", "=", "np", ".", "random", ".", "rand", "(", "25", ",", "4", ")", "\n", "kpts", "[", ":", ",", ":", "3", "]", "+=", "transl", "\n", "pose", "=", "np", ".", "random", ".", "rand", "(", "1", ",", "72", ")", "\n", "beta", "=", "np", ".", "random", ".", "rand", "(", "1", ",", "10", ")", "\n", "data", "=", "{", "\n", "'id'", ":", "i", ",", "\n", "'keypoints3d'", ":", "kpts", ",", "\n", "'poses'", ":", "pose", ",", "\n", "'betas'", ":", "beta", "\n", "}", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "for", "_", "in", "range", "(", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "N_person", ")", ":", "\n", "            ", "move", "=", "(", "np", ".", "random", ".", "rand", "(", "1", ",", "3", ")", "-", "0.5", ")", "*", "0.1", "\n", "datas", "[", "i", "]", "[", "'keypoints3d'", "]", "[", ":", ",", ":", "3", "]", "+=", "move", "\n", "", "client", ".", "send_smpl", "(", "datas", ")", "\n", "time", ".", "sleep", "(", "0.01", ")", "\n", "", "client", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_client.send_dir": [[34, 48], ["sorted", "tqdm", "glob", "time.sleep", "join", "read_smpl", "client.send_smpl", "read_keypoints3d", "client.send"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.BaseSocketClient.send_smpl", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.send"], ["", "def", "send_dir", "(", "client", ",", "path", ",", "step", ")", ":", "\n", "    ", "from", "os", ".", "path", "import", "join", "\n", "from", "glob", "import", "glob", "\n", "from", "tqdm", "import", "tqdm", "\n", "from", "easymocap", ".", "mytools", ".", "reader", "import", "read_keypoints3d", "\n", "results", "=", "sorted", "(", "glob", "(", "join", "(", "path", ",", "'*.json'", ")", ")", ")", "\n", "for", "result", "in", "tqdm", "(", "results", "[", ":", ":", "step", "]", ")", ":", "\n", "        ", "if", "args", ".", "smpl", ":", "\n", "            ", "data", "=", "read_smpl", "(", "result", ")", "\n", "client", ".", "send_smpl", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "read_keypoints3d", "(", "result", ")", "\n", "client", ".", "send", "(", "data", ")", "\n", "", "time", ".", "sleep", "(", "0.005", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.VisOpen3DSocket.__init__": [[41, 99], ["open3d.visualization.VisualizerWithKeyCallback", "open3d.visualization.VisualizerWithKeyCallback.register_key_callback", "open3d.visualization.VisualizerWithKeyCallback.create_window", "cfg.scene.items", "cfg.extra.items", "socket_utils.BaseSocket.__init__", "os.path.exists", "vis_server_o3d13.load_object", "vis_server_o3d13.VisOpen3DSocket.init_camera", "vis_utils_o3d13.Vector3dVector", "range", "sorted", "vis_server_o3d13.VisOpen3DSocket.set_meshes_zero", "vis_utils_o3d13.CritRange", "print", "os.makedirs", "ord", "vis_server_o3d13.o3d_callback_rotate", "vis_server_o3d13.load_object", "vis_server_o3d13.VisOpen3DSocket.vis.add_geometry", "vis_utils_o3d13.load_mesh", "numpy.array().reshape", "vis_utils_o3d13.load_mesh.transform", "vis_server_o3d13.VisOpen3DSocket.vis.add_geometry", "open3d.io.read_triangle_mesh", "torch.zeros().float", "torch.zeros().float", "numpy.zeros", "vis_server_o3d13.VisOpen3DSocket.add_human", "numpy.array", "config.args", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.load_object", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.init_camera", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.set_meshes_zero", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.o3d_callback_rotate", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.load_object", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.add_human", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ",", "host", ",", "port", ",", "cfg", ")", "->", "None", ":", "\n", "# output", "\n", "        ", "self", ".", "write", "=", "cfg", ".", "write", "\n", "self", ".", "out", "=", "cfg", ".", "out", "\n", "self", ".", "cfg", "=", "cfg", "\n", "if", "self", ".", "write", ":", "\n", "            ", "print", "(", "'[Info] capture the screen to {}'", ".", "format", "(", "self", ".", "out", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "out", ",", "exist_ok", "=", "True", ")", "\n", "# scene", "\n", "", "vis", "=", "o3d", ".", "visualization", ".", "VisualizerWithKeyCallback", "(", ")", "\n", "vis", ".", "register_key_callback", "(", "ord", "(", "'A'", ")", ",", "o3d_callback_rotate", ")", "\n", "if", "cfg", ".", "rotate", ":", "\n", "            ", "o3d_callback_rotate", "(", ")", "\n", "", "vis", ".", "create_window", "(", "window_name", "=", "'Visualizer'", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ")", "\n", "self", ".", "vis", "=", "vis", "\n", "# load the scene", "\n", "for", "key", ",", "mesh_args", "in", "cfg", ".", "scene", ".", "items", "(", ")", ":", "\n", "            ", "mesh", "=", "load_object", "(", "key", ",", "mesh_args", ")", "\n", "self", ".", "vis", ".", "add_geometry", "(", "mesh", ")", "\n", "", "for", "key", ",", "val", "in", "cfg", ".", "extra", ".", "items", "(", ")", ":", "\n", "            ", "mesh", "=", "load_mesh", "(", "val", "[", "\"path\"", "]", ")", "\n", "trans", "=", "np", ".", "array", "(", "val", "[", "'transform'", "]", ")", ".", "reshape", "(", "4", ",", "4", ")", "\n", "mesh", ".", "transform", "(", "trans", ")", "\n", "self", ".", "vis", ".", "add_geometry", "(", "mesh", ")", "\n", "# create vis => update => super() init", "\n", "", "super", "(", ")", ".", "__init__", "(", "host", ",", "port", ",", "debug", "=", "cfg", ".", "debug", ")", "\n", "self", ".", "block", "=", "cfg", ".", "block", "\n", "if", "os", ".", "path", ".", "exists", "(", "cfg", ".", "body_model_template", ")", ":", "\n", "            ", "body_template", "=", "o3d", ".", "io", ".", "read_triangle_mesh", "(", "cfg", ".", "body_model_template", ")", "\n", "self", ".", "body_template", "=", "body_template", "\n", "", "else", ":", "\n", "            ", "self", ".", "body_template", "=", "None", "\n", "", "self", ".", "body_model", "=", "load_object", "(", "cfg", ".", "body_model", ".", "module", ",", "{", "'model_path'", ":", "args", "(", ")", ".", "smpl_model_path", "}", ")", "\n", "zero_params", "=", "{", "\n", "'poses'", ":", "torch", ".", "zeros", "(", "1", ",", "72", ")", ".", "float", "(", ")", ",", "\n", "'betas'", ":", "torch", ".", "zeros", "(", "1", ",", "10", ")", ".", "float", "(", ")", ",", "\n", "}", "\n", "self", ".", "max_human", "=", "cfg", ".", "max_human", "\n", "self", ".", "track", "=", "cfg", ".", "track", "\n", "self", ".", "filter", "=", "cfg", ".", "filter", "\n", "self", ".", "camera_pose", "=", "cfg", ".", "camera", ".", "camera_pose", "\n", "self", ".", "init_camera", "(", "cfg", ".", "camera", ".", "camera_pose", ")", "\n", "self", ".", "zero_vertices", "=", "Vector3dVector", "(", "np", ".", "zeros", "(", "(", "6890", ",", "3", ")", ")", ")", "\n", "self", ".", "filter_dict", "=", "{", "}", "\n", "\n", "self", ".", "vertices", ",", "self", ".", "meshes", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "verts_available_ids", ",", "self", ".", "current_mesh_num", "=", "[", "]", ",", "0", "\n", "self", ".", "pid_verts_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "max_human", ")", ":", "\n", "            ", "self", ".", "add_human", "(", "zero_params", ")", "\n", "", "self", ".", "verts_available_ids", "=", "sorted", "(", "self", ".", "verts_available_ids", ",", "reverse", "=", "True", ")", "\n", "self", ".", "set_meshes_zero", "(", ")", "\n", "self", ".", "verts_change_cacher", "=", "[", "]", "\n", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "previous", "=", "{", "}", "\n", "self", ".", "critrange", "=", "CritRange", "(", "**", "cfg", ".", "range", ")", "\n", "self", ".", "new_frames", "=", "cfg", ".", "new_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.VisOpen3DSocket.set_meshes_zero": [[100, 103], ["range"], "methods", ["None"], ["", "def", "set_meshes_zero", "(", "self", ")", ":", "\n", "        ", "for", "ind", "in", "range", "(", "self", ".", "current_mesh_num", ")", ":", "\n", "            ", "self", ".", "meshes", "[", "ind", "]", ".", "vertices", "=", "self", ".", "zero_vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.VisOpen3DSocket.add_human": [[104, 130], ["vis_server_o3d13.VisOpen3DSocket.body_model", "vis_server_o3d13.VisOpen3DSocket.vertices.append", "vis_server_o3d13.VisOpen3DSocket.verts_available_ids.append", "vis_server_o3d13.VisOpen3DSocket.meshes.append", "vis_server_o3d13.VisOpen3DSocket.vis.add_geometry", "vis_server_o3d13.VisOpen3DSocket.init_camera", "smpl_outs[].cpu().numpy", "vis_utils_o3d13.get_uvs", "vis_utils_o3d13.create_mesh_with_uvmap", "print", "os.path.join", "os.path.join", "vis_utils_o3d13.create_mesh", "vis_utils_o3d13.create_mesh", "smpl_outs[].cpu", "config.args", "config.args", "config.args", "config.args", "random.sample", "vis_utils_o3d13.Vector2iVector", "config.args", "numpy.array", "list", "config.args", "config.args", "constants.wardrobe.keys", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.init_camera", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.get_uvs", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh_with_uvmap", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "def", "add_human", "(", "self", ",", "zero_params", ")", ":", "\n", "        ", "smpl_outs", "=", "self", ".", "body_model", "(", "**", "zero_params", ")", "\n", "vertices", "=", "smpl_outs", "[", "'verts'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "self", ".", "vertices", ".", "append", "(", "vertices", ")", "\n", "self", ".", "verts_available_ids", ".", "append", "(", "self", ".", "current_mesh_num", ")", "\n", "self", ".", "current_mesh_num", "+=", "1", "\n", "faces", "=", "self", ".", "body_model", ".", "faces", "\n", "\n", "if", "args", "(", ")", ".", "mesh_cloth", "in", "constants", ".", "wardrobe", "or", "args", "(", ")", ".", "mesh_cloth", "==", "'random'", ":", "\n", "            ", "uvs", "=", "get_uvs", "(", "args", "(", ")", ".", "smpl_uvmap", ")", "\n", "if", "args", "(", ")", ".", "mesh_cloth", "==", "'random'", ":", "\n", "                ", "cloth_id", "=", "random", ".", "sample", "(", "list", "(", "constants", ".", "wardrobe", ".", "keys", "(", ")", ")", ",", "1", ")", "[", "0", "]", "\n", "print", "(", "'choose cloth: '", ",", "cloth_id", ",", "constants", ".", "wardrobe", "[", "cloth_id", "]", ")", "\n", "texture_file", "=", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "wardrobe", ",", "constants", ".", "wardrobe", "[", "cloth_id", "]", ")", "\n", "", "else", ":", "\n", "                ", "texture_file", "=", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "wardrobe", ",", "constants", ".", "wardrobe", "[", "args", "(", ")", ".", "mesh_cloth", "]", ")", "\n", "", "mesh", "=", "create_mesh_with_uvmap", "(", "vertices", ",", "faces", ",", "texture_path", "=", "texture_file", ",", "uvs", "=", "Vector2iVector", "(", "uvs", ")", ")", "\n", "", "elif", "args", "(", ")", ".", "mesh_cloth", "in", "constants", ".", "mesh_color_dict", ":", "\n", "            ", "mesh_color", "=", "np", ".", "array", "(", "constants", ".", "mesh_color_dict", "[", "args", "(", ")", ".", "mesh_cloth", "]", ")", "/", "255.", "\n", "mesh", "=", "create_mesh", "(", "vertices", "=", "vertices", ",", "faces", "=", "faces", ",", "colors", "=", "mesh_color", ")", "\n", "", "else", ":", "\n", "            ", "mesh", "=", "create_mesh", "(", "vertices", "=", "vertices", ",", "faces", "=", "faces", ")", "\n", "\n", "", "self", ".", "meshes", ".", "append", "(", "mesh", ")", "\n", "self", ".", "vis", ".", "add_geometry", "(", "mesh", ")", "\n", "self", ".", "init_camera", "(", "self", ".", "camera_pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.VisOpen3DSocket.set_camera": [[131, 149], ["numpy.array", "numpy.array", "numpy.deg2rad", "numpy.deg2rad", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "set_camera", "(", "cfg", ",", "camera_pose", ")", ":", "\n", "        ", "theta", ",", "phi", "=", "np", ".", "deg2rad", "(", "-", "(", "cfg", ".", "camera", ".", "theta", "+", "90", ")", ")", ",", "np", ".", "deg2rad", "(", "cfg", ".", "camera", ".", "phi", ")", "\n", "theta", "=", "theta", "+", "np", ".", "pi", "\n", "st", ",", "ct", "=", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "\n", "sp", ",", "cp", "=", "np", ".", "sin", "(", "phi", ")", ",", "np", ".", "cos", "(", "phi", ")", "\n", "rot_x", "=", "np", ".", "array", "(", "[", "\n", "[", "1.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "ct", ",", "-", "st", "]", ",", "\n", "[", "0", ",", "st", ",", "ct", "]", "\n", "]", ")", "\n", "rot_z", "=", "np", ".", "array", "(", "[", "\n", "[", "cp", ",", "-", "sp", ",", "0", "]", ",", "\n", "[", "sp", ",", "cp", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", "]", "\n", "]", ")", "\n", "camera_pose", "[", ":", "3", ",", ":", "3", "]", "=", "rot_x", "@", "rot_z", "\n", "return", "camera_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.VisOpen3DSocket.init_camera": [[150, 156], ["vis_server_o3d13.VisOpen3DSocket.vis.get_view_control", "vis_server_o3d13.VisOpen3DSocket.convert_to_pinhole_camera_parameters", "numpy.array", "vis_server_o3d13.VisOpen3DSocket.convert_from_pinhole_camera_parameters"], "methods", ["None"], ["", "def", "init_camera", "(", "self", ",", "camera_pose", ")", ":", "\n", "        ", "ctr", "=", "self", ".", "vis", ".", "get_view_control", "(", ")", "\n", "init_param", "=", "ctr", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "# init_param.intrinsic.set_intrinsics(init_param.intrinsic.width, init_param.intrinsic.height, fx, fy, cx, cy)", "\n", "init_param", ".", "extrinsic", "=", "np", ".", "array", "(", "camera_pose", ")", "\n", "ctr", ".", "convert_from_pinhole_camera_parameters", "(", "init_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.VisOpen3DSocket.get_camera": [[157, 161], ["vis_server_o3d13.VisOpen3DSocket.vis.get_view_control", "vis_server_o3d13.VisOpen3DSocket.convert_to_pinhole_camera_parameters", "numpy.array"], "methods", ["None"], ["", "def", "get_camera", "(", "self", ")", ":", "\n", "        ", "ctr", "=", "self", ".", "vis", ".", "get_view_control", "(", ")", "\n", "init_param", "=", "ctr", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "return", "np", ".", "array", "(", "init_param", ".", "extrinsic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.VisOpen3DSocket.main": [[162, 195], ["isinstance", "socket_utils.log", "json.loads", "data.keys", "vis_utils_o3d13.Timer", "enumerate", "range", "vis_utils_o3d13.Timer", "range", "numpy.array", "len", "vis_server_o3d13.merge_params", "[].cpu().numpy", "range", "len", "len", "len", "len", "print", "vis_server_o3d13.VisOpen3DSocket.add_human", "data.keys", "vis_utils_o3d13.Vector3dVector", "merge_params.append", "vis_utils_o3d13.convert_verts_to_cam_space", "vis_utils_o3d13.Vector3dVector", "[].cpu", "vis_server_o3d13.VisOpen3DSocket.body_model"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.merge_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.add_human", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.convert_verts_to_cam_space"], ["", "def", "main", "(", "self", ",", "datas", ")", ":", "\n", "        ", "if", "self", ".", "debug", ":", "log", "(", "'[Info] Load data {}'", ".", "format", "(", "self", ".", "count", ")", ")", "\n", "if", "isinstance", "(", "datas", ",", "str", ")", ":", "\n", "            ", "datas", "=", "json", ".", "loads", "(", "datas", ")", "\n", "", "for", "data", "in", "datas", ":", "\n", "            ", "for", "key", "in", "data", ".", "keys", "(", ")", ":", "\n", "                ", "if", "key", "==", "'id'", ":", "\n", "                    ", "continue", "\n", "", "data", "[", "key", "]", "=", "np", ".", "array", "(", "data", "[", "key", "]", ")", "\n", "\n", "", "", "with", "Timer", "(", "'forward'", ")", ":", "\n", "            ", "params", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "datas", ")", ":", "\n", "                ", "if", "i", ">=", "len", "(", "self", ".", "meshes", ")", ":", "\n", "                    ", "print", "(", "'[Error] the number of human exceeds!'", ")", "\n", "self", ".", "add_human", "(", "data", ")", "\n", "", "if", "'vertices'", "in", "data", ".", "keys", "(", ")", ":", "\n", "                    ", "vertices", "=", "data", "[", "'vertices'", "]", "\n", "self", ".", "vertices", "[", "i", "]", "=", "Vector3dVector", "(", "vertices", ")", "\n", "", "else", ":", "\n", "                    ", "params", ".", "append", "(", "data", ")", "\n", "", "", "if", "len", "(", "params", ")", ">", "0", ":", "\n", "                ", "params", "=", "merge_params", "(", "params", ")", "\n", "vertices", "=", "self", ".", "body_model", "(", "**", "params", ")", "[", "'verts'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "vertices", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "verts_processed", "=", "convert_verts_to_cam_space", "(", "vertices", "[", "i", "]", ")", "\n", "self", ".", "vertices", "[", "i", "]", "=", "Vector3dVector", "(", "verts_processed", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "datas", ")", ",", "len", "(", "self", ".", "meshes", ")", ")", ":", "\n", "                ", "self", ".", "vertices", "[", "i", "]", "=", "self", ".", "zero_vertices", "\n", "# Open3D will lock the thread here", "\n", "", "", "with", "Timer", "(", "'set vertices'", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "vertices", ")", ")", ":", "\n", "                ", "self", ".", "meshes", "[", "i", "]", ".", "vertices", "=", "self", ".", "vertices", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.VisOpen3DSocket.o3dcallback": [[196, 201], ["vis_server_o3d13.VisOpen3DSocket.set_camera", "vis_server_o3d13.VisOpen3DSocket.init_camera", "vis_server_o3d13.VisOpen3DSocket.get_camera"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.set_camera", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.init_camera", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.get_camera"], ["", "", "", "def", "o3dcallback", "(", "self", ")", ":", "\n", "        ", "if", "rotate", ":", "\n", "            ", "self", ".", "cfg", ".", "camera", ".", "phi", "+=", "np", ".", "pi", "/", "10", "\n", "camera_pose", "=", "self", ".", "set_camera", "(", "self", ".", "cfg", ",", "self", ".", "get_camera", "(", ")", ")", "\n", "self", ".", "init_camera", "(", "camera_pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.VisOpen3DSocket.update": [[202, 229], ["vis_server_o3d13.VisOpen3DSocket.previous.clear", "vis_server_o3d13.VisOpen3DSocket.queue.empty", "vis_server_o3d13.VisOpen3DSocket.queue.get", "vis_server_o3d13.VisOpen3DSocket.main", "socket_utils.log", "vis_utils_o3d13.Timer", "vis_server_o3d13.VisOpen3DSocket.o3dcallback", "vis_server_o3d13.VisOpen3DSocket.vis.poll_events", "vis_server_o3d13.VisOpen3DSocket.vis.update_renderer", "os.path.join", "vis_utils_o3d13.Timer", "vis_server_o3d13.VisOpen3DSocket.o3dcallback", "vis_server_o3d13.VisOpen3DSocket.vis.poll_events", "vis_server_o3d13.VisOpen3DSocket.vis.update_renderer", "vis_server_o3d13.VisOpen3DSocket.queue.qsize", "vis_server_o3d13.VisOpen3DSocket.queue.get", "mesh.compute_triangle_normals", "vis_server_o3d13.VisOpen3DSocket.vis.update_geometry", "vis_utils_o3d13.Timer", "vis_server_o3d13.VisOpen3DSocket.vis.capture_screen_image", "str", "vis_server_o3d13.VisOpen3DSocket.queue.qsize"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.timer.Timer.clear", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.main", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.o3dcallback", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.o3dcallback"], ["", "", "def", "update", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "disconnect", "and", "not", "self", ".", "block", ":", "\n", "            ", "self", ".", "previous", ".", "clear", "(", ")", "\n", "", "if", "not", "self", ".", "queue", ".", "empty", "(", ")", ":", "\n", "            ", "if", "self", ".", "debug", ":", "log", "(", "'Update'", "+", "str", "(", "self", ".", "queue", ".", "qsize", "(", ")", ")", ")", "\n", "datas", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "if", "not", "self", ".", "block", ":", "\n", "                ", "while", "self", ".", "queue", ".", "qsize", "(", ")", ">", "0", ":", "\n", "                    ", "datas", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "", "", "self", ".", "main", "(", "datas", ")", "\n", "with", "Timer", "(", "'update geometry'", ")", ":", "\n", "                ", "for", "mesh", "in", "self", ".", "meshes", ":", "\n", "                    ", "mesh", ".", "compute_triangle_normals", "(", ")", "\n", "self", ".", "vis", ".", "update_geometry", "(", "mesh", ")", "\n", "", "self", ".", "o3dcallback", "(", ")", "\n", "self", ".", "vis", ".", "poll_events", "(", ")", "\n", "self", ".", "vis", ".", "update_renderer", "(", ")", "\n", "", "if", "self", ".", "write", ":", "\n", "                ", "outname", "=", "join", "(", "self", ".", "out", ",", "'{:06d}.jpg'", ".", "format", "(", "self", ".", "count", ")", ")", "\n", "with", "Timer", "(", "'capture'", ")", ":", "\n", "                    ", "self", ".", "vis", ".", "capture_screen_image", "(", "outname", ")", "\n", "", "", "self", ".", "count", "+=", "1", "\n", "", "else", ":", "\n", "            ", "with", "Timer", "(", "'update renderer'", ",", "True", ")", ":", "\n", "                ", "self", ".", "o3dcallback", "(", ")", "\n", "self", ".", "vis", ".", "poll_events", "(", ")", "\n", "self", ".", "vis", ".", "update_renderer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.load_object": [[19, 25], ["importlib.import_module", "module_name.split", "getattr", "module_name.split"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["def", "load_object", "(", "module_name", ",", "module_args", ")", ":", "\n", "    ", "module_path", "=", "'.'", ".", "join", "(", "module_name", ".", "split", "(", "'.'", ")", "[", ":", "-", "1", "]", ")", "\n", "module", "=", "importlib", ".", "import_module", "(", "module_path", ")", "\n", "name", "=", "module_name", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "obj", "=", "getattr", "(", "module", ",", "name", ")", "(", "**", "module_args", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.merge_params": [[26, 33], ["isinstance", "len", "torch.from_numpy().float", "torch.from_numpy", "numpy.concatenate"], "function", ["None"], ["", "def", "merge_params", "(", "params", ")", ":", "\n", "    ", "params_batch", "=", "{", "}", "\n", "for", "key", "in", "params", "[", "0", "]", ":", "\n", "        ", "if", "isinstance", "(", "params", "[", "0", "]", "[", "key", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "len", "(", "params", "[", "0", "]", "[", "key", "]", ".", "shape", ")", ">", "0", ":", "\n", "                ", "params_batch", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "[", "param", "[", "key", "]", "for", "param", "in", "params", "]", ",", "0", ")", ")", ".", "float", "(", ")", "\n", "", "", "", "return", "params_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_o3d13.o3d_callback_rotate": [[35, 39], ["None"], "function", ["None"], ["def", "o3d_callback_rotate", "(", "vis", "=", "None", ")", ":", "\n", "    ", "global", "rotate", "\n", "rotate", "=", "not", "rotate", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.__init__": [[368, 392], ["init_dict.items", "dict.__init__", "set", "type", "vis_utils_o3d13.CN", "vis_utils_o3d13._valid_type"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._valid_type"], ["def", "__init__", "(", "self", ",", "init_dict", "=", "None", ",", "key_list", "=", "None", ")", ":", "\n", "# Recursively convert nested dictionaries in init_dict into CNs", "\n", "        ", "init_dict", "=", "{", "}", "if", "init_dict", "is", "None", "else", "init_dict", "\n", "key_list", "=", "[", "]", "if", "key_list", "is", "None", "else", "key_list", "\n", "for", "k", ",", "v", "in", "init_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "v", ")", "is", "dict", ":", "\n", "# Convert dict to CN", "\n", "                ", "init_dict", "[", "k", "]", "=", "CN", "(", "v", ",", "key_list", "=", "key_list", "+", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "# Check for valid leaf type or nested CN", "\n", "                ", "assert", "_valid_type", "(", "v", ",", "allow_cfg_node", "=", "True", ")", "\n", "", "", "super", "(", "CN", ",", "self", ")", ".", "__init__", "(", "init_dict", ")", "\n", "# Manage if the CN is frozen or not", "\n", "self", ".", "__dict__", "[", "CN", ".", "IMMUTABLE", "]", "=", "False", "\n", "# Deprecated options", "\n", "# If an option is removed from the code and you don't want to break existing", "\n", "# yaml configs, you can add the full config key as a string to the set below.", "\n", "self", ".", "__dict__", "[", "CN", ".", "DEPRECATED_KEYS", "]", "=", "set", "(", ")", "\n", "# Renamed options", "\n", "# If you rename a config option, record the mapping from the old name to the new", "\n", "# name in the dictionary below. Optionally, if the type also changed, you can", "\n", "# make the value a tuple that specifies first the renamed key and then", "\n", "# instructions for how to edit the config file.", "\n", "self", ".", "__dict__", "[", "CN", ".", "RENAMED_KEYS", "]", "=", "{", "\n", "# 'EXAMPLE.OLD.KEY': 'EXAMPLE.NEW.KEY',  # Dummy example to follow", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.__getattr__": [[400, 405], ["AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.__setattr__": [[406, 418], ["vis_utils_o3d13.CN.is_frozen", "vis_utils_o3d13._valid_type", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.is_frozen", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._valid_type"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "is_frozen", "(", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Attempted to set {} to {}, but CN is immutable\"", ".", "format", "(", "\n", "name", ",", "value", "\n", ")", "\n", ")", "\n", "\n", "", "assert", "name", "not", "in", "self", ".", "__dict__", "\n", "assert", "_valid_type", "(", "value", ",", "allow_cfg_node", "=", "True", ")", "\n", "\n", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.__str__": [[419, 439], ["vis_utils_o3d13.CN.items", "s_.split", "s_.split.pop", "vis_utils_o3d13.CN.__str__._indent"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "def", "_indent", "(", "s_", ",", "num_spaces", ")", ":", "\n", "            ", "s", "=", "s_", ".", "split", "(", "\"\\n\"", ")", "\n", "if", "len", "(", "s", ")", "==", "1", ":", "\n", "                ", "return", "s_", "\n", "", "first", "=", "s", ".", "pop", "(", "0", ")", "\n", "s", "=", "[", "(", "num_spaces", "*", "\" \"", ")", "+", "line", "for", "line", "in", "s", "]", "\n", "s", "=", "\"\\n\"", ".", "join", "(", "s", ")", "\n", "s", "=", "first", "+", "\"\\n\"", "+", "s", "\n", "return", "s", "\n", "\n", "", "r", "=", "\"\"", "\n", "s", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "seperator", "=", "\"\\n\"", "if", "isinstance", "(", "v", ",", "CN", ")", "else", "\" \"", "\n", "attr_str", "=", "\"{}:{}{}\"", ".", "format", "(", "str", "(", "k", ")", ",", "seperator", ",", "str", "(", "v", ")", ")", "\n", "attr_str", "=", "_indent", "(", "attr_str", ",", "4", ")", "\n", "s", ".", "append", "(", "attr_str", ")", "\n", "", "r", "+=", "\"\\n\"", ".", "join", "(", "s", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.__repr__": [[440, 442], ["dict.__repr__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "super", "(", "CN", ",", "self", ")", ".", "__repr__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump": [[443, 447], ["_to_dict", "yaml.safe_dump"], "methods", ["None"], ["", "def", "dump", "(", "self", ")", ":", "\n", "        ", "\"\"\"Dump to a string.\"\"\"", "\n", "self_as_dict", "=", "_to_dict", "(", "self", ")", "\n", "return", "yaml", ".", "safe_dump", "(", "self_as_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_file": [[448, 457], ["vis_utils_o3d13.CN.merge_from_other_cfg", "open", "vis_utils_o3d13.load_cfg", "load_cfg.keys", "print", "vis_utils_o3d13.CN.merge_from_file"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_other_cfg", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.load_cfg", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_file"], ["", "def", "merge_from_file", "(", "self", ",", "cfg_filename", ")", ":", "\n", "        ", "\"\"\"Load a yaml config file and merge it this CN.\"\"\"", "\n", "with", "open", "(", "cfg_filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "cfg", "=", "load_cfg", "(", "f", ")", "\n", "", "if", "'parent'", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "            ", "if", "cfg", ".", "parent", "!=", "'none'", ":", "\n", "                ", "print", "(", "'[Config] merge from parent file: {}'", ".", "format", "(", "cfg", ".", "parent", ")", ")", "\n", "self", ".", "merge_from_file", "(", "cfg", ".", "parent", ")", "\n", "", "", "self", ".", "merge_from_other_cfg", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_other_cfg": [[458, 461], ["vis_utils_o3d13._merge_a_into_b"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._merge_a_into_b"], ["", "def", "merge_from_other_cfg", "(", "self", ",", "cfg_other", ")", ":", "\n", "        ", "\"\"\"Merge `cfg_other` into this CN.\"\"\"", "\n", "_merge_a_into_b", "(", "cfg_other", ",", "self", ",", "self", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_list": [[462, 480], ["zip", "vis_utils_o3d13.CN.key_is_deprecated", "vis_utils_o3d13.CN.key_is_renamed", "full_key.split", "vis_utils_o3d13._decode_cfg_value", "vis_utils_o3d13._check_and_coerce_cfg_value_type", "vis_utils_o3d13.CN.raise_key_rename_error"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.key_is_deprecated", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.key_is_renamed", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._decode_cfg_value", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._check_and_coerce_cfg_value_type", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.raise_key_rename_error"], ["", "def", "merge_from_list", "(", "self", ",", "cfg_list", ")", ":", "\n", "        ", "\"\"\"Merge config (keys, values) in a list (e.g., from command line) into\n        this CN. For example, `cfg_list = ['FOO.BAR', 0.5]`.\n        \"\"\"", "\n", "root", "=", "self", "\n", "for", "full_key", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "            ", "if", "root", ".", "key_is_deprecated", "(", "full_key", ")", ":", "\n", "                ", "continue", "\n", "", "if", "root", ".", "key_is_renamed", "(", "full_key", ")", ":", "\n", "                ", "root", ".", "raise_key_rename_error", "(", "full_key", ")", "\n", "", "key_list", "=", "full_key", ".", "split", "(", "\".\"", ")", "\n", "d", "=", "self", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "                ", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "value", "=", "_decode_cfg_value", "(", "v", ")", "\n", "value", "=", "_check_and_coerce_cfg_value_type", "(", "value", ",", "d", "[", "subkey", "]", ",", "subkey", ",", "full_key", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.freeze": [[481, 484], ["vis_utils_o3d13.CN._immutable"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN._immutable"], ["", "", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make this CN and all of its children immutable.\"\"\"", "\n", "self", ".", "_immutable", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.defrost": [[485, 488], ["vis_utils_o3d13.CN._immutable"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN._immutable"], ["", "def", "defrost", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make this CN and all of its children mutable.\"\"\"", "\n", "self", ".", "_immutable", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.is_frozen": [[489, 492], ["None"], "methods", ["None"], ["", "def", "is_frozen", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return mutability.\"\"\"", "\n", "return", "self", ".", "__dict__", "[", "CN", ".", "IMMUTABLE", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN._immutable": [[493, 505], ["vis_utils_o3d13.CN.__dict__.values", "vis_utils_o3d13.CN.values", "isinstance", "isinstance", "v._immutable", "v._immutable"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN._immutable", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN._immutable"], ["", "def", "_immutable", "(", "self", ",", "is_immutable", ")", ":", "\n", "        ", "\"\"\"Set immutability to is_immutable and recursively apply the setting\n        to all nested CNs.\n        \"\"\"", "\n", "self", ".", "__dict__", "[", "CN", ".", "IMMUTABLE", "]", "=", "is_immutable", "\n", "# Recursively set immutable state", "\n", "for", "v", "in", "self", ".", "__dict__", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "CN", ")", ":", "\n", "                ", "v", ".", "_immutable", "(", "is_immutable", ")", "\n", "", "", "for", "v", "in", "self", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "CN", ")", ":", "\n", "                ", "v", ".", "_immutable", "(", "is_immutable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone": [[506, 509], ["copy.deepcopy"], "methods", ["None"], ["", "", "", "def", "clone", "(", "self", ")", ":", "\n", "        ", "\"\"\"Recursively copy this CN.\"\"\"", "\n", "return", "copy", ".", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.register_deprecated_key": [[510, 515], ["vis_utils_o3d13.CN.__dict__[].add"], "methods", ["None"], ["", "def", "register_deprecated_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Register key (e.g. `FOO.BAR`) a deprecated option. When merging deprecated\n        keys a warning is generated and the key is ignored.\n        \"\"\"", "\n", "self", ".", "__dict__", "[", "CN", ".", "DEPRECATED_KEYS", "]", ".", "add", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.register_renamed_key": [[516, 525], ["None"], "methods", ["None"], ["", "def", "register_renamed_key", "(", "self", ",", "old_name", ",", "new_name", ",", "message", "=", "None", ")", ":", "\n", "        ", "\"\"\"Register a key as having been renamed from `old_name` to `new_name`.\n        When merging a renamed key, an exception is thrown alerting to user to\n        the fact that the key has been renamed.\n        \"\"\"", "\n", "value", "=", "new_name", "\n", "if", "message", ":", "\n", "            ", "value", "=", "(", "new_name", ",", "message", ")", "\n", "", "self", ".", "__dict__", "[", "CN", ".", "RENAMED_KEYS", "]", "[", "old_name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.key_is_deprecated": [[526, 532], ["print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "key_is_deprecated", "(", "self", ",", "full_key", ")", ":", "\n", "        ", "\"\"\"Test if a key is deprecated.\"\"\"", "\n", "if", "full_key", "in", "self", ".", "__dict__", "[", "CN", ".", "DEPRECATED_KEYS", "]", ":", "\n", "            ", "print", "(", "\"Deprecated config key (ignoring): {}\"", ".", "format", "(", "full_key", ")", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.key_is_renamed": [[533, 536], ["None"], "methods", ["None"], ["", "def", "key_is_renamed", "(", "self", ",", "full_key", ")", ":", "\n", "        ", "\"\"\"Test if a key is renamed.\"\"\"", "\n", "return", "full_key", "in", "self", ".", "__dict__", "[", "CN", ".", "RENAMED_KEYS", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.raise_key_rename_error": [[537, 547], ["isinstance", "KeyError"], "methods", ["None"], ["", "def", "raise_key_rename_error", "(", "self", ",", "full_key", ")", ":", "\n", "        ", "new_key", "=", "self", ".", "__dict__", "[", "CN", ".", "RENAMED_KEYS", "]", "[", "full_key", "]", "\n", "if", "isinstance", "(", "new_key", ",", "tuple", ")", ":", "\n", "            ", "msg", "=", "\" Note: \"", "+", "new_key", "[", "1", "]", "\n", "new_key", "=", "new_key", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"\"", "\n", "", "raise", "KeyError", "(", "\n", "\"Key {} was renamed to {}; please update your config.{}\"", ".", "format", "(", "\n", "full_key", ",", "new_key", ",", "msg", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load_from_args": [[551, 559], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "cls.load"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["    ", "@", "classmethod", "\n", "def", "load_from_args", "(", "cls", ")", ":", "\n", "        ", "import", "argparse", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "type", "=", "str", ",", "default", "=", "'config/vis/base.yml'", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "default", "=", "None", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "cls", ".", "load", "(", "filename", "=", "args", ".", "cfg", ",", "opts", "=", "args", ".", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load": [[560, 571], ["vis_utils_o3d13.CN", "cls.init", "cls.parse", "cls.print", "cls.init.merge_from_file", "len", "cls.init.merge_from_list"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.Config.init", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.parse", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_file", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.merge_from_list"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "filename", "=", "None", ",", "opts", "=", "[", "]", ")", "->", "CN", ":", "\n", "        ", "cfg", "=", "CN", "(", ")", "\n", "cfg", "=", "cls", ".", "init", "(", "cfg", ")", "\n", "if", "filename", "is", "not", "None", ":", "\n", "            ", "cfg", ".", "merge_from_file", "(", "filename", ")", "\n", "", "if", "len", "(", "opts", ")", ">", "0", ":", "\n", "            ", "cfg", ".", "merge_from_list", "(", "opts", ")", "\n", "", "cls", ".", "parse", "(", "cfg", ")", "\n", "cls", ".", "print", "(", "cfg", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.init": [[572, 575], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init", "(", "cfg", ")", ":", "\n", "        ", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.parse": [[576, 579], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parse", "(", "cfg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print": [[580, 586], ["vis_utils_o3d13.BaseConfig.print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "@", "staticmethod", "\n", "def", "print", "(", "cfg", ")", ":", "\n", "        ", "print", "(", "'[Info] --------------'", ")", "\n", "print", "(", "'[Info] Configuration:'", ")", "\n", "print", "(", "'[Info] --------------'", ")", "\n", "print", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.Config.init": [[588, 630], ["vis_utils_o3d13.CN", "vis_utils_o3d13.CN", "vis_utils_o3d13.CN", "vis_utils_o3d13.CN", "vis_utils_o3d13.CN", "vis_utils_o3d13.CN"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "init", "(", "cfg", ")", ":", "\n", "# input and output", "\n", "        ", "cfg", ".", "host", "=", "'auto'", "\n", "cfg", ".", "port", "=", "9999", "\n", "cfg", ".", "width", "=", "1920", "\n", "cfg", ".", "height", "=", "1080", "\n", "\n", "cfg", ".", "max_human", "=", "5", "\n", "cfg", ".", "track", "=", "True", "\n", "cfg", ".", "block", "=", "True", "# block visualization or not, True for visualize each frame, False in realtime applications", "\n", "cfg", ".", "rotate", "=", "False", "\n", "cfg", ".", "debug", "=", "False", "\n", "cfg", ".", "write", "=", "False", "\n", "cfg", ".", "out", "=", "'/'", "\n", "# scene:", "\n", "cfg", ".", "scene_module", "=", "\"easymocap.visualize.o3dwrapper\"", "\n", "cfg", ".", "scene", "=", "CN", "(", ")", "\n", "cfg", ".", "extra", "=", "CN", "(", ")", "\n", "cfg", ".", "range", "=", "CN", "(", ")", "\n", "cfg", ".", "new_frames", "=", "0", "\n", "\n", "# skel", "\n", "cfg", ".", "skel", "=", "CN", "(", ")", "\n", "cfg", ".", "skel", ".", "joint_radius", "=", "0.02", "\n", "cfg", ".", "body_model_template", "=", "\"none\"", "\n", "# camera", "\n", "cfg", ".", "camera", "=", "CN", "(", ")", "\n", "cfg", ".", "camera", ".", "phi", "=", "0", "\n", "cfg", ".", "camera", ".", "theta", "=", "-", "90", "+", "60", "\n", "cfg", ".", "camera", ".", "cx", "=", "0.", "\n", "cfg", ".", "camera", ".", "cy", "=", "0.", "\n", "cfg", ".", "camera", ".", "cz", "=", "6.", "\n", "cfg", ".", "camera", ".", "set_camera", "=", "False", "\n", "cfg", ".", "camera", ".", "camera_pose", "=", "[", "]", "\n", "# range", "\n", "cfg", ".", "range", "=", "CN", "(", ")", "\n", "cfg", ".", "range", ".", "minr", "=", "[", "-", "100", ",", "-", "100", ",", "-", "10", "]", "\n", "cfg", ".", "range", ".", "maxr", "=", "[", "100", ",", "100", ",", "10", "]", "\n", "cfg", ".", "range", ".", "rate_inlier", "=", "0.8", "\n", "cfg", ".", "range", ".", "min_conf", "=", "0.1", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.Config.parse": [[631, 650], ["socket.gethostname", "numpy.array", "numpy.array.tolist", "numpy.deg2rad", "numpy.deg2rad", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parse", "(", "cfg", ")", ":", "\n", "        ", "if", "cfg", ".", "host", "==", "'auto'", ":", "\n", "            ", "cfg", ".", "host", "=", "socket", ".", "gethostname", "(", ")", "\n", "", "if", "cfg", ".", "camera", ".", "set_camera", ":", "\n", "            ", "pass", "\n", "", "else", ":", "# use default camera", "\n", "# theta, phi = cfg.camera.theta, cfg.camera.phi", "\n", "            ", "theta", ",", "phi", "=", "np", ".", "deg2rad", "(", "cfg", ".", "camera", ".", "theta", ")", ",", "np", ".", "deg2rad", "(", "cfg", ".", "camera", ".", "phi", ")", "\n", "cx", ",", "cy", ",", "cz", "=", "cfg", ".", "camera", ".", "cx", ",", "cfg", ".", "camera", ".", "cy", ",", "cfg", ".", "camera", ".", "cz", "\n", "st", ",", "ct", "=", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "\n", "sp", ",", "cp", "=", "np", ".", "sin", "(", "phi", ")", ",", "np", ".", "cos", "(", "phi", ")", "\n", "dist", "=", "6", "\n", "camera_pose", "=", "np", ".", "array", "(", "[", "\n", "[", "cp", ",", "-", "st", "*", "sp", ",", "ct", "*", "sp", ",", "cx", "]", ",", "\n", "[", "sp", ",", "st", "*", "cp", ",", "-", "ct", "*", "cp", ",", "cy", "]", ",", "\n", "[", "0.", ",", "ct", ",", "st", ",", "cz", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "cfg", ".", "camera", ".", "camera_pose", "=", "camera_pose", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.Timer.tic": [[655, 658], ["time.time"], "methods", ["None"], ["@", "classmethod", "\n", "def", "tic", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "tmp", "=", "time", ".", "time", "(", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.Timer.toc": [[658, 663], ["time.time"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "toc", "(", "cls", ")", ":", "\n", "        ", "res", "=", "(", "time", ".", "time", "(", ")", "-", "cls", ".", "tmp", ")", "*", "1000", "\n", "cls", ".", "tmp", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.Timer.report": [[664, 671], ["cls.records.items", "print", "contents.append", "tabulate.tabulate", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "@", "classmethod", "\n", "def", "report", "(", "cls", ")", ":", "\n", "        ", "header", "=", "[", "''", ",", "'Time(ms)'", "]", "\n", "contents", "=", "[", "]", "\n", "for", "key", ",", "val", "in", "cls", ".", "records", ".", "items", "(", ")", ":", "\n", "            ", "contents", ".", "append", "(", "[", "'{:20s}'", ".", "format", "(", "key", ")", ",", "'{:.2f}'", ".", "format", "(", "sum", "(", "val", ")", "/", "len", "(", "val", ")", ")", "]", ")", "\n", "", "print", "(", "tabulate", ".", "tabulate", "(", "contents", ",", "header", ",", "tablefmt", "=", "'fancy_grid'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.Timer.__init__": [[672, 677], ["Timer.records.keys"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "name", ",", "silent", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "silent", "=", "silent", "\n", "if", "name", "not", "in", "Timer", ".", "records", ".", "keys", "(", ")", ":", "\n", "            ", "Timer", ".", "records", "[", "name", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.Timer.__enter__": [[678, 680], ["time.time"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.Timer.__exit__": [[681, 692], ["time.time", "Timer.records[].append", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "exc_tb", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "Timer", ".", "records", "[", "self", ".", "name", "]", ".", "append", "(", "(", "end", "-", "self", ".", "start", ")", "*", "1000", ")", "\n", "if", "not", "self", ".", "silent", ":", "\n", "            ", "t", "=", "(", "end", "-", "self", ".", "start", ")", "*", "1000", "\n", "if", "t", ">", "1000", ":", "\n", "                ", "print", "(", "'-> [{:20s}]: {:5.1f}s'", ".", "format", "(", "self", ".", "name", ",", "t", "/", "1000", ")", ")", "\n", "", "elif", "t", ">", "1e3", "*", "60", "*", "60", ":", "\n", "                ", "print", "(", "'-> [{:20s}]: {:5.1f}min'", ".", "format", "(", "self", ".", "name", ",", "t", "/", "1e3", "/", "60", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'-> [{:20s}]: {:5.1f}ms'", ".", "format", "(", "self", ".", "name", ",", "(", "end", "-", "self", ".", "start", ")", "*", "1000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseCrit.__init__": [[695, 699], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_conf", ",", "min_joints", "=", "3", ")", "->", "None", ":", "\n", "        ", "self", ".", "min_conf", "=", "min_conf", "\n", "self", ".", "min_joints", "=", "min_joints", "\n", "self", ".", "name", "=", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseCrit.__call__": [[700, 706], ["len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "keypoints3d", ",", "**", "kwargs", ")", ":", "\n", "# keypoints3d: (N, 4)", "\n", "        ", "conf", "=", "keypoints3d", "[", "...", ",", "-", "1", "]", "\n", "conf", "[", "conf", "<", "self", ".", "min_conf", "]", "=", "0", "\n", "idx", "=", "keypoints3d", "[", "...", ",", "-", "1", "]", ">", "self", ".", "min_conf", "\n", "return", "len", "(", "idx", ")", ">", "self", ".", "min_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CritRange.__init__": [[708, 713], ["vis_utils_o3d13.BaseCrit.__init__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "minr", ",", "maxr", ",", "rate_inlier", ",", "min_conf", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "min_conf", ")", "\n", "self", ".", "min", "=", "minr", "\n", "self", ".", "max", "=", "maxr", "\n", "self", ".", "rate", "=", "rate_inlier", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CritRange.__call__": [[714, 722], ["crit.sum"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "__call__", "(", "self", ",", "keypoints3d", ",", "**", "kwargs", ")", ":", "\n", "        ", "idx", "=", "keypoints3d", "[", "...", ",", "-", "1", "]", ">", "self", ".", "min_conf", "\n", "k3d", "=", "keypoints3d", "[", "idx", ",", ":", "3", "]", "\n", "crit", "=", "(", "k3d", "[", ":", ",", "0", "]", ">", "self", ".", "min", "[", "0", "]", ")", "&", "(", "k3d", "[", ":", ",", "0", "]", "<", "self", ".", "max", "[", "0", "]", ")", "&", "(", "k3d", "[", ":", ",", "1", "]", ">", "self", ".", "min", "[", "1", "]", ")", "&", "(", "k3d", "[", ":", ",", "1", "]", "<", "self", ".", "max", "[", "1", "]", ")", "&", "(", "k3d", "[", ":", ",", "2", "]", ">", "self", ".", "min", "[", "2", "]", ")", "&", "(", "k3d", "[", ":", ",", "2", "]", "<", "self", ".", "max", "[", "2", "]", ")", "\n", "self", ".", "log", "=", "'{}: {}'", ".", "format", "(", "self", ".", "name", ",", "k3d", ")", "\n", "return", "crit", ".", "sum", "(", ")", "/", "crit", ".", "shape", "[", "0", "]", ">", "self", ".", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.get_uvs": [[26, 32], ["numpy.load", "numpy.concatenate().reshape", "Vector2iVector", "numpy.concatenate", "range"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["def", "get_uvs", "(", "uvmap_path", ")", ":", "\n", "    ", "uv_map_vt_ft", "=", "np", ".", "load", "(", "uvmap_path", ",", "allow_pickle", "=", "True", ")", "\n", "vt", ",", "ft", "=", "uv_map_vt_ft", "[", "'vt'", "]", ",", "uv_map_vt_ft", "[", "'ft'", "]", "\n", "uvs", "=", "np", ".", "concatenate", "(", "[", "vt", "[", "ft", "[", ":", ",", "ind", "]", "]", "[", ":", ",", "None", "]", "for", "ind", "in", "range", "(", "3", ")", "]", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "uvs", "[", ":", ",", "1", "]", "=", "1", "-", "uvs", "[", ":", ",", "1", "]", "\n", "return", "Vector2iVector", "(", "uvs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.convert_verts_to_cam_space": [[33, 39], ["None"], "function", ["None"], ["", "def", "convert_verts_to_cam_space", "(", "vertices", ")", ":", "\n", "# x - right, y - into, z - up", "\n", "    ", "vertices", "=", "vertices", "[", ":", ",", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "vertices", "[", ":", ",", "2", "]", "*=", "-", "1", "\n", "vertices", "[", ":", ",", "1", "]", "-=", "3", "\n", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.load_sphere": [[41, 46], ["os.path.dirname", "numpy.loadtxt", "numpy.loadtxt", "join", "join"], "function", ["None"], ["", "def", "load_sphere", "(", ")", ":", "\n", "    ", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "faces", "=", "np", ".", "loadtxt", "(", "join", "(", "cur_dir", ",", "'sphere_faces_20.txt'", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "vertices", "=", "np", ".", "loadtxt", "(", "join", "(", "cur_dir", ",", "'sphere_vertices_20.txt'", ")", ")", "\n", "return", "vertices", ",", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.load_cylinder": [[47, 52], ["os.path.dirname", "numpy.loadtxt", "numpy.loadtxt", "join", "join"], "function", ["None"], ["", "def", "load_cylinder", "(", ")", ":", "\n", "    ", "cur_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "faces", "=", "np", ".", "loadtxt", "(", "join", "(", "cur_dir", ",", "'cylinder_faces_20.txt'", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "vertices", "=", "np", ".", "loadtxt", "(", "join", "(", "cur_dir", ",", "'cylinder_vertices_20.txt'", ")", ")", "\n", "return", "vertices", ",", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_point_": [[53, 69], ["vis_utils_o3d13.load_sphere", "vert[].repeat", "numpy.vstack", "face[].repeat", "numpy.vstack", "numpy.arange().reshape", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.load_sphere"], ["", "def", "create_point_", "(", "points", ",", "r", "=", "0.01", ")", ":", "\n", "    ", "\"\"\" create sphere\n    Args:\n        points (array): (N, 3)/(N, 4)\n        r (float, optional): radius. Defaults to 0.01.\n    \"\"\"", "\n", "nPoints", "=", "points", ".", "shape", "[", "0", "]", "\n", "vert", ",", "face", "=", "load_sphere", "(", ")", "\n", "nVerts", "=", "vert", ".", "shape", "[", "0", "]", "\n", "vert", "=", "vert", "[", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "points", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "vert", "=", "vert", "+", "points", "[", ":", ",", "None", ",", ":", "]", "\n", "verts", "=", "np", ".", "vstack", "(", "vert", ")", "\n", "face", "=", "face", "[", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "points", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "face", "=", "face", "+", "nVerts", "*", "np", ".", "arange", "(", "nPoints", ")", ".", "reshape", "(", "nPoints", ",", "1", ",", "1", ")", "\n", "faces", "=", "np", ".", "vstack", "(", "face", ")", "\n", "return", "{", "'vertices'", ":", "verts", ",", "'faces'", ":", "faces", ",", "'name'", ":", "'points'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.calRot": [[70, 78], ["numpy.cross", "cv2.Rodrigues", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.arccos", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.Rodrigues"], ["", "def", "calRot", "(", "axis", ",", "direc", ")", ":", "\n", "    ", "direc", "=", "direc", "/", "np", ".", "linalg", ".", "norm", "(", "direc", ")", "\n", "axis", "=", "axis", "/", "np", ".", "linalg", ".", "norm", "(", "axis", ")", "\n", "rotdir", "=", "np", ".", "cross", "(", "axis", ",", "direc", ")", "\n", "rotdir", "=", "rotdir", "/", "np", ".", "linalg", ".", "norm", "(", "rotdir", ")", "\n", "rotdir", "=", "rotdir", "*", "np", ".", "arccos", "(", "np", ".", "dot", "(", "direc", ",", "axis", ")", ")", "\n", "rotmat", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "rotdir", ")", "\n", "return", "rotmat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_line_": [[79, 90], ["numpy.linalg.norm", "vis_utils_o3d13.load_cylinder", "vis_utils_o3d13.calRot", "numpy.array", "col.reshape().repeat", "col.reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.load_cylinder", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.calRot"], ["", "def", "create_line_", "(", "start", ",", "end", ",", "r", "=", "0.01", ",", "col", "=", "None", ")", ":", "\n", "    ", "length", "=", "np", ".", "linalg", ".", "norm", "(", "end", "[", ":", "3", "]", "-", "start", "[", ":", "3", "]", ")", "\n", "vertices", ",", "faces", "=", "load_cylinder", "(", ")", "\n", "vertices", "[", ":", ",", ":", "2", "]", "*=", "r", "\n", "vertices", "[", ":", ",", "2", "]", "*=", "length", "/", "2", "\n", "rotmat", "=", "calRot", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ",", "end", "-", "start", ")", "\n", "vertices", "=", "vertices", "@", "rotmat", ".", "T", "+", "(", "start", "+", "end", ")", "/", "2", "\n", "ret", "=", "{", "'vertices'", ":", "vertices", ",", "'faces'", ":", "faces", ",", "'name'", ":", "'line'", "}", "\n", "if", "col", "is", "not", "None", ":", "\n", "        ", "ret", "[", "'colors'", "]", "=", "col", ".", "reshape", "(", "-", "1", ",", "3", ")", ".", "repeat", "(", "vertices", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_ground_": [[91, 129], ["isinstance", "print", "range", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.array", "numpy.array", "numpy.array", "range", "numpy.stack", "numpy.stack", "np.vstack.append", "np.vstack.append", "np.vstack.append", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "create_ground_", "(", "\n", "center", "=", "[", "0", ",", "0", ",", "0", "]", ",", "xdir", "=", "[", "1", ",", "0", ",", "0", "]", ",", "ydir", "=", "[", "0", ",", "1", ",", "0", "]", ",", "# \u4f4d\u7f6e", "\n", "step", "=", "1", ",", "xrange", "=", "10", ",", "yrange", "=", "10", ",", "# \u5c3a\u5bf8", "\n", "white", "=", "[", "1.", ",", "1.", ",", "1.", "]", ",", "black", "=", "[", "0.", ",", "0.", ",", "0.", "]", ",", "# \u989c\u8272", "\n", "two_sides", "=", "True", "\n", ")", ":", "\n", "    ", "if", "isinstance", "(", "center", ",", "list", ")", ":", "\n", "        ", "center", "=", "np", ".", "array", "(", "center", ")", "\n", "xdir", "=", "np", ".", "array", "(", "xdir", ")", "\n", "ydir", "=", "np", ".", "array", "(", "ydir", ")", "\n", "", "print", "(", "'[Vis Info] {}, x: {}, y: {}'", ".", "format", "(", "center", ",", "xdir", ",", "ydir", ")", ")", "\n", "xdir", "=", "xdir", "*", "step", "\n", "ydir", "=", "ydir", "*", "step", "\n", "vertls", ",", "trils", ",", "colls", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "cnt", "=", "0", "\n", "min_x", "=", "-", "xrange", "if", "two_sides", "else", "0", "\n", "min_y", "=", "-", "yrange", "if", "two_sides", "else", "0", "\n", "for", "i", "in", "range", "(", "min_x", ",", "xrange", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "min_y", ",", "yrange", ")", ":", "\n", "            ", "point0", "=", "center", "+", "i", "*", "xdir", "+", "j", "*", "ydir", "\n", "point1", "=", "center", "+", "(", "i", "+", "1", ")", "*", "xdir", "+", "j", "*", "ydir", "\n", "point2", "=", "center", "+", "(", "i", "+", "1", ")", "*", "xdir", "+", "(", "j", "+", "1", ")", "*", "ydir", "\n", "point3", "=", "center", "+", "(", "i", ")", "*", "xdir", "+", "(", "j", "+", "1", ")", "*", "ydir", "\n", "if", "(", "i", "%", "2", "==", "0", "and", "j", "%", "2", "==", "0", ")", "or", "(", "i", "%", "2", "==", "1", "and", "j", "%", "2", "==", "1", ")", ":", "\n", "                ", "col", "=", "white", "\n", "", "else", ":", "\n", "                ", "col", "=", "black", "\n", "", "vert", "=", "np", ".", "stack", "(", "[", "point0", ",", "point1", ",", "point2", ",", "point3", "]", ")", "\n", "col", "=", "np", ".", "stack", "(", "[", "col", "for", "_", "in", "range", "(", "vert", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "tri", "=", "np", ".", "array", "(", "[", "[", "2", ",", "3", ",", "0", "]", ",", "[", "0", ",", "1", ",", "2", "]", "]", ")", "+", "vert", ".", "shape", "[", "0", "]", "*", "cnt", "\n", "cnt", "+=", "1", "\n", "vertls", ".", "append", "(", "vert", ")", "\n", "trils", ".", "append", "(", "tri", ")", "\n", "colls", ".", "append", "(", "col", ")", "\n", "", "", "vertls", "=", "np", ".", "vstack", "(", "vertls", ")", "\n", "trils", "=", "np", ".", "vstack", "(", "trils", ")", "\n", "colls", "=", "np", ".", "vstack", "(", "colls", ")", "\n", "return", "{", "'vertices'", ":", "vertls", ",", "'faces'", ":", "trils", ",", "'colors'", ":", "colls", ",", "'name'", ":", "'ground'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.get_rotation_from_two_directions": [[131, 141], ["numpy.cross", "cv2.Rodrigues", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.eye", "numpy.linalg.norm", "numpy.arccos", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.Rodrigues"], ["", "def", "get_rotation_from_two_directions", "(", "direc0", ",", "direc1", ")", ":", "\n", "    ", "direc0", "=", "direc0", "/", "np", ".", "linalg", ".", "norm", "(", "direc0", ")", "\n", "direc1", "=", "direc1", "/", "np", ".", "linalg", ".", "norm", "(", "direc1", ")", "\n", "rotdir", "=", "np", ".", "cross", "(", "direc0", ",", "direc1", ")", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "rotdir", ")", "<", "1e-2", ":", "\n", "        ", "return", "np", ".", "eye", "(", "3", ")", "\n", "", "rotdir", "=", "rotdir", "/", "np", ".", "linalg", ".", "norm", "(", "rotdir", ")", "\n", "rotdir", "=", "rotdir", "*", "np", ".", "arccos", "(", "np", ".", "dot", "(", "direc0", ",", "direc1", ")", ")", "\n", "rotmat", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "rotdir", ")", "\n", "return", "rotmat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_plane": [[165, 176], ["PLANE_VERTICES.copy", "vis_utils_o3d13.get_rotation_from_two_directions", "numpy.array().reshape", "numpy.array", "numpy.array", "PLANE_FACES.copy", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.get_rotation_from_two_directions"], ["def", "create_plane", "(", "normal", ",", "center", ",", "dx", "=", "1", ",", "dy", "=", "1", ",", "dz", "=", "0.005", ",", "color", "=", "[", "0.8", ",", "0.8", ",", "0.8", "]", ")", ":", "\n", "    ", "vertices", "=", "PLANE_VERTICES", ".", "copy", "(", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "vertices", "[", ":", ",", "0", "]", "*", "dx", "-", "dx", "/", "2", "\n", "vertices", "[", ":", ",", "1", "]", "=", "vertices", "[", ":", ",", "1", "]", "*", "dy", "-", "dy", "/", "2", "\n", "vertices", "[", ":", ",", "2", "]", "=", "vertices", "[", ":", ",", "2", "]", "*", "dz", "-", "dz", "/", "2", "\n", "# \u6839\u636enormal\u8ba1\u7b97\u65cb\u8f6c", "\n", "rotmat", "=", "get_rotation_from_two_directions", "(", "\n", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", ",", "np", ".", "array", "(", "normal", ")", ")", "\n", "vertices", "=", "vertices", "@", "rotmat", ".", "T", "\n", "vertices", "+=", "np", ".", "array", "(", "center", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "return", "{", "'vertices'", ":", "vertices", ",", "'faces'", ":", "PLANE_FACES", ".", "copy", "(", ")", ",", "'name'", ":", "'plane'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_point": [[177, 179], ["create_mesh", "vis_utils_o3d13.create_point_"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_point_"], ["", "def", "create_point", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "create_mesh", "(", "**", "create_point_", "(", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_line": [[180, 182], ["create_mesh", "vis_utils_o3d13.create_line_"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_line_"], ["", "def", "create_line", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "create_mesh", "(", "**", "create_line_", "(", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_ground": [[183, 186], ["vis_utils_o3d13.create_ground_", "create_mesh"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_ground_", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_mesh"], ["", "def", "create_ground", "(", "**", "kwargs", ")", ":", "\n", "    ", "ground", "=", "create_ground_", "(", "**", "kwargs", ")", "\n", "return", "create_mesh", "(", "**", "ground", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_coord": [[187, 192], ["TriangleMesh.create_coordinate_frame", "TriangleMesh.create_coordinate_frame.scale"], "function", ["None"], ["", "def", "create_coord", "(", "camera", "=", "[", "0", ",", "0", ",", "0", "]", ",", "radius", "=", "1", ",", "scale", "=", "1", ")", ":", "\n", "    ", "camera_frame", "=", "TriangleMesh", ".", "create_coordinate_frame", "(", "\n", "size", "=", "radius", ",", "origin", "=", "camera", ")", "\n", "camera_frame", ".", "scale", "(", "scale", ")", "\n", "return", "camera_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.create_bbox": [[193, 201], ["open3d.geometry.AxisAlignedBoundingBox", "min_bound.copy", "max_bound.copy"], "function", ["None"], ["", "def", "create_bbox", "(", "min_bound", "=", "(", "-", "3.", ",", "-", "3.", ",", "0", ")", ",", "max_bound", "=", "(", "3.", ",", "3.", ",", "2", ")", ",", "flip", "=", "False", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "min_bound_", "=", "min_bound", ".", "copy", "(", ")", "\n", "max_bound_", "=", "max_bound", ".", "copy", "(", ")", "\n", "min_bound", "=", "[", "min_bound_", "[", "0", "]", ",", "-", "max_bound_", "[", "1", "]", ",", "-", "max_bound_", "[", "2", "]", "]", "\n", "max_bound", "=", "[", "max_bound_", "[", "0", "]", ",", "-", "min_bound_", "[", "1", "]", ",", "-", "min_bound_", "[", "2", "]", "]", "\n", "", "bbox", "=", "o3d", ".", "geometry", ".", "AxisAlignedBoundingBox", "(", "min_bound", ",", "max_bound", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.load_cfg": [[205, 213], ["vis_utils_o3d13._load_cfg_from_file"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._load_cfg_from_file"], ["def", "load_cfg", "(", "cfg_file_obj_or_str", ")", ":", "\n", "    ", "\"\"\"Load a cfg. Supports loading from:\n        - A file object backed by a YAML file\n        - A file object backed by a Python source file that exports an attribute\n          \"cfg\" that is either a dict or a CN\n        - A string that can be parsed as valid YAML\n    \"\"\"", "\n", "return", "_load_cfg_from_file", "(", "cfg_file_obj_or_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._merge_a_into_b": [[214, 247], ["a.items", "b.clear", "a.pop", "isinstance", "a.keys", "root.key_is_deprecated", "copy.deepcopy", "vis_utils_o3d13._decode_cfg_value", "vis_utils_o3d13._check_and_coerce_cfg_value_type", "root.key_is_renamed", "vis_utils_o3d13._merge_a_into_b", "root.raise_key_rename_error", "copy.deepcopy", "vis_utils_o3d13._decode_cfg_value", "b.update"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.timer.Timer.clear", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.key_is_deprecated", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._decode_cfg_value", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._check_and_coerce_cfg_value_type", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.key_is_renamed", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._merge_a_into_b", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.raise_key_rename_error", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._decode_cfg_value", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update"], ["", "def", "_merge_a_into_b", "(", "a", ",", "b", ",", "root", ",", "key_list", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "if", "'_no_merge_'", "in", "a", ".", "keys", "(", ")", "and", "a", "[", "'_no_merge_'", "]", ":", "\n", "        ", "b", ".", "clear", "(", ")", "\n", "a", ".", "pop", "(", "'_no_merge_'", ")", "\n", "\n", "", "for", "k", ",", "v_", "in", "a", ".", "items", "(", ")", ":", "\n", "        ", "full_key", "=", "\".\"", ".", "join", "(", "key_list", "+", "[", "k", "]", ")", "\n", "# a must specify keys that are in b", "\n", "if", "k", "not", "in", "b", ":", "\n", "            ", "if", "root", ".", "key_is_deprecated", "(", "full_key", ")", ":", "\n", "                ", "continue", "\n", "", "elif", "root", ".", "key_is_renamed", "(", "full_key", ")", ":", "\n", "                ", "root", ".", "raise_key_rename_error", "(", "full_key", ")", "\n", "", "else", ":", "\n", "                ", "v", "=", "copy", ".", "deepcopy", "(", "v_", ")", "\n", "v", "=", "_decode_cfg_value", "(", "v", ")", "\n", "b", ".", "update", "(", "{", "k", ":", "v", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "v", "=", "copy", ".", "deepcopy", "(", "v_", ")", "\n", "v", "=", "_decode_cfg_value", "(", "v", ")", "\n", "v", "=", "_check_and_coerce_cfg_value_type", "(", "v", ",", "b", "[", "k", "]", ",", "k", ",", "full_key", ")", "\n", "\n", "# Recursively merge dicts", "\n", "", "if", "isinstance", "(", "v", ",", "CN", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "v", ",", "b", "[", "k", "]", ",", "root", ",", "key_list", "+", "[", "k", "]", ")", "\n", "", "except", "BaseException", ":", "\n", "                ", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._decode_cfg_value": [[249, 280], ["isinstance", "vis_utils_o3d13.CN", "isinstance", "ast.literal_eval"], "function", ["None"], ["", "", "", "def", "_decode_cfg_value", "(", "v", ")", ":", "\n", "    ", "\"\"\"Decodes a raw config value (e.g., from a yaml config files or command\n    line argument) into a Python object.\n    \"\"\"", "\n", "# Configs parsed from raw yaml will contain dictionary keys that need to be", "\n", "# converted to CN objects", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "        ", "return", "CN", "(", "v", ")", "\n", "# All remaining processing is only applied to strings", "\n", "", "if", "not", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "        ", "return", "v", "\n", "# Try to interpret `v` as a:", "\n", "#   string, number, tuple, list, dict, boolean, or None", "\n", "", "try", ":", "\n", "        ", "v", "=", "literal_eval", "(", "v", ")", "\n", "# The following two excepts allow v to pass through when it represents a", "\n", "# string.", "\n", "#", "\n", "# Longer explanation:", "\n", "# The type of v is always a string (before calling literal_eval), but", "\n", "# sometimes it *represents* a string and other times a data structure, like", "\n", "# a list. In the case that v represents a string, what we got back from the", "\n", "# yaml parser is 'foo' *without quotes* (so, not '\"foo\"'). literal_eval is", "\n", "# ok with '\"foo\"', but will raise a ValueError if given 'foo'. In other", "\n", "# cases, like paths (v = 'foo/bar' and not v = '\"foo/bar\"'), literal_eval", "\n", "# will raise a SyntaxError.", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "except", "SyntaxError", ":", "\n", "        ", "pass", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._check_and_coerce_cfg_value_type": [[282, 320], ["type", "type", "ValueError", "casts.append", "vis_utils_o3d13._check_and_coerce_cfg_value_type.conditional_cast"], "function", ["None"], ["", "def", "_check_and_coerce_cfg_value_type", "(", "replacement", ",", "original", ",", "key", ",", "full_key", ")", ":", "\n", "    ", "\"\"\"Checks that `replacement`, which is intended to replace `original` is of\n    the right type. The type is correct if it matches exactly or is one of a few\n    cases in which the type can be easily coerced.\n    \"\"\"", "\n", "original_type", "=", "type", "(", "original", ")", "\n", "replacement_type", "=", "type", "(", "replacement", ")", "\n", "\n", "# The types must match (with some exceptions)", "\n", "if", "replacement_type", "==", "original_type", ":", "\n", "        ", "return", "replacement", "\n", "\n", "# Cast replacement from from_type to to_type if the replacement and original", "\n", "# types match from_type and to_type", "\n", "", "def", "conditional_cast", "(", "from_type", ",", "to_type", ")", ":", "\n", "        ", "if", "replacement_type", "==", "from_type", "and", "original_type", "==", "to_type", ":", "\n", "            ", "return", "True", ",", "to_type", "(", "replacement", ")", "\n", "", "else", ":", "\n", "            ", "return", "False", ",", "None", "\n", "\n", "# Conditionally casts", "\n", "# list <-> tuple", "\n", "", "", "casts", "=", "[", "(", "tuple", ",", "list", ")", ",", "(", "list", ",", "tuple", ")", ",", "(", "int", ",", "float", ")", ",", "(", "float", ",", "int", ")", "]", "\n", "# For py2: allow converting from str (bytes) to a unicode string", "\n", "try", ":", "\n", "        ", "casts", ".", "append", "(", "(", "str", ",", "unicode", ")", ")", "# noqa: F821", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "\n", "", "for", "(", "from_type", ",", "to_type", ")", "in", "casts", ":", "\n", "        ", "converted", ",", "converted_value", "=", "conditional_cast", "(", "from_type", ",", "to_type", ")", "\n", "if", "converted", ":", "\n", "            ", "return", "converted_value", "\n", "\n", "", "", "raise", "ValueError", "(", "\n", "\"Type mismatch ({} vs. {}) with values ({} vs. {}) for config \"", "\n", "\"key: {}\"", ".", "format", "(", "\n", "original_type", ",", "replacement_type", ",", "original", ",", "replacement", ",", "full_key", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._load_cfg_from_file": [[323, 334], ["os.path.splitext", "vis_utils_o3d13._load_cfg_from_yaml_str", "file_obj.read", "vis_utils_o3d13._load_cfg_py_source", "Exception", "_YAML_EXTS.union"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._load_cfg_from_yaml_str", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._load_cfg_py_source"], ["", "def", "_load_cfg_from_file", "(", "file_obj", ")", ":", "\n", "    ", "\"\"\"Load a config from a YAML file or a Python source file.\"\"\"", "\n", "_", ",", "file_extension", "=", "os", ".", "path", ".", "splitext", "(", "file_obj", ".", "name", ")", "\n", "if", "file_extension", "in", "_YAML_EXTS", ":", "\n", "        ", "return", "_load_cfg_from_yaml_str", "(", "file_obj", ".", "read", "(", ")", ")", "\n", "", "elif", "file_extension", "in", "_PY_EXTS", ":", "\n", "        ", "return", "_load_cfg_py_source", "(", "file_obj", ".", "name", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\n", "\"Attempt to load from an unsupported file type {}; \"", "\n", "\"only {} are supported\"", ".", "format", "(", "file_obj", ",", "_YAML_EXTS", ".", "union", "(", "_PY_EXTS", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._load_cfg_from_yaml_str": [[337, 341], ["yaml.safe_load", "vis_utils_o3d13.CN"], "function", ["None"], ["", "", "def", "_load_cfg_from_yaml_str", "(", "str_obj", ")", ":", "\n", "    ", "\"\"\"Load a config from a YAML string encoding.\"\"\"", "\n", "cfg_as_dict", "=", "yaml", ".", "safe_load", "(", "str_obj", ")", "\n", "return", "CN", "(", "cfg_as_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._load_cfg_py_source": [[343, 351], ["_load_module_from_file", "type", "vis_utils_o3d13.CN"], "function", ["None"], ["", "def", "_load_cfg_py_source", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config from a Python source file.\"\"\"", "\n", "module", "=", "_load_module_from_file", "(", "\"yacs.config.override\"", ",", "filename", ")", "\n", "VALID_ATTR_TYPES", "=", "{", "dict", ",", "CN", "}", "\n", "if", "type", "(", "module", ".", "cfg", ")", "is", "dict", ":", "\n", "        ", "return", "CN", "(", "module", ".", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "return", "module", ".", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13._valid_type": [[355, 357], ["type", "type"], "function", ["None"], ["def", "_valid_type", "(", "value", ",", "allow_cfg_node", "=", "False", ")", ":", "\n", "    ", "return", "(", "type", "(", "value", ")", "in", "_VALID_TYPES", ")", "or", "(", "allow_cfg_node", "and", "type", "(", "value", ")", "==", "CN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.generate_colorbar": [[723, 735], ["cv2.applyColorMap().squeeze", "random.seed", "random.shuffle", "rgb.tolist.tolist", "numpy.clip", "cv2.applyColorMap", "range", "numpy.arange"], "function", ["None"], ["", "", "def", "generate_colorbar", "(", "N", "=", "20", ",", "cmap", "=", "'jet'", ")", ":", "\n", "    ", "bar", "=", "(", "(", "np", ".", "arange", "(", "N", ")", "/", "(", "N", "-", "1", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "colorbar", "=", "cv2", ".", "applyColorMap", "(", "bar", ",", "cv2", ".", "COLORMAP_JET", ")", ".", "squeeze", "(", ")", "\n", "if", "False", ":", "\n", "        ", "colorbar", "=", "np", ".", "clip", "(", "colorbar", "+", "64", ",", "0", ",", "255", ")", "\n", "", "import", "random", "\n", "random", ".", "seed", "(", "666", ")", "\n", "index", "=", "[", "i", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "random", ".", "shuffle", "(", "index", ")", "\n", "rgb", "=", "colorbar", "[", "index", ",", ":", "]", "\n", "rgb", "=", "rgb", ".", "tolist", "(", ")", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.get_rgb": [[759, 770], ["isinstance", "colors_table.get", "tuple", "int", "len"], "function", ["None"], ["def", "get_rgb", "(", "index", ")", ":", "\n", "    ", "if", "isinstance", "(", "index", ",", "int", ")", ":", "\n", "        ", "if", "index", "==", "-", "1", ":", "\n", "            ", "return", "(", "255", ",", "255", ",", "255", ")", "\n", "", "if", "index", "<", "-", "1", ":", "\n", "            ", "return", "(", "0", ",", "0", ",", "0", ")", "\n", "", "col", "=", "colors_bar_rgb", "[", "index", "%", "len", "(", "colors_bar_rgb", ")", "]", "\n", "", "else", ":", "\n", "        ", "col", "=", "colors_table", ".", "get", "(", "index", ",", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "col", "=", "tuple", "(", "[", "int", "(", "c", "*", "255", ")", "for", "c", "in", "col", "[", ":", ":", "-", "1", "]", "]", ")", "\n", "", "return", "col", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.get_rgb_01": [[771, 774], ["vis_utils_o3d13.get_rgb"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.get_rgb"], ["", "def", "get_rgb_01", "(", "index", ")", ":", "\n", "    ", "col", "=", "get_rgb", "(", "index", ")", "\n", "return", "[", "i", "*", "1.", "/", "255", "for", "i", "in", "col", "[", ":", "3", "]", "]", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.__init__": [[47, 84], ["open3d.visualization.VisualizerWithKeyCallback", "vis_server_py36_o3d9.VisOpen3DSocket.vis.create_window", "vis_server_py36_o3d9.VisOpen3DSocket.load_scene_objects", "visualization.socket_utils.BaseSocket.__init__", "visualization.create_meshes.create_body_model", "vis_server_py36_o3d9.VisOpen3DSocket.init_camera", "open3d.utility.Vector3dVector", "range", "sorted", "vis_server_py36_o3d9.VisOpen3DSocket.set_meshes_zero", "visualization.vis_utils_py36_o3d9.CritRange", "print", "os.makedirs", "numpy.zeros", "vis_server_py36_o3d9.VisOpen3DSocket.add_human", "vis_server_py36_o3d9.VisOpen3DSocket.body_model.get_num_verts"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.load_scene_objects", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_body_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.init_camera", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.set_meshes_zero", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.add_human"], ["    ", "def", "__init__", "(", "self", ",", "host", ",", "port", ",", "cfg", ")", "->", "None", ":", "\n", "# output", "\n", "        ", "self", ".", "write", "=", "cfg", ".", "write", "\n", "self", ".", "out", "=", "cfg", ".", "out", "\n", "self", ".", "cfg", "=", "cfg", "\n", "if", "self", ".", "write", ":", "\n", "            ", "print", "(", "'[Info] capture the screen to {}'", ".", "format", "(", "self", ".", "out", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "out", ",", "exist_ok", "=", "True", ")", "\n", "# scene", "\n", "", "self", ".", "vis", "=", "o3d", ".", "visualization", ".", "VisualizerWithKeyCallback", "(", ")", "\n", "self", ".", "vis", ".", "create_window", "(", "window_name", "=", "'Visualizer'", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ")", "\n", "self", ".", "load_scene_objects", "(", "cfg", ")", "\n", "# create vis => update => super() init", "\n", "super", "(", ")", ".", "__init__", "(", "host", ",", "port", ",", "debug", "=", "cfg", ".", "debug", ")", "\n", "self", ".", "block", "=", "cfg", ".", "block", "\n", "\n", "self", ".", "body_model", "=", "create_body_model", "(", ")", "\n", "self", ".", "max_human", "=", "cfg", ".", "max_human", "\n", "self", ".", "track", "=", "cfg", ".", "track", "\n", "self", ".", "filter", "=", "cfg", ".", "filter", "\n", "self", ".", "camera_pose", "=", "cfg", ".", "camera", ".", "camera_pose", "\n", "self", ".", "init_camera", "(", "cfg", ".", "camera", ".", "camera_pose", ")", "\n", "self", ".", "zero_vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "zeros", "(", "(", "self", ".", "body_model", ".", "get_num_verts", "(", ")", ",", "3", ")", ")", ")", "\n", "\n", "self", ".", "filter_dict", ",", "self", ".", "meshes", "=", "{", "}", ",", "[", "]", "\n", "self", ".", "verts_available_ids", ",", "self", ".", "current_mesh_num", "=", "[", "]", ",", "0", "\n", "self", ".", "pid_verts_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "max_human", ")", ":", "\n", "            ", "self", ".", "add_human", "(", ")", "\n", "", "self", ".", "verts_available_ids", "=", "sorted", "(", "self", ".", "verts_available_ids", ",", "reverse", "=", "True", ")", "\n", "self", ".", "set_meshes_zero", "(", ")", "\n", "self", ".", "verts_change_cacher", "=", "[", "]", "\n", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "previous", "=", "{", "}", "\n", "self", ".", "critrange", "=", "CritRange", "(", "**", "cfg", ".", "range", ")", "\n", "self", ".", "new_frames", "=", "cfg", ".", "new_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.load_scene_objects": [[85, 90], ["cfg.scene.items", "vis_server_py36_o3d9.load_object", "vis_server_py36_o3d9.VisOpen3DSocket.vis.add_geometry"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.load_object"], ["", "def", "load_scene_objects", "(", "self", ",", "cfg", ")", ":", "\n", "# load the scene", "\n", "        ", "for", "key", ",", "mesh_args", "in", "cfg", ".", "scene", ".", "items", "(", ")", ":", "\n", "            ", "mesh", "=", "load_object", "(", "key", ",", "mesh_args", ")", "\n", "self", ".", "vis", ".", "add_geometry", "(", "mesh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.set_meshes_zero": [[91, 94], ["None"], "methods", ["None"], ["", "", "def", "set_meshes_zero", "(", "self", ")", ":", "\n", "        ", "for", "mesh", "in", "self", ".", "meshes", ":", "\n", "            ", "mesh", ".", "vertices", "=", "self", ".", "zero_vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.add_human": [[95, 104], ["vis_server_py36_o3d9.VisOpen3DSocket.verts_available_ids.append", "visualization.create_meshes.create_body_mesh", "vis_server_py36_o3d9.VisOpen3DSocket.meshes.append", "vis_server_py36_o3d9.VisOpen3DSocket.vis.add_geometry", "vis_server_py36_o3d9.VisOpen3DSocket.init_camera"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.create_meshes.create_body_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.init_camera"], ["", "", "def", "add_human", "(", "self", ")", ":", "\n", "        ", "self", ".", "verts_available_ids", ".", "append", "(", "self", ".", "current_mesh_num", ")", "\n", "self", ".", "current_mesh_num", "+=", "1", "\n", "mesh", "=", "create_body_mesh", "(", ")", "\n", "\n", "self", ".", "meshes", ".", "append", "(", "mesh", ")", "\n", "self", ".", "vis", ".", "add_geometry", "(", "mesh", ")", "\n", "self", ".", "init_camera", "(", "self", ".", "camera_pose", ")", "\n", "self", ".", "meshes", "[", "-", "1", "]", ".", "vertices", "=", "self", ".", "zero_vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.set_camera": [[105, 123], ["numpy.array", "numpy.array", "numpy.deg2rad", "numpy.deg2rad", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "set_camera", "(", "cfg", ",", "camera_pose", ")", ":", "\n", "        ", "theta", ",", "phi", "=", "np", ".", "deg2rad", "(", "-", "(", "cfg", ".", "camera", ".", "theta", "+", "90", ")", ")", ",", "np", ".", "deg2rad", "(", "cfg", ".", "camera", ".", "phi", ")", "\n", "theta", "=", "theta", "+", "np", ".", "pi", "\n", "st", ",", "ct", "=", "np", ".", "sin", "(", "theta", ")", ",", "np", ".", "cos", "(", "theta", ")", "\n", "sp", ",", "cp", "=", "np", ".", "sin", "(", "phi", ")", ",", "np", ".", "cos", "(", "phi", ")", "\n", "rot_x", "=", "np", ".", "array", "(", "[", "\n", "[", "1.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "ct", ",", "-", "st", "]", ",", "\n", "[", "0", ",", "st", ",", "ct", "]", "\n", "]", ")", "\n", "rot_z", "=", "np", ".", "array", "(", "[", "\n", "[", "cp", ",", "-", "sp", ",", "0", "]", ",", "\n", "[", "sp", ",", "cp", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", "]", "\n", "]", ")", "\n", "camera_pose", "[", ":", "3", ",", ":", "3", "]", "=", "rot_x", "@", "rot_z", "\n", "return", "camera_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.init_camera": [[124, 130], ["vis_server_py36_o3d9.VisOpen3DSocket.vis.get_view_control", "vis_server_py36_o3d9.VisOpen3DSocket.convert_to_pinhole_camera_parameters", "numpy.array", "vis_server_py36_o3d9.VisOpen3DSocket.convert_from_pinhole_camera_parameters"], "methods", ["None"], ["", "def", "init_camera", "(", "self", ",", "camera_pose", ")", ":", "\n", "        ", "ctr", "=", "self", ".", "vis", ".", "get_view_control", "(", ")", "\n", "init_param", "=", "ctr", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "# init_param.intrinsic.set_intrinsics(init_param.intrinsic.width, init_param.intrinsic.height, fx, fy, cx, cy)", "\n", "init_param", ".", "extrinsic", "=", "np", ".", "array", "(", "camera_pose", ")", "\n", "ctr", ".", "convert_from_pinhole_camera_parameters", "(", "init_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.get_camera": [[131, 135], ["vis_server_py36_o3d9.VisOpen3DSocket.vis.get_view_control", "vis_server_py36_o3d9.VisOpen3DSocket.convert_to_pinhole_camera_parameters", "numpy.array"], "methods", ["None"], ["", "def", "get_camera", "(", "self", ")", ":", "\n", "        ", "ctr", "=", "self", ".", "vis", ".", "get_view_control", "(", ")", "\n", "init_param", "=", "ctr", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "return", "np", ".", "array", "(", "init_param", ".", "extrinsic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.main": [[136, 186], ["isinstance", "print", "visualization.socket_utils.log", "json.loads", "data.keys", "visualization.vis_utils_py36_o3d9.Timer", "print", "print", "enumerate", "numpy.unique", "visualization.vis_utils_py36_o3d9.Timer", "vertices_dict.items", "numpy.array", "merge_params.append", "len", "vis_server_py36_o3d9.merge_params", "[].cpu().numpy", "enumerate", "numpy.array", "vis_server_py36_o3d9.VisOpen3DSocket.verts_available_ids.pop", "utils.temporal_optimization.OneEuroFilter", "visualization.vis_utils_py36_o3d9.convert_verts_to_cam_space", "vis_server_py36_o3d9.VisOpen3DSocket.filter_dict[].process", "open3d.utility.Vector3dVector", "verts_id_used.append", "print", "vis_server_py36_o3d9.VisOpen3DSocket.verts_available_ids.append", "len", "vis_server_py36_o3d9.VisOpen3DSocket.add_human", "[].cpu", "vis_server_py36_o3d9.VisOpen3DSocket.body_model"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.merge_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.convert_verts_to_cam_space", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.OneEuroFilter.process", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.add_human"], ["", "def", "main", "(", "self", ",", "datas", ")", ":", "\n", "        ", "if", "self", ".", "debug", ":", "log", "(", "'[Info] Load data {}'", ".", "format", "(", "self", ".", "count", ")", ")", "\n", "if", "isinstance", "(", "datas", ",", "str", ")", ":", "\n", "            ", "datas", "=", "json", ".", "loads", "(", "datas", ")", "\n", "", "for", "data", "in", "datas", ":", "\n", "            ", "for", "key", "in", "data", ".", "keys", "(", ")", ":", "\n", "                ", "if", "key", "==", "'id'", ":", "\n", "                    ", "continue", "\n", "", "data", "[", "key", "]", "=", "np", ".", "array", "(", "data", "[", "key", "]", ")", "\n", "\n", "", "", "with", "Timer", "(", "'forward'", ")", ":", "\n", "            ", "params", "=", "[", "]", "\n", "pid_showup", "=", "[", "data", "[", "'id'", "]", "for", "data", "in", "datas", "]", "\n", "verts_id_used", "=", "[", "]", "\n", "vertices_dict", "=", "{", "}", "\n", "print", "(", "'recieving pid_showup: {}'", ".", "format", "(", "pid_showup", ")", ")", "\n", "print", "(", "'verts_change_cacher: '", ",", "self", ".", "verts_change_cacher", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "datas", ")", ":", "\n", "                ", "pid", "=", "data", "[", "'id'", "]", "\n", "if", "pid", "not", "in", "self", ".", "pid_verts_dict", ":", "\n", "                    ", "if", "len", "(", "self", ".", "verts_available_ids", ")", "==", "0", ":", "\n", "                        ", "self", ".", "add_human", "(", ")", "\n", "", "self", ".", "pid_verts_dict", "[", "pid", "]", "=", "self", ".", "verts_available_ids", ".", "pop", "(", ")", "\n", "", "if", "pid", "not", "in", "self", ".", "filter_dict", ":", "\n", "                    ", "self", ".", "filter_dict", "[", "pid", "]", "=", "OneEuroFilter", "(", "3.0", ",", "0.0", ")", "\n", "\n", "", "params", ".", "append", "(", "data", ")", "\n", "", "if", "len", "(", "params", ")", ">", "0", ":", "\n", "                ", "params", "=", "merge_params", "(", "params", ")", "\n", "vertices", "=", "self", ".", "body_model", "(", "**", "params", ")", "[", "'verts'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "ind", ",", "pid", "in", "enumerate", "(", "pid_showup", ")", ":", "\n", "                    ", "verts_processed", "=", "convert_verts_to_cam_space", "(", "vertices", "[", "ind", "]", ")", "\n", "verts_processed", "=", "self", ".", "filter_dict", "[", "pid", "]", ".", "process", "(", "verts_processed", ")", "\n", "vertices_dict", "[", "self", ".", "pid_verts_dict", "[", "pid", "]", "]", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "verts_processed", ")", "\n", "verts_id_used", ".", "append", "(", "self", ".", "pid_verts_dict", "[", "pid", "]", ")", "\n", "\n", "", "", "pid_used_all", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "verts_id_used", "+", "self", ".", "verts_change_cacher", ")", ")", "\n", "for", "ind", "in", "pid_used_all", ":", "\n", "                ", "if", "ind", "not", "in", "verts_id_used", ":", "\n", "                    ", "print", "(", "'set mesh {} to zeros'", ".", "format", "(", "ind", ")", ")", "\n", "self", ".", "meshes", "[", "ind", "]", ".", "vertices", "=", "self", ".", "zero_vertices", "\n", "self", ".", "verts_available_ids", ".", "append", "(", "ind", ")", "\n", "\n", "", "", "", "print", "(", "'pid_used_all'", ",", "pid_used_all", ")", "\n", "# Open3D will lock the thread here", "\n", "with", "Timer", "(", "'set vertices'", ")", ":", "\n", "            ", "for", "mesh_id", ",", "verts", "in", "vertices_dict", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "meshes", "[", "mesh_id", "]", ".", "vertices", "=", "verts", "\n", "\n", "", "", "self", ".", "verts_change_cacher", "=", "verts_id_used", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.o3dcallback": [[187, 192], ["vis_server_py36_o3d9.VisOpen3DSocket.set_camera", "vis_server_py36_o3d9.VisOpen3DSocket.init_camera", "vis_server_py36_o3d9.VisOpen3DSocket.get_camera"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.set_camera", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.init_camera", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.get_camera"], ["", "def", "o3dcallback", "(", "self", ")", ":", "\n", "        ", "if", "rotate", ":", "\n", "            ", "self", ".", "cfg", ".", "camera", ".", "phi", "+=", "np", ".", "pi", "/", "10", "\n", "camera_pose", "=", "self", ".", "set_camera", "(", "self", ".", "cfg", ",", "self", ".", "get_camera", "(", ")", ")", "\n", "self", ".", "init_camera", "(", "camera_pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.update": [[193, 220], ["vis_server_py36_o3d9.VisOpen3DSocket.previous.clear", "vis_server_py36_o3d9.VisOpen3DSocket.queue.empty", "vis_server_py36_o3d9.VisOpen3DSocket.queue.get", "vis_server_py36_o3d9.VisOpen3DSocket.main", "visualization.socket_utils.log", "visualization.vis_utils_py36_o3d9.Timer", "vis_server_py36_o3d9.VisOpen3DSocket.o3dcallback", "vis_server_py36_o3d9.VisOpen3DSocket.vis.poll_events", "vis_server_py36_o3d9.VisOpen3DSocket.vis.update_renderer", "os.path.join", "visualization.vis_utils_py36_o3d9.Timer", "vis_server_py36_o3d9.VisOpen3DSocket.o3dcallback", "vis_server_py36_o3d9.VisOpen3DSocket.vis.poll_events", "vis_server_py36_o3d9.VisOpen3DSocket.vis.update_renderer", "vis_server_py36_o3d9.VisOpen3DSocket.queue.qsize", "vis_server_py36_o3d9.VisOpen3DSocket.queue.get", "mesh.compute_triangle_normals", "vis_server_py36_o3d9.VisOpen3DSocket.vis.update_geometry", "visualization.vis_utils_py36_o3d9.Timer", "vis_server_py36_o3d9.VisOpen3DSocket.vis.capture_screen_image", "str", "vis_server_py36_o3d9.VisOpen3DSocket.queue.qsize"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.timer.Timer.clear", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.main", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.o3dcallback", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.VisOpen3DSocket.o3dcallback"], ["", "", "def", "update", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "disconnect", "and", "not", "self", ".", "block", ":", "\n", "            ", "self", ".", "previous", ".", "clear", "(", ")", "\n", "", "if", "not", "self", ".", "queue", ".", "empty", "(", ")", ":", "\n", "            ", "if", "self", ".", "debug", ":", "log", "(", "'Update'", "+", "str", "(", "self", ".", "queue", ".", "qsize", "(", ")", ")", ")", "\n", "datas", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "if", "not", "self", ".", "block", ":", "\n", "                ", "while", "self", ".", "queue", ".", "qsize", "(", ")", ">", "0", ":", "\n", "                    ", "datas", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "", "", "self", ".", "main", "(", "datas", ")", "\n", "with", "Timer", "(", "'update geometry'", ")", ":", "\n", "                ", "for", "mesh", "in", "self", ".", "meshes", ":", "\n", "                    ", "mesh", ".", "compute_triangle_normals", "(", ")", "\n", "self", ".", "vis", ".", "update_geometry", "(", "mesh", ")", "\n", "", "self", ".", "o3dcallback", "(", ")", "\n", "self", ".", "vis", ".", "poll_events", "(", ")", "\n", "self", ".", "vis", ".", "update_renderer", "(", ")", "\n", "", "if", "self", ".", "write", ":", "\n", "                ", "outname", "=", "join", "(", "self", ".", "out", ",", "'{:06d}.jpg'", ".", "format", "(", "self", ".", "count", ")", ")", "\n", "with", "Timer", "(", "'capture'", ")", ":", "\n", "                    ", "self", ".", "vis", ".", "capture_screen_image", "(", "outname", ")", "\n", "", "", "self", ".", "count", "+=", "1", "\n", "", "else", ":", "\n", "            ", "with", "Timer", "(", "'update renderer'", ",", "True", ")", ":", "\n", "                ", "self", ".", "o3dcallback", "(", ")", "\n", "self", ".", "vis", ".", "poll_events", "(", ")", "\n", "self", ".", "vis", ".", "update_renderer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.load_object": [[25, 31], ["importlib.import_module", "module_name.split", "getattr", "module_name.split"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["def", "load_object", "(", "module_name", ",", "module_args", ")", ":", "\n", "    ", "module_path", "=", "'.'", ".", "join", "(", "module_name", ".", "split", "(", "'.'", ")", "[", ":", "-", "1", "]", ")", "\n", "module", "=", "importlib", ".", "import_module", "(", "module_path", ")", "\n", "name", "=", "module_name", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "obj", "=", "getattr", "(", "module", ",", "name", ")", "(", "**", "module_args", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.merge_params": [[32, 39], ["isinstance", "len", "torch.from_numpy().float", "torch.from_numpy", "numpy.concatenate"], "function", ["None"], ["", "def", "merge_params", "(", "params", ")", ":", "\n", "    ", "params_batch", "=", "{", "}", "\n", "for", "key", "in", "params", "[", "0", "]", ":", "\n", "        ", "if", "isinstance", "(", "params", "[", "0", "]", "[", "key", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "len", "(", "params", "[", "0", "]", "[", "key", "]", ".", "shape", ")", ">", "0", ":", "\n", "                ", "params_batch", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "[", "param", "[", "key", "]", "for", "param", "in", "params", "]", ",", "0", ")", ")", ".", "float", "(", ")", "\n", "", "", "", "return", "params_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_server_py36_o3d9.o3d_callback_rotate": [[41, 45], ["None"], "function", ["None"], ["def", "o3d_callback_rotate", "(", "vis", "=", "None", ")", ":", "\n", "    ", "global", "rotate", "\n", "rotate", "=", "not", "rotate", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_regressor.SMPLR.__init__": [[10, 18], ["torch.Module.__init__", "os.path.join", "smpl.SMPL", "smpl.SMPL", "smpl.SMPL", "config.args", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ",", "use_gender", "=", "False", ")", ":", "\n", "        ", "super", "(", "SMPLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "model_dir", ",", "'parameters'", ",", "'smpl'", ")", "\n", "self", ".", "smpls", "=", "{", "}", "\n", "self", ".", "smpls", "[", "'n'", "]", "=", "SMPL", "(", "args", "(", ")", ".", "smpl_model_path", ",", "model_type", "=", "'smpl'", ")", "\n", "if", "use_gender", ":", "\n", "            ", "self", ".", "smpls", "[", "'f'", "]", "=", "SMPL", "(", "os", ".", "path", ".", "join", "(", "config", ".", "smpl_model_dir", ",", "'SMPL_FEMALE.pth'", ")", ")", "\n", "self", ".", "smpls", "[", "'m'", "]", "=", "SMPL", "(", "os", ".", "path", ".", "join", "(", "config", ".", "smpl_model_dir", ",", "'SMPL_MALE.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_regressor.SMPLR.forward": [[19, 27], ["isinstance", "len", "verts.numpy", "joints54_17[].numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "pose.unsqueeze", "betas.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "pose", ",", "betas", ",", "gender", "=", "'n'", ")", ":", "\n", "        ", "if", "isinstance", "(", "pose", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "pose", ",", "betas", "=", "torch", ".", "from_numpy", "(", "pose", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "betas", ")", ".", "float", "(", ")", "\n", "", "if", "len", "(", "pose", ".", "shape", ")", "==", "1", ":", "\n", "            ", "pose", ",", "betas", "=", "pose", ".", "unsqueeze", "(", "0", ")", ",", "betas", ".", "unsqueeze", "(", "0", ")", "\n", "", "verts", ",", "joints54_17", "=", "self", ".", "smpls", "[", "gender", "]", "(", "poses", "=", "pose", ",", "betas", "=", "betas", ")", "\n", "\n", "return", "verts", ".", "numpy", "(", ")", ",", "joints54_17", "[", ":", ",", ":", "54", "]", ".", "numpy", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper_relative.SMPLWrapper.__init__": [[15, 25], ["torch.Module.__init__", "logging.info", "smpl_family.smpla.SMPLA_parser", "numpy.array().sum", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "config.args", "config.args", "config.args", "config.args", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "config.args", "config.args", "constants.joint_mapping", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SMPLWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "logging", ".", "info", "(", "'Building SMPL family for relative learning!!'", ")", "\n", "self", ".", "smpl_model", "=", "SMPLA_parser", "(", "args", "(", ")", ".", "smpla_model_path", ",", "args", "(", ")", ".", "smil_model_path", ",", "baby_thresh", "=", "args", "(", ")", ".", "baby_threshold", ")", "\n", "\n", "self", ".", "part_name", "=", "[", "'cam'", ",", "'global_orient'", ",", "'body_pose'", ",", "'betas'", "]", "\n", "self", ".", "part_idx", "=", "[", "args", "(", ")", ".", "cam_dim", ",", "args", "(", ")", ".", "rot_dim", ",", "(", "args", "(", ")", ".", "smpl_joint_num", "-", "1", ")", "*", "args", "(", ")", ".", "rot_dim", ",", "11", "]", "\n", "self", ".", "params_num", "=", "np", ".", "array", "(", "self", ".", "part_idx", ")", ".", "sum", "(", ")", "\n", "self", ".", "global_orient_nocam", "=", "torch", ".", "from_numpy", "(", "constants", ".", "global_orient_nocam", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "joint_mapper_op25", "=", "torch", ".", "from_numpy", "(", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_ALL_54", ",", "constants", ".", "OpenPose_25", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper_relative.SMPLWrapper.forward": [[26, 37], ["smpl_wrapper_relative.SMPLWrapper.pack_params_dict", "smpl_wrapper_relative.SMPLWrapper.process_betas", "smpl_wrapper_relative.SMPLWrapper.smpl_model", "outputs.update", "outputs.update", "utils.projection.vertices_kp3d_projection", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.pack_params_dict", "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper_relative.SMPLWrapper.process_betas", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.vertices_kp3d_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "meta_data", ")", ":", "\n", "        ", "params_dict", "=", "self", ".", "pack_params_dict", "(", "outputs", "[", "'params_pred'", "]", ")", "\n", "\n", "params_dict", "[", "'betas'", "]", ",", "cls_dict", "=", "self", ".", "process_betas", "(", "params_dict", "[", "'betas'", "]", ")", "\n", "\n", "vertices", ",", "joints54_17", "=", "self", ".", "smpl_model", "(", "betas", "=", "params_dict", "[", "'betas'", "]", ",", "poses", "=", "params_dict", "[", "'poses'", "]", ")", "#, root_align=args().smpl_mesh_root_align", "\n", "outputs", ".", "update", "(", "{", "'params'", ":", "params_dict", ",", "'verts'", ":", "vertices", ",", "'j3d'", ":", "joints54_17", "[", ":", ",", ":", "54", "]", ",", "'joints_h36m17'", ":", "joints54_17", "[", ":", ",", "54", ":", "]", ",", "**", "cls_dict", "}", ")", "\n", "\n", "outputs", ".", "update", "(", "vertices_kp3d_projection", "(", "outputs", "[", "'j3d'", "]", ",", "outputs", "[", "'params'", "]", "[", "'cam'", "]", ",", "joints_h36m17_preds", "=", "outputs", "[", "'joints_h36m17'", "]", ",", "input2orgimg_offsets", "=", "meta_data", "[", "'offsets'", "]", ",", "presp", "=", "args", "(", ")", ".", "perspective_proj", ",", "vertices", "=", "outputs", "[", "'verts'", "]", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper_relative.SMPLWrapper.add_template_mesh_pose": [[38, 42], ["smpl_wrapper_relative.SMPLWrapper.template_mesh.to().repeat", "smpl_wrapper_relative.SMPLWrapper.template_joint.to().repeat", "len", "len", "smpl_wrapper_relative.SMPLWrapper.template_mesh.to", "smpl_wrapper_relative.SMPLWrapper.template_joint.to"], "methods", ["None"], ["", "def", "add_template_mesh_pose", "(", "self", ",", "params", ")", ":", "\n", "        ", "template_mesh", "=", "self", ".", "template_mesh", ".", "to", "(", "params", "[", "'poses'", "]", ".", "device", ")", ".", "repeat", "(", "len", "(", "params", "[", "'poses'", "]", ")", ",", "1", ",", "1", ")", "\n", "template_joint", "=", "self", ".", "template_joint", ".", "to", "(", "params", "[", "'poses'", "]", ".", "device", ")", ".", "repeat", "(", "len", "(", "params", "[", "'poses'", "]", ")", ",", "1", ",", "1", ")", "\n", "return", "{", "'verts'", ":", "template_mesh", ",", "'j3d'", ":", "template_joint", ",", "'joints_smpl24'", ":", "template_joint", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper_relative.SMPLWrapper.pack_params_dict": [[43, 58], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip", "idx_list.append", "params_pred[].contiguous", "utils.rot_6D.rot6D_to_angular", "utils.rot_6D.rot6D_to_angular", "config.args", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "pack_params_dict", "(", "self", ",", "params_pred", ")", ":", "\n", "        ", "idx_list", ",", "params_dict", "=", "[", "0", "]", ",", "{", "}", "\n", "for", "i", ",", "(", "idx", ",", "name", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "part_idx", ",", "self", ".", "part_name", ")", ")", ":", "\n", "            ", "idx_list", ".", "append", "(", "idx_list", "[", "i", "]", "+", "idx", ")", "\n", "params_dict", "[", "name", "]", "=", "params_pred", "[", ":", ",", "idx_list", "[", "i", "]", ":", "idx_list", "[", "i", "+", "1", "]", "]", ".", "contiguous", "(", ")", "\n", "", "if", "args", "(", ")", ".", "Rot_type", "==", "'6D'", ":", "\n", "            ", "params_dict", "[", "'body_pose'", "]", "=", "rot6D_to_angular", "(", "params_dict", "[", "'body_pose'", "]", ")", "\n", "params_dict", "[", "'global_orient'", "]", "=", "rot6D_to_angular", "(", "params_dict", "[", "'global_orient'", "]", ")", "\n", "", "N", "=", "params_dict", "[", "'body_pose'", "]", ".", "shape", "[", "0", "]", "\n", "params_dict", "[", "'body_pose'", "]", "=", "torch", ".", "cat", "(", "[", "params_dict", "[", "'body_pose'", "]", ",", "torch", ".", "zeros", "(", "\n", "N", ",", "6", ")", ".", "to", "(", "params_dict", "[", "'body_pose'", "]", ".", "device", ")", "]", ",", "1", ")", "\n", "params_dict", "[", "'poses'", "]", "=", "torch", ".", "cat", "(", "\n", "[", "params_dict", "[", "'global_orient'", "]", ",", "params_dict", "[", "'body_pose'", "]", "]", ",", "1", ")", "\n", "\n", "return", "params_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper_relative.SMPLWrapper.process_betas": [[59, 66], ["smpl_wrapper_relative.parse_age_cls_results"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper_relative.parse_age_cls_results"], ["", "def", "process_betas", "(", "self", ",", "betas_pred", ")", ":", "\n", "        ", "smpl_betas", "=", "betas_pred", "[", ":", ",", ":", "10", "]", "\n", "kid_offsets", "=", "betas_pred", "[", ":", ",", "10", "]", "\n", "Age_preds", "=", "parse_age_cls_results", "(", "kid_offsets", ")", "\n", "\n", "cls_dict", "=", "{", "'Age_preds'", ":", "Age_preds", ",", "'kid_offsets_pred'", ":", "kid_offsets", "}", "\n", "return", "betas_pred", ",", "cls_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper_relative.parse_age_cls_results": [[67, 74], ["torch.ones_like().long", "torch.ones_like().long", "torch.ones_like().long", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "", "def", "parse_age_cls_results", "(", "age_probs", ")", ":", "\n", "    ", "age_preds", "=", "torch", ".", "ones_like", "(", "age_probs", ")", ".", "long", "(", ")", "*", "-", "1", "\n", "age_preds", "[", "(", "age_probs", "<=", "constants", ".", "age_threshold", "[", "'adult'", "]", "[", "2", "]", ")", "&", "(", "age_probs", ">", "constants", ".", "age_threshold", "[", "'adult'", "]", "[", "0", "]", ")", "]", "=", "0", "\n", "age_preds", "[", "(", "age_probs", "<=", "constants", ".", "age_threshold", "[", "'teen'", "]", "[", "2", "]", ")", "&", "(", "age_probs", ">", "constants", ".", "age_threshold", "[", "'teen'", "]", "[", "0", "]", ")", "]", "=", "1", "\n", "age_preds", "[", "(", "age_probs", "<=", "constants", ".", "age_threshold", "[", "'kid'", "]", "[", "2", "]", ")", "&", "(", "age_probs", ">", "constants", ".", "age_threshold", "[", "'kid'", "]", "[", "0", "]", ")", "]", "=", "2", "\n", "age_preds", "[", "(", "age_probs", "<=", "constants", ".", "age_threshold", "[", "'baby'", "]", "[", "2", "]", ")", "&", "(", "age_probs", ">", "constants", ".", "age_threshold", "[", "'baby'", "]", "[", "0", "]", ")", "]", "=", "3", "\n", "return", "age_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper_relative.merge_smpl_outputs": [[76, 84], ["torch.cat", "torch.cat", "torch.cat", "list", "len", "results.keys", "[].keys", "torch.cat", "torch.cat", "torch.cat", "torch.where", "torch.where", "torch.where"], "function", ["None"], ["", "def", "merge_smpl_outputs", "(", "results_list", ")", ":", "\n", "    ", "if", "len", "(", "results_list", ")", "==", "1", ":", "\n", "        ", "return", "results_list", "[", "0", "]", "[", "0", "]", "\n", "", "results", "=", "{", "k", ":", "None", "for", "k", "in", "results_list", "[", "0", "]", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "map_inds", "=", "torch", ".", "cat", "(", "[", "torch", ".", "where", "(", "mask", ")", "[", "0", "]", "for", "_", ",", "mask", "in", "results_list", "]", ",", "0", ")", "\n", "for", "key", "in", "list", "(", "results", ".", "keys", "(", ")", ")", ":", "\n", "        ", "results", "[", "key", "]", "=", "torch", ".", "cat", "(", "[", "result", "[", "key", "]", "for", "result", ",", "_", "in", "results_list", "]", ",", "0", ")", "[", "map_inds", "]", "\n", "", "return", "results", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpla.SMPLA_parser.__init__": [[6, 11], ["torch.Module.__init__", "smpl_family.smpl.SMPL", "smpl_family.smpl.SMPL"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "smpla_path", ",", "smil_path", ",", "baby_thresh", "=", "0.8", ")", ":", "\n", "        ", "super", "(", "SMPLA_parser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smil_model", "=", "SMPL", "(", "smil_path", ",", "model_type", "=", "'smpl'", ")", "\n", "self", ".", "smpla_model", "=", "SMPL", "(", "smpla_path", ",", "model_type", "=", "'smpla'", ")", "\n", "self", ".", "baby_thresh", "=", "baby_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpla.SMPLA_parser.forward": [[12, 28], ["baby_mask.sum", "smpla.SMPLA_parser.smil_model", "smpla.SMPLA_parser.smpla_model", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "adult_mask.sum", "smpla.SMPLA_parser.smpla_model", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "forward", "(", "self", ",", "betas", "=", "None", ",", "poses", "=", "None", ",", "root_align", "=", "True", ")", ":", "\n", "        ", "baby_mask", "=", "betas", "[", ":", ",", "10", "]", ">", "self", ".", "baby_thresh", "\n", "if", "baby_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "adult_mask", "=", "~", "baby_mask", "\n", "verts", ",", "joints", "=", "torch", ".", "zeros", "(", "len", "(", "poses", ")", ",", "6890", ",", "3", ",", "device", "=", "poses", ".", "device", ",", "dtype", "=", "poses", ".", "dtype", ")", ",", "torch", ".", "zeros", "(", "len", "(", "poses", ")", ",", "54", "+", "17", ",", "3", ",", "device", "=", "poses", ".", "device", ",", "dtype", "=", "poses", ".", "dtype", ")", "\n", "\n", "# SMIL beta - 10 dims, only need the estimated betas, kid_offsets are not used", "\n", "verts", "[", "baby_mask", "]", ",", "joints", "[", "baby_mask", "]", "=", "self", ".", "smil_model", "(", "betas", "=", "betas", "[", "baby_mask", ",", ":", "10", "]", ",", "poses", "=", "poses", "[", "baby_mask", "]", ",", "root_align", "=", "root_align", ")", "\n", "\n", "# SMPLA beta - 11 dims, the estimated betas (10) + kid_offsets (1)", "\n", "if", "adult_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "verts", "[", "adult_mask", "]", ",", "joints", "[", "adult_mask", "]", "=", "self", ".", "smpla_model", "(", "betas", "=", "betas", "[", "adult_mask", ",", ":", "11", "]", ",", "poses", "=", "poses", "[", "adult_mask", "]", ",", "root_align", "=", "root_align", ")", "\n", "", "", "else", ":", "\n", "            ", "verts", ",", "joints", "=", "self", ".", "smpla_model", "(", "betas", "=", "betas", "[", ":", ",", ":", "11", "]", ",", "poses", "=", "poses", ",", "root_align", "=", "root_align", ")", "\n", "\n", "", "return", "verts", ",", "joints", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper.SMPLWrapper.__init__": [[14, 30], ["torch.Module.__init__", "smpl_family.smpl.SMPL", "numpy.array().sum", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "config.args", "config.args", "config.args", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "config.args", "constants.joint_mapping", "constants.joint_mapping", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SMPLWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.smpl_model = smpl_model.create(args().smpl_model_path, J_reg_extra9_path=args().smpl_J_reg_extra_path, J_reg_h36m17_path=args().smpl_J_reg_h37m_path, \\", "\n", "#    batch_size=args().batch_size,model_type='smpl', gender='neutral', use_face_contour=False, ext='npz',flat_hand_mean=True, use_pca=False).cuda()", "\n", "self", ".", "smpl_model", "=", "SMPL", "(", "args", "(", ")", ".", "smpl_model_path", ",", "model_type", "=", "'smpl'", ")", "\n", "self", ".", "part_name", "=", "[", "'cam'", ",", "'global_orient'", ",", "'body_pose'", ",", "'betas'", "]", "\n", "self", ".", "part_idx", "=", "[", "args", "(", ")", ".", "cam_dim", ",", "args", "(", ")", ".", "rot_dim", ",", "(", "args", "(", ")", ".", "smpl_joint_num", "-", "1", ")", "*", "args", "(", ")", ".", "rot_dim", ",", "10", "]", "\n", "\n", "self", ".", "unused_part_name", "=", "[", "'left_hand_pose'", ",", "'right_hand_pose'", ",", "'jaw_pose'", ",", "'leye_pose'", ",", "'reye_pose'", ",", "'expression'", "]", "\n", "self", ".", "unused_part_idx", "=", "[", "15", ",", "15", ",", "3", ",", "3", ",", "3", ",", "10", "]", "\n", "\n", "self", ".", "kps_num", "=", "25", "# + 21*2", "\n", "self", ".", "params_num", "=", "np", ".", "array", "(", "self", ".", "part_idx", ")", ".", "sum", "(", ")", "\n", "self", ".", "global_orient_nocam", "=", "torch", ".", "from_numpy", "(", "constants", ".", "global_orient_nocam", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "joint_mapper_op25", "=", "torch", ".", "from_numpy", "(", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_ALL_54", ",", "constants", ".", "OpenPose_25", ")", ")", ".", "long", "(", ")", "\n", "self", ".", "joint_mapper_op25", "=", "torch", ".", "from_numpy", "(", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_ALL_54", ",", "constants", ".", "OpenPose_25", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl_wrapper.SMPLWrapper.forward": [[31, 52], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "smpl_wrapper.SMPLWrapper.smpl_model", "outputs.update", "outputs.update", "zip", "idx_list.append", "[].contiguous", "utils.rot_6D.rot6D_to_angular", "utils.rot_6D.rot6D_to_angular", "utils.projection.vertices_kp3d_projection", "config.args", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "config.args", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.vertices_kp3d_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "meta_data", ")", ":", "\n", "        ", "idx_list", ",", "params_dict", "=", "[", "0", "]", ",", "{", "}", "\n", "for", "i", ",", "(", "idx", ",", "name", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "part_idx", ",", "self", ".", "part_name", ")", ")", ":", "\n", "            ", "idx_list", ".", "append", "(", "idx_list", "[", "i", "]", "+", "idx", ")", "\n", "params_dict", "[", "name", "]", "=", "outputs", "[", "'params_pred'", "]", "[", ":", ",", "idx_list", "[", "i", "]", ":", "idx_list", "[", "i", "+", "1", "]", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "if", "args", "(", ")", ".", "Rot_type", "==", "'6D'", ":", "\n", "            ", "params_dict", "[", "'body_pose'", "]", "=", "rot6D_to_angular", "(", "params_dict", "[", "'body_pose'", "]", ")", "\n", "params_dict", "[", "'global_orient'", "]", "=", "rot6D_to_angular", "(", "params_dict", "[", "'global_orient'", "]", ")", "\n", "", "N", "=", "params_dict", "[", "'body_pose'", "]", ".", "shape", "[", "0", "]", "\n", "params_dict", "[", "'body_pose'", "]", "=", "torch", ".", "cat", "(", "[", "params_dict", "[", "'body_pose'", "]", ",", "torch", ".", "zeros", "(", "N", ",", "6", ")", ".", "to", "(", "params_dict", "[", "'body_pose'", "]", ".", "device", ")", "]", ",", "1", ")", "\n", "params_dict", "[", "'poses'", "]", "=", "torch", ".", "cat", "(", "[", "params_dict", "[", "'global_orient'", "]", ",", "params_dict", "[", "'body_pose'", "]", "]", ",", "1", ")", "\n", "\n", "vertices", ",", "joints54_17", "=", "self", ".", "smpl_model", "(", "betas", "=", "params_dict", "[", "'betas'", "]", ",", "poses", "=", "params_dict", "[", "'poses'", "]", ",", "root_align", "=", "args", "(", ")", ".", "smpl_mesh_root_align", ")", "\n", "\n", "outputs", ".", "update", "(", "{", "'params'", ":", "params_dict", ",", "'verts'", ":", "vertices", ",", "'j3d'", ":", "joints54_17", "[", ":", ",", ":", "54", "]", ",", "'joints_h36m17'", ":", "joints54_17", "[", ":", ",", "54", ":", "]", "}", ")", "\n", "\n", "outputs", ".", "update", "(", "vertices_kp3d_projection", "(", "outputs", "[", "'j3d'", "]", ",", "outputs", "[", "'params'", "]", "[", "'cam'", "]", ",", "joints_h36m17_preds", "=", "outputs", "[", "'joints_h36m17'", "]", ",", "vertices", "=", "outputs", "[", "'verts'", "]", ",", "input2orgimg_offsets", "=", "meta_data", "[", "'offsets'", "]", ",", "presp", "=", "args", "(", ")", ".", "perspective_proj", ")", ")", "\n", "\n", "return", "outputs", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.VertexJointSelector.__init__": [[15, 20], ["torch.Module.__init__", "smpl.VertexJointSelector.register_buffer", "smpl.VertexJointSelector.register_buffer", "smpl.VertexJointSelector.register_buffer"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "extra_joints_idxs", ",", "J_regressor_extra9", ",", "J_regressor_h36m17", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "        ", "super", "(", "VertexJointSelector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'extra_joints_idxs'", ",", "extra_joints_idxs", ")", "\n", "self", ".", "register_buffer", "(", "'J_regressor_extra9'", ",", "J_regressor_extra9", ")", "\n", "self", ".", "register_buffer", "(", "'J_regressor_h36m17'", ",", "J_regressor_h36m17", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.VertexJointSelector.forward": [[21, 33], ["torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vertices", ",", "joints", ")", ":", "\n", "        ", "extra_joints21", "=", "torch", ".", "index_select", "(", "vertices", ",", "1", ",", "self", ".", "extra_joints_idxs", ")", "\n", "extra_joints9", "=", "torch", ".", "einsum", "(", "'bik,ji->bjk'", ",", "[", "vertices", ",", "self", ".", "J_regressor_extra9", "]", ")", "\n", "joints_h36m17", "=", "torch", ".", "einsum", "(", "'bik,ji->bjk'", ",", "[", "vertices", ",", "self", ".", "J_regressor_h36m17", "]", ")", "\n", "# 54 joints = 24 smpl joints + 21 face & feet & hands joints + 9 extra joints from different datasets + 17 joints from h36m", "\n", "joints54_17", "=", "torch", ".", "cat", "(", "[", "joints", ",", "extra_joints21", ",", "extra_joints9", ",", "joints_h36m17", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# use the middle of hip used in the most 2D pose datasets, not the o-th Pelvis of SMPL 24 joint", "\n", "#joints_h36m17_pelvis = joints_h36m17[:,14].unsqueeze(1)", "\n", "#joints_h36m17 = joints_h36m17 - joints_h36m17_pelvis", "\n", "\n", "return", "joints54_17", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.SMPL.__init__": [[35, 57], ["torch.Module.__init__", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "smpl.VertexJointSelector", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer", "smpl.SMPL.register_buffer"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["    ", "def", "__init__", "(", "self", ",", "model_path", ",", "model_type", "=", "'smpl'", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "        ", "super", "(", "SMPL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dtype", "=", "dtype", "\n", "model_info", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "\n", "self", ".", "vertex_joint_selector", "=", "VertexJointSelector", "(", "model_info", "[", "'extra_joints_index'", "]", ",", "model_info", "[", "'J_regressor_extra9'", "]", ",", "model_info", "[", "'J_regressor_h36m17'", "]", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "self", ".", "register_buffer", "(", "'faces_tensor'", ",", "model_info", "[", "'f'", "]", ")", "\n", "# The vertices of the template model", "\n", "self", ".", "register_buffer", "(", "'v_template'", ",", "model_info", "[", "'v_template'", "]", ")", "\n", "# The shape components, take the top 10 PCA componence.", "\n", "if", "model_type", "==", "'smpl'", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'shapedirs'", ",", "model_info", "[", "'shapedirs'", "]", ")", "\n", "", "elif", "model_type", "==", "'smpla'", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'shapedirs'", ",", "model_info", "[", "'smpla_shapedirs'", "]", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'J_regressor'", ",", "model_info", "[", "'J_regressor'", "]", ")", "\n", "# Pose blend shape basis: 6890 x 3 x 207, reshaped to 6890*3 x 207, then transpose to 207 x 6890*3", "\n", "self", ".", "register_buffer", "(", "'posedirs'", ",", "model_info", "[", "'posedirs'", "]", ")", "\n", "# indices of parents for each joints", "\n", "self", ".", "register_buffer", "(", "'parents'", ",", "model_info", "[", "'kintree_table'", "]", ")", "\n", "self", ".", "register_buffer", "(", "'lbs_weights'", ",", "model_info", "[", "'weights'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.SMPL.forward": [[59, 101], ["isinstance", "isinstance", "smpl.lbs", "smpl.SMPL.vertex_joint_selector", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "torch.from_numpy().type.to", "joints54_17[].mean().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "joints54_17[].mean"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.lbs"], ["", "def", "forward", "(", "self", ",", "betas", "=", "None", ",", "poses", "=", "None", ",", "root_align", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Forward pass for the SMPL model\n            Parameters\n            ----------\n            betas: torch.tensor, optional, shape Bx10\n                If given, ignore the member variable `betas` and use it\n                instead. For example, it can used if shape parameters\n                `betas` are predicted from some external model.\n                (default=None)\n            body_pose: torch.tensor, optional, shape Bx(J*3)\n                If given, ignore the member variable `body_pose` and use it\n                instead. For example, it can used if someone predicts the\n                pose of the body joints are predicted from some external model.\n                It should be a tensor that contains joint rotations in\n                axis-angle format. (default=None)\n            Return\n            ----------\n            outputs: dict, {'verts': vertices of body meshes, (B x 6890 x 3),\n                            'joints54': 54 joints of body meshes, (B x 54 x 3), }\n                            #'joints_h36m17': 17 joints of body meshes follow h36m skeleton format, (B x 17 x 3)}\n        '''", "\n", "if", "isinstance", "(", "betas", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "betas", "=", "torch", ".", "from_numpy", "(", "betas", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "", "if", "isinstance", "(", "poses", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "poses", "=", "torch", ".", "from_numpy", "(", "poses", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "\n", "", "default_device", "=", "self", ".", "shapedirs", ".", "device", "\n", "betas", ",", "poses", "=", "betas", ".", "to", "(", "default_device", ")", ",", "poses", ".", "to", "(", "default_device", ")", "\n", "\n", "vertices", ",", "joints", "=", "lbs", "(", "betas", ",", "poses", ",", "self", ".", "v_template", ",", "\n", "self", ".", "shapedirs", ",", "self", ".", "posedirs", ",", "\n", "self", ".", "J_regressor", ",", "self", ".", "parents", ",", "\n", "self", ".", "lbs_weights", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "joints54_17", "=", "self", ".", "vertex_joint_selector", "(", "vertices", ",", "joints", ")", "\n", "\n", "if", "root_align", ":", "\n", "# use the Pelvis of most 2D image, not the original Pelvis", "\n", "            ", "root_trans", "=", "joints54_17", "[", ":", ",", "[", "45", ",", "46", "]", "]", ".", "mean", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "joints54_17", "=", "joints54_17", "-", "root_trans", "\n", "vertices", "=", "vertices", "-", "root_trans", "\n", "\n", "", "return", "vertices", ",", "joints54_17", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.lbs": [[103, 181], ["torch.einsum", "torch.einsum", "torch.einsum", "posedirs.type.type", "torch.eye", "torch.eye", "torch.eye", "batch_rodrigues().view().type", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "smpl.batch_rigid_transform", "lbs_weights.unsqueeze().expand", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.einsum", "torch.einsum", "torch.einsum", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "batch_rodrigues().view", "torch.matmul", "torch.matmul", "torch.matmul", "lbs_weights.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "posedirs.type.type", "A.view", "smpl.batch_rodrigues", "pose.view"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.batch_rigid_transform", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues"], ["", "", "def", "lbs", "(", "betas", ",", "pose", ",", "v_template", ",", "shapedirs", ",", "posedirs", ",", "J_regressor", ",", "parents", ",", "\n", "lbs_weights", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "''' Performs Linear Blend Skinning with the given shape and pose parameters\n\n        Parameters\n        ----------\n        betas : torch.tensor BxNB\n            The tensor of shape parameters\n        pose : torch.tensor Bx(J + 1) * 3\n            The pose parameters in axis-angle format\n        v_template torch.tensor BxVx3\n            The template mesh that will be deformed\n        shapedirs : torch.tensor 1xNB\n            The tensor of PCA shape displacements\n        posedirs : torch.tensor Px(V * 3)\n            The pose PCA coefficients\n        J_regressor : torch.tensor JxV\n            The regressor array that is used to calculate the joints from\n            the position of the vertices\n        parents: torch.tensor J\n            The array that describes the kinematic tree for the model\n        lbs_weights: torch.tensor N x V x (J + 1)\n            The linear blend skinning weights that represent how much the\n            rotation matrix of each part affects each vertex\n        pose2rot: bool, optional\n            Flag on whether to convert the input pose tensor to rotation\n            matrices. The default value is True. If False, then the pose tensor\n            should already contain rotation matrices and have a size of\n            Bx(J + 1)x9\n        dtype: torch.dtype, optional\n\n        Returns\n        -------\n        verts: torch.tensor BxVx3\n            The vertices of the mesh after applying the shape and pose\n            displacements.\n        joints: torch.tensor BxJx3\n            The joints of the model\n    '''", "\n", "\n", "batch_size", "=", "betas", ".", "shape", "[", "0", "]", "\n", "# Add shape contribution", "\n", "v_shaped", "=", "v_template", "+", "torch", ".", "einsum", "(", "'bl,mkl->bmk'", ",", "[", "betas", ",", "shapedirs", "]", ")", "\n", "# Get the joints", "\n", "# NxJx3 array", "\n", "J", "=", "torch", ".", "einsum", "(", "'bik,ji->bjk'", ",", "[", "v_shaped", ",", "J_regressor", "]", ")", "\n", "dtype", "=", "pose", ".", "dtype", "\n", "posedirs", "=", "posedirs", ".", "type", "(", "dtype", ")", "\n", "\n", "# 3. Add pose blend shapes", "\n", "# N x J x 3 x 3", "\n", "ident", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "J_regressor", ".", "device", ")", "\n", "rot_mats", "=", "batch_rodrigues", "(", "\n", "pose", ".", "view", "(", "-", "1", ",", "3", ")", ",", "dtype", "=", "dtype", ")", ".", "view", "(", "[", "batch_size", ",", "-", "1", ",", "3", ",", "3", "]", ")", ".", "type", "(", "dtype", ")", "\n", "pose_feature", "=", "(", "rot_mats", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "-", "ident", ")", ".", "view", "(", "[", "batch_size", ",", "-", "1", "]", ")", ".", "type", "(", "dtype", ")", "\n", "# (N x P) x (P, V * 3) -> N x V x 3", "\n", "pose_offsets", "=", "torch", ".", "matmul", "(", "pose_feature", ",", "posedirs", ".", "type", "(", "dtype", ")", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ")", "\n", "\n", "v_posed", "=", "pose_offsets", "+", "v_shaped", "\n", "# 4. Get the global joint location", "\n", "J_transformed", ",", "A", "=", "batch_rigid_transform", "(", "rot_mats", ",", "J", ",", "parents", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# 5. Do skinning:", "\n", "# W is N x V x (J + 1)", "\n", "W", "=", "lbs_weights", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "expand", "(", "[", "batch_size", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "# (N x V x (J + 1)) x (N x (J + 1) x 16)", "\n", "num_joints", "=", "J_regressor", ".", "shape", "[", "0", "]", "\n", "T", "=", "torch", ".", "matmul", "(", "W", ",", "A", ".", "view", "(", "batch_size", ",", "num_joints", ",", "16", ")", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "\n", "homogen_coord", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "v_posed", ".", "shape", "[", "1", "]", ",", "1", "]", ",", "\n", "dtype", "=", "dtype", ",", "device", "=", "J_regressor", ".", "device", ")", "\n", "v_posed_homo", "=", "torch", ".", "cat", "(", "[", "v_posed", ",", "homogen_coord", "]", ",", "dim", "=", "2", ")", "\n", "v_homo", "=", "torch", ".", "matmul", "(", "T", ",", "torch", ".", "unsqueeze", "(", "v_posed_homo", ",", "dim", "=", "-", "1", ")", ")", "\n", "verts", "=", "v_homo", "[", ":", ",", ":", ",", ":", "3", ",", "0", "]", "\n", "\n", "return", "verts", ",", "J_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.batch_rodrigues": [[183, 215], ["torch.norm", "torch.norm", "torch.norm", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.split", "torch.split", "torch.split", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.cat", "torch.cat", "torch.cat", "torch.eye", "torch.eye", "torch.eye", "torch.bmm", "torch.bmm", "torch.bmm"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "batch_rodrigues", "(", "rot_vecs", ",", "epsilon", "=", "1e-8", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "''' Calculates the rotation matrices for a batch of rotation vectors\n        Parameters\n        ----------\n        rot_vecs: torch.tensor Nx3\n            array of N axis-angle vectors\n        Returns\n        -------\n        R: torch.tensor Nx3x3\n            The rotation matrices for the given axis-angle parameters\n    '''", "\n", "\n", "batch_size", "=", "rot_vecs", ".", "shape", "[", "0", "]", "\n", "device", "=", "rot_vecs", ".", "device", "\n", "\n", "angle", "=", "torch", ".", "norm", "(", "rot_vecs", "+", "1e-8", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "rot_dir", "=", "rot_vecs", "/", "angle", "\n", "\n", "cos", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "cos", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "sin", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "sin", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Bx1 arrays", "\n", "rx", ",", "ry", ",", "rz", "=", "torch", ".", "split", "(", "rot_dir", ",", "1", ",", "dim", "=", "1", ")", "\n", "K", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "3", ",", "3", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "K", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "-", "rz", ",", "ry", ",", "rz", ",", "zeros", ",", "-", "rx", ",", "-", "ry", ",", "rx", ",", "zeros", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "(", "batch_size", ",", "3", ",", "3", ")", ")", "\n", "\n", "ident", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "rot_mat", "=", "ident", "+", "sin", "*", "K", "+", "(", "1", "-", "cos", ")", "*", "torch", ".", "bmm", "(", "K", ",", "K", ")", "\n", "return", "rot_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.transform_mat": [[216, 227], ["torch.cat", "torch.cat", "torch.cat", "torch.pad", "torch.pad"], "function", ["None"], ["", "def", "transform_mat", "(", "R", ",", "t", ")", ":", "\n", "    ", "''' Creates a batch of transformation matrices\n        Args:\n            - R: Bx3x3 array of a batch of rotation matrices\n            - t: Bx3x1 array of a batch of translation vectors\n        Returns:\n            - T: Bx4x4 Transformation matrix\n    '''", "\n", "# No padding left or right, only add an extra row", "\n", "return", "torch", ".", "cat", "(", "[", "F", ".", "pad", "(", "R", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ",", "\n", "F", ".", "pad", "(", "t", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "value", "=", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.batch_rigid_transform": [[228, 283], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.clone", "transform_mat().reshape", "range", "torch.stack", "torch.stack", "torch.stack", "torch.pad", "torch.matmul", "torch.matmul", "torch.matmul", "transform_chain.append", "torch.pad", "smpl.transform_mat", "torch.matmul", "torch.matmul", "torch.matmul", "rot_mats.reshape", "joints.clone.reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.transform_mat"], ["", "def", "batch_rigid_transform", "(", "rot_mats", ",", "joints", ",", "parents", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    Applies a batch of rigid transformations to the joints\n\n    Parameters\n    ----------\n    rot_mats : torch.tensor BxNx3x3\n        Tensor of rotation matrices\n    joints : torch.tensor BxNx3\n        Locations of joints\n    parents : torch.tensor BxN\n        The kinematic tree of each object\n    dtype : torch.dtype, optional:\n        The data type of the created tensors, the default is torch.float32\n\n    Returns\n    -------\n    posed_joints : torch.tensor BxNx3\n        The locations of the joints after applying the pose rotations\n    rel_transforms : torch.tensor BxNx4x4\n        The relative (with respect to the root joint) rigid transformations\n        for all the joints\n    \"\"\"", "\n", "\n", "joints", "=", "torch", ".", "unsqueeze", "(", "joints", ",", "dim", "=", "-", "1", ")", "\n", "\n", "rel_joints", "=", "joints", ".", "clone", "(", ")", "\n", "rel_joints", "[", ":", ",", "1", ":", "]", "-=", "joints", "[", ":", ",", "parents", "[", "1", ":", "]", "]", "\n", "\n", "transforms_mat", "=", "transform_mat", "(", "\n", "rot_mats", ".", "reshape", "(", "-", "1", ",", "3", ",", "3", ")", ",", "\n", "rel_joints", ".", "reshape", "(", "-", "1", ",", "3", ",", "1", ")", ")", ".", "reshape", "(", "-", "1", ",", "joints", ".", "shape", "[", "1", "]", ",", "4", ",", "4", ")", "\n", "\n", "transform_chain", "=", "[", "transforms_mat", "[", ":", ",", "0", "]", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "parents", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Subtract the joint location at the rest pose", "\n", "# No need for rotation, since it's identity when at rest", "\n", "        ", "curr_res", "=", "torch", ".", "matmul", "(", "transform_chain", "[", "parents", "[", "i", "]", "]", ",", "\n", "transforms_mat", "[", ":", ",", "i", "]", ")", "\n", "transform_chain", ".", "append", "(", "curr_res", ")", "\n", "\n", "", "transforms", "=", "torch", ".", "stack", "(", "transform_chain", ",", "dim", "=", "1", ")", "\n", "\n", "# The last column of the transformations contains the posed joints", "\n", "posed_joints", "=", "transforms", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "\n", "# The last column of the transformations contains the posed joints", "\n", "posed_joints", "=", "transforms", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "\n", "joints_homogen", "=", "F", ".", "pad", "(", "joints", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "rel_transforms", "=", "transforms", "-", "F", ".", "pad", "(", "\n", "torch", ".", "matmul", "(", "transforms", ",", "joints_homogen", ")", ",", "[", "3", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "return", "posed_joints", ",", "rel_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.export_smpl_to_onnx_dynamic": [[284, 298], ["torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "print", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "export_smpl_to_onnx_dynamic", "(", "smpl_model", ",", "save_file", ",", "bs", "=", "1", ")", ":", "\n", "    ", "\"support dynamics batch size but slow\"", "\n", "a", "=", "torch", ".", "rand", "(", "[", "bs", ",", "10", "]", ")", ".", "cuda", "(", ")", "\n", "b", "=", "torch", ".", "rand", "(", "[", "bs", ",", "72", "]", ")", ".", "cuda", "(", ")", "\n", "dynamic_axes", "=", "{", "'smpl_betas'", ":", "[", "0", "]", ",", "'smpl_thetas'", ":", "[", "0", "]", ",", "'verts'", ":", "[", "0", "]", ",", "'joints'", ":", "[", "0", "]", "}", "\n", "torch", ".", "onnx", ".", "export", "(", "smpl_model", ",", "(", "a", ",", "b", ")", ",", "\n", "save_file", ",", "\n", "input_names", "=", "[", "'smpl_betas'", ",", "'smpl_thetas'", "]", ",", "\n", "output_names", "=", "[", "'verts'", ",", "'joints'", ",", "'faces'", "]", ",", "\n", "export_params", "=", "True", ",", "\n", "opset_version", "=", "12", ",", "\n", "do_constant_folding", "=", "True", ",", "\n", "dynamic_axes", "=", "dynamic_axes", ")", "\n", "print", "(", "'SMPL onnx saved into: '", ",", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.export_smpl_to_onnx_static": [[299, 311], ["torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "print", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "export_smpl_to_onnx_static", "(", "smpl_model", ",", "save_file", ",", "bs", "=", "1", ")", ":", "\n", "\n", "    ", "a", "=", "torch", ".", "rand", "(", "[", "bs", ",", "10", "]", ")", ".", "cuda", "(", ")", "\n", "b", "=", "torch", ".", "rand", "(", "[", "bs", ",", "72", "]", ")", ".", "cuda", "(", ")", "\n", "torch", ".", "onnx", ".", "export", "(", "smpl_model", ",", "(", "a", ",", "b", ")", ",", "\n", "save_file", ",", "\n", "input_names", "=", "[", "'smpl_betas'", ",", "'smpl_thetas'", "]", ",", "\n", "output_names", "=", "[", "'verts'", ",", "'joints'", ",", "'faces'", "]", ",", "\n", "export_params", "=", "True", ",", "\n", "opset_version", "=", "12", ",", "\n", "do_constant_folding", "=", "True", ")", "\n", "print", "(", "'SMPL onnx saved into: '", ",", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.test_smpl": [[312, 337], ["torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "range", "print", "print", "numpy.ones", "time.time", "smpl_model", "outputs[].cpu().numpy().astype", "render_human_mesh", "print", "cv2.imshow", "cv2.waitKey", "time.time", "cost_time.append", "numpy.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "outputs[].cpu().numpy", "numpy.array().astype", "outputs[].cpu", "outputs[].cpu().numpy", "numpy.array", "outputs[].cpu"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "test_smpl", "(", "smpl_model", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "import", "time", ",", "cv2", "\n", "from", "visualization", "import", "render_human_mesh", "\n", "cost_time", "=", "[", "]", "\n", "batch_size", "=", "1", "\n", "a", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "10", "]", ")", ".", "type", "(", "dtype", ")", "#.cuda()", "\n", "b", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "72", "]", ")", ".", "type", "(", "dtype", ")", "#.cuda()", "\n", "image_length", "=", "1024", "\n", "bg_image", "=", "np", ".", "ones", "(", "(", "image_length", ",", "image_length", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "\n", "for", "_", "in", "range", "(", "200", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "outputs", "=", "smpl_model", "(", "a", ",", "b", ")", "\n", "verts_np", "=", "(", "outputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "image_length", "/", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "+", "+", "np", ".", "array", "(", "[", "[", "[", ".5", ",", ".5", ",", "0", "]", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "*", "image_length", "\n", "faces_np", "=", "outputs", "[", "2", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "rendered_image", "=", "render_human_mesh", "(", "bg_image", ",", "verts_np", ",", "faces_np", ")", "\n", "print", "(", "rendered_image", ".", "shape", ")", "\n", "cv2", ".", "imshow", "(", "'rendering'", ",", "rendered_image", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "cost_time", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "", "print", "(", "'cost time '", ",", "np", ".", "mean", "(", "cost_time", ")", ")", "\n", "print", "(", "cost_time", "[", ":", "10", "]", ")", "\n", "#for key, item in outputs.items():", "\n", "#    print(key, item.shape)", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.test_onnx": [[338, 359], ["onnxruntime.InferenceSession", "numpy.random.random().astype", "numpy.random.random().astype", "range", "print", "print", "time.time", "onnxruntime.InferenceSession.run", "time.time", "cost_time.append", "numpy.mean", "numpy.random.random", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.image.Image_processor.run"], ["", "def", "test_onnx", "(", "dtype", "=", "np", ".", "float32", ",", "batch_size", "=", "1", ")", ":", "\n", "    ", "smpl_onnx_path", "=", "\"smpl.onnx\"", "\n", "import", "onnx", ",", "onnxruntime", "\n", "#onnx_model = onnx.load(smpl_onnx_path)", "\n", "#onnx.checker.check_model(onnx_model)", "\n", "ort_session", "=", "onnxruntime", ".", "InferenceSession", "(", "smpl_onnx_path", ")", "\n", "\n", "import", "time", "\n", "cost_time", "=", "[", "]", "\n", "\n", "a", "=", "np", ".", "random", ".", "random", "(", "[", "batch_size", ",", "10", "]", ")", ".", "astype", "(", "dtype", ")", "\n", "b", "=", "np", ".", "random", ".", "random", "(", "[", "batch_size", ",", "72", "]", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "ort_inputs", "=", "{", "'smpl_betas'", ":", "a", ",", "'smpl_thetas'", ":", "b", "}", "\n", "for", "_", "in", "range", "(", "200", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "ort_outs", "=", "ort_session", ".", "run", "(", "None", ",", "ort_inputs", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "cost_time", ".", "append", "(", "end_time", "-", "start_time", ")", "\n", "", "print", "(", "'cost time '", ",", "np", ".", "mean", "(", "cost_time", ")", ")", "\n", "print", "(", "cost_time", "[", ":", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.smpl_family.smpl.prepare_smpl_model": [[360, 364], ["SMPL().eval", "smpl.SMPL"], "function", ["None"], ["", "def", "prepare_smpl_model", "(", "dtype", ")", ":", "\n", "    ", "model_path", "=", "'/home/yusun/CenterMesh/model_data/parameters/smpl_packed_info.pth'", "\n", "smpl_model", "=", "SMPL", "(", "model_path", ",", "dtype", "=", "dtype", ")", ".", "eval", "(", ")", "#.cuda()", "\n", "return", "smpl_model", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base_relative.Image_base_relative.__init__": [[5, 9], ["Image_base.__init__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "regress_smpl", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Image_base_relative", ",", "self", ")", ".", "__init__", "(", "train_flag", "=", "train_flag", ",", "regress_smpl", "=", "regress_smpl", ")", "\n", "self", ".", "depth_degree_thresh", "=", "[", "0.36", ",", "0.18", ",", "0", "]", "\n", "self", ".", "regress_smpl", "=", "regress_smpl", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base_relative.Image_base_relative.get_item_single_frame": [[10, 80], ["np.zeros", "image_base_relative.Image_base_relative.get_image_info", "image_base_relative.Image_base_relative._calc_augment_confs", "process_image", "image_base_relative.Image_base_relative.process_kp2ds_bboxes", "image_base_relative.Image_base_relative.process_suject_ids", "image_base_relative.Image_base_relative.prepare_image", "image_base_relative.Image_base_relative.process_kp3ds", "image_base_relative.Image_base_relative.process_smpl_params", "image_base_relative.Image_base_relative.process_verts", "image_base_relative.Image_base_relative.add_cam_parameters", "np.array", "np.array", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "centermap.float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().bool", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.Tensor().bool", "torch.Tensor().float", "args", "image_base_relative.Image_base_relative.update", "args", "image_base_relative.Image_base_relative.update", "args", "image_base_relative.Image_base_relative._calc_normed_cam_params_", "image_base_relative.Image_base_relative.generate_centermap_3d", "image_base_relative.Image_base_relative.update", "args", "image_base_relative.Image_base_relative._organize_depth_info_", "image_base_relative.Image_base_relative.update", "image_base_relative.Image_base_relative._organize_kid_shape_offsets_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.from_numpy().float", "torch.from_numpy().long", "centermap_3d.float", "torch.Tensor().bool", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_image_info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._calc_augment_confs", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.process_image", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_kp2ds_bboxes", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_suject_ids", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.prepare_image", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_kp3ds", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_smpl_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_verts", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.add_cam_parameters", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._calc_normed_cam_params_", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.generate_centermap_3d", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base_relative.Image_base_relative._organize_depth_info_", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base_relative.Image_base_relative._organize_kid_shape_offsets_"], ["", "def", "get_item_single_frame", "(", "self", ",", "index", ",", "augment_cfgs", "=", "None", ")", ":", "\n", "# valid annotation flags for ", "\n", "# 0: 2D pose/bounding box(True/False), # 7: detecting all person/front-view person(True/False)", "\n", "# 1: 3D pose, 2: subject id, 3: smpl root rot, 4: smpl pose param, 5: smpl shape param, 6: global translation, 7: vertex of SMPL model", "\n", "        ", "valid_masks", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_person", ",", "8", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "info", "=", "self", ".", "get_image_info", "(", "index", ")", "\n", "\n", "position_augments", ",", "pixel_augments", "=", "self", ".", "_calc_augment_confs", "(", "info", "[", "'image'", "]", ",", "info", "[", "'kp2ds'", "]", ",", "is_pose2d", "=", "info", "[", "'vmask_2d'", "]", "[", ":", ",", "0", "]", ")", "\n", "\n", "img_info", "=", "process_image", "(", "info", "[", "'image'", "]", ",", "info", "[", "'kp2ds'", "]", ",", "augments", "=", "position_augments", ",", "is_pose2d", "=", "info", "[", "'vmask_2d'", "]", "[", ":", ",", "0", "]", ")", "\n", "\n", "image", ",", "image_wbg", ",", "full_kps", ",", "offsets", "=", "img_info", "\n", "centermap", ",", "person_centers", ",", "full_kp2ds", ",", "used_person_inds", ",", "valid_masks", "[", ":", ",", "0", "]", ",", "bboxes_hw_norm", ",", "heatmap", ",", "AE_joints", "=", "self", ".", "process_kp2ds_bboxes", "(", "full_kps", ",", "img_shape", "=", "image", ".", "shape", ",", "is_pose2d", "=", "info", "[", "'vmask_2d'", "]", "[", ":", ",", "0", "]", ")", "\n", "\n", "all_person_detected_mask", "=", "info", "[", "'vmask_2d'", "]", "[", "0", ",", "2", "]", "\n", "subject_ids", ",", "valid_masks", "[", ":", ",", "2", "]", "=", "self", ".", "process_suject_ids", "(", "info", "[", "'track_ids'", "]", ",", "used_person_inds", ",", "valid_mask_ids", "=", "info", "[", "'vmask_2d'", "]", "[", ":", ",", "1", "]", ")", "\n", "image", ",", "dst_image", ",", "org_image", "=", "self", ".", "prepare_image", "(", "image", ",", "image_wbg", ",", "augments", "=", "pixel_augments", ")", "\n", "\n", "# valid mask of 3D pose, smpl root rot, smpl pose param, smpl shape param, global translation", "\n", "kp3d", ",", "valid_masks", "[", ":", ",", "1", "]", "=", "self", ".", "process_kp3ds", "(", "info", "[", "'kp3ds'", "]", ",", "used_person_inds", ",", "augments", "=", "position_augments", ",", "valid_mask_kp3ds", "=", "info", "[", "'vmask_3d'", "]", "[", ":", ",", "0", "]", ")", "\n", "params", ",", "valid_masks", "[", ":", ",", "3", ":", "6", "]", "=", "self", ".", "process_smpl_params", "(", "info", "[", "'params'", "]", ",", "used_person_inds", ",", "augments", "=", "position_augments", ",", "valid_mask_smpl", "=", "info", "[", "'vmask_3d'", "]", "[", ":", ",", "1", ":", "4", "]", ")", "\n", "verts_processed", ",", "valid_masks", "[", ":", ",", "7", "]", ",", "root_trans_processed", ",", "valid_masks", "[", ":", ",", "6", "]", "=", "self", ".", "process_verts", "(", "info", "[", "'verts'", "]", ",", "info", "[", "'root_trans'", "]", ",", "used_person_inds", ",", "augments", "=", "position_augments", ",", "valid_mask_verts", "=", "info", "[", "'vmask_3d'", "]", "[", ":", ",", "4", "]", ",", "valid_mask_depth", "=", "info", "[", "'vmask_3d'", "]", "[", ":", ",", "5", "]", ")", "\n", "\n", "rot_flip", "=", "np", ".", "array", "(", "[", "position_augments", "[", "0", "]", ",", "position_augments", "[", "1", "]", "]", ")", "if", "position_augments", "is", "not", "None", "else", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "\n", "input_data", "=", "{", "\n", "'image'", ":", "torch", ".", "from_numpy", "(", "dst_image", ")", ".", "float", "(", ")", ",", "\n", "'image_org'", ":", "torch", ".", "from_numpy", "(", "org_image", ")", ",", "\n", "'full_kp2d'", ":", "torch", ".", "from_numpy", "(", "full_kp2ds", ")", ".", "float", "(", ")", ",", "\n", "'person_centers'", ":", "torch", ".", "from_numpy", "(", "person_centers", ")", ".", "float", "(", ")", ",", "\n", "'subject_ids'", ":", "torch", ".", "from_numpy", "(", "subject_ids", ")", ".", "long", "(", ")", ",", "\n", "'centermap'", ":", "centermap", ".", "float", "(", ")", ",", "\n", "'kp_3d'", ":", "torch", ".", "from_numpy", "(", "kp3d", ")", ".", "float", "(", ")", ",", "\n", "'verts'", ":", "torch", ".", "from_numpy", "(", "verts_processed", ")", ".", "float", "(", ")", ",", "\n", "'params'", ":", "torch", ".", "from_numpy", "(", "params", ")", ".", "float", "(", ")", ",", "\n", "'valid_masks'", ":", "torch", ".", "from_numpy", "(", "valid_masks", ")", ".", "bool", "(", ")", ",", "\n", "'root_trans'", ":", "torch", ".", "from_numpy", "(", "root_trans_processed", ")", ".", "float", "(", ")", ",", "\n", "'offsets'", ":", "torch", ".", "from_numpy", "(", "offsets", ")", ".", "float", "(", ")", ",", "\n", "'rot_flip'", ":", "torch", ".", "from_numpy", "(", "rot_flip", ")", ".", "float", "(", ")", ",", "\n", "'all_person_detected_mask'", ":", "torch", ".", "Tensor", "(", "[", "all_person_detected_mask", "]", ")", ".", "bool", "(", ")", ",", "\n", "'imgpath'", ":", "info", "[", "'imgpath'", "]", ",", "\n", "'data_set'", ":", "info", "[", "'ds'", "]", "}", "\n", "input_data", "=", "self", ".", "add_cam_parameters", "(", "input_data", ",", "info", ")", "\n", "\n", "if", "self", ".", "train_flag", ":", "\n", "            ", "img_scale", "=", "1", "if", "position_augments", "is", "None", "else", "position_augments", "[", "3", "]", "\n", "input_data", "[", "'img_scale'", "]", "=", "torch", ".", "Tensor", "(", "[", "img_scale", "]", ")", ".", "float", "(", ")", "\n", "\n", "", "if", "args", "(", ")", ".", "learn_2dpose", ":", "\n", "            ", "input_data", ".", "update", "(", "{", "'heatmap'", ":", "torch", ".", "from_numpy", "(", "heatmap", ")", ".", "float", "(", ")", "}", ")", "\n", "", "if", "args", "(", ")", ".", "learn_AE", ":", "\n", "            ", "input_data", ".", "update", "(", "{", "'AE_joints'", ":", "torch", ".", "from_numpy", "(", "AE_joints", ")", ".", "long", "(", ")", "}", ")", "\n", "\n", "", "if", "args", "(", ")", ".", "perspective_proj", ":", "\n", "            ", "root_trans", ",", "cam_params", ",", "cam_mask", "=", "self", ".", "_calc_normed_cam_params_", "(", "full_kp2ds", ",", "kp3d", ",", "valid_masks", "[", ":", ",", "1", "]", ",", "info", "[", "'ds'", "]", ")", "\n", "centermap_3d", ",", "valid_centermap3d_mask", "=", "self", ".", "generate_centermap_3d", "(", "person_centers", ",", "cam_params", ",", "cam_mask", ",", "bboxes_hw_norm", ",", "all_person_detected_mask", ")", "\n", "input_data", ".", "update", "(", "{", "'cams'", ":", "cam_params", ",", "'cam_mask'", ":", "cam_mask", ",", "'root_trans'", ":", "root_trans", ",", "'centermap_3d'", ":", "centermap_3d", ".", "float", "(", ")", ",", "'valid_centermap3d_mask'", ":", "torch", ".", "Tensor", "(", "[", "valid_centermap3d_mask", "]", ")", ".", "bool", "(", ")", "}", ")", "\n", "\n", "", "if", "args", "(", ")", ".", "learn_relative", ":", "\n", "# age; gender; depth level; body type", "\n", "            ", "depth_info", "=", "self", ".", "_organize_depth_info_", "(", "info", ",", "used_person_inds", ")", "\n", "input_data", ".", "update", "(", "{", "'depth_info'", ":", "torch", ".", "from_numpy", "(", "depth_info", ")", ".", "long", "(", ")", "}", ")", "\n", "input_data", "[", "'kid_shape_offsets'", "]", "=", "self", ".", "_organize_kid_shape_offsets_", "(", "info", ",", "used_person_inds", ")", "\n", "\n", "", "return", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base_relative.Image_base_relative.generate_dynamic_depth": [[81, 87], ["torch.Tensor().long", "torch.zeros().long", "min", "len", "torch.Tensor", "torch.zeros", "maps_utils.centermap._calc_radius_"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap._calc_radius_"], ["", "def", "generate_dynamic_depth", "(", "self", ",", "cam_params", ",", "cam_mask", ",", "bboxes_hw_norm", ",", "all_person_detected_mask", ")", ":", "\n", "        ", "radius_list", "=", "torch", ".", "Tensor", "(", "_calc_radius_", "(", "bboxes_hw_norm", ")", ")", ".", "long", "(", ")", "\n", "person_scales", "=", "torch", ".", "zeros", "(", "self", ".", "max_person", ")", ".", "long", "(", ")", "\n", "person_num", "=", "min", "(", "self", ".", "max_person", ",", "len", "(", "radius_list", ")", ")", "\n", "person_scales", "[", ":", "person_num", "]", "=", "radius_list", "[", ":", "person_num", "]", "\n", "return", "person_scales", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base_relative.Image_base_relative._organize_depth_info_": [[88, 94], ["np.ones", "len", "np.array", "len"], "methods", ["None"], ["", "def", "_organize_depth_info_", "(", "self", ",", "info", ",", "used_person_inds", ")", ":", "\n", "        ", "prepared_info", "=", "np", ".", "ones", "(", "(", "self", ".", "max_person", ",", "4", ")", ")", "*", "-", "1", "\n", "if", "'depth'", "in", "info", ":", "\n", "            ", "if", "len", "(", "info", "[", "'depth'", "]", ")", "!=", "0", ":", "\n", "                ", "prepared_info", "[", ":", "len", "(", "used_person_inds", ")", "]", "=", "np", ".", "array", "(", "info", "[", "'depth'", "]", ")", "[", "used_person_inds", "]", "\n", "", "", "return", "prepared_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base_relative.Image_base_relative._organize_kid_shape_offsets_": [[95, 100], ["torch.ones().float", "torch.from_numpy().float", "torch.ones", "len", "torch.from_numpy"], "methods", ["None"], ["", "def", "_organize_kid_shape_offsets_", "(", "self", ",", "info", ",", "used_person_inds", ")", ":", "\n", "        ", "kid_shape_offsets_processed", "=", "torch", ".", "ones", "(", "self", ".", "max_person", ")", ".", "float", "(", ")", "*", "-", "1", "\n", "if", "'kid_shape_offsets'", "in", "info", ":", "\n", "            ", "kid_shape_offsets_processed", "[", ":", "len", "(", "used_person_inds", ")", "]", "=", "torch", ".", "from_numpy", "(", "info", "[", "'kid_shape_offsets'", "]", "[", "used_person_inds", "]", ")", ".", "float", "(", ")", "\n", "", "return", "kid_shape_offsets_processed", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base_relative.Image_base_relative.__getitem__": [[102, 110], ["image_base_relative.Image_base_relative.get_item_single_frame", "image_base_relative.Image_base_relative.get_item_single_frame", "logging.error", "np.random.randint", "image_base_relative.Image_base_relative.get_item_single_frame", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_item_single_frame", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_item_single_frame", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_item_single_frame"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "get_item_single_frame", "(", "index", ")", "\n", "try", ":", "\n", "            ", "return", "self", ".", "get_item_single_frame", "(", "index", ")", "\n", "", "except", "Exception", "as", "error", ":", "\n", "            ", "logging", ".", "error", "(", "error", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ")", ")", "\n", "return", "self", ".", "get_item_single_frame", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base_relative.visualize_3d_hmap": [[120, 134], ["enumerate", "cv2.applyColorMap", "cv2.putText", "cv2.imwrite", "type", "hmap.detach().cpu().numpy.cpu().numpy", "hmap.detach().cpu().numpy.detach().cpu().numpy", "hmap.detach().cpu().numpy.cpu", "hmap.detach().cpu().numpy.detach().cpu", "hmap.detach().cpu().numpy.detach"], "function", ["None"], ["def", "visualize_3d_hmap", "(", "hmap", ",", "save_name", ")", ":", "\n", "    ", "if", "not", "(", "type", "(", "hmap", ")", "is", "np", ".", "ndarray", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "hmap", "=", "hmap", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "except", ":", "\n", "            ", "hmap", "=", "hmap", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "hmap", "[", "hmap", "<", "0", "]", "=", "0", "\n", "hmap", "[", "hmap", ">", "1", "]", "=", "1", "\n", "hmap", "=", "(", "hmap", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "d", ",", "x", "in", "enumerate", "(", "hmap", ")", ":", "\n", "        ", "x", "=", "cv2", ".", "applyColorMap", "(", "x", ",", "colormap", "=", "cv2", ".", "COLORMAP_JET", ")", "\n", "x", "=", "cv2", ".", "putText", "(", "x", ",", "f'{d}'", ",", "(", "10", ",", "20", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "(", "255", ",", "128", ",", "128", ")", ",", "2", ",", "cv2", ".", "LINE_AA", ")", "\n", "cv2", ".", "imwrite", "(", "save_name", "+", "'_{}.jpg'", ".", "format", "(", "d", ")", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base_relative.test_image_relative_dataset": [[135, 278], ["print", "print", "print", "print", "os.path.join", "os.path.isdir", "os.mkdir", "print", "DataLoader", "Visualizer", "print", "print", "print", "enumerate", "shutil.rmtree", "SMPL", "SMPLA_parser", "range", "args", "args", "r.items", "os.path.basename", "Visualizer.draw_skeleton_multiperson", "enumerate", "make_heatmaps", "np.concatenate", "cv2.imwrite", "torch.stack().permute", "[].float", "torch.cat().float", "[].numpy().astype", "Visualizer.draw_skeleton", "cv2.imwrite", "args", "args", "args", "args", "isinstance", "[].numpy().astype", "np.array().astype.copy", "[].clone", "[].clone", "denormalize_cam_params_to_trans", "np.logical_or", "Visualizer.draw_skeleton_multiperson", "cv2.imwrite", "zip", "person_center.astype", "np.array().astype.copy", "make_heatmaps", "cv2.imwrite", "[].numpy().astype", "torch.where", "[].sum", "[].float", "torch.zeros", "torch.cat", "SMPLA_parser.", "print", "SMPL.", "np.array().astype", "cv2.imwrite", "cv2.imwrite", "np.array().astype.copy", "args", "print", "isinstance", "[].sum", "[].clone", "perspective_projection", "np.array().astype.copy", "cv2.circle", "np.array().astype.copy", "torch.stack", "len", "torch.cat", "kso_vmask.sum", "[].sum", "[].sum", "denormalize_cam_params_to_trans", "perspective_projection", "Visualizer.visualize_renderer_verts_list", "Visualizer.visualize_renderer_verts_list", "len", "len", "enumerate", "np.concatenate", "Visualizer.visualize_renderer_verts_list", "[].numpy", "print", "[].numpy", "[].numpy", "[].numpy", "torch.where", "[].numpy", "torch.zeros", "[].clone", "np.array", "person_center.astype", "len", "depth_info.numpy().tolist", "torch.zeros", "len", "verts.cuda", "verts.cuda", "[].numpy", "cv2.circle", "print", "cv2.putText", "verts.cuda", "args", "[].numpy", "args", "len", "args", "denormalize_cam_params_to_trans.cuda", "denormalize_cam_params_to_trans.cuda", "np.array", "depth_info.numpy"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.make_heatmaps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.denormalize_cam_params_to_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.make_heatmaps", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.denormalize_cam_params_to_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visualize_renderer_verts_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visualize_renderer_verts_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visualize_renderer_verts_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "def", "test_image_relative_dataset", "(", "dataset", ",", "with_3d", "=", "False", ",", "with_smpl", "=", "False", ")", ":", "\n", "    ", "print", "(", "'testing relative dataset loading'", ")", "\n", "print", "(", "'configs_yml:'", ",", "args", "(", ")", ".", "configs_yml", ")", "\n", "print", "(", "'model_version:'", ",", "args", "(", ")", ".", "model_version", ")", "\n", "\n", "from", "visualization", ".", "visualization", "import", "Visualizer", "\n", "test_projection_part", "=", "True", "if", "args", "(", ")", ".", "model_version", "in", "[", "4", ",", "5", ",", "6", ",", "7", "]", "else", "False", "\n", "print", "(", "'test_projection_part:'", ",", "test_projection_part", ")", "\n", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "project_dir", ",", "'test'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "print", "(", "'Initialized dataset'", ")", "\n", "\n", "batch_size", ",", "model_type", "=", "2", ",", "'smpl'", "\n", "dataloader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "visualizer", "=", "Visualizer", "(", "resolution", "=", "(", "512", ",", "512", ",", "3", ")", ",", "result_img_dir", "=", "save_dir", ",", "with_renderer", "=", "True", ")", "\n", "print", "(", "'Initialized visualizer'", ")", "\n", "\n", "from", "visualization", ".", "visualization", "import", "make_heatmaps", ",", "draw_skeleton_multiperson", "\n", "from", "utils", ".", "cam_utils", "import", "denormalize_cam_params_to_trans", "\n", "if", "with_smpl", ":", "\n", "        ", "from", "smpl_family", ".", "smpl", "import", "SMPL", "\n", "smpl", "=", "SMPL", "(", "args", "(", ")", ".", "smpl_model_path", ",", "model_type", "=", "'smpl'", ")", "\n", "from", "smpl_family", ".", "smpla", "import", "SMPLA_parser", "\n", "smpl_family", "=", "SMPLA_parser", "(", "args", "(", ")", ".", "smpla_model_path", ",", "args", "(", ")", ".", "smil_model_path", ",", "baby_thresh", "=", "args", "(", ")", ".", "baby_threshold", ")", "\n", "", "print", "(", "'Initialized SMPL models'", ")", "\n", "\n", "img_size", "=", "512", "\n", "bones", ",", "cm", "=", "constants", ".", "All54_connMat", ",", "constants", ".", "cm_All54", "\n", "print", "(", "'Start loading data.'", ")", "\n", "for", "_", ",", "r", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "_", "%", "100", "==", "0", ":", "\n", "            ", "for", "key", ",", "value", "in", "r", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "print", "(", "key", ",", "value", ".", "shape", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                    ", "print", "(", "key", ",", "len", "(", "value", ")", ")", "\n", "", "", "", "for", "inds", "in", "range", "(", "2", ")", ":", "\n", "            ", "img_bsname", "=", "os", ".", "path", ".", "basename", "(", "r", "[", "'imgpath'", "]", "[", "inds", "]", ")", "\n", "image", "=", "r", "[", "'image'", "]", "[", "inds", "]", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "full_kp2d", "=", "(", "r", "[", "'full_kp2d'", "]", "[", "inds", "]", ".", "numpy", "(", ")", "+", "1", ")", "*", "img_size", "/", "2.0", "\n", "person_centers", "=", "(", "r", "[", "'person_centers'", "]", "[", "inds", "]", ".", "numpy", "(", ")", "+", "1", ")", "*", "img_size", "/", "2.0", "\n", "subject_ids", "=", "r", "[", "'subject_ids'", "]", "[", "inds", "]", "\n", "image_kp2d", "=", "visualizer", ".", "draw_skeleton_multiperson", "(", "image", ".", "copy", "(", ")", ",", "full_kp2d", ",", "bones", "=", "bones", ",", "cm", "=", "cm", ")", "\n", "\n", "if", "test_projection_part", "and", "r", "[", "'cam_mask'", "]", "[", "inds", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "cam_mask", "=", "r", "[", "'cam_mask'", "]", "[", "inds", "]", "\n", "kp3d_tp", "=", "r", "[", "'kp_3d'", "]", "[", "inds", "]", "[", "cam_mask", "]", ".", "clone", "(", ")", "\n", "kp2d_tp", "=", "r", "[", "'full_kp2d'", "]", "[", "inds", "]", "[", "cam_mask", "]", ".", "clone", "(", ")", "\n", "pred_cam_t", "=", "denormalize_cam_params_to_trans", "(", "r", "[", "'cams'", "]", "[", "inds", "]", "[", "cam_mask", "]", ".", "clone", "(", ")", ")", "\n", "\n", "pred_keypoints_2d", "=", "perspective_projection", "(", "kp3d_tp", ",", "translation", "=", "pred_cam_t", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "normalize", "=", "False", ")", "+", "512", "//", "2", "\n", "invalid_mask", "=", "np", ".", "logical_or", "(", "kp3d_tp", "[", ":", ",", ":", ",", "-", "1", "]", "==", "-", "2.", ",", "kp2d_tp", "[", ":", ",", ":", ",", "-", "1", "]", "==", "-", "2.", ")", "\n", "pred_keypoints_2d", "[", "invalid_mask", "]", "=", "-", "2.", "\n", "image_kp2d_projection", "=", "visualizer", ".", "draw_skeleton_multiperson", "(", "image", ".", "copy", "(", ")", ",", "pred_keypoints_2d", ",", "bones", "=", "bones", ",", "cm", "=", "cm", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}_{}_projection.jpg'", ".", "format", "(", "save_dir", ",", "_", ",", "img_bsname", ")", ",", "image_kp2d_projection", ")", "\n", "\n", "", "for", "pinds", ",", "(", "person_center", ",", "subject_id", ")", "in", "enumerate", "(", "zip", "(", "person_centers", ",", "subject_ids", ")", ")", ":", "\n", "                ", "y", ",", "x", "=", "person_center", ".", "astype", "(", "np", ".", "int", ")", "\n", "if", "y", ">", "0", "and", "x", ">", "0", ":", "\n", "                    ", "cv2", ".", "circle", "(", "image_kp2d", ",", "(", "x", ",", "y", ")", ",", "6", ",", "[", "0", ",", "0", ",", "255", "]", ",", "-", "1", ")", "\n", "text", "=", "'{}'", ".", "format", "(", "subject_id", ")", "\n", "if", "'depth_info'", "in", "r", ":", "\n", "                        ", "depth_info", "=", "r", "[", "'depth_info'", "]", "[", "inds", "]", "[", "pinds", "]", "\n", "text", "+=", "'{}'", ".", "format", "(", "depth_info", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "#'\\n {}\\n {}\\n {}\\n {}\\n'.format(name_dict['depth_id'][depth_info[0].item()], name_dict['age'][depth_info[1].item()], \\", "\n", "#    name_dict['body_type'][depth_info[2].item()], name_dict['gender'][depth_info[3].item()])", "\n", "#cv2.putText(image_kp2d, text, (x,y),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,255),1)            ", "\n", "\n", "", "", "", "centermap_color", "=", "make_heatmaps", "(", "image", ".", "copy", "(", ")", ",", "r", "[", "'centermap'", "]", "[", "inds", "]", ")", "\n", "image_vis", "=", "np", ".", "concatenate", "(", "[", "image_kp2d", ",", "centermap_color", "]", ",", "1", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}_{}_centermap.jpg'", ".", "format", "(", "save_dir", ",", "_", ",", "img_bsname", ")", ",", "image_vis", ")", "\n", "if", "'heatmap'", "in", "r", ":", "\n", "                ", "heatmap_color", "=", "make_heatmaps", "(", "image", ".", "copy", "(", ")", ",", "r", "[", "'heatmap'", "]", "[", "inds", "]", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}_{}_heatmap.jpg'", ".", "format", "(", "save_dir", ",", "_", ",", "img_bsname", ")", ",", "heatmap_color", ")", "\n", "\n", "# if 'valid_centermap3d_mask' in r:", "\n", "#     for rind, c3d_mask in enumerate(r['valid_centermap3d_mask']):", "\n", "#         if c3d_mask:", "\n", "#             centermap_3d = r['centermap_3d'][rind]", "\n", "#             visualize_3d_hmap(centermap_3d, '{}/{}_{}'.format(save_dir, _, rind))", "\n", "\n", "", "person_centers_onmap", "=", "(", "(", "r", "[", "'person_centers'", "]", "[", "inds", "]", ".", "numpy", "(", ")", "+", "1", ")", "/", "2.0", "*", "(", "args", "(", ")", ".", "centermap_size", "-", "1", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "positive_position", "=", "torch", ".", "stack", "(", "torch", ".", "where", "(", "r", "[", "'centermap'", "]", "[", "inds", ",", "0", "]", "==", "1", ")", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "", "if", "with_smpl", "and", "r", "[", "'valid_masks'", "]", "[", "0", ",", "0", ",", "4", "]", ":", "\n", "            ", "params", ",", "subject_ids", "=", "r", "[", "'params'", "]", "[", "0", "]", ",", "r", "[", "'subject_ids'", "]", "[", "0", "]", "\n", "image", "=", "r", "[", "'image'", "]", "[", "0", "]", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "valid_mask", "=", "torch", ".", "where", "(", "r", "[", "'valid_masks'", "]", "[", "0", ",", ":", ",", "4", "]", ")", "[", "0", "]", "\n", "subject_ids", "=", "subject_ids", "[", "valid_mask", "]", "\n", "pose", "=", "params", "[", "valid_mask", "]", "[", ":", ",", ":", "66", "]", ".", "float", "(", ")", "\n", "if", "r", "[", "'valid_masks'", "]", "[", "0", ",", "valid_mask", ",", "5", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "betas", "=", "params", "[", "valid_mask", "]", "[", ":", ",", "-", "10", ":", "]", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "betas", "=", "torch", ".", "zeros", "(", "len", "(", "pose", ")", ",", "10", ")", "\n", "", "pose", "=", "torch", ".", "cat", "(", "[", "pose", ",", "torch", ".", "zeros", "(", "len", "(", "pose", ")", ",", "6", ")", "]", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "if", "'kid_shape_offsets'", "in", "r", ":", "\n", "                ", "kso_vmask", "=", "r", "[", "'kid_shape_offsets'", "]", "[", "0", "]", "[", "valid_mask", "]", "!=", "-", "1", "\n", "betas", "=", "torch", ".", "cat", "(", "[", "betas", ",", "torch", ".", "zeros", "(", "len", "(", "betas", ")", ",", "1", ")", "]", ",", "1", ")", "\n", "if", "(", "kso_vmask", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "betas", "[", "kso_vmask", ",", "-", "1", "]", "=", "r", "[", "'kid_shape_offsets'", "]", "[", "0", "]", "[", "valid_mask", "]", "[", "kso_vmask", "]", "\n", "\n", "", "verts", ",", "joints", "=", "smpl_family", "(", "poses", "=", "pose", ",", "betas", "=", "betas", ")", "\n", "print", "(", "'using kid shape offset to create mesh'", ")", "\n", "", "else", ":", "\n", "                ", "verts", ",", "joints", "=", "smpl", "(", "poses", "=", "pose", ",", "betas", "=", "betas", ",", "get_skin", "=", "True", ")", "\n", "\n", "", "if", "test_projection_part", "and", "r", "[", "'cam_mask'", "]", "[", "inds", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "if", "r", "[", "'cam_mask'", "]", "[", "0", "]", "[", "valid_mask", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "trans", "=", "denormalize_cam_params_to_trans", "(", "r", "[", "'cams'", "]", "[", "0", "]", "[", "valid_mask", "]", ".", "clone", "(", ")", ",", "positive_constrain", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "trans", "=", "r", "[", "'root_trans'", "]", "[", "0", "]", "[", "valid_mask", "]", "\n", "\n", "", "pred_keypoints_2d", "=", "perspective_projection", "(", "joints", ",", "translation", "=", "trans", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "normalize", "=", "False", ")", "+", "512", "//", "2", "\n", "\n", "render_img", "=", "visualizer", ".", "visualize_renderer_verts_list", "(", "[", "verts", ".", "cuda", "(", ")", "]", ",", "trans", "=", "[", "trans", ".", "cuda", "(", ")", "]", ",", "images", "=", "image", "[", "None", "]", ")", "[", "0", "]", "\n", "rendered_img_bv", "=", "visualizer", ".", "visualize_renderer_verts_list", "(", "[", "verts", ".", "cuda", "(", ")", "]", ",", "trans", "=", "[", "trans", ".", "cuda", "(", ")", "]", ",", "bird_view", "=", "True", ",", "auto_cam", "=", "True", ")", "[", "0", "]", "\n", "person_centers", "=", "(", "r", "[", "'person_centers'", "]", "[", "0", "]", ".", "numpy", "(", ")", "+", "1", ")", "*", "img_size", "/", "2.0", "\n", "image", "=", "np", ".", "array", "(", "image", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "len", "(", "person_centers", ")", "==", "len", "(", "trans", ")", ":", "\n", "                    ", "for", "pinds", ",", "person_center", "in", "enumerate", "(", "person_centers", ")", ":", "\n", "                        ", "y", ",", "x", "=", "person_center", ".", "astype", "(", "np", ".", "int", ")", "\n", "if", "y", ">", "0", "and", "x", ">", "0", ":", "\n", "                            ", "cv2", ".", "circle", "(", "np", ".", "array", "(", "image", ")", ",", "(", "x", ",", "y", ")", ",", "6", ",", "[", "0", ",", "0", ",", "255", "]", ",", "-", "1", ")", "\n", "text", "=", "'{:.2f}'", ".", "format", "(", "trans", "[", "pinds", ",", "2", "]", ")", "\n", "print", "(", "(", "x", ",", "y", ")", ",", "text", ")", "\n", "cv2", ".", "putText", "(", "image", ",", "text", ",", "(", "x", ",", "y", ")", ",", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "3", ",", "(", "255", ",", "0", ",", "255", ")", ",", "3", ")", "\n", "", "", "", "cv2", ".", "imwrite", "(", "'{}/mesh_{}.png'", ".", "format", "(", "save_dir", ",", "_", ")", ",", "np", ".", "concatenate", "(", "[", "image", ",", "render_img", ",", "rendered_img_bv", "]", ",", "1", ")", ")", "#image_kp2d_projection_smpl24, image_kp2d_projection_extra30", "\n", "", "else", ":", "\n", "                ", "verts", "[", ":", ",", ":", ",", "2", "]", "+=", "5", "\n", "render_img", "=", "visualizer", ".", "visualize_renderer_verts_list", "(", "[", "verts", ".", "cuda", "(", ")", "]", ",", "images", "=", "image", "[", "None", "]", ")", "[", "0", "]", "\n", "cv2", ".", "imwrite", "(", "'{}/mesh_{}.png'", ".", "format", "(", "save_dir", ",", "_", ")", ",", "render_img", ")", "\n", "", "", "j3ds", "=", "r", "[", "'kp_3d'", "]", "[", "0", ",", "0", "]", "\n", "image", "=", "r", "[", "'image'", "]", "[", "0", "]", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "if", "r", "[", "'valid_masks'", "]", "[", "0", ",", "0", ",", "1", "]", ":", "\n", "            ", "pj2d", "=", "(", "j3ds", "[", ":", ",", ":", "2", "]", "+", "1", ")", "*", "img_size", "/", "2.0", "\n", "pj2d", "[", "j3ds", "[", ":", ",", "-", "1", "]", "==", "-", "2.", "]", "=", "-", "2.", "\n", "image_pkp3d", "=", "visualizer", ".", "draw_skeleton", "(", "image", ".", "copy", "(", ")", ",", "pj2d", ",", "bones", "=", "bones", ",", "cm", "=", "cm", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/pkp3d_{}_{}.png'", ".", "format", "(", "save_dir", ",", "_", ",", "r", "[", "'subject_ids'", "]", "[", "0", ",", "0", "]", ")", ",", "image_pkp3d", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.MuPoTS": [[7, 222], ["super().__init__", "os.path.join", "os.path.join", "MuPoTS..load_data", "constants.joint_mapping", "constants.joint_mapping", "logging.info", "annots.items", "OrderedDict", "enumerate", "os.path.join", "zip", "kp3ds[].mean", "numpy.array", "numpy.array", "len", "numpy.concatenate", "pycocotools.coco.COCO", "pycocotools.coco.COCO.anns.keys", "range", "numpy.savez", "print", "len", "range", "osp.join", "sio.savemat", "print", "osp.join", "sio.savemat", "print", "print", "len", "range", "os.path.join", "print", "MuPoTS.calculate_score", "os.path.exists", "MuPoTS..pack_data", "sorted", "cv2.imread", "np.concatenate.append", "MuPoTS..map_kps", "kp3ds.append", "numpy.array", "numpy.array", "vis_masks.append", "numpy.array", "numpy.array", "os.path.join", "numpy.array", "print", "os.path.join", "os.path.join", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "gt[].split", "preds[].copy", "numpy.take", "gt[].tolist", "preds[].copy", "pred_save.append", "open", "json.dump", "MuPoTS..__len__", "numpy.load", "sequence_dict[].keys", "os.path.join", "MuPoTS..file_paths.append", "MuPoTS..map_kps", "MuPoTS.._check_kp3d_visible_parts_", "MuPoTS._check_visible", "pycocotools.coco.COCO.loadImgs", "scipy.io.loadmat", "scipy.io.loadmat", "len", "len", "len", "range", "pred_2d_save[].append", "cv2.imread", "str", "cv2.imread.copy().astype", "numpy.zeros", "MuPoTS.vis_keypoints", "cv2.imwrite", "pred_3d_save[].append", "MuPoTS.pixel2cam", "range", "numpy.array", "len", "len", "np.concatenate.transpose", "kp3ds.transpose", "univ_kp3ds.transpose", "bool", "os.path.join", "img_name[].split", "random.randrange", "preds[].copy.tolist", "range", "range", "print", "cv2.imread.copy"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.calculate_score", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.agora.pack_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__len__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._check_kp3d_visible_parts_", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_test._check_visible", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.vis_keypoints", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.pixel2cam", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["def", "MuPoTS", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "MuPoTS", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "False", ",", "split", "=", "'test'", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "MuPoTS", ",", "self", ")", ".", "__init__", "(", "train_flag", ")", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'MultiPersonTestSet/'", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "test2val_sample_ratio", "=", "10", "\n", "self", ".", "annot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'MuPoTS_annots.npz'", ")", "#'MuPoTS-3D.json'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "annot_path", ")", ":", "\n", "                ", "self", ".", "pack_data", "(", ")", "\n", "\n", "", "self", ".", "image_folder", "=", "self", ".", "data_folder", "\n", "self", ".", "load_data", "(", ")", "\n", "self", ".", "root_idx", "=", "constants", ".", "SMPL_ALL_54", "[", "'Pelvis'", "]", "\n", "self", ".", "kp2d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "MuPoTS_17", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "kp3d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "MuPoTS_17", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "logging", ".", "info", "(", "'MuPoTS dataset total {} samples, loading {} split'", ".", "format", "(", "self", ".", "__len__", "(", ")", ",", "self", ".", "split", ")", ")", "\n", "\n", "", "def", "load_data", "(", "self", ")", ":", "\n", "            ", "annots", "=", "np", ".", "load", "(", "self", ".", "annot_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "sequence_dict", "=", "{", "}", "\n", "for", "seq_name", ",", "seq_annots", "in", "annots", ".", "items", "(", ")", ":", "\n", "                ", "sequence_dict", "[", "seq_name", "]", "=", "{", "fid", ":", "'img_{:06d}.jpg'", ".", "format", "(", "fid", ")", "for", "fid", "in", "range", "(", "seq_annots", "[", "'frame_num'", "]", ")", "}", "\n", "", "sequence_dict", "=", "OrderedDict", "(", "sequence_dict", ")", "\n", "\n", "self", ".", "annots", ",", "self", ".", "file_paths", "=", "{", "}", ",", "[", "]", "\n", "for", "sid", ",", "seq_name", "in", "enumerate", "(", "sequence_dict", ")", ":", "\n", "                ", "frame_ids", "=", "sorted", "(", "sequence_dict", "[", "seq_name", "]", ".", "keys", "(", ")", ")", "\n", "for", "fid", "in", "frame_ids", ":", "\n", "                    ", "img_path", "=", "os", ".", "path", ".", "join", "(", "seq_name", ",", "sequence_dict", "[", "seq_name", "]", "[", "fid", "]", ")", "\n", "self", ".", "file_paths", ".", "append", "(", "img_path", ")", "\n", "self", ".", "annots", "[", "img_path", "]", "=", "[", "annots", "[", "seq_name", "]", "[", "'kp2ds'", "]", "[", "fid", "]", ",", "annots", "[", "seq_name", "]", "[", "'kp3ds'", "]", "[", "fid", "]", ",", "annots", "[", "seq_name", "]", "[", "'track_ids'", "]", "[", "fid", "]", ",", "annots", "[", "seq_name", "]", "[", "'camMats'", "]", "[", "fid", "]", "]", "\n", "\n", "", "", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "img_name", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "kp2ds", ",", "kp3ds", "=", "[", "]", ",", "[", "]", "\n", "for", "kp2d", ",", "kp3d", "in", "zip", "(", "self", ".", "annots", "[", "img_name", "]", "[", "0", "]", ",", "self", ".", "annots", "[", "img_name", "]", "[", "1", "]", ")", ":", "\n", "                ", "kp2ds", ".", "append", "(", "self", ".", "map_kps", "(", "kp2d", ",", "maps", "=", "self", ".", "kp2d_mapper", ")", ")", "\n", "kp3d", "=", "self", ".", "map_kps", "(", "kp3d", "/", "1000.", ",", "maps", "=", "self", ".", "kp3d_mapper", ")", "\n", "kp3ds", ".", "append", "(", "kp3d", ")", "\n", "\n", "", "kp2ds", ",", "kp3ds", "=", "np", ".", "array", "(", "kp2ds", ")", ",", "np", ".", "array", "(", "kp3ds", ")", "\n", "root_trans", "=", "kp3ds", "[", ":", ",", "self", ".", "root_inds", "]", ".", "mean", "(", "1", ")", "\n", "valid_masks", "=", "np", ".", "array", "(", "[", "self", ".", "_check_kp3d_visible_parts_", "(", "kp3d", ")", "for", "kp3d", "in", "kp3ds", "]", ")", "\n", "kp3ds", "-=", "root_trans", "[", ":", ",", "None", "]", "\n", "kp3ds", "[", "~", "valid_masks", "]", "=", "-", "2.", "\n", "fx", ",", "fy", ",", "cx", ",", "cy", "=", "self", ".", "annots", "[", "img_name", "]", "[", "3", "]", "\n", "camMats", "=", "np", ".", "array", "(", "[", "[", "fx", ",", "0", ",", "cx", "]", ",", "[", "0", ",", "fy", ",", "cy", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "person_num", "=", "len", "(", "kp2ds", ")", "\n", "\n", "vis_masks", "=", "[", "]", "\n", "for", "kp2d", "in", "kp2ds", ":", "\n", "                ", "vis_masks", ".", "append", "(", "_check_visible", "(", "kp2d", ",", "get_mask", "=", "True", ")", ")", "\n", "", "kp2ds", "=", "np", ".", "concatenate", "(", "[", "kp2ds", ",", "np", ".", "array", "(", "vis_masks", ")", "[", ":", ",", ":", ",", "None", "]", "]", ",", "2", ")", "\n", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "None", ",", "'vmask_2d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "True", ",", "True", "]", "for", "_", "in", "range", "(", "person_num", ")", "]", ")", ",", "'vmask_3d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", "True", "]", "for", "_", "in", "range", "(", "person_num", ")", "]", ")", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "root_trans", ",", "'verts'", ":", "None", ",", "'camMats'", ":", "camMats", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'mupots'", "}", "\n", "\n", "return", "img_info", "\n", "\n", "", "def", "pack_data", "(", "self", ")", ":", "\n", "            ", "cam_mat", "=", "{", "}", "\n", "db", "=", "COCO", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'MuPoTS-3D.json'", ")", ")", "\n", "for", "aid", "in", "db", ".", "anns", ".", "keys", "(", ")", ":", "\n", "                ", "ann", "=", "db", ".", "anns", "[", "aid", "]", "\n", "image_id", "=", "ann", "[", "'image_id'", "]", "\n", "img", "=", "db", ".", "loadImgs", "(", "image_id", ")", "[", "0", "]", "\n", "img_path", "=", "img", "[", "'file_name'", "]", "\n", "fx", ",", "fy", ",", "cx", ",", "cy", "=", "img", "[", "'intrinsic'", "]", "\n", "intrinsic_params", "=", "np", ".", "array", "(", "[", "fx", ",", "fy", ",", "cx", ",", "cy", "]", ")", "\n", "if", "img_path", "not", "in", "cam_mat", ":", "\n", "                    ", "cam_mat", "[", "img_path", "]", "=", "intrinsic_params", "\n", "\n", "", "", "import", "scipy", ".", "io", "\n", "annots", "=", "{", "}", "\n", "track_id_cache", "=", "0", "\n", "for", "seq_id", "in", "range", "(", "1", ",", "21", ")", ":", "\n", "                ", "sequence_name", "=", "'TS{}'", ".", "format", "(", "seq_id", ")", "\n", "print", "(", "'packing sequence '", ",", "sequence_name", ")", "\n", "annotation_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "sequence_name", ",", "'annot.mat'", ")", "\n", "occlusion_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "sequence_name", ",", "'occlusion.mat'", ")", "\n", "annotation", "=", "scipy", ".", "io", ".", "loadmat", "(", "annotation_file_path", ")", "[", "'annotations'", "]", "\n", "occlusion", "=", "scipy", ".", "io", ".", "loadmat", "(", "occlusion_file_path", ")", "[", "'occlusion_labels'", "]", "\n", "\n", "frame_num", "=", "len", "(", "annotation", ")", "\n", "assert", "frame_num", "==", "len", "(", "occlusion", ")", ",", "'occlusion number mismatch, annotation has {}, while occlusion has {}'", ".", "format", "(", "frame_num", ",", "len", "(", "occlusion", ")", ")", "\n", "subject_num", "=", "len", "(", "annotation", "[", "0", "]", ")", "\n", "\n", "seq_kp2ds", "=", "np", ".", "zeros", "(", "(", "frame_num", ",", "subject_num", ",", "17", ",", "2", ")", ")", "\n", "seq_kp3ds", "=", "np", ".", "zeros", "(", "(", "frame_num", ",", "subject_num", ",", "17", ",", "3", ")", ")", "\n", "seq_univ_kp3ds", "=", "np", ".", "zeros", "(", "(", "frame_num", ",", "subject_num", ",", "17", ",", "3", ")", ")", "\n", "seq_valid_flag", "=", "np", ".", "zeros", "(", "(", "frame_num", ",", "subject_num", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "seq_joint_occlusion", "=", "np", ".", "zeros", "(", "(", "frame_num", ",", "subject_num", ",", "17", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "seq_track_ids", "=", "np", ".", "zeros", "(", "(", "frame_num", ",", "subject_num", ")", ")", "\n", "seq_camMats", "=", "np", ".", "zeros", "(", "(", "frame_num", ",", "4", ")", ")", "\n", "for", "frame_id", "in", "range", "(", "len", "(", "annotation", ")", ")", ":", "\n", "                    ", "assert", "subject_num", "==", "len", "(", "annotation", "[", "frame_id", "]", ")", ",", "'subject number mismatch, 0-th {}, while {} has {}'", ".", "format", "(", "subject_num", ",", "len", "(", "annotation", "[", "frame_id", "]", ")", ")", "\n", "for", "subject_id", "in", "range", "(", "subject_num", ")", ":", "\n", "                        ", "subj_annot", "=", "annotation", "[", "frame_id", "]", "[", "subject_id", "]", "[", "0", ",", "0", "]", "\n", "kp2ds", ",", "kp3ds", ",", "univ_kp3ds", ",", "valid_flag", "=", "subj_annot", "[", "0", "]", ",", "subj_annot", "[", "1", "]", ",", "subj_annot", "[", "2", "]", ",", "subj_annot", "[", "3", "]", "\n", "joint_occlusion", "=", "occlusion", "[", "frame_id", "]", "[", "subject_id", "]", "\n", "#print(joint_occlusion.shape, kp2ds.shape, kp3ds.shape, univ_kp3ds.shape, valid_flag)", "\n", "#(1, 17) (2, 17) (3, 17) (3, 17) [[1]]", "\n", "\n", "seq_kp2ds", "[", "frame_id", ",", "subject_id", "]", "=", "kp2ds", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "seq_kp3ds", "[", "frame_id", ",", "subject_id", "]", "=", "kp3ds", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "seq_univ_kp3ds", "[", "frame_id", ",", "subject_id", "]", "=", "univ_kp3ds", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "\n", "seq_valid_flag", "[", "frame_id", ",", "subject_id", "]", "=", "bool", "(", "valid_flag", "[", "0", ",", "0", "]", ")", "\n", "seq_joint_occlusion", "[", "frame_id", ",", "subject_id", "]", "=", "joint_occlusion", "[", "0", "]", "\n", "seq_track_ids", "[", "frame_id", ",", "subject_id", "]", "=", "subject_id", "+", "track_id_cache", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "sequence_name", ",", "'img_{:06d}.jpg'", ".", "format", "(", "frame_id", ")", ")", "\n", "seq_camMats", "[", "frame_id", "]", "=", "cam_mat", "[", "img_path", "]", "\n", "if", "not", "seq_valid_flag", "[", "frame_id", ",", "subject_id", "]", ":", "\n", "                            ", "print", "(", "sequence_name", ",", "frame_id", ",", "subject_id", ",", "'invalid'", ",", "valid_flag", ")", "\n", "\n", "", "", "", "annots", "[", "sequence_name", "]", "=", "{", "'kp2ds'", ":", "seq_kp2ds", ",", "'kp3ds'", ":", "seq_kp3ds", ",", "'univ_kp3ds'", ":", "seq_univ_kp3ds", ",", "'track_ids'", ":", "seq_track_ids", ",", "'camMats'", ":", "seq_camMats", ",", "'valid_flag'", ":", "seq_valid_flag", ",", "'joint_occlusion'", ":", "seq_joint_occlusion", ",", "'frame_num'", ":", "frame_num", ",", "'subject_num'", ":", "subject_num", "}", "\n", "track_id_cache", "+=", "subject_num", "\n", "\n", "", "np", ".", "savez", "(", "self", ".", "annot_path", ",", "annots", "=", "annots", ")", "\n", "\n", "", "def", "evaluate_relative_pose", "(", "self", ",", "preds", ",", "result_dir", ")", ":", "\n", "\n", "            ", "print", "(", "'Evaluation start...'", ")", "\n", "gts", "=", "self", ".", "data", "\n", "sample_num", "=", "len", "(", "preds", ")", "\n", "joint_num", "=", "self", ".", "original_joint_num", "\n", "\n", "pred_2d_save", "=", "{", "}", "\n", "pred_3d_save", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "sample_num", ")", ":", "\n", "\n", "                ", "gt", "=", "gts", "[", "n", "]", "\n", "f", "=", "gt", "[", "'f'", "]", "\n", "c", "=", "gt", "[", "'c'", "]", "\n", "bbox", "=", "gt", "[", "'bbox'", "]", "\n", "gt_3d_root", "=", "gt", "[", "'root_cam'", "]", "\n", "img_name", "=", "gt", "[", "'img_path'", "]", ".", "split", "(", "'/'", ")", "\n", "img_name", "=", "img_name", "[", "-", "2", "]", "+", "'_'", "+", "img_name", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "# e.g., TS1_img_0001", "\n", "\n", "# restore coordinates to original space", "\n", "pred_2d_kpt", "=", "preds", "[", "n", "]", ".", "copy", "(", ")", "\n", "# only consider eval_joint", "\n", "pred_2d_kpt", "=", "np", ".", "take", "(", "pred_2d_kpt", ",", "self", ".", "eval_joint", ",", "axis", "=", "0", ")", "\n", "pred_2d_kpt", "[", ":", ",", "2", "]", "=", "(", "pred_2d_kpt", "[", ":", ",", "2", "]", "/", "cfg", ".", "depth_dim", "*", "2", "-", "1", ")", "*", "(", "cfg", ".", "bbox_3d_shape", "[", "0", "]", "/", "2", ")", "+", "gt_3d_root", "[", "2", "]", "\n", "\n", "# 2d kpt save", "\n", "if", "img_name", "in", "pred_2d_save", ":", "\n", "                    ", "pred_2d_save", "[", "img_name", "]", ".", "append", "(", "pred_2d_kpt", "[", ":", ",", ":", "2", "]", ")", "\n", "", "else", ":", "\n", "                    ", "pred_2d_save", "[", "img_name", "]", "=", "[", "pred_2d_kpt", "[", ":", ",", ":", "2", "]", "]", "\n", "\n", "", "vis", "=", "False", "\n", "if", "vis", ":", "\n", "                    ", "cvimg", "=", "cv2", ".", "imread", "(", "gt", "[", "'img_path'", "]", ",", "cv2", ".", "IMREAD_COLOR", "|", "cv2", ".", "IMREAD_IGNORE_ORIENTATION", ")", "\n", "filename", "=", "str", "(", "random", ".", "randrange", "(", "1", ",", "500", ")", ")", "\n", "tmpimg", "=", "cvimg", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "tmpkps", "=", "np", ".", "zeros", "(", "(", "3", ",", "joint_num", ")", ")", "\n", "tmpkps", "[", "0", ",", ":", "]", ",", "tmpkps", "[", "1", ",", ":", "]", "=", "pred_2d_kpt", "[", ":", ",", "0", "]", ",", "pred_2d_kpt", "[", ":", ",", "1", "]", "\n", "tmpkps", "[", "2", ",", ":", "]", "=", "1", "\n", "tmpimg", "=", "vis_keypoints", "(", "tmpimg", ",", "tmpkps", ",", "self", ".", "skeleton", ")", "\n", "cv2", ".", "imwrite", "(", "filename", "+", "'_output.jpg'", ",", "tmpimg", ")", "\n", "\n", "# 3d kpt save", "\n", "", "if", "img_name", "in", "pred_3d_save", ":", "\n", "                    ", "pred_3d_save", "[", "img_name", "]", ".", "append", "(", "pred_3d_kpt", ")", "\n", "", "else", ":", "\n", "                    ", "pred_3d_save", "[", "img_name", "]", "=", "[", "pred_3d_kpt", "]", "\n", "\n", "", "", "output_path", "=", "osp", ".", "join", "(", "result_dir", ",", "'preds_2d_kpt_mupots.mat'", ")", "\n", "sio", ".", "savemat", "(", "output_path", ",", "pred_2d_save", ")", "\n", "print", "(", "\"Testing result is saved at \"", "+", "output_path", ")", "\n", "output_path", "=", "osp", ".", "join", "(", "result_dir", ",", "'preds_3d_kpt_mupots.mat'", ")", "\n", "sio", ".", "savemat", "(", "output_path", ",", "pred_3d_save", ")", "\n", "print", "(", "\"Testing result is saved at \"", "+", "output_path", ")", "\n", "\n", "", "def", "evaluate_pelvis_depth", "(", "self", ",", "preds", ",", "result_dir", ")", ":", "\n", "            ", "print", "(", "'Evaluation start...'", ")", "\n", "pred_save", "=", "[", "]", "\n", "\n", "gts", "=", "self", ".", "data", "\n", "sample_num", "=", "len", "(", "preds", ")", "\n", "for", "n", "in", "range", "(", "sample_num", ")", ":", "\n", "\n", "                ", "gt", "=", "gts", "[", "n", "]", "\n", "image_id", "=", "gt", "[", "'image_id'", "]", "\n", "f", "=", "gt", "[", "'f'", "]", "\n", "c", "=", "gt", "[", "'c'", "]", "\n", "bbox", "=", "gt", "[", "'bbox'", "]", ".", "tolist", "(", ")", "\n", "score", "=", "gt", "[", "'score'", "]", "\n", "\n", "# restore coordinates to original space", "\n", "pred_root", "=", "preds", "[", "n", "]", ".", "copy", "(", ")", "\n", "pred_root", "[", "0", "]", "=", "pred_root", "[", "0", "]", "/", "64", "*", "bbox", "[", "2", "]", "+", "bbox", "[", "0", "]", "\n", "pred_root", "[", "1", "]", "=", "pred_root", "[", "1", "]", "/", "64", "*", "bbox", "[", "3", "]", "+", "bbox", "[", "1", "]", "\n", "\n", "# back project to camera coordinate system", "\n", "pred_root", "=", "pixel2cam", "(", "pred_root", "[", "None", ",", ":", "]", ",", "f", ",", "c", ")", "[", "0", "]", "\n", "\n", "pred_save", ".", "append", "(", "{", "'image_id'", ":", "image_id", ",", "'root_cam'", ":", "pred_root", ".", "tolist", "(", ")", ",", "'bbox'", ":", "bbox", ",", "'score'", ":", "score", "}", ")", "\n", "\n", "", "output_path", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "'bbox_root_mupots_output.json'", ")", "\n", "with", "open", "(", "output_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "pred_save", ",", "f", ")", "\n", "", "print", "(", "\"Test result is saved at \"", "+", "output_path", ")", "\n", "\n", "calculate_score", "(", "output_path", ",", "self", ".", "annot_path", ",", "250", ")", "\n", "", "", "return", "MuPoTS", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.calculate_score": [[223, 287], ["json.load.sort", "pycocotools.coco.COCO", "len", "range", "range", "print", "open", "json.load", "len", "pycocotools.coco.COCO.getAnnIds", "pycocotools.coco.COCO.loadAnns", "len", "enumerate", "precision.append", "recall.append", "pycocotools.coco.COCO.loadImgs", "str", "numpy.array", "math.sqrt", "len", "str", "pycocotools.coco.COCO.anns.items", "numpy.sum", "str", "range", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "calculate_score", "(", "output_path", ",", "annot_path", ",", "thr", "=", "250", ")", ":", "\n", "## Refer to https://github.com/mks0601/3DMPPE_ROOTNET_RELEASE/blob/master/data/MuPoTS/MuPoTS_eval.py", "\n", "    ", "with", "open", "(", "output_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "output", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# AP measure", "\n", "", "def", "return_score", "(", "pred", ")", ":", "\n", "        ", "return", "pred", "[", "'score'", "]", "\n", "", "output", ".", "sort", "(", "reverse", "=", "True", ",", "key", "=", "return_score", ")", "\n", "\n", "db", "=", "COCO", "(", "annot_path", ")", "\n", "gt_num", "=", "len", "(", "[", "k", "for", "k", ",", "v", "in", "db", ".", "anns", ".", "items", "(", ")", "if", "v", "[", "'is_valid'", "]", "==", "1", "]", ")", "\n", "tp_acc", "=", "0", "\n", "fp_acc", "=", "0", "\n", "precision", "=", "[", "]", ";", "recall", "=", "[", "]", ";", "\n", "is_matched", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "len", "(", "output", ")", ")", ":", "\n", "        ", "image_id", "=", "output", "[", "n", "]", "[", "'image_id'", "]", "\n", "pred_root", "=", "output", "[", "n", "]", "[", "'root_cam'", "]", "\n", "score", "=", "output", "[", "n", "]", "[", "'score'", "]", "\n", "\n", "img", "=", "db", ".", "loadImgs", "(", "image_id", ")", "[", "0", "]", "\n", "ann_ids", "=", "db", ".", "getAnnIds", "(", "image_id", ")", "\n", "anns", "=", "db", ".", "loadAnns", "(", "ann_ids", ")", "\n", "valid_frame_num", "=", "len", "(", "[", "item", "for", "item", "in", "anns", "if", "item", "[", "'is_valid'", "]", "==", "1", "]", ")", "\n", "if", "valid_frame_num", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "str", "(", "image_id", ")", "not", "in", "is_matched", ":", "\n", "            ", "is_matched", "[", "str", "(", "image_id", ")", "]", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "anns", ")", ")", "]", "\n", "\n", "", "min_dist", "=", "9999", "\n", "save_ann_id", "=", "-", "1", "\n", "for", "ann_id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "if", "ann", "[", "'is_valid'", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "gt_root", "=", "np", ".", "array", "(", "ann", "[", "'keypoints_cam'", "]", ")", "\n", "root_idx", "=", "14", "\n", "gt_root", "=", "gt_root", "[", "root_idx", "]", "\n", "\n", "dist", "=", "math", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "pred_root", "-", "gt_root", ")", "**", "2", ")", ")", "\n", "if", "min_dist", ">", "dist", ":", "\n", "                ", "min_dist", "=", "dist", "\n", "save_ann_id", "=", "ann_id", "\n", "\n", "", "", "is_tp", "=", "False", "\n", "if", "save_ann_id", "!=", "-", "1", "and", "min_dist", "<", "thr", ":", "\n", "            ", "if", "is_matched", "[", "str", "(", "image_id", ")", "]", "[", "save_ann_id", "]", "==", "0", ":", "\n", "                ", "is_tp", "=", "True", "\n", "is_matched", "[", "str", "(", "image_id", ")", "]", "[", "save_ann_id", "]", "=", "1", "\n", "\n", "", "", "if", "is_tp", ":", "\n", "            ", "tp_acc", "+=", "1", "\n", "", "else", ":", "\n", "            ", "fp_acc", "+=", "1", "\n", "\n", "", "precision", ".", "append", "(", "tp_acc", "/", "(", "tp_acc", "+", "fp_acc", ")", ")", "\n", "recall", ".", "append", "(", "tp_acc", "/", "gt_num", ")", "\n", "\n", "", "AP", "=", "0", "\n", "for", "n", "in", "range", "(", "len", "(", "precision", ")", "-", "1", ")", ":", "\n", "        ", "AP", "+=", "precision", "[", "n", "+", "1", "]", "*", "(", "recall", "[", "n", "+", "1", "]", "-", "recall", "[", "n", "]", ")", "\n", "\n", "", "print", "(", "'AP_root: '", "+", "str", "(", "AP", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.cam2pixel": [[289, 295], ["numpy.concatenate"], "function", ["None"], ["", "def", "cam2pixel", "(", "cam_coord", ",", "f", ",", "c", ")", ":", "\n", "    ", "x", "=", "cam_coord", "[", ":", ",", "0", "]", "/", "(", "cam_coord", "[", ":", ",", "2", "]", "+", "1e-8", ")", "*", "f", "[", "0", "]", "+", "c", "[", "0", "]", "\n", "y", "=", "cam_coord", "[", ":", ",", "1", "]", "/", "(", "cam_coord", "[", ":", ",", "2", "]", "+", "1e-8", ")", "*", "f", "[", "1", "]", "+", "c", "[", "1", "]", "\n", "z", "=", "cam_coord", "[", ":", ",", "2", "]", "\n", "img_coord", "=", "np", ".", "concatenate", "(", "(", "x", "[", ":", ",", "None", "]", ",", "y", "[", ":", ",", "None", "]", ",", "z", "[", ":", ",", "None", "]", ")", ",", "1", ")", "\n", "return", "img_coord", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.pixel2cam": [[296, 302], ["numpy.concatenate"], "function", ["None"], ["", "def", "pixel2cam", "(", "pixel_coord", ",", "f", ",", "c", ")", ":", "\n", "    ", "x", "=", "(", "pixel_coord", "[", ":", ",", "0", "]", "-", "c", "[", "0", "]", ")", "/", "f", "[", "0", "]", "*", "pixel_coord", "[", ":", ",", "2", "]", "\n", "y", "=", "(", "pixel_coord", "[", ":", ",", "1", "]", "-", "c", "[", "1", "]", ")", "/", "f", "[", "1", "]", "*", "pixel_coord", "[", ":", ",", "2", "]", "\n", "z", "=", "pixel_coord", "[", ":", ",", "2", "]", "\n", "cam_coord", "=", "np", ".", "concatenate", "(", "(", "x", "[", ":", ",", "None", "]", ",", "y", "[", ":", ",", "None", "]", ",", "z", "[", ":", ",", "None", "]", ")", ",", "1", ")", "\n", "return", "cam_coord", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.world2cam": [[303, 306], ["numpy.dot().transpose", "t.reshape", "numpy.dot", "world_coord.transpose"], "function", ["None"], ["", "def", "world2cam", "(", "world_coord", ",", "R", ",", "t", ")", ":", "\n", "    ", "cam_coord", "=", "np", ".", "dot", "(", "R", ",", "world_coord", ".", "transpose", "(", "1", ",", "0", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", "+", "t", ".", "reshape", "(", "1", ",", "3", ")", "\n", "return", "cam_coord", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.get_bbox": [[307, 323], ["numpy.zeros", "numpy.min", "numpy.min", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "get_bbox", "(", "joint_img", ")", ":", "\n", "# bbox extract from keypoint coordinates", "\n", "    ", "bbox", "=", "np", ".", "zeros", "(", "(", "4", ")", ")", "\n", "xmin", "=", "np", ".", "min", "(", "joint_img", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "joint_img", "[", ":", ",", "1", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "joint_img", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "joint_img", "[", ":", ",", "1", "]", ")", "\n", "width", "=", "xmax", "-", "xmin", "-", "1", "\n", "height", "=", "ymax", "-", "ymin", "-", "1", "\n", "\n", "bbox", "[", "0", "]", "=", "(", "xmin", "+", "xmax", ")", "/", "2.", "-", "width", "/", "2", "*", "1.2", "\n", "bbox", "[", "1", "]", "=", "(", "ymin", "+", "ymax", ")", "/", "2.", "-", "height", "/", "2", "*", "1.2", "\n", "bbox", "[", "2", "]", "=", "width", "*", "1.2", "\n", "bbox", "[", "3", "]", "=", "height", "*", "1.2", "\n", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.process_bbox": [[324, 351], ["numpy.max", "numpy.max", "numpy.min", "numpy.min", "numpy.array", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "process_bbox", "(", "bbox", ",", "width", ",", "height", ")", ":", "\n", "# sanitize bboxes", "\n", "    ", "x", ",", "y", ",", "w", ",", "h", "=", "bbox", "\n", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "x", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "y", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "w", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "h", "-", "1", ")", ")", ")", ")", "\n", "if", "w", "*", "h", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n", "# aspect ratio preserving bbox", "\n", "", "w", "=", "bbox", "[", "2", "]", "\n", "h", "=", "bbox", "[", "3", "]", "\n", "c_x", "=", "bbox", "[", "0", "]", "+", "w", "/", "2.", "\n", "c_y", "=", "bbox", "[", "1", "]", "+", "h", "/", "2.", "\n", "aspect_ratio", "=", "512", "/", "512", "\n", "if", "w", ">", "aspect_ratio", "*", "h", ":", "\n", "        ", "h", "=", "w", "/", "aspect_ratio", "\n", "", "elif", "w", "<", "aspect_ratio", "*", "h", ":", "\n", "        ", "w", "=", "h", "*", "aspect_ratio", "\n", "", "bbox", "[", "2", "]", "=", "w", "*", "1.25", "\n", "bbox", "[", "3", "]", "=", "h", "*", "1.25", "\n", "bbox", "[", "0", "]", "=", "c_x", "-", "bbox", "[", "2", "]", "/", "2.", "\n", "bbox", "[", "1", "]", "=", "c_y", "-", "bbox", "[", "3", "]", "/", "2.", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.multi_meshgrid": [[352, 368], ["list", "range", "tuple", "len", "template.copy", "args[].view"], "function", ["None"], ["", "def", "multi_meshgrid", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"\n    Creates a meshgrid from possibly many\n    elements (instead of only 2).\n    Returns a nd tensor with as many dimensions\n    as there are arguments\n    \"\"\"", "\n", "args", "=", "list", "(", "args", ")", "\n", "template", "=", "[", "1", "for", "_", "in", "args", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ")", ")", ":", "\n", "        ", "n", "=", "args", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "template_copy", "=", "template", ".", "copy", "(", ")", "\n", "template_copy", "[", "i", "]", "=", "n", "\n", "args", "[", "i", "]", "=", "args", "[", "i", "]", ".", "view", "(", "*", "template_copy", ")", "\n", "# there will be some broadcast magic going on", "\n", "", "return", "tuple", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.flip": [[370, 383], ["MuPoTS.multi_meshgrid", "enumerate", "isinstance", "torch.arange", "slice"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.multi_meshgrid"], ["", "def", "flip", "(", "tensor", ",", "dims", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "dims", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "dims", "=", "[", "dims", "]", "\n", "", "indices", "=", "[", "torch", ".", "arange", "(", "tensor", ".", "shape", "[", "dim", "]", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "int64", ")", "for", "dim", "in", "dims", "]", "\n", "multi_indices", "=", "multi_meshgrid", "(", "*", "indices", ")", "\n", "final_indices", "=", "[", "slice", "(", "i", ")", "for", "i", "in", "tensor", ".", "shape", "]", "\n", "for", "i", ",", "dim", "in", "enumerate", "(", "dims", ")", ":", "\n", "        ", "final_indices", "[", "dim", "]", "=", "multi_indices", "[", "i", "]", "\n", "", "flipped", "=", "tensor", "[", "final_indices", "]", "\n", "assert", "flipped", ".", "device", "==", "tensor", ".", "device", "\n", "assert", "flipped", ".", "requires_grad", "==", "tensor", ".", "requires_grad", "\n", "return", "flipped", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS._check_visible": [[385, 396], ["numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "_check_visible", "(", "joints", ",", "w", "=", "2048", ",", "h", "=", "2048", ",", "get_mask", "=", "False", ")", ":", "\n", "    ", "visibility", "=", "True", "\n", "# check that all joints are visible", "\n", "x_in", "=", "np", ".", "logical_and", "(", "joints", "[", ":", ",", "0", "]", "<", "w", ",", "joints", "[", ":", ",", "0", "]", ">=", "0", ")", "\n", "y_in", "=", "np", ".", "logical_and", "(", "joints", "[", ":", ",", "1", "]", "<", "h", ",", "joints", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "ok_pts", "=", "np", ".", "logical_and", "(", "x_in", ",", "y_in", ")", "\n", "if", "np", ".", "sum", "(", "ok_pts", ")", "<", "16", ":", "\n", "        ", "visibility", "=", "False", "\n", "", "if", "get_mask", ":", "\n", "        ", "return", "ok_pts", "\n", "", "return", "visibility", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.vis_keypoints": [[405, 436], ["matplotlib.get_cmap", "numpy.copy", "range", "cv2.addWeighted", "plt.get_cmap.", "len", "numpy.linspace", "kps[].astype", "kps[].astype", "kps[].astype", "kps[].astype", "cv2.line", "cv2.circle", "cv2.circle", "len"], "function", ["None"], ["def", "vis_keypoints", "(", "img", ",", "kps", ",", "kps_lines", ",", "kp_thresh", "=", "0.4", ",", "alpha", "=", "1", ")", ":", "\n", "\n", "# Convert from plt 0-1 RGBA colors to 0-255 BGR colors for opencv.", "\n", "    ", "cmap", "=", "plt", ".", "get_cmap", "(", "'rainbow'", ")", "\n", "colors", "=", "[", "cmap", "(", "i", ")", "for", "i", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "len", "(", "kps_lines", ")", "+", "2", ")", "]", "\n", "colors", "=", "[", "(", "c", "[", "2", "]", "*", "255", ",", "c", "[", "1", "]", "*", "255", ",", "c", "[", "0", "]", "*", "255", ")", "for", "c", "in", "colors", "]", "\n", "\n", "# Perform the drawing on a copy of the image, to allow for blending.", "\n", "kp_mask", "=", "np", ".", "copy", "(", "img", ")", "\n", "\n", "# Draw the keypoints.", "\n", "for", "l", "in", "range", "(", "len", "(", "kps_lines", ")", ")", ":", "\n", "        ", "i1", "=", "kps_lines", "[", "l", "]", "[", "0", "]", "\n", "i2", "=", "kps_lines", "[", "l", "]", "[", "1", "]", "\n", "p1", "=", "kps", "[", "0", ",", "i1", "]", ".", "astype", "(", "np", ".", "int32", ")", ",", "kps", "[", "1", ",", "i1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "p2", "=", "kps", "[", "0", ",", "i2", "]", ".", "astype", "(", "np", ".", "int32", ")", ",", "kps", "[", "1", ",", "i2", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "if", "kps", "[", "2", ",", "i1", "]", ">", "kp_thresh", "and", "kps", "[", "2", ",", "i2", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "line", "(", "\n", "kp_mask", ",", "p1", ",", "p2", ",", "\n", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "2", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "kps", "[", "2", ",", "i1", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "circle", "(", "\n", "kp_mask", ",", "p1", ",", "\n", "radius", "=", "3", ",", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "-", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "kps", "[", "2", ",", "i2", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "circle", "(", "\n", "kp_mask", ",", "p2", ",", "\n", "radius", "=", "3", ",", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "-", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "# Blend the keypoints.", "\n", "", "", "return", "cv2", ".", "addWeighted", "(", "img", ",", "1.0", "-", "alpha", ",", "kp_mask", ",", "alpha", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.vis_3d_skeleton": [[437, 473], ["matplotlib.figure", "plt.figure.add_subplot", "matplotlib.get_cmap", "range", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "fig.add_subplot.legend", "matplotlib.show", "cv2.waitKey", "plt.get_cmap.", "numpy.array", "len", "numpy.array", "numpy.array", "numpy.array", "fig.add_subplot.set_title", "fig.add_subplot.set_title", "numpy.linspace", "fig.add_subplot.plot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses.plot", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter"], ["", "def", "vis_3d_skeleton", "(", "kpt_3d", ",", "kpt_3d_vis", ",", "kps_lines", ",", "filename", "=", "None", ")", ":", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "# Convert from plt 0-1 RGBA colors to 0-255 BGR colors for opencv.", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'rainbow'", ")", "\n", "colors", "=", "[", "cmap", "(", "i", ")", "for", "i", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "len", "(", "kps_lines", ")", "+", "2", ")", "]", "\n", "colors", "=", "[", "np", ".", "array", "(", "(", "c", "[", "2", "]", ",", "c", "[", "1", "]", ",", "c", "[", "0", "]", ")", ")", "for", "c", "in", "colors", "]", "\n", "\n", "for", "l", "in", "range", "(", "len", "(", "kps_lines", ")", ")", ":", "\n", "        ", "i1", "=", "kps_lines", "[", "l", "]", "[", "0", "]", "\n", "i2", "=", "kps_lines", "[", "l", "]", "[", "1", "]", "\n", "x", "=", "np", ".", "array", "(", "[", "kpt_3d", "[", "i1", ",", "0", "]", ",", "kpt_3d", "[", "i2", ",", "0", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "kpt_3d", "[", "i1", ",", "1", "]", ",", "kpt_3d", "[", "i2", ",", "1", "]", "]", ")", "\n", "z", "=", "np", ".", "array", "(", "[", "kpt_3d", "[", "i1", ",", "2", "]", ",", "kpt_3d", "[", "i2", ",", "2", "]", "]", ")", "\n", "\n", "if", "kpt_3d_vis", "[", "i1", ",", "0", "]", ">", "0", "and", "kpt_3d_vis", "[", "i2", ",", "0", "]", ">", "0", ":", "\n", "            ", "ax", ".", "plot", "(", "x", ",", "z", ",", "-", "y", ",", "c", "=", "colors", "[", "l", "]", ",", "linewidth", "=", "2", ")", "\n", "", "if", "kpt_3d_vis", "[", "i1", ",", "0", "]", ">", "0", ":", "\n", "            ", "ax", ".", "scatter", "(", "kpt_3d", "[", "i1", ",", "0", "]", ",", "kpt_3d", "[", "i1", ",", "2", "]", ",", "-", "kpt_3d", "[", "i1", ",", "1", "]", ",", "c", "=", "colors", "[", "l", "]", ",", "marker", "=", "'o'", ")", "\n", "", "if", "kpt_3d_vis", "[", "i2", ",", "0", "]", ">", "0", ":", "\n", "            ", "ax", ".", "scatter", "(", "kpt_3d", "[", "i2", ",", "0", "]", ",", "kpt_3d", "[", "i2", ",", "2", "]", ",", "-", "kpt_3d", "[", "i2", ",", "1", "]", ",", "c", "=", "colors", "[", "l", "]", ",", "marker", "=", "'o'", ")", "\n", "\n", "", "", "if", "filename", "is", "None", ":", "\n", "        ", "ax", ".", "set_title", "(", "'3D vis'", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_title", "(", "filename", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Z Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Y Label'", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.vis_3d_multiple_skeleton": [[474, 513], ["matplotlib.figure", "plt.figure.add_subplot", "matplotlib.get_cmap", "range", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "fig.add_subplot.legend", "matplotlib.show", "cv2.waitKey", "plt.get_cmap.", "numpy.array", "len", "range", "fig.add_subplot.set_title", "fig.add_subplot.set_title", "numpy.linspace", "numpy.array", "numpy.array", "numpy.array", "fig.add_subplot.plot", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses.plot", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter"], ["", "def", "vis_3d_multiple_skeleton", "(", "kpt_3d", ",", "kpt_3d_vis", ",", "kps_lines", ",", "filename", "=", "None", ")", ":", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "# Convert from plt 0-1 RGBA colors to 0-255 BGR colors for opencv.", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'rainbow'", ")", "\n", "colors", "=", "[", "cmap", "(", "i", ")", "for", "i", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "len", "(", "kps_lines", ")", "+", "2", ")", "]", "\n", "colors", "=", "[", "np", ".", "array", "(", "(", "c", "[", "2", "]", ",", "c", "[", "1", "]", ",", "c", "[", "0", "]", ")", ")", "for", "c", "in", "colors", "]", "\n", "\n", "for", "l", "in", "range", "(", "len", "(", "kps_lines", ")", ")", ":", "\n", "        ", "i1", "=", "kps_lines", "[", "l", "]", "[", "0", "]", "\n", "i2", "=", "kps_lines", "[", "l", "]", "[", "1", "]", "\n", "\n", "person_num", "=", "kpt_3d", ".", "shape", "[", "0", "]", "\n", "for", "n", "in", "range", "(", "person_num", ")", ":", "\n", "            ", "x", "=", "np", ".", "array", "(", "[", "kpt_3d", "[", "n", ",", "i1", ",", "0", "]", ",", "kpt_3d", "[", "n", ",", "i2", ",", "0", "]", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "kpt_3d", "[", "n", ",", "i1", ",", "1", "]", ",", "kpt_3d", "[", "n", ",", "i2", ",", "1", "]", "]", ")", "\n", "z", "=", "np", ".", "array", "(", "[", "kpt_3d", "[", "n", ",", "i1", ",", "2", "]", ",", "kpt_3d", "[", "n", ",", "i2", ",", "2", "]", "]", ")", "\n", "\n", "if", "kpt_3d_vis", "[", "n", ",", "i1", ",", "0", "]", ">", "0", "and", "kpt_3d_vis", "[", "n", ",", "i2", ",", "0", "]", ">", "0", ":", "\n", "                ", "ax", ".", "plot", "(", "x", ",", "z", ",", "-", "y", ",", "c", "=", "colors", "[", "l", "]", ",", "linewidth", "=", "2", ")", "\n", "", "if", "kpt_3d_vis", "[", "n", ",", "i1", ",", "0", "]", ">", "0", ":", "\n", "                ", "ax", ".", "scatter", "(", "kpt_3d", "[", "n", ",", "i1", ",", "0", "]", ",", "kpt_3d", "[", "n", ",", "i1", ",", "2", "]", ",", "-", "kpt_3d", "[", "n", ",", "i1", ",", "1", "]", ",", "c", "=", "colors", "[", "l", "]", ",", "marker", "=", "'o'", ")", "\n", "", "if", "kpt_3d_vis", "[", "n", ",", "i2", ",", "0", "]", ">", "0", ":", "\n", "                ", "ax", ".", "scatter", "(", "kpt_3d", "[", "n", ",", "i2", ",", "0", "]", ",", "kpt_3d", "[", "n", ",", "i2", ",", "2", "]", ",", "-", "kpt_3d", "[", "n", ",", "i2", ",", "1", "]", ",", "c", "=", "colors", "[", "l", "]", ",", "marker", "=", "'o'", ")", "\n", "\n", "", "", "", "if", "filename", "is", "None", ":", "\n", "        ", "ax", ".", "set_title", "(", "'3D vis'", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_title", "(", "filename", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Z Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Y Label'", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.cmu_panoptic_eval.CMU_Panoptic_eval": [[32, 113], ["super().__init__", "os.path.join", "np.array", "os.path.join", "cmu_panoptic_eval..load_annots", "os.path.join", "constants.joint_mapping", "logging.info", "os.listdir", "list", "enumerate", "os.path.join", "cmu_panoptic_eval..determine_visible_person", "enumerate", "os.path.isdir", "os.path.join", "cmu_panoptic_eval..annots.keys", "np.logical_and", "np.array", "np.array", "cv2.imread", "zip", "cmu_panoptic_eval..map_kps", "full_kp2d.append", "valid_mask_2d.append", "np.array", "kp_3ds.append", "valid_mask_3d.append", "np.array", "np.array", "np.array", "cmu_panoptic_eval..__len__", "open", "pickle.load", "img_info[].split", "np.logical_and", "np.logical_and", "np.logical_and.sum", "visible_person_id.append", "kp2d_vis.append", "img_path[].replace", "np.concatenate", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_cmu_panoptic.determine_visible_person", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__len__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["def", "CMU_Panoptic_eval", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "CMU_Panoptic_eval", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "split", "=", "'test'", ",", "joint_format", "=", "'h36m'", ",", "load_entire_sequence", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "CMU_Panoptic_eval", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "load_entire_sequence", "=", "load_entire_sequence", ")", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'cmu_panoptic/'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "data_folder", ")", ":", "\n", "                ", "self", ".", "data_folder", "=", "'/home/yusun/data_drive/dataset/cmu_panoptic_CRMH'", "\n", "", "self", ".", "min_pts_required", "=", "5", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "test2val_sample_ratio", "=", "10", "\n", "self", ".", "J24_TO_H36M", "=", "np", ".", "array", "(", "[", "14", ",", "3", ",", "4", ",", "5", ",", "2", ",", "1", ",", "0", ",", "16", ",", "12", ",", "17", ",", "18", ",", "9", ",", "10", ",", "11", ",", "8", ",", "7", ",", "6", "]", ")", "\n", "self", ".", "H36M_TO_LSP", "=", "self", ".", "J24_TO_H36M", "[", "np", ".", "array", "(", "[", "6", ",", "5", ",", "4", ",", "1", ",", "2", ",", "3", ",", "16", ",", "15", ",", "14", ",", "11", ",", "12", ",", "13", ",", "8", ",", "10", "]", ")", "]", "\n", "self", ".", "annots_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'panoptic_annot'", ")", "\n", "self", ".", "load_annots", "(", ")", "\n", "\n", "self", ".", "image_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'images/'", ")", "\n", "self", ".", "joint_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "LSP_14", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "if", "joint_format", "==", "'lsp14'", ":", "\n", "                ", "self", ".", "kp3d_mapper", "=", "self", ".", "H36M_TO_LSP", "\n", "", "elif", "joint_format", "==", "'h36m'", ":", "\n", "# centerHMR v1 use h36m keypoints", "\n", "                ", "self", ".", "kp3d_mapper", "=", "self", ".", "J24_TO_H36M", "\n", "", "self", ".", "root_inds", "=", "None", "#[constants.SMPL_ALL_54['R_Hip'], constants.SMPL_ALL_54['L_Hip']]", "\n", "\n", "logging", ".", "info", "(", "'CMU Panoptic dataset total {} samples, loading {} split'", ".", "format", "(", "self", ".", "__len__", "(", ")", ",", "self", ".", "split", ")", ")", "\n", "\n", "", "def", "load_annots", "(", "self", ")", ":", "\n", "            ", "self", ".", "annots", "=", "{", "}", "\n", "for", "annots_file_name", "in", "os", ".", "listdir", "(", "self", ".", "annots_folder", ")", ":", "\n", "                ", "ann_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "annots_folder", ",", "annots_file_name", ")", "\n", "with", "open", "(", "ann_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "img_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "img_info", "in", "img_infos", ":", "\n", "                    ", "img_path", "=", "img_info", "[", "'filename'", "]", ".", "split", "(", "'/'", ")", "\n", "img_name", "=", "img_path", "[", "1", "]", "+", "'-'", "+", "img_path", "[", "-", "1", "]", ".", "replace", "(", "'.png'", ",", "'.jpg'", ")", "\n", "self", ".", "annots", "[", "img_name", "]", "=", "{", "}", "\n", "self", ".", "annots", "[", "img_name", "]", "=", "img_info", "\n", "", "", "self", ".", "file_paths", "=", "list", "(", "self", ".", "annots", ".", "keys", "(", ")", ")", "\n", "\n", "", "def", "determine_visible_person", "(", "self", ",", "kp2ds", ",", "width", ",", "height", ")", ":", "\n", "            ", "visible_person_id", ",", "kp2d_vis", "=", "[", "]", ",", "[", "]", "\n", "for", "person_id", ",", "kp2d", "in", "enumerate", "(", "kp2ds", ")", ":", "\n", "                ", "visible_kps_mask", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "0", "<", "kp2d", "[", ":", ",", "0", "]", ",", "kp2d", "[", ":", ",", "0", "]", "<", "width", ")", ",", "np", ".", "logical_and", "(", "0", "<", "kp2d", "[", ":", ",", "1", "]", ",", "kp2d", "[", ":", ",", "1", "]", "<", "height", ",", "kp2d", "[", ":", ",", "2", "]", ">", "0", ")", ")", "\n", "if", "visible_kps_mask", ".", "sum", "(", ")", ">", "1", ":", "\n", "                    ", "visible_person_id", ".", "append", "(", "person_id", ")", "\n", "kp2d_vis", ".", "append", "(", "np", ".", "concatenate", "(", "[", "kp2d", "[", ":", ",", ":", "2", "]", ",", "visible_kps_mask", "[", ":", ",", "None", "]", "]", ",", "1", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "visible_person_id", ")", ",", "np", ".", "array", "(", "kp2d_vis", ")", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "visible_person_id", ",", "kp2ds", "=", "self", ".", "determine_visible_person", "(", "self", ".", "annots", "[", "img_name", "]", "[", "'kpts2d'", "]", ",", "self", ".", "annots", "[", "img_name", "]", "[", "'width'", "]", ",", "self", ".", "annots", "[", "img_name", "]", "[", "'height'", "]", ")", "\n", "kp3ds", "=", "self", ".", "annots", "[", "img_name", "]", "[", "'kpts3d'", "]", "[", "visible_person_id", "]", "\n", "full_kp2d", ",", "kp_3ds", ",", "valid_mask_2d", ",", "valid_mask_3d", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "inds", ",", "(", "kp2d", ",", "kp3d", ")", "in", "enumerate", "(", "zip", "(", "kp2ds", ",", "kp3ds", ")", ")", ":", "\n", "                ", "invis_kps", "=", "kp2d", "[", ":", ",", "-", "1", "]", "<", "0.1", "\n", "kp2d", "*=", "1920.", "/", "832.", "\n", "kp2d", "[", "invis_kps", "]", "=", "-", "2.", "\n", "kp2d", "=", "self", ".", "map_kps", "(", "kp2d", "[", "self", ".", "H36M_TO_LSP", "]", ",", "maps", "=", "self", ".", "joint_mapper", ")", "\n", "kp2d", "[", "constants", ".", "SMPL_ALL_54", "[", "'Head_top'", "]", "]", "=", "-", "2.", "\n", "full_kp2d", ".", "append", "(", "kp2d", ")", "\n", "valid_mask_2d", ".", "append", "(", "[", "True", ",", "False", ",", "True", "]", ")", "\n", "invis_3dkps", "=", "kp3d", "[", ":", ",", "-", "1", "]", "<", "0.1", "\n", "kp3d", "=", "kp3d", "[", ":", ",", ":", "3", "]", "\n", "kp3d", "[", "invis_3dkps", "]", "=", "-", "2.", "\n", "kp3d", "=", "kp3d", "[", "self", ".", "J24_TO_H36M", "]", "\n", "kp3d", "[", "0", "]", "-=", "np", ".", "array", "(", "[", "0", ",", "0.06", ",", "0.0", "]", ")", "\n", "kp_3ds", ".", "append", "(", "kp3d", ")", "\n", "valid_mask_3d", ".", "append", "(", "[", "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", "False", "]", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 1: smpl global orient | 2: smpl body pose | 3: smpl body shape | 4: smpl verts | 5: depth", "\n", "", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "full_kp2d", ",", "'track_ids'", ":", "None", ",", "'vmask_2d'", ":", "np", ".", "array", "(", "valid_mask_2d", ")", ",", "'vmask_3d'", ":", "np", ".", "array", "(", "valid_mask_3d", ")", ",", "'kp3ds'", ":", "kp_3ds", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'cmup'", "}", "\n", "\n", "return", "img_info", "\n", "", "", "return", "CMU_Panoptic_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack21.Posetrack21": [[8, 89], ["super().__init__", "posetrack21..init_coco", "constants.joint_mapping", "logging.info", "os.path.join", "os.path.exists", "collections.OrderedDict", "enumerate", "posetrack21.._get_image_path", "np.array", "enumerate", "np.array", "os.path.join", "coco.getAnnIds", "coco.loadAnns", "cv2.imread", "os.path.join", "os.path.join", "np.load", "posetrack21..pack_annots", "cv2.imread", "valid_mask_3d.append", "np.array", "np.array", "posetrack21.._get_image_path", "posetrack21.._get_image_path", "len", "posetrack21..file_paths.append", "kp2ds.append", "valid_mask_2d.append", "kp2ds.append", "valid_mask_2d.append", "coco.loadImgs", "len", "np.array", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack21.pack_annots", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs"], ["def", "Posetrack21", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "Posetrack21", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "load_entire_sequence", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "Posetrack21", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "\n", "load_entire_sequence", "=", "load_entire_sequence", ")", "\n", "self", ".", "init_coco", "(", ")", "\n", "self", ".", "kp2d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "Posetrack_17", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "logging", ".", "info", "(", "'Posetrack21 2D keypoint data has been loaded, total {} samples, contains {} IDs'", ".", "format", "(", "len", "(", "self", ")", ",", "self", ".", "ID_num", ")", ")", "\n", "\n", "", "def", "init_coco", "(", "self", ")", ":", "\n", "            ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "\"posetrack2018\"", ")", "\n", "\n", "if", "self", ".", "train_flag", ":", "\n", "                ", "self", ".", "split", "=", "'train'", "\n", "self", ".", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'annots_train21_full.npz'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "split", "=", "'val'", "\n", "self", ".", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'annots_val21_full.npz'", ")", "\n", "self", ".", "shuffle_mode", "=", "False", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "annots_file_path", ")", ":", "\n", "                ", "annotations", "=", "np", ".", "load", "(", "self", ".", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "annots", ",", "self", ".", "ID_num", ",", "self", ".", "sequence_dict", "=", "annotations", "[", "'annot'", "]", "[", "(", ")", "]", ",", "annotations", "[", "'person_ids'", "]", "[", "(", ")", "]", "[", "'id_number'", "]", ",", "annotations", "[", "'sequence_dict'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "annots", ",", "self", ".", "ID_num", ",", "self", ".", "sequence_dict", "=", "self", ".", "pack_annots", "(", ")", "\n", "\n", "", "self", ".", "sequence_dict", "=", "OrderedDict", "(", "self", ".", "sequence_dict", ")", "\n", "self", ".", "file_paths", "=", "[", "]", "\n", "for", "sid", ",", "video_name", "in", "enumerate", "(", "self", ".", "sequence_dict", ")", ":", "\n", "                ", "for", "fid", "in", "self", ".", "sequence_dict", "[", "video_name", "]", ":", "\n", "                    ", "self", ".", "file_paths", ".", "append", "(", "[", "sid", ",", "fid", ",", "os", ".", "path", ".", "join", "(", "'images'", ",", "self", ".", "split", ",", "video_name", ",", "'{:06d}.jpg'", ".", "format", "(", "fid", ")", ")", "]", ")", "\n", "\n", "", "", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "sid", ",", "fid", ",", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "imgpath", "=", "self", ".", "_get_image_path", "(", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "kp2ds", ",", "valid_mask_2d", ",", "valid_mask_3d", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "bboxes", "=", "np", ".", "array", "(", "self", ".", "annots", "[", "img_name", "]", "[", "1", "]", ")", "\n", "for", "ind", ",", "joint", "in", "enumerate", "(", "self", ".", "annots", "[", "img_name", "]", "[", "0", "]", ")", ":", "\n", "                ", "joint", "=", "joint", "[", "self", ".", "kp2d_mapper", "]", "\n", "joint", "[", "self", ".", "kp2d_mapper", "==", "-", "1", "]", "=", "-", "2", "\n", "valid_2dpose", "=", "(", "joint", "[", ":", ",", "2", "]", ">", "0", ")", ".", "sum", "(", ")", ">", "0", "\n", "if", "valid_2dpose", ":", "\n", "                    ", "kp2ds", ".", "append", "(", "joint", ")", "\n", "valid_mask_2d", ".", "append", "(", "[", "True", ",", "True", ",", "True", "]", ")", "\n", "", "else", ":", "\n", "                    ", "x", ",", "y", ",", "w", ",", "h", "=", "bboxes", "[", "ind", "]", "\n", "kp2ds", ".", "append", "(", "np", ".", "array", "(", "[", "[", "x", ",", "y", "]", ",", "[", "x", "+", "w", ",", "y", "+", "h", "]", ",", "[", "x", ",", "y", "]", ",", "[", "x", "+", "w", ",", "y", "+", "h", "]", "]", ")", ")", "\n", "valid_mask_2d", ".", "append", "(", "[", "False", ",", "True", ",", "True", "]", ")", "\n", "", "valid_mask_3d", ".", "append", "(", "self", ".", "default_valid_mask_3d", ")", "\n", "\n", "", "track_ids", "=", "np", ".", "array", "(", "self", ".", "annots", "[", "img_name", "]", "[", "2", "]", ")", "\n", "valid_mask_2d", ",", "valid_mask_3d", "=", "np", ".", "array", "(", "valid_mask_2d", ")", ",", "np", ".", "array", "(", "valid_mask_3d", ")", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "track_ids", ",", "'vmask_2d'", ":", "valid_mask_2d", ",", "'vmask_3d'", ":", "valid_mask_3d", ",", "'dynamic_supervise'", ":", "True", ",", "'kp3ds'", ":", "None", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'posetrack'", "}", "\n", "\n", "return", "img_info", "\n", "\n", "", "def", "_get_image_path", "(", "self", ",", "file_name", ")", ":", "\n", "            ", "images_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "file_name", ")", "\n", "return", "images_dir", "\n", "\n", "", "def", "get_annot", "(", "self", ",", "index", ")", ":", "\n", "            ", "coco", "=", "self", ".", "coco", "\n", "img_id", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "target", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "\n", "file_name", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "self", ".", "_get_image_path", "(", "file_name", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", "|", "cv2", ".", "IMREAD_IGNORE_ORIENTATION", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "return", "img", ",", "target", ",", "self", ".", "_get_image_path", "(", "file_name", ")", "\n", "\n", "", "", "return", "Posetrack21", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack21.get_joints_ids": [[90, 108], ["len", "enumerate", "np.array", "np.array().reshape", "joints.append", "bboxes.append", "track_ids.append", "np.array", "np.array", "np.array"], "function", ["None"], ["", "def", "get_joints_ids", "(", "anno", ")", ":", "\n", "    ", "num_people", "=", "len", "(", "anno", ")", "\n", "joints", ",", "bboxes", ",", "track_ids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "anno", ")", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "obj", "[", "'bbox'", "]", ")", "\n", "joint", "=", "np", ".", "array", "(", "obj", "[", "'keypoints'", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "valid_mask", "=", "(", "(", "joint", "[", ":", ",", "0", "]", ">", "0", ")", "*", "(", "joint", "[", ":", ",", "1", "]", ">", "0", ")", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "# 0 means lacking labels", "\n", "joint", "[", "~", "valid_mask", "]", "=", "-", "2", "\n", "joint", "[", ":", ",", "-", "1", "]", "=", "valid_mask", "\n", "\n", "#'track_id' in annots is person_id in each sequence, starting from 0.", "\n", "track_id", "=", "obj", "[", "'person_id'", "]", "\n", "joints", ".", "append", "(", "joint", ")", "\n", "bboxes", ".", "append", "(", "bbox", ")", "\n", "track_ids", ".", "append", "(", "track_id", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "joints", ")", ",", "np", ".", "array", "(", "bboxes", ")", ",", "track_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack21.pack_annots": [[110, 149], ["print", "glob.glob", "np.savez", "print", "os.path.join", "COCO", "COCO.getImgIds", "enumerate", "print", "sorted", "int", "COCO.getAnnIds", "COCO.loadAnns", "posetrack21.get_joints_ids", "sequence_dict[].append", "file_name.split", "[].replace", "img_person_ids.append", "np.array", "print", "len", "COCO.loadImgs", "len", "len", "len", "file_name.split"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getImgIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack21.get_joints_ids", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "pack_annots", "(", "annots_dir", ",", "annots_file_path", ")", ":", "\n", "    ", "print", "(", "'Packing annotations of posetrack2021 dataset'", ")", "\n", "annots", ",", "sequence_dict", ",", "person_ids", ",", "id_cache", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "0", "\n", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "for", "annot_path", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "annots_dir", ",", "'*.json'", ")", ")", ":", "\n", "#print('Processing {}'.format(annot_path))", "\n", "        ", "coco", "=", "COCO", "(", "annot_path", ")", "\n", "img_ids", "=", "coco", ".", "getImgIds", "(", ")", "\n", "for", "index", ",", "img_id", "in", "enumerate", "(", "img_ids", ")", ":", "\n", "            ", "file_name", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "video_name", "=", "file_name", ".", "split", "(", "'/'", ")", "[", "2", "]", "\n", "frame_id", "=", "int", "(", "file_name", ".", "split", "(", "'/'", ")", "[", "3", "]", ".", "replace", "(", "'.jpg'", ",", "''", ")", ")", "\n", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ",", "iscrowd", "=", "None", ")", "\n", "annot", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "joints", ",", "bboxes", ",", "track_ids", "=", "get_joints_ids", "(", "annot", ")", "\n", "if", "len", "(", "joints", ")", "==", "0", "and", "len", "(", "track_ids", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "video_name", "not", "in", "sequence_dict", ":", "\n", "                ", "sequence_dict", "[", "video_name", "]", ",", "person_ids", "[", "video_name", "]", "=", "[", "]", ",", "{", "}", "\n", "", "sequence_dict", "[", "video_name", "]", ".", "append", "(", "frame_id", ")", "\n", "img_person_ids", "=", "[", "]", "\n", "for", "track_id", "in", "track_ids", ":", "\n", "                ", "if", "track_id", "not", "in", "person_ids", "[", "video_name", "]", ":", "\n", "                    ", "person_ids", "[", "video_name", "]", "[", "track_id", "]", "=", "id_cache", "\n", "id_cache", "+=", "1", "\n", "", "person_id", "=", "person_ids", "[", "video_name", "]", "[", "track_id", "]", "\n", "img_person_ids", ".", "append", "(", "person_id", ")", "\n", "", "annots", "[", "file_name", "]", "=", "[", "joints", ",", "bboxes", ",", "np", ".", "array", "(", "img_person_ids", ")", "]", "\n", "if", "index", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "'Processing {}/{}'", ".", "format", "(", "index", ",", "len", "(", "img_ids", ")", ")", ")", "\n", "", "", "print", "(", "'sequence {}, frames {}'", ".", "format", "(", "video_name", ",", "len", "(", "annots", ")", ")", ")", "\n", "\n", "", "for", "video_name", "in", "sequence_dict", ":", "\n", "        ", "sequence_dict", "[", "video_name", "]", "=", "sorted", "(", "sequence_dict", "[", "video_name", "]", ")", "\n", "#print(video_name,sequence_dict[video_name])", "\n", "", "np", ".", "savez", "(", "annots_file_path", ",", "annot", "=", "annots", ",", "sequence_dict", "=", "sequence_dict", ",", "person_ids", "=", "{", "'map_dict'", ":", "person_ids", ",", "'id_number'", ":", "id_cache", "}", ")", "\n", "print", "(", "'Saving annotations to {}'", ".", "format", "(", "annots_file_path", ")", ")", "\n", "return", "annots", ",", "id_cache", ",", "sequence_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.h36m.H36M": [[9, 138], ["super().__init__", "os.path.join", "os.path.join", "os.path.join", "constants.joint_mapping", "os.path.join", "os.path.join", "h36m..load_file_list", "logging.info", "h36m..annots[].copy", "int", "os.path.join", "h36m..map_kps", "np.array", "np.array", "np.array", "SMPLR", "constants.joint_mapping", "constants.joint_mapping", "config.args", "config.args", "open", "f.readlines", "test_file.strip", "h36m..file_paths.append", "os.path.join", "h36m..parse_cluster_results", "len", "img_name.split", "[].mean", "cv2.imread", "info[].reshape().copy", "np.concatenate", "np.array", "np.array", "h36m..smplr", "info[].reshape().copy", "np.concatenate", "np.array", "np.array", "np.array", "np.array", "len", "h36m..__len__", "np.load", "len", "random.randint", "h36m..homogenize_pose_sample", "img_name.split", "h36m..map_kps", "len", "len", "info[].reshape", "info[].reshape", "info[].reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.parse_cluster_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__len__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.homogenize_pose_sample", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps"], ["def", "H36M", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "H36M", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "split", "=", "'train'", ",", "regress_smpl", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "H36M", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "regress_smpl", ")", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'h36m/'", ")", "\n", "self", ".", "image_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'images/'", ")", "\n", "self", ".", "annots_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'annots.npz'", ")", "\n", "self", ".", "scale_range", "=", "[", "1.4", ",", "2.0", "]", "\n", "self", ".", "train_flag", "=", "train_flag", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "train_test_subject", "=", "{", "'train'", ":", "[", "'S1'", ",", "'S5'", ",", "'S6'", ",", "'S7'", ",", "'S8'", "]", ",", "'test'", ":", "[", "'S9'", ",", "'S11'", "]", "}", "\n", "self", ".", "track_id", "=", "{", "'S1'", ":", "1", ",", "'S5'", ":", "2", ",", "'S6'", ":", "3", ",", "'S7'", ":", "4", ",", "'S8'", ":", "5", ",", "'S9'", ":", "6", ",", "'S11'", ":", "7", "}", "\n", "self", ".", "camMat_views", "=", "[", "np", ".", "array", "(", "[", "[", "intrinsic", "[", "'focal_length'", "]", "[", "0", "]", ",", "0", ",", "intrinsic", "[", "'center'", "]", "[", "0", "]", "]", ",", "[", "0", ",", "intrinsic", "[", "'focal_length'", "]", "[", "1", "]", ",", "intrinsic", "[", "'center'", "]", "[", "1", "]", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "for", "intrinsic", "in", "h36m_cameras_intrinsic_params", "]", "\n", "# http://www.opencv.org.cn/opencvdoc/2.3.2/html/modules/calib3d/doc/camera_calibration_and_3d_reconstruction.html?highlight=calibrate", "\n", "# k1, k2, p1, p2, k3, k4,k5,k6", "\n", "self", ".", "cam_distortions", "=", "[", "np", ".", "array", "(", "[", "*", "intrinsic", "[", "'radial_distortion'", "]", "[", ":", "2", "]", ",", "*", "intrinsic", "[", "'tangential_distortion'", "]", ",", "intrinsic", "[", "'radial_distortion'", "]", "[", "2", "]", "]", ")", "\n", "for", "intrinsic", "in", "h36m_cameras_intrinsic_params", "]", "\n", "\n", "if", "self", ".", "regress_smpl", ":", "\n", "                ", "self", ".", "smplr", "=", "SMPLR", "(", "use_gender", "=", "True", ")", "\n", "self", ".", "root_inds", "=", "None", "\n", "\n", "", "self", ".", "joint_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "H36M_32", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "if", "self", ".", "train_flag", "and", "self", ".", "regress_smpl", ":", "\n", "                ", "self", ".", "joint3d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_ALL_54", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "joint3d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "H36M_32", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "\n", "", "self", ".", "kps_vis", "=", "(", "self", ".", "joint_mapper", "!=", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", "None", "]", "\n", "self", ".", "shuffle_mode", "=", "args", "(", ")", ".", "shuffle_crop_mode", "\n", "self", ".", "shuffle_ratio", "=", "args", "(", ")", ".", "shuffle_crop_ratio_3d", "\n", "self", ".", "test2val_sample_ratio", "=", "10", "\n", "self", ".", "compress_length", "=", "5", "\n", "\n", "self", ".", "subject", "=", "self", ".", "train_test_subject", "[", "self", ".", "phase", "]", "\n", "self", ".", "openpose_results", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "\"h36m_openpose_{}.npz\"", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "self", ".", "imgs_list_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "\"h36m_{}.txt\"", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "self", ".", "load_file_list", "(", ")", "\n", "self", ".", "subject_gender", "=", "{", "'S1'", ":", "1", ",", "'S5'", ":", "1", ",", "'S6'", ":", "0", ",", "'S7'", ":", "1", ",", "'S8'", ":", "0", ",", "'S9'", ":", "0", ",", "'S11'", ":", "0", "}", "\n", "if", "not", "self", ".", "train_flag", ":", "\n", "                ", "self", ".", "multi_mode", "=", "False", "\n", "self", ".", "scale_range", "=", "[", "1.8", ",", "1.8", "]", "\n", "\n", "", "logging", ".", "info", "(", "'Loaded Human3.6M data,total {} samples'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", ")", "\n", "\n", "", "def", "load_file_list", "(", "self", ")", ":", "\n", "            ", "self", ".", "file_paths", "=", "[", "]", "\n", "self", ".", "annots", "=", "np", ".", "load", "(", "self", ".", "annots_file", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "\n", "with", "open", "(", "self", ".", "imgs_list_file", ")", "as", "f", ":", "\n", "                ", "test_list", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "for", "test_file", "in", "test_list", ":", "\n", "                ", "frame_name", "=", "test_file", ".", "strip", "(", ")", "\n", "self", ".", "file_paths", ".", "append", "(", "frame_name", ")", "\n", "\n", "", "if", "self", ".", "split", "==", "'val'", ":", "\n", "                ", "self", ".", "file_paths", "=", "self", ".", "file_paths", "[", ":", ":", "self", ".", "test2val_sample_ratio", "]", "\n", "\n", "", "if", "self", ".", "homogenize_pose_space", "and", "self", ".", "train_flag", ":", "\n", "                ", "cluster_results_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'cluster_results_noumap_h36m_kmeans.npz'", ")", "\n", "self", ".", "cluster_pool", "=", "self", ".", "parse_cluster_results", "(", "cluster_results_file", ",", "self", ".", "file_paths", ")", "\n", "\n", "", "if", "self", ".", "train_flag", ":", "\n", "                ", "self", ".", "sample_num", "=", "len", "(", "self", ".", "file_paths", ")", "//", "self", ".", "compress_length", "\n", "", "else", ":", "\n", "                ", "self", ".", "sample_num", "=", "len", "(", "self", ".", "file_paths", ")", "\n", "\n", "", "", "def", "get_image_info", "(", "self", ",", "index", ",", "total_frame", "=", "None", ")", ":", "\n", "            ", "if", "self", ".", "train_flag", ":", "\n", "                ", "index", "=", "index", "*", "self", ".", "compress_length", "+", "random", ".", "randint", "(", "0", ",", "self", ".", "compress_length", "-", "1", ")", "\n", "if", "self", ".", "homogenize_pose_space", ":", "\n", "                    ", "index", "=", "self", ".", "homogenize_pose_sample", "(", "index", ")", "\n", "", "", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "subject_id", "=", "img_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "track_ids", "=", "[", "self", ".", "track_id", "[", "subject_id", "]", "]", "\n", "\n", "info", "=", "self", ".", "annots", "[", "img_name", "]", ".", "copy", "(", ")", "\n", "\n", "cam_view_id", "=", "int", "(", "img_name", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "camMats", "=", "self", ".", "camMat_views", "[", "cam_view_id", "]", "\n", "camDists", "=", "self", ".", "cam_distortions", "[", "cam_view_id", "]", "\n", "root_trans", "=", "info", "[", "'kp3d_mono'", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "[", "[", "constants", ".", "H36M_32", "[", "'R_Hip'", "]", ",", "constants", ".", "H36M_32", "[", "'L_Hip'", "]", "]", "]", ".", "mean", "(", "0", ")", "[", "None", "]", "\n", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "kp2d", "=", "self", ".", "map_kps", "(", "info", "[", "'kp2d'", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "copy", "(", ")", ",", "maps", "=", "self", ".", "joint_mapper", ")", "\n", "kp2ds", "=", "np", ".", "concatenate", "(", "[", "kp2d", ",", "self", ".", "kps_vis", "]", ",", "1", ")", "[", "None", "]", "\n", "\n", "smpl_randidx", "=", "1", "#random.randint(0,2)", "\n", "root_rotation", "=", "np", ".", "array", "(", "info", "[", "'cam'", "]", ")", "[", "smpl_randidx", "]", "\n", "pose", "=", "np", ".", "array", "(", "info", "[", "'poses'", "]", ")", "[", "smpl_randidx", "]", "\n", "pose", "[", ":", "3", "]", "=", "root_rotation", "\n", "beta", "=", "np", ".", "array", "(", "info", "[", "'betas'", "]", ")", "\n", "\n", "verts", "=", "None", "\n", "if", "self", ".", "train_flag", "and", "self", ".", "regress_smpl", ":", "\n", "                ", "gender", "=", "[", "'m'", ",", "'f'", "]", "[", "self", ".", "subject_gender", "[", "subject_id", "]", "]", "\n", "verts", ",", "kp3ds", "=", "self", ".", "smplr", "(", "pose", ",", "beta", ",", "gender", ")", "\n", "", "else", ":", "\n", "                ", "camkp3d", "=", "info", "[", "'kp3d_mono'", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", ".", "copy", "(", ")", "\n", "camkp3d", "-=", "root_trans", "\n", "kp3ds", "=", "self", ".", "map_kps", "(", "camkp3d", ",", "maps", "=", "self", ".", "joint3d_mapper", ")", "[", "None", "]", "\n", "\n", "", "params", "=", "np", ".", "concatenate", "(", "[", "pose", ",", "beta", "]", ")", "[", "None", "]", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 1: smpl global orient | 2: smpl body pose | 3: smpl body shape | 4: smpl verts", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "track_ids", ",", "'vmask_2d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "True", ",", "True", "]", "]", ")", ",", "'vmask_3d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", "]", "]", ")", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "params", ",", "'root_trans'", ":", "root_trans", ",", "'verts'", ":", "verts", ",", "'camMats'", ":", "camMats", ",", "'camDists'", ":", "camDists", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'h36m'", "}", "\n", "if", "'relative'", "in", "base_class", ":", "\n", "                ", "img_info", "[", "'depth'", "]", "=", "np", ".", "array", "(", "[", "[", "0", ",", "self", ".", "subject_gender", "[", "subject_id", "]", ",", "0", ",", "0", "]", "]", ")", "\n", "img_info", "[", "'kid_shape_offsets'", "]", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "\n", "", "return", "img_info", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "if", "self", ".", "train_flag", ":", "\n", "                ", "return", "len", "(", "self", ".", "file_paths", ")", "//", "self", ".", "compress_length", "\n", "", "else", ":", "\n", "                ", "return", "len", "(", "self", ".", "file_paths", ")", "\n", "", "", "", "return", "H36M", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuCo.MuCo": [[6, 138], ["super().__init__", "os.path.join", "os.path.exists", "list", "constants.joint_mapping", "constants.joint_mapping", "logging.info", "os.path.join", "zip", "kp3ds[].mean", "np.array", "np.array", "np.concatenate", "glob.glob", "np.savez", "logging.info", "COCO", "COCO.imgs.keys", "np.savez", "print", "os.path.join", "os.path.join", "os.path.join", "args", "args", "MuCo..annots.keys", "len", "os.path.exists", "os.path.join", "cv2.imread", "annots[].transpose.append", "annots[].transpose.append", "valid_mask_2d.append", "valid_mask_3d.append", "np.array", "np.array", "vis_masks.append", "np.arange", "np.array", "np.array", "len", "np.zeros", "os.path.join", "scio.loadmat", "annots[].transpose", "annots[].transpose", "zip", "os.path.join", "os.path.join", "np.array", "COCO.getAnnIds", "COCO.loadAnns", "np.array", "np.array", "video_name.strip().replace().replace", "MuCo..pack_data_augmented", "MuCo..pack_data", "MuCo..__len__", "len", "random.randint", "MuCo..map_kps", "MuCo..map_kps", "MuCo.._check_kp3d_visible_parts_", "MuCo._check_visible", "len", "np.ones", "np.load", "len", "np.random.randint", "np.array", "video_name.strip().replace", "len", "video_name.strip"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.agora.pack_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__len__", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._check_kp3d_visible_parts_", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_test._check_visible", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["def", "MuCo", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "MuCo", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "mode", "=", "'augmented'", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "MuCo", ",", "self", ")", ".", "__init__", "(", "train_flag", ")", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'MuCo/'", ")", "\n", "self", ".", "min_pts_required", "=", "5", "\n", "self", ".", "collision_factor", "=", "0.3", "\n", "self", ".", "scale_range", "=", "[", "1.4", ",", "2.2", "]", "\n", "self", ".", "compress_length", "=", "5", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "self", ".", "mode", "==", "'augmented'", ":", "\n", "                ", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'annots_augmented.npz'", ")", "\n", "self", ".", "image_folder", "=", "self", ".", "data_folder", "\n", "", "else", ":", "\n", "                ", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'annots.npz'", ")", "\n", "self", ".", "image_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'images'", ")", "\n", "", "self", ".", "shuffle_mode", "=", "args", "(", ")", ".", "shuffle_crop_mode", "\n", "self", ".", "shuffle_ratio", "=", "args", "(", ")", ".", "shuffle_crop_ratio_3d", "\n", "if", "os", ".", "path", ".", "exists", "(", "annots_file_path", ")", ":", "\n", "                ", "self", ".", "annots", "=", "np", ".", "load", "(", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "mode", "==", "'augmented'", ":", "\n", "                    ", "self", ".", "pack_data_augmented", "(", "annots_file_path", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "pack_data", "(", "annots_file_path", ")", "\n", "\n", "", "", "self", ".", "file_paths", "=", "list", "(", "self", ".", "annots", ".", "keys", "(", ")", ")", "\n", "self", ".", "kp2d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "MuCo_21", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "kp3d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "MuCo_21", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "root_inds", "=", "[", "constants", ".", "SMPL_ALL_54", "[", "'Pelvis'", "]", "]", "\n", "logging", ".", "info", "(", "'MuCo dataset total {} samples, loading mode {}'", ".", "format", "(", "self", ".", "__len__", "(", ")", ",", "self", ".", "mode", ")", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "if", "self", ".", "train_flag", ":", "\n", "                ", "return", "len", "(", "self", ".", "file_paths", ")", "//", "self", ".", "compress_length", "\n", "", "else", ":", "\n", "                ", "return", "len", "(", "self", ".", "file_paths", ")", "\n", "\n", "", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "if", "self", ".", "train_flag", ":", "\n", "                ", "index", "=", "index", "*", "self", ".", "compress_length", "+", "random", ".", "randint", "(", "0", ",", "self", ".", "compress_length", "-", "1", ")", "\n", "", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "img_name", ")", "\n", "while", "not", "os", ".", "path", ".", "exists", "(", "imgpath", ")", ":", "\n", "                ", "img_name", "=", "self", ".", "file_paths", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ")", ")", "]", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "img_name", ")", "\n", "", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "kp2ds", ",", "valid_mask_2d", ",", "valid_mask_3d", ",", "kp3ds", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "kp2d", ",", "kp3d", "in", "zip", "(", "self", ".", "annots", "[", "img_name", "]", "[", "0", "]", ",", "self", ".", "annots", "[", "img_name", "]", "[", "1", "]", ")", ":", "\n", "                ", "kp2ds", ".", "append", "(", "self", ".", "map_kps", "(", "kp2d", ",", "maps", "=", "self", ".", "kp2d_mapper", ")", ")", "\n", "kp3ds", ".", "append", "(", "self", ".", "map_kps", "(", "kp3d", "/", "1000.", ",", "maps", "=", "self", ".", "kp3d_mapper", ")", ")", "\n", "valid_mask_2d", ".", "append", "(", "[", "True", ",", "False", ",", "True", "]", ")", "\n", "valid_mask_3d", ".", "append", "(", "[", "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", "True", "]", ")", "\n", "\n", "", "kp2ds", ",", "kp3ds", "=", "np", ".", "array", "(", "kp2ds", ")", ",", "np", ".", "array", "(", "kp3ds", ")", "\n", "root_trans", "=", "kp3ds", "[", ":", ",", "self", ".", "root_inds", "]", ".", "mean", "(", "1", ")", "\n", "valid_masks", "=", "np", ".", "array", "(", "[", "self", ".", "_check_kp3d_visible_parts_", "(", "kp3d", ")", "for", "kp3d", "in", "kp3ds", "]", ")", "\n", "kp3ds", "-=", "root_trans", "[", ":", ",", "None", "]", "\n", "kp3ds", "[", "~", "valid_masks", "]", "=", "-", "2.", "\n", "\n", "f", ",", "c", "=", "self", ".", "annots", "[", "img_name", "]", "[", "2", "]", "\n", "camMats", "=", "np", ".", "array", "(", "[", "[", "f", "[", "0", "]", ",", "0", ",", "c", "[", "0", "]", "]", ",", "[", "0", ",", "f", "[", "1", "]", ",", "c", "[", "1", "]", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "vis_masks", "=", "[", "]", "\n", "for", "kp2d", "in", "kp2ds", ":", "\n", "                ", "vis_masks", ".", "append", "(", "_check_visible", "(", "kp2d", ",", "get_mask", "=", "True", ")", ")", "\n", "", "kp2ds", "=", "np", ".", "concatenate", "(", "[", "kp2ds", ",", "np", ".", "array", "(", "vis_masks", ")", "[", ":", ",", ":", ",", "None", "]", "]", ",", "2", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "np", ".", "arange", "(", "len", "(", "kp2ds", ")", ")", ",", "'vmask_2d'", ":", "np", ".", "array", "(", "valid_mask_2d", ")", ",", "'vmask_3d'", ":", "np", ".", "array", "(", "valid_mask_3d", ")", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "root_trans", ",", "'verts'", ":", "None", ",", "'camMats'", ":", "camMats", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'muco'", "}", "\n", "\n", "if", "'relative'", "in", "base_class", ":", "\n", "                ", "person_num", "=", "len", "(", "kp2ds", ")", "\n", "img_info", "[", "'depth'", "]", "=", "np", ".", "ones", "(", "(", "person_num", ",", "4", ")", ")", "*", "-", "1", "\n", "# body type is normal for all person", "\n", "img_info", "[", "'depth'", "]", "[", ":", ",", "3", "]", "=", "0", "\n", "# age type is adult for all person", "\n", "img_info", "[", "'depth'", "]", "[", ":", ",", "0", "]", "=", "0", "\n", "img_info", "[", "'kid_shape_offsets'", "]", "=", "np", ".", "zeros", "(", "person_num", ")", "\n", "\n", "", "return", "img_info", "\n", "\n", "", "def", "pack_data", "(", "self", ",", "annots_file_path", ")", ":", "\n", "            ", "self", ".", "annots", "=", "{", "}", "\n", "annots_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'annotations'", ",", "'*.mat'", ")", ")", "\n", "for", "annots_file", "in", "annots_files", ":", "\n", "                ", "annots", "=", "scio", ".", "loadmat", "(", "annots_file", ")", "\n", "image_names", "=", "annots", "[", "'img_names'", "]", "[", "0", "]", "\n", "kp3ds", "=", "annots", "[", "'joint_loc3'", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "1", ",", "0", ")", ")", "\n", "kp2ds", "=", "annots", "[", "'joint_loc2'", "]", ".", "transpose", "(", "(", "3", ",", "2", ",", "1", ",", "0", ")", ")", "\n", "for", "img_name", ",", "kp2d", ",", "kp3d", "in", "zip", "(", "image_names", ",", "kp2ds", ",", "kp3ds", ")", ":", "\n", "                    ", "self", ".", "annots", "[", "img_name", "[", "0", "]", "]", "=", "[", "kp2d", ",", "kp3d", "]", "\n", "\n", "", "", "np", ".", "savez", "(", "annots_file_path", ",", "annots", "=", "self", ".", "annots", ")", "\n", "logging", ".", "info", "(", "'MuCo data annotations packed'", ")", "\n", "\n", "", "def", "pack_data_augmented", "(", "self", ",", "annots_file_path", ")", ":", "\n", "            ", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "self", ".", "annots", "=", "{", "}", "\n", "db", "=", "COCO", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'MuCo-3DHP.json'", ")", ")", "\n", "data", "=", "[", "]", "\n", "for", "iid", "in", "db", ".", "imgs", ".", "keys", "(", ")", ":", "\n", "                ", "img", "=", "db", ".", "imgs", "[", "iid", "]", "\n", "img_id", "=", "img", "[", "\"id\"", "]", "\n", "img_width", ",", "img_height", "=", "img", "[", "'width'", "]", ",", "img", "[", "'height'", "]", "\n", "imgname", "=", "img", "[", "'file_name'", "]", "\n", "if", "'unaugmented'", "in", "imgname", ":", "\n", "                    ", "continue", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'augmented_set'", ",", "imgname", ")", "\n", "f", "=", "img", "[", "\"f\"", "]", "\n", "c", "=", "img", "[", "\"c\"", "]", "\n", "intrinsic", "=", "np", ".", "array", "(", "[", "f", ",", "c", "]", ")", "\n", "\n", "# crop the closest person to the camera", "\n", "ann_ids", "=", "db", ".", "getAnnIds", "(", "img_id", ")", "\n", "anns", "=", "db", ".", "loadAnns", "(", "ann_ids", ")", "\n", "kp2d", "=", "np", ".", "array", "(", "[", "ann", "[", "'keypoints_img'", "]", "for", "ann", "in", "anns", "]", ")", "\n", "kp3d", "=", "np", ".", "array", "(", "[", "ann", "[", "'keypoints_cam'", "]", "for", "ann", "in", "anns", "]", ")", "\n", "\n", "self", ".", "annots", "[", "imgname", "]", "=", "[", "kp2d", ",", "kp3d", ",", "intrinsic", "]", "\n", "", "np", ".", "savez", "(", "annots_file_path", ",", "annots", "=", "self", ".", "annots", ")", "\n", "print", "(", "'MuCo augmented data annotations packed'", ")", "\n", "\n", "\n", "", "def", "get_image_name", "(", "self", ",", "video_name", ",", "frame_id", ")", ":", "\n", "            ", "return", "video_name", ".", "strip", "(", "'.avi'", ")", ".", "replace", "(", "'/imageSequence'", ",", "''", ")", ".", "replace", "(", "'/'", ",", "'_'", ")", "+", "'_F{}.jpg'", ".", "format", "(", "frame_id", ")", "\n", "", "", "return", "MuCo", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuCo._check_visible": [[139, 150], ["np.logical_and", "np.logical_and", "np.logical_and", "np.sum"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "_check_visible", "(", "joints", ",", "w", "=", "2048", ",", "h", "=", "2048", ",", "get_mask", "=", "False", ")", ":", "\n", "    ", "visibility", "=", "True", "\n", "# check that all joints are visible", "\n", "x_in", "=", "np", ".", "logical_and", "(", "joints", "[", ":", ",", "0", "]", "<", "w", ",", "joints", "[", ":", ",", "0", "]", ">=", "0", ")", "\n", "y_in", "=", "np", ".", "logical_and", "(", "joints", "[", ":", ",", "1", "]", "<", "h", ",", "joints", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "ok_pts", "=", "np", ".", "logical_and", "(", "x_in", ",", "y_in", ")", "\n", "if", "np", ".", "sum", "(", "ok_pts", ")", "<", "16", ":", "\n", "        ", "visibility", "=", "False", "\n", "", "if", "get_mask", ":", "\n", "        ", "return", "ok_pts", "\n", "", "return", "visibility", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuCo.read_calibration": [[151, 166], ["open", "open.readlines", "np.array", "np.reshape", "np.array", "np.reshape", "Ks.append", "Rs.append", "Ts.append", "float", "float", "[].split", "[].split"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "read_calibration", "(", "calib_file", ",", "vid_list", ")", ":", "\n", "    ", "Ks", ",", "Rs", ",", "Ts", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "file", "=", "open", "(", "calib_file", ",", "'r'", ")", "\n", "content", "=", "file", ".", "readlines", "(", ")", "\n", "for", "vid_i", "in", "vid_list", ":", "\n", "        ", "K", "=", "np", ".", "array", "(", "[", "float", "(", "s", ")", "for", "s", "in", "content", "[", "vid_i", "*", "7", "+", "5", "]", "[", "11", ":", "-", "2", "]", ".", "split", "(", ")", "]", ")", "\n", "K", "=", "np", ".", "reshape", "(", "K", ",", "(", "4", ",", "4", ")", ")", "\n", "RT", "=", "np", ".", "array", "(", "[", "float", "(", "s", ")", "for", "s", "in", "content", "[", "vid_i", "*", "7", "+", "6", "]", "[", "11", ":", "-", "2", "]", ".", "split", "(", ")", "]", ")", "\n", "RT", "=", "np", ".", "reshape", "(", "RT", ",", "(", "4", ",", "4", ")", ")", "\n", "R", "=", "RT", "[", ":", "3", ",", ":", "3", "]", "\n", "T", "=", "RT", "[", ":", "3", ",", "3", "]", "/", "1000", "\n", "Ks", ".", "append", "(", "K", ")", "\n", "Rs", ".", "append", "(", "R", ")", "\n", "Ts", ".", "append", "(", "T", ")", "\n", "", "return", "Ks", ",", "Rs", ",", "Ts", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.pw3d.PW3D": [[16, 264], ["super().__init__", "os.path.join", "os.path.join", "os.path.join", "logging.info", "logging.info", "np.load", "list", "list", "enumerate", "os.path.join", "[].copy", "np.array", "np.load", "list", "enumerate", "os.path.isdir", "logging.info", "constants.joint_mapping", "constants.joint_mapping", "os.path.join", "pw3d..load_annots", "logging.info", "SMPLR", "params.keys", "range", "pw3d..annots.keys", "enumerate", "subject_ids.append", "genders.append", "pw3d..map_kps", "kp3ds.append", "params.append", "pw3d..map_kps", "kp2ds.append", "valid_mask_2d.append", "valid_mask_3d.append", "len", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "zip", "np.concatenate", "os.path.join", "joblib.load", "zip", "logging.info", "pw3d..annots.items", "logging.info", "pw3d..annots.items", "pw3d..file_paths.append", "pw3d..sequence_ids[].append", "params.keys", "pw3d..sequence_ids.append", "enumerate", "pw3d..annots.items", "pw3d..file_paths.append", "pw3d..sequence_ids[].append", "os.path.exists", "pw3d.pack_data", "logging.info", "os.path.join", "constants.joint_mapping", "constants.joint_mapping", "pw3d..load_vibe_annots", "logging.info", "pw3d..__len__", "len", "len", "range", "single_person_file_paths.append", "range", "np.concatenate", "np.array.append", "np.concatenate", "np.concatenate.append", "pw3d.._check_kp3d_visible_parts_", "pw3d..annots[].append", "key.replace", "key.replace", "enumerate", "key.replace", "pw3d..annots[].append", "cv2.imread", "int", "pw3d..sid_video_name.values", "pw3d..sequence_ids.append", "key.split", "key.split", "len", "pw3d..annots[].append", "key.split", "len", "key.replace.strip", "key.replace.strip", "np.zeros", "pw3d..smplr", "int", "video_used.append", "key.replace.strip", "int", "key.replace.strip", "len", "key.replace.strip", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.agora.pack_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__len__", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._check_kp3d_visible_parts_", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["def", "PW3D", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "PW3D", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "False", ",", "split", "=", "'train'", ",", "mode", "=", "'vibe'", ",", "regress_smpl", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "PW3D", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "regress_smpl", "=", "regress_smpl", ")", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'3DPW/'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "data_folder", ")", ":", "\n", "                ", "self", ".", "data_folder", "=", "'/home/yusun/data_drive/dataset/3DPW/imageFiles'", "\n", "", "self", ".", "data3d_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'sequenceFiles'", ")", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'imageFiles'", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "regress_smpl", "=", "regress_smpl", "\n", "\n", "self", ".", "val_sample_ratio", "=", "5", "\n", "self", ".", "scale_range", "=", "[", "1.1", ",", "2.", "]", "\n", "self", ".", "dataset_name", "=", "{", "'PC'", ":", "'pw3d_pc'", ",", "'NC'", ":", "'pw3d_nc'", ",", "'OC'", ":", "'pw3d_oc'", ",", "'vibe'", ":", "'pw3d_vibe'", ",", "'normal'", ":", "'pw3d_normal'", "}", "[", "mode", "]", "\n", "self", ".", "use_org_annot_modes", "=", "[", "'normal'", ",", "'PC'", "]", "\n", "\n", "logging", ".", "info", "(", "'Start loading 3DPW data.'", ")", "\n", "if", "mode", "in", "self", ".", "use_org_annot_modes", ":", "\n", "                ", "logging", ".", "info", "(", "'Loading 3DPW in {} mode, split {}'", ".", "format", "(", "self", ".", "mode", ",", "self", ".", "split", ")", ")", "\n", "self", ".", "joint_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "COCO_18", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "joint3d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_24", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "annots_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'annots.npz'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "annots_path", ")", ":", "\n", "                    ", "pack_data", "(", "self", ".", "data3d_dir", ",", "self", ".", "annots_path", ")", "\n", "", "self", ".", "load_annots", "(", ")", "\n", "", "elif", "mode", "in", "[", "'vibe'", ",", "'NC'", ",", "'OC'", "]", ":", "\n", "                ", "logging", ".", "info", "(", "'Loading 3DPW in VIBE mode, split {}'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "self", ".", "annots_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'vibe_db'", ")", "\n", "self", ".", "joint_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "LSP_14", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "joint3d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "LSP_14", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "#self.regress_smpl = False", "\n", "self", ".", "load_vibe_annots", "(", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "'3DPW loading mode is not recognized, please use the normal / vibe mode'", ")", "\n", "raise", "NotImplementedError", "\n", "\n", "", "if", "self", ".", "split", "==", "'val'", ":", "\n", "                ", "self", ".", "file_paths", "=", "self", ".", "file_paths", "[", ":", ":", "self", ".", "val_sample_ratio", "]", "\n", "\n", "", "if", "mode", "in", "[", "'vibe'", ",", "'NC'", ",", "'OC'", "]", ":", "\n", "                ", "self", ".", "root_inds", "=", "[", "constants", ".", "SMPL_ALL_54", "[", "'R_Hip'", "]", ",", "constants", ".", "SMPL_ALL_54", "[", "'L_Hip'", "]", "]", "\n", "", "elif", "mode", "in", "[", "'PC'", ",", "'normal'", "]", ":", "\n", "                ", "self", ".", "root_inds", "=", "[", "constants", ".", "SMPL_ALL_54", "[", "'Pelvis_SMPL'", "]", "]", "\n", "\n", "", "if", "self", ".", "regress_smpl", ":", "\n", "                ", "logging", ".", "info", "(", "'loading SMPL regressor for mesh vertex calculation.'", ")", "\n", "self", ".", "smplr", "=", "SMPLR", "(", "use_gender", "=", "True", ")", "\n", "\n", "", "logging", ".", "info", "(", "'3DPW dataset {} split total {} samples, loading mode {}, containing {} video sequence.'", ".", "format", "(", "self", ".", "split", ",", "self", ".", "__len__", "(", ")", ",", "self", ".", "mode", ",", "len", "(", "self", ".", "sequence_ids", ")", ")", ")", "\n", "\n", "", "def", "load_PC_annots", "(", "self", ")", ":", "\n", "            ", "annots", "=", "np", ".", "load", "(", "self", ".", "annots_path", ",", "allow_pickle", "=", "True", ")", "\n", "params", "=", "annots", "[", "'params'", "]", "[", "(", ")", "]", "\n", "kp3ds", "=", "annots", "[", "'kp3d'", "]", "[", "(", ")", "]", "\n", "kp2ds", "=", "annots", "[", "'kp2d'", "]", "[", "(", ")", "]", "\n", "self", ".", "annots", "=", "{", "}", "\n", "video_names", "=", "list", "(", "params", ".", "keys", "(", ")", ")", "\n", "for", "video_name", "in", "video_names", ":", "\n", "                ", "for", "person_id", "in", "range", "(", "len", "(", "kp3ds", "[", "video_name", "]", ")", ")", ":", "\n", "                    ", "frame_range", "=", "PW3D_PCsubset", "[", "video_name", ".", "strip", "(", "'.pkl'", ")", "]", "\n", "for", "frame_id", "in", "range", "(", "frame_range", "[", "0", "]", ",", "frame_range", "[", "1", "]", ")", ":", "\n", "                        ", "name", "=", "'{}_{}'", ".", "format", "(", "video_name", ".", "strip", "(", "'.pkl'", ")", ",", "frame_id", ")", "\n", "kp3d", "=", "kp3ds", "[", "video_name", "]", "[", "person_id", "]", "[", "frame_id", "]", "\n", "kp2d", "=", "kp2ds", "[", "video_name", "]", "[", "person_id", "]", "[", "frame_id", "]", "\n", "pose_param", "=", "params", "[", "video_name", "]", "[", "'poses'", "]", "[", "person_id", "]", "[", "frame_id", "]", "\n", "beta_param", "=", "params", "[", "video_name", "]", "[", "'betas'", "]", "[", "person_id", "]", "\n", "if", "name", "not", "in", "self", ".", "annots", ":", "\n", "                            ", "self", ".", "annots", "[", "name", "]", "=", "[", "]", "\n", "", "self", ".", "annots", "[", "name", "]", ".", "append", "(", "[", "video_name", ".", "strip", "(", "'.pkl'", ")", ",", "person_id", ",", "frame_id", ",", "kp2d", ".", "T", ",", "kp3d", ",", "pose_param", ",", "beta_param", "]", ")", "\n", "", "", "", "self", ".", "file_paths", "=", "list", "(", "self", ".", "annots", ".", "keys", "(", ")", ")", "\n", "\n", "", "def", "reset_dataset_length_to_target_person_number", "(", "self", ")", ":", "\n", "            ", "single_person_file_paths", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "file_paths", ":", "\n", "                ", "for", "person_id", ",", "annot", "in", "enumerate", "(", "self", ".", "annots", "[", "name", "]", ")", ":", "\n", "                    ", "single_person_key", "=", "'{}-{}'", ".", "format", "(", "name", ",", "person_id", ")", "\n", "single_person_file_paths", ".", "append", "(", "single_person_key", ")", "\n", "self", ".", "annots", "[", "single_person_key", "]", "=", "[", "annot", "]", "\n", "#del self.annots[name]", "\n", "", "", "self", ".", "file_paths", "=", "single_person_file_paths", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "annots", "=", "self", ".", "annots", "[", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "]", "\n", "subject_ids", ",", "genders", ",", "kp2ds", ",", "kp3ds", ",", "params", ",", "bbox", ",", "valid_mask_2d", ",", "valid_mask_3d", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "root_trans", "=", "[", "]", "\n", "verts", "=", "None", "\n", "for", "inds", ",", "annot", "in", "enumerate", "(", "annots", ")", ":", "\n", "                ", "video_name", ",", "gender", ",", "seq_id", ",", "subject_id", ",", "frame_id", ",", "kp2d", ",", "kp3d", ",", "pose_param", ",", "beta_param", ",", "tran", "=", "annot", "\n", "subject_ids", ".", "append", "(", "subject_id", ")", "\n", "genders", ".", "append", "(", "gender", ")", "\n", "kp3d", "=", "self", ".", "map_kps", "(", "kp3d", ",", "self", ".", "joint3d_mapper", ")", "\n", "kp3ds", ".", "append", "(", "kp3d", ")", "\n", "params", ".", "append", "(", "np", ".", "concatenate", "(", "[", "pose_param", "[", ":", "66", "]", ",", "beta_param", "[", ":", "10", "]", "]", ")", ")", "\n", "kp2d_gt", "=", "self", ".", "map_kps", "(", "kp2d", ",", "self", ".", "joint_mapper", ")", "\n", "kp2ds", ".", "append", "(", "kp2d_gt", ")", "\n", "valid_mask_2d", ".", "append", "(", "[", "True", ",", "True", ",", "False", "]", ")", "\n", "valid_mask_3d", ".", "append", "(", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", "]", ")", "\n", "if", "self", ".", "mode", "in", "self", ".", "use_org_annot_modes", ":", "\n", "                    ", "root_trans", ".", "append", "(", "tran", ")", "\n", "", "", "if", "len", "(", "root_trans", ")", "==", "0", ":", "\n", "                ", "root_trans", "=", "None", "\n", "", "else", ":", "\n", "                ", "root_trans", "=", "np", ".", "array", "(", "root_trans", ")", "\n", "\n", "", "kp2ds", ",", "kp3ds", ",", "params", "=", "np", ".", "array", "(", "kp2ds", ")", ",", "np", ".", "array", "(", "kp3ds", ")", ",", "np", ".", "array", "(", "params", ")", "\n", "valid_mask_2d", ",", "valid_mask_3d", "=", "np", ".", "array", "(", "valid_mask_2d", ")", ",", "np", ".", "array", "(", "valid_mask_3d", ")", "\n", "if", "self", ".", "regress_smpl", ":", "\n", "                ", "verts", "=", "[", "]", "\n", "poses", ",", "betas", "=", "np", ".", "concatenate", "(", "[", "params", "[", ":", ",", ":", "-", "10", "]", ",", "np", ".", "zeros", "(", "(", "len", "(", "params", ")", ",", "6", ")", ")", "]", ",", "1", ")", ",", "params", "[", ":", ",", "-", "10", ":", "]", "\n", "for", "pose", ",", "beta", ",", "gender", "in", "zip", "(", "poses", ",", "betas", ",", "genders", ")", ":", "\n", "                    ", "gender", "=", "'n'", "if", "gender", "is", "None", "else", "gender", "\n", "verts", ".", "append", "(", "self", ".", "smplr", "(", "pose", ",", "beta", ",", "gender", ")", "[", "0", "]", ")", "\n", "#smpl_outs = self.smplr(pose, beta, gender)", "\n", "#kp3ds.append(smpl_outs['j3d'].numpy())", "\n", "#verts.append(smpl_outs['verts'].numpy())", "\n", "#kp3ds = np.concatenate(kp3ds, 0)", "\n", "", "verts", "=", "np", ".", "concatenate", "(", "verts", ",", "0", ")", "\n", "\n", "", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "video_name", ",", "'image_{:05}.jpg'", ".", "format", "(", "frame_id", ")", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "valid_masks", "=", "np", ".", "array", "(", "[", "self", ".", "_check_kp3d_visible_parts_", "(", "kp3d", ")", "for", "kp3d", "in", "kp3ds", "]", ")", "\n", "kp3ds", "[", "~", "valid_masks", "]", "=", "-", "2.", "\n", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "subject_ids", ",", "'vmask_2d'", ":", "valid_mask_2d", ",", "'vmask_3d'", ":", "valid_mask_3d", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "params", ",", "'root_trans'", ":", "root_trans", ",", "'verts'", ":", "verts", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "self", ".", "dataset_name", "}", "\n", "return", "img_info", "\n", "\n", "", "def", "load_vibe_annots", "(", "self", ")", ":", "\n", "            ", "set_names", "=", "{", "'all'", ":", "[", "'train'", ",", "'val'", ",", "'test'", "]", ",", "'train'", ":", "[", "'train'", "]", ",", "'test'", ":", "[", "'test'", "]", ",", "'val'", ":", "[", "'val'", "]", "}", "\n", "self", ".", "split_used", "=", "set_names", "[", "self", ".", "split", "]", "\n", "self", ".", "annots", "=", "{", "}", "\n", "self", ".", "file_paths", ",", "self", ".", "sequence_ids", ",", "self", ".", "sid_video_name", "=", "[", "]", ",", "[", "]", ",", "{", "}", "\n", "self", ".", "seq_person_ids", "=", "{", "}", "\n", "subject_id", ",", "seq_id", "=", "0", ",", "0", "\n", "for", "split", "in", "self", ".", "split_used", ":", "\n", "                ", "db_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "annots_path", ",", "'3dpw_{}_db.pt'", ".", "format", "(", "split", ")", ")", "\n", "db", "=", "joblib", ".", "load", "(", "db_file", ")", "\n", "vid_names", "=", "db", "[", "'vid_name'", "]", "\n", "frame_ids", "=", "db", "[", "'frame_id'", "]", "\n", "kp2ds", ",", "kp3ds", ",", "pose_params", ",", "beta_params", ",", "valids", "=", "db", "[", "'joints2D'", "]", ",", "db", "[", "'joints3D'", "]", ",", "db", "[", "'pose'", "]", ",", "db", "[", "'shape'", "]", ",", "db", "[", "'valid'", "]", "\n", "if", "split", "==", "'train'", ":", "\n", "                    ", "kp3ds", "=", "kp3ds", "[", ":", ",", "25", ":", "39", "]", "\n", "", "for", "vid_name", ",", "frame_id", ",", "kp2d", ",", "kp3d", ",", "pose_param", ",", "beta_param", ",", "valid", "in", "zip", "(", "vid_names", ",", "frame_ids", ",", "kp2ds", ",", "kp3ds", ",", "pose_params", ",", "beta_params", ",", "valids", ")", ":", "\n", "                    ", "video_name", ",", "person_id", "=", "vid_name", "[", ":", "-", "2", "]", ",", "int", "(", "vid_name", "[", "-", "1", "]", ")", "\n", "if", "valid", "!=", "1", ":", "\n", "                        ", "continue", "\n", "\n", "", "name", "=", "'{}_{}'", ".", "format", "(", "video_name", ",", "frame_id", ")", "\n", "if", "video_name", "not", "in", "self", ".", "sid_video_name", ".", "values", "(", ")", ":", "\n", "                        ", "self", ".", "sid_video_name", "[", "seq_id", "]", "=", "video_name", "\n", "self", ".", "sequence_ids", ".", "append", "(", "[", "]", ")", "\n", "self", ".", "seq_person_ids", "[", "video_name", "]", "=", "{", "}", "\n", "seq_id", "+=", "1", "\n", "", "if", "person_id", "not", "in", "self", ".", "seq_person_ids", "[", "video_name", "]", ":", "\n", "                        ", "self", ".", "seq_person_ids", "[", "video_name", "]", "[", "person_id", "]", "=", "subject_id", "\n", "subject_id", "+=", "1", "\n", "", "if", "name", "not", "in", "self", ".", "annots", ":", "\n", "                        ", "self", ".", "annots", "[", "name", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "annots", "[", "name", "]", ".", "append", "(", "[", "video_name", ",", "None", ",", "int", "(", "seq_id", "-", "1", ")", ",", "self", ".", "seq_person_ids", "[", "video_name", "]", "[", "person_id", "]", ",", "frame_id", ",", "kp2d", ",", "kp3d", ",", "pose_param", ",", "beta_param", ",", "None", "]", ")", "\n", "\n", "", "", "if", "self", ".", "mode", "==", "'NC'", ":", "\n", "                ", "logging", ".", "info", "(", "'Convert to NC subset...'", ")", "\n", "annots", "=", "{", "}", "\n", "for", "key", ",", "annot", "in", "self", ".", "annots", ".", "items", "(", ")", ":", "\n", "                    ", "frame_id", "=", "key", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "video_name", "=", "key", ".", "replace", "(", "'_'", "+", "frame_id", ",", "''", ")", "\n", "if", "video_name", "[", ":", "-", "3", "]", "not", "in", "PW3D_OCsubset", ":", "\n", "                        ", "if", "video_name", "not", "in", "PW3D_PCsubset", ":", "\n", "                            ", "annots", "[", "key", "]", "=", "annot", "\n", "", "", "", "self", ".", "annots", "=", "annots", "\n", "\n", "", "if", "self", ".", "mode", "==", "'OC'", ":", "\n", "                ", "logging", ".", "info", "(", "'Convert to OC subset...'", ")", "\n", "video_used", "=", "[", "]", "\n", "annots", "=", "{", "}", "\n", "for", "key", ",", "annot", "in", "self", ".", "annots", ".", "items", "(", ")", ":", "\n", "                    ", "frame_id", "=", "key", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "video_name", "=", "key", ".", "replace", "(", "'_'", "+", "frame_id", ",", "''", ")", "\n", "if", "video_name", "[", ":", "-", "3", "]", "in", "PW3D_OCsubset", ":", "\n", "                        ", "if", "video_name", "not", "in", "video_used", ":", "\n", "                            ", "video_used", ".", "append", "(", "video_name", ")", "\n", "", "annots", "[", "key", "]", "=", "annot", "\n", "", "", "self", ".", "annots", "=", "annots", "\n", "\n", "", "for", "frame_name", "in", "self", ".", "annots", ":", "\n", "                ", "self", ".", "file_paths", ".", "append", "(", "frame_name", ")", "\n", "self", ".", "sequence_ids", "[", "self", ".", "annots", "[", "frame_name", "]", "[", "0", "]", "[", "2", "]", "]", ".", "append", "(", "len", "(", "self", ".", "file_paths", ")", "-", "1", ")", "\n", "#self.sequence_first_ids = [sids[0] for sids in self.sequence_ids]", "\n", "", "self", ".", "ID_num", "=", "subject_id", "\n", "\n", "", "def", "load_annots", "(", "self", ")", ":", "\n", "            ", "set_names", "=", "{", "'train'", ":", "[", "'train'", "]", ",", "'all'", ":", "[", "'train'", ",", "'validation'", ",", "'test'", "]", ",", "'val'", ":", "[", "'validation'", "]", ",", "'test'", ":", "[", "'test'", "]", "}", "\n", "split_used", "=", "set_names", "[", "self", ".", "split", "]", "\n", "annots", "=", "np", ".", "load", "(", "self", ".", "annots_path", ",", "allow_pickle", "=", "True", ")", "\n", "params", "=", "annots", "[", "'params'", "]", "[", "(", ")", "]", "\n", "kp3ds", "=", "annots", "[", "'kp3d'", "]", "[", "(", ")", "]", "\n", "kp2ds", "=", "annots", "[", "'kp2d'", "]", "[", "(", ")", "]", "\n", "self", ".", "annots", "=", "{", "}", "\n", "self", ".", "file_paths", ",", "self", ".", "sequence_ids", ",", "self", ".", "sid_video_name", "=", "[", "]", ",", "[", "]", ",", "{", "}", "\n", "subject_id", "=", "0", "\n", "video_names", "=", "list", "(", "params", ".", "keys", "(", ")", ")", "\n", "for", "seq_id", ",", "video_name", "in", "enumerate", "(", "video_names", ")", ":", "\n", "                ", "self", ".", "sid_video_name", "[", "seq_id", "]", "=", "video_name", "\n", "self", ".", "sequence_ids", ".", "append", "(", "[", "]", ")", "\n", "valid_indices", "=", "params", "[", "video_name", "]", "[", "'valid_indices'", "]", "\n", "genders", "=", "params", "[", "video_name", "]", "[", "'genders'", "]", "\n", "for", "person_id", ",", "valid_index", "in", "enumerate", "(", "valid_indices", ")", ":", "\n", "                    ", "for", "annot_id", ",", "frame_id", "in", "enumerate", "(", "valid_index", ")", ":", "\n", "                        ", "split", "=", "params", "[", "video_name", "]", "[", "'split'", "]", "\n", "if", "split", "not", "in", "split_used", ":", "\n", "                            ", "continue", "\n", "", "name", "=", "'{}_{}'", ".", "format", "(", "video_name", ".", "strip", "(", "'.pkl'", ")", ",", "frame_id", ")", "\n", "kp3d", "=", "kp3ds", "[", "video_name", "]", "[", "person_id", "]", "[", "annot_id", "]", "\n", "kp2d", "=", "kp2ds", "[", "video_name", "]", "[", "person_id", "]", "[", "annot_id", "]", "\n", "pose_param", "=", "params", "[", "video_name", "]", "[", "'poses'", "]", "[", "person_id", "]", "[", "annot_id", "]", "\n", "beta_param", "=", "params", "[", "video_name", "]", "[", "'betas'", "]", "[", "person_id", "]", "\n", "gender", "=", "genders", "[", "person_id", "]", "\n", "tran", "=", "params", "[", "video_name", "]", "[", "'trans'", "]", "[", "person_id", "]", "[", "annot_id", "]", "\n", "\n", "if", "name", "not", "in", "self", ".", "annots", ":", "\n", "                            ", "self", ".", "annots", "[", "name", "]", "=", "[", "]", "\n", "", "self", ".", "annots", "[", "name", "]", ".", "append", "(", "[", "video_name", ".", "strip", "(", "'.pkl'", ")", ",", "gender", ",", "seq_id", ",", "subject_id", ",", "frame_id", ",", "kp2d", ".", "T", ",", "kp3d", ",", "pose_param", ",", "beta_param", ",", "tran", "]", ")", "\n", "", "subject_id", "+=", "1", "\n", "\n", "# bacause VIBE removed the subject occluded, so we have to use the original gt data.", "\n", "", "", "if", "self", ".", "mode", "==", "'PC'", ":", "\n", "                ", "annots", "=", "{", "}", "\n", "for", "key", ",", "annot", "in", "self", ".", "annots", ".", "items", "(", ")", ":", "\n", "                    ", "frame_id", "=", "key", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "video_name", "=", "key", ".", "replace", "(", "'_'", "+", "frame_id", ",", "''", ")", "\n", "if", "video_name", "in", "PW3D_PCsubset", ":", "\n", "                        ", "frame_range", "=", "PW3D_PCsubset", "[", "video_name", "]", "\n", "if", "frame_range", "[", "0", "]", "<=", "int", "(", "frame_id", ")", "<", "frame_range", "[", "1", "]", ":", "\n", "                            ", "annots", "[", "key", "]", "=", "annot", "\n", "", "", "", "self", ".", "annots", "=", "annots", "\n", "\n", "", "for", "frame_name", "in", "self", ".", "annots", ":", "\n", "                ", "self", ".", "file_paths", ".", "append", "(", "frame_name", ")", "\n", "self", ".", "sequence_ids", "[", "self", ".", "annots", "[", "frame_name", "]", "[", "0", "]", "[", "2", "]", "]", ".", "append", "(", "len", "(", "self", ".", "file_paths", ")", "-", "1", ")", "\n", "#self.sequence_first_ids = [sids[0] for sids in self.sequence_ids]", "\n", "", "self", ".", "ID_num", "=", "subject_id", "\n", "", "", "return", "PW3D", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.pw3d.pack_data": [[265, 343], ["glob.glob", "np.savez", "os.path.join", "SMPL", "SMPL", "print", "os.path.basename", "pickle.load", "np.array", "range", "open", "path_gt.split", "len", "pw3d.check_valid_inds", "all_jp2d_gts[].append", "np.array", "np.array", "np.expand_dims", "np.tile", "np.array", "[].append", "[].append", "smpl_model_genders[].update", "np.transpose", "pw3d.apply_camera_transforms", "transform_rot_representation", "[].append", "all_jp_gts[].append", "all_glob_rot_gts[].append", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.check_valid_inds", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.apply_camera_transforms", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.transform_rot_representation"], ["", "def", "pack_data", "(", "data3d_dir", ",", "annots_path", ")", ":", "\n", "    ", "\"\"\"\n    The function reads all the ground truth and prediction files. And concatenates\n\n    :param paths_gt: all the paths corresponding to the ground truth - list of pkl files\n    :param paths_prd: all the paths corresponding to the predictions - list of pkl files\n    :return:\n        jp_pred: jointPositions Prediction. Shape N x 24 x 3\n        jp_gt: jointPositions ground truth. Shape: N x 24 x 3\n        mats_pred: Global rotation matrices predictions. Shape N x 24 x 3 x 3\n        mats_gt: Global rotation matrices ground truths. Shape N x 24 x 3 x 3\n    \"\"\"", "\n", "# all ground truth smpl parameters / joint positions / rotation matrices", "\n", "from", "evaluation", ".", "pw3d_eval", ".", "SMPL", "import", "SMPL", "\n", "\n", "all_params", ",", "all_jp_gts", ",", "all_jp2d_gts", ",", "all_glob_rot_gts", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "seq", "=", "0", "\n", "num_jps_pred", "=", "0", "\n", "num_ors_pred", "=", "0", "\n", "paths_gt", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data3d_dir", ",", "'*/*.pkl'", ")", ")", "\n", "\n", "smpl_model_genders", "=", "{", "'f'", ":", "SMPL", "(", "center_idx", "=", "0", ",", "gender", "=", "'f'", ",", "model_root", "=", "os", ".", "path", ".", "join", "(", "config", ".", "model_dir", ",", "'smpl_original'", ")", ")", ",", "'m'", ":", "SMPL", "(", "center_idx", "=", "0", ",", "gender", "=", "'m'", ",", "model_root", "=", "os", ".", "path", ".", "join", "(", "config", ".", "model_dir", ",", "'smpl_original'", ")", ")", "}", "\n", "\n", "# construct the data structures -", "\n", "for", "path_gt", "in", "paths_gt", ":", "\n", "        ", "print", "(", "'Processing: '", ",", "path_gt", ")", "\n", "video_name", "=", "os", ".", "path", ".", "basename", "(", "path_gt", ")", "\n", "seq", "=", "seq", "+", "1", "\n", "# Open pkl files", "\n", "data_gt", "=", "pickle", ".", "load", "(", "open", "(", "path_gt", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "split", "=", "path_gt", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "\n", "genders", "=", "data_gt", "[", "'genders'", "]", "\n", "all_params", "[", "video_name", "]", ",", "all_jp_gts", "[", "video_name", "]", ",", "all_jp2d_gts", "[", "video_name", "]", ",", "all_glob_rot_gts", "[", "video_name", "]", "=", "{", "}", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "all_params", "[", "video_name", "]", "[", "'split'", "]", "=", "split", "\n", "all_params", "[", "video_name", "]", "[", "'genders'", "]", "=", "genders", "\n", "all_params", "[", "video_name", "]", "[", "'poses'", "]", ",", "all_params", "[", "video_name", "]", "[", "'trans'", "]", ",", "all_params", "[", "video_name", "]", "[", "'valid_indices'", "]", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "all_params", "[", "video_name", "]", "[", "'betas'", "]", "=", "np", ".", "array", "(", "data_gt", "[", "'betas'", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "genders", ")", ")", ":", "\n", "# Get valid frames", "\n", "# Frame with no zeros in the poses2d file and where campose_valid is True", "\n", "            ", "poses2d_gt", "=", "data_gt", "[", "'poses2d'", "]", "\n", "poses2d_gt_i", "=", "poses2d_gt", "[", "i", "]", "\n", "camposes_valid", "=", "data_gt", "[", "'campose_valid'", "]", "\n", "camposes_valid_i", "=", "camposes_valid", "[", "i", "]", "\n", "valid_indices", "=", "check_valid_inds", "(", "poses2d_gt_i", ",", "camposes_valid_i", ")", "\n", "all_jp2d_gts", "[", "video_name", "]", ".", "append", "(", "poses2d_gt_i", "[", "valid_indices", "]", ")", "\n", "\n", "# Get the ground truth SMPL body parameters - poses, betas and translation parameters", "\n", "pose_params", "=", "np", ".", "array", "(", "data_gt", "[", "'poses'", "]", ")", "\n", "pose_params", "=", "pose_params", "[", "i", ",", "valid_indices", ",", ":", "]", "\n", "shape_params", "=", "np", ".", "array", "(", "data_gt", "[", "'betas'", "]", "[", "i", "]", ")", "\n", "shape_params", "=", "np", ".", "expand_dims", "(", "shape_params", ",", "0", ")", "\n", "shape_params", "=", "shape_params", "[", ":", ",", ":", "10", "]", "\n", "shape_params", "=", "np", ".", "tile", "(", "shape_params", ",", "(", "pose_params", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "trans_params", "=", "np", ".", "array", "(", "data_gt", "[", "'trans'", "]", ")", "\n", "trans_params", "=", "trans_params", "[", "i", ",", "valid_indices", ",", ":", "]", "\n", "all_params", "[", "video_name", "]", "[", "'trans'", "]", ".", "append", "(", "trans_params", ")", "\n", "all_params", "[", "video_name", "]", "[", "'valid_indices'", "]", ".", "append", "(", "valid_indices", ")", "\n", "\n", "# Get the GT joint and vertex positions and the global rotation matrices", "\n", "verts_gt", ",", "jp_gt", ",", "glb_rot_mats_gt", "=", "smpl_model_genders", "[", "genders", "[", "i", "]", "]", ".", "update", "(", "pose_params", ",", "shape_params", ",", "trans_params", ")", "\n", "\n", "# Apply Camera Matrix Transformation to ground truth values", "\n", "cam_matrix", "=", "data_gt", "[", "'cam_poses'", "]", "\n", "new_cam_poses", "=", "np", ".", "transpose", "(", "cam_matrix", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "new_cam_poses", "=", "new_cam_poses", "[", "valid_indices", ",", ":", ",", ":", "]", "\n", "\n", "# we don't have the joint regressor for female/male model. So we can't regress all 54 joints from the mesh of female/male model.", "\n", "jp_gt", ",", "glb_rot_mats_gt", "=", "apply_camera_transforms", "(", "jp_gt", ",", "glb_rot_mats_gt", ",", "new_cam_poses", ")", "\n", "root_rotation_cam_tranformed", "=", "transform_rot_representation", "(", "glb_rot_mats_gt", "[", ":", ",", "0", "]", ",", "input_type", "=", "'mat'", ",", "out_type", "=", "'vec'", ")", "\n", "pose_params", "[", ":", ",", ":", "3", "]", "=", "root_rotation_cam_tranformed", "\n", "all_params", "[", "video_name", "]", "[", "'poses'", "]", ".", "append", "(", "pose_params", ")", "\n", "all_jp_gts", "[", "video_name", "]", ".", "append", "(", "jp_gt", ")", "\n", "all_glob_rot_gts", "[", "video_name", "]", ".", "append", "(", "glb_rot_mats_gt", ")", "\n", "\n", "", "", "np", ".", "savez", "(", "annots_path", ",", "params", "=", "all_params", ",", "kp3d", "=", "all_jp_gts", ",", "glob_rot", "=", "all_glob_rot_gts", ",", "kp2d", "=", "all_jp2d_gts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.pw3d.with_ones": [[345, 354], ["np.ones", "np.concatenate"], "function", ["None"], ["", "def", "with_ones", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Converts an array in 3d coordinates to 4d homogenous coordiantes\n    :param data: array of shape A x B x 3\n    :return return ret_arr: array of shape A x B x 4 where the extra dimension is filled with ones\n    \"\"\"", "\n", "ext_arr", "=", "np", ".", "ones", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "data", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "ret_arr", "=", "np", ".", "concatenate", "(", "(", "data", ",", "ext_arr", ")", ",", "axis", "=", "2", ")", "\n", "return", "ret_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.pw3d.apply_camera_transforms": [[355, 376], ["pw3d.with_ones", "np.transpose", "np.expand_dims", "np.tile", "np.matmul", "np.matmul"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.with_ones"], ["", "def", "apply_camera_transforms", "(", "joints", ",", "rotations", ",", "camera", ")", ":", "\n", "    ", "\"\"\"\n    Applies camera transformations to joint locations and rotations matrices\n    :param joints: B x 24 x 3\n    :param rotations: B x 24 x 3 x 3\n    :param camera: B x 4 x 4 - already transposed\n    :return: joints B x 24 x 3 joints after applying camera transformations\n             rotations B x 24 x 3 x 3 - rotations matrices after applying camera transformations\n    \"\"\"", "\n", "joints", "=", "with_ones", "(", "joints", ")", "# B x 24 x 4", "\n", "joints", "=", "np", ".", "matmul", "(", "joints", ",", "camera", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "# multiply all rotation matrices with the camera rotation matrix", "\n", "# transpose camera coordinates back", "\n", "cam_new", "=", "np", ".", "transpose", "(", "camera", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "cam_new", "=", "np", ".", "expand_dims", "(", "cam_new", ",", "1", ")", "\n", "cam_new", "=", "np", ".", "tile", "(", "cam_new", ",", "(", "1", ",", "24", ",", "1", ",", "1", ")", ")", "\n", "# B x 24 x 3 x 3", "\n", "rotations", "=", "np", ".", "matmul", "(", "cam_new", ",", "rotations", ")", "\n", "\n", "return", "joints", ",", "rotations", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.pw3d.check_valid_inds": [[378, 399], ["np.mean", "np.logical_not", "np.array().astype", "np.logical_and", "np.array", "np.mean", "np.abs", "np.array", "np.where"], "function", ["None"], ["", "def", "check_valid_inds", "(", "poses2d", ",", "camposes_valid", ")", ":", "\n", "    ", "\"\"\"\n    Computes the indices where further computations are required\n    :param poses2d: N x 18 x 3 array of 2d Poses\n    :param camposes_valid: N x 1 array of indices where camera poses are valid\n    :return: array of indices indicating frame ids in the sequence which are to be evaluated\n    \"\"\"", "\n", "\n", "# find all indices in the N sequences where the sum of the 18x3 array is not zero", "\n", "# N, numpy array", "\n", "poses2d_mean", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "poses2d", ")", ",", "axis", "=", "2", ")", ",", "axis", "=", "1", ")", "\n", "poses2d_bool", "=", "poses2d_mean", "==", "0", "\n", "poses2d_bool_inv", "=", "np", ".", "logical_not", "(", "poses2d_bool", ")", "\n", "\n", "# find all the indices where the camposes are valid", "\n", "camposes_valid", "=", "np", ".", "array", "(", "camposes_valid", ")", ".", "astype", "(", "'bool'", ")", "\n", "\n", "final", "=", "np", ".", "logical_and", "(", "poses2d_bool_inv", ",", "camposes_valid", ")", "\n", "indices", "=", "np", ".", "array", "(", "np", ".", "where", "(", "final", "==", "True", ")", "[", "0", "]", ")", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.relative_human.Relative_human": [[9, 131], ["super().__init__", "relative_human.._init_", "logging.info", "os.path.join", "os.path.join", "list", "constants.joint_mapping", "constants.joint_mapping", "constants.joint_mapping", "relative_human.._get_image_path", "enumerate", "np.array", "os.path.join", "os.path.join", "np.zeros", "np.zeros", "relative_human..annots.keys", "os.path.join", "np.load", "age_balanced_sample_dict[].tolist", "age_balanced_sample_dict[].tolist", "relative_human..homogenize_pose_sample", "cv2.imread", "np.array", "np.array", "np.array.append", "kp2ds.append", "valid_mask_2ds.append", "valid_mask_3ds.append", "np.array", "np.array", "np.arange", "coco.loadImgs", "coco.loadImgs", "len", "np.load", "print", "len", "pycocotools.mask.frPyObjects", "pycocotools.mask.frPyObjects", "pycocotools.mask.decode", "len", "np.array().reshape", "pycocotools.mask.decode", "pycocotools.mask.frPyObjects", "len", "pycocotools.mask.decode", "np.array", "len", "relative_human..map_kps", "relative_human..map_kps", "len", "relative_human..map_kps", "os.path.basename().replace", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.homogenize_pose_sample", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps"], ["def", "Relative_human", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "Relative_human", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "split", "=", "'train'", ",", "regress_smpl", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "Relative_human", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "regress_smpl", ")", "\n", "self", ".", "min_pts_required", "=", "2", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "_init_", "(", ")", "\n", "logging", ".", "info", "(", "'Relative_human data has been loaded, total {} samples'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "\n", "", "def", "_init_", "(", "self", ")", ":", "\n", "            ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "\"Relative_human\"", ")", "\n", "self", ".", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'{}_annots.npz'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "self", ".", "annots", "=", "np", ".", "load", "(", "self", ".", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "self", ".", "file_paths", "=", "list", "(", "self", ".", "annots", ".", "keys", "(", ")", ")", "\n", "self", ".", "kp2d_mapper_OCH", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "OCHuman_19", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "kp2d_mapper_CP", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "Crowdpose_14", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "kp2d_mapper_BK", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "BK_19", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "if", "self", ".", "homogenize_pose_space", "and", "self", ".", "train_flag", ":", "\n", "                ", "sample_dict_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'age_balanced_sample_dict.npz'", ")", "\n", "age_balanced_sample_dict", "=", "np", ".", "load", "(", "sample_dict_path", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "file_paths", "=", "age_balanced_sample_dict", "[", "'file_paths'", "]", ".", "tolist", "(", ")", "\n", "age_pools", "=", "age_balanced_sample_dict", "[", "'cluster_pool'", "]", ".", "tolist", "(", ")", "\n", "self", ".", "cluster_pool", "=", "[", "age_pools", "[", "0", "]", ",", "age_pools", "[", "0", "]", "+", "age_pools", "[", "1", "]", ",", "age_pools", "[", "0", "]", "+", "age_pools", "[", "1", "]", ",", "age_pools", "[", "2", "]", ",", "age_pools", "[", "3", "]", "]", "\n", "\n", "", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "if", "self", ".", "homogenize_pose_space", "and", "self", ".", "train_flag", ":", "\n", "                ", "index", "=", "self", ".", "homogenize_pose_sample", "(", "index", ")", "\n", "", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "imgpath", "=", "self", ".", "_get_image_path", "(", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "#mask = self.get_exclude_mask(anno, index)[:,:,np.newaxis].astype(np.float32)", "\n", "annots", "=", "self", ".", "annots", "[", "img_name", "]", "\n", "kp2ds", ",", "valid_mask_2ds", ",", "valid_mask_3ds", ",", "depth_info", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "idx", ",", "annot", "in", "enumerate", "(", "annots", ")", ":", "\n", "                ", "valid_mask_2d", "=", "[", "False", ",", "False", ",", "True", "]", "\n", "vbox", "=", "np", ".", "array", "(", "annot", "[", "'bbox'", "]", ")", "\n", "#vbox[2:] += vbox[:2]", "\n", "#fbox = np.array(annot['bbox_wb']) if 'bbox_wb' in annot else vbox", "\n", "fbox", "=", "vbox", "\n", "joint", "=", "np", ".", "array", "(", "[", "fbox", "[", ":", "2", "]", ",", "fbox", "[", "2", ":", "]", ",", "vbox", "[", ":", "2", "]", ",", "vbox", "[", "2", ":", "]", "]", ")", "\n", "if", "'kp2d'", "in", "annot", ":", "\n", "                    ", "if", "annot", "[", "'kp2d'", "]", "is", "not", "None", ":", "\n", "                        ", "joint", "=", "np", ".", "array", "(", "annot", "[", "'kp2d'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "invalid_kp_mask", "=", "joint", "[", ":", ",", "2", "]", "==", "0", "\n", "joint", "[", "invalid_kp_mask", "]", "=", "-", "2.", "\n", "joint", "[", ":", ",", "2", "]", "=", "joint", "[", ":", ",", "2", "]", ">", "0", "\n", "valid_mask_2d", "[", "0", "]", "=", "True", "\n", "if", "len", "(", "joint", ")", "==", "19", ":", "\n", "                            ", "is_BK", "=", "len", "(", "os", ".", "path", ".", "basename", "(", "img_name", ")", ".", "replace", "(", "'.jpg'", ",", "''", ")", ")", "==", "7", "\n", "if", "is_BK", ":", "\n", "                                ", "joint", "=", "self", ".", "map_kps", "(", "joint", ",", "maps", "=", "self", ".", "kp2d_mapper_BK", ")", "\n", "", "else", ":", "\n", "                                ", "joint", "=", "self", ".", "map_kps", "(", "joint", ",", "maps", "=", "self", ".", "kp2d_mapper_OCH", ")", "\n", "", "", "elif", "len", "(", "joint", ")", "==", "14", ":", "\n", "                            ", "joint", "=", "self", ".", "map_kps", "(", "joint", ",", "maps", "=", "self", ".", "kp2d_mapper_CP", ")", "\n", "", "else", ":", "\n", "                            ", "raise", "NotImplementedError", "\n", "\n", "", "", "", "if", "annot", "[", "'body_type'", "]", "==", "3", ":", "\n", "                    ", "annot", "[", "'body_type'", "]", "=", "0", "\n", "", "if", "'depth_id'", "not", "in", "annot", ":", "\n", "                    ", "annot", "[", "'depth_id'", "]", "=", "-", "1", "\n", "print", "(", "img_name", ",", "'depth_id missing!!'", ")", "\n", "", "depth_info", ".", "append", "(", "[", "annot", "[", "'age'", "]", ",", "annot", "[", "'gender'", "]", ",", "annot", "[", "'body_type'", "]", ",", "annot", "[", "'depth_id'", "]", "]", ")", "\n", "\n", "#if 'segms' in annot:", "\n", "#    segms = annot['segms']", "\n", "kp2ds", ".", "append", "(", "joint", ")", "\n", "valid_mask_2ds", ".", "append", "(", "valid_mask_2d", ")", "\n", "valid_mask_3ds", ".", "append", "(", "self", ".", "default_valid_mask_3d", ")", "\n", "", "valid_mask_2ds", ",", "valid_mask_3ds", "=", "np", ".", "array", "(", "valid_mask_2ds", ")", ",", "np", ".", "array", "(", "valid_mask_3ds", ")", "\n", "depth_info", "=", "np", ".", "array", "(", "depth_info", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 1: smpl global orient | 2: smpl body pose | 3: smpl body shape | 4: smpl verts | 5: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "np", ".", "arange", "(", "len", "(", "kp2ds", ")", ")", ",", "'vmask_2d'", ":", "valid_mask_2ds", ",", "'vmask_3d'", ":", "valid_mask_3ds", ",", "'kp3ds'", ":", "None", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'relativity'", "}", "\n", "if", "'relative'", "in", "base_class", ":", "\n", "                ", "img_info", "[", "'depth'", "]", "=", "depth_info", "\n", "\n", "", "return", "img_info", "\n", "\n", "", "def", "_get_image_path", "(", "self", ",", "file_name", ")", ":", "\n", "            ", "images_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "images_dir", ",", "file_name", ")", "\n", "\n", "", "def", "get_mask", "(", "self", ",", "anno", ",", "idx", ")", ":", "\n", "# mask of crowd or person without annotated keypoint", "\n", "            ", "coco", "=", "self", ".", "coco", "\n", "img_info", "=", "coco", ".", "loadImgs", "(", "self", ".", "file_paths", "[", "idx", "]", ")", "[", "0", "]", "\n", "m", "=", "np", ".", "zeros", "(", "(", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", ")", "\n", "for", "obj", "in", "anno", ":", "\n", "                ", "if", "obj", "[", "'num_keypoints'", "]", ">", "self", ".", "min_pts_required", "and", "not", "obj", "[", "'iscrowd'", "]", ":", "\n", "                    ", "rles", "=", "pycocotools", ".", "mask", ".", "frPyObjects", "(", "\n", "obj", "[", "'segmentation'", "]", ",", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", "\n", "for", "rle", "in", "rles", ":", "\n", "                        ", "m", "+=", "pycocotools", ".", "mask", ".", "decode", "(", "rle", ")", "\n", "", "", "", "return", "m", ">", "0", "\n", "\n", "", "def", "get_exclude_mask", "(", "self", ",", "anno", ",", "idx", ")", ":", "\n", "# mask of crowd or person without annotated keypoint", "\n", "            ", "coco", "=", "self", ".", "coco", "\n", "img_info", "=", "coco", ".", "loadImgs", "(", "self", ".", "file_paths", "[", "idx", "]", ")", "[", "0", "]", "\n", "m", "=", "np", ".", "zeros", "(", "(", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", ")", "\n", "\n", "for", "obj", "in", "anno", ":", "\n", "                ", "if", "obj", "[", "'iscrowd'", "]", ":", "\n", "                    ", "rle", "=", "pycocotools", ".", "mask", ".", "frPyObjects", "(", "\n", "obj", "[", "'segmentation'", "]", ",", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", "\n", "m", "+=", "pycocotools", ".", "mask", ".", "decode", "(", "rle", ")", "\n", "", "elif", "obj", "[", "'num_keypoints'", "]", "==", "0", ":", "\n", "                    ", "rles", "=", "pycocotools", ".", "mask", ".", "frPyObjects", "(", "\n", "obj", "[", "'segmentation'", "]", ",", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", "\n", "for", "rle", "in", "rles", ":", "\n", "                        ", "m", "+=", "pycocotools", ".", "mask", ".", "decode", "(", "rle", ")", "\n", "\n", "", "", "", "return", "m", "<", "0.5", "\n", "", "", "return", "Relative_human", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.relative_human.prepare_age_balanced_sample_dict": [[132, 146], ["list", "enumerate", "np.savez", "annots.keys", "np.zeros", "enumerate", "range", "np.load", "range", "len", "cluster_pool[].append"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "prepare_age_balanced_sample_dict", "(", ")", ":", "\n", "    ", "annots_file_path", "=", "'/home/yusun/Desktop/train_annots.npz'", "\n", "annots", "=", "np", ".", "load", "(", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "file_paths", "=", "list", "(", "annots", ".", "keys", "(", ")", ")", "\n", "cluster_pool", "=", "[", "[", "]", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "for", "img_id", ",", "img_name", "in", "enumerate", "(", "file_paths", ")", ":", "\n", "        ", "annot", "=", "annots", "[", "img_name", "]", "\n", "ages", "=", "np", ".", "zeros", "(", "len", "(", "annot", ")", ")", "\n", "for", "idx", ",", "ann", "in", "enumerate", "(", "annot", ")", ":", "\n", "            ", "ages", "[", "idx", "]", "=", "ann", "[", "'age'", "]", "\n", "", "for", "age_id", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "(", "ages", "==", "age_id", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "cluster_pool", "[", "age_id", "]", ".", "append", "(", "img_id", ")", "\n", "", "", "", "np", ".", "savez", "(", "'age_balanced_sample_dict.npz'", ",", "file_paths", "=", "file_paths", ",", "cluster_pool", "=", "cluster_pool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_validation.MPI_INF_3DHP_VALIDATION": [[7, 12], ["dataset.mpi_inf_3dhp.MPI_INF_3DHP", "super().__init__"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp.MPI_INF_3DHP", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["def", "MPI_INF_3DHP_VALIDATION", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "MPI_INF_3DHP_VALIDATION", "(", "MPI_INF_3DHP", "(", "Base_Classes", "[", "base_class", "]", ")", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "False", ",", "validation", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "MPI_INF_3DHP_VALIDATION", ",", "self", ")", ".", "__init__", "(", "train_flag", "=", "train_flag", ",", "validation", "=", "validation", ")", "\n", "", "", "return", "MPI_INF_3DHP_VALIDATION", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpii.MPII": [[6, 233], ["super().__init__", "os.path.join", "mpii.._get_db", "os.path.join", "os.path.exists", "list", "constants.joint_mapping", "logging.info", "mpii..sellect_person", "os.path.join", "mpii..regress_kp3d_from_smpl", "logging.info", "os.path.join", "os.path.join", "print", "os.path.join", "scio.loadmat", "np.transpose", "np.linalg.norm", "np.linalg.norm", "np.multiply", "np.divide", "np.multiply", "np.sum", "np.multiply", "np.divide", "np.arange", "np.zeros", "range", "np.ma.array", "np.ma.array", "OrderedDict", "np.array", "np.array", "np.ones", "mpii..load_eft_annots", "np.savez", "mpii..eft_annots.keys", "SMPLR", "cv2.imread", "kp2ds.append", "valid_mask_2d.append", "valid_mask_3d.append", "np.array", "np.array", "np.array", "enumerate", "np.array", "np.array", "np.arange", "json.load", "os.path.basename", "np.array", "np.reshape", "np.reshape", "quaternion.as_rotation_vector().reshape", "mpii..eft_annots[].append", "open", "json.load", "np.array", "np.array", "np.array", "np.zeros", "np.array", "len", "np.random.randint", "np.concatenate", "os.path.join", "scio.savemat", "np.ones", "len", "np.multiply", "np.divide", "np.sum().astype", "os.path.join", "mpii..__len__", "mpii..process_single_person_joints", "np.array.append", "pose_list.append", "betas_list.append", "mpii.._calc_center_", "np.linalg.norm", "np.argmin", "np.concatenate", "params.append", "np.array", "len", "open", "np.array", "np.array", "len", "len", "len", "mpii..annots[].append", "file_paths.append", "len", "len", "len", "np.where", "np.where", "np.where", "np.where", "np.where", "np.where", "np.where", "np.where", "np.where", "np.where", "np.where", "np.where", "np.where", "np.sum", "len", "np.sum", "np.sum", "np.load", "len", "quaternion.as_rotation_vector", "len", "np.sum", "np.sum", "quaternion.from_rotation_matrix"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.regress_kp3d_from_smpl", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__len__", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._calc_center_", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["def", "MPII", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "MPII", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "regress_smpl", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "MPII", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "regress_smpl", ")", "\n", "self", ".", "const_box", "=", "[", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", ",", "np", ".", "array", "(", "[", "256", ",", "256", "]", ")", "]", "\n", "self", ".", "empty_kps", "=", "np", ".", "ones", "(", "(", "6", ",", "3", ")", ")", "*", "-", "2", "\n", "\n", "self", ".", "flip_pairs", "=", "[", "[", "0", ",", "5", "]", ",", "[", "1", ",", "4", "]", ",", "[", "2", ",", "3", "]", ",", "[", "10", ",", "15", "]", ",", "[", "11", ",", "14", "]", ",", "[", "12", ",", "13", "]", "]", "\n", "self", ".", "parent_ids", "=", "[", "1", ",", "2", ",", "6", ",", "6", ",", "3", ",", "4", ",", "6", ",", "6", ",", "7", ",", "8", ",", "11", ",", "12", ",", "7", ",", "7", ",", "13", ",", "14", "]", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'mpii/'", ")", "\n", "self", ".", "image_set", "=", "'train'", "if", "self", ".", "train_flag", "else", "'valid'", "\n", "self", ".", "_get_db", "(", ")", "\n", "\n", "load_eft_annots_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'eft_annots.npz'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "load_eft_annots_path", ")", ":", "\n", "                ", "self", ".", "eft_annots", "=", "np", ".", "load", "(", "load_eft_annots_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "load_eft_annots", "(", "os", ".", "path", ".", "join", "(", "config", ".", "project_dir", ",", "'data/eft_fit/MPII_ver01.json'", ")", ")", "\n", "np", ".", "savez", "(", "load_eft_annots_path", ",", "annots", "=", "self", ".", "eft_annots", ")", "\n", "", "self", ".", "file_paths", "=", "list", "(", "self", ".", "eft_annots", ".", "keys", "(", ")", ")", "\n", "self", ".", "joint_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "MPII_16", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "#self.joint3d_mapper = constants.joint_mapping(constants.SMPL_ALL_54, constants.SMPL_ALL_54)", "\n", "if", "self", ".", "regress_smpl", ":", "\n", "                ", "self", ".", "smplr", "=", "SMPLR", "(", "use_gender", "=", "False", ")", "\n", "", "logging", ".", "info", "(", "'Loaded MPII data total {} samples'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", ")", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "infos", "=", "self", ".", "annots", "[", "img_name", "]", "\n", "sellected_id", "=", "self", ".", "sellect_person", "(", "infos", ")", "\n", "info", "=", "infos", "[", "sellected_id", "]", "\n", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "kp2ds", ",", "valid_mask_2d", ",", "valid_mask_3d", ",", "params", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "info", "in", "infos", ":", "\n", "                ", "kp2ds", ".", "append", "(", "self", ".", "process_single_person_joints", "(", "info", "[", "'joints'", "]", ")", ")", "\n", "valid_mask_2d", ".", "append", "(", "[", "True", ",", "False", ",", "True", "]", ")", "\n", "valid_mask_3d", ".", "append", "(", "self", ".", "default_valid_mask_3d", ")", "\n", "", "valid_mask_2d", ",", "valid_mask_3d", "=", "np", ".", "array", "(", "valid_mask_2d", ")", ",", "np", ".", "array", "(", "valid_mask_3d", ")", "\n", "\n", "if", "img_name", "in", "self", ".", "eft_annots", "and", "self", ".", "use_eft", ":", "\n", "                ", "eft_annot", "=", "self", ".", "eft_annots", "[", "img_name", "]", "\n", "bbox_center_list", ",", "pose_list", ",", "betas_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "bbox_center", ",", "pose", ",", "betas", "in", "eft_annot", ":", "\n", "                    ", "bbox_center_list", ".", "append", "(", "bbox_center", ")", "\n", "pose_list", ".", "append", "(", "pose", "[", ":", "66", "]", ")", "\n", "betas_list", ".", "append", "(", "betas", ")", "\n", "", "bbox_center_list", "=", "np", ".", "array", "(", "bbox_center_list", ")", "\n", "for", "inds", ",", "kp2d", "in", "enumerate", "(", "kp2ds", ")", ":", "\n", "                    ", "center_i", "=", "self", ".", "_calc_center_", "(", "kp2d", ")", "\n", "center_dist", "=", "np", ".", "linalg", ".", "norm", "(", "bbox_center_list", "-", "center_i", "[", ":", "2", "]", "[", "None", "]", ",", "axis", "=", "-", "1", ")", "\n", "closet_idx", "=", "np", ".", "argmin", "(", "center_dist", ")", "\n", "matched_param", "=", "np", ".", "concatenate", "(", "[", "pose_list", "[", "closet_idx", "]", ",", "betas_list", "[", "closet_idx", "]", "]", ")", "\n", "params", ".", "append", "(", "matched_param", ")", "\n", "valid_mask_3d", "[", "inds", ",", ":", "4", "]", "=", "np", ".", "array", "(", "[", "self", ".", "regress_smpl", ",", "True", ",", "True", ",", "False", "]", ")", "\n", "\n", "", "", "kp2ds", ",", "params", "=", "np", ".", "array", "(", "kp2ds", ")", ",", "np", ".", "array", "(", "params", ")", "\n", "kp3ds", "=", "self", ".", "regress_kp3d_from_smpl", "(", "params", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "np", ".", "arange", "(", "len", "(", "kp2ds", ")", ")", ",", "'vmask_2d'", ":", "valid_mask_2d", ",", "'vmask_3d'", ":", "valid_mask_3d", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "params", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'mpii'", "}", "\n", "\n", "return", "img_info", "\n", "\n", "\n", "", "def", "load_eft_annots", "(", "self", ",", "annot_file_path", ")", ":", "\n", "            ", "self", ".", "eft_annots", "=", "{", "}", "\n", "annots", "=", "json", ".", "load", "(", "open", "(", "annot_file_path", ",", "'r'", ")", ")", "[", "'data'", "]", "\n", "for", "eft_data", "in", "annots", ":", "\n", "#Get raw image path", "\n", "                ", "imgFullPath", "=", "eft_data", "[", "'imageName'", "]", "\n", "imgName", "=", "os", ".", "path", ".", "basename", "(", "imgFullPath", ")", "\n", "bbox_scale", "=", "eft_data", "[", "'bbox_scale'", "]", "\n", "bbox_center", "=", "eft_data", "[", "'bbox_center'", "]", "\n", "pred_camera", "=", "np", ".", "array", "(", "eft_data", "[", "'parm_cam'", "]", ")", "\n", "pred_betas", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "eft_data", "[", "'parm_shape'", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "(", "10", ")", ")", "#(10,)", "\n", "pred_pose_rotmat", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "eft_data", "[", "'parm_pose'", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "(", "24", ",", "3", ",", "3", ")", ")", "#(24,3,3)", "\n", "pred_pose", "=", "quaternion", ".", "as_rotation_vector", "(", "quaternion", ".", "from_rotation_matrix", "(", "pred_pose_rotmat", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "imgName", "not", "in", "self", ".", "eft_annots", ":", "\n", "                    ", "self", ".", "eft_annots", "[", "imgName", "]", "=", "[", "]", "\n", "", "self", ".", "eft_annots", "[", "imgName", "]", ".", "append", "(", "[", "bbox_center", ",", "pred_pose", ",", "pred_betas", "]", ")", "\n", "", "logging", ".", "info", "(", "'EFT pseudo-label contains annotations for {} samples'", ".", "format", "(", "len", "(", "self", ".", "eft_annots", ")", ")", ")", "\n", "\n", "", "def", "_get_db", "(", "self", ")", ":", "\n", "# create train/val split", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'annot'", ",", "self", ".", "image_set", "+", "'.json'", ")", "\n", "with", "open", "(", "file_name", ")", "as", "anno_file", ":", "\n", "                ", "anno", "=", "json", ".", "load", "(", "anno_file", ")", "\n", "\n", "", "file_paths", ",", "self", ".", "annots", "=", "[", "]", ",", "{", "}", "\n", "for", "a", "in", "anno", ":", "\n", "                ", "image_name", "=", "a", "[", "'image'", "]", "\n", "\n", "c", "=", "np", ".", "array", "(", "a", "[", "'center'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "s", "=", "np", ".", "array", "(", "[", "a", "[", "'scale'", "]", ",", "a", "[", "'scale'", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Adjust center/scale slightly to avoid cropping limbs", "\n", "if", "c", "[", "0", "]", "!=", "-", "1", ":", "\n", "                    ", "c", "[", "1", "]", "=", "c", "[", "1", "]", "+", "15", "*", "s", "[", "1", "]", "\n", "s", "=", "s", "*", "1.25", "\n", "\n", "# MPII uses matlab format, index is based 1,", "\n", "# we should first convert to 0-based index", "\n", "", "c", "=", "c", "-", "1", "\n", "joints", "=", "np", ".", "array", "(", "a", "[", "'joints'", "]", ")", "\n", "joints", "[", ":", ",", "0", ":", "2", "]", "=", "joints", "[", ":", ",", "0", ":", "2", "]", "-", "1", "\n", "assert", "len", "(", "joints", ")", "==", "16", ",", "'joint num diff: {} vs {}'", ".", "format", "(", "len", "(", "joints", ")", ",", "16", ")", "\n", "\n", "joints_vis", "=", "np", ".", "zeros", "(", "(", "16", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "joints_vis", "[", ":", ",", "0", ":", "2", "]", "=", "joints", "[", ":", ",", "0", ":", "2", "]", "\n", "joints_vis", "[", ":", ",", "-", "1", "]", "=", "np", ".", "array", "(", "a", "[", "'joints_vis'", "]", ")", "\n", "\n", "imgpath", "=", "image_name", "\n", "annot", "=", "{", "'center'", ":", "c", ",", "'scale'", ":", "s", ",", "'joints'", ":", "joints_vis", "}", "\n", "if", "imgpath", "in", "self", ".", "annots", ":", "\n", "                    ", "self", ".", "annots", "[", "imgpath", "]", ".", "append", "(", "annot", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "annots", "[", "imgpath", "]", "=", "[", "annot", "]", "\n", "file_paths", ".", "append", "(", "imgpath", ")", "\n", "\n", "", "", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'images'", ")", "\n", "self", ".", "file_paths", "=", "file_paths", "\n", "print", "(", "'remove the same {}/{}'", ".", "format", "(", "len", "(", "self", ".", "file_paths", ")", ",", "len", "(", "file_paths", ")", ")", ")", "\n", "\n", "", "def", "sellect_person", "(", "self", ",", "infos", ")", ":", "\n", "            ", "if", "len", "(", "infos", ")", "==", "1", ":", "\n", "                ", "return", "0", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "random", ".", "randint", "(", "len", "(", "infos", ")", ")", "\n", "#return np.argmax(kps[:,:,-1].sum(-1))", "\n", "\n", "", "", "def", "process_single_person_joints", "(", "self", ",", "joint_info", ")", ":", "\n", "            ", "joints", "=", "joint_info", "[", ":", ",", "0", ":", "2", "]", "\n", "joints_vis", "=", "joint_info", "[", ":", ",", "-", "1", "]", "\n", "joints", "[", "joints_vis", "<", "0.05", "]", "=", "-", "2.", "\n", "kp2d", "=", "np", ".", "concatenate", "(", "[", "joints", "[", ":", ",", "0", ":", "2", "]", ",", "joints_vis", "[", ":", ",", "None", "]", "]", ",", "1", ")", "[", "self", ".", "joint_mapper", "]", "\n", "kp2d", "[", "self", ".", "joint_mapper", "==", "-", "1", "]", "=", "-", "2.", "\n", "return", "kp2d", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "preds", ",", "output_dir", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# convert 0-based index to 1-based index", "\n", "            ", "preds", "=", "preds", "[", ":", ",", ":", ",", "0", ":", "2", "]", "+", "1.0", "\n", "\n", "if", "output_dir", ":", "\n", "                ", "pred_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'pred.mat'", ")", "\n", "scio", ".", "savemat", "(", "pred_file", ",", "mdict", "=", "{", "'preds'", ":", "preds", "}", ")", "\n", "\n", "", "SC_BIAS", "=", "0.6", "\n", "threshold", "=", "0.5", "\n", "\n", "gt_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "\n", "'annot'", ",", "\n", "'gt_{}.mat'", ".", "format", "(", "'valid'", ")", ")", "\n", "gt_dict", "=", "scio", ".", "loadmat", "(", "gt_file", ")", "\n", "dataset_joints", "=", "gt_dict", "[", "'dataset_joints'", "]", "\n", "jnt_missing", "=", "gt_dict", "[", "'jnt_missing'", "]", "\n", "pos_gt_src", "=", "gt_dict", "[", "'pos_gt_src'", "]", "\n", "headboxes_src", "=", "gt_dict", "[", "'headboxes_src'", "]", "\n", "\n", "pos_pred_src", "=", "np", ".", "transpose", "(", "preds", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "\n", "head", "=", "np", ".", "where", "(", "dataset_joints", "==", "'head'", ")", "[", "1", "]", "[", "0", "]", "\n", "lsho", "=", "np", ".", "where", "(", "dataset_joints", "==", "'lsho'", ")", "[", "1", "]", "[", "0", "]", "\n", "lelb", "=", "np", ".", "where", "(", "dataset_joints", "==", "'lelb'", ")", "[", "1", "]", "[", "0", "]", "\n", "lwri", "=", "np", ".", "where", "(", "dataset_joints", "==", "'lwri'", ")", "[", "1", "]", "[", "0", "]", "\n", "lhip", "=", "np", ".", "where", "(", "dataset_joints", "==", "'lhip'", ")", "[", "1", "]", "[", "0", "]", "\n", "lkne", "=", "np", ".", "where", "(", "dataset_joints", "==", "'lkne'", ")", "[", "1", "]", "[", "0", "]", "\n", "lank", "=", "np", ".", "where", "(", "dataset_joints", "==", "'lank'", ")", "[", "1", "]", "[", "0", "]", "\n", "\n", "rsho", "=", "np", ".", "where", "(", "dataset_joints", "==", "'rsho'", ")", "[", "1", "]", "[", "0", "]", "\n", "relb", "=", "np", ".", "where", "(", "dataset_joints", "==", "'relb'", ")", "[", "1", "]", "[", "0", "]", "\n", "rwri", "=", "np", ".", "where", "(", "dataset_joints", "==", "'rwri'", ")", "[", "1", "]", "[", "0", "]", "\n", "rkne", "=", "np", ".", "where", "(", "dataset_joints", "==", "'rkne'", ")", "[", "1", "]", "[", "0", "]", "\n", "rank", "=", "np", ".", "where", "(", "dataset_joints", "==", "'rank'", ")", "[", "1", "]", "[", "0", "]", "\n", "rhip", "=", "np", ".", "where", "(", "dataset_joints", "==", "'rhip'", ")", "[", "1", "]", "[", "0", "]", "\n", "\n", "jnt_visible", "=", "1", "-", "jnt_missing", "\n", "uv_error", "=", "pos_pred_src", "-", "pos_gt_src", "\n", "uv_err", "=", "np", ".", "linalg", ".", "norm", "(", "uv_error", ",", "axis", "=", "1", ")", "\n", "headsizes", "=", "headboxes_src", "[", "1", ",", ":", ",", ":", "]", "-", "headboxes_src", "[", "0", ",", ":", ",", ":", "]", "\n", "headsizes", "=", "np", ".", "linalg", ".", "norm", "(", "headsizes", ",", "axis", "=", "0", ")", "\n", "headsizes", "*=", "SC_BIAS", "\n", "scale", "=", "np", ".", "multiply", "(", "headsizes", ",", "np", ".", "ones", "(", "(", "len", "(", "uv_err", ")", ",", "1", ")", ")", ")", "\n", "scaled_uv_err", "=", "np", ".", "divide", "(", "uv_err", ",", "scale", ")", "\n", "scaled_uv_err", "=", "np", ".", "multiply", "(", "scaled_uv_err", ",", "jnt_visible", ")", "\n", "jnt_count", "=", "np", ".", "sum", "(", "jnt_visible", ",", "axis", "=", "1", ")", "\n", "less_than_threshold", "=", "np", ".", "multiply", "(", "(", "scaled_uv_err", "<=", "threshold", ")", ",", "\n", "jnt_visible", ")", "\n", "PCKh", "=", "np", ".", "divide", "(", "100.", "*", "np", ".", "sum", "(", "less_than_threshold", ",", "axis", "=", "1", ")", ",", "jnt_count", ")", "\n", "rng", "=", "np", ".", "arange", "(", "0", ",", "0.5", "+", "0.01", ",", "0.01", ")", "\n", "pckAll", "=", "np", ".", "zeros", "(", "(", "len", "(", "rng", ")", ",", "16", ")", ")", "\n", "\n", "for", "r", "in", "range", "(", "len", "(", "rng", ")", ")", ":", "\n", "                ", "threshold", "=", "rng", "[", "r", "]", "\n", "less_than_threshold", "=", "np", ".", "multiply", "(", "scaled_uv_err", "<=", "threshold", ",", "\n", "jnt_visible", ")", "\n", "pckAll", "[", "r", ",", ":", "]", "=", "np", ".", "divide", "(", "100.", "*", "np", ".", "sum", "(", "less_than_threshold", ",", "axis", "=", "1", ")", ",", "\n", "jnt_count", ")", "\n", "\n", "", "PCKh", "=", "np", ".", "ma", ".", "array", "(", "PCKh", ",", "mask", "=", "False", ")", "\n", "PCKh", ".", "mask", "[", "6", ":", "8", "]", "=", "True", "\n", "\n", "jnt_count", "=", "np", ".", "ma", ".", "array", "(", "jnt_count", ",", "mask", "=", "False", ")", "\n", "jnt_count", ".", "mask", "[", "6", ":", "8", "]", "=", "True", "\n", "jnt_ratio", "=", "jnt_count", "/", "np", ".", "sum", "(", "jnt_count", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "name_value", "=", "[", "\n", "(", "'Head'", ",", "PCKh", "[", "head", "]", ")", ",", "\n", "(", "'Shoulder'", ",", "0.5", "*", "(", "PCKh", "[", "lsho", "]", "+", "PCKh", "[", "rsho", "]", ")", ")", ",", "\n", "(", "'Elbow'", ",", "0.5", "*", "(", "PCKh", "[", "lelb", "]", "+", "PCKh", "[", "relb", "]", ")", ")", ",", "\n", "(", "'Wrist'", ",", "0.5", "*", "(", "PCKh", "[", "lwri", "]", "+", "PCKh", "[", "rwri", "]", ")", ")", ",", "\n", "(", "'Hip'", ",", "0.5", "*", "(", "PCKh", "[", "lhip", "]", "+", "PCKh", "[", "rhip", "]", ")", ")", ",", "\n", "(", "'Knee'", ",", "0.5", "*", "(", "PCKh", "[", "lkne", "]", "+", "PCKh", "[", "rkne", "]", ")", ")", ",", "\n", "(", "'Ankle'", ",", "0.5", "*", "(", "PCKh", "[", "lank", "]", "+", "PCKh", "[", "rank", "]", ")", ")", ",", "\n", "(", "'Mean'", ",", "np", ".", "sum", "(", "PCKh", "*", "jnt_ratio", ")", ")", ",", "\n", "(", "'Mean@0.1'", ",", "np", ".", "sum", "(", "pckAll", "[", "11", ",", ":", "]", "*", "jnt_ratio", ")", ")", "\n", "]", "\n", "name_value", "=", "OrderedDict", "(", "name_value", ")", "\n", "\n", "return", "name_value", ",", "name_value", "[", "'Mean'", "]", "\n", "", "", "return", "MPII", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp.MPI_INF_3DHP": [[8, 167], ["super().__init__", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "list", "len", "mpi_inf_3dhp..exclude_subjects", "logging.info", "constants.joint_mapping", "constants.joint_mapping", "logging.info", "enumerate", "os.path.join", "np.array", "mpi_inf_3dhp..map_kps", "mpi_inf_3dhp._check_visible", "kp3ds[].mean", "range", "range", "list", "np.savez", "print", "os.makedirs", "frame_info.items", "mpi_inf_3dhp..pack_data", "os.path.exists", "mpi_inf_3dhp..extract_frames", "mpi_inf_3dhp..annots.keys", "config.args", "len", "os.path.join", "mpi_inf_3dhp..parse_cluster_results", "os.path.basename().split", "os.path.exists", "os.path.basename", "[].replace", "os.path.join", "cv2.imread", "mpi_inf_3dhp..map_kps", "np.concatenate", "np.array", "np.array", "np.array", "np.array", "range", "os.path.join", "print", "cv2.VideoCapture", "os.path.join.strip().replace().replace", "len", "len", "mpi_inf_3dhp..__len__", "os.path.basename().split", "file_path_left.append", "random.randint", "mpi_inf_3dhp..homogenize_pose_sample", "os.path.dirname", "os.path.basename.replace", "os.path.join", "os.path.join", "os.path.join", "print", "os.path.join", "mpi_inf_3dhp.read_calibration", "enumerate", "cv2.VideoCapture.read", "np.load", "np.load", "len", "os.path.basename", "str", "sio.loadmat", "sio.loadmat", "len", "os.path.join", "np.array", "range", "mpi_inf_3dhp..get_image_name", "cv2.imwrite", "os.path.join.strip().replace", "os.path.basename", "os.path.basename.split", "int", "str", "str", "mpi_inf_3dhp..get_image_name", "annots_2d[].reshape", "os.path.join", "annots_3d[].reshape", "mpi_inf_3dhp._check_visible", "frame_info[].append", "os.path.join.strip", "str"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_test._check_visible", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.agora.pack_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.parse_cluster_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__len__", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.homogenize_pose_sample", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_test.read_calibration", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_test._check_visible"], ["def", "MPI_INF_3DHP", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "MPI_INF_3DHP", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "validation", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "MPI_INF_3DHP", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "regress_smpl", "=", "True", ")", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'mpi_inf_3dhp/'", ")", "\n", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'annots.npz'", ")", "\n", "self", ".", "image_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'images'", ")", "\n", "self", ".", "scale_range", "=", "[", "1.3", ",", "1.9", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "annots_file_path", ")", ":", "\n", "                ", "self", ".", "annots", "=", "np", ".", "load", "(", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "pack_data", "(", "annots_file_path", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "image_folder", ")", ":", "\n", "                ", "frame_info", "=", "np", ".", "load", "(", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "[", "'frame_info'", "]", "[", "(", ")", "]", "\n", "self", ".", "extract_frames", "(", "frame_info", ")", "\n", "", "self", ".", "file_paths", "=", "list", "(", "self", ".", "annots", ".", "keys", "(", ")", ")", "\n", "if", "validation", ":", "\n", "                ", "set_name", "=", "'validation'", "\n", "removed_subjects", "=", "[", "'S1'", ",", "'S2'", ",", "'S3'", ",", "'S4'", ",", "'S5'", ",", "'S6'", ",", "'S7'", "]", "\n", "", "else", ":", "\n", "                ", "set_name", "=", "'train'", "\n", "removed_subjects", "=", "[", "'S8'", "]", "\n", "", "self", ".", "track_id", "=", "{", "'S1'", ":", "1", ",", "'S2'", ":", "2", ",", "'S3'", ":", "3", ",", "'S4'", ":", "4", ",", "'S5'", ":", "5", ",", "'S6'", ":", "6", ",", "'S7'", ":", "7", ",", "'S8'", ":", "8", "}", "\n", "self", ".", "ID_num", "=", "8", "\n", "previous_sample_num", "=", "len", "(", "self", ".", "file_paths", ")", "\n", "self", ".", "file_paths", "=", "self", ".", "exclude_subjects", "(", "self", ".", "file_paths", ",", "subjects", "=", "removed_subjects", ")", "\n", "logging", ".", "info", "(", "'From file_paths with {} samples, removing subjects: {}, with {} samples left'", ".", "format", "(", "previous_sample_num", ",", "removed_subjects", ",", "len", "(", "self", ".", "file_paths", ")", ")", ")", "\n", "\n", "self", ".", "subject_gender", "=", "{", "'S1'", ":", "1", ",", "'S2'", ":", "0", ",", "'S3'", ":", "0", ",", "'S4'", ":", "1", ",", "'S5'", ":", "1", ",", "'S6'", ":", "1", ",", "'S7'", ":", "0", ",", "'S8'", ":", "0", "}", "\n", "self", ".", "kp2d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "MPI_INF_28", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "kp3d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "MPI_INF_28", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "compress_length", "=", "3", "\n", "self", ".", "shuffle_ratio", "=", "args", "(", ")", ".", "shuffle_crop_ratio_3d", "\n", "\n", "self", ".", "sample_num", "=", "len", "(", "self", ".", "file_paths", ")", "//", "self", ".", "compress_length", "if", "self", ".", "train_flag", "else", "len", "(", "self", ".", "file_paths", ")", "\n", "\n", "if", "self", ".", "homogenize_pose_space", "and", "self", ".", "train_flag", "and", "not", "base_class", "==", "'video_relative'", ":", "\n", "                ", "cluster_results_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'cluster_results_noumap_mpiinf_kmeans.npz'", ")", "\n", "self", ".", "cluster_pool", "=", "self", ".", "parse_cluster_results", "(", "cluster_results_file", ",", "self", ".", "file_paths", ")", "\n", "", "logging", ".", "info", "(", "'Loaded MPI-INF-3DHP {} set,total {} samples'", ".", "format", "(", "set_name", ",", "self", ".", "__len__", "(", ")", ")", ")", "\n", "\n", "", "def", "exclude_subjects", "(", "self", ",", "file_paths", ",", "subjects", "=", "[", "'S8'", "]", ")", ":", "\n", "            ", "file_path_left", "=", "[", "]", "\n", "for", "inds", ",", "file_path", "in", "enumerate", "(", "file_paths", ")", ":", "\n", "                ", "subject_id", "=", "os", ".", "path", ".", "basename", "(", "file_path", ")", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "if", "subject_id", "not", "in", "subjects", ":", "\n", "                    ", "file_path_left", ".", "append", "(", "file_path", ")", "\n", "", "", "return", "file_path_left", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "sample_num", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "if", "self", ".", "train_flag", ":", "\n", "                ", "index", "=", "index", "*", "self", ".", "compress_length", "+", "random", ".", "randint", "(", "0", ",", "self", ".", "compress_length", "-", "1", ")", "\n", "if", "self", ".", "homogenize_pose_space", ":", "\n", "                    ", "index", "=", "self", ".", "homogenize_pose_sample", "(", "index", ")", "\n", "", "", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "subject_id", "=", "os", ".", "path", ".", "basename", "(", "img_name", ")", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "img_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgpath", ")", ":", "\n", "                ", "basename", "=", "os", ".", "path", ".", "basename", "(", "imgpath", ")", "\n", "frame_str", "=", "basename", ".", "split", "(", "'_F'", ")", "[", "1", "]", ".", "replace", "(", "'.jpg'", ",", "''", ")", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "imgpath", ")", ",", "basename", ".", "replace", "(", "frame_str", ",", "str", "(", "int", "(", "frame_str", ")", ")", ")", ")", "\n", "\n", "", "track_ids", "=", "[", "self", ".", "track_id", "[", "subject_id", "]", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "R", ",", "T", "=", "self", ".", "annots", "[", "img_name", "]", "[", "'extrinsics'", "]", "\n", "fx", ",", "fy", ",", "cx", ",", "cy", "=", "self", ".", "annots", "[", "img_name", "]", "[", "'intrinsics'", "]", "\n", "camMats", "=", "np", ".", "array", "(", "[", "[", "fx", ",", "0", ",", "cx", "]", ",", "[", "0", ",", "fy", ",", "cy", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "kp2ds", "=", "self", ".", "map_kps", "(", "self", ".", "annots", "[", "img_name", "]", "[", "'kp2d'", "]", ",", "maps", "=", "self", ".", "kp2d_mapper", ")", "\n", "kp3ds", "=", "self", ".", "map_kps", "(", "self", ".", "annots", "[", "img_name", "]", "[", "'kp3d'", "]", ",", "maps", "=", "self", ".", "kp3d_mapper", ")", "[", "None", "]", "\n", "vis_mask", "=", "_check_visible", "(", "kp2ds", ",", "get_mask", "=", "True", ")", "\n", "kp2ds", "=", "np", ".", "concatenate", "(", "[", "kp2ds", ",", "vis_mask", "[", ":", ",", "None", "]", "]", ",", "1", ")", "[", "None", "]", "\n", "\n", "root_trans", "=", "kp3ds", "[", ":", ",", "self", ".", "root_inds", "]", ".", "mean", "(", "1", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 1: smpl global orient | 2: smpl body pose | 3: smpl body shape | 4: smpl verts | 5: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "track_ids", ",", "'vmask_2d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "True", ",", "True", "]", "]", ")", ",", "'vmask_3d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", "True", "]", "]", ")", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "root_trans", ",", "'verts'", ":", "None", ",", "'camMats'", ":", "camMats", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'mpiinf'", "}", "\n", "\n", "if", "'relative'", "in", "base_class", ":", "\n", "                ", "img_info", "[", "'depth'", "]", "=", "np", ".", "array", "(", "[", "[", "0", ",", "self", ".", "subject_gender", "[", "subject_id", "]", ",", "0", ",", "0", "]", "]", ")", "\n", "img_info", "[", "'kid_shape_offsets'", "]", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "\n", "", "return", "img_info", "\n", "\n", "\n", "", "def", "pack_data", "(", "self", ",", "annots_file_path", ")", ":", "\n", "            ", "self", ".", "annots", "=", "{", "}", "\n", "frame_info", "=", "{", "}", "\n", "user_list", "=", "range", "(", "1", ",", "9", ")", "\n", "seq_list", "=", "range", "(", "1", ",", "3", ")", "\n", "# view point 11,12,13 is look from ceiling, which is unusual.", "\n", "vid_list", "=", "list", "(", "range", "(", "11", ")", ")", "\n", "h", ",", "w", "=", "2048", ",", "2048", "\n", "\n", "for", "user_i", "in", "user_list", ":", "\n", "                ", "for", "seq_i", "in", "seq_list", ":", "\n", "                    ", "seq_path", "=", "os", ".", "path", ".", "join", "(", "'S'", "+", "str", "(", "user_i", ")", ",", "'Seq'", "+", "str", "(", "seq_i", ")", ")", "\n", "# mat file with annotations", "\n", "annot_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'annot.mat'", ")", "\n", "annot_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "annot_file", ")", "\n", "print", "(", "'Processing '", ",", "annot_file_path", ")", "\n", "annot2", "=", "sio", ".", "loadmat", "(", "annot_file_path", ")", "[", "'annot2'", "]", "\n", "annot3", "=", "sio", ".", "loadmat", "(", "annot_file_path", ")", "[", "'annot3'", "]", "\n", "# calibration file and camera parameters", "\n", "calib_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "seq_path", ",", "'camera.calibration'", ")", "\n", "Ks", ",", "Rs", ",", "Ts", "=", "read_calibration", "(", "calib_file", ",", "vid_list", ")", "\n", "\n", "for", "j", ",", "vid_i", "in", "enumerate", "(", "vid_list", ")", ":", "\n", "                        ", "annots_2d", "=", "annot2", "[", "vid_i", "]", "[", "0", "]", "\n", "annots_3d", "=", "annot3", "[", "vid_i", "]", "[", "0", "]", "\n", "frame_num", "=", "len", "(", "annots_3d", ")", "\n", "video_name", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'imageSequence'", ",", "'video_'", "+", "str", "(", "vid_i", ")", "+", "'.avi'", ")", "\n", "frame_info", "[", "video_name", "]", "=", "[", "]", "\n", "sellected_frame_ids", "=", "[", "]", "\n", "\n", "fx", ",", "fy", ",", "cx", ",", "cy", "=", "Ks", "[", "j", "]", "[", "0", ",", "0", "]", ",", "Ks", "[", "j", "]", "[", "1", ",", "1", "]", ",", "Ks", "[", "j", "]", "[", "0", ",", "2", "]", ",", "Ks", "[", "j", "]", "[", "1", ",", "2", "]", "\n", "intrinsics", "=", "np", ".", "array", "(", "[", "fx", ",", "fy", ",", "cx", ",", "cy", "]", ")", "\n", "R", ",", "T", "=", "Rs", "[", "j", "]", ",", "Ts", "[", "j", "]", "\n", "for", "frame_id", "in", "range", "(", "frame_num", ")", ":", "\n", "                            ", "img_name", "=", "self", ".", "get_image_name", "(", "video_name", ",", "frame_id", ")", "#'S{}_Seq{}_video{}_F{}.jpg'.format(user_i, seq_i, vid_i, frame_id)", "\n", "kp2d", "=", "annots_2d", "[", "frame_id", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "kp3d", "=", "annots_3d", "[", "frame_id", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "/", "1000", "\n", "\n", "if", "_check_visible", "(", "kp2d", ",", "w", "=", "w", ",", "h", "=", "h", ")", "and", "frame_id", "%", "10", "==", "1", ":", "\n", "                                ", "self", ".", "annots", "[", "img_name", "]", "=", "{", "'kp2d'", ":", "kp2d", ",", "'kp3d'", ":", "kp3d", ",", "'intrinsics'", ":", "intrinsics", ",", "'extrinsics'", ":", "[", "R", ",", "T", "]", "}", "\n", "frame_info", "[", "video_name", "]", ".", "append", "(", "frame_id", ")", "\n", "", "", "", "", "", "np", ".", "savez", "(", "annots_file_path", ",", "annots", "=", "self", ".", "annots", ",", "frame_info", "=", "frame_info", ")", "\n", "print", "(", "'MPI_INF_3DHP data annotations packed'", ")", "\n", "\n", "\n", "", "def", "extract_frames", "(", "self", ",", "frame_info", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "image_folder", ",", "exist_ok", "=", "True", ")", "\n", "for", "video_name", ",", "frame_ids", "in", "frame_info", ".", "items", "(", ")", ":", "\n", "                ", "video_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "video_name", ")", "\n", "print", "(", "'Extracting {}'", ".", "format", "(", "video_path", ")", ")", "\n", "vidcap", "=", "cv2", ".", "VideoCapture", "(", "video_path", ")", "\n", "frame_id", "=", "0", "\n", "while", "1", ":", "\n", "                    ", "success", ",", "image", "=", "vidcap", ".", "read", "(", ")", "\n", "if", "not", "success", ":", "\n", "                        ", "break", "\n", "\n", "", "if", "frame_id", "in", "frame_ids", ":", "\n", "                        ", "img_name", "=", "self", ".", "get_image_name", "(", "video_name", ",", "frame_id", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "img_name", ")", ",", "image", ")", "\n", "", "frame_id", "+=", "1", "\n", "\n", "", "", "", "def", "get_image_name", "(", "self", ",", "video_name", ",", "frame_id", ")", ":", "\n", "            ", "return", "video_name", ".", "strip", "(", "'.avi'", ")", ".", "replace", "(", "'/imageSequence'", ",", "''", ")", ".", "replace", "(", "'/'", ",", "'_'", ")", "+", "'_F{:06d}.jpg'", ".", "format", "(", "frame_id", ")", "\n", "", "", "return", "MPI_INF_3DHP", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp._check_visible": [[169, 180], ["np.logical_and", "np.logical_and", "np.logical_and", "np.sum", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "_check_visible", "(", "joints", ",", "w", "=", "2048", ",", "h", "=", "2048", ",", "get_mask", "=", "False", ")", ":", "\n", "    ", "visibility", "=", "True", "\n", "# check that all joints are visible", "\n", "x_in", "=", "np", ".", "logical_and", "(", "joints", "[", ":", ",", "0", "]", "<", "w", ",", "joints", "[", ":", ",", "0", "]", ">=", "0", ")", "\n", "y_in", "=", "np", ".", "logical_and", "(", "joints", "[", ":", ",", "1", "]", "<", "h", ",", "joints", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "ok_pts", "=", "np", ".", "logical_and", "(", "x_in", ",", "y_in", ")", "\n", "if", "np", ".", "sum", "(", "ok_pts", ")", "<", "len", "(", "joints", ")", ":", "\n", "        ", "visibility", "=", "False", "\n", "", "if", "get_mask", ":", "\n", "        ", "return", "ok_pts", "\n", "", "return", "visibility", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp.read_calibration": [[181, 196], ["open", "open.readlines", "np.array", "np.reshape", "np.array", "np.reshape", "Ks.append", "Rs.append", "Ts.append", "float", "float", "[].split", "[].split"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "read_calibration", "(", "calib_file", ",", "vid_list", ")", ":", "\n", "    ", "Ks", ",", "Rs", ",", "Ts", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "file", "=", "open", "(", "calib_file", ",", "'r'", ")", "\n", "content", "=", "file", ".", "readlines", "(", ")", "\n", "for", "vid_i", "in", "vid_list", ":", "\n", "        ", "K", "=", "np", ".", "array", "(", "[", "float", "(", "s", ")", "for", "s", "in", "content", "[", "vid_i", "*", "7", "+", "5", "]", "[", "11", ":", "-", "2", "]", ".", "split", "(", ")", "]", ")", "\n", "K", "=", "np", ".", "reshape", "(", "K", ",", "(", "4", ",", "4", ")", ")", "\n", "RT", "=", "np", ".", "array", "(", "[", "float", "(", "s", ")", "for", "s", "in", "content", "[", "vid_i", "*", "7", "+", "6", "]", "[", "11", ":", "-", "2", "]", ".", "split", "(", ")", "]", ")", "\n", "RT", "=", "np", ".", "reshape", "(", "RT", ",", "(", "4", ",", "4", ")", ")", "\n", "R", "=", "RT", "[", ":", "3", ",", ":", "3", "]", "\n", "T", "=", "RT", "[", ":", "3", ",", "3", "]", "/", "1000", "\n", "Ks", ".", "append", "(", "K", ")", "\n", "Rs", ".", "append", "(", "R", ")", "\n", "Ts", ".", "append", "(", "T", ")", "\n", "", "return", "Ks", ",", "Rs", ",", "Ts", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.crowdhuman.CrowdHuman": [[7, 88], ["super().__init__", "crowdhuman..init_coco", "constants.joint_mapping", "logging.info", "os.path.join", "os.path.join", "os.path.exists", "list", "crowdhuman.._get_image_path", "len", "range", "os.path.join", "crowdhuman.load_func", "np.savez", "os.path.join", "coco.getAnnIds", "coco.loadAnns", "cv2.imread", "os.path.exists", "crowdhuman..pack_annots", "crowdhuman..annots.keys", "cv2.imread", "fv_bboxes.append", "valid_mask_2d.append", "valid_mask_3d.append", "np.array", "np.array", "np.arange", "range", "crowdhuman.._get_image_path", "crowdhuman.._get_image_path", "len", "np.array", "len", "len", "[].append", "[].append", "[].append", "coco.loadImgs", "np.load", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.crowdhuman.load_func", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack21.pack_annots", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["def", "CrowdHuman", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "CrowdHuman", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "CrowdHuman", ",", "self", ")", ".", "__init__", "(", "train_flag", ")", "\n", "self", ".", "min_pts_required", "=", "2", "\n", "self", ".", "init_coco", "(", ")", "\n", "self", ".", "kp2d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "Posetrack_17", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "logging", ".", "info", "(", "'CrowdHuman 2D detection data has been loaded, total {} samples'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "\n", "", "def", "init_coco", "(", "self", ")", ":", "\n", "            ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "\"crowdhuman\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "root", ")", ":", "\n", "                ", "self", ".", "root", "=", "'/media/yusun/Backup Plus/dataset/crowdhuman'", "\n", "", "self", ".", "split_name", "=", "'train'", "if", "self", ".", "train_flag", "else", "'val'", "\n", "self", ".", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'annots_{}.npz'", ".", "format", "(", "self", ".", "split_name", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "annots_file_path", ")", ":", "\n", "                ", "self", ".", "annots", "=", "np", ".", "load", "(", "self", ".", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "pack_annots", "(", ")", "\n", "", "self", ".", "file_paths", "=", "list", "(", "self", ".", "annots", ".", "keys", "(", ")", ")", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "imgpath", "=", "self", ".", "_get_image_path", "(", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "bboxes", "=", "self", ".", "annots", "[", "img_name", "]", "\n", "person_num", "=", "len", "(", "bboxes", "[", "'fbox'", "]", ")", "\n", "\n", "fv_bboxes", ",", "valid_mask_2d", ",", "valid_mask_3d", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "inds", "in", "range", "(", "person_num", ")", ":", "\n", "                ", "(", "fx", ",", "fy", ",", "fw", ",", "fh", ")", ",", "(", "vx", ",", "vy", ",", "vw", ",", "vh", ")", "=", "bboxes", "[", "'fbox'", "]", "[", "inds", "]", ",", "bboxes", "[", "'vbox'", "]", "[", "inds", "]", "\n", "fv_bboxes", ".", "append", "(", "np", ".", "array", "(", "[", "[", "fx", ",", "fy", "]", ",", "[", "fx", "+", "fw", ",", "fy", "+", "fh", "]", ",", "[", "vx", ",", "vy", "]", ",", "[", "vx", "+", "vw", ",", "vy", "+", "vh", "]", "]", ")", ")", "\n", "valid_mask_2d", ".", "append", "(", "[", "False", ",", "False", ",", "True", "]", ")", "\n", "valid_mask_3d", ".", "append", "(", "self", ".", "default_valid_mask_3d", ")", "\n", "\n", "", "valid_mask_2d", ",", "valid_mask_3d", "=", "np", ".", "array", "(", "valid_mask_2d", ")", ",", "np", ".", "array", "(", "valid_mask_3d", ")", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "fv_bboxes", ",", "'track_ids'", ":", "np", ".", "arange", "(", "len", "(", "fv_bboxes", ")", ")", ",", "'vmask_2d'", ":", "valid_mask_2d", ",", "'vmask_3d'", ":", "valid_mask_3d", ",", "'kp3ds'", ":", "None", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'crowdhuman'", "}", "\n", "\n", "return", "img_info", "\n", "\n", "", "def", "pack_annots", "(", "self", ")", ":", "\n", "            ", "self", ".", "annots", "=", "{", "}", "\n", "ann_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'annotation_{}.odgt'", ".", "format", "(", "self", ".", "split_name", ")", ")", "\n", "anns_data", "=", "load_func", "(", "ann_path", ")", "\n", "for", "ann_data", "in", "anns_data", ":", "\n", "                ", "self", ".", "annots", "[", "'{}.jpg'", ".", "format", "(", "ann_data", "[", "'ID'", "]", ")", "]", "=", "{", "'hbox'", ":", "[", "]", ",", "'fbox'", ":", "[", "]", ",", "'vbox'", ":", "[", "]", "}", "\n", "anns", "=", "ann_data", "[", "'gtboxes'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "anns", ")", ")", ":", "\n", "                    ", "iscrowd", "=", "1", "if", "'extra'", "in", "anns", "[", "i", "]", "and", "'ignore'", "in", "anns", "[", "i", "]", "[", "'extra'", "]", "and", "anns", "[", "i", "]", "[", "'extra'", "]", "[", "'ignore'", "]", "==", "1", "else", "0", "\n", "if", "iscrowd", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "annots", "[", "'{}.jpg'", ".", "format", "(", "ann_data", "[", "'ID'", "]", ")", "]", "[", "'vbox'", "]", ".", "append", "(", "anns", "[", "i", "]", "[", "'vbox'", "]", ")", "\n", "self", ".", "annots", "[", "'{}.jpg'", ".", "format", "(", "ann_data", "[", "'ID'", "]", ")", "]", "[", "'fbox'", "]", ".", "append", "(", "anns", "[", "i", "]", "[", "'fbox'", "]", ")", "\n", "self", ".", "annots", "[", "'{}.jpg'", ".", "format", "(", "ann_data", "[", "'ID'", "]", ")", "]", "[", "'hbox'", "]", ".", "append", "(", "anns", "[", "i", "]", "[", "'hbox'", "]", ")", "\n", "\n", "", "", "np", ".", "savez", "(", "self", ".", "annots_file_path", ",", "annots", "=", "self", ".", "annots", ")", "\n", "\n", "", "def", "_get_image_path", "(", "self", ",", "file_name", ")", ":", "\n", "            ", "images_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ",", "self", ".", "split_name", ",", "file_name", ")", "\n", "return", "images_dir", "\n", "\n", "", "def", "get_annot", "(", "self", ",", "index", ")", ":", "\n", "            ", "coco", "=", "self", ".", "coco", "\n", "img_id", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "target", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "\n", "file_name", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "self", ".", "_get_image_path", "(", "file_name", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", "|", "cv2", ".", "IMREAD_IGNORE_ORIENTATION", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "return", "img", ",", "target", ",", "self", ".", "_get_image_path", "(", "file_name", ")", "\n", "", "", "return", "CrowdHuman", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.crowdhuman.load_func": [[89, 95], ["print", "open", "fid.readlines", "json.loads", "line.strip"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "load_func", "(", "fpath", ")", ":", "\n", "    ", "print", "(", "'fpath'", ",", "fpath", ")", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "fid", ":", "\n", "        ", "lines", "=", "fid", ".", "readlines", "(", ")", "\n", "", "records", "=", "[", "json", ".", "loads", "(", "line", ".", "strip", "(", "'\\n'", ")", ")", "for", "line", "in", "lines", "]", "\n", "return", "records", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.agora.AGORA": [[7, 77], ["super().__init__", "os.path.join", "os.path.join", "os.path.join", "list", "logging.info", "agora..annots[].copy", "os.path.join", "os.path.basename", "np.stack", "np.stack", "np.concatenate", "np.stack", "kp3ds[].mean", "np.stack", "len", "len", "os.path.isdir", "os.path.exists", "print", "agora.pack_data", "agora..load_annots", "agora..annots.keys", "config.args", "config.args", "cv2.imread", "np.where", "len", "print", "np.array", "np.array", "np.array", "np.stack", "np.stack", "config.args", "agora..__len__", "np.load", "np.array", "np.load", "np.concatenate", "np.ones", "np.ones_like", "ages.sum", "np.array", "len", "os.path.join", "os.path.basename.replace", "range", "range", "np.ones", "annot[].reshape", "annot[].reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.agora.pack_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__len__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["def", "AGORA", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "AGORA", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "split", "=", "'train'", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "AGORA", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "False", ")", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "dataset_rootdir", ",", "'AGORA/'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "data_folder", ")", ":", "\n", "                ", "self", ".", "data_folder", "=", "'/home/yusun/data_drive/dataset/AGORA'", "\n", "", "self", ".", "train_flag", "=", "train_flag", "\n", "self", ".", "split", "=", "split", "\n", "\n", "self", ".", "annots_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'annots_{}.npz'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "self", ".", "vertex_save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'image_vertex_{}'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "annots_path", ")", ":", "\n", "                ", "print", "(", "'packing the annotations into a single file'", ")", "\n", "self", ".", "annots", "=", "pack_data", "(", "self", ".", "vertex_save_dir", ",", "self", ".", "data_folder", ",", "self", ".", "split", ",", "self", ".", "annots_path", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "load_annots", "(", ")", "\n", "", "self", ".", "file_paths", "=", "list", "(", "self", ".", "annots", ".", "keys", "(", ")", ")", "\n", "self", ".", "shuffle_mode", "=", "args", "(", ")", ".", "shuffle_crop_mode", "\n", "self", ".", "shuffle_ratio", "=", "args", "(", ")", ".", "shuffle_crop_ratio_3d", "\n", "self", ".", "multi_mode", "=", "True", "\n", "self", ".", "root_inds", "=", "[", "constants", ".", "SMPL_ALL_54", "[", "'Pelvis_SMPL'", "]", "]", "\n", "\n", "logging", ".", "info", "(", "'Loaded AGORA,total {} samples'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", ")", "\n", "\n", "", "def", "load_annots", "(", "self", ")", ":", "\n", "            ", "self", ".", "annots", "=", "np", ".", "load", "(", "self", ".", "annots_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ",", "total_frame", "=", "None", ")", ":", "\n", "            ", "imgpath", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "annots", "=", "self", ".", "annots", "[", "imgpath", "]", ".", "copy", "(", ")", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "self", ".", "split", ",", "imgpath", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "img_name", "=", "os", ".", "path", ".", "basename", "(", "imgpath", ")", "\n", "valid_mask", "=", "np", ".", "where", "(", "np", ".", "array", "(", "[", "annot", "[", "'isValid'", "]", "for", "annot", "in", "annots", "]", ")", ")", "[", "0", "]", "\n", "if", "len", "(", "valid_mask", ")", "==", "0", ":", "\n", "                ", "print", "(", "img_name", ",", "'lack valid person'", ")", "\n", "valid_mask", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "", "verts", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "vertex_save_dir", ",", "img_name", ".", "replace", "(", "'.png'", ",", "'.npz'", ")", ")", ",", "allow_pickle", "=", "True", ")", "[", "'verts'", "]", "[", "valid_mask", "]", "\n", "annots", "=", "[", "annots", "[", "ind", "]", "for", "ind", "in", "valid_mask", "]", "\n", "params", "=", "np", ".", "stack", "(", "[", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "3", ")", "*", "-", "10", ",", "annot", "[", "'body_pose'", "]", ".", "reshape", "(", "-", "1", ")", "[", ":", "63", "]", ",", "annot", "[", "'betas'", "]", ".", "reshape", "(", "-", "1", ")", "[", ":", "10", "]", "]", ")", "for", "annot", "in", "annots", "]", ")", "\n", "kp2ds", "=", "np", ".", "stack", "(", "[", "annot", "[", "'kp2d'", "]", "for", "annot", "in", "annots", "]", ")", "\n", "kp2ds", "=", "np", ".", "concatenate", "(", "[", "kp2ds", ",", "np", ".", "ones", "(", "(", "kp2ds", ".", "shape", "[", "0", "]", ",", "kp2ds", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "]", ",", "2", ")", "\n", "kp3ds", "=", "np", ".", "stack", "(", "[", "annot", "[", "'kp3d'", "]", "for", "annot", "in", "annots", "]", ")", "\n", "root_trans", "=", "kp3ds", "[", ":", ",", "self", ".", "root_inds", "]", ".", "mean", "(", "1", ")", "\n", "track_ids", "=", "np", ".", "stack", "(", "[", "annot", "[", "'ID'", "]", "for", "annot", "in", "annots", "]", ")", "\n", "camMats", "=", "annots", "[", "0", "]", "[", "'camMats'", "]", "\n", "person_num", "=", "len", "(", "kp2ds", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 1: smpl global orient | 2: smpl body pose | 3: smpl body shape | 4: smpl verts | 5: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "track_ids", ",", "'vmask_2d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "True", ",", "True", "]", "for", "_", "in", "range", "(", "person_num", ")", "]", ")", ",", "'vmask_3d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "False", ",", "True", ",", "True", ",", "True", ",", "True", "]", "for", "_", "in", "range", "(", "person_num", ")", "]", ")", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "params", ",", "'root_trans'", ":", "root_trans", ",", "'verts'", ":", "verts", ",", "'camMats'", ":", "camMats", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'agora'", "}", "\n", "\n", "if", "'relative'", "in", "base_class", ":", "\n", "                ", "properties", "=", "np", ".", "stack", "(", "[", "annot", "[", "'props'", "]", "for", "annot", "in", "annots", "]", ")", "\n", "genders", "=", "(", "properties", "[", ":", ",", "0", "]", "==", "'female'", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "ages", "=", "(", "properties", "[", ":", ",", "1", "]", "==", "'kid'", ")", ".", "astype", "(", "np", ".", "int", ")", "*", "2", "\n", "depth_level", "=", "body_type", "=", "np", ".", "ones_like", "(", "ages", ")", "*", "-", "1", "\n", "img_info", "[", "'depth'", "]", "=", "np", ".", "stack", "(", "[", "ages", ",", "genders", ",", "depth_level", ",", "body_type", "]", ",", "1", ")", "\n", "if", "ages", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "img_info", "[", "'kid_shape_offsets'", "]", "=", "np", ".", "array", "(", "[", "annot", "[", "'betas'", "]", "[", "0", ",", "10", "]", "if", "annot", "[", "'betas'", "]", ".", "shape", "[", "-", "1", "]", "==", "11", "else", "0", "for", "annot", "in", "annots", "]", ")", "\n", "\n", "", "", "return", "img_info", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "file_paths", ")", "\n", "", "", "return", "AGORA", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.agora.pack_data": [[78, 128], ["os.makedirs", "glob.glob", "enumerate", "np.savez", "np.savez", "os.path.join", "pandas.read_pickle", "pandas.read_pickle.to_dict", "enumerate", "np.savez", "os.path.join", "print", "enumerate", "os.path.join", "np.savez", "agora..annots_path.replace", "np.array", "np.array().transpose", "np.array", "pandas.read_pickle", "smpl_annot[].detach().cpu().numpy", "smpl_annot[].detach().cpu().numpy", "smpl_annot[].detach().cpu().numpy", "img_annot.append", "os.path.basename().replace", "len", "len", "os.path.join", "[].replace", "np.array", "smpl_annot_path.replace", "smpl_annot[].detach().cpu", "smpl_annot[].detach().cpu", "smpl_annot[].detach().cpu", "[].replace", "os.path.basename", "[].replace", "smpl_annot[].detach", "smpl_annot[].detach", "smpl_annot[].detach"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.read_pickle", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.read_pickle"], ["", "def", "pack_data", "(", "vertex_save_dir", ",", "data_folder", ",", "split", ",", "annots_path", ")", ":", "\n", "    ", "import", "pandas", "\n", "annots", "=", "{", "}", "\n", "smpl_subject_dict", ",", "subject_id", "=", "{", "}", ",", "0", "\n", "os", ".", "makedirs", "(", "vertex_save_dir", ",", "exist_ok", "=", "True", ")", "\n", "all_annot_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_folder", ",", "'CAM2'", ",", "'{}*_withj2.pkl'", ".", "format", "(", "split", ")", ")", ")", "\n", "for", "af_ind", ",", "annot_file", "in", "enumerate", "(", "all_annot_paths", ")", ":", "\n", "        ", "annot", "=", "pandas", ".", "read_pickle", "(", "annot_file", ")", "\n", "annot_dicts", "=", "annot", ".", "to_dict", "(", "orient", "=", "'records'", ")", "\n", "for", "annot_ind", ",", "annot_dict", "in", "enumerate", "(", "annot_dicts", ")", ":", "\n", "            ", "print", "(", "'{}/{} {}/{}'", ".", "format", "(", "af_ind", ",", "len", "(", "all_annot_paths", ")", ",", "annot_ind", ",", "len", "(", "annot_dicts", ")", ",", "annot_dict", "[", "'imgPath'", "]", ")", ")", "\n", "img_annot", ",", "img_verts", ",", "valid_num", "=", "[", "]", ",", "[", "]", ",", "0", "\n", "pimg_annot", "=", "{", "\n", "'cam_locs'", ":", "np", ".", "array", "(", "[", "annot_dict", "[", "'camX'", "]", ",", "annot_dict", "[", "'camY'", "]", ",", "annot_dict", "[", "'camZ'", "]", ",", "annot_dict", "[", "'camYaw'", "]", "]", ")", ",", "\n", "'trans'", ":", "np", ".", "array", "(", "[", "annot_dict", "[", "'X'", "]", ",", "annot_dict", "[", "'Y'", "]", ",", "annot_dict", "[", "'Z'", "]", ",", "annot_dict", "[", "'Yaw'", "]", "]", ")", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", ",", "\n", "'props'", ":", "np", ".", "array", "(", "[", "annot_dict", "[", "'gender'", "]", ",", "annot_dict", "[", "'kid'", "]", ",", "annot_dict", "[", "'occlusion'", "]", ",", "annot_dict", "[", "'age'", "]", ",", "annot_dict", "[", "'ethnicity'", "]", "]", ")", ",", "\n", "'isValid'", ":", "annot_dict", "[", "'isValid'", "]", ",", "'gt_path_smpl'", ":", "annot_dict", "[", "'gt_path_smpl'", "]", ",", "'gt_path_smplx'", ":", "annot_dict", "[", "'gt_path_smplx'", "]", "\n", "}", "\n", "for", "ind", ",", "smpl_annot_path", "in", "enumerate", "(", "annot_dict", "[", "'gt_path_smpl'", "]", ")", ":", "\n", "                ", "if", "annot_dict", "[", "'isValid'", "]", "[", "ind", "]", ":", "\n", "                    ", "valid_num", "+=", "1", "\n", "", "subj_annot", "=", "{", "}", "\n", "smpl_annot", "=", "pandas", ".", "read_pickle", "(", "os", ".", "path", ".", "join", "(", "data_folder", ",", "smpl_annot_path", ".", "replace", "(", "'.obj'", ",", "'.pkl'", ")", ")", ")", "\n", "subj_annot", "[", "'body_pose'", "]", "=", "smpl_annot", "[", "'body_pose'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "subj_annot", "[", "'betas'", "]", "=", "smpl_annot", "[", "'betas'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "subj_annot", "[", "'root_rot'", "]", "=", "smpl_annot", "[", "'root_pose'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "subj_annot", "[", "'props'", "]", "=", "[", "annot_dict", "[", "'gender'", "]", "[", "ind", "]", ",", "'kid'", "if", "annot_dict", "[", "'kid'", "]", "[", "ind", "]", "else", "'adult'", ",", "annot_dict", "[", "'age'", "]", "[", "ind", "]", ",", "annot_dict", "[", "'ethnicity'", "]", "[", "ind", "]", "]", "\n", "if", "annot_dict", "[", "'gt_path_smpl'", "]", "[", "ind", "]", ".", "replace", "(", "'.obj'", ",", "''", ")", "not", "in", "smpl_subject_dict", ":", "\n", "                    ", "smpl_subject_dict", "[", "annot_dict", "[", "'gt_path_smpl'", "]", "[", "ind", "]", ".", "replace", "(", "'.obj'", ",", "''", ")", "]", "=", "subject_id", "\n", "subject_id", "+=", "1", "\n", "", "subj_annot", "[", "'ID'", "]", "=", "smpl_subject_dict", "[", "annot_dict", "[", "'gt_path_smpl'", "]", "[", "ind", "]", ".", "replace", "(", "'.obj'", ",", "''", ")", "]", "\n", "subj_annot", "[", "'occlusion'", "]", "=", "annot_dict", "[", "'occlusion'", "]", "[", "ind", "]", "\n", "subj_annot", "[", "'isValid'", "]", "=", "annot_dict", "[", "'isValid'", "]", "[", "ind", "]", "\n", "subj_annot", "[", "'kp2d'", "]", "=", "annot_dict", "[", "'gt_joints_2d'", "]", "[", "ind", "]", "\n", "subj_annot", "[", "'kp3d'", "]", "=", "annot_dict", "[", "'gt_joints_3d'", "]", "[", "ind", "]", "\n", "subj_annot", "[", "'cam_locs'", "]", "=", "pimg_annot", "[", "'cam_locs'", "]", "\n", "subj_annot", "[", "'smpl_trans'", "]", "=", "pimg_annot", "[", "'trans'", "]", "[", "ind", "]", "\n", "subj_annot", "[", "'camMats'", "]", "=", "annot_dict", "[", "'camMats'", "]", "[", "ind", "]", "\n", "subj_annot", "[", "'root_rotMats'", "]", "=", "annot_dict", "[", "'root_rotMats'", "]", "[", "ind", "]", "\n", "img_annot", ".", "append", "(", "subj_annot", ")", "\n", "#img_verts.append(annot_dict['gt_verts'][ind])", "\n", "", "if", "valid_num", "!=", "0", ":", "\n", "                ", "annots", "[", "annot_dict", "[", "'imgPath'", "]", "]", "=", "img_annot", "\n", "", "vertex_save_name", "=", "os", ".", "path", ".", "join", "(", "vertex_save_dir", ",", "os", ".", "path", ".", "basename", "(", "annot_dict", "[", "'imgPath'", "]", ")", ".", "replace", "(", "'.png'", ",", "'.npz'", ")", ")", "\n", "np", ".", "savez", "(", "vertex_save_name", ",", "verts", "=", "img_verts", ")", "\n", "", "np", ".", "savez", "(", "self", ".", "annots_path", ".", "replace", "(", "'.npz'", ",", "'_{}.npz'", ".", "format", "(", "af_ind", ")", ")", ",", "annots", "=", "annots", ")", "\n", "", "np", ".", "savez", "(", "annots_path", ",", "annots", "=", "annots", ")", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'subject_IDs_dict_{}.npz'", ".", "format", "(", "self", ".", "split", ")", ")", ",", "subject_ids", "=", "smpl_subject_dict", ")", "\n", "return", "annots", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_test.MPI_INF_3DHP_TEST": [[7, 107], ["super().__init__", "os.path.join", "os.path.join", "os.path.exists", "list", "constants.joint_mapping", "constants.joint_mapping", "logging.info", "os.path.join", "mpi_inf_3dhp_test..map_kps", "mpi_inf_3dhp_test._check_visible", "np.array", "kp3ds[].mean", "range", "np.savez", "print", "os.path.join", "mpi_inf_3dhp_test..pack_data", "mpi_inf_3dhp_test..annots.keys", "os.path.join.split", "os.path.exists", "print", "os.path.join", "cv2.imread", "mpi_inf_3dhp_test..map_kps", "np.concatenate", "np.array", "np.array", "np.array", "os.path.join", "os.path.join", "os.path.join", "print", "mat73.loadmat", "print", "np.array", "np.array", "np.array", "print", "print", "mpi_inf_3dhp_test..__len__", "list", "valid_frame.sum", "np.where", "mpi_inf_3dhp_test..get_image_name", "annots_2d[].transpose", "mpi_inf_3dhp_test._check_visible", "np.load", "random.randint", "str", "mat73.loadmat.keys", "annots_3d[].transpose", "univ_annot3[].transpose", "frame_info[].append", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_test._check_visible", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.agora.pack_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__len__", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_test._check_visible", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["def", "MPI_INF_3DHP_TEST", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "MPI_INF_3DHP_TEST", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "False", ",", "joint_format", "=", "'smpl24'", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "MPI_INF_3DHP_TEST", ",", "self", ")", ".", "__init__", "(", "train_flag", ")", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'mpi_inf_3dhp/mpi_inf_3dhp_test_set'", ")", "\n", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'annots.npz'", ")", "\n", "self", ".", "multi_mode", "=", "True", "\n", "self", ".", "track_id", "=", "{", "'TS1'", ":", "1", ",", "'TS2'", ":", "2", ",", "'TS3'", ":", "3", ",", "'TS4'", ":", "4", ",", "'TS5'", ":", "5", ",", "'TS6'", ":", "6", "}", "\n", "self", ".", "subject_gender", "=", "{", "'TS1'", ":", "0", ",", "'TS2'", ":", "0", ",", "'TS3'", ":", "0", ",", "'TS4'", ":", "0", ",", "'TS5'", ":", "0", ",", "'TS6'", ":", "1", "}", "\n", "self", ".", "focal_lengths", "=", "{", "'TS1'", ":", "1499.2054687744", ",", "'TS2'", ":", "1499.2054687744", ",", "'TS3'", ":", "1499.2054687744", ",", "'TS4'", ":", "1499.2054687744", ",", "'TS5'", ":", "1683.98345952", ",", "'TS6'", ":", "1683.98345952", "}", "\n", "\n", "self", ".", "scale_range", "=", "[", "1.6", ",", "2.2", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "annots_file_path", ")", ":", "\n", "                ", "self", ".", "annots", "=", "np", ".", "load", "(", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "pack_data", "(", "annots_file_path", ")", "\n", "", "self", ".", "file_paths", "=", "list", "(", "self", ".", "annots", ".", "keys", "(", ")", ")", "\n", "self", ".", "kp2d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "MPI_INF_TEST_17", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "kp3d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "MPI_INF_TEST_17", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "self", ".", "root_inds", "=", "[", "constants", ".", "SMPL_ALL_54", "[", "'Pelvis'", "]", "]", "#[constants.SMPL_ALL_54['R_Hip'], constants.SMPL_ALL_54['L_Hip']] ", "\n", "\n", "logging", ".", "info", "(", "'Loaded MPI-INF-3DHP test data,total {} samples'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", ")", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "img_name", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "img_name", ")", "\n", "subject_id", "=", "imgpath", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgpath", ")", ":", "\n", "                ", "print", "(", "imgpath", ",", "'missing..'", ")", "\n", "img_name", "=", "self", ".", "file_paths", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", ")", "]", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "img_name", ")", "\n", "", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "kp2ds", "=", "self", ".", "map_kps", "(", "self", ".", "annots", "[", "img_name", "]", "[", "'kp2d'", "]", ",", "maps", "=", "self", ".", "kp2d_mapper", ")", "\n", "kp3ds", "=", "self", ".", "map_kps", "(", "self", ".", "annots", "[", "img_name", "]", "[", "'univ_kp3d'", "]", ",", "maps", "=", "self", ".", "kp3d_mapper", ")", "[", "None", "]", "\n", "vis_mask", "=", "_check_visible", "(", "kp2ds", ",", "get_mask", "=", "True", ")", "\n", "kp2ds", "=", "np", ".", "concatenate", "(", "[", "kp2ds", ",", "vis_mask", "[", ":", ",", "None", "]", "]", ",", "1", ")", "[", "None", "]", "\n", "fl", ",", "h", ",", "w", "=", "self", ".", "focal_lengths", "[", "subject_id", "]", ",", "*", "image", ".", "shape", "[", ":", "2", "]", "\n", "camMats", "=", "np", ".", "array", "(", "[", "[", "fl", ",", "0", ",", "w", "/", "2.", "]", ",", "[", "0", ",", "fl", ",", "h", "/", "2.", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "root_trans", "=", "kp3ds", "[", ":", ",", "self", ".", "root_inds", "]", ".", "mean", "(", "1", ")", "\n", "kp3ds", "-=", "root_trans", "[", ":", ",", "None", "]", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "[", "self", ".", "track_id", "[", "subject_id", "]", "]", ",", "'vmask_2d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "True", ",", "True", "]", "]", ")", ",", "'vmask_3d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", "True", "]", "]", ")", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "root_trans", ",", "'verts'", ":", "None", ",", "'camMats'", ":", "camMats", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'mpiinf_test'", "}", "\n", "\n", "if", "'relative'", "in", "base_class", ":", "\n", "                ", "img_info", "[", "'depth'", "]", "=", "np", ".", "array", "(", "[", "[", "0", ",", "self", ".", "subject_gender", "[", "subject_id", "]", ",", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "return", "img_info", "\n", "\n", "", "def", "pack_data", "(", "self", ",", "annots_file_path", ")", ":", "\n", "            ", "import", "mat73", "\n", "self", ".", "annots", "=", "{", "}", "\n", "frame_info", "=", "{", "}", "\n", "user_list", "=", "range", "(", "1", ",", "7", ")", "\n", "missing_frame", "=", "0", "\n", "\n", "for", "user_i", "in", "user_list", ":", "\n", "                ", "if", "user_i", "<", "5", ":", "\n", "                    ", "h", ",", "w", "=", "2048", ",", "2048", "\n", "", "else", ":", "\n", "                    ", "h", ",", "w", "=", "1080", ",", "1920", "\n", "", "video_name", "=", "os", ".", "path", ".", "join", "(", "'TS'", "+", "str", "(", "user_i", ")", ")", "\n", "# mat file with annotations", "\n", "annot_file", "=", "os", ".", "path", ".", "join", "(", "video_name", ",", "'annot_data.mat'", ")", "\n", "annot_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "annot_file", ")", "\n", "print", "(", "'Processing '", ",", "annot_file_path", ")", "\n", "annotation", "=", "mat73", ".", "loadmat", "(", "annot_file_path", ")", "\n", "valid_frame", "=", "annotation", "[", "'valid_frame'", "]", "\n", "print", "(", "list", "(", "annotation", ".", "keys", "(", ")", ")", ")", "\n", "activity", "=", "annotation", "[", "'activity_annotation'", "]", "\n", "annots_2d", "=", "np", ".", "array", "(", "annotation", "[", "'annot2'", "]", ")", "\n", "annots_3d", "=", "np", ".", "array", "(", "annotation", "[", "'annot3'", "]", ")", "\n", "frame_num", "=", "annots_3d", ".", "shape", "[", "-", "1", "]", "\n", "univ_annot3", "=", "np", ".", "array", "(", "annotation", "[", "'univ_annot3'", "]", ")", "\n", "print", "(", "'valid video length:'", ",", "valid_frame", ".", "sum", "(", ")", ")", "\n", "\n", "frame_info", "[", "video_name", "]", "=", "[", "]", "\n", "for", "frame_id", "in", "np", ".", "where", "(", "valid_frame", ")", "[", "0", "]", ":", "\n", "                    ", "img_name", "=", "self", ".", "get_image_name", "(", "video_name", ",", "frame_id", ")", "\n", "kp2d", "=", "annots_2d", "[", ":", ",", ":", ",", "frame_id", "]", ".", "transpose", "(", "1", ",", "0", ")", "\n", "kp3d", "=", "annots_3d", "[", ":", ",", ":", ",", "frame_id", "]", ".", "transpose", "(", "1", ",", "0", ")", "/", "1000", "\n", "univ_kp3d", "=", "univ_annot3", "[", ":", ",", ":", ",", "frame_id", "]", ".", "transpose", "(", "1", ",", "0", ")", "/", "1000", "\n", "if", "_check_visible", "(", "kp2d", ",", "w", "=", "w", ",", "h", "=", "h", ")", ":", "\n", "                        ", "self", ".", "annots", "[", "img_name", "]", "=", "{", "'kp2d'", ":", "kp2d", ",", "'kp3d'", ":", "kp3d", ",", "'univ_kp3d'", ":", "univ_kp3d", "}", "\n", "frame_info", "[", "video_name", "]", ".", "append", "(", "frame_id", ")", "\n", "", "else", ":", "\n", "                        ", "missing_frame", "+=", "1", "\n", "", "", "print", "(", "'{} frame without all kp visible'", ".", "format", "(", "missing_frame", ")", ")", "\n", "", "np", ".", "savez", "(", "annots_file_path", ",", "annots", "=", "self", ".", "annots", ",", "frame_info", "=", "frame_info", ")", "\n", "print", "(", "'MPI_INF_3DHP test set data annotations is packed'", ")", "\n", "\n", "", "def", "get_image_name", "(", "self", ",", "video_name", ",", "frame_id", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "video_name", ",", "'imageSequence'", ",", "'img_{:06d}.jpg'", ".", "format", "(", "frame_id", "+", "1", ")", ")", "\n", "", "", "return", "MPI_INF_3DHP_TEST", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_test._check_visible": [[108, 119], ["np.logical_and", "np.logical_and", "np.logical_and", "np.sum", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "_check_visible", "(", "joints", ",", "w", "=", "2048", ",", "h", "=", "2048", ",", "get_mask", "=", "False", ")", ":", "\n", "    ", "visibility", "=", "True", "\n", "# check that all joints are visible", "\n", "x_in", "=", "np", ".", "logical_and", "(", "joints", "[", ":", ",", "0", "]", "<", "w", ",", "joints", "[", ":", ",", "0", "]", ">=", "0", ")", "\n", "y_in", "=", "np", ".", "logical_and", "(", "joints", "[", ":", ",", "1", "]", "<", "h", ",", "joints", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "ok_pts", "=", "np", ".", "logical_and", "(", "x_in", ",", "y_in", ")", "\n", "if", "np", ".", "sum", "(", "ok_pts", ")", "<", "len", "(", "joints", ")", ":", "\n", "        ", "visibility", "=", "False", "\n", "", "if", "get_mask", ":", "\n", "        ", "return", "ok_pts", "\n", "", "return", "visibility", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mpi_inf_3dhp_test.read_calibration": [[120, 135], ["open", "open.readlines", "np.array", "np.reshape", "np.array", "np.reshape", "Ks.append", "Rs.append", "Ts.append", "float", "float", "[].split", "[].split"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "read_calibration", "(", "calib_file", ",", "vid_list", ")", ":", "\n", "    ", "Ks", ",", "Rs", ",", "Ts", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "file", "=", "open", "(", "calib_file", ",", "'r'", ")", "\n", "content", "=", "file", ".", "readlines", "(", ")", "\n", "for", "vid_i", "in", "vid_list", ":", "\n", "        ", "K", "=", "np", ".", "array", "(", "[", "float", "(", "s", ")", "for", "s", "in", "content", "[", "vid_i", "*", "7", "+", "5", "]", "[", "11", ":", "-", "2", "]", ".", "split", "(", ")", "]", ")", "\n", "K", "=", "np", ".", "reshape", "(", "K", ",", "(", "4", ",", "4", ")", ")", "\n", "RT", "=", "np", ".", "array", "(", "[", "float", "(", "s", ")", "for", "s", "in", "content", "[", "vid_i", "*", "7", "+", "6", "]", "[", "11", ":", "-", "2", "]", ".", "split", "(", ")", "]", ")", "\n", "RT", "=", "np", ".", "reshape", "(", "RT", ",", "(", "4", ",", "4", ")", ")", "\n", "R", "=", "RT", "[", ":", "3", ",", ":", "3", "]", "\n", "T", "=", "RT", "[", ":", "3", ",", "3", "]", "/", "1000", "\n", "Ks", ".", "append", "(", "K", ")", "\n", "Rs", ".", "append", "(", "R", ")", "\n", "Ts", ".", "append", "(", "T", ")", "\n", "", "return", "Ks", ",", "Rs", ",", "Ts", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.lsp.LSP": [[6, 94], ["super().__init__", "os.path.join", "constants.joint_mapping", "lsp..load_data", "list", "logging.info", "os.path.join", "[].transpose().astype", "glob.glob", "zip", "img_number_list.sort", "enumerate", "os.path.join", "os.path.exists", "constants.joint_mapping", "enumerate", "logging.info", "os.path.join", "lsp..regress_kp3d_from_smpl", "np.array", "lsp..eft_annots.keys", "SMPLR", "os.path.join", "os.path.basename", "img_number_list.append", "lsp..file_paths.append", "lsp..load_eft_annots", "np.savez", "json.load", "os.path.basename", "np.array", "np.reshape", "np.reshape", "quaternion.as_rotation_vector().reshape", "lsp..eft_annots[].append", "cv2.imread", "lsp..map_kps", "np.array", "np.array", "np.array", "np.arange", "len", "[].transpose", "int", "os.path.join", "open", "np.array", "np.array", "len", "len", "np.load", "quaternion.as_rotation_vector", "len", "np.concatenate", "quaternion.from_rotation_matrix", "scio.loadmat", "os.path.basename.split", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.regress_kp3d_from_smpl", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["def", "LSP", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "LSP", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "regress_smpl", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "LSP", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "regress_smpl", ")", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'lsp/'", ")", "\n", "self", ".", "joint_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "LSP_14", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "#self.joint3d_mapper = constants.joint_mapping(constants.SMPL_ALL_54, constants.SMPL_ALL_54)", "\n", "self", ".", "scale_range", "=", "[", "1.6", ",", "2", "]", "\n", "self", ".", "load_data", "(", ")", "\n", "self", ".", "file_paths", "=", "list", "(", "self", ".", "eft_annots", ".", "keys", "(", ")", ")", "\n", "self", ".", "multi_mode", "=", "False", "# loading in a single-person mode, due to the kp2d annotation is only for a single person in image", "\n", "if", "self", ".", "regress_smpl", ":", "\n", "                ", "self", ".", "smplr", "=", "SMPLR", "(", "use_gender", "=", "False", ")", "\n", "", "logging", ".", "info", "(", "'LSP dataset total {} samples'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "\n", "", "def", "load_data", "(", "self", ")", ":", "\n", "            ", "self", ".", "file_paths", ",", "self", ".", "annots", "=", "[", "]", ",", "{", "}", "\n", "root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'hr-lspet'", ")", "# 'lsp_original'  'lsp_ext'", "\n", "self", ".", "img_dir", "=", "root_dir", "#os.path.join(root_dir,'images')", "\n", "joints", "=", "scio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'joints.mat'", ")", ")", "[", "'joints'", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'*.png'", ")", ")", "\n", "img_number_list", "=", "[", "]", "\n", "for", "img_path", ",", "joint", "in", "zip", "(", "img_paths", ",", "joints", ")", ":", "\n", "                ", "img_name", "=", "os", ".", "path", ".", "basename", "(", "img_path", ")", "\n", "img_number_list", ".", "append", "(", "int", "(", "img_name", ".", "split", "(", "'.png'", ")", "[", "0", "]", "[", "2", ":", "]", ")", ")", "\n", "self", ".", "file_paths", ".", "append", "(", "img_name", ")", "\n", "", "img_number_list", ".", "sort", "(", ")", "\n", "for", "idx", ",", "img_number", "in", "enumerate", "(", "img_number_list", ")", ":", "\n", "                ", "img_name", "=", "'im{:05}.png'", ".", "format", "(", "img_number", ")", "\n", "self", ".", "annots", "[", "img_name", "]", "=", "joints", "[", "idx", "]", "\n", "\n", "", "load_eft_annots_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'eft_annots.npz'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "load_eft_annots_path", ")", ":", "\n", "                ", "self", ".", "eft_annots", "=", "np", ".", "load", "(", "load_eft_annots_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "load_eft_annots", "(", "os", ".", "path", ".", "join", "(", "config", ".", "project_dir", ",", "'data/eft_fit/LSPet_ver01.json'", ")", ")", "\n", "np", ".", "savez", "(", "load_eft_annots_path", ",", "annots", "=", "self", ".", "eft_annots", ")", "\n", "\n", "", "", "def", "load_eft_annots", "(", "self", ",", "annot_file_path", ")", ":", "\n", "            ", "joint_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_24", ",", "constants", ".", "LSP_14", ")", "\n", "self", ".", "eft_annots", "=", "{", "}", "\n", "annots", "=", "json", ".", "load", "(", "open", "(", "annot_file_path", ",", "'r'", ")", ")", "[", "'data'", "]", "\n", "for", "idx", ",", "eft_data", "in", "enumerate", "(", "annots", ")", ":", "\n", "#Get raw image path", "\n", "                ", "imgFullPath", "=", "eft_data", "[", "'imageName'", "]", "\n", "imgName", "=", "os", ".", "path", ".", "basename", "(", "imgFullPath", ")", "\n", "kp2d_gt", "=", "self", ".", "annots", "[", "imgName", "]", "\n", "\n", "bbox_scale", "=", "eft_data", "[", "'bbox_scale'", "]", "\n", "bbox_center", "=", "eft_data", "[", "'bbox_center'", "]", "\n", "\n", "pred_camera", "=", "np", ".", "array", "(", "eft_data", "[", "'parm_cam'", "]", ")", "\n", "pred_betas", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "eft_data", "[", "'parm_shape'", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "(", "10", ")", ")", "#(10,)", "\n", "pred_pose_rotmat", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "eft_data", "[", "'parm_pose'", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "(", "24", ",", "3", ",", "3", ")", ")", "#(24,3,3)", "\n", "pred_pose", "=", "quaternion", ".", "as_rotation_vector", "(", "quaternion", ".", "from_rotation_matrix", "(", "pred_pose_rotmat", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "if", "imgName", "not", "in", "self", ".", "eft_annots", ":", "\n", "                    ", "self", ".", "eft_annots", "[", "imgName", "]", "=", "[", "]", "\n", "", "self", ".", "eft_annots", "[", "imgName", "]", ".", "append", "(", "[", "bbox_center", ",", "pred_pose", ",", "pred_betas", "]", ")", "\n", "", "logging", ".", "info", "(", "'EFT pseudo-label contains annotations for {} samples'", ".", "format", "(", "len", "(", "self", ".", "eft_annots", ")", ")", ")", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "kp2ds", "=", "self", ".", "map_kps", "(", "self", ".", "annots", "[", "img_name", "]", ",", "self", ".", "joint_mapper", ")", "[", "None", "]", "\n", "\n", "params", ",", "valid_mask_3d", "=", "[", "]", ",", "np", ".", "array", "(", "[", "self", ".", "default_valid_mask_3d", "]", ")", "\n", "if", "img_name", "in", "self", ".", "eft_annots", "and", "self", ".", "use_eft", ":", "\n", "                ", "eft_annot", "=", "self", ".", "eft_annots", "[", "img_name", "]", "\n", "bbox_center", ",", "pose", ",", "betas", "=", "eft_annot", "[", "0", "]", "\n", "params", "=", "np", ".", "array", "(", "[", "np", ".", "concatenate", "(", "[", "pose", "[", ":", "66", "]", ",", "betas", "]", ")", "]", ")", "\n", "valid_mask_3d", "[", "0", ",", ":", "4", "]", "=", "np", ".", "array", "(", "[", "self", ".", "regress_smpl", ",", "True", ",", "True", ",", "False", "]", ")", "\n", "\n", "", "kp3ds", "=", "self", ".", "regress_kp3d_from_smpl", "(", "params", ")", "\n", "valid_mask_2d", "=", "np", ".", "array", "(", "[", "[", "True", ",", "False", ",", "False", "]", "]", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "np", ".", "arange", "(", "len", "(", "kp2ds", ")", ")", ",", "'vmask_2d'", ":", "valid_mask_2d", ",", "'vmask_3d'", ":", "valid_mask_3d", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "params", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'lsp'", "}", "\n", "\n", "return", "img_info", "\n", "", "", "return", "LSP", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.AICH.AICH": [[6, 103], ["super().__init__", "os.path.join", "os.path.join", "constants.joint_mapping", "os.path.exists", "list", "logging.info", "zip", "logging.info", "np.array().reshape().copy", "pts[].copy", "kp_set.keys", "np.sum", "AICH..kp2ds[].copy", "os.path.join", "np.array", "np.array", "AICH.._load_data_set", "np.savez", "AICH..kp2ds.keys", "os.path.join", "logging.info", "len", "len", "AICH.._handle_sample", "boxs.items", "AICH.._ai_ch_to_lsp", "AICH..kp2ds[].append", "len", "random.randint", "cv2.imread", "np.array", "np.arange", "len", "open", "json.load", "os.path.join", "AICH.._handle_image", "len", "np.array().reshape", "r.append", "len", "np.load", "get_rectangle_intersect_ratio", "len", "range", "range", "np.array", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.get_rectangle_intersect_ratio"], ["def", "AICH", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "AICH", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "high_resolution", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "AICH", ",", "self", ")", ".", "__init__", "(", "train_flag", ")", "\n", "self", ".", "max_intersec_ratio", "=", "0.9", "\n", "self", ".", "min_pts_required", "=", "3", "\n", "self", ".", "compress_length", "=", "8", "\n", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "\"ai_challenger/\"", ")", "\n", "self", ".", "annots_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'annots.npz'", ")", "\n", "self", ".", "img_ext", "=", "'.jpg'", "\n", "self", ".", "joint_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "LSP_14", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "annots_path", ")", ":", "\n", "                ", "self", ".", "kp2ds", "=", "np", ".", "load", "(", "self", ".", "annots_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "_load_data_set", "(", ")", "\n", "np", ".", "savez", "(", "self", ".", "annots_path", ",", "annots", "=", "self", ".", "kp2ds", ")", "\n", "", "self", ".", "file_paths", "=", "list", "(", "self", ".", "kp2ds", ".", "keys", "(", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'AICH 2D keypoint data has been loaded, total {} samples'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "\n", "", "def", "_load_data_set", "(", "self", ")", ":", "\n", "            ", "self", ".", "kp2ds", "=", "{", "}", "\n", "for", "imgdir_name", ",", "set_dir", ",", "anno_file", "in", "zip", "(", "[", "'keypoint_train_images_20170902'", ",", "'keypoint_validation_images_20170911'", "]", ",", "[", "'ai_challenger_keypoint_train_20170909'", ",", "'ai_challenger_keypoint_validation_20170911'", "]", ",", "[", "'keypoint_train_annotations_20170909.json'", ",", "\"keypoint_validation_annotations_20170911.json\"", "]", ")", ":", "\n", "                ", "anno_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "set_dir", ",", "anno_file", ")", "\n", "logging", ".", "info", "(", "'Processing {}'", ".", "format", "(", "anno_file_path", ")", ")", "\n", "with", "open", "(", "anno_file_path", ",", "'r'", ")", "as", "reader", ":", "\n", "                    ", "anno", "=", "json", ".", "load", "(", "reader", ")", "\n", "", "for", "record", "in", "anno", ":", "\n", "                    ", "image_name", "=", "record", "[", "'image_id'", "]", "+", "self", ".", "img_ext", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "set_dir", ",", "imgdir_name", ",", "image_name", ")", "\n", "kp_set", "=", "record", "[", "'keypoint_annotations'", "]", "\n", "box_set", "=", "record", "[", "'human_annotations'", "]", "\n", "self", ".", "_handle_image", "(", "image_path", ",", "kp_set", ",", "box_set", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'finished load AI CH keypoint data, total {} samples'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "\n", "", "def", "_ai_ch_to_lsp", "(", "self", ",", "pts", ")", ":", "\n", "            ", "kp_map", "=", "[", "8", ",", "7", ",", "6", ",", "9", ",", "10", ",", "11", ",", "2", ",", "1", ",", "0", ",", "3", ",", "4", ",", "5", ",", "13", ",", "12", "]", "\n", "pts", "=", "np", ".", "array", "(", "pts", ",", "dtype", "=", "np", ".", "float", ")", ".", "reshape", "(", "14", ",", "3", ")", ".", "copy", "(", ")", "\n", "pts", "[", ":", ",", "2", "]", "=", "(", "3.0", "-", "pts", "[", ":", ",", "2", "]", ")", "/", "2.0", "\n", "return", "pts", "[", "kp_map", "]", ".", "copy", "(", ")", "\n", "\n", "", "def", "_handle_image", "(", "self", ",", "image_path", ",", "kp_set", ",", "box_set", ")", ":", "\n", "            ", "assert", "len", "(", "kp_set", ")", "==", "len", "(", "box_set", ")", "\n", "for", "key", "in", "kp_set", ".", "keys", "(", ")", ":", "\n", "                ", "kps", "=", "kp_set", "[", "key", "]", "\n", "box", "=", "box_set", "[", "key", "]", "\n", "self", ".", "_handle_sample", "(", "key", ",", "image_path", ",", "kps", ",", "[", "[", "box", "[", "0", "]", ",", "box", "[", "1", "]", "]", ",", "[", "box", "[", "2", "]", ",", "box", "[", "3", "]", "]", "]", ",", "box_set", ")", "\n", "\n", "", "", "def", "_handle_sample", "(", "self", ",", "key", ",", "image_path", ",", "pts", ",", "box", ",", "boxs", ")", ":", "\n", "            ", "def", "_collect_box", "(", "key", ",", "boxs", ")", ":", "\n", "                ", "r", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "boxs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "==", "key", ":", "\n", "                        ", "continue", "\n", "", "r", ".", "append", "(", "[", "[", "v", "[", "0", "]", ",", "v", "[", "1", "]", "]", ",", "[", "v", "[", "2", "]", ",", "v", "[", "3", "]", "]", "]", ")", "\n", "", "return", "r", "\n", "", "def", "_collide_heavily", "(", "box", ",", "boxs", ")", ":", "\n", "                ", "for", "it", "in", "boxs", ":", "\n", "                    ", "if", "get_rectangle_intersect_ratio", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "it", "[", "0", "]", ",", "it", "[", "1", "]", ")", ">", "self", ".", "max_intersec_ratio", ":", "\n", "                        ", "return", "True", "\n", "", "", "return", "False", "\n", "", "pts", "=", "self", ".", "_ai_ch_to_lsp", "(", "pts", ")", "[", "self", ".", "joint_mapper", "]", "\n", "pts", "[", "self", ".", "joint_mapper", "==", "-", "1", "]", "=", "-", "2.", "\n", "valid_pt_cound", "=", "np", ".", "sum", "(", "pts", "[", "self", ".", "joint_mapper", "!=", "-", "1", ",", "2", "]", ")", "\n", "if", "valid_pt_cound", "<", "self", ".", "min_pts_required", ":", "\n", "                ", "return", "\n", "\n", "", "if", "image_path", "in", "self", ".", "kp2ds", ":", "\n", "                ", "self", ".", "kp2ds", "[", "image_path", "]", ".", "append", "(", "pts", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "kp2ds", "[", "image_path", "]", "=", "[", "pts", "]", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "file_paths", ")", "//", "self", ".", "compress_length", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "index", "=", "index", "*", "self", ".", "compress_length", "+", "random", ".", "randint", "(", "0", ",", "self", ".", "compress_length", "-", "1", ")", "\n", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "kp2ds", "=", "self", ".", "kp2ds", "[", "img_name", "]", ".", "copy", "(", ")", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "valid_mask_2d", "=", "np", ".", "array", "(", "[", "[", "True", ",", "False", ",", "True", "]", "for", "_", "in", "range", "(", "len", "(", "kp2ds", ")", ")", "]", ")", "\n", "valid_mask_3d", "=", "np", ".", "array", "(", "[", "self", ".", "default_valid_mask_3d", "for", "_", "in", "range", "(", "len", "(", "kp2ds", ")", ")", "]", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "np", ".", "array", "(", "kp2ds", ")", ",", "'track_ids'", ":", "np", ".", "arange", "(", "len", "(", "kp2ds", ")", ")", ",", "'vmask_2d'", ":", "valid_mask_2d", ",", "'vmask_3d'", ":", "valid_mask_3d", ",", "'kp3ds'", ":", "None", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'aich'", "}", "\n", "\n", "return", "img_info", "\n", "", "", "return", "AICH", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.Internet.__init__": [[18, 24], ["torch.utils.data.Dataset.__init__", "isinstance", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["    ", "def", "__init__", "(", "self", ",", "file_list", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Internet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "file_list", ",", "list", ")", ",", "print", "(", "'Error: Input file_list is supposed to be a list!'", ")", "\n", "self", ".", "file_paths", "=", "file_list", "\n", "\n", "print", "(", "'Loading {} images to process'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.Internet.get_image_info": [[25, 27], ["None"], "methods", ["None"], ["", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "file_paths", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.Internet.resample": [[28, 30], ["internet.Internet.__getitem__", "random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__getitem__"], ["", "def", "resample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__getitem__", "(", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.Internet.get_item_single_frame": [[31, 43], ["internet.Internet.get_image_info", "cv2.imread", "internet.img_preprocess", "internet.Internet.resample", "internet.Internet.get_image_info", "cv2.imread", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_image_info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.img_preprocess", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.resample", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_image_info", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "get_item_single_frame", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "imgpath", "=", "self", ".", "get_image_info", "(", "index", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "\n", "if", "image", "is", "None", ":", "\n", "            ", "index", "=", "self", ".", "resample", "(", ")", "\n", "imgpath", "=", "self", ".", "get_image_info", "(", "index", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "\n", "\n", "", "input_data", "=", "img_preprocess", "(", "image", ",", "imgpath", ",", "input_size", "=", "args", "(", ")", ".", "input_size", ")", "\n", "\n", "return", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.Internet.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.Internet.__getitem__": [[48, 55], ["internet.Internet.get_item_single_frame", "print", "numpy.random.randint", "internet.Internet.get_item_single_frame", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_item_single_frame", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_item_single_frame"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "get_item_single_frame", "(", "index", ")", "\n", "", "except", "Exception", "as", "error", ":", "\n", "            ", "print", "(", "error", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ")", ")", "\n", "return", "self", ".", "get_item_single_frame", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.img_preprocess": [[56, 78], ["process_image", "torch.from_numpy", "torch.from_numpy().float", "os.path.basename", "cv2.resize", "image.unsqueeze().contiguous.unsqueeze().contiguous", "offsets.unsqueeze().contiguous.unsqueeze().contiguous", "torch.from_numpy", "image.unsqueeze().contiguous.unsqueeze", "offsets.unsqueeze().contiguous.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.process_image"], ["", "", "", "def", "img_preprocess", "(", "image", ",", "imgpath", ",", "input_size", "=", "512", ",", "ds", "=", "'internet'", ",", "single_img_input", "=", "False", ")", ":", "\n", "    ", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "image_org", ",", "offsets", "=", "process_image", "(", "image", ")", "\n", "image", "=", "torch", ".", "from_numpy", "(", "cv2", ".", "resize", "(", "image_org", ",", "(", "input_size", ",", "input_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", ")", "\n", "#image_1024 = torch.from_numpy(cv2.resize(image_org, (1024,1024), interpolation=cv2.INTER_CUBIC))", "\n", "\n", "offsets", "=", "torch", ".", "from_numpy", "(", "offsets", ")", ".", "float", "(", ")", "\n", "name", "=", "os", ".", "path", ".", "basename", "(", "imgpath", ")", "\n", "\n", "if", "single_img_input", ":", "\n", "        ", "image", "=", "image", ".", "unsqueeze", "(", "0", ")", ".", "contiguous", "(", ")", "\n", "#image_1024 = image_1024.unsqueeze(0).contiguous()", "\n", "offsets", "=", "offsets", ".", "unsqueeze", "(", "0", ")", ".", "contiguous", "(", ")", "\n", "imgpath", ",", "name", ",", "ds", "=", "[", "imgpath", "]", ",", "[", "name", "]", ",", "[", "ds", "]", "\n", "", "input_data", "=", "{", "\n", "'image'", ":", "image", ",", "\n", "#'image_1024': image_1024,", "\n", "'imgpath'", ":", "imgpath", ",", "\n", "'offsets'", ":", "offsets", ",", "\n", "'name'", ":", "name", ",", "\n", "'data_set'", ":", "ds", "}", "\n", "return", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.test_dataset": [[79, 96], ["os.path.join", "os.path.isdir", "os.mkdir", "glob.glob", "internet.Internet", "len", "range", "shutil.rmtree", "os.path.join", "internet.Internet.__getitem__", "dataset.__getitem__.items", "cv2.imwrite", "isinstance", "r[].numpy().astype", "print", "print", "r[].numpy"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__getitem__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "test_dataset", "(", "image_folder", "=", "None", ")", ":", "\n", "    ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "project_dir", ",", "'test'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_folder", ",", "'*'", ")", ")", "\n", "dataset", "=", "Internet", "(", "file_list", "=", "file_list", ")", "\n", "length", "=", "len", "(", "dataset", ")", "\n", "for", "idx", "in", "range", "(", "length", ")", ":", "\n", "        ", "r", "=", "dataset", ".", "__getitem__", "(", "idx", ")", "\n", "for", "key", ",", "value", "in", "r", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "                ", "print", "(", "key", ",", "value", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "key", ",", "value", ".", "shape", ")", "\n", "", "", "image", "=", "r", "[", "'image'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "cv2", ".", "imwrite", "(", "'{}/{}.jpg'", ".", "format", "(", "save_dir", ",", "idx", ")", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.crowdpose.Crowdpose": [[7, 99], ["super().__init__", "crowdpose..init_coco", "constants.joint_mapping", "logging.info", "os.path.join", "os.path.join", "list", "crowdpose.._get_image_path", "len", "np.array", "np.array", "np.array", "range", "np.savez", "os.path.join", "os.path.join", "coco.getAnnIds", "coco.loadAnns", "cv2.imread", "len", "enumerate", "np.array", "os.path.exists", "pycocotools.coco.COCO", "list", "crowdpose..pack_annots", "crowdpose..annots.keys", "cv2.imread", "np.arange", "len", "crowdpose..coco.getAnnIds", "crowdpose.._get_image_path", "crowdpose.._get_image_path", "np.array().reshape", "crowdpose..append", "len", "crowdpose.._get_anno_file_name", "crowdpose..coco.imgs.keys", "np.load", "crowdpose..map_kps", "len", "len", "crowdpose..coco.loadAnns", "crowdpose..get_joints", "print", "coco.loadImgs", "joint[].sum", "len", "range", "range", "len", "np.array", "np.max", "np.argmax", "joints[].sum", "joints[].sum", "valid_pt.max", "valid_pt.min", "crowdpose..coco.loadImgs"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack21.pack_annots", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs"], ["def", "Crowdpose", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "Crowdpose", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "split", "=", "'train'", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "Crowdpose", ",", "self", ")", ".", "__init__", "(", "train_flag", ")", "\n", "self", ".", "min_pts_required", "=", "2", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "init_coco", "(", ")", "\n", "self", ".", "kp2d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "Crowdpose_14", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "logging", ".", "info", "(", "'Crowdpose 2D keypoint data has been loaded, total {} samples'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "\n", "", "def", "init_coco", "(", "self", ")", ":", "\n", "            ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "\"crowdpose\"", ")", "\n", "self", ".", "dataset_name", "=", "self", ".", "split", "\n", "self", ".", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'annots_{}.npz'", ".", "format", "(", "self", ".", "dataset_name", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "annots_file_path", ")", ":", "\n", "                ", "self", ".", "coco", "=", "COCO", "(", "self", ".", "_get_anno_file_name", "(", ")", ")", "\n", "self", ".", "file_paths", "=", "list", "(", "self", ".", "coco", ".", "imgs", ".", "keys", "(", ")", ")", "\n", "self", ".", "pack_annots", "(", ")", "\n", "", "self", ".", "annots", "=", "np", ".", "load", "(", "self", ".", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "[", "'annot'", "]", "[", "(", ")", "]", "\n", "self", ".", "file_paths", "=", "list", "(", "self", ".", "annots", ".", "keys", "(", ")", ")", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "imgpath", "=", "self", ".", "_get_image_path", "(", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "person_num", "=", "len", "(", "self", ".", "annots", "[", "img_name", "]", ")", "\n", "kp2ds", "=", "np", ".", "array", "(", "[", "self", ".", "map_kps", "(", "kp2d", ",", "self", ".", "kp2d_mapper", ")", "for", "kp2d", "in", "self", ".", "annots", "[", "img_name", "]", "]", ")", "\n", "valid_mask_2d", "=", "np", ".", "array", "(", "[", "[", "True", ",", "True", ",", "True", "]", "for", "_", "in", "range", "(", "person_num", ")", "]", ")", "\n", "valid_mask_3d", "=", "np", ".", "array", "(", "[", "self", ".", "default_valid_mask_3d", "for", "_", "in", "range", "(", "person_num", ")", "]", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "np", ".", "arange", "(", "len", "(", "kp2ds", ")", ")", ",", "'vmask_2d'", ":", "valid_mask_2d", ",", "'vmask_3d'", ":", "valid_mask_3d", ",", "'kp3ds'", ":", "None", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'crowdpose'", "}", "\n", "\n", "return", "img_info", "\n", "\n", "", "def", "pack_annots", "(", "self", ")", ":", "\n", "            ", "annots", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "img_id", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ",", "iscrowd", "=", "None", ")", "\n", "if", "len", "(", "ann_ids", ")", ">", "0", ":", "\n", "                    ", "annot", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "joints", "=", "self", ".", "get_joints", "(", "annot", ")", "\n", "if", "len", "(", "joints", ")", ">", "0", ":", "\n", "                        ", "if", "np", ".", "max", "(", "joints", "[", ":", ",", ":", ",", "-", "1", "]", ".", "sum", "(", "-", "1", ")", ")", ">", "self", ".", "min_pts_required", ":", "\n", "                            ", "idx", "=", "np", ".", "argmax", "(", "joints", "[", ":", ",", ":", ",", "-", "1", "]", ".", "sum", "(", "-", "1", ")", ")", "\n", "valid_pt", ",", "valid_idx", "=", "joints", "[", "idx", ",", ":", ",", "1", "]", ",", "joints", "[", "idx", ",", ":", ",", "-", "1", "]", ">", "0", "\n", "valid_pt", "=", "valid_pt", "[", "valid_idx", "]", "\n", "if", "(", "valid_pt", ".", "max", "(", ")", "-", "valid_pt", ".", "min", "(", ")", ")", ">", "40", ":", "\n", "                                ", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "annots", "[", "file_name", "]", "=", "joints", "\n", "", "", "", "", "if", "index", "%", "1000", "==", "0", ":", "\n", "                    ", "print", "(", "index", ")", "\n", "", "", "np", ".", "savez", "(", "self", ".", "annots_file_path", ",", "annot", "=", "annots", ")", "\n", "\n", "", "def", "_get_anno_file_name", "(", "self", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'json'", ",", "'crowdpose_{}.json'", ".", "format", "(", "self", ".", "dataset_name", ")", ")", "\n", "\n", "", "def", "_get_image_path", "(", "self", ",", "file_name", ")", ":", "\n", "            ", "images_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ",", "file_name", ")", "\n", "return", "images_dir", "\n", "\n", "", "def", "get_annot", "(", "self", ",", "index", ")", ":", "\n", "            ", "coco", "=", "self", ".", "coco", "\n", "img_id", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "target", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "\n", "file_name", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "self", ".", "_get_image_path", "(", "file_name", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", "|", "cv2", ".", "IMREAD_IGNORE_ORIENTATION", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "return", "img", ",", "target", ",", "self", ".", "_get_image_path", "(", "file_name", ")", "\n", "\n", "", "def", "get_joints", "(", "self", ",", "anno", ")", ":", "\n", "            ", "num_people", "=", "len", "(", "anno", ")", "\n", "joints", "=", "[", "]", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "anno", ")", ":", "\n", "                ", "joint", "=", "np", ".", "array", "(", "obj", "[", "'keypoints'", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "if", "joint", "[", ":", ",", "-", "1", "]", ".", "sum", "(", ")", "<", "1", ":", "\n", "                    ", "continue", "\n", "", "joints", ".", "append", "(", "joint", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "joints", ")", "\n", "", "", "return", "Crowdpose", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack.Posetrack": [[8, 137], ["super().__init__", "posetrack..init_coco", "constants.joint_mapping", "logging.info", "os.path.join", "os.path.exists", "collections.OrderedDict", "enumerate", "posetrack.._get_image_path", "enumerate", "print", "os.path.join", "glob.glob", "np.savez", "print", "os.path.join", "COCO.getAnnIds", "COCO.loadAnns", "cv2.imread", "len", "enumerate", "os.path.join", "os.path.join", "np.load", "posetrack..pack_annots", "cv2.imread", "kp2ds.append", "valid_mask_2d.append", "valid_mask_3d.append", "np.array", "np.array", "np.array", "np.array", "os.path.join", "print", "COCO", "COCO.getImgIds", "enumerate", "print", "sorted", "posetrack.._get_image_path", "posetrack.._get_image_path", "np.array().reshape", "joints.append", "track_ids.append", "np.array", "len", "posetrack..file_paths.append", "int", "COCO.getAnnIds", "COCO.loadAnns", "posetrack..get_joints_ids", "sequence_dict[].append", "COCO.loadImgs", "joint[].sum", "len", "file_name.split", "[].replace", "len", "dropped_frame_ids.append", "img_person_ids.append", "np.array", "print", "np.array", "os.path.join", "COCO.loadImgs", "len", "file_name.split"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack21.pack_annots", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getImgIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack21.get_joints_ids", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["def", "Posetrack", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "Posetrack", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "Posetrack", ",", "self", ")", ".", "__init__", "(", "train_flag", ")", "\n", "self", ".", "min_pts_required", "=", "2", "\n", "self", ".", "init_coco", "(", ")", "\n", "self", ".", "kp2d_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "Posetrack_17", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "logging", ".", "info", "(", "'Posetrack 2D keypoint data has been loaded, total {} samples, contains {} IDs'", ".", "format", "(", "len", "(", "self", ")", ",", "self", ".", "ID_num", ")", ")", "\n", "\n", "", "def", "init_coco", "(", "self", ")", ":", "\n", "            ", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "\"posetrack2018\"", ")", "\n", "\n", "if", "self", ".", "train_flag", ":", "\n", "                ", "self", ".", "split", "=", "'train'", "\n", "self", ".", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'annots_train.npz'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "split", "=", "'val'", "\n", "self", ".", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'annots_val.npz'", ")", "\n", "self", ".", "shuffle_mode", "=", "False", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "annots_file_path", ")", ":", "\n", "                ", "annotations", "=", "np", ".", "load", "(", "self", ".", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "annots", ",", "self", ".", "ID_num", ",", "self", ".", "sequence_dict", "=", "annotations", "[", "'annot'", "]", "[", "(", ")", "]", ",", "annotations", "[", "'person_ids'", "]", "[", "(", ")", "]", "[", "'id_number'", "]", ",", "annotations", "[", "'sequence_dict'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "annots", ",", "self", ".", "ID_num", ",", "self", ".", "sequence_dict", "=", "self", ".", "pack_annots", "(", ")", "\n", "\n", "", "self", ".", "sequence_dict", "=", "OrderedDict", "(", "self", ".", "sequence_dict", ")", "\n", "self", ".", "file_paths", "=", "[", "]", "\n", "for", "sid", ",", "video_name", "in", "enumerate", "(", "self", ".", "sequence_dict", ")", ":", "\n", "                ", "for", "fid", "in", "self", ".", "sequence_dict", "[", "video_name", "]", ":", "\n", "                    ", "self", ".", "file_paths", ".", "append", "(", "[", "sid", ",", "fid", ",", "os", ".", "path", ".", "join", "(", "'images'", ",", "self", ".", "split", ",", "video_name", ",", "'{:06d}.jpg'", ".", "format", "(", "fid", ")", ")", "]", ")", "\n", "\n", "", "", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "sid", ",", "fid", ",", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "imgpath", "=", "self", ".", "_get_image_path", "(", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "kp2ds", ",", "valid_mask_2d", ",", "valid_mask_3d", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "joint", "in", "enumerate", "(", "self", ".", "annots", "[", "img_name", "]", "[", "0", "]", ")", ":", "\n", "                ", "joint", "=", "joint", "[", "self", ".", "kp2d_mapper", "]", "\n", "joint", "[", "self", ".", "kp2d_mapper", "==", "-", "1", "]", "=", "-", "2", "\n", "kp2ds", ".", "append", "(", "joint", ")", "\n", "valid_mask_2d", ".", "append", "(", "[", "True", ",", "True", ",", "False", "]", ")", "\n", "valid_mask_3d", ".", "append", "(", "self", ".", "default_valid_mask_3d", ")", "\n", "\n", "", "kp2ds", ",", "track_ids", "=", "np", ".", "array", "(", "kp2ds", ")", ",", "np", ".", "array", "(", "self", ".", "annots", "[", "img_name", "]", "[", "1", "]", ")", "\n", "valid_mask_2d", ",", "valid_mask_3d", "=", "np", ".", "array", "(", "valid_mask_2d", ")", ",", "np", ".", "array", "(", "valid_mask_3d", ")", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "track_ids", ",", "'vmask_2d'", ":", "valid_mask_2d", ",", "'vmask_3d'", ":", "valid_mask_3d", ",", "'kp3ds'", ":", "None", ",", "'params'", ":", "None", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'posetrack'", "}", "\n", "\n", "return", "img_info", "\n", "\n", "", "def", "pack_annots", "(", "self", ",", ")", ":", "\n", "            ", "print", "(", "'Packing annotations of posetrack2021 dataset'", ")", "\n", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "annots", ",", "sequence_dict", ",", "person_ids", ",", "id_cache", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "0", "\n", "annots_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'annotations'", ",", "self", ".", "split", ")", "\n", "for", "annot_path", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "annots_dir", ",", "'*.json'", ")", ")", ":", "\n", "                ", "print", "(", "'Processing {}'", ".", "format", "(", "annot_path", ")", ")", "\n", "coco", "=", "COCO", "(", "annot_path", ")", "\n", "img_ids", "=", "coco", ".", "getImgIds", "(", ")", "\n", "dropped_frame_ids", "=", "[", "]", "\n", "for", "index", ",", "img_id", "in", "enumerate", "(", "img_ids", ")", ":", "\n", "                    ", "file_name", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "video_name", "=", "file_name", ".", "split", "(", "'/'", ")", "[", "2", "]", "\n", "frame_id", "=", "int", "(", "file_name", ".", "split", "(", "'/'", ")", "[", "3", "]", ".", "replace", "(", "'.jpg'", ",", "''", ")", ")", "\n", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ",", "iscrowd", "=", "None", ")", "\n", "annot", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "joints", ",", "track_ids", "=", "self", ".", "get_joints_ids", "(", "annot", ")", "\n", "if", "len", "(", "joints", ")", "==", "0", ":", "# video_name in sequences_with_duplicted_identites or ", "\n", "                        ", "dropped_frame_ids", ".", "append", "(", "frame_id", ")", "\n", "continue", "\n", "\n", "", "if", "video_name", "not", "in", "sequence_dict", ":", "\n", "                        ", "sequence_dict", "[", "video_name", "]", ",", "person_ids", "[", "video_name", "]", "=", "[", "]", ",", "{", "}", "\n", "", "sequence_dict", "[", "video_name", "]", ".", "append", "(", "frame_id", ")", "\n", "img_person_ids", "=", "[", "]", "\n", "for", "track_id", "in", "track_ids", ":", "\n", "                        ", "if", "track_id", "not", "in", "person_ids", "[", "video_name", "]", ":", "\n", "                            ", "person_ids", "[", "video_name", "]", "[", "track_id", "]", "=", "id_cache", "\n", "id_cache", "+=", "1", "\n", "", "person_id", "=", "person_ids", "[", "video_name", "]", "[", "track_id", "]", "\n", "img_person_ids", ".", "append", "(", "person_id", ")", "\n", "", "annots", "[", "file_name", "]", "=", "[", "joints", ",", "np", ".", "array", "(", "img_person_ids", ")", "]", "\n", "if", "index", "%", "1000", "==", "0", ":", "\n", "                        ", "print", "(", "'Processing {}/{}'", ".", "format", "(", "index", ",", "len", "(", "img_ids", ")", ")", ")", "\n", "", "", "print", "(", "'Dropping sequence {}, frames {}'", ".", "format", "(", "video_name", ",", "dropped_frame_ids", ")", ")", "\n", "\n", "", "for", "video_name", "in", "sequence_dict", ":", "\n", "                ", "sequence_dict", "[", "video_name", "]", "=", "sorted", "(", "sequence_dict", "[", "video_name", "]", ")", "\n", "#print(video_name,sequence_dict[video_name])", "\n", "", "np", ".", "savez", "(", "self", ".", "annots_file_path", ",", "annot", "=", "annots", ",", "sequence_dict", "=", "sequence_dict", ",", "person_ids", "=", "{", "'map_dict'", ":", "person_ids", ",", "'id_number'", ":", "id_cache", "}", ")", "\n", "print", "(", "'Saving annotations to {}'", ".", "format", "(", "self", ".", "annots_file_path", ")", ")", "\n", "return", "annots", ",", "id_cache", ",", "sequence_dict", "\n", "\n", "", "def", "_get_image_path", "(", "self", ",", "file_name", ")", ":", "\n", "            ", "images_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "file_name", ")", "\n", "return", "images_dir", "\n", "\n", "", "def", "get_annot", "(", "self", ",", "index", ")", ":", "\n", "            ", "coco", "=", "self", ".", "coco", "\n", "img_id", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "target", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "\n", "file_name", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "self", ".", "_get_image_path", "(", "file_name", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", "|", "cv2", ".", "IMREAD_IGNORE_ORIENTATION", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "return", "img", ",", "target", ",", "self", ".", "_get_image_path", "(", "file_name", ")", "\n", "\n", "", "def", "get_joints_ids", "(", "self", ",", "anno", ")", ":", "\n", "            ", "num_people", "=", "len", "(", "anno", ")", "\n", "joints", ",", "track_ids", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "anno", ")", ":", "\n", "                ", "joint", "=", "np", ".", "array", "(", "obj", "[", "'keypoints'", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "track_id", "=", "obj", "[", "'track_id'", "]", "\n", "if", "joint", "[", ":", ",", "-", "1", "]", ".", "sum", "(", ")", "<", "self", ".", "min_pts_required", ":", "\n", "                    ", "continue", "\n", "", "joints", ".", "append", "(", "joint", ")", "\n", "track_ids", ".", "append", "(", "track_id", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "joints", ")", ",", "track_ids", "\n", "", "", "return", "Posetrack", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.__init__": [[41, 97], ["torch.utils.data.Dataset.__init__", "numpy.tan", "numpy.array", "len", "maps_utils.centermap.CenterMap", "config.args", "os.path.isdir", "config.args", "config.args", "config.args", "config.args", "config.args", "config.args", "numpy.radians", "config.args", "list", "config.args", "constants.joint_mapping", "HeatmapGenerator", "config.args", "constants.joint_mapping", "JointsGenerator", "config.args", "torchvision.transforms.ColorJitter", "config.args", "config.args", "constants.SMPL_ALL_54.keys", "len", "len", "config.args", "range", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "regress_smpl", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Image_base", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_folder", "=", "args", "(", ")", ".", "dataset_rootdir", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "data_folder", ")", ":", "\n", "            ", "self", ".", "data_folder", "=", "'/home/yusun/data_drive/dataset'", "\n", "", "self", ".", "scale_range", "=", "[", "1.2", ",", "2.4", "]", "\n", "self", ".", "half_prob", "=", "0.12", "\n", "self", ".", "noise", "=", "0.2", "\n", "self", ".", "vis_thresh", "=", "0.03", "\n", "self", ".", "channels_mix", "=", "False", "\n", "self", ".", "ID_num", "=", "0", "\n", "self", ".", "min_vis_pts", "=", "2", "\n", "\n", "self", ".", "max_person", "=", "args", "(", ")", ".", "max_person", "\n", "self", ".", "multi_mode", "=", "args", "(", ")", ".", "multi_person", "\n", "self", ".", "use_eft", "=", "args", "(", ")", ".", "use_eft", "\n", "\n", "self", ".", "depth_degree_thresh", "=", "[", "0.36", ",", "0.18", ",", "0", "]", "\n", "self", ".", "regress_smpl", "=", "regress_smpl", "\n", "self", ".", "invalid_cam_ds", "=", "[", "'coco'", ",", "'lsp'", ",", "'mpii'", ",", "'up'", ",", "'cmup'", "]", "# ", "\n", "\n", "self", ".", "homogenize_pose_space", "=", "False", "\n", "if", "train_flag", ":", "\n", "            ", "self", ".", "homogenize_pose_space", "=", "args", "(", ")", ".", "homogenize_pose_space", "\n", "#if args().Synthetic_occlusion_ratio>0:", "\n", "#    self.synthetic_occlusion = Synthetic_occlusion(args().voc_dir)", "\n", "if", "args", "(", ")", ".", "color_jittering_ratio", ">", "0", ":", "\n", "                ", "self", ".", "color_jittering", "=", "torchvision", ".", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.1", ",", "contrast", "=", "0.1", ",", "saturation", "=", "0.1", ",", "hue", "=", "0", ")", "\n", "\n", "# only shuffle some 3D pose datasets, such as h36m and mpi-inf-3Dhp", "\n", "", "", "self", ".", "shuffle_mode", "=", "args", "(", ")", ".", "shuffle_crop_mode", "\n", "self", ".", "shuffle_ratio", "=", "args", "(", ")", ".", "shuffle_crop_ratio_2d", "\n", "self", ".", "train_flag", "=", "train_flag", "\n", "\n", "self", ".", "input_shape", "=", "[", "args", "(", ")", ".", "input_size", ",", "args", "(", ")", ".", "input_size", "]", "\n", "self", ".", "vis_size", "=", "args", "(", ")", ".", "input_size", "\n", "self", ".", "labels", ",", "self", ".", "images", ",", "self", ".", "file_paths", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "self", ".", "fov_tan_itw", "=", "np", ".", "tan", "(", "np", ".", "radians", "(", "args", "(", ")", ".", "FOV", "/", "2.", ")", ")", "\n", "self", ".", "focal_length", "=", "args", "(", ")", ".", "focal_length", "\n", "\n", "self", ".", "root_inds", "=", "[", "constants", ".", "SMPL_ALL_54", "[", "'R_Hip'", "]", ",", "constants", ".", "SMPL_ALL_54", "[", "'L_Hip'", "]", "]", "\n", "self", ".", "neck_idx", ",", "self", ".", "pelvis_idx", "=", "1", ",", "8", "\n", "self", ".", "torso_ids", "=", "[", "constants", ".", "SMPL_ALL_54", "[", "part", "]", "for", "part", "in", "[", "'Neck'", ",", "'Neck_LSP'", ",", "'R_Shoulder'", ",", "'L_Shoulder'", ",", "'Pelvis'", ",", "'R_Hip'", ",", "'L_Hip'", "]", "]", "\n", "self", ".", "phase", "=", "'train'", "if", "self", ".", "train_flag", "else", "'test'", "\n", "self", ".", "default_valid_mask_3d", "=", "np", ".", "array", "(", "[", "False", "for", "_", "in", "range", "(", "6", ")", "]", ")", "\n", "self", ".", "heatmap_res", "=", "128", "\n", "self", ".", "joint_number", "=", "len", "(", "list", "(", "constants", ".", "SMPL_ALL_54", ".", "keys", "(", ")", ")", ")", "\n", "\n", "if", "args", "(", ")", ".", "learn_2dpose", ":", "\n", "            ", "self", ".", "heatmap_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_ALL_54", ",", "constants", ".", "COCO_17", ")", "\n", "self", ".", "heatmap_generator", "=", "HeatmapGenerator", "(", "self", ".", "heatmap_res", ",", "len", "(", "self", ".", "heatmap_mapper", ")", ")", "\n", "", "if", "args", "(", ")", ".", "learn_AE", ":", "\n", "            ", "self", ".", "heatmap_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_ALL_54", ",", "constants", ".", "COCO_17", ")", "\n", "self", ".", "joint_generator", "=", "JointsGenerator", "(", "self", ".", "max_person", ",", "len", "(", "self", ".", "heatmap_mapper", ")", ",", "128", ",", "True", ")", "\n", "", "self", ".", "CM", "=", "CenterMap", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_item_single_frame": [[98, 168], ["numpy.zeros", "image_base.Image_base.get_image_info", "image_base.Image_base._calc_augment_confs", "utils.augments.process_image", "image_base.Image_base.process_kp2ds_bboxes", "image_base.Image_base.process_suject_ids", "image_base.Image_base.prepare_image", "image_base.Image_base.process_kp3ds", "image_base.Image_base.process_smpl_params", "image_base.Image_base.process_verts", "image_base.Image_base.add_cam_parameters", "numpy.array", "numpy.array", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "centermap.float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().bool", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.Tensor().bool", "torch.Tensor().float", "config.args", "image_base.Image_base.update", "config.args", "image_base.Image_base.update", "config.args", "image_base.Image_base._calc_normed_cam_params_", "image_base.Image_base.generate_centermap_3d", "image_base.Image_base.update", "config.args", "image_base.Image_base.update", "image_base.Image_base.update", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.from_numpy().float", "torch.from_numpy().long", "centermap_3d.float", "torch.Tensor().bool", "torch.zeros().float", "torch.Tensor", "torch.ones().long", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_image_info", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._calc_augment_confs", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.process_image", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_kp2ds_bboxes", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_suject_ids", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.prepare_image", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_kp3ds", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_smpl_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_verts", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.add_cam_parameters", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._calc_normed_cam_params_", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.generate_centermap_3d", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update"], ["", "def", "get_item_single_frame", "(", "self", ",", "index", ")", ":", "\n", "# valid annotation flags for ", "\n", "# 0: 2D pose/bounding box(True/False), # detecting all person/front-view person(True/False)", "\n", "# 1: 3D pose, 2: subject id, 3: smpl root rot, 4: smpl pose param, 5: smpl shape param, 6: verts, 7:depth", "\n", "        ", "valid_masks", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_person", ",", "8", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "info", "=", "self", ".", "get_image_info", "(", "index", ")", "\n", "\n", "position_augments", ",", "pixel_augments", "=", "self", ".", "_calc_augment_confs", "(", "info", "[", "'image'", "]", ",", "info", "[", "'kp2ds'", "]", ",", "is_pose2d", "=", "info", "[", "'vmask_2d'", "]", "[", ":", ",", "0", "]", ")", "\n", "\n", "img_info", "=", "process_image", "(", "info", "[", "'image'", "]", ",", "info", "[", "'kp2ds'", "]", ",", "augments", "=", "position_augments", ",", "is_pose2d", "=", "info", "[", "'vmask_2d'", "]", "[", ":", ",", "0", "]", ")", "\n", "image", ",", "image_wbg", ",", "full_kps", ",", "offsets", "=", "img_info", "\n", "centermap", ",", "person_centers", ",", "full_kp2ds", ",", "used_person_inds", ",", "valid_masks", "[", ":", ",", "0", "]", ",", "bboxes_hw_norm", ",", "heatmap", ",", "AE_joints", "=", "self", ".", "process_kp2ds_bboxes", "(", "full_kps", ",", "img_shape", "=", "image", ".", "shape", ",", "is_pose2d", "=", "info", "[", "'vmask_2d'", "]", "[", ":", ",", "0", "]", ")", "\n", "\n", "all_person_detected_mask", "=", "info", "[", "'vmask_2d'", "]", "[", "0", ",", "2", "]", "\n", "subject_ids", ",", "valid_masks", "[", ":", ",", "2", "]", "=", "self", ".", "process_suject_ids", "(", "info", "[", "'track_ids'", "]", ",", "used_person_inds", ",", "valid_mask_ids", "=", "info", "[", "'vmask_2d'", "]", "[", ":", ",", "1", "]", ")", "\n", "image", ",", "dst_image", ",", "org_image", "=", "self", ".", "prepare_image", "(", "image", ",", "image_wbg", ",", "augments", "=", "pixel_augments", ")", "\n", "\n", "# valid mask of 3D pose, smpl root rot, smpl pose param, smpl shape param, global translation", "\n", "kp3d", ",", "valid_masks", "[", ":", ",", "1", "]", "=", "self", ".", "process_kp3ds", "(", "info", "[", "'kp3ds'", "]", ",", "used_person_inds", ",", "augments", "=", "position_augments", ",", "valid_mask_kp3ds", "=", "info", "[", "'vmask_3d'", "]", "[", ":", ",", "0", "]", ")", "\n", "params", ",", "valid_masks", "[", ":", ",", "3", ":", "6", "]", "=", "self", ".", "process_smpl_params", "(", "info", "[", "'params'", "]", ",", "used_person_inds", ",", "augments", "=", "position_augments", ",", "valid_mask_smpl", "=", "info", "[", "'vmask_3d'", "]", "[", ":", ",", "1", ":", "4", "]", ")", "\n", "verts_processed", ",", "valid_masks", "[", ":", ",", "6", "]", ",", "root_trans_processed", ",", "valid_masks", "[", ":", ",", "7", "]", "=", "self", ".", "process_verts", "(", "info", "[", "'verts'", "]", ",", "info", "[", "'root_trans'", "]", ",", "used_person_inds", ",", "augments", "=", "position_augments", ",", "valid_mask_verts", "=", "info", "[", "'vmask_3d'", "]", "[", ":", ",", "4", "]", ",", "valid_mask_depth", "=", "info", "[", "'vmask_3d'", "]", "[", ":", ",", "5", "]", ")", "\n", "\n", "rot_flip", "=", "np", ".", "array", "(", "[", "position_augments", "[", "0", "]", ",", "position_augments", "[", "1", "]", "]", ")", "if", "position_augments", "is", "not", "None", "else", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "input_data", "=", "{", "\n", "'image'", ":", "torch", ".", "from_numpy", "(", "dst_image", ")", ".", "float", "(", ")", ",", "\n", "'image_org'", ":", "torch", ".", "from_numpy", "(", "org_image", ")", ",", "\n", "'full_kp2d'", ":", "torch", ".", "from_numpy", "(", "full_kp2ds", ")", ".", "float", "(", ")", ",", "\n", "'person_centers'", ":", "torch", ".", "from_numpy", "(", "person_centers", ")", ".", "float", "(", ")", ",", "\n", "'subject_ids'", ":", "torch", ".", "from_numpy", "(", "subject_ids", ")", ".", "long", "(", ")", ",", "\n", "'centermap'", ":", "centermap", ".", "float", "(", ")", ",", "\n", "'kp_3d'", ":", "torch", ".", "from_numpy", "(", "kp3d", ")", ".", "float", "(", ")", ",", "\n", "'verts'", ":", "torch", ".", "from_numpy", "(", "verts_processed", ")", ".", "float", "(", ")", ",", "\n", "'params'", ":", "torch", ".", "from_numpy", "(", "params", ")", ".", "float", "(", ")", ",", "\n", "'valid_masks'", ":", "torch", ".", "from_numpy", "(", "valid_masks", ")", ".", "bool", "(", ")", ",", "\n", "'root_trans'", ":", "torch", ".", "from_numpy", "(", "root_trans_processed", ")", ".", "float", "(", ")", ",", "\n", "'offsets'", ":", "torch", ".", "from_numpy", "(", "offsets", ")", ".", "float", "(", ")", ",", "\n", "'rot_flip'", ":", "torch", ".", "from_numpy", "(", "rot_flip", ")", ".", "float", "(", ")", ",", "\n", "'all_person_detected_mask'", ":", "torch", ".", "Tensor", "(", "[", "all_person_detected_mask", "]", ")", ".", "bool", "(", ")", ",", "\n", "'imgpath'", ":", "info", "[", "'imgpath'", "]", ",", "\n", "'data_set'", ":", "info", "[", "'ds'", "]", "}", "\n", "\n", "input_data", "=", "self", ".", "add_cam_parameters", "(", "input_data", ",", "info", ")", "\n", "\n", "if", "self", ".", "train_flag", ":", "\n", "            ", "img_scale", "=", "1", "if", "position_augments", "is", "None", "else", "position_augments", "[", "3", "]", "\n", "input_data", "[", "'img_scale'", "]", "=", "torch", ".", "Tensor", "(", "[", "img_scale", "]", ")", ".", "float", "(", ")", "\n", "\n", "", "if", "args", "(", ")", ".", "learn_2dpose", ":", "\n", "            ", "input_data", ".", "update", "(", "{", "'heatmap'", ":", "torch", ".", "from_numpy", "(", "heatmap", ")", ".", "float", "(", ")", "}", ")", "\n", "", "if", "args", "(", ")", ".", "learn_AE", ":", "\n", "            ", "input_data", ".", "update", "(", "{", "'AE_joints'", ":", "torch", ".", "from_numpy", "(", "AE_joints", ")", ".", "long", "(", ")", "}", ")", "\n", "\n", "", "if", "args", "(", ")", ".", "perspective_proj", ":", "\n", "            ", "root_trans", ",", "cam_params", ",", "cam_mask", "=", "self", ".", "_calc_normed_cam_params_", "(", "full_kp2ds", ",", "kp3d", ",", "valid_masks", "[", ":", ",", "1", "]", ",", "info", "[", "'ds'", "]", ")", "\n", "centermap_3d", ",", "valid_centermap3d_mask", "=", "self", ".", "generate_centermap_3d", "(", "person_centers", ",", "cam_params", ",", "cam_mask", ",", "bboxes_hw_norm", ",", "all_person_detected_mask", ")", "\n", "input_data", ".", "update", "(", "{", "'cams'", ":", "cam_params", ",", "'cam_mask'", ":", "cam_mask", ",", "'root_trans_cam'", ":", "root_trans", ",", "'centermap_3d'", ":", "centermap_3d", ".", "float", "(", ")", ",", "'valid_centermap3d_mask'", ":", "torch", ".", "Tensor", "(", "[", "valid_centermap3d_mask", "]", ")", ".", "bool", "(", ")", "}", ")", "\n", "\n", "", "if", "args", "(", ")", ".", "learn_relative", ":", "\n", "            ", "input_data", ".", "update", "(", "{", "'depth_info'", ":", "torch", ".", "ones", "(", "self", ".", "max_person", ",", "4", ")", ".", "long", "(", ")", "*", "-", "1", ",", "'kid_shape_offsets'", ":", "torch", ".", "zeros", "(", "self", ".", "max_person", ")", ".", "float", "(", ")", "}", ")", "\n", "#print_data_shape(input_data)", "\n", "\n", "", "if", "'seq_info'", "in", "info", ":", "\n", "            ", "input_data", ".", "update", "(", "{", "'seq_info'", ":", "torch", ".", "Tensor", "(", "info", "[", "'seq_info'", "]", ")", "}", ")", "\n", "", "return", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._calc_augment_confs": [[169, 212], ["random.randint", "random.random", "numpy.array", "numpy.concatenate", "random.random", "random.random", "random.random", "random.random", "numpy.random.randint", "random.sample", "is_pose2d[].sum", "[].reshape", "numpy.concatenate.append", "[].reshape", "numpy.concatenate.append", "len", "utils.augments.calc_aabb", "utils.augments.get_image_cut_box", "utils.augments.convert_bbox2scale", "config.args", "config.args", "config.args", "numpy.random.rand", "len", "list", "numpy.clip", "numpy.clip", "range", "len", "numpy.where", "numpy.array", "numpy.where", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.calc_aabb", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.get_image_cut_box", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.convert_bbox2scale", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "_calc_augment_confs", "(", "self", ",", "image", ",", "full_kp2ds", ",", "is_pose2d", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "train_flag", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "color_jitter", "=", "True", "if", "random", ".", "random", "(", ")", "<", "args", "(", ")", ".", "color_jittering_ratio", "else", "False", "\n", "syn_occlusion", "=", "True", "if", "random", ".", "random", "(", ")", "<", "args", "(", ")", ".", "Synthetic_occlusion_ratio", "else", "False", "\n", "\n", "flip", "=", "True", "if", "random", ".", "random", "(", ")", "<", "0.5", "else", "False", "\n", "rot", "=", "random", ".", "randint", "(", "-", "30", ",", "30", ")", "if", "random", ".", "random", "(", ")", "<", "args", "(", ")", ".", "rotate_prob", "else", "0", "\n", "\n", "crop_bbox", ",", "img_scale", "=", "None", ",", "1", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "shuffle_ratio", ":", "\n", "            ", "scale", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "self", ".", "scale_range", "[", "1", "]", "-", "self", ".", "scale_range", "[", "0", "]", ")", "+", "self", ".", "scale_range", "[", "0", "]", "\n", "\n", "crop_person_number", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "is_pose2d", ")", ")", "+", "1", "\n", "sample_ids", "=", "np", ".", "array", "(", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "full_kp2ds", ")", ")", ")", ",", "crop_person_number", ")", ")", "\n", "\n", "bboxes", "=", "[", "]", "\n", "if", "is_pose2d", "[", "sample_ids", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "sample_ids", "=", "sample_ids", "[", "np", ".", "where", "(", "is_pose2d", "[", "sample_ids", "]", ")", "[", "0", "]", "]", "\n", "xys", "=", "np", ".", "array", "(", "[", "full_kp2ds", "[", "ind", "]", "for", "ind", "in", "sample_ids", "]", ")", "[", ":", ",", ":", ",", ":", "2", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "valid_xys", "=", "(", "xys", "!=", "-", "2.", ")", ".", "sum", "(", "-", "1", ")", "==", "2", "\n", "xys", "=", "xys", "[", "valid_xys", "]", "\n", "bboxes", ".", "append", "(", "xys", ")", "\n", "# if crop_person_number==0 and len(full_kp2ds) and random.random()<0.1", "\n", "# TODO: crop image area that doesn't contain person. ", "\n", "", "if", "(", "~", "is_pose2d", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "sample_ids", "=", "sample_ids", "[", "np", ".", "where", "(", "~", "is_pose2d", "[", "sample_ids", "]", ")", "[", "0", "]", "]", "\n", "vboxes", "=", "np", ".", "array", "(", "[", "full_kp2ds", "[", "ind", "]", "for", "ind", "in", "sample_ids", "]", ")", "[", "2", ":", "]", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "bboxes", ".", "append", "(", "vboxes", ")", "\n", "", "bboxes", "=", "np", ".", "concatenate", "(", "bboxes", ",", "0", ")", "\n", "if", "len", "(", "bboxes", ")", ">", "0", ":", "\n", "                ", "height", ",", "width", "=", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", "\n", "box", "=", "calc_aabb", "(", "bboxes", ")", "\n", "leftTop", ",", "rightBottom", "=", "np", ".", "clip", "(", "box", "[", "0", "]", ",", "0", ",", "width", ")", ",", "np", ".", "clip", "(", "box", "[", "1", "]", ",", "0", ",", "height", ")", "\n", "[", "l", ",", "t", "]", ",", "[", "r", ",", "b", "]", "=", "get_image_cut_box", "(", "leftTop", ",", "rightBottom", ",", "scale", ",", "force_square", "=", "True", ")", "\n", "crop_bbox", "=", "(", "l", ",", "t", ",", "r", ",", "b", ")", "\n", "img_scale", "=", "convert_bbox2scale", "(", "crop_bbox", ",", "self", ".", "input_shape", ")", "\n", "\n", "", "", "position_augments", "=", "(", "rot", ",", "flip", ",", "crop_bbox", ",", "img_scale", ")", "\n", "\n", "pixel_augments", "=", "(", "color_jitter", ",", "syn_occlusion", ")", "\n", "return", "position_augments", ",", "pixel_augments", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_kps": [[213, 229], ["kps.astype.astype.astype", "float", "float", "enumerate", "image_base._check_upper_bound_lower_bound_"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base._check_upper_bound_lower_bound_"], ["", "def", "process_kps", "(", "self", ",", "kps", ",", "img_size", ",", "set_minus", "=", "True", ")", ":", "\n", "        ", "kps", "=", "kps", ".", "astype", "(", "np", ".", "float32", ")", "\n", "kps", "[", ":", ",", "0", "]", "=", "kps", "[", ":", ",", "0", "]", "/", "float", "(", "img_size", "[", "1", "]", ")", "\n", "kps", "[", ":", ",", "1", "]", "=", "kps", "[", ":", ",", "1", "]", "/", "float", "(", "img_size", "[", "0", "]", ")", "\n", "kps", "[", ":", ",", ":", "2", "]", "=", "2.0", "*", "kps", "[", ":", ",", ":", "2", "]", "-", "1.0", "\n", "\n", "if", "set_minus", ":", "\n", "            ", "if", "kps", ".", "shape", "[", "1", "]", ">", "2", ":", "\n", "                ", "kps", "[", "kps", "[", ":", ",", "2", "]", "<=", "self", ".", "vis_thresh", "]", "=", "-", "2.", "\n", "", "kps", "=", "kps", "[", ":", ",", ":", "2", "]", "\n", "for", "inds", ",", "kp", "in", "enumerate", "(", "kps", ")", ":", "\n", "# set the out-of-region points to -2.", "\n", "                ", "if", "not", "_check_upper_bound_lower_bound_", "(", "kp", ",", "ub", "=", "1", ",", "lb", "=", "-", "1", ")", ":", "\n", "                    ", "kps", "[", "inds", "]", "=", "-", "2.", "\n", "\n", "", "", "", "return", "kps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.generate_centermap_3d": [[230, 238], ["len", "utils.cam_utils.convert_scale_to_depth_level().numpy", "utils.center_utils.denormalize_center", "numpy.concatenate", "image_base.Image_base.CM.generate_centermap_3dheatmap_adaptive_scale", "utils.center_utils.denormalize_center.copy", "utils.cam_utils.convert_scale_to_depth_level", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.denormalize_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap_3dheatmap_adaptive_scale", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.convert_scale_to_depth_level", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "generate_centermap_3d", "(", "self", ",", "person_centers", ",", "cam_params", ",", "cam_mask", ",", "bboxes_hw_norm", ",", "all_person_detected_mask", ")", ":", "\n", "        ", "valid_pc_yx", ",", "valid_scale", "=", "person_centers", "[", "cam_mask", "]", ",", "cam_params", "[", "cam_mask", ",", "0", "]", "\n", "person_num", "=", "len", "(", "bboxes_hw_norm", ")", "\n", "valid_pc_z", "=", "convert_scale_to_depth_level", "(", "valid_scale", ")", ".", "numpy", "(", ")", "\n", "valid_pc_yx", "=", "denormalize_center", "(", "valid_pc_yx", ".", "copy", "(", ")", ",", "args", "(", ")", ".", "centermap_size", ")", "\n", "valid_pc_zyx", "=", "np", ".", "concatenate", "(", "[", "valid_pc_z", "[", ":", ",", "None", "]", ",", "valid_pc_yx", "]", ",", "1", ")", "\n", "centermap_3d", ",", "valid_centermap3d_mask", "=", "self", ".", "CM", ".", "generate_centermap_3dheatmap_adaptive_scale", "(", "valid_pc_zyx", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ")", "\n", "return", "centermap_3d", ",", "valid_centermap3d_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps": [[239, 243], ["joint_org[].copy"], "methods", ["None"], ["", "def", "map_kps", "(", "self", ",", "joint_org", ",", "maps", "=", "None", ")", ":", "\n", "        ", "kps", "=", "joint_org", "[", "maps", "]", ".", "copy", "(", ")", "\n", "kps", "[", "maps", "==", "-", "1", "]", "=", "-", "2.", "\n", "return", "kps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.parse_multiperson_kp2ds": [[244, 263], ["image_base._calc_bbox_normed", "range", "image_base.Image_base.generate_heatmap_AEmap", "min", "image_base.Image_base._calc_center_", "person_centers.append", "full_kp2ds.append", "bboxes_hw_norm.append", "used_person_inds.append", "numpy.array", "numpy.array", "image_base.detect_occluded_person", "config.args", "config.args", "numpy.zeros", "numpy.zeros", "len", "config.args", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base._calc_bbox_normed", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.generate_heatmap_AEmap", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._calc_center_", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.detect_occluded_person", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "parse_multiperson_kp2ds", "(", "self", ",", "full_kps", ")", ":", "\n", "        ", "bboxes_normalized", "=", "_calc_bbox_normed", "(", "full_kps", ")", "\n", "if", "args", "(", ")", ".", "learn_2dpose", "or", "args", "(", ")", ".", "learn_AE", ":", "\n", "            ", "heatmap", ",", "AE_joints", "=", "self", ".", "generate_heatmap_AEmap", "(", "full_kps", ")", "\n", "", "else", ":", "\n", "            ", "heatmap", ",", "AE_joints", "=", "np", ".", "zeros", "(", "(", "17", ",", "128", ",", "128", ")", ")", ",", "np", ".", "zeros", "(", "(", "self", ".", "max_person", ",", "17", ",", "2", ")", ")", "\n", "", "person_centers", ",", "full_kp2ds", ",", "bboxes_hw_norm", ",", "used_person_inds", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "inds", "in", "range", "(", "min", "(", "len", "(", "full_kps", ")", ",", "self", ".", "max_person", ")", ")", ":", "\n", "            ", "center", "=", "self", ".", "_calc_center_", "(", "full_kps", "[", "inds", "]", ")", "\n", "if", "center", "is", "None", "or", "len", "(", "center", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "person_centers", ".", "append", "(", "center", ")", "\n", "full_kp2ds", ".", "append", "(", "full_kps", "[", "inds", "]", ")", "\n", "bboxes_hw_norm", ".", "append", "(", "(", "bboxes_normalized", "[", "inds", "]", "[", "1", "]", "-", "bboxes_normalized", "[", "inds", "]", "[", "0", "]", ")", "[", ":", ":", "-", "1", "]", ")", "\n", "used_person_inds", ".", "append", "(", "inds", ")", "\n", "\n", "", "person_centers", ",", "full_kp2ds", "=", "np", ".", "array", "(", "person_centers", ")", ",", "np", ".", "array", "(", "full_kp2ds", ")", "\n", "occluded_by_who", "=", "detect_occluded_person", "(", "person_centers", ",", "full_kp2ds", ")", "if", "args", "(", ")", ".", "collision_aware_centermap", "else", "None", "\n", "return", "person_centers", ",", "full_kp2ds", ",", "used_person_inds", ",", "bboxes_hw_norm", ",", "occluded_by_who", ",", "heatmap", ",", "AE_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.parse_bboxes": [[264, 284], ["numpy.stack", "numpy.stack", "enumerate", "zip", "len", "image_base._check_upper_bound_lower_bound_", "person_centers.append", "bboxes_hw_norm.append", "used_person_inds.append", "image_base._check_upper_bound_lower_bound_", "person_centers.append", "bboxes_hw_norm.append", "used_person_inds.append"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base._check_upper_bound_lower_bound_", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base._check_upper_bound_lower_bound_"], ["", "def", "parse_bboxes", "(", "self", ",", "full_kps", ",", "hw_ratio_thresh", "=", "0.8", ")", ":", "\n", "        ", "person_centers", ",", "bboxes_hw_norm", ",", "used_person_inds", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "fbox", ",", "vbox", "=", "full_kps", "[", ":", ",", ":", "2", "]", ",", "full_kps", "[", ":", ",", "2", ":", "]", "\n", "fwh", ",", "vwh", "=", "fbox", "[", ":", ",", "1", "]", "-", "fbox", "[", ":", ",", "0", "]", ",", "vbox", "[", ":", ",", "1", "]", "-", "vbox", "[", ":", ",", "0", "]", "\n", "fhw_ratios", ",", "vhw_ratios", "=", "fwh", "[", ":", ",", "1", "]", "/", "(", "fwh", "[", ":", ",", "0", "]", "+", "1e-4", ")", ",", "vwh", "[", ":", ",", "1", "]", "/", "(", "vwh", "[", ":", ",", "0", "]", "+", "1e-4", ")", "\n", "fb_centers", "=", "np", ".", "stack", "(", "[", "0.5", "*", "fbox", "[", ":", ",", "0", ",", "0", "]", "+", "0.5", "*", "fbox", "[", ":", ",", "1", ",", "0", "]", ",", "0.7", "*", "fbox", "[", ":", ",", "0", ",", "1", "]", "+", "0.3", "*", "fbox", "[", ":", ",", "1", ",", "1", "]", "]", ",", "1", ")", "\n", "vb_centers", "=", "np", ".", "stack", "(", "[", "0.5", "*", "vbox", "[", ":", ",", "0", ",", "0", "]", "+", "0.5", "*", "vbox", "[", ":", ",", "1", ",", "0", "]", ",", "0.6", "*", "vbox", "[", ":", ",", "0", ",", "1", "]", "+", "0.4", "*", "vbox", "[", ":", ",", "1", ",", "1", "]", "]", ",", "1", ")", "\n", "for", "inds", ",", "(", "fhw_ratio", ",", "vhw_ratio", ")", "in", "enumerate", "(", "zip", "(", "fhw_ratios", ",", "vhw_ratios", ")", ")", ":", "\n", "            ", "if", "len", "(", "used_person_inds", ")", ">=", "self", ".", "max_person", ":", "\n", "                ", "continue", "\n", "", "if", "vhw_ratio", ">", "1.", "and", "_check_upper_bound_lower_bound_", "(", "fb_centers", "[", "inds", "]", ",", "ub", "=", "1", ",", "lb", "=", "-", "1", ")", ":", "\n", "                ", "person_centers", ".", "append", "(", "fb_centers", "[", "inds", "]", ")", "\n", "bboxes_hw_norm", ".", "append", "(", "fwh", "[", "inds", "]", "[", ":", ":", "-", "1", "]", ")", "\n", "used_person_inds", ".", "append", "(", "inds", ")", "\n", "", "elif", "_check_upper_bound_lower_bound_", "(", "vb_centers", "[", "inds", "]", ",", "ub", "=", "1", ",", "lb", "=", "-", "1", ")", ":", "\n", "                ", "person_centers", ".", "append", "(", "vb_centers", "[", "inds", "]", ")", "\n", "bboxes_hw_norm", ".", "append", "(", "vwh", "[", "inds", "]", "[", ":", ":", "-", "1", "]", ")", "\n", "used_person_inds", ".", "append", "(", "inds", ")", "\n", "\n", "", "", "return", "person_centers", ",", "bboxes_hw_norm", ",", "used_person_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_kp2ds_bboxes": [[285, 320], ["numpy.zeros", "image_base.Image_base.CM.generate_centermap", "person_centers[].copy", "numpy.ones", "numpy.ones", "is_pose2d.sum", "image_base.Image_base.parse_multiperson_kp2ds", "[].tolist", "numpy.array", "image_base.Image_base.parse_bboxes", "[].tolist", "max", "is_pose2d.sum", "image_base.Image_base.process_kps", "len", "min", "len", "len", "numpy.zeros", "numpy.zeros", "image_base.Image_base.process_kps", "len", "numpy.where", "len", "len", "numpy.where", "numpy.array", "len", "len", "len", "numpy.where", "numpy.where", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.parse_multiperson_kp2ds", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.parse_bboxes", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_kps"], ["", "def", "process_kp2ds_bboxes", "(", "self", ",", "full_kps", ",", "img_shape", "=", "None", ",", "is_pose2d", "=", "None", ")", ":", "\n", "        ", "person_centers", "=", "np", ".", "ones", "(", "(", "self", ".", "max_person", ",", "2", ")", ")", "*", "-", "2.", "\n", "full_kp2ds", "=", "np", ".", "ones", "(", "(", "self", ".", "max_person", ",", "self", ".", "joint_number", ",", "2", ")", ")", "*", "-", "2.", "\n", "valid_mask_kp2ds", "=", "np", ".", "zeros", "(", "self", ".", "max_person", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "used_person_inds", ",", "bboxes_hw_norm", ",", "occluded_by_who", "=", "[", "]", ",", "[", "]", ",", "None", "\n", "\n", "if", "is_pose2d", ".", "sum", "(", ")", ">", "0", ":", "\n", "# mask out the out-of-range subject because of getting cropped out from image area.", "\n", "            ", "full_kp2d", "=", "[", "self", ".", "process_kps", "(", "full_kps", "[", "ind", "]", ",", "img_shape", ",", "set_minus", "=", "True", ")", "for", "ind", "in", "np", ".", "where", "(", "is_pose2d", ")", "[", "0", "]", "]", "\n", "person_centers_kp2d", ",", "full_kp2ds_kp2d", ",", "mask_kp2d", ",", "bboxes_hw_norm_kp2d", ",", "occluded_by_who", ",", "heatmap", ",", "AE_joints", "=", "self", ".", "parse_multiperson_kp2ds", "(", "full_kp2d", ")", "\n", "mask_kp2d", "=", "np", ".", "where", "(", "is_pose2d", ")", "[", "0", "]", "[", "np", ".", "array", "(", "mask_kp2d", ",", "dtype", "=", "np", ".", "int32", ")", "]", ".", "tolist", "(", ")", "\n", "if", "len", "(", "mask_kp2d", ")", ">", "0", ":", "\n", "                ", "person_centers", "[", ":", "len", "(", "mask_kp2d", ")", "]", ",", "full_kp2ds", "[", ":", "len", "(", "mask_kp2d", ")", "]", ",", "valid_mask_kp2ds", "[", ":", "len", "(", "mask_kp2d", ")", "]", "=", "person_centers_kp2d", ",", "full_kp2ds_kp2d", ",", "True", "\n", "used_person_inds", "+=", "mask_kp2d", "\n", "bboxes_hw_norm", "+=", "bboxes_hw_norm_kp2d", "\n", "\n", "", "", "if", "(", "~", "is_pose2d", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "full_bboxes", "=", "np", ".", "array", "(", "[", "self", ".", "process_kps", "(", "full_kps", "[", "ind", "]", ",", "img_shape", ",", "set_minus", "=", "False", ")", "for", "ind", "in", "np", ".", "where", "(", "~", "is_pose2d", ")", "[", "0", "]", "]", ")", "\n", "person_centers_bbox", ",", "bboxes_hw_norm_bbox", ",", "mask_bbox", "=", "self", ".", "parse_bboxes", "(", "full_bboxes", ")", "\n", "mask_bbox", "=", "np", ".", "where", "(", "~", "is_pose2d", ")", "[", "0", "]", "[", "np", ".", "array", "(", "mask_bbox", ",", "dtype", "=", "np", ".", "int32", ")", "]", ".", "tolist", "(", ")", "\n", "left_num", "=", "max", "(", "0", ",", "min", "(", "self", ".", "max_person", "-", "len", "(", "used_person_inds", ")", ",", "len", "(", "mask_bbox", ")", ")", ")", "\n", "if", "left_num", "!=", "len", "(", "mask_bbox", ")", ":", "\n", "                ", "person_centers_bbox", ",", "bboxes_hw_norm_bbox", ",", "mask_bbox", "=", "person_centers_bbox", "[", ":", "left_num", "]", ",", "bboxes_hw_norm_bbox", "[", ":", "left_num", "]", ",", "mask_bbox", "[", ":", "left_num", "]", "\n", "", "if", "len", "(", "mask_bbox", ")", ">", "0", ":", "\n", "                ", "person_centers", "[", "len", "(", "used_person_inds", ")", ":", "len", "(", "used_person_inds", ")", "+", "left_num", "]", "=", "person_centers_bbox", "\n", "used_person_inds", "+=", "mask_bbox", "\n", "bboxes_hw_norm", "+=", "bboxes_hw_norm_bbox", "\n", "\n", "", "", "if", "is_pose2d", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "heatmap", ",", "AE_joints", "=", "np", ".", "zeros", "(", "(", "17", ",", "128", ",", "128", ")", ")", ",", "np", ".", "zeros", "(", "(", "self", ".", "max_person", ",", "17", ",", "2", ")", ")", "\n", "# person_centers changed after CAR processing", "\n", "", "centermap", "=", "self", ".", "CM", ".", "generate_centermap", "(", "person_centers", ",", "bboxes_hw_norm", "=", "bboxes_hw_norm", ",", "occluded_by_who", "=", "occluded_by_who", ")", "\n", "# rectify the x, y order, from x-y to y-x", "\n", "person_centers", "=", "person_centers", "[", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "return", "centermap", ",", "person_centers", ",", "full_kp2ds", ",", "used_person_inds", ",", "valid_mask_kp2ds", ",", "bboxes_hw_norm", ",", "heatmap", ",", "AE_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_suject_ids": [[321, 329], ["enumerate", "numpy.zeros", "numpy.ones"], "methods", ["None"], ["", "def", "process_suject_ids", "(", "self", ",", "subject_ids", ",", "used_person_inds", ",", "valid_mask_ids", "=", "False", ")", ":", "\n", "        ", "person_ids", ",", "valid_id_mask", "=", "np", ".", "ones", "(", "self", ".", "max_person", ")", "*", "-", "1", ",", "np", ".", "zeros", "(", "self", ".", "max_person", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "if", "subject_ids", "is", "None", ":", "\n", "            ", "return", "person_ids", ",", "valid_id_mask", "\n", "", "for", "inds", ",", "s_inds", "in", "enumerate", "(", "used_person_inds", ")", ":", "\n", "            ", "person_ids", "[", "inds", "]", "=", "subject_ids", "[", "s_inds", "]", "\n", "valid_id_mask", "[", "inds", "]", "=", "valid_mask_ids", "[", "s_inds", "]", "\n", "", "return", "person_ids", ",", "valid_id_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.prepare_image": [[330, 340], ["image_base.Image_base.aug_image", "cv2.resize", "cv2.resize", "tuple", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.aug_image"], ["", "def", "prepare_image", "(", "self", ",", "image", ",", "image_wbg", ",", "augments", "=", "None", ")", ":", "\n", "        ", "if", "augments", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "aug_image", "(", "image", ",", "augments", "[", "0", "]", ",", "augments", "[", "1", "]", ")", "\n", "", "try", ":", "\n", "            ", "dst_image", "=", "cv2", ".", "resize", "(", "image", ",", "tuple", "(", "self", ".", "input_shape", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "org_image", "=", "cv2", ".", "resize", "(", "image_wbg", ",", "(", "self", ".", "vis_size", ",", "self", ".", "vis_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "", "except", ":", "\n", "            ", "dst_image", "=", "np", ".", "zeros", "(", "(", "self", ".", "input_shape", "[", "0", "]", ",", "self", ".", "input_shape", "[", "1", "]", ",", "3", ")", ")", "\n", "org_image", "=", "np", ".", "zeros", "(", "(", "self", ".", "vis_size", ",", "self", ".", "vis_size", ",", "3", ")", ")", "\n", "", "return", "image", ",", "dst_image", ",", "org_image", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_kp3ds": [[341, 362], ["numpy.zeros", "enumerate", "numpy.ones", "image_base.Image_base._check_kp3d_visible_parts_", "kp3d[].mean", "utils.augments.rot_imgplane", "utils.augments.flip_kps"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._check_kp3d_visible_parts_", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.rot_imgplane", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.flip_kps"], ["", "def", "process_kp3ds", "(", "self", ",", "kp3ds", ",", "used_person_inds", ",", "augments", "=", "None", ",", "valid_mask_kp3ds", "=", "None", ")", ":", "\n", "        ", "kp3d_flag", "=", "np", ".", "zeros", "(", "self", ".", "max_person", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "joint_num", "=", "self", ".", "joint_number", "if", "self", ".", "train_flag", "or", "kp3ds", "is", "None", "else", "kp3ds", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "kp3d_processed", "=", "np", ".", "ones", "(", "(", "self", ".", "max_person", ",", "joint_num", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "-", "2.", "# -2 serves as an invisible flag", "\n", "\n", "for", "inds", ",", "used_id", "in", "enumerate", "(", "used_person_inds", ")", ":", "\n", "            ", "if", "valid_mask_kp3ds", "[", "used_id", "]", ":", "\n", "                ", "kp3d", ",", "kp3d_flag", "[", "inds", "]", "=", "kp3ds", "[", "used_id", "]", ",", "valid_mask_kp3ds", "[", "used_id", "]", "\n", "valid_mask", "=", "self", ".", "_check_kp3d_visible_parts_", "(", "kp3d", ")", "\n", "if", "self", ".", "root_inds", "is", "not", "None", ":", "\n", "                    ", "kp3d", "-=", "kp3d", "[", "self", ".", "root_inds", "]", ".", "mean", "(", "0", ")", "[", "None", "]", "\n", "", "if", "augments", "is", "not", "None", ":", "\n", "                    ", "if", "augments", "[", "0", "]", "!=", "0", ":", "\n", "                        ", "kp3d", "=", "rot_imgplane", "(", "kp3d", ",", "augments", "[", "0", "]", ")", "\n", "", "if", "augments", "[", "1", "]", ":", "\n", "                        ", "kp3d", "=", "flip_kps", "(", "kp3d", ",", "flipped_parts", "=", "constants", ".", "All54_flip", ")", "\n", "valid_mask", "=", "valid_mask", "[", "constants", ".", "All54_flip", "]", "\n", "", "", "kp3d", "[", "~", "valid_mask", "]", "=", "-", "2.", "\n", "kp3d_processed", "[", "inds", "]", "=", "kp3d", "\n", "\n", "", "", "return", "kp3d_processed", ",", "kp3d_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_smpl_params": [[363, 376], ["numpy.zeros", "enumerate", "numpy.ones", "valid_mask_smpl[].sum", "numpy.concatenate", "utils.augments.pose_processing"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.pose_processing"], ["", "def", "process_smpl_params", "(", "self", ",", "params", ",", "used_person_inds", ",", "augments", "=", "None", ",", "valid_mask_smpl", "=", "None", ")", ":", "\n", "        ", "params_processed", "=", "np", ".", "ones", "(", "(", "self", ".", "max_person", ",", "76", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "-", "10", "\n", "smpl_flag", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_person", ",", "3", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "for", "inds", ",", "used_id", "in", "enumerate", "(", "used_person_inds", ")", ":", "\n", "            ", "if", "valid_mask_smpl", "[", "used_id", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "param", ",", "smpl_flag", "[", "inds", "]", "=", "params", "[", "used_id", "]", ",", "valid_mask_smpl", "[", "used_id", "]", "\n", "theta", ",", "beta", "=", "param", "[", ":", "66", "]", ",", "param", "[", "-", "10", ":", "]", "\n", "if", "augments", "is", "not", "None", ":", "\n", "                    ", "theta", "=", "pose_processing", "(", "theta", ",", "augments", "[", "0", "]", ",", "augments", "[", "1", "]", ",", "valid_grot", "=", "smpl_flag", "[", "inds", ",", "0", "]", ",", "valid_pose", "=", "smpl_flag", "[", "inds", ",", "1", "]", ")", "\n", "", "params_processed", "[", "inds", "]", "=", "np", ".", "concatenate", "(", "[", "theta", ",", "beta", "]", ")", "\n", "\n", "", "", "return", "params_processed", ",", "smpl_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.process_verts": [[377, 398], ["numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.ones", "enumerate", "len", "len", "valid_mask_verts[].sum", "utils.augments.rot_imgplane"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.rot_imgplane"], ["", "def", "process_verts", "(", "self", ",", "verts", ",", "root_trans", ",", "used_person_inds", ",", "augments", "=", "None", ",", "valid_mask_verts", "=", "None", ",", "valid_mask_depth", "=", "None", ")", ":", "\n", "        ", "verts_processed", "=", "np", ".", "ones", "(", "(", "self", ".", "max_person", ",", "6890", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "-", "10", "\n", "verts_flag", "=", "np", ".", "zeros", "(", "self", ".", "max_person", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "root_trans_processed", "=", "np", ".", "ones", "(", "(", "self", ".", "max_person", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "-", "2", "\n", "depth_flag", "=", "np", ".", "zeros", "(", "self", ".", "max_person", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "if", "root_trans", "is", "not", "None", ":", "\n", "            ", "root_trans_processed", "[", ":", "len", "(", "used_person_inds", ")", "]", "=", "root_trans", "[", "used_person_inds", "]", "\n", "depth_flag", "[", ":", "len", "(", "used_person_inds", ")", "]", "=", "valid_mask_depth", "[", "used_person_inds", "]", "\n", "", "if", "verts", "is", "not", "None", ":", "\n", "            ", "for", "inds", ",", "used_id", "in", "enumerate", "(", "used_person_inds", ")", ":", "\n", "                ", "if", "valid_mask_verts", "[", "used_id", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "vert", "=", "verts", "[", "used_id", "]", "# - np.expand_dims(root_trans[used_id], axis=0)", "\n", "if", "augments", "is", "not", "None", ":", "\n", "                        ", "if", "augments", "[", "0", "]", "!=", "0", ":", "\n", "                            ", "vert", "=", "rot_imgplane", "(", "vert", ",", "augments", "[", "0", "]", ")", "\n", "", "if", "augments", "[", "1", "]", ":", "\n", "                            ", "vert", "[", ":", ",", "0", "]", "*=", "-", "1", "\n", "", "", "verts_processed", "[", "inds", "]", "=", "vert", "\n", "verts_flag", "[", "inds", "]", "=", "valid_mask_verts", "[", "used_id", "]", "\n", "\n", "", "", "", "return", "verts_processed", ",", "verts_flag", ",", "root_trans_processed", ",", "depth_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._calc_normed_cam_params_": [[399, 423], ["torch.zeros", "image_base.denormalize_kp2ds", "utils.estimate_translation", "utils.projection.filter_out_incorrect_trans", "utils.normalize_trans_to_cam_params", "torch.ones", "torch.ones", "valid_mask.sum", "torch.from_numpy().float", "utils.estimate_translation.float", "kp3d_flag.sum", "numpy.array", "torch.Tensor", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.denormalize_kp2ds", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.estimate_translation", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.filter_out_incorrect_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.cam_utils.normalize_trans_to_cam_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "_calc_normed_cam_params_", "(", "self", ",", "full_kp2ds", ",", "kp_3ds", ",", "kp3d_flag", ",", "ds", ",", "thresh", "=", "50", ")", ":", "\n", "        ", "cam_params", "=", "torch", ".", "ones", "(", "self", ".", "max_person", ",", "3", ",", "dtype", "=", "torch", ".", "float32", ")", "*", "-", "2", "\n", "cam_mask", "=", "torch", ".", "zeros", "(", "self", ".", "max_person", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "root_trans", "=", "torch", ".", "ones", "(", "self", ".", "max_person", ",", "3", ",", "dtype", "=", "torch", ".", "float32", ")", "*", "-", "2", "\n", "\n", "if", "kp3d_flag", ".", "sum", "(", ")", "==", "0", "or", "ds", "in", "self", ".", "invalid_cam_ds", ":", "\n", "            ", "return", "root_trans", ",", "cam_params", ",", "cam_mask", "\n", "\n", "", "kp_3ds_2dformat", "=", "kp_3ds", "[", "kp3d_flag", "]", "\n", "kp2ds", "=", "denormalize_kp2ds", "(", "full_kp2ds", "[", "kp3d_flag", "]", ")", "\n", "\n", "trans", "=", "estimate_translation", "(", "kp_3ds_2dformat", ",", "kp2ds", ",", "focal_length", "=", "self", ".", "focal_length", ",", "img_size", "=", "np", ".", "array", "(", "self", ".", "input_shape", ")", ")", "\n", "trans", ",", "valid_mask", "=", "filter_out_incorrect_trans", "(", "kp_3ds_2dformat", ",", "trans", ",", "kp2ds", ",", "thresh", "=", "thresh", ",", "focal_length", "=", "self", ".", "focal_length", ",", "center_offset", "=", "torch", ".", "Tensor", "(", "self", ".", "input_shape", ")", "/", "2.", ")", "\n", "kp3d_flag", "[", "kp3d_flag", "]", "=", "valid_mask", "\n", "# rectify the root displacement between SMPL 24 and OpenPose 25 body joints", "\n", "normed_cams", "=", "normalize_trans_to_cam_params", "(", "trans", ")", "\n", "\n", "if", "valid_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "cam_params", "[", "kp3d_flag", "]", "=", "torch", ".", "from_numpy", "(", "normed_cams", ")", ".", "float", "(", ")", "\n", "root_trans", "[", "kp3d_flag", "]", "=", "trans", ".", "float", "(", ")", "\n", "cam_mask", "[", "kp3d_flag", "]", "=", "True", "\n", "", "return", "root_trans", ",", "cam_params", ",", "cam_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.regress_kp3d_from_smpl": [[424, 440], ["enumerate", "image_base.Image_base.smplr", "kp3ds.append", "kp3ds.append", "numpy.concatenate", "image_base.Image_base.map_kps", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps"], ["", "def", "regress_kp3d_from_smpl", "(", "self", ",", "params", ",", "maps", "=", "None", ",", "genders", "=", "None", ")", ":", "\n", "        ", "kp3ds", "=", "None", "\n", "if", "params", "is", "not", "None", "and", "self", ".", "regress_smpl", ":", "\n", "            ", "kp3ds", "=", "[", "]", "\n", "for", "inds", ",", "param", "in", "enumerate", "(", "params", ")", ":", "\n", "                ", "if", "param", "is", "not", "None", ":", "\n", "                    ", "pose", ",", "beta", "=", "np", ".", "concatenate", "(", "[", "param", "[", ":", "-", "10", "]", ",", "np", ".", "zeros", "(", "6", ")", "]", ")", ",", "param", "[", "-", "10", ":", "]", "\n", "gender", "=", "'n'", "if", "genders", "is", "None", "else", "genders", "[", "inds", "]", "\n", "verts", ",", "kp3d", "=", "self", ".", "smplr", "(", "pose", ",", "beta", ",", "gender", "=", "gender", ")", "\n", "kp3d", "=", "kp3d", "[", "0", "]", "\n", "if", "maps", "is", "not", "None", ":", "\n", "                        ", "kp3d", "=", "self", ".", "map_kps", "(", "kp3d", ",", "maps", "=", "maps", ")", "\n", "", "kp3ds", ".", "append", "(", "kp3d", ")", "\n", "", "else", ":", "\n", "                    ", "kp3ds", ".", "append", "(", "None", ")", "\n", "", "", "", "return", "kp3ds", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.generate_heatmap_AEmap": [[441, 455], ["config.args", "image_base.Image_base.heatmap_generator.single_process", "config.args", "image_base.Image_base.joint_generator.single_process", "config.args", "config.args", "numpy.concatenate", "heatmap_kps.append"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.JointsGenerator.single_process", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.JointsGenerator.single_process", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "generate_heatmap_AEmap", "(", "self", ",", "full_kps", ")", ":", "\n", "        ", "heatmaps", ",", "AE_joints", "=", "None", ",", "None", "\n", "if", "args", "(", ")", ".", "learn_2dpose", "or", "args", "(", ")", ".", "learn_AE", ":", "\n", "            ", "full_kps_hm", "=", "[", "(", "kps_i", "+", "1.", ")", "/", "2.", "*", "self", ".", "heatmap_res", "for", "kps_i", "in", "full_kps", "]", "\n", "full_kps_hm", "=", "[", "np", ".", "concatenate", "(", "[", "kps_i", ",", "(", "kps_i", "[", ":", ",", "0", "]", ">", "0", ")", "[", ":", ",", "None", "]", "]", ",", "-", "1", ")", "for", "kps_i", "in", "full_kps_hm", "]", "\n", "heatmap_kps", "=", "[", "]", "\n", "for", "kps", "in", "full_kps_hm", ":", "\n", "                ", "heatmap_kps", ".", "append", "(", "kps", "[", "self", ".", "heatmap_mapper", "]", ")", "\n", "\n", "", "", "if", "args", "(", ")", ".", "learn_2dpose", ":", "\n", "            ", "heatmaps", "=", "self", ".", "heatmap_generator", ".", "single_process", "(", "heatmap_kps", ")", "\n", "", "if", "args", "(", ")", ".", "learn_AE", ":", "\n", "            ", "AE_joints", "=", "self", ".", "joint_generator", ".", "single_process", "(", "heatmap_kps", ")", "\n", "", "return", "heatmaps", ",", "AE_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._check_kp3d_visible_parts_": [[456, 459], ["None"], "methods", ["None"], ["", "def", "_check_kp3d_visible_parts_", "(", "self", ",", "kp3ds", ",", "invisible_flag", "=", "-", "2.", ")", ":", "\n", "        ", "visible_parts_mask", "=", "(", "kp3ds", "!=", "invisible_flag", ")", ".", "sum", "(", "-", "1", ")", "==", "kp3ds", ".", "shape", "[", "-", "1", "]", "\n", "return", "visible_parts_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.parse_cluster_results": [[460, 469], ["numpy.load", "enumerate", "os.path.basename", "max", "cluster_pool[].append", "zip", "range", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "parse_cluster_results", "(", "self", ",", "cluster_results_file", ",", "file_paths", ")", ":", "\n", "        ", "annots", "=", "np", ".", "load", "(", "cluster_results_file", ",", "allow_pickle", "=", "True", ")", "\n", "cluster_results", ",", "img_names", "=", "annots", "[", "'kp3ds'", "]", ",", "annots", "[", "'img_names'", "]", "\n", "cluster_dict", "=", "{", "os", ".", "path", ".", "basename", "(", "img_name", ")", ":", "cluster_id", "for", "img_name", ",", "cluster_id", "in", "zip", "(", "img_names", ",", "cluster_results", ")", "}", "\n", "cluster_num", "=", "max", "(", "cluster_results", ")", "+", "1", "\n", "cluster_pool", "=", "[", "[", "]", "for", "_", "in", "range", "(", "cluster_num", ")", "]", "\n", "for", "inds", ",", "img_name", "in", "enumerate", "(", "file_paths", ")", ":", "\n", "            ", "cluster_pool", "[", "cluster_dict", "[", "os", ".", "path", ".", "basename", "(", "img_name", ")", "]", "]", ".", "append", "(", "inds", ")", "\n", "", "return", "cluster_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.homogenize_pose_sample": [[470, 473], ["len", "random.sample"], "methods", ["None"], ["", "def", "homogenize_pose_sample", "(", "self", ",", "index", ")", ":", "\n", "        ", "cluster_num", "=", "len", "(", "self", ".", "cluster_pool", ")", "\n", "return", "random", ".", "sample", "(", "self", ".", "cluster_pool", "[", "index", "%", "cluster_num", "]", ",", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_image_info": [[474, 476], ["None"], "methods", ["None"], ["", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.resample": [[477, 479], ["image_base.Image_base.__getitem__", "random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__getitem__"], ["", "def", "resample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__getitem__", "(", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.reget_info": [[480, 482], ["image_base.Image_base.get_image_info", "random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_image_info"], ["", "def", "reget_info", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_image_info", "(", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.__len__": [[483, 485], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "file_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.__getitem__": [[486, 494], ["image_base.Image_base.get_item_single_frame", "image_base.Image_base.get_item_single_frame", "print", "numpy.random.randint", "image_base.Image_base.get_item_single_frame", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_item_single_frame", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_item_single_frame", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.get_item_single_frame"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "get_item_single_frame", "(", "index", ")", "\n", "try", ":", "\n", "            ", "return", "self", ".", "get_item_single_frame", "(", "index", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'eror!!!! dataset length:'", ",", "len", "(", "self", ")", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ")", ")", "\n", "return", "self", ".", "get_item_single_frame", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.aug_image": [[495, 502], ["image_base.Image_base.synthetic_occlusion", "numpy.array", "image_base.Image_base.color_jittering", "PIL.Image.fromarray"], "methods", ["None"], ["", "", "def", "aug_image", "(", "self", ",", "image", ",", "color_jitter", ",", "syn_occlusion", ")", ":", "\n", "        ", "if", "syn_occlusion", ":", "\n", "            ", "image", "=", "self", ".", "synthetic_occlusion", "(", "image", ")", "\n", "", "if", "color_jitter", ":", "\n", "            ", "image", "=", "np", ".", "array", "(", "self", ".", "color_jittering", "(", "Image", ".", "fromarray", "(", "image", ")", ")", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.read_pkl": [[503, 505], ["pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "read_pkl", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "open", "(", "file_path", ",", "'rb'", ")", ",", "encoding", "=", "'iso-8859-1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.read_json": [[506, 510], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "read_json", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "file", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.read_npy": [[511, 513], ["numpy.load"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "read_npy", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "return", "np", ".", "load", "(", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._calc_center_": [[514, 527], ["config.args", "vis.sum", "[].mean", "vis.sum", "kps[].mean", "kps[].mean"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "_calc_center_", "(", "self", ",", "kps", ")", ":", "\n", "        ", "center", "=", "None", "\n", "if", "args", "(", ")", ".", "center_def_kp", ":", "\n", "            ", "vis", "=", "kps", "[", "self", ".", "torso_ids", ",", "0", "]", ">", "-", "1", "\n", "if", "vis", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "center", "=", "kps", "[", "self", ".", "torso_ids", "]", "[", "vis", "]", ".", "mean", "(", "0", ")", "\n", "", "elif", "(", "kps", "[", ":", ",", "0", "]", ">", "-", "1", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "center", "=", "kps", "[", "kps", "[", ":", ",", "0", "]", ">", "-", "1", "]", ".", "mean", "(", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "vis", "=", "kps", "[", ":", ",", "0", "]", ">", "-", "1", "\n", "if", "vis", ".", "sum", "(", ")", ">", "self", ".", "min_vis_pts", ":", "\n", "                ", "center", "=", "kps", "[", "vis", "]", ".", "mean", "(", "0", ")", "\n", "", "", "return", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.add_cam_parameters": [[528, 540], ["torch.from_numpy().float", "torch.tensor", "torch.from_numpy().float", "torch.zeros().float", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "add_cam_parameters", "(", "self", ",", "input_data", ",", "info", ")", ":", "\n", "        ", "if", "'camMats'", "in", "info", ":", "\n", "            ", "input_data", "[", "'camMats'", "]", "=", "torch", ".", "from_numpy", "(", "info", "[", "'camMats'", "]", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_data", "[", "'camMats'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "args", "(", ")", ".", "focal_length", ",", "0", ",", "info", "[", "'img_size'", "]", "[", "1", "]", "/", "2.", "]", ",", "[", "0", ",", "args", "(", ")", ".", "focal_length", ",", "info", "[", "'img_size'", "]", "[", "0", "]", "/", "2.", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "", "if", "'camDists'", "in", "info", ":", "\n", "            ", "input_data", "[", "'camDists'", "]", "=", "torch", ".", "from_numpy", "(", "info", "[", "'camDists'", "]", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_data", "[", "'camDists'", "]", "=", "torch", ".", "zeros", "(", "5", ")", ".", "float", "(", ")", "\n", "", "return", "input_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.detect_occluded_person": [[542, 558], ["len", "occluded_by_who.astype", "numpy.ones", "enumerate", "zip", "numpy.sqrt", "numpy.where", "numpy.min"], "function", ["None"], ["", "", "def", "detect_occluded_person", "(", "person_centers", ",", "full_kp2ds", ",", "thresh", "=", "2", "*", "64", "/", "512.", ")", ":", "\n", "    ", "person_num", "=", "len", "(", "person_centers", ")", "\n", "# index of the person at the front of an occlusion", "\n", "occluded_by_who", "=", "np", ".", "ones", "(", "person_num", ")", "*", "-", "1", "\n", "if", "person_num", ">", "1", ":", "\n", "        ", "for", "inds", ",", "(", "person_center", ",", "kp2d", ")", "in", "enumerate", "(", "zip", "(", "person_centers", ",", "full_kp2ds", ")", ")", ":", "\n", "            ", "dist", "=", "np", ".", "sqrt", "(", "(", "(", "person_centers", "-", "person_center", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ")", "\n", "if", "(", "dist", ">", "0", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "if", "(", "dist", "[", "dist", ">", "0", "]", "<", "thresh", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "# Comparing the visible keypoint number to justify whether the person is occluded by the others", "\n", "                    ", "if", "(", "full_kp2ds", "[", "inds", ",", ":", ",", "0", "]", ">", "0", ")", ".", "sum", "(", ")", ">=", "(", "kp2d", "[", ":", ",", "0", "]", ">", "0", ")", ".", "sum", "(", ")", ":", "\n", "                        ", "closet_idx", "=", "np", ".", "where", "(", "dist", "==", "np", ".", "min", "(", "dist", "[", "dist", ">", "0", "]", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "occluded_by_who", "[", "closet_idx", "]", "<", "0", ":", "\n", "                            ", "occluded_by_who", "[", "inds", "]", "=", "closet_idx", "\n", "\n", "", "", "", "", "", "", "return", "occluded_by_who", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base._calc_bbox_normed": [[559, 568], ["bboxes.append", "bboxes.append", "utils.augments.calc_aabb", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.augments.calc_aabb"], ["", "def", "_calc_bbox_normed", "(", "full_kps", ")", ":", "\n", "    ", "bboxes", "=", "[", "]", "\n", "for", "kps_i", "in", "full_kps", ":", "\n", "        ", "if", "(", "kps_i", "[", ":", ",", "0", "]", ">", "-", "2", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "bboxes", ".", "append", "(", "calc_aabb", "(", "kps_i", "[", "kps_i", "[", ":", ",", "0", "]", ">", "-", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", ".", "append", "(", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "", "", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base._check_minus2_error_": [[570, 581], ["kp3ds[].reshape", "equal_mask.sum", "print", "print", "torch.where"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "_check_minus2_error_", "(", "kp3ds", ",", "acceptable_list", "=", "[", "-", "2.", ",", "0.", "]", ")", ":", "\n", "    ", "kp3ds_flatten", "=", "kp3ds", "[", ":", ",", "1", ":", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "for", "kp3d", "in", "kp3ds_flatten", ":", "\n", "        ", "if", "kp3d", "[", "0", "]", "in", "acceptable_list", "and", "kp3d", "[", "1", "]", "in", "acceptable_list", "and", "kp3d", "[", "2", "]", "in", "acceptable_list", ":", "\n", "            ", "continue", "\n", "\n", "", "equal_kp_value", "=", "(", "kp3ds_flatten", "[", ":", ",", "0", "]", "==", "kp3d", "[", "0", "]", ")", ".", "long", "(", ")", "+", "(", "kp3ds_flatten", "[", ":", ",", "1", "]", "==", "kp3d", "[", "1", "]", ")", ".", "long", "(", ")", "+", "(", "kp3ds_flatten", "[", ":", ",", "2", "]", "==", "kp3d", "[", "2", "]", ")", ".", "long", "(", ")", "\n", "equal_mask", "=", "equal_kp_value", "==", "3", "\n", "if", "equal_mask", ".", "sum", "(", ")", ">", "3", ":", "\n", "            ", "print", "(", "torch", ".", "where", "(", "(", "kp3ds", "[", ":", ",", ":", "]", "==", "kp3d", ")", ".", "sum", "(", "-", "1", ")", "==", "3", ")", ")", "\n", "print", "(", "'there are incorrect process that may break the state of invisible flag -2., and make the value becomes {}'", ".", "format", "(", "kp3ds_flatten", "[", "equal_mask", "]", ")", ")", "\n", "#raise Exception", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base._check_upper_bound_lower_bound_": [[583, 588], ["None"], "function", ["None"], ["", "", "", "def", "_check_upper_bound_lower_bound_", "(", "kps", ",", "ub", "=", "1", ",", "lb", "=", "-", "1", ")", ":", "\n", "    ", "for", "k", "in", "kps", ":", "\n", "        ", "if", "k", ">=", "ub", "or", "k", "<=", "lb", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.check_and_mkdir": [[589, 591], ["os.makedirs"], "function", ["None"], ["", "def", "check_and_mkdir", "(", "dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.test_projection_depth": [[592, 596], ["batch_persp_depth"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.batch_persp_depth"], ["", "def", "test_projection_depth", "(", "pred_joints", ",", "trans_xyz", ",", "depth_pred", ",", "fov_tan", ")", ":", "\n", "    ", "from", "utils", ".", "projection", "import", "batch_persp_depth", "\n", "projected_kp2d", "=", "batch_persp_depth", "(", "pred_joints", ",", "trans_xyz", ",", "depth_pred", ",", "fov_tan", ")", "\n", "return", "projected_kp2d", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.denormalize_kp2ds": [[597, 599], ["config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "denormalize_kp2ds", "(", "mat", ",", "img_size", "=", "args", "(", ")", ".", "input_size", ")", ":", "\n", "    ", "return", "(", "mat", "+", "1", ")", "/", "2", "*", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.print_data_shape": [[600, 608], ["data.items", "isinstance", "print", "isinstance", "print", "isinstance", "len", "print"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "print_data_shape", "(", "data", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "print", "(", "key", ",", "value", ".", "shape", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "            ", "print", "(", "key", ",", "len", "(", "value", ")", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "            ", "print", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.test_image_dataset": [[609, 716], ["print", "print", "print", "os.path.join", "os.path.isdir", "os.mkdir", "print", "torch.utils.data.DataLoader", "Visualizer", "print", "enumerate", "shutil.rmtree", "SMPL", "image_base._check_minus2_error_", "range", "config.args", "config.args", "image_base.print_data_shape", "os.path.basename", "draw_skeleton_multiperson", "zip", "make_heatmaps", "numpy.concatenate", "cv2.imwrite", "torch.stack().permute", "torch.cat().float", "print", "SMPL.", "[].numpy().astype", "Visualizer.draw_skeleton", "cv2.imwrite", "config.args", "config.args", "[].numpy().astype", "image.copy", "[].clone", "[].clone", "denormalize_cam_params_to_trans", "print", "numpy.logical_or", "draw_skeleton_multiperson", "cv2.imwrite", "person_center.astype", "image.copy", "make_heatmaps", "cv2.imwrite", "[].numpy().astype", "torch.where", "[].float", "[].float", "draw_skeleton_multiperson", "draw_skeleton_multiperson", "cv2.imwrite", "cv2.imwrite", "image.copy", "[].sum", "[].clone", "denormalize_cam_params_to_trans.half", "utils.projection.perspective_projection", "image.copy", "cv2.putText", "image.copy", "torch.stack", "torch.cat", "[].sum", "denormalize_cam_params_to_trans", "utils.projection.perspective_projection", "Visualizer.visualize_renderer_verts_list", "render_img.copy", "render_img.copy", "Visualizer.visualize_renderer_verts_list", "numpy.concatenate", "Visualizer.visualize_renderer_verts_list", "[].numpy", "[].numpy", "[].numpy", "[].numpy", "torch.where", "[].numpy", "[].clone", "torch.zeros", "verts.cuda", "verts.cuda", "verts.cuda", "config.args", "[].numpy", "config.args", "len", "config.args", "denormalize_cam_params_to_trans.cuda", "denormalize_cam_params_to_trans.cuda"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base._check_minus2_error_", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.print_data_shape", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.make_heatmaps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.denormalize_cam_params_to_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.make_heatmaps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.denormalize_cam_params_to_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visualize_renderer_verts_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visualize_renderer_verts_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visualize_renderer_verts_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "", "def", "test_image_dataset", "(", "dataset", ",", "with_3d", "=", "False", ",", "with_smpl", "=", "False", ")", ":", "\n", "#args().configs_yml='configs/basic_training_resnet.yml'", "\n", "    ", "print", "(", "'configs_yml:'", ",", "args", "(", ")", ".", "configs_yml", ")", "\n", "print", "(", "'model_version:'", ",", "args", "(", ")", ".", "model_version", ")", "\n", "\n", "from", "visualization", ".", "visualization", "import", "Visualizer", ",", "draw_skeleton_multiperson", "\n", "test_projection_part", "=", "True", "if", "args", "(", ")", ".", "model_version", "in", "[", "4", ",", "5", ",", "6", ",", "7", "]", "else", "False", "\n", "print", "(", "'test_projection_part:'", ",", "test_projection_part", ")", "\n", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "project_dir", ",", "'test'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "print", "(", "'Initialized dataset'", ")", "\n", "\n", "batch_size", ",", "model_type", "=", "2", ",", "'smpl'", "\n", "dataloader", "=", "DataLoader", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "visualizer", "=", "Visualizer", "(", "resolution", "=", "(", "512", ",", "512", ",", "3", ")", ",", "result_img_dir", "=", "save_dir", ",", "with_renderer", "=", "True", ")", "\n", "\n", "from", "visualization", ".", "visualization", "import", "make_heatmaps", "\n", "from", "utils", ".", "cam_utils", "import", "denormalize_cam_params_to_trans", "\n", "if", "with_smpl", ":", "\n", "        ", "from", "smpl_family", ".", "smpl", "import", "SMPL", "\n", "smpl", "=", "SMPL", "(", "args", "(", ")", ".", "smpl_model_path", ",", "model_type", "=", "'smpl'", ")", "\n", "", "print", "(", "'Initialized SMPL models'", ")", "\n", "\n", "img_size", "=", "512", "\n", "bones", ",", "cm", "=", "constants", ".", "All54_connMat", ",", "constants", ".", "cm_All54", "\n", "\n", "for", "_", ",", "r", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "_", "%", "100", "==", "0", ":", "\n", "            ", "print_data_shape", "(", "r", ")", "\n", "", "_check_minus2_error_", "(", "r", "[", "'kp_3d'", "]", ")", "\n", "\n", "for", "inds", "in", "range", "(", "2", ")", ":", "\n", "            ", "img_bsname", "=", "os", ".", "path", ".", "basename", "(", "r", "[", "'imgpath'", "]", "[", "inds", "]", ")", "\n", "image", "=", "r", "[", "'image'", "]", "[", "inds", "]", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "full_kp2d", "=", "(", "r", "[", "'full_kp2d'", "]", "[", "inds", "]", ".", "numpy", "(", ")", "+", "1", ")", "*", "img_size", "/", "2.0", "\n", "person_centers", "=", "(", "r", "[", "'person_centers'", "]", "[", "inds", "]", ".", "numpy", "(", ")", "+", "1", ")", "*", "img_size", "/", "2.0", "\n", "subject_ids", "=", "r", "[", "'subject_ids'", "]", "[", "inds", "]", "\n", "image_kp2d", "=", "draw_skeleton_multiperson", "(", "image", ".", "copy", "(", ")", ",", "full_kp2d", ",", "bones", "=", "bones", ",", "cm", "=", "cm", ")", "\n", "\n", "if", "test_projection_part", "and", "r", "[", "'cam_mask'", "]", "[", "inds", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "cam_mask", "=", "r", "[", "'cam_mask'", "]", "[", "inds", "]", "\n", "kp3d_tp", "=", "r", "[", "'kp_3d'", "]", "[", "inds", "]", "[", "cam_mask", "]", ".", "clone", "(", ")", "\n", "kp2d_tp", "=", "r", "[", "'full_kp2d'", "]", "[", "inds", "]", "[", "cam_mask", "]", ".", "clone", "(", ")", "\n", "pred_cam_t", "=", "denormalize_cam_params_to_trans", "(", "r", "[", "'cams'", "]", "[", "inds", "]", "[", "cam_mask", "]", ".", "clone", "(", ")", ",", "positive_constrain", "=", "True", ")", "\n", "print", "(", "'pred_cam_t:'", ",", "pred_cam_t", ".", "half", "(", ")", ")", "\n", "pred_keypoints_2d", "=", "perspective_projection", "(", "kp3d_tp", ",", "translation", "=", "pred_cam_t", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "normalize", "=", "False", ")", "+", "512", "//", "2", "\n", "invalid_mask", "=", "np", ".", "logical_or", "(", "kp3d_tp", "[", ":", ",", ":", ",", "-", "1", "]", "==", "-", "2.", ",", "kp2d_tp", "[", ":", ",", ":", ",", "-", "1", "]", "==", "-", "2.", ")", "\n", "pred_keypoints_2d", "[", "invalid_mask", "]", "=", "-", "2.", "\n", "image_kp2d_projection", "=", "draw_skeleton_multiperson", "(", "image", ".", "copy", "(", ")", ",", "pred_keypoints_2d", ",", "bones", "=", "bones", ",", "cm", "=", "cm", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}_{}_projection.jpg'", ".", "format", "(", "save_dir", ",", "_", ",", "img_bsname", ")", ",", "image_kp2d_projection", ")", "\n", "\n", "", "for", "person_center", ",", "subject_id", "in", "zip", "(", "person_centers", ",", "subject_ids", ")", ":", "\n", "                ", "y", ",", "x", "=", "person_center", ".", "astype", "(", "np", ".", "int", ")", "\n", "if", "y", ">", "0", "and", "x", ">", "0", ":", "\n", "                    ", "image_kp2d", "[", "y", "-", "10", ":", "y", "+", "10", ",", "x", "-", "10", ":", "x", "+", "10", "]", "=", "[", "0", ",", "0", ",", "255", "]", "\n", "cv2", ".", "putText", "(", "image_kp2d", ",", "'id:{}'", ".", "format", "(", "subject_id", ")", ",", "(", "x", ",", "y", ")", ",", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "0.5", ",", "(", "255", ",", "0", ",", "255", ")", ",", "1", ")", "\n", "\n", "", "", "centermap_color", "=", "make_heatmaps", "(", "image", ".", "copy", "(", ")", ",", "r", "[", "'centermap'", "]", "[", "inds", "]", ")", "\n", "image_vis", "=", "np", ".", "concatenate", "(", "[", "image_kp2d", ",", "centermap_color", "]", ",", "1", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}_{}_centermap.jpg'", ".", "format", "(", "save_dir", ",", "_", ",", "img_bsname", ")", ",", "image_vis", ")", "\n", "if", "'heatmap'", "in", "r", ":", "\n", "                ", "heatmap_color", "=", "make_heatmaps", "(", "image", ".", "copy", "(", ")", ",", "r", "[", "'heatmap'", "]", "[", "inds", "]", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}_{}_heatmap.jpg'", ".", "format", "(", "save_dir", ",", "_", ",", "img_bsname", ")", ",", "heatmap_color", ")", "\n", "\n", "", "person_centers_onmap", "=", "(", "(", "r", "[", "'person_centers'", "]", "[", "inds", "]", ".", "numpy", "(", ")", "+", "1", ")", "/", "2.0", "*", "(", "args", "(", ")", ".", "centermap_size", "-", "1", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "positive_position", "=", "torch", ".", "stack", "(", "torch", ".", "where", "(", "r", "[", "'centermap'", "]", "[", "inds", ",", "0", "]", "==", "1", ")", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "", "if", "with_smpl", "and", "r", "[", "'valid_masks'", "]", "[", "0", ",", "0", ",", "4", "]", ":", "\n", "            ", "params", ",", "subject_ids", "=", "r", "[", "'params'", "]", "[", "0", "]", ",", "r", "[", "'subject_ids'", "]", "[", "0", "]", "\n", "image", "=", "r", "[", "'image_org'", "]", "[", "0", "]", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "valid_mask", "=", "torch", ".", "where", "(", "r", "[", "'valid_masks'", "]", "[", "0", ",", ":", ",", "4", "]", ")", "[", "0", "]", "\n", "subject_ids", "=", "subject_ids", "[", "valid_mask", "]", "\n", "pose", ",", "betas", "=", "params", "[", "valid_mask", "]", "[", ":", ",", ":", "66", "]", ".", "float", "(", ")", ",", "params", "[", "valid_mask", "]", "[", ":", ",", "-", "10", ":", "]", ".", "float", "(", ")", "\n", "pose", "=", "torch", ".", "cat", "(", "[", "pose", ",", "torch", ".", "zeros", "(", "len", "(", "pose", ")", ",", "6", ")", "]", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "print", "(", "pose", "[", ":", ",", "12", "*", "3", ":", "13", "*", "3", "]", ")", "\n", "verts", ",", "joints", "=", "smpl", "(", "poses", "=", "pose", ",", "betas", "=", "betas", ",", "get_skin", "=", "True", ")", "\n", "if", "r", "[", "'valid_masks'", "]", "[", "0", ",", "0", ",", "6", "]", ":", "\n", "                ", "verts", "=", "verts", "[", "0", "]", "[", "r", "[", "'valid_masks'", "]", "[", "0", ",", ":", ",", "6", "]", "]", "\n", "\n", "", "if", "test_projection_part", ":", "\n", "                ", "if", "r", "[", "'cam_mask'", "]", "[", "0", "]", "[", "valid_mask", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "trans", "=", "denormalize_cam_params_to_trans", "(", "r", "[", "'cams'", "]", "[", "0", "]", "[", "valid_mask", "]", ".", "clone", "(", ")", ",", "positive_constrain", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "trans", "=", "r", "[", "'root_trans'", "]", "[", "0", "]", "[", "valid_mask", "]", "\n", "", "pred_keypoints_2d", "=", "perspective_projection", "(", "joints", ",", "translation", "=", "trans", ",", "focal_length", "=", "args", "(", ")", ".", "focal_length", ",", "normalize", "=", "False", ")", "+", "512", "//", "2", "\n", "\n", "render_img", "=", "visualizer", ".", "visualize_renderer_verts_list", "(", "[", "verts", ".", "cuda", "(", ")", "]", ",", "trans", "=", "[", "trans", ".", "cuda", "(", ")", "]", ",", "images", "=", "image", "[", "None", "]", ")", "[", "0", "]", "\n", "image_kp2d_projection_smpl24", "=", "draw_skeleton_multiperson", "(", "render_img", ".", "copy", "(", ")", ",", "pred_keypoints_2d", ",", "bones", "=", "bones", "[", ":", "23", "]", ",", "cm", "=", "cm", "[", ":", "23", "]", ",", "label_kp_order", "=", "True", ")", "\n", "image_kp2d_projection_extra30", "=", "draw_skeleton_multiperson", "(", "render_img", ".", "copy", "(", ")", ",", "pred_keypoints_2d", ",", "bones", "=", "bones", "[", "23", ":", "]", ",", "cm", "=", "cm", "[", "23", ":", "]", ",", "label_kp_order", "=", "True", ")", "\n", "#cv2.imwrite('{}/op25_regressed_{}.jpg'.format(save_dir,_), image_kp2d_projection)", "\n", "rendered_img_bv", "=", "visualizer", ".", "visualize_renderer_verts_list", "(", "[", "verts", ".", "cuda", "(", ")", "]", ",", "trans", "=", "[", "trans", ".", "cuda", "(", ")", "]", ",", "bird_view", "=", "True", ",", "auto_cam", "=", "True", ")", "[", "0", "]", "\n", "cv2", ".", "imwrite", "(", "'{}/mesh_{}.png'", ".", "format", "(", "save_dir", ",", "_", ")", ",", "np", ".", "concatenate", "(", "[", "render_img", ",", "rendered_img_bv", ",", "image_kp2d_projection_smpl24", ",", "image_kp2d_projection_extra30", "]", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "verts", "[", ":", ",", ":", ",", "2", "]", "+=", "2", "\n", "render_img", "=", "visualizer", ".", "visualize_renderer_verts_list", "(", "[", "verts", ".", "cuda", "(", ")", "]", ",", "images", "=", "image", "[", "None", "]", ")", "[", "0", "]", "\n", "cv2", ".", "imwrite", "(", "'{}/mesh_{}.png'", ".", "format", "(", "save_dir", ",", "_", ")", ",", "render_img", ")", "\n", "", "", "j3ds", "=", "r", "[", "'kp_3d'", "]", "[", "0", ",", "0", "]", "\n", "image", "=", "r", "[", "'image_org'", "]", "[", "0", "]", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "if", "r", "[", "'valid_masks'", "]", "[", "0", ",", "0", ",", "1", "]", ":", "\n", "            ", "pj2d", "=", "(", "j3ds", "[", ":", ",", ":", "2", "]", "+", "1", ")", "*", "img_size", "/", "2.0", "\n", "pj2d", "[", "j3ds", "[", ":", ",", "-", "1", "]", "==", "-", "2.", "]", "=", "-", "2.", "\n", "image_pkp3d", "=", "visualizer", ".", "draw_skeleton", "(", "image", ".", "copy", "(", ")", ",", "pj2d", ",", "bones", "=", "bones", ",", "cm", "=", "cm", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/pkp3d_{}_{}.png'", ".", "format", "(", "save_dir", ",", "_", ",", "r", "[", "'subject_ids'", "]", "[", "0", ",", "0", "]", ")", ",", "image_pkp3d", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.up.UP": [[7, 74], ["super().__init__", "os.path.join", "os.path.join", "constants.joint_mapping", "os.path.join", "up..get_high_qulity_idx", "logging.info", "glob.glob", "open", "open.readlines", "lines[].split", "len", "os.path.join", "os.path.join", "up..read_pkl", "np.array", "os.path.join", "up..regress_kp3d_from_smpl", "np.array", "SMPLR", "os.path.join", "up..read_txt", "os.path.join", "len", "print", "cv2.imread", "up..map_kps", "np.arange", "np.array", "len", "os.path.basename().split", "up..read_txt", "high_qulity_idx.append", "len", "np.concatenate", "len", "len", "up..read_npy", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.read_pkl", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.regress_kp3d_from_smpl", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.read_npy"], ["def", "UP", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "UP", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "regress_smpl", "=", "False", ")", ":", "\n", "            ", "super", "(", "UP", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "regress_smpl", ")", "\n", "self", ".", "data_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'UP/'", ")", "\n", "self", ".", "data3d_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'up-3d'", ")", "\n", "self", ".", "joint_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "LSP_14", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "#self.joint3d_mapper = constants.joint_mapping(constants.SMPL_ALL_54, constants.SMPL_ALL_54)", "\n", "\n", "self", ".", "scale_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "'p14_joints/scale_14_500_p14_joints.txt'", ")", "\n", "self", ".", "flip_pairs", "=", "[", "[", "0", ",", "5", "]", ",", "[", "1", ",", "4", "]", ",", "[", "2", ",", "3", "]", ",", "[", "6", ",", "11", "]", ",", "[", "8", ",", "9", "]", ",", "[", "7", ",", "10", "]", "]", "\n", "self", ".", "multi_mode", "=", "False", "\n", "\n", "self", ".", "high_qulity_idx", "=", "self", ".", "get_high_qulity_idx", "(", ")", "\n", "if", "self", ".", "regress_smpl", ":", "\n", "                ", "self", ".", "smplr", "=", "SMPLR", "(", "use_gender", "=", "False", ")", "\n", "", "logging", ".", "info", "(", "'UP dataset total {} samples'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "\n", "", "def", "get_high_qulity_idx", "(", "self", ")", ":", "\n", "            ", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data3d_dir", ",", "'*_quality_info.txt'", ")", ")", "\n", "high_qulity_idx", "=", "[", "]", "\n", "for", "file", "in", "files", ":", "\n", "                ", "quality", "=", "self", ".", "read_txt", "(", "file", ")", "\n", "data_idx", "=", "os", ".", "path", ".", "basename", "(", "file", ")", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "dataset_info_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data3d_dir", ",", "'{}_dataset_info.txt'", ".", "format", "(", "data_idx", ")", ")", "\n", "dataset_info", "=", "self", ".", "read_txt", "(", "dataset_info_dir", ")", "[", "0", "]", "\n", "if", "'high\\n'", "in", "quality", "and", "dataset_info", "!=", "'fashionpose'", ":", "\n", "                    ", "high_qulity_idx", ".", "append", "(", "data_idx", ")", "\n", "", "", "return", "high_qulity_idx", "\n", "\n", "", "def", "read_txt", "(", "self", ",", "file_path", ")", ":", "\n", "#in 08514_fit_crop_info.txt ,there are 6 number:", "\n", "# width height width_crop_start width_crop_end height_crop_start height_crop_end", "\n", "            ", "f", "=", "open", "(", "file_path", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "if", "len", "(", "lines", ")", "!=", "1", ":", "\n", "                ", "print", "(", "'different crop_fit_info lines of {}:'", ".", "format", "(", "file_path", ")", ",", "len", "(", "lines", ")", ")", "\n", "", "info", "=", "lines", "[", "0", "]", ".", "split", "(", "' '", ")", "\n", "return", "info", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "high_qulity_idx", ")", "\n", "\n", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "index", "=", "self", ".", "high_qulity_idx", "[", "index", "%", "len", "(", "self", ".", "high_qulity_idx", ")", "]", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data3d_dir", ",", "'{}_image.png'", ".", "format", "(", "index", ")", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "annot_3d_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data3d_dir", ",", "'{}_body.pkl'", ".", "format", "(", "index", ")", ")", "\n", "annot_3d", "=", "self", ".", "read_pkl", "(", "annot_3d_dir", ")", "\n", "theta", ",", "beta", ",", "t", "=", "annot_3d", "[", "'pose'", "]", "[", ":", "66", "]", ",", "annot_3d", "[", "'betas'", "]", ",", "annot_3d", "[", "'t'", "]", "\n", "params", "=", "np", ".", "array", "(", "[", "np", ".", "concatenate", "(", "[", "theta", ",", "beta", "]", ")", "]", ")", "\n", "\n", "annot_2d_kp_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data3d_dir", ",", "'{}_joints.npy'", ".", "format", "(", "index", ")", ")", "\n", "kp2ds", "=", "self", ".", "map_kps", "(", "self", ".", "read_npy", "(", "annot_2d_kp_dir", ")", ".", "T", ",", "maps", "=", "self", ".", "joint_mapper", ")", "[", "None", "]", "\n", "kp3ds", "=", "self", ".", "regress_kp3d_from_smpl", "(", "params", ")", "\n", "vmask_3d", "=", "np", ".", "array", "(", "[", "[", "kp3ds", "is", "not", "None", ",", "True", ",", "True", ",", "False", ",", "False", ",", "False", "]", "]", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "np", ".", "arange", "(", "len", "(", "kp2ds", ")", ")", ",", "'vmask_2d'", ":", "np", ".", "array", "(", "[", "[", "True", ",", "False", ",", "False", "]", "]", ")", ",", "'vmask_3d'", ":", "vmask_3d", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "params", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'up'", "}", "\n", "\n", "return", "img_info", "\n", "", "", "return", "UP", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.Human36mDataset.__init__": [[192, 251], ["copy.deepcopy", "camera_parameters.Human36mDataset._cameras.values", "enumerate", "[].item", "[].item.items", "cam.update", "cam.items", "normalize_screen_coordinates().astype", "np.concatenate", "actions.items", "np.array", "camera_parameters.normalize_screen_coordinates", "np.load"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.normalize_screen_coordinates", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "#super().__init__(fps=50, skeleton=h36m_skeleton)", "\n", "        ", "self", ".", "_skeleton", "=", "skeleton", "\n", "self", ".", "_fps", "=", "fps", "\n", "self", ".", "_data", "=", "None", "# Must be filled by subclass", "\n", "self", ".", "_cameras", "=", "None", "# Must be filled by subclass", "\n", "\n", "self", ".", "subjects", "=", "[", "'S1'", ",", "'S5'", ",", "'S6'", ",", "'S7'", ",", "'S8'", ",", "'S9'", ",", "'S11'", "]", "\n", "self", ".", "actions", "=", "[", "'Directions'", ",", "'Discussion'", ",", "'Eating'", ",", "'Greeting'", ",", "'Phoning'", ",", "'Posing'", ",", "'Purchases'", ",", "'Sitting'", ",", "'SittingDown'", ",", "'Smoking'", ",", "'Photo'", ",", "'Waiting'", ",", "'Walking'", ",", "'WalkDog'", ",", "'WalkTogether'", "]", "\n", "\n", "self", ".", "_cameras", "=", "copy", ".", "deepcopy", "(", "h36m_cameras_extrinsic_params", ")", "\n", "for", "cameras", "in", "self", ".", "_cameras", ".", "values", "(", ")", ":", "\n", "            ", "for", "i", ",", "cam", "in", "enumerate", "(", "cameras", ")", ":", "\n", "#\u5c06\u5185\u53c2\u52a0\u5230\u6bcf\u4e2a\u573a\u666f\u7684\u5916\u53c2dict\u91cc\u3002", "\n", "                ", "cam", ".", "update", "(", "h36m_cameras_intrinsic_params", "[", "i", "]", ")", "\n", "for", "k", ",", "v", "in", "cam", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", "not", "in", "[", "'id'", ",", "'res_w'", ",", "'res_h'", "]", ":", "\n", "                        ", "cam", "[", "k", "]", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# Normalize camera frame", "\n", "", "", "cam", "[", "'center'", "]", "=", "normalize_screen_coordinates", "(", "cam", "[", "'center'", "]", ",", "w", "=", "cam", "[", "'res_w'", "]", ",", "h", "=", "cam", "[", "'res_h'", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "cam", "[", "'focal_length'", "]", "=", "cam", "[", "'focal_length'", "]", "/", "cam", "[", "'res_w'", "]", "*", "2", "\n", "if", "'translation'", "in", "cam", ":", "\n", "                    ", "cam", "[", "'translation'", "]", "=", "cam", "[", "'translation'", "]", "/", "1000", "# mm to meters", "\n", "\n", "# Add intrinsic parameters vector", "\n", "", "cam", "[", "'intrinsic'", "]", "=", "np", ".", "concatenate", "(", "(", "cam", "[", "'focal_length'", "]", ",", "\n", "cam", "[", "'center'", "]", ",", "\n", "cam", "[", "'radial_distortion'", "]", ",", "\n", "cam", "[", "'tangential_distortion'", "]", ")", ")", "\n", "", "", "if", "path", "is", "not", "None", ":", "\n", "# Load serialized dataset", "\n", "            ", "data", "=", "np", ".", "load", "(", "path", ")", "[", "'positions_3d'", "]", ".", "item", "(", ")", "\n", "\n", "self", ".", "_data", "=", "{", "}", "\n", "for", "subject", ",", "actions", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_data", "[", "subject", "]", "=", "{", "}", "\n", "for", "action_name", ",", "positions", "in", "actions", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "_data", "[", "subject", "]", "[", "action_name", "]", "=", "{", "\n", "'positions'", ":", "positions", ",", "\n", "'cameras'", ":", "self", ".", "_cameras", "[", "subject", "]", ",", "\n", "}", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "_data", "=", "{", "}", "\n", "for", "subject", "in", "self", ".", "subjects", ":", "\n", "                ", "self", ".", "_data", "[", "subject", "]", "=", "{", "}", "\n", "for", "action_name", "in", "self", ".", "actions", ":", "\n", "                    ", "self", ".", "_data", "[", "subject", "]", "[", "action_name", "]", "=", "{", "'cameras'", ":", "self", ".", "_cameras", "[", "subject", "]", ",", "}", "\n", "", "", "", "'''\n        if remove_static_joints:\n            # Bring the skeleton to 14 joints instead of the original 32\n            self.remove_joints([0, 4, 5, 9, 10, 11, 12, 14, 16, 20, 21, 22, 23, 24, 28, 29, 30, 31])\n\n            # Rewire shoulders to the correct parents\n            self._skeleton._parents[11] = 6\n            self._skeleton._parents[14] = 6\n        '''", "\n", "", "def", "supports_semi_supervised", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.Human36mDataset.supports_semi_supervised": [[251, 253], ["None"], "methods", ["None"], ["", "def", "supports_semi_supervised", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.Human36mDataset.remove_joints": [[254, 260], ["camera_parameters.Human36mDataset._skeleton.remove_joints", "camera_parameters.Human36mDataset._data.keys", "camera_parameters.Human36mDataset._data[].keys"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.Human36mDataset.remove_joints"], ["", "def", "remove_joints", "(", "self", ",", "joints_to_remove", ")", ":", "\n", "        ", "kept_joints", "=", "self", ".", "_skeleton", ".", "remove_joints", "(", "joints_to_remove", ")", "\n", "for", "subject", "in", "self", ".", "_data", ".", "keys", "(", ")", ":", "\n", "            ", "for", "action", "in", "self", ".", "_data", "[", "subject", "]", ".", "keys", "(", ")", ":", "\n", "                ", "s", "=", "self", ".", "_data", "[", "subject", "]", "[", "action", "]", "\n", "s", "[", "'positions'", "]", "=", "s", "[", "'positions'", "]", "[", ":", ",", "kept_joints", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.Human36mDataset.__getitem__": [[261, 263], ["None"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.Human36mDataset.subjects": [[264, 266], ["camera_parameters.Human36mDataset._data.keys"], "methods", ["None"], ["", "def", "subjects", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.Human36mDataset.fps": [[267, 269], ["None"], "methods", ["None"], ["", "def", "fps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_fps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.Human36mDataset.skeleton": [[270, 272], ["None"], "methods", ["None"], ["", "def", "skeleton", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_skeleton", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.Human36mDataset.cameras": [[273, 275], ["None"], "methods", ["None"], ["", "def", "cameras", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.normalize_screen_coordinates": [[277, 282], ["None"], "function", ["None"], ["", "", "def", "normalize_screen_coordinates", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "    ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "# Normalize so that [0, w] is mapped to [-1, 1], while preserving the aspect ratio", "\n", "return", "X", "/", "w", "*", "2", "-", "[", "1", ",", "h", "/", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.image_coordinates": [[284, 289], ["None"], "function", ["None"], ["", "def", "image_coordinates", "(", "X", ",", "w", ",", "h", ")", ":", "\n", "    ", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n", "# Reverse camera frame normalization", "\n", "return", "(", "X", "+", "[", "1", ",", "h", "/", "w", "]", ")", "*", "w", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.world_to_camera": [[291, 294], ["wrap", "wrap", "np.tile"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.wrap", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.wrap"], ["", "def", "world_to_camera", "(", "X", ",", "R", ",", "t", ")", ":", "\n", "    ", "Rt", "=", "wrap", "(", "qinverse", ",", "R", ")", "# Invert rotation", "\n", "return", "wrap", "(", "qrot", ",", "np", ".", "tile", "(", "Rt", ",", "(", "*", "X", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ")", ",", "X", "-", "t", ")", "# Rotate and translate", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.camera_to_world": [[296, 298], ["wrap", "np.tile"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.wrap"], ["", "def", "camera_to_world", "(", "X", ",", "R", ",", "t", ")", ":", "\n", "    ", "return", "wrap", "(", "qrot", ",", "np", ".", "tile", "(", "R", ",", "(", "*", "X", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", ")", ",", "X", ")", "+", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.project_to_2d": [[300, 331], ["torch.clamp", "torch.sum", "torch.sum", "len", "len", "len", "camera_params.unsqueeze.unsqueeze", "torch.sum", "len", "torch.cat", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "project_to_2d", "(", "X", ",", "camera_params", ")", ":", "\n", "    ", "\"\"\"\n    Project 3D points to 2D using the Human3.6M camera projection function.\n    This is a differentiable and batched reimplementation of the original MATLAB script.\n\n    Arguments:\n    X -- 3D points in *camera space* to transform (N, *, 3)\n    camera_params -- intrinsic parameteres (N, 2+2+3+2=9)\n    \"\"\"", "\n", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "len", "(", "camera_params", ".", "shape", ")", "==", "2", "\n", "assert", "camera_params", ".", "shape", "[", "-", "1", "]", "==", "9", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "camera_params", ".", "shape", "[", "0", "]", "\n", "\n", "while", "len", "(", "camera_params", ".", "shape", ")", "<", "len", "(", "X", ".", "shape", ")", ":", "\n", "        ", "camera_params", "=", "camera_params", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "f", "=", "camera_params", "[", "...", ",", ":", "2", "]", "\n", "c", "=", "camera_params", "[", "...", ",", "2", ":", "4", "]", "\n", "k", "=", "camera_params", "[", "...", ",", "4", ":", "7", "]", "\n", "p", "=", "camera_params", "[", "...", ",", "7", ":", "]", "\n", "\n", "XX", "=", "torch", ".", "clamp", "(", "X", "[", "...", ",", ":", "2", "]", "/", "X", "[", "...", ",", "2", ":", "]", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "r2", "=", "torch", ".", "sum", "(", "XX", "[", "...", ",", ":", "2", "]", "**", "2", ",", "dim", "=", "len", "(", "XX", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "radial", "=", "1", "+", "torch", ".", "sum", "(", "k", "*", "torch", ".", "cat", "(", "(", "r2", ",", "r2", "**", "2", ",", "r2", "**", "3", ")", ",", "dim", "=", "len", "(", "r2", ".", "shape", ")", "-", "1", ")", ",", "dim", "=", "len", "(", "r2", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "tan", "=", "torch", ".", "sum", "(", "p", "*", "XX", ",", "dim", "=", "len", "(", "XX", ".", "shape", ")", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "XXX", "=", "XX", "*", "(", "radial", "+", "tan", ")", "+", "p", "*", "r2", "\n", "\n", "return", "f", "*", "XXX", "+", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.camera_parameters.project_to_2d_linear": [[332, 354], ["torch.clamp", "len", "len", "len", "camera_params.unsqueeze.unsqueeze"], "function", ["None"], ["", "def", "project_to_2d_linear", "(", "X", ",", "camera_params", ")", ":", "\n", "    ", "\"\"\"\n    Project 3D points to 2D using only linear parameters (focal length and principal point).\n\n    Arguments:\n    X -- 3D points in *camera space* to transform (N, *, 3)\n    camera_params -- intrinsic parameteres (N, 2+2+3+2=9)\n    \"\"\"", "\n", "assert", "X", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "assert", "len", "(", "camera_params", ".", "shape", ")", "==", "2", "\n", "assert", "camera_params", ".", "shape", "[", "-", "1", "]", "==", "9", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "camera_params", ".", "shape", "[", "0", "]", "\n", "\n", "while", "len", "(", "camera_params", ".", "shape", ")", "<", "len", "(", "X", ".", "shape", ")", ":", "\n", "        ", "camera_params", "=", "camera_params", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "f", "=", "camera_params", "[", "...", ",", ":", "2", "]", "\n", "c", "=", "camera_params", "[", "...", ",", "2", ":", "4", "]", "\n", "\n", "XX", "=", "torch", ".", "clamp", "(", "X", "[", "...", ",", ":", "2", "]", "/", "X", "[", "...", ",", "2", ":", "]", ",", "min", "=", "-", "1", ",", "max", "=", "1", ")", "\n", "\n", "return", "f", "*", "XX", "+", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.MixedDataset.__init__": [[36, 61], ["enumerate", "prettytable.PrettyTable", "prettytable.PrettyTable.add_row", "prettytable.PrettyTable.add_row", "prettytable.PrettyTable.add_row", "numpy.array().cumsum", "prettytable.PrettyTable.add_row", "prettytable.PrettyTable.add_row", "print", "min", "logging.info", "print", "mixed_dataset.MixedDataset.lengths.append", "mixed_dataset.MixedDataset.partition.append", "mixed_dataset.MixedDataset.ID_num_list.append", "int", "config.args", "sum", "len", "expect_length.tolist", "numpy.array", "mixed_dataset.MixedDataset.partition.astype().tolist", "expect_length.max", "len", "zip", "sample_prob_dict.values", "sum", "sample_prob_dict.values", "numpy.array", "numpy.array", "sample_prob_dict.values", "mixed_dataset.MixedDataset.partition.astype"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["    ", "def", "__init__", "(", "self", ",", "datasets_used", ",", "sample_prob_dict", ",", "loading_modes", "=", "None", ",", "max_length", "=", "args", "(", ")", ".", "batch_size", "*", "10000", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "loading_modes", "is", "None", ":", "\n", "            ", "self", ".", "datasets", "=", "[", "dataset_dict", "[", "ds", "]", "(", ")", "(", "**", "kwargs", ")", "for", "ds", "in", "datasets_used", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "datasets", "=", "[", "dataset_dict", "[", "ds", "]", "(", "mode", ")", "(", "**", "kwargs", ")", "for", "ds", ",", "mode", "in", "zip", "(", "datasets_used", ",", "loading_modes", ")", "]", "\n", "", "self", ".", "lengths", ",", "self", ".", "partition", ",", "self", ".", "ID_num_list", ",", "self", ".", "ID_num", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "0", "\n", "if", "not", "1.001", ">", "sum", "(", "sample_prob_dict", ".", "values", "(", ")", ")", ">", "0.999", ":", "\n", "            ", "print", "(", "'CAUTION: The sum of sampling rates is supposed to be 1, while currently we have {}, \\n please properly set the sample_prob_dict {} in config.yml'", ".", "format", "(", "sum", "(", "sample_prob_dict", ".", "values", "(", ")", ")", ",", "sample_prob_dict", ".", "values", "(", ")", ")", ")", "\n", "", "for", "ds_idx", ",", "ds_name", "in", "enumerate", "(", "datasets_used", ")", ":", "\n", "            ", "self", ".", "lengths", ".", "append", "(", "len", "(", "self", ".", "datasets", "[", "ds_idx", "]", ")", ")", "\n", "self", ".", "partition", ".", "append", "(", "sample_prob_dict", "[", "ds_name", "]", ")", "\n", "self", ".", "ID_num_list", ".", "append", "(", "self", ".", "ID_num", ")", "\n", "self", ".", "ID_num", "+=", "self", ".", "datasets", "[", "ds_idx", "]", ".", "ID_num", "\n", "", "dataset_info_table", "=", "PrettyTable", "(", "[", "' '", "]", "+", "datasets_used", ")", "\n", "dataset_info_table", ".", "add_row", "(", "[", "'Length'", "]", "+", "self", ".", "lengths", ")", "\n", "dataset_info_table", ".", "add_row", "(", "[", "'Sample Prob.'", "]", "+", "self", ".", "partition", ")", "\n", "expect_length", "=", "(", "np", ".", "array", "(", "self", ".", "lengths", ")", "/", "np", ".", "array", "(", "self", ".", "partition", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "dataset_info_table", ".", "add_row", "(", "[", "'Expected length'", "]", "+", "expect_length", ".", "tolist", "(", ")", ")", "\n", "self", ".", "partition", "=", "np", ".", "array", "(", "self", ".", "partition", ")", ".", "cumsum", "(", ")", "\n", "dataset_info_table", ".", "add_row", "(", "[", "'Accum. Prob.'", "]", "+", "self", ".", "partition", ".", "astype", "(", "np", ".", "float16", ")", ".", "tolist", "(", ")", ")", "\n", "dataset_info_table", ".", "add_row", "(", "[", "'Accum. ID.'", "]", "+", "self", ".", "ID_num_list", ")", "\n", "print", "(", "dataset_info_table", ")", "\n", "self", ".", "total_length", "=", "min", "(", "int", "(", "expect_length", ".", "max", "(", ")", ")", ",", "max_length", ")", "\n", "logging", ".", "info", "(", "'All dataset length: {}'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.MixedDataset._get_ID_num_": [[62, 64], ["None"], "methods", ["None"], ["", "def", "_get_ID_num_", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ID_num", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.MixedDataset.__getitem__": [[65, 84], ["float", "float", "len", "int", "int", "min", "random.randint"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "p", "=", "float", "(", "index", ")", "/", "float", "(", "self", ".", "total_length", ")", "\n", "dataset_id", "=", "len", "(", "self", ".", "partition", ")", "-", "(", "self", ".", "partition", ">", "p", ")", ".", "sum", "(", ")", "\n", "\n", "upper_bound", "=", "self", ".", "partition", "[", "dataset_id", "]", "\n", "lower_bound", "=", "self", ".", "partition", "[", "dataset_id", "-", "1", "]", "if", "dataset_id", ">", "0", "else", "0", "\n", "sample_prob", "=", "(", "p", "-", "lower_bound", ")", "/", "(", "upper_bound", "-", "lower_bound", ")", "\n", "\n", "assert", "sample_prob", "<", "1", ",", "'sampling rate within a dataset is surpposed to be less than 1.'", "\n", "\n", "if", "(", "upper_bound", "-", "lower_bound", ")", "*", "self", ".", "total_length", "<", "self", ".", "lengths", "[", "dataset_id", "]", ":", "\n", "# due to the total length might be smaller than self.lengths[dataset_id]", "\n", "            ", "omit_internal", "=", "self", ".", "lengths", "[", "dataset_id", "]", "//", "(", "(", "upper_bound", "-", "lower_bound", ")", "*", "self", ".", "total_length", ")", "\n", "index_sample", "=", "int", "(", "min", "(", "self", ".", "lengths", "[", "dataset_id", "]", "*", "sample_prob", "+", "random", ".", "randint", "(", "0", ",", "omit_internal", ")", ",", "self", ".", "lengths", "[", "dataset_id", "]", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "index_sample", "=", "int", "(", "sample_prob", "*", "self", ".", "lengths", "[", "dataset_id", "]", ")", "\n", "", "data", "=", "self", ".", "datasets", "[", "dataset_id", "]", "[", "index_sample", "]", "\n", "data", "[", "'subject_ids'", "]", "[", "data", "[", "'subject_ids'", "]", "!=", "-", "1", "]", "+=", "self", ".", "ID_num_list", "[", "dataset_id", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.MixedDataset.__len__": [[85, 87], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_length", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__init__": [[89, 96], ["print", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "None", ",", "loading_mode", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "dataset", "in", "dataset_dict", ",", "print", "(", "'dataset {} not found while creating data loader!'", ".", "format", "(", "dataset", ")", ")", "\n", "if", "loading_mode", "is", "None", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset_dict", "[", "dataset", "]", "(", ")", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset_dict", "[", "dataset", "]", "(", "loading_mode", ")", "(", "**", "kwargs", ")", "\n", "", "self", ".", "length", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__getitem__": [[97, 99], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.mixed_dataset.SingleDataset.__len__": [[100, 102], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.coco14.COCO14": [[10, 199], ["super().__init__", "coco14..init_coco", "logging.info", "os.path.join", "os.path.join", "os.path.exists", "list", "constants.joint_mapping", "os.path.join", "os.path.exists", "coco14.._get_image_path", "enumerate", "coco14..regress_kp3d_from_smpl", "range", "np.savez", "os.path.join", "os.path.join", "os.path.join", "coco.getAnnIds", "coco.loadAnns", "cv2.imread", "len", "enumerate", "np.array", "np.zeros", "np.zeros", "pycocotools.coco.COCO", "list", "coco14..pack_annots", "coco14..annots.keys", "SMPLR", "coco14..load_eft_annots", "np.savez", "cv2.imread", "coco14..map_kps", "kp2ds.append", "valid_mask_2d.append", "valid_mask_3d.append", "np.array", "np.array", "np.array", "np.array", "lap.lapjv", "enumerate", "np.asarray", "np.arange", "json.load", "os.path.basename", "np.array", "np.reshape", "np.reshape", "quaternion.as_rotation_vector().reshape", "coco14..eft_annots[].append", "len", "coco14..coco.getAnnIds", "coco14.._get_image_path", "coco14.._get_image_path", "np.array().reshape", "coco14..append", "coco.loadImgs", "coco.loadImgs", "len", "coco14.._get_anno_file_name", "coco14..coco.imgs.keys", "os.path.join", "np.array.append", "pose_list.append", "betas_list.append", "np.concatenate", "np.array", "len", "open", "np.array", "np.array", "len", "coco14..coco.loadAnns", "coco14..get_joints", "print", "coco.loadImgs", "joint[].sum", "pycocotools.mask.frPyObjects", "pycocotools.mask.frPyObjects", "pycocotools.mask.decode", "np.load", "np.load", "len", "np.linalg.norm", "np.asarray.append", "range", "quaternion.as_rotation_vector", "len", "np.array", "pycocotools.mask.decode", "pycocotools.mask.frPyObjects", "len", "quaternion.from_rotation_matrix", "np.max", "np.argmax", "pycocotools.mask.decode", "joints[].sum", "joints[].sum", "print", "valid_pt.max", "valid_pt.min", "coco14.._calc_center_", "coco14..coco.loadImgs"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.regress_kp3d_from_smpl", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.posetrack21.pack_annots", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base.map_kps", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.image_base.Image_base._calc_center_", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs"], ["def", "COCO14", "(", "base_class", "=", "default_mode", ")", ":", "\n", "    ", "class", "COCO14", "(", "Base_Classes", "[", "base_class", "]", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_flag", "=", "True", ",", "high_resolution", "=", "False", ",", "regress_smpl", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", "COCO14", ",", "self", ")", ".", "__init__", "(", "train_flag", ",", "regress_smpl", ")", "\n", "self", ".", "min_pts_required", "=", "2", "\n", "self", ".", "init_coco", "(", ")", "\n", "logging", ".", "info", "(", "'COCO 2D keypoint data has been loaded, total {} samples'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "\n", "", "def", "init_coco", "(", "self", ")", ":", "\n", "            ", "self", ".", "name", "=", "'COCO'", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_folder", ",", "\"coco\"", ")", "\n", "self", ".", "dataset_name", "=", "'train2014'", "if", "self", ".", "train_flag", "else", "'val2014'", "\n", "self", ".", "annots_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'annots_{}.npz'", ".", "format", "(", "self", ".", "dataset_name", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "annots_file_path", ")", ":", "\n", "                ", "self", ".", "annots", "=", "np", ".", "load", "(", "self", ".", "annots_file_path", ",", "allow_pickle", "=", "True", ")", "[", "'annot'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "coco", "=", "COCO", "(", "self", ".", "_get_anno_file_name", "(", ")", ")", "\n", "self", ".", "file_paths", "=", "list", "(", "self", ".", "coco", ".", "imgs", ".", "keys", "(", ")", ")", "\n", "self", ".", "annots", "=", "self", ".", "pack_annots", "(", ")", "\n", "", "self", ".", "file_paths", "=", "list", "(", "self", ".", "annots", ".", "keys", "(", ")", ")", "\n", "self", ".", "joint_mapper", "=", "constants", ".", "joint_mapping", "(", "constants", ".", "COCO_17", ",", "constants", ".", "SMPL_ALL_54", ")", "\n", "#self.joint3d_mapper = constants.joint_mapping(constants.SMPL_ALL_54, constants.SMPL_ALL_54)", "\n", "if", "self", ".", "regress_smpl", ":", "\n", "# drop this, because current code can't handle partial 3D poses are lacking", "\n", "                ", "self", ".", "smplr", "=", "SMPLR", "(", "use_gender", "=", "False", ")", "\n", "self", ".", "root_inds", "=", "None", "\n", "\n", "", "load_eft_annots_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'eft_annots.npz'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "load_eft_annots_path", ")", ":", "\n", "                ", "self", ".", "eft_annots", "=", "np", ".", "load", "(", "load_eft_annots_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "load_eft_annots", "(", "os", ".", "path", ".", "join", "(", "config", ".", "project_dir", ",", "'data/eft_fit/COCO2014-All-ver01.json'", ")", ")", "\n", "np", ".", "savez", "(", "load_eft_annots_path", ",", "annots", "=", "self", ".", "eft_annots", ")", "\n", "\n", "", "", "def", "get_image_info", "(", "self", ",", "index", ")", ":", "\n", "            ", "img_name", "=", "self", ".", "file_paths", "[", "index", "%", "len", "(", "self", ".", "file_paths", ")", "]", "\n", "imgpath", "=", "self", ".", "_get_image_path", "(", "img_name", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "imgpath", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "#mask = self.get_exclude_mask(anno, index)[:,:,np.newaxis].astype(np.float32)", "\n", "\n", "kp2ds", ",", "valid_mask_2d", ",", "valid_mask_3d", ",", "params", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "None", "\n", "\n", "for", "idx", ",", "joint", "in", "enumerate", "(", "self", ".", "annots", "[", "img_name", "]", ")", ":", "\n", "                ", "joint", "=", "self", ".", "map_kps", "(", "joint", ",", "maps", "=", "self", ".", "joint_mapper", ")", "\n", "kp2ds", ".", "append", "(", "joint", ")", "\n", "valid_mask_2d", ".", "append", "(", "[", "True", ",", "True", ",", "True", "]", ")", "\n", "valid_mask_3d", ".", "append", "(", "self", ".", "default_valid_mask_3d", ")", "\n", "", "valid_mask_2d", ",", "valid_mask_3d", "=", "np", ".", "array", "(", "valid_mask_2d", ")", ",", "np", ".", "array", "(", "valid_mask_3d", ")", "\n", "\n", "if", "img_name", "in", "self", ".", "eft_annots", "and", "self", ".", "use_eft", ":", "\n", "                ", "eft_annot", "=", "self", ".", "eft_annots", "[", "img_name", "]", "\n", "bbox_center_list", ",", "pose_list", ",", "betas_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "bbox_center", ",", "pose", ",", "betas", "in", "eft_annot", ":", "\n", "                    ", "bbox_center_list", ".", "append", "(", "bbox_center", ")", "\n", "pose_list", ".", "append", "(", "pose", "[", ":", "66", "]", ")", "\n", "betas_list", ".", "append", "(", "betas", ")", "\n", "", "bbox_center_list", "=", "np", ".", "array", "(", "bbox_center_list", ")", "\n", "cdist", "=", "np", ".", "array", "(", "[", "np", ".", "linalg", ".", "norm", "(", "bbox_center_list", "-", "self", ".", "_calc_center_", "(", "kp2d", ")", "[", ":", "2", "]", "[", "None", "]", ",", "axis", "=", "-", "1", ")", "for", "kp2d", "in", "kp2ds", "]", ")", "\n", "matches", "=", "[", "]", "\n", "cost", ",", "x", ",", "y", "=", "lap", ".", "lapjv", "(", "cdist", ",", "extend_cost", "=", "True", ")", "\n", "for", "ix", ",", "mx", "in", "enumerate", "(", "x", ")", ":", "\n", "                    ", "if", "mx", ">=", "0", ":", "\n", "                        ", "matches", ".", "append", "(", "[", "ix", ",", "mx", "]", ")", "\n", "", "", "matches", "=", "np", ".", "asarray", "(", "matches", ")", "\n", "\n", "params", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "kp2ds", ")", ")", "]", "\n", "for", "kid", ",", "pid", "in", "matches", ":", "\n", "                    ", "matched_param", "=", "np", ".", "concatenate", "(", "[", "pose_list", "[", "pid", "]", ",", "betas_list", "[", "pid", "]", "]", ")", "\n", "# when comes to crowds, this will lead to a lot duplicated matching to the same smpl parameters.", "\n", "params", "[", "kid", "]", "=", "matched_param", "\n", "valid_mask_3d", "[", "kid", "]", "=", "np", ".", "array", "(", "[", "self", ".", "regress_smpl", ",", "True", ",", "True", ",", "False", ",", "False", ",", "True", "]", ")", "\n", "\n", "", "", "kp3ds", "=", "self", ".", "regress_kp3d_from_smpl", "(", "params", ")", "\n", "\n", "# vmask_2d | 0: kp2d/bbox | 1: track ids | 2: detect all people in image", "\n", "# vmask_3d | 0: kp3d | 2: smpl global orient | 3: smpl body pose | 4: smpl body shape | 5: smpl verts | 6: depth", "\n", "img_info", "=", "{", "'imgpath'", ":", "imgpath", ",", "'image'", ":", "image", ",", "'kp2ds'", ":", "kp2ds", ",", "'track_ids'", ":", "np", ".", "arange", "(", "len", "(", "kp2ds", ")", ")", ",", "'vmask_2d'", ":", "valid_mask_2d", ",", "'vmask_3d'", ":", "valid_mask_3d", ",", "'kp3ds'", ":", "kp3ds", ",", "'params'", ":", "params", ",", "'root_trans'", ":", "None", ",", "'verts'", ":", "None", ",", "'img_size'", ":", "image", ".", "shape", "[", ":", "2", "]", ",", "'ds'", ":", "'coco'", "}", "\n", "\n", "return", "img_info", "\n", "\n", "", "def", "load_eft_annots", "(", "self", ",", "annot_file_path", ")", ":", "\n", "            ", "self", ".", "eft_annots", "=", "{", "}", "\n", "annots", "=", "json", ".", "load", "(", "open", "(", "annot_file_path", ",", "'r'", ")", ")", "[", "'data'", "]", "\n", "for", "eft_data", "in", "annots", ":", "\n", "#Get raw image path", "\n", "                ", "imgFullPath", "=", "eft_data", "[", "'imageName'", "]", "\n", "imgName", "=", "os", ".", "path", ".", "basename", "(", "imgFullPath", ")", "\n", "\n", "#EFT data", "\n", "bbox_scale", "=", "eft_data", "[", "'bbox_scale'", "]", "\n", "bbox_center", "=", "eft_data", "[", "'bbox_center'", "]", "\n", "\n", "pred_camera", "=", "np", ".", "array", "(", "eft_data", "[", "'parm_cam'", "]", ")", "\n", "pred_betas", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "eft_data", "[", "'parm_shape'", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "(", "10", ")", ")", "#(10,)", "\n", "pred_pose_rotmat", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "eft_data", "[", "'parm_pose'", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "(", "24", ",", "3", ",", "3", ")", ")", "#(24,3,3)", "\n", "pred_pose", "=", "quaternion", ".", "as_rotation_vector", "(", "quaternion", ".", "from_rotation_matrix", "(", "pred_pose_rotmat", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "imgName", "not", "in", "self", ".", "eft_annots", ":", "\n", "                    ", "self", ".", "eft_annots", "[", "imgName", "]", "=", "[", "]", "\n", "", "self", ".", "eft_annots", "[", "imgName", "]", ".", "append", "(", "[", "bbox_center", ",", "pred_pose", ",", "pred_betas", "]", ")", "\n", "\n", "", "", "def", "pack_annots", "(", "self", ")", ":", "\n", "            ", "annots", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "img_id", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ",", "iscrowd", "=", "None", ")", "\n", "if", "len", "(", "ann_ids", ")", ">", "0", ":", "\n", "                    ", "annot", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "joints", "=", "self", ".", "get_joints", "(", "annot", ")", "\n", "if", "len", "(", "joints", ")", ">", "0", ":", "\n", "                        ", "if", "np", ".", "max", "(", "joints", "[", ":", ",", ":", ",", "-", "1", "]", ".", "sum", "(", "-", "1", ")", ")", ">", "self", ".", "min_pts_required", ":", "\n", "                            ", "idx", "=", "np", ".", "argmax", "(", "joints", "[", ":", ",", ":", ",", "-", "1", "]", ".", "sum", "(", "-", "1", ")", ")", "\n", "valid_pt", ",", "valid_idx", "=", "joints", "[", "idx", ",", ":", ",", "1", "]", ",", "joints", "[", "idx", ",", ":", ",", "-", "1", "]", ">", "0", "\n", "valid_pt", "=", "valid_pt", "[", "valid_idx", "]", "\n", "if", "(", "valid_pt", ".", "max", "(", ")", "-", "valid_pt", ".", "min", "(", ")", ")", ">", "128", ":", "\n", "                                ", "annot", "=", "[", "obj", "for", "obj", "in", "annot", "if", "obj", "[", "'iscrowd'", "]", "==", "0", "or", "obj", "[", "'num_keypoints'", "]", ">", "0", "]", "\n", "file_name", "=", "self", ".", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "annots", "[", "file_name", "]", "=", "joints", "\n", "print", "(", "file_name", ")", "\n", "", "", "", "", "if", "index", "%", "1000", "==", "0", ":", "\n", "                    ", "print", "(", "index", ")", "\n", "", "", "np", ".", "savez", "(", "self", ".", "annots_file_path", ",", "annot", "=", "annots", ")", "\n", "return", "annots", "\n", "\n", "", "def", "_get_anno_file_name", "(", "self", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'annotations'", ",", "'person_keypoints_{}.json'", ".", "format", "(", "self", ".", "dataset_name", ")", ")", "\n", "\n", "", "def", "_get_image_path", "(", "self", ",", "file_name", ")", ":", "\n", "            ", "images_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "images_dir", ",", "self", ".", "dataset_name", ",", "file_name", ")", "\n", "\n", "", "def", "get_annot", "(", "self", ",", "index", ")", ":", "\n", "            ", "coco", "=", "self", ".", "coco", "\n", "img_id", "=", "self", ".", "file_paths", "[", "index", "]", "\n", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "target", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "\n", "file_name", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "self", ".", "_get_image_path", "(", "file_name", ")", ",", "\n", "cv2", ".", "IMREAD_COLOR", "|", "cv2", ".", "IMREAD_IGNORE_ORIENTATION", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "return", "img", ",", "target", ",", "self", ".", "_get_image_path", "(", "file_name", ")", "\n", "\n", "", "def", "get_joints", "(", "self", ",", "anno", ")", ":", "\n", "            ", "num_people", "=", "len", "(", "anno", ")", "\n", "joints", "=", "[", "]", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "anno", ")", ":", "\n", "                ", "joint", "=", "np", ".", "array", "(", "obj", "[", "'keypoints'", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", "\n", "if", "joint", "[", ":", ",", "-", "1", "]", ".", "sum", "(", ")", "<", "1", ":", "\n", "                    ", "continue", "\n", "", "joints", ".", "append", "(", "joint", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "joints", ")", "\n", "\n", "", "def", "get_mask", "(", "self", ",", "anno", ",", "idx", ")", ":", "\n", "# mask of crowd or person without annotated keypoint", "\n", "            ", "coco", "=", "self", ".", "coco", "\n", "img_info", "=", "coco", ".", "loadImgs", "(", "self", ".", "file_paths", "[", "idx", "]", ")", "[", "0", "]", "\n", "m", "=", "np", ".", "zeros", "(", "(", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", ")", "\n", "for", "obj", "in", "anno", ":", "\n", "                ", "if", "obj", "[", "'num_keypoints'", "]", ">", "self", ".", "min_pts_required", "and", "not", "obj", "[", "'iscrowd'", "]", ":", "\n", "                    ", "rles", "=", "pycocotools", ".", "mask", ".", "frPyObjects", "(", "\n", "obj", "[", "'segmentation'", "]", ",", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", "\n", "for", "rle", "in", "rles", ":", "\n", "                        ", "m", "+=", "pycocotools", ".", "mask", ".", "decode", "(", "rle", ")", "\n", "", "", "", "return", "m", ">", "0", "\n", "\n", "", "def", "get_exclude_mask", "(", "self", ",", "anno", ",", "idx", ")", ":", "\n", "# mask of crowd or person without annotated keypoint", "\n", "            ", "coco", "=", "self", ".", "coco", "\n", "img_info", "=", "coco", ".", "loadImgs", "(", "self", ".", "file_paths", "[", "idx", "]", ")", "[", "0", "]", "\n", "m", "=", "np", ".", "zeros", "(", "(", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", ")", "\n", "\n", "for", "obj", "in", "anno", ":", "\n", "                ", "if", "obj", "[", "'iscrowd'", "]", ":", "\n", "                    ", "rle", "=", "pycocotools", ".", "mask", ".", "frPyObjects", "(", "\n", "obj", "[", "'segmentation'", "]", ",", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", "\n", "m", "+=", "pycocotools", ".", "mask", ".", "decode", "(", "rle", ")", "\n", "", "elif", "obj", "[", "'num_keypoints'", "]", "==", "0", ":", "\n", "                    ", "rles", "=", "pycocotools", ".", "mask", ".", "frPyObjects", "(", "\n", "obj", "[", "'segmentation'", "]", ",", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", "\n", "for", "rle", "in", "rles", ":", "\n", "                        ", "m", "+=", "pycocotools", ".", "mask", ".", "decode", "(", "rle", ")", "\n", "\n", "", "", "", "return", "m", "<", "0.5", "\n", "", "", "return", "COCO14", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.preprocess.h36m_extract_frames.extract_imgs": [[13, 47], ["glob.glob", "os.path.join", "print", "os.path.basename", "os.path.basename.split", "os.path.join", "print", "print", "cv2.VideoCapture", "cv2.VideoCapture.release", "cv2.VideoCapture.read", "cv2.imwrite", "print", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["def", "extract_imgs", "(", "subject_id", ",", "src_folder", ",", "out_folder", ")", ":", "\n", "    ", "video_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "src_folder", ",", "subject_id", ",", "'Videos'", ",", "'*.mp4'", ")", ")", "\n", "for", "video_file", "in", "video_files", ":", "\n", "        ", "if", "\"_ALL\"", "in", "video_file", ":", "\n", "            ", "continue", "\n", "", "print", "(", "\"video_file\"", ",", "video_file", ")", "\n", "video_name", "=", "os", ".", "path", ".", "basename", "(", "video_file", ")", "\n", "action_name", ",", "cam_str", ",", "_", "=", "video_name", ".", "split", "(", "'.'", ")", "\n", "cam_id", "=", "cam_dict", "[", "cam_str", "]", "\n", "target_name", "=", "os", ".", "path", ".", "join", "(", "out_folder", ",", "'{}_{}_{}'", ".", "format", "(", "subject_id", ",", "action_name", ",", "cam_id", ")", ")", "\n", "print", "(", "\"target_name \"", ",", "target_name", ")", "\n", "print", "(", "\"video_file\"", ",", "video_file", ")", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "video_file", ")", "\n", "frame_dex", "=", "-", "1", "\n", "dex", "=", "0", "\n", "frame_num", "=", "0", "#", "\n", "while", "(", "1", ")", ":", "\n", "            ", "frame_dex", "=", "frame_dex", "+", "1", "\n", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "if", "frame_dex", "%", "5", "!=", "0", ":", "\n", "                ", "continue", "\n", "", "if", "frame_dex", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "ret", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "target_name", "+", "'_'", "+", "str", "(", "dex", ")", "+", "'.jpg'", ",", "frame", ")", "\n", "print", "(", "\"target_name \"", ",", "target_name", "+", "'_'", "+", "str", "(", "dex", ")", "+", "'.jpg'", ")", "\n", "dex", "=", "dex", "+", "1", "\n", "if", "dex", ">", "20", ":", "\n", "                    ", "break", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"video_file end\"", ",", "video_file", ")", "\n", "break", "\n", "", "", "cap", ".", "release", "(", ")", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.preprocess.h36m_extract_frames.main": [[49, 58], ["print", "os.makedirs", "len", "print", "h36m_extract_frames.extract_imgs"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.preprocess.h36m_extract_frames.extract_imgs"], ["", "def", "main", "(", ")", ":", "\n", "    ", "assert", "len", "(", "sys", ".", "argv", ")", "==", "3", ",", "print", "(", "'plese run the code : python h36m_extract_frames.py h36m_video_path image_save_path'", ")", "\n", "# set the path to image folder (archives) of human3.6M dataset here", "\n", "src_folder", "=", "sys", ".", "argv", "[", "2", "]", "#\"archives\" # archives/S1/Videos/Directions 1.54138969.mp4 .....", "\n", "out_folder", "=", "sys", ".", "argv", "[", "3", "]", "#\"images\"", "\n", "os", ".", "makedirs", "(", "out_folder", ",", "exist_ok", "=", "True", ")", "\n", "for", "subject_id", "in", "subject_list", ":", "\n", "        ", "print", "(", "'Processing {}'", ".", "format", "(", "subject_id", ")", ")", "\n", "extract_imgs", "(", "subject_id", ",", "src_folder", ",", "out_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.matching.merge_matches": [[11, 26], ["numpy.asarray", "numpy.asarray", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "mask.nonzero", "list", "tuple", "tuple", "zip", "numpy.ones", "numpy.ones", "set", "set", "set", "set", "len", "len", "range", "range"], "function", ["None"], ["def", "merge_matches", "(", "m1", ",", "m2", ",", "shape", ")", ":", "\n", "    ", "O", ",", "P", ",", "Q", "=", "shape", "\n", "m1", "=", "np", ".", "asarray", "(", "m1", ")", "\n", "m2", "=", "np", ".", "asarray", "(", "m2", ")", "\n", "\n", "M1", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "m1", ")", ")", ",", "(", "m1", "[", ":", ",", "0", "]", ",", "m1", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "O", ",", "P", ")", ")", "\n", "M2", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "m2", ")", ")", ",", "(", "m2", "[", ":", ",", "0", "]", ",", "m2", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "P", ",", "Q", ")", ")", "\n", "\n", "mask", "=", "M1", "*", "M2", "\n", "match", "=", "mask", ".", "nonzero", "(", ")", "\n", "match", "=", "list", "(", "zip", "(", "match", "[", "0", "]", ",", "match", "[", "1", "]", ")", ")", "\n", "unmatched_O", "=", "tuple", "(", "set", "(", "range", "(", "O", ")", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "match", "]", ")", ")", "\n", "unmatched_Q", "=", "tuple", "(", "set", "(", "range", "(", "Q", ")", ")", "-", "set", "(", "[", "j", "for", "i", ",", "j", "in", "match", "]", ")", ")", "\n", "\n", "return", "match", ",", "unmatched_O", ",", "unmatched_Q", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.matching._indices_to_matches": [[28, 37], ["tuple", "tuple", "tuple", "set", "set", "set", "set", "zip", "range", "range"], "function", ["None"], ["", "def", "_indices_to_matches", "(", "cost_matrix", ",", "indices", ",", "thresh", ")", ":", "\n", "    ", "matched_cost", "=", "cost_matrix", "[", "tuple", "(", "zip", "(", "*", "indices", ")", ")", "]", "\n", "matched_mask", "=", "(", "matched_cost", "<=", "thresh", ")", "\n", "\n", "matches", "=", "indices", "[", "matched_mask", "]", "\n", "unmatched_a", "=", "tuple", "(", "set", "(", "range", "(", "cost_matrix", ".", "shape", "[", "0", "]", ")", ")", "-", "set", "(", "matches", "[", ":", ",", "0", "]", ")", ")", "\n", "unmatched_b", "=", "tuple", "(", "set", "(", "range", "(", "cost_matrix", ".", "shape", "[", "1", "]", ")", ")", "-", "set", "(", "matches", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "return", "matches", ",", "unmatched_a", ",", "unmatched_b", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.matching.linear_assignment": [[39, 51], ["lap.lapjv", "enumerate", "numpy.asarray", "numpy.where", "numpy.where", "numpy.empty", "tuple", "tuple", "np.asarray.append", "range", "range"], "function", ["None"], ["", "def", "linear_assignment", "(", "cost_matrix", ",", "thresh", ")", ":", "\n", "    ", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "np", ".", "empty", "(", "(", "0", ",", "2", ")", ",", "dtype", "=", "int", ")", ",", "tuple", "(", "range", "(", "cost_matrix", ".", "shape", "[", "0", "]", ")", ")", ",", "tuple", "(", "range", "(", "cost_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "matches", ",", "unmatched_a", ",", "unmatched_b", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "cost", ",", "x", ",", "y", "=", "lap", ".", "lapjv", "(", "cost_matrix", ",", "extend_cost", "=", "True", ",", "cost_limit", "=", "thresh", ")", "\n", "for", "ix", ",", "mx", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "if", "mx", ">=", "0", ":", "\n", "            ", "matches", ".", "append", "(", "[", "ix", ",", "mx", "]", ")", "\n", "", "", "unmatched_a", "=", "np", ".", "where", "(", "x", "<", "0", ")", "[", "0", "]", "\n", "unmatched_b", "=", "np", ".", "where", "(", "y", "<", "0", ")", "[", "0", "]", "\n", "matches", "=", "np", ".", "asarray", "(", "matches", ")", "\n", "return", "matches", ",", "unmatched_a", ",", "unmatched_b", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.matching.ious": [[53, 71], ["numpy.zeros", "bbox_ious", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "len", "len"], "function", ["None"], ["", "def", "ious", "(", "atlbrs", ",", "btlbrs", ")", ":", "\n", "    ", "\"\"\"\n    Compute cost based on IoU\n    :type atlbrs: list[tlbr] | np.ndarray\n    :type atlbrs: list[tlbr] | np.ndarray\n\n    :rtype ious np.ndarray\n    \"\"\"", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "len", "(", "atlbrs", ")", ",", "len", "(", "btlbrs", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "ious", ".", "size", "==", "0", ":", "\n", "        ", "return", "ious", "\n", "\n", "", "ious", "=", "bbox_ious", "(", "\n", "np", ".", "ascontiguousarray", "(", "atlbrs", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "btlbrs", ",", "dtype", "=", "np", ".", "float", ")", "\n", ")", "\n", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.matching.iou_distance": [[73, 92], ["matching.ious", "isinstance", "isinstance", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.ious"], ["", "def", "iou_distance", "(", "atracks", ",", "btracks", ")", ":", "\n", "    ", "\"\"\"\n    Compute cost based on IoU\n    :type atracks: list[STrack]\n    :type btracks: list[STrack]\n\n    :rtype cost_matrix np.ndarray\n    \"\"\"", "\n", "\n", "if", "(", "len", "(", "atracks", ")", ">", "0", "and", "isinstance", "(", "atracks", "[", "0", "]", ",", "np", ".", "ndarray", ")", ")", "or", "(", "len", "(", "btracks", ")", ">", "0", "and", "isinstance", "(", "btracks", "[", "0", "]", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "atlbrs", "=", "atracks", "\n", "btlbrs", "=", "btracks", "\n", "", "else", ":", "\n", "        ", "atlbrs", "=", "[", "track", ".", "tlbr", "for", "track", "in", "atracks", "]", "\n", "btlbrs", "=", "[", "track", ".", "tlbr", "for", "track", "in", "btracks", "]", "\n", "", "_ious", "=", "ious", "(", "atlbrs", ",", "btlbrs", ")", "\n", "cost_matrix", "=", "1", "-", "_ious", "\n", "\n", "return", "cost_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.matching.embedding_distance": [[93, 110], ["numpy.zeros", "numpy.asarray", "numpy.asarray", "numpy.maximum", "scipy.spatial.distance.cdist", "len", "len"], "function", ["None"], ["", "def", "embedding_distance", "(", "tracks", ",", "detections", ",", "metric", "=", "'cosine'", ")", ":", "\n", "    ", "\"\"\"\n    :param tracks: list[STrack]\n    :param detections: list[BaseTrack]\n    :param metric:\n    :return: cost_matrix np.ndarray\n    \"\"\"", "\n", "\n", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "len", "(", "detections", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "det_features", "=", "np", ".", "asarray", "(", "[", "track", ".", "curr_feat", "for", "track", "in", "detections", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "#for i, track in enumerate(tracks):", "\n", "#cost_matrix[i, :] = np.maximum(0.0, cdist(track.smooth_feat.reshape(1,-1), det_features, metric))", "\n", "track_features", "=", "np", ".", "asarray", "(", "[", "track", ".", "smooth_feat", "for", "track", "in", "tracks", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "cost_matrix", "=", "np", ".", "maximum", "(", "0.0", ",", "cdist", "(", "track_features", ",", "det_features", ",", "metric", ")", ")", "# Nomalized features", "\n", "return", "cost_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.matching.center_distance": [[111, 132], ["numpy.zeros", "numpy.asarray", "enumerate", "kf.gating_distance", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.gating_distance"], ["", "def", "center_distance", "(", "kf", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ",", "lambda_", "=", "0.98", ")", ":", "\n", "    ", "\"\"\"\n    :param tracks: list[STrack]\n    :param detections: list[BaseTrack]\n    :param metric:\n    :return: cost_matrix np.ndarray\n    \"\"\"", "\n", "\n", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "len", "(", "detections", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "\n", "", "gating_dim", "=", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "center", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ",", "metric", "=", "'maha'", ")", "\n", "cost_matrix", "[", "row", ",", "gating_distance", ">", "gating_threshold", "]", "=", "np", ".", "inf", "\n", "cost_matrix", "[", "row", "]", "=", "lambda_", "*", "cost_matrix", "[", "row", "]", "+", "(", "1", "-", "lambda_", ")", "*", "gating_distance", "\n", "", "return", "cost_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.matching.gate_cost_matrix": [[134, 146], ["numpy.zeros", "numpy.asarray", "enumerate", "kf.gating_distance", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.gating_distance"], ["", "def", "gate_cost_matrix", "(", "kf", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ")", ":", "\n", "    ", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "len", "(", "detections", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "gating_dim", "=", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "center", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ")", "\n", "#cost_matrix[row, gating_distance > gating_threshold] = np.inf", "\n", "", "return", "cost_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.matching.fuse_motion": [[148, 160], ["numpy.asarray", "enumerate", "kf.gating_distance"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.gating_distance"], ["", "def", "fuse_motion", "(", "kf", ",", "cost_matrix", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ",", "lambda_", "=", "0.98", ")", ":", "\n", "    ", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "gating_dim", "=", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "center", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ",", "metric", "=", "'maha'", ")", "\n", "cost_matrix", "[", "row", ",", "gating_distance", ">", "gating_threshold", "]", "=", "np", ".", "inf", "\n", "cost_matrix", "[", "row", "]", "=", "lambda_", "*", "cost_matrix", "[", "row", "]", "+", "(", "1", "-", "lambda_", ")", "*", "gating_distance", "\n", "", "return", "cost_matrix", "\n", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.STrack.__init__": [[23, 38], ["numpy.asarray", "tracker.STrack.update_poses", "collections.deque"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.STrack.update_poses"], ["def", "__init__", "(", "self", ",", "trans_uv", ",", "body_pose", ",", "conf", ",", "buffer_size", "=", "30", ")", ":", "\n", "\n", "# wait activate", "\n", "        ", "self", ".", "_centers", "=", "np", ".", "asarray", "(", "trans_uv", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "kalman_filter", "=", "None", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "None", ",", "None", "\n", "self", ".", "is_activated", "=", "False", "\n", "\n", "self", ".", "score", "=", "conf", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "\n", "self", ".", "smooth_feat", "=", "None", "\n", "self", ".", "update_poses", "(", "body_pose", ")", "\n", "self", ".", "features", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "buffer_size", ")", "\n", "self", ".", "alpha", "=", "0.9", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.STrack.update_poses": [[39, 51], ["None"], "methods", ["None"], ["", "def", "update_poses", "(", "self", ",", "body_pose", ")", ":", "\n", "        ", "self", ".", "body_pose", "=", "body_pose", "\n", "'''\n        feat /= np.linalg.norm(feat)\n        self.curr_feat = feat\n        if self.smooth_feat is None:\n            self.smooth_feat = feat\n        else:\n            self.smooth_feat = self.alpha * self.smooth_feat + (1 - self.alpha) * feat\n        self.features.append(feat)\n        self.smooth_feat /= np.linalg.norm(self.smooth_feat)\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.STrack.predict": [[52, 57], ["tracker.STrack.mean.copy", "tracker.STrack.kalman_filter.predict"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.predict"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "mean_state", "=", "self", ".", "mean", ".", "copy", "(", ")", "\n", "if", "self", ".", "state", "!=", "TrackState", ".", "Tracked", ":", "\n", "            ", "mean_state", "[", "7", "]", "=", "0", "\n", "", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "predict", "(", "mean_state", ",", "self", ".", "covariance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.STrack.multi_predict": [[58, 70], ["len", "numpy.asarray", "numpy.asarray", "enumerate", "STrack.shared_kalman.multi_predict", "enumerate", "zip", "st.mean.copy"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.multi_predict"], ["", "@", "staticmethod", "\n", "def", "multi_predict", "(", "stracks", ")", ":", "\n", "        ", "if", "len", "(", "stracks", ")", ">", "0", ":", "\n", "            ", "multi_mean", "=", "np", ".", "asarray", "(", "[", "st", ".", "mean", ".", "copy", "(", ")", "for", "st", "in", "stracks", "]", ")", "\n", "multi_covariance", "=", "np", ".", "asarray", "(", "[", "st", ".", "covariance", "for", "st", "in", "stracks", "]", ")", "\n", "for", "i", ",", "st", "in", "enumerate", "(", "stracks", ")", ":", "\n", "                ", "if", "st", ".", "state", "!=", "TrackState", ".", "Tracked", ":", "\n", "                    ", "multi_mean", "[", "i", "]", "[", "5", "]", "=", "0", "\n", "", "", "multi_mean", ",", "multi_covariance", "=", "STrack", ".", "shared_kalman", ".", "multi_predict", "(", "multi_mean", ",", "multi_covariance", ")", "\n", "for", "i", ",", "(", "mean", ",", "cov", ")", "in", "enumerate", "(", "zip", "(", "multi_mean", ",", "multi_covariance", ")", ")", ":", "\n", "                ", "stracks", "[", "i", "]", ".", "mean", "=", "mean", "\n", "stracks", "[", "i", "]", ".", "covariance", "=", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.STrack.activate": [[71, 84], ["tracker.STrack.next_id", "tracker.STrack.kalman_filter.initiate"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.next_id", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.initiate"], ["", "", "", "def", "activate", "(", "self", ",", "kalman_filter", ",", "frame_id", ")", ":", "\n", "        ", "\"\"\"Start a new tracklet\"\"\"", "\n", "self", ".", "kalman_filter", "=", "kalman_filter", "\n", "self", ".", "track_id", "=", "self", ".", "next_id", "(", ")", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "initiate", "(", "self", ".", "center", ")", "\n", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "if", "frame_id", "==", "1", ":", "\n", "            ", "self", ".", "is_activated", "=", "True", "\n", "#self.is_activated = True", "\n", "", "self", ".", "frame_id", "=", "frame_id", "\n", "self", ".", "start_frame", "=", "frame_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.STrack.re_activate": [[85, 95], ["tracker.STrack.kalman_filter.update", "tracker.STrack.next_id"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.next_id"], ["", "def", "re_activate", "(", "self", ",", "new_track", ",", "frame_id", ",", "new_id", "=", "False", ")", ":", "\n", "        ", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "update", "(", "\n", "self", ".", "mean", ",", "self", ".", "covariance", ",", "new_track", ".", "center", "\n", ")", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "self", ".", "is_activated", "=", "True", "\n", "self", ".", "frame_id", "=", "frame_id", "\n", "if", "new_id", ":", "\n", "            ", "self", ".", "track_id", "=", "self", ".", "next_id", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.STrack.update": [[96, 114], ["tracker.STrack.kalman_filter.update"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update"], ["", "", "def", "update", "(", "self", ",", "new_track", ",", "frame_id", ",", "update_feature", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Update a matched track\n        :type new_track: STrack\n        :type frame_id: int\n        :type update_feature: bool\n        :return:\n        \"\"\"", "\n", "self", ".", "frame_id", "=", "frame_id", "\n", "self", ".", "tracklet_len", "+=", "1", "\n", "\n", "new_center", "=", "new_track", ".", "center", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "update", "(", "\n", "self", ".", "mean", ",", "self", ".", "covariance", ",", "new_center", ")", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "self", ".", "is_activated", "=", "True", "\n", "\n", "self", ".", "score", "=", "new_track", ".", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.STrack.center": [[115, 125], ["tracker.STrack.mean[].copy", "numpy.concatenate", "tracker.STrack._centers.copy"], "methods", ["None"], ["", "@", "property", "\n", "# @jit(nopython=True)", "\n", "def", "center", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current position in bounding box format `(top left x, top left y,\n                width, height)`.\n        \"\"\"", "\n", "if", "self", ".", "mean", "is", "None", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "[", "self", ".", "_centers", ".", "copy", "(", ")", ",", "self", ".", "score", "]", ")", "\n", "", "ret", "=", "self", ".", "mean", "[", ":", "4", "]", ".", "copy", "(", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.STrack.__repr__": [[127, 129], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'OT_{}_({}-{})'", ".", "format", "(", "self", ".", "track_id", ",", "self", ".", "start_frame", ",", "self", ".", "end_frame", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.Tracker.__init__": [[132, 144], ["int", "tracking.tracking_utils.kalman_filter.KalmanFilter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seq_name", "=", "'test'", ",", "frame_rate", "=", "30", ")", ":", "\n", "        ", "self", ".", "seq_name", "=", "seq_name", "\n", "self", ".", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "self", ".", "lost_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "self", ".", "removed_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "\n", "self", ".", "frame_id", "=", "0", "\n", "self", ".", "buffer_size", "=", "int", "(", "frame_rate", "/", "30.0", "*", "30", ")", "\n", "self", ".", "max_time_lost", "=", "15", "#self.buffer_size", "\n", "self", ".", "kalman_filter", "=", "KalmanFilter", "(", ")", "\n", "\n", "self", ".", "deal_with_unconfirm", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.Tracker.post_process": [[145, 150], ["None"], "methods", ["None"], ["", "def", "post_process", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "cams", "=", "[", "result", "[", "'cam'", "]", "for", "result", "in", "outputs", "]", "\n", "kp3ds", "=", "[", "result", "[", "'j3d_all54'", "]", "for", "result", "in", "outputs", "]", "\n", "center_conf", "=", "[", "result", "[", "'center_conf'", "]", "for", "result", "in", "outputs", "]", "\n", "return", "cams", ",", "kp3ds", ",", "center_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.Tracker.update": [[151, 253], ["tracker.Tracker.post_process", "tracker.joint_stracks", "tracker.STrack.multi_predict", "tracking.matching.gate_cost_matrix", "tracking.matching.linear_assignment", "tracker.joint_stracks", "tracker.joint_stracks", "tracker.sub_stracks", "tracker.Tracker.lost_stracks.extend", "tracker.sub_stracks", "tracker.Tracker.removed_stracks.extend", "len", "numpy.zeros", "numpy.array", "tracking.matching.gate_cost_matrix", "tracking.matching.linear_assignment", "track.activate", "activated_starcks.append", "online_centers.append", "online_ids.append", "tracker.STrack", "len", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.mark_removed", "removed_stracks.append", "track.mark_removed", "removed_stracks.append", "zip"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.Tracker.post_process", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.joint_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.multi_predict", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.gate_cost_matrix", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.joint_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.joint_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.sub_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.sub_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.gate_cost_matrix", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.activate", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.re_activate", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.mark_removed"], ["", "def", "update", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "self", ".", "frame_id", "+=", "1", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "cams", ",", "kp3ds", ",", "center_conf", "=", "self", ".", "post_process", "(", "outputs", ")", "\n", "\n", "if", "len", "(", "cams", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "trans_suv", ",", "body_pose", ",", "conf", ",", "30", ")", "for", "(", "trans_suv", ",", "body_pose", ",", "conf", ")", "in", "zip", "(", "cams", ",", "kp3ds", ",", "center_conf", ")", "]", "\n", "tracked_ids", "=", "np", ".", "zeros", "(", "len", "(", "detections", ")", ")", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "tracked_ids", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with embedding'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks", ")", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "gate_cost_matrix", "(", "self", ".", "kalman_filter", ",", "strack_pool", ",", "detections", ",", "only_position", "=", "True", ")", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.4", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "tracked_ids", "[", "idet", "]", "=", "track", ".", "track_id", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate", "(", "det", ",", "self", ".", "frame_id", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "for", "track", "in", "r_tracked_stracks", ":", "\n", "            ", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "if", "self", ".", "deal_with_unconfirm", ":", "\n", "            ", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "gate_cost_matrix", "(", "self", ".", "kalman_filter", ",", "unconfirmed", ",", "detections", ")", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "0.7", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "                ", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "                ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "track", "in", "unconfirmed", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "track", ".", "activate", "(", "self", ".", "kalman_filter", ",", "self", ".", "frame_id", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "tracked_ids", "[", "inew", "]", "=", "track", ".", "track_id", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks", ":", "\n", "            ", "if", "self", ".", "frame_id", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "self", ".", "tracked_stracks", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks", "=", "joint_stracks", "(", "self", ".", "tracked_stracks", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks", "=", "joint_stracks", "(", "self", ".", "tracked_stracks", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks", "=", "sub_stracks", "(", "self", ".", "lost_stracks", ",", "self", ".", "tracked_stracks", ")", "\n", "self", ".", "lost_stracks", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks", "=", "sub_stracks", "(", "self", ".", "lost_stracks", ",", "self", ".", "removed_stracks", ")", "\n", "self", ".", "removed_stracks", ".", "extend", "(", "removed_stracks", ")", "\n", "#self.tracked_stracks, self.lost_stracks = remove_duplicate_stracks(self.kalman_filter, self.tracked_stracks, self.lost_stracks)", "\n", "# get scores of lost tracks", "\n", "output_stracks", "=", "[", "track", "for", "track", "in", "self", ".", "tracked_stracks", "if", "track", ".", "is_activated", "]", "\n", "\n", "# logger.debug('===========Frame {}=========='.format(self.frame_id))", "\n", "# logger.debug('Activated: {}'.format([track.track_id for track in activated_starcks]))", "\n", "# logger.debug('Refind: {}'.format([track.track_id for track in refind_stracks]))", "\n", "# logger.debug('Lost: {}'.format([track.track_id for track in lost_stracks]))", "\n", "# logger.debug('Removed: {}'.format([track.track_id for track in removed_stracks]))", "\n", "\n", "online_centers", "=", "[", "]", "\n", "online_ids", "=", "[", "]", "\n", "for", "t", "in", "output_stracks", ":", "\n", "            ", "online_centers", ".", "append", "(", "t", ".", "center", ")", "\n", "online_ids", ".", "append", "(", "t", ".", "track_id", ")", "\n", "\n", "", "return", "online_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.joint_stracks": [[255, 267], ["res.append", "exists.get", "res.append"], "function", ["None"], ["", "", "def", "joint_stracks", "(", "tlista", ",", "tlistb", ")", ":", "\n", "    ", "exists", "=", "{", "}", "\n", "res", "=", "[", "]", "\n", "for", "t", "in", "tlista", ":", "\n", "        ", "exists", "[", "t", ".", "track_id", "]", "=", "1", "\n", "res", ".", "append", "(", "t", ")", "\n", "", "for", "t", "in", "tlistb", ":", "\n", "        ", "tid", "=", "t", ".", "track_id", "\n", "if", "not", "exists", ".", "get", "(", "tid", ",", "0", ")", ":", "\n", "            ", "exists", "[", "tid", "]", "=", "1", "\n", "res", ".", "append", "(", "t", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.sub_stracks": [[269, 278], ["list", "stracks.get", "stracks.values"], "function", ["None"], ["", "def", "sub_stracks", "(", "tlista", ",", "tlistb", ")", ":", "\n", "    ", "stracks", "=", "{", "}", "\n", "for", "t", "in", "tlista", ":", "\n", "        ", "stracks", "[", "t", ".", "track_id", "]", "=", "t", "\n", "", "for", "t", "in", "tlistb", ":", "\n", "        ", "tid", "=", "t", ".", "track_id", "\n", "if", "stracks", ".", "get", "(", "tid", ",", "0", ")", ":", "\n", "            ", "del", "stracks", "[", "tid", "]", "\n", "", "", "return", "list", "(", "stracks", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.tracker.remove_duplicate_stracks": [[280, 294], ["tracking.matching.gate_cost_matrix", "numpy.where", "zip", "list", "list", "dupb.append", "dupa.append", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.gate_cost_matrix"], ["", "def", "remove_duplicate_stracks", "(", "kf", ",", "stracksa", ",", "stracksb", ")", ":", "\n", "    ", "pdist", "=", "matching", ".", "gate_cost_matrix", "(", "kf", ",", "stracksa", ",", "stracksb", ")", "\n", "pairs", "=", "np", ".", "where", "(", "pdist", "<", "0.15", ")", "\n", "dupa", ",", "dupb", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "p", ",", "q", "in", "zip", "(", "*", "pairs", ")", ":", "\n", "        ", "timep", "=", "stracksa", "[", "p", "]", ".", "frame_id", "-", "stracksa", "[", "p", "]", ".", "start_frame", "\n", "timeq", "=", "stracksb", "[", "q", "]", ".", "frame_id", "-", "stracksb", "[", "q", "]", ".", "start_frame", "\n", "if", "timep", ">", "timeq", ":", "\n", "            ", "dupb", ".", "append", "(", "q", ")", "\n", "", "else", ":", "\n", "            ", "dupa", ".", "append", "(", "p", ")", "\n", "", "", "resa", "=", "[", "t", "for", "i", ",", "t", "in", "enumerate", "(", "stracksa", ")", "if", "not", "i", "in", "dupa", "]", "\n", "resb", "=", "[", "t", "for", "i", ",", "t", "in", "enumerate", "(", "stracksb", ")", "if", "not", "i", "in", "dupb", "]", "\n", "return", "resa", ",", "resb", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.basetrack.BaseTrack.end_frame": [[30, 33], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "end_frame", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "frame_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.basetrack.BaseTrack.next_id": [[34, 38], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "next_id", "(", ")", ":", "\n", "        ", "BaseTrack", ".", "_count", "+=", "1", "\n", "return", "BaseTrack", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.basetrack.BaseTrack.activate": [[39, 41], ["None"], "methods", ["None"], ["", "def", "activate", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.basetrack.BaseTrack.predict": [[42, 44], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.basetrack.BaseTrack.update": [[45, 47], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.basetrack.BaseTrack.mark_lost": [[48, 50], ["None"], "methods", ["None"], ["", "def", "mark_lost", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "TrackState", ".", "Lost", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking.basetrack.BaseTrack.mark_removed": [[51, 53], ["None"], "methods", ["None"], ["", "def", "mark_removed", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "TrackState", ".", "Removed", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.kalman_filter.KalmanFilter.__init__": [[41, 56], ["numpy.eye", "range", "numpy.eye"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "ndim", ",", "dt", "=", "4", ",", "1.", "\n", "\n", "# Create Kalman filter model matrices.", "\n", "self", ".", "_motion_mat", "=", "np", ".", "eye", "(", "2", "*", "ndim", ",", "2", "*", "ndim", ")", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "self", ".", "_motion_mat", "[", "i", ",", "ndim", "+", "i", "]", "=", "dt", "\n", "", "self", ".", "_update_mat", "=", "np", ".", "eye", "(", "ndim", ",", "2", "*", "ndim", ")", "\n", "self", ".", "ndim", "=", "ndim", "\n", "\n", "# Motion and observation uncertainty are chosen relative to the current", "\n", "# state estimate. These weights control the amount of uncertainty in", "\n", "# the model. This is a bit hacky.", "\n", "self", ".", "_std_weight_position", "=", "1.", "/", "20", "\n", "self", ".", "_std_weight_velocity", "=", "1.", "/", "160", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.kalman_filter.KalmanFilter.initiate": [[57, 82], ["numpy.zeros_like", "numpy.diag", "numpy.square", "range", "range"], "methods", ["None"], ["", "def", "initiate", "(", "self", ",", "measurement", ")", ":", "\n", "        ", "\"\"\"Create track from unassociated measurement.\n\n        Parameters\n        ----------\n        measurement : ndarray\n            Bounding box coordinates (x, y, a, h) with center position (x, y),\n            aspect ratio a, and height h.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector (8 dimensional) and covariance matrix (8x8\n            dimensional) of the new track. Unobserved velocities are initialized\n            to 0 mean.\n\n        \"\"\"", "\n", "mean_pos", "=", "measurement", "\n", "mean_vel", "=", "np", ".", "zeros_like", "(", "mean_pos", ")", "\n", "mean", "=", "np", ".", "r_", "[", "mean_pos", ",", "mean_vel", "]", "\n", "\n", "std", "=", "[", "2", "*", "self", ".", "_std_weight_position", "*", "measurement", "[", "self", ".", "ndim", "-", "1", "]", "for", "_", "in", "range", "(", "self", ".", "ndim", ")", "]", "+", "[", "10", "*", "self", ".", "_std_weight_velocity", "*", "measurement", "[", "self", ".", "ndim", "-", "1", "]", "for", "_", "in", "range", "(", "self", ".", "ndim", ")", "]", "\n", "covariance", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "std", ")", ")", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.kalman_filter.KalmanFilter.predict": [[83, 112], ["numpy.diag", "numpy.dot", "numpy.square", "numpy.linalg.multi_dot", "range", "range"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter prediction step.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The 8 dimensional mean vector of the object state at the previous\n            time step.\n        covariance : ndarray\n            The 8x8 dimensional covariance matrix of the object state at the\n            previous time step.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector and covariance matrix of the predicted\n            state. Unobserved velocities are initialized to 0 mean.\n\n        \"\"\"", "\n", "std_pos", "=", "[", "self", ".", "_std_weight_position", "*", "mean", "[", "self", ".", "ndim", "-", "1", "]", "for", "_", "in", "range", "(", "self", ".", "ndim", ")", "]", "\n", "std_vel", "=", "[", "self", ".", "_std_weight_velocity", "*", "mean", "[", "self", ".", "ndim", "-", "1", "]", "for", "_", "in", "range", "(", "self", ".", "ndim", ")", "]", "\n", "motion_cov", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "np", ".", "r_", "[", "std_pos", ",", "std_vel", "]", ")", ")", "\n", "\n", "#mean = np.dot(self._motion_mat, mean)", "\n", "mean", "=", "np", ".", "dot", "(", "mean", ",", "self", ".", "_motion_mat", ".", "T", ")", "\n", "covariance", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "self", ".", "_motion_mat", ",", "covariance", ",", "self", ".", "_motion_mat", ".", "T", ")", ")", "+", "motion_cov", "\n", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.kalman_filter.KalmanFilter.project": [[113, 137], ["numpy.diag", "numpy.dot", "numpy.linalg.multi_dot", "numpy.square", "range"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Project state distribution to measurement space.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The state's mean vector (8 dimensional array).\n        covariance : ndarray\n            The state's covariance matrix (8x8 dimensional).\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the projected mean and covariance matrix of the given state\n            estimate.\n\n        \"\"\"", "\n", "std", "=", "[", "self", ".", "_std_weight_position", "*", "mean", "[", "self", ".", "ndim", "-", "1", "]", "for", "_", "in", "range", "(", "self", ".", "ndim", ")", "]", "\n", "innovation_cov", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "std", ")", ")", "\n", "\n", "mean", "=", "np", ".", "dot", "(", "self", ".", "_update_mat", ",", "mean", ")", "\n", "covariance", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "self", ".", "_update_mat", ",", "covariance", ",", "self", ".", "_update_mat", ".", "T", ")", ")", "\n", "return", "mean", ",", "covariance", "+", "innovation_cov", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.kalman_filter.KalmanFilter.multi_predict": [[138, 168], ["range", "numpy.asarray", "numpy.dot", "numpy.dot().transpose", "numpy.square", "len", "numpy.asarray.append", "numpy.dot", "range", "range", "numpy.diag", "numpy.dot"], "methods", ["None"], ["", "def", "multi_predict", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter prediction step (Vectorized version).\n        Parameters\n        ----------\n        mean : ndarray\n            The Nx8 dimensional mean matrix of the object states at the previous\n            time step.\n        covariance : ndarray\n            The Nx8x8 dimensional covariance matrics of the object states at the\n            previous time step.\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector and covariance matrix of the predicted\n            state. Unobserved velocities are initialized to 0 mean.\n        \"\"\"", "\n", "std_pos", "=", "[", "self", ".", "_std_weight_position", "*", "mean", "[", ":", ",", "self", ".", "ndim", "-", "1", "]", "for", "_", "in", "range", "(", "self", ".", "ndim", ")", "]", "\n", "std_vel", "=", "[", "self", ".", "_std_weight_velocity", "*", "mean", "[", ":", ",", "self", ".", "ndim", "-", "1", "]", "for", "_", "in", "range", "(", "self", ".", "ndim", ")", "]", "\n", "sqr", "=", "np", ".", "square", "(", "np", ".", "r_", "[", "std_pos", ",", "std_vel", "]", ")", ".", "T", "\n", "\n", "motion_cov", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "mean", ")", ")", ":", "\n", "            ", "motion_cov", ".", "append", "(", "np", ".", "diag", "(", "sqr", "[", "i", "]", ")", ")", "\n", "", "motion_cov", "=", "np", ".", "asarray", "(", "motion_cov", ")", "\n", "\n", "mean", "=", "np", ".", "dot", "(", "mean", ",", "self", ".", "_motion_mat", ".", "T", ")", "\n", "left", "=", "np", ".", "dot", "(", "self", ".", "_motion_mat", ",", "covariance", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "covariance", "=", "np", ".", "dot", "(", "left", ",", "self", ".", "_motion_mat", ".", "T", ")", "+", "motion_cov", "\n", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.kalman_filter.KalmanFilter.update": [[169, 202], ["kalman_filter.KalmanFilter.project", "scipy.linalg.cho_factor", "scipy.linalg.cho_solve", "numpy.dot", "numpy.linalg.multi_dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.project"], ["", "def", "update", "(", "self", ",", "mean", ",", "covariance", ",", "measurement", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter correction step.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The predicted state's mean vector (8 dimensional).\n        covariance : ndarray\n            The state's covariance matrix (8x8 dimensional).\n        measurement : ndarray\n            The 4 dimensional measurement vector (x, y, a, h), where (x, y)\n            is the center position, a the aspect ratio, and h the height of the\n            bounding box.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the measurement-corrected state distribution.\n\n        \"\"\"", "\n", "projected_mean", ",", "projected_cov", "=", "self", ".", "project", "(", "mean", ",", "covariance", ")", "\n", "\n", "chol_factor", ",", "lower", "=", "scipy", ".", "linalg", ".", "cho_factor", "(", "\n", "projected_cov", ",", "lower", "=", "True", ",", "check_finite", "=", "False", ")", "\n", "kalman_gain", "=", "scipy", ".", "linalg", ".", "cho_solve", "(", "\n", "(", "chol_factor", ",", "lower", ")", ",", "np", ".", "dot", "(", "covariance", ",", "self", ".", "_update_mat", ".", "T", ")", ".", "T", ",", "\n", "check_finite", "=", "False", ")", ".", "T", "\n", "innovation", "=", "measurement", "-", "projected_mean", "\n", "\n", "new_mean", "=", "mean", "+", "np", ".", "dot", "(", "innovation", ",", "kalman_gain", ".", "T", ")", "\n", "new_covariance", "=", "covariance", "-", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "kalman_gain", ",", "projected_cov", ",", "kalman_gain", ".", "T", ")", ")", "\n", "return", "new_mean", ",", "new_covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.kalman_filter.KalmanFilter.gating_distance": [[203, 246], ["kalman_filter.KalmanFilter.project", "numpy.sum", "numpy.linalg.cholesky", "scipy.linalg.solve_triangular", "numpy.sum", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.project", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "gating_distance", "(", "self", ",", "mean", ",", "covariance", ",", "measurements", ",", "\n", "only_position", "=", "False", ",", "metric", "=", "'maha'", ")", ":", "\n", "        ", "\"\"\"Compute gating distance between state distribution and measurements.\n        A suitable distance threshold can be obtained from `chi2inv95`. If\n        `only_position` is False, the chi-square distribution has 4 degrees of\n        freedom, otherwise 2.\n        Parameters\n        ----------\n        mean : ndarray\n            Mean vector over the state distribution (8 dimensional).\n        covariance : ndarray\n            Covariance of the state distribution (8x8 dimensional).\n        measurements : ndarray\n            An Nx4 dimensional matrix of N measurements, each in\n            format (x, y, a, h) where (x, y) is the bounding box center\n            position, a the aspect ratio, and h the height.\n        only_position : Optional[bool]\n            If True, distance computation is done with respect to the bounding\n            box center position only.\n        Returns\n        -------\n        ndarray\n            Returns an array of length N, where the i-th element contains the\n            squared Mahalanobis distance between (mean, covariance) and\n            `measurements[i]`.\n        \"\"\"", "\n", "mean", ",", "covariance", "=", "self", ".", "project", "(", "mean", ",", "covariance", ")", "\n", "if", "only_position", ":", "\n", "            ", "mean", ",", "covariance", "=", "mean", "[", ":", "self", ".", "ndim", "-", "1", "]", ",", "covariance", "[", ":", "self", ".", "ndim", "-", "1", ",", ":", "self", ".", "ndim", "-", "1", "]", "\n", "measurements", "=", "measurements", "[", ":", ",", ":", "self", ".", "ndim", "-", "1", "]", "\n", "\n", "", "d", "=", "measurements", "-", "mean", "\n", "if", "metric", "==", "'gaussian'", ":", "\n", "            ", "return", "np", ".", "sum", "(", "d", "*", "d", ",", "axis", "=", "1", ")", "\n", "", "elif", "metric", "==", "'maha'", ":", "\n", "            ", "cholesky_factor", "=", "np", ".", "linalg", ".", "cholesky", "(", "covariance", ")", "\n", "z", "=", "scipy", ".", "linalg", ".", "solve_triangular", "(", "\n", "cholesky_factor", ",", "d", ".", "T", ",", "lower", "=", "True", ",", "check_finite", "=", "False", ",", "\n", "overwrite_b", "=", "True", ")", "\n", "squared_maha", "=", "np", ".", "sum", "(", "z", "*", "z", ",", "axis", "=", "0", ")", "\n", "return", "squared_maha", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid distance metric'", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.io.write_results": [[8, 34], ["os.path.dirname", "tracking_utils.log.logger.info", "os.path.exists", "os.makedirs", "open", "results_dict.items", "ValueError", "save_format.format", "f.write"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write"], ["def", "write_results", "(", "filename", ",", "results_dict", ":", "Dict", ",", "data_type", ":", "str", ")", ":", "\n", "    ", "if", "not", "filename", ":", "\n", "        ", "return", "\n", "", "path", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "if", "data_type", "in", "(", "'mot'", ",", "'mcmot'", ",", "'lab'", ")", ":", "\n", "        ", "save_format", "=", "'{frame},{id},{x1},{y1},{w},{h},1,-1,-1,-1\\n'", "\n", "", "elif", "data_type", "==", "'kitti'", ":", "\n", "        ", "save_format", "=", "'{frame} {id} pedestrian -1 -1 -10 {x1} {y1} {x2} {y2} -1 -1 -1 -1000 -1000 -1000 -10 {score}\\n'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "data_type", ")", "\n", "\n", "", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "frame_id", ",", "frame_data", "in", "results_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "data_type", "==", "'kitti'", ":", "\n", "                ", "frame_id", "-=", "1", "\n", "", "for", "tlwh", ",", "track_id", "in", "frame_data", ":", "\n", "                ", "if", "track_id", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "tlwh", "\n", "x2", ",", "y2", "=", "x1", "+", "w", ",", "y1", "+", "h", "\n", "line", "=", "save_format", ".", "format", "(", "frame", "=", "frame_id", ",", "id", "=", "track_id", ",", "x1", "=", "x1", ",", "y1", "=", "y1", ",", "x2", "=", "x2", ",", "y2", "=", "y2", ",", "w", "=", "w", ",", "h", "=", "h", ",", "score", "=", "1.0", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "", "", "logger", ".", "info", "(", "'Save results to {}'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.io.read_results": [[36, 43], ["read_fun", "ValueError"], "function", ["None"], ["", "def", "read_results", "(", "filename", ",", "data_type", ":", "str", ",", "is_gt", "=", "False", ",", "is_ignore", "=", "False", ")", ":", "\n", "    ", "if", "data_type", "in", "(", "'mot'", ",", "'lab'", ")", ":", "\n", "        ", "read_fun", "=", "read_mot_results", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown data type: {}'", ".", "format", "(", "data_type", ")", ")", "\n", "\n", "", "return", "read_fun", "(", "filename", ",", "is_gt", ",", "is_ignore", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.io.read_mot_results": [[63, 110], ["dict", "os.path.isfile", "open", "f.readlines", "line.split", "int", "dict.setdefault", "tuple", "int", "results_dict[].append", "len", "list", "float", "float", "map", "int", "int", "float", "float", "float", "int", "float", "float"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["def", "read_mot_results", "(", "filename", ",", "is_gt", ",", "is_ignore", ")", ":", "\n", "    ", "valid_labels", "=", "{", "1", "}", "\n", "ignore_labels", "=", "{", "2", ",", "7", ",", "8", ",", "12", "}", "\n", "results_dict", "=", "dict", "(", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "linelist", "=", "line", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "linelist", ")", "<", "7", ":", "\n", "                    ", "continue", "\n", "", "fid", "=", "int", "(", "linelist", "[", "0", "]", ")", "\n", "if", "fid", "<", "1", ":", "\n", "                    ", "continue", "\n", "", "results_dict", ".", "setdefault", "(", "fid", ",", "list", "(", ")", ")", "\n", "\n", "box_size", "=", "float", "(", "linelist", "[", "4", "]", ")", "*", "float", "(", "linelist", "[", "5", "]", ")", "\n", "\n", "if", "is_gt", ":", "\n", "                    ", "if", "'MOT16-'", "in", "filename", "or", "'MOT17-'", "in", "filename", ":", "\n", "                        ", "label", "=", "int", "(", "float", "(", "linelist", "[", "7", "]", ")", ")", "\n", "mark", "=", "int", "(", "float", "(", "linelist", "[", "6", "]", ")", ")", "\n", "if", "mark", "==", "0", "or", "label", "not", "in", "valid_labels", ":", "\n", "                            ", "continue", "\n", "", "", "score", "=", "1", "\n", "", "elif", "is_ignore", ":", "\n", "                    ", "if", "'MOT16-'", "in", "filename", "or", "'MOT17-'", "in", "filename", ":", "\n", "                        ", "label", "=", "int", "(", "float", "(", "linelist", "[", "7", "]", ")", ")", "\n", "vis_ratio", "=", "float", "(", "linelist", "[", "8", "]", ")", "\n", "if", "label", "not", "in", "ignore_labels", "and", "vis_ratio", ">=", "0", ":", "\n", "                            ", "continue", "\n", "", "", "else", ":", "\n", "                        ", "continue", "\n", "", "score", "=", "1", "\n", "", "else", ":", "\n", "                    ", "score", "=", "float", "(", "linelist", "[", "6", "]", ")", "\n", "\n", "#if box_size > 7000:", "\n", "#if box_size <= 7000 or box_size >= 15000:", "\n", "#if box_size < 15000:", "\n", "#continue", "\n", "\n", "", "tlwh", "=", "tuple", "(", "map", "(", "float", ",", "linelist", "[", "2", ":", "6", "]", ")", ")", "\n", "target_id", "=", "int", "(", "linelist", "[", "1", "]", ")", "\n", "\n", "results_dict", "[", "fid", "]", ".", "append", "(", "(", "tlwh", ",", "target_id", ",", "score", ")", ")", "\n", "\n", "", "", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.io.unzip_objs": [[112, 120], ["numpy.asarray().reshape", "len", "zip", "numpy.asarray"], "function", ["None"], ["", "def", "unzip_objs", "(", "objs", ")", ":", "\n", "    ", "if", "len", "(", "objs", ")", ">", "0", ":", "\n", "        ", "tlwhs", ",", "ids", ",", "scores", "=", "zip", "(", "*", "objs", ")", "\n", "", "else", ":", "\n", "        ", "tlwhs", ",", "ids", ",", "scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "tlwhs", "=", "np", ".", "asarray", "(", "tlwhs", ",", "dtype", "=", "float", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n", "return", "tlwhs", ",", "ids", ",", "scores", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.timer.Timer.__init__": [[13, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "\n", "self", ".", "duration", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.timer.Timer.tic": [[22, 26], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.timer.Timer.toc": [[27, 37], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "self", ".", "average_time", "=", "self", ".", "total_time", "/", "self", ".", "calls", "\n", "if", "average", ":", "\n", "            ", "self", ".", "duration", "=", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "self", ".", "duration", "=", "self", ".", "diff", "\n", "", "return", "self", ".", "duration", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.timer.Timer.clear": [[38, 45], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "self", ".", "duration", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.visualization.tlwhs_to_tlbrs": [[5, 12], ["numpy.copy", "len"], "function", ["None"], ["import", "trimesh", "\n", "import", "matplotlib", "\n", "matplotlib", ".", "use", "(", "'agg'", ")", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "mpl_toolkits", ".", "mplot3d", "import", "Axes3D", "\n", "import", "math", "\n", "import", "copy", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.visualization.get_color": [[14, 19], ["None"], "function", ["None"], ["import", "pytorch3d", ".", "renderer", "as", "pyr", "\n", "\n", "import", "constants", "\n", "import", "config", "\n", "from", "config", "import", "args", "\n", "import", "utils", ".", "projection", "as", "proj", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.visualization.resize_image": [[21, 26], ["max", "cv2.resize", "float", "max"], "function", ["None"], ["from", ".", "renderer_pt3d", "import", "get_renderer", "\n", "from", "utils", "import", "denormalize_cam_params_to_trans", "\n", "from", "pytorch3d", ".", "renderer", "import", "look_at_view_transform", ",", "get_world_to_view_transform", "\n", "from", ".", "web_vis", "import", "write_to_html", ",", "convert_3dpose_to_line_figs", ",", "convert_image_list", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.visualization.plot_tracking": [[28, 55], ["numpy.ascontiguousarray", "max", "max", "max", "cv2.putText", "enumerate", "numpy.copy", "numpy.zeros", "int", "int", "tuple", "int", "visualization.get_color", "cv2.circle", "cv2.putText", "int", "map", "int", "abs", "len", "int"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.visualization.get_color"], ["import", "pickle", "\n", "\n", "default_cfg", "=", "{", "'save_dir'", ":", "None", ",", "'vids'", ":", "None", ",", "'settings'", ":", "[", "]", "}", "# 'put_org'", "\n", "\n", "class", "Visualizer", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "resolution", "=", "(", "512", ",", "512", ")", ",", "result_img_dir", "=", "None", ",", "with_renderer", "=", "False", ")", ":", "\n", "        ", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "FOV", "=", "np", ".", "radians", "(", "args", "(", ")", ".", "FOV", ")", "\n", "self", ".", "smpl_face", "=", "torch", ".", "load", "(", "args", "(", ")", ".", "smpl_model_path", ")", "[", "'f'", "]", "\n", "if", "with_renderer", ":", "\n", "            ", "self", ".", "perps_proj", "=", "args", "(", ")", ".", "perspective_proj", "\n", "T", "=", "None", "if", "self", ".", "perps_proj", "else", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "100", "]", "]", ")", "\n", "self", ".", "renderer", "=", "get_renderer", "(", "resolution", "=", "self", ".", "resolution", ",", "perps", "=", "self", ".", "perps_proj", ",", "T", "=", "T", ")", "\n", "if", "args", "(", ")", ".", "model_version", ">=", "4", ":", "\n", "# dervice the camera pose/position via setting the object location (at) and the view dist/evelevation/azim in a sphere coodinate", "\n", "# The position is just a sphere coodinate which takes \"at\" as the origin with the corresponding angles.", "\n", "# World coordinates (right-hand coord _|/ ) +Y up, +X left and +Z in.", "\n", "                ", "R", ",", "T", "=", "look_at_view_transform", "(", "dist", "=", "5", ",", "elev", "=", "80", ",", "azim", "=", "180", ",", "at", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "3", "]", "]", ")", ")", "\n", "self", ".", "bv_renderer", "=", "get_renderer", "(", "resolution", "=", "self", ".", "resolution", ",", "perps", "=", "False", ",", "R", "=", "R", ",", "T", "=", "T", ")", "\n", "", "", "self", ".", "result_img_dir", "=", "result_img_dir", "\n", "self", ".", "heatmap_kpnum", "=", "17", "\n", "self", ".", "vis_size", "=", "resolution", "\n", "self", ".", "mesh_color", "=", "(", "torch", ".", "Tensor", "(", "[", "[", "[", "0.65098039", ",", "0.74117647", ",", "0.85882353", "]", "]", "]", ")", "*", "255", ")", ".", "long", "(", ")", "\n", "self", ".", "color_table", "=", "np", ".", "array", "(", "[", "[", "255", ",", "0", ",", "0", "]", ",", "[", "0", ",", "255", ",", "0", "]", ",", "[", "0", ",", "0", ",", "255", "]", ",", "[", "0", ",", "255", ",", "255", "]", ",", "[", "255", ",", "0", ",", "255", "]", ",", "[", "255", ",", "255", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "128", ",", "0", ",", "128", "]", "]", ")", "\n", "self", ".", "skeleton_3D_ploter", "=", "Plotter3dPoses", "(", ")", "\n", "self", ".", "color_class_dict", "=", "{", "0", ":", "{", "0", ":", "[", "0.94", ",", "1.", ",", "1.", "]", ",", "1", ":", "[", "0.49", ",", "1.", ",", "0", "]", ",", "2", ":", "[", "0", ",", "1.", ",", "1.", "]", ",", "3", ":", "[", "1.", ",", "0.98", ",", "0.804", "]", ",", "-", "1", ":", "[", ".9", ",", ".9", ",", ".8", "]", "}", ",", "1", ":", "{", "0", ":", "[", "1.", ",", "0.753", ",", "0.796", "]", ",", "1", ":", "[", "1", ",", "0.647", ",", "0", "]", ",", "2", ":", "[", "1", ",", "0.431", ",", "0.706", "]", ",", "3", ":", "[", "1.", ",", "0.98", ",", "0.804", "]", ",", "-", "1", ":", "[", ".9", ",", ".9", ",", ".8", "]", "}", ",", "2", ":", "{", "0", ":", "[", ".9", ",", ".9", ",", ".8", "]", ",", "1", ":", "[", ".9", ",", ".9", ",", ".8", "]", ",", "2", ":", "[", ".9", ",", ".9", ",", ".8", "]", ",", "3", ":", "[", ".9", ",", ".9", ",", ".8", "]", ",", "-", "1", ":", "[", ".9", ",", ".9", ",", ".8", "]", "}", "}", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.visualization.plot_trajectory": [[57, 66], ["image.copy.copy", "zip", "visualization.get_color", "int", "tuple", "cv2.circle", "map", "int", "int"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.visualization.get_color"], ["self", ".", "age_color_dict", "=", "{", "0", ":", "[", "0.94", ",", "1.", ",", "1.", "]", ",", "1", ":", "[", "0.49", ",", "1.", ",", "0", "]", ",", "2", ":", "[", "0", ",", "1.", ",", "1.", "]", ",", "3", ":", "[", "1.", ",", "0.41", ",", "0.41", "]", ",", "-", "1", ":", "[", ".9", ",", ".9", ",", ".8", "]", "}", "\n", "self", ".", "age_name_dict", "=", "{", "0", ":", "'adult'", ",", "1", ":", "'teen'", ",", "2", ":", "'kid'", ",", "3", ":", "'baby'", ",", "-", "1", ":", "'NotSure'", "}", "\n", "self", ".", "gender_name_dict", "=", "{", "0", ":", "'male'", ",", "1", ":", "'female'", ",", "2", ":", "'neutral'", "}", "\n", "\n", "\n", "", "def", "visualize_renderer_verts_list", "(", "self", ",", "verts_list", ",", "faces_list", "=", "None", ",", "images", "=", "None", ",", "bird_view", "=", "False", ",", "auto_cam", "=", "False", ",", "cam_params", "=", "None", ",", "colors", "=", "torch", ".", "Tensor", "(", "[", ".9", ",", ".9", ",", ".8", "]", ")", ",", "trans", "=", "None", ",", "thresh", "=", "0.", ")", ":", "\n", "        ", "verts_list", "=", "[", "verts", ".", "contiguous", "(", ")", "for", "verts", "in", "verts_list", "]", "\n", "if", "faces_list", "is", "None", ":", "\n", "            ", "faces_list", "=", "[", "self", ".", "smpl_face", ".", "repeat", "(", "len", "(", "verts", ")", ",", "1", ",", "1", ")", ".", "to", "(", "verts", ".", "device", ")", "for", "verts", "in", "verts_list", "]", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.visualization.plot_detections": [[68, 91], ["numpy.copy", "max", "enumerate", "numpy.asarray", "cv2.rectangle", "len", "cv2.putText", "cv2.putText"], "function", ["None"], ["", "if", "bird_view", ":", "\n", "            ", "renderer", "=", "self", ".", "bv_renderer", "\n", "", "else", ":", "\n", "            ", "renderer", "=", "self", ".", "renderer", "\n", "", "rendered_imgs", "=", "[", "]", "\n", "for", "ind", ",", "(", "verts", ",", "faces", ")", "in", "enumerate", "(", "zip", "(", "verts_list", ",", "faces_list", ")", ")", ":", "\n", "            ", "if", "trans", "is", "not", "None", ":", "\n", "                ", "verts", "+=", "trans", "[", "ind", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "if", "auto_cam", ":", "\n", "                ", "cam_params", "=", "calc_auto_cam_params", "(", "verts", ")", "\n", "\n", "", "color", "=", "colors", "[", "ind", "]", "if", "isinstance", "(", "colors", ",", "list", ")", "else", "colors", "\n", "#if color is None:", "\n", "#    print('None color,', color, colors)", "\n", "\n", "if", "self", ".", "perps_proj", ":", "\n", "                ", "rendered_img", "=", "renderer", "(", "verts", ",", "faces", ",", "colors", "=", "color", ",", "merge_meshes", "=", "True", ",", "cam_params", "=", "cam_params", ")", "\n", "", "else", ":", "\n", "                ", "verts", "[", ":", ",", ":", ",", "2", "]", "-=", "1.", "\n", "rendered_img", "=", "renderer", "(", "verts", ",", "faces", ",", "colors", "=", "color", ",", "merge_meshes", "=", "False", ",", "cam_params", "=", "cam_params", ")", "\n", "rendered_img", "=", "determine_rendering_order", "(", "rendered_img", ")", "\n", "", "rendered_imgs", ".", "append", "(", "rendered_img", ")", "\n", "", "rendered_imgs", "=", "torch", ".", "cat", "(", "rendered_imgs", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "rendered_imgs", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.log.get_logger": [[4, 16], ["logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["def", "get_logger", "(", "name", "=", "'root'", ")", ":", "\n", "    ", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "# fmt='%(asctime)s [%(levelname)s]: %(filename)s(%(funcName)s:%(lineno)s) >> %(message)s')", "\n", "fmt", "=", "'%(asctime)s [%(levelname)s]: %(message)s'", ",", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.parse_config.parse_model_cfg": [[1, 20], ["open", "open.read().split", "x.rstrip().lstrip", "line.startswith", "open.read", "module_defs.append", "line[].rstrip", "line.split", "value.strip.strip", "value.strip.strip", "x.rstrip", "x.startswith", "key.rstrip"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["def", "parse_model_cfg", "(", "path", ")", ":", "\n", "    ", "\"\"\"Parses the yolo-v3 layer configuration file and returns module definitions\"\"\"", "\n", "file", "=", "open", "(", "path", ",", "'r'", ")", "\n", "lines", "=", "file", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "lines", "=", "[", "x", "for", "x", "in", "lines", "if", "x", "and", "not", "x", ".", "startswith", "(", "'#'", ")", "]", "\n", "lines", "=", "[", "x", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", "for", "x", "in", "lines", "]", "# get rid of fringe whitespaces", "\n", "module_defs", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "'['", ")", ":", "# This marks the start of a new block", "\n", "            ", "module_defs", ".", "append", "(", "{", "}", ")", "\n", "module_defs", "[", "-", "1", "]", "[", "'type'", "]", "=", "line", "[", "1", ":", "-", "1", "]", ".", "rstrip", "(", ")", "\n", "if", "module_defs", "[", "-", "1", "]", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "module_defs", "[", "-", "1", "]", "[", "'batch_normalize'", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "\"=\"", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "module_defs", "[", "-", "1", "]", "[", "key", ".", "rstrip", "(", ")", "]", "=", "value", ".", "strip", "(", ")", "\n", "\n", "", "", "return", "module_defs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.parse_config.parse_data_cfg": [[22, 36], ["dict", "open", "fp.readlines", "line.strip.strip", "line.strip.split", "value.strip", "line.strip.startswith", "key.strip"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "parse_data_cfg", "(", "path", ")", ":", "\n", "    ", "\"\"\"Parses the data configuration file\"\"\"", "\n", "options", "=", "dict", "(", ")", "\n", "options", "[", "'gpu'", "]", "=", "'0'", "\n", "options", "[", "'num_workers'", "]", "=", "'10'", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "''", "or", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "            ", "continue", "\n", "", "key", ",", "value", "=", "line", ".", "split", "(", "'='", ")", "\n", "options", "[", "key", ".", "strip", "(", ")", "]", "=", "value", ".", "strip", "(", ")", "\n", "", "return", "options", "\n", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.write_results": [[19, 30], ["print", "open", "zip", "save_format.format", "f.write"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write"], ["def", "write_results", "(", "filename", ",", "results", ")", ":", "\n", "    ", "save_format", "=", "'{frame},{id},{x1},{y1}\\n'", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "frame_id", ",", "centers", ",", "track_ids", "in", "results", ":", "\n", "            ", "for", "center", ",", "track_id", "in", "zip", "(", "centers", ",", "track_ids", ")", ":", "\n", "                ", "if", "track_id", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", "=", "center", "\n", "line", "=", "save_format", ".", "format", "(", "frame", "=", "frame_id", ",", "id", "=", "track_id", ",", "x1", "=", "x1", ",", "y1", "=", "y1", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "", "", "print", "(", "'save results to {}'", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.mkdir_if_missing": [[31, 34], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "mkdir_if_missing", "(", "d", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.float3": [[36, 38], ["float", "format"], "function", ["None"], ["", "", "def", "float3", "(", "x", ")", ":", "# format floats to 3 decimals", "\n", "    ", "return", "float", "(", "format", "(", "x", ",", "'.3f'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.init_seeds": [[40, 46], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "init_seeds", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.load_classes": [[48, 55], ["open", "open.read().split", "list", "filter", "open.read"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read"], ["", "def", "load_classes", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Loads class labels at 'path'\n    \"\"\"", "\n", "fp", "=", "open", "(", "path", ",", "'r'", ")", "\n", "names", "=", "fp", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "return", "list", "(", "filter", "(", "None", ",", "names", ")", ")", "# filter removes empty strings (such as last line)", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.model_info": [[57, 66], ["sum", "sum", "print", "enumerate", "print", "model.named_parameters", "name.replace.replace", "print", "x.numel", "x.numel", "model.parameters", "model.parameters", "p.numel", "list", "p.mean", "p.std"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "model_info", "(", "model", ")", ":", "# Plots a line-by-line description of a PyTorch model", "\n", "    ", "n_p", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", ")", "# number parameters", "\n", "n_g", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", "if", "x", ".", "requires_grad", ")", "# number gradients", "\n", "print", "(", "'\\n%5s %50s %9s %12s %20s %12s %12s'", "%", "(", "'layer'", ",", "'name'", ",", "'gradient'", ",", "'parameters'", ",", "'shape'", ",", "'mu'", ",", "'sigma'", ")", ")", "\n", "for", "i", ",", "(", "name", ",", "p", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "name", "=", "name", ".", "replace", "(", "'module_list.'", ",", "''", ")", "\n", "print", "(", "'%5g %50s %9s %12g %20s %12.3g %12.3g'", "%", "(", "\n", "i", ",", "name", ",", "p", ".", "requires_grad", ",", "p", ".", "numel", "(", ")", ",", "list", "(", "p", ".", "shape", ")", ",", "p", ".", "mean", "(", ")", ",", "p", ".", "std", "(", ")", ")", ")", "\n", "", "print", "(", "'Model Summary: %g layers, %g parameters, %g gradients\\n'", "%", "(", "i", "+", "1", ",", "n_p", ",", "n_g", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.plot_one_box": [[69, 80], ["cv2.rectangle", "max", "cv2.rectangle", "cv2.putText", "round", "random.randint", "int", "int", "int", "int", "cv2.getTextSize", "range", "max"], "function", ["None"], ["", "def", "plot_one_box", "(", "x", ",", "img", ",", "color", "=", "None", ",", "label", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "# Plots one bounding box on image img", "\n", "    ", "tl", "=", "line_thickness", "or", "round", "(", "0.0004", "*", "max", "(", "img", ".", "shape", "[", "0", ":", "2", "]", ")", ")", "+", "1", "# line thickness", "\n", "color", "=", "color", "or", "[", "random", ".", "randint", "(", "0", ",", "255", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "c1", ",", "c2", "=", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ",", "(", "int", "(", "x", "[", "2", "]", ")", ",", "int", "(", "x", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "# font thickness", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "tl", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "t_size", "[", "1", "]", "-", "3", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "# filled", "\n", "cv2", ".", "putText", "(", "img", ",", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "2", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.weights_init_normal": [[82, 89], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.03", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.03", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.xyxy2xywh": [[91, 99], ["torch.zeros", "torch.zeros", "numpy.zeros"], "function", ["None"], ["", "", "def", "xyxy2xywh", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x1, y1, x2, y2] to [x, y, w, h]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "-", "x", "[", ":", ",", "0", "]", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "3", "]", "-", "x", "[", ":", ",", "1", "]", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.xywh2xyxy": [[101, 109], ["torch.zeros", "torch.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "xywh2xyxy", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x, y, w, h] to [x1, y1, x2, y2]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "2", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "3", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.scale_coords": [[111, 123], ["min", "torch.clamp", "torch.clamp", "float", "float"], "function", ["None"], ["", "def", "scale_coords", "(", "img_size", ",", "coords", ",", "img0_shape", ")", ":", "\n", "# Rescale x1, y1, x2, y2 from 416 to image size", "\n", "    ", "gain_w", "=", "float", "(", "img_size", "[", "0", "]", ")", "/", "img0_shape", "[", "1", "]", "# gain  = old / new", "\n", "gain_h", "=", "float", "(", "img_size", "[", "1", "]", ")", "/", "img0_shape", "[", "0", "]", "\n", "gain", "=", "min", "(", "gain_w", ",", "gain_h", ")", "\n", "pad_x", "=", "(", "img_size", "[", "0", "]", "-", "img0_shape", "[", "1", "]", "*", "gain", ")", "/", "2", "# width padding", "\n", "pad_y", "=", "(", "img_size", "[", "1", "]", "-", "img0_shape", "[", "0", "]", "*", "gain", ")", "/", "2", "# height padding", "\n", "coords", "[", ":", ",", "[", "0", ",", "2", "]", "]", "-=", "pad_x", "\n", "coords", "[", ":", ",", "[", "1", ",", "3", "]", "]", "-=", "pad_y", "\n", "coords", "[", ":", ",", "0", ":", "4", "]", "/=", "gain", "\n", "coords", "[", ":", ",", ":", "4", "]", "=", "torch", ".", "clamp", "(", "coords", "[", ":", ",", ":", "4", "]", ",", "min", "=", "0", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.ap_per_class": [[125, 177], ["numpy.argsort", "numpy.unique", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "sum", "sum", "numpy.array", "np.unique.astype", "numpy.array", "numpy.array", "ap.append", "r.append", "p.append", "numpy.cumsum", "numpy.cumsum", "r.append", "p.append", "ap.append", "utils.compute_ap"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.compute_ap"], ["", "def", "ap_per_class", "(", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Method originally from https://github.com/rafaelpadilla/Object-Detection-Metrics.\n    # Arguments\n        tp:    True positives (list).\n        conf:  Objectness value from 0-1 (list).\n        pred_cls: Predicted object classes (list).\n        target_cls: True object classes (list).\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "\n", "# lists/pytorch to numpy", "\n", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", "=", "np", ".", "array", "(", "tp", ")", ",", "np", ".", "array", "(", "conf", ")", ",", "np", ".", "array", "(", "pred_cls", ")", ",", "np", ".", "array", "(", "target_cls", ")", "\n", "\n", "# Sort by objectness", "\n", "i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n", "tp", ",", "conf", ",", "pred_cls", "=", "tp", "[", "i", "]", ",", "conf", "[", "i", "]", ",", "pred_cls", "[", "i", "]", "\n", "\n", "# Find unique classes", "\n", "unique_classes", "=", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "pred_cls", ",", "target_cls", ")", ",", "0", ")", ")", "\n", "\n", "# Create Precision-Recall curve and compute AP for each class", "\n", "ap", ",", "p", ",", "r", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "unique_classes", ":", "\n", "        ", "i", "=", "pred_cls", "==", "c", "\n", "n_gt", "=", "sum", "(", "target_cls", "==", "c", ")", "# Number of ground truth objects", "\n", "n_p", "=", "sum", "(", "i", ")", "# Number of predicted objects", "\n", "\n", "if", "(", "n_p", "==", "0", ")", "and", "(", "n_gt", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "", "elif", "(", "n_p", "==", "0", ")", "or", "(", "n_gt", "==", "0", ")", ":", "\n", "            ", "ap", ".", "append", "(", "0", ")", "\n", "r", ".", "append", "(", "0", ")", "\n", "p", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "# Accumulate FPs and TPs", "\n", "            ", "fpc", "=", "np", ".", "cumsum", "(", "1", "-", "tp", "[", "i", "]", ")", "\n", "tpc", "=", "np", ".", "cumsum", "(", "tp", "[", "i", "]", ")", "\n", "\n", "# Recall", "\n", "recall_curve", "=", "tpc", "/", "(", "n_gt", "+", "1e-16", ")", "\n", "r", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "n_gt", "+", "1e-16", ")", ")", "\n", "\n", "# Precision", "\n", "precision_curve", "=", "tpc", "/", "(", "tpc", "+", "fpc", ")", "\n", "p", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "tpc", "[", "-", "1", "]", "+", "fpc", "[", "-", "1", "]", ")", ")", "\n", "\n", "# AP from recall-precision curve", "\n", "ap", ".", "append", "(", "compute_ap", "(", "recall_curve", ",", "precision_curve", ")", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "ap", ")", ",", "unique_classes", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "array", "(", "r", ")", ",", "np", ".", "array", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.compute_ap": [[179, 205], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "compute_ap", "(", "recall", ",", "precision", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Code originally from https://github.com/rbgirshick/py-faster-rcnn.\n    # Arguments\n        recall:    The recall curve (list).\n        precision: The precision curve (list).\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "recall", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "precision", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.bbox_iou": [[207, 236], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "len", "len", "b1_x1.unsqueeze", "b1_y1.unsqueeze", "b1_x2.unsqueeze", "b1_y2.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns the IoU of two bounding boxes\n    \"\"\"", "\n", "N", ",", "M", "=", "len", "(", "box1", ")", ",", "len", "(", "box2", ")", "\n", "if", "x1y1x2y2", ":", "\n", "# Get the coordinates of bounding boxes", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", ":", ",", "0", "]", ",", "box1", "[", ":", ",", "1", "]", ",", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "# Transform from center and width to exact coordinates", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", ":", ",", "0", "]", "-", "box1", "[", ":", ",", "2", "]", "/", "2", ",", "box1", "[", ":", ",", "0", "]", "+", "box1", "[", ":", ",", "2", "]", "/", "2", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", ":", ",", "1", "]", "-", "box1", "[", ":", ",", "3", "]", "/", "2", ",", "box1", "[", ":", ",", "1", "]", "+", "box1", "[", ":", ",", "3", "]", "/", "2", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", ":", ",", "0", "]", "-", "box2", "[", ":", ",", "2", "]", "/", "2", ",", "box2", "[", ":", ",", "0", "]", "+", "box2", "[", ":", ",", "2", "]", "/", "2", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", ":", ",", "1", "]", "-", "box2", "[", ":", ",", "3", "]", "/", "2", ",", "box2", "[", ":", ",", "1", "]", "+", "box2", "[", ":", ",", "3", "]", "/", "2", "\n", "\n", "# get the coordinates of the intersection rectangle", "\n", "", "inter_rect_x1", "=", "torch", ".", "max", "(", "b1_x1", ".", "unsqueeze", "(", "1", ")", ",", "b2_x1", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "b1_y1", ".", "unsqueeze", "(", "1", ")", ",", "b2_y1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "b1_x2", ".", "unsqueeze", "(", "1", ")", ",", "b2_x2", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "b1_y2", ".", "unsqueeze", "(", "1", ")", ",", "b2_y2", ")", "\n", "# Intersection area", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", ",", "0", ")", "*", "torch", ".", "clamp", "(", "inter_rect_y2", "-", "inter_rect_y1", ",", "0", ")", "\n", "# Union Area", "\n", "b1_area", "=", "(", "(", "b1_x2", "-", "b1_x1", ")", "*", "(", "b1_y2", "-", "b1_y1", ")", ")", "\n", "b1_area", "=", "(", "(", "b1_x2", "-", "b1_x1", ")", "*", "(", "b1_y2", "-", "b1_y1", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "N", ",", "M", ")", "\n", "b2_area", "=", "(", "(", "b2_x2", "-", "b2_x1", ")", "*", "(", "b2_y2", "-", "b2_y1", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "N", ",", "M", ")", "\n", "\n", "return", "inter_area", "/", "(", "b1_area", "+", "b2_area", "-", "inter_area", "+", "1e-16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.build_targets_max": [[238, 320], ["len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.ByteTensor().fill_().cuda", "torch.ByteTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "torch.LongTensor().fill_().cuda", "range", "torch.cat", "torch.cat", "t[].clone().long().cuda", "len", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "anchor_wh.unsqueeze", "torch.min().prod", "torch.min().prod", "iou.max", "torch.log", "torch.log", "t[].clone().long().cuda.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.ByteTensor().fill_", "torch.ByteTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "t[].clone", "t[].clone", "torch.sort", "torch.sort", "utils.return_torch_unique_index", "t[].long", "t[].clone", "t[].clone", "gxy.floor", "t[].clone().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min", "torch.min", "torch.stack", "torch.stack", "torch.unique", "torch.unique", "len", "len", "t.view.view", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "t[].clone", "box1.prod", "anchor_wh.unsqueeze.prod"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.return_torch_unique_index", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone"], ["", "def", "build_targets_max", "(", "target", ",", "anchor_wh", ",", "nA", ",", "nC", ",", "nGh", ",", "nGw", ")", ":", "\n", "    ", "\"\"\"\n    returns nT, nCorrect, tx, ty, tw, th, tconf, tcls\n    \"\"\"", "\n", "nB", "=", "len", "(", "target", ")", "# number of images in batch", "\n", "\n", "txy", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "2", ")", ".", "cuda", "(", ")", "# batch size, anchors, grid size", "\n", "twh", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "2", ")", ".", "cuda", "(", ")", "\n", "tconf", "=", "torch", ".", "LongTensor", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ")", ".", "fill_", "(", "0", ")", ".", "cuda", "(", ")", "\n", "tcls", "=", "torch", ".", "ByteTensor", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "nC", ")", ".", "fill_", "(", "0", ")", ".", "cuda", "(", ")", "# nC = number of classes", "\n", "tid", "=", "torch", ".", "LongTensor", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "1", ")", ".", "fill_", "(", "-", "1", ")", ".", "cuda", "(", ")", "\n", "for", "b", "in", "range", "(", "nB", ")", ":", "\n", "        ", "t", "=", "target", "[", "b", "]", "\n", "t_id", "=", "t", "[", ":", ",", "1", "]", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "t", "=", "t", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "5", "]", "]", "\n", "nTb", "=", "len", "(", "t", ")", "# number of targets", "\n", "if", "nTb", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "#gxy, gwh = t[:, 1:3] * nG, t[:, 3:5] * nG", "\n", "", "gxy", ",", "gwh", "=", "t", "[", ":", ",", "1", ":", "3", "]", ".", "clone", "(", ")", ",", "t", "[", ":", ",", "3", ":", "5", "]", ".", "clone", "(", ")", "\n", "gxy", "[", ":", ",", "0", "]", "=", "gxy", "[", ":", ",", "0", "]", "*", "nGw", "\n", "gxy", "[", ":", ",", "1", "]", "=", "gxy", "[", ":", ",", "1", "]", "*", "nGh", "\n", "gwh", "[", ":", ",", "0", "]", "=", "gwh", "[", ":", ",", "0", "]", "*", "nGw", "\n", "gwh", "[", ":", ",", "1", "]", "=", "gwh", "[", ":", ",", "1", "]", "*", "nGh", "\n", "gi", "=", "torch", ".", "clamp", "(", "gxy", "[", ":", ",", "0", "]", ",", "min", "=", "0", ",", "max", "=", "nGw", "-", "1", ")", ".", "long", "(", ")", "\n", "gj", "=", "torch", ".", "clamp", "(", "gxy", "[", ":", ",", "1", "]", ",", "min", "=", "0", ",", "max", "=", "nGh", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "# Get grid box indices and prevent overflows (i.e. 13.01 on 13 anchors)", "\n", "#gi, gj = torch.clamp(gxy.long(), min=0, max=nG - 1).t()", "\n", "#gi, gj = gxy.long().t()", "\n", "\n", "# iou of targets-anchors (using wh only)", "\n", "box1", "=", "gwh", "\n", "box2", "=", "anchor_wh", ".", "unsqueeze", "(", "1", ")", "\n", "inter_area", "=", "torch", ".", "min", "(", "box1", ",", "box2", ")", ".", "prod", "(", "2", ")", "\n", "iou", "=", "inter_area", "/", "(", "box1", ".", "prod", "(", "1", ")", "+", "box2", ".", "prod", "(", "2", ")", "-", "inter_area", "+", "1e-16", ")", "\n", "\n", "# Select best iou_pred and anchor", "\n", "iou_best", ",", "a", "=", "iou", ".", "max", "(", "0", ")", "# best anchor [0-2] for each target", "\n", "\n", "# Select best unique target-anchor combinations", "\n", "if", "nTb", ">", "1", ":", "\n", "            ", "_", ",", "iou_order", "=", "torch", ".", "sort", "(", "-", "iou_best", ")", "# best to worst", "\n", "\n", "# Unique anchor selection", "\n", "u", "=", "torch", ".", "stack", "(", "(", "gi", ",", "gj", ",", "a", ")", ",", "0", ")", "[", ":", ",", "iou_order", "]", "\n", "# _, first_unique = np.unique(u, axis=1, return_index=True)  # first unique indices", "\n", "first_unique", "=", "return_torch_unique_index", "(", "u", ",", "torch", ".", "unique", "(", "u", ",", "dim", "=", "1", ")", ")", "# torch alternative", "\n", "i", "=", "iou_order", "[", "first_unique", "]", "\n", "# best anchor must share significant commonality (iou) with target", "\n", "i", "=", "i", "[", "iou_best", "[", "i", "]", ">", "0.60", "]", "# TODO: examine arbitrary threshold", "\n", "if", "len", "(", "i", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "a", ",", "gj", ",", "gi", ",", "t", "=", "a", "[", "i", "]", ",", "gj", "[", "i", "]", ",", "gi", "[", "i", "]", ",", "t", "[", "i", "]", "\n", "t_id", "=", "t_id", "[", "i", "]", "\n", "if", "len", "(", "t", ".", "shape", ")", "==", "1", ":", "\n", "                ", "t", "=", "t", ".", "view", "(", "1", ",", "5", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "iou_best", "<", "0.60", ":", "\n", "                ", "continue", "\n", "\n", "", "", "tc", ",", "gxy", ",", "gwh", "=", "t", "[", ":", ",", "0", "]", ".", "long", "(", ")", ",", "t", "[", ":", ",", "1", ":", "3", "]", ".", "clone", "(", ")", ",", "t", "[", ":", ",", "3", ":", "5", "]", ".", "clone", "(", ")", "\n", "gxy", "[", ":", ",", "0", "]", "=", "gxy", "[", ":", ",", "0", "]", "*", "nGw", "\n", "gxy", "[", ":", ",", "1", "]", "=", "gxy", "[", ":", ",", "1", "]", "*", "nGh", "\n", "gwh", "[", ":", ",", "0", "]", "=", "gwh", "[", ":", ",", "0", "]", "*", "nGw", "\n", "gwh", "[", ":", ",", "1", "]", "=", "gwh", "[", ":", ",", "1", "]", "*", "nGh", "\n", "\n", "# XY coordinates", "\n", "txy", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "gxy", "-", "gxy", ".", "floor", "(", ")", "\n", "\n", "# Width and height", "\n", "twh", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "torch", ".", "log", "(", "gwh", "/", "anchor_wh", "[", "a", "]", ")", "# yolo method", "\n", "# twh[b, a, gj, gi] = torch.sqrt(gwh / anchor_wh[a]) / 2 # power method", "\n", "\n", "# One-hot encoding of label", "\n", "tcls", "[", "b", ",", "a", ",", "gj", ",", "gi", ",", "tc", "]", "=", "1", "\n", "tconf", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "1", "\n", "tid", "[", "b", ",", "a", ",", "gj", ",", "gi", "]", "=", "t_id", ".", "unsqueeze", "(", "1", ")", "\n", "", "tbox", "=", "torch", ".", "cat", "(", "[", "txy", ",", "twh", "]", ",", "-", "1", ")", "\n", "return", "tconf", ",", "tbox", ",", "tid", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.generate_anchor": [[324, 334], ["len", "torch.meshgrid", "torch.meshgrid", "torch.stack", "torch.stack", "mesh.unsqueeze().repeat().float.unsqueeze().repeat().float", "anchor_wh.unsqueeze().unsqueeze().repeat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "xx.cuda", "yy.cuda", "mesh.unsqueeze().repeat().float.unsqueeze().repeat", "anchor_wh.unsqueeze().unsqueeze", "mesh.unsqueeze().repeat().float.unsqueeze", "anchor_wh.unsqueeze"], "function", ["None"], ["", "def", "generate_anchor", "(", "nGh", ",", "nGw", ",", "anchor_wh", ")", ":", "\n", "    ", "nA", "=", "len", "(", "anchor_wh", ")", "\n", "yy", ",", "xx", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "nGh", ")", ",", "torch", ".", "arange", "(", "nGw", ")", ")", "\n", "xx", ",", "yy", "=", "xx", ".", "cuda", "(", ")", ",", "yy", ".", "cuda", "(", ")", "\n", "\n", "mesh", "=", "torch", ".", "stack", "(", "[", "xx", ",", "yy", "]", ",", "dim", "=", "0", ")", "# Shape 2, nGh, nGw", "\n", "mesh", "=", "mesh", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "nA", ",", "1", ",", "1", ",", "1", ")", ".", "float", "(", ")", "# Shape nA x 2 x nGh x nGw", "\n", "anchor_offset_mesh", "=", "anchor_wh", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "nGh", ",", "nGw", ")", "# Shape nA x 2 x nGh x nGw", "\n", "anchor_mesh", "=", "torch", ".", "cat", "(", "[", "mesh", ",", "anchor_offset_mesh", "]", ",", "dim", "=", "1", ")", "# Shape nA x 4 x nGh x nGw", "\n", "return", "anchor_mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.encode_delta": [[335, 345], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log"], ["", "def", "encode_delta", "(", "gt_box_list", ",", "fg_anchor_list", ")", ":", "\n", "    ", "px", ",", "py", ",", "pw", ",", "ph", "=", "fg_anchor_list", "[", ":", ",", "0", "]", ",", "fg_anchor_list", "[", ":", ",", "1", "]", ",", "fg_anchor_list", "[", ":", ",", "2", "]", ",", "fg_anchor_list", "[", ":", ",", "3", "]", "\n", "gx", ",", "gy", ",", "gw", ",", "gh", "=", "gt_box_list", "[", ":", ",", "0", "]", ",", "gt_box_list", "[", ":", ",", "1", "]", ",", "gt_box_list", "[", ":", ",", "2", "]", ",", "gt_box_list", "[", ":", ",", "3", "]", "\n", "dx", "=", "(", "gx", "-", "px", ")", "/", "pw", "\n", "dy", "=", "(", "gy", "-", "py", ")", "/", "ph", "\n", "dw", "=", "torch", ".", "log", "(", "gw", "/", "pw", ")", "\n", "dh", "=", "torch", ".", "log", "(", "gh", "/", "ph", ")", "\n", "return", "torch", ".", "stack", "(", "[", "dx", ",", "dy", ",", "dw", ",", "dh", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.decode_delta": [[346, 355], ["torch.stack", "torch.stack", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "decode_delta", "(", "delta", ",", "fg_anchor_list", ")", ":", "\n", "    ", "px", ",", "py", ",", "pw", ",", "ph", "=", "fg_anchor_list", "[", ":", ",", "0", "]", ",", "fg_anchor_list", "[", ":", ",", "1", "]", ",", "fg_anchor_list", "[", ":", ",", "2", "]", ",", "fg_anchor_list", "[", ":", ",", "3", "]", "\n", "dx", ",", "dy", ",", "dw", ",", "dh", "=", "delta", "[", ":", ",", "0", "]", ",", "delta", "[", ":", ",", "1", "]", ",", "delta", "[", ":", ",", "2", "]", ",", "delta", "[", ":", ",", "3", "]", "\n", "gx", "=", "pw", "*", "dx", "+", "px", "\n", "gy", "=", "ph", "*", "dy", "+", "py", "\n", "gw", "=", "pw", "*", "torch", ".", "exp", "(", "dw", ")", "\n", "gh", "=", "ph", "*", "torch", ".", "exp", "(", "dh", ")", "\n", "return", "torch", ".", "stack", "(", "[", "gx", ",", "gy", ",", "gw", ",", "gh", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.decode_delta_map": [[356, 368], ["utils.generate_anchor", "anchor_mesh.unsqueeze().repeat.permute().contiguous", "anchor_mesh.unsqueeze().repeat.unsqueeze().repeat", "utils.decode_delta", "decode_delta.view", "delta_map.view", "anchor_mesh.unsqueeze().repeat.view", "anchor_mesh.unsqueeze().repeat.permute", "anchor_mesh.unsqueeze().repeat.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.generate_anchor", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.decode_delta"], ["", "def", "decode_delta_map", "(", "delta_map", ",", "anchors", ")", ":", "\n", "    ", "'''\n    :param: delta_map, shape (nB, nA, nGh, nGw, 4)\n    :param: anchors, shape (nA,4)\n    '''", "\n", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "_", "=", "delta_map", ".", "shape", "\n", "anchor_mesh", "=", "generate_anchor", "(", "nGh", ",", "nGw", ",", "anchors", ")", "\n", "anchor_mesh", "=", "anchor_mesh", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "# Shpae (nA x nGh x nGw) x 4", "\n", "anchor_mesh", "=", "anchor_mesh", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "nB", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "pred_list", "=", "decode_delta", "(", "delta_map", ".", "view", "(", "-", "1", ",", "4", ")", ",", "anchor_mesh", ".", "view", "(", "-", "1", ",", "4", ")", ")", "\n", "pred_map", "=", "pred_list", ".", "view", "(", "nB", ",", "nA", ",", "nGh", ",", "nGw", ",", "4", ")", "\n", "return", "pred_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.pooling_nms": [[370, 375], ["torch.max_pool2d"], "function", ["None"], ["", "def", "pooling_nms", "(", "heatmap", ",", "kernel", "=", "1", ")", ":", "\n", "    ", "pad", "=", "(", "kernel", "-", "1", ")", "//", "2", "\n", "hmax", "=", "F", ".", "max_pool2d", "(", "heatmap", ",", "(", "kernel", ",", "kernel", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", ")", "\n", "keep", "=", "(", "hmax", "==", "heatmap", ")", ".", "float", "(", ")", "\n", "return", "keep", "*", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.non_max_suppression": [[377, 411], ["enumerate", "v.unsqueeze.nonzero().squeeze", "utils.xywh2xyxy", "torchvision.ops.nms", "range", "len", "v.unsqueeze.unsqueeze", "len", "len", "v.unsqueeze.nonzero", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.xywh2xyxy", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms"], ["", "def", "non_max_suppression", "(", "prediction", ",", "conf_thres", "=", "0.5", ",", "nms_thres", "=", "0.2", ")", ":", "\n", "    ", "\"\"\"\n    Removes detections with lower object confidence score than 'conf_thres'\n    Non-Maximum Suppression to further filter detections.\n    Returns detections with shape:\n        (x1, y1, x2, y2, object_conf, class_score, class_pred)\n    \"\"\"", "\n", "\n", "output", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "prediction", ")", ")", "]", "\n", "for", "image_i", ",", "pred", "in", "enumerate", "(", "prediction", ")", ":", "\n", "# Filter out confidence scores below threshold", "\n", "# Get score and class with highest confidence", "\n", "\n", "        ", "v", "=", "pred", "[", ":", ",", "4", "]", ">", "conf_thres", "\n", "v", "=", "v", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "v", ".", "shape", ")", "==", "0", ":", "\n", "            ", "v", "=", "v", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "pred", "=", "pred", "[", "v", "]", "\n", "\n", "# If none are remaining => process next image", "\n", "nP", "=", "pred", ".", "shape", "[", "0", "]", "\n", "if", "not", "nP", ":", "\n", "            ", "continue", "\n", "# From (center x, center y, width, height) to (x1, y1, x2, y2)", "\n", "", "pred", "[", ":", ",", ":", "4", "]", "=", "xywh2xyxy", "(", "pred", "[", ":", ",", ":", "4", "]", ")", "\n", "nms_indices", "=", "nms", "(", "pred", "[", ":", ",", ":", "4", "]", ",", "pred", "[", ":", ",", "4", "]", ",", "nms_thres", ")", "\n", "det_max", "=", "pred", "[", "nms_indices", "]", "\n", "\n", "if", "len", "(", "det_max", ")", ">", "0", ":", "\n", "# Add max detections to outputs", "\n", "            ", "output", "[", "image_i", "]", "=", "det_max", "if", "output", "[", "image_i", "]", "is", "None", "else", "torch", ".", "cat", "(", "(", "output", "[", "image_i", "]", ",", "det_max", ")", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.return_torch_unique_index": [[413, 420], ["torch.zeros().long", "torch.zeros().long", "range", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "return_torch_unique_index", "(", "u", ",", "uv", ")", ":", "\n", "    ", "n", "=", "uv", ".", "shape", "[", "1", "]", "# number of columns", "\n", "first_unique", "=", "torch", ".", "zeros", "(", "n", ",", "device", "=", "u", ".", "device", ")", ".", "long", "(", ")", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "        ", "first_unique", "[", "j", "]", "=", "(", "uv", "[", ":", ",", "j", ":", "j", "+", "1", "]", "==", "u", ")", ".", "all", "(", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "\n", "", "return", "first_unique", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.strip_optimizer_from_checkpoint": [[422, 428], ["torch.load", "torch.load", "torch.save", "torch.save", "filename.replace"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "strip_optimizer_from_checkpoint", "(", "filename", "=", "'weights/best.pt'", ")", ":", "\n", "# Strip optimizer from *.pt files for lighter files (reduced by 2/3 size)", "\n", "\n", "    ", "a", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "'cpu'", ")", "\n", "a", "[", "'optimizer'", "]", "=", "[", "]", "\n", "torch", ".", "save", "(", "a", ",", "filename", ".", "replace", "(", "'.pt'", ",", "'_lite.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.utils.plot_results": [[430, 446], ["matplotlib.figure", "sorted", "glob.glob", "range", "range", "numpy.loadtxt", "matplotlib.subplot", "matplotlib.plot", "matplotlib.title", "matplotlib.legend"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses.plot"], ["", "def", "plot_results", "(", ")", ":", "\n", "# Plot YOLO training results file 'results.txt'", "\n", "# import os; os.system('wget https://storage.googleapis.com/ultralytics/yolov3/results_v1.txt')", "\n", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "14", ",", "7", ")", ")", "\n", "s", "=", "[", "'X + Y'", ",", "'Width + Height'", ",", "'Confidence'", ",", "'Classification'", ",", "'Total Loss'", ",", "'mAP'", ",", "'Recall'", ",", "'Precision'", "]", "\n", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "'results*.txt'", ")", ")", "\n", "for", "f", "in", "files", ":", "\n", "        ", "results", "=", "np", ".", "loadtxt", "(", "f", ",", "usecols", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "10", ",", "11", "]", ")", ".", "T", "# column 11 is mAP", "\n", "x", "=", "range", "(", "1", ",", "results", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "2", ",", "4", ",", "i", "+", "1", ")", "\n", "plt", ".", "plot", "(", "x", ",", "results", "[", "i", ",", "x", "]", ",", "marker", "=", "'.'", ",", "label", "=", "f", ")", "\n", "plt", ".", "title", "(", "s", "[", "i", "]", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "plt", ".", "legend", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.__init__": [[12, 19], ["evaluation.Evaluator.load_annotations", "evaluation.Evaluator.reset_accumulator"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.load_annotations", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.reset_accumulator"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "seq_name", ",", "data_type", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "seq_name", "=", "seq_name", "\n", "self", ".", "data_type", "=", "data_type", "\n", "\n", "self", ".", "load_annotations", "(", ")", "\n", "self", ".", "reset_accumulator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.load_annotations": [[20, 26], ["os.path.join", "tracking_utils.io.read_results", "tracking_utils.io.read_results"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.io.read_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.io.read_results"], ["", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "data_type", "==", "'mot'", "\n", "\n", "gt_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "seq_name", ",", "'gt'", ",", "'gt.txt'", ")", "\n", "self", ".", "gt_frame_dict", "=", "read_results", "(", "gt_filename", ",", "self", ".", "data_type", ",", "is_gt", "=", "True", ")", "\n", "self", ".", "gt_ignore_frame_dict", "=", "read_results", "(", "gt_filename", ",", "self", ".", "data_type", ",", "is_ignore", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.reset_accumulator": [[27, 29], ["motmetrics.MOTAccumulator"], "methods", ["None"], ["", "def", "reset_accumulator", "(", "self", ")", ":", "\n", "        ", "self", ".", "acc", "=", "mm", ".", "MOTAccumulator", "(", "auto_id", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.eval_frame": [[30, 77], ["numpy.copy", "numpy.copy", "evaluation.Evaluator.gt_frame_dict.get", "evaluation.Evaluator.gt_ignore_frame_dict.get", "numpy.ones", "motmetrics.distances.iou_matrix", "motmetrics.distances.iou_matrix", "evaluation.Evaluator.acc.update", "tracking_utils.io.unzip_objs", "tracking_utils.io.unzip_objs", "len", "len", "motmetrics.lap.linear_sum_assignment", "map", "numpy.asarray", "hasattr", "numpy.asarray", "numpy.logical_not", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.io.unzip_objs", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.io.unzip_objs"], ["", "def", "eval_frame", "(", "self", ",", "frame_id", ",", "trk_tlwhs", ",", "trk_ids", ",", "rtn_events", "=", "False", ")", ":", "\n", "# results", "\n", "        ", "trk_tlwhs", "=", "np", ".", "copy", "(", "trk_tlwhs", ")", "\n", "trk_ids", "=", "np", ".", "copy", "(", "trk_ids", ")", "\n", "\n", "# gts", "\n", "gt_objs", "=", "self", ".", "gt_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "gt_tlwhs", ",", "gt_ids", "=", "unzip_objs", "(", "gt_objs", ")", "[", ":", "2", "]", "\n", "\n", "# ignore boxes", "\n", "ignore_objs", "=", "self", ".", "gt_ignore_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "ignore_tlwhs", "=", "unzip_objs", "(", "ignore_objs", ")", "[", "0", "]", "\n", "\n", "# remove ignored results", "\n", "keep", "=", "np", ".", "ones", "(", "len", "(", "trk_tlwhs", ")", ",", "dtype", "=", "bool", ")", "\n", "iou_distance", "=", "mm", ".", "distances", ".", "iou_matrix", "(", "ignore_tlwhs", ",", "trk_tlwhs", ",", "max_iou", "=", "0.5", ")", "\n", "if", "len", "(", "iou_distance", ")", ">", "0", ":", "\n", "            ", "match_is", ",", "match_js", "=", "mm", ".", "lap", ".", "linear_sum_assignment", "(", "iou_distance", ")", "\n", "match_is", ",", "match_js", "=", "map", "(", "lambda", "a", ":", "np", ".", "asarray", "(", "a", ",", "dtype", "=", "int", ")", ",", "[", "match_is", ",", "match_js", "]", ")", "\n", "match_ious", "=", "iou_distance", "[", "match_is", ",", "match_js", "]", "\n", "\n", "match_js", "=", "np", ".", "asarray", "(", "match_js", ",", "dtype", "=", "int", ")", "\n", "match_js", "=", "match_js", "[", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "match_ious", ")", ")", "]", "\n", "keep", "[", "match_js", "]", "=", "False", "\n", "trk_tlwhs", "=", "trk_tlwhs", "[", "keep", "]", "\n", "trk_ids", "=", "trk_ids", "[", "keep", "]", "\n", "#match_is, match_js = mm.lap.linear_sum_assignment(iou_distance)", "\n", "#match_is, match_js = map(lambda a: np.asarray(a, dtype=int), [match_is, match_js])", "\n", "#match_ious = iou_distance[match_is, match_js]", "\n", "\n", "#match_js = np.asarray(match_js, dtype=int)", "\n", "#match_js = match_js[np.logical_not(np.isnan(match_ious))]", "\n", "#keep[match_js] = False", "\n", "#trk_tlwhs = trk_tlwhs[keep]", "\n", "#trk_ids = trk_ids[keep]", "\n", "\n", "# get distance matrix", "\n", "", "iou_distance", "=", "mm", ".", "distances", ".", "iou_matrix", "(", "gt_tlwhs", ",", "trk_tlwhs", ",", "max_iou", "=", "0.5", ")", "\n", "\n", "# acc", "\n", "self", ".", "acc", ".", "update", "(", "gt_ids", ",", "trk_ids", ",", "iou_distance", ")", "\n", "\n", "if", "rtn_events", "and", "iou_distance", ".", "size", ">", "0", "and", "hasattr", "(", "self", ".", "acc", ",", "'last_mot_events'", ")", ":", "\n", "            ", "events", "=", "self", ".", "acc", ".", "last_mot_events", "# only supported by https://github.com/longcw/py-motmetrics", "\n", "", "else", ":", "\n", "            ", "events", "=", "None", "\n", "", "return", "events", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.eval_file": [[78, 90], ["evaluation.Evaluator.reset_accumulator", "tracking_utils.io.read_results", "sorted", "list", "tracking_utils.io.read_results.get", "evaluation.Evaluator.eval_frame", "set", "tracking_utils.io.unzip_objs", "tracking_utils.io.read_results.keys"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.reset_accumulator", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.io.read_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.eval_frame", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.io.unzip_objs"], ["", "def", "eval_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "reset_accumulator", "(", ")", "\n", "\n", "result_frame_dict", "=", "read_results", "(", "filename", ",", "self", ".", "data_type", ",", "is_gt", "=", "False", ")", "\n", "#frames = sorted(list(set(self.gt_frame_dict.keys()) | set(result_frame_dict.keys())))", "\n", "frames", "=", "sorted", "(", "list", "(", "set", "(", "result_frame_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "frame_id", "in", "frames", ":", "\n", "            ", "trk_objs", "=", "result_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "trk_tlwhs", ",", "trk_ids", "=", "unzip_objs", "(", "trk_objs", ")", "[", ":", "2", "]", "\n", "self", ".", "eval_frame", "(", "frame_id", ",", "trk_tlwhs", ",", "trk_ids", ",", "rtn_events", "=", "False", ")", "\n", "\n", "", "return", "self", ".", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.get_summary": [[91, 107], ["copy.deepcopy", "copy.deepcopy", "motmetrics.metrics.create", "motmetrics.metrics.create.compute_many"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_summary", "(", "accs", ",", "names", ",", "metrics", "=", "(", "'mota'", ",", "'num_switches'", ",", "'idp'", ",", "'idr'", ",", "'idf1'", ",", "'precision'", ",", "'recall'", ")", ")", ":", "\n", "        ", "names", "=", "copy", ".", "deepcopy", "(", "names", ")", "\n", "if", "metrics", "is", "None", ":", "\n", "            ", "metrics", "=", "mm", ".", "metrics", ".", "motchallenge_metrics", "\n", "", "metrics", "=", "copy", ".", "deepcopy", "(", "metrics", ")", "\n", "\n", "mh", "=", "mm", ".", "metrics", ".", "create", "(", ")", "\n", "summary", "=", "mh", ".", "compute_many", "(", "\n", "accs", ",", "\n", "metrics", "=", "metrics", ",", "\n", "names", "=", "names", ",", "\n", "generate_overall", "=", "True", "\n", ")", "\n", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.evaluation.Evaluator.save_summary": [[108, 114], ["pd.ExcelWriter", "summary.to_excel", "pd.ExcelWriter.save"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "save_summary", "(", "summary", ",", "filename", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "writer", "=", "pd", ".", "ExcelWriter", "(", "filename", ")", "\n", "summary", ".", "to_excel", "(", "writer", ")", "\n", "writer", ".", "save", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.Interperlation_penalty.__init__": [[18, 40], ["torch.Module.__init__", "collisions_loss.DistanceFieldPenetrationLoss().cuda", "BVH().cuda", "os.path.expandvars", "FilterFaces().cuda", "collisions_loss.DistanceFieldPenetrationLoss", "BVH", "open", "pickle.load", "FilterFaces"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["    ", "def", "__init__", "(", "self", ",", "faces_tensor", ",", "df_cone_height", "=", "0.5", ",", "point2plane", "=", "False", ",", "penalize_outside", "=", "True", ",", "max_collisions", "=", "8", ",", "part_segm_fn", "=", "None", ")", ":", "# os.path.join(config.project_dir,\"model/smplx/smplx_parts_segm.pkl\")", "\n", "        ", "super", "(", "Interperlation_penalty", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pen_distance", "=", "collisions_loss", ".", "DistanceFieldPenetrationLoss", "(", "\n", "sigma", "=", "df_cone_height", ",", "point2plane", "=", "point2plane", ",", "\n", "vectorized", "=", "True", ",", "penalize_outside", "=", "penalize_outside", ")", ".", "cuda", "(", ")", "\n", "self", ".", "coll_loss_weight", "=", "1.0", "\n", "self", ".", "search_tree", "=", "BVH", "(", "max_collisions", "=", "max_collisions", ")", ".", "cuda", "(", ")", "\n", "self", ".", "body_model_faces", "=", "faces_tensor", "\n", "\n", "if", "part_segm_fn", ":", "\n", "# Read the part segmentation", "\n", "            ", "part_segm_fn", "=", "os", ".", "path", ".", "expandvars", "(", "part_segm_fn", ")", "\n", "with", "open", "(", "part_segm_fn", ",", "'rb'", ")", "as", "faces_parents_file", ":", "\n", "                ", "face_segm_data", "=", "pickle", ".", "load", "(", "faces_parents_file", ",", "\n", "encoding", "=", "'latin1'", ")", "\n", "", "faces_segm", "=", "face_segm_data", "[", "'segm'", "]", "\n", "faces_parents", "=", "face_segm_data", "[", "'parents'", "]", "\n", "# Create the module used to filter invalid collision pairs", "\n", "self", ".", "tri_filtering_module", "=", "FilterFaces", "(", "\n", "faces_segm", "=", "faces_segm", ",", "faces_parents", "=", "faces_parents", ")", ".", "cuda", "(", ")", "\n", "", "", "def", "forward", "(", "self", ",", "vertices", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.Interperlation_penalty.forward": [[40, 59], ["torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "prior_loss.Interperlation_penalty.search_tree", "prior_loss.Interperlation_penalty.tri_filtering_module", "prior_loss.Interperlation_penalty.ge().sum().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "prior_loss.Interperlation_penalty.ge().sum", "prior_loss.Interperlation_penalty.pen_distance", "prior_loss.Interperlation_penalty.ge"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "", "def", "forward", "(", "self", ",", "vertices", ")", ":", "\n", "        ", "pen_loss", "=", "0.0", "\n", "# Calculate the loss due to interpenetration", "\n", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", "\n", "triangles", "=", "torch", ".", "index_select", "(", "vertices", ",", "1", ",", "\n", "self", ".", "body_model_faces", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "collision_idxs", "=", "self", ".", "search_tree", "(", "triangles", ")", "\n", "\n", "# Remove unwanted collisions", "\n", "", "if", "self", ".", "tri_filtering_module", "is", "not", "None", ":", "\n", "            ", "collision_idxs", "=", "self", ".", "tri_filtering_module", "(", "collision_idxs", ")", "\n", "\n", "", "if", "collision_idxs", ".", "ge", "(", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "            ", "pen_loss", "=", "torch", ".", "sum", "(", "\n", "self", ".", "coll_loss_weight", "*", "\n", "self", ".", "pen_distance", "(", "triangles", ",", "collision_idxs", ")", ")", "\n", "", "return", "pen_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.SMPLifyAnglePrior.__init__": [[115, 133], ["torch.Module.__init__", "numpy.array", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "prior_loss.SMPLifyAnglePrior.register_buffer", "numpy.array", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "prior_loss.SMPLifyAnglePrior.register_buffer"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dtype", "=", "torch", ".", "float32", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SMPLifyAnglePrior", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Indices for the roration angle of", "\n", "# 55: left elbow,  90deg bend at -np.pi/2", "\n", "# 58: right elbow, 90deg bend at np.pi/2", "\n", "# 12: left knee,   90deg bend at np.pi/2", "\n", "# 15: right knee,  90deg bend at np.pi/2", "\n", "angle_prior_idxs", "=", "np", ".", "array", "(", "[", "55", ",", "58", ",", "12", ",", "15", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "angle_prior_idxs", "=", "torch", ".", "tensor", "(", "angle_prior_idxs", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "register_buffer", "(", "'angle_prior_idxs'", ",", "angle_prior_idxs", ")", "\n", "\n", "angle_prior_signs", "=", "np", ".", "array", "(", "[", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "\n", "dtype", "=", "np", ".", "float32", "if", "dtype", "==", "torch", ".", "float32", "\n", "else", "np", ".", "float64", ")", "\n", "angle_prior_signs", "=", "torch", ".", "tensor", "(", "angle_prior_signs", ",", "\n", "dtype", "=", "dtype", ")", "\n", "self", ".", "register_buffer", "(", "'angle_prior_signs'", ",", "angle_prior_signs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.SMPLifyAnglePrior.forward": [[134, 150], ["torch.exp().pow", "torch.exp().pow", "torch.exp().pow", "torch.exp().pow", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pose", ",", "with_global_pose", "=", "False", ")", ":", "\n", "        ", "''' Returns the angle prior loss for the given pose\n        Args:\n            pose: (Bx[23 + 1] * 3) torch tensor with the axis-angle\n            representation of the rotations of the joints of the SMPL model.\n        Kwargs:\n            with_global_pose: Whether the pose vector also contains the global\n            orientation of the SMPL model. If not then the indices must be\n            corrected.\n        Returns:\n            A sze (B) tensor containing the angle prior loss for each element\n            in the batch.\n        '''", "\n", "angle_prior_idxs", "=", "self", ".", "angle_prior_idxs", "-", "(", "not", "with_global_pose", ")", "*", "3", "\n", "return", "torch", ".", "exp", "(", "pose", "[", ":", ",", "angle_prior_idxs", "]", "*", "\n", "self", ".", "angle_prior_signs", ")", ".", "pow", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.L2Prior.__init__": [[153, 155], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dtype", "=", "DEFAULT_DTYPE", ",", "reduction", "=", "'sum'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "L2Prior", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.L2Prior.forward": [[156, 158], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "module_input.pow"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "forward", "(", "self", ",", "module_input", ",", "*", "args", ")", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "module_input", ".", "pow", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MaxMixturePrior.__init__": [[162, 226], ["torch.Module.__init__", "os.path.exists", "print", "prior_loss.MaxMixturePrior.register_buffer", "prior_loss.MaxMixturePrior.register_buffer", "numpy.stack().astype", "prior_loss.MaxMixturePrior.register_buffer", "numpy.array", "numpy.asarray", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "prior_loss.MaxMixturePrior.register_buffer", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "prior_loss.MaxMixturePrior.register_buffer", "prior_loss.MaxMixturePrior.register_buffer", "prior_loss.MaxMixturePrior.register_buffer", "config.args", "open", "pickle.load", "type", "gmm[].astype", "gmm[].astype", "gmm[].astype", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.linalg.inv", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "torch.log", "torch.log", "numpy.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "print", "sys.exit", "str", "pickle.load.means_.astype", "pickle.load.covars_.astype", "pickle.load.weights_.astype", "print", "sys.exit", "numpy.stack", "numpy.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "type", "numpy.linalg.det", "numpy.linalg.det", "type", "numpy.array.min", "cov.astype"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["    ", "def", "__init__", "(", "self", ",", "smpl_prior_path", "=", "args", "(", ")", ".", "smpl_prior_path", ",", "\n", "num_gaussians", "=", "8", ",", "dtype", "=", "DEFAULT_DTYPE", ",", "epsilon", "=", "1e-16", ",", "\n", "use_merged", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MaxMixturePrior", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "dtype", "==", "DEFAULT_DTYPE", ":", "\n", "            ", "np_dtype", "=", "np", ".", "float32", "\n", "", "elif", "dtype", "==", "torch", ".", "float64", ":", "\n", "            ", "np_dtype", "=", "np", ".", "float64", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Unknown float type {}, exiting!'", ".", "format", "(", "dtype", ")", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "\n", "", "self", ".", "num_gaussians", "=", "num_gaussians", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_merged", "=", "use_merged", "\n", "\n", "#gmm_fn = 'gmm_{:02d}.pkl'.format(num_gaussians)", "\n", "#smpl_prior_path = os.path.join(prior_folder, gmm_fn)", "\n", "assert", "os", ".", "path", ".", "exists", "(", "smpl_prior_path", ")", ",", "print", "(", "'The path to the mixture prior {} does not exist'", ".", "format", "(", "smpl_prior_path", ")", ")", "\n", "\n", "with", "open", "(", "smpl_prior_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "gmm", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "if", "type", "(", "gmm", ")", "==", "dict", ":", "\n", "            ", "means", "=", "gmm", "[", "'means'", "]", ".", "astype", "(", "np_dtype", ")", "\n", "covs", "=", "gmm", "[", "'covars'", "]", ".", "astype", "(", "np_dtype", ")", "\n", "weights", "=", "gmm", "[", "'weights'", "]", ".", "astype", "(", "np_dtype", ")", "\n", "", "elif", "'sklearn.mixture.gmm.GMM'", "in", "str", "(", "type", "(", "gmm", ")", ")", ":", "\n", "            ", "means", "=", "gmm", ".", "means_", ".", "astype", "(", "np_dtype", ")", "\n", "covs", "=", "gmm", ".", "covars_", ".", "astype", "(", "np_dtype", ")", "\n", "weights", "=", "gmm", ".", "weights_", ".", "astype", "(", "np_dtype", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Unknown type for the prior: {}, exiting!'", ".", "format", "(", "type", "(", "gmm", ")", ")", ")", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'means'", ",", "torch", ".", "tensor", "(", "means", ",", "dtype", "=", "dtype", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'covs'", ",", "torch", ".", "tensor", "(", "covs", ",", "dtype", "=", "dtype", ")", ")", "\n", "\n", "precisions", "=", "[", "np", ".", "linalg", ".", "inv", "(", "cov", ")", "for", "cov", "in", "covs", "]", "\n", "precisions", "=", "np", ".", "stack", "(", "precisions", ")", ".", "astype", "(", "np_dtype", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'precisions'", ",", "torch", ".", "tensor", "(", "precisions", ",", "dtype", "=", "dtype", ")", ")", "\n", "\n", "# The constant term:", "\n", "sqrdets", "=", "np", ".", "array", "(", "[", "(", "np", ".", "sqrt", "(", "np", ".", "linalg", ".", "det", "(", "c", ")", ")", ")", "\n", "for", "c", "in", "gmm", "[", "'covars'", "]", "]", ")", "\n", "const", "=", "(", "2", "*", "np", ".", "pi", ")", "**", "(", "69", "/", "2.", ")", "\n", "\n", "nll_weights", "=", "np", ".", "asarray", "(", "gmm", "[", "'weights'", "]", "/", "(", "const", "*", "(", "sqrdets", "/", "sqrdets", ".", "min", "(", ")", ")", ")", ")", "\n", "nll_weights", "=", "torch", ".", "tensor", "(", "nll_weights", ",", "dtype", "=", "dtype", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "self", ".", "register_buffer", "(", "'nll_weights'", ",", "nll_weights", ")", "\n", "\n", "weights", "=", "torch", ".", "tensor", "(", "gmm", "[", "'weights'", "]", ",", "dtype", "=", "dtype", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "self", ".", "register_buffer", "(", "'weights'", ",", "weights", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'pi_term'", ",", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "2", "*", "np", ".", "pi", ",", "dtype", "=", "dtype", ")", ")", ")", "\n", "\n", "cov_dets", "=", "[", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "cov", ".", "astype", "(", "np_dtype", ")", ")", "+", "epsilon", ")", "for", "cov", "in", "covs", "]", "\n", "self", ".", "register_buffer", "(", "'cov_dets'", ",", "torch", ".", "tensor", "(", "cov_dets", ",", "dtype", "=", "dtype", ")", ")", "\n", "\n", "# The dimensionality of the random variable", "\n", "self", ".", "random_var_dim", "=", "self", ".", "means", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MaxMixturePrior.get_mean": [[227, 231], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "get_mean", "(", "self", ")", ":", "\n", "        ", "''' Returns the mean of the mixture '''", "\n", "mean_pose", "=", "torch", ".", "matmul", "(", "self", ".", "weights", ",", "self", ".", "means", ")", "\n", "return", "mean_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MaxMixturePrior.merged_log_likelihood": [[232, 248], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.min", "torch.min", "torch.min", "torch.min", "pose.unsqueeze", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log"], ["", "def", "merged_log_likelihood", "(", "self", ",", "pose", ")", ":", "\n", "        ", "param_num", "=", "pose", ".", "shape", "[", "1", "]", "\n", "diff_from_mean", "=", "pose", ".", "unsqueeze", "(", "dim", "=", "1", ")", "-", "self", ".", "means", "[", ":", ",", ":", "param_num", "]", "\n", "\n", "prec_diff_prod", "=", "torch", ".", "einsum", "(", "'mij,bmj->bmi'", ",", "\n", "[", "self", ".", "precisions", "[", ":", ",", ":", "param_num", ",", ":", "param_num", "]", ",", "diff_from_mean", "]", ")", "\n", "diff_prec_quadratic", "=", "(", "prec_diff_prod", "*", "diff_from_mean", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "curr_loglikelihood", "=", "0.5", "*", "diff_prec_quadratic", "-", "torch", ".", "log", "(", "self", ".", "nll_weights", ")", "\n", "#  curr_loglikelihood = 0.5 * (self.cov_dets.unsqueeze(dim=0) +", "\n", "#  self.random_var_dim * self.pi_term +", "\n", "#  diff_prec_quadratic", "\n", "#  ) - torch.log(self.weights)", "\n", "\n", "min_likelihood", ",", "_", "=", "torch", ".", "min", "(", "curr_loglikelihood", ",", "dim", "=", "1", ")", "\n", "return", "min_likelihood", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MaxMixturePrior.log_likelihood": [[249, 277], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.log", "torch.log", "torch.log", "torch.log", "likelihoods.append", "torch.log", "torch.log", "torch.log", "torch.log", "torch.det", "torch.det", "torch.det", "torch.det"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log"], ["", "def", "log_likelihood", "(", "self", ",", "pose", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Create graph operation for negative log-likelihood calculation\n        '''", "\n", "likelihoods", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "self", ".", "num_gaussians", ")", ":", "\n", "            ", "mean", "=", "self", ".", "means", "[", "idx", "]", "\n", "prec", "=", "self", ".", "precisions", "[", "idx", "]", "\n", "cov", "=", "self", ".", "covs", "[", "idx", "]", "\n", "diff_from_mean", "=", "pose", "-", "mean", "\n", "\n", "curr_loglikelihood", "=", "torch", ".", "einsum", "(", "'bj,ji->bi'", ",", "\n", "[", "diff_from_mean", ",", "prec", "]", ")", "\n", "curr_loglikelihood", "=", "torch", ".", "einsum", "(", "'bi,bi->b'", ",", "\n", "[", "curr_loglikelihood", ",", "\n", "diff_from_mean", "]", ")", "\n", "cov_term", "=", "torch", ".", "log", "(", "torch", ".", "det", "(", "cov", ")", "+", "self", ".", "epsilon", ")", "\n", "curr_loglikelihood", "+=", "0.5", "*", "(", "cov_term", "+", "\n", "self", ".", "random_var_dim", "*", "\n", "self", ".", "pi_term", ")", "\n", "likelihoods", ".", "append", "(", "curr_loglikelihood", ")", "\n", "\n", "", "log_likelihoods", "=", "torch", ".", "stack", "(", "likelihoods", ",", "dim", "=", "1", ")", "\n", "min_idx", "=", "torch", ".", "argmin", "(", "log_likelihoods", ",", "dim", "=", "1", ")", "\n", "weight_component", "=", "self", ".", "nll_weights", "[", ":", ",", "min_idx", "]", "\n", "weight_component", "=", "-", "torch", ".", "log", "(", "weight_component", ")", "\n", "\n", "return", "weight_component", "+", "log_likelihoods", "[", ":", ",", "min_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MaxMixturePrior.forward": [[278, 283], ["prior_loss.MaxMixturePrior.merged_log_likelihood", "prior_loss.MaxMixturePrior.log_likelihood"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MaxMixturePrior.merged_log_likelihood", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MaxMixturePrior.log_likelihood"], ["", "def", "forward", "(", "self", ",", "pose", ")", ":", "\n", "        ", "if", "self", ".", "use_merged", ":", "\n", "            ", "return", "self", ".", "merged_log_likelihood", "(", "pose", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "log_likelihood", "(", "pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MultiLossFactory.__init__": [[285, 309], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "HeatmapLoss", "AELoss"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_joints", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_joints", "=", "num_joints", "\n", "self", ".", "num_stages", "=", "1", "\n", "\n", "self", ".", "heatmaps_loss", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "HeatmapLoss", "(", ")", "\n", "if", "with_heatmaps_loss", "else", "None", "\n", "for", "with_heatmaps_loss", "in", "[", "True", "]", "\n", "]", "\n", ")", "\n", "self", ".", "heatmaps_loss_factor", "=", "[", "1.", "]", "\n", "\n", "self", ".", "ae_loss", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "AELoss", "(", "'exp'", ")", "if", "with_ae_loss", "else", "None", "\n", "for", "with_ae_loss", "in", "[", "True", "]", "\n", "]", "\n", ")", "\n", "self", ".", "push_loss_factor", "=", "[", "0.001", "]", "\n", "self", ".", "pull_loss_factor", "=", "[", "0.001", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MultiLossFactory.forward": [[310, 349], ["prior_loss.MultiLossFactory._forward_check", "range", "len", "heatmaps_losses.append", "heatmaps_losses.append", "tags_pred.contiguous().view.contiguous().view.contiguous().view", "push_losses.append", "pull_losses.append", "push_losses.append", "pull_losses.append", "tags_pred.contiguous().view.contiguous().view.size", "tags_pred.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MultiLossFactory._forward_check"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "heatmaps", ",", "masks", ",", "joints", ")", ":", "\n", "# forward check", "\n", "        ", "self", ".", "_forward_check", "(", "outputs", ",", "heatmaps", ",", "masks", ",", "joints", ")", "\n", "\n", "heatmaps_losses", "=", "[", "]", "\n", "push_losses", "=", "[", "]", "\n", "pull_losses", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "            ", "offset_feat", "=", "0", "\n", "if", "self", ".", "heatmaps_loss", "[", "idx", "]", ":", "\n", "                ", "heatmaps_pred", "=", "outputs", "[", "idx", "]", "[", ":", ",", ":", "self", ".", "num_joints", "]", "\n", "offset_feat", "=", "self", ".", "num_joints", "\n", "\n", "heatmaps_loss", "=", "self", ".", "heatmaps_loss", "[", "idx", "]", "(", "\n", "heatmaps_pred", ",", "heatmaps", "[", "idx", "]", ",", "masks", "[", "idx", "]", "\n", ")", "\n", "heatmaps_loss", "=", "heatmaps_loss", "*", "self", ".", "heatmaps_loss_factor", "[", "idx", "]", "\n", "heatmaps_losses", ".", "append", "(", "heatmaps_loss", ")", "\n", "", "else", ":", "\n", "                ", "heatmaps_losses", ".", "append", "(", "None", ")", "\n", "\n", "", "if", "self", ".", "ae_loss", "[", "idx", "]", ":", "\n", "                ", "tags_pred", "=", "outputs", "[", "idx", "]", "[", ":", ",", "offset_feat", ":", "]", "\n", "batch_size", "=", "tags_pred", ".", "size", "(", ")", "[", "0", "]", "\n", "tags_pred", "=", "tags_pred", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", "\n", "\n", "push_loss", ",", "pull_loss", "=", "self", ".", "ae_loss", "[", "idx", "]", "(", "\n", "tags_pred", ",", "joints", "[", "idx", "]", "\n", ")", "\n", "push_loss", "=", "push_loss", "*", "self", ".", "push_loss_factor", "[", "idx", "]", "\n", "pull_loss", "=", "pull_loss", "*", "self", ".", "pull_loss_factor", "[", "idx", "]", "\n", "\n", "push_losses", ".", "append", "(", "push_loss", ")", "\n", "pull_losses", ".", "append", "(", "pull_loss", ")", "\n", "", "else", ":", "\n", "                ", "push_losses", ".", "append", "(", "None", ")", "\n", "pull_losses", ".", "append", "(", "None", ")", "\n", "\n", "", "", "return", "heatmaps_losses", ",", "push_losses", ",", "pull_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.MultiLossFactory._forward_check": [[350, 373], ["isinstance", "isinstance", "isinstance", "isinstance", "type", "type", "type", "type", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "_forward_check", "(", "self", ",", "outputs", ",", "heatmaps", ",", "masks", ",", "joints", ")", ":", "\n", "        ", "assert", "isinstance", "(", "outputs", ",", "list", ")", ",", "'outputs should be a list, got {} instead.'", ".", "format", "(", "type", "(", "outputs", ")", ")", "\n", "assert", "isinstance", "(", "heatmaps", ",", "list", ")", ",", "'heatmaps should be a list, got {} instead.'", ".", "format", "(", "type", "(", "heatmaps", ")", ")", "\n", "assert", "isinstance", "(", "masks", ",", "list", ")", ",", "'masks should be a list, got {} instead.'", ".", "format", "(", "type", "(", "masks", ")", ")", "\n", "assert", "isinstance", "(", "joints", ",", "list", ")", ",", "'joints should be a list, got {} instead.'", ".", "format", "(", "type", "(", "joints", ")", ")", "\n", "assert", "len", "(", "outputs", ")", "==", "self", ".", "num_stages", ",", "'len(outputs) and num_stages should been same, got {} vs {}.'", ".", "format", "(", "len", "(", "outputs", ")", ",", "self", ".", "num_stages", ")", "\n", "assert", "len", "(", "outputs", ")", "==", "len", "(", "heatmaps", ")", ",", "'outputs and heatmaps should have same length, got {} vs {}.'", ".", "format", "(", "len", "(", "outputs", ")", ",", "len", "(", "heatmaps", ")", ")", "\n", "assert", "len", "(", "outputs", ")", "==", "len", "(", "masks", ")", ",", "'outputs and masks should have same length, got {} vs {}.'", ".", "format", "(", "len", "(", "outputs", ")", ",", "len", "(", "masks", ")", ")", "\n", "assert", "len", "(", "outputs", ")", "==", "len", "(", "joints", ")", ",", "'outputs and joints should have same length, got {} vs {}.'", ".", "format", "(", "len", "(", "outputs", ")", ",", "len", "(", "joints", ")", ")", "\n", "assert", "len", "(", "outputs", ")", "==", "len", "(", "self", ".", "heatmaps_loss", ")", ",", "'outputs and heatmaps_loss should have same length, got {} vs {}.'", ".", "format", "(", "len", "(", "outputs", ")", ",", "len", "(", "self", ".", "heatmaps_loss", ")", ")", "\n", "assert", "len", "(", "outputs", ")", "==", "len", "(", "self", ".", "ae_loss", ")", ",", "'outputs and ae_loss should have same length, got {} vs {}.'", ".", "format", "(", "len", "(", "outputs", ")", ",", "len", "(", "self", ".", "ae_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.vposer_valid": [[60, 89], ["torch.zeros", "torch.zeros", "osp.expandvars", "load_vposer", "vposer.to.to", "vposer.to.eval", "torch.zeros", "torch.zeros", "list", "list", "torch.zeros.detach().cpu().numpy", "vposer.to.decode().view", "torch.no_grad", "torch.no_grad", "torch.zeros.fill_", "body_model.parameters", "filter", "list.append", "torch.zeros.detach().cpu", "vposer.to.decode", "torch.zeros.detach"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode"], ["", "", "def", "vposer_valid", "(", ")", ":", "\n", "    ", "vposer", ",", "pose_embedding", "=", "[", "None", ",", "]", "*", "2", "\n", "\n", "pose_embedding", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "32", "]", ",", "\n", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n", "vposer_ckpt", "=", "osp", ".", "expandvars", "(", "vposer_ckpt", ")", "\n", "vposer", ",", "_", "=", "load_vposer", "(", "vposer_ckpt", ",", "vp_model", "=", "'snapshot'", ")", "\n", "vposer", "=", "vposer", ".", "to", "(", "device", "=", "device", ")", "\n", "vposer", ".", "eval", "(", ")", "\n", "\n", "body_mean_pose", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "vposer_latent_dim", "]", ",", "\n", "dtype", "=", "dtype", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pose_embedding", ".", "fill_", "(", "0", ")", "\n", "\n", "", "body_params", "=", "list", "(", "body_model", ".", "parameters", "(", ")", ")", "\n", "\n", "final_params", "=", "list", "(", "\n", "filter", "(", "lambda", "x", ":", "x", ".", "requires_grad", ",", "body_params", ")", ")", "\n", "\n", "if", "use_vposer", ":", "\n", "        ", "final_params", ".", "append", "(", "pose_embedding", ")", "\n", "", "result", "[", "'body_pose'", "]", "=", "pose_embedding", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "body_pose", "=", "vposer", ".", "decode", "(", "\n", "pose_embedding", ",", "\n", "output_type", "=", "'aa'", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.create_prior": [[90, 105], ["prior_loss.MaxMixturePrior", "prior_loss.L2Prior", "prior_loss.SMPLifyAnglePrior", "ValueError"], "function", ["None"], ["", "def", "create_prior", "(", "prior_type", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "prior_type", "==", "'gmm'", ":", "\n", "        ", "prior", "=", "MaxMixturePrior", "(", "**", "kwargs", ")", "\n", "", "elif", "prior_type", "==", "'l2'", ":", "\n", "        ", "return", "L2Prior", "(", "**", "kwargs", ")", "\n", "", "elif", "prior_type", "==", "'angle'", ":", "\n", "        ", "return", "SMPLifyAnglePrior", "(", "**", "kwargs", ")", "\n", "", "elif", "prior_type", "==", "'none'", "or", "prior_type", "is", "None", ":", "\n", "# Don't use any pose prior", "\n", "        ", "def", "no_prior", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "0.0", "\n", "", "prior", "=", "no_prior", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Prior {}'", ".", "format", "(", "prior_type", ")", "+", "' is not implemented'", ")", "\n", "", "return", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.prior_loss.angle_prior": [[106, 112], ["torch.exp", "torch.exp", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "angle_prior", "(", "pose", ")", ":", "\n", "    ", "\"\"\"\n    Angle prior that penalizes unnatural bending of the knees and elbows\n    \"\"\"", "\n", "# We subtract 3 because pose does not include the global rotation of the model", "\n", "return", "(", "torch", ".", "exp", "(", "pose", "[", ":", ",", "[", "55", "-", "3", ",", "58", "-", "3", ",", "12", "-", "3", ",", "15", "-", "3", "]", "]", "*", "torch", ".", "tensor", "(", "[", "1.", ",", "-", "1.", ",", "-", "1", ",", "-", "1.", "]", ",", "device", "=", "pose", ".", "device", ")", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.learnable_loss.Learnable_Loss.__init__": [[18, 29], ["torch.Module.__init__", "numpy.concatenate().tolist", "config.args", "learnable_loss.Learnable_Loss.loss_class[].append", "config.args", "learnable_loss.Learnable_Loss.loss_class[].append", "config.args", "numpy.concatenate", "learnable_loss.Learnable_Loss.loss_class.items"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["def", "__init__", "(", "self", ",", "ID_num", "=", "0", ")", ":", "\n", "        ", "super", "(", "Learnable_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_class", "=", "{", "'det'", ":", "[", "'CenterMap'", ",", "'CenterMap_3D'", "]", ",", "'reg'", ":", "[", "'MPJPE'", ",", "'PAMPJPE'", ",", "'P_KP2D'", ",", "'Pose'", ",", "'Shape'", ",", "'Cam'", ",", "'Prior'", "]", "}", "\n", "self", ".", "all_loss_names", "=", "np", ".", "concatenate", "(", "[", "loss_list", "for", "task_name", ",", "loss_list", "in", "self", ".", "loss_class", ".", "items", "(", ")", "]", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "args", "(", ")", ".", "learn_2dpose", ":", "\n", "            ", "self", ".", "loss_class", "[", "'reg'", "]", ".", "append", "(", "'heatmap'", ")", "\n", "", "if", "args", "(", ")", ".", "learn_AE", ":", "\n", "            ", "self", ".", "loss_class", "[", "'reg'", "]", ".", "append", "(", "'AE'", ")", "\n", "", "if", "args", "(", ")", ".", "learn_relative", ":", "\n", "            ", "self", ".", "loss_class", "[", "'rel'", "]", "=", "[", "'R_Age'", ",", "'R_Gender'", ",", "'R_Weight'", ",", "'R_Depth'", ",", "'R_Depth_scale'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.learnable_loss.Learnable_Loss.forward": [[30, 71], ["loss_dict.items", "sum", "sum", "dict", "value.mean", "isinstance", "sum", "loss_tasks.update", "config.args", "config.args", "loss_dict.items", "outputs[].sum", "[].to", "[].contiguous().to", "[].contiguous", "isinstance", "config.args", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "config.args", "len", "print", "value.item", "loss_list.append", "loss_list.append", "[].contiguous", "loss_funcs.keypoints_loss.calc_pampjpe().mean", "config.args", "config.args", "loss_funcs.keypoints_loss.calc_pampjpe", "value.item", "[].contiguous().to.contiguous().float", "[].contiguous.contiguous().float", "config.args", "[].contiguous().to.contiguous", "[].contiguous.contiguous"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pampjpe", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "def", "forward", "(", "self", ",", "outputs", ",", "new_training", "=", "False", ")", ":", "\n", "        ", "loss_dict", "=", "outputs", "[", "'loss_dict'", "]", "\n", "if", "args", "(", ")", ".", "model_return_loss", "and", "args", "(", ")", ".", "calc_mesh_loss", "and", "not", "new_training", ":", "\n", "            ", "if", "args", "(", ")", ".", "PAMPJPE_weight", ">", "0", "and", "outputs", "[", "'detection_flag'", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "try", ":", "\n", "                    ", "kp3d_mask", "=", "outputs", "[", "'meta_data'", "]", "[", "'valid_masks'", "]", "[", ":", ",", "1", "]", ".", "to", "(", "outputs", "[", "'j3d'", "]", ".", "device", ")", "\n", "kp3d_gt", "=", "outputs", "[", "'meta_data'", "]", "[", "'kp_3d'", "]", "[", "kp3d_mask", "]", ".", "contiguous", "(", ")", ".", "to", "(", "outputs", "[", "'j3d'", "]", ".", "device", ")", "\n", "preds_kp3d", "=", "outputs", "[", "'j3d'", "]", "[", "kp3d_mask", ",", ":", "kp3d_gt", ".", "shape", "[", "1", "]", "]", ".", "contiguous", "(", ")", "\n", "if", "len", "(", "preds_kp3d", ")", ">", "0", ":", "\n", "                        ", "loss_dict", "[", "'PAMPJPE'", "]", "=", "calc_pampjpe", "(", "kp3d_gt", ".", "contiguous", "(", ")", ".", "float", "(", ")", ",", "preds_kp3d", ".", "contiguous", "(", ")", ".", "float", "(", ")", ")", ".", "mean", "(", ")", "*", "args", "(", ")", ".", "PAMPJPE_weight", "\n", "", "", "except", "Exception", "as", "exp_error", ":", "\n", "                    ", "print", "(", "'PA_MPJPE calculation failed! ll'", ",", "exp_error", ")", "\n", "\n", "", "", "", "loss_dict", "=", "{", "key", ":", "value", ".", "mean", "(", ")", "for", "key", ",", "value", "in", "loss_dict", ".", "items", "(", ")", "if", "not", "isinstance", "(", "value", ",", "int", ")", "}", "\n", "\n", "if", "new_training", "and", "args", "(", ")", ".", "model_version", "==", "6", ":", "\n", "            ", "loss_dict", "[", "'CenterMap_3D'", "]", "=", "loss_dict", "[", "'CenterMap_3D'", "]", "/", "1000.", "\n", "loss_dict", "=", "{", "key", ":", "loss_dict", "[", "key", "]", "for", "key", "in", "self", ".", "loss_class", "[", "'det'", "]", "}", "\n", "\n", "", "loss_list", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "if", "not", "torch", ".", "isnan", "(", "value", ")", ":", "\n", "                    ", "if", "value", ".", "item", "(", ")", "<", "args", "(", ")", ".", "loss_thresh", ":", "\n", "                        ", "loss_list", ".", "append", "(", "value", ")", "\n", "", "else", ":", "\n", "                        ", "loss_list", ".", "append", "(", "value", "/", "(", "value", ".", "item", "(", ")", "/", "args", "(", ")", ".", "loss_thresh", ")", ")", "\n", "", "", "", "", "loss", "=", "sum", "(", "loss_list", ")", "\n", "\n", "loss_tasks", "=", "{", "}", "\n", "for", "loss_class", "in", "self", ".", "loss_class", ":", "\n", "            ", "loss_tasks", "[", "loss_class", "]", "=", "sum", "(", "\n", "[", "loss_dict", "[", "item", "]", "for", "item", "in", "self", ".", "loss_class", "[", "loss_class", "]", "if", "item", "in", "loss_dict", "]", ")", "\n", "\n", "", "left_loss", "=", "sum", "(", "[", "loss_dict", "[", "loss_item", "]", "for", "loss_item", "in", "loss_dict", "if", "loss_item", "not", "in", "self", ".", "all_loss_names", "]", ")", "\n", "if", "left_loss", "!=", "0", ":", "\n", "            ", "loss_tasks", ".", "update", "(", "{", "'Others'", ":", "left_loss", "}", ")", "\n", "\n", "", "outputs", "[", "'loss_dict'", "]", "=", "dict", "(", "loss_tasks", ",", "**", "loss_dict", ")", "\n", "\n", "return", "loss", ",", "outputs", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss.batch_l2_loss": [[18, 21], ["torch.norm", "torch.norm", "torch.norm.mean"], "function", ["None"], ["def", "batch_l2_loss", "(", "real", ",", "predict", ")", ":", "\n", "    ", "loss_batch", "=", "torch", ".", "norm", "(", "real", "-", "predict", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "return", "loss_batch", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss.batch_smpl_pose_l2_error": [[22, 30], ["utils.batch_rodrigues().contiguous", "utils.batch_rodrigues().contiguous", "torch.norm", "torch.norm", "loss.reshape().mean.reshape().mean", "utils.batch_rodrigues", "utils.batch_rodrigues", "loss.reshape().mean.reshape", "batch_rodrigues().contiguous.reshape", "batch_rodrigues().contiguous.reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues"], ["", "def", "batch_smpl_pose_l2_error", "(", "real", ",", "predict", ")", ":", "\n", "# convert to rot mat, multiple angular maps to the same rotation with Pi as a period.", "\n", "    ", "batch_size", "=", "real", ".", "shape", "[", "0", "]", "\n", "real", "=", "batch_rodrigues", "(", "real", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", ".", "contiguous", "(", ")", "#(N*J)*3 -> (N*J)*3*3", "\n", "predict", "=", "batch_rodrigues", "(", "predict", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", ".", "contiguous", "(", ")", "#(N*J)*3 -> (N*J)*3*3", "\n", "loss", "=", "torch", ".", "norm", "(", "(", "real", "-", "predict", ")", ".", "view", "(", "-", "1", ",", "9", ")", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "#self.sl1loss(real,predict)#", "\n", "loss", "=", "loss", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss._calc_MPJAE": [[31, 36], ["params_loss.trans_relative_rot_to_global_rotmat", "params_loss.trans_relative_rot_to_global_rotmat", "_calc_joint_angle_error().cpu().numpy", "_calc_joint_angle_error().cpu", "params_loss._calc_joint_angle_error"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss.trans_relative_rot_to_global_rotmat", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss.trans_relative_rot_to_global_rotmat", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss._calc_joint_angle_error"], ["", "def", "_calc_MPJAE", "(", "rel_pose_pred", ",", "rel_pose_real", ")", ":", "\n", "    ", "global_pose_rotmat_pred", "=", "trans_relative_rot_to_global_rotmat", "(", "rel_pose_pred", ",", "with_global_rot", "=", "True", ")", "\n", "global_pose_rotmat_real", "=", "trans_relative_rot_to_global_rotmat", "(", "rel_pose_real", ",", "with_global_rot", "=", "True", ")", "\n", "MPJAE_error", "=", "_calc_joint_angle_error", "(", "global_pose_rotmat_pred", ",", "global_pose_rotmat_real", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "MPJAE_error", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss.trans_relative_rot_to_global_rotmat": [[37, 68], ["utils.batch_rodrigues().view().contiguous", "[].contiguous", "numpy.array", "range", "range", "utils.batch_rodrigues().view", "int", "torch.matmul", "torch.matmul", "results.append", "numpy.array", "[].cuda().repeat", "torch.matmul", "torch.matmul", "results.append", "torch.stack", "torch.stack", "utils.batch_rodrigues", "[].cuda", "params.reshape", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues"], ["", "def", "trans_relative_rot_to_global_rotmat", "(", "params", ",", "with_global_rot", "=", "False", ")", ":", "\n", "    ", "'''\n    calculate absolute rotation matrix in the global coordinate frame of K body parts. \n    The rotation is the map from the local bone coordinate frame to the global one.\n    K= 9 parts in the following order: \n    root (JOINT 0) , left hip  (JOINT 1), right hip (JOINT 2), left knee (JOINT 4), right knee (JOINT 5), \n    left shoulder (JOINT 16), right shoulder (JOINT 17), left elbow (JOINT 18), right elbow (JOINT 19).\n    parent kinetic tree [-1,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9, 12, 13, 14, 16, 17, 18, 19, 20, 21]\n    '''", "\n", "batch_size", ",", "param_num", "=", "params", ".", "shape", "[", "0", "]", ",", "params", ".", "shape", "[", "1", "]", "//", "3", "\n", "pose_rotmat", "=", "batch_rodrigues", "(", "params", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", ".", "view", "(", "batch_size", ",", "param_num", ",", "3", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "if", "with_global_rot", ":", "\n", "        ", "sellect_joints", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "16", ",", "17", ",", "18", ",", "19", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "results", "=", "[", "pose_rotmat", "[", ":", ",", "0", "]", "]", "\n", "for", "idx", "in", "range", "(", "param_num", "-", "1", ")", ":", "\n", "            ", "i_val", "=", "int", "(", "idx", "+", "1", ")", "\n", "joint_rot", "=", "pose_rotmat", "[", ":", ",", "i_val", "]", "\n", "parent", "=", "constants", ".", "kintree_parents", "[", "i_val", "]", "\n", "glob_transf_mat", "=", "torch", ".", "matmul", "(", "results", "[", "parent", "]", ",", "joint_rot", ")", "\n", "results", ".", "append", "(", "glob_transf_mat", ")", "\n", "", "", "else", ":", "\n", "        ", "sellect_joints", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "4", ",", "5", ",", "16", ",", "17", ",", "18", ",", "19", "]", ",", "dtype", "=", "np", ".", "int", ")", "-", "1", "\n", "results", "=", "[", "torch", ".", "eye", "(", "3", ",", "3", ")", "[", "None", "]", ".", "cuda", "(", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "]", "\n", "for", "i_val", "in", "range", "(", "param_num", "-", "1", ")", ":", "\n", "#i_val = int(idx + 1)", "\n", "            ", "joint_rot", "=", "pose_rotmat", "[", ":", ",", "i_val", "]", "\n", "parent", "=", "constants", ".", "kintree_parents", "[", "i_val", "+", "1", "]", "\n", "glob_transf_mat", "=", "torch", ".", "matmul", "(", "results", "[", "parent", "]", ",", "joint_rot", ")", "\n", "results", ".", "append", "(", "glob_transf_mat", ")", "\n", "", "", "global_rotmat", "=", "torch", ".", "stack", "(", "results", ",", "axis", "=", "1", ")", "[", ":", ",", "sellect_joints", "]", ".", "contiguous", "(", ")", "\n", "return", "global_rotmat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss._calc_joint_angle_error": [[69, 90], ["pred_mat.reshape", "gt_mat.reshape", "gt_mat.reshape.permute", "torch.matmul", "torch.matmul", "utils.rotation_matrix_to_angle_axis", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.rotation_matrix_to_angle_axis"], ["", "def", "_calc_joint_angle_error", "(", "pred_mat", ",", "gt_mat", ",", "return_axis_angle", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Compute the geodesic distance between the two input matrices.\n    :param pred_mat: predicted rotation matrices. Shape: ( Seq, 9g, 3, 3)\n    :param gt_mat: ground truth rotation matrices. Shape: ( Seq, 9, 3, 3)\n    :return: Mean geodesic distance between input matrices.\n    \"\"\"", "\n", "\n", "# Reshape the matrices into B x 3 x 3 arrays", "\n", "r1", "=", "pred_mat", ".", "reshape", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "r2", "=", "gt_mat", ".", "reshape", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "# Transpose gt matrices", "\n", "r2t", "=", "r2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "r1", ",", "r2t", ")", "\n", "# Convert rotation matrix to axis angle representation and find the angle", "\n", "axis_angles", "=", "rotation_matrix_to_angle_axis", "(", "r", ")", "\n", "angles", "=", "torch", ".", "norm", "(", "axis_angles", ",", "dim", "=", "-", "1", ")", "*", "(", "180.", "/", "np", ".", "pi", ")", "\n", "\n", "if", "return_axis_angle", ":", "\n", "        ", "return", "angles", ",", "axis_angles", "\n", "", "return", "angles", "\n", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.HeatmapLoss.__init__": [[85, 88], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_type", "=", "'MSE'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.HeatmapLoss.forward": [[89, 100], ["print", "pred.size", "gt.size", "maps_loss.focal_loss", "pred.size", "gt.size", "gt.float().sum().sum().gt().float", "gt.float().sum().sum().gt().float.sum", "gt.float().sum().sum().gt", "gt.float().sum().sum", "gt.float().sum", "gt.float"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.focal_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "forward", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "        ", "assert", "pred", ".", "size", "(", ")", "==", "gt", ".", "size", "(", ")", ",", "print", "(", "'pred, gt heatmap size mismatch: {}|{}'", ".", "format", "(", "pred", ".", "size", "(", ")", ",", "gt", ".", "size", "(", ")", ")", ")", "\n", "\n", "if", "self", ".", "loss_type", "==", "'focal'", ":", "\n", "            ", "loss", "=", "focal_loss", "(", "pred", ",", "gt", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "'MSE'", ":", "\n", "            ", "mask", "=", "gt", ".", "float", "(", ")", ".", "sum", "(", "dim", "=", "3", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "gt", "(", "0", ")", ".", "float", "(", ")", "\n", "loss", "=", "(", "(", "(", "pred", "-", "gt", ")", "**", "2", ")", ".", "mean", "(", "dim", "=", "3", ")", ".", "mean", "(", "dim", "=", "2", ")", "*", "mask", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.AELoss.__init__": [[103, 106], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_type", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.AELoss.singleTagLoss": [[107, 152], ["len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.expand", "torch.stack.expand", "torch.stack.expand.permute", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "torch.stack.append", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "maps_loss.make_input", "maps_loss.make_input", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ValueError", "torch.stack.append", "torch.stack.append", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "maps_loss.make_input", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.clamp().sum", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "tags[].expand_as", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.make_input", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.make_input", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.make_input", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "singleTagLoss", "(", "self", ",", "pred_tag", ",", "joints", ")", ":", "\n", "        ", "\"\"\"\n        associative embedding loss for one image\n        \"\"\"", "\n", "tags", "=", "[", "]", "\n", "pull", "=", "0", "\n", "for", "joints_per_person", "in", "joints", ":", "\n", "            ", "tmp", "=", "[", "]", "\n", "for", "joint", "in", "joints_per_person", ":", "\n", "                ", "if", "joint", "[", "1", "]", ">", "0", ":", "\n", "                    ", "tmp", ".", "append", "(", "pred_tag", "[", "joint", "[", "0", "]", "]", ")", "\n", "", "", "if", "len", "(", "tmp", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "tmp", "=", "torch", ".", "stack", "(", "tmp", ")", "\n", "tags", ".", "append", "(", "torch", ".", "mean", "(", "tmp", ",", "dim", "=", "0", ")", ")", "\n", "pull", "=", "pull", "+", "torch", ".", "mean", "(", "(", "tmp", "-", "tags", "[", "-", "1", "]", ".", "expand_as", "(", "tmp", ")", ")", "**", "2", ")", "\n", "\n", "", "num_tags", "=", "len", "(", "tags", ")", "\n", "if", "num_tags", "==", "0", ":", "\n", "            ", "return", "make_input", "(", "torch", ".", "zeros", "(", "1", ")", ".", "float", "(", ")", ")", ",", "make_input", "(", "torch", ".", "zeros", "(", "1", ")", ".", "float", "(", ")", ")", "\n", "", "elif", "num_tags", "==", "1", ":", "\n", "            ", "return", "make_input", "(", "torch", ".", "zeros", "(", "1", ")", ".", "float", "(", ")", ")", ",", "pull", "/", "(", "num_tags", ")", "\n", "\n", "", "tags", "=", "torch", ".", "stack", "(", "tags", ")", "\n", "\n", "size", "=", "(", "num_tags", ",", "num_tags", ")", "\n", "A", "=", "tags", ".", "expand", "(", "*", "size", ")", "\n", "B", "=", "A", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "diff", "=", "A", "-", "B", "\n", "\n", "if", "self", ".", "loss_type", "==", "'exp'", ":", "\n", "            ", "diff", "=", "torch", ".", "pow", "(", "diff", ",", "2", ")", "\n", "push", "=", "torch", ".", "exp", "(", "-", "diff", ")", "\n", "push", "=", "torch", ".", "sum", "(", "push", ")", "-", "num_tags", "\n", "", "elif", "self", ".", "loss_type", "==", "'max'", ":", "\n", "            ", "diff", "=", "1", "-", "torch", ".", "abs", "(", "diff", ")", "\n", "push", "=", "torch", ".", "clamp", "(", "diff", ",", "min", "=", "0", ")", ".", "sum", "(", ")", "-", "num_tags", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unkown ae loss type'", ")", "\n", "\n", "", "return", "push", "/", "(", "(", "num_tags", "-", "1", ")", "*", "num_tags", ")", "*", "0.5", ",", "pull", "/", "(", "num_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.AELoss.forward": [[153, 165], ["joints.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "tags.size", "range", "maps_loss.AELoss.singleTagLoss", "pushes.append", "pulls.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "joints.cpu().data.numpy.cpu().data.numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.AELoss.singleTagLoss"], ["", "def", "forward", "(", "self", ",", "tags", ",", "joints", ")", ":", "\n", "        ", "\"\"\"\n        accumulate the tag loss for each image in the batch\n        \"\"\"", "\n", "pushes", ",", "pulls", "=", "[", "]", ",", "[", "]", "\n", "joints", "=", "joints", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "batch_size", "=", "tags", ".", "size", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "push", ",", "pull", "=", "self", ".", "singleTagLoss", "(", "tags", "[", "i", "]", ",", "joints", "[", "i", "]", ")", "\n", "pushes", ".", "append", "(", "push", ")", "\n", "pulls", ".", "append", "(", "pull", ")", "\n", "", "return", "torch", ".", "stack", "(", "pushes", ")", ",", "torch", ".", "stack", "(", "pulls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.JointsMSELoss.__init__": [[168, 172], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_target_weight", ")", ":", "\n", "        ", "super", "(", "JointsMSELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "True", ")", "\n", "self", ".", "use_target_weight", "=", "use_target_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.JointsMSELoss.forward": [[173, 192], ["output.size", "output.size", "output.reshape().split", "target.reshape().split", "range", "heatmaps_pred[].squeeze", "heatmaps_gt[].squeeze", "output.reshape", "target.reshape", "maps_loss.JointsMSELoss.criterion", "maps_loss.JointsMSELoss.criterion", "heatmaps_pred[].squeeze.mul", "heatmaps_gt[].squeeze.mul"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ",", "target_weight", ")", ":", "\n", "        ", "batch_size", "=", "output", ".", "size", "(", "0", ")", "\n", "num_joints", "=", "output", ".", "size", "(", "1", ")", "\n", "heatmaps_pred", "=", "output", ".", "reshape", "(", "(", "batch_size", ",", "num_joints", ",", "-", "1", ")", ")", ".", "split", "(", "1", ",", "1", ")", "\n", "heatmaps_gt", "=", "target", ".", "reshape", "(", "(", "batch_size", ",", "num_joints", ",", "-", "1", ")", ")", ".", "split", "(", "1", ",", "1", ")", "\n", "loss", "=", "0", "\n", "\n", "for", "idx", "in", "range", "(", "num_joints", ")", ":", "\n", "            ", "heatmap_pred", "=", "heatmaps_pred", "[", "idx", "]", ".", "squeeze", "(", ")", "\n", "heatmap_gt", "=", "heatmaps_gt", "[", "idx", "]", ".", "squeeze", "(", ")", "\n", "if", "self", ".", "use_target_weight", ":", "\n", "                ", "loss", "+=", "0.5", "*", "self", ".", "criterion", "(", "\n", "heatmap_pred", ".", "mul", "(", "target_weight", "[", ":", ",", "idx", "]", ")", ",", "\n", "heatmap_gt", ".", "mul", "(", "target_weight", "[", ":", ",", "idx", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "loss", "+=", "0.5", "*", "self", ".", "criterion", "(", "heatmap_pred", ",", "heatmap_gt", ")", "\n", "\n", "", "", "return", "loss", "/", "num_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.Heatmap_AE_loss.__init__": [[195, 203], ["torch.Module.__init__", "maps_loss.HeatmapLoss", "maps_loss.AELoss"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_joints", ",", "loss_type_HM", "=", "'MSE'", ",", "loss_type_AE", "=", "'exp'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_joints", "=", "num_joints", "\n", "self", ".", "heatmaps_loss", "=", "HeatmapLoss", "(", "loss_type_HM", ")", "\n", "self", ".", "heatmaps_loss_factor", "=", "1.", "\n", "self", ".", "ae_loss", "=", "AELoss", "(", "loss_type_AE", ")", "\n", "self", ".", "push_loss_factor", "=", "1.", "#0.001 #1.", "\n", "self", ".", "pull_loss_factor", "=", "1.", "#0.001 #0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.Heatmap_AE_loss.forward": [[204, 226], ["maps_loss.Heatmap_AE_loss.heatmaps_loss", "tags_pred.contiguous().view.contiguous().view.contiguous().view", "maps_loss.Heatmap_AE_loss.ae_loss", "tags_pred.contiguous().view.contiguous().view.size", "tags_pred.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "heatmaps", ",", "joints", ")", ":", "\n", "# TODO(bowen): outputs and heatmaps can be lists of same length", "\n", "        ", "heatmaps_pred", "=", "outputs", "[", ":", ",", ":", "self", ".", "num_joints", "]", "\n", "tags_pred", "=", "outputs", "[", ":", ",", "self", ".", "num_joints", ":", "]", "\n", "\n", "heatmaps_loss", "=", "None", "\n", "push_loss", "=", "None", "\n", "pull_loss", "=", "None", "\n", "\n", "if", "self", ".", "heatmaps_loss", "is", "not", "None", ":", "\n", "            ", "heatmaps_loss", "=", "self", ".", "heatmaps_loss", "(", "heatmaps_pred", ",", "heatmaps", ")", "\n", "heatmaps_loss", "=", "heatmaps_loss", "*", "self", ".", "heatmaps_loss_factor", "\n", "\n", "", "if", "self", ".", "ae_loss", "is", "not", "None", ":", "\n", "            ", "batch_size", "=", "tags_pred", ".", "size", "(", ")", "[", "0", "]", "\n", "tags_pred", "=", "tags_pred", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", "\n", "\n", "push_loss", ",", "pull_loss", "=", "self", ".", "ae_loss", "(", "tags_pred", ",", "joints", ")", "\n", "push_loss", "=", "push_loss", "*", "self", ".", "push_loss_factor", "\n", "pull_loss", "=", "pull_loss", "*", "self", ".", "pull_loss_factor", "\n", "\n", "", "return", "heatmaps_loss", ",", "push_loss", ",", "pull_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.focal_loss": [[18, 46], ["gt.eq().float", "gt.lt().float", "torch.pow", "torch.pow", "torch.zeros().to", "torch.zeros().to", "torch.clamp", "torch.clamp", "gt.eq().float.float().sum().sum", "pos_loss.sum().sum.sum().sum", "neg_loss.sum().sum.sum().sum", "torch.zeros().to.mean", "pred.clone", "gt.eq", "gt.lt", "torch.zeros", "torch.zeros", "torch.log", "torch.log", "torch.pow", "torch.pow", "gt.eq().float.float().sum", "pos_loss.sum().sum.sum", "neg_loss.sum().sum.sum", "gt.size", "torch.log", "torch.log", "torch.pow", "torch.pow", "gt.eq().float.float"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log"], ["def", "focal_loss", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "''' Modified focal loss. Exactly the same as CornerNet.\n      Runs faster and costs a little bit more memory\n    Arguments:\n      pred (batch x c x h x w)\n      gt_regr (batch x c x h x w)\n    '''", "\n", "pos_inds", "=", "gt", ".", "eq", "(", "1", ")", ".", "float", "(", ")", "\n", "neg_inds", "=", "gt", ".", "lt", "(", "1", ")", ".", "float", "(", ")", "\n", "\n", "neg_weights", "=", "torch", ".", "pow", "(", "1", "-", "gt", ",", "4", ")", "\n", "\n", "loss", "=", "torch", ".", "zeros", "(", "gt", ".", "size", "(", "0", ")", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "\n", "# when x <=0, log(x) lead to nan loss, collipsed", "\n", "# To take care of 1-pred_log in neg_loss, pred_log < 1-1e-4", "\n", "pred_log", "=", "torch", ".", "clamp", "(", "pred", ".", "clone", "(", ")", ",", "min", "=", "1e-3", ",", "max", "=", "1", "-", "1e-3", ")", "\n", "pos_loss", "=", "torch", ".", "log", "(", "pred_log", ")", "*", "torch", ".", "pow", "(", "1", "-", "pred", ",", "2", ")", "*", "pos_inds", "\n", "neg_loss", "=", "torch", ".", "log", "(", "1", "-", "pred_log", ")", "*", "torch", ".", "pow", "(", "pred", ",", "2", ")", "*", "neg_weights", "*", "neg_inds", "\n", "\n", "# if not visible or not labelled, ignore the corresponding joints loss", "\n", "num_pos", "=", "pos_inds", ".", "float", "(", ")", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "pos_loss", "=", "pos_loss", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "neg_loss", "=", "neg_loss", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "mask", "=", "num_pos", ">", "0", "\n", "loss", "[", "~", "mask", "]", "=", "loss", "[", "~", "mask", "]", "-", "neg_loss", "[", "~", "mask", "]", "\n", "loss", "[", "mask", "]", "=", "loss", "[", "mask", "]", "-", "(", "pos_loss", "[", "mask", "]", "+", "neg_loss", "[", "mask", "]", ")", "/", "(", "num_pos", "[", "mask", "]", "+", "1e-4", ")", "\n", "return", "loss", ".", "mean", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.focal_loss_3D": [[47, 75], ["gt.eq().float", "gt.lt().float", "torch.pow", "torch.pow", "torch.zeros().to", "torch.zeros().to", "torch.clamp", "torch.clamp", "gt.eq().float.float().sum().sum().sum", "pos_loss.sum().sum().mean.sum().sum().mean", "neg_loss.sum().sum().mean.sum().sum().mean", "torch.zeros().to.mean", "pred.clone", "gt.eq", "gt.lt", "torch.zeros", "torch.zeros", "torch.log", "torch.log", "torch.pow", "torch.pow", "gt.eq().float.float().sum().sum", "pos_loss.sum().sum().mean.sum().sum", "neg_loss.sum().sum().mean.sum().sum", "gt.size", "torch.log", "torch.log", "torch.pow", "torch.pow", "gt.eq().float.float().sum", "pos_loss.sum().sum().mean.sum", "neg_loss.sum().sum().mean.sum", "gt.eq().float.float"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "focal_loss_3D", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "''' Modified focal loss. Exactly the same as CornerNet.\n      Runs faster and costs a little bit more memory\n    Arguments:\n      pred (batch x z x h x w)\n      gt_regr (batch x z x h x w)\n    '''", "\n", "pos_inds", "=", "gt", ".", "eq", "(", "1", ")", ".", "float", "(", ")", "\n", "neg_inds", "=", "gt", ".", "lt", "(", "1", ")", ".", "float", "(", ")", "\n", "\n", "neg_weights", "=", "torch", ".", "pow", "(", "1", "-", "gt", ",", "4", ")", "\n", "\n", "loss", "=", "torch", ".", "zeros", "(", "gt", ".", "size", "(", "0", ")", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "\n", "# log(0) lead to nan loss, collipsed", "\n", "# To take care of 1-pred_log in neg_loss, pred_log < 1-1e-4", "\n", "pred_log", "=", "torch", ".", "clamp", "(", "pred", ".", "clone", "(", ")", ",", "min", "=", "1e-3", ",", "max", "=", "1", "-", "1e-3", ")", "\n", "pos_loss", "=", "torch", ".", "log", "(", "pred_log", ")", "*", "torch", ".", "pow", "(", "1", "-", "pred", ",", "2", ")", "*", "pos_inds", "\n", "neg_loss", "=", "torch", ".", "log", "(", "1", "-", "pred_log", ")", "*", "torch", ".", "pow", "(", "pred", ",", "2", ")", "*", "neg_weights", "*", "neg_inds", "\n", "\n", "# if not visible or not labelled, ignore the corresponding joints loss", "\n", "num_pos", "=", "pos_inds", ".", "float", "(", ")", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "pos_loss", "=", "pos_loss", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "neg_loss", "=", "neg_loss", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "mask", "=", "num_pos", ">", "0", "\n", "loss", "[", "~", "mask", "]", "=", "loss", "[", "~", "mask", "]", "-", "neg_loss", "[", "~", "mask", "]", "\n", "loss", "[", "mask", "]", "=", "loss", "[", "mask", "]", "-", "(", "pos_loss", "[", "mask", "]", "+", "neg_loss", "[", "mask", "]", ")", "/", "(", "num_pos", "[", "mask", "]", "+", "1e-4", ")", "\n", "return", "loss", ".", "mean", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.make_input": [[76, 82], ["torch.autograd.Variable", "torch.autograd.Variable", "inp.cuda.sum", "inp.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "make_input", "(", "t", ",", "requires_grad", "=", "False", ",", "need_cuda", "=", "True", ")", ":", "\n", "    ", "inp", "=", "torch", ".", "autograd", ".", "Variable", "(", "t", ",", "requires_grad", "=", "requires_grad", ")", "\n", "inp", "=", "inp", ".", "sum", "(", ")", "\n", "if", "need_cuda", ":", "\n", "        ", "inp", "=", "inp", ".", "cuda", "(", ")", "\n", "", "return", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.test_ae_loss": [[228, 250], ["torch.tensor", "torch.tensor", "t.contiguous().view.register_hook", "maps_loss.AELoss", "numpy.zeros", "torch.LongTensor", "torch.LongTensor", "joints.view.view", "t.contiguous().view.contiguous().view", "AELoss.", "print", "numpy.arange().reshape().astype", "print", "t.contiguous().view.contiguous", "numpy.arange().reshape", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "def", "test_ae_loss", "(", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "t", "=", "torch", ".", "tensor", "(", "\n", "np", ".", "arange", "(", "0", ",", "32", ")", ".", "reshape", "(", "1", ",", "2", ",", "4", ",", "4", ")", ".", "astype", "(", "np", ".", "float", ")", "*", "0.1", ",", "\n", "requires_grad", "=", "True", "\n", ")", "\n", "t", ".", "register_hook", "(", "lambda", "x", ":", "print", "(", "'t'", ",", "x", ")", ")", "\n", "\n", "ae_loss", "=", "AELoss", "(", "loss_type", "=", "'exp'", ")", "\n", "\n", "joints", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ",", "2", ")", ")", "\n", "joints", "[", "0", ",", "0", "]", "=", "(", "3", ",", "1", ")", "\n", "joints", "[", "1", ",", "0", "]", "=", "(", "10", ",", "1", ")", "\n", "joints", "[", "0", ",", "1", "]", "=", "(", "22", ",", "1", ")", "\n", "joints", "[", "1", ",", "1", "]", "=", "(", "30", ",", "1", ")", "\n", "joints", "=", "torch", ".", "LongTensor", "(", "joints", ")", "\n", "joints", "=", "joints", ".", "view", "(", "1", ",", "2", ",", "2", ",", "2", ")", "\n", "\n", "t", "=", "t", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "l", "=", "ae_loss", "(", "t", ",", "joints", ")", "\n", "\n", "print", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss.Loss.__init__": [[26, 35], ["torch.Module.__init__", "loss_funcs.prior_loss.MaxMixturePrior", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.array", "torch.Tensor().unsqueeze().float", "torch.Tensor().unsqueeze().float", "torch.Tensor().unsqueeze().float", "torch.Tensor().unsqueeze().float", "config.args", "config.args", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "config.args", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gmm_prior", "=", "MaxMixturePrior", "(", "smpl_prior_path", "=", "args", "(", ")", ".", "smpl_prior_path", ",", "num_gaussians", "=", "8", ",", "dtype", "=", "torch", ".", "float32", ")", "#.cuda()", "\n", "if", "args", "(", ")", ".", "HMloss_type", "==", "'focal'", ":", "\n", "            ", "args", "(", ")", ".", "heatmap_weight", "/=", "1000", "\n", "", "self", ".", "cross_entropy", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "self", ".", "joint_lossweights", "=", "torch", ".", "from_numpy", "(", "constants", ".", "SMPL54_weights", ")", ".", "float", "(", ")", "\n", "self", ".", "align_inds_MPJPE", "=", "np", ".", "array", "(", "[", "constants", ".", "SMPL_ALL_54", "[", "'L_Hip'", "]", ",", "constants", ".", "SMPL_ALL_54", "[", "'R_Hip'", "]", "]", ")", "\n", "self", ".", "shape_pca_weight", "=", "torch", ".", "Tensor", "(", "[", "1", ",", "0.64", ",", "0.32", ",", "0.32", ",", "0.16", ",", "0.16", ",", "0.16", ",", "0.16", ",", "0.16", ",", "0.16", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss.Loss.forward": [[36, 62], ["calc_loss.Loss._calc_detection_loss", "outputs[].sum", "list", "evaluation.evaluation_matrix._calc_matched_PCKh_", "calc_loss.Loss._calc_keypoints_loss", "dict", "calc_loss.Loss._calc_param_loss", "dict", "dict.keys", "isinstance", "config.args", "[].float", "outputs[].float", "isinstance", "loss_dict[].mean", "eval", "config.args", "config.args", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "list", "outputs.keys"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss.Loss._calc_detection_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation._calc_matched_PCKh_", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss.Loss._calc_keypoints_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss.Loss._calc_param_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "meta_data", "=", "outputs", "[", "'meta_data'", "]", "\n", "\n", "detect_loss_dict", "=", "self", ".", "_calc_detection_loss", "(", "outputs", ",", "meta_data", ")", "\n", "detection_flag", "=", "outputs", "[", "'detection_flag'", "]", ".", "sum", "(", ")", "#  if args().model_return_loss else outputs['detection_flag']", "\n", "\n", "loss_dict", "=", "detect_loss_dict", "\n", "kp_error", "=", "None", "\n", "if", "(", "detection_flag", "or", "args", "(", ")", ".", "model_return_loss", ")", "and", "args", "(", ")", ".", "calc_mesh_loss", ":", "\n", "            ", "mPCKh", "=", "_calc_matched_PCKh_", "(", "outputs", "[", "'meta_data'", "]", "[", "'full_kp2d'", "]", ".", "float", "(", ")", ",", "outputs", "[", "'pj2d'", "]", ".", "float", "(", ")", ",", "outputs", "[", "'meta_data'", "]", "[", "'valid_masks'", "]", "[", ":", ",", "0", "]", ")", "\n", "matched_mask", "=", "mPCKh", ">", "args", "(", ")", ".", "matching_pckh_thresh", "\n", "kp_loss_dict", ",", "kp_error", "=", "self", ".", "_calc_keypoints_loss", "(", "outputs", ",", "meta_data", ",", "matched_mask", ")", "\n", "loss_dict", "=", "dict", "(", "loss_dict", ",", "**", "kp_loss_dict", ")", "\n", "\n", "params_loss_dict", "=", "self", ".", "_calc_param_loss", "(", "outputs", ",", "meta_data", ",", "matched_mask", ")", "\n", "loss_dict", "=", "dict", "(", "loss_dict", ",", "**", "params_loss_dict", ")", "\n", "\n", "", "loss_names", "=", "list", "(", "loss_dict", ".", "keys", "(", ")", ")", "\n", "for", "name", "in", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "loss_dict", "[", "name", "]", ",", "tuple", ")", ":", "\n", "                ", "loss_dict", "[", "name", "]", "=", "loss_dict", "[", "name", "]", "[", "0", "]", "\n", "", "elif", "isinstance", "(", "loss_dict", "[", "name", "]", ",", "int", ")", ":", "\n", "                ", "loss_dict", "[", "name", "]", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "outputs", "[", "list", "(", "outputs", ".", "keys", "(", ")", ")", "[", "0", "]", "]", ".", "device", ")", "\n", "", "loss_dict", "[", "name", "]", "=", "loss_dict", "[", "name", "]", ".", "mean", "(", ")", "*", "eval", "(", "'args().{}_weight'", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "return", "{", "'loss_dict'", ":", "loss_dict", ",", "'kp_error'", ":", "kp_error", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss.Loss._calc_detection_loss": [[63, 82], ["meta_data[].to", "meta_data[].squeeze().to", "valid_mask_c3d.reshape.reshape.reshape", "config.args", "meta_data[].to.sum", "loss_funcs.maps_loss.focal_loss", "meta_data[].sum", "loss_funcs.maps_loss.focal_loss_3D", "[].to", "meta_data[].squeeze", "[].to"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.focal_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.maps_loss.focal_loss_3D"], ["", "def", "_calc_detection_loss", "(", "self", ",", "outputs", ",", "meta_data", ")", ":", "\n", "        ", "detect_loss_dict", "=", "{", "'CenterMap'", ":", "0", "}", "\n", "if", "args", "(", ")", ".", "calc_mesh_loss", "and", "'center_map'", "in", "outputs", ":", "\n", "            ", "all_person_mask", "=", "meta_data", "[", "'all_person_detected_mask'", "]", ".", "to", "(", "\n", "outputs", "[", "'center_map'", "]", ".", "device", ")", "\n", "if", "all_person_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "detect_loss_dict", "[", "'CenterMap'", "]", "=", "focal_loss", "(", "outputs", "[", "'center_map'", "]", "[", "all_person_mask", "]", ",", "meta_data", "[", "'centermap'", "]", "[", "all_person_mask", "]", ".", "to", "(", "outputs", "[", "'center_map'", "]", ".", "device", ")", ")", "\n", "\n", "", "", "reorganize_idx_on_each_gpu", "=", "outputs", "[", "'reorganize_idx'", "]", "-", "outputs", "[", "'meta_data'", "]", "[", "'batch_ids'", "]", "[", "0", "]", "\n", "\n", "if", "'center_map_3d'", "in", "outputs", ":", "\n", "            ", "detect_loss_dict", "[", "'CenterMap_3D'", "]", "=", "0", "\n", "valid_mask_c3d", "=", "meta_data", "[", "'valid_centermap3d_mask'", "]", ".", "squeeze", "(", ")", ".", "to", "(", "outputs", "[", "'center_map_3d'", "]", ".", "device", ")", "\n", "valid_mask_c3d", "=", "valid_mask_c3d", ".", "reshape", "(", "-", "1", ")", "\n", "if", "meta_data", "[", "'valid_centermap3d_mask'", "]", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "detect_loss_dict", "[", "'CenterMap_3D'", "]", "=", "focal_loss_3D", "(", "outputs", "[", "'center_map_3d'", "]", "[", "valid_mask_c3d", "]", ",", "meta_data", "[", "'centermap_3d'", "]", "[", "valid_mask_c3d", "]", ".", "to", "(", "outputs", "[", "'center_map_3d'", "]", ".", "device", ")", ")", "\n", "\n", "", "", "return", "detect_loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss.Loss._calc_keypoints_loss": [[83, 114], ["meta_data[].to", "loss_funcs.keypoints_loss.batch_kp_2d_l2_loss", "meta_data[].contiguous().to", "[].contiguous", "calc_loss.Loss.joint_sampler_loss", "meta_data[].to.float().clone", "outputs[].float().clone", "kp3d_mask.sum", "kp3d_mask.bool", "config.args", "meta_data[].contiguous", "loss_funcs.keypoints_loss.calc_pampjpe", "config.args", "kp3d_mask.bool.sum", "loss_funcs.keypoints_loss.calc_mpjpe", "[].append", "[].append", "meta_data[].to.float", "outputs[].float", "config.args", "config.args", "kp3d_gt[].contiguous", "preds_kp3d[].contiguous", "print", "kp3d_gt[].contiguous", "preds_kp3d[].contiguous", "loss_funcs.keypoints_loss.calc_mpjpe.detach", "torch.where", "torch.where", "torch.where", "torch.where"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.batch_kp_2d_l2_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss.Loss.joint_sampler_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pampjpe", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_mpjpe", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "_calc_keypoints_loss", "(", "self", ",", "outputs", ",", "meta_data", ",", "matched_mask", ")", ":", "\n", "        ", "kp_loss_dict", ",", "error", "=", "{", "'P_KP2D'", ":", "0", ",", "'MPJPE'", ":", "0", ",", "'PAMPJPE'", ":", "0", "}", ",", "{", "'3d'", ":", "{", "'error'", ":", "[", "]", ",", "'idx'", ":", "[", "]", "}", ",", "'2d'", ":", "{", "'error'", ":", "[", "]", ",", "'idx'", ":", "[", "]", "}", "}", "\n", "if", "'pj2d'", "in", "outputs", ":", "\n", "            ", "real_2d", "=", "meta_data", "[", "'full_kp2d'", "]", ".", "to", "(", "outputs", "[", "'pj2d'", "]", ".", "device", ")", "\n", "if", "args", "(", ")", ".", "model_version", "==", "3", ":", "\n", "                ", "kp_loss_dict", "[", "'joint_sampler'", "]", "=", "self", ".", "joint_sampler_loss", "(", "real_2d", ",", "outputs", "[", "'joint_sampler_pred'", "]", ")", "\n", "\n", "", "kp_loss_dict", "[", "'P_KP2D'", "]", "=", "batch_kp_2d_l2_loss", "(", "real_2d", ".", "float", "(", ")", ".", "clone", "(", ")", ",", "outputs", "[", "'pj2d'", "]", ".", "float", "(", ")", ".", "clone", "(", ")", ")", "\n", "\n", "kp3d_mask", "=", "meta_data", "[", "'valid_masks'", "]", "[", ":", ",", "1", "]", "\n", "\n", "", "if", "kp3d_mask", ".", "sum", "(", ")", ">", "1", "and", "'j3d'", "in", "outputs", ":", "\n", "            ", "kp3d_gt", "=", "meta_data", "[", "'kp_3d'", "]", ".", "contiguous", "(", ")", ".", "to", "(", "outputs", "[", "'j3d'", "]", ".", "device", ")", "\n", "preds_kp3d", "=", "outputs", "[", "'j3d'", "]", "[", ":", ",", ":", "kp3d_gt", ".", "shape", "[", "1", "]", "]", ".", "contiguous", "(", ")", "\n", "\n", "if", "not", "args", "(", ")", ".", "model_return_loss", "and", "args", "(", ")", ".", "PAMPJPE_weight", ">", "0", ":", "\n", "                ", "try", ":", "\n", "                    ", "pampjpe_each", "=", "calc_pampjpe", "(", "kp3d_gt", "[", "kp3d_mask", "]", ".", "contiguous", "(", ")", ",", "preds_kp3d", "[", "kp3d_mask", "]", ".", "contiguous", "(", ")", ")", "\n", "kp_loss_dict", "[", "'PAMPJPE'", "]", "=", "pampjpe_each", "\n", "", "except", "Exception", "as", "exp_error", ":", "\n", "                    ", "print", "(", "'PA_MPJPE calculation failed!'", ",", "exp_error", ")", "\n", "\n", "", "", "if", "args", "(", ")", ".", "MPJPE_weight", ">", "0", ":", "\n", "                ", "fit_mask", "=", "kp3d_mask", ".", "bool", "(", ")", "\n", "if", "fit_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "mpjpe_each", "=", "calc_mpjpe", "(", "kp3d_gt", "[", "fit_mask", "]", ".", "contiguous", "(", ")", ",", "preds_kp3d", "[", "fit_mask", "]", ".", "contiguous", "(", ")", ",", "align_inds", "=", "self", ".", "align_inds_MPJPE", ")", "\n", "kp_loss_dict", "[", "'MPJPE'", "]", "=", "mpjpe_each", "\n", "error", "[", "'3d'", "]", "[", "'error'", "]", ".", "append", "(", "mpjpe_each", ".", "detach", "(", ")", "*", "1000", ")", "\n", "error", "[", "'3d'", "]", "[", "'idx'", "]", ".", "append", "(", "torch", ".", "where", "(", "fit_mask", ")", "[", "0", "]", ")", "\n", "\n", "", "", "", "return", "kp_loss_dict", ",", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss.Loss._calc_param_loss": [[115, 158], ["config.args", "params_loss_dict.update", "calc_loss._check_params_", "[].to", "[].to", "[].to", "grot_masks.sum", "loss_funcs.params_loss.batch_smpl_pose_l2_error().mean", "smpl_pose_masks.sum", "loss_funcs.params_loss.batch_smpl_pose_l2_error().mean", "smpl_shape_masks.sum", "config.args", "config.args", "calc_loss.Loss.gmm_prior().mean", "[].to().contiguous", "[].contiguous", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "cam_mask.sum", "loss_funcs.params_loss.batch_l2_loss", "config.args", "config.args", "loss_funcs.relative_loss.relative_depth_loss", "loss_funcs.params_loss.batch_smpl_pose_l2_error", "loss_funcs.params_loss.batch_smpl_pose_l2_error", "loss_funcs.relative_loss.relative_age_loss", "calc_loss.Loss.gmm_prior", "[].to().contiguous", "[].contiguous", "[].to().contiguous", "[].contiguous", "[].to", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "loss_funcs.relative_loss.kid_offset_loss", "[].to", "[].to", "calc_loss.Loss.shape_pca_weight.to"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss._check_params_", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss.batch_l2_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.relative_depth_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss.batch_smpl_pose_l2_error", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss.batch_smpl_pose_l2_error", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.relative_age_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.kid_offset_loss"], ["", "def", "_calc_param_loss", "(", "self", ",", "outputs", ",", "meta_data", ",", "matched_mask", ")", ":", "\n", "        ", "params_loss_dict", "=", "{", "'Pose'", ":", "0", ",", "'Shape'", ":", "0", ",", "'Cam'", ":", "0", ",", "'Prior'", ":", "0", "}", "\n", "if", "args", "(", ")", ".", "learn_relative", ":", "\n", "            ", "params_loss_dict", ".", "update", "(", "{", "'R_Age'", ":", "0", ",", "'R_Depth'", ":", "0", "}", ")", "\n", "\n", "", "if", "'params'", "in", "outputs", ":", "\n", "            ", "_check_params_", "(", "meta_data", "[", "'params'", "]", ")", "\n", "device", "=", "outputs", "[", "'params'", "]", "[", "'body_pose'", "]", ".", "device", "\n", "grot_masks", ",", "smpl_pose_masks", ",", "smpl_shape_masks", "=", "meta_data", "[", "'valid_masks'", "]", "[", ":", ",", "3", "]", ".", "to", "(", "device", ")", ",", "meta_data", "[", "'valid_masks'", "]", "[", ":", ",", "4", "]", ".", "to", "(", "device", ")", ",", "meta_data", "[", "'valid_masks'", "]", "[", ":", ",", "5", "]", ".", "to", "(", "device", ")", "\n", "\n", "if", "grot_masks", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "params_loss_dict", "[", "'Pose'", "]", "+=", "batch_smpl_pose_l2_error", "(", "meta_data", "[", "'params'", "]", "[", "grot_masks", ",", ":", "3", "]", ".", "to", "(", "device", ")", ".", "contiguous", "(", ")", ",", "outputs", "[", "'params'", "]", "[", "'global_orient'", "]", "[", "grot_masks", "]", ".", "contiguous", "(", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "if", "smpl_pose_masks", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "params_loss_dict", "[", "'Pose'", "]", "+=", "batch_smpl_pose_l2_error", "(", "meta_data", "[", "'params'", "]", "[", "smpl_pose_masks", ",", "3", ":", "22", "*", "3", "]", ".", "to", "(", "device", ")", ".", "contiguous", "(", ")", ",", "outputs", "[", "'params'", "]", "[", "'body_pose'", "]", "[", "smpl_pose_masks", ",", ":", "21", "*", "3", "]", ".", "contiguous", "(", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "if", "smpl_shape_masks", ".", "sum", "(", ")", ">", "0", ":", "\n", "# beta annots in datasets are for each gender (male/female), not for our neutral. ", "\n", "                ", "smpl_shape_diff", "=", "meta_data", "[", "'params'", "]", "[", "smpl_shape_masks", ",", "-", "10", ":", "]", ".", "to", "(", "device", ")", ".", "contiguous", "(", ")", "-", "outputs", "[", "'params'", "]", "[", "'betas'", "]", "[", "smpl_shape_masks", ",", ":", "10", "]", ".", "contiguous", "(", ")", "\n", "params_loss_dict", "[", "'Shape'", "]", "+=", "torch", ".", "norm", "(", "smpl_shape_diff", "*", "self", ".", "shape_pca_weight", ".", "to", "(", "device", ")", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "/", "20.", "\n", "\n", "", "if", "(", "~", "smpl_shape_masks", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "params_loss_dict", "[", "'Shape'", "]", "+=", "(", "outputs", "[", "'params'", "]", "[", "'betas'", "]", "[", "~", "smpl_shape_masks", ",", ":", "10", "]", "**", "2", ")", ".", "mean", "(", ")", "/", "20.", "\n", "\n", "", "if", "args", "(", ")", ".", "supervise_cam_params", ":", "\n", "                ", "cam_mask", ",", "pred_cam_params", "=", "meta_data", "[", "'cam_mask'", "]", ",", "outputs", "[", "'params'", "]", "[", "'cam'", "]", "\n", "if", "cam_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "params_loss_dict", "[", "'Cam'", "]", "+=", "batch_l2_loss", "(", "meta_data", "[", "'cams'", "]", "[", "cam_mask", "]", ",", "pred_cam_params", "[", "cam_mask", "]", ")", "\n", "\n", "", "", "if", "args", "(", ")", ".", "learn_relative", ":", "\n", "                ", "if", "args", "(", ")", ".", "learn_relative_age", ":", "\n", "                    ", "params_loss_dict", "[", "'R_Age'", "]", "=", "relative_age_loss", "(", "outputs", "[", "'kid_offsets_pred'", "]", ",", "meta_data", "[", "'depth_info'", "]", "[", ":", ",", "0", "]", ",", "matched_mask", "=", "matched_mask", ")", "+", "kid_offset_loss", "(", "outputs", "[", "'kid_offsets_pred'", "]", ",", "meta_data", "[", "'kid_shape_offsets'", "]", ",", "matched_mask", "=", "matched_mask", ")", "*", "2", "\n", "", "if", "args", "(", ")", ".", "learn_relative_depth", ":", "\n", "                    ", "params_loss_dict", "[", "'R_Depth'", "]", "=", "relative_depth_loss", "(", "outputs", "[", "'cam_trans'", "]", "[", ":", ",", "2", "]", ",", "meta_data", "[", "'depth_info'", "]", "[", ":", ",", "3", "]", ",", "outputs", "[", "'reorganize_idx'", "]", ",", "matched_mask", "=", "matched_mask", ")", "\n", "\n", "", "", "gmm_prior_loss", "=", "self", ".", "gmm_prior", "(", "outputs", "[", "'params'", "]", "[", "'body_pose'", "]", ")", ".", "mean", "(", ")", "/", "100.", "\n", "# remove the low loss, only punish the high loss", "\n", "valuable_prior_loss_thresh", "=", "5.", "\n", "gmm_prior_loss", "[", "gmm_prior_loss", "<", "valuable_prior_loss_thresh", "]", "=", "0", "\n", "params_loss_dict", "[", "'Prior'", "]", "=", "gmm_prior_loss", "\n", "\n", "", "return", "params_loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss.Loss.joint_sampler_loss": [[159, 165], ["joint_sampler.view.view.view", "loss_funcs.keypoints_loss.batch_kp_2d_l2_loss"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.batch_kp_2d_l2_loss"], ["", "def", "joint_sampler_loss", "(", "self", ",", "real_2d", ",", "joint_sampler", ")", ":", "\n", "        ", "batch_size", "=", "joint_sampler", ".", "shape", "[", "0", "]", "\n", "joint_sampler", "=", "joint_sampler", ".", "view", "(", "batch_size", ",", "-", "1", ",", "2", ")", "\n", "joint_gt", "=", "real_2d", "[", ":", ",", "constants", ".", "joint_sampler_mapper", "]", "\n", "loss", "=", "batch_kp_2d_l2_loss", "(", "joint_gt", ",", "joint_sampler", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.calc_loss._check_params_": [[166, 169], ["logging.error", "logging.error"], "function", ["None"], ["", "", "def", "_check_params_", "(", "params", ")", ":", "\n", "    ", "assert", "params", ".", "shape", "[", "0", "]", ">", "0", ",", "logging", ".", "error", "(", "'meta_data[params] dim 0 is empty, params: {}'", ".", "format", "(", "params", ")", ")", "\n", "assert", "params", ".", "shape", "[", "1", "]", ">", "0", ",", "logging", ".", "error", "(", "'meta_data[params] dim 1 is empty, params shape: {}, params: {}'", ".", "format", "(", "params", ".", "shape", ",", "params", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.match_batch_subject_ids": [[19, 44], ["set().intersection", "enumerate", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "set", "len", "set", "subject_ids[].cpu().numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "subject_ids[].cpu().numpy", "torch.where", "torch.where", "torch.where", "torch.where", "matched_inds[].append", "matched_inds[].append", "matched_inds[].append", "matched_inds[].append", "subject_ids[].cpu", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.logical_and", "subject_ids[].cpu"], "function", ["None"], ["def", "match_batch_subject_ids", "(", "reorganize_idx", ",", "subject_ids", ",", "torso_pj2d_errors", ",", "a_id", ",", "b_id", ",", "pj2d_thresh", "=", "0.1", ")", ":", "\n", "    ", "matched_inds", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "a_mask", "=", "reorganize_idx", "==", "a_id", "\n", "b_mask", "=", "reorganize_idx", "==", "b_id", "\n", "# intersection of two sets", "\n", "all_subject_ids", "=", "set", "(", "subject_ids", "[", "a_mask", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "intersection", "(", "set", "(", "subject_ids", "[", "b_mask", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "if", "len", "(", "all_subject_ids", ")", "==", "0", ":", "\n", "        ", "return", "matched_inds", "\n", "\n", "", "for", "ind", ",", "sid", "in", "enumerate", "(", "all_subject_ids", ")", ":", "\n", "        ", "a_ind", "=", "torch", ".", "where", "(", "torch", ".", "logical_and", "(", "subject_ids", "==", "sid", ",", "a_mask", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "b_ind", "=", "torch", ".", "where", "(", "torch", ".", "logical_and", "(", "subject_ids", "==", "sid", ",", "b_mask", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "a_error", ",", "b_error", "=", "torso_pj2d_errors", "[", "a_ind", "]", ",", "torso_pj2d_errors", "[", "b_ind", "]", "\n", "if", "a_error", "<", "pj2d_thresh", "and", "b_error", "<", "pj2d_thresh", ":", "\n", "# We sellect the better prediction with lower torso_pj2d_error to serve as anchor gt value matched_inds[0] for supervision,", "\n", "# Punish the depth of the prediction with large torso_pj2d_error only, instead of passing the same loss for both items.", "\n", "            ", "if", "a_error", ">", "b_error", ":", "\n", "                ", "matched_inds", "[", "0", "]", ".", "append", "(", "b_ind", ")", "\n", "matched_inds", "[", "1", "]", ".", "append", "(", "a_ind", ")", "\n", "", "else", ":", "\n", "                ", "matched_inds", "[", "0", "]", ".", "append", "(", "a_ind", ")", "\n", "matched_inds", "[", "1", "]", ".", "append", "(", "b_ind", ")", "\n", "", "", "", "matched_inds", "[", "0", "]", "=", "torch", ".", "Tensor", "(", "matched_inds", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "matched_inds", "[", "1", "]", "=", "torch", ".", "Tensor", "(", "matched_inds", "[", "1", "]", ")", ".", "long", "(", ")", "\n", "return", "matched_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.relative_depth_loss": [[46, 100], ["depth_ids.to.to", "torch.unique", "torch.unique", "sample_inds.sum", "len", "torch.triu().bool", "torch.triu().bool", "sum", "len", "len", "torch.cat().mean", "torch.cat().mean", "depth_ordering_loss.append", "torch.triu", "torch.triu", "pred_depths_sample.unsqueeze().repeat", "pred_depths_sample.unsqueeze().repeat", "depth_ids[].unsqueeze().repeat", "depth_ids[].unsqueeze().repeat", "config.args", "eq_mask.sum", "sample_loss.append", "cd_mask.sum", "torch.log", "torch.log", "sample_loss.append", "fd_mask.sum", "torch.log", "torch.log", "sample_loss.append", "torch.log", "torch.log", "torch.log", "torch.log", "torch.ones", "torch.ones", "config.args", "torch.cat", "torch.cat", "pred_depths_sample.unsqueeze", "pred_depths_sample.unsqueeze", "depth_ids[].unsqueeze", "depth_ids[].unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.log", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "relative_depth_loss", "(", "pred_depths", ",", "depth_ids", ",", "reorganize_idx", ",", "dist_thresh", "=", "0.3", ",", "uncertainty", "=", "None", ",", "matched_mask", "=", "None", ")", ":", "\n", "    ", "depth_ordering_loss", "=", "[", "]", "\n", "depth_ids", "=", "depth_ids", ".", "to", "(", "pred_depths", ".", "device", ")", "\n", "depth_ids_vmask", "=", "depth_ids", "!=", "-", "1", "\n", "pred_depths_valid", "=", "pred_depths", "[", "depth_ids_vmask", "]", "\n", "valid_inds", "=", "reorganize_idx", "[", "depth_ids_vmask", "]", "\n", "depth_ids", "=", "depth_ids", "[", "depth_ids_vmask", "]", "\n", "if", "uncertainty", "is", "not", "None", ":", "\n", "        ", "uncertainty_valid", "=", "uncertainty", "[", "depth_ids_vmask", "]", "\n", "\n", "", "for", "b_ind", "in", "torch", ".", "unique", "(", "valid_inds", ")", ":", "\n", "        ", "sample_inds", "=", "valid_inds", "==", "b_ind", "\n", "if", "matched_mask", "is", "not", "None", ":", "\n", "            ", "sample_inds", "=", "sample_inds", "*", "matched_mask", "[", "depth_ids_vmask", "]", "\n", "", "did_num", "=", "sample_inds", ".", "sum", "(", ")", "\n", "if", "did_num", ">", "1", ":", "\n", "            ", "pred_depths_sample", "=", "pred_depths_valid", "[", "sample_inds", "]", "\n", "triu_mask", "=", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "did_num", ",", "did_num", ")", ",", "diagonal", "=", "1", ")", ".", "bool", "(", ")", "\n", "dist_mat", "=", "(", "pred_depths_sample", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "did_num", ",", "1", ")", "-", "pred_depths_sample", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "did_num", ")", ")", "[", "triu_mask", "]", "\n", "did_mat", "=", "(", "depth_ids", "[", "sample_inds", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "did_num", ",", "1", ")", "-", "depth_ids", "[", "sample_inds", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "did_num", ")", ")", "[", "triu_mask", "]", "\n", "sample_loss", "=", "[", "]", "\n", "\n", "if", "args", "(", ")", ".", "depth_loss_type", "==", "'Piecewise'", ":", "\n", "                ", "eq_mask", "=", "did_mat", "==", "0", "\n", "cd_mask", "=", "did_mat", "<", "0", "\n", "cd_mask", "[", "did_mat", "<", "0", "]", "=", "cd_mask", "[", "did_mat", "<", "0", "]", "*", "(", "dist_mat", "[", "did_mat", "<", "0", "]", "-", "did_mat", "[", "did_mat", "<", "0", "]", "*", "dist_thresh", ")", ">", "0", "\n", "fd_mask", "=", "did_mat", ">", "0", "\n", "fd_mask", "[", "did_mat", ">", "0", "]", "=", "fd_mask", "[", "did_mat", ">", "0", "]", "*", "(", "dist_mat", "[", "did_mat", ">", "0", "]", "-", "did_mat", "[", "did_mat", ">", "0", "]", "*", "dist_thresh", ")", "<", "0", "\n", "if", "eq_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "sample_loss", ".", "append", "(", "dist_mat", "[", "eq_mask", "]", "**", "2", ")", "\n", "", "if", "cd_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "cd_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "dist_mat", "[", "cd_mask", "]", ")", ")", "\n", "sample_loss", ".", "append", "(", "cd_loss", ")", "\n", "", "if", "fd_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "                    ", "fd_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "-", "dist_mat", "[", "fd_mask", "]", ")", ")", "\n", "sample_loss", ".", "append", "(", "fd_loss", ")", "\n", "", "", "elif", "args", "(", ")", ".", "depth_loss_type", "==", "'Log'", ":", "\n", "                ", "eq_loss", "=", "dist_mat", "[", "did_mat", "==", "0", "]", "**", "2", "\n", "cd_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "dist_mat", "[", "did_mat", "<", "0", "]", ")", ")", "\n", "fd_loss", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "-", "dist_mat", "[", "did_mat", ">", "0", "]", ")", ")", "\n", "sample_loss", "=", "[", "eq_loss", ",", "cd_loss", ",", "fd_loss", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "if", "len", "(", "sample_loss", ")", ">", "0", ":", "\n", "                ", "this_sample_loss", "=", "torch", ".", "cat", "(", "sample_loss", ")", ".", "mean", "(", ")", "\n", "depth_ordering_loss", ".", "append", "(", "this_sample_loss", ")", "\n", "\n", "", "", "", "if", "len", "(", "depth_ordering_loss", ")", "==", "0", ":", "\n", "        ", "depth_ordering_loss", "=", "0", "\n", "", "else", ":", "\n", "        ", "depth_ordering_loss", "=", "sum", "(", "depth_ordering_loss", ")", "/", "len", "(", "depth_ordering_loss", ")", "\n", "\n", "", "return", "depth_ordering_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.kid_offset_loss": [[102, 111], ["kid_offset_gts.to.to", "age_vmask.sum"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "kid_offset_loss", "(", "kid_offset_preds", ",", "kid_offset_gts", ",", "matched_mask", "=", "None", ")", ":", "\n", "    ", "device", "=", "kid_offset_preds", ".", "device", "\n", "kid_offset_gts", "=", "kid_offset_gts", ".", "to", "(", "device", ")", "\n", "age_vmask", "=", "kid_offset_gts", "!=", "-", "1", "\n", "if", "matched_mask", "is", "not", "None", ":", "\n", "        ", "age_vmask", "=", "age_vmask", "*", "matched_mask", "\n", "", "if", "age_vmask", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "(", "(", "kid_offset_preds", "[", "age_vmask", "]", "-", "kid_offset_gts", "[", "age_vmask", "]", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.relative_age_loss": [[113, 136], ["age_gts.to.to", "age_vmask.sum", "baby_loss.mean", "kid_loss.mean", "adult_loss.mean", "teen_loss.mean"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "relative_age_loss", "(", "kid_offset_preds", ",", "age_gts", ",", "matched_mask", "=", "None", ")", ":", "\n", "    ", "device", "=", "kid_offset_preds", ".", "device", "\n", "age_gts", "=", "age_gts", ".", "to", "(", "device", ")", "\n", "age_vmask", "=", "age_gts", "!=", "-", "1", "\n", "if", "matched_mask", "is", "not", "None", ":", "\n", "        ", "age_vmask", "=", "age_vmask", "*", "matched_mask", "\n", "", "if", "age_vmask", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "adult_loss", "=", "(", "kid_offset_preds", "*", "(", "age_gts", "==", "0", ")", ")", "**", "2", "\n", "teen_thresh", "=", "constants", ".", "age_threshold", "[", "'teen'", "]", "\n", "teen_loss", "=", "(", "(", "kid_offset_preds", "-", "teen_thresh", "[", "1", "]", ")", "*", "(", "kid_offset_preds", ">", "teen_thresh", "[", "2", "]", ")", ".", "float", "(", ")", "*", "(", "age_gts", "==", "1", ")", ".", "float", "(", ")", ")", "**", "2", "+", "(", "(", "kid_offset_preds", "-", "teen_thresh", "[", "1", "]", ")", "*", "(", "kid_offset_preds", "<=", "teen_thresh", "[", "0", "]", ")", ".", "float", "(", ")", "*", "(", "age_gts", "==", "1", ")", ".", "float", "(", ")", ")", "**", "2", "\n", "kid_thresh", "=", "constants", ".", "age_threshold", "[", "'kid'", "]", "\n", "kid_loss", "=", "(", "(", "kid_offset_preds", "-", "kid_thresh", "[", "1", "]", ")", "*", "(", "kid_offset_preds", ">", "kid_thresh", "[", "2", "]", ")", ".", "float", "(", ")", "*", "(", "age_gts", "==", "2", ")", ".", "float", "(", ")", ")", "**", "2", "+", "(", "(", "kid_offset_preds", "-", "kid_thresh", "[", "1", "]", ")", "*", "(", "kid_offset_preds", "<=", "kid_thresh", "[", "0", "]", ")", ".", "float", "(", ")", "*", "(", "age_gts", "==", "2", ")", ".", "float", "(", ")", ")", "**", "2", "\n", "baby_thresh", "=", "constants", ".", "age_threshold", "[", "'baby'", "]", "\n", "baby_loss", "=", "(", "(", "kid_offset_preds", "-", "baby_thresh", "[", "1", "]", ")", "*", "(", "kid_offset_preds", ">", "baby_thresh", "[", "2", "]", ")", ".", "float", "(", ")", "*", "(", "age_gts", "==", "3", ")", ".", "float", "(", ")", ")", "**", "2", "+", "(", "(", "kid_offset_preds", "-", "baby_thresh", "[", "1", "]", ")", "*", "(", "kid_offset_preds", "<=", "baby_thresh", "[", "0", "]", ")", ".", "float", "(", ")", "*", "(", "age_gts", "==", "3", ")", ".", "float", "(", ")", ")", "**", "2", "\n", "age_loss", "=", "adult_loss", ".", "mean", "(", ")", "+", "teen_loss", ".", "mean", "(", ")", "+", "kid_loss", ".", "mean", "(", ")", "+", "baby_loss", ".", "mean", "(", ")", "\n", "# if age_vmask.sum()>0:", "\n", "#     age_loss = age_loss[age_vmask].mean()", "\n", "\n", "return", "age_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.relative_shape_loss": [[137, 154], ["body_type_gts.to.to", "body_type_vmask.sum"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "relative_shape_loss", "(", "pred_betas", ",", "body_type_gts", ")", ":", "\n", "    ", "device", "=", "pred_betas", ".", "device", "\n", "body_type_gts", "=", "body_type_gts", ".", "to", "(", "device", ")", "\n", "body_type_vmask", "=", "body_type_gts", "!=", "-", "1", "\n", "\n", "fat_level_preds", "=", "pred_betas", "[", ":", ",", "1", "]", "\n", "not_fat_loss", "=", "(", "fat_level_preds", "*", "(", "fat_level_preds", "<", "-", "3", ")", ".", "float", "(", ")", "*", "(", "body_type_gts", "==", "0", ")", ".", "float", "(", ")", ")", "**", "2", "+", "(", "fat_level_preds", "*", "(", "fat_level_preds", ">", "2", ")", ".", "float", "(", ")", "*", "(", "body_type_gts", "==", "0", ")", ".", "float", "(", ")", ")", "**", "2", "\n", "slightly_fat_loss", "=", "(", "(", "fat_level_preds", "+", "4.5", ")", "*", "(", "fat_level_preds", "<", "-", "6", ")", ".", "float", "(", ")", "*", "(", "body_type_gts", "==", "1", ")", ".", "float", "(", ")", ")", "**", "2", "+", "(", "(", "fat_level_preds", "+", "4.5", ")", "*", "(", "fat_level_preds", ">", "-", "3", ")", ".", "float", "(", ")", "*", "(", "body_type_gts", "==", "1", ")", ".", "float", "(", ")", ")", "**", "2", "\n", "fat_loss", "=", "(", "(", "fat_level_preds", "+", "7.5", ")", "*", "(", "fat_level_preds", "<", "-", "9", ")", ".", "float", "(", ")", "*", "(", "body_type_gts", "==", "2", ")", ".", "float", "(", ")", ")", "**", "2", "+", "(", "(", "fat_level_preds", "+", "7.5", ")", "*", "(", "fat_level_preds", ">", "-", "6", ")", ".", "float", "(", ")", "*", "(", "body_type_gts", "==", "2", ")", ".", "float", "(", ")", ")", "**", "2", "\n", "body_type_loss", "=", "not_fat_loss", "+", "slightly_fat_loss", "+", "fat_loss", "\n", "if", "body_type_vmask", ".", "sum", "(", ")", ">", "0", ":", "\n", "        ", "body_type_loss", "=", "body_type_loss", "[", "body_type_vmask", "]", "\n", "\n", "", "return", "body_type_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.test_depth_ordering_loss": [[156, 167], ["torch.rand", "torch.rand", "torch.randint", "torch.randint", "torch.Tensor", "torch.Tensor", "print", "print", "print", "relative_loss.relative_depth_loss", "print"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.relative_depth_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "test_depth_ordering_loss", "(", ")", ":", "\n", "    ", "pred_cams", "=", "torch", ".", "rand", "(", "6", ",", "3", ")", "\n", "depth_info", "=", "torch", ".", "randint", "(", "5", ",", "(", "6", ",", "4", ")", ")", "\n", "depth_info", "[", "1", "]", "=", "-", "1", "\n", "reorganize_idx", "=", "torch", ".", "Tensor", "(", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "print", "(", "'pred_cams'", ",", "pred_cams", ")", "\n", "print", "(", "'depth_info'", ",", "depth_info", "[", ":", ",", "3", "]", ")", "\n", "print", "(", "'reorganize_idx'", ",", "reorganize_idx", ")", "\n", "loss", "=", "relative_depth_loss", "(", "pred_cams", ",", "depth_info", ",", "reorganize_idx", ",", "dist_thresh", "=", "0.3", ")", "\n", "print", "(", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.test_relative_shape_loss": [[168, 179], ["torch.rand", "torch.rand", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "print", "print", "relative_loss.relative_shape_loss", "print"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.relative_loss.relative_shape_loss", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "test_relative_shape_loss", "(", ")", ":", "\n", "    ", "pred_betas", "=", "torch", ".", "rand", "(", "4", ",", "13", ")", "\n", "depth_info", "=", "torch", ".", "randint", "(", "5", ",", "(", "4", ",", "4", ")", ")", "\n", "depth_info", "[", ":", ",", "0", "]", "=", "torch", ".", "randint", "(", "4", ",", "(", "4", ",", ")", ")", "\n", "depth_info", "[", ":", ",", "1", "]", "=", "torch", ".", "randint", "(", "1", ",", "(", "4", ",", ")", ")", "\n", "depth_info", "[", ":", ",", "2", "]", "=", "torch", ".", "randint", "(", "2", ",", "(", "4", ",", ")", ")", "\n", "depth_info", "[", "1", "]", "=", "-", "1", "\n", "print", "(", "'pred_betas'", ",", "pred_betas", "[", ":", ",", "10", ":", "]", ")", "\n", "print", "(", "'depth_info'", ",", "depth_info", ")", "\n", "loss", "=", "relative_shape_loss", "(", "pred_betas", ",", "depth_info", ")", "\n", "print", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.batch_kp_2d_l2_loss": [[18, 51], ["constants.joint2D_tree.items", "torch.logical_and", "torch.logical_and", "torch.logical_and", "numpy.array", "vis_mask.sum", "torch.norm", "torch.norm", "torch.norm", "vis_mask.sum", "print", "torch.isnan", "torch.isnan", "torch.isnan", "print", "vis_mask.sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan", "torch.isnan", "torch.isnan", "vis_mask[].bool", "vis_mask[].bool"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["def", "batch_kp_2d_l2_loss", "(", "real", ",", "pred", ")", ":", "\n", "    ", "\"\"\" \n    Directly supervise the 2D coordinates of global joints, like torso\n    While supervise the relative 2D coordinates of part joints, like joints on face, feets\n    \"\"\"", "\n", "# invisible joints have been set to -2. in data pre-processing", "\n", "vis_mask", "=", "(", "(", "real", ">", "-", "1.99", ")", ".", "sum", "(", "-", "1", ")", "==", "real", ".", "shape", "[", "-", "1", "]", ")", ".", "float", "(", ")", "\n", "\n", "for", "parent_joint", ",", "leaf_joints", "in", "constants", ".", "joint2D_tree", ".", "items", "(", ")", ":", "\n", "        ", "parent_id", "=", "constants", ".", "SMPL_ALL_54", "[", "parent_joint", "]", "\n", "leaf_ids", "=", "np", ".", "array", "(", "[", "constants", ".", "SMPL_ALL_54", "[", "leaf_joint", "]", "for", "leaf_joint", "in", "leaf_joints", "]", ")", "\n", "vis_mask", "[", ":", ",", "leaf_ids", "]", "=", "vis_mask", "[", ":", ",", "[", "parent_id", "]", "]", "*", "vis_mask", "[", ":", ",", "leaf_ids", "]", "\n", "real", "[", ":", ",", "leaf_ids", "]", "-=", "real", "[", ":", ",", "[", "parent_id", "]", "]", "\n", "pred", "[", ":", ",", "leaf_ids", "]", "-=", "pred", "[", ":", ",", "[", "parent_id", "]", "]", "\n", "", "bv_mask", "=", "torch", ".", "logical_and", "(", "vis_mask", ".", "sum", "(", "-", "1", ")", ">", "0", ",", "(", "real", "-", "pred", ")", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "!=", "0", ")", "\n", "vis_mask", "=", "vis_mask", "[", "bv_mask", "]", "\n", "loss", "=", "0", "\n", "if", "vis_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "# diff = F.mse_loss(real[bv_mask], pred[bv_mask]).sum(-1)", "\n", "        ", "diff", "=", "torch", ".", "norm", "(", "real", "[", "bv_mask", "]", "-", "pred", "[", "bv_mask", "]", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "(", "diff", "*", "vis_mask", ")", ".", "sum", "(", "-", "1", ")", "/", "(", "vis_mask", ".", "sum", "(", "-", "1", ")", "+", "1e-4", ")", "\n", "# loss = (torch.norm(real[bv_mask]-pred[bv_mask],p=2,dim=-1) * vis_mask).sum(-1) / (vis_mask.sum(-1)+1e-4)", "\n", "\n", "if", "torch", ".", "isnan", "(", "loss", ")", ".", "sum", "(", ")", ">", "0", "or", "(", "loss", ">", "1000", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "return", "0", "\n", "print", "(", "'CAUTION: meet nan of pkp2d loss again!!!!'", ")", "\n", "non_position", "=", "torch", ".", "isnan", "(", "loss", ")", "\n", "print", "(", "'batch_kp_2d_l2_loss, non_position:'", ",", "non_position", ",", "'diff results'", ",", "diff", ",", "'real kp 2d vis'", ",", "real", "[", "bv_mask", "]", "[", "non_position", "]", "[", "vis_mask", "[", "non_position", "]", ".", "bool", "(", ")", "]", ",", "'pred kp 2d vis'", ",", "pred", "[", "bv_mask", "]", "[", "non_position", "]", "[", "vis_mask", "[", "non_position", "]", ".", "bool", "(", ")", "]", ")", "\n", "return", "0", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pj2d_error": [[52, 63], ["torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.ones", "torch.ones", "torch.ones", "torch.where", "torch.where", "torch.where", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean", "torch.norm().mean.item", "vis_mask.float().sum", "len", "torch.norm", "torch.norm", "torch.norm", "vis_mask.float"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "calc_pj2d_error", "(", "real", ",", "pred", ",", "joint_inds", "=", "None", ")", ":", "\n", "    ", "if", "joint_inds", "is", "not", "None", ":", "\n", "        ", "real", ",", "pred", "=", "real", "[", ":", ",", "joint_inds", "]", ",", "pred", "[", ":", ",", "joint_inds", "]", "\n", "", "vis_mask", "=", "(", "(", "real", ">", "-", "1.99", ")", ".", "sum", "(", "-", "1", ")", "==", "real", ".", "shape", "[", "-", "1", "]", ")", "\n", "bv_mask", "=", "torch", ".", "logical_and", "(", "vis_mask", ".", "float", "(", ")", ".", "sum", "(", "-", "1", ")", ">", "0", ",", "(", "real", "-", "pred", ")", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "!=", "0", ")", "\n", "batch_errors", "=", "torch", ".", "ones", "(", "len", "(", "pred", ")", ")", "*", "10000", "\n", "for", "bid", "in", "torch", ".", "where", "(", "bv_mask", ")", "[", "0", "]", ":", "\n", "        ", "vmask", "=", "vis_mask", "[", "bid", "]", "\n", "diff", "=", "torch", ".", "norm", "(", "(", "real", "[", "bid", "]", "[", "vmask", "]", "-", "pred", "[", "bid", "]", "[", "vmask", "]", ")", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "batch_errors", "[", "bid", "]", "=", "diff", ".", "item", "(", ")", "\n", "", "return", "batch_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.align_by_parts": [[64, 69], ["joints[].mean", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "function", ["None"], ["", "def", "align_by_parts", "(", "joints", ",", "align_inds", "=", "None", ")", ":", "\n", "    ", "if", "align_inds", "is", "None", ":", "\n", "        ", "return", "joints", "\n", "", "pelvis", "=", "joints", "[", ":", ",", "align_inds", "]", ".", "mean", "(", "1", ")", "\n", "return", "joints", "-", "torch", ".", "unsqueeze", "(", "pelvis", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_mpjpe": [[70, 83], ["evaluation.compute_mpjpe", "keypoints_loss.align_by_parts", "keypoints_loss.align_by_parts"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_mpjpe", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.align_by_parts", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.align_by_parts"], ["", "def", "calc_mpjpe", "(", "real", ",", "pred", ",", "align_inds", "=", "None", ",", "sample_wise", "=", "True", ",", "trans", "=", "None", ",", "return_org", "=", "False", ")", ":", "\n", "    ", "vis_mask", "=", "real", "[", ":", ",", ":", ",", "0", "]", "!=", "-", "2.", "\n", "if", "align_inds", "is", "not", "None", ":", "\n", "        ", "pred_aligned", "=", "align_by_parts", "(", "pred", ",", "align_inds", "=", "align_inds", ")", "\n", "if", "trans", "is", "not", "None", ":", "\n", "            ", "pred_aligned", "+=", "trans", "\n", "", "real_aligned", "=", "align_by_parts", "(", "real", ",", "align_inds", "=", "align_inds", ")", "\n", "", "else", ":", "\n", "        ", "pred_aligned", ",", "real_aligned", "=", "pred", ",", "real", "\n", "", "mpjpe_each", "=", "compute_mpjpe", "(", "pred_aligned", ",", "real_aligned", ",", "vis_mask", ",", "sample_wise", "=", "sample_wise", ")", "\n", "if", "return_org", ":", "\n", "        ", "return", "mpjpe_each", ",", "(", "real_aligned", ",", "pred_aligned", ",", "vis_mask", ")", "\n", "", "return", "mpjpe_each", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pampjpe": [[84, 94], ["evaluation.batch_compute_similarity_transform_torch", "evaluation.compute_mpjpe", "real.float", "pred.float", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.batch_compute_similarity_transform_torch", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_mpjpe"], ["", "def", "calc_pampjpe", "(", "real", ",", "pred", ",", "sample_wise", "=", "True", ",", "return_transform_mat", "=", "False", ")", ":", "\n", "    ", "real", ",", "pred", "=", "real", ".", "float", "(", ")", ",", "pred", ".", "float", "(", ")", "\n", "# extracting the keypoints that all samples have the annotations", "\n", "vis_mask", "=", "(", "real", "[", ":", ",", ":", ",", "0", "]", "!=", "-", "2.", ")", ".", "sum", "(", "0", ")", "==", "len", "(", "real", ")", "\n", "pred_tranformed", ",", "PA_transform", "=", "batch_compute_similarity_transform_torch", "(", "pred", "[", ":", ",", "vis_mask", "]", ",", "real", "[", ":", ",", "vis_mask", "]", ")", "\n", "pa_mpjpe_each", "=", "compute_mpjpe", "(", "pred_tranformed", ",", "real", "[", ":", ",", "vis_mask", "]", ",", "sample_wise", "=", "sample_wise", ")", "\n", "if", "return_transform_mat", ":", "\n", "        ", "return", "pa_mpjpe_each", ",", "PA_transform", "\n", "", "else", ":", "\n", "        ", "return", "pa_mpjpe_each", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss._calc_pck_loss": [[96, 101], ["numpy.array", "keypoints_loss.calc_pck"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pck"], ["", "", "def", "_calc_pck_loss", "(", "real_3d", ",", "predicts", ",", "PCK_thresh", "=", "0.05", ",", "align_inds", "=", "None", ")", ":", "\n", "    ", "SMPL_MAJOR_JOINTS", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "4", ",", "5", ",", "7", ",", "8", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", "]", ")", "\n", "mpjpe_pck_batch", "=", "calc_pck", "(", "real_3d", ",", "predicts", ",", "align_inds", "=", "align_inds", ",", "pck_joints", "=", "SMPL_MAJOR_JOINTS", ")", "\n", "mpjpe_pck_sellected", "=", "mpjpe_pck_batch", "[", "mpjpe_pck_batch", ">", "PCK_thresh", "]", "-", "PCK_thresh", "\n", "return", "mpjpe_pck_sellected", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pck": [[102, 108], ["keypoints_loss.align_by_parts", "keypoints_loss.align_by_parts", "evaluation.compute_mpjpe"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.align_by_parts", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.align_by_parts", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_mpjpe"], ["", "def", "calc_pck", "(", "real", ",", "pred", ",", "align_inds", "=", "None", ",", "pck_joints", "=", "None", ")", ":", "\n", "    ", "vis_mask", "=", "real", "[", ":", ",", ":", ",", "0", "]", "!=", "-", "2.", "\n", "pred_aligned", "=", "align_by_parts", "(", "pred", ",", "align_inds", "=", "align_inds", ")", "\n", "real_aligned", "=", "align_by_parts", "(", "real", ",", "align_inds", "=", "align_inds", ")", "\n", "mpjpe_pck_batch", "=", "compute_mpjpe", "(", "pred_aligned", ",", "real_aligned", ",", "vis_mask", ",", "pck_joints", "=", "pck_joints", ")", "\n", "return", "mpjpe_pck_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50.__init__": [[20, 25], ["torch.Module.__init__", "resnet_50.ResNet_50.make_resnet"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50.make_resnet"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet_50", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "make_resnet", "(", ")", "\n", "self", ".", "backbone_channels", "=", "64", "\n", "#self.init_weights()", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50.load_pretrain_params": [[28, 31], ["os.path.exists", "utils.copy_state_dict", "config.args", "resnet_50.ResNet_50.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.copy_state_dict", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "load_pretrain_params", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "args", "(", ")", ".", "resnet_pretrain", ")", ":", "\n", "            ", "success_layer", "=", "copy_state_dict", "(", "self", ".", "state_dict", "(", ")", ",", "torch", ".", "load", "(", "args", "(", ")", ".", "resnet_pretrain", ")", ",", "prefix", "=", "''", ",", "fix_loaded", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50.image_preprocess": [[32, 39], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "utils.BHWC_to_BCHW", "list", "map", "torchvision.normalize", "torchvision.normalize"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.BHWC_to_BCHW"], ["", "", "def", "image_preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "BHWC_to_BCHW", "(", "x", ")", "/", "255.", "\n", "#x = F.normalize(x, [0.485, 0.456, 0.406], [0.229, 0.224, 0.225],inplace=True).contiguous() # for pytorch version>1.8.0", "\n", "x", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "F", ".", "normalize", "(", "x", ",", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "inplace", "=", "False", ")", ",", "x", ")", ")", ")", "\n", "#x = ((BHWC_to_BCHW(x)/ 255.) * 2.0 - 1.0).contiguous()", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50.make_resnet": [[40, 53], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_50.ResNet_50._make_resnet_layer", "resnet_50.ResNet_50._make_resnet_layer", "resnet_50.ResNet_50._make_resnet_layer", "resnet_50.ResNet_50._make_resnet_layer", "resnet_50.ResNet_50._make_deconv_layer"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50._make_resnet_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50._make_resnet_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50._make_resnet_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50._make_resnet_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50._make_deconv_layer"], ["", "def", "make_resnet", "(", "self", ")", ":", "\n", "        ", "block", ",", "layers", "=", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_resnet_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_resnet_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_resnet_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_resnet_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "deconv_layers", "=", "self", ".", "_make_deconv_layer", "(", "3", ",", "(", "256", ",", "128", ",", "64", ")", ",", "(", "4", ",", "4", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50.forward": [[54, 63], ["resnet_50.ResNet_50.image_preprocess", "resnet_50.ResNet_50.maxpool", "resnet_50.ResNet_50.layer1", "resnet_50.ResNet_50.layer2", "resnet_50.ResNet_50.layer3", "resnet_50.ResNet_50.layer4", "resnet_50.ResNet_50.deconv_layers", "resnet_50.ResNet_50.relu", "resnet_50.ResNet_50.bn1", "resnet_50.ResNet_50.conv1"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50.image_preprocess"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "image_preprocess", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "deconv_layers", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50._make_resnet_layer": [[64, 79], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_resnet_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", ")", "#,affine=False),)", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50._get_deconv_cfg": [[80, 92], ["None"], "methods", ["None"], ["", "def", "_get_deconv_cfg", "(", "self", ",", "deconv_kernel", ",", "index", ")", ":", "\n", "        ", "if", "deconv_kernel", "==", "4", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "0", "\n", "", "elif", "deconv_kernel", "==", "3", ":", "\n", "            ", "padding", "=", "1", "\n", "output_padding", "=", "1", "\n", "", "elif", "deconv_kernel", "==", "2", ":", "\n", "            ", "padding", "=", "0", "\n", "output_padding", "=", "0", "\n", "\n", "", "return", "deconv_kernel", ",", "padding", ",", "output_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50._make_deconv_layer": [[93, 121], ["range", "torch.Sequential", "torch.Sequential", "len", "len", "resnet_50.ResNet_50._get_deconv_cfg", "layers.append", "layers.append", "layers.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50._get_deconv_cfg"], ["", "def", "_make_deconv_layer", "(", "self", ",", "num_layers", ",", "num_filters", ",", "num_kernels", ")", ":", "\n", "        ", "assert", "num_layers", "==", "len", "(", "num_filters", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "assert", "num_layers", "==", "len", "(", "num_kernels", ")", ",", "'ERROR: num_deconv_layers is different len(num_deconv_filters)'", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "inplanes", "=", "2048", "\n", "", "kernel", ",", "padding", ",", "output_padding", "=", "self", ".", "_get_deconv_cfg", "(", "num_kernels", "[", "i", "]", ",", "i", ")", "\n", "\n", "planes", "=", "num_filters", "[", "i", "]", "\n", "layers", ".", "append", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "self", ".", "inplanes", ",", "\n", "out_channels", "=", "planes", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "#,affine=False))", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.resnet_50.ResNet_50.init_weights": [[122, 137], ["resnet_50.ResNet_50.modules", "isinstance", "torch.init.normal_", "torch.init.normal_", "m.named_parameters", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "m.named_parameters", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "name", ",", "_", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", "in", "[", "'bias'", "]", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "name", ",", "_", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", "in", "[", "'bias'", "]", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.AddCoords.__init__": [[63, 66], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radius_channel", "=", "False", ")", ":", "\n", "        ", "super", "(", "AddCoords", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius_channel", "=", "radius_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.AddCoords.forward": [[67, 114], ["torch.ones", "xx_ones.unsqueeze.unsqueeze.unsqueeze", "torch.arange().unsqueeze", "xx_range.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "xx_channel.repeat.repeat.unsqueeze", "torch.ones", "yy_ones.unsqueeze.unsqueeze.unsqueeze", "torch.arange().unsqueeze", "yy_range.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "yy_channel.repeat.repeat.unsqueeze", "xx_channel.repeat.repeat.permute", "yy_channel.repeat.repeat.permute", "xx_channel.repeat.repeat.repeat", "yy_channel.repeat.repeat.repeat", "torch.cat", "xx_channel.repeat.repeat.float", "yy_channel.repeat.repeat.float", "torch.sqrt", "torch.cat().cuda", "torch.arange", "torch.arange", "in_tensor.cuda", "xx_channel.repeat.repeat.cuda", "yy_channel.repeat.repeat.cuda", "torch.pow", "torch.pow", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_tensor", ")", ":", "\n", "        ", "\"\"\"\n        in_tensor: (batch_size, channels, x_dim, y_dim)\n        [0,0,0,0]   [0,1,2,3]\n        [1,1,1,1]   [0,1,2,3]    << (i,j)th coordinates of pixels added as separate channels\n        [2,2,2,2]   [0,1,2,3]\n        taken from mkocabas.\n        \"\"\"", "\n", "batch_size_tensor", "=", "in_tensor", ".", "shape", "[", "0", "]", "\n", "\n", "xx_ones", "=", "torch", ".", "ones", "(", "[", "1", ",", "in_tensor", ".", "shape", "[", "2", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "xx_ones", "=", "xx_ones", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "xx_range", "=", "torch", ".", "arange", "(", "in_tensor", ".", "shape", "[", "2", "]", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "xx_range", "=", "xx_range", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "xx_channel", "=", "torch", ".", "matmul", "(", "xx_ones", ",", "xx_range", ")", "\n", "xx_channel", "=", "xx_channel", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "yy_ones", "=", "torch", ".", "ones", "(", "[", "1", ",", "in_tensor", ".", "shape", "[", "3", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "yy_ones", "=", "yy_ones", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "yy_range", "=", "torch", ".", "arange", "(", "in_tensor", ".", "shape", "[", "3", "]", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "yy_range", "=", "yy_range", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "yy_channel", "=", "torch", ".", "matmul", "(", "yy_range", ",", "yy_ones", ")", "\n", "yy_channel", "=", "yy_channel", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "yy_channel", "=", "yy_channel", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "float", "(", ")", "/", "(", "in_tensor", ".", "shape", "[", "2", "]", "-", "1", ")", "\n", "yy_channel", "=", "yy_channel", ".", "float", "(", ")", "/", "(", "in_tensor", ".", "shape", "[", "3", "]", "-", "1", ")", "\n", "\n", "xx_channel", "=", "xx_channel", "*", "2", "-", "1", "\n", "yy_channel", "=", "yy_channel", "*", "2", "-", "1", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "repeat", "(", "batch_size_tensor", ",", "1", ",", "1", ",", "1", ")", "\n", "yy_channel", "=", "yy_channel", ".", "repeat", "(", "batch_size_tensor", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "in_tensor", ".", "cuda", "(", ")", ",", "xx_channel", ".", "cuda", "(", ")", ",", "yy_channel", ".", "cuda", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "radius_channel", ":", "\n", "            ", "radius_calc", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "xx_channel", "-", "0.5", ",", "2", ")", "+", "torch", ".", "pow", "(", "yy_channel", "-", "0.5", ",", "2", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "radius_calc", "]", ",", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.CoordConv.__init__": [[118, 122], ["torch.nn.Module.__init__", "CoordConv.AddCoords", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CoordConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "addcoord", "=", "AddCoords", "(", "radius_channel", "=", "False", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.CoordConv.forward": [[123, 127], ["CoordConv.CoordConv.addcoord", "CoordConv.CoordConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_tensor", ")", ":", "\n", "        ", "out", "=", "self", ".", "addcoord", "(", "in_tensor", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.CoordConvTranspose.__init__": [[131, 135], ["torch.nn.Module.__init__", "CoordConv.AddCoords", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CoordConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "addcoord", "=", "AddCoords", "(", "radius_channel", "=", "False", ")", "\n", "self", ".", "convT", "=", "nn", ".", "ConvTranspose2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.CoordConvTranspose.forward": [[136, 140], ["CoordConv.CoordConvTranspose.addcoord", "CoordConv.CoordConvTranspose.convT"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_tensor", ")", ":", "\n", "        ", "out", "=", "self", ".", "addcoord", "(", "in_tensor", ")", "\n", "out", "=", "self", ".", "convT", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.get_3Dcoord_maps_halfz": [[4, 13], ["torch.arange", "len", "z_base.reshape().repeat", "torch.cat", "z_base.reshape", "torch.arange.reshape().repeat", "torch.arange.reshape().repeat", "torch.arange.reshape", "torch.arange.reshape"], "function", ["None"], ["def", "get_3Dcoord_maps_halfz", "(", "size", ",", "z_base", ")", ":", "\n", "    ", "range_arr", "=", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "z_len", "=", "len", "(", "z_base", ")", "\n", "Z_map", "=", "z_base", ".", "reshape", "(", "1", ",", "z_len", ",", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "size", ",", "size", ",", "1", ")", "\n", "Y_map", "=", "range_arr", ".", "reshape", "(", "1", ",", "1", ",", "size", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "z_len", ",", "1", ",", "size", ",", "1", ")", "/", "size", "*", "2", "-", "1", "\n", "X_map", "=", "range_arr", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "size", ",", "1", ")", ".", "repeat", "(", "1", ",", "z_len", ",", "size", ",", "1", ",", "1", ")", "/", "size", "*", "2", "-", "1", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "Z_map", ",", "Y_map", ",", "X_map", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.get_3Dcoord_maps": [[14, 25], ["torch.arange", "torch.cat", "z_base.reshape().repeat", "z_base.reshape", "torch.arange.reshape().repeat", "torch.arange.reshape().repeat", "torch.arange.reshape().repeat", "torch.arange.reshape", "torch.arange.reshape", "torch.arange.reshape"], "function", ["None"], ["", "def", "get_3Dcoord_maps", "(", "size", "=", "128", ",", "z_base", "=", "None", ")", ":", "\n", "    ", "range_arr", "=", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "z_base", "is", "None", ":", "\n", "        ", "Z_map", "=", "range_arr", ".", "reshape", "(", "1", ",", "size", ",", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "size", ",", "size", ",", "1", ")", "/", "size", "*", "2", "-", "1", "\n", "", "else", ":", "\n", "        ", "Z_map", "=", "z_base", ".", "reshape", "(", "1", ",", "size", ",", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "size", ",", "size", ",", "1", ")", "\n", "", "Y_map", "=", "range_arr", ".", "reshape", "(", "1", ",", "1", ",", "size", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "size", ",", "1", ",", "size", ",", "1", ")", "/", "size", "*", "2", "-", "1", "\n", "X_map", "=", "range_arr", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "size", ",", "1", ")", ".", "repeat", "(", "1", ",", "size", ",", "size", ",", "1", ",", "1", ")", "/", "size", "*", "2", "-", "1", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "Z_map", ",", "Y_map", ",", "X_map", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.get_coord_maps": [[30, 60], ["torch.ones", "xx_ones.unsqueeze.unsqueeze", "torch.arange().unsqueeze", "xx_range.unsqueeze.unsqueeze", "torch.matmul", "xx_channel.permute.unsqueeze", "torch.ones", "yy_ones.unsqueeze.unsqueeze", "torch.arange().unsqueeze", "yy_range.unsqueeze.unsqueeze", "torch.matmul", "yy_channel.permute.unsqueeze", "xx_channel.permute.permute", "yy_channel.permute.permute", "torch.cat", "xx_channel.permute.float", "yy_channel.permute.float", "torch.arange", "torch.arange"], "function", ["None"], ["def", "get_coord_maps", "(", "size", "=", "128", ")", ":", "\n", "    ", "xx_ones", "=", "torch", ".", "ones", "(", "[", "1", ",", "size", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "xx_ones", "=", "xx_ones", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "xx_range", "=", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "xx_range", "=", "xx_range", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "xx_channel", "=", "torch", ".", "matmul", "(", "xx_ones", ",", "xx_range", ")", "\n", "xx_channel", "=", "xx_channel", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "yy_ones", "=", "torch", ".", "ones", "(", "[", "1", ",", "size", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "yy_ones", "=", "yy_ones", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "yy_range", "=", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "yy_range", "=", "yy_range", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "yy_channel", "=", "torch", ".", "matmul", "(", "yy_range", ",", "yy_ones", ")", "\n", "yy_channel", "=", "yy_channel", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "yy_channel", "=", "yy_channel", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "float", "(", ")", "/", "(", "size", "-", "1", ")", "\n", "yy_channel", "=", "yy_channel", ".", "float", "(", ")", "/", "(", "size", "-", "1", ")", "\n", "\n", "xx_channel", "=", "xx_channel", "*", "2", "-", "1", "\n", "yy_channel", "=", "yy_channel", "*", "2", "-", "1", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "xx_channel", ",", "yy_channel", "]", ",", "dim", "=", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.__init__": [[74, 93], ["torch.nn.modules.Module.__init__", "torch.cuda.is_available", "list", "len", "balanced_dataparallel._DataParallel.module.cuda", "range", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["def", "__init__", "(", "self", ",", "module", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "        ", "super", "(", "_DataParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "module", "=", "module", "\n", "self", ".", "device_ids", "=", "[", "]", "\n", "return", "\n", "\n", "", "if", "device_ids", "is", "None", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "if", "output_device", "is", "None", ":", "\n", "            ", "output_device", "=", "device_ids", "[", "0", "]", "\n", "", "self", ".", "dim", "=", "dim", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "self", ".", "chunk_sizes", "=", "chunk_sizes", "\n", "self", ".", "output_device", "=", "output_device", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "self", ".", "module", ".", "cuda", "(", "device_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.forward": [[94, 103], ["balanced_dataparallel._DataParallel.scatter", "balanced_dataparallel._DataParallel.replicate", "balanced_dataparallel._DataParallel.parallel_apply", "balanced_dataparallel._DataParallel.gather", "balanced_dataparallel._DataParallel.module", "len", "balanced_dataparallel._DataParallel.module", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.replicate", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.parallel_apply", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.gather"], ["", "", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", ",", "self", ".", "chunk_sizes", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "self", ".", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ")", "\n", "return", "self", ".", "gather", "(", "outputs", ",", "self", ".", "output_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.replicate": [[104, 106], ["torch.nn.parallel.replicate.replicate"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.replicate"], ["", "def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "return", "replicate", "(", "module", ",", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.scatter": [[107, 109], ["balanced_dataparallel.scatter_kwargs"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter_kwargs"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ",", "chunk_sizes", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ",", "chunk_sizes", "=", "self", ".", "chunk_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.parallel_apply": [[110, 112], ["torch.nn.parallel.parallel_apply.parallel_apply", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.parallel_apply"], ["", "def", "parallel_apply", "(", "self", ",", "replicas", ",", "inputs", ",", "kwargs", ")", ":", "\n", "        ", "return", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ",", "self", ".", "device_ids", "[", ":", "len", "(", "replicas", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.gather": [[113, 115], ["torch.nn.parallel.scatter_gather.gather"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.gather"], ["", "def", "gather", "(", "self", ",", "outputs", ",", "output_device", ")", ":", "\n", "        ", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter": [[13, 33], ["balanced_dataparallel.scatter.scatter_map"], "function", ["None"], ["def", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    Slices variables into approximately equal chunks and\n    distributes them across given GPUs. Duplicates\n    references to objects that are not variables. Does not\n    support Tensors.\n    \"\"\"", "\n", "def", "scatter_map", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "Variable", ")", ":", "\n", "            ", "return", "Scatter", ".", "apply", "(", "target_gpus", ",", "chunk_sizes", ",", "dim", ",", "obj", ")", "\n", "", "assert", "not", "torch", ".", "is_tensor", "(", "obj", ")", ",", "\"Tensors not supported in scatter.\"", "\n", "if", "isinstance", "(", "obj", ",", "tuple", ")", ":", "\n", "            ", "return", "list", "(", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "            ", "return", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "return", "list", "(", "map", "(", "type", "(", "obj", ")", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ".", "items", "(", ")", ")", ")", ")", ")", "\n", "", "return", "[", "obj", "for", "targets", "in", "target_gpus", "]", "\n", "\n", "", "return", "scatter_map", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter_kwargs": [[35, 46], ["tuple", "tuple", "balanced_dataparallel.scatter", "balanced_dataparallel.scatter", "len", "len", "tuple.extend", "len", "len", "tuple.extend", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter"], ["", "def", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "target_gpus", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Scatter with support for kwargs dictionary\"\"\"", "\n", "inputs", "=", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", ",", "chunk_sizes", ")", "if", "inputs", "else", "[", "]", "\n", "kwargs", "=", "scatter", "(", "kwargs", ",", "target_gpus", ",", "dim", ",", "chunk_sizes", ")", "if", "kwargs", "else", "[", "]", "\n", "if", "len", "(", "inputs", ")", "<", "len", "(", "kwargs", ")", ":", "\n", "        ", "inputs", ".", "extend", "(", "[", "(", ")", "for", "_", "in", "range", "(", "len", "(", "kwargs", ")", "-", "len", "(", "inputs", ")", ")", "]", ")", "\n", "", "elif", "len", "(", "kwargs", ")", "<", "len", "(", "inputs", ")", ":", "\n", "        ", "kwargs", ".", "extend", "(", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "inputs", ")", "-", "len", "(", "kwargs", ")", ")", "]", ")", "\n", "", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "kwargs", "=", "tuple", "(", "kwargs", ")", "\n", "return", "inputs", ",", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.data_parallel": [[117, 146], ["balanced_dataparallel.scatter_kwargs", "torch.nn.parallel.replicate.replicate", "torch.nn.parallel.parallel_apply.parallel_apply", "torch.nn.parallel.scatter_gather.gather", "isinstance", "list", "len", "module", "range", "len", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.scatter_kwargs", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.replicate", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.parallel_apply", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.gather"], ["", "", "def", "data_parallel", "(", "module", ",", "inputs", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "module_kwargs", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Evaluates module(input) in parallel across the GPUs given in device_ids.\n    This is the functional version of the DataParallel module.\n    Args:\n        module: the module to evaluate in parallel\n        inputs: inputs to the module\n        device_ids: GPU ids on which to replicate module\n        output_device: GPU location of the output  Use -1 to indicate the CPU.\n            (default: device_ids[0])\n    Returns:\n        a Variable containing the result of module(input) located on\n        output_device\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "        ", "inputs", "=", "(", "inputs", ",", ")", "\n", "\n", "", "if", "device_ids", "is", "None", ":", "\n", "        ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "", "if", "output_device", "is", "None", ":", "\n", "        ", "output_device", "=", "device_ids", "[", "0", "]", "\n", "\n", "", "inputs", ",", "module_kwargs", "=", "scatter_kwargs", "(", "inputs", ",", "module_kwargs", ",", "device_ids", ",", "dim", ")", "\n", "if", "len", "(", "device_ids", ")", "==", "1", ":", "\n", "        ", "return", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "module_kwargs", "[", "0", "]", ")", "\n", "", "used_device_ids", "=", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", "\n", "replicas", "=", "replicate", "(", "module", ",", "used_device_ids", ")", "\n", "outputs", "=", "parallel_apply", "(", "replicas", ",", "inputs", ",", "module_kwargs", ",", "used_device_ids", ")", "\n", "return", "gather", "(", "outputs", ",", "output_device", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel": [[147, 157], ["range", "balanced_dataparallel._DataParallel", "torch.nn.DataParallel", "len", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel"], ["", "def", "DataParallel", "(", "module", ",", "device_ids", "=", "None", ",", "output_device", "=", "None", ",", "dim", "=", "0", ",", "chunk_sizes", "=", "None", ")", ":", "\n", "    ", "if", "chunk_sizes", "is", "None", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "DataParallel", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ")", "\n", "", "standard_size", "=", "True", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "chunk_sizes", ")", ")", ":", "\n", "        ", "if", "chunk_sizes", "[", "i", "]", "!=", "chunk_sizes", "[", "0", "]", ":", "\n", "            ", "standard_size", "=", "False", "\n", "", "", "if", "standard_size", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "DataParallel", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ")", "\n", "", "return", "_DataParallel", "(", "module", ",", "device_ids", ",", "output_device", ",", "dim", ",", "chunk_sizes", ")", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.forward": [[23, 32], ["base.Base.matching_forward", "base.Base.parsing_forward", "base.Base.pure_forward", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.matching_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parsing_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.pure_forward"], ["determ_worst_best", ",", "reorganize_vis_info", "\n", "from", "dataset", ".", "mixed_dataset", "import", "MixedDataset", ",", "SingleDataset", "\n", "from", "visualization", ".", "visualization", "import", "Visualizer", "\n", "if", "args", "(", ")", ".", "model_precision", "==", "'fp16'", ":", "\n", "    ", "from", "torch", ".", "cuda", ".", "amp", "import", "autocast", ",", "GradScaler", "\n", "\n", "", "class", "Base", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "project_dir", "=", "config", ".", "project_dir", "\n", "hparams_dict", "=", "self", ".", "load_config_dict", "(", "vars", "(", "args", "(", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.matching_forward": [[33, 47], ["base.Base.feed_forward", "base.Base._result_parser.matching_forward", "base.Base.update", "config.args", "autocast", "base.Base.feed_forward", "base.Base._result_parser.matching_forward", "base.Base._calc_loss"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.feed_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.matching_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.feed_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.matching_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.pretrain.Trainer._calc_loss"], ["self", ".", "_init_log", "(", "hparams_dict", ")", "\n", "self", ".", "_init_params", "(", ")", "\n", "if", "self", ".", "save_visualization_on_img", ":", "\n", "            ", "self", ".", "visualizer", "=", "Visualizer", "(", "resolution", "=", "(", "512", ",", "512", ")", ",", "result_img_dir", "=", "self", ".", "result_img_dir", ",", "with_renderer", "=", "True", ")", "\n", "\n", "", "", "def", "_build_model_", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'start building model.'", ")", "\n", "model", "=", "build_model", "(", ")", "\n", "if", "self", ".", "fine_tune", "or", "self", ".", "eval", ":", "\n", "            ", "drop_prefix", "=", "''", "\n", "if", "self", ".", "model_version", "==", "6", ":", "\n", "                ", "model", "=", "load_model", "(", "self", ".", "model_path", ",", "model", ",", "prefix", "=", "'module.'", ",", "drop_prefix", "=", "drop_prefix", ",", "fix_loaded", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "load_model", "(", "self", ".", "model_path", ",", "model", ",", "prefix", "=", "'module.'", ",", "drop_prefix", "=", "drop_prefix", ",", "fix_loaded", "=", "False", ")", "\n", "train_entire_model", "(", "model", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.parsing_forward": [[48, 61], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base.Base.feed_forward", "base.Base._result_parser.parsing_forward", "config.args", "autocast", "base.Base.feed_forward", "base.Base._result_parser.parsing_forward"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.feed_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parsing_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.feed_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parsing_forward"], ["", "", "if", "self", ".", "distributed_training", ":", "\n", "            ", "print", "(", "'local_rank'", ",", "self", ".", "local_rank", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ",", "self", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "local_rank", ")", "\n", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "assert", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ".", "to", "(", "device", ")", ",", "device_ids", "=", "[", "self", ".", "local_rank", "]", ",", "output_device", "=", "self", ".", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "master_batch_size", "!=", "-", "1", ":", "\n", "# balance the multi-GPU memory via adjusting the batch size of each GPU.", "\n", "                ", "self", ".", "model", "=", "DataParallel", "(", "model", ".", "cuda", "(", ")", ",", "device_ids", "=", "self", ".", "gpus", ",", "chunk_sizes", "=", "self", ".", "chunk_sizes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.feed_forward": [[62, 66], ["base.Base.backbone", "base.Base.head_forward", "meta_data[].contiguous().cuda", "meta_data[].contiguous"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.head_forward"], ["\n", "", "", "", "def", "_build_optimizer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "optimizer_type", "==", "'Adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "optimizer_type", "==", "'SGD'", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.pure_forward": [[67, 75], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "base.Base.feed_forward", "config.args", "autocast", "base.Base.feed_forward"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.feed_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.feed_forward"], ["            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "", "if", "self", ".", "model_precision", "==", "'fp16'", ":", "\n", "            ", "self", ".", "scaler", "=", "GradScaler", "(", ")", "\n", "", "self", ".", "e_sche", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "optimizer", ",", "milestones", "=", "[", "60", ",", "80", "]", ",", "gamma", "=", "self", ".", "adjust_lr_factor", ")", "\n", "\n", "logging", ".", "info", "(", "'finished build model.'", ")", "\n", "\n", "", "def", "_init_log", "(", "self", ",", "hparams_dict", ")", ":", "\n", "        ", "self", ".", "log_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "'{}'", ".", "format", "(", "self", ".", "tab", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.head_forward": [[76, 78], ["None"], "methods", ["None"], ["os", ".", "makedirs", "(", "self", ".", "log_path", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "'{}.log'", ".", "format", "(", "self", ".", "tab", ")", ")", "\n", "write2log", "(", "self", ".", "log_file", ",", "'================ Training Loss (%s) ================\\n'", "%", "time", ".", "strftime", "(", "\"%c\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.make_backbone": [[79, 81], ["None"], "methods", ["None"], ["self", ".", "summary_writer", "=", "SummaryWriter", "(", "self", ".", "log_path", ")", "\n", "save_yaml", "(", "hparams_dict", ",", "self", ".", "log_file", ".", "replace", "(", "'.log'", ",", "'.yml'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.backbone_forward": [[82, 84], ["None"], "methods", ["None"], ["self", ".", "result_img_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "root_dir", ",", "'result_images'", ",", "'{}_on_gpu{}_val'", ".", "format", "(", "self", ".", "tab", ",", "self", ".", "gpu", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "result_img_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "train_img_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "root_dir", ",", "'result_image_train'", ",", "'{}_on_gpu{}_val'", ".", "format", "(", "self", ".", "tab", ",", "self", ".", "gpu", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base._build_gpu_tracker": [[85, 87], ["MemTracker"], "methods", ["None"], ["os", ".", "makedirs", "(", "self", ".", "train_img_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "model_save_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "root_dir", ",", "'checkpoints'", ",", "'{}_on_gpu{}_val'", ".", "format", "(", "self", ".", "tab", ",", "self", ".", "gpu", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "model_save_dir", ",", "exist_ok", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.base.Base.init_weights": [[88, 103], ["base.Base.modules", "isinstance", "torch.init.normal_", "torch.init.normal_", "m.named_parameters", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "m.named_parameters", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["\n", "", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "self", ".", "global_count", "=", "0", "\n", "self", ".", "eval_cfg", "=", "{", "'mode'", ":", "'matching_gts'", ",", "'is_training'", ":", "False", ",", "'calc_loss'", ":", "False", ",", "'with_nms'", ":", "False", ",", "'with_2d_matching'", ":", "True", "}", "\n", "self", ".", "val_cfg", "=", "{", "'mode'", ":", "'parsing'", ",", "'calc_loss'", ":", "False", ",", "'with_nms'", ":", "False", "}", "\n", "self", ".", "gpus", "=", "[", "int", "(", "i", ")", "for", "i", "in", "str", "(", "self", ".", "gpu", ")", ".", "split", "(", "','", ")", "]", "\n", "\n", "self", ".", "chunk_sizes", "=", "[", "]", "\n", "if", "not", "self", ".", "distributed_training", "and", "self", ".", "master_batch_size", "!=", "-", "1", ":", "\n", "            ", "self", ".", "chunk_sizes", "=", "[", "self", ".", "master_batch_size", "]", "\n", "rest_batch_size", "=", "(", "self", ".", "batch_size", "-", "self", ".", "master_batch_size", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "gpus", ")", "-", "1", ")", ":", "\n", "                ", "slave_chunk_size", "=", "rest_batch_size", "//", "(", "len", "(", "self", ".", "gpus", ")", "-", "1", ")", "\n", "if", "i", "<", "rest_batch_size", "%", "(", "len", "(", "self", ".", "gpus", ")", "-", "1", ")", ":", "\n", "                    ", "slave_chunk_size", "+=", "1", "\n", "", "self", ".", "chunk_sizes", ".", "append", "(", "slave_chunk_size", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.__init__": [[26, 31], ["torch.Module.__init__", "hrnet_32.HigherResolutionNet.make_baseline"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.make_baseline"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "HigherResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "make_baseline", "(", ")", "\n", "self", ".", "backbone_channels", "=", "32", "\n", "#self.init_weights()", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.load_pretrain_params": [[33, 36], ["os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "utils.copy_state_dict", "config.args", "hrnet_32.HigherResolutionNet.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.copy_state_dict", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "load_pretrain_params", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "args", "(", ")", ".", "hrnet_pretrain", ")", ":", "\n", "            ", "success_layer", "=", "copy_state_dict", "(", "self", ".", "state_dict", "(", ")", ",", "torch", ".", "load", "(", "args", "(", ")", ".", "hrnet_pretrain", ")", ",", "prefix", "=", "''", ",", "fix_loaded", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_transition_layer": [[37, 71], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels_cur_layer", "[", "i", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outchannels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_layer": [[72, 87], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "BN", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "BN", "=", "BN", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "BN", "=", "BN", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_stage": [[88, 118], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "models.basic_modules.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "\n", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.make_baseline": [[119, 164], ["torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "hrnet_32.HigherResolutionNet._make_layer", "hrnet_32.HigherResolutionNet._make_transition_layer", "hrnet_32.HigherResolutionNet._make_stage", "hrnet_32.HigherResolutionNet._make_transition_layer", "hrnet_32.HigherResolutionNet._make_stage", "hrnet_32.HigherResolutionNet._make_transition_layer", "hrnet_32.HigherResolutionNet._make_stage", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_stage", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_stage", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet._make_stage"], ["", "def", "make_baseline", "(", "self", ")", ":", "\n", "# stem net", "\n", "        ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "Bottleneck", ",", "64", ",", "4", ",", "BN", "=", "nn", ".", "BatchNorm2d", ")", "\n", "\n", "self", ".", "stage2_cfg", "=", "{", "'NUM_MODULES'", ":", "1", ",", "'NUM_BRANCHES'", ":", "2", ",", "'BLOCK'", ":", "'BASIC'", ",", "'NUM_BLOCKS'", ":", "[", "4", ",", "4", "]", ",", "'NUM_CHANNELS'", ":", "[", "32", ",", "64", "]", ",", "'FUSE_METHOD'", ":", "'SUM'", "}", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "256", "]", ",", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "{", "'NUM_MODULES'", ":", "4", ",", "'NUM_BRANCHES'", ":", "3", ",", "'BLOCK'", ":", "'BASIC'", ",", "'NUM_BLOCKS'", ":", "[", "4", ",", "4", ",", "4", "]", ",", "'NUM_CHANNELS'", ":", "[", "32", ",", "64", ",", "128", "]", ",", "'FUSE_METHOD'", ":", "'SUM'", "}", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "{", "'NUM_MODULES'", ":", "3", ",", "'NUM_BRANCHES'", ":", "4", ",", "'BLOCK'", ":", "'BASIC'", ",", "'NUM_BLOCKS'", ":", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "'NUM_CHANNELS'", ":", "[", "32", ",", "64", ",", "128", ",", "256", "]", ",", "'FUSE_METHOD'", ":", "'SUM'", "}", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "\n", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.forward": [[165, 200], ["hrnet_32.HigherResolutionNet.conv1", "hrnet_32.HigherResolutionNet.bn1", "hrnet_32.HigherResolutionNet.relu", "hrnet_32.HigherResolutionNet.conv2", "hrnet_32.HigherResolutionNet.bn2", "hrnet_32.HigherResolutionNet.relu", "hrnet_32.HigherResolutionNet.layer1", "range", "hrnet_32.HigherResolutionNet.stage2", "range", "hrnet_32.HigherResolutionNet.stage3", "range", "hrnet_32.HigherResolutionNet.stage4", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "utils.BHWC_to_BCHW"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.BHWC_to_BCHW"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "(", "BHWC_to_BCHW", "(", "x", ")", "/", "255.", ")", "*", "2.0", "-", "1.0", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "x", "=", "y_list", "[", "0", "]", "\n", "return", "x", "\n", "", "def", "init_weights", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.init_weights": [[200, 215], ["hrnet_32.HigherResolutionNet.modules", "isinstance", "torch.init.normal_", "torch.init.normal_", "m.named_parameters", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "m.named_parameters", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "name", ",", "_", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", "in", "[", "'bias'", "]", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "name", ",", "_", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", "in", "[", "'bias'", "]", ":", "\n", "                        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.BasicBlock.__init__": [[30, 39], ["torch.Module.__init__", "basic_modules.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "basic_modules.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.conv3x3", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.BasicBlock.forward": [[40, 57], ["basic_modules.BasicBlock.conv1", "basic_modules.BasicBlock.bn1", "basic_modules.BasicBlock.relu", "basic_modules.BasicBlock.conv2", "basic_modules.BasicBlock.bn2", "basic_modules.BasicBlock.relu", "basic_modules.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.BasicBlock_IBN_a.__init__": [[61, 70], ["torch.Module.__init__", "basic_modules.conv3x3", "basic_modules.IBN_a", "torch.ReLU", "torch.ReLU", "basic_modules.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.conv3x3", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock_IBN_a", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "IBN_a", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.BasicBlock_IBN_a.forward": [[71, 88], ["basic_modules.BasicBlock_IBN_a.conv1", "basic_modules.BasicBlock_IBN_a.bn1", "basic_modules.BasicBlock_IBN_a.relu", "basic_modules.BasicBlock_IBN_a.conv2", "basic_modules.BasicBlock_IBN_a.bn2", "basic_modules.BasicBlock_IBN_a.relu", "basic_modules.BasicBlock_IBN_a.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.Bottleneck.__init__": [[93, 107], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "BN", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.Bottleneck.forward": [[108, 129], ["basic_modules.Bottleneck.conv1", "basic_modules.Bottleneck.bn1", "basic_modules.Bottleneck.relu", "basic_modules.Bottleneck.conv2", "basic_modules.Bottleneck.bn2", "basic_modules.Bottleneck.relu", "basic_modules.Bottleneck.conv3", "basic_modules.Bottleneck.bn3", "basic_modules.Bottleneck.relu", "basic_modules.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.BasicBlock_1D.__init__": [[139, 147], ["torch.Module.__init__", "basic_modules.conv3x3_1D", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "basic_modules.conv3x3_1D", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.conv3x3_1D", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.conv3x3_1D"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock_1D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3_1D", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3_1D", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.BasicBlock_1D.forward": [[148, 158], ["basic_modules.BasicBlock_1D.conv1", "basic_modules.BasicBlock_1D.bn1", "basic_modules.BasicBlock_1D.relu", "basic_modules.BasicBlock_1D.conv2", "basic_modules.BasicBlock_1D.bn2", "basic_modules.BasicBlock_1D.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.BasicBlock_3D.__init__": [[167, 175], ["torch.Module.__init__", "basic_modules.conv3x3_3D", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "basic_modules.conv3x3_3D", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.conv3x3_3D", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.conv3x3_3D"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock_3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3_3D", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3_3D", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.BasicBlock_3D.forward": [[176, 189], ["basic_modules.BasicBlock_3D.conv1", "basic_modules.BasicBlock_3D.bn1", "basic_modules.BasicBlock_3D.relu", "basic_modules.BasicBlock_3D.conv2", "basic_modules.BasicBlock_3D.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "+=", "residual", "\n", "#out = self.relu(out)", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule.__init__": [[192, 206], ["torch.Module.__init__", "basic_modules.HighResolutionModule._make_branches", "basic_modules.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule._make_one_branch": [[207, 230], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule._make_branches": [[231, 239], ["range", "torch.ModuleList", "torch.ModuleList", "branches.append", "basic_modules.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule._make_fuse_layers": [[240, 284], ["range", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule.get_num_inchannels": [[285, 287], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.HighResolutionModule.forward": [[288, 307], ["range", "range", "len", "range", "x_fuse.append", "basic_modules.HighResolutionModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.IBN_a.__init__": [[316, 323], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", ":", "\n", "        ", "super", "(", "IBN_a", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ",", "momentum", "=", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.IBN_a.forward": [[324, 330], ["torch.split", "torch.split", "torch.split", "torch.split", "basic_modules.IBN_a.IN", "basic_modules.IBN_a.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.conv3x3_1D": [[131, 135], ["torch.Conv1d"], "function", ["None"], ["", "", "def", "conv3x3_1D", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.basic_modules.conv3x3_3D": [[159, 163], ["torch.Conv3d"], "function", ["None"], ["", "", "def", "conv3x3_3D", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.build.build_model": [[13, 24], ["head", "NotImplementedError", "NotImplementedError", "config.args", "config.args", "config.args", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["def", "build_model", "(", ")", ":", "\n", "    ", "if", "args", "(", ")", ".", "backbone", "in", "Backbones", ":", "\n", "        ", "backbone", "=", "Backbones", "[", "args", "(", ")", ".", "backbone", "]", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Backbone is not recognized\"", ")", "\n", "", "if", "args", "(", ")", ".", "model_version", "in", "Heads", ":", "\n", "        ", "head", "=", "Heads", "[", "args", "(", ")", ".", "model_version", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Head is not recognized\"", ")", "\n", "", "model", "=", "head", "(", "backbone", "=", "backbone", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.romp_model.ROMP.__init__": [[24, 35], ["models.base.Base.__init__", "print", "maps_utils.result_parser.ResultParser", "romp_model.ROMP._build_head", "config.args", "loss_funcs.Loss", "romp_model.ROMP.init_weights", "romp_model.ROMP.backbone.load_pretrain_params", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._build_head", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.init_weights", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.load_pretrain_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ",", "backbone", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ROMP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'Using ROMP v1'", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "_result_parser", "=", "ResultParser", "(", ")", "\n", "self", ".", "_build_head", "(", ")", "\n", "if", "args", "(", ")", ".", "model_return_loss", ":", "\n", "            ", "self", ".", "_calc_loss", "=", "Loss", "(", ")", "\n", "", "if", "not", "args", "(", ")", ".", "fine_tune", "and", "not", "args", "(", ")", ".", "eval", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "backbone", ".", "load_pretrain_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.romp_model.ROMP.head_forward": [[36, 52], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "config.args", "torch.cat.float", "torch.cat.float", "center_maps.float", "romp_model.ROMP.coordmaps.to().repeat", "romp_model.ROMP.coordmaps.to"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "def", "head_forward", "(", "self", ",", "x", ")", ":", "\n", "#generate heatmap (K) + associate embedding (K)", "\n", "#kp_heatmap_ae = self.final_layers[0](x)", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "self", ".", "coordmaps", ".", "to", "(", "x", ".", "device", ")", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "params_maps", "=", "self", ".", "final_layers", "[", "1", "]", "(", "x", ")", "\n", "center_maps", "=", "self", ".", "final_layers", "[", "2", "]", "(", "x", ")", "\n", "if", "args", "(", ")", ".", "merge_smpl_camera_head", ":", "\n", "            ", "cam_maps", ",", "params_maps", "=", "params_maps", "[", ":", ",", ":", "3", "]", ",", "params_maps", "[", ":", ",", "3", ":", "]", "\n", "", "else", ":", "\n", "            ", "cam_maps", "=", "self", ".", "final_layers", "[", "3", "]", "(", "x", ")", "\n", "# to make sure that scale is always a positive value", "\n", "", "cam_maps", "[", ":", ",", "0", "]", "=", "torch", ".", "pow", "(", "1.1", ",", "cam_maps", "[", ":", ",", "0", "]", ")", "\n", "params_maps", "=", "torch", ".", "cat", "(", "[", "cam_maps", ",", "params_maps", "]", ",", "1", ")", "\n", "output", "=", "{", "'params_maps'", ":", "params_maps", ".", "float", "(", ")", ",", "'center_map'", ":", "center_maps", ".", "float", "(", ")", "}", "#, 'kp_ae_maps':kp_heatmap_ae.float()", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.romp_model.ROMP._build_head": [[53, 61], ["romp_model.ROMP._make_final_layers", "models.CoordConv.get_coord_maps", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_final_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.get_coord_maps", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "_build_head", "(", "self", ")", ":", "\n", "        ", "self", ".", "outmap_size", "=", "args", "(", ")", ".", "centermap_size", "\n", "params_num", ",", "cam_dim", "=", "self", ".", "_result_parser", ".", "params_map_parser", ".", "params_num", ",", "3", "\n", "self", ".", "head_cfg", "=", "{", "'NUM_HEADS'", ":", "1", ",", "'NUM_CHANNELS'", ":", "64", ",", "'NUM_BASIC_BLOCKS'", ":", "args", "(", ")", ".", "head_block_num", "}", "\n", "self", ".", "output_cfg", "=", "{", "'NUM_PARAMS_MAP'", ":", "params_num", "-", "cam_dim", ",", "'NUM_CENTER_MAP'", ":", "1", ",", "'NUM_CAM_MAP'", ":", "cam_dim", "}", "\n", "\n", "self", ".", "final_layers", "=", "self", ".", "_make_final_layers", "(", "self", ".", "backbone", ".", "backbone_channels", ")", "\n", "self", ".", "coordmaps", "=", "get_coord_maps", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.romp_model.ROMP._make_final_layers": [[62, 79], ["final_layers.append", "torch.ModuleList", "torch.ModuleList", "config.args", "final_layers.append", "final_layers.append", "final_layers.append", "final_layers.append", "final_layers.append", "romp_model.ROMP._make_head_layers", "romp_model.ROMP._make_head_layers", "romp_model.ROMP._make_head_layers", "romp_model.ROMP._make_head_layers", "romp_model.ROMP._make_head_layers"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers"], ["", "def", "_make_final_layers", "(", "self", ",", "input_channels", ")", ":", "\n", "        ", "final_layers", "=", "[", "]", "\n", "final_layers", ".", "append", "(", "None", ")", "\n", "#output_channels = self.NUM_JOINTS + self.NUM_JOINTS", "\n", "#final_layers.append(nn.Conv2d(in_channels=input_channels,out_channels=output_channels,\\", "\n", "#    kernel_size=1,stride=1,padding=0))", "\n", "\n", "input_channels", "+=", "2", "\n", "if", "args", "(", ")", ".", "merge_smpl_camera_head", ":", "\n", "            ", "final_layers", ".", "append", "(", "self", ".", "_make_head_layers", "(", "input_channels", ",", "self", ".", "output_cfg", "[", "'NUM_PARAMS_MAP'", "]", "+", "self", ".", "output_cfg", "[", "'NUM_CAM_MAP'", "]", ")", ")", "\n", "final_layers", ".", "append", "(", "self", ".", "_make_head_layers", "(", "input_channels", ",", "self", ".", "output_cfg", "[", "'NUM_CENTER_MAP'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "final_layers", ".", "append", "(", "self", ".", "_make_head_layers", "(", "input_channels", ",", "self", ".", "output_cfg", "[", "'NUM_PARAMS_MAP'", "]", ")", ")", "\n", "final_layers", ".", "append", "(", "self", ".", "_make_head_layers", "(", "input_channels", ",", "self", ".", "output_cfg", "[", "'NUM_CENTER_MAP'", "]", ")", ")", "\n", "final_layers", ".", "append", "(", "self", ".", "_make_head_layers", "(", "input_channels", ",", "self", ".", "output_cfg", "[", "'NUM_CAM_MAP'", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "final_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.romp_model.ROMP._make_head_layers": [[80, 106], ["romp_model.ROMP._get_trans_cfg", "zip", "range", "head_layers.append", "torch.Sequential", "torch.Sequential", "head_layers.append", "range", "head_layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "models.basic_modules.BasicBlock"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.romp_model.ROMP._get_trans_cfg"], ["", "def", "_make_head_layers", "(", "self", ",", "input_channels", ",", "output_channels", ")", ":", "\n", "        ", "head_layers", "=", "[", "]", "\n", "num_channels", "=", "self", ".", "head_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "\n", "kernel_sizes", ",", "strides", ",", "paddings", "=", "self", ".", "_get_trans_cfg", "(", ")", "\n", "for", "kernel_size", ",", "padding", ",", "stride", "in", "zip", "(", "kernel_sizes", ",", "paddings", ",", "strides", ")", ":", "\n", "            ", "head_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "input_channels", ",", "\n", "out_channels", "=", "num_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "head_cfg", "[", "'NUM_HEADS'", "]", ")", ":", "\n", "            ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "head_cfg", "[", "'NUM_BASIC_BLOCKS'", "]", ")", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "BasicBlock", "(", "num_channels", ",", "num_channels", ")", ")", ")", "\n", "", "head_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "\n", "", "head_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "output_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "head_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.romp_model.ROMP._get_trans_cfg": [[107, 122], ["None"], "methods", ["None"], ["", "def", "_get_trans_cfg", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "outmap_size", "==", "32", ":", "\n", "            ", "kernel_sizes", "=", "[", "3", ",", "3", "]", "\n", "paddings", "=", "[", "1", ",", "1", "]", "\n", "strides", "=", "[", "2", ",", "2", "]", "\n", "", "elif", "self", ".", "outmap_size", "==", "64", ":", "\n", "            ", "kernel_sizes", "=", "[", "3", "]", "\n", "paddings", "=", "[", "1", "]", "\n", "strides", "=", "[", "2", "]", "\n", "", "elif", "self", ".", "outmap_size", "==", "128", ":", "\n", "            ", "kernel_sizes", "=", "[", "3", "]", "\n", "paddings", "=", "[", "1", "]", "\n", "strides", "=", "[", "1", "]", "\n", "\n", "", "return", "kernel_sizes", ",", "strides", ",", "paddings", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.__init__": [[26, 37], ["models.base.Base.__init__", "logging.info", "maps_utils.result_parser.ResultParser", "bev_model.BEV._build_head", "bev_model.BEV.init_weights", "bev_model.BEV.backbone.load_pretrain_params", "Loss", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._build_head", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.init_weights", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.hrnet_32.HigherResolutionNet.load_pretrain_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ",", "backbone", "=", "None", ",", "with_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BEV", ",", "self", ")", ".", "__init__", "(", ")", "\n", "logging", ".", "info", "(", "'Using BEV'", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "_result_parser", "=", "ResultParser", "(", ")", "\n", "self", ".", "_build_head", "(", ")", "\n", "if", "args", "(", ")", ".", "model_return_loss", "and", "with_loss", ":", "\n", "            ", "self", ".", "_calc_loss", "=", "Loss", "(", ")", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "backbone", ".", "load_pretrain_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV._build_head": [[38, 56], ["bev_model.BEV._make_transformer", "models.CoordConv.get_coord_maps", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "bev_model.BEV.register_buffer", "bev_model.BEV._make_final_layers", "config.args", "models.CoordConv.get_3Dcoord_maps_halfz", "config.args", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "constants.get_cam3dmap_anchor", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_transformer", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.CoordConv.get_coord_maps", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_final_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.get_3Dcoord_maps_halfz", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.get_cam3dmap_anchor", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "_build_head", "(", "self", ")", ":", "\n", "        ", "params_num", "=", "146", "\n", "self", ".", "NUM_JOINTS", "=", "17", "\n", "self", ".", "outmap_size", "=", "128", "#args().centermap_size", "\n", "self", ".", "cam_dim", "=", "args", "(", ")", ".", "cam_dim", "\n", "self", ".", "output_cfg", "=", "{", "'NUM_PARAMS_MAP'", ":", "params_num", "-", "self", ".", "cam_dim", ",", "'NUM_CENTER_MAP'", ":", "1", ",", "'NUM_CAM_MAP'", ":", "self", ".", "cam_dim", "}", "\n", "\n", "self", ".", "head_cfg", "=", "{", "'NUM_BASIC_BLOCKS'", ":", "args", "(", ")", ".", "head_block_num", ",", "'NUM_CHANNELS'", ":", "128", "}", "\n", "self", ".", "bv_center_cfg", "=", "{", "'NUM_DEPTH_LEVEL'", ":", "self", ".", "outmap_size", "//", "2", ",", "'NUM_BLOCK'", ":", "2", "}", "\n", "\n", "self", ".", "backbone_channels", "=", "self", ".", "backbone", ".", "backbone_channels", "\n", "self", ".", "transformer_cfg", "=", "{", "'INPUT_C'", ":", "self", ".", "head_cfg", "[", "'NUM_CHANNELS'", "]", ",", "'NUM_CHANNELS'", ":", "512", "}", "\n", "self", ".", "_make_transformer", "(", ")", "\n", "\n", "self", ".", "coordmaps", "=", "get_coord_maps", "(", "128", ")", "\n", "self", ".", "cam3dmap_anchor", "=", "torch", ".", "from_numpy", "(", "constants", ".", "get_cam3dmap_anchor", "(", "args", "(", ")", ".", "FOV", ",", "128", ")", ")", ".", "float", "(", ")", "# args().centermap_size", "\n", "self", ".", "register_buffer", "(", "'coordmap_3d'", ",", "get_3Dcoord_maps_halfz", "(", "128", ",", "z_base", "=", "self", ".", "cam3dmap_anchor", ")", ")", "# args().centermap_size", "\n", "self", ".", "_make_final_layers", "(", "self", ".", "backbone_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV._make_transformer": [[57, 67], ["torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "_make_transformer", "(", "self", ",", "drop_ratio", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "outmap_size", ",", "self", ".", "transformer_cfg", "[", "'INPUT_C'", "]", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "transformer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "transformer_cfg", "[", "'INPUT_C'", "]", ",", "self", ".", "transformer_cfg", "[", "'NUM_CHANNELS'", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "drop_ratio", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "transformer_cfg", "[", "'NUM_CHANNELS'", "]", ",", "self", ".", "transformer_cfg", "[", "'NUM_CHANNELS'", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "drop_ratio", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "transformer_cfg", "[", "'NUM_CHANNELS'", "]", ",", "self", ".", "output_cfg", "[", "'NUM_PARAMS_MAP'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV._make_final_layers": [[68, 74], ["bev_model.BEV._make_head_layers", "bev_model.BEV._make_head_layers", "bev_model.BEV._make_bv_center_layers", "bev_model.BEV._make_3D_map_refiner"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_bv_center_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_3D_map_refiner"], ["", "def", "_make_final_layers", "(", "self", ",", "input_channels", ")", ":", "\n", "        ", "self", ".", "det_head", "=", "self", ".", "_make_head_layers", "(", "input_channels", ",", "self", ".", "output_cfg", "[", "'NUM_CENTER_MAP'", "]", "+", "self", ".", "output_cfg", "[", "'NUM_CAM_MAP'", "]", ")", "\n", "self", ".", "param_head", "=", "self", ".", "_make_head_layers", "(", "input_channels", ",", "self", ".", "output_cfg", "[", "'NUM_PARAMS_MAP'", "]", ",", "with_outlayer", "=", "False", ")", "\n", "\n", "self", ".", "_make_bv_center_layers", "(", "input_channels", ",", "self", ".", "bv_center_cfg", "[", "'NUM_DEPTH_LEVEL'", "]", "*", "2", ")", "\n", "self", ".", "_make_3D_map_refiner", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV._make_head_layers": [[75, 89], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "head_layers.append", "head_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.basic_modules.BasicBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_make_head_layers", "(", "self", ",", "input_channels", ",", "output_channels", ",", "num_channels", "=", "None", ",", "with_outlayer", "=", "True", ")", ":", "\n", "        ", "head_layers", "=", "[", "]", "\n", "if", "num_channels", "is", "None", ":", "\n", "            ", "num_channels", "=", "self", ".", "head_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "\n", "", "for", "_", "in", "range", "(", "self", ".", "head_cfg", "[", "'NUM_BASIC_BLOCKS'", "]", ")", ":", "\n", "            ", "head_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "BasicBlock", "(", "input_channels", ",", "num_channels", ",", "downsample", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "input_channels", ",", "out_channels", "=", "num_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", ")", ")", "\n", "input_channels", "=", "num_channels", "\n", "", "if", "with_outlayer", ":", "\n", "            ", "head_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "output_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "head_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV._make_bv_center_layers": [[90, 112], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "config.args", "models.basic_modules.BasicBlock_1D", "models.basic_modules.BasicBlock_1D", "models.basic_modules.BasicBlock_1D"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "_make_bv_center_layers", "(", "self", ",", "input_channels", ",", "output_channels", ")", ":", "\n", "        ", "num_channels", "=", "self", ".", "outmap_size", "//", "8", "\n", "self", ".", "bv_pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "input_channels", ",", "out_channels", "=", "num_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "num_channels", ",", "out_channels", "=", "num_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "if", "args", "(", ")", ".", "bv_with_fv_condition", ":", "\n", "            ", "input_channels", "=", "(", "num_channels", "+", "self", ".", "output_cfg", "[", "'NUM_CENTER_MAP'", "]", "+", "self", ".", "output_cfg", "[", "'NUM_CAM_MAP'", "]", ")", "*", "self", ".", "outmap_size", "\n", "", "else", ":", "\n", "            ", "input_channels", "=", "num_channels", "*", "self", ".", "outmap_size", "\n", "", "inter_channels", "=", "512", "\n", "self", ".", "bv_out_layers", "=", "nn", ".", "Sequential", "(", "\n", "BasicBlock_1D", "(", "input_channels", ",", "inter_channels", ")", ",", "BasicBlock_1D", "(", "inter_channels", ",", "inter_channels", ")", ",", "BasicBlock_1D", "(", "inter_channels", ",", "output_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV._make_3D_map_refiner": [[113, 116], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.basic_modules.BasicBlock_3D", "models.basic_modules.BasicBlock_3D"], "methods", ["None"], ["", "def", "_make_3D_map_refiner", "(", "self", ")", ":", "\n", "        ", "self", ".", "center_map_refiner", "=", "nn", ".", "Sequential", "(", "BasicBlock_3D", "(", "self", ".", "output_cfg", "[", "'NUM_CENTER_MAP'", "]", ",", "self", ".", "output_cfg", "[", "'NUM_CENTER_MAP'", "]", ")", ")", "\n", "self", ".", "cam_map_refiner", "=", "nn", ".", "Sequential", "(", "BasicBlock_3D", "(", "self", ".", "output_cfg", "[", "'NUM_CAM_MAP'", "]", ",", "self", ".", "output_cfg", "[", "'NUM_CAM_MAP'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.coarse2fine_localization": [[117, 137], ["bev_model.BEV.det_head", "bev_model.BEV.center_map_refiner().squeeze", "bev_model.BEV.cam_map_refiner", "config.args", "bev_model.BEV.fv_conditioned_bv_estimation", "bev_model.BEV.direct_bv_estimation", "cam_maps_offset.unsqueeze().transpose().contiguous", "cam_maps_offset_bv.unsqueeze().contiguous", "bev_model.BEV.unsqueeze().transpose().squeeze", "bev_model.BEV.center_map_refiner", "bev_model.BEV.unsqueeze", "cam_maps_offset.unsqueeze().transpose", "cam_maps_offset_bv.unsqueeze", "bev_model.BEV.unsqueeze().transpose", "cam_maps_offset.unsqueeze", "bev_model.BEV.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.fv_conditioned_bv_estimation", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.direct_bv_estimation"], ["", "def", "coarse2fine_localization", "(", "self", ",", "x", ")", ":", "\n", "        ", "maps_fv", "=", "self", ".", "det_head", "(", "x", ")", "\n", "center_maps_fv", "=", "maps_fv", "[", ":", ",", ":", "self", ".", "output_cfg", "[", "'NUM_CENTER_MAP'", "]", "]", "\n", "# predict the small offset from each anchor at 128 map to meet the real 2D image map: map from 0~1 to 0~4 image coordinates", "\n", "cam_maps_offset", "=", "maps_fv", "[", ":", ",", "self", ".", "output_cfg", "[", "'NUM_CENTER_MAP'", "]", ":", "self", ".", "output_cfg", "[", "'NUM_CENTER_MAP'", "]", "+", "self", ".", "output_cfg", "[", "'NUM_CAM_MAP'", "]", "]", "\n", "if", "args", "(", ")", ".", "bv_with_fv_condition", ":", "\n", "            ", "center_maps_3d", ",", "cam_maps_offset_bv", "=", "self", ".", "fv_conditioned_bv_estimation", "(", "x", ",", "center_maps_fv", ",", "cam_maps_offset", ")", "\n", "", "else", ":", "\n", "            ", "center_maps_3d", ",", "cam_maps_offset_bv", "=", "self", ".", "direct_bv_estimation", "(", "x", ",", "center_maps_fv", ")", "\n", "\n", "", "center_maps_3d", "=", "self", ".", "center_map_refiner", "(", "center_maps_3d", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "# B x 3 x H x W -> B x 1 x H x W x 3  |  B x 3 x D x W -> B x D x 1 x W x 3", "\n", "# B x D x H x W x 3 + B x 1 x H x W x 3 + B x D x 1- x W x 3  .to(cam_maps_offset.device)", "\n", "cam_maps_3d", "=", "self", ".", "coordmap_3d", "+", "cam_maps_offset", ".", "unsqueeze", "(", "-", "1", ")", ".", "transpose", "(", "4", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# cam_maps_offset_bv adjust z-wise only", "\n", "cam_maps_3d", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "=", "cam_maps_3d", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "+", "cam_maps_offset_bv", ".", "unsqueeze", "(", "2", ")", ".", "contiguous", "(", ")", "\n", "cam_maps_3d", "=", "self", ".", "cam_map_refiner", "(", "cam_maps_3d", ".", "unsqueeze", "(", "1", ")", ".", "transpose", "(", "5", ",", "1", ")", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "\n", "return", "center_maps_3d", ",", "cam_maps_3d", ",", "center_maps_fv", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.parsing_trans3D": [[138, 149], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "bev_model.BEV._result_parser.centermap_parser.parse_3dcentermap_heatmap_adaptive_scale_batch", "len", "bev_model.BEV._result_parser.centermap_parser.parse_3dcentermap_heatmap_adaptive_scale_batch", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_3dcentermap_heatmap_adaptive_scale_batch", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_3dcentermap_heatmap_adaptive_scale_batch"], ["", "def", "parsing_trans3D", "(", "self", ",", "center_maps_3d", ",", "cam_maps_3d", ")", ":", "\n", "        ", "detection_flag", "=", "torch", ".", "Tensor", "(", "[", "False", "for", "_", "in", "range", "(", "len", "(", "center_maps_3d", ")", ")", "]", ")", ".", "cuda", "(", ")", "\n", "center_preds_info_3d", "=", "self", ".", "_result_parser", ".", "centermap_parser", ".", "parse_3dcentermap_heatmap_adaptive_scale_batch", "(", "center_maps_3d", ")", "\n", "pred_batch_ids", ",", "pred_czyxs", ",", "top_score", "=", "center_preds_info_3d", "\n", "detection_flag", "[", "pred_batch_ids", "]", "=", "True", "\n", "\n", "if", "len", "(", "pred_czyxs", ")", "==", "0", ":", "\n", "            ", "center_preds_info_3d", "=", "self", ".", "_result_parser", ".", "centermap_parser", ".", "parse_3dcentermap_heatmap_adaptive_scale_batch", "(", "center_maps_3d", ",", "top_n_people", "=", "1", ")", "\n", "pred_batch_ids", ",", "pred_czyxs", ",", "top_score", "=", "center_preds_info_3d", "\n", "\n", "", "return", "center_preds_info_3d", ",", "detection_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.mesh_parameter_regression": [[150, 156], ["utils.center_utils.denormalize_center", "bev_model.BEV.differentiable_person_feature_sampling", "bev_model.BEV.transformer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.cam_utils.convert_cam_params_to_centermap_coords", "cams_preds.clone"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.denormalize_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.differentiable_person_feature_sampling", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.convert_cam_params_to_centermap_coords", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone"], ["", "def", "mesh_parameter_regression", "(", "self", ",", "fv_f", ",", "cams_preds", ",", "pred_batch_ids", ")", ":", "\n", "        ", "cam_czyx", "=", "denormalize_center", "(", "convert_cam_params_to_centermap_coords", "(", "cams_preds", ".", "clone", "(", ")", ")", ",", "size", "=", "self", ".", "outmap_size", ")", "\n", "feature_sampled", "=", "self", ".", "differentiable_person_feature_sampling", "(", "fv_f", ",", "cam_czyx", ",", "pred_batch_ids", ")", "\n", "params_preds", "=", "self", ".", "transformer", "(", "feature_sampled", ")", "\n", "params_preds", "=", "torch", ".", "cat", "(", "[", "cams_preds", ",", "params_preds", "]", ",", "1", ")", "\n", "return", "params_preds", ",", "cam_czyx", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.head_forward": [[157, 175], ["bev_model.BEV.coarse2fine_localization", "bev_model.BEV.parsing_trans3D", "bev_model.BEV.param_head", "print", "bev_model.BEV.mesh_parameter_regression", "config.args", "params_preds.float", "cam_czyx.float", "center_maps_fv.float", "center_maps_3d.float().squeeze", "pred_batch_ids.float", "pred_czyxs.float", "top_score.float", "center_maps_3d.float"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.coarse2fine_localization", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.parsing_trans3D", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.mesh_parameter_regression", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "head_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "center_maps_3d", ",", "cam_maps_3d", ",", "center_maps_fv", "=", "self", ".", "coarse2fine_localization", "(", "x", ")", "\n", "\n", "center_preds_info_3d", ",", "detection_flag", "=", "self", ".", "parsing_trans3D", "(", "center_maps_3d", ",", "cam_maps_3d", ")", "\n", "pred_batch_ids", ",", "pred_czyxs", ",", "top_score", "=", "center_preds_info_3d", "\n", "if", "args", "(", ")", ".", "add_offsetmap", ":", "\n", "            ", "cams_preds", "=", "cam_maps_3d", "[", "pred_batch_ids", ",", ":", ",", "pred_czyxs", "[", ":", ",", "0", "]", ",", "pred_czyxs", "[", ":", ",", "1", "]", ",", "pred_czyxs", "[", ":", ",", "2", "]", "]", "\n", "", "else", ":", "\n", "            ", "cams_preds", "=", "self", ".", "coordmap_3d", "[", "0", ",", "pred_czyxs", "[", ":", ",", "0", "]", ",", "pred_czyxs", "[", ":", ",", "1", "]", ",", "pred_czyxs", "[", ":", ",", "2", "]", "]", "\n", "\n", "", "fv_f", "=", "self", ".", "param_head", "(", "x", ")", "\n", "assert", "fv_f", ".", "shape", "[", "2", "]", "==", "self", ".", "outmap_size", ",", "print", "(", "'feature map must match the size of output maps.'", ")", "\n", "\n", "params_preds", ",", "cam_czyx", "=", "self", ".", "mesh_parameter_regression", "(", "fv_f", ",", "cams_preds", ",", "pred_batch_ids", ")", "\n", "output", "=", "{", "'params_pred'", ":", "params_preds", ".", "float", "(", ")", ",", "'cam_czyx'", ":", "cam_czyx", ".", "float", "(", ")", ",", "\n", "'center_map'", ":", "center_maps_fv", ".", "float", "(", ")", ",", "'center_map_3d'", ":", "center_maps_3d", ".", "float", "(", ")", ".", "squeeze", "(", ")", ",", "'detection_flag'", ":", "detection_flag", ",", "'pred_batch_ids'", ":", "pred_batch_ids", ".", "float", "(", ")", ",", "'pred_czyxs'", ":", "pred_czyxs", ".", "float", "(", ")", ",", "'top_score'", ":", "top_score", ".", "float", "(", ")", "}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.direct_bv_estimation": [[176, 184], ["bev_model.BEV.bv_pre_layers", "bev_model.BEV.bv_out_layers", "bev_model.BEV.view", "center_maps_fv.repeat", "center_maps_bv.unsqueeze().repeat", "bev_model.BEV.size", "center_maps_bv.unsqueeze"], "methods", ["None"], ["", "def", "direct_bv_estimation", "(", "self", ",", "x", ",", "center_maps_fv", ")", ":", "\n", "        ", "img_feats", "=", "self", ".", "bv_pre_layers", "(", "x", ")", "\n", "outputs_bv", "=", "self", ".", "bv_out_layers", "(", "img_feats", ".", "view", "(", "img_feats", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "outmap_size", ")", ")", "\n", "center_maps_bv", "=", "outputs_bv", "[", ":", ",", ":", "self", ".", "bv_center_cfg", "[", "'NUM_DEPTH_LEVEL'", "]", "]", "\n", "cam_maps_offset_bv", "=", "outputs_bv", "[", ":", ",", "self", ".", "bv_center_cfg", "[", "'NUM_DEPTH_LEVEL'", "]", ":", "]", "\n", "center_map_3d", "=", "center_maps_fv", ".", "repeat", "(", "1", ",", "self", ".", "bv_center_cfg", "[", "'NUM_DEPTH_LEVEL'", "]", ",", "1", ",", "1", ")", "*", "center_maps_bv", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "outmap_size", ",", "1", ")", "\n", "return", "center_map_3d", ",", "cam_maps_offset_bv", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.fv_conditioned_bv_estimation": [[185, 195], ["bev_model.BEV.bv_pre_layers", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "bev_model.BEV.bv_out_layers", "bev_model.BEV.size", "center_maps_fv.repeat", "center_maps_bv.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "center_maps_bv.unsqueeze"], "methods", ["None"], ["", "def", "fv_conditioned_bv_estimation", "(", "self", ",", "x", ",", "center_maps_fv", ",", "cam_maps_offset", ")", ":", "\n", "        ", "img_feats", "=", "self", ".", "bv_pre_layers", "(", "x", ")", "\n", "summon_feats", "=", "torch", ".", "cat", "(", "[", "center_maps_fv", ",", "cam_maps_offset", ",", "img_feats", "]", ",", "1", ")", ".", "view", "(", "img_feats", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "outmap_size", ")", "\n", "\n", "outputs_bv", "=", "self", ".", "bv_out_layers", "(", "summon_feats", ")", "\n", "center_maps_bv", "=", "outputs_bv", "[", ":", ",", ":", "self", ".", "bv_center_cfg", "[", "'NUM_DEPTH_LEVEL'", "]", "]", "\n", "cam_maps_offset_bv", "=", "outputs_bv", "[", ":", ",", "self", ".", "bv_center_cfg", "[", "'NUM_DEPTH_LEVEL'", "]", ":", "]", "\n", "center_map_3d", "=", "center_maps_fv", ".", "repeat", "(", "1", ",", "self", ".", "bv_center_cfg", "[", "'NUM_DEPTH_LEVEL'", "]", ",", "1", ",", "1", ")", "*", "center_maps_bv", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "outmap_size", ",", "1", ")", "\n", "return", "center_map_3d", ",", "cam_maps_offset_bv", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.differentiable_person_feature_sampling": [[196, 206], ["bev_model.BEV.position_embeddings", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "differentiable_person_feature_sampling", "(", "self", ",", "feature", ",", "pred_czyxs", ",", "pred_batch_ids", ")", ":", "\n", "        ", "cz", ",", "cy", ",", "cx", "=", "pred_czyxs", "[", ":", ",", "0", "]", ",", "pred_czyxs", "[", ":", ",", "1", "]", ",", "pred_czyxs", "[", ":", ",", "2", "]", "\n", "position_encoding", "=", "self", ".", "position_embeddings", "(", "cz", ")", "\n", "feature_sampled", "=", "feature", "[", "pred_batch_ids", ",", ":", ",", "cy", ",", "cx", "]", "\n", "\n", "if", "args", "(", ")", ".", "add_depth_encoding", ":", "\n", "            ", "input_features", "=", "feature_sampled", "+", "position_encoding", "\n", "", "else", ":", "\n", "            ", "input_features", "=", "feature_sampled", "\n", "", "return", "input_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.acquire_maps": [[207, 224], ["bev_model.BEV.coarse2fine_localization", "bev_model.BEV.parsing_trans3D", "bev_model.BEV.param_head", "bev_model.BEV.mesh_parameter_regression", "params_preds.float", "cams_preds.float", "cam_czyx.float", "center_maps_fv.float", "x.float", "cam_maps_3d.float", "center_maps_3d.float().squeeze", "pred_batch_ids.float", "pred_czyxs.float", "top_score.float", "center_maps_3d.float"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.coarse2fine_localization", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.parsing_trans3D", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.mesh_parameter_regression"], ["", "def", "acquire_maps", "(", "self", ",", "x", ")", ":", "\n", "        ", "center_maps_3d", ",", "cam_maps_3d", ",", "center_maps_fv", "=", "self", ".", "coarse2fine_localization", "(", "x", ")", "\n", "\n", "center_preds_info_3d", ",", "detection_flag", "=", "self", ".", "parsing_trans3D", "(", "center_maps_3d", ",", "cam_maps_3d", ")", "\n", "pred_batch_ids", ",", "pred_czyxs", ",", "top_score", "=", "center_preds_info_3d", "\n", "\n", "cams_preds", "=", "cam_maps_3d", "[", "pred_batch_ids", ",", ":", ",", "pred_czyxs", "[", ":", ",", "0", "]", ",", "pred_czyxs", "[", ":", ",", "1", "]", ",", "pred_czyxs", "[", ":", ",", "2", "]", "]", "\n", "\n", "fv_f", "=", "self", ".", "param_head", "(", "x", ")", "\n", "params_preds", ",", "cam_czyx", "=", "self", ".", "mesh_parameter_regression", "(", "fv_f", ",", "cams_preds", ",", "pred_batch_ids", ")", "\n", "\n", "output", "=", "{", "'params_pred'", ":", "params_preds", ".", "float", "(", ")", ",", "'cams_preds'", ":", "cams_preds", ".", "float", "(", ")", ",", "'cam_czyx'", ":", "cam_czyx", ".", "float", "(", ")", ",", "'center_map'", ":", "center_maps_fv", ".", "float", "(", ")", ",", "'image_feature_maps'", ":", "x", ".", "float", "(", ")", ",", "'mesh_feature_map'", ":", "fv_f", ",", "'cam_maps_3d'", ":", "cam_maps_3d", ".", "float", "(", ")", ",", "'center_map_3d'", ":", "center_maps_3d", ".", "float", "(", ")", ".", "squeeze", "(", ")", ",", "'pred_batch_ids'", ":", "pred_batch_ids", ".", "float", "(", ")", ",", "'pred_czyxs'", ":", "pred_czyxs", ".", "float", "(", ")", ",", "'top_score'", ":", "top_score", ".", "float", "(", ")", ",", "}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.models.bev_model.BEV.mesh_regression_from_features": [[225, 233], ["bev_model.BEV.position_embeddings", "bev_model.BEV.transformer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "mesh_regression_from_features", "(", "self", ",", "feature_sampled", ",", "pred_czyxs", ",", "cams_preds", ")", ":", "\n", "        ", "cz", "=", "pred_czyxs", "[", ":", ",", "0", "]", "\n", "position_encoding", "=", "self", ".", "position_embeddings", "(", "cz", ")", "\n", "input_features", "=", "feature_sampled", "+", "position_encoding", "\n", "\n", "params_preds", "=", "self", ".", "transformer", "(", "input_features", ")", "\n", "params_preds", "=", "torch", ".", "cat", "(", "[", "cams_preds", ",", "params_preds", "]", ",", "1", ")", "\n", "return", "params_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_ds_utils.cmup_evaluation_act_wise": [[5, 15], ["actions.append", "action_results.append", "numpy.where", "[].split", "results[].mean", "numpy.array", "os.path.basename().split", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["def", "cmup_evaluation_act_wise", "(", "results", ",", "imgpaths", ",", "action_names", ")", ":", "\n", "    ", "actions", "=", "[", "]", "\n", "action_results", "=", "[", "]", "\n", "for", "imgpath", "in", "imgpaths", ":", "\n", "        ", "actions", ".", "append", "(", "os", ".", "path", ".", "basename", "(", "imgpath", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "\n", "", "for", "action_name", "in", "action_names", ":", "\n", "        ", "action_idx", "=", "np", ".", "where", "(", "np", ".", "array", "(", "actions", ")", "==", "action_name", ")", "[", "0", "]", "\n", "action_results", ".", "append", "(", "'{:.2f}'", ".", "format", "(", "results", "[", "action_idx", "]", ".", "mean", "(", ")", ")", ")", "\n", "", "return", "action_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_ds_utils.h36m_evaluation_act_wise": [[16, 26], ["actions.append", "action_results.append", "numpy.where", "[].split", "results[].mean", "numpy.array", "[].split", "os.path.basename().split", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "h36m_evaluation_act_wise", "(", "results", ",", "imgpaths", ",", "action_names", ")", ":", "\n", "    ", "actions", "=", "[", "]", "\n", "action_results", "=", "[", "]", "\n", "for", "imgpath", "in", "imgpaths", ":", "\n", "        ", "actions", ".", "append", "(", "os", ".", "path", ".", "basename", "(", "imgpath", ")", ".", "split", "(", "'.jpg'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "0", "]", ")", "\n", "\n", "", "for", "action_name", "in", "action_names", ":", "\n", "        ", "action_idx", "=", "np", ".", "where", "(", "np", ".", "array", "(", "actions", ")", "==", "action_name", ")", "[", "0", "]", "\n", "action_results", ".", "append", "(", "'{:.2f}'", ".", "format", "(", "results", "[", "action_idx", "]", ".", "mean", "(", ")", ")", ")", "\n", "", "return", "action_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_ds_utils.pp_evaluation_cam_wise": [[27, 37], ["cam_ids.append", "list", "list", "cam_results.append", "int", "range", "range", "numpy.where", "results[].mean", "os.path.basename().split", "numpy.array", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "pp_evaluation_cam_wise", "(", "results", ",", "imgpaths", ")", ":", "\n", "    ", "cam_ids", "=", "[", "]", "\n", "cam_results", "=", "[", "]", "\n", "for", "imgpath", "in", "imgpaths", ":", "\n", "        ", "cam_ids", ".", "append", "(", "int", "(", "os", ".", "path", ".", "basename", "(", "imgpath", ")", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", ")", "\n", "#22 is missing", "\n", "", "for", "camid", "in", "list", "(", "range", "(", "21", ")", ")", "+", "list", "(", "range", "(", "22", ",", "31", ")", ")", ":", "\n", "        ", "cam_idx", "=", "np", ".", "where", "(", "np", ".", "array", "(", "cam_ids", ")", "==", "camid", ")", "[", "0", "]", "\n", "cam_results", ".", "append", "(", "'{:.2f}'", ".", "format", "(", "results", "[", "cam_idx", "]", ".", "mean", "(", ")", ")", ")", "\n", "", "return", "cam_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_ds_utils.determ_worst_best": [[38, 55], ["numpy.concatenate().tolist", "numpy.concatenate().tolist", "zip", "len", "len", "torch.is_tensor", "np.concatenate().tolist.append", "np.concatenate().tolist.append", "np.concatenate().tolist.append", "np.concatenate().tolist.append", "numpy.concatenate", "numpy.concatenate", "numpy.argsort", "numpy.argsort", "error.cpu().numpy", "idx.cpu().numpy", "error.cpu", "idx.cpu"], "function", ["None"], ["", "def", "determ_worst_best", "(", "VIS_IDX", ",", "top_n", "=", "2", ")", ":", "\n", "    ", "sellected_ids", ",", "sellected_errors", "=", "[", "]", ",", "[", "]", "\n", "if", "VIS_IDX", "is", "not", "None", ":", "\n", "        ", "for", "ds_type", "in", "VIS_IDX", ":", "\n", "            ", "for", "error", ",", "idx", "in", "zip", "(", "VIS_IDX", "[", "ds_type", "]", "[", "'error'", "]", ",", "VIS_IDX", "[", "ds_type", "]", "[", "'idx'", "]", ")", ":", "\n", "                ", "if", "torch", ".", "is_tensor", "(", "error", ")", ":", "\n", "                    ", "error", ",", "idx", "=", "error", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "idx", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "worst_id", "=", "np", ".", "argsort", "(", "error", ")", "[", "-", "top_n", ":", "]", "\n", "sellected_ids", ".", "append", "(", "idx", "[", "worst_id", "]", ")", ";", "sellected_errors", ".", "append", "(", "error", "[", "worst_id", "]", ")", "\n", "best_id", "=", "np", ".", "argsort", "(", "error", ")", "[", ":", "top_n", "]", "\n", "sellected_ids", ".", "append", "(", "idx", "[", "best_id", "]", ")", ";", "sellected_errors", ".", "append", "(", "error", "[", "best_id", "]", ")", "\n", "", "", "", "if", "len", "(", "sellected_ids", ")", ">", "0", "and", "len", "(", "sellected_errors", ")", ">", "0", ":", "\n", "        ", "sellected_ids", "=", "np", ".", "concatenate", "(", "sellected_ids", ")", ".", "tolist", "(", ")", "\n", "sellected_errors", "=", "np", ".", "concatenate", "(", "sellected_errors", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "sellected_ids", ",", "sellected_errors", "=", "[", "0", "]", ",", "[", "0", "]", "\n", "", "return", "sellected_ids", ",", "sellected_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_ds_utils.reorganize_vis_info": [[56, 75], ["zip", "numpy.array", "org_imgpath_dict.items", "org_imgpath_dict[].append", "numpy.where", "vis_ids_new.append", "len", "vis_errors_new.append", "vis_errors_new.append", "errors.remove", "max", "max"], "function", ["None"], ["", "def", "reorganize_vis_info", "(", "vis_ids", ",", "vis_errors", ",", "org_imgpath", ",", "new_imgpath", ")", ":", "\n", "    ", "vis_ids_new", ",", "vis_errors_new", "=", "[", "]", ",", "[", "]", "\n", "org_imgpath_dict", "=", "{", "}", "\n", "for", "vis_id", ",", "vis_error", "in", "zip", "(", "vis_ids", ",", "vis_errors", ")", ":", "\n", "        ", "imgpath", "=", "org_imgpath", "[", "vis_id", "]", "\n", "if", "imgpath", "not", "in", "org_imgpath_dict", ":", "\n", "            ", "org_imgpath_dict", "[", "imgpath", "]", "=", "[", "]", "\n", "", "org_imgpath_dict", "[", "imgpath", "]", ".", "append", "(", "vis_error", ")", "\n", "\n", "", "new_imgpath", "=", "np", ".", "array", "(", "new_imgpath", ")", "\n", "for", "imgpath", ",", "errors", "in", "org_imgpath_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "new_idx", "in", "np", ".", "where", "(", "new_imgpath", "==", "imgpath", ")", "[", "0", "]", ":", "\n", "            ", "vis_ids_new", ".", "append", "(", "new_idx", ")", "\n", "if", "len", "(", "errors", ")", "==", "0", ":", "\n", "                ", "vis_errors_new", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "vis_errors_new", ".", "append", "(", "max", "(", "errors", ")", ")", "\n", "errors", ".", "remove", "(", "max", "(", "errors", ")", ")", "\n", "", "", "", "return", "vis_ids_new", ",", "vis_errors_new", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix._calc_matched_PCKh_": [[10, 28], ["torch.ones().float().cuda", "kp2d_mask.sum", "torch.norm", "enumerate", "zip", "torch.sqrt", "torch.ones().float", "v.sum", "correct_kp_mask.sum", "len", "torch.ones", "len", "real_valid[].max", "real_valid[].min", "real_valid[].max", "real_valid[].min"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["def", "_calc_matched_PCKh_", "(", "real", ",", "pred", ",", "kp2d_mask", ",", "error_thresh", "=", "0.143", ")", ":", "\n", "# error_thresh is set as the ratio between the head and the body.", "\n", "# he head / body for normal people are between 6~8, therefore, we set it to 1/7=0.143", "\n", "    ", "PCKs", "=", "torch", ".", "ones", "(", "len", "(", "kp2d_mask", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "*", "-", "1.", "\n", "if", "kp2d_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "        ", "vis", "=", "(", "real", ">", "-", "1.", ")", ".", "sum", "(", "-", "1", ")", "==", "real", ".", "shape", "[", "-", "1", "]", "\n", "error", "=", "torch", ".", "norm", "(", "real", "-", "pred", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "for", "ind", ",", "(", "e", ",", "v", ")", "in", "enumerate", "(", "zip", "(", "error", ",", "vis", ")", ")", ":", "\n", "            ", "if", "v", ".", "sum", "(", ")", "<", "2", ":", "\n", "                ", "continue", "\n", "", "real_valid", "=", "real", "[", "ind", ",", "v", "]", "\n", "person_scales", "=", "torch", ".", "sqrt", "(", "(", "real_valid", "[", ":", ",", "0", "]", ".", "max", "(", "-", "1", ")", ".", "values", "-", "real_valid", "[", ":", ",", "0", "]", ".", "min", "(", "-", "1", ")", ".", "values", ")", "**", "2", "+", "(", "real_valid", "[", ":", ",", "1", "]", ".", "max", "(", "-", "1", ")", ".", "values", "-", "real_valid", "[", ":", ",", "1", "]", ".", "min", "(", "-", "1", ")", ".", "values", ")", "**", "2", ")", "\n", "error_valid", "=", "e", "[", "v", "]", "\n", "correct_kp_mask", "=", "(", "(", "error_valid", "/", "person_scales", ")", "<", "error_thresh", ")", ".", "float", "(", ")", "\n", "PCKs", "[", "ind", "]", "=", "correct_kp_mask", ".", "sum", "(", ")", "/", "len", "(", "correct_kp_mask", ")", "\n", "", "", "return", "PCKs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix._calc_relative_age_error_weak_": [[29, 40], ["valid_mask.sum", "enumerate", "[].long", "error_dict.update", "age_gts[].long"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update"], ["", "def", "_calc_relative_age_error_weak_", "(", "age_preds", ",", "age_gts", ",", "matched_mask", "=", "None", ")", ":", "\n", "    ", "valid_mask", "=", "age_gts", "!=", "-", "1", "\n", "if", "matched_mask", "is", "not", "None", ":", "\n", "        ", "valid_mask", "*=", "matched_mask", "\n", "", "error_dict", "=", "{", "age_name", ":", "[", "]", "for", "age_name", "in", "constants", ".", "relative_age_types", "}", "\n", "if", "valid_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "        ", "for", "age_id", ",", "age_name", "in", "enumerate", "(", "constants", ".", "relative_age_types", ")", ":", "\n", "            ", "age_gt", "=", "age_gts", "[", "valid_mask", "]", ".", "long", "(", ")", "==", "age_id", "\n", "age_pred", "=", "age_preds", "[", "valid_mask", "]", "[", "age_gt", "]", ".", "long", "(", ")", "# == age_id  ", "\n", "error_dict", ".", "update", "(", "{", "age_name", ":", "[", "age_pred", "]", "}", ")", "\n", "", "", "return", "error_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix._calc_absolute_depth_error": [[41, 44], ["numpy.sqrt"], "function", ["None"], ["", "def", "_calc_absolute_depth_error", "(", "trans_preds", ",", "trans_gt", ")", ":", "\n", "    ", "trans_error", "=", "np", ".", "sqrt", "(", "(", "(", "trans_gt", "-", "trans_preds", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ")", "\n", "return", "trans_error", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix._calc_relative_depth_error_weak_": [[45, 76], ["depth_ids.to.to", "torch.unique", "sample_inds.sum", "torch.triu().bool", "error_dict[].append", "error_dict[].append", "error_dict[].append", "error_dict[].append", "error_dict[].append", "error_dict[].append", "torch.triu", "pred_depths_sample.unsqueeze().repeat", "pred_depths_sample.unsqueeze().repeat", "depth_ids[].unsqueeze().repeat", "depth_ids[].unsqueeze().repeat", "torch.cat", "torch.ones", "pred_depths_sample.unsqueeze", "pred_depths_sample.unsqueeze", "depth_ids[].unsqueeze", "depth_ids[].unsqueeze", "age_sample.unsqueeze().repeat().unsqueeze", "age_sample.unsqueeze().repeat().unsqueeze", "age_sample.unsqueeze().repeat", "age_sample.unsqueeze().repeat", "age_sample.unsqueeze", "age_sample.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "_calc_relative_depth_error_weak_", "(", "pred_depths", ",", "depth_ids", ",", "reorganize_idx", ",", "age_gts", "=", "None", ",", "thresh", "=", "0.2", ",", "matched_mask", "=", "None", ")", ":", "\n", "    ", "depth_ids", "=", "depth_ids", ".", "to", "(", "pred_depths", ".", "device", ")", "\n", "depth_ids_vmask", "=", "depth_ids", "!=", "-", "1", "\n", "pred_depths_valid", "=", "pred_depths", "[", "depth_ids_vmask", "]", "\n", "valid_inds", "=", "reorganize_idx", "[", "depth_ids_vmask", "]", "\n", "depth_ids", "=", "depth_ids", "[", "depth_ids_vmask", "]", "\n", "age_gts", "=", "age_gts", "[", "depth_ids_vmask", "]", "\n", "error_dict", "=", "{", "'eq'", ":", "[", "]", ",", "'cd'", ":", "[", "]", ",", "'fd'", ":", "[", "]", ",", "'eq_age'", ":", "[", "]", ",", "'cd_age'", ":", "[", "]", ",", "'fd_age'", ":", "[", "]", "}", "\n", "error_each_age", "=", "{", "age_type", ":", "[", "]", "for", "age_type", "in", "constants", ".", "relative_age_types", "}", "\n", "for", "b_ind", "in", "torch", ".", "unique", "(", "valid_inds", ")", ":", "\n", "        ", "sample_inds", "=", "valid_inds", "==", "b_ind", "\n", "if", "matched_mask", "is", "not", "None", ":", "\n", "            ", "sample_inds", "*=", "matched_mask", "[", "depth_ids_vmask", "]", "\n", "", "did_num", "=", "sample_inds", ".", "sum", "(", ")", "\n", "if", "did_num", ">", "1", ":", "\n", "            ", "pred_depths_sample", "=", "pred_depths_valid", "[", "sample_inds", "]", "\n", "triu_mask", "=", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "did_num", ",", "did_num", ")", ",", "diagonal", "=", "1", ")", ".", "bool", "(", ")", "\n", "dist_mat", "=", "(", "pred_depths_sample", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "did_num", ",", "1", ")", "-", "pred_depths_sample", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "did_num", ")", ")", "[", "triu_mask", "]", "\n", "did_mat", "=", "(", "depth_ids", "[", "sample_inds", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "did_num", ",", "1", ")", "-", "depth_ids", "[", "sample_inds", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "did_num", ")", ")", "[", "triu_mask", "]", "\n", "\n", "error_dict", "[", "'eq'", "]", ".", "append", "(", "dist_mat", "[", "did_mat", "==", "0", "]", ")", "\n", "error_dict", "[", "'cd'", "]", ".", "append", "(", "dist_mat", "[", "did_mat", "<", "0", "]", ")", "\n", "error_dict", "[", "'fd'", "]", ".", "append", "(", "dist_mat", "[", "did_mat", ">", "0", "]", ")", "\n", "if", "age_gts", "is", "not", "None", ":", "\n", "                ", "age_sample", "=", "age_gts", "[", "sample_inds", "]", "\n", "age_mat", "=", "torch", ".", "cat", "(", "[", "age_sample", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "did_num", ",", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "age_sample", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "did_num", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "-", "1", ")", "[", "triu_mask", "]", "\n", "error_dict", "[", "'eq_age'", "]", ".", "append", "(", "age_mat", "[", "did_mat", "==", "0", "]", ")", "\n", "error_dict", "[", "'cd_age'", "]", ".", "append", "(", "age_mat", "[", "did_mat", "<", "0", "]", ")", "\n", "error_dict", "[", "'fd_age'", "]", ".", "append", "(", "age_mat", "[", "did_mat", ">", "0", "]", ")", "\n", "\n", "", "", "", "return", "error_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix._calc_relative_depth_error_withgts_": [[78, 103], ["depth_gts.to.to", "torch.unique", "sample_inds.sum", "torch.triu().bool", "error_dict[].append", "error_dict[].append", "error_dict[].append", "error_dict[].append", "error_dict[].append", "error_dict[].append", "torch.triu", "pred_depths_sample.unsqueeze().repeat", "pred_depths_sample.unsqueeze().repeat", "depth_gts[].unsqueeze().repeat", "depth_gts[].unsqueeze().repeat", "torch.cat", "torch.ones", "pred_depths_sample.unsqueeze", "pred_depths_sample.unsqueeze", "depth_gts[].unsqueeze", "depth_gts[].unsqueeze", "torch.abs", "age_sample.unsqueeze().repeat().unsqueeze", "age_sample.unsqueeze().repeat().unsqueeze", "torch.abs", "age_sample.unsqueeze().repeat", "age_sample.unsqueeze().repeat", "age_sample.unsqueeze", "age_sample.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "_calc_relative_depth_error_withgts_", "(", "pred_depths", ",", "depth_gts", ",", "reorganize_idx", ",", "age_gts", "=", "None", ",", "thresh", "=", "0.3", ",", "matched_mask", "=", "None", ")", ":", "\n", "    ", "depth_gts", "=", "depth_gts", ".", "to", "(", "pred_depths", ".", "device", ")", "\n", "error_dict", "=", "{", "'eq'", ":", "[", "]", ",", "'cd'", ":", "[", "]", ",", "'fd'", ":", "[", "]", ",", "'eq_age'", ":", "[", "]", ",", "'cd_age'", ":", "[", "]", ",", "'fd_age'", ":", "[", "]", "}", "\n", "for", "b_ind", "in", "torch", ".", "unique", "(", "reorganize_idx", ")", ":", "\n", "        ", "sample_inds", "=", "reorganize_idx", "==", "b_ind", "\n", "if", "matched_mask", "is", "not", "None", ":", "\n", "            ", "sample_inds", "*=", "matched_mask", "\n", "", "did_num", "=", "sample_inds", ".", "sum", "(", ")", "\n", "if", "did_num", ">", "1", ":", "\n", "            ", "pred_depths_sample", "=", "pred_depths", "[", "sample_inds", "]", "\n", "triu_mask", "=", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "did_num", ",", "did_num", ")", ",", "diagonal", "=", "1", ")", ".", "bool", "(", ")", "\n", "dist_mat", "=", "(", "pred_depths_sample", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "did_num", ",", "1", ")", "-", "pred_depths_sample", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "did_num", ")", ")", "[", "triu_mask", "]", "\n", "dist_mat_gt", "=", "(", "depth_gts", "[", "sample_inds", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "did_num", ",", "1", ")", "-", "depth_gts", "[", "sample_inds", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "did_num", ")", ")", "[", "triu_mask", "]", "\n", "\n", "error_dict", "[", "'eq'", "]", ".", "append", "(", "dist_mat", "[", "torch", ".", "abs", "(", "dist_mat_gt", ")", "<", "thresh", "]", ")", "\n", "error_dict", "[", "'cd'", "]", ".", "append", "(", "dist_mat", "[", "dist_mat_gt", "<", "-", "thresh", "]", ")", "\n", "error_dict", "[", "'fd'", "]", ".", "append", "(", "dist_mat", "[", "dist_mat_gt", ">", "thresh", "]", ")", "\n", "if", "age_gts", "is", "not", "None", ":", "\n", "                ", "age_sample", "=", "age_gts", "[", "sample_inds", "]", "\n", "age_mat", "=", "torch", ".", "cat", "(", "[", "age_sample", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "did_num", ",", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "age_sample", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "did_num", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "-", "1", ")", "[", "triu_mask", "]", "\n", "error_dict", "[", "'eq_age'", "]", ".", "append", "(", "age_mat", "[", "torch", ".", "abs", "(", "dist_mat_gt", ")", "<", "thresh", "]", ")", "\n", "error_dict", "[", "'cd_age'", "]", ".", "append", "(", "age_mat", "[", "dist_mat_gt", "<", "-", "thresh", "]", ")", "\n", "error_dict", "[", "'fd_age'", "]", ".", "append", "(", "age_mat", "[", "dist_mat_gt", ">", "thresh", "]", ")", "\n", "\n", "", "", "", "return", "error_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_error_verts": [[105, 123], ["numpy.sqrt", "numpy.mean", "evaluation_matrix.get_verts", "evaluation_matrix.get_verts", "len", "len", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.get_verts", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.get_verts", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "compute_error_verts", "(", "pred_theta", "=", "None", ",", "target_theta", "=", "None", ",", "target_verts", "=", "None", ",", "pred_verts", "=", "None", ",", "smpl_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    brought from https://github.com/mkocabas/VIBE/blob/master/lib/utils/eval_utils.py\n    Computes MPJPE over 6890 surface vertices.\n    Args:\n        verts_gt (Nx6890x3).\n        verts_pred (Nx6890x3).\n    Returns:\n        error_verts (N).\n    \"\"\"", "\n", "if", "target_verts", "is", "None", ":", "\n", "        ", "target_verts", "=", "get_verts", "(", "target_theta", ",", "smpl_path", ")", "#os.path.join(config.model_dir,'smpl_models','smpl')", "\n", "", "if", "pred_verts", "is", "None", ":", "\n", "        ", "pred_verts", "=", "get_verts", "(", "pred_theta", ",", "smpl_path", ")", "\n", "\n", "", "assert", "len", "(", "pred_verts", ")", "==", "len", "(", "target_verts", ")", "\n", "error_per_vert", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "target_verts", "-", "pred_verts", ")", "**", "2", ",", "axis", "=", "2", ")", ")", "\n", "return", "np", ".", "mean", "(", "error_per_vert", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.get_verts": [[124, 141], ["smplx.SMPL().to", "torch.split", "torch.split", "zip", "numpy.concatenate", "SMPL().to.", "np.concatenate.append", "smplx.SMPL", "smpl.vertices.detach().cpu().numpy", "smpl.vertices.detach().cpu", "smpl.vertices.detach"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "get_verts", "(", "theta", ",", "smpl_path", ")", ":", "\n", "    ", "device", "=", "'cpu'", "\n", "smpl", "=", "SMPL", "(", "smpl_path", ",", "batch_size", "=", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "pose", ",", "betas", "=", "theta", "[", ":", ",", ":", "72", "]", ",", "theta", "[", ":", ",", "72", ":", "]", "\n", "\n", "verts", "=", "[", "]", "\n", "b_", "=", "torch", ".", "split", "(", "betas", ",", "5000", ")", "\n", "p_", "=", "torch", ".", "split", "(", "pose", ",", "5000", ")", "\n", "\n", "for", "b", ",", "p", "in", "zip", "(", "b_", ",", "p_", ")", ":", "\n", "        ", "output", "=", "smpl", "(", "betas", "=", "b", ",", "body_pose", "=", "p", "[", ":", ",", "3", ":", "]", ",", "global_orient", "=", "p", "[", ":", ",", ":", "3", "]", ",", "pose2rot", "=", "True", ")", "\n", "verts", ".", "append", "(", "output", ".", "vertices", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "verts", "=", "np", ".", "concatenate", "(", "verts", ",", "axis", "=", "0", ")", "\n", "del", "smpl", "\n", "return", "verts", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_similarity_transform": [[142, 191], ["S1.mean", "S2.mean", "numpy.sum", "X1.dot", "numpy.linalg.svd", "numpy.eye", "numpy.sign", "V.dot", "numpy.linalg.det", "np.eye.dot", "numpy.trace", "U.dot", "V.dot.dot", "V.dot.dot", "V.dot.dot"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "compute_similarity_transform", "(", "S1", ",", "S2", ")", ":", "\n", "    ", "'''\n    Computes a similarity transform (sR, t) that takes\n    a set of 3D points S1 (3 x N) closest to a set of 3D points S2,\n    where R is an 3x3 rotation matrix, t 3x1 translation, s scale.\n    i.e. solves the orthogonal Procrutes problem.\n    '''", "\n", "transposed", "=", "False", "\n", "if", "S1", ".", "shape", "[", "0", "]", "!=", "3", "and", "S1", ".", "shape", "[", "0", "]", "!=", "2", ":", "\n", "        ", "S1", "=", "S1", ".", "T", "\n", "S2", "=", "S2", ".", "T", "\n", "transposed", "=", "True", "\n", "", "assert", "(", "S2", ".", "shape", "[", "1", "]", "==", "S1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# 1. Remove mean.", "\n", "mu1", "=", "S1", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "mu2", "=", "S2", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "X1", "=", "S1", "-", "mu1", "\n", "X2", "=", "S2", "-", "mu2", "\n", "\n", "# 2. Compute variance of X1 used for scale.", "\n", "var1", "=", "np", ".", "sum", "(", "X1", "**", "2", ")", "\n", "\n", "# 3. The outer product of X1 and X2.", "\n", "K", "=", "X1", ".", "dot", "(", "X2", ".", "T", ")", "\n", "\n", "# 4. Solution that Maximizes trace(R'K) is R=U*V', where U, V are", "\n", "# singular vectors of K.", "\n", "U", ",", "s", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "K", ")", "\n", "V", "=", "Vh", ".", "T", "\n", "# Construct Z that fixes the orientation of R to get det(R)=1.", "\n", "Z", "=", "np", ".", "eye", "(", "U", ".", "shape", "[", "0", "]", ")", "\n", "Z", "[", "-", "1", ",", "-", "1", "]", "*=", "np", ".", "sign", "(", "np", ".", "linalg", ".", "det", "(", "U", ".", "dot", "(", "V", ".", "T", ")", ")", ")", "\n", "# Construct R.", "\n", "R", "=", "V", ".", "dot", "(", "Z", ".", "dot", "(", "U", ".", "T", ")", ")", "\n", "\n", "# 5. Recover scale.", "\n", "scale", "=", "np", ".", "trace", "(", "R", ".", "dot", "(", "K", ")", ")", "/", "var1", "\n", "\n", "# 6. Recover translation.", "\n", "t", "=", "mu2", "-", "scale", "*", "(", "R", ".", "dot", "(", "mu1", ")", ")", "\n", "\n", "# 7. Error:", "\n", "S1_hat", "=", "scale", "*", "R", ".", "dot", "(", "S1", ")", "+", "t", "\n", "\n", "if", "transposed", ":", "\n", "        ", "S1_hat", "=", "S1_hat", ".", "T", "\n", "\n", "", "return", "S1_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_similarity_transform_torch": [[193, 250], ["S1.mean", "S2.mean", "torch.sum", "X1.mm", "torch.svd", "torch.eye", "torch.sign", "V.mm", "S1.float", "S2.float", "torch.det", "torch.eye.mm", "torch.trace", "V.mm.mm", "V.mm.mm", "V.mm.mm"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "compute_similarity_transform_torch", "(", "S1", ",", "S2", ")", ":", "\n", "    ", "'''\n    Computes a similarity transform (sR, t) that takes\n    a set of 3D points S1 (3 x N) closest to a set of 3D points S2,\n    where R is an 3x3 rotation matrix, t 3x1 translation, s scale.\n    i.e. solves the orthogonal Procrutes problem.\n    '''", "\n", "S1", ",", "S2", "=", "S1", ".", "float", "(", ")", ",", "S2", ".", "float", "(", ")", "\n", "transposed", "=", "False", "\n", "if", "S1", ".", "shape", "[", "0", "]", "!=", "3", "and", "S1", ".", "shape", "[", "0", "]", "!=", "2", ":", "\n", "        ", "S1", "=", "S1", ".", "T", "\n", "S2", "=", "S2", ".", "T", "\n", "transposed", "=", "True", "\n", "", "assert", "(", "S2", ".", "shape", "[", "1", "]", "==", "S1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# 1. Remove mean.", "\n", "mu1", "=", "S1", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "mu2", "=", "S2", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "X1", "=", "S1", "-", "mu1", "\n", "X2", "=", "S2", "-", "mu2", "\n", "\n", "# print('X1', X1.shape)", "\n", "\n", "# 2. Compute variance of X1 used for scale.", "\n", "var1", "=", "torch", ".", "sum", "(", "X1", "**", "2", ")", "\n", "\n", "# print('var', var1.shape)", "\n", "\n", "# 3. The outer product of X1 and X2.", "\n", "K", "=", "X1", ".", "mm", "(", "X2", ".", "T", ")", "\n", "\n", "# 4. Solution that Maximizes trace(R'K) is R=U*V', where U, V are", "\n", "# singular vectors of K.", "\n", "U", ",", "s", ",", "V", "=", "torch", ".", "svd", "(", "K", ")", "\n", "# V = Vh.T", "\n", "# Construct Z that fixes the orientation of R to get det(R)=1.", "\n", "Z", "=", "torch", ".", "eye", "(", "U", ".", "shape", "[", "0", "]", ",", "device", "=", "S1", ".", "device", ")", "\n", "Z", "[", "-", "1", ",", "-", "1", "]", "*=", "torch", ".", "sign", "(", "torch", ".", "det", "(", "U", "@", "V", ".", "T", ")", ")", "\n", "# Construct R.", "\n", "R", "=", "V", ".", "mm", "(", "Z", ".", "mm", "(", "U", ".", "T", ")", ")", "\n", "\n", "# print('R', X1.shape)", "\n", "\n", "# 5. Recover scale.", "\n", "scale", "=", "torch", ".", "trace", "(", "R", ".", "mm", "(", "K", ")", ")", "/", "var1", "\n", "# print(R.shape, mu1.shape)", "\n", "# 6. Recover translation.", "\n", "t", "=", "mu2", "-", "scale", "*", "(", "R", ".", "mm", "(", "mu1", ")", ")", "\n", "# print(t.shape)", "\n", "\n", "# 7. Error:", "\n", "S1_hat", "=", "scale", "*", "R", ".", "mm", "(", "S1", ")", "+", "t", "\n", "\n", "if", "transposed", ":", "\n", "        ", "S1_hat", "=", "S1_hat", ".", "T", "\n", "\n", "", "return", "S1_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.batch_compute_similarity_transform_torch": [[252, 304], ["S1.permute.mean", "S2.permute.mean", "torch.sum().sum", "X1.bmm", "torch.svd", "torch.eye().unsqueeze", "Z.repeat.repeat", "torch.sign", "V.bmm", "S1.permute.permute", "S2.permute.permute", "X2.permute", "torch.det", "Z.repeat.bmm", "torch.cat", "S1_hat.permute.permute", "torch.sum", "torch.eye", "U.bmm", "U.permute", "scale.unsqueeze().unsqueeze", "V.bmm.bmm", "scale.unsqueeze().unsqueeze", "V.bmm.bmm", "V.permute", "torch.trace().unsqueeze", "V.bmm.bmm", "scale.unsqueeze", "scale.unsqueeze", "torch.trace"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "batch_compute_similarity_transform_torch", "(", "S1", ",", "S2", ")", ":", "\n", "    ", "'''\n    Computes a similarity transform (sR, t) that takes\n    a set of 3D points S1 (3 x N) closest to a set of 3D points S2,\n    where R is an 3x3 rotation matrix, t 3x1 translation, s scale.\n    i.e. solves the orthogonal Procrutes problem.\n    '''", "\n", "transposed", "=", "False", "\n", "if", "S1", ".", "shape", "[", "0", "]", "!=", "3", "and", "S1", ".", "shape", "[", "0", "]", "!=", "2", ":", "\n", "        ", "S1", "=", "S1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "S2", "=", "S2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "transposed", "=", "True", "\n", "", "assert", "(", "S2", ".", "shape", "[", "1", "]", "==", "S1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# 1. Remove mean.", "\n", "mu1", "=", "S1", ".", "mean", "(", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "mu2", "=", "S2", ".", "mean", "(", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "X1", "=", "S1", "-", "mu1", "\n", "X2", "=", "S2", "-", "mu2", "\n", "\n", "# 2. Compute variance of X1 used for scale.", "\n", "var1", "=", "torch", ".", "sum", "(", "X1", "**", "2", ",", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "# 3. The outer product of X1 and X2.", "\n", "K", "=", "X1", ".", "bmm", "(", "X2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "# 4. Solution that Maximizes trace(R'K) is R=U*V', where U, V are", "\n", "# singular vectors of K.", "\n", "U", ",", "s", ",", "V", "=", "torch", ".", "svd", "(", "K", ")", "\n", "\n", "# Construct Z that fixes the orientation of R to get det(R)=1.", "\n", "Z", "=", "torch", ".", "eye", "(", "U", ".", "shape", "[", "1", "]", ",", "device", "=", "S1", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "Z", "=", "Z", ".", "repeat", "(", "U", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "Z", "[", ":", ",", "-", "1", ",", "-", "1", "]", "*=", "torch", ".", "sign", "(", "torch", ".", "det", "(", "U", ".", "bmm", "(", "V", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ")", ")", "\n", "\n", "# Construct R.", "\n", "R", "=", "V", ".", "bmm", "(", "Z", ".", "bmm", "(", "U", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ")", "\n", "\n", "# 5. Recover scale.", "\n", "scale", "=", "torch", ".", "cat", "(", "[", "torch", ".", "trace", "(", "x", ")", ".", "unsqueeze", "(", "0", ")", "for", "x", "in", "R", ".", "bmm", "(", "K", ")", "]", ")", "/", "var1", "\n", "\n", "# 6. Recover translation.", "\n", "t", "=", "mu2", "-", "(", "scale", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "(", "R", ".", "bmm", "(", "mu1", ")", ")", ")", "\n", "\n", "# 7. Error:", "\n", "S1_hat", "=", "scale", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "R", ".", "bmm", "(", "S1", ")", "+", "t", "\n", "\n", "if", "transposed", ":", "\n", "        ", "S1_hat", "=", "S1_hat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "return", "S1_hat", ",", "(", "scale", ",", "R", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_mpjpe": [[306, 323], ["print", "torch.norm", "torch.norm.mean", "valid_mask.float().sum", "valid_mask.float", "valid_mask.float"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "compute_mpjpe", "(", "predicted", ",", "target", ",", "valid_mask", "=", "None", ",", "pck_joints", "=", "None", ",", "sample_wise", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint position error (i.e. mean Euclidean distance),\n    often referred to as \"Protocol #1\" in many papers.\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", ",", "print", "(", "predicted", ".", "shape", ",", "target", ".", "shape", ")", "\n", "mpjpe", "=", "torch", ".", "norm", "(", "predicted", "-", "target", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "pck_joints", "is", "None", ":", "\n", "        ", "if", "sample_wise", ":", "\n", "            ", "mpjpe_batch", "=", "(", "mpjpe", "*", "valid_mask", ".", "float", "(", ")", ")", ".", "sum", "(", "-", "1", ")", "/", "valid_mask", ".", "float", "(", ")", ".", "sum", "(", "-", "1", ")", "if", "valid_mask", "is", "not", "None", "else", "mpjpe", ".", "mean", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "mpjpe_batch", "=", "mpjpe", "[", "valid_mask", "]", "if", "valid_mask", "is", "not", "None", "else", "mpjpe", "\n", "", "return", "mpjpe_batch", "\n", "", "else", ":", "\n", "        ", "mpjpe_pck_batch", "=", "mpjpe", "[", ":", ",", "pck_joints", "]", "\n", "return", "mpjpe_pck_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.p_mpjpe": [[327, 375], ["numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.matmul().astype().astype", "numpy.linalg.svd", "Vt.transpose", "numpy.matmul", "numpy.sign", "np.sign.flatten", "numpy.matmul", "numpy.expand_dims", "numpy.mean", "numpy.sum", "numpy.sum", "U.transpose", "numpy.expand_dims", "U.transpose", "numpy.sum", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.matmul().astype", "numpy.linalg.det", "numpy.matmul", "numpy.matmul", "numpy.matmul", "len", "len", "X0.transpose"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "", "def", "p_mpjpe", "(", "predicted", ",", "target", ",", "with_sRt", "=", "False", ",", "full_torch", "=", "False", ",", "with_aligned", "=", "False", ",", "each_separate", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Pose error: MPJPE after rigid alignment (scale, rotation, and translation),\n    often referred to as \"Protocol #2\" in many papers.\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "muX", "=", "np", ".", "mean", "(", "target", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "muY", "=", "np", ".", "mean", "(", "predicted", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "X0", "=", "target", "-", "muX", "\n", "Y0", "=", "predicted", "-", "muY", "\n", "\n", "normX", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "X0", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "\n", "normY", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "Y0", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "\n", "\n", "X0", "/=", "(", "normX", "+", "1e-6", ")", "\n", "Y0", "/=", "(", "normY", "+", "1e-6", ")", "\n", "\n", "\n", "H", "=", "np", ".", "matmul", "(", "X0", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ",", "Y0", ")", ".", "astype", "(", "np", ".", "float16", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "U", ",", "s", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "H", ")", "\n", "V", "=", "Vt", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", "\n", "R", "=", "np", ".", "matmul", "(", "V", ",", "U", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "# Avoid improper rotations (reflections), i.e. rotations with det(R) = -1", "\n", "sign_detR", "=", "np", ".", "sign", "(", "np", ".", "expand_dims", "(", "np", ".", "linalg", ".", "det", "(", "R", ")", ",", "axis", "=", "1", ")", ")", "\n", "V", "[", ":", ",", ":", ",", "-", "1", "]", "*=", "sign_detR", "\n", "s", "[", ":", ",", "-", "1", "]", "*=", "sign_detR", ".", "flatten", "(", ")", "\n", "R", "=", "np", ".", "matmul", "(", "V", ",", "U", ".", "transpose", "(", "0", ",", "2", ",", "1", ")", ")", "# Rotation", "\n", "\n", "tr", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "s", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ",", "axis", "=", "2", ")", "\n", "\n", "a", "=", "tr", "*", "normX", "/", "normY", "# Scale", "\n", "t", "=", "muX", "-", "a", "*", "np", ".", "matmul", "(", "muY", ",", "R", ")", "# Translation", "\n", "\n", "# Perform rigid transformation on the input", "\n", "predicted_aligned", "=", "a", "*", "np", ".", "matmul", "(", "predicted", ",", "R", ")", "+", "t", "\n", "if", "each_separate", ":", "\n", "        ", "return", "np", ".", "linalg", ".", "norm", "(", "predicted_aligned", "-", "target", ",", "axis", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", "\n", "\n", "", "error", "=", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "predicted_aligned", "-", "target", ",", "axis", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "if", "with_sRt", "and", "not", "with_aligned", ":", "\n", "        ", "return", "error", ",", "(", "a", ",", "R", ",", "t", ")", "\n", "", "if", "with_aligned", ":", "\n", "        ", "return", "error", ",", "(", "a", ",", "R", ",", "t", ")", ",", "predicted_aligned", "\n", "# Return MPJPE", "\n", "", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_errors": [[376, 400], ["enumerate", "zip", "align_by_pelvis.reshape", "align_by_pelvis", "align_by_pelvis", "numpy.sqrt", "errors.append", "evaluation_matrix.compute_similarity_transform", "numpy.sqrt", "errors_pa.append", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.compute_similarity_transform", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "compute_errors", "(", "gt3ds", ",", "preds", ")", ":", "\n", "    ", "\"\"\"\n    Gets MPJPE after pelvis alignment + MPJPE after Procrustes.\n    Evaluates on the 14 common joints.\n    Inputs:\n      - gt3ds: N x 14 x 3\n      - preds: N x 14 x 3\n    \"\"\"", "\n", "errors", ",", "errors_pa", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "gt3d", ",", "pred", ")", "in", "enumerate", "(", "zip", "(", "gt3ds", ",", "preds", ")", ")", ":", "\n", "        ", "gt3d", "=", "gt3d", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "# Root align.", "\n", "gt3d", "=", "align_by_pelvis", "(", "gt3d", ")", "\n", "pred3d", "=", "align_by_pelvis", "(", "pred", ")", "\n", "\n", "joint_error", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "gt3d", "-", "pred3d", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "errors", ".", "append", "(", "np", ".", "mean", "(", "joint_error", ")", ")", "\n", "\n", "# Get PA error.", "\n", "pred3d_sym", "=", "compute_similarity_transform", "(", "pred3d", ",", "gt3d", ")", "\n", "pa_error", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "gt3d", "-", "pred3d_sym", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "errors_pa", ".", "append", "(", "np", ".", "mean", "(", "pa_error", ")", ")", "\n", "\n", "", "return", "errors", ",", "errors_pa", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.n_mpjpe": [[401, 412], ["torch.mean", "torch.mean", "mpjpe", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "n_mpjpe", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Normalized MPJPE (scale only), adapted from:\n    https://github.com/hrhodin/UnsupervisedGeometryAwareRepresentationLearning/blob/master/losses/poses.py\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "norm_predicted", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "predicted", "**", "2", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "norm_target", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "target", "*", "predicted", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "scale", "=", "norm_target", "/", "norm_predicted", "\n", "return", "mpjpe", "(", "scale", "*", "predicted", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.mean_velocity_error": [[413, 423], ["numpy.diff", "numpy.diff", "numpy.mean", "numpy.linalg.norm", "len"], "function", ["None"], ["", "def", "mean_velocity_error", "(", "predicted", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    Mean per-joint velocity error (i.e. mean Euclidean distance of the 1st derivative)\n    \"\"\"", "\n", "assert", "predicted", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "velocity_predicted", "=", "np", ".", "diff", "(", "predicted", ",", "axis", "=", "0", ")", "\n", "velocity_target", "=", "np", ".", "diff", "(", "target", ",", "axis", "=", "0", ")", "\n", "\n", "return", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "velocity_predicted", "-", "velocity_target", ",", "axis", "=", "len", "(", "target", ".", "shape", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_accel": [[424, 436], ["numpy.linalg.norm", "numpy.mean"], "function", ["None"], ["", "def", "compute_accel", "(", "joints", ")", ":", "\n", "    ", "\"\"\"\n    Computes acceleration of 3D joints.\n    Args:\n        joints (Nx25x3).\n    Returns:\n        Accelerations (N-2).\n    \"\"\"", "\n", "velocities", "=", "joints", "[", "1", ":", "]", "-", "joints", "[", ":", "-", "1", "]", "\n", "acceleration", "=", "velocities", "[", "1", ":", "]", "-", "velocities", "[", ":", "-", "1", "]", "\n", "acceleration_normed", "=", "np", ".", "linalg", ".", "norm", "(", "acceleration", ",", "axis", "=", "2", ")", "\n", "return", "np", ".", "mean", "(", "acceleration_normed", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_error_accel": [[437, 466], ["numpy.linalg.norm", "numpy.mean", "numpy.ones", "numpy.logical_not", "numpy.roll", "numpy.roll", "numpy.logical_not", "len", "numpy.logical_or", "numpy.logical_or"], "function", ["None"], ["", "def", "compute_error_accel", "(", "joints_gt", ",", "joints_pred", ",", "vis", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Computes acceleration error:\n        1/(n-2) \\sum_{i=1}^{n-1} X_{i-1} - 2X_i + X_{i+1}\n    Note that for each frame that is not visible, three entries in the\n    acceleration error should be zero'd out.\n    Args:\n        joints_gt (Nx14x3).\n        joints_pred (Nx14x3).\n        vis (N).\n    Returns:\n        error_accel (N-2).\n    \"\"\"", "\n", "# (N-2)x14x3", "\n", "accel_gt", "=", "joints_gt", "[", ":", "-", "2", "]", "-", "2", "*", "joints_gt", "[", "1", ":", "-", "1", "]", "+", "joints_gt", "[", "2", ":", "]", "\n", "accel_pred", "=", "joints_pred", "[", ":", "-", "2", "]", "-", "2", "*", "joints_pred", "[", "1", ":", "-", "1", "]", "+", "joints_pred", "[", "2", ":", "]", "\n", "\n", "normed", "=", "np", ".", "linalg", ".", "norm", "(", "accel_pred", "-", "accel_gt", ",", "axis", "=", "2", ")", "\n", "\n", "if", "vis", "is", "None", ":", "\n", "        ", "new_vis", "=", "np", ".", "ones", "(", "len", "(", "normed", ")", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "        ", "invis", "=", "np", ".", "logical_not", "(", "vis", ")", "\n", "invis1", "=", "np", ".", "roll", "(", "invis", ",", "-", "1", ")", "\n", "invis2", "=", "np", ".", "roll", "(", "invis", ",", "-", "2", ")", "\n", "new_invis", "=", "np", ".", "logical_or", "(", "invis", ",", "np", ".", "logical_or", "(", "invis1", ",", "invis2", ")", ")", "[", ":", "-", "2", "]", "\n", "new_vis", "=", "np", ".", "logical_not", "(", "new_invis", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "normed", "[", "new_vis", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.test": [[469, 491], ["range", "numpy.random.rand", "numpy.random.rand", "evaluation_matrix.p_mpjpe", "p_mpjpe_torch", "print", "torch.from_numpy", "torch.from_numpy", "p_mpjpe_torch.numpy", "p_mpjpe_torch.numpy", "p_mpjpe_torch.numpy"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.p_mpjpe", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "test", "(", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "        ", "r1", "=", "np", ".", "random", ".", "rand", "(", "3", ",", "14", ",", "3", ")", "\n", "r2", "=", "np", ".", "random", ".", "rand", "(", "3", ",", "14", ",", "3", ")", "\n", "pmpjpe", "=", "p_mpjpe", "(", "r1", ",", "r2", ",", "with_sRt", "=", "False", ")", "\n", "pmpjpe_torch", "=", "p_mpjpe_torch", "(", "torch", ".", "from_numpy", "(", "r1", ")", ",", "torch", ".", "from_numpy", "(", "r2", ")", ",", "with_sRt", "=", "False", ",", "full_torch", "=", "True", ")", "\n", "print", "(", "'pmpjpe: {}; {:.6f}; {:.6f}; {:.6f}'", ".", "format", "(", "pmpjpe", "==", "pmpjpe_torch", ".", "numpy", "(", ")", ",", "pmpjpe", ",", "pmpjpe_torch", ".", "numpy", "(", ")", ",", "pmpjpe", "-", "pmpjpe_torch", ".", "numpy", "(", ")", ")", ")", "\n", "'''\n        pmpjpe,(s,R,t),(H,U, s, Vt) = p_mpjpe(r1, r2,with_sRt=True)\n        pmpjpe_torch,(s_torch,R_torch,t_torch),(H_torch,U_torch, s_torch, Vt_torch) = p_mpjpe_torch(torch.from_numpy(r1), torch.from_numpy(r2),with_sRt=True,full_torch=True)\n        print('s:',s==s_torch.numpy(),s,s_torch.numpy())\n        print('R:',R==R_torch.numpy(),R,R_torch.numpy())\n        print('t:',t==t_torch.numpy(),t,t_torch.numpy())\n        print(H)\n        print(H_torch)\n        print(U)\n        print(U_torch)\n        print(Vt)\n        print(Vt_torch)\n        print(s)\n        print(s_torch)\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.__init__": [[18, 38], ["object.__init__", "collect_CRMH_3DPW_results.Submit.set_parent_tree", "collect_CRMH_3DPW_results.Submit.collect_3DPW_layout", "os.path.join", "os.path.join", "print", "collect_CRMH_3DPW_results.Submit.results_matched_to_gt_bbox", "collect_CRMH_3DPW_results.Submit.pack_results", "collect_CRMH_3DPW_results.Submit.eval_pve", "collect_CRMH_3DPW_results.Submit.run_official_evaluation", "os.path.join", "torch.from_numpy().float", "torch.from_numpy", "scipy.sparse.csr_matrix.toarray", "collect_CRMH_3DPW_results.Submit.read_pickle", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.set_parent_tree", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.collect_3DPW_layout", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.results_matched_to_gt_bbox", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.pack_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.eval_pve", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.run_official_evaluation", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.read_pickle"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Submit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_dir", "=", "'/export/home/suny/results/'", "\n", "self", ".", "results_file", "=", "\"/export/home/suny/multiperson/mmdetection/multiperson_results.npz\"", "\n", "self", ".", "ds_root_dir", "=", "\"/export/home/suny/dataset/3DPW/sequenceFiles/\"", "\n", "self", ".", "project_dir", "=", "'/export/home/suny/CenterMesh/'", "\n", "self", ".", "pw3d_image_dir", "=", "\"/export/home/suny/dataset/3DPW/images\"", "\n", "self", ".", "set_parent_tree", "(", ")", "\n", "self", ".", "collect_3DPW_layout", "(", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"CRMH\"", ")", "\n", "self", ".", "eval_code_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "self", ".", "project_dir", ",", "'src/evaluation'", ")", ")", "\n", "print", "(", "'Initialization finished!'", ")", "\n", "\n", "self", ".", "joint_regressor", "=", "torch", ".", "from_numpy", "(", "csr_matrix", ".", "toarray", "(", "self", ".", "read_pickle", "(", "os", ".", "path", ".", "join", "(", "self", ".", "project_dir", ",", "'models/smpl_original/basicModel_f_lbs_10_207_0_v1.0.0.pkl'", ")", ")", "[", "'J_regressor'", "]", ")", ")", ".", "float", "(", ")", ".", "T", "\n", "\n", "self", ".", "results_matched_to_gt_bbox", "(", ")", "\n", "params_results", "=", "self", ".", "pack_results", "(", "save_dir", ")", "\n", "\n", "self", ".", "eval_pve", "(", "save_dir", ",", "params_results", ")", "\n", "self", ".", "run_official_evaluation", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.set_parent_tree": [[39, 49], ["enumerate", "collect_CRMH_3DPW_results.Submit.parent_tree.append", "parent.append", "int"], "methods", ["None"], ["", "def", "set_parent_tree", "(", "self", ")", ":", "\n", "        ", "self", ".", "parents", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "9", ",", "9", ",", "12", ",", "13", ",", "14", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", "]", "\n", "self", ".", "sellect_joints", "=", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "16", ",", "17", ",", "18", ",", "19", "]", "\n", "self", ".", "parent_tree", "=", "[", "]", "\n", "for", "idx", ",", "joint_idx", "in", "enumerate", "(", "self", ".", "sellect_joints", ")", ":", "\n", "            ", "parent", "=", "[", "]", "\n", "while", "joint_idx", ">", "-", "1", ":", "\n", "                ", "parent", ".", "append", "(", "joint_idx", ")", "\n", "joint_idx", "=", "int", "(", "self", ".", "parents", "[", "joint_idx", "]", ")", "\n", "", "self", ".", "parent_tree", ".", "append", "(", "parent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.collect_3DPW_layout": [[50, 62], ["os.listdir", "os.listdir", "os.path.join", "action.strip", "os.path.join", "collect_CRMH_3DPW_results.Submit.read_pickle", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.read_pickle"], ["", "", "def", "collect_3DPW_layout", "(", "self", ")", ":", "\n", "        ", "self", ".", "layout", "=", "{", "}", "\n", "for", "split", "in", "os", ".", "listdir", "(", "self", ".", "ds_root_dir", ")", ":", "\n", "            ", "for", "action", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "ds_root_dir", ",", "split", ")", ")", ":", "\n", "                ", "action_name", "=", "action", ".", "strip", "(", "'.pkl'", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ds_root_dir", ",", "split", ",", "action", ")", "\n", "raw_labels", "=", "self", ".", "read_pickle", "(", "label_path", ")", "\n", "sequence_info", "=", "raw_labels", "[", "'sequence'", "]", "\n", "frame_num", "=", "len", "(", "raw_labels", "[", "'img_frame_ids'", "]", ")", "\n", "subject_num", "=", "len", "(", "raw_labels", "[", "'poses'", "]", ")", "\n", "pose2d", "=", "raw_labels", "[", "'poses2d'", "]", "\n", "self", ".", "layout", "[", "action_name", "]", "=", "[", "sequence_info", ",", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.get_gt_bbox": [[63, 75], ["enumerate", "numpy.array", "gt_bbox.append", "pose[].mean", "numpy.isnan", "gt_bbox[].append"], "methods", ["None"], ["", "", "", "def", "get_gt_bbox", "(", "self", ",", "pose2ds", ")", ":", "\n", "        ", "gt_bbox", "=", "[", "]", "\n", "for", "person_id", ",", "pose2d", "in", "enumerate", "(", "pose2ds", ")", ":", "\n", "            ", "gt_bbox", ".", "append", "(", "[", "]", ")", "\n", "# use mean of hip", "\n", "for", "pose", "in", "pose2d", "[", ":", ",", ":", ",", "[", "8", ",", "11", "]", "]", ":", "\n", "                ", "bbox", "=", "pose", "[", ":", "2", "]", ".", "mean", "(", "-", "1", ")", "\n", "# if missing pose 2d, use the bbox of previous frame", "\n", "if", "np", ".", "isnan", "(", "bbox", "[", "0", "]", ")", ":", "\n", "                    ", "bbox", "=", "gt_bbox", "[", "person_id", "]", "[", "-", "1", "]", "\n", "", "gt_bbox", "[", "person_id", "]", ".", "append", "(", "bbox", ")", "\n", "", "", "return", "np", ".", "array", "(", "gt_bbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.get_first_frame_bbox": [[76, 81], ["range", "numpy.array", "len", "first_frame_bbox.append"], "methods", ["None"], ["", "def", "get_first_frame_bbox", "(", "self", ",", "bboxes", ")", ":", "\n", "        ", "first_frame_bbox", "=", "[", "]", "\n", "for", "person_id", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "first_frame_bbox", ".", "append", "(", "bboxes", "[", "person_id", "]", "[", "0", "]", ")", "\n", "", "return", "np", ".", "array", "(", "first_frame_bbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.match_first_bbox": [[82, 86], ["numpy.linalg.norm", "numpy.argmin"], "methods", ["None"], ["", "def", "match_first_bbox", "(", "self", ",", "bbox_pred", ",", "bbox_gt", ")", ":", "\n", "        ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "bbox_pred", "[", "None", "]", "-", "bbox_gt", ",", "axis", "=", "1", ")", "\n", "matched_id", "=", "np", ".", "argmin", "(", "dist", ")", "\n", "return", "matched_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.eval_pve": [[87, 96], ["collect_CRMH_3DPW_results.get_paths", "collect_CRMH_3DPW_results.get_data", "print", "numpy.mean", "evaluation.compute_error_verts", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.get_paths", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.get_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_error_verts"], ["", "def", "eval_pve", "(", "self", ",", "submit_dir", ",", "params_results", ")", ":", "\n", "# Get all the GT and submission paths in paired list form", "\n", "        ", "truth_dir", "=", "self", ".", "ds_root_dir", "\n", "fnames_gt", ",", "fnames_pred", "=", "get_paths", "(", "submit_dir", ",", "truth_dir", ")", "\n", "params_preds", ",", "params_gts", "=", "get_data", "(", "params_results", ",", "fnames_gt", ")", "\n", "params_preds", "[", ":", ",", ":", "3", "]", "=", "0", "\n", "params_gts", "[", ":", ",", ":", "3", "]", "=", "0", "\n", "PVE", "=", "np", ".", "mean", "(", "compute_error_verts", "(", "target_theta", "=", "torch", ".", "from_numpy", "(", "params_gts", ")", ".", "float", "(", ")", ",", "pred_theta", "=", "torch", ".", "from_numpy", "(", "params_preds", ")", ".", "float", "(", ")", ")", ")", "*", "1000", "\n", "print", "(", "'PVE: '", ",", "PVE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.load_results": [[97, 135], ["os.path.exists", "print", "outputs_dict.items", "numpy.savez", "print", "file_name.split", "int", "numpy.load", "frame_name.replace().replace", "os.path.join", "enumerate", "numpy.array", "numpy.load", "collect_CRMH_3DPW_results.calc_center", "bbox_detected_org.append", "frame_name.replace", "cv2.imread", "collect_CRMH_3DPW_results.calc_center"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.calc_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.calc_center"], ["", "def", "load_results", "(", "self", ")", ":", "\n", "        ", "annot_file", "=", "'/export/home/suny/dataset/CRMH_results.npz'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "annot_file", ")", ":", "\n", "            ", "print", "(", "annot_file", ",", "'not exists, processing'", ")", "\n", "results", "=", "{", "}", "\n", "outputs_dict", "=", "np", ".", "load", "(", "self", ".", "results_file", ",", "allow_pickle", "=", "True", ")", "[", "'results'", "]", "[", "(", ")", "]", "\n", "for", "file_name", ",", "result", "in", "outputs_dict", ".", "items", "(", ")", ":", "\n", "                ", "action_name", ",", "frame_name", "=", "file_name", ".", "split", "(", "'-'", ")", "\n", "frame_id", "=", "int", "(", "frame_name", ".", "replace", "(", "'image_'", ",", "''", ")", ".", "replace", "(", "'.jpg'", ",", "''", ")", ")", "\n", "if", "action_name", "not", "in", "results", ":", "\n", "                    ", "results", "[", "action_name", "]", "=", "{", "}", "\n", "\n", "", "if", "result", "is", "not", "None", ":", "\n", "                    ", "bbox_detected", "=", "result", "[", "'bbox'", "]", "\n", "imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "pw3d_image_dir", ",", "file_name", ")", "# courtyard_golf_00-image_00257.jpg", "\n", "img_h", ",", "img_w", "=", "cv2", ".", "imread", "(", "imgpath", ")", ".", "shape", "[", ":", "2", "]", "\n", "bbox_detected_org", "=", "[", "]", "\n", "for", "pred_subject_id", ",", "bbox_pred", "in", "enumerate", "(", "bbox_detected", ")", ":", "\n", "# bbox\u8fd8\u9700\u8981\u51cf\u53bb\u6570\u636e\u9884\u5904\u7406\u7684padding", "\n", "                        ", "if", "img_h", ">", "img_w", ":", "\n", "                            ", "scale", "=", "512.", "/", "img_h", "\n", "", "else", ":", "\n", "                            ", "scale", "=", "832.", "/", "img_w", "\n", "", "bbox_pred", "/=", "scale", "\n", "bbox_center_pred", "=", "calc_center", "(", "bbox_pred", ")", "\n", "if", "bbox_pred", "[", "2", "]", ">", "img_w", "or", "bbox_pred", "[", "3", "]", ">", "img_h", ":", "\n", "                            ", "bbox_pred", "*=", "scale", "\n", "bbox_center_pred", "=", "calc_center", "(", "bbox_pred", ")", "\n", "", "bbox_detected_org", ".", "append", "(", "bbox_pred", "[", ":", "4", "]", ")", "\n", "", "result", "[", "'bbox'", "]", "=", "np", ".", "array", "(", "bbox_detected_org", ")", "\n", "#del result['verts']", "\n", "\n", "", "results", "[", "action_name", "]", "[", "frame_id", "]", "=", "result", "\n", "", "np", ".", "savez", "(", "annot_file", ",", "results", "=", "results", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'loading processed results'", ",", "annot_file", ")", "\n", "results", "=", "np", ".", "load", "(", "annot_file", ",", "allow_pickle", "=", "True", ")", "[", "'results'", "]", "[", "(", ")", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.results_matched_to_gt_bbox": [[136, 178], ["print", "collect_CRMH_3DPW_results.Submit.load_results", "print", "collect_CRMH_3DPW_results.Submit.layout.items", "collect_CRMH_3DPW_results.Submit.get_gt_bbox", "print", "range", "enumerate", "numpy.min", "collect_CRMH_3DPW_results.convert_to_vect", "collect_CRMH_3DPW_results.Submit.regress_kp3d_from_verts().numpy", "frame_ids.append", "kp3d_results.append", "pose_results.append", "bbox_results.append", "verts_results.append", "shape_results.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "collect_CRMH_3DPW_results.calc_center", "numpy.linalg.norm", "numpy.array", "[].numpy", "[].numpy", "list", "collect_CRMH_3DPW_results.Submit.regress_kp3d_from_verts", "frame_dist_dict.keys"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.load_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.get_gt_bbox", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.convert_to_vect", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.calc_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.regress_kp3d_from_verts"], ["", "def", "results_matched_to_gt_bbox", "(", "self", ")", ":", "\n", "        ", "self", ".", "results", "=", "{", "}", "\n", "print", "(", "'Loading results'", ")", "\n", "pred_results", "=", "self", ".", "load_results", "(", ")", "\n", "print", "(", "'predicted results loaded.'", ")", "\n", "self", ".", "params_results", "=", "{", "}", "\n", "for", "action_name", ",", "details", "in", "self", ".", "layout", ".", "items", "(", ")", ":", "\n", "            ", "if", "action_name", "not", "in", "self", ".", "results", ":", "\n", "                ", "self", ".", "results", "[", "action_name", "]", "=", "{", "}", "\n", "", "sequence_info", ",", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "=", "details", "\n", "gt_bbox", "=", "self", ".", "get_gt_bbox", "(", "pose2d", ")", "\n", "print", "(", "'processing'", ",", "action_name", ")", "\n", "for", "subject_id", "in", "range", "(", "subject_num", ")", ":", "\n", "                ", "frame_ids", ",", "kp3d_results", ",", "pose_results", ",", "shape_results", ",", "bbox_results", ",", "verts_results", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "gt_bbox_subj", "=", "gt_bbox", "[", "subject_id", "]", "\n", "for", "frame_id", "in", "pred_results", "[", "action_name", "]", ":", "\n", "                    ", "if", "pred_results", "[", "action_name", "]", "[", "frame_id", "]", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "bbox_center_gt", "=", "gt_bbox_subj", "[", "frame_id", "]", "[", ":", ":", "-", "1", "]", "\n", "bbox_detected", "=", "pred_results", "[", "action_name", "]", "[", "frame_id", "]", "[", "'bbox'", "]", "\n", "frame_dist_dict", "=", "{", "}", "\n", "for", "pred_subject_id", ",", "bbox_pred", "in", "enumerate", "(", "bbox_detected", ")", ":", "\n", "                        ", "bbox_center_pred", "=", "calc_center", "(", "bbox_pred", ")", "\n", "#cv2.rectangle(img, (bbox_pred[0], bbox_pred[1]), (bbox_pred[2], bbox_pred[3]), (0, 0, 255), 2)", "\n", "#center_x, center_y = bbox_center_pred.astype(np.int)", "\n", "#img[center_x-10:center_x+10, center_y-10:center_y+10] = [0,0,255]", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "bbox_center_pred", "-", "bbox_center_gt", ")", "\n", "frame_dist_dict", "[", "dist", "]", "=", "pred_subject_id", "\n", "", "closet_frame_dist", "=", "np", ".", "min", "(", "np", ".", "array", "(", "list", "(", "frame_dist_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "closet_subject_id", "=", "frame_dist_dict", "[", "closet_frame_dist", "]", "\n", "\n", "pred_verts", "=", "pred_results", "[", "action_name", "]", "[", "frame_id", "]", "[", "'verts'", "]", "\n", "pred_pose", "=", "convert_to_vect", "(", "pred_results", "[", "action_name", "]", "[", "frame_id", "]", "[", "'pose_rotmat'", "]", ".", "numpy", "(", ")", ")", "\n", "pred_kp3ds", "=", "self", ".", "regress_kp3d_from_verts", "(", "pred_verts", ")", ".", "numpy", "(", ")", "\n", "frame_ids", ".", "append", "(", "frame_id", ")", "\n", "kp3d_results", ".", "append", "(", "pred_kp3ds", "[", "closet_subject_id", "]", ")", "\n", "pose_results", ".", "append", "(", "pred_pose", "[", "closet_subject_id", "]", ")", "\n", "bbox_results", ".", "append", "(", "pred_results", "[", "action_name", "]", "[", "frame_id", "]", "[", "'bbox'", "]", "[", "closet_subject_id", "]", ")", "\n", "verts_results", ".", "append", "(", "pred_verts", ")", "\n", "shape_results", ".", "append", "(", "pred_results", "[", "action_name", "]", "[", "frame_id", "]", "[", "'shapes'", "]", "[", "closet_subject_id", "]", ".", "numpy", "(", ")", ")", "\n", "\n", "", "self", ".", "results", "[", "action_name", "]", "[", "subject_id", "]", "=", "[", "np", ".", "array", "(", "pose_results", ")", ",", "np", ".", "array", "(", "kp3d_results", ")", ",", "np", ".", "array", "(", "bbox_results", ")", ",", "np", ".", "array", "(", "frame_ids", ")", ",", "shape_results", ",", "verts_results", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.get_results": [[180, 198], ["collect_CRMH_3DPW_results.Submit.layout.items", "collect_CRMH_3DPW_results.Submit.get_gt_bbox", "collect_CRMH_3DPW_results.Submit.get_first_frame_bbox", "os.path.join", "os.path.exists", "joblib.load", "list", "collect_CRMH_3DPW_results.Submit.match_tracking", "zip", "print", "joblib.load.keys"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.get_gt_bbox", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.get_first_frame_bbox", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.match_tracking", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "self", ".", "results", "=", "{", "}", "\n", "for", "action_name", ",", "details", "in", "self", ".", "layout", ".", "items", "(", ")", ":", "\n", "            ", "sequence_info", ",", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "=", "details", "\n", "gt_bbox", "=", "self", ".", "get_gt_bbox", "(", "pose2d", ")", "\n", "first_frame_bboxes_gt", "=", "self", ".", "get_first_frame_bbox", "(", "gt_bbox", ")", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "results_dir", ",", "action_name", "+", "'_output.pkl'", ")", "# action_name, ", "\n", "#result_path = os.path.join(action_name+'_output.pkl')", "\n", "if", "os", ".", "path", ".", "exists", "(", "result_path", ")", ":", "\n", "                ", "result", "=", "joblib", ".", "load", "(", "result_path", ")", "\n", "self", ".", "results", "[", "action_name", "]", "=", "{", "}", "\n", "person_id_list", "=", "list", "(", "result", ".", "keys", "(", ")", ")", "\n", "person_ids_matched", ",", "results", "=", "self", ".", "match_tracking", "(", "(", "result", ",", "first_frame_bboxes_gt", ",", "subject_num", ",", "action_name", ",", "person_id_list", ",", "frame_num", ")", ")", "\n", "for", "person_id_matched", ",", "result", "in", "zip", "(", "person_ids_matched", ",", "results", ")", ":", "\n", "                    ", "self", ".", "results", "[", "action_name", "]", "[", "person_id_matched", "]", "=", "result", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "result_path", ",", "'missing'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.regress_kp3d_from_verts": [[200, 208], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.stack"], "methods", ["None"], ["", "", "", "def", "regress_kp3d_from_verts", "(", "self", ",", "verts", ")", ":", "\n", "#verts = torch.from_numpy(verts)", "\n", "        ", "joint_x", "=", "torch", ".", "matmul", "(", "verts", "[", ":", ",", ":", ",", "0", "]", ",", "self", ".", "joint_regressor", ")", "\n", "joint_y", "=", "torch", ".", "matmul", "(", "verts", "[", ":", ",", ":", ",", "1", "]", ",", "self", ".", "joint_regressor", ")", "\n", "joint_z", "=", "torch", ".", "matmul", "(", "verts", "[", ":", ",", ":", ",", "2", "]", ",", "self", ".", "joint_regressor", ")", "\n", "\n", "joints", "=", "torch", ".", "stack", "(", "[", "joint_x", ",", "joint_y", ",", "joint_z", "]", ",", "dim", "=", "2", ")", "\n", "return", "joints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.pack_results": [[209, 249], ["os.makedirs", "enumerate", "print", "collect_CRMH_3DPW_results.Submit.fill_empty", "collect_CRMH_3DPW_results.Submit.write_results", "collect_CRMH_3DPW_results.Submit.zip_folder", "os.makedirs", "len", "numpy.zeros", "collect_CRMH_3DPW_results.Submit.results[].items", "os.path.join", "list", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "print", "int", "numpy.array().astype", "pose_preds.copy", "numpy.array", "collect_CRMH_3DPW_results.Submit.results[].keys", "collect_CRMH_3DPW_results.Submit.process_params", "pose_result.append", "numpy.array", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.fill_empty", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.write_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.zip_folder", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.process_params"], ["", "def", "pack_results", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "results", "=", "{", "}", "\n", "params_results", "=", "{", "}", "\n", "bbox_results", "=", "{", "}", "\n", "for", "split", "in", "[", "'train'", ",", "'validation'", ",", "'test'", "]", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "split", ")", ",", "exist_ok", "=", "True", ")", "\n", "results", "[", "split", "]", "=", "{", "}", "\n", "", "for", "action_name", "in", "self", ".", "results", ":", "\n", "            ", "sequence_info", ",", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "=", "self", ".", "layout", "[", "action_name", "]", "\n", "subject_num", "=", "len", "(", "list", "(", "self", ".", "results", "[", "action_name", "]", ".", "keys", "(", ")", ")", ")", "\n", "results", "[", "split", "]", "[", "action_name", "]", "=", "[", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "24", ",", "3", ")", ")", ",", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "9", ",", "3", ",", "3", ")", ")", "]", "\n", "bbox_results", "[", "action_name", "]", "=", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "2", ")", ")", "\n", "params_results", "[", "action_name", "]", "=", "[", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "72", ")", ")", ",", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "10", ")", ")", "]", "\n", "\n", "", "for", "action_id", ",", "action_name", "in", "enumerate", "(", "self", ".", "results", ")", ":", "\n", "            ", "for", "subject_id", ",", "[", "pose_preds", ",", "kp3d_smpl", ",", "bboxes", ",", "frame_ids", ",", "shape_results", ",", "verts_results", "]", "in", "self", ".", "results", "[", "action_name", "]", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "'processing '", ",", "action_name", ",", "'{}/{}'", ".", "format", "(", "action_id", ",", "60", ")", ")", "\n", "sequence_info", ",", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "=", "self", ".", "layout", "[", "action_name", "]", "\n", "subject_id", "=", "int", "(", "subject_id", ")", "\n", "frame_ids", "=", "np", ".", "array", "(", "frame_ids", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "#print(action_name,subject_id,np.array(frame_ids))", "\n", "params_results", "[", "action_name", "]", "[", "0", "]", "[", "subject_id", "]", "[", "frame_ids", "]", "=", "pose_preds", ".", "copy", "(", ")", "\n", "params_results", "[", "action_name", "]", "[", "1", "]", "[", "subject_id", "]", "[", "frame_ids", "]", "=", "shape_results", "\n", "pose_result", "=", "[", "]", "\n", "for", "pose_pred", "in", "pose_preds", ":", "\n", "                    ", "params_processed", "=", "self", ".", "process_params", "(", "torch", ".", "from_numpy", "(", "pose_pred", ")", ")", "\n", "pose_result", ".", "append", "(", "params_processed", ")", "\n", "", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "subject_id", "]", "[", "frame_ids", "]", "=", "kp3d_smpl", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "subject_id", "]", "[", "frame_ids", "]", "=", "np", ".", "array", "(", "pose_result", ")", "\n", "#bbox_results[action_name][subject_id][np.array(frame_ids)] = np.array(bboxes)", "\n", "\n", "\n", "#self.write_results(results, save_dir)", "\n", "", "", "print", "(", "'Saving results in '", ",", "save_dir", ")", "\n", "results", "=", "self", ".", "fill_empty", "(", "results", ")", "\n", "#np.savez(os.path.join(save_dir,'bbox_tracked.npz'),bbox=bbox_results)", "\n", "self", ".", "write_results", "(", "results", ",", "save_dir", ")", "\n", "self", ".", "zip_folder", "(", "save_dir", ")", "\n", "return", "params_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.fill_empty": [[250, 274], ["range", "range", "print", "missing_frame.append", "len", "numpy.where", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "fill_empty", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "action_name", "in", "self", ".", "layout", ":", "\n", "            ", "sequence_info", ",", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "=", "self", ".", "layout", "[", "action_name", "]", "\n", "kp3ds_mat", ",", "params_mat", "=", "results", "[", "split", "]", "[", "action_name", "]", "\n", "for", "subject_id", "in", "range", "(", "kp3ds_mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "missing_frame", "=", "[", "]", "\n", "for", "frame_id", "in", "range", "(", "frame_num", ")", ":", "\n", "                    ", "empty_flag", "=", "kp3ds_mat", "[", "subject_id", ",", "frame_id", ",", "0", ",", "0", "]", "==", "0", "\n", "if", "empty_flag", ":", "\n", "                        ", "missing_frame", ".", "append", "(", "frame_id", ")", "\n", "#print(split,action_name,subject_id,frame_id,'is missing..')", "\n", "if", "frame_id", "!=", "0", ":", "\n", "#print('fill the empty using the results of previous frames')", "\n", "                            ", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "-", "1", "]", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "-", "1", "]", "\n", "#bbox_results[action_name][int(subject_id),frame_id] = bbox_results[action_name][int(subject_id),frame_id-1]", "\n", "", "else", ":", "\n", "#print('special case, the first frame results missing')", "\n", "                            ", "valid_id", "=", "np", ".", "where", "(", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", "]", "[", ":", ",", "0", ",", "0", "]", "!=", "0", ")", "[", "0", "]", "[", "0", "]", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", ",", "valid_id", "]", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "int", "(", "subject_id", ")", ",", "valid_id", "]", "\n", "#bbox_results[action_name][int(subject_id),frame_id] = bbox_results[action_name][int(subject_id),valid_id]", "\n", "", "", "", "print", "(", "split", ",", "action_name", ",", "subject_id", ",", "'missing {} frames:'", ".", "format", "(", "len", "(", "missing_frame", ")", ")", ",", "missing_frame", ")", "\n", "", "", "return", "results", "#, bbox_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.process_params": [[275, 294], ["batch_rodrigues().numpy", "enumerate", "numpy.array", "numpy.eye", "numpy.array.append", "collect_CRMH_3DPW_results.batch_rodrigues", "numpy.dot", "params.reshape"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues"], ["", "def", "process_params", "(", "self", ",", "params", ")", ":", "\n", "        ", "'''\n        calculate absolute rotation matrix in the global coordinate frame of K body parts. \n        The rotation is the map from the local bone coordinate frame to the global one.\n        K= 9 parts in the following order: \n        root (JOINT 0) , left hip  (JOINT 1), right hip (JOINT 2), left knee (JOINT 4), right knee (JOINT 5), \n        left shoulder (JOINT 16), right shoulder (JOINT 17), left elbow (JOINT 18), right elbow (JOINT 19).\n        parent kinetic tree [-1,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9, 12, 13, 14, 16, 17, 18, 19, 20, 21]\n        '''", "\n", "rotation_matrix", "=", "batch_rodrigues", "(", "params", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", ".", "numpy", "(", ")", "\n", "rotation_final", "=", "[", "]", "\n", "for", "idx", ",", "sellected_idx", "in", "enumerate", "(", "self", ".", "sellect_joints", ")", ":", "\n", "            ", "rotation_global", "=", "np", ".", "eye", "(", "3", ")", "#init_matrix", "\n", "parents", "=", "self", ".", "parent_tree", "[", "idx", "]", "\n", "for", "parent_idx", "in", "parents", ":", "\n", "                ", "rotation_global", "=", "np", ".", "dot", "(", "rotation_matrix", "[", "parent_idx", "]", ",", "rotation_global", ")", "\n", "", "rotation_final", ".", "append", "(", "rotation_global", ")", "\n", "", "rotation_final", "=", "np", ".", "array", "(", "rotation_final", ")", "\n", "return", "rotation_final", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.write_results": [[295, 302], ["os.path.join", "collect_CRMH_3DPW_results.Submit.save_pickle"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.save_pickle"], ["", "def", "write_results", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "for", "split", "in", "results", ":", "\n", "            ", "for", "action", "in", "results", "[", "split", "]", ":", "\n", "                ", "kp3d_result", ",", "rotation_result", "=", "results", "[", "split", "]", "[", "action", "]", "\n", "save_dict", "=", "{", "'jointPositions'", ":", "kp3d_result", ",", "'orientations'", ":", "rotation_result", "}", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "split", ",", "action", "+", "'.pkl'", ")", "\n", "self", ".", "save_pickle", "(", "save_dict", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.zip_folder": [[303, 306], ["os.chdir", "os.system"], "methods", ["None"], ["", "", "", "def", "zip_folder", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "os", ".", "chdir", "(", "save_dir", ")", "\n", "os", ".", "system", "(", "'zip -r results.zip *'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.run_official_evaluation": [[307, 311], ["os.chdir", "os.path.join", "os.system"], "methods", ["None"], ["", "def", "run_official_evaluation", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "os", ".", "chdir", "(", "self", ".", "eval_code_dir", ")", "\n", "truth_dir", "=", "os", ".", "path", ".", "join", "(", "'/export/home/suny/dataset'", ",", "'3DPW'", ",", "'sequenceFiles'", ")", "\n", "os", ".", "system", "(", "'python pw3d_eval/evaluate.py {}'", ".", "format", "(", "save_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.print_results": [[312, 315], ["print", "print", "numpy.concatenate().mean", "numpy.concatenate().mean", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "print_results", "(", "self", ",", "MPJPE", ",", "PAMPJPE", ")", ":", "\n", "        ", "print", "(", "'MPJPE'", ",", "np", ".", "concatenate", "(", "MPJPE", ",", "axis", "=", "0", ")", ".", "mean", "(", ")", ")", "\n", "print", "(", "'PAMPJPE'", ",", "np", ".", "concatenate", "(", "PAMPJPE", ",", "axis", "=", "0", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.read_pickle": [[316, 318], ["pickle.load", "pickle.load", "pickle.load", "pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "read_pickle", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "open", "(", "file_path", ",", "'rb'", ")", ",", "encoding", "=", "'iso-8859-1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.Submit.save_pickle": [[319, 322], ["open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump"], ["", "def", "save_pickle", "(", "self", ",", "content", ",", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "content", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.calc_center": [[323, 327], ["numpy.array"], "function", ["None"], ["", "", "", "def", "calc_center", "(", "bbox", ")", ":", "\n", "    ", "tl_y", ",", "tl_x", ",", "rb_y", ",", "rb_x", "=", "bbox", "\n", "bbox_center", "=", "np", ".", "array", "(", "[", "(", "tl_x", "+", "rb_x", ")", "/", "2.", ",", "(", "tl_y", "+", "rb_y", ")", "/", "2.", "]", ")", "\n", "return", "bbox_center", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.convert_to_vect": [[328, 334], ["numpy.array().reshape", "np.array().reshape.append", "utils.util.transform_rot_representation", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.transform_rot_representation"], ["", "def", "convert_to_vect", "(", "pose_preds", ")", ":", "\n", "    ", "converted", "=", "[", "]", "\n", "for", "pose_pred", "in", "pose_preds", ":", "\n", "        ", "converted", ".", "append", "(", "transform_rot_representation", "(", "pose_pred", ",", "input_type", "=", "'mat'", ",", "out_type", "=", "'vec'", ")", ")", "\n", "", "converted", "=", "np", ".", "array", "(", "converted", ")", ".", "reshape", "(", "(", "-", "1", ",", "72", ")", ")", "\n", "return", "converted", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.get_paths": [[335, 356], ["sorted", "sorted", "len", "len", "sorted", "sorted", "glob.glob", "glob.glob", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "get_paths", "(", "submit_dir", ",", "truth_dir", ")", ":", "\n", "    ", "\"\"\"\n    submit_dir: The location of the submit directory\n    truth_dir: The location of the truth directory\n    Return: two lists\n            fnames_gt : the list of all files in ground truth folder\n            fnames_pred : the list of all files in the predicted folder\n    \"\"\"", "\n", "fnames_gt", "=", "[", "]", "\n", "fnames_pred", "=", "[", "]", "\n", "\n", "keys", "=", "[", "'train'", ",", "'validation'", ",", "'test'", "]", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "fnames_gt_temp", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "truth_dir", ",", "key", ",", "\"\"", ")", "+", "\"*.pkl\"", ")", ")", "\n", "fnames_pred_temp", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "submit_dir", ",", "key", ",", "\"\"", ")", "+", "\"*.pkl\"", ")", ")", "\n", "fnames_gt", "=", "fnames_gt", "+", "fnames_gt_temp", "\n", "fnames_pred", "=", "fnames_pred", "+", "fnames_pred_temp", "\n", "\n", "", "assert", "len", "(", "fnames_gt", ")", "==", "len", "(", "fnames_pred", ")", "\n", "return", "sorted", "(", "fnames_gt", ")", ",", "sorted", "(", "fnames_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.check_valid_inds": [[357, 378], ["numpy.mean", "numpy.logical_not", "numpy.array().astype", "numpy.logical_and", "numpy.array", "numpy.mean", "numpy.abs", "numpy.array", "numpy.where"], "function", ["None"], ["", "def", "check_valid_inds", "(", "poses2d", ",", "camposes_valid", ")", ":", "\n", "    ", "\"\"\"\n    Computes the indices where further computations are required\n    :param poses2d: N x 18 x 3 array of 2d Poses\n    :param camposes_valid: N x 1 array of indices where camera poses are valid\n    :return: array of indices indicating frame ids in the sequence which are to be evaluated\n    \"\"\"", "\n", "\n", "# find all indices in the N sequences where the sum of the 18x3 array is not zero", "\n", "# N, numpy array", "\n", "poses2d_mean", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "poses2d", ")", ",", "axis", "=", "2", ")", ",", "axis", "=", "1", ")", "\n", "poses2d_bool", "=", "poses2d_mean", "==", "0", "\n", "poses2d_bool_inv", "=", "np", ".", "logical_not", "(", "poses2d_bool", ")", "\n", "\n", "# find all the indices where the camposes are valid", "\n", "camposes_valid", "=", "np", ".", "array", "(", "camposes_valid", ")", ".", "astype", "(", "'bool'", ")", "\n", "\n", "final", "=", "np", ".", "logical_and", "(", "poses2d_bool_inv", ",", "camposes_valid", ")", "\n", "indices", "=", "np", ".", "array", "(", "np", ".", "where", "(", "final", "==", "True", ")", "[", "0", "]", ")", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.get_data": [[379, 424], ["numpy.concatenate", "numpy.concatenate", "pickle.load", "range", "open", "len", "collect_CRMH_3DPW_results.check_valid_inds", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.tile", "[].strip", "numpy.concatenate", "numpy.concatenate", "np.concatenate.append", "np.concatenate.append", "path_gt.split"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.check_valid_inds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "get_data", "(", "params_results", ",", "paths_gt", ")", ":", "\n", "    ", "\"\"\"\n    The function reads all the ground truth.\n    \"\"\"", "\n", "params_gts", ",", "params_preds", "=", "[", "]", ",", "[", "]", "\n", "\n", "# construct the data structures -", "\n", "for", "path_gt", "in", "paths_gt", ":", "\n", "        ", "data_gt", "=", "pkl", ".", "load", "(", "open", "(", "path_gt", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "genders", "=", "data_gt", "[", "'genders'", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "genders", ")", ")", ":", "\n", "            ", "poses2d_gt", "=", "data_gt", "[", "'poses2d'", "]", "\n", "poses2d_gt_i", "=", "poses2d_gt", "[", "i", "]", "\n", "\n", "camposes_valid", "=", "data_gt", "[", "'campose_valid'", "]", "\n", "camposes_valid_i", "=", "camposes_valid", "[", "i", "]", "\n", "\n", "valid_indices", "=", "check_valid_inds", "(", "poses2d_gt_i", ",", "camposes_valid_i", ")", "\n", "# Get the ground truth SMPL body parameters - poses, betas and translation parameters", "\n", "pose_params", "=", "np", ".", "array", "(", "data_gt", "[", "'poses'", "]", ")", "\n", "pose_params", "=", "pose_params", "[", "i", ",", "valid_indices", ",", ":", "]", "\n", "\n", "shape_params", "=", "np", ".", "array", "(", "data_gt", "[", "'betas'", "]", "[", "i", "]", ")", "\n", "shape_params", "=", "np", ".", "expand_dims", "(", "shape_params", ",", "0", ")", "\n", "shape_params", "=", "shape_params", "[", ":", ",", ":", "10", "]", "\n", "shape_params", "=", "np", ".", "tile", "(", "shape_params", ",", "(", "pose_params", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "action_name", "=", "path_gt", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "strip", "(", "'.pkl'", ")", "\n", "#params_results[action_name][0][subject_id][np.array(frame_ids)] = pose_preds", "\n", "#params_results[action_name][1][subject_id][np.array(frame_ids)] = shape_results", "\n", "pose_pred", "=", "params_results", "[", "action_name", "]", "[", "0", "]", "[", "i", "]", "[", "valid_indices", "]", "\n", "shape_pred", "=", "params_results", "[", "action_name", "]", "[", "1", "]", "[", "i", "]", "[", "valid_indices", "]", "\n", "\n", "params_gt", "=", "np", ".", "concatenate", "(", "[", "pose_params", ",", "shape_params", "]", ",", "1", ")", "\n", "params_pred", "=", "np", ".", "concatenate", "(", "[", "pose_pred", ",", "shape_pred", "]", ",", "1", ")", "\n", "\n", "params_gts", ".", "append", "(", "params_gt", ")", "\n", "params_preds", ".", "append", "(", "params_pred", ")", "\n", "\n", "", "", "params_gts", "=", "np", ".", "concatenate", "(", "params_gts", ",", "0", ")", "\n", "params_preds", "=", "np", ".", "concatenate", "(", "params_preds", ",", "0", ")", "\n", "\n", "\n", "return", "params_preds", ",", "params_gts", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_CRMH_3DPW_results.batch_rodrigues": [[425, 457], ["torch.norm", "torch.unsqueeze", "torch.unsqueeze", "torch.split", "torch.zeros", "torch.zeros", "torch.cat().view", "torch.eye().unsqueeze", "torch.cos", "torch.sin", "torch.cat", "torch.eye", "torch.bmm"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "batch_rodrigues", "(", "rot_vecs", ",", "epsilon", "=", "1e-8", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "''' Calculates the rotation matrices for a batch of rotation vectors\n        Parameters\n        ----------\n        rot_vecs: torch.tensor Nx3\n            array of N axis-angle vectors\n        Returns\n        -------\n        R: torch.tensor Nx3x3\n            The rotation matrices for the given axis-angle parameters\n    '''", "\n", "\n", "batch_size", "=", "rot_vecs", ".", "shape", "[", "0", "]", "\n", "device", "=", "rot_vecs", ".", "device", "\n", "\n", "angle", "=", "torch", ".", "norm", "(", "rot_vecs", "+", "1e-8", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "rot_dir", "=", "rot_vecs", "/", "angle", "\n", "\n", "cos", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "cos", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "sin", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "sin", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Bx1 arrays", "\n", "rx", ",", "ry", ",", "rz", "=", "torch", ".", "split", "(", "rot_dir", ",", "1", ",", "dim", "=", "1", ")", "\n", "K", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "3", ",", "3", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "K", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "-", "rz", ",", "ry", ",", "rz", ",", "zeros", ",", "-", "rx", ",", "-", "ry", ",", "rx", ",", "zeros", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "(", "batch_size", ",", "3", ",", "3", ")", ")", "\n", "\n", "ident", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "rot_mat", "=", "ident", "+", "sin", "*", "K", "+", "(", "1", "-", "cos", ")", "*", "torch", ".", "bmm", "(", "K", ",", "K", ")", "\n", "return", "rot_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.__init__": [[10, 31], ["Base.__init__", "os.path.join", "collect_3DPW_results.Submit.set_smpl_parent_tree", "collect_3DPW_results.Submit._build_model_", "collect_3DPW_results.Submit.collect_3DPW_layout", "collect_3DPW_results.Submit._create_single_data_loader", "print", "os.path.join", "os.path.join", "print", "collect_3DPW_results.Submit.run_official_evaluation", "args", "os.path.exists", "collect_3DPW_results.Submit.evaluation", "collect_3DPW_results.Submit.pack_results", "print", "args", "os.path.basename().replace", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.set_smpl_parent_tree", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._build_model_", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.collect_3DPW_layout", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.run_official_evaluation", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.evaluation", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.pack_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Submit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pw3d_path", "=", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "dataset_rootdir", ",", "'3DPW'", ")", "\n", "self", ".", "set_smpl_parent_tree", "(", ")", "\n", "self", ".", "_build_model_", "(", ")", "\n", "self", ".", "collect_3DPW_layout", "(", ")", "\n", "\n", "self", ".", "loader_val", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'pw3d'", ",", "train_flag", "=", "False", ",", "split", "=", "'all'", ",", "mode", "=", "'normal'", ")", "\n", "self", ".", "output_dir", "=", "args", "(", ")", ".", "output_dir", "\n", "print", "(", "'Initialization finished!'", ")", "\n", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'R_'", "+", "os", ".", "path", ".", "basename", "(", "self", ".", "model_path", ")", ".", "replace", "(", "'.pkl'", ",", "''", ")", ")", "#time.strftime(\"results_%Y-%m-%d_%H:%M:%S\", time.localtime())", "\n", "\n", "final_results_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'results.zip'", ")", "\n", "print", "(", "'final results will be saved to '", ",", "final_results_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "final_results_path", ")", ":", "\n", "            ", "self", ".", "evaluation", "(", ")", "\n", "self", ".", "pack_results", "(", "save_dir", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "final_results_path", ",", "'already exists. Going direct to evaluation'", ")", "\n", "", "self", ".", "run_official_evaluation", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.collect_3DPW_layout": [[32, 43], ["os.path.join", "os.listdir", "os.listdir", "os.path.join", "action.strip", "os.path.join", "collect_3DPW_results.read_pickle", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.read_pickle"], ["", "def", "collect_3DPW_layout", "(", "self", ")", ":", "\n", "        ", "self", ".", "layout", "=", "{", "}", "\n", "root_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "pw3d_path", ",", "\"sequenceFiles/\"", ")", "\n", "for", "split", "in", "os", ".", "listdir", "(", "root_dir", ")", ":", "\n", "            ", "for", "action", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "split", ")", ")", ":", "\n", "                ", "action_name", "=", "action", ".", "strip", "(", "'.pkl'", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "split", ",", "action", ")", "\n", "raw_labels", "=", "read_pickle", "(", "label_path", ")", "\n", "frame_num", "=", "len", "(", "raw_labels", "[", "'img_frame_ids'", "]", ")", "\n", "subject_num", "=", "len", "(", "raw_labels", "[", "'poses'", "]", ")", "\n", "self", ".", "layout", "[", "action_name", "]", "=", "[", "split", ",", "subject_num", ",", "frame_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.set_smpl_parent_tree": [[44, 54], ["torch.Tensor", "enumerate", "collect_3DPW_results.Submit.parent_tree.append", "parent.append", "int"], "methods", ["None"], ["", "", "", "def", "set_smpl_parent_tree", "(", "self", ")", ":", "\n", "        ", "parents", "=", "torch", ".", "Tensor", "(", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "9", ",", "9", ",", "12", ",", "13", ",", "14", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", "]", ")", "\n", "self", ".", "sellect_joints", "=", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "16", ",", "17", ",", "18", ",", "19", "]", "\n", "self", ".", "parent_tree", "=", "[", "]", "\n", "for", "idx", ",", "joint_idx", "in", "enumerate", "(", "self", ".", "sellect_joints", ")", ":", "\n", "            ", "parent", "=", "[", "]", "\n", "while", "joint_idx", ">", "-", "1", ":", "\n", "                ", "parent", ".", "append", "(", "joint_idx", ")", "\n", "joint_idx", "=", "int", "(", "parents", "[", "joint_idx", "]", ")", "\n", "", "self", ".", "parent_tree", ".", "append", "(", "parent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.evaluation": [[55, 92], ["torch.no_grad", "nn.DataParallel().eval", "time.time", "enumerate", "print", "get_remove_keys", "torch.arange", "meta_data.copy", "reorganize_items", "torch.cat().cpu", "params_pred[].cpu", "enumerate", "nn.DataParallel", "len", "nn.DataParallel().eval.", "outputs[].cpu().numpy", "kp3d_smpl.cpu", "torch.cat().cpu.cpu", "zip", "imgpath.replace.replace.replace", "print", "autocast", "nn.DataParallel().eval.", "torch.cat", "os.path.join", "time.time", "outputs[].cpu", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.get_remove_keys", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.reorganize_items", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluation", "(", "self", ")", ":", "\n", "        ", "eval_model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ".", "module", ")", ".", "eval", "(", ")", "\n", "MPJPE", ",", "PAMPJPE", ",", "PCK3D", ",", "MPJAE", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "results", "=", "{", "}", "\n", "self", ".", "results_save", "=", "{", "}", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "test_iter", ",", "meta_data", "in", "enumerate", "(", "self", ".", "loader_val", ")", ":", "\n", "            ", "ds_org", ",", "imgpath_org", "=", "get_remove_keys", "(", "meta_data", ",", "keys", "=", "[", "'data_set'", ",", "'imgpath'", "]", ")", "\n", "meta_data", "[", "'batch_ids'", "]", "=", "torch", ".", "arange", "(", "len", "(", "meta_data", "[", "'params'", "]", ")", ")", "\n", "meta_data_org", "=", "meta_data", ".", "copy", "(", ")", "\n", "if", "self", ".", "model_precision", "==", "'fp16'", ":", "\n", "                ", "with", "autocast", "(", ")", ":", "\n", "                    ", "outputs", "=", "eval_model", "(", "meta_data", ",", "**", "self", ".", "eval_cfg", ")", "\n", "", "", "else", ":", "\n", "                ", "outputs", "=", "eval_model", "(", "meta_data", ",", "**", "self", ".", "eval_cfg", ")", "\n", "\n", "", "outputs", "[", "'meta_data'", "]", "[", "'data_set'", "]", ",", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", "=", "reorganize_items", "(", "[", "ds_org", ",", "imgpath_org", "]", ",", "outputs", "[", "'reorganize_idx'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "meta_data", "=", "outputs", "[", "'meta_data'", "]", "\n", "params_pred", "=", "outputs", "[", "'params'", "]", "\n", "pose_pred", "=", "torch", ".", "cat", "(", "[", "params_pred", "[", "'global_orient'", "]", ",", "params_pred", "[", "'body_pose'", "]", "]", ",", "1", ")", ".", "cpu", "(", ")", "\n", "shape_pred", "=", "params_pred", "[", "'betas'", "]", ".", "cpu", "(", ")", "\n", "kp3d_smpl", "=", "outputs", "[", "'joints_smpl24'", "]", "\n", "subject_ids", "=", "meta_data", "[", "'subject_ids'", "]", "\n", "imgpaths", "=", "meta_data", "[", "'imgpath'", "]", "\n", "\n", "kp3d_smpl", ",", "pose_pred", "=", "kp3d_smpl", ".", "cpu", "(", ")", ",", "pose_pred", ".", "cpu", "(", ")", "\n", "for", "idx", ",", "(", "imgpath", ",", "subject_id", ")", "in", "enumerate", "(", "zip", "(", "imgpaths", ",", "subject_ids", ")", ")", ":", "\n", "                ", "imgpath", "=", "imgpath", ".", "replace", "(", "os", ".", "path", ".", "join", "(", "self", ".", "pw3d_path", ",", "'imageFiles/'", ")", ",", "''", ")", "\n", "if", "imgpath", "not", "in", "self", ".", "results", ":", "\n", "                    ", "self", ".", "results", "[", "imgpath", "]", "=", "{", "}", "\n", "", "self", ".", "results", "[", "imgpath", "]", "[", "subject_id", "]", "=", "[", "pose_pred", "[", "idx", "]", ",", "shape_pred", "[", "idx", "]", ",", "kp3d_smpl", "[", "idx", ",", ":", "24", "]", "]", "\n", "", "if", "test_iter", "%", "60", "==", "0", ":", "\n", "                ", "print", "(", "'Processing {}/{}'", ".", "format", "(", "test_iter", ",", "len", "(", "self", ".", "loader_val", ")", ")", ")", "\n", "\n", "", "", "print", "(", "'Runtime: {},per sample {}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "50534", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.pack_results": [[93, 117], ["os.makedirs", "collect_3DPW_results.Submit.layout.items", "print", "collect_3DPW_results.Submit.fill_empty", "collect_3DPW_results.Submit.write_results", "collect_3DPW_results.Submit.zip_folder", "os.makedirs", "collect_3DPW_results.Submit.results[].items", "os.path.join", "np.zeros", "np.zeros", "np.zeros", "int", "print", "print", "torch.cat", "collect_3DPW_results.Submit.process_params", "imgpath.split", "[].replace().strip", "[].replace", "int", "int", "int", "imgpath.split"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.fill_empty", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.write_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.zip_folder", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.process_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "pack_results", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "results", "=", "{", "}", "\n", "for", "split", "in", "[", "'train'", ",", "'validation'", ",", "'test'", "]", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "split", ")", ",", "exist_ok", "=", "True", ")", "\n", "results", "[", "split", "]", "=", "{", "}", "\n", "", "for", "action_name", ",", "[", "split", ",", "subject_num", ",", "frame_num", "]", "in", "self", ".", "layout", ".", "items", "(", ")", ":", "\n", "            ", "results", "[", "split", "]", "[", "action_name", "]", "=", "[", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "24", ",", "3", ")", ")", ",", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "82", ")", ")", ",", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "9", ",", "3", ",", "3", ")", ")", "]", "\n", "\n", "", "for", "imgpath", "in", "self", ".", "results", ":", "\n", "            ", "action_name", ",", "frame_id", "=", "imgpath", ".", "split", "(", "'/'", ")", "[", "0", "]", ",", "int", "(", "imgpath", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "replace", "(", "'image_'", ",", "''", ")", ".", "strip", "(", "'.jpg'", ")", ")", "\n", "for", "subject_id", ",", "[", "pose_pred", ",", "shape_pred", ",", "kp3d_smpl", "]", "in", "self", ".", "results", "[", "imgpath", "]", ".", "items", "(", ")", ":", "\n", "                ", "split", ",", "subject_num", ",", "frame_num", "=", "self", ".", "layout", "[", "action_name", "]", "\n", "assert", "frame_id", "<", "frame_num", ",", "print", "(", "'frame_id {} out range'", ".", "format", "(", "frame_id", ")", ")", "\n", "assert", "subject_id", "<", "subject_num", ",", "print", "(", "'subject_id {} out range'", ".", "format", "(", "subject_id", ")", ")", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "kp3d_smpl", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "torch", ".", "cat", "(", "[", "pose_pred", ",", "shape_pred", "]", ")", "\n", "params_processed", "=", "self", ".", "process_params", "(", "pose_pred", ")", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "2", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "params_processed", "\n", "\n", "", "", "print", "(", "'Saving results in '", ",", "save_dir", ")", "\n", "results", "=", "self", ".", "fill_empty", "(", "results", ")", "\n", "self", ".", "write_results", "(", "results", ",", "save_dir", ")", "\n", "self", ".", "zip_folder", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.fill_empty": [[118, 132], ["collect_3DPW_results.Submit.layout.items", "range", "range", "missing_frame.append", "range", "len", "int", "int"], "methods", ["None"], ["", "def", "fill_empty", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "action_name", ",", "[", "split", ",", "subject_num", ",", "frame_num", "]", "in", "self", ".", "layout", ".", "items", "(", ")", ":", "\n", "            ", "for", "subject_id", "in", "range", "(", "subject_num", ")", ":", "\n", "                ", "missing_frame", "=", "[", "]", "\n", "for", "frame_id", "in", "range", "(", "frame_num", ")", ":", "\n", "                    ", "empty_flag", "=", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "subject_id", ",", "frame_id", ",", "0", ",", "0", "]", "==", "0", "\n", "if", "empty_flag", ":", "\n", "                        ", "missing_frame", ".", "append", "(", "frame_id", ")", "\n", "sampling_frame", "=", "frame_id", "-", "1", "if", "frame_id", "!=", "0", "else", "1", "\n", "for", "inds", "in", "range", "(", "len", "(", "results", "[", "split", "]", "[", "action_name", "]", ")", ")", ":", "\n", "                            ", "results", "[", "split", "]", "[", "action_name", "]", "[", "inds", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "results", "[", "split", "]", "[", "action_name", "]", "[", "inds", "]", "[", "int", "(", "subject_id", ")", ",", "sampling_frame", "]", "\n", "\n", "#print(split,action_name,subject_id,'missing {} frames:'.format(len(missing_frame)),missing_frame)", "\n", "", "", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.process_params": [[133, 152], ["batch_rodrigues().numpy", "enumerate", "np.array", "np.eye", "np.array.append", "collect_3DPW_results.batch_rodrigues", "np.dot", "params.reshape"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues"], ["", "def", "process_params", "(", "self", ",", "params", ")", ":", "\n", "        ", "'''\n        calculate absolute rotation matrix in the global coordinate frame of K body parts. \n        The rotation is the map from the local bone coordinate frame to the global one.\n        K= 9 parts in the following order: \n        root (JOINT 0) , left hip  (JOINT 1), right hip (JOINT 2), left knee (JOINT 4), right knee (JOINT 5), \n        left shoulder (JOINT 16), right shoulder (JOINT 17), left elbow (JOINT 18), right elbow (JOINT 19).\n        parent kinetic tree [-1,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9, 12, 13, 14, 16, 17, 18, 19, 20, 21]\n        '''", "\n", "rotation_matrix", "=", "batch_rodrigues", "(", "params", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", ".", "numpy", "(", ")", "\n", "rotation_final", "=", "[", "]", "\n", "for", "idx", ",", "sellected_idx", "in", "enumerate", "(", "self", ".", "sellect_joints", ")", ":", "\n", "            ", "rotation_global", "=", "np", ".", "eye", "(", "3", ")", "#init_matrix", "\n", "parents", "=", "self", ".", "parent_tree", "[", "idx", "]", "\n", "for", "parent_idx", "in", "parents", ":", "\n", "                ", "rotation_global", "=", "np", ".", "dot", "(", "rotation_matrix", "[", "parent_idx", "]", ",", "rotation_global", ")", "\n", "", "rotation_final", ".", "append", "(", "rotation_global", ")", "\n", "", "rotation_final", "=", "np", ".", "array", "(", "rotation_final", ")", "\n", "return", "rotation_final", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.write_results": [[153, 160], ["os.path.join", "collect_3DPW_results.save_pickle"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.save_pickle"], ["", "def", "write_results", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "for", "split", "in", "results", ":", "\n", "            ", "for", "action", "in", "results", "[", "split", "]", ":", "\n", "                ", "kp3d_result", ",", "params_pred", ",", "rotation_result", "=", "results", "[", "split", "]", "[", "action", "]", "\n", "save_dict", "=", "{", "'jointPositions'", ":", "kp3d_result", ",", "'orientations'", ":", "rotation_result", ",", "'smpl_params'", ":", "params_pred", "}", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "split", ",", "action", "+", "'.pkl'", ")", "\n", "save_pickle", "(", "save_dict", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.zip_folder": [[161, 164], ["os.chdir", "os.system"], "methods", ["None"], ["", "", "", "def", "zip_folder", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "os", ".", "chdir", "(", "save_dir", ")", "\n", "os", ".", "system", "(", "'zip -r results.zip *'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.Submit.run_official_evaluation": [[165, 170], ["print", "os.chdir", "os.system", "os.path.join", "save_dir.replace", "os.path.join().replace", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "run_official_evaluation", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "print", "(", "'Saving dir:'", ",", "save_dir", ")", "\n", "os", ".", "chdir", "(", "os", ".", "path", ".", "join", "(", "config", ".", "code_dir", ",", "'evaluation'", ")", ")", "\n", "os", ".", "system", "(", "\"python pw3d_eval/evaluate.py {} {}\"", ".", "format", "(", "save_dir", ".", "replace", "(", "' '", ",", "'\\ '", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "pw3d_path", ",", "'sequenceFiles'", ")", ".", "replace", "(", "' '", ",", "'\\ '", ")", ")", ")", "\n", "#os.system('cp {} {}'.format(self.model_path, save_dir))", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.read_pickle": [[172, 174], ["pickle.load", "open"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "", "def", "read_pickle", "(", "file_path", ")", ":", "\n", "    ", "return", "pickle", ".", "load", "(", "open", "(", "file_path", ",", "'rb'", ")", ",", "encoding", "=", "'iso-8859-1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.save_pickle": [[175, 178], ["open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump"], ["", "def", "save_pickle", "(", "content", ",", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "content", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_3DPW_results.batch_rodrigues": [[179, 200], ["torch.norm", "torch.unsqueeze", "torch.unsqueeze", "torch.split", "torch.zeros", "torch.zeros", "torch.cat().view", "torch.eye().unsqueeze", "torch.cos", "torch.sin", "torch.cat", "torch.eye", "torch.bmm"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "", "def", "batch_rodrigues", "(", "rot_vecs", ",", "epsilon", "=", "1e-8", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "batch_size", "=", "rot_vecs", ".", "shape", "[", "0", "]", "\n", "device", "=", "rot_vecs", ".", "device", "\n", "\n", "angle", "=", "torch", ".", "norm", "(", "rot_vecs", "+", "1e-8", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "rot_dir", "=", "rot_vecs", "/", "angle", "\n", "\n", "cos", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "cos", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "sin", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "sin", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Bx1 arrays", "\n", "rx", ",", "ry", ",", "rz", "=", "torch", ".", "split", "(", "rot_dir", ",", "1", ",", "dim", "=", "1", ")", "\n", "K", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "3", ",", "3", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "K", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "-", "rz", ",", "ry", ",", "rz", ",", "zeros", ",", "-", "rx", ",", "-", "ry", ",", "rx", ",", "zeros", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "(", "batch_size", ",", "3", ",", "3", ")", ")", "\n", "\n", "ident", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "rot_mat", "=", "ident", "+", "sin", "*", "K", "+", "(", "1", "-", "cos", ")", "*", "torch", ".", "bmm", "(", "K", ",", "K", ")", "\n", "return", "rot_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.joints2sticks": [[49, 97], ["numpy.zeros", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack", "numpy.hstack"], "function", ["None"], ["def", "joints2sticks", "(", "joints", ",", "dataset_name", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        joints: array of joints in the canonical order.\n      The canonical joint order:\n        0 Head top\n        1 Neck\n        2 Right shoulder (from person's perspective)\n        3 Right elbow\n        4 Right wrist\n        5 Right hip\n        6 Right knee\n        7 Right ankle\n        8 Left shoulder\n        9 Left elbow\n        10 Left wrist\n        11 Left hip\n        12 Left knee\n        13 Left ankle\n    Returns:\n        sticks: array of sticks in the canonical order.\n      The canonical part stick order:\n        0 Head\n        1 Torso\n        2 Right Upper Arm\n        3 Right Lower Arm\n        4 Right Upper Leg\n        5 Right Lower Leg\n        6 Left Upper Arm\n        7 Left Lower Arm\n        8 Left Upper Leg\n        9 Left Lower Leg\n    \"\"\"", "\n", "assert", "joints", ".", "shape", "==", "(", "14", ",", "2", ")", "\n", "stick_n", "=", "10", "# number of stick", "\n", "sticks", "=", "np", ".", "zeros", "(", "(", "stick_n", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "sticks", "[", "0", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "joints", "[", "0", ",", ":", "]", ",", "joints", "[", "1", ",", ":", "]", "]", ")", "# Head", "\n", "sticks", "[", "1", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "(", "joints", "[", "2", ",", ":", "]", "+", "joints", "[", "8", ",", ":", "]", ")", "/", "2.0", ",", "\n", "(", "joints", "[", "5", ",", ":", "]", "+", "joints", "[", "11", ",", ":", "]", ")", "/", "2.0", "]", ")", "# Torso", "\n", "sticks", "[", "2", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "joints", "[", "2", ",", ":", "]", ",", "joints", "[", "3", ",", ":", "]", "]", ")", "# Left U.arms", "\n", "sticks", "[", "3", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "joints", "[", "3", ",", ":", "]", ",", "joints", "[", "4", ",", ":", "]", "]", ")", "# Left L.arms", "\n", "sticks", "[", "4", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "joints", "[", "5", ",", ":", "]", ",", "joints", "[", "6", ",", ":", "]", "]", ")", "# Left U.legs", "\n", "sticks", "[", "5", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "joints", "[", "6", ",", ":", "]", ",", "joints", "[", "7", ",", ":", "]", "]", ")", "# Left L.legs", "\n", "sticks", "[", "6", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "joints", "[", "8", ",", ":", "]", ",", "joints", "[", "9", ",", ":", "]", "]", ")", "# Right U.arms", "\n", "sticks", "[", "7", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "joints", "[", "9", ",", ":", "]", ",", "joints", "[", "10", ",", ":", "]", "]", ")", "# Right L.arms", "\n", "sticks", "[", "8", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "joints", "[", "11", ",", ":", "]", ",", "joints", "[", "12", ",", ":", "]", "]", ")", "# Right U.legs", "\n", "sticks", "[", "9", ",", ":", "]", "=", "np", ".", "hstack", "(", "[", "joints", "[", "12", ",", ":", "]", ",", "joints", "[", "13", ",", ":", "]", "]", ")", "# Right L.legs", "\n", "return", "sticks", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.convert2canonical": [[99, 128], ["range", "dict", "eval_pckh.joints2sticks", "range"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.joints2sticks"], ["", "def", "convert2canonical", "(", "joints", ",", "dataset_name", ")", ":", "\n", "    ", "\"\"\"\n    Convert joints to evaluation structure.\n    Permute joints according to the canonical joint order.\n    \"\"\"", "\n", "if", "dataset_name", "==", "'lsp'", ":", "\n", "      ", "assert", "joints", ".", "shape", "[", "1", ":", "]", "==", "(", "14", ",", "2", ")", ",", "'LSP must contain 14 joints per person'", "\n", "# convert to the canonical joint order", "\n", "joint_order", "=", "[", "13", ",", "# Head top", "\n", "12", ",", "# Neck", "\n", "8", ",", "# Right shoulder", "\n", "7", ",", "# Right elbow", "\n", "6", ",", "# Right wrist", "\n", "2", ",", "# Right hip", "\n", "1", ",", "# Right knee", "\n", "0", ",", "# Right ankle", "\n", "9", ",", "# Left shoulder", "\n", "10", ",", "# Left elbow", "\n", "11", ",", "# Left wrist", "\n", "3", ",", "# Left hip", "\n", "4", ",", "# Left knee", "\n", "5", "]", "# Left ankle", "\n", "\n", "\n", "", "canonical", "=", "[", "dict", "(", ")", "for", "_", "in", "range", "(", "joints", ".", "shape", "[", "0", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "joints", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "canonical", "[", "i", "]", "[", "'joints'", "]", "=", "joints", "[", "i", ",", "joint_order", ",", ":", "]", "\n", "canonical", "[", "i", "]", "[", "'sticks'", "]", "=", "joints2sticks", "(", "canonical", "[", "i", "]", "[", "'joints'", "]", ",", "dataset_name", ")", "\n", "", "return", "canonical", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.eval_pck": [[129, 167], ["len", "numpy.where", "numpy.zeros", "range", "range", "numpy.array", "numpy.linalg.norm", "range", "np.array.append", "np.where.sum", "len", "np.array.append", "numpy.mean", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "eval_pck", "(", "dataset_name", ",", "gt", ",", "pred", ",", "vis", ",", "thresh", "=", "0.05", ")", ":", "\n", "    ", "\"\"\"\n    Compute average PCKh per joint.\n    Matching threshold is 50% (thresh) of the head segment box size by default\n    Args:\n      gt_joints, predicted_joints: arrays of gt and predicted joints in the canonical order\n      thresh: fraction of the torso height: || left_shoulder - right hip || segment length. This is the maximal deviation of the\n        predicted joint from the gt joint position.\n    Returns:\n        pckh_per_joint: array of PCK scores. i-th element is the PCK score for the i-th joint\n    \"\"\"", "\n", "num_joints", "=", "19", "\n", "assert", "pred", ".", "shape", "[", "1", ":", "]", "==", "(", "num_joints", ",", "2", ")", ",", "'COCO19 must contain 19 joints per person'", "\n", "\n", "num_examples", "=", "len", "(", "gt", ")", "\n", "vis", "=", "np", ".", "where", "(", "vis", ".", "sum", "(", "-", "1", ")", "!=", "0", ")", "\n", "\n", "is_matched", "=", "np", ".", "zeros", "(", "(", "num_examples", ",", "num_joints", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_examples", ")", ":", "\n", "        ", "left_shoulder_id", "=", "5", "\n", "right_hip_id", "=", "9", "\n", "gt_torso_len", "=", "np", ".", "linalg", ".", "norm", "(", "gt", "[", "i", "]", "[", "left_shoulder_id", "]", "-", "\n", "gt", "[", "i", "]", "[", "right_hip_id", "]", ")", "\n", "for", "joint_id", "in", "range", "(", "num_joints", ")", ":", "\n", "            ", "delta", "=", "np", ".", "linalg", ".", "norm", "(", "pred", "[", "i", "]", "[", "joint_id", "]", "-", "\n", "gt", "[", "i", "]", "[", "joint_id", "]", ")", "/", "gt_torso_len", "\n", "\n", "is_matched", "[", "i", ",", "joint_id", "]", "=", "delta", "<=", "thresh", "\n", "", "", "pckh_per_joint", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_joints", ")", ":", "\n", "        ", "vis_joint_idx", "=", "vis", "[", "0", "]", "[", "vis", "[", "1", "]", "==", "i", "]", "\n", "if", "len", "(", "vis_joint_idx", ")", "==", "0", ":", "\n", "            ", "pckh_per_joint", ".", "append", "(", "0", ")", "\n", "", "pckh_per_joint", ".", "append", "(", "np", ".", "mean", "(", "is_matched", "[", "vis_joint_idx", ",", "i", "]", ")", ")", "\n", "", "pckh_per_joint", "=", "np", ".", "array", "(", "pckh_per_joint", ")", "\n", "\n", "return", "pckh_per_joint", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.eval_pckh": [[168, 205], ["len", "numpy.where", "numpy.zeros", "range", "range", "numpy.array", "eval_pckh.convert2canonical", "eval_pckh.convert2canonical", "numpy.linalg.norm", "range", "np.array.append", "np.where.sum", "len", "np.array.append", "numpy.mean", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.convert2canonical", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.convert2canonical", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "eval_pckh", "(", "dataset_name", ",", "gt", ",", "pred", ",", "vis", ",", "thresh", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"\n    Compute average PCKh per joint.\n    Matching threshold is 50% (thresh) of the head segment box size by default\n    Args:\n      gt_joints, predicted_joints: arrays of gt and predicted joints in the canonical order\n      thresh: fraction of the head segment length. This is the maximal deviation of the\n        predicted joint from the gt joint position.\n    Returns:\n        pckh_per_joint: array of PCKh scores. i-th element is the PCKh score for the i-th joint\n    \"\"\"", "\n", "gt_joints", ",", "predicted_joints", "=", "convert2canonical", "(", "gt", ",", "dataset_name", ")", ",", "convert2canonical", "(", "pred", ",", "dataset_name", ")", "\n", "\n", "num_joints", "=", "14", "\n", "num_examples", "=", "len", "(", "gt_joints", ")", "\n", "vis", "=", "np", ".", "where", "(", "vis", ".", "sum", "(", "-", "1", ")", "!=", "0", ")", "\n", "\n", "is_matched", "=", "np", ".", "zeros", "(", "(", "num_examples", ",", "num_joints", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_examples", ")", ":", "\n", "        ", "head_id", "=", "0", "\n", "gt_head_len", "=", "np", ".", "linalg", ".", "norm", "(", "gt_joints", "[", "i", "]", "[", "'sticks'", "]", "[", "head_id", ",", ":", "2", "]", "-", "\n", "gt_joints", "[", "i", "]", "[", "'sticks'", "]", "[", "head_id", ",", "2", ":", "]", ")", "\n", "for", "joint_id", "in", "range", "(", "num_joints", ")", ":", "\n", "            ", "delta", "=", "np", ".", "linalg", ".", "norm", "(", "predicted_joints", "[", "i", "]", "[", "'joints'", "]", "[", "joint_id", "]", "-", "\n", "gt_joints", "[", "i", "]", "[", "'joints'", "]", "[", "joint_id", "]", ")", "/", "gt_head_len", "\n", "\n", "is_matched", "[", "i", ",", "joint_id", "]", "=", "delta", "<=", "thresh", "\n", "", "", "pckh_per_joint", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_joints", ")", ":", "\n", "        ", "vis_joint_idx", "=", "vis", "[", "0", "]", "[", "vis", "[", "1", "]", "==", "i", "]", "\n", "if", "len", "(", "vis_joint_idx", ")", "==", "0", ":", "\n", "            ", "pckh_per_joint", ".", "append", "(", "0", ")", "\n", "", "pckh_per_joint", ".", "append", "(", "np", ".", "mean", "(", "is_matched", "[", "vis_joint_idx", ",", "i", "]", ")", ")", "\n", "", "pckh_per_joint", "=", "np", ".", "array", "(", "pckh_per_joint", ")", "\n", "\n", "return", "pckh_per_joint", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.average_pckh_symmetric_joints": [[207, 222], ["pckh_per_joint[].tolist", "range", "pckh_per_joint[].tolist", "ValueError", "pckh_per_joint[].tolist.append"], "function", ["None"], ["", "def", "average_pckh_symmetric_joints", "(", "dataset_name", ",", "pckh_per_joint", ")", ":", "\n", "    ", "if", "dataset_name", "not", "in", "[", "'mpii'", ",", "'lsp'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown dataset {}'", ".", "format", "(", "dataset_name", ")", ")", "\n", "\n", "", "joint_names", "=", "[", "'Head'", ",", "'Neck'", ",", "'Shoulder'", ",", "\n", "'Elbow'", ",", "'Wrist'", ",", "\n", "'Hip'", ",", "'Knee'", ",", "'Ankle'", ",", "\n", "'Thorax'", ",", "'Pelvis'", "]", "\n", "if", "dataset_name", "==", "'lsp'", ":", "\n", "        ", "joint_names", "=", "joint_names", "[", ":", "-", "2", "]", "\n", "", "pckh_symmetric_joints", "=", "pckh_per_joint", "[", ":", "2", "]", ".", "tolist", "(", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "8", ")", ":", "\n", "        ", "pckh_symmetric_joints", ".", "append", "(", "(", "pckh_per_joint", "[", "i", "]", "+", "pckh_per_joint", "[", "i", "+", "6", "]", ")", "/", "2.0", ")", "\n", "", "pckh_symmetric_joints", "+=", "pckh_per_joint", "[", "14", ":", "]", ".", "tolist", "(", ")", "\n", "return", "pckh_symmetric_joints", ",", "joint_names", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.compute_pckh_lsp": [[223, 228], ["eval_pckh.eval_pckh", "eval_pckh.mean", "eval_pckh.convert2canonical", "eval_pckh.convert2canonical"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.eval_pckh", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.convert2canonical", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.convert2canonical"], ["", "def", "compute_pckh_lsp", "(", "gt", ",", "pred", ",", "vis", ",", "thresh", "=", "0.5", ")", ":", "\n", "    ", "pckh_per_joint", "=", "eval_pckh", "(", "'lsp'", ",", "convert2canonical", "(", "gt", ")", ",", "convert2canonical", "(", "pred", ")", ",", "vis", ",", "thresh", "=", "thresh", ")", "\n", "#pckh_symmetric_joints, joint_names = average_pckh_symmetric_joints('lsp', pckh_per_joint)", "\n", "#return pckh_symmetric_joints, joint_names, pckh_per_joint.mean()", "\n", "return", "pckh_per_joint", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.main": [[229, 235], ["numpy.ones", "numpy.ones", "print", "eval_pckh.compute_pckh_lsp"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_pckh.compute_pckh_lsp"], ["", "def", "main", "(", ")", ":", "\n", "    ", "a", "=", "np", ".", "ones", "(", "(", "10", ",", "14", ",", "2", ")", ")", "\n", "b", "=", "np", ".", "ones", "(", "(", "10", ",", "14", ",", "2", ")", ")", "\n", "a", "[", ":", ",", "-", "2", "]", "=", "0", "\n", "b", "[", ":", ",", "-", "2", "]", "=", "0", "\n", "print", "(", "compute_pckh_lsp", "(", "a", ",", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.__init__": [[16, 41], ["object.__init__", "os.path.join", "collect_VIBE_3DPW_results.Submit.set_parent_tree", "collect_VIBE_3DPW_results.Submit.collect_3DPW_layout", "os.path.join", "os.path.join", "print", "collect_VIBE_3DPW_results.Submit.eval_HC", "collect_VIBE_3DPW_results.Submit.pack_results", "collect_VIBE_3DPW_results.Submit.eval_pve", "collect_VIBE_3DPW_results.Submit.run_official_evaluation", "os.path.join", "torch.from_numpy().float", "collect_VIBE_3DPW_results.Submit.get_results", "collect_VIBE_3DPW_results.Submit.results_matched_to_gt_bbox", "torch.from_numpy", "scipy.sparse.csr_matrix.toarray", "collect_VIBE_3DPW_results.Submit.read_pickle", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.set_parent_tree", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.collect_3DPW_layout", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.eval_HC", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.pack_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.eval_pve", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.run_official_evaluation", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.get_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.results_matched_to_gt_bbox", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.read_pickle"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Submit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "evaluation_mode", "=", "'nottracking'", "\n", "self", ".", "output_dir", "=", "'/export/home/suny/results/'", "\n", "self", ".", "results_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'VIBE_3DPW_results'", ")", "\n", "self", ".", "ds_root_dir", "=", "\"/export/home/suny/dataset/3DPW/sequenceFiles/\"", "\n", "self", ".", "project_dir", "=", "'/export/home/suny/CenterMesh/'", "\n", "self", ".", "set_parent_tree", "(", ")", "\n", "self", ".", "collect_3DPW_layout", "(", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'\u591a\u4ebanotrack-VIBE'", ")", "#\"\u591a\u4eba{}-VIBE-retracking\".format(self.evaluation_mode)) # \u53d6\u5bf9\u5e94\u4eba\u6570\u7ed3\u679c-\u53d6\u7b2c\u4e00\u7ed3\u679c\u586b\u8865", "\n", "self", ".", "eval_code_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "self", ".", "project_dir", ",", "'src/evaluation'", ")", ")", "\n", "print", "(", "'Initialization finished!'", ")", "\n", "\n", "self", ".", "joint_regressor", "=", "torch", ".", "from_numpy", "(", "csr_matrix", ".", "toarray", "(", "self", ".", "read_pickle", "(", "os", ".", "path", ".", "join", "(", "self", ".", "project_dir", ",", "'models/smpl_original/basicModel_f_lbs_10_207_0_v1.0.0.pkl'", ")", ")", "[", "'J_regressor'", "]", ")", ")", ".", "float", "(", ")", ".", "T", "\n", "\n", "self", ".", "eval_HC", "(", ")", "\n", "#if 1:#not os.path.exists(os.path.join(save_dir, 'results.zip')):", "\n", "if", "self", ".", "evaluation_mode", "==", "'tracking'", ":", "\n", "            ", "self", ".", "get_results", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "results_matched_to_gt_bbox", "(", ")", "\n", "", "params_results", "=", "self", ".", "pack_results", "(", "save_dir", ")", "\n", "\n", "self", ".", "eval_pve", "(", "save_dir", ",", "params_results", ")", "\n", "self", ".", "run_official_evaluation", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.set_parent_tree": [[42, 52], ["enumerate", "collect_VIBE_3DPW_results.Submit.parent_tree.append", "parent.append", "int"], "methods", ["None"], ["", "def", "set_parent_tree", "(", "self", ")", ":", "\n", "        ", "self", ".", "parents", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "9", ",", "9", ",", "12", ",", "13", ",", "14", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", "]", "\n", "self", ".", "sellect_joints", "=", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "16", ",", "17", ",", "18", ",", "19", "]", "\n", "self", ".", "parent_tree", "=", "[", "]", "\n", "for", "idx", ",", "joint_idx", "in", "enumerate", "(", "self", ".", "sellect_joints", ")", ":", "\n", "            ", "parent", "=", "[", "]", "\n", "while", "joint_idx", ">", "-", "1", ":", "\n", "                ", "parent", ".", "append", "(", "joint_idx", ")", "\n", "joint_idx", "=", "int", "(", "self", ".", "parents", "[", "joint_idx", "]", ")", "\n", "", "self", ".", "parent_tree", ".", "append", "(", "parent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.collect_3DPW_layout": [[53, 64], ["os.listdir", "os.listdir", "os.path.join", "action.strip", "os.path.join", "collect_VIBE_3DPW_results.Submit.read_pickle", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.read_pickle"], ["", "", "def", "collect_3DPW_layout", "(", "self", ")", ":", "\n", "        ", "self", ".", "layout", "=", "{", "}", "\n", "for", "split", "in", "os", ".", "listdir", "(", "self", ".", "ds_root_dir", ")", ":", "\n", "            ", "for", "action", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "ds_root_dir", ",", "split", ")", ")", ":", "\n", "                ", "action_name", "=", "action", ".", "strip", "(", "'.pkl'", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ds_root_dir", ",", "split", ",", "action", ")", "\n", "raw_labels", "=", "self", ".", "read_pickle", "(", "label_path", ")", "\n", "frame_num", "=", "len", "(", "raw_labels", "[", "'img_frame_ids'", "]", ")", "\n", "subject_num", "=", "len", "(", "raw_labels", "[", "'poses'", "]", ")", "\n", "pose2d", "=", "raw_labels", "[", "'poses2d'", "]", "\n", "self", ".", "layout", "[", "action_name", "]", "=", "[", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.get_gt_bbox": [[65, 76], ["enumerate", "numpy.array", "gt_bbox.append", "[].mean", "numpy.isnan", "gt_bbox[].append"], "methods", ["None"], ["", "", "", "def", "get_gt_bbox", "(", "self", ",", "pose2ds", ")", ":", "\n", "        ", "gt_bbox", "=", "[", "]", "\n", "for", "person_id", ",", "pose2d", "in", "enumerate", "(", "pose2ds", ")", ":", "\n", "            ", "gt_bbox", ".", "append", "(", "[", "]", ")", "\n", "for", "pose", "in", "pose2d", "[", ":", ",", ":", ",", ":", "8", "]", ":", "\n", "                ", "bbox", "=", "pose", "[", ":", "2", "]", "[", ":", ",", "pose", "[", "2", "]", ">", "0.05", "]", ".", "mean", "(", "-", "1", ")", "\n", "# if missing pose 2d, use the bbox of previous frame", "\n", "if", "np", ".", "isnan", "(", "bbox", "[", "0", "]", ")", ":", "\n", "                    ", "bbox", "=", "gt_bbox", "[", "person_id", "]", "[", "-", "1", "]", "\n", "", "gt_bbox", "[", "person_id", "]", ".", "append", "(", "bbox", ")", "\n", "", "", "return", "np", ".", "array", "(", "gt_bbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.get_first_frame_bbox": [[77, 82], ["range", "numpy.array", "len", "first_frame_bbox.append"], "methods", ["None"], ["", "def", "get_first_frame_bbox", "(", "self", ",", "bboxes", ")", ":", "\n", "        ", "first_frame_bbox", "=", "[", "]", "\n", "for", "person_id", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "first_frame_bbox", ".", "append", "(", "bboxes", "[", "person_id", "]", "[", "0", "]", ")", "\n", "", "return", "np", ".", "array", "(", "first_frame_bbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.match_first_bbox": [[83, 87], ["numpy.linalg.norm", "numpy.argmin"], "methods", ["None"], ["", "def", "match_first_bbox", "(", "self", ",", "bbox_pred", ",", "bbox_gt", ")", ":", "\n", "        ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "bbox_pred", "[", "None", "]", "-", "bbox_gt", ",", "axis", "=", "1", ")", "\n", "matched_id", "=", "np", ".", "argmin", "(", "dist", ")", "\n", "return", "matched_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.eval_pve": [[88, 97], ["collect_VIBE_3DPW_results.get_paths", "collect_VIBE_3DPW_results.get_data", "print", "numpy.mean", "evaluation.compute_error_verts", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.get_paths", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.get_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_error_verts"], ["", "def", "eval_pve", "(", "self", ",", "submit_dir", ",", "params_results", ")", ":", "\n", "# Get all the GT and submission paths in paired list form", "\n", "        ", "truth_dir", "=", "self", ".", "ds_root_dir", "\n", "fnames_gt", ",", "fnames_pred", "=", "get_paths", "(", "submit_dir", ",", "truth_dir", ")", "\n", "params_preds", ",", "params_gts", "=", "get_data", "(", "params_results", ",", "fnames_gt", ")", "\n", "params_preds", "[", ":", ",", ":", "3", "]", "=", "0", "\n", "params_gts", "[", ":", ",", ":", "3", "]", "=", "0", "\n", "PVE", "=", "np", ".", "mean", "(", "compute_error_verts", "(", "target_theta", "=", "torch", ".", "from_numpy", "(", "params_gts", ")", ".", "float", "(", ")", ",", "pred_theta", "=", "torch", ".", "from_numpy", "(", "params_preds", ")", ".", "float", "(", ")", ")", ")", "*", "1000", "\n", "print", "(", "'PVE: '", ",", "PVE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.eval_HC": [[98, 107], ["collect_VIBE_3DPW_results.get_paths", "collect_VIBE_3DPW_results.get_data", "print", "numpy.mean", "evaluation.compute_error_verts", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.get_paths", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.get_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.evaluation_matrix.compute_error_verts"], ["", "def", "eval_HC", "(", "self", ",", "submit_dir", ",", "params_results", ")", ":", "\n", "# Get all the GT and submission paths in paired list form", "\n", "        ", "truth_dir", "=", "self", ".", "ds_root_dir", "\n", "fnames_gt", ",", "fnames_pred", "=", "get_paths", "(", "submit_dir", ",", "truth_dir", ")", "\n", "params_preds", ",", "params_gts", "=", "get_data", "(", "params_results", ",", "fnames_gt", ")", "\n", "params_preds", "[", ":", ",", ":", "3", "]", "=", "0", "\n", "params_gts", "[", ":", ",", ":", "3", "]", "=", "0", "\n", "PVE", "=", "np", ".", "mean", "(", "compute_error_verts", "(", "target_theta", "=", "torch", ".", "from_numpy", "(", "params_gts", ")", ".", "float", "(", ")", ",", "pred_theta", "=", "torch", ".", "from_numpy", "(", "params_preds", ")", ".", "float", "(", ")", ")", ")", "*", "1000", "\n", "print", "(", "'PVE: '", ",", "PVE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.results_matched_to_gt_bbox": [[108, 161], ["collect_VIBE_3DPW_results.Submit.layout.items", "collect_VIBE_3DPW_results.Submit.get_gt_bbox", "os.path.join", "os.path.exists", "joblib.load", "joblib.load.keys", "range", "print", "collect_VIBE_3DPW_results.Submit.regress_kp3d_from_verts().numpy", "enumerate", "numpy.min", "frame_ids.append", "kp3d_results.append", "pose_results.append", "bbox_results.append", "verts_results.append", "shape_results.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "collect_VIBE_3DPW_results.Submit.regress_kp3d_from_verts", "numpy.linalg.norm", "numpy.array", "list", "frame_dist_dict.keys"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.get_gt_bbox", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.regress_kp3d_from_verts"], ["", "def", "results_matched_to_gt_bbox", "(", "self", ")", ":", "\n", "        ", "self", ".", "results", "=", "{", "}", "\n", "self", ".", "params_results", "=", "{", "}", "\n", "for", "action_name", ",", "details", "in", "self", ".", "layout", ".", "items", "(", ")", ":", "\n", "            ", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "=", "details", "\n", "gt_bbox", "=", "self", ".", "get_gt_bbox", "(", "pose2d", ")", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "results_dir", ",", "action_name", "+", "'_output.pkl'", ")", "# action_name, ", "\n", "#result_path = os.path.join(action_name+'_output.pkl')", "\n", "if", "os", ".", "path", ".", "exists", "(", "result_path", ")", ":", "\n", "                ", "result", "=", "joblib", ".", "load", "(", "result_path", ")", "\n", "self", ".", "results", "[", "action_name", "]", "=", "{", "}", "\n", "\n", "pred_results", "=", "{", "}", "\n", "for", "person_id", "in", "result", ".", "keys", "(", ")", ":", "\n", "                    ", "frame_ids", "=", "result", "[", "person_id", "]", "[", "'frame_ids'", "]", "\n", "bboxes", "=", "result", "[", "person_id", "]", "[", "'bboxes'", "]", "\n", "poses", "=", "result", "[", "person_id", "]", "[", "'pose'", "]", "\n", "verts", "=", "result", "[", "person_id", "]", "[", "'verts'", "]", "\n", "shapes", "=", "result", "[", "person_id", "]", "[", "'betas'", "]", "\n", "kp3ds", "=", "self", ".", "regress_kp3d_from_verts", "(", "verts", ")", ".", "numpy", "(", ")", "\n", "for", "idx", ",", "frame_id", "in", "enumerate", "(", "frame_ids", ")", ":", "\n", "                        ", "if", "frame_id", "not", "in", "pred_results", ":", "\n", "                            ", "pred_results", "[", "frame_id", "]", "=", "{", "}", "\n", "", "pred_results", "[", "frame_id", "]", "[", "person_id", "]", "=", "{", "}", "\n", "pred_results", "[", "frame_id", "]", "[", "person_id", "]", "[", "'bbox'", "]", "=", "bboxes", "[", "idx", "]", "[", ":", "2", "]", "#(cx,cy, w,h)", "\n", "pred_results", "[", "frame_id", "]", "[", "person_id", "]", "[", "'pose'", "]", "=", "poses", "[", "idx", "]", "\n", "pred_results", "[", "frame_id", "]", "[", "person_id", "]", "[", "'kp3d'", "]", "=", "kp3ds", "[", "idx", "]", "\n", "pred_results", "[", "frame_id", "]", "[", "person_id", "]", "[", "'verts'", "]", "=", "verts", "[", "idx", "]", "\n", "pred_results", "[", "frame_id", "]", "[", "person_id", "]", "[", "'shapes'", "]", "=", "shapes", "[", "idx", "]", "\n", "\n", "", "", "for", "subject_id", "in", "range", "(", "subject_num", ")", ":", "\n", "                    ", "frame_ids", ",", "kp3d_results", ",", "pose_results", ",", "shape_results", ",", "bbox_results", ",", "verts_results", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "gt_bbox_subj", "=", "gt_bbox", "[", "subject_id", "]", "\n", "for", "frame_id", "in", "pred_results", ":", "\n", "                        ", "bbox_gt", "=", "gt_bbox_subj", "[", "frame_id", "]", "\n", "frame_dist_dict", "=", "{", "}", "\n", "for", "pred_subject_id", "in", "pred_results", "[", "frame_id", "]", ":", "\n", "                            ", "bbox_pred", "=", "pred_results", "[", "frame_id", "]", "[", "pred_subject_id", "]", "[", "'bbox'", "]", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "bbox_pred", "-", "bbox_gt", ")", "\n", "frame_dist_dict", "[", "dist", "]", "=", "pred_subject_id", "\n", "", "closet_frame_dist", "=", "np", ".", "min", "(", "np", ".", "array", "(", "list", "(", "frame_dist_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "closet_subject_id", "=", "frame_dist_dict", "[", "closet_frame_dist", "]", "\n", "#print(closet_frame_dist, closet_subject_id, frame_dist_dict)", "\n", "frame_ids", ".", "append", "(", "frame_id", ")", "\n", "kp3d_results", ".", "append", "(", "pred_results", "[", "frame_id", "]", "[", "closet_subject_id", "]", "[", "'kp3d'", "]", ")", "\n", "pose_results", ".", "append", "(", "pred_results", "[", "frame_id", "]", "[", "closet_subject_id", "]", "[", "'pose'", "]", ")", "\n", "bbox_results", ".", "append", "(", "pred_results", "[", "frame_id", "]", "[", "closet_subject_id", "]", "[", "'bbox'", "]", ")", "\n", "verts_results", ".", "append", "(", "pred_results", "[", "frame_id", "]", "[", "closet_subject_id", "]", "[", "'verts'", "]", ")", "\n", "shape_results", ".", "append", "(", "pred_results", "[", "frame_id", "]", "[", "closet_subject_id", "]", "[", "'shapes'", "]", ")", "\n", "\n", "", "self", ".", "results", "[", "action_name", "]", "[", "subject_id", "]", "=", "[", "np", ".", "array", "(", "pose_results", ")", ",", "np", ".", "array", "(", "kp3d_results", ")", ",", "np", ".", "array", "(", "bbox_results", ")", ",", "np", ".", "array", "(", "frame_ids", ")", ",", "shape_results", ",", "verts_results", "]", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "result_path", ",", "'missing'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.re_tracking": [[162, 218], ["print", "numpy.min", "bbox_retracked.append", "pose_retracked.append", "kp3d_retracked.append", "frame_ids_retracked.append", "print", "person_id_list.remove", "len", "numpy.array", "collect_VIBE_3DPW_results.Submit.regress_kp3d_from_verts", "numpy.array", "numpy.min", "bbox_retracked.append", "pose_retracked.append", "kp3d_retracked.append", "frame_ids_retracked.append", "print", "person_id_list.remove", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.linalg.norm", "list", "len", "len", "len", "numpy.array", "collect_VIBE_3DPW_results.Submit.regress_kp3d_from_verts", "numpy.array", "first_frame_dist.keys", "len", "list", "len", "numpy.abs", "numpy.linalg.norm", "frame_dist.keys"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.regress_kp3d_from_verts", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.regress_kp3d_from_verts"], ["", "", "", "def", "re_tracking", "(", "self", ",", "data", ",", "first_frame_bbox_gt", ")", ":", "\n", "        ", "result", ",", "_", ",", "subject_num", ",", "action_name", ",", "person_id_list", ",", "frame_num", "=", "data", "\n", "pose_retracked", ",", "kp3d_retracked", ",", "frame_ids_retracked", ",", "bbox_retracked", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "first_frame_dist", "=", "{", "}", "\n", "# get the first frame matched person", "\n", "for", "person_id_pred", "in", "person_id_list", ":", "\n", "            ", "bboxes_pred", "=", "result", "[", "person_id_pred", "]", "[", "'bboxes'", "]", "\n", "frame_ids", "=", "result", "[", "person_id_pred", "]", "[", "'frame_ids'", "]", "\n", "if", "frame_ids", "[", "0", "]", "==", "0", ":", "\n", "                ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "bboxes_pred", "[", "0", "]", "[", ":", "2", "]", "-", "first_frame_bbox_gt", ")", "\n", "first_frame_dist", "[", "dist", "]", "=", "person_id_pred", "\n", "", "", "print", "(", "first_frame_dist", ")", "\n", "assert", "len", "(", "first_frame_dist", ")", "!=", "0", ",", "'Error! first frame no person!'", "\n", "closet_first_frame_dist", "=", "np", ".", "min", "(", "np", ".", "array", "(", "list", "(", "first_frame_dist", ".", "keys", "(", ")", ")", ")", ")", "\n", "closet_subject_id_first_frame", "=", "first_frame_dist", "[", "closet_first_frame_dist", "]", "\n", "\n", "bbox_retracked", ".", "append", "(", "result", "[", "closet_subject_id_first_frame", "]", "[", "'bboxes'", "]", "[", ":", ",", ":", "2", "]", ")", "\n", "pose_retracked", ".", "append", "(", "result", "[", "closet_subject_id_first_frame", "]", "[", "'pose'", "]", ")", "\n", "kp3d_retracked", ".", "append", "(", "self", ".", "regress_kp3d_from_verts", "(", "result", "[", "closet_subject_id_first_frame", "]", "[", "'verts'", "]", ")", ")", "\n", "frame_ids_retracked", ".", "append", "(", "np", ".", "array", "(", "result", "[", "closet_subject_id_first_frame", "]", "[", "'frame_ids'", "]", ")", ")", "\n", "print", "(", "'first frame subject_num {} with {} frames tracked'", ".", "format", "(", "closet_subject_id_first_frame", ",", "len", "(", "frame_ids_retracked", "[", "-", "1", "]", ")", ")", ")", "\n", "person_id_list", ".", "remove", "(", "closet_subject_id_first_frame", ")", "\n", "\n", "last_subject_bbox", "=", "result", "[", "closet_subject_id_first_frame", "]", "[", "'bboxes'", "]", "[", "-", "1", "]", "[", ":", "2", "]", "\n", "\n", "while", "frame_ids_retracked", "[", "-", "1", "]", "[", "-", "1", "]", "<", "frame_num", "-", "1", "and", "len", "(", "person_id_list", ")", ">", "0", ":", "\n", "            ", "last_frame_id", "=", "frame_ids_retracked", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "\n", "tracking_margin", "=", "10", "\n", "frame_dist", "=", "{", "}", "\n", "while", "len", "(", "frame_dist", ")", "==", "0", ":", "\n", "                ", "for", "person_id_pred", "in", "person_id_list", ":", "\n", "                    ", "bboxes_pred", "=", "result", "[", "person_id_pred", "]", "[", "'bboxes'", "]", "\n", "frame_ids", "=", "result", "[", "person_id_pred", "]", "[", "'frame_ids'", "]", "\n", "if", "np", ".", "abs", "(", "frame_ids", "[", "0", "]", "-", "last_frame_id", ")", "<", "tracking_margin", ":", "\n", "                        ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "bboxes_pred", "[", "0", "]", "[", ":", "2", "]", "-", "first_frame_bbox_gt", ")", "\n", "frame_dist", "[", "dist", "]", "=", "person_id_pred", "\n", "", "", "if", "len", "(", "frame_dist", ")", "==", "0", ":", "\n", "                    ", "tracking_margin", "+=", "20", "\n", "#assert len(frame_dist)!=0, 'Error! tracking loss!'", "\n", "\n", "", "", "closet_frame_dist", "=", "np", ".", "min", "(", "np", ".", "array", "(", "list", "(", "frame_dist", ".", "keys", "(", ")", ")", ")", ")", "\n", "closet_subject_id", "=", "frame_dist", "[", "closet_frame_dist", "]", "\n", "\n", "bbox_retracked", ".", "append", "(", "result", "[", "closet_subject_id", "]", "[", "'bboxes'", "]", "[", ":", ",", ":", "2", "]", ")", "\n", "pose_retracked", ".", "append", "(", "result", "[", "closet_subject_id", "]", "[", "'pose'", "]", ")", "\n", "kp3d_retracked", ".", "append", "(", "self", ".", "regress_kp3d_from_verts", "(", "result", "[", "closet_subject_id", "]", "[", "'verts'", "]", ")", ")", "\n", "frame_ids_retracked", ".", "append", "(", "np", ".", "array", "(", "result", "[", "closet_subject_id", "]", "[", "'frame_ids'", "]", ")", ")", "\n", "print", "(", "'latest frame subject_num {} with {} frames tracked, from {} to {}'", ".", "format", "(", "closet_subject_id", ",", "len", "(", "frame_ids_retracked", "[", "-", "1", "]", ")", ",", "frame_ids_retracked", "[", "-", "1", "]", "[", "0", "]", ",", "frame_ids_retracked", "[", "-", "1", "]", "[", "-", "1", "]", ")", ")", "\n", "person_id_list", ".", "remove", "(", "closet_subject_id", ")", "\n", "\n", "", "results_retracked", "=", "[", "np", ".", "concatenate", "(", "pose_retracked", ",", "0", ")", ",", "np", ".", "concatenate", "(", "kp3d_retracked", ",", "0", ")", ",", "np", ".", "concatenate", "(", "bbox_retracked", ",", "0", ")", ",", "np", ".", "concatenate", "(", "frame_ids_retracked", ",", "0", ")", "]", "\n", "return", "results_retracked", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.match_tracking": [[220, 262], ["enumerate", "enumerate", "numpy.array().astype", "print", "len", "print", "numpy.concatenate", "numpy.array", "numpy.argsort", "collect_VIBE_3DPW_results.Submit.match_first_bbox", "collect_VIBE_3DPW_results.Submit.regress_kp3d_from_verts", "numpy.array().astype.append", "results.append", "person_id_list.remove", "print", "print", "collect_VIBE_3DPW_results.Submit.re_tracking", "numpy.array().astype.append", "results.append", "numpy.array", "numpy.array", "numpy.array", "len", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.match_first_bbox", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.regress_kp3d_from_verts", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.re_tracking"], ["", "def", "match_tracking", "(", "self", ",", "data", ")", ":", "\n", "        ", "result", ",", "first_frame_bboxes_gt", ",", "subject_num", ",", "action_name", ",", "person_id_list", ",", "frame_num", "=", "data", "\n", "#sellect the top N detected person's results on more frames", "\n", "target_ids", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "[", "len", "(", "result", "[", "person_id", "]", "[", "'frame_ids'", "]", ")", "for", "person_id", "in", "person_id_list", "]", ")", ")", "[", ":", ":", "-", "1", "]", "[", ":", "subject_num", "]", "\n", "# if the number of detected person is less than the number of annotated target, fill up the empty with the last/first id detected.", "\n", "while", "len", "(", "target_ids", ")", "<", "subject_num", ":", "\n", "            ", "print", "(", "'detection failed on one person'", ",", "action_name", ")", "\n", "target_ids", "=", "np", ".", "concatenate", "(", "[", "target_ids", ",", "np", ".", "array", "(", "[", "target_ids", "[", "-", "1", "]", "]", ")", "]", ")", "\n", "\n", "", "person_id_sellected", "=", "np", ".", "array", "(", "person_id_list", ")", "[", "target_ids", "]", "\n", "frame_ids_sellected", "=", "[", "result", "[", "person_id", "]", "[", "'frame_ids'", "]", "for", "person_id", "in", "person_id_sellected", "]", "\n", "person_ids_matched", ",", "results", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "person_id", "in", "enumerate", "(", "person_id_sellected", ")", ":", "\n", "            ", "frame_ids", "=", "frame_ids_sellected", "[", "idx", "]", "\n", "if", "frame_ids", "[", "0", "]", "==", "0", "and", "len", "(", "frame_ids", ")", ">", "frame_num", "-", "2", ":", "\n", "                ", "first_frame_bbox_pred", "=", "result", "[", "person_id", "]", "[", "'bboxes'", "]", "[", "0", "]", "[", ":", "2", "]", "\n", "person_id_matched", "=", "self", ".", "match_first_bbox", "(", "first_frame_bbox_pred", ",", "first_frame_bboxes_gt", ")", "\n", "verts", "=", "result", "[", "person_id", "]", "[", "'verts'", "]", "\n", "kp3d_results", "=", "self", ".", "regress_kp3d_from_verts", "(", "verts", ")", "\n", "person_ids_matched", ".", "append", "(", "int", "(", "person_id_matched", ")", ")", "\n", "results", ".", "append", "(", "[", "result", "[", "person_id", "]", "[", "'pose'", "]", ",", "kp3d_results", ",", "result", "[", "person_id", "]", "[", "'bboxes'", "]", "[", ":", ",", ":", "2", "]", ",", "frame_ids", "]", ")", "\n", "del", "result", "[", "person_id", "]", "\n", "person_id_list", ".", "remove", "(", "person_id", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'before retracking, frame number tracked by YOLO is'", ",", "len", "(", "result", "[", "person_id", "]", "[", "'frame_ids'", "]", ")", ",", "',from'", ",", "result", "[", "person_id", "]", "[", "'frame_ids'", "]", "[", "0", "]", ",", "'to'", ",", "result", "[", "person_id", "]", "[", "'frame_ids'", "]", "[", "-", "1", "]", ",", "',and the total frame number of {} is {}'", ".", "format", "(", "frame_num", ",", "action_name", ")", ")", "\n", "\n", "#\u5bf9\u4e8e\u6ca1\u6709tracking\u6210\u529f\u7684\uff0c\u901a\u8fc7\u62fc\u63a5\u5404\u4e2atracking\u5c0f\u6bb5\u7ed3\u679c\uff0c\u83b7\u5f97\u5b8c\u6574\u7684tracking\u7ed3\u679c", "\n", "", "", "for", "person_id", ",", "first_frame_bbox_gt", "in", "enumerate", "(", "first_frame_bboxes_gt", ")", ":", "\n", "            ", "if", "person_id", "in", "person_ids_matched", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Re_tracking person'", ",", "person_id", ",", "'of'", ",", "action_name", ")", "\n", "results_retracked", "=", "self", ".", "re_tracking", "(", "data", ",", "first_frame_bbox_gt", ")", "\n", "person_ids_matched", ".", "append", "(", "person_id", ")", "\n", "results", ".", "append", "(", "results_retracked", ")", "\n", "\n", "", "", "person_ids_matched", "=", "np", ".", "array", "(", "person_ids_matched", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "print", "(", "person_ids_matched", ")", "\n", "return", "person_ids_matched", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.get_results": [[263, 281], ["collect_VIBE_3DPW_results.Submit.layout.items", "collect_VIBE_3DPW_results.Submit.get_gt_bbox", "collect_VIBE_3DPW_results.Submit.get_first_frame_bbox", "os.path.join", "os.path.exists", "joblib.load", "list", "collect_VIBE_3DPW_results.Submit.match_tracking", "zip", "print", "joblib.load.keys"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.get_gt_bbox", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.get_first_frame_bbox", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.match_tracking", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "self", ".", "results", "=", "{", "}", "\n", "for", "action_name", ",", "details", "in", "self", ".", "layout", ".", "items", "(", ")", ":", "\n", "            ", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "=", "details", "\n", "gt_bbox", "=", "self", ".", "get_gt_bbox", "(", "pose2d", ")", "\n", "first_frame_bboxes_gt", "=", "self", ".", "get_first_frame_bbox", "(", "gt_bbox", ")", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "results_dir", ",", "action_name", "+", "'_output.pkl'", ")", "# action_name, ", "\n", "#result_path = os.path.join(action_name+'_output.pkl')", "\n", "if", "os", ".", "path", ".", "exists", "(", "result_path", ")", ":", "\n", "                ", "result", "=", "joblib", ".", "load", "(", "result_path", ")", "\n", "self", ".", "results", "[", "action_name", "]", "=", "{", "}", "\n", "person_id_list", "=", "list", "(", "result", ".", "keys", "(", ")", ")", "\n", "person_ids_matched", ",", "results", "=", "self", ".", "match_tracking", "(", "(", "result", ",", "first_frame_bboxes_gt", ",", "subject_num", ",", "action_name", ",", "person_id_list", ",", "frame_num", ")", ")", "\n", "for", "person_id_matched", ",", "result", "in", "zip", "(", "person_ids_matched", ",", "results", ")", ":", "\n", "                    ", "self", ".", "results", "[", "action_name", "]", "[", "person_id_matched", "]", "=", "result", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "result_path", ",", "'missing'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.regress_kp3d_from_verts": [[283, 291], ["torch.from_numpy", "torch.matmul", "torch.matmul", "torch.matmul", "torch.stack"], "methods", ["None"], ["", "", "", "def", "regress_kp3d_from_verts", "(", "self", ",", "verts", ")", ":", "\n", "        ", "verts", "=", "torch", ".", "from_numpy", "(", "verts", ")", "\n", "joint_x", "=", "torch", ".", "matmul", "(", "verts", "[", ":", ",", ":", ",", "0", "]", ",", "self", ".", "joint_regressor", ")", "\n", "joint_y", "=", "torch", ".", "matmul", "(", "verts", "[", ":", ",", ":", ",", "1", "]", ",", "self", ".", "joint_regressor", ")", "\n", "joint_z", "=", "torch", ".", "matmul", "(", "verts", "[", ":", ",", ":", ",", "2", "]", ",", "self", ".", "joint_regressor", ")", "\n", "\n", "joints", "=", "torch", ".", "stack", "(", "[", "joint_x", ",", "joint_y", ",", "joint_z", "]", ",", "dim", "=", "2", ")", "\n", "return", "joints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.pack_results": [[292, 330], ["os.makedirs", "enumerate", "print", "numpy.savez", "collect_VIBE_3DPW_results.Submit.write_results", "collect_VIBE_3DPW_results.Submit.zip_folder", "os.makedirs", "len", "numpy.zeros", "collect_VIBE_3DPW_results.Submit.results[].items", "os.path.join", "os.path.join", "list", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "print", "int", "pose_preds.copy", "numpy.array", "numpy.array", "collect_VIBE_3DPW_results.Submit.results[].keys", "collect_VIBE_3DPW_results.Submit.process_params", "pose_result.append", "numpy.array", "numpy.array", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.write_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.zip_folder", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.process_params"], ["", "def", "pack_results", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "results", "=", "{", "}", "\n", "params_results", "=", "{", "}", "\n", "bbox_results", "=", "{", "}", "\n", "for", "split", "in", "[", "'train'", ",", "'validation'", ",", "'test'", "]", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "split", ")", ",", "exist_ok", "=", "True", ")", "\n", "results", "[", "split", "]", "=", "{", "}", "\n", "", "for", "action_name", "in", "self", ".", "results", ":", "\n", "            ", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "=", "self", ".", "layout", "[", "action_name", "]", "\n", "subject_num", "=", "len", "(", "list", "(", "self", ".", "results", "[", "action_name", "]", ".", "keys", "(", ")", ")", ")", "\n", "results", "[", "split", "]", "[", "action_name", "]", "=", "[", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "24", ",", "3", ")", ")", ",", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "9", ",", "3", ",", "3", ")", ")", "]", "\n", "bbox_results", "[", "action_name", "]", "=", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "2", ")", ")", "\n", "params_results", "[", "action_name", "]", "=", "[", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "72", ")", ")", ",", "np", ".", "zeros", "(", "(", "subject_num", ",", "frame_num", ",", "10", ")", ")", "]", "\n", "\n", "", "for", "action_id", ",", "action_name", "in", "enumerate", "(", "self", ".", "results", ")", ":", "\n", "            ", "for", "subject_id", ",", "[", "pose_preds", ",", "kp3d_smpl", ",", "bboxes", ",", "frame_ids", ",", "shape_results", ",", "verts_results", "]", "in", "self", ".", "results", "[", "action_name", "]", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "'processing '", ",", "action_name", ",", "'{}/{}'", ".", "format", "(", "action_id", ",", "60", ")", ")", "\n", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "=", "self", ".", "layout", "[", "action_name", "]", "\n", "subject_id", "=", "int", "(", "subject_id", ")", "\n", "#print(action_name,subject_id,np.array(frame_ids))", "\n", "params_results", "[", "action_name", "]", "[", "0", "]", "[", "subject_id", "]", "[", "np", ".", "array", "(", "frame_ids", ")", "]", "=", "pose_preds", ".", "copy", "(", ")", "\n", "params_results", "[", "action_name", "]", "[", "1", "]", "[", "subject_id", "]", "[", "np", ".", "array", "(", "frame_ids", ")", "]", "=", "shape_results", "\n", "pose_result", "=", "[", "]", "\n", "for", "pose_pred", "in", "pose_preds", ":", "\n", "                    ", "params_processed", "=", "self", ".", "process_params", "(", "torch", ".", "from_numpy", "(", "pose_pred", ")", ")", "\n", "pose_result", ".", "append", "(", "params_processed", ")", "\n", "", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "subject_id", "]", "[", "np", ".", "array", "(", "frame_ids", ")", "]", "=", "kp3d_smpl", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "subject_id", "]", "[", "np", ".", "array", "(", "frame_ids", ")", "]", "=", "np", ".", "array", "(", "pose_result", ")", "\n", "bbox_results", "[", "action_name", "]", "[", "subject_id", "]", "[", "np", ".", "array", "(", "frame_ids", ")", "]", "=", "np", ".", "array", "(", "bboxes", ")", "\n", "\n", "#self.write_results(results, save_dir)", "\n", "", "", "print", "(", "'Saving results in '", ",", "save_dir", ")", "\n", "#results, bbox_results = self.fill_empty(results, bbox_results)", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'bbox_tracked.npz'", ")", ",", "bbox", "=", "bbox_results", ")", "\n", "self", ".", "write_results", "(", "results", ",", "save_dir", ")", "\n", "self", ".", "zip_folder", "(", "save_dir", ")", "\n", "return", "params_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.fill_empty": [[331, 355], ["range", "range", "print", "missing_frame.append", "len", "numpy.where", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "fill_empty", "(", "self", ",", "results", ",", "bbox_results", ")", ":", "\n", "        ", "for", "action_name", "in", "self", ".", "layout", ":", "\n", "            ", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "=", "self", ".", "layout", "[", "action_name", "]", "\n", "kp3ds_mat", ",", "params_mat", "=", "results", "[", "split", "]", "[", "action_name", "]", "\n", "for", "subject_id", "in", "range", "(", "kp3ds_mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "missing_frame", "=", "[", "]", "\n", "for", "frame_id", "in", "range", "(", "frame_num", ")", ":", "\n", "                    ", "empty_flag", "=", "kp3ds_mat", "[", "subject_id", ",", "frame_id", ",", "0", ",", "0", "]", "==", "0", "\n", "if", "empty_flag", ":", "\n", "                        ", "missing_frame", ".", "append", "(", "frame_id", ")", "\n", "#print(split,action_name,subject_id,frame_id,'is missing..')", "\n", "if", "frame_id", "!=", "0", ":", "\n", "#print('fill the empty using the results of previous frames')", "\n", "                            ", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "-", "1", "]", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "-", "1", "]", "\n", "bbox_results", "[", "action_name", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "bbox_results", "[", "action_name", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "-", "1", "]", "\n", "", "else", ":", "\n", "#print('special case, the first frame results missing')", "\n", "                            ", "valid_id", "=", "np", ".", "where", "(", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", "]", "[", ":", ",", "0", ",", "0", "]", "!=", "0", ")", "[", "0", "]", "[", "0", "]", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "results", "[", "split", "]", "[", "action_name", "]", "[", "0", "]", "[", "int", "(", "subject_id", ")", ",", "valid_id", "]", "\n", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "results", "[", "split", "]", "[", "action_name", "]", "[", "1", "]", "[", "int", "(", "subject_id", ")", ",", "valid_id", "]", "\n", "bbox_results", "[", "action_name", "]", "[", "int", "(", "subject_id", ")", ",", "frame_id", "]", "=", "bbox_results", "[", "action_name", "]", "[", "int", "(", "subject_id", ")", ",", "valid_id", "]", "\n", "", "", "", "print", "(", "split", ",", "action_name", ",", "subject_id", ",", "'missing {} frames:'", ".", "format", "(", "len", "(", "missing_frame", ")", ")", ",", "missing_frame", ")", "\n", "", "", "return", "results", ",", "bbox_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.process_params": [[356, 375], ["batch_rodrigues().numpy", "enumerate", "numpy.array", "numpy.eye", "numpy.array.append", "collect_VIBE_3DPW_results.batch_rodrigues", "numpy.dot", "params.reshape"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues"], ["", "def", "process_params", "(", "self", ",", "params", ")", ":", "\n", "        ", "'''\n        calculate absolute rotation matrix in the global coordinate frame of K body parts. \n        The rotation is the map from the local bone coordinate frame to the global one.\n        K= 9 parts in the following order: \n        root (JOINT 0) , left hip  (JOINT 1), right hip (JOINT 2), left knee (JOINT 4), right knee (JOINT 5), \n        left shoulder (JOINT 16), right shoulder (JOINT 17), left elbow (JOINT 18), right elbow (JOINT 19).\n        parent kinetic tree [-1,  0,  0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9,  9, 12, 13, 14, 16, 17, 18, 19, 20, 21]\n        '''", "\n", "rotation_matrix", "=", "batch_rodrigues", "(", "params", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", ".", "numpy", "(", ")", "\n", "rotation_final", "=", "[", "]", "\n", "for", "idx", ",", "sellected_idx", "in", "enumerate", "(", "self", ".", "sellect_joints", ")", ":", "\n", "            ", "rotation_global", "=", "np", ".", "eye", "(", "3", ")", "#init_matrix", "\n", "parents", "=", "self", ".", "parent_tree", "[", "idx", "]", "\n", "for", "parent_idx", "in", "parents", ":", "\n", "                ", "rotation_global", "=", "np", ".", "dot", "(", "rotation_matrix", "[", "parent_idx", "]", ",", "rotation_global", ")", "\n", "", "rotation_final", ".", "append", "(", "rotation_global", ")", "\n", "", "rotation_final", "=", "np", ".", "array", "(", "rotation_final", ")", "\n", "return", "rotation_final", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.write_results": [[376, 383], ["os.path.join", "collect_VIBE_3DPW_results.Submit.save_pickle"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.save_pickle"], ["", "def", "write_results", "(", "self", ",", "results", ",", "save_dir", ")", ":", "\n", "        ", "for", "split", "in", "results", ":", "\n", "            ", "for", "action", "in", "results", "[", "split", "]", ":", "\n", "                ", "kp3d_result", ",", "rotation_result", "=", "results", "[", "split", "]", "[", "action", "]", "\n", "save_dict", "=", "{", "'jointPositions'", ":", "kp3d_result", ",", "'orientations'", ":", "rotation_result", "}", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "split", ",", "action", "+", "'.pkl'", ")", "\n", "self", ".", "save_pickle", "(", "save_dict", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.zip_folder": [[384, 387], ["os.chdir", "os.system"], "methods", ["None"], ["", "", "", "def", "zip_folder", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "os", ".", "chdir", "(", "save_dir", ")", "\n", "os", ".", "system", "(", "'zip -r results.zip *'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.run_official_evaluation": [[388, 392], ["os.chdir", "os.path.join", "os.system"], "methods", ["None"], ["", "def", "run_official_evaluation", "(", "self", ",", "save_dir", ")", ":", "\n", "        ", "os", ".", "chdir", "(", "self", ".", "eval_code_dir", ")", "\n", "truth_dir", "=", "os", ".", "path", ".", "join", "(", "'/export/home/suny/dataset'", ",", "'3DPW'", ",", "'sequenceFiles'", ")", "\n", "os", ".", "system", "(", "'python pw3d_eval/evaluate.py {}'", ".", "format", "(", "save_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.print_results": [[393, 396], ["print", "print", "numpy.concatenate().mean", "numpy.concatenate().mean", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "print_results", "(", "self", ",", "MPJPE", ",", "PAMPJPE", ")", ":", "\n", "        ", "print", "(", "'MPJPE'", ",", "np", ".", "concatenate", "(", "MPJPE", ",", "axis", "=", "0", ")", ".", "mean", "(", ")", ")", "\n", "print", "(", "'PAMPJPE'", ",", "np", ".", "concatenate", "(", "PAMPJPE", ",", "axis", "=", "0", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.read_pickle": [[397, 399], ["pickle.load", "pickle.load", "pickle.load", "pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "read_pickle", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "open", "(", "file_path", ",", "'rb'", ")", ",", "encoding", "=", "'iso-8859-1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.save_pickle": [[400, 403], ["open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump"], ["", "def", "save_pickle", "(", "self", ",", "content", ",", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "content", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.get_paths": [[404, 425], ["sorted", "sorted", "len", "len", "sorted", "sorted", "glob.glob", "glob.glob", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "get_paths", "(", "submit_dir", ",", "truth_dir", ")", ":", "\n", "    ", "\"\"\"\n    submit_dir: The location of the submit directory\n    truth_dir: The location of the truth directory\n    Return: two lists\n            fnames_gt : the list of all files in ground truth folder\n            fnames_pred : the list of all files in the predicted folder\n    \"\"\"", "\n", "fnames_gt", "=", "[", "]", "\n", "fnames_pred", "=", "[", "]", "\n", "\n", "keys", "=", "[", "'train'", ",", "'validation'", ",", "'test'", "]", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "fnames_gt_temp", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "truth_dir", ",", "key", ",", "\"\"", ")", "+", "\"*.pkl\"", ")", ")", "\n", "fnames_pred_temp", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "submit_dir", ",", "key", ",", "\"\"", ")", "+", "\"*.pkl\"", ")", ")", "\n", "fnames_gt", "=", "fnames_gt", "+", "fnames_gt_temp", "\n", "fnames_pred", "=", "fnames_pred", "+", "fnames_pred_temp", "\n", "\n", "", "assert", "len", "(", "fnames_gt", ")", "==", "len", "(", "fnames_pred", ")", "\n", "return", "sorted", "(", "fnames_gt", ")", ",", "sorted", "(", "fnames_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.check_valid_inds": [[426, 447], ["numpy.mean", "numpy.logical_not", "numpy.array().astype", "numpy.logical_and", "numpy.array", "numpy.mean", "numpy.abs", "numpy.array", "numpy.where"], "function", ["None"], ["", "def", "check_valid_inds", "(", "poses2d", ",", "camposes_valid", ")", ":", "\n", "    ", "\"\"\"\n    Computes the indices where further computations are required\n    :param poses2d: N x 18 x 3 array of 2d Poses\n    :param camposes_valid: N x 1 array of indices where camera poses are valid\n    :return: array of indices indicating frame ids in the sequence which are to be evaluated\n    \"\"\"", "\n", "\n", "# find all indices in the N sequences where the sum of the 18x3 array is not zero", "\n", "# N, numpy array", "\n", "poses2d_mean", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "poses2d", ")", ",", "axis", "=", "2", ")", ",", "axis", "=", "1", ")", "\n", "poses2d_bool", "=", "poses2d_mean", "==", "0", "\n", "poses2d_bool_inv", "=", "np", ".", "logical_not", "(", "poses2d_bool", ")", "\n", "\n", "# find all the indices where the camposes are valid", "\n", "camposes_valid", "=", "np", ".", "array", "(", "camposes_valid", ")", ".", "astype", "(", "'bool'", ")", "\n", "\n", "final", "=", "np", ".", "logical_and", "(", "poses2d_bool_inv", ",", "camposes_valid", ")", "\n", "indices", "=", "np", ".", "array", "(", "np", ".", "where", "(", "final", "==", "True", ")", "[", "0", "]", ")", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.get_data": [[448, 493], ["numpy.concatenate", "numpy.concatenate", "pickle.load", "range", "open", "len", "collect_VIBE_3DPW_results.check_valid_inds", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.tile", "[].strip", "numpy.concatenate", "numpy.concatenate", "np.concatenate.append", "np.concatenate.append", "path_gt.split"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.check_valid_inds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "get_data", "(", "params_results", ",", "paths_gt", ")", ":", "\n", "    ", "\"\"\"\n    The function reads all the ground truth.\n    \"\"\"", "\n", "params_gts", ",", "params_preds", "=", "[", "]", ",", "[", "]", "\n", "\n", "# construct the data structures -", "\n", "for", "path_gt", "in", "paths_gt", ":", "\n", "        ", "data_gt", "=", "pkl", ".", "load", "(", "open", "(", "path_gt", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "genders", "=", "data_gt", "[", "'genders'", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "genders", ")", ")", ":", "\n", "            ", "poses2d_gt", "=", "data_gt", "[", "'poses2d'", "]", "\n", "poses2d_gt_i", "=", "poses2d_gt", "[", "i", "]", "\n", "\n", "camposes_valid", "=", "data_gt", "[", "'campose_valid'", "]", "\n", "camposes_valid_i", "=", "camposes_valid", "[", "i", "]", "\n", "\n", "valid_indices", "=", "check_valid_inds", "(", "poses2d_gt_i", ",", "camposes_valid_i", ")", "\n", "# Get the ground truth SMPL body parameters - poses, betas and translation parameters", "\n", "pose_params", "=", "np", ".", "array", "(", "data_gt", "[", "'poses'", "]", ")", "\n", "pose_params", "=", "pose_params", "[", "i", ",", "valid_indices", ",", ":", "]", "\n", "\n", "shape_params", "=", "np", ".", "array", "(", "data_gt", "[", "'betas'", "]", "[", "i", "]", ")", "\n", "shape_params", "=", "np", ".", "expand_dims", "(", "shape_params", ",", "0", ")", "\n", "shape_params", "=", "shape_params", "[", ":", ",", ":", "10", "]", "\n", "shape_params", "=", "np", ".", "tile", "(", "shape_params", ",", "(", "pose_params", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "action_name", "=", "path_gt", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "strip", "(", "'.pkl'", ")", "\n", "#params_results[action_name][0][subject_id][np.array(frame_ids)] = pose_preds", "\n", "#params_results[action_name][1][subject_id][np.array(frame_ids)] = shape_results", "\n", "pose_pred", "=", "params_results", "[", "action_name", "]", "[", "0", "]", "[", "i", "]", "[", "valid_indices", "]", "\n", "shape_pred", "=", "params_results", "[", "action_name", "]", "[", "1", "]", "[", "i", "]", "[", "valid_indices", "]", "\n", "\n", "params_gt", "=", "np", ".", "concatenate", "(", "[", "pose_params", ",", "shape_params", "]", ",", "1", ")", "\n", "params_pred", "=", "np", ".", "concatenate", "(", "[", "pose_pred", ",", "shape_pred", "]", ",", "1", ")", "\n", "\n", "params_gts", ".", "append", "(", "params_gt", ")", "\n", "params_preds", ".", "append", "(", "params_pred", ")", "\n", "\n", "", "", "params_gts", "=", "np", ".", "concatenate", "(", "params_gts", ",", "0", ")", "\n", "params_preds", "=", "np", ".", "concatenate", "(", "params_preds", ",", "0", ")", "\n", "\n", "\n", "return", "params_preds", ",", "params_gts", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.batch_rodrigues": [[494, 526], ["torch.norm", "torch.unsqueeze", "torch.unsqueeze", "torch.split", "torch.zeros", "torch.zeros", "torch.cat().view", "torch.eye().unsqueeze", "torch.cos", "torch.sin", "torch.cat", "torch.eye", "torch.bmm"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "batch_rodrigues", "(", "rot_vecs", ",", "epsilon", "=", "1e-8", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "''' Calculates the rotation matrices for a batch of rotation vectors\n        Parameters\n        ----------\n        rot_vecs: torch.tensor Nx3\n            array of N axis-angle vectors\n        Returns\n        -------\n        R: torch.tensor Nx3x3\n            The rotation matrices for the given axis-angle parameters\n    '''", "\n", "\n", "batch_size", "=", "rot_vecs", ".", "shape", "[", "0", "]", "\n", "device", "=", "rot_vecs", ".", "device", "\n", "\n", "angle", "=", "torch", ".", "norm", "(", "rot_vecs", "+", "1e-8", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "rot_dir", "=", "rot_vecs", "/", "angle", "\n", "\n", "cos", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "cos", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "sin", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "sin", "(", "angle", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Bx1 arrays", "\n", "rx", ",", "ry", ",", "rz", "=", "torch", ".", "split", "(", "rot_dir", ",", "1", ",", "dim", "=", "1", ")", "\n", "K", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "3", ",", "3", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "K", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "-", "rz", ",", "ry", ",", "rz", ",", "zeros", ",", "-", "rx", ",", "-", "ry", ",", "rx", ",", "zeros", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "(", "batch_size", ",", "3", ",", "3", ")", ")", "\n", "\n", "ident", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "rot_mat", "=", "ident", "+", "sin", "*", "K", "+", "(", "1", "-", "cos", ")", "*", "torch", ".", "bmm", "(", "K", ",", "K", ")", "\n", "return", "rot_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.__init__": [[21, 32], ["Base.__init__", "eval_CRMH_results.Evaluate.set_up_smplx", "eval_CRMH_results.Evaluate.load_gt", "eval_CRMH_results.Evaluate.collect_results", "print", "eval_CRMH_results.Evaluate.test_3doh50k", "eval_CRMH_results.Evaluate.test_3dpw_hc"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.load_gt", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.collect_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.test_3doh50k", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.test_3dpw_hc"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Evaluate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "set_up_smplx", "(", ")", "\n", "self", ".", "dataset_eval_crmh", "=", "'pw3d-hc'", "\n", "self", ".", "load_gt", "(", ")", "\n", "self", ".", "collect_results", "(", ")", "\n", "print", "(", "'Initialization finished!'", ")", "\n", "if", "self", ".", "dataset_eval_crmh", "==", "'3DOH50K'", ":", "\n", "            ", "self", ".", "test_3doh50k", "(", ")", "\n", "", "elif", "self", ".", "dataset_eval_crmh", "==", "'pw3d-hc'", ":", "\n", "            ", "self", ".", "test_3dpw_hc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.collect_results": [[33, 39], ["print", "numpy.load", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "", "def", "collect_results", "(", "self", ")", ":", "\n", "        ", "print", "(", "'loading results..'", ")", "\n", "if", "self", ".", "dataset_eval_crmh", "==", "'3DOH50K'", ":", "\n", "            ", "self", ".", "results", "=", "np", ".", "load", "(", "\"/export/home/suny/multiperson/mmdetection/3DOH50K_test_results.npz\"", ",", "allow_pickle", "=", "True", ")", "[", "'results'", "]", "[", "(", ")", "]", "\n", "", "elif", "self", ".", "dataset_eval_crmh", "==", "'pw3d-hc'", ":", "\n", "            ", "self", ".", "results", "=", "np", ".", "load", "(", "\"/export/home/suny/dataset/CRMH_results.npz\"", ",", "allow_pickle", "=", "True", ")", "[", "'results'", "]", "[", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.test_3doh50k": [[40, 64], ["eval_CRMH_results.Evaluate.smplx.J_regressor.cpu", "eval_CRMH_results.Evaluate.annotations.items", "print", "enumerate", "numpy.argmax", "torch.from_numpy", "real_3d.append", "predicts.append", "torch.stack", "torch.stack", "eval_CRMH_results.Evaluate.calc_mpjpe().float().cpu().numpy", "eval_CRMH_results.Evaluate.calc_pampjpe().float().cpu().numpy", "print", "confidences.append", "numpy.array", "torch.einsum", "abs_error.mean", "rt_error.mean", "numpy.array", "eval_CRMH_results.Evaluate.calc_mpjpe().float().cpu", "eval_CRMH_results.Evaluate.calc_pampjpe().float().cpu", "eval_CRMH_results.Evaluate.calc_mpjpe().float", "eval_CRMH_results.Evaluate.calc_pampjpe().float", "eval_CRMH_results.Evaluate.calc_mpjpe", "eval_CRMH_results.Evaluate.calc_pampjpe"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_mpjpe", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pampjpe"], ["", "", "def", "test_3doh50k", "(", "self", ")", ":", "\n", "        ", "real_3d", ",", "predicts", "=", "[", "]", ",", "[", "]", "\n", "J_regressor", "=", "self", ".", "smplx", ".", "J_regressor", ".", "cpu", "(", ")", "\n", "for", "img_name", ",", "annot", "in", "self", ".", "annotations", ".", "items", "(", ")", ":", "\n", "            ", "img_name", "+=", "'.jpg'", "\n", "if", "img_name", "not", "in", "self", ".", "results", ":", "\n", "                ", "print", "(", "'missing {}'", ".", "format", "(", "img_name", ")", ")", "\n", "continue", "\n", "", "pred_vertices", "=", "self", ".", "results", "[", "img_name", "]", "[", "'verts'", "]", "\n", "bboxes", "=", "self", ".", "results", "[", "img_name", "]", "[", "'bbox'", "]", "\n", "confidences", "=", "[", "]", "\n", "for", "box_id", ",", "bbox", "in", "enumerate", "(", "bboxes", ")", ":", "\n", "                ", "confidences", ".", "append", "(", "bbox", "[", "-", "1", "]", ")", "\n", "", "person_id", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "confidences", ")", ")", "\n", "kp3d_preds", "=", "torch", ".", "einsum", "(", "'bik,ji->bjk'", ",", "[", "pred_vertices", ",", "J_regressor", "]", ")", "[", "person_id", "]", "\n", "kp3d_gt", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "annot", "[", "'smpl_joints_3d'", "]", ")", "/", "10.", ")", "\n", "\n", "real_3d", ".", "append", "(", "kp3d_gt", ")", "\n", "predicts", ".", "append", "(", "kp3d_preds", ")", "\n", "\n", "", "real_3d", ",", "predicts", "=", "torch", ".", "stack", "(", "real_3d", ")", ",", "torch", ".", "stack", "(", "predicts", ")", "\n", "abs_error", "=", "self", ".", "calc_mpjpe", "(", "real_3d", ",", "predicts", ",", "lrhip", "=", "self", ".", "lr_hip_idx_smpl24", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "1000", "\n", "rt_error", "=", "self", ".", "calc_pampjpe", "(", "real_3d", ",", "predicts", ",", "lrhip", "=", "self", ".", "lr_hip_idx_smpl24", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "1000", "\n", "print", "(", "'evaluated on test set of 3DOH50K, get MPJPE: {} ; PAMPJPE: {}'", ".", "format", "(", "abs_error", ".", "mean", "(", ")", ",", "rt_error", ".", "mean", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.load_gt": [[65, 90], ["print", "json.load", "open", "eval_CRMH_results.Evaluate._create_single_data_loader", "os.path.join", "PW3D_HCsubset.items", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "numpy.array().transpose", "numpy.zeros", "enumerate", "os.path.join", "os.path.exists", "open", "enumerate", "numpy.array", "pose[].mean"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "load_gt", "(", "self", ")", ":", "\n", "        ", "print", "(", "'loading gt ..'", ")", "\n", "if", "self", ".", "dataset_eval_crmh", "==", "'3DOH50K'", ":", "\n", "            ", "self", ".", "annotations", "=", "json", ".", "load", "(", "open", "(", "\"/export/home/suny/dataset/3DOH50K/test/annots.json\"", ",", "'rb'", ")", ")", "\n", "#self._create_single_data_loader(dataset='oh', train_flag=False, split='test',joint_format='smpl24')", "\n", "", "elif", "self", ".", "dataset_eval_crmh", "==", "'pw3d-hc'", ":", "\n", "            ", "self", ".", "data_loader", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'pw3d'", ",", "train_flag", "=", "False", ",", "split", "=", "'all'", ",", "mode", "=", "'HC'", ",", "joint_format", "=", "'smpl24'", ")", "\n", "PW3D_HCsubset", "=", "{", "'courtyard_basketball_00'", ":", "[", "110", ",", "160", "]", ",", "'courtyard_basketball_00'", ":", "[", "200", ",", "280", "]", ",", "'courtyard_captureSelfies_00'", ":", "[", "150", ",", "270", "]", ",", "'courtyard_captureSelfies_00'", ":", "[", "500", ",", "600", "]", ",", "'courtyard_dancing_00'", ":", "[", "60", ",", "370", "]", ",", "'courtyard_dancing_01'", ":", "[", "60", ",", "270", "]", ",", "'courtyard_hug_00'", ":", "[", "100", ",", "500", "]", ",", "'downtown_bus_00'", ":", "[", "1620", ",", "1900", "]", "}", "\n", "self", ".", "annotations", "=", "{", "}", "\n", "annot_dir", "=", "os", ".", "path", ".", "join", "(", "'/export/home/suny/dataset/3DPW/'", ",", "'sequenceFiles'", ")", "\n", "for", "action_name", ",", "clip_num", "in", "PW3D_HCsubset", ".", "items", "(", ")", ":", "\n", "                ", "for", "set_name", "in", "[", "'train'", ",", "'test'", ",", "'validation'", "]", ":", "\n", "                    ", "annot_file_path", "=", "os", ".", "path", ".", "join", "(", "annot_dir", ",", "set_name", ",", "action_name", "+", "'.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "annot_file_path", ")", ":", "\n", "                        ", "break", "\n", "", "", "data_gt", "=", "pickle", ".", "load", "(", "open", "(", "annot_file_path", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "poses2d_gt", "=", "data_gt", "[", "'poses2d'", "]", "#[:,clip_num[0]:clip_num[1]]", "\n", "poses2d_gt", "=", "np", ".", "array", "(", "poses2d_gt", ")", ".", "transpose", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "center_loc", "=", "np", ".", "zeros", "(", "(", "poses2d_gt", ".", "shape", "[", "0", "]", ",", "poses2d_gt", ".", "shape", "[", "1", "]", ",", "2", ")", ")", "\n", "for", "subject_id", ",", "poses", "in", "enumerate", "(", "poses2d_gt", ")", ":", "\n", "                    ", "for", "frame_id", ",", "pose", "in", "enumerate", "(", "poses", ")", ":", "\n", "                        ", "center_loc", "[", "subject_id", ",", "frame_id", "]", "=", "pose", "[", "pose", "[", ":", ",", "-", "1", "]", ">", "0", ",", ":", "2", "]", ".", "mean", "(", "0", ")", "\n", "\n", "", "", "self", ".", "annotations", "[", "action_name", "]", "=", "center_loc", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.test_3dpw_hc": [[91, 135], ["eval_CRMH_results.Evaluate.smplx.J_regressor.T.cpu", "print", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "eval_CRMH_results.Evaluate.calc_mpjpe().float().cpu().numpy", "eval_CRMH_results.Evaluate.calc_pampjpe().float().cpu().numpy", "enumerate", "abs_error.mean", "rt_error.mean", "os.path.basename", "int", "eval_CRMH_results.Evaluate.regress_kp3d_from_verts().numpy", "enumerate", "numpy.array", "numpy.array", "predicts.append", "real_3d.append", "eval_CRMH_results.Evaluate.calc_mpjpe().float().cpu", "eval_CRMH_results.Evaluate.calc_pampjpe().float().cpu", "imgpath.split", "os.path.basename.replace().replace", "numpy.isnan", "numpy.array.append", "enumerate", "numpy.min", "numpy.array.append", "torch.from_numpy().float", "eval_CRMH_results.Evaluate.regress_kp3d_from_verts", "eval_CRMH_results.calc_center", "numpy.sqrt", "numpy.array", "eval_CRMH_results.Evaluate.calc_mpjpe().float", "eval_CRMH_results.Evaluate.calc_pampjpe().float", "os.path.basename.replace", "list", "torch.from_numpy", "frame_dist_dict.keys", "eval_CRMH_results.Evaluate.calc_mpjpe", "eval_CRMH_results.Evaluate.calc_pampjpe"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.regress_kp3d_from_verts", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.calc_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_mpjpe", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.keypoints_loss.calc_pampjpe"], ["", "", "", "def", "test_3dpw_hc", "(", "self", ")", ":", "\n", "        ", "real_3d", ",", "predicts", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "joint_regressor", "=", "self", ".", "smplx", ".", "J_regressor", ".", "T", ".", "cpu", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "test_iter", ",", "data_3d", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "                ", "for", "batch_id", ",", "imgpath", "in", "enumerate", "(", "data_3d", "[", "'imgpath'", "]", ")", ":", "\n", "                    ", "action_name", "=", "imgpath", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "img_name", "=", "os", ".", "path", ".", "basename", "(", "imgpath", ")", "\n", "frame_id", "=", "int", "(", "img_name", ".", "replace", "(", "'.jpg'", ",", "''", ")", ".", "replace", "(", "'image_'", ",", "''", ")", ")", "\n", "center_gts", "=", "self", ".", "annotations", "[", "action_name", "]", "[", ":", ",", "frame_id", "]", "\n", "pred_result", "=", "self", ".", "results", "[", "action_name", "]", "[", "frame_id", "]", "\n", "annot_gt", "=", "data_3d", "[", "'kp_3d'", "]", "[", "batch_id", "]", "\n", "annot_gt", "=", "annot_gt", "[", "annot_gt", "[", ":", ",", "0", ",", "0", "]", ">", "-", "2.", "]", "\n", "\n", "\n", "bbox_detected", "=", "pred_result", "[", "'bbox'", "]", "\n", "bbox_center_gts", "=", "self", ".", "annotations", "[", "action_name", "]", "[", ":", ",", "frame_id", "]", "\n", "pred_verts", "=", "pred_result", "[", "'verts'", "]", "\n", "pred_kp3ds", "=", "self", ".", "regress_kp3d_from_verts", "(", "pred_verts", ")", ".", "numpy", "(", ")", "\n", "kp3d_matched", "=", "[", "]", "\n", "gt_valid_idx", "=", "[", "]", "\n", "for", "gt_idx", ",", "bbox_center_gt", "in", "enumerate", "(", "bbox_center_gts", ")", ":", "\n", "                        ", "if", "np", ".", "isnan", "(", "bbox_center_gt", "[", "0", "]", ")", ":", "\n", "                            ", "continue", "\n", "", "gt_valid_idx", ".", "append", "(", "gt_idx", ")", "\n", "bbox_center_gt", "=", "bbox_center_gt", "[", ":", ":", "-", "1", "]", "\n", "frame_dist_dict", "=", "{", "}", "\n", "for", "pred_subject_id", ",", "bbox_pred", "in", "enumerate", "(", "bbox_detected", ")", ":", "\n", "                            ", "bbox_center_pred", "=", "calc_center", "(", "bbox_pred", ")", "\n", "dist", "=", "np", ".", "sqrt", "(", "(", "(", "(", "bbox_center_pred", "-", "bbox_center_gt", ")", "/", "10.", ")", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "frame_dist_dict", "[", "dist", "]", "=", "pred_subject_id", "\n", "", "closet_frame_dist", "=", "np", ".", "min", "(", "np", ".", "array", "(", "list", "(", "frame_dist_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "closet_subject_id", "=", "frame_dist_dict", "[", "closet_frame_dist", "]", "\n", "kp3d_matched", ".", "append", "(", "pred_kp3ds", "[", "closet_subject_id", "]", ")", "\n", "", "kp3d_matched", "=", "np", ".", "array", "(", "kp3d_matched", ")", "\n", "gt_valid_idx", "=", "np", ".", "array", "(", "gt_valid_idx", ")", "\n", "predicts", ".", "append", "(", "torch", ".", "from_numpy", "(", "kp3d_matched", ")", ".", "float", "(", ")", ")", "\n", "real_3d", ".", "append", "(", "annot_gt", "[", "gt_valid_idx", "]", ")", "\n", "\n", "", "", "", "real_3d", ",", "predicts", "=", "torch", ".", "cat", "(", "real_3d", ",", "0", ")", ",", "torch", ".", "cat", "(", "predicts", ",", "0", ")", "\n", "abs_error", "=", "self", ".", "calc_mpjpe", "(", "real_3d", ",", "predicts", ",", "lrhip", "=", "self", ".", "lr_hip_idx_smpl24", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "1000", "\n", "rt_error", "=", "self", ".", "calc_pampjpe", "(", "real_3d", ",", "predicts", ",", "lrhip", "=", "self", ".", "lr_hip_idx_smpl24", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "1000", "\n", "print", "(", "'evaluated on test set of 3DPW-HC, get MPJPE: {} ; PAMPJPE: {}'", ".", "format", "(", "abs_error", ".", "mean", "(", ")", ",", "rt_error", ".", "mean", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.regress_kp3d_from_verts": [[137, 145], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.stack"], "methods", ["None"], ["", "def", "regress_kp3d_from_verts", "(", "self", ",", "verts", ")", ":", "\n", "#verts = torch.from_numpy(verts)", "\n", "        ", "joint_x", "=", "torch", ".", "matmul", "(", "verts", "[", ":", ",", ":", ",", "0", "]", ",", "self", ".", "joint_regressor", ")", "\n", "joint_y", "=", "torch", ".", "matmul", "(", "verts", "[", ":", ",", ":", ",", "1", "]", ",", "self", ".", "joint_regressor", ")", "\n", "joint_z", "=", "torch", ".", "matmul", "(", "verts", "[", ":", ",", ":", ",", "2", "]", ",", "self", ".", "joint_regressor", ")", "\n", "\n", "joints", "=", "torch", ".", "stack", "(", "[", "joint_x", ",", "joint_y", ",", "joint_z", "]", ",", "dim", "=", "2", ")", "\n", "return", "joints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.set_parent_tree": [[146, 156], ["enumerate", "eval_CRMH_results.Evaluate.parent_tree.append", "parent.append", "int"], "methods", ["None"], ["", "def", "set_parent_tree", "(", "self", ")", ":", "\n", "        ", "self", ".", "parents", "=", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "9", ",", "9", ",", "12", ",", "13", ",", "14", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", "]", "\n", "self", ".", "sellect_joints", "=", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "16", ",", "17", ",", "18", ",", "19", "]", "\n", "self", ".", "parent_tree", "=", "[", "]", "\n", "for", "idx", ",", "joint_idx", "in", "enumerate", "(", "self", ".", "sellect_joints", ")", ":", "\n", "            ", "parent", "=", "[", "]", "\n", "while", "joint_idx", ">", "-", "1", ":", "\n", "                ", "parent", ".", "append", "(", "joint_idx", ")", "\n", "joint_idx", "=", "int", "(", "self", ".", "parents", "[", "joint_idx", "]", ")", "\n", "", "self", ".", "parent_tree", ".", "append", "(", "parent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.Evaluate.collect_3DPW_layout": [[157, 169], ["os.listdir", "os.listdir", "os.path.join", "action.strip", "os.path.join", "eval_CRMH_results.Evaluate.read_pickle", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.collect_VIBE_3DPW_results.Submit.read_pickle"], ["", "", "def", "collect_3DPW_layout", "(", "self", ")", ":", "\n", "        ", "self", ".", "layout", "=", "{", "}", "\n", "for", "split", "in", "os", ".", "listdir", "(", "self", ".", "ds_root_dir", ")", ":", "\n", "            ", "for", "action", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "ds_root_dir", ",", "split", ")", ")", ":", "\n", "                ", "action_name", "=", "action", ".", "strip", "(", "'.pkl'", ")", "\n", "label_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ds_root_dir", ",", "split", ",", "action", ")", "\n", "raw_labels", "=", "self", ".", "read_pickle", "(", "label_path", ")", "\n", "sequence_info", "=", "raw_labels", "[", "'sequence'", "]", "\n", "frame_num", "=", "len", "(", "raw_labels", "[", "'img_frame_ids'", "]", ")", "\n", "subject_num", "=", "len", "(", "raw_labels", "[", "'poses'", "]", ")", "\n", "pose2d", "=", "raw_labels", "[", "'poses2d'", "]", "\n", "self", ".", "layout", "[", "action_name", "]", "=", "[", "sequence_info", ",", "split", ",", "subject_num", ",", "frame_num", ",", "pose2d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_CRMH_results.calc_center": [[171, 175], ["numpy.array"], "function", ["None"], ["", "", "", "", "def", "calc_center", "(", "bbox", ")", ":", "\n", "    ", "tl_y", ",", "tl_x", ",", "rb_y", ",", "rb_x", "=", "bbox", "\n", "bbox_center", "=", "np", ".", "array", "(", "[", "(", "tl_x", "+", "rb_x", ")", "/", "2.", ",", "(", "tl_y", "+", "rb_y", ")", "/", "2.", "]", ")", "\n", "return", "bbox_center", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.estimate_translation_cv2": [[49, 58], ["cv2.solvePnPRansac"], "function", ["None"], ["", "def", "estimate_translation_cv2", "(", "joints_3d", ",", "joints_2d", ",", "proj_mat", "=", "None", ",", "cam_dist", "=", "None", ")", ":", "\n", "    ", "camK", "=", "proj_mat", "\n", "ret", ",", "rvec", ",", "tvec", ",", "inliers", "=", "cv2", ".", "solvePnPRansac", "(", "joints_3d", ",", "joints_2d", ",", "camK", ",", "cam_dist", ",", "flags", "=", "cv2", ".", "SOLVEPNP_EPNP", ",", "reprojectionError", "=", "20", ",", "iterationsCount", "=", "100", ")", "\n", "if", "inliers", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "tra_pred", "=", "tvec", "[", ":", ",", "0", "]", "\n", "return", "tra_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.estimate_translation": [[59, 77], ["numpy.zeros", "range", "torch.from_numpy().float", "eval_AGORA.estimate_translation_cv2", "torch.from_numpy", "range", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.estimate_translation_cv2"], ["", "", "def", "estimate_translation", "(", "joints_3d", ",", "joints_2d", ",", "org_trans", ",", "proj_mats", "=", "None", ",", "cam_dists", "=", "None", ")", ":", "\n", "    ", "\"\"\"Find camera translation that brings 3D joints joints_3d closest to 2D the corresponding joints_2d.\n    Input:\n        joints_3d: (B, K, 3) 3D joint locations\n        joints: (B, K, 2) 2D joint coordinates\n    Returns:\n        (B, 3) camera translation vectors\n    \"\"\"", "\n", "trans", "=", "np", ".", "zeros", "(", "(", "joints_3d", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cam_dists", "is", "None", ":", "\n", "        ", "cam_dists", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "joints_2d", ")", ")", "]", "\n", "# Find the translation for each example in the batch", "\n", "", "for", "i", "in", "range", "(", "joints_3d", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "trans_i", "=", "estimate_translation_cv2", "(", "joints_3d", "[", "i", "]", ",", "joints_2d", "[", "i", "]", ",", "\n", "proj_mat", "=", "proj_mats", ",", "cam_dist", "=", "cam_dists", "[", "i", "]", ")", "\n", "trans", "[", "i", "]", "=", "trans_i", "if", "trans_i", "is", "not", "None", "else", "org_trans", "[", "i", "]", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "trans", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.save_agora_predictions_v6": [[78, 104], ["os.path.basename().strip", "os.path.basename().strip", "range", "outputs[].contiguous().cpu().numpy", "outputs[].cpu().numpy", "eval_AGORA.estimate_translation", "len", "[].cpu().numpy().reshape", "[].cpu().numpy().reshape", "os.path.join", "os.path.join", "os.path.basename", "os.path.basename", "numpy.array", "os.path.basename", "os.path.basename", "[].cpu().numpy", "[].cpu().numpy", "open", "pickle.dump", "outputs[].contiguous().cpu", "outputs[].cpu", "[].cpu().numpy", "[].cpu().numpy", "[].cpu", "[].cpu", "[].cpu().numpy", "outputs[].contiguous", "[].cpu", "[].cpu", "os.path.basename", "os.path.basename", "[].cpu"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.estimate_translation", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.dump"], ["", "def", "save_agora_predictions_v6", "(", "image_path", ",", "outputs", ",", "save_dir", ")", ":", "\n", "    ", "if", "set_id", "==", "0", ":", "\n", "        ", "if", "os", ".", "path", ".", "basename", "(", "image_path", ")", "in", "annots", ":", "\n", "            ", "cam_params", "=", "annots", "[", "os", ".", "path", ".", "basename", "(", "image_path", ")", "]", "[", "0", "]", "[", "'camMats'", "]", "\n", "", "else", ":", "\n", "            ", "cam_params", "=", "np", ".", "array", "(", "[", "[", "995.55555556", ",", "0.", ",", "640.", "]", ",", "[", "0.", ",", "995.55555556", ",", "360.", "]", ",", "[", "0.", ",", "0.", ",", "1.", "]", "]", ")", "\n", "\n", "", "predicts_j3ds", "=", "outputs", "[", "'joints'", "]", ".", "contiguous", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predicts_pj2ds", "=", "outputs", "[", "'pj2d_org'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predicts_j3ds", "=", "predicts_j3ds", "[", ":", ",", ":", "24", "]", "-", "predicts_j3ds", "[", ":", ",", "[", "0", "]", "]", "\n", "predicts_pj2ds", "=", "predicts_pj2ds", "[", ":", ",", ":", "24", "]", "\n", "outputs", "[", "'cam_trans'", "]", "=", "estimate_translation", "(", "predicts_j3ds", ",", "predicts_pj2ds", ",", "outputs", "[", "'cam_trans'", "]", ",", "proj_mats", "=", "cam_params", ")", "\n", "\n", "", "img_name", "=", "os", ".", "path", ".", "basename", "(", "image_path", ")", ".", "strip", "(", "'.png'", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "outputs", "[", "'body_pose'", "]", ")", ")", ":", "\n", "        ", "result_dict", "=", "{", "'params'", ":", "{", "}", ",", "'pose2rot'", ":", "True", ",", "'num_betas'", ":", "11", ",", "'gender'", ":", "'neutral'", ",", "'age'", ":", "'kid'", ",", "'kid_flag'", ":", "True", "}", "\n", "result_dict", "[", "'params'", "]", "[", "'global_orient'", "]", "=", "outputs", "[", "'global_orient'", "]", "[", "ind", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "result_dict", "[", "'params'", "]", "[", "'body_pose'", "]", "=", "outputs", "[", "'body_pose'", "]", "[", "ind", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "1", ",", "23", ",", "3", ")", "\n", "result_dict", "[", "'params'", "]", "[", "'betas'", "]", "=", "outputs", "[", "'smpl_betas'", "]", "[", "ind", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "None", "]", "\n", "result_dict", "[", "'params'", "]", "[", "'transl'", "]", "=", "outputs", "[", "'cam_trans'", "]", "[", "ind", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "None", "]", "\n", "result_dict", "[", "'joints'", "]", "=", "(", "outputs", "[", "'pj2d_org'", "]", "[", "ind", "]", "[", ":", "24", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1", ")", "*", "3840", "/", "1280.", "\n", "\n", "save_name", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}_personId_{}.pkl'", ".", "format", "(", "img_name", ",", "ind", ")", ")", "\n", "with", "open", "(", "save_name", ",", "'wb'", ")", "as", "outfile", ":", "\n", "            ", "pickle", ".", "dump", "(", "result_dict", ",", "outfile", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.get_results_on_AGORA": [[105, 122], ["torch.no_grad", "os.join", "bev.BEV", "romp.utils.progress_bar", "os.path.join", "os.path.join", "romp.ResultSaver", "cv2.imread", "bev.BEV.", "eval_AGORA.save_agora_predictions_v6", "os.listdir", "os.listdir", "romp.ResultSaver."], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.progress_bar", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_AGORA.save_agora_predictions_v6"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_results_on_AGORA", "(", "set_name", "=", "'test'", ")", ":", "\n", "    ", "image_folder", "=", "osp", ".", "join", "(", "dataset_dir", ",", "set_name", ")", "\n", "file_list", "=", "[", "os", ".", "path", ".", "join", "(", "image_folder", ",", "img_name", ")", "for", "img_name", "in", "os", ".", "listdir", "(", "image_folder", ")", "]", "\n", "\n", "model", "=", "BEV", "(", "default_eval_settings", ")", "\n", "\n", "if", "visualize_results", ":", "\n", "        ", "saver", "=", "ResultSaver", "(", "default_eval_settings", ".", "mode", ",", "default_eval_settings", ".", "save_path", ",", "save_npz", "=", "False", ")", "\n", "", "for", "image_path", "in", "progress_bar", "(", "file_list", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "if", "outputs", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "visualize_results", ":", "\n", "            ", "saver", "(", "outputs", ",", "image_path", ")", "\n", "", "save_agora_predictions_v6", "(", "image_path", ",", "outputs", ",", "prediction_save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_cmu_panoptic.get_results": [[38, 60], ["torch.no_grad", "os.join", "bev.BEV", "romp.utils.progress_bar", "numpy.savez", "os.path.join", "os.path.join", "romp.ResultSaver", "cv2.imread", "bev.BEV.", "os.join", "os.listdir", "os.listdir", "romp.ResultSaver.", "os.basename"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.progress_bar"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_results", "(", ")", ":", "\n", "    ", "image_folder", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'images'", ")", "\n", "file_list", "=", "[", "os", ".", "path", ".", "join", "(", "image_folder", ",", "img_name", ")", "for", "img_name", "in", "os", ".", "listdir", "(", "image_folder", ")", "]", "\n", "\n", "model", "=", "BEV", "(", "default_eval_settings", ")", "\n", "#J_regressor_h36m = torch.load(default_eval_settings.smpl_path)['J_regressor_h36m17']", "\n", "results", "=", "{", "}", "\n", "if", "visualize_results", ":", "\n", "        ", "saver", "=", "ResultSaver", "(", "default_eval_settings", ".", "mode", ",", "default_eval_settings", ".", "save_path", ",", "save_npz", "=", "False", ")", "\n", "", "for", "image_path", "in", "progress_bar", "(", "file_list", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "if", "outputs", "is", "None", ":", "\n", "            ", "continue", "\n", "#pred_vertices = outputs['verts'].float()", "\n", "#J_regressor_batch = J_regressor_h36m[None, :].expand(pred_vertices.shape[0], -1, -1).to(pred_vertices.device)", "\n", "#pred_kp3ds = torch.matmul(J_regressor_batch, pred_vertices)", "\n", "", "results", "[", "osp", ".", "basename", "(", "image_path", ")", "]", "=", "[", "outputs", "[", "'pj2d_org'", "]", "[", ":", ",", "54", ":", "]", ",", "outputs", "[", "'joints'", "]", "[", ":", ",", "54", ":", "]", "]", "\n", "if", "visualize_results", ":", "\n", "            ", "saver", "(", "outputs", ",", "image_path", ")", "\n", "", "", "np", ".", "savez", "(", "osp", ".", "join", "(", "output_save_dir", ",", "'predictions.npz'", ")", ",", "results", "=", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_cmu_panoptic.determine_visible_person": [[61, 69], ["enumerate", "numpy.logical_and", "numpy.array", "numpy.array", "numpy.logical_and", "numpy.logical_and", "np.logical_and.sum", "visible_person_id.append", "kp2d_vis.append", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "determine_visible_person", "(", "kp2ds", ",", "width", ",", "height", ")", ":", "\n", "    ", "visible_person_id", ",", "kp2d_vis", "=", "[", "]", ",", "[", "]", "\n", "for", "person_id", ",", "kp2d", "in", "enumerate", "(", "kp2ds", ")", ":", "\n", "        ", "visible_kps_mask", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "0", "<", "kp2d", "[", ":", ",", "0", "]", ",", "kp2d", "[", ":", ",", "0", "]", "<", "width", ")", ",", "np", ".", "logical_and", "(", "0", "<", "kp2d", "[", ":", ",", "1", "]", ",", "kp2d", "[", ":", ",", "1", "]", "<", "height", ",", "kp2d", "[", ":", ",", "2", "]", ">", "0.2", ")", ")", "\n", "if", "visible_kps_mask", ".", "sum", "(", ")", ">", "5", ":", "\n", "            ", "visible_person_id", ".", "append", "(", "person_id", ")", "\n", "kp2d_vis", ".", "append", "(", "np", ".", "concatenate", "(", "[", "kp2d", "[", ":", ",", ":", "2", "]", ",", "visible_kps_mask", "[", ":", ",", "None", "]", "]", ",", "1", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "visible_person_id", ")", ",", "np", ".", "array", "(", "kp2d_vis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_cmu_panoptic.load_gts": [[70, 104], ["os.join", "os.join", "os.listdir", "os.listdir", "numpy.array", "numpy.savez", "os.path.join", "os.path.join", "eval_cmu_panoptic.determine_visible_person", "len", "enumerate", "open", "pickle.load", "img_info[].split", "numpy.zeros", "numpy.zeros", "zip", "numpy.array", "img_path[].replace"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_cmu_panoptic.determine_visible_person", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split"], ["", "def", "load_gts", "(", ")", ":", "\n", "    ", "annots_path", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'annots.npz'", ")", "\n", "annots_folder", "=", "osp", ".", "join", "(", "dataset_dir", ",", "'panoptic_annot'", ")", "\n", "annots", "=", "{", "}", "\n", "for", "annots_file_name", "in", "os", ".", "listdir", "(", "annots_folder", ")", ":", "\n", "        ", "ann_file", "=", "os", ".", "path", ".", "join", "(", "annots_folder", ",", "annots_file_name", ")", "\n", "with", "open", "(", "ann_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "img_info", "in", "img_infos", ":", "\n", "            ", "img_path", "=", "img_info", "[", "'filename'", "]", ".", "split", "(", "'/'", ")", "\n", "img_name", "=", "img_path", "[", "1", "]", "+", "'-'", "+", "img_path", "[", "-", "1", "]", ".", "replace", "(", "'.png'", ",", "'.jpg'", ")", "\n", "annots", "[", "img_name", "]", "=", "{", "}", "\n", "annots", "[", "img_name", "]", "=", "img_info", "\n", "\n", "", "", "new_annots", "=", "{", "}", "\n", "J24_TO_H36M", "=", "np", ".", "array", "(", "[", "14", ",", "3", ",", "4", ",", "5", ",", "2", ",", "1", ",", "0", ",", "16", ",", "12", ",", "17", ",", "18", ",", "9", ",", "10", ",", "11", ",", "8", ",", "7", ",", "6", "]", ")", "\n", "H36M_TO_J14", "=", "[", "6", ",", "5", ",", "4", ",", "1", ",", "2", ",", "3", ",", "16", ",", "15", ",", "14", ",", "11", ",", "12", ",", "13", ",", "8", ",", "0", "]", "#, 10, 0, 7, 9", "\n", "for", "img_name", "in", "annots", ":", "\n", "        ", "kp2ds", "=", "annots", "[", "img_name", "]", "[", "'kpts2d'", "]", "[", ":", ",", "J24_TO_H36M", "]", "[", ":", ",", "H36M_TO_J14", "]", "\n", "visible_person_id", ",", "kp2ds", "=", "determine_visible_person", "(", "kp2ds", ",", "annots", "[", "img_name", "]", "[", "'width'", "]", ",", "annots", "[", "img_name", "]", "[", "'height'", "]", ")", "\n", "kp3ds", "=", "annots", "[", "img_name", "]", "[", "'kpts3d'", "]", "[", ":", ",", "J24_TO_H36M", "]", "[", ":", ",", "H36M_TO_J14", "]", "[", "visible_person_id", "]", "\n", "N", "=", "len", "(", "kp3ds", ")", "\n", "full_kp2d", ",", "kp_3ds", "=", "np", ".", "zeros", "(", "(", "N", ",", "14", ",", "2", ")", ")", ",", "np", ".", "zeros", "(", "(", "N", ",", "14", ",", "3", ")", ")", "\n", "for", "inds", ",", "(", "kp2d", ",", "kp3d", ")", "in", "enumerate", "(", "zip", "(", "kp2ds", ",", "kp3ds", ")", ")", ":", "\n", "            ", "kp2d", "*=", "1920.", "/", "832.", "\n", "full_kp2d", "[", "inds", "]", "=", "kp2d", "[", ":", ",", ":", "2", "]", "\n", "\n", "invis_3dkps", "=", "kp3d", "[", ":", ",", "-", "1", "]", "<", "0.2", "\n", "kp3d", "=", "kp3d", "[", ":", ",", ":", "3", "]", "\n", "kp3d", "[", "invis_3dkps", "]", "=", "-", "2.", "\n", "kp3d", "[", ":", "13", "]", "+=", "np", ".", "array", "(", "[", "0", ",", "0.06", ",", "0.03", "]", ")", "\n", "kp_3ds", "[", "inds", "]", "=", "kp3d", "\n", "", "new_annots", "[", "img_name", "]", "=", "[", "full_kp2d", ",", "kp_3ds", "]", "\n", "", "np", ".", "savez", "(", "annots_path", ",", "annots", "=", "new_annots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_cmu_panoptic.get_bbx_overlap": [[105, 148], ["numpy.min", "numpy.min", "numpy.max", "numpy.max", "max", "max", "min", "min", "max", "max", "float"], "function", ["None"], ["", "def", "get_bbx_overlap", "(", "p1", ",", "p2", ",", "imgpath", ",", "baseline", "=", "None", ")", ":", "\n", "    ", "min_p1", "=", "np", ".", "min", "(", "p1", ",", "axis", "=", "0", ")", "\n", "min_p2", "=", "np", ".", "min", "(", "p2", ",", "axis", "=", "0", ")", "\n", "max_p1", "=", "np", ".", "max", "(", "p1", ",", "axis", "=", "0", ")", "\n", "max_p2", "=", "np", ".", "max", "(", "p2", ",", "axis", "=", "0", ")", "\n", "\n", "bb1", "=", "{", "}", "\n", "bb2", "=", "{", "}", "\n", "\n", "bb1", "[", "'x1'", "]", "=", "min_p1", "[", "0", "]", "\n", "bb1", "[", "'x2'", "]", "=", "max_p1", "[", "0", "]", "\n", "bb1", "[", "'y1'", "]", "=", "min_p1", "[", "1", "]", "\n", "bb1", "[", "'y2'", "]", "=", "max_p1", "[", "1", "]", "\n", "bb2", "[", "'x1'", "]", "=", "min_p2", "[", "0", "]", "\n", "bb2", "[", "'x2'", "]", "=", "max_p2", "[", "0", "]", "\n", "bb2", "[", "'y1'", "]", "=", "min_p2", "[", "1", "]", "\n", "bb2", "[", "'y2'", "]", "=", "max_p2", "[", "1", "]", "\n", "\n", "assert", "bb1", "[", "'x1'", "]", "<", "bb1", "[", "'x2'", "]", "\n", "assert", "bb1", "[", "'y1'", "]", "<", "bb1", "[", "'y2'", "]", "\n", "assert", "bb2", "[", "'x1'", "]", "<", "bb2", "[", "'x2'", "]", "\n", "assert", "bb2", "[", "'y1'", "]", "<", "bb2", "[", "'y2'", "]", "\n", "# determine the coordinates of the intersection rectangle", "\n", "x_left", "=", "max", "(", "bb1", "[", "'x1'", "]", ",", "bb2", "[", "'x1'", "]", ")", "\n", "y_top", "=", "max", "(", "bb1", "[", "'y1'", "]", ",", "bb2", "[", "'y1'", "]", ")", "\n", "x_right", "=", "min", "(", "bb1", "[", "'x2'", "]", ",", "bb2", "[", "'x2'", "]", ")", "\n", "y_bottom", "=", "min", "(", "bb1", "[", "'y2'", "]", ",", "bb2", "[", "'y2'", "]", ")", "\n", "\n", "# The intersection of two axis-aligned bounding boxes is always an", "\n", "# axis-aligned bounding box", "\n", "intersection_area", "=", "max", "(", "0", ",", "x_right", "-", "x_left", "+", "1", ")", "*", "max", "(", "0", ",", "y_bottom", "-", "y_top", "+", "1", ")", "\n", "\n", "# compute the area of both AABBs", "\n", "bb1_area", "=", "(", "bb1", "[", "'x2'", "]", "-", "bb1", "[", "'x1'", "]", "+", "1", ")", "*", "(", "bb1", "[", "'y2'", "]", "-", "bb1", "[", "'y1'", "]", "+", "1", ")", "\n", "bb2_area", "=", "(", "bb2", "[", "'x2'", "]", "-", "bb2", "[", "'x1'", "]", "+", "1", ")", "*", "(", "bb2", "[", "'y2'", "]", "-", "bb2", "[", "'y1'", "]", "+", "1", ")", "\n", "\n", "# compute the intersection over union by taking the intersection", "\n", "# area and dividing it by the sum of prediction + ground-truth", "\n", "# areas - the interesection area", "\n", "iou", "=", "intersection_area", "/", "float", "(", "bb1_area", "+", "bb2_area", "-", "intersection_area", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_cmu_panoptic.l2_error": [[149, 151], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "l2_error", "(", "j1", ",", "j2", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "norm", "(", "j1", "-", "j2", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_cmu_panoptic.match_2d_greedy": [[152, 275], ["numpy.arange", "numpy.arange", "list", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "np.zeros.sort", "np.zeros.sort", "numpy.arange", "numpy.setdiff1d", "numpy.arange", "numpy.setdiff1d", "len", "len", "itertools.product", "print", "eval_cmu_panoptic.l2_error", "np.array.append", "np.zeros.append", "np.zeros.append", "len", "falsePositives.append", "len", "vmask.sum", "len", "len", "numpy.sum", "len", "len", "numpy.argmin", "eval_cmu_panoptic.get_bbx_overlap", "misses.append", "str", "numpy.sum", "sum", "len", "print", "excludedGtBecauseInvalid.append", "np.array.append", "misses.append", "excludedGtBecauseInvalid.append", "str", "np.array.append"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.matching.l2_error", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.matching.get_bbx_overlap", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "match_2d_greedy", "(", "\n", "pred_kps", ",", "\n", "gtkp", ",", "\n", "valid_mask", ",", "\n", "imgPath", "=", "None", ",", "\n", "baseline", "=", "None", ",", "\n", "iou_thresh", "=", "0.05", ",", "\n", "valid", "=", "None", ",", "\n", "ind", "=", "-", "1", ")", ":", "\n", "    ", "'''\n    matches groundtruth keypoints to the detection by considering all possible matchings.\n    :return: best possible matching, a list of tuples, where each tuple corresponds to one match of pred_person.to gt_person.\n            the order within one tuple is as follows (idx_pred_kps, idx_gt_kps)\n    '''", "\n", "predList", "=", "np", ".", "arange", "(", "len", "(", "pred_kps", ")", ")", "\n", "gtList", "=", "np", ".", "arange", "(", "len", "(", "gtkp", ")", ")", "\n", "# get all pairs of elements in pred_kps, gtkp", "\n", "# all combinations of 2 elements from l1 and l2", "\n", "combs", "=", "list", "(", "product", "(", "predList", ",", "gtList", ")", ")", "\n", "\n", "errors_per_pair", "=", "{", "}", "\n", "errors_per_pair_list", "=", "[", "]", "\n", "for", "comb", "in", "combs", ":", "\n", "        ", "vmask", "=", "valid_mask", "[", "comb", "[", "1", "]", "]", "\n", "assert", "vmask", ".", "sum", "(", ")", ">", "0", ",", "print", "(", "'no valid points'", ")", "\n", "errors_per_pair", "[", "str", "(", "comb", ")", "]", "=", "l2_error", "(", "\n", "pred_kps", "[", "comb", "[", "0", "]", "]", "[", "vmask", ",", ":", "2", "]", ",", "gtkp", "[", "comb", "[", "1", "]", "]", "[", "vmask", ",", ":", "2", "]", ")", "\n", "errors_per_pair_list", ".", "append", "(", "errors_per_pair", "[", "str", "(", "comb", ")", "]", ")", "\n", "\n", "", "gtAssigned", "=", "np", ".", "zeros", "(", "(", "len", "(", "gtkp", ")", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "opAssigned", "=", "np", ".", "zeros", "(", "(", "len", "(", "pred_kps", ")", ",", ")", ",", "dtype", "=", "bool", ")", "\n", "errors_per_pair_list", "=", "np", ".", "array", "(", "errors_per_pair_list", ")", "\n", "\n", "bestMatch", "=", "[", "]", "\n", "excludedGtBecauseInvalid", "=", "[", "]", "\n", "falsePositiveCounter", "=", "0", "\n", "while", "np", ".", "sum", "(", "gtAssigned", ")", "<", "len", "(", "gtAssigned", ")", "and", "np", ".", "sum", "(", "\n", "opAssigned", ")", "+", "falsePositiveCounter", "<", "len", "(", "pred_kps", ")", ":", "\n", "        ", "found", "=", "False", "\n", "falsePositive", "=", "False", "\n", "while", "not", "(", "found", ")", ":", "\n", "            ", "if", "sum", "(", "np", ".", "inf", "==", "errors_per_pair_list", ")", "==", "len", "(", "\n", "errors_per_pair_list", ")", ":", "\n", "                ", "print", "(", "'something went wrong here'", ")", "\n", "\n", "", "minIdx", "=", "np", ".", "argmin", "(", "errors_per_pair_list", ")", "\n", "minComb", "=", "combs", "[", "minIdx", "]", "\n", "# compute IOU", "\n", "iou", "=", "get_bbx_overlap", "(", "\n", "pred_kps", "[", "minComb", "[", "0", "]", "]", ",", "gtkp", "[", "minComb", "[", "1", "]", "]", ",", "imgPath", ",", "baseline", ")", "\n", "# if neither prediction nor ground truth has been matched before and iou", "\n", "# is larger than threshold", "\n", "if", "not", "(", "opAssigned", "[", "minComb", "[", "0", "]", "]", ")", "and", "not", "(", "\n", "gtAssigned", "[", "minComb", "[", "1", "]", "]", ")", "and", "iou", ">=", "iou_thresh", ":", "\n", "#print(imgPath + ': found matching')", "\n", "                ", "found", "=", "True", "\n", "errors_per_pair_list", "[", "minIdx", "]", "=", "np", ".", "inf", "\n", "", "else", ":", "\n", "                ", "errors_per_pair_list", "[", "minIdx", "]", "=", "np", ".", "inf", "\n", "# if errors_per_pair_list[minIdx] >", "\n", "# matching_threshold*headBboxs[combs[minIdx][1]]:", "\n", "if", "iou", "<", "iou_thresh", ":", "\n", "#print(", "\n", "#   imgPath + ': false positive detected using threshold')", "\n", "                    ", "found", "=", "True", "\n", "falsePositive", "=", "True", "\n", "falsePositiveCounter", "+=", "1", "\n", "\n", "# if ground truth of combination is valid keep the match, else exclude", "\n", "# gt from matching", "\n", "", "", "", "if", "not", "(", "valid", "is", "None", ")", ":", "\n", "            ", "if", "valid", "[", "minComb", "[", "1", "]", "]", ":", "\n", "                ", "if", "not", "falsePositive", ":", "\n", "                    ", "bestMatch", ".", "append", "(", "minComb", ")", "\n", "opAssigned", "[", "minComb", "[", "0", "]", "]", "=", "True", "\n", "gtAssigned", "[", "minComb", "[", "1", "]", "]", "=", "True", "\n", "", "", "else", ":", "\n", "                ", "gtAssigned", "[", "minComb", "[", "1", "]", "]", "=", "True", "\n", "excludedGtBecauseInvalid", ".", "append", "(", "minComb", "[", "1", "]", ")", "\n", "\n", "", "", "elif", "not", "falsePositive", ":", "\n", "# same as above but without checking for valid", "\n", "            ", "bestMatch", ".", "append", "(", "minComb", ")", "\n", "opAssigned", "[", "minComb", "[", "0", "]", "]", "=", "True", "\n", "gtAssigned", "[", "minComb", "[", "1", "]", "]", "=", "True", "\n", "\n", "", "", "bestMatch", "=", "np", ".", "array", "(", "bestMatch", ")", "\n", "# add false positives and false negatives to the matching", "\n", "# find which elements have been successfully assigned", "\n", "opAssigned", "=", "[", "]", "\n", "gtAssigned", "=", "[", "]", "\n", "for", "pair", "in", "bestMatch", ":", "\n", "        ", "opAssigned", ".", "append", "(", "pair", "[", "0", "]", ")", "\n", "gtAssigned", ".", "append", "(", "pair", "[", "1", "]", ")", "\n", "", "opAssigned", ".", "sort", "(", ")", "\n", "gtAssigned", ".", "sort", "(", ")", "\n", "\n", "falsePositives", "=", "[", "]", "\n", "misses", "=", "[", "]", "\n", "\n", "# handle false positives", "\n", "opIds", "=", "np", ".", "arange", "(", "len", "(", "pred_kps", ")", ")", "\n", "# returns values of oIds that are not in opAssigned", "\n", "notAssignedIds", "=", "np", ".", "setdiff1d", "(", "opIds", ",", "opAssigned", ")", "\n", "for", "notAssignedId", "in", "notAssignedIds", ":", "\n", "        ", "falsePositives", ".", "append", "(", "notAssignedId", ")", "\n", "", "gtIds", "=", "np", ".", "arange", "(", "len", "(", "gtList", ")", ")", "\n", "# returns values of gtIds that are not in gtAssigned", "\n", "notAssignedIdsGt", "=", "np", ".", "setdiff1d", "(", "gtIds", ",", "gtAssigned", ")", "\n", "\n", "# handle false negatives/misses", "\n", "for", "notAssignedIdGt", "in", "notAssignedIdsGt", ":", "\n", "        ", "if", "not", "(", "valid", "is", "None", ")", ":", "# if using the new matching", "\n", "            ", "if", "valid", "[", "notAssignedIdGt", "]", ":", "\n", "#print(imgPath + ': miss')", "\n", "                ", "misses", ".", "append", "(", "notAssignedIdGt", ")", "\n", "", "else", ":", "\n", "                ", "excludedGtBecauseInvalid", ".", "append", "(", "notAssignedIdGt", ")", "\n", "", "", "else", ":", "\n", "#print(imgPath + ': miss')", "\n", "            ", "misses", ".", "append", "(", "notAssignedIdGt", ")", "\n", "\n", "", "", "return", "bestMatch", ",", "falsePositives", ",", "misses", "# tuples are (idx_pred_kps, idx_gt_kps)", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_cmu_panoptic.evaluation_results": [[279, 325], ["romp.utils.progress_bar", "print", "mpjpe_cacher.items", "print", "print", "avg_all.append", "numpy.concatenate().mean", "numpy.load", "numpy.load", "valid_mask.sum", "eval_cmu_panoptic.match_2d_greedy", "numpy.array", "sum", "len", "os.join", "os.join", "len", "numpy.concatenate", "numpy.ones", "numpy.concatenate", "numpy.ones", "len", "os.path.basename", "os.path.basename", "mpjpe_cacher[].append", "numpy.sqrt", "np.concatenate.mean", "len", "float", "numpy.ones", "mpjpe.item", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.progress_bar", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.matching.match_2d_greedy", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "evaluation_results", "(", ")", ":", "\n", "    ", "annots", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "dataset_dir", ",", "'annots.npz'", ")", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", "\n", "results", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "output_save_dir", ",", "'predictions.npz'", ")", ",", "allow_pickle", "=", "True", ")", "[", "'results'", "]", "[", "(", ")", "]", "\n", "action_name", "=", "[", "'haggling'", ",", "'mafia'", ",", "'ultimatum'", ",", "'pizza'", "]", "\n", "mpjpe_cacher", "=", "{", "aname", ":", "[", "]", "for", "aname", "in", "action_name", "}", "\n", "\n", "H36M17_TO_J14", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "14", "]", "\n", "missing_punish", "=", "150", "\n", "\n", "for", "img_name", "in", "progress_bar", "(", "annots", ")", ":", "\n", "        ", "kp2d_gts", ",", "kp3d_gts", "=", "annots", "[", "img_name", "]", "\n", "root_gts", "=", "kp3d_gts", "[", ":", ",", "[", "13", "]", "]", "\n", "visible_kpts", "=", "kp3d_gts", "[", ":", ",", ":", ",", "0", "]", ">", "-", "2.", "\n", "valid_mask", "=", "kp2d_gts", "[", ":", ",", ":", ",", "0", "]", ">", "-", "2.", "\n", "valid_ids", "=", "valid_mask", ".", "sum", "(", "-", "1", ")", "!=", "0", "\n", "kp2d_gts", ",", "kp3d_gts", "=", "kp2d_gts", "[", "valid_ids", "]", ",", "kp3d_gts", "[", "valid_ids", "]", "-", "root_gts", "[", "valid_ids", "]", "\n", "valid_mask", ",", "visible_kpts", "=", "valid_mask", "[", "valid_ids", "]", ",", "visible_kpts", "[", "valid_ids", "]", "\n", "if", "img_name", "in", "results", ":", "\n", "            ", "kp2d_preds", ",", "kp3d_preds", "=", "results", "[", "img_name", "]", "\n", "kp2d_preds", ",", "kp3d_preds", "=", "kp2d_preds", "[", ":", ",", "H36M17_TO_J14", "]", ",", "kp3d_preds", "[", ":", ",", "H36M17_TO_J14", "]", "-", "kp3d_preds", "[", ":", ",", "[", "14", "]", "]", "\n", "\n", "bestMatch", ",", "falsePositives", ",", "misses", "=", "match_2d_greedy", "(", "kp2d_preds", ",", "kp2d_gts", ",", "valid_mask", ")", "\n", "bestMatch", "=", "np", ".", "array", "(", "bestMatch", ")", "\n", "if", "len", "(", "bestMatch", ")", ">", "0", ":", "\n", "                ", "pids", ",", "gids", "=", "bestMatch", "[", ":", ",", "0", "]", ",", "bestMatch", "[", ":", ",", "1", "]", "\n", "#kp3d_preds[pids] -= root_gts[gids]", "\n", "#kp3d_gts -= root_gts", "\n", "mpjpes", "=", "(", "np", ".", "sqrt", "(", "(", "(", "kp3d_preds", "[", "pids", "]", "-", "kp3d_gts", "[", "gids", "]", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ")", "*", "visible_kpts", "[", "gids", "]", ")", "*", "1000", "\n", "mpjpes", "=", "np", ".", "concatenate", "(", "[", "mpjpes", ".", "mean", "(", "-", "1", ")", ",", "np", ".", "ones", "(", "len", "(", "misses", ")", ")", "*", "missing_punish", "]", ")", "\n", "", "else", ":", "\n", "                ", "mpjpes", "=", "np", ".", "ones", "(", "len", "(", "kp3d_gts", ")", ")", "*", "missing_punish", "\n", "", "", "else", ":", "\n", "            ", "mpjpes", "=", "np", ".", "ones", "(", "len", "(", "kp3d_gts", ")", ")", "*", "missing_punish", "\n", "\n", "", "for", "mpjpe", "in", "mpjpes", ":", "\n", "            ", "for", "aname", "in", "action_name", ":", "\n", "                ", "if", "aname", "in", "os", ".", "path", ".", "basename", "(", "img_name", ")", ":", "\n", "                    ", "mpjpe_cacher", "[", "aname", "]", ".", "append", "(", "float", "(", "mpjpe", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "", "", "print", "(", "'Final results:'", ")", "\n", "avg_all", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "mpjpe_cacher", ".", "items", "(", ")", ":", "\n", "        ", "mean", "=", "sum", "(", "value", ")", "/", "len", "(", "value", ")", "\n", "print", "(", "key", ",", "mean", ")", "\n", "avg_all", ".", "append", "(", "value", ")", "\n", "", "print", "(", "'MPJPE results:'", ",", "np", ".", "concatenate", "(", "avg_all", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_Relative_Human.joint_mapping": [[35, 41], ["numpy.array", "numpy.ones", "len"], "function", ["None"], ["def", "joint_mapping", "(", "source_format", ",", "target_format", ")", ":", "\n", "    ", "mapping", "=", "np", ".", "ones", "(", "len", "(", "target_format", ")", ",", "dtype", "=", "np", ".", "int", ")", "*", "-", "1", "\n", "for", "joint_name", "in", "target_format", ":", "\n", "        ", "if", "joint_name", "in", "source_format", ":", "\n", "            ", "mapping", "[", "target_format", "[", "joint_name", "]", "]", "=", "source_format", "[", "joint_name", "]", "\n", "", "", "return", "np", ".", "array", "(", "mapping", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_Relative_Human.collect_relative_results": [[61, 73], ["len", "range", "[].reshape", "image_results.append"], "function", ["None"], ["def", "collect_relative_results", "(", "outputs", ")", ":", "\n", "    ", "image_results", "=", "[", "]", "\n", "person_num", "=", "len", "(", "outputs", "[", "'smpl_thetas'", "]", ")", "\n", "for", "ind", "in", "range", "(", "person_num", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "results", "[", "'global_orient'", "]", "=", "outputs", "[", "'smpl_thetas'", "]", "[", "ind", ",", ":", "3", "]", "\n", "results", "[", "'body_pose'", "]", "=", "outputs", "[", "'smpl_thetas'", "]", "[", "ind", ",", "3", ":", "]", ".", "reshape", "(", "23", ",", "3", ")", "\n", "results", "[", "'smpl_betas'", "]", "=", "outputs", "[", "'smpl_betas'", "]", "[", "ind", "]", "\n", "results", "[", "'trans'", "]", "=", "outputs", "[", "'cam_trans'", "]", "[", "ind", "]", "\n", "results", "[", "'kp2ds'", "]", "=", "outputs", "[", "'pj2d_org'", "]", "[", "ind", ",", "kp_mapper", "]", "\n", "image_results", ".", "append", "(", "results", ")", "\n", "", "return", "image_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_Relative_Human.get_BEV_results_on_RH": [[74, 107], ["torch.no_grad", "argparse.Namespace", "os.join", "os.join", "list", "BEV", "romp.utils.progress_bar", "os.join().format", "numpy.savez", "[].keys", "os.path.join", "os.path.join", "romp.ResultSaver", "cv2.imread", "BEV.", "eval_Relative_Human.collect_relative_results", "os.join", "romp.ResultSaver.", "os.join", "os.basename", "numpy.load"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.progress_bar", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_Relative_Human.collect_relative_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_BEV_results_on_RH", "(", "set_name", "=", "'test'", ")", ":", "\n", "    ", "from", "bev", "import", "BEV", "\n", "default_eval_settings", "=", "argparse", ".", "Namespace", "(", "GPU", "=", "0", ",", "calc_smpl", "=", "True", ",", "center_thresh", "=", "0.1", ",", "nms_thresh", "=", "16", ",", "render_mesh", "=", "visualize_results", ",", "renderer", "=", "'pyrender'", ",", "show", "=", "False", ",", "show_largest", "=", "False", ",", "input", "=", "None", ",", "frame_rate", "=", "24", ",", "temporal_optimize", "=", "False", ",", "smooth_coeff", "=", "3.0", ",", "relative_scale_thresh", "=", "2", ",", "overlap_ratio", "=", "0.8", ",", "mode", "=", "'image'", ",", "model_path", "=", "model_path", "[", "method_name", "]", ",", "onnx", "=", "False", ",", "crowd", "=", "False", ",", "save_path", "=", "osp", ".", "join", "(", "output_save_dir", ",", "'visualization'", ")", ",", "save_video", "=", "False", ",", "show_items", "=", "'mesh'", ",", "show_patch_results", "=", "False", ",", "smpl_path", "=", "'/home/yusun/.romp/smpla_packed_info.pth'", ",", "smil_path", "=", "'/home/yusun/.romp/smil_packed_info.pth'", ")", "\n", "\n", "image_folder", "=", "osp", ".", "join", "(", "Relative_Human_dir", ",", "'images'", ")", "\n", "annots_path", "=", "osp", ".", "join", "(", "Relative_Human_dir", ",", "'{}_annots.npz'", ".", "format", "(", "set_name", ")", ")", "\n", "file_list", "=", "list", "(", "np", ".", "load", "(", "annots_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", ".", "keys", "(", ")", ")", "\n", "file_list", "=", "[", "os", ".", "path", ".", "join", "(", "image_folder", ",", "img_name", ")", "for", "img_name", "in", "file_list", "]", "\n", "\n", "model", "=", "BEV", "(", "default_eval_settings", ")", "\n", "\n", "all_results_dict", "=", "{", "}", "\n", "if", "visualize_results", ":", "\n", "        ", "saver", "=", "ResultSaver", "(", "default_eval_settings", ".", "mode", ",", "default_eval_settings", ".", "save_path", ",", "save_npz", "=", "False", ")", "\n", "", "for", "image_path", "in", "progress_bar", "(", "file_list", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "if", "outputs", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "visualize_results", ":", "\n", "            ", "saver", "(", "outputs", ",", "image_path", ")", "\n", "", "results", "=", "collect_relative_results", "(", "outputs", ")", "\n", "all_results_dict", "[", "osp", ".", "basename", "(", "image_path", ")", "]", "=", "results", "\n", "\n", "", "result_save_path", "=", "osp", ".", "join", "(", "output_save_dir", ",", "'{}_results.npz'", ")", ".", "format", "(", "set_name", ")", "\n", "np", ".", "savez", "(", "result_save_path", ",", "results", "=", "all_results_dict", ")", "\n", "return", "result_save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_Relative_Human.get_ROMP_results_on_RH": [[108, 138], ["argparse.Namespace", "os.join", "os.join", "list", "ROMP", "romp.utils.progress_bar", "os.join().format", "numpy.savez", "[].keys", "os.path.join", "os.path.join", "romp.ResultSaver", "cv2.imread", "ROMP.", "eval_Relative_Human.collect_relative_results", "os.join", "romp.ResultSaver.", "os.join", "os.basename", "numpy.load"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.progress_bar", "home.repos.pwc.inspect_result.Arthur151_ROMP.evaluation.eval_Relative_Human.collect_relative_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "get_ROMP_results_on_RH", "(", "set_name", "=", "'test'", ")", ":", "\n", "    ", "from", "romp", "import", "ROMP", "\n", "default_eval_settings", "=", "argparse", ".", "Namespace", "(", "GPU", "=", "0", ",", "calc_smpl", "=", "True", ",", "center_thresh", "=", "0.25", ",", "frame_rate", "=", "24", ",", "input", "=", "None", ",", "mode", "=", "'image'", ",", "model_onnx_path", "=", "'/home/yusun/.romp/ROMP.onnx'", ",", "model_path", "=", "'/home/yusun/.romp/ROMP.pkl'", ",", "onnx", "=", "False", ",", "render_mesh", "=", "False", ",", "save_path", "=", "osp", ".", "join", "(", "output_save_dir", ",", "'visualization'", ")", ",", "save_video", "=", "False", ",", "show", "=", "False", ",", "show_largest", "=", "False", ",", "smooth_coeff", "=", "3.0", ",", "smpl_path", "=", "'/home/yusun/.romp/smpl_packed_info.pth'", ",", "temporal_optimize", "=", "False", ")", "\n", "\n", "image_folder", "=", "osp", ".", "join", "(", "Relative_Human_dir", ",", "'images'", ")", "\n", "annots_path", "=", "osp", ".", "join", "(", "Relative_Human_dir", ",", "'{}_annots.npz'", ".", "format", "(", "set_name", ")", ")", "\n", "file_list", "=", "list", "(", "np", ".", "load", "(", "annots_path", ",", "allow_pickle", "=", "True", ")", "[", "'annots'", "]", "[", "(", ")", "]", ".", "keys", "(", ")", ")", "\n", "file_list", "=", "[", "os", ".", "path", ".", "join", "(", "image_folder", ",", "img_name", ")", "for", "img_name", "in", "file_list", "]", "\n", "\n", "model", "=", "ROMP", "(", "default_eval_settings", ")", "\n", "\n", "all_results_dict", "=", "{", "}", "\n", "if", "visualize_results", ":", "\n", "        ", "saver", "=", "ResultSaver", "(", "default_eval_settings", ".", "mode", ",", "default_eval_settings", ".", "save_path", ",", "save_npz", "=", "False", ")", "\n", "", "for", "image_path", "in", "progress_bar", "(", "file_list", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "if", "outputs", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "visualize_results", ":", "\n", "            ", "saver", "(", "outputs", ",", "image_path", ")", "\n", "", "results", "=", "collect_relative_results", "(", "outputs", ")", "\n", "all_results_dict", "[", "osp", ".", "basename", "(", "image_path", ")", "]", "=", "results", "\n", "\n", "", "result_save_path", "=", "osp", ".", "join", "(", "output_save_dir", ",", "'{}_results.npz'", ")", ".", "format", "(", "set_name", ")", "\n", "np", ".", "savez", "(", "result_save_path", ",", "results", "=", "all_results_dict", ")", "\n", "return", "result_save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.joint_angle_error": [[26, 53], ["numpy.reshape", "numpy.reshape", "numpy.transpose", "numpy.matmul", "range", "numpy.mean", "cv2.Rodrigues", "angles.append", "numpy.array", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.Rodrigues"], ["def", "joint_angle_error", "(", "pred_mat", ",", "gt_mat", ")", ":", "\n", "    ", "\"\"\"\n    Compute the geodesic distance between the two input matrices.\n    :param pred_mat: predicted rotation matrices. Shape: ( Seq, 9g, 3, 3)\n    :param gt_mat: ground truth rotation matrices. Shape: ( Seq, 24, 3, 3)\n    :return: Mean geodesic distance between input matrices.\n    \"\"\"", "\n", "\n", "gt_mat", "=", "gt_mat", "[", ":", ",", "SMPL_OR_JOINTS", ",", ":", ",", ":", "]", "\n", "\n", "# Reshape the matrices into B x 3 x 3 arrays", "\n", "r1", "=", "np", ".", "reshape", "(", "pred_mat", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "r2", "=", "np", ".", "reshape", "(", "gt_mat", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "\n", "# Transpose gt matrices", "\n", "r2t", "=", "np", ".", "transpose", "(", "r2", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "# compute R1 * R2.T, if prediction and target match, this will be the identity matrix", "\n", "r", "=", "np", ".", "matmul", "(", "r1", ",", "r2t", ")", "\n", "\n", "angles", "=", "[", "]", "\n", "# Convert rotation matrix to axis angle representation and find the angle", "\n", "for", "i", "in", "range", "(", "r1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "aa", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "r", "[", "i", "]", ")", "\n", "angles", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "aa", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "np", ".", "array", "(", "angles", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.compute_auc": [[55, 68], ["numpy.min", "numpy.max", "numpy.interp", "integrate.quad"], "function", ["None"], ["", "def", "compute_auc", "(", "xpts", ",", "ypts", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the AUC.\n    :param xpts: Points on the X axis - the threshold values\n    :param ypts: Points on the Y axis - the pck value for that threshold\n    :return: The AUC value computed by integrating over pck values for all thresholds\n    \"\"\"", "\n", "a", "=", "np", ".", "min", "(", "xpts", ")", "\n", "b", "=", "np", ".", "max", "(", "xpts", ")", "\n", "from", "scipy", "import", "integrate", "\n", "myfun", "=", "lambda", "x", ":", "np", ".", "interp", "(", "x", ",", "xpts", ",", "ypts", ")", "\n", "auc", "=", "integrate", ".", "quad", "(", "myfun", ",", "a", ",", "b", ")", "[", "0", "]", "\n", "return", "auc", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.compute_pck": [[70, 80], ["numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "compute_pck", "(", "errors", ",", "THRESHOLD", ")", ":", "\n", "    ", "\"\"\"\n    Computes Percentage-Correct Keypoints\n    :param errors: N x 12 x 1\n    :param THRESHOLD: Threshold value used for PCK\n    :return: the final PCK value\n    \"\"\"", "\n", "errors_pck", "=", "errors", "<=", "THRESHOLD", "\n", "errors_pck", "=", "np", ".", "mean", "(", "errors_pck", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "mean", "(", "errors_pck", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.compute_similarity_transform": [[82, 148], ["S1.mean", "S2.mean", "numpy.sum", "X1.dot", "numpy.linalg.svd", "numpy.eye", "numpy.sign", "V.dot", "numpy.tile", "numpy.identity", "numpy.sum", "numpy.linalg.det", "np.eye.dot", "numpy.trace", "numpy.mean", "numpy.abs", "U.dot", "np.identity.dot", "np.identity.dot", "np.identity.dot"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "compute_similarity_transform", "(", "S1", ",", "S2", ")", ":", "\n", "    ", "'''\n    Computes a similarity transform (sR, t) that takes\n    a set of 3D points S1 (3 x N) closest to a set of 3D points S2,\n    where R is an 3x3 rotation matrix, t 3x1 translation, s scale.\n    i.e. solves the orthogonal Procrutes problem.\n    Ensure that the first argument is the prediction\n\n    Source: https://en.wikipedia.org/wiki/Kabsch_algorithm\n\n    :param S1 predicted joint positions array 24 x 3\n    :param S2 ground truth joint positions array 24 x 3\n    :return S1_hat: the predicted joint positions after apply similarity transform\n            R : the rotation matrix computed in procrustes analysis\n    '''", "\n", "# If all the values in pred3d are zero then procrustes analysis produces nan values", "\n", "# Instead we assume the mean of the GT joint positions is the transformed joint value", "\n", "\n", "if", "not", "(", "np", ".", "sum", "(", "np", ".", "abs", "(", "S1", ")", ")", "==", "0", ")", ":", "\n", "        ", "transposed", "=", "False", "\n", "if", "S1", ".", "shape", "[", "0", "]", "!=", "3", "and", "S1", ".", "shape", "[", "0", "]", "!=", "2", ":", "\n", "            ", "S1", "=", "S1", ".", "T", "\n", "S2", "=", "S2", ".", "T", "\n", "transposed", "=", "True", "\n", "", "assert", "(", "S2", ".", "shape", "[", "1", "]", "==", "S1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# 1. Remove mean.", "\n", "mu1", "=", "S1", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "mu2", "=", "S2", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "X1", "=", "S1", "-", "mu1", "\n", "X2", "=", "S2", "-", "mu2", "\n", "\n", "# 2. Compute variance of X1 used for scale.", "\n", "var1", "=", "np", ".", "sum", "(", "X1", "**", "2", ")", "\n", "\n", "# 3. The outer product of X1 and X2.", "\n", "K", "=", "X1", ".", "dot", "(", "X2", ".", "T", ")", "\n", "\n", "# 4. Solution that Maximizes trace(R'K) is R=U*V', where U, V are", "\n", "# singular vectors of K.", "\n", "U", ",", "s", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "K", ")", "\n", "V", "=", "Vh", ".", "T", "\n", "# Construct Z that fixes the orientation of R to get det(R)=1.", "\n", "Z", "=", "np", ".", "eye", "(", "U", ".", "shape", "[", "0", "]", ")", "\n", "Z", "[", "-", "1", ",", "-", "1", "]", "*=", "np", ".", "sign", "(", "np", ".", "linalg", ".", "det", "(", "U", ".", "dot", "(", "V", ".", "T", ")", ")", ")", "\n", "# Construct R.", "\n", "R", "=", "V", ".", "dot", "(", "Z", ".", "dot", "(", "U", ".", "T", ")", ")", "\n", "\n", "# 5. Recover scale.", "\n", "scale", "=", "np", ".", "trace", "(", "R", ".", "dot", "(", "K", ")", ")", "/", "var1", "\n", "\n", "# 6. Recover translation.", "\n", "t", "=", "mu2", "-", "scale", "*", "(", "R", ".", "dot", "(", "mu1", ")", ")", "\n", "\n", "# 7. Error:", "\n", "S1_hat", "=", "scale", "*", "R", ".", "dot", "(", "S1", ")", "+", "t", "\n", "\n", "if", "transposed", ":", "\n", "            ", "S1_hat", "=", "S1_hat", ".", "T", "\n", "\n", "", "return", "S1_hat", ",", "R", "\n", "", "else", ":", "\n", "        ", "S1_hat", "=", "np", ".", "tile", "(", "np", ".", "mean", "(", "S2", ",", "axis", "=", "0", ")", ",", "(", "SMPL_NR_JOINTS", ",", "1", ")", ")", "\n", "R", "=", "np", ".", "identity", "(", "3", ")", "\n", "\n", "return", "S1_hat", ",", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.align_by_root": [[150, 158], ["None"], "function", ["None"], ["", "", "def", "align_by_root", "(", "joints", ")", ":", "\n", "    ", "\"\"\"\n    Assumes joints is 24 x 3 in SMPL order.\n    Subtracts the location of the root joint from all the other joints\n    \"\"\"", "\n", "root", "=", "joints", "[", "0", ",", ":", "]", "\n", "\n", "return", "joints", "-", "root", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.compute_errors": [[160, 200], ["enumerate", "zip", "evaluate.align_by_root", "evaluate.align_by_root", "numpy.sqrt", "errors.append", "errors_pck.append", "evaluate.compute_similarity_transform", "numpy.sqrt", "errors_pa.append", "proc_rot.append", "numpy.mean", "numpy.mean", "numpy.stack", "numpy.stack", "numpy.sum", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.align_by_root", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.align_by_root", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.compute_similarity_transform", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "compute_errors", "(", "preds3d", ",", "gt3ds", ")", ":", "\n", "    ", "\"\"\"\n    Gets MPJPE after root alignment + MPJPE after Procrustes.\n    Evaluates on all the 24 joints joints.\n    Inputs:\n    :param gt3ds: N x 24 x 3\n    :param preds: N x 24 x 3\n    :returns\n        MPJPE : scalar - mean of all MPJPE errors\n        MPJPE_PA : scalar- mean of all MPJPE_PA errors\n        errors_pck : N x 24 - stores the error b/w GT and prediction for each joint separate\n        proc_mats : N x 3 x 3 - for each frame, stores the 3 x 3 rotation matrix that best aligns the prediction and GT\n    \"\"\"", "\n", "errors", ",", "errors_pa", ",", "errors_pck", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "proc_rot", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "gt3d", ",", "pred3d", ")", "in", "enumerate", "(", "zip", "(", "gt3ds", ",", "preds3d", ")", ")", ":", "\n", "# gt3d = gt3d.reshape(-1, 3)", "\n", "# Root align.", "\n", "        ", "gt3d", "=", "align_by_root", "(", "gt3d", ")", "\n", "pred3d", "=", "align_by_root", "(", "pred3d", ")", "\n", "\n", "# Compute MPJPE", "\n", "joint_error", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "gt3d", "-", "pred3d", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "errors", ".", "append", "(", "np", ".", "mean", "(", "joint_error", ")", ")", "\n", "\n", "# Joint errors for PCK Calculation", "\n", "joint_error_maj", "=", "joint_error", "[", "SMPL_MAJOR_JOINTS", "]", "\n", "errors_pck", ".", "append", "(", "joint_error_maj", ")", "\n", "\n", "# Compute MPJPE_PA and also store similiarity matrices to apply them later to rotation matrices for MPJAE_PA", "\n", "pred3d_sym", ",", "R", "=", "compute_similarity_transform", "(", "pred3d", ",", "gt3d", ")", "\n", "pa_error", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "gt3d", "-", "pred3d_sym", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "errors_pa", ".", "append", "(", "np", ".", "mean", "(", "pa_error", ")", ")", "\n", "\n", "proc_rot", ".", "append", "(", "R", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "np", ".", "array", "(", "errors", ")", ")", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "errors_pa", ")", ")", ",", "np", ".", "stack", "(", "errors_pck", ",", "0", ")", ",", "np", ".", "stack", "(", "proc_rot", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.with_ones": [[202, 211], ["numpy.ones", "numpy.concatenate"], "function", ["None"], ["", "def", "with_ones", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Converts an array in 3d coordinates to 4d homogenous coordiantes\n    :param data: array of shape A x B x 3\n    :return return ret_arr: array of shape A x B x 4 where the extra dimension is filled with ones\n    \"\"\"", "\n", "ext_arr", "=", "np", ".", "ones", "(", "(", "data", ".", "shape", "[", "0", "]", ",", "data", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "ret_arr", "=", "np", ".", "concatenate", "(", "(", "data", ",", "ext_arr", ")", ",", "axis", "=", "2", ")", "\n", "return", "ret_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.apply_camera_transforms": [[213, 234], ["evaluate.with_ones", "numpy.matmul", "numpy.transpose", "numpy.expand_dims", "numpy.tile", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.with_ones"], ["", "def", "apply_camera_transforms", "(", "joints", ",", "rotations", ",", "camera", ")", ":", "\n", "    ", "\"\"\"\n    Applies camera transformations to joint locations and rotations matrices\n    :param joints: B x 24 x 3\n    :param rotations: B x 24 x 3 x 3\n    :param camera: B x 4 x 4 - already transposed\n    :return: joints B x 24 x 3 joints after applying camera transformations\n             rotations B x 24 x 3 x 3 - rotations matrices after applying camera transformations\n    \"\"\"", "\n", "joints", "=", "with_ones", "(", "joints", ")", "# B x 4 x 4", "\n", "joints", "=", "np", ".", "matmul", "(", "joints", ",", "camera", ")", "\n", "\n", "# multiply all rotation matrices with the camera rotation matrix", "\n", "# transpose camera coordinates back", "\n", "cam_new", "=", "np", ".", "transpose", "(", "camera", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "cam_new", "=", "np", ".", "expand_dims", "(", "cam_new", ",", "1", ")", "\n", "cam_new", "=", "np", ".", "tile", "(", "cam_new", ",", "(", "1", ",", "24", ",", "1", ",", "1", ")", ")", "\n", "# B x 24 x 3 x 3", "\n", "rotations", "=", "np", ".", "matmul", "(", "cam_new", ",", "rotations", ")", "\n", "\n", "return", "joints", "[", ":", ",", ":", ",", ":", "3", "]", ",", "rotations", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.check_valid_inds": [[236, 257], ["numpy.mean", "numpy.logical_not", "numpy.array().astype", "numpy.logical_and", "numpy.array", "numpy.mean", "numpy.abs", "numpy.array", "numpy.where"], "function", ["None"], ["", "def", "check_valid_inds", "(", "poses2d", ",", "camposes_valid", ")", ":", "\n", "    ", "\"\"\"\n    Computes the indices where further computations are required\n    :param poses2d: N x 18 x 3 array of 2d Poses\n    :param camposes_valid: N x 1 array of indices where camera poses are valid\n    :return: array of indices indicating frame ids in the sequence which are to be evaluated\n    \"\"\"", "\n", "\n", "# find all indices in the N sequences where the sum of the 18x3 array is not zero", "\n", "# N, numpy array", "\n", "poses2d_mean", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "poses2d", ")", ",", "axis", "=", "2", ")", ",", "axis", "=", "1", ")", "\n", "poses2d_bool", "=", "poses2d_mean", "==", "0", "\n", "poses2d_bool_inv", "=", "np", ".", "logical_not", "(", "poses2d_bool", ")", "\n", "\n", "# find all the indices where the camposes are valid", "\n", "camposes_valid", "=", "np", ".", "array", "(", "camposes_valid", ")", ".", "astype", "(", "'bool'", ")", "\n", "\n", "final", "=", "np", ".", "logical_and", "(", "poses2d_bool_inv", ",", "camposes_valid", ")", "\n", "indices", "=", "np", ".", "array", "(", "np", ".", "where", "(", "final", "==", "True", ")", "[", "0", "]", ")", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.get_data": [[259, 369], ["zip", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "pw3d_eval.SMPL.SMPL", "pw3d_eval.SMPL.SMPL", "pw3d_eval.SMPL.SMPL", "pickle.load", "pickle.load", "range", "open", "open", "len", "evaluate.check_valid_inds", "pkl.load.keys", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.tile", "numpy.array", "smpl_model_dict[].update", "numpy.transpose", "evaluate.apply_camera_transforms", "np.concatenate.append", "np.concatenate.append", "numpy.array", "np.concatenate.append", "numpy.array", "np.concatenate.append", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.check_valid_inds", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.apply_camera_transforms"], ["", "def", "get_data", "(", "paths_gt", ",", "paths_pred", ",", "truth_dir", ")", ":", "\n", "    ", "\"\"\"\n    The function reads all the ground truth and prediction files. And concatenates\n\n    :param paths_gt: all the paths corresponding to the ground truth - list of pkl files\n    :param paths_prd: all the paths corresponding to the predictions - list of pkl files\n    :return:\n        jp_pred: jointPositions Prediction. Shape N x 24 x 3\n        jp_gt: jointPositions ground truth. Shape: N x 24 x 3\n        mats_pred: Global rotation matrices predictions. Shape N x 24 x 3 x 3\n        mats_gt: Global rotation matrices ground truths. Shape N x 24 x 3 x 3\n    \"\"\"", "\n", "\n", "# all predicted joint positions", "\n", "all_jp_preds", "=", "[", "]", "\n", "# all ground truth joint positions", "\n", "all_jp_gts", "=", "[", "]", "\n", "\n", "# all ground-truth rotation matrices", "\n", "all_glob_rot_gts", "=", "[", "]", "\n", "# all predicted rotations matrices", "\n", "all_glob_rot_preds", "=", "[", "]", "\n", "\n", "seq", "=", "0", "\n", "num_jps_pred", "=", "0", "\n", "num_ors_pred", "=", "0", "\n", "num_params_pred", "=", "0", "\n", "\n", "smpl_model_dict", "=", "{", "'f'", ":", "SMPL", "(", "center_idx", "=", "0", ",", "gender", "=", "'f'", ",", "model_root", "=", "smpl_model_path", ")", ",", "'m'", ":", "SMPL", "(", "center_idx", "=", "0", ",", "gender", "=", "'m'", ",", "model_root", "=", "smpl_model_path", ")", ",", "'n'", ":", "SMPL", "(", "center_idx", "=", "0", ",", "gender", "=", "'neutral'", ",", "model_root", "=", "smpl_model_path", ")", ",", "}", "\n", "\n", "# construct the data structures -", "\n", "for", "path_pred", ",", "path_gt", "in", "zip", "(", "paths_pred", ",", "paths_gt", ")", ":", "\n", "        ", "seq", "=", "seq", "+", "1", "\n", "# Open pkl files", "\n", "data_gt", "=", "pkl", ".", "load", "(", "open", "(", "path_gt", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "data_pred", "=", "pkl", ".", "load", "(", "open", "(", "path_pred", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "genders", "=", "data_gt", "[", "'genders'", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "genders", ")", ")", ":", "\n", "\n", "# Get valid frames", "\n", "# Frame with no zeros in the poses2d file and where campose_valid is True", "\n", "            ", "poses2d_gt", "=", "data_gt", "[", "'poses2d'", "]", "\n", "poses2d_gt_i", "=", "poses2d_gt", "[", "i", "]", "\n", "\n", "camposes_valid", "=", "data_gt", "[", "'campose_valid'", "]", "\n", "camposes_valid_i", "=", "camposes_valid", "[", "i", "]", "\n", "\n", "valid_indices", "=", "check_valid_inds", "(", "poses2d_gt_i", ",", "camposes_valid_i", ")", "\n", "\n", "keys_pred", "=", "data_pred", ".", "keys", "(", ")", "\n", "\n", "# Get prediction joints", "\n", "if", "'jointPositions'", "in", "keys_pred", ":", "\n", "                ", "num_jps_pred", "=", "num_jps_pred", "+", "1", "\n", "jp_pred", "=", "np", ".", "array", "(", "data_pred", "[", "'jointPositions'", "]", ")", "\n", "# select a subset of prediction data", "\n", "jp_pred_i", "=", "jp_pred", "[", "i", ",", "valid_indices", ",", ":", ",", ":", "]", "\n", "all_jp_preds", ".", "append", "(", "jp_pred_i", ")", "\n", "\n", "# Get predicted orientations", "\n", "", "if", "'orientations'", "in", "keys_pred", ":", "\n", "                ", "num_ors_pred", "=", "num_ors_pred", "+", "1", "\n", "glob_rot_pred", "=", "np", ".", "array", "(", "data_pred", "[", "'orientations'", "]", ")", "\n", "# select a subset of prediction data", "\n", "glob_rot_pred_i", "=", "glob_rot_pred", "[", "i", ",", "valid_indices", ",", ":", ",", ":", "]", "\n", "all_glob_rot_preds", ".", "append", "(", "glob_rot_pred_i", ")", "\n", "\n", "", "if", "'smpl_params'", "in", "keys_pred", ":", "\n", "                ", "num_params_pred", "=", "num_params_pred", "+", "1", "\n", "params_pred", "=", "np", ".", "array", "(", "data_pred", "[", "'smpl_params'", "]", ")", "\n", "params_pred_i", "=", "params_pred", "[", "i", ",", "valid_indices", ",", ":", "]", "\n", "\n", "# Get the ground truth SMPL body parameters - poses, betas and translation parameters", "\n", "", "pose_params", "=", "np", ".", "array", "(", "data_gt", "[", "'poses'", "]", ")", "\n", "pose_params_i", "=", "pose_params", "[", "i", ",", "valid_indices", ",", ":", "]", "\n", "\n", "shape_params", "=", "np", ".", "array", "(", "data_gt", "[", "'betas'", "]", "[", "i", "]", ")", "\n", "shape_params", "=", "np", ".", "expand_dims", "(", "shape_params", ",", "0", ")", "\n", "shape_params", "=", "shape_params", "[", ":", ",", ":", "10", "]", "\n", "shape_params", "=", "np", ".", "tile", "(", "shape_params", ",", "(", "pose_params_i", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "trans_params", "=", "np", ".", "array", "(", "data_gt", "[", "'trans'", "]", ")", "\n", "\n", "trans_params_i", "=", "trans_params", "[", "i", ",", "valid_indices", ",", ":", "]", "\n", "\n", "# Get the GT joint and vertex positions and the global rotation matrices", "\n", "verts_gt", ",", "jp_gt", ",", "glb_rot_mats_gt", "=", "smpl_model_dict", "[", "genders", "[", "i", "]", "]", ".", "update", "(", "pose_params_i", ",", "shape_params", ",", "trans_params_i", ")", "\n", "\n", "# Apply Camera Matrix Transformation to ground truth values", "\n", "cam_matrix", "=", "data_gt", "[", "'cam_poses'", "]", "\n", "new_cam_poses", "=", "np", ".", "transpose", "(", "cam_matrix", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "new_cam_poses_i", "=", "new_cam_poses", "[", "valid_indices", ",", ":", ",", ":", "]", "\n", "\n", "jp_gt", ",", "glb_rot_mats_gt", "=", "apply_camera_transforms", "(", "jp_gt", ",", "glb_rot_mats_gt", ",", "new_cam_poses_i", ")", "\n", "all_jp_gts", ".", "append", "(", "jp_gt", ")", "\n", "all_glob_rot_gts", ".", "append", "(", "glb_rot_mats_gt", ")", "\n", "del", "jp_gt", ",", "verts_gt", ",", "glb_rot_mats_gt", "\n", "\n", "", "", "print", "(", "'number of sequences: '", ",", "num_jps_pred", ")", "\n", "all_jp_preds", "=", "np", ".", "concatenate", "(", "all_jp_preds", ",", "0", ")", "\n", "all_jp_gts", "=", "np", ".", "concatenate", "(", "all_jp_gts", ",", "0", ")", "\n", "\n", "all_glob_rot_preds", "=", "np", ".", "concatenate", "(", "all_glob_rot_preds", ",", "0", ")", "\n", "all_glob_rot_gts", "=", "np", ".", "concatenate", "(", "all_glob_rot_gts", ",", "0", ")", "\n", "\n", "return", "(", "all_jp_preds", ",", "all_jp_gts", ",", "all_glob_rot_preds", ",", "all_glob_rot_gts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.get_paths": [[371, 392], ["print", "sorted", "sorted", "len", "len", "len", "len", "sorted", "sorted", "glob.glob", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "get_paths", "(", "submit_dir", ",", "truth_dir", ")", ":", "\n", "    ", "\"\"\"\n    submit_dir: The location of the submit directory\n    truth_dir: The location of the truth directory\n    Return: two lists\n            fnames_gt : the list of all files in ground truth folder\n            fnames_pred : the list of all files in the predicted folder\n    \"\"\"", "\n", "fnames_gt", "=", "[", "]", "\n", "fnames_pred", "=", "[", "]", "\n", "\n", "keys", "=", "[", "'train'", ",", "'validation'", ",", "'test'", "]", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "fnames_gt_temp", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "truth_dir", ",", "key", ",", "\"\"", ")", "+", "\"*.pkl\"", ")", ")", "\n", "fnames_pred_temp", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "submit_dir", ",", "key", ",", "\"\"", ")", "+", "\"*.pkl\"", ")", ")", "\n", "fnames_gt", "=", "fnames_gt", "+", "fnames_gt_temp", "\n", "fnames_pred", "=", "fnames_pred", "+", "fnames_pred_temp", "\n", "\n", "", "assert", "len", "(", "fnames_gt", ")", "==", "len", "(", "fnames_pred", ")", ",", "print", "(", "'len(fnames_gt),len(fnames_pred): '", ",", "len", "(", "fnames_gt", ")", ",", "len", "(", "fnames_pred", ")", ")", "\n", "return", "sorted", "(", "fnames_gt", ")", ",", "sorted", "(", "fnames_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.main": [[394, 479], ["evaluate.get_paths", "print", "evaluate.get_data", "print", "errs.keys", "print", "f.close", "evaluate.compute_errors", "numpy.arange", "evaluate.compute_auc", "numpy.degrees", "open", "f.write", "evaluate.compute_pck", "evaluate.compute_pck", "pck_aucs.append", "numpy.expand_dims", "numpy.tile", "numpy.matmul", "numpy.degrees", "evaluate.joint_angle_error", "np.arange.max", "evaluate.joint_angle_error", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.get_paths", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.get_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.compute_errors", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.compute_auc", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.compute_pck", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.compute_pck", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.joint_angle_error", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.evaluate.joint_angle_error"], ["", "def", "main", "(", "submit_dir", ",", "truth_dir", ",", "output_filename", ")", ":", "\n", "    ", "\"\"\"\n    :param submit_dir: The location of the submission files\n    :param truth_dir: The location of the GT files\n    :return output_filename: The location of the output txt file\n    \"\"\"", "\n", "\n", "# Get all the GT and submission paths in paired list form", "\n", "fnames_gt", ",", "fnames_pred", "=", "get_paths", "(", "submit_dir", ",", "truth_dir", ")", "\n", "\n", "print", "(", "'geting data'", ")", "\n", "# Get all the ground-truth and submission joint positions", "\n", "# Get all the ground-truth and submission Global rotation matrices", "\n", "jp_pred", ",", "jp_gt", ",", "mats_pred", ",", "mats_gt", "=", "get_data", "(", "fnames_gt", ",", "fnames_pred", ",", "truth_dir", ")", "\n", "\n", "# Check if the predicted and GT joints have the same number", "\n", "assert", "jp_pred", ".", "shape", "==", "jp_gt", ".", "shape", "\n", "assert", "mats_pred", ".", "shape", "[", "0", "]", "==", "mats_gt", ".", "shape", "[", "0", "]", "\n", "PVE", "=", "np", ".", "inf", "\n", "\n", "print", "(", "'start evaluation'", ")", "\n", "# If there are submitted joint predictions", "\n", "if", "not", "jp_pred", ".", "shape", "==", "(", "0", ",", ")", ":", "\n", "\n", "# Joint errors and procrustes matrices", "\n", "        ", "MPJPE_final", ",", "MPJPE_PA_final", ",", "errors_pck", ",", "mat_procs", "=", "compute_errors", "(", "jp_pred", "*", "1000.", ",", "jp_gt", "*", "1000.", ")", "\n", "\n", "# PCK value", "\n", "pck_final", "=", "compute_pck", "(", "errors_pck", ",", "PCK_THRESH", ")", "*", "100.", "\n", "\n", "# AUC value", "\n", "auc_range", "=", "np", ".", "arange", "(", "AUC_MIN", ",", "AUC_MAX", ")", "\n", "pck_aucs", "=", "[", "]", "\n", "for", "pck_thresh_", "in", "auc_range", ":", "\n", "            ", "err_pck_tem", "=", "compute_pck", "(", "errors_pck", ",", "pck_thresh_", ")", "\n", "pck_aucs", ".", "append", "(", "err_pck_tem", ")", "\n", "\n", "", "auc_final", "=", "compute_auc", "(", "auc_range", "/", "auc_range", ".", "max", "(", ")", ",", "pck_aucs", ")", "\n", "\n", "# If orientation are submitted, compute orientation errors", "\n", "if", "not", "(", "mats_pred", ".", "shape", "==", "(", "0", ",", ")", ")", ":", "\n", "# Apply procrustus rotation to the global rotation matrices", "\n", "            ", "mats_procs_exp", "=", "np", ".", "expand_dims", "(", "mat_procs", ",", "1", ")", "\n", "mats_procs_exp", "=", "np", ".", "tile", "(", "mats_procs_exp", ",", "(", "1", ",", "len", "(", "SMPL_OR_JOINTS", ")", ",", "1", ",", "1", ")", ")", "\n", "mats_pred_prc", "=", "np", ".", "matmul", "(", "mats_procs_exp", ",", "mats_pred", ")", "\n", "\n", "# Compute differences between the predicted matrices after procrustes and GT matrices", "\n", "error_rot_procruster", "=", "np", ".", "degrees", "(", "joint_angle_error", "(", "mats_pred_prc", ",", "mats_gt", ")", ")", "\n", "", "else", ":", "\n", "            ", "error_rot_procruster", "=", "np", ".", "inf", "\n", "", "", "else", ":", "\n", "        ", "MPJPE_final", "=", "np", ".", "inf", "\n", "MPJPE_PA_final", "=", "np", ".", "inf", "\n", "\n", "pck_final", "=", "np", ".", "inf", "\n", "auc_final", "=", "np", ".", "inf", "\n", "\n", "error_rot_procruster", "=", "np", ".", "inf", "\n", "\n", "# If only orientation are provided, only compute MPJAE", "\n", "# MPJAE_PA requires procrustes analysis which requires joint positions to be submitted as well", "\n", "", "if", "not", "(", "mats_pred", ".", "shape", "==", "(", "0", ",", ")", ")", ":", "\n", "        ", "error_rot", "=", "np", ".", "degrees", "(", "joint_angle_error", "(", "mats_pred", ",", "mats_gt", ")", ")", "\n", "", "else", ":", "\n", "        ", "error_rot", "=", "np", ".", "inf", "\n", "\n", "", "errs", "=", "{", "\n", "'MPJPE'", ":", "MPJPE_final", ",", "\n", "'MPJPE_PA'", ":", "MPJPE_PA_final", ",", "\n", "'PCK'", ":", "pck_final", ",", "\n", "'AUC'", ":", "auc_final", ",", "\n", "'MPJAE'", ":", "error_rot", ",", "\n", "'MPJAE_PA'", ":", "error_rot_procruster", ",", "\n", "'PVE'", ":", "PVE", ",", "\n", "}", "\n", "\n", "str", "=", "''", "\n", "for", "err", "in", "errs", ".", "keys", "(", ")", ":", "\n", "        ", "if", "not", "errs", "[", "err", "]", "==", "np", ".", "inf", ":", "\n", "            ", "str", "=", "str", "+", "err", "+", "': {}\\n'", ".", "format", "(", "errs", "[", "err", "]", ")", "\n", "\n", "", "", "print", "(", "str", ")", "\n", "with", "open", "(", "output_filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.SMPL.SMPL.__init__": [[10, 52], ["pickle.load", "numpy.array", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "numpy.array", "numpy.array", "list", "len", "os.path.join", "open", "smpl_data[].toarray", "smpl_data[].astype", "SMPL.SMPL.kintree_table[].tolist", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["    ", "def", "__init__", "(", "self", ",", "center_idx", "=", "None", ",", "gender", "=", "'neutral'", ",", "model_root", "=", "'/models'", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            center_idx: index of center joint in our computations,\n            model_root: path to pkl files for the model\n            gender: 'neutral' (default) or 'female' or 'male'\n        \"\"\"", "\n", "self", ".", "center_idx", "=", "center_idx", "\n", "self", ".", "gender", "=", "gender", "\n", "\n", "if", "gender", "==", "'neutral'", ":", "\n", "            ", "self", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_root", ",", "'SMPL_NEUTRAL.pkl'", ")", "\n", "", "elif", "gender", "==", "'f'", ":", "\n", "            ", "self", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_root", ",", "'SMPL_FEMALE.pkl'", ")", "\n", "", "elif", "gender", "==", "'m'", ":", "\n", "            ", "self", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_root", ",", "'SMPL_MALE.pkl'", ")", "\n", "\n", "", "smpl_data", "=", "pkl", ".", "load", "(", "open", "(", "self", ".", "model_path", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "self", ".", "smpl_data", "=", "smpl_data", "\n", "\n", "self", ".", "shapedirs", "=", "np", ".", "array", "(", "smpl_data", "[", "'shapedirs'", "]", ")", "\n", "\n", "self", ".", "posedirs", "=", "np", ".", "array", "(", "smpl_data", "[", "'posedirs'", "]", ")", "\n", "\n", "self", ".", "v_template", "=", "np", ".", "array", "(", "smpl_data", "[", "'v_template'", "]", ")", "\n", "self", ".", "v_template", "=", "np", ".", "expand_dims", "(", "self", ".", "v_template", ",", "axis", "=", "0", ")", "\n", "\n", "self", ".", "J_regressor", "=", "np", ".", "array", "(", "smpl_data", "[", "'J_regressor'", "]", ".", "toarray", "(", ")", ")", "\n", "\n", "self", ".", "weights", "=", "np", ".", "array", "(", "smpl_data", "[", "'weights'", "]", ")", "\n", "\n", "self", ".", "faces", "=", "np", ".", "array", "(", "smpl_data", "[", "'f'", "]", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "\n", "# Kinematic chain params", "\n", "self", ".", "kintree_table", "=", "smpl_data", "[", "'kintree_table'", "]", "\n", "\n", "parents", "=", "list", "(", "self", ".", "kintree_table", "[", "0", "]", ".", "tolist", "(", ")", ")", "\n", "\n", "self", ".", "kintree_parents", "=", "parents", "\n", "\n", "self", ".", "num_joints", "=", "len", "(", "parents", ")", "# 24", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.SMPL.SMPL.update": [[53, 164], ["utils.axan_to_rot_matrix", "numpy.resize", "utils.subtract_flat_id", "numpy.matmul", "numpy.resize", "results.append", "range", "numpy.zeros", "range", "numpy.matmul", "numpy.concatenate", "numpy.sum", "numpy.transpose", "numpy.transpose", "numpy.transpose", "utils.with_zeros", "int", "numpy.resize", "numpy.resize", "numpy.resize", "utils.with_zeros", "numpy.matmul", "results.append", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.concatenate", "numpy.matmul", "numpy.transpose", "numpy.matmul", "numpy.matmul", "numpy.concatenate", "numpy.concatenate", "numpy.expand_dims", "utils.pack", "numpy.transpose", "numpy.ones", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.transpose", "numpy.transpose", "numpy.tile", "numpy.resize"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.utils.axan_to_rot_matrix", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.utils.subtract_flat_id", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.utils.with_zeros", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.utils.with_zeros", "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.utils.pack"], ["", "def", "update", "(", "self", ",", "pose_axisang", ",", "betas", ",", "trans", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n        pose_axisang (Nd array (batch_size x 72)): pose parameters in axis-angle representation\n        betas (Nd array (batch_size x 10)): if provided, uses given shape parameters\n        trans (Nd array (batch_size x 3)): if provided, applies trans to joints and vertices\n        \"\"\"", "\n", "# import ipdb", "\n", "# ipdb.set_trace()", "\n", "batch_size", "=", "pose_axisang", ".", "shape", "[", "0", "]", "\n", "\n", "# Convert axis-angle representation to rotation matrix rep. BATCH X 216", "\n", "pose_rotmat", "=", "axan_to_rot_matrix", "(", "pose_axisang", ")", "\n", "\n", "# Take out the first rotmat (global rotation)", "\n", "root_rot", "=", "np", ".", "resize", "(", "pose_rotmat", "[", ":", ",", ":", "9", "]", ",", "(", "batch_size", ",", "3", ",", "3", ")", ")", "\n", "\n", "# Take out the remaining rotmats (23 joints)", "\n", "pose_rotmat", "=", "pose_rotmat", "[", ":", ",", "9", ":", "]", "\n", "\n", "# Subtract the identity pose matrix from the current pose matrix", "\n", "pose_map", "=", "subtract_flat_id", "(", "pose_rotmat", ")", "\n", "\n", "# v_shaped = v_template + shapedirs * betas", "\n", "v_shaped", "=", "self", ".", "v_template", "+", "np", ".", "transpose", "(", "np", ".", "matmul", "(", "self", ".", "shapedirs", ",", "np", ".", "transpose", "(", "betas", ",", "(", "1", ",", "0", ")", ")", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "j", "=", "np", ".", "matmul", "(", "self", ".", "J_regressor", ",", "v_shaped", ")", "\n", "\n", "\n", "# v_posed = v_shaped + posedirs * pose_map", "\n", "# SHAPE: BATCH X 6890 X 3", "\n", "v_posed", "=", "v_shaped", "+", "np", ".", "transpose", "(", "np", ".", "matmul", "(", "self", ".", "posedirs", ",", "np", ".", "transpose", "(", "pose_map", ",", "(", "1", ",", "0", ")", ")", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "# Global rigid transformation for each joint is stored in results", "\n", "results", "=", "[", "]", "\n", "\n", "# Take the root joint and resize it to BATCH X 3 X 1", "\n", "root_j", "=", "np", ".", "resize", "(", "j", "[", ":", ",", "0", ",", ":", "]", ",", "(", "batch_size", ",", "3", ",", "1", ")", ")", "\n", "\n", "# Create a matrix of size BATCH X 4 X 4 for the root joint", "\n", "results", ".", "append", "(", "with_zeros", "(", "np", ".", "concatenate", "(", "[", "root_rot", ",", "root_j", "]", ",", "2", ")", ")", ")", "\n", "\n", "# Rotate each part", "\n", "for", "i", "in", "range", "(", "self", ".", "num_joints", "-", "1", ")", ":", "\n", "            ", "i_val", "=", "int", "(", "i", "+", "1", ")", "\n", "\n", "# Do the same operation for all the joints in the kinematic chain", "\n", "# for each root create BATCH x 4 x 4 matrix which is the global transformation matrix", "\n", "\n", "joint_rot", "=", "np", ".", "resize", "(", "pose_rotmat", "[", ":", ",", "(", "i_val", "-", "1", ")", "*", "9", ":", "i_val", "*", "9", "]", ",", "(", "batch_size", ",", "3", ",", "3", ")", ")", "\n", "joint_j", "=", "np", ".", "resize", "(", "j", "[", ":", ",", "i_val", ",", ":", "]", ",", "(", "batch_size", ",", "3", ",", "1", ")", ")", "\n", "\n", "# Find the parent for each joint", "\n", "parent", "=", "self", ".", "kintree_parents", "[", "i_val", "]", "\n", "parent_j", "=", "np", ".", "resize", "(", "j", "[", ":", ",", "parent", ",", ":", "]", ",", "(", "batch_size", ",", "3", ",", "1", ")", ")", "\n", "\n", "joint_rel_transform", "=", "with_zeros", "(", "np", ".", "concatenate", "(", "[", "joint_rot", ",", "joint_j", "-", "parent_j", "]", ",", "2", ")", ")", "\n", "\n", "glob_transf_mat", "=", "np", ".", "matmul", "(", "results", "[", "parent", "]", ",", "joint_rel_transform", ")", "\n", "results", ".", "append", "(", "glob_transf_mat", ")", "\n", "\n", "# Global transformation matrix for each joint", "\n", "# list of 24 matrices - each matrix has dimension B x 4 x 4", "\n", "", "results_global", "=", "results", "\n", "\n", "# Joint positions in global coordinates", "\n", "jtr", "=", "np", ".", "stack", "(", "results_global", ",", "axis", "=", "1", ")", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "\n", "# Global rotation for each joint - SHAPE: B x 24 x 3 x 3", "\n", "results_glb_rot", "=", "np", ".", "stack", "(", "results_global", ",", "axis", "=", "1", ")", "[", ":", ",", ":", ",", ":", "3", ",", ":", "3", "]", "\n", "\n", "# B x 4 x 4 x 24 - This will contain the transformation matrices after the inverse T-pose transformation has", "\n", "# been applied", "\n", "results2", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "4", ",", "4", ",", "self", ".", "num_joints", ")", ",", "dtype", "=", "root_j", ".", "dtype", ")", "\n", "\n", "# The inverse transformation for rest pose", "\n", "# T_k^(-1) = [I - \\sum(j_k)]", "\n", "#            [0       1    ]", "\n", "# the product of G and T_k^(-1) comes out to be G - [0 G(j)]", "\n", "#                                                   [0  (0)]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_joints", ")", ":", "\n", "            ", "padd_zero", "=", "np", ".", "zeros", "(", "1", ",", "dtype", "=", "j", ".", "dtype", ")", "\n", "\n", "joint_j", "=", "np", ".", "concatenate", "(", "[", "j", "[", ":", ",", "i", "]", ",", "np", ".", "tile", "(", "np", ".", "resize", "(", "padd_zero", ",", "(", "1", ",", "1", ")", ")", ",", "(", "batch_size", ",", "1", ")", ")", "]", ",", "1", ")", "\n", "\n", "tmp", "=", "np", ".", "matmul", "(", "results", "[", "i", "]", ",", "np", ".", "expand_dims", "(", "joint_j", ",", "axis", "=", "2", ")", ")", "\n", "\n", "results2", "[", ":", ",", ":", ",", ":", ",", "i", "]", "=", "results", "[", "i", "]", "-", "pack", "(", "tmp", ")", "\n", "\n", "# The transformation matrices multiplied by the weights", "\n", "", "T", "=", "np", ".", "matmul", "(", "results2", ",", "np", ".", "transpose", "(", "self", ".", "weights", ",", "(", "1", ",", "0", ")", ")", ")", "\n", "\n", "# The template + blend shapes multiplied by the above product", "\n", "\n", "rest_shape_h", "=", "np", ".", "concatenate", "(", "[", "np", ".", "transpose", "(", "v_posed", ",", "(", "0", ",", "2", ",", "1", ")", ")", ",", "np", ".", "ones", "(", "(", "batch_size", ",", "1", ",", "v_posed", ".", "shape", "[", "1", "]", ")", ",", "\n", "dtype", "=", "T", ".", "dtype", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "verts", "=", "np", ".", "sum", "(", "(", "T", "*", "np", ".", "expand_dims", "(", "rest_shape_h", ",", "axis", "=", "1", ")", ")", ",", "axis", "=", "2", ")", "\n", "verts", "=", "np", ".", "transpose", "(", "verts", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "verts", "=", "verts", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "if", "trans", "is", "not", "None", ":", "\n", "            ", "jtr", "=", "jtr", "+", "np", ".", "expand_dims", "(", "trans", ",", "axis", "=", "1", ")", "\n", "verts", "=", "verts", "+", "np", ".", "expand_dims", "(", "trans", ",", "axis", "=", "1", ")", "\n", "\n", "# Vertices and joints in meters", "\n", "# Vertices: B x 6890 x 3", "\n", "# Jtr: B x 24 x 3", "\n", "# global_rot_matrices: B x 24 x 3 x 3", "\n", "", "return", "verts", ",", "jtr", ",", "results_glb_rot", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.utils.rot_matrix_to_axan": [[5, 13], ["quaternion.as_rotation_vector", "quaternion.from_rotation_matrix"], "function", ["None"], ["import", "os", ".", "path", "as", "osp", "\n", "\n", "import", "cv2", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "numpy", "as", "np", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "torchvision", ".", "ops", "import", "nms", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.utils.axan_to_rot_matrix": [[15, 35], ["numpy.array", "numpy.reshape", "quaternion.from_rotation_vector", "numpy.array", "numpy.resize", "int", "quaternion.as_rotation_matrix"], "function", ["None"], ["# Set printoptions", "\n", "torch", ".", "set_printoptions", "(", "linewidth", "=", "1320", ",", "precision", "=", "5", ",", "profile", "=", "'long'", ")", "\n", "np", ".", "set_printoptions", "(", "linewidth", "=", "320", ",", "formatter", "=", "{", "'float_kind'", ":", "'{:11.5g}'", ".", "format", "}", ")", "# format short g, %precision=5", "\n", "\n", "def", "write_results", "(", "filename", ",", "results", ")", ":", "\n", "    ", "save_format", "=", "'{frame},{id},{x1},{y1}\\n'", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "frame_id", ",", "centers", ",", "track_ids", "in", "results", ":", "\n", "            ", "for", "center", ",", "track_id", "in", "zip", "(", "centers", ",", "track_ids", ")", ":", "\n", "                ", "if", "track_id", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", "=", "center", "\n", "line", "=", "save_format", ".", "format", "(", "frame", "=", "frame_id", ",", "id", "=", "track_id", ",", "x1", "=", "x1", ",", "y1", "=", "y1", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "", "", "print", "(", "'save results to {}'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "", "def", "mkdir_if_missing", "(", "d", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.utils.with_zeros": [[37, 53], ["numpy.array", "numpy.concatenate", "numpy.tile", "numpy.resize"], "function", ["None"], ["    ", "return", "float", "(", "format", "(", "x", ",", "'.3f'", ")", ")", "\n", "\n", "\n", "", "def", "init_seeds", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "\n", "", "def", "load_classes", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Loads class labels at 'path'\n    \"\"\"", "\n", "fp", "=", "open", "(", "path", ",", "'r'", ")", "\n", "names", "=", "fp", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.utils.pack": [[55, 69], ["numpy.zeros", "numpy.concatenate"], "function", ["None"], ["\n", "\n", "", "def", "model_info", "(", "model", ")", ":", "# Plots a line-by-line description of a PyTorch model", "\n", "    ", "n_p", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", ")", "# number parameters", "\n", "n_g", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", "if", "x", ".", "requires_grad", ")", "# number gradients", "\n", "print", "(", "'\\n%5s %50s %9s %12s %20s %12s %12s'", "%", "(", "'layer'", ",", "'name'", ",", "'gradient'", ",", "'parameters'", ",", "'shape'", ",", "'mu'", ",", "'sigma'", ")", ")", "\n", "for", "i", ",", "(", "name", ",", "p", ")", "in", "enumerate", "(", "model", ".", "named_parameters", "(", ")", ")", ":", "\n", "        ", "name", "=", "name", ".", "replace", "(", "'module_list.'", ",", "''", ")", "\n", "print", "(", "'%5g %50s %9s %12g %20s %12.3g %12.3g'", "%", "(", "\n", "i", ",", "name", ",", "p", ".", "requires_grad", ",", "p", ".", "numel", "(", ")", ",", "list", "(", "p", ".", "shape", ")", ",", "p", ".", "mean", "(", ")", ",", "p", ".", "std", "(", ")", ")", ")", "\n", "", "print", "(", "'Model Summary: %g layers, %g parameters, %g gradients\\n'", "%", "(", "i", "+", "1", ",", "n_p", ",", "n_g", ")", ")", "\n", "\n", "\n", "\n", "", "def", "plot_one_box", "(", "x", ",", "img", ",", "color", "=", "None", ",", "label", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "# Plots one bounding box on image img", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.pw3d_eval.utils.subtract_flat_id": [[71, 86], ["numpy.eye", "numpy.resize", "numpy.tile"], "function", ["None"], ["color", "=", "color", "or", "[", "random", ".", "randint", "(", "0", ",", "255", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "c1", ",", "c2", "=", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ",", "(", "int", "(", "x", "[", "2", "]", ")", ",", "int", "(", "x", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "# font thickness", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "tl", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "t_size", "[", "1", "]", "-", "3", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "# filled", "\n", "cv2", ".", "putText", "(", "img", ",", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "2", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "\n", "", "", "def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.03", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.__init__": [[71, 91], ["dict", "dict", "dict", "dict", "collections.defaultdict", "collections.defaultdict", "print", "time.time", "json.load", "print", "coco.COCO.createIndex", "open", "type", "type", "time.time"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.createIndex"], ["    ", "def", "__init__", "(", "self", ",", "annotation_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Constructor of Microsoft COCO helper class for reading and visualizing annotations.\n        :param annotation_file (str): location of annotation file\n        :param image_folder (str): location to the folder that hosts images.\n        :return:\n        \"\"\"", "\n", "# load dataset", "\n", "self", ".", "dataset", ",", "self", ".", "anns", ",", "self", ".", "cats", ",", "self", ".", "imgs", "=", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "self", ".", "imgToAnns", ",", "self", ".", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "self", ".", "anno_file", "=", "[", "annotation_file", "]", "\n", "if", "not", "annotation_file", "==", "None", ":", "\n", "            ", "print", "(", "'loading annotations into memory...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "dataset", "=", "json", ".", "load", "(", "open", "(", "annotation_file", ",", "'r'", ")", ")", "\n", "assert", "type", "(", "dataset", ")", "==", "dict", ",", "'annotation file format {} not supported'", ".", "format", "(", "\n", "type", "(", "dataset", ")", ")", "\n", "print", "(", "'Done (t={:0.2f}s)'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "createIndex", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.createIndex": [[92, 124], ["print", "print", "collections.defaultdict", "collections.defaultdict", "imgToAnns[].append", "catToImgs[].append"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "def", "createIndex", "(", "self", ")", ":", "\n", "# create index", "\n", "        ", "print", "(", "'creating index...'", ")", "\n", "anns", ",", "cats", ",", "imgs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "imgToAnns", ",", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "if", "'annotations'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "\n", "                ", "imgToAnns", "[", "ann", "[", "'image_id'", "]", "]", ".", "append", "(", "ann", ")", "\n", "anns", "[", "ann", "[", "'id'", "]", "]", "=", "ann", "\n", "\n", "", "", "if", "'images'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", ":", "\n", "                ", "imgs", "[", "img", "[", "'id'", "]", "]", "=", "img", "\n", "\n", "\n", "", "", "if", "'categories'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "cat", "in", "self", ".", "dataset", "[", "'categories'", "]", ":", "\n", "                ", "cats", "[", "cat", "[", "'id'", "]", "]", "=", "cat", "\n", "\n", "", "", "if", "'annotations'", "in", "self", ".", "dataset", "and", "'categories'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "                ", "catToImgs", "[", "ann", "[", "'category_id'", "]", "]", ".", "append", "(", "ann", "[", "'image_id'", "]", ")", "\n", "\n", "", "", "print", "(", "'index created!'", ")", "\n", "\n", "# create class members", "\n", "self", ".", "anns", "=", "anns", "\n", "self", ".", "imgToAnns", "=", "imgToAnns", "\n", "self", ".", "catToImgs", "=", "catToImgs", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "cats", "=", "cats", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.info": [[125, 132], ["coco.COCO.dataset[].items", "print"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "info", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print information about the annotation file.\n        :return:\n        \"\"\"", "\n", "for", "key", ",", "value", "in", "self", ".", "dataset", "[", "'info'", "]", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getAnnIds": [[133, 163], ["coco._isArrayLike", "coco._isArrayLike", "len", "len", "len", "list", "len", "itertools.chain.from_iterable", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike"], ["", "", "def", "getAnnIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ",", "areaRng", "=", "[", "]", ",", "iscrowd", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Get ann ids that satisfy given filter conditions. default skips that filter\n        :param imgIds  (int array)     : get anns for given imgs\n               catIds  (int array)     : get anns for given cats\n               areaRng (float array)   : get anns for given area range (e.g. [0 inf])\n               iscrowd (boolean)       : get anns for given crowd label (False or True)\n        :return: ids (int array)       : integer array of ann ids\n        \"\"\"", "\n", "imgIds", "=", "imgIds", "if", "_isArrayLike", "(", "imgIds", ")", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "_isArrayLike", "(", "catIds", ")", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "len", "(", "areaRng", ")", "==", "0", ":", "\n", "            ", "anns", "=", "self", ".", "dataset", "[", "'annotations'", "]", "\n", "", "else", ":", "\n", "            ", "if", "not", "len", "(", "imgIds", ")", "==", "0", ":", "\n", "                ", "lists", "=", "[", "self", ".", "imgToAnns", "[", "imgId", "]", "\n", "for", "imgId", "in", "imgIds", "if", "imgId", "in", "self", ".", "imgToAnns", "]", "\n", "anns", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "lists", ")", ")", "\n", "", "else", ":", "\n", "                ", "anns", "=", "self", ".", "dataset", "[", "'annotations'", "]", "\n", "", "anns", "=", "anns", "if", "len", "(", "catIds", ")", "==", "0", "else", "[", "\n", "ann", "for", "ann", "in", "anns", "if", "ann", "[", "'category_id'", "]", "in", "catIds", "]", "\n", "anns", "=", "anns", "if", "len", "(", "areaRng", ")", "==", "0", "else", "[", "\n", "ann", "for", "ann", "in", "anns", "if", "ann", "[", "'area'", "]", ">", "areaRng", "[", "0", "]", "and", "ann", "[", "'area'", "]", "<", "areaRng", "[", "1", "]", "]", "\n", "", "if", "not", "iscrowd", "==", "None", ":", "\n", "            ", "ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "anns", "if", "ann", "[", "'iscrowd'", "]", "==", "iscrowd", "]", "\n", "", "else", ":", "\n", "            ", "ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "anns", "]", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getCatIds": [[164, 188], ["coco._isArrayLike", "coco._isArrayLike", "coco._isArrayLike", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike"], ["", "def", "getCatIds", "(", "self", ",", "catNms", "=", "[", "]", ",", "supNms", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        filtering parameters. default skips that filter.\n        :param catNms (str array)  : get cats for given cat names\n        :param supNms (str array)  : get cats for given supercategory names\n        :param catIds (int array)  : get cats for given cat ids\n        :return: ids (int array)   : integer array of cat ids\n        \"\"\"", "\n", "catNms", "=", "catNms", "if", "_isArrayLike", "(", "catNms", ")", "else", "[", "catNms", "]", "\n", "supNms", "=", "supNms", "if", "_isArrayLike", "(", "supNms", ")", "else", "[", "supNms", "]", "\n", "catIds", "=", "catIds", "if", "_isArrayLike", "(", "catIds", ")", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "catNms", ")", "==", "len", "(", "supNms", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "cats", "=", "self", ".", "dataset", "[", "'categories'", "]", "\n", "", "else", ":", "\n", "            ", "cats", "=", "self", ".", "dataset", "[", "'categories'", "]", "\n", "cats", "=", "cats", "if", "len", "(", "catNms", ")", "==", "0", "else", "[", "\n", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'name'", "]", "in", "catNms", "]", "\n", "cats", "=", "cats", "if", "len", "(", "supNms", ")", "==", "0", "else", "[", "\n", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'supercategory'", "]", "in", "supNms", "]", "\n", "cats", "=", "cats", "if", "len", "(", "catIds", ")", "==", "0", "else", "[", "\n", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'id'", "]", "in", "catIds", "]", "\n", "", "ids", "=", "[", "cat", "[", "'id'", "]", "for", "cat", "in", "cats", "]", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getImgIds": [[189, 209], ["list", "coco._isArrayLike", "coco._isArrayLike", "len", "len", "coco.COCO.imgs.keys", "set", "enumerate", "set", "set", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike"], ["", "def", "getImgIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Get img ids that satisfy given filter conditions.\n        :param imgIds (int array) : get imgs for given ids\n        :param catIds (int array) : get imgs with all given cats\n        :return: ids (int array)  : integer array of img ids\n        '''", "\n", "imgIds", "=", "imgIds", "if", "_isArrayLike", "(", "imgIds", ")", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "_isArrayLike", "(", "catIds", ")", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "ids", "=", "self", ".", "imgs", ".", "keys", "(", ")", "\n", "", "else", ":", "\n", "            ", "ids", "=", "set", "(", "imgIds", ")", "\n", "for", "i", ",", "catId", "in", "enumerate", "(", "catIds", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "len", "(", "ids", ")", "==", "0", ":", "\n", "                    ", "ids", "=", "set", "(", "self", ".", "catToImgs", "[", "catId", "]", ")", "\n", "", "else", ":", "\n", "                    ", "ids", "&=", "set", "(", "self", ".", "catToImgs", "[", "catId", "]", ")", "\n", "", "", "", "return", "list", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns": [[210, 220], ["coco._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike"], ["", "def", "loadAnns", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying anns\n        :return: anns (object array) : loaded ann objects\n        \"\"\"", "\n", "if", "_isArrayLike", "(", "ids", ")", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadCats": [[221, 231], ["coco._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike"], ["", "", "def", "loadCats", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load cats with the specified ids.\n        :param ids (int array)       : integer ids specifying cats\n        :return: cats (object array) : loaded cat objects\n        \"\"\"", "\n", "if", "_isArrayLike", "(", "ids", ")", ":", "\n", "            ", "return", "[", "self", ".", "cats", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "cats", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs": [[232, 242], ["coco._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike"], ["", "", "def", "loadImgs", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying img\n        :return: imgs (object array) : loaded img objects\n        \"\"\"", "\n", "if", "_isArrayLike", "(", "ids", ")", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadRes": [[243, 309], ["coco.COCO", "coco.COCO.anno_file.append", "print", "time.time", "print", "coco.COCO.createIndex", "json.load", "type", "set", "enumerate", "type", "type", "open", "type", "coco.COCO.loadNumpyAnnotations", "set", "set", "set", "set", "copy.deepcopy", "enumerate", "coco.COCO.getImgIds", "copy.deepcopy", "enumerate", "time.time", "mask.area", "copy.deepcopy", "enumerate", "mask.toBbox", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.createIndex", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadNumpyAnnotations", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getImgIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.area", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.toBbox"], ["", "", "def", "loadRes", "(", "self", ",", "resFile", ")", ":", "\n", "        ", "\"\"\"\n        Load result file and return a result api object.\n        :param   resFile (str)     : file name of result file\n        :return: res (obj)         : result api object\n        \"\"\"", "\n", "res", "=", "COCO", "(", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", "]", "\n", "self", ".", "anno_file", ".", "append", "(", "resFile", ")", "\n", "print", "(", "'Loading and preparing results...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "type", "(", "resFile", ")", "==", "str", "or", "type", "(", "resFile", ")", "==", "unicode", ":", "\n", "            ", "anns", "=", "json", ".", "load", "(", "open", "(", "resFile", ")", ")", "\n", "", "elif", "type", "(", "resFile", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "anns", "=", "self", ".", "loadNumpyAnnotations", "(", "resFile", ")", "\n", "", "else", ":", "\n", "            ", "anns", "=", "resFile", "\n", "", "assert", "type", "(", "anns", ")", "==", "list", ",", "'results in not an array of objects'", "\n", "annsImgIds", "=", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", "\n", "\n", "assert", "set", "(", "annsImgIds", ")", "==", "(", "set", "(", "annsImgIds", ")", "&", "set", "(", "self", ".", "getImgIds", "(", ")", ")", ")", ",", "'Results do not correspond to current coco set'", "\n", "if", "'caption'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "imgIds", "=", "set", "(", "[", "img", "[", "'id'", "]", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "]", ")", "&", "set", "(", "\n", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "\n", "img", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "if", "img", "[", "'id'", "]", "in", "imgIds", "]", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "", "", "elif", "'bbox'", "in", "anns", "[", "0", "]", "and", "not", "anns", "[", "0", "]", "[", "'bbox'", "]", "==", "[", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "\n", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "bb", "=", "ann", "[", "'bbox'", "]", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "[", "bb", "[", "0", "]", ",", "bb", "[", "0", "]", "+", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ",", "bb", "[", "1", "]", "+", "bb", "[", "3", "]", "]", "\n", "if", "not", "'segmentation'", "in", "ann", ":", "\n", "                    ", "ann", "[", "'segmentation'", "]", "=", "[", "[", "x1", ",", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "y2", ",", "x2", ",", "y1", "]", "]", "\n", "", "ann", "[", "'area'", "]", "=", "bb", "[", "2", "]", "*", "bb", "[", "3", "]", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'segmentation'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "\n", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "# now only support compressed RLE format as segmentation results", "\n", "                ", "ann", "[", "'area'", "]", "=", "maskUtils", ".", "area", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "if", "not", "'bbox'", "in", "ann", ":", "\n", "                    ", "ann", "[", "'bbox'", "]", "=", "maskUtils", ".", "toBbox", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'keypoints'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "\n", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "s", "=", "ann", "[", "'keypoints'", "]", "\n", "x", "=", "s", "[", "0", ":", ":", "3", "]", "\n", "y", "=", "s", "[", "1", ":", ":", "3", "]", "\n", "x0", ",", "x1", ",", "y0", ",", "y1", "=", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "min", "(", "y", ")", ",", "np", ".", "max", "(", "y", ")", "\n", "ann", "[", "'area'", "]", "=", "(", "x1", "-", "x0", ")", "*", "(", "y1", "-", "y0", ")", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'bbox'", "]", "=", "[", "x0", ",", "y0", ",", "x1", "-", "x0", ",", "y1", "-", "y0", "]", "\n", "", "", "print", "(", "'DONE (t={:0.2f}s)'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "res", ".", "dataset", "[", "'annotations'", "]", "=", "anns", "\n", "res", ".", "createIndex", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.download": [[310, 333], ["len", "enumerate", "print", "len", "coco.COCO.imgs.values", "coco.COCO.loadImgs", "os.path.exists", "os.makedirs", "time.time", "os.path.join", "print", "os.path.exists", "urlretrieve", "time.time"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadImgs", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "download", "(", "self", ",", "tarDir", "=", "None", ",", "imgIds", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Download COCO images from mscoco.org server.\n        :param tarDir (str): COCO results directory name\n               imgIds (list): images to be downloaded\n        :return:\n        '''", "\n", "if", "tarDir", "is", "None", ":", "\n", "            ", "print", "(", "'Please specify target directory'", ")", "\n", "return", "-", "1", "\n", "", "if", "len", "(", "imgIds", ")", "==", "0", ":", "\n", "            ", "imgs", "=", "self", ".", "imgs", ".", "values", "(", ")", "\n", "", "else", ":", "\n", "            ", "imgs", "=", "self", ".", "loadImgs", "(", "imgIds", ")", "\n", "", "N", "=", "len", "(", "imgs", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tarDir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "tarDir", ")", "\n", "", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "            ", "tic", "=", "time", ".", "time", "(", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "tarDir", ",", "img", "[", "'file_name'", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "                ", "urlretrieve", "(", "img", "[", "'coco_url'", "]", ",", "fname", ")", "\n", "", "print", "(", "'downloaded {}/{} images (t={:0.1f}s)'", ".", "format", "(", "i", ",", "N", ",", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadNumpyAnnotations": [[334, 356], ["print", "print", "range", "type", "print", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "def", "loadNumpyAnnotations", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Convert result data from a numpy array [Nx7] where each row contains {imageID,x1,y1,w,h,score,class}\n        :param  data (numpy.ndarray)\n        :return: annotations (python nested list)\n        \"\"\"", "\n", "print", "(", "'Converting ndarray to lists...'", ")", "\n", "assert", "(", "type", "(", "data", ")", "==", "np", ".", "ndarray", ")", "\n", "print", "(", "data", ".", "shape", ")", "\n", "assert", "(", "data", ".", "shape", "[", "1", "]", "==", "7", ")", "\n", "N", "=", "data", ".", "shape", "[", "0", "]", "\n", "ann", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "if", "i", "%", "1000000", "==", "0", ":", "\n", "                ", "print", "(", "'{}/{}'", ".", "format", "(", "i", ",", "N", ")", ")", "\n", "", "ann", "+=", "[", "{", "\n", "'image_id'", ":", "int", "(", "data", "[", "i", ",", "0", "]", ")", ",", "\n", "'bbox'", ":", "[", "data", "[", "i", ",", "1", "]", ",", "data", "[", "i", ",", "2", "]", ",", "data", "[", "i", ",", "3", "]", ",", "data", "[", "i", ",", "4", "]", "]", ",", "\n", "'score'", ":", "data", "[", "i", ",", "5", "]", ",", "\n", "'category_id'", ":", "int", "(", "data", "[", "i", ",", "6", "]", ")", ",", "\n", "}", "]", "\n", "", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.annToRLE": [[357, 377], ["type", "mask.frPyObjects", "mask.merge", "type", "mask.frPyObjects"], "methods", ["None"], ["", "def", "annToRLE", "(", "self", ",", "ann", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE to RLE.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "t", "=", "self", ".", "imgs", "[", "ann", "[", "'image_id'", "]", "]", "\n", "h", ",", "w", "=", "t", "[", "'height'", "]", ",", "t", "[", "'width'", "]", "\n", "segm", "=", "ann", "[", "'segmentation'", "]", "\n", "if", "type", "(", "segm", ")", "==", "list", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "            ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "segm", ",", "h", ",", "w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "", "elif", "type", "(", "segm", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "# uncompressed RLE", "\n", "            ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "segm", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "# rle", "\n", "            ", "rle", "=", "ann", "[", "'segmentation'", "]", "\n", "", "return", "rle", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.annToMask": [[378, 386], ["coco.COCO.annToRLE", "mask.decode"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.annToRLE", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode"], ["", "def", "annToMask", "(", "self", ",", "ann", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE, or RLE to binary mask.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "rle", "=", "self", ".", "annToRLE", "(", "ann", ")", "\n", "m", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "m", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco._isArrayLike": [[66, 68], ["hasattr", "hasattr"], "function", ["None"], ["", "def", "_isArrayLike", "(", "obj", ")", ":", "\n", "    ", "return", "hasattr", "(", "obj", ",", "'__iter__'", ")", "and", "hasattr", "(", "obj", ",", "'__len__'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.encode": [[80, 86], ["len", "pycocotools.encode", "len", "pycocotools.encode", "bimask.reshape"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.encode", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.encode"], ["def", "encode", "(", "bimask", ")", ":", "\n", "    ", "if", "len", "(", "bimask", ".", "shape", ")", "==", "3", ":", "\n", "        ", "return", "_mask", ".", "encode", "(", "bimask", ")", "\n", "", "elif", "len", "(", "bimask", ".", "shape", ")", "==", "2", ":", "\n", "        ", "h", ",", "w", "=", "bimask", ".", "shape", "\n", "return", "_mask", ".", "encode", "(", "bimask", ".", "reshape", "(", "(", "h", ",", "w", ",", "1", ")", ",", "order", "=", "'F'", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode": [[87, 92], ["type", "pycocotools.decode", "pycocotools.decode"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.decode"], ["", "", "def", "decode", "(", "rleObjs", ")", ":", "\n", "    ", "if", "type", "(", "rleObjs", ")", "==", "list", ":", "\n", "        ", "return", "_mask", ".", "decode", "(", "rleObjs", ")", "\n", "", "else", ":", "\n", "        ", "return", "_mask", ".", "decode", "(", "[", "rleObjs", "]", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.area": [[93, 98], ["type", "pycocotools.area", "pycocotools.area"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.area", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.area"], ["", "", "def", "area", "(", "rleObjs", ")", ":", "\n", "    ", "if", "type", "(", "rleObjs", ")", "==", "list", ":", "\n", "        ", "return", "_mask", ".", "area", "(", "rleObjs", ")", "\n", "", "else", ":", "\n", "        ", "return", "_mask", ".", "area", "(", "[", "rleObjs", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.toBbox": [[99, 104], ["type", "pycocotools.toBbox", "pycocotools.toBbox"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.toBbox", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.mask.toBbox"], ["", "", "def", "toBbox", "(", "rleObjs", ")", ":", "\n", "    ", "if", "type", "(", "rleObjs", ")", "==", "list", ":", "\n", "        ", "return", "_mask", ".", "toBbox", "(", "rleObjs", ")", "\n", "", "else", ":", "\n", "        ", "return", "_mask", ".", "toBbox", "(", "[", "rleObjs", "]", ")", "[", "0", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "write", "(", "self", ",", "arg", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.flush": [[17, 19], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.__init__": [[71, 96], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "cocoeval.Params", "print", "sorted", "sorted", "cocoGt.getImgIds", "cocoGt.getCatIds"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getImgIds", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.getCatIds"], ["    ", "def", "__init__", "(", "self", ",", "cocoGt", "=", "None", ",", "cocoDt", "=", "None", ",", "iouType", "=", "'segm'", ")", ":", "\n", "        ", "'''\n        Initialize CocoEval using coco APIs for gt and dt\n        :param cocoGt: coco object with ground truth annotations\n        :param cocoDt: coco object with detection results\n        :return: None\n        '''", "\n", "if", "not", "iouType", ":", "\n", "            ", "print", "(", "'iouType not specified. use default iouType segm'", ")", "\n", "", "self", ".", "cocoGt", "=", "cocoGt", "# ground truth COCO API", "\n", "self", ".", "cocoDt", "=", "cocoDt", "# detections COCO API", "\n", "self", ".", "params", "=", "{", "}", "# evaluation parameters", "\n", "# per-image per-category evaluation results [KxAxI] elements", "\n", "self", ".", "evalImgs", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "eval", "=", "{", "}", "# accumulated evaluation results", "\n", "self", ".", "_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "self", ".", "params", "=", "Params", "(", "iouType", "=", "iouType", ")", "# parameters", "\n", "self", ".", "_paramsEval", "=", "{", "}", "# parameters for evaluation", "\n", "self", ".", "stats", "=", "[", "]", "# result summarization", "\n", "self", ".", "ious", "=", "{", "}", "# ious between all gts and dts", "\n", "if", "not", "cocoGt", "is", "None", ":", "\n", "            ", "self", ".", "params", ".", "imgIds", "=", "sorted", "(", "cocoGt", ".", "getImgIds", "(", ")", ")", "\n", "self", ".", "params", ".", "catIds", "=", "sorted", "(", "cocoGt", ".", "getCatIds", "(", ")", ")", "\n", "", "self", ".", "anno_file", "=", "cocoGt", ".", "anno_file", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval._prepare": [[97, 136], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "cocoeval.COCOeval.cocoGt.loadAnns", "cocoeval.COCOeval.cocoDt.loadAnns", "cocoeval.COCOeval.cocoGt.loadAnns", "cocoeval.COCOeval.cocoDt.loadAnns", "cocoeval.COCOeval._prepare._toMask"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.coco.COCO.loadAnns"], ["", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "'''\n        Prepare ._gts and ._dts for evaluation based on params\n        :return: None\n        '''", "\n", "def", "_toMask", "(", "anns", ",", "coco", ")", ":", "\n", "# modify ann['segmentation'] by reference", "\n", "            ", "for", "ann", "in", "anns", ":", "\n", "                ", "rle", "=", "coco", ".", "annToRLE", "(", "ann", ")", "\n", "ann", "[", "'segmentation'", "]", "=", "rle", "\n", "", "", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gts", "=", "self", ".", "cocoGt", ".", "loadAnns", "(", "self", ".", "cocoGt", ".", "getAnnIds", "(", "\n", "imgIds", "=", "p", ".", "imgIds", ",", "catIds", "=", "p", ".", "catIds", ")", ")", "\n", "dts", "=", "self", ".", "cocoDt", ".", "loadAnns", "(", "self", ".", "cocoDt", ".", "getAnnIds", "(", "\n", "imgIds", "=", "p", ".", "imgIds", ",", "catIds", "=", "p", ".", "catIds", ")", ")", "\n", "", "else", ":", "\n", "            ", "gts", "=", "self", ".", "cocoGt", ".", "loadAnns", "(", "self", ".", "cocoGt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ")", ")", "\n", "dts", "=", "self", ".", "cocoDt", ".", "loadAnns", "(", "self", ".", "cocoDt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ")", ")", "\n", "\n", "# convert ground truth to mask if iouType == 'segm'", "\n", "", "if", "p", ".", "iouType", "==", "'segm'", ":", "\n", "            ", "_toMask", "(", "gts", ",", "self", ".", "cocoGt", ")", "\n", "_toMask", "(", "dts", ",", "self", ".", "cocoDt", ")", "\n", "# set ignore flag", "\n", "", "for", "gt", "in", "gts", ":", "\n", "            ", "gt", "[", "'ignore'", "]", "=", "gt", "[", "'ignore'", "]", "if", "'ignore'", "in", "gt", "else", "0", "\n", "gt", "[", "'ignore'", "]", "=", "'iscrowd'", "in", "gt", "and", "gt", "[", "'iscrowd'", "]", "\n", "if", "p", ".", "iouType", "==", "'keypoints'", ":", "\n", "                ", "gt", "[", "'ignore'", "]", "=", "(", "gt", "[", "'num_keypoints'", "]", "==", "0", ")", "or", "gt", "[", "'ignore'", "]", "\n", "", "", "self", ".", "_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "for", "gt", "in", "gts", ":", "\n", "            ", "self", ".", "_gts", "[", "gt", "[", "'image_id'", "]", ",", "gt", "[", "'category_id'", "]", "]", ".", "append", "(", "gt", ")", "\n", "", "for", "dt", "in", "dts", ":", "\n", "            ", "self", ".", "_dts", "[", "dt", "[", "'image_id'", "]", ",", "dt", "[", "'category_id'", "]", "]", ".", "append", "(", "dt", ")", "\n", "# per-image per-category evaluation results", "\n", "", "self", ".", "evalImgs", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "eval", "=", "{", "}", "# accumulated evaluation results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.evaluate": [[137, 179], ["time.time", "print", "print", "list", "sorted", "cocoeval.COCOeval._prepare", "copy.deepcopy", "time.time", "print", "print", "numpy.unique", "list", "cocoeval.COCOeval.computeIoU"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval._prepare", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.computeIoU"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "'''\n        Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n        :return: None\n        '''", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Running per image evaluation...'", ")", "\n", "p", "=", "self", ".", "params", "\n", "# add backward compatibility if useSegm is specified in params", "\n", "if", "not", "p", ".", "useSegm", "is", "None", ":", "\n", "            ", "p", ".", "iouType", "=", "'segm'", "if", "p", ".", "useSegm", "==", "1", "else", "'bbox'", "\n", "print", "(", "\n", "'useSegm (deprecated) is not None. Running {} evaluation'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "", "print", "(", "'Evaluate annotation type *{}*'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "p", ".", "imgIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "imgIds", ")", ")", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "p", ".", "catIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "catIds", ")", ")", "\n", "", "p", ".", "maxDets", "=", "sorted", "(", "p", ".", "maxDets", ")", "\n", "self", ".", "params", "=", "p", "\n", "\n", "self", ".", "_prepare", "(", ")", "\n", "# loop through images, area range, max detection number", "\n", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "else", "[", "-", "1", "]", "\n", "\n", "if", "p", ".", "iouType", "==", "'segm'", "or", "p", ".", "iouType", "==", "'bbox'", ":", "\n", "            ", "computeIoU", "=", "self", ".", "computeIoU", "\n", "", "elif", "p", ".", "iouType", "==", "'keypoints'", ":", "\n", "            ", "computeIoU", "=", "self", ".", "computeOks", "\n", "", "self", ".", "ious", "=", "{", "(", "imgId", ",", "catId", ")", ":", "computeIoU", "(", "imgId", ",", "catId", ")", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "for", "catId", "in", "catIds", "}", "\n", "\n", "evaluateImg", "=", "self", ".", "evaluateImg", "\n", "maxDet", "=", "p", ".", "maxDets", "[", "-", "1", "]", "\n", "self", ".", "evalImgs", "=", "[", "evaluateImg", "(", "imgId", ",", "catId", ",", "areaRng", ",", "maxDet", ")", "\n", "for", "catId", "in", "catIds", "\n", "for", "areaRng", "in", "p", ".", "areaRng", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "]", "\n", "self", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'DONE (t={:0.2f}s).'", ".", "format", "(", "toc", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.computeIoU": [[180, 208], ["numpy.argsort", "mask.iou", "len", "int", "len", "len", "Exception"], "methods", ["None"], ["", "def", "computeIoU", "(", "self", ",", "imgId", ",", "catId", ")", ":", "\n", "        ", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gt", "=", "self", ".", "_gts", "[", "imgId", ",", "catId", "]", "\n", "dt", "=", "self", ".", "_dts", "[", "imgId", ",", "catId", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_gts", "[", "imgId", ",", "cId", "]", "]", "\n", "dt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_dts", "[", "imgId", ",", "cId", "]", "]", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "", "inds", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "inds", "]", "\n", "if", "len", "(", "dt", ")", ">", "p", ".", "maxDets", "[", "-", "1", "]", ":", "\n", "            ", "dt", "=", "dt", "[", "0", ":", "p", ".", "maxDets", "[", "-", "1", "]", "]", "\n", "\n", "", "if", "p", ".", "iouType", "==", "'segm'", ":", "\n", "            ", "g", "=", "[", "g", "[", "'segmentation'", "]", "for", "g", "in", "gt", "]", "\n", "d", "=", "[", "d", "[", "'segmentation'", "]", "for", "d", "in", "dt", "]", "\n", "", "elif", "p", ".", "iouType", "==", "'bbox'", ":", "\n", "            ", "g", "=", "[", "g", "[", "'bbox'", "]", "for", "g", "in", "gt", "]", "\n", "d", "=", "[", "d", "[", "'bbox'", "]", "for", "d", "in", "dt", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unknown iouType for iou computation'", ")", "\n", "\n", "# compute iou between each dt and gt region", "\n", "", "iscrowd", "=", "[", "int", "(", "o", "[", "'iscrowd'", "]", ")", "for", "o", "in", "gt", "]", "\n", "ious", "=", "maskUtils", ".", "iou", "(", "d", ",", "g", ",", "iscrowd", ")", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.computeOks": [[209, 265], ["numpy.argsort", "numpy.zeros", "len", "enumerate", "len", "numpy.array", "numpy.array", "numpy.count_nonzero", "enumerate", "len", "len", "len", "len", "numpy.array", "numpy.zeros", "numpy.sum", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "numpy.exp", "numpy.spacing"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "computeOks", "(", "self", ",", "imgId", ",", "catId", ")", ":", "\n", "        ", "p", "=", "self", ".", "params", "\n", "# dimention here should be Nxm", "\n", "# print imgId, catId", "\n", "gts", "=", "self", ".", "_gts", "[", "imgId", ",", "catId", "]", "\n", "dts", "=", "self", ".", "_dts", "[", "imgId", ",", "catId", "]", "\n", "inds", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "'score'", "]", "for", "d", "in", "dts", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "dts", "=", "[", "dts", "[", "i", "]", "for", "i", "in", "inds", "]", "\n", "if", "len", "(", "dts", ")", ">", "p", ".", "maxDets", "[", "-", "1", "]", ":", "\n", "            ", "dts", "=", "dts", "[", "0", ":", "p", ".", "maxDets", "[", "-", "1", "]", "]", "\n", "", "if", "len", "(", "gts", ")", "==", "0", "or", "len", "(", "dts", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "", "ious", "=", "np", ".", "zeros", "(", "(", "len", "(", "dts", ")", ",", "len", "(", "gts", ")", ")", ")", "\n", "\n", "sigmas", "=", "np", ".", "array", "(", "\n", "[", ".79", ",", ".79", ",", ".72", ",", ".72", ",", ".62", ",", ".62", ",", "1.07", ",", "1.07", ",", ".87", ",", ".87", ",", ".89", ",", ".89", ",", ".79", ",", ".79", "]", ")", "/", "10.0", "\n", "\n", "vars", "=", "(", "sigmas", "*", "2", ")", "**", "2", "\n", "k", "=", "len", "(", "sigmas", ")", "\n", "# compute oks between each detection and ground truth object", "\n", "for", "j", ",", "gt", "in", "enumerate", "(", "gts", ")", ":", "\n", "# create bounds for ignore regions(double the gt bbox)", "\n", "            ", "g", "=", "np", ".", "array", "(", "gt", "[", "'keypoints'", "]", ")", "\n", "xg", "=", "g", "[", "0", ":", ":", "3", "]", "\n", "yg", "=", "g", "[", "1", ":", ":", "3", "]", "\n", "vg", "=", "g", "[", "2", ":", ":", "3", "]", "\n", "k1", "=", "np", ".", "count_nonzero", "(", "vg", ">", "0", ")", "\n", "bb", "=", "gt", "[", "'bbox'", "]", "\n", "x0", "=", "bb", "[", "0", "]", "-", "bb", "[", "2", "]", "\n", "x1", "=", "bb", "[", "0", "]", "+", "bb", "[", "2", "]", "*", "2", "\n", "y0", "=", "bb", "[", "1", "]", "-", "bb", "[", "3", "]", "\n", "y1", "=", "bb", "[", "1", "]", "+", "bb", "[", "3", "]", "*", "2", "\n", "for", "i", ",", "dt", "in", "enumerate", "(", "dts", ")", ":", "\n", "                ", "d", "=", "np", ".", "array", "(", "dt", "[", "'keypoints'", "]", ")", "\n", "xd", "=", "d", "[", "0", ":", ":", "3", "]", "\n", "yd", "=", "d", "[", "1", ":", ":", "3", "]", "\n", "if", "k1", ">", "0", ":", "\n", "# measure the per-keypoint distance if keypoints visible", "\n", "                    ", "dx", "=", "xd", "-", "xg", "\n", "dy", "=", "yd", "-", "yg", "\n", "", "else", ":", "\n", "# measure minimum distance to keypoints in (x0,y0) & (x1,y1)", "\n", "# print 'k', k", "\n", "                    ", "z", "=", "np", ".", "zeros", "(", "(", "k", ")", ")", "\n", "\n", "dx", "=", "np", ".", "max", "(", "(", "z", ",", "x0", "-", "xd", ")", ",", "axis", "=", "0", ")", "+", "np", ".", "max", "(", "(", "z", ",", "xd", "-", "x1", ")", ",", "axis", "=", "0", ")", "\n", "dy", "=", "np", ".", "max", "(", "(", "z", ",", "y0", "-", "yd", ")", ",", "axis", "=", "0", ")", "+", "np", ".", "max", "(", "(", "z", ",", "yd", "-", "y1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "tmparea", "=", "gt", "[", "'bbox'", "]", "[", "3", "]", "*", "gt", "[", "'bbox'", "]", "[", "2", "]", "*", "0.53", "\n", "e", "=", "(", "dx", "**", "2", "+", "dy", "**", "2", ")", "/", "vars", "/", "(", "tmparea", "+", "np", ".", "spacing", "(", "1", ")", ")", "/", "2", "\n", "\n", "if", "k1", ">", "0", ":", "\n", "                    ", "e", "=", "e", "[", "vg", ">", "0", "]", "\n", "", "ious", "[", "i", ",", "j", "]", "=", "np", ".", "sum", "(", "np", ".", "exp", "(", "-", "e", ")", ")", "/", "e", ".", "shape", "[", "0", "]", "\n", "", "", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.evaluateImg": [[266, 348], ["numpy.argsort", "numpy.argsort", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.array().reshape", "numpy.logical_or", "int", "enumerate", "numpy.logical_and", "len", "len", "len", "len", "enumerate", "numpy.array", "len", "numpy.repeat", "min", "enumerate"], "methods", ["None"], ["", "def", "evaluateImg", "(", "self", ",", "imgId", ",", "catId", ",", "aRng", ",", "maxDet", ")", ":", "\n", "        ", "'''\n        perform evaluation for single category and image\n        :return: dict (single image results)\n        '''", "\n", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gt", "=", "self", ".", "_gts", "[", "imgId", ",", "catId", "]", "\n", "dt", "=", "self", ".", "_dts", "[", "imgId", ",", "catId", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_gts", "[", "imgId", ",", "cId", "]", "]", "\n", "dt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_dts", "[", "imgId", ",", "cId", "]", "]", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "for", "g", "in", "gt", ":", "\n", "            ", "tmp_area", "=", "g", "[", "'bbox'", "]", "[", "2", "]", "*", "g", "[", "'bbox'", "]", "[", "3", "]", "*", "0.53", "\n", "if", "g", "[", "'ignore'", "]", "or", "(", "tmp_area", "<", "aRng", "[", "0", "]", "or", "tmp_area", ">", "aRng", "[", "1", "]", ")", ":", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "0", "\n", "\n", "# sort dt highest score first, sort gt ignore last", "\n", "", "", "gtind", "=", "np", ".", "argsort", "(", "[", "g", "[", "'_ignore'", "]", "for", "g", "in", "gt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "gt", "=", "[", "gt", "[", "i", "]", "for", "i", "in", "gtind", "]", "\n", "dtind", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "dtind", "[", "0", ":", "maxDet", "]", "]", "\n", "iscrowd", "=", "[", "int", "(", "o", "[", "'iscrowd'", "]", ")", "for", "o", "in", "gt", "]", "\n", "# load computed ious", "\n", "ious", "=", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "[", ":", ",", "gtind", "]", "if", "len", "(", "\n", "self", ".", "ious", "[", "imgId", ",", "catId", "]", ")", ">", "0", "else", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "\n", "\n", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "G", "=", "len", "(", "gt", ")", "\n", "D", "=", "len", "(", "dt", ")", "\n", "gtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "G", ")", ")", "\n", "dtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "gtIg", "=", "np", ".", "array", "(", "[", "g", "[", "'_ignore'", "]", "for", "g", "in", "gt", "]", ")", "\n", "dtIg", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "if", "not", "len", "(", "ious", ")", "==", "0", ":", "\n", "            ", "for", "tind", ",", "t", "in", "enumerate", "(", "p", ".", "iouThrs", ")", ":", "\n", "                ", "for", "dind", ",", "d", "in", "enumerate", "(", "dt", ")", ":", "\n", "# information about best match so far (m=-1 -> unmatched)", "\n", "                    ", "iou", "=", "min", "(", "[", "t", ",", "1", "-", "1e-10", "]", ")", "\n", "m", "=", "-", "1", "\n", "for", "gind", ",", "g", "in", "enumerate", "(", "gt", ")", ":", "\n", "# if this gt already matched, and not a crowd, continue", "\n", "                        ", "if", "gtm", "[", "tind", ",", "gind", "]", ">", "0", "and", "not", "iscrowd", "[", "gind", "]", ":", "\n", "                            ", "continue", "\n", "# if dt matched to reg gt, and on ignore gt, stop", "\n", "", "if", "m", ">", "-", "1", "and", "gtIg", "[", "m", "]", "==", "0", "and", "gtIg", "[", "gind", "]", "==", "1", ":", "\n", "                            ", "break", "\n", "# continue to next gt unless better match made", "\n", "", "if", "ious", "[", "dind", ",", "gind", "]", "<", "iou", ":", "\n", "                            ", "continue", "\n", "# if match successful and best so far, store appropriately", "\n", "", "iou", "=", "ious", "[", "dind", ",", "gind", "]", "\n", "m", "=", "gind", "\n", "# if match made store id of match for both dt and gt", "\n", "", "if", "m", "==", "-", "1", ":", "\n", "                        ", "continue", "\n", "", "dtIg", "[", "tind", ",", "dind", "]", "=", "gtIg", "[", "m", "]", "\n", "dtm", "[", "tind", ",", "dind", "]", "=", "gt", "[", "m", "]", "[", "'id'", "]", "\n", "gtm", "[", "tind", ",", "m", "]", "=", "d", "[", "'id'", "]", "\n", "# set unmatched detections outside of area range to ignore", "\n", "", "", "", "a", "=", "np", ".", "array", "(", "[", "d", "[", "'area'", "]", "<", "aRng", "[", "0", "]", "or", "d", "[", "'area'", "]", ">", "aRng", "[", "1", "]", "\n", "for", "d", "in", "dt", "]", ")", ".", "reshape", "(", "(", "1", ",", "len", "(", "dt", ")", ")", ")", "\n", "dtIg", "=", "np", ".", "logical_or", "(", "dtIg", ",", "np", ".", "logical_and", "(", "\n", "dtm", "==", "0", ",", "np", ".", "repeat", "(", "a", ",", "T", ",", "0", ")", ")", ")", "\n", "# store results for given image and category", "\n", "return", "{", "\n", "'image_id'", ":", "imgId", ",", "\n", "'category_id'", ":", "catId", ",", "\n", "'aRng'", ":", "aRng", ",", "\n", "'maxDet'", ":", "maxDet", ",", "\n", "'dtIds'", ":", "[", "d", "[", "'id'", "]", "for", "d", "in", "dt", "]", ",", "\n", "'gtIds'", ":", "[", "g", "[", "'id'", "]", "for", "g", "in", "gt", "]", ",", "\n", "'dtMatches'", ":", "dtm", ",", "\n", "'gtMatches'", ":", "gtm", ",", "\n", "'dtScores'", ":", "[", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "\n", "'gtIgnore'", ":", "gtIg", ",", "\n", "'dtIgnore'", ":", "dtIg", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.accumulate": [[350, 463], ["print", "time.time", "len", "len", "len", "len", "set", "set", "set", "set", "len", "len", "enumerate", "time.time", "print", "print", "len", "numpy.ones", "numpy.ones", "numpy.ones", "map", "enumerate", "datetime.datetime.now().strftime", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "map", "numpy.concatenate", "numpy.argsort", "numpy.concatenate", "numpy.count_nonzero", "numpy.logical_and", "numpy.logical_and", "numpy.cumsum().astype", "numpy.cumsum().astype", "enumerate", "datetime.datetime.now", "len", "numpy.concatenate", "numpy.concatenate", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "zip", "numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "pr.tolist.tolist.tolist", "q.tolist.tolist.tolist", "range", "numpy.searchsorted", "numpy.array", "numpy.array", "tuple", "numpy.cumsum", "numpy.cumsum", "enumerate", "numpy.spacing"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "accumulate", "(", "self", ",", "p", "=", "None", ")", ":", "\n", "        ", "'''\n        Accumulate per image evaluation results and store the result in self.eval\n        :param p: input params for evaluation\n        :return: None\n        '''", "\n", "print", "(", "'Accumulating evaluation results...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "self", ".", "evalImgs", ":", "\n", "            ", "print", "(", "'Please run evaluate() first'", ")", "\n", "# allows input customized parameters", "\n", "", "if", "p", "is", "None", ":", "\n", "            ", "p", "=", "self", ".", "params", "\n", "", "p", ".", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "==", "1", "else", "[", "-", "1", "]", "\n", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "R", "=", "len", "(", "p", ".", "recThrs", ")", "\n", "K", "=", "len", "(", "p", ".", "catIds", ")", "if", "p", ".", "useCats", "else", "1", "\n", "A", "=", "len", "(", "p", ".", "areaRng", ")", "\n", "M", "=", "len", "(", "p", ".", "maxDets", ")", "\n", "# -1 for the precision of absent categories", "\n", "precision", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", "A", ",", "M", ")", ")", "\n", "recall", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "K", ",", "A", ",", "M", ")", ")", "\n", "scores", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", "A", ",", "M", ")", ")", "\n", "\n", "# create dictionary for future indexing", "\n", "_pe", "=", "self", ".", "_paramsEval", "\n", "catIds", "=", "_pe", ".", "catIds", "if", "_pe", ".", "useCats", "else", "[", "-", "1", "]", "\n", "setK", "=", "set", "(", "catIds", ")", "\n", "setA", "=", "set", "(", "map", "(", "tuple", ",", "_pe", ".", "areaRng", ")", ")", "\n", "setM", "=", "set", "(", "_pe", ".", "maxDets", ")", "\n", "setI", "=", "set", "(", "_pe", ".", "imgIds", ")", "\n", "# get inds to evaluate", "\n", "k_list", "=", "[", "n", "for", "n", ",", "k", "in", "enumerate", "(", "p", ".", "catIds", ")", "if", "k", "in", "setK", "]", "\n", "m_list", "=", "[", "m", "for", "n", ",", "m", "in", "enumerate", "(", "p", ".", "maxDets", ")", "if", "m", "in", "setM", "]", "\n", "a_list", "=", "[", "n", "for", "n", ",", "a", "in", "enumerate", "(", "\n", "map", "(", "lambda", "x", ":", "tuple", "(", "x", ")", ",", "p", ".", "areaRng", ")", ")", "if", "a", "in", "setA", "]", "\n", "i_list", "=", "[", "n", "for", "n", ",", "i", "in", "enumerate", "(", "p", ".", "imgIds", ")", "if", "i", "in", "setI", "]", "\n", "I0", "=", "len", "(", "_pe", ".", "imgIds", ")", "\n", "A0", "=", "len", "(", "_pe", ".", "areaRng", ")", "\n", "# retrieve E at each category, area range, and max number of detections", "\n", "for", "k", ",", "k0", "in", "enumerate", "(", "k_list", ")", ":", "\n", "            ", "Nk", "=", "k0", "*", "A0", "*", "I0", "\n", "for", "a", ",", "a0", "in", "enumerate", "(", "a_list", ")", ":", "\n", "                ", "Na", "=", "a0", "*", "I0", "\n", "for", "m", ",", "maxDet", "in", "enumerate", "(", "m_list", ")", ":", "\n", "                    ", "E", "=", "[", "self", ".", "evalImgs", "[", "Nk", "+", "Na", "+", "i", "]", "for", "i", "in", "i_list", "]", "\n", "E", "=", "[", "e", "for", "e", "in", "E", "if", "not", "e", "is", "None", "]", "\n", "if", "len", "(", "E", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "dtScores", "=", "np", ".", "concatenate", "(", "\n", "[", "e", "[", "'dtScores'", "]", "[", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ")", "\n", "\n", "# different sorting method generates slightly different results.", "\n", "# mergesort is used to be consistent as Matlab implementation.", "\n", "inds", "=", "np", ".", "argsort", "(", "-", "dtScores", ",", "kind", "=", "'mergesort'", ")", "\n", "dtScoresSorted", "=", "dtScores", "[", "inds", "]", "\n", "\n", "dtm", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtMatches'", "]", "[", ":", ",", "0", ":", "maxDet", "]", "\n", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "dtIg", "=", "np", ".", "concatenate", "(", "\n", "[", "e", "[", "'dtIgnore'", "]", "[", ":", ",", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "gtIg", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'gtIgnore'", "]", "for", "e", "in", "E", "]", ")", "\n", "npig", "=", "np", ".", "count_nonzero", "(", "gtIg", "==", "0", ")", "\n", "if", "npig", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "tps", "=", "np", ".", "logical_and", "(", "dtm", ",", "np", ".", "logical_not", "(", "dtIg", ")", ")", "\n", "fps", "=", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_not", "(", "dtm", ")", ",", "np", ".", "logical_not", "(", "dtIg", ")", ")", "\n", "\n", "tp_sum", "=", "np", ".", "cumsum", "(", "tps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "fp_sum", "=", "np", ".", "cumsum", "(", "fps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "for", "t", ",", "(", "tp", ",", "fp", ")", "in", "enumerate", "(", "zip", "(", "tp_sum", ",", "fp_sum", ")", ")", ":", "\n", "                        ", "tp", "=", "np", ".", "array", "(", "tp", ")", "\n", "fp", "=", "np", ".", "array", "(", "fp", ")", "\n", "nd", "=", "len", "(", "tp", ")", "\n", "rc", "=", "tp", "/", "npig", "\n", "pr", "=", "tp", "/", "(", "fp", "+", "tp", "+", "np", ".", "spacing", "(", "1", ")", ")", "\n", "q", "=", "np", ".", "zeros", "(", "(", "R", ",", ")", ")", "\n", "ss", "=", "np", ".", "zeros", "(", "(", "R", ",", ")", ")", "\n", "\n", "if", "nd", ":", "\n", "                            ", "recall", "[", "t", ",", "k", ",", "a", ",", "m", "]", "=", "rc", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                            ", "recall", "[", "t", ",", "k", ",", "a", ",", "m", "]", "=", "0", "\n", "\n", "# numpy is slow without cython optimization for accessing elements", "\n", "# use python array gets significant speed improvement", "\n", "", "pr", "=", "pr", ".", "tolist", "(", ")", "\n", "q", "=", "q", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nd", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                            ", "if", "pr", "[", "i", "]", ">", "pr", "[", "i", "-", "1", "]", ":", "\n", "                                ", "pr", "[", "i", "-", "1", "]", "=", "pr", "[", "i", "]", "\n", "\n", "", "", "inds", "=", "np", ".", "searchsorted", "(", "rc", ",", "p", ".", "recThrs", ",", "side", "=", "'left'", ")", "\n", "try", ":", "\n", "                            ", "for", "ri", ",", "pi", "in", "enumerate", "(", "inds", ")", ":", "\n", "                                ", "q", "[", "ri", "]", "=", "pr", "[", "pi", "]", "\n", "ss", "[", "ri", "]", "=", "dtScoresSorted", "[", "pi", "]", "\n", "", "", "except", ":", "\n", "                            ", "pass", "\n", "", "precision", "[", "t", ",", ":", ",", "k", ",", "a", ",", "m", "]", "=", "np", ".", "array", "(", "q", ")", "\n", "scores", "[", "t", ",", ":", ",", "k", ",", "a", ",", "m", "]", "=", "np", ".", "array", "(", "ss", ")", "\n", "", "", "", "", "self", ".", "eval", "=", "{", "\n", "'params'", ":", "p", ",", "\n", "'counts'", ":", "[", "T", ",", "R", ",", "K", ",", "A", ",", "M", "]", ",", "\n", "'date'", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "'precision'", ":", "precision", ",", "\n", "'recall'", ":", "recall", ",", "\n", "'scores'", ":", "scores", ",", "\n", "}", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'DONE (t={:0.2f}s).'", ".", "format", "(", "toc", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.summarize": [[464, 557], ["cocoeval.COCOeval.summarize"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.summarize"], ["", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "'''\n        Compute and display summary metrics for evaluation results.\n        Note this functin can *only* be applied on the default parameter setting\n        '''", "\n", "def", "_summarize", "(", "ap", "=", "1", ",", "iouThr", "=", "None", ",", "areaRng", "=", "'all'", ",", "maxDets", "=", "100", ",", "type_score", "=", "0", ")", ":", "\n", "            ", "p", "=", "self", ".", "params", "\n", "if", "ap", "!=", "-", "1", ":", "\n", "                ", "iStr", "=", "' {:<18} {} @[ IoU={:<9} | area={:>6s} | maxDets={:>3d} ] = {:0.3f}'", "\n", "", "else", ":", "\n", "                ", "iStr", "=", "' {:<18} {} @[ IoU={:<9} | type={:>6s} | maxDets={:>3d} ] = {:0.3f}'", "\n", "", "titleStr", "=", "'Average Precision'", "if", "ap", "==", "1", "else", "'Average Recall'", "\n", "typeStr", "=", "'(AR)'", "if", "ap", "!=", "1", "else", "'(AP)'", "\n", "iouStr", "=", "'{:0.2f}:{:0.2f}'", ".", "format", "(", "p", ".", "iouThrs", "[", "0", "]", ",", "p", ".", "iouThrs", "[", "-", "1", "]", ")", "if", "iouThr", "is", "None", "else", "'{:0.2f}'", ".", "format", "(", "iouThr", ")", "\n", "# print 'print ioustr' , iouStr", "\n", "aind", "=", "[", "i", "for", "i", ",", "aRng", "in", "enumerate", "(", "\n", "p", ".", "areaRngLbl", ")", "if", "aRng", "==", "areaRng", "]", "\n", "mind", "=", "[", "i", "for", "i", ",", "mDet", "in", "enumerate", "(", "p", ".", "maxDets", ")", "if", "mDet", "==", "maxDets", "]", "\n", "if", "ap", "==", "1", ":", "\n", "# dimension of precision: [TxRxKxAxM]", "\n", "                ", "s", "=", "self", ".", "eval", "[", "'precision'", "]", "\n", "# IoU", "\n", "if", "iouThr", "is", "not", "None", ":", "\n", "                    ", "t", "=", "np", ".", "where", "(", "abs", "(", "iouThr", "-", "p", ".", "iouThrs", ")", "<", "0.01", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "t", "]", "\n", "", "s", "=", "s", "[", ":", ",", ":", ",", ":", ",", "aind", ",", "mind", "]", "\n", "", "else", ":", "\n", "# dimension of recall: [TxKxAxM]", "\n", "                ", "s", "=", "self", ".", "eval", "[", "'recall'", "]", "\n", "if", "iouThr", "is", "not", "None", ":", "\n", "                    ", "t", "=", "np", ".", "where", "(", "iouThr", "==", "p", ".", "iouThrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "t", "]", "\n", "", "s", "=", "s", "[", ":", ",", ":", ",", "aind", ",", "mind", "]", "\n", "\n", "", "if", "len", "(", "s", "[", "s", ">", "-", "1", "]", ")", "==", "0", ":", "\n", "                ", "mean_s", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "mean_s", "=", "np", ".", "mean", "(", "s", "[", "s", ">", "-", "1", "]", ")", "\n", "", "if", "ap", "==", "-", "1", ":", "\n", "                ", "mean_s", "=", "type_score", "\n", "", "print", "(", "iStr", ".", "format", "(", "titleStr", ",", "typeStr", ",", "iouStr", ",", "areaRng", ",", "maxDets", ",", "mean_s", ")", ")", "\n", "return", "mean_s", "\n", "\n", "", "def", "_summarizeDets", "(", ")", ":", "\n", "            ", "stats", "=", "np", ".", "zeros", "(", "(", "12", ",", ")", ")", "\n", "stats", "[", "0", "]", "=", "_summarize", "(", "1", ")", "\n", "stats", "[", "1", "]", "=", "_summarize", "(", "1", ",", "iouThr", "=", ".5", ",", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "2", "]", ")", "\n", "stats", "[", "2", "]", "=", "_summarize", "(", "\n", "1", ",", "iouThr", "=", ".75", ",", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "2", "]", ")", "\n", "stats", "[", "3", "]", "=", "_summarize", "(", "1", ",", "areaRng", "=", "'small'", ",", "\n", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "2", "]", ")", "\n", "stats", "[", "4", "]", "=", "_summarize", "(", "1", ",", "areaRng", "=", "'medium'", ",", "\n", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "2", "]", ")", "\n", "stats", "[", "5", "]", "=", "_summarize", "(", "1", ",", "areaRng", "=", "'large'", ",", "\n", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "2", "]", ")", "\n", "stats", "[", "6", "]", "=", "_summarize", "(", "0", ",", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "0", "]", ")", "\n", "stats", "[", "7", "]", "=", "_summarize", "(", "0", ",", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "1", "]", ")", "\n", "stats", "[", "8", "]", "=", "_summarize", "(", "0", ",", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "2", "]", ")", "\n", "stats", "[", "9", "]", "=", "_summarize", "(", "0", ",", "areaRng", "=", "'small'", ",", "\n", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "2", "]", ")", "\n", "stats", "[", "10", "]", "=", "_summarize", "(", "0", ",", "areaRng", "=", "'medium'", ",", "\n", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "2", "]", ")", "\n", "stats", "[", "11", "]", "=", "_summarize", "(", "\n", "0", ",", "areaRng", "=", "'large'", ",", "maxDets", "=", "self", ".", "params", ".", "maxDets", "[", "2", "]", ")", "\n", "return", "stats", "\n", "\n", "", "def", "_summarizeKps", "(", ")", ":", "\n", "\n", "            ", "stats", "=", "np", ".", "zeros", "(", "(", "11", ",", ")", ")", "\n", "# print '-----------------------------------------------'", "\n", "stats", "[", "0", "]", "=", "_summarize", "(", "1", ",", "maxDets", "=", "20", ")", "\n", "stats", "[", "1", "]", "=", "_summarize", "(", "1", ",", "maxDets", "=", "20", ",", "iouThr", "=", ".5", ")", "\n", "stats", "[", "2", "]", "=", "_summarize", "(", "1", ",", "maxDets", "=", "20", ",", "iouThr", "=", ".75", ")", "\n", "stats", "[", "5", "]", "=", "_summarize", "(", "0", ",", "maxDets", "=", "20", ")", "\n", "stats", "[", "6", "]", "=", "_summarize", "(", "0", ",", "maxDets", "=", "20", ",", "iouThr", "=", ".5", ")", "\n", "stats", "[", "7", "]", "=", "_summarize", "(", "0", ",", "maxDets", "=", "20", ",", "iouThr", "=", ".75", ")", "\n", "type_result", "=", "self", ".", "get_type_result", "(", "first", "=", "0.2", ",", "second", "=", "0.8", ")", "\n", "stats", "[", "8", "]", "=", "_summarize", "(", "1", ",", "maxDets", "=", "20", ",", "\n", "areaRng", "=", "'easy'", ",", "type_score", "=", "type_result", "[", "0", "]", ")", "\n", "stats", "[", "9", "]", "=", "_summarize", "(", "1", ",", "maxDets", "=", "20", ",", "\n", "areaRng", "=", "'medium'", ",", "type_score", "=", "type_result", "[", "1", "]", ")", "\n", "stats", "[", "10", "]", "=", "_summarize", "(", "1", ",", "maxDets", "=", "20", ",", "\n", "areaRng", "=", "'hard'", ",", "type_score", "=", "type_result", "[", "2", "]", ")", "\n", "return", "stats", "\n", "", "if", "not", "self", ".", "eval", ":", "\n", "            ", "raise", "Exception", "(", "'Please run accumulate() first'", ")", "\n", "", "iouType", "=", "self", ".", "params", ".", "iouType", "\n", "if", "iouType", "==", "'segm'", "or", "iouType", "==", "'bbox'", ":", "\n", "            ", "summarize", "=", "_summarizeDets", "\n", "", "elif", "iouType", "==", "'keypoints'", ":", "\n", "            ", "summarize", "=", "_summarizeKps", "\n", "", "self", ".", "stats", "=", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.__str__": [[558, 560], ["cocoeval.COCOeval.summarize"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.summarize"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "self", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.get_type_result": [[561, 578], ["cocoeval.COCOeval.split", "cocoeval.NullWriter", "cocoeval.COCOeval.evaluate", "cocoeval.COCOeval.accumulate", "res.append", "round", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.evaluate", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.accumulate"], ["", "def", "get_type_result", "(", "self", ",", "first", "=", "0.01", ",", "second", "=", "0.85", ")", ":", "\n", "        ", "gt_file", "=", "self", ".", "anno_file", "[", "0", "]", "\n", "easy", ",", "mid", ",", "hard", "=", "self", ".", "split", "(", "gt_file", ",", "first", ",", "second", ")", "\n", "# print (len(easy), len(mid), len(hard))", "\n", "res", "=", "[", "]", "\n", "nullwrite", "=", "NullWriter", "(", ")", "\n", "oldstdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "nullwrite", "\n", "for", "curr_type", "in", "[", "easy", ",", "mid", ",", "hard", "]", ":", "\n", "            ", "curr_list", "=", "curr_type", "\n", "self", ".", "params", ".", "imgIds", "=", "curr_list", "\n", "self", ".", "evaluate", "(", ")", "\n", "self", ".", "accumulate", "(", ")", "\n", "score", "=", "self", ".", "eval", "[", "'precision'", "]", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "res", ".", "append", "(", "round", "(", "np", ".", "mean", "(", "score", ")", ",", "4", ")", ")", "\n", "", "sys", ".", "stdout", "=", "oldstdout", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split": [[580, 595], ["json.load", "open", "easy.append", "mid.append", "hard.append"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["", "def", "split", "(", "serlf", ",", "gt_file", ",", "first", "=", "0.01", ",", "second", "=", "0.85", ")", ":", "\n", "        ", "import", "json", "\n", "data", "=", "json", ".", "load", "(", "\n", "open", "(", "gt_file", ",", "'r'", ")", ")", "\n", "easy", "=", "[", "]", "\n", "mid", "=", "[", "]", "\n", "hard", "=", "[", "]", "\n", "for", "item", "in", "data", "[", "'images'", "]", ":", "\n", "            ", "if", "item", "[", "'crowdIndex'", "]", "<", "first", ":", "\n", "                ", "easy", ".", "append", "(", "item", "[", "'id'", "]", ")", "\n", "", "elif", "item", "[", "'crowdIndex'", "]", "<", "second", ":", "\n", "                ", "mid", ".", "append", "(", "item", "[", "'id'", "]", ")", "\n", "", "else", ":", "\n", "                ", "hard", ".", "append", "(", "item", "[", "'id'", "]", ")", "\n", "", "", "return", "easy", ",", "mid", ",", "hard", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.Params.setDetParams": [[602, 615], ["numpy.linspace", "numpy.linspace", "int", "int", "numpy.round", "numpy.round"], "methods", ["None"], ["def", "setDetParams", "(", "self", ")", ":", "\n", "        ", "self", ".", "imgIds", "=", "[", "]", "\n", "self", ".", "catIds", "=", "[", "]", "\n", "# np.arange causes trouble.  the data point on arange is slightly larger than the true value", "\n", "self", ".", "iouThrs", "=", "np", ".", "linspace", "(", ".5", ",", "0.95", ",", "int", "(", "np", ".", "round", "(", "\n", "(", "0.95", "-", ".5", ")", "/", ".05", ")", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "recThrs", "=", "np", ".", "linspace", "(", ".0", ",", "1.00", ",", "int", "(", "np", ".", "round", "(", "\n", "(", "1.00", "-", ".0", ")", "/", ".01", ")", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "maxDets", "=", "[", "1", ",", "10", ",", "100", "]", "\n", "self", ".", "areaRng", "=", "[", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", "]", "\n", "self", ".", "areaRngLbl", "=", "[", "'all'", ",", "'small'", ",", "'medium'", ",", "'large'", "]", "\n", "self", ".", "useCats", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.Params.setKpParams": [[616, 629], ["numpy.linspace", "numpy.linspace", "int", "int", "numpy.round", "numpy.round"], "methods", ["None"], ["", "def", "setKpParams", "(", "self", ")", ":", "\n", "        ", "self", ".", "imgIds", "=", "[", "]", "\n", "self", ".", "catIds", "=", "[", "]", "\n", "# np.arange causes trouble.  the data point on arange is slightly larger than the true value", "\n", "self", ".", "iouThrs", "=", "np", ".", "linspace", "(", ".5", ",", "0.95", ",", "int", "(", "np", ".", "round", "(", "\n", "(", "0.95", "-", ".5", ")", "/", ".05", ")", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "recThrs", "=", "np", ".", "linspace", "(", ".0", ",", "1.00", ",", "int", "(", "np", ".", "round", "(", "\n", "(", "1.00", "-", ".0", ")", "/", ".01", ")", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "maxDets", "=", "[", "20", "]", "\n", "self", ".", "areaRng", "=", "[", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", "]", "\n", "self", ".", "areaRngLbl", "=", "[", "'all'", ",", "'medium'", ",", "'large'", "]", "\n", "self", ".", "useCats", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.Params.__init__": [[630, 640], ["cocoeval.Params.setDetParams", "cocoeval.Params.setKpParams", "Exception"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.Params.setDetParams", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.Params.setKpParams"], ["", "def", "__init__", "(", "self", ",", "iouType", "=", "'segm'", ")", ":", "\n", "        ", "if", "iouType", "==", "'segm'", "or", "iouType", "==", "'bbox'", ":", "\n", "            ", "self", ".", "setDetParams", "(", ")", "\n", "", "elif", "iouType", "==", "'keypoints'", ":", "\n", "            ", "self", ".", "setKpParams", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'iouType not supported'", ")", "\n", "", "self", ".", "iouType", "=", "iouType", "\n", "# useSegm is deprecated", "\n", "self", ".", "useSegm", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.__init__": [[22, 32], ["torch.Module.__init__", "maps_utils.kp_group.HeatmapParser", "maps_utils.centermap.CenterMap", "config.args", "SMPLWrapper", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ",", "with_smpl_parser", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResultParser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "map_size", "=", "args", "(", ")", ".", "centermap_size", "\n", "self", ".", "with_smpl_parser", "=", "with_smpl_parser", "\n", "if", "args", "(", ")", ".", "calc_smpl_mesh", "and", "with_smpl_parser", ":", "\n", "            ", "self", ".", "params_map_parser", "=", "SMPLWrapper", "(", ")", "\n", "\n", "", "self", ".", "heatmap_parser", "=", "HeatmapParser", "(", ")", "\n", "self", ".", "centermap_parser", "=", "CenterMap", "(", ")", "\n", "self", ".", "match_preds_to_gts_for_supervision", "=", "args", "(", ")", ".", "match_preds_to_gts_for_supervision", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.matching_forward": [[33, 44], ["result_parser.ResultParser.match_params_new", "result_parser.ResultParser.match_params", "result_parser.ResultParser.params_map_parser", "result_parser.ResultParser.determine_detection_flag", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.match_params_new", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.match_params", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.determine_detection_flag", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "matching_forward", "(", "self", ",", "outputs", ",", "meta_data", ",", "cfg", ")", ":", "\n", "        ", "if", "args", "(", ")", ".", "model_version", "in", "[", "6", ",", "8", ",", "9", "]", ":", "\n", "            ", "outputs", ",", "meta_data", "=", "self", ".", "match_params_new", "(", "outputs", ",", "meta_data", ",", "cfg", ")", "\n", "", "else", ":", "\n", "            ", "outputs", ",", "meta_data", "=", "self", ".", "match_params", "(", "outputs", ",", "meta_data", ",", "cfg", ")", "\n", "", "if", "'params_pred'", "in", "outputs", "and", "self", ".", "with_smpl_parser", "and", "args", "(", ")", ".", "calc_smpl_mesh", ":", "\n", "            ", "outputs", "=", "self", ".", "params_map_parser", "(", "outputs", ",", "meta_data", ")", "\n", "\n", "", "if", "'detection_flag'", "not", "in", "outputs", ":", "\n", "            ", "outputs", "[", "'detection_flag'", "]", "=", "self", ".", "determine_detection_flag", "(", "outputs", ",", "meta_data", ")", "\n", "", "return", "outputs", ",", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parsing_forward": [[45, 53], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "result_parser.ResultParser.parse_maps", "result_parser.ResultParser.params_map_parser", "result_parser.ResultParser.determine_detection_flag"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parse_maps", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.determine_detection_flag"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "parsing_forward", "(", "self", ",", "outputs", ",", "meta_data", ",", "cfg", ")", ":", "\n", "        ", "outputs", ",", "meta_data", "=", "self", ".", "parse_maps", "(", "outputs", ",", "meta_data", ",", "cfg", ")", "\n", "if", "'params_pred'", "in", "outputs", "and", "self", ".", "with_smpl_parser", ":", "\n", "            ", "outputs", "=", "self", ".", "params_map_parser", "(", "outputs", ",", "meta_data", ")", "\n", "", "if", "'detection_flag'", "not", "in", "outputs", ":", "\n", "            ", "outputs", "[", "'detection_flag'", "]", "=", "self", ".", "determine_detection_flag", "(", "outputs", ",", "meta_data", ")", "\n", "", "return", "outputs", ",", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.determine_detection_flag": [[54, 58], ["torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "determine_detection_flag", "(", "self", ",", "outputs", ",", "meta_data", ")", ":", "\n", "        ", "detected_ids", "=", "torch", ".", "unique", "(", "outputs", "[", "'reorganize_idx'", "]", ")", "\n", "detection_flag", "=", "torch", ".", "Tensor", "(", "[", "batch_id", "in", "detected_ids", "for", "batch_id", "in", "meta_data", "[", "'batch_ids'", "]", "]", ")", ".", "cuda", "(", ")", "\n", "return", "detection_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.process_reorganize_idx_data_parallel": [[59, 65], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count"], "methods", ["None"], ["", "def", "process_reorganize_idx_data_parallel", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "gpu_num", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "current_device_id", "=", "outputs", "[", "'params_maps'", "]", ".", "device", ".", "index", "\n", "data_size", "=", "outputs", "[", "'params_maps'", "]", ".", "shape", "[", "0", "]", "\n", "outputs", "[", "'reorganize_idx'", "]", "+=", "data_size", "*", "current_device_id", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.suppressing_silimar_mesh_and_2D_center": [[66, 86], ["len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "pred_batch_ids.unsqueeze().repeat", "pred_batch_ids.unsqueeze().repeat", "torch.where", "torch.where", "torch.where", "torch.where", "utils.rot_6D.rot6D_to_angular", "utils.rot_6D.rot6D_to_angular().repeat", "batch_smpl_pose_l2_error", "similarity[].clone", "top_score.unsqueeze().repeat", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "len", "pred_batch_ids.unsqueeze", "pred_batch_ids.unsqueeze", "similarity.sum", "utils.rot_6D.rot6D_to_angular", "top_score.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "config.args", "pred_czyxs[].unsqueeze().repeat", "pred_czyxs[].unsqueeze().repeat", "pose_params_preds[].unsqueeze", "config.args", "config.args", "pred_czyxs[].unsqueeze", "pred_czyxs[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular", "home.repos.pwc.inspect_result.Arthur151_ROMP.loss_funcs.params_loss.batch_smpl_pose_l2_error", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "suppressing_silimar_mesh_and_2D_center", "(", "self", ",", "params_preds", ",", "pred_batch_ids", ",", "pred_czyxs", ",", "top_score", ",", "center2D_thresh", "=", "5", ",", "pose_thresh", "=", "2.5", ")", ":", "# center2D_thresh=5, pose_thresh=2.5 center2D_thresh=2, pose_thresh=1.2", "\n", "        ", "pose_params_preds", "=", "params_preds", "[", ":", ",", "args", "(", ")", ".", "cam_dim", ":", "args", "(", ")", ".", "cam_dim", "+", "22", "*", "args", "(", ")", ".", "rot_dim", "]", "\n", "\n", "N", "=", "len", "(", "pred_czyxs", ")", "\n", "center2D_similarity", "=", "torch", ".", "norm", "(", "(", "pred_czyxs", "[", ":", ",", "1", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "-", "pred_czyxs", "[", ":", ",", "1", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", ")", ".", "float", "(", ")", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "same_batch_id_mask", "=", "pred_batch_ids", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "N", ")", "==", "pred_batch_ids", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "N", ",", "1", ")", "\n", "center2D_similarity", "[", "~", "same_batch_id_mask", "]", "=", "center2D_thresh", "+", "1", "\n", "similarity", "=", "center2D_similarity", "<=", "center2D_thresh", "\n", "center_similar_inds", "=", "torch", ".", "where", "(", "similarity", ".", "sum", "(", "-", "1", ")", ">", "1", ")", "[", "0", "]", "\n", "\n", "for", "s_inds", "in", "center_similar_inds", ":", "\n", "            ", "pose_angulars", "=", "rot6D_to_angular", "(", "pose_params_preds", "[", "similarity", "[", "s_inds", "]", "]", ")", "\n", "pose_angular_base", "=", "rot6D_to_angular", "(", "pose_params_preds", "[", "s_inds", "]", ".", "unsqueeze", "(", "0", ")", ")", ".", "repeat", "(", "len", "(", "pose_angulars", ")", ",", "1", ")", "\n", "pose_similarity", "=", "batch_smpl_pose_l2_error", "(", "pose_angulars", ",", "pose_angular_base", ")", "\n", "sim_past", "=", "similarity", "[", "s_inds", "]", ".", "clone", "(", ")", "\n", "similarity", "[", "s_inds", ",", "sim_past", "]", "=", "(", "pose_similarity", "<", "pose_thresh", ")", "\n", "\n", "", "score_map", "=", "similarity", "*", "top_score", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "N", ",", "1", ")", "\n", "nms_inds", "=", "torch", ".", "argmax", "(", "score_map", ",", "1", ")", "==", "torch", ".", "arange", "(", "N", ")", ".", "to", "(", "score_map", ".", "device", ")", "\n", "return", "[", "item", "[", "nms_inds", "]", "for", "item", "in", "[", "pred_batch_ids", ",", "pred_czyxs", ",", "top_score", "]", "]", ",", "nms_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.suppressing_duplicate_mesh": [[87, 96], ["result_parser.ResultParser.suppressing_silimar_mesh_and_2D_center", "outputs.update"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.suppressing_silimar_mesh_and_2D_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update"], ["", "def", "suppressing_duplicate_mesh", "(", "self", ",", "outputs", ")", ":", "\n", "# During training, do not use nms to facilitate more thourough learning", "\n", "        ", "(", "pred_batch_ids", ",", "pred_czyxs", ",", "top_score", ")", ",", "nms_inds", "=", "self", ".", "suppressing_silimar_mesh_and_2D_center", "(", "\n", "outputs", "[", "'params_pred'", "]", ",", "outputs", "[", "'pred_batch_ids'", "]", ",", "outputs", "[", "'pred_czyxs'", "]", ",", "outputs", "[", "'top_score'", "]", ")", "\n", "outputs", "[", "'params_pred'", "]", ",", "outputs", "[", "'cam_czyx'", "]", "=", "outputs", "[", "'params_pred'", "]", "[", "nms_inds", "]", ",", "outputs", "[", "'cam_czyx'", "]", "[", "nms_inds", "]", "\n", "if", "'motion_offsets'", "in", "outputs", ":", "\n", "            ", "outputs", "[", "'motion_offsets'", "]", "=", "outputs", "[", "'motion_offsets'", "]", "[", "nms_inds", "]", "\n", "", "outputs", ".", "update", "(", "{", "'pred_batch_ids'", ":", "pred_batch_ids", ",", "'pred_czyxs'", ":", "pred_czyxs", ",", "'top_score'", ":", "top_score", "}", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.match_params_new": [[97, 133], ["utils.center_utils.parse_gt_center3d", "meta_data[].clone", "utils.center_utils.process_gt_center", "result_parser.ResultParser.match_gt_pred_3d_2d", "result_parser.reorganize_data", "config.args", "result_parser.ResultParser.suppressing_duplicate_mesh", "len", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.center_utils.parse_gt_center3d", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.center_utils.process_gt_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.match_gt_pred_3d_2d", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.reorganize_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.suppressing_duplicate_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "match_params_new", "(", "self", ",", "outputs", ",", "meta_data", ",", "cfg", ")", ":", "\n", "        ", "gt_keys", "=", "[", "'params'", ",", "'full_kp2d'", ",", "'kp_3d'", ",", "'valid_masks'", ",", "'subject_ids'", ",", "'verts'", ",", "'cam_mask'", ",", "'kid_shape_offsets'", ",", "'root_trans'", ",", "'cams'", "]", "\n", "if", "args", "(", ")", ".", "learn_relative", ":", "\n", "            ", "gt_keys", "+=", "[", "'depth_info'", "]", "\n", "\n", "", "exclude_keys", "=", "[", "'heatmap'", ",", "'centermap'", ",", "'AE_joints'", ",", "'person_centers'", ",", "'params_pred'", ",", "'all_person_detected_mask'", ",", "\"person_scales\"", "]", "\n", "\n", "if", "cfg", "[", "'with_nms'", "]", ":", "\n", "            ", "outputs", "=", "self", ".", "suppressing_duplicate_mesh", "(", "outputs", ")", "\n", "", "cam_mask", "=", "meta_data", "[", "'cam_mask'", "]", "\n", "center_gts_info_3d", "=", "parse_gt_center3d", "(", "cam_mask", ",", "meta_data", "[", "'cams'", "]", ")", "\n", "person_centers", "=", "meta_data", "[", "'person_centers'", "]", ".", "clone", "(", ")", "\n", "# exclude the 2D body centers with precise 3D center locations.", "\n", "person_centers", "[", "cam_mask", "]", "=", "-", "2.", "\n", "center_gts_info_2d", "=", "process_gt_center", "(", "person_centers", ")", "\n", "\n", "mc", "=", "self", ".", "match_gt_pred_3d_2d", "(", "center_gts_info_2d", ",", "center_gts_info_3d", ",", "outputs", "[", "'pred_batch_ids'", "]", ",", "outputs", "[", "'pred_czyxs'", "]", ",", "outputs", "[", "'top_score'", "]", ",", "outputs", "[", "'cam_czyx'", "]", ",", "outputs", "[", "'center_map_3d'", "]", ".", "device", ",", "cfg", "[", "'is_training'", "]", ",", "batch_size", "=", "len", "(", "cam_mask", ")", ",", "with_2d_matching", "=", "cfg", "[", "'with_2d_matching'", "]", ")", "\n", "batch_ids", ",", "person_ids", ",", "matched_pred_ids", ",", "center_confs", "=", "mc", "[", "'batch_ids'", "]", ",", "mc", "[", "'person_ids'", "]", ",", "mc", "[", "'matched_ids'", "]", ",", "mc", "[", "'conf'", "]", "\n", "\n", "outputs", "[", "'params_pred'", "]", "=", "outputs", "[", "'params_pred'", "]", "[", "matched_pred_ids", "]", "\n", "\n", "for", "center_key", "in", "[", "'pred_batch_ids'", ",", "'pred_czyxs'", ",", "'top_score'", "]", ":", "\n", "            ", "outputs", "[", "center_key", "]", "=", "outputs", "[", "center_key", "]", "[", "matched_pred_ids", "]", "\n", "\n", "# convert current batch id (0,1,2,3,..) on single gpu to the global id on all gpu (16,17,18,19,...)", "\n", "", "outputs", "[", "'pred_batch_ids'", "]", "+=", "meta_data", "[", "'batch_ids'", "]", "[", "0", "]", "\n", "\n", "exclude_keys", "+=", "[", "'centermap_3d'", ",", "'valid_centermap3d_mask'", "]", "\n", "\n", "outputs", ",", "meta_data", "=", "reorganize_data", "(", "outputs", ",", "meta_data", ",", "exclude_keys", ",", "gt_keys", ",", "batch_ids", ",", "person_ids", ")", "\n", "outputs", "[", "'center_preds'", "]", "=", "outputs", "[", "'pred_czyxs'", "]", "*", "args", "(", ")", ".", "input_size", "/", "args", "(", ")", ".", "centermap_size", "\n", "outputs", "[", "'center_confs'", "]", "=", "center_confs", "\n", "\n", "return", "outputs", ",", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.match_gt_pred_3d_2d": [[134, 189], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "list", "len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "mc[].append", "mc[].append", "mc[].append", "mc[].append", "len", "pred_czyxs[].long", "mc[].append", "mc[].append", "mc[].append", "mc[].append", "config.args", "enumerate", "len", "mc.update", "mc.keys", "torch.where", "torch.where", "torch.where", "torch.where", "len", "torch.where", "torch.where", "torch.where", "torch.where", "len", "zip", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "pred_czyxs[].float", "center_gt[].float().to", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "mc[].append", "mc[].append", "mc[].append", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "config.args", "center_gt[].float", "numpy.where", "config.args", "pred_czyxs[].float", "center_gt[].float().to", "center_pred[].float", "center_gt[].float().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "center_gt[].float", "center_gt[].float"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "match_gt_pred_3d_2d", "(", "self", ",", "center_gts_info_2d", ",", "center_gts_info_3d", ",", "pred_batch_ids", ",", "pred_czyxs", ",", "top_score", ",", "cam_czyx", ",", "device", ",", "is_training", ",", "batch_size", "=", "1", ",", "with_2d_matching", "=", "True", ")", ":", "\n", "        ", "vgt_batch_ids", ",", "vgt_person_ids", ",", "vgt_centers", "=", "center_gts_info_2d", "\n", "vgt_batch_ids_3d", ",", "vgt_person_ids_3d", ",", "vgt_czyxs", "=", "center_gts_info_3d", "\n", "mc", "=", "{", "key", ":", "[", "]", "for", "key", "in", "[", "'batch_ids'", ",", "'matched_ids'", ",", "'person_ids'", ",", "'conf'", "]", "}", "\n", "\n", "# 3D center matching", "\n", "for", "match_ind", "in", "torch", ".", "arange", "(", "len", "(", "vgt_batch_ids_3d", ")", ")", ":", "\n", "            ", "batch_id", ",", "person_id", ",", "center_gt", "=", "vgt_batch_ids_3d", "[", "match_ind", "]", ",", "vgt_person_ids_3d", "[", "match_ind", "]", ",", "vgt_czyxs", "[", "match_ind", "]", "\n", "pids", "=", "torch", ".", "where", "(", "pred_batch_ids", "==", "batch_id", ")", "[", "0", "]", "\n", "if", "len", "(", "pids", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "center_dist_3d", "=", "torch", ".", "norm", "(", "pred_czyxs", "[", "pids", "]", ".", "float", "(", ")", "-", "center_gt", "[", "None", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "matched_pred_id", "=", "pids", "[", "torch", ".", "argmin", "(", "center_dist_3d", ")", "]", "\n", "mc", "[", "'batch_ids'", "]", ".", "append", "(", "batch_id", ")", "\n", "mc", "[", "'matched_ids'", "]", ".", "append", "(", "matched_pred_id", ")", "\n", "mc", "[", "'person_ids'", "]", ".", "append", "(", "person_id", ")", "\n", "mc", "[", "'conf'", "]", ".", "append", "(", "top_score", "[", "matched_pred_id", "]", ")", "\n", "\n", "# 2D center matching", "\n", "", "for", "match_ind", "in", "torch", ".", "arange", "(", "len", "(", "vgt_batch_ids", ")", ")", ":", "\n", "            ", "batch_id", ",", "person_id", ",", "center_gt", "=", "vgt_batch_ids", "[", "match_ind", "]", ",", "vgt_person_ids", "[", "match_ind", "]", ",", "vgt_centers", "[", "match_ind", "]", "\n", "pids", "=", "torch", ".", "where", "(", "pred_batch_ids", "==", "batch_id", ")", "[", "0", "]", "\n", "if", "len", "(", "pids", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "matched_pred_id", "=", "pids", "[", "torch", ".", "argmin", "(", "torch", ".", "norm", "(", "pred_czyxs", "[", "pids", ",", "1", ":", "]", ".", "float", "(", ")", "-", "center_gt", "[", "None", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "dim", "=", "-", "1", ")", ")", "]", "\n", "center_matched", "=", "pred_czyxs", "[", "matched_pred_id", "]", ".", "long", "(", ")", "\n", "mc", "[", "'batch_ids'", "]", ".", "append", "(", "batch_id", ")", "\n", "mc", "[", "'matched_ids'", "]", ".", "append", "(", "matched_pred_id", ")", "\n", "mc", "[", "'person_ids'", "]", ".", "append", "(", "person_id", ")", "\n", "mc", "[", "'conf'", "]", ".", "append", "(", "top_score", "[", "matched_pred_id", "]", ")", "\n", "\n", "", "if", "args", "(", ")", ".", "eval_2dpose", ":", "\n", "            ", "for", "inds", ",", "(", "batch_id", ",", "person_id", ",", "center_gt", ")", "in", "enumerate", "(", "zip", "(", "vgt_batch_ids", ",", "vgt_person_ids", ",", "vgt_centers", ")", ")", ":", "\n", "                ", "if", "batch_id", "in", "pred_batch_ids", ":", "\n", "                    ", "center_pred", "=", "pred_czyxs", "[", "pred_batch_ids", "==", "batch_id", "]", "\n", "matched_id", "=", "torch", ".", "argmin", "(", "torch", ".", "norm", "(", "center_pred", "[", ":", ",", "1", ":", "]", ".", "float", "(", ")", "-", "center_gt", "[", "None", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "matched_pred_id", "=", "np", ".", "where", "(", "(", "pred_batch_ids", "==", "batch_id", ")", ".", "cpu", "(", ")", ")", "[", "0", "]", "[", "matched_id", "]", "\n", "mc", "[", "'matched_ids'", "]", ".", "append", "(", "matched_pred_id", ")", "\n", "mc", "[", "'batch_ids'", "]", ".", "append", "(", "batch_id", ")", ";", "mc", "[", "'person_ids'", "]", ".", "append", "(", "person_id", ")", "\n", "\n", "", "", "", "if", "len", "(", "mc", "[", "'matched_ids'", "]", ")", "==", "0", ":", "\n", "#print('matching failed in match_gt_pred_3d_2d of result_parser.py')", "\n", "            ", "mc", ".", "update", "(", "{", "'batch_ids'", ":", "[", "0", "]", ",", "'matched_ids'", ":", "[", "0", "]", ",", "'person_ids'", ":", "[", "0", "]", ",", "'conf'", ":", "[", "0", "]", "}", ")", "\n", "", "keys_list", "=", "list", "(", "mc", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "keys_list", ":", "\n", "            ", "if", "key", "==", "'conf'", ":", "\n", "                ", "mc", "[", "key", "]", "=", "torch", ".", "Tensor", "(", "mc", "[", "key", "]", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                ", "mc", "[", "key", "]", "=", "torch", ".", "Tensor", "(", "mc", "[", "key", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "", "if", "args", "(", ")", ".", "max_supervise_num", "!=", "-", "1", "and", "is_training", ":", "\n", "                ", "mc", "[", "key", "]", "=", "mc", "[", "key", "]", "[", ":", "args", "(", ")", ".", "max_supervise_num", "]", "\n", "\n", "", "", "return", "mc", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.match_params": [[190, 214], ["utils.center_utils.process_gt_center", "result_parser.ResultParser.centermap_parser.parse_centermap", "result_parser.ResultParser.match_gt_pred", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "result_parser.reorganize_data", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "batch_ids.clone", "result_parser.ResultParser.parameter_sampling", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.zeros().long().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "meta_data[].cuda", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "config.args", "config.args", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.center_utils.process_gt_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.match_gt_pred", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.reorganize_data", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parameter_sampling", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "match_params", "(", "self", ",", "outputs", ",", "meta_data", ",", "cfg", ")", ":", "\n", "        ", "gt_keys", "=", "[", "'params'", ",", "'full_kp2d'", ",", "'kp_3d'", ",", "'subject_ids'", ",", "'valid_masks'", "]", "\n", "exclude_keys", "=", "[", "'heatmap'", ",", "'centermap'", ",", "'AE_joints'", ",", "'person_centers'", ",", "'all_person_detected_mask'", "]", "\n", "\n", "center_gts_info", "=", "process_gt_center", "(", "meta_data", "[", "'person_centers'", "]", ")", "\n", "center_preds_info", "=", "self", ".", "centermap_parser", ".", "parse_centermap", "(", "outputs", "[", "'center_map'", "]", ")", "\n", "mc_centers", "=", "self", ".", "match_gt_pred", "(", "center_gts_info", ",", "center_preds_info", ",", "outputs", "[", "'center_map'", "]", ".", "device", ",", "cfg", "[", "'is_training'", "]", ")", "\n", "batch_ids", ",", "flat_inds", ",", "person_ids", "=", "mc_centers", "[", "'batch_ids'", "]", ",", "mc_centers", "[", "'flat_inds'", "]", ",", "mc_centers", "[", "'person_ids'", "]", "\n", "if", "len", "(", "batch_ids", ")", "==", "0", ":", "\n", "            ", "if", "'new_training'", "in", "cfg", ":", "\n", "                ", "if", "cfg", "[", "'new_training'", "]", ":", "\n", "                    ", "outputs", "[", "'detection_flag'", "]", "=", "torch", ".", "Tensor", "(", "[", "False", "for", "_", "in", "range", "(", "len", "(", "meta_data", "[", "'batch_ids'", "]", ")", ")", "]", ")", ".", "cuda", "(", ")", "\n", "outputs", "[", "'reorganize_idx'", "]", "=", "meta_data", "[", "'batch_ids'", "]", ".", "cuda", "(", ")", "\n", "return", "outputs", ",", "meta_data", "\n", "", "", "batch_ids", ",", "flat_inds", "=", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", ".", "to", "(", "outputs", "[", "'center_map'", "]", ".", "device", ")", ",", "(", "torch", ".", "ones", "(", "1", ")", "*", "self", ".", "map_size", "**", "2", "/", "2.", ")", ".", "to", "(", "outputs", "[", "'center_map'", "]", ".", "device", ")", ".", "long", "(", ")", "\n", "person_ids", "=", "batch_ids", ".", "clone", "(", ")", "\n", "", "outputs", "[", "'detection_flag'", "]", "=", "torch", ".", "Tensor", "(", "[", "True", "for", "_", "in", "range", "(", "len", "(", "batch_ids", ")", ")", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "'params_maps'", "in", "outputs", "and", "'params_pred'", "not", "in", "outputs", ":", "\n", "            ", "outputs", "[", "'params_pred'", "]", "=", "self", ".", "parameter_sampling", "(", "outputs", "[", "'params_maps'", "]", ",", "batch_ids", ",", "flat_inds", ",", "use_transform", "=", "True", ")", "\n", "\n", "", "outputs", ",", "meta_data", "=", "reorganize_data", "(", "outputs", ",", "meta_data", ",", "exclude_keys", ",", "gt_keys", ",", "batch_ids", ",", "person_ids", ")", "\n", "outputs", "[", "'centers_pred'", "]", "=", "torch", ".", "stack", "(", "[", "flat_inds", "%", "args", "(", ")", ".", "centermap_size", ",", "flat_inds", "//", "args", "(", ")", ".", "centermap_size", "]", ",", "1", ")", "\n", "return", "outputs", ",", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.match_gt_pred": [[215, 248], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "list", "vgt_batch_ids.long().to", "flatten_inds().to", "vgt_person_ids.long().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "len", "cyxs[].long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "mc[].append", "mc[].append", "mc[].append", "mc[].append", "mc.keys", "torch.where", "torch.where", "torch.where", "torch.where", "len", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "torch.Tensor().long().to", "vgt_batch_ids.long", "result_parser.flatten_inds", "vgt_person_ids.long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "vgt_centers.long", "len", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "config.args", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "config.args", "config.args", "cyxs[].float", "center_gt[].float().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "center_gt[].float"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.flatten_inds", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "match_gt_pred", "(", "self", ",", "center_gts_info", ",", "center_preds_info", ",", "device", ",", "is_training", ")", ":", "\n", "        ", "vgt_batch_ids", ",", "vgt_person_ids", ",", "vgt_centers", "=", "center_gts_info", "\n", "vpred_batch_ids", ",", "flat_inds", ",", "cyxs", ",", "top_score", "=", "center_preds_info", "\n", "mc", "=", "{", "key", ":", "[", "]", "for", "key", "in", "[", "'batch_ids'", ",", "'flat_inds'", ",", "'person_ids'", ",", "'conf'", "]", "}", "\n", "\n", "if", "self", ".", "match_preds_to_gts_for_supervision", ":", "\n", "            ", "for", "match_ind", "in", "torch", ".", "arange", "(", "len", "(", "vgt_batch_ids", ")", ")", ":", "\n", "                ", "batch_id", ",", "person_id", ",", "center_gt", "=", "vgt_batch_ids", "[", "match_ind", "]", ",", "vgt_person_ids", "[", "match_ind", "]", ",", "vgt_centers", "[", "match_ind", "]", "\n", "pids", "=", "torch", ".", "where", "(", "vpred_batch_ids", "==", "batch_id", ")", "[", "0", "]", "\n", "if", "len", "(", "pids", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "closet_center_ind", "=", "pids", "[", "torch", ".", "argmin", "(", "torch", ".", "norm", "(", "cyxs", "[", "pids", "]", ".", "float", "(", ")", "-", "center_gt", "[", "None", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "dim", "=", "-", "1", ")", ")", "]", "\n", "center_matched", "=", "cyxs", "[", "closet_center_ind", "]", ".", "long", "(", ")", "\n", "cy", ",", "cx", "=", "torch", ".", "clamp", "(", "center_matched", ",", "0", ",", "self", ".", "map_size", "-", "1", ")", "\n", "flat_ind", "=", "cy", "*", "args", "(", ")", ".", "centermap_size", "+", "cx", "\n", "mc", "[", "'batch_ids'", "]", ".", "append", "(", "batch_id", ")", "\n", "mc", "[", "'flat_inds'", "]", ".", "append", "(", "flat_ind", ")", "\n", "mc", "[", "'person_ids'", "]", ".", "append", "(", "person_id", ")", "\n", "mc", "[", "'conf'", "]", ".", "append", "(", "top_score", "[", "closet_center_ind", "]", ")", "\n", "\n", "", "keys_list", "=", "list", "(", "mc", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "keys_list", ":", "\n", "                ", "if", "key", "!=", "'conf'", ":", "\n", "                    ", "mc", "[", "key", "]", "=", "torch", ".", "Tensor", "(", "mc", "[", "key", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "", "if", "args", "(", ")", ".", "max_supervise_num", "!=", "-", "1", "and", "is_training", ":", "\n", "                    ", "mc", "[", "key", "]", "=", "mc", "[", "key", "]", "[", ":", "args", "(", ")", ".", "max_supervise_num", "]", "\n", "", "", "", "else", ":", "\n", "            ", "mc", "[", "'batch_ids'", "]", "=", "vgt_batch_ids", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "mc", "[", "'flat_inds'", "]", "=", "flatten_inds", "(", "vgt_centers", ".", "long", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "mc", "[", "'person_ids'", "]", "=", "vgt_person_ids", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "mc", "[", "'conf'", "]", "=", "torch", ".", "zeros", "(", "len", "(", "vgt_person_ids", ")", ")", ".", "to", "(", "device", ")", "\n", "", "return", "mc", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parameter_sampling": [[249, 256], ["maps[].contiguous", "maps.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "maps.view().permute().contiguous.view().permute().contiguous.view().permute", "maps.view().permute().contiguous.view().permute().contiguous.view"], "methods", ["None"], ["", "def", "parameter_sampling", "(", "self", ",", "maps", ",", "batch_ids", ",", "flat_inds", ",", "use_transform", "=", "True", ")", ":", "\n", "        ", "device", "=", "maps", ".", "device", "\n", "if", "use_transform", ":", "\n", "            ", "batch", ",", "channel", "=", "maps", ".", "shape", "[", ":", "2", "]", "\n", "maps", "=", "maps", ".", "view", "(", "batch", ",", "channel", ",", "-", "1", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", ".", "contiguous", "(", ")", "\n", "", "results", "=", "maps", "[", "batch_ids", ",", "flat_inds", "]", ".", "contiguous", "(", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parse_maps": [[257, 285], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "result_parser.reorganize_gts", "outputs[].long", "result_parser.ResultParser.centermap_parser.parse_centermap_heatmap_adaptive_scale_batch", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "result_parser.ResultParser.parameter_sampling", "result_parser.ResultParser.parameter_sampling", "config.args", "result_parser.ResultParser.suppressing_duplicate_mesh", "len", "result_parser.ResultParser.centermap_parser.parse_centermap_heatmap_adaptive_scale_batch", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "config.args", "torch.div", "torch.div", "torch.div", "torch.div", "config.args", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "config.args", "config.args", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.reorganize_gts", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap_heatmap_adaptive_scale_batch", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parameter_sampling", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parameter_sampling", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.suppressing_duplicate_mesh", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap_heatmap_adaptive_scale_batch", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "parse_maps", "(", "self", ",", "outputs", ",", "meta_data", ",", "cfg", ")", ":", "\n", "        ", "if", "args", "(", ")", ".", "model_version", "in", "[", "6", "]", ":", "\n", "            ", "if", "cfg", "[", "'with_nms'", "]", ":", "\n", "                ", "outputs", "=", "self", ".", "suppressing_duplicate_mesh", "(", "outputs", ")", "\n", "", "batch_ids", "=", "outputs", "[", "'pred_batch_ids'", "]", ".", "long", "(", ")", "\n", "outputs", "[", "'center_preds'", "]", "=", "outputs", "[", "'pred_czyxs'", "]", "*", "args", "(", ")", ".", "input_size", "/", "args", "(", ")", ".", "centermap_size", "\n", "outputs", "[", "'center_confs'", "]", "=", "outputs", "[", "'top_score'", "]", "\n", "", "else", ":", "\n", "            ", "batch_ids", ",", "flat_inds", ",", "cyxs", ",", "top_score", "=", "self", ".", "centermap_parser", ".", "parse_centermap_heatmap_adaptive_scale_batch", "(", "outputs", "[", "'center_map'", "]", ")", "\n", "\n", "if", "len", "(", "batch_ids", ")", "==", "0", ":", "\n", "                ", "batch_ids", ",", "flat_inds", ",", "cyxs", ",", "top_score", "=", "self", ".", "centermap_parser", ".", "parse_centermap_heatmap_adaptive_scale_batch", "(", "outputs", "[", "'center_map'", "]", ",", "top_n_people", "=", "1", ")", "\n", "outputs", "[", "'detection_flag'", "]", "=", "torch", ".", "Tensor", "(", "[", "False", "for", "_", "in", "range", "(", "len", "(", "batch_ids", ")", ")", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "", "outputs", "[", "'centers_pred'", "]", "=", "torch", ".", "stack", "(", "[", "flat_inds", "%", "args", "(", ")", ".", "centermap_size", ",", "torch", ".", "div", "(", "flat_inds", ",", "args", "(", ")", ".", "centermap_size", ",", "rounding_mode", "=", "'floor'", ")", "]", ",", "1", ")", "\n", "outputs", "[", "'centers_conf'", "]", "=", "self", ".", "parameter_sampling", "(", "outputs", "[", "'center_map'", "]", ",", "batch_ids", ",", "flat_inds", ",", "use_transform", "=", "True", ")", "\n", "outputs", "[", "'params_pred'", "]", "=", "self", ".", "parameter_sampling", "(", "outputs", "[", "'params_maps'", "]", ",", "batch_ids", ",", "flat_inds", ",", "use_transform", "=", "True", ")", "\n", "\n", "", "outputs", "[", "'reorganize_idx'", "]", "=", "meta_data", "[", "'batch_ids'", "]", "[", "batch_ids", "]", "\n", "info_vis", "=", "[", "'image'", ",", "'offsets'", ",", "'imgpath'", ",", "'camMats'", "]", "\n", "meta_data", "=", "reorganize_gts", "(", "meta_data", ",", "info_vis", ",", "batch_ids", ")", "\n", "\n", "if", "'pred_batch_ids'", "in", "outputs", ":", "\n", "# convert current batch id (0,1,2,3,..) on single gpu to the global id on all gpu (16,17,18,19,...)", "\n", "            ", "outputs", "[", "'pred_batch_ids'", "]", "+=", "meta_data", "[", "'batch_ids'", "]", "[", "0", "]", "\n", "\n", "", "return", "outputs", ",", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.ResultParser.parse_kps": [[286, 293], ["result_parser.ResultParser.heatmap_parser.batch_parse", "range", "heatmap_AEs.detach", "len", "kps.append", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.batch_parse"], ["", "def", "parse_kps", "(", "self", ",", "heatmap_AEs", ",", "kp2d_thresh", "=", "0.1", ")", ":", "\n", "        ", "kps", "=", "[", "]", "\n", "heatmap_AE_results", "=", "self", ".", "heatmap_parser", ".", "batch_parse", "(", "heatmap_AEs", ".", "detach", "(", ")", ")", "\n", "for", "batch_id", "in", "range", "(", "len", "(", "heatmap_AE_results", ")", ")", ":", "\n", "            ", "kp2d", ",", "kp2d_conf", "=", "heatmap_AE_results", "[", "batch_id", "]", "\n", "kps", ".", "append", "(", "kp2d", "[", "np", ".", "array", "(", "kp2d_conf", ")", ">", "kp2d_thresh", "]", ")", "\n", "", "return", "kps", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.reorganize_gts_cpu": [[294, 303], ["isinstance", "isinstance", "meta_data[].cpu"], "function", ["None"], ["", "", "def", "reorganize_gts_cpu", "(", "meta_data", ",", "key_list", ",", "batch_ids", ")", ":", "\n", "    ", "for", "key", "in", "key_list", ":", "\n", "        ", "if", "key", "in", "meta_data", ":", "\n", "            ", "if", "isinstance", "(", "meta_data", "[", "key", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "#print(key, meta_data[key].shape, batch_ids)", "\n", "                ", "meta_data", "[", "key", "]", "=", "meta_data", "[", "key", "]", ".", "cpu", "(", ")", "[", "batch_ids", "]", "\n", "", "elif", "isinstance", "(", "meta_data", "[", "key", "]", ",", "list", ")", ":", "\n", "                ", "meta_data", "[", "key", "]", "=", "[", "meta_data", "[", "key", "]", "[", "ind", "]", "for", "ind", "in", "batch_ids", "]", "#np.array(meta_data[key])[batch_ids.cpu().numpy()]", "\n", "", "", "", "return", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.reorganize_gts": [[304, 313], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "reorganize_gts", "(", "meta_data", ",", "key_list", ",", "batch_ids", ")", ":", "\n", "    ", "for", "key", "in", "key_list", ":", "\n", "        ", "if", "key", "in", "meta_data", ":", "\n", "            ", "if", "isinstance", "(", "meta_data", "[", "key", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "#print(key, meta_data[key].shape, batch_ids)", "\n", "                ", "meta_data", "[", "key", "]", "=", "meta_data", "[", "key", "]", "[", "batch_ids", "]", "\n", "", "elif", "isinstance", "(", "meta_data", "[", "key", "]", ",", "list", ")", ":", "\n", "                ", "meta_data", "[", "key", "]", "=", "[", "meta_data", "[", "key", "]", "[", "ind", "]", "for", "ind", "in", "batch_ids", "]", "#np.array(meta_data[key])[batch_ids.cpu().numpy()]", "\n", "", "", "", "return", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.reorganize_data": [[314, 330], ["reorganize_gts.items", "result_parser.reorganize_gts", "info_vis.append", "print"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.reorganize_gts", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "reorganize_data", "(", "outputs", ",", "meta_data", ",", "exclude_keys", ",", "gt_keys", ",", "batch_ids", ",", "person_ids", ")", ":", "\n", "    ", "exclude_keys", "+=", "gt_keys", "\n", "outputs", "[", "'reorganize_idx'", "]", "=", "meta_data", "[", "'batch_ids'", "]", "[", "batch_ids", "]", "\n", "info_vis", "=", "[", "]", "\n", "for", "key", ",", "item", "in", "meta_data", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "not", "in", "exclude_keys", ":", "\n", "            ", "info_vis", ".", "append", "(", "key", ")", "\n", "\n", "", "", "meta_data", "=", "reorganize_gts", "(", "meta_data", ",", "info_vis", ",", "batch_ids", ")", "\n", "for", "gt_key", "in", "gt_keys", ":", "\n", "        ", "if", "gt_key", "in", "meta_data", ":", "\n", "            ", "try", ":", "\n", "                ", "meta_data", "[", "gt_key", "]", "=", "meta_data", "[", "gt_key", "]", "[", "batch_ids", ",", "person_ids", "]", "\n", "", "except", "Exception", "as", "error", ":", "\n", "                ", "print", "(", "gt_key", ",", "'meets error: '", ",", "error", ")", "\n", "", "", "", "return", "outputs", ",", "meta_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser.flatten_inds": [[331, 334], ["torch.clamp", "torch.clamp", "coords[].long", "coords[].long", "config.args", "config.args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "flatten_inds", "(", "coords", ")", ":", "\n", "    ", "coords", "=", "torch", ".", "clamp", "(", "coords", ",", "0", ",", "args", "(", ")", ".", "centermap_size", "-", "1", ")", "\n", "return", "coords", "[", ":", ",", "0", "]", ".", "long", "(", ")", "*", "args", "(", ")", ".", "centermap_size", "+", "coords", "[", ":", ",", "1", "]", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser._check_params_pred_": [[335, 338], ["logging.error", "logging.error", "len", "len"], "function", ["None"], ["", "def", "_check_params_pred_", "(", "params_pred_shape", ",", "batch_length", ")", ":", "\n", "    ", "assert", "len", "(", "params_pred_shape", ")", "==", "2", ",", "logging", ".", "error", "(", "'outputs[params_pred] dimension less than 2, is {}'", ".", "format", "(", "len", "(", "params_pred_shape", ")", ")", ")", "\n", "assert", "params_pred_shape", "[", "0", "]", "==", "batch_length", ",", "logging", ".", "error", "(", "'sampled length not equal.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.result_parser._check_params_sampling_": [[339, 347], ["logging.error", "logging.error", "logging.error", "logging.error", "len", "len"], "function", ["None"], ["", "def", "_check_params_sampling_", "(", "param_maps_shape", ",", "dim_start", ",", "dim_end", ",", "batch_ids", ",", "sampler_flat_inds_i", ")", ":", "\n", "    ", "assert", "len", "(", "param_maps_shape", ")", "==", "3", ",", "logging", ".", "error", "(", "'During parameter sampling, param_maps dimension is not equal 3, is {}'", ".", "format", "(", "len", "(", "param_maps_shape", ")", ")", ")", "\n", "assert", "param_maps_shape", "[", "2", "]", ">", "dim_end", ">=", "dim_start", ",", "logging", ".", "error", "(", "'During parameter sampling, param_maps dimension -1 is not larger than dim_end and dim_start, they are {},{},{}'", ".", "format", "(", "param_maps_shape", "[", "-", "1", "]", ",", "dim_end", ",", "dim_start", ")", ")", "\n", "assert", "(", "batch_ids", ">=", "param_maps_shape", "[", "0", "]", ")", ".", "sum", "(", ")", "==", "0", ",", "logging", ".", "error", "(", "'During parameter sampling, batch_ids {} out of boundary, param_maps_shape[0] is {}'", ".", "format", "(", "batch_ids", ",", "param_maps_shape", "[", "0", "]", ")", ")", "\n", "assert", "(", "sampler_flat_inds_i", ">=", "param_maps_shape", "[", "1", "]", ")", ".", "sum", "(", ")", "==", "0", ",", "logging", ".", "error", "(", "'During parameter sampling, sampler_flat_inds_i {} out of boundary, param_maps_shape[1] is {}'", ".", "format", "(", "sampler_flat_inds_i", ",", "param_maps_shape", "[", "1", "]", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.HeatmapGenerator.__init__": [[11, 24], ["numpy.arange", "numpy.exp"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_res", ",", "num_joints", ",", "sigma", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "output_res", "=", "output_res", "\n", "self", ".", "num_joints", "=", "num_joints", "\n", "if", "sigma", "<", "0", ":", "\n", "            ", "sigma", "=", "self", ".", "output_res", "/", "64", "\n", "", "self", ".", "sigma", "=", "sigma", "\n", "size", "=", "6", "*", "sigma", "+", "3", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "float", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", ",", "y0", "=", "3", "*", "sigma", "+", "1", ",", "3", "*", "sigma", "+", "1", "\n", "# gaussian kernel with size.", "\n", "gaussian_distribution", "=", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", "\n", "self", ".", "g", "=", "np", ".", "exp", "(", "gaussian_distribution", ")", "\n", "#for k in self.g:", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.HeatmapGenerator.single_process": [[30, 53], ["numpy.zeros", "enumerate", "numpy.maximum", "int", "int", "int", "int", "int", "int", "max", "max", "max", "min", "max", "min", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "min", "min"], "methods", ["None"], ["", "def", "single_process", "(", "self", ",", "joints", ")", ":", "\n", "        ", "hms", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_joints", ",", "self", ".", "output_res", ",", "self", ".", "output_res", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "sigma", "=", "self", ".", "sigma", "\n", "for", "p", "in", "joints", ":", "\n", "            ", "for", "idx", ",", "pt", "in", "enumerate", "(", "p", ")", ":", "\n", "                ", "if", "pt", "[", "2", "]", ">", "0", ":", "\n", "                    ", "x", ",", "y", "=", "int", "(", "pt", "[", "0", "]", ")", ",", "int", "(", "pt", "[", "1", "]", ")", "\n", "if", "x", "<", "0", "or", "y", "<", "0", "or", "x", ">=", "self", ".", "output_res", "or", "y", ">=", "self", ".", "output_res", ":", "\n", "                        ", "continue", "\n", "\n", "", "ul", "=", "int", "(", "np", ".", "round", "(", "x", "-", "3", "*", "sigma", "-", "1", ")", ")", ",", "int", "(", "np", ".", "round", "(", "y", "-", "3", "*", "sigma", "-", "1", ")", ")", "\n", "br", "=", "int", "(", "np", ".", "round", "(", "x", "+", "3", "*", "sigma", "+", "2", ")", ")", ",", "int", "(", "np", ".", "round", "(", "y", "+", "3", "*", "sigma", "+", "2", ")", ")", "\n", "\n", "c", ",", "d", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "self", ".", "output_res", ")", "-", "ul", "[", "0", "]", "\n", "a", ",", "b", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "self", ".", "output_res", ")", "-", "ul", "[", "1", "]", "\n", "\n", "cc", ",", "dd", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "self", ".", "output_res", ")", "\n", "aa", ",", "bb", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "self", ".", "output_res", ")", "\n", "hms", "[", "idx", ",", "aa", ":", "bb", ",", "cc", ":", "dd", "]", "=", "np", ".", "maximum", "(", "\n", "hms", "[", "idx", ",", "aa", ":", "bb", ",", "cc", ":", "dd", "]", ",", "self", ".", "g", "[", "a", ":", "b", ",", "c", ":", "d", "]", ")", "\n", "", "", "", "return", "hms", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.HeatmapGenerator.batch_process": [[54, 61], ["torch.stack().cuda", "heatmaps.append", "torch.from_numpy", "torch.stack", "torch.cat().unsqueeze", "target_generators.HeatmapGenerator.single_process", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.JointsGenerator.single_process"], ["", "def", "batch_process", "(", "self", ",", "batch_joints", ")", ":", "\n", "        ", "vis", "=", "(", "(", "batch_joints", ">", "-", "1.", ")", ".", "sum", "(", "-", "1", ")", "==", "batch_joints", ".", "shape", "[", "-", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "batch_joints", "=", "(", "torch", ".", "cat", "(", "[", "batch_joints", ",", "vis", "]", ",", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "+", "1", ")", "/", "2", "*", "self", ".", "output_res", "\n", "heatmaps", "=", "[", "]", "\n", "for", "joints", "in", "batch_joints", ":", "\n", "            ", "heatmaps", ".", "append", "(", "torch", ".", "from_numpy", "(", "self", ".", "single_process", "(", "joints", ")", ")", ")", "\n", "", "return", "torch", ".", "stack", "(", "heatmaps", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.ScaleAwareHeatmapGenerator.__init__": [[64, 67], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_res", ",", "num_joints", ")", ":", "\n", "        ", "self", ".", "output_res", "=", "output_res", "\n", "self", ".", "num_joints", "=", "num_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.ScaleAwareHeatmapGenerator.get_gaussian_kernel": [[68, 75], ["numpy.arange", "numpy.exp"], "methods", ["None"], ["", "def", "get_gaussian_kernel", "(", "self", ",", "sigma", ")", ":", "\n", "        ", "size", "=", "6", "*", "sigma", "+", "3", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "float", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", ",", "y0", "=", "3", "*", "sigma", "+", "1", ",", "3", "*", "sigma", "+", "1", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.ScaleAwareHeatmapGenerator.__call__": [[76, 100], ["numpy.zeros", "target_generators.ScaleAwareHeatmapGenerator.get_gaussian_kernel", "enumerate", "numpy.maximum", "int", "int", "int", "int", "int", "int", "max", "max", "max", "min", "max", "min", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "min", "min"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.ScaleAwareHeatmapGenerator.get_gaussian_kernel"], ["", "def", "__call__", "(", "self", ",", "joints", ")", ":", "\n", "        ", "hms", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_joints", ",", "self", ".", "output_res", ",", "self", ".", "output_res", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "p", "in", "joints", ":", "\n", "            ", "sigma", "=", "p", "[", "0", ",", "3", "]", "\n", "g", "=", "self", ".", "get_gaussian_kernel", "(", "sigma", ")", "\n", "for", "idx", ",", "pt", "in", "enumerate", "(", "p", ")", ":", "\n", "                ", "if", "pt", "[", "2", "]", ">", "0", ":", "\n", "                    ", "x", ",", "y", "=", "int", "(", "pt", "[", "0", "]", ")", ",", "int", "(", "pt", "[", "1", "]", ")", "\n", "if", "x", "<", "0", "or", "y", "<", "0", "or", "x", ">=", "self", ".", "output_res", "or", "y", ">=", "self", ".", "output_res", ":", "\n", "                        ", "continue", "\n", "\n", "", "ul", "=", "int", "(", "np", ".", "round", "(", "x", "-", "3", "*", "sigma", "-", "1", ")", ")", ",", "int", "(", "np", ".", "round", "(", "y", "-", "3", "*", "sigma", "-", "1", ")", ")", "\n", "br", "=", "int", "(", "np", ".", "round", "(", "x", "+", "3", "*", "sigma", "+", "2", ")", ")", ",", "int", "(", "np", ".", "round", "(", "y", "+", "3", "*", "sigma", "+", "2", ")", ")", "\n", "\n", "c", ",", "d", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "self", ".", "output_res", ")", "-", "ul", "[", "0", "]", "\n", "a", ",", "b", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "self", ".", "output_res", ")", "-", "ul", "[", "1", "]", "\n", "\n", "cc", ",", "dd", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "self", ".", "output_res", ")", "\n", "aa", ",", "bb", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "self", ".", "output_res", ")", "\n", "hms", "[", "idx", ",", "aa", ":", "bb", ",", "cc", ":", "dd", "]", "=", "np", ".", "maximum", "(", "\n", "hms", "[", "idx", ",", "aa", ":", "bb", ",", "cc", ":", "dd", "]", ",", "g", "[", "a", ":", "b", ",", "c", ":", "d", "]", ")", "\n", "", "", "", "return", "hms", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.JointsGenerator.__init__": [[103, 108], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_num_people", ",", "num_joints", ",", "output_res", ",", "tag_per_joint", ")", ":", "\n", "        ", "self", ".", "max_num_people", "=", "max_num_people", "\n", "self", ".", "num_joints", "=", "num_joints", "\n", "self", ".", "output_res", "=", "output_res", "\n", "self", ".", "tag_per_joint", "=", "tag_per_joint", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.JointsGenerator.single_process": [[109, 127], ["numpy.zeros", "range", "min", "enumerate", "len", "int", "int"], "methods", ["None"], ["", "def", "single_process", "(", "self", ",", "joints", ")", ":", "\n", "        ", "visible_nodes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_num_people", ",", "self", ".", "num_joints", ",", "2", ")", ")", "\n", "output_res", "=", "self", ".", "output_res", "\n", "for", "i", "in", "range", "(", "min", "(", "len", "(", "joints", ")", ",", "self", ".", "max_num_people", ")", ")", ":", "\n", "            ", "tot", "=", "0", "\n", "for", "idx", ",", "pt", "in", "enumerate", "(", "joints", "[", "i", "]", ")", ":", "\n", "                ", "x", ",", "y", "=", "int", "(", "pt", "[", "0", "]", ")", ",", "int", "(", "pt", "[", "1", "]", ")", "\n", "if", "pt", "[", "2", "]", ">", "0", "and", "x", ">=", "0", "and", "y", ">=", "0", "and", "x", "<", "self", ".", "output_res", "and", "y", "<", "self", ".", "output_res", ":", "\n", "                    ", "if", "self", ".", "tag_per_joint", ":", "\n", "                        ", "visible_nodes", "[", "i", "]", "[", "tot", "]", "=", "(", "idx", "*", "output_res", "**", "2", "+", "y", "*", "output_res", "+", "x", ",", "1", ")", "\n", "", "else", ":", "\n", "                        ", "visible_nodes", "[", "i", "]", "[", "tot", "]", "=", "(", "y", "*", "output_res", "+", "x", ",", "1", ")", "\n", "", "tot", "+=", "1", "\n", "\n", "", "", "", "return", "visible_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.JointsGenerator.batch_process": [[128, 135], ["torch.from_numpy().long().cuda", "joints_processed.append", "target_generators.JointsGenerator.single_process", "torch.from_numpy().long", "torch.cat().unsqueeze", "torch.from_numpy", "torch.cat", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.target_generators.JointsGenerator.single_process"], ["", "def", "batch_process", "(", "self", ",", "batch_joints", ")", ":", "\n", "        ", "vis", "=", "(", "(", "batch_joints", ">", "-", "1.", ")", ".", "sum", "(", "-", "1", ")", "==", "batch_joints", ".", "shape", "[", "-", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "batch_joints", "=", "(", "torch", ".", "cat", "(", "[", "batch_joints", ",", "vis", "]", ",", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "+", "1", ")", "/", "2", "*", "self", ".", "output_res", "\n", "joints_processed", "=", "[", "]", "\n", "for", "joints", "in", "batch_joints", ":", "\n", "            ", "joints_processed", ".", "append", "(", "self", ".", "single_process", "(", "joints", ")", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "joints_processed", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.debug_utils.print_dict": [[4, 7], ["debug_utils.collect_keyname", "print"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.debug_utils.collect_keyname", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["def", "print_dict", "(", "td", ")", ":", "\n", "    ", "keys", "=", "collect_keyname", "(", "td", ")", "\n", "print", "(", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.debug_utils.get_size": [[8, 17], ["isinstance", "isinstance", "len", "isinstance", "isinstance"], "function", ["None"], ["", "def", "get_size", "(", "item", ")", ":", "\n", "    ", "if", "isinstance", "(", "item", ",", "list", ")", "or", "isinstance", "(", "item", ",", "tuple", ")", ":", "\n", "        ", "return", "len", "(", "item", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "(", "item", ".", "shape", ",", "item", ".", "device", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "np", ".", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "item", ".", "shape", "\n", "", "else", ":", "\n", "        ", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.debug_utils.collect_keyname": [[18, 26], ["isinstance", "keys.append", "keys.append", "debug_utils.collect_keyname", "debug_utils.get_size"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.debug_utils.collect_keyname", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.debug_utils.get_size"], ["", "", "def", "collect_keyname", "(", "td", ")", ":", "\n", "    ", "keys", "=", "[", "]", "\n", "for", "key", "in", "td", ":", "\n", "        ", "if", "isinstance", "(", "td", "[", "key", "]", ",", "dict", ")", ":", "\n", "            ", "keys", ".", "append", "(", "[", "key", ",", "collect_keyname", "(", "td", "[", "key", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "keys", ".", "append", "(", "[", "key", ",", "get_size", "(", "td", "[", "key", "]", ")", "]", ")", "\n", "", "", "return", "keys", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.Params.__init__": [[100, 108], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_joints", "=", "17", "\n", "self", ".", "max_num_people", "=", "5", "\n", "\n", "self", ".", "detection_threshold", "=", "0.1", "\n", "self", ".", "tag_threshold", "=", "1.", "\n", "self", ".", "use_detection_val", "=", "True", "\n", "self", ".", "ignore_too_much", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.__init__": [[111, 117], ["kp_group.Params", "torch.nn.MaxPool2d"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "params", "=", "Params", "(", ")", "\n", "self", ".", "tag_per_joint", "=", "True", "\n", "NMS_KERNEL", ",", "NMS_PADDING", "=", "5", ",", "2", "\n", "self", ".", "map_size", "=", "128", "\n", "self", ".", "pool", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "NMS_KERNEL", ",", "1", ",", "NMS_PADDING", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.nms": [[118, 123], ["kp_group.HeatmapParser.pool", "torch.eq().float", "torch.eq"], "methods", ["None"], ["", "def", "nms", "(", "self", ",", "det", ")", ":", "\n", "        ", "maxm", "=", "self", ".", "pool", "(", "det", ")", "\n", "maxm", "=", "torch", ".", "eq", "(", "maxm", ",", "det", ")", ".", "float", "(", ")", "\n", "det", "=", "det", "*", "maxm", "\n", "return", "det", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.match": [[124, 127], ["list", "kp_group.match_by_tag", "map", "zip"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.match_by_tag"], ["", "def", "match", "(", "self", ",", "tag_k", ",", "loc_k", ",", "val_k", ")", ":", "\n", "        ", "match", "=", "lambda", "x", ":", "match_by_tag", "(", "x", ",", "self", ".", "params", ")", "\n", "return", "list", "(", "map", "(", "match", ",", "zip", "(", "tag_k", ",", "loc_k", ",", "val_k", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.top_k": [[128, 164], ["kp_group.HeatmapParser.nms", "det.view.view.size", "det.view.view.size", "det.view.view.size", "det.view.view.size", "det.view.view.view", "det.view.view.topk", "tag.expand.expand.view", "torch.stack", "torch.stack", "tag.expand.expand.size", "tag.expand.expand.size", "tag.expand.expand.expand", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "val_k.cpu().numpy", "torch.gather", "range", "float", "torch.stack.cpu", "torch.stack.cpu", "val_k.cpu", "tag.expand.expand.size"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms", "home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.gather"], ["", "def", "top_k", "(", "self", ",", "det", ",", "tag", ")", ":", "\n", "# det = torch.Tensor(det, requires_grad=False)", "\n", "# tag = torch.Tensor(tag, requires_grad=False)", "\n", "\n", "        ", "det", "=", "self", ".", "nms", "(", "det", ")", "\n", "num_images", "=", "det", ".", "size", "(", "0", ")", "\n", "num_joints", "=", "det", ".", "size", "(", "1", ")", "\n", "h", "=", "det", ".", "size", "(", "2", ")", "\n", "w", "=", "det", ".", "size", "(", "3", ")", "\n", "det", "=", "det", ".", "view", "(", "num_images", ",", "num_joints", ",", "-", "1", ")", "\n", "val_k", ",", "ind", "=", "det", ".", "topk", "(", "self", ".", "params", ".", "max_num_people", ",", "dim", "=", "2", ")", "\n", "\n", "tag", "=", "tag", ".", "view", "(", "tag", ".", "size", "(", "0", ")", ",", "tag", ".", "size", "(", "1", ")", ",", "w", "*", "h", ",", "-", "1", ")", "\n", "if", "not", "self", ".", "tag_per_joint", ":", "\n", "            ", "tag", "=", "tag", ".", "expand", "(", "-", "1", ",", "self", ".", "params", ".", "num_joints", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "tag_k", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "gather", "(", "tag", "[", ":", ",", ":", ",", ":", ",", "i", "]", ",", "2", ",", "ind", ")", "\n", "for", "i", "in", "range", "(", "tag", ".", "size", "(", "3", ")", ")", "\n", "]", ",", "\n", "dim", "=", "3", "\n", ")", "\n", "\n", "x", "=", "ind", "%", "w", "\n", "y", "=", "(", "ind", "/", "float", "(", "w", ")", ")", ".", "long", "(", ")", "\n", "\n", "ind_k", "=", "torch", ".", "stack", "(", "(", "x", ",", "y", ")", ",", "dim", "=", "3", ")", "\n", "\n", "ans", "=", "{", "\n", "'tag_k'", ":", "tag_k", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'loc_k'", ":", "ind_k", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'val_k'", ":", "val_k", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "}", "\n", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.adjust": [[165, 185], ["enumerate", "enumerate", "enumerate", "int", "int", "min", "max", "min", "max"], "methods", ["None"], ["", "def", "adjust", "(", "self", ",", "ans", ",", "det", ")", ":", "\n", "        ", "for", "batch_id", ",", "people", "in", "enumerate", "(", "ans", ")", ":", "\n", "            ", "for", "people_id", ",", "i", "in", "enumerate", "(", "people", ")", ":", "\n", "                ", "for", "joint_id", ",", "joint", "in", "enumerate", "(", "i", ")", ":", "\n", "                    ", "if", "joint", "[", "2", "]", ">", "0", ":", "\n", "                        ", "y", ",", "x", "=", "joint", "[", "0", ":", "2", "]", "\n", "xx", ",", "yy", "=", "int", "(", "x", ")", ",", "int", "(", "y", ")", "\n", "#print(batch_id, joint_id, det[batch_id].shape)", "\n", "tmp", "=", "det", "[", "batch_id", "]", "[", "joint_id", "]", "\n", "if", "tmp", "[", "xx", ",", "min", "(", "yy", "+", "1", ",", "tmp", ".", "shape", "[", "1", "]", "-", "1", ")", "]", ">", "tmp", "[", "xx", ",", "max", "(", "yy", "-", "1", ",", "0", ")", "]", ":", "\n", "                            ", "y", "+=", "0.25", "\n", "", "else", ":", "\n", "                            ", "y", "-=", "0.25", "\n", "\n", "", "if", "tmp", "[", "min", "(", "xx", "+", "1", ",", "tmp", ".", "shape", "[", "0", "]", "-", "1", ")", ",", "yy", "]", ">", "tmp", "[", "max", "(", "0", ",", "xx", "-", "1", ")", ",", "yy", "]", ":", "\n", "                            ", "x", "+=", "0.25", "\n", "", "else", ":", "\n", "                            ", "x", "-=", "0.25", "\n", "", "ans", "[", "batch_id", "]", "[", "people_id", ",", "joint_id", ",", "0", ":", "2", "]", "=", "(", "y", "+", "0.5", ",", "x", "+", "0.5", ")", "\n", "", "", "", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.refine": [[186, 249], ["range", "numpy.mean", "range", "numpy.array", "len", "numpy.unravel_index", "numpy.array.append", "range", "[].astype", "tags.append", "numpy.round", "numpy.argmax", "min", "max", "min", "max"], "methods", ["None"], ["", "def", "refine", "(", "self", ",", "det", ",", "tag", ",", "keypoints", ")", ":", "\n", "        ", "\"\"\"\n        Given initial keypoint predictions, we identify missing joints\n        :param det: numpy.ndarray of size (17, 128, 128)\n        :param tag: numpy.ndarray of size (17, 128, 128) if not flip\n        :param keypoints: numpy.ndarray of size (17, 4) if not flip, last dim is (x, y, det score, tag score)\n        :return: \n        \"\"\"", "\n", "if", "len", "(", "tag", ".", "shape", ")", "==", "3", ":", "\n", "# tag shape: (17, 128, 128, 1)", "\n", "            ", "tag", "=", "tag", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "tags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "keypoints", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "keypoints", "[", "i", ",", "2", "]", ">", "0", ":", "\n", "# save tag value of detected keypoint", "\n", "                ", "x", ",", "y", "=", "keypoints", "[", "i", "]", "[", ":", "2", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "tags", ".", "append", "(", "tag", "[", "i", ",", "y", ",", "x", "]", ")", "\n", "\n", "# mean tag of current detected people", "\n", "", "", "prev_tag", "=", "np", ".", "mean", "(", "tags", ",", "axis", "=", "0", ")", "\n", "ans", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "keypoints", ".", "shape", "[", "0", "]", ")", ":", "\n", "# score of joints i at all position", "\n", "            ", "tmp", "=", "det", "[", "i", ",", ":", ",", ":", "]", "\n", "# distance of all tag values with mean tag of current detected people", "\n", "tt", "=", "(", "(", "(", "tag", "[", "i", ",", ":", ",", ":", "]", "-", "prev_tag", "[", "None", ",", "None", ",", ":", "]", ")", "**", "2", ")", ".", "sum", "(", "axis", "=", "2", ")", "**", "0.5", ")", "\n", "tmp2", "=", "tmp", "-", "np", ".", "round", "(", "tt", ")", "\n", "\n", "# find maximum position", "\n", "y", ",", "x", "=", "np", ".", "unravel_index", "(", "np", ".", "argmax", "(", "tmp2", ")", ",", "tmp", ".", "shape", ")", "\n", "xx", "=", "x", "\n", "yy", "=", "y", "\n", "# detection score at maximum position", "\n", "val", "=", "tmp", "[", "y", ",", "x", "]", "\n", "# offset by 0.5", "\n", "x", "+=", "0.5", "\n", "y", "+=", "0.5", "\n", "\n", "# add a quarter offset", "\n", "if", "tmp", "[", "yy", ",", "min", "(", "xx", "+", "1", ",", "tmp", ".", "shape", "[", "1", "]", "-", "1", ")", "]", ">", "tmp", "[", "yy", ",", "max", "(", "xx", "-", "1", ",", "0", ")", "]", ":", "\n", "                ", "x", "+=", "0.25", "\n", "", "else", ":", "\n", "                ", "x", "-=", "0.25", "\n", "\n", "", "if", "tmp", "[", "min", "(", "yy", "+", "1", ",", "tmp", ".", "shape", "[", "0", "]", "-", "1", ")", ",", "xx", "]", ">", "tmp", "[", "max", "(", "0", ",", "yy", "-", "1", ")", ",", "xx", "]", ":", "\n", "                ", "y", "+=", "0.25", "\n", "", "else", ":", "\n", "                ", "y", "-=", "0.25", "\n", "\n", "", "ans", ".", "append", "(", "(", "x", ",", "y", ",", "val", ")", ")", "\n", "", "ans", "=", "np", ".", "array", "(", "ans", ")", "\n", "\n", "if", "ans", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "det", ".", "shape", "[", "0", "]", ")", ":", "\n", "# add keypoint if it is not detected", "\n", "                ", "if", "ans", "[", "i", ",", "2", "]", ">", "0", "and", "keypoints", "[", "i", ",", "2", "]", "==", "0", ":", "\n", "# if ans[i, 2] > 0.01 and keypoints[i, 2] == 0:", "\n", "                    ", "keypoints", "[", "i", ",", ":", "2", "]", "=", "ans", "[", "i", ",", ":", "2", "]", "\n", "keypoints", "[", "i", ",", "2", "]", "=", "ans", "[", "i", ",", "2", "]", "\n", "\n", "", "", "", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.parse": [[250, 276], ["kp_group.HeatmapParser.match", "kp_group.HeatmapParser.adjust", "i[].mean", "range", "len", "numpy.array", "kp_group.HeatmapParser.top_k", "len", "det[].cpu().numpy", "tag[].cpu().numpy", "kp_group.HeatmapParser.refine", "numpy.zeros", "numpy.tile", "float", "det[].cpu", "tag[].cpu"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.match", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.adjust", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.top_k", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.refine"], ["", "def", "parse", "(", "self", ",", "det", ",", "tag", ",", "adjust", "=", "True", ",", "refine", "=", "True", ",", "get_best", "=", "False", ")", ":", "\n", "        ", "ans", "=", "self", ".", "match", "(", "**", "self", ".", "top_k", "(", "det", ",", "tag", ")", ")", "\n", "\n", "if", "adjust", ":", "\n", "            ", "ans", "=", "self", ".", "adjust", "(", "ans", ",", "det", ")", "\n", "\n", "", "scores", "=", "[", "i", "[", ":", ",", "2", "]", ".", "mean", "(", ")", "for", "i", "in", "ans", "[", "0", "]", "]", "\n", "\n", "if", "refine", ":", "\n", "            ", "ans", "=", "ans", "[", "0", "]", "\n", "# for every detected person", "\n", "for", "i", "in", "range", "(", "len", "(", "ans", ")", ")", ":", "\n", "                ", "det_numpy", "=", "det", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tag_numpy", "=", "tag", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "not", "self", ".", "tag_per_joint", ":", "\n", "                    ", "tag_numpy", "=", "np", ".", "tile", "(", "\n", "tag_numpy", ",", "(", "self", ".", "params", ".", "num_joints", ",", "1", ",", "1", ",", "1", ")", "\n", ")", "\n", "", "ans", "[", "i", "]", "=", "self", ".", "refine", "(", "det_numpy", ",", "tag_numpy", ",", "ans", "[", "i", "]", ")", "\n", "", "ans", "=", "[", "ans", "]", "\n", "", "if", "len", "(", "scores", ")", ">", "0", ":", "\n", "            ", "kp2ds", "=", "np", ".", "array", "(", "ans", "[", "0", "]", "[", ":", ",", ":", ",", ":", "2", "]", ")", "\n", "kp2ds", "=", "2", "*", "kp2ds", "/", "float", "(", "self", ".", "map_size", ")", "-", "1", "\n", "return", "kp2ds", ",", "scores", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "params", ".", "num_joints", ",", "2", ")", ")", ",", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.batch_parse": [[278, 286], ["zip", "kp_group.HeatmapParser.parse", "results.append", "scores.append", "det.unsqueeze", "tag.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.HeatmapParser.parse"], ["", "", "def", "batch_parse", "(", "self", ",", "dets_tags", ",", "**", "kwargs", ")", ":", "\n", "        ", "dets", ",", "tags", "=", "dets_tags", "[", ":", ",", ":", "self", ".", "params", ".", "num_joints", "]", ",", "dets_tags", "[", ":", ",", "self", ".", "params", ".", "num_joints", ":", "]", "\n", "results", ",", "scores", "=", "[", "]", ",", "[", "]", "\n", "for", "det", ",", "tag", "in", "zip", "(", "dets", ",", "tags", ")", ":", "\n", "            ", "kp2ds", ",", "each_scores", "=", "self", ".", "parse", "(", "det", ".", "unsqueeze", "(", "0", ")", ",", "tag", ".", "unsqueeze", "(", "0", ")", ",", "**", "kwargs", ")", "\n", "results", ".", "append", "(", "kp2ds", ")", "\n", "scores", ".", "append", "(", "each_scores", ")", "\n", "", "return", "results", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.py_max_match": [[18, 23], ["munkres.Munkres", "munkres.Munkres.compute", "numpy.array().astype", "numpy.array"], "function", ["None"], ["def", "py_max_match", "(", "scores", ")", ":", "\n", "    ", "m", "=", "Munkres", "(", ")", "\n", "tmp", "=", "m", ".", "compute", "(", "scores", ")", "\n", "tmp", "=", "np", ".", "array", "(", "tmp", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.match_by_tag": [[25, 97], ["isinstance", "numpy.zeros", "range", "numpy.array().astype", "numpy.concatenate", "zip", "numpy.linalg.norm", "numpy.copy", "kp_group.py_max_match", "numpy.array", "len", "list", "numpy.mean", "numpy.concatenate", "joint_dict.setdefault", "joint_dict.keys", "len", "numpy.array", "tag_dict[].append", "numpy.copy", "numpy.round", "joint_dict.setdefault", "numpy.zeros", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.kp_group.py_max_match"], ["", "def", "match_by_tag", "(", "inp", ",", "params", ")", ":", "\n", "    ", "assert", "isinstance", "(", "params", ",", "Params", ")", ",", "'params should be class Params()'", "\n", "\n", "tag_k", ",", "loc_k", ",", "val_k", "=", "inp", "\n", "default_", "=", "np", ".", "zeros", "(", "(", "params", ".", "num_joints", ",", "3", "+", "tag_k", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "joint_dict", "=", "{", "}", "\n", "tag_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "params", ".", "num_joints", ")", ":", "\n", "        ", "idx", "=", "i", "\n", "\n", "tags", "=", "tag_k", "[", "idx", "]", "\n", "joints", "=", "np", ".", "concatenate", "(", "\n", "(", "loc_k", "[", "idx", "]", ",", "val_k", "[", "idx", ",", ":", ",", "None", "]", ",", "tags", ")", ",", "1", "\n", ")", "\n", "mask", "=", "joints", "[", ":", ",", "2", "]", ">", "params", ".", "detection_threshold", "\n", "tags", "=", "tags", "[", "mask", "]", "\n", "joints", "=", "joints", "[", "mask", "]", "\n", "\n", "if", "joints", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "i", "==", "0", "or", "len", "(", "joint_dict", ")", "==", "0", ":", "\n", "            ", "for", "tag", ",", "joint", "in", "zip", "(", "tags", ",", "joints", ")", ":", "\n", "                ", "key", "=", "tag", "[", "0", "]", "\n", "joint_dict", ".", "setdefault", "(", "key", ",", "np", ".", "copy", "(", "default_", ")", ")", "[", "idx", "]", "=", "joint", "\n", "tag_dict", "[", "key", "]", "=", "[", "tag", "]", "\n", "", "", "else", ":", "\n", "            ", "grouped_keys", "=", "list", "(", "joint_dict", ".", "keys", "(", ")", ")", "[", ":", "params", ".", "max_num_people", "]", "\n", "grouped_tags", "=", "[", "np", ".", "mean", "(", "tag_dict", "[", "i", "]", ",", "axis", "=", "0", ")", "for", "i", "in", "grouped_keys", "]", "\n", "\n", "if", "params", ".", "ignore_too_much", "and", "len", "(", "grouped_keys", ")", "==", "params", ".", "max_num_people", ":", "\n", "                ", "continue", "\n", "\n", "", "diff", "=", "joints", "[", ":", ",", "None", ",", "3", ":", "]", "-", "np", ".", "array", "(", "grouped_tags", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "diff_normed", "=", "np", ".", "linalg", ".", "norm", "(", "diff", ",", "ord", "=", "2", ",", "axis", "=", "2", ")", "\n", "diff_saved", "=", "np", ".", "copy", "(", "diff_normed", ")", "\n", "\n", "if", "params", ".", "use_detection_val", ":", "\n", "                ", "diff_normed", "=", "np", ".", "round", "(", "diff_normed", ")", "*", "100", "-", "joints", "[", ":", ",", "2", ":", "3", "]", "\n", "\n", "", "num_added", "=", "diff", ".", "shape", "[", "0", "]", "\n", "num_grouped", "=", "diff", ".", "shape", "[", "1", "]", "\n", "\n", "if", "num_added", ">", "num_grouped", ":", "\n", "                ", "diff_normed", "=", "np", ".", "concatenate", "(", "\n", "(", "\n", "diff_normed", ",", "\n", "np", ".", "zeros", "(", "(", "num_added", ",", "num_added", "-", "num_grouped", ")", ")", "+", "1e10", "\n", ")", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "\n", "", "pairs", "=", "py_max_match", "(", "diff_normed", ")", "\n", "for", "row", ",", "col", "in", "pairs", ":", "\n", "                ", "if", "(", "\n", "row", "<", "num_added", "\n", "and", "col", "<", "num_grouped", "\n", "and", "diff_saved", "[", "row", "]", "[", "col", "]", "<", "params", ".", "tag_threshold", "\n", ")", ":", "\n", "                    ", "key", "=", "grouped_keys", "[", "col", "]", "\n", "joint_dict", "[", "key", "]", "[", "idx", "]", "=", "joints", "[", "row", "]", "\n", "tag_dict", "[", "key", "]", ".", "append", "(", "tags", "[", "row", "]", ")", "\n", "", "else", ":", "\n", "                    ", "key", "=", "tags", "[", "row", "]", "[", "0", "]", "\n", "joint_dict", ".", "setdefault", "(", "key", ",", "np", ".", "copy", "(", "default_", ")", ")", "[", "idx", "]", "=", "joints", "[", "row", "]", "\n", "tag_dict", "[", "key", "]", "=", "[", "tags", "[", "row", "]", "]", "\n", "\n", "", "", "", "", "ans", "=", "np", ".", "array", "(", "[", "joint_dict", "[", "i", "]", "for", "i", "in", "joint_dict", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.__init__": [[10, 21], ["float", "centermap.CenterMap.generate_kernels", "config.args", "config.args", "config.args", "centermap.CenterMap.prepare_parsing", "config.args", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.CenterMap3D.generate_kernels", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.CenterMap3D.prepare_parsing", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["    ", "def", "__init__", "(", "self", ",", "style", "=", "'heatmap_adaptive_scale'", ")", ":", "\n", "        ", "self", ".", "style", "=", "style", "\n", "self", ".", "size", "=", "args", "(", ")", ".", "centermap_size", "\n", "self", ".", "max_person", "=", "args", "(", ")", ".", "max_person", "\n", "self", ".", "shrink_scale", "=", "float", "(", "args", "(", ")", ".", "input_size", "//", "self", ".", "size", ")", "\n", "self", ".", "dims", "=", "1", "\n", "self", ".", "sigma", "=", "1", "\n", "self", ".", "conf_thresh", "=", "args", "(", ")", ".", "centermap_conf_thresh", "\n", "self", ".", "gk_group", ",", "self", ".", "pool_group", "=", "self", ".", "generate_kernels", "(", "args", "(", ")", ".", "kernel_sizes", ")", "\n", "if", "args", "(", ")", ".", "model_version", ">", "4", ":", "\n", "            ", "self", ".", "prepare_parsing", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.prepare_parsing": [[22, 25], ["centermap.get_3Dcoord_maps", "torch.nn.MaxPool3d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.get_3Dcoord_maps"], ["", "", "def", "prepare_parsing", "(", "self", ")", ":", "\n", "        ", "self", ".", "coordmap_3d", "=", "get_3Dcoord_maps", "(", "size", "=", "self", ".", "size", ")", "\n", "self", ".", "maxpool3d", "=", "torch", ".", "nn", ".", "MaxPool3d", "(", "5", ",", "1", ",", "(", "5", "-", "1", ")", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_kernels": [[26, 36], ["set", "numpy.arange", "numpy.exp", "torch.nn.MaxPool2d"], "methods", ["None"], ["", "def", "generate_kernels", "(", "self", ",", "kernel_size_list", ")", ":", "\n", "        ", "gk_group", ",", "pool_group", "=", "{", "}", ",", "{", "}", "\n", "for", "kernel_size", "in", "set", "(", "kernel_size_list", ")", ":", "\n", "            ", "x", "=", "np", ".", "arange", "(", "0", ",", "kernel_size", ",", "1", ",", "float", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", ",", "y0", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "gaussian_distribution", "=", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", "\n", "gk_group", "[", "kernel_size", "]", "=", "np", ".", "exp", "(", "gaussian_distribution", ")", "\n", "pool_group", "[", "kernel_size", "]", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", ",", "1", ",", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "\n", "", "return", "gk_group", ",", "pool_group", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.process_gt_CAM": [[37, 45], ["torch.where"], "methods", ["None"], ["", "def", "process_gt_CAM", "(", "self", ",", "center_normed", ")", ":", "\n", "        ", "center_list", "=", "[", "]", "\n", "valid_mask", "=", "center_normed", "[", ":", ",", ":", ",", "0", "]", ">", "-", "1", "\n", "valid_inds", "=", "torch", ".", "where", "(", "valid_mask", ")", "\n", "valid_batch_inds", ",", "valid_person_ids", "=", "valid_inds", "[", "0", "]", ",", "valid_inds", "[", "1", "]", "\n", "center_gt", "=", "(", "(", "center_normed", "+", "1", ")", "/", "2", "*", "self", ".", "size", ")", ".", "long", "(", ")", "\n", "center_gt_valid", "=", "center_gt", "[", "valid_mask", "]", "\n", "return", "(", "valid_batch_inds", ",", "valid_person_ids", ",", "center_gt_valid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap": [[46, 53], ["centermap.CenterMap.generate_centermap_heatmap", "centermap.CenterMap.generate_centermap_heatmap_adaptive_scale"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap_heatmap", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap_heatmap_adaptive_scale"], ["", "def", "generate_centermap", "(", "self", ",", "center_locs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "style", "==", "'heatmap'", ":", "\n", "            ", "return", "self", ".", "generate_centermap_heatmap", "(", "center_locs", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "style", "==", "'heatmap_adaptive_scale'", ":", "\n", "            ", "return", "self", ".", "generate_centermap_heatmap_adaptive_scale", "(", "center_locs", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap": [[54, 61], ["centermap.CenterMap.parse_centermap_heatmap_adaptive_scale_batch", "centermap.CenterMap.parse_3dcentermap_heatmap_adaptive_scale_batch"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap_heatmap_adaptive_scale_batch", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_3dcentermap_heatmap_adaptive_scale_batch"], ["", "", "def", "parse_centermap", "(", "self", ",", "center_map", ")", ":", "\n", "        ", "if", "self", ".", "style", "==", "'heatmap_adaptive_scale'", "and", "center_map", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "return", "self", ".", "parse_centermap_heatmap_adaptive_scale_batch", "(", "center_map", ")", "\n", "", "elif", "self", ".", "style", "==", "'heatmap_adaptive_scale'", "and", "center_map", ".", "shape", "[", "1", "]", "==", "self", ".", "size", ":", "\n", "            ", "return", "self", ".", "parse_3dcentermap_heatmap_adaptive_scale_batch", "(", "center_map", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap_mask": [[62, 70], ["numpy.ones"], "methods", ["None"], ["", "", "def", "generate_centermap_mask", "(", "self", ",", "center_locs", ")", ":", "\n", "        ", "centermap", "=", "np", ".", "ones", "(", "(", "self", ".", "dims", ",", "self", ".", "size", ",", "self", ".", "size", ")", ")", "\n", "centermap", "[", "-", "1", "]", "=", "0", "\n", "for", "center_loc", "in", "center_locs", ":", "\n", "            ", "map_coord", "=", "(", "(", "center_loc", "+", "1", ")", "/", "2", "*", "self", ".", "size", ")", ".", "astype", "(", "np", ".", "int", ")", "-", "1", "\n", "centermap", "[", "0", ",", "map_coord", "[", "0", "]", ",", "map_coord", "[", "1", "]", "]", "=", "0", "\n", "centermap", "[", "1", ",", "map_coord", "[", "0", "]", ",", "map_coord", "[", "1", "]", "]", "=", "1", "\n", "", "return", "centermap", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap_heatmap": [[71, 91], ["numpy.zeros", "enumerate", "numpy.maximum", "int", "int", "int", "int", "int", "int", "max", "max", "max", "min", "max", "min", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "min", "min"], "methods", ["None"], ["", "def", "generate_centermap_heatmap", "(", "self", ",", "center_locs", ",", "kernel_size", "=", "5", ",", "**", "kwargs", ")", ":", "\n", "        ", "hms", "=", "np", ".", "zeros", "(", "(", "self", ".", "dims", ",", "self", ".", "size", ",", "self", ".", "size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "offset", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "for", "idx", ",", "pt", "in", "enumerate", "(", "center_locs", ")", ":", "\n", "            ", "x", ",", "y", "=", "int", "(", "(", "pt", "[", "0", "]", "+", "1", ")", "/", "2", "*", "self", ".", "size", ")", ",", "int", "(", "(", "pt", "[", "1", "]", "+", "1", ")", "/", "2", "*", "self", ".", "size", ")", "\n", "if", "x", "<", "0", "or", "y", "<", "0", "or", "x", ">=", "self", ".", "size", "or", "y", ">=", "self", ".", "size", ":", "\n", "                ", "continue", "\n", "\n", "", "ul", "=", "int", "(", "np", ".", "round", "(", "x", "-", "offset", ")", ")", ",", "int", "(", "np", ".", "round", "(", "y", "-", "offset", ")", ")", "\n", "br", "=", "int", "(", "np", ".", "round", "(", "x", "+", "offset", "+", "1", ")", ")", ",", "int", "(", "np", ".", "round", "(", "y", "+", "offset", "+", "1", ")", ")", "\n", "\n", "c", ",", "d", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "self", ".", "size", ")", "-", "ul", "[", "0", "]", "\n", "a", ",", "b", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "self", ".", "size", ")", "-", "ul", "[", "1", "]", "\n", "\n", "cc", ",", "dd", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "self", ".", "size", ")", "\n", "aa", ",", "bb", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "self", ".", "size", ")", "\n", "hms", "[", "0", ",", "aa", ":", "bb", ",", "cc", ":", "dd", "]", "=", "np", ".", "maximum", "(", "\n", "hms", "[", "0", ",", "aa", ":", "bb", ",", "cc", ":", "dd", "]", ",", "self", ".", "gk_group", "[", "kernel_size", "]", "[", "a", ":", "b", ",", "c", ":", "d", "]", ")", "\n", "", "return", "hms", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap_heatmap_adaptive_scale": [[92, 119], ["centermap._calc_radius_", "centermap.CenterMap.generate_heatmap_adaptive_scale", "torch.from_numpy", "enumerate", "numpy.clip", "config.args", "numpy.sqrt", "numpy.abs", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap._calc_radius_", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_heatmap_adaptive_scale", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "generate_centermap_heatmap_adaptive_scale", "(", "self", ",", "center_locs", ",", "bboxes_hw_norm", ",", "occluded_by_who", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n           center_locs is in the order of (y,x), corresponding to (w,h), while in the loading data, we have rectified it to the correct (x, y) order\n        '''", "\n", "radius_list", "=", "_calc_radius_", "(", "bboxes_hw_norm", ",", "map_size", "=", "self", ".", "size", ")", "\n", "\n", "if", "args", "(", ")", ".", "collision_aware_centermap", "and", "occluded_by_who", "is", "not", "None", ":", "\n", "# CAR : Collision-Aware Represenation", "\n", "            ", "for", "cur_idx", ",", "occluded_idx", "in", "enumerate", "(", "occluded_by_who", ")", ":", "\n", "                ", "if", "occluded_idx", ">", "-", "1", ":", "\n", "                    ", "dist_onmap", "=", "np", ".", "sqrt", "(", "(", "(", "center_locs", "[", "occluded_idx", "]", "-", "center_locs", "[", "cur_idx", "]", ")", "**", "2", ")", ".", "sum", "(", ")", ")", "+", "1e-4", "\n", "least_dist", "=", "(", "radius_list", "[", "occluded_idx", "]", "+", "radius_list", "[", "cur_idx", "]", "+", "1", ")", "/", "self", ".", "size", "*", "2", "\n", "if", "dist_onmap", "<", "least_dist", ":", "\n", "                        ", "offset", "=", "np", ".", "abs", "(", "(", "(", "radius_list", "[", "occluded_idx", "]", "+", "radius_list", "[", "cur_idx", "]", "+", "1", ")", "/", "self", ".", "size", "*", "2", "-", "dist_onmap", ")", "/", "dist_onmap", ")", "*", "(", "center_locs", "[", "occluded_idx", "]", "-", "center_locs", "[", "cur_idx", "]", "+", "1e-4", ")", "*", "args", "(", ")", ".", "collision_factor", "\n", "\n", "center_locs", "[", "cur_idx", "]", "-=", "offset", "/", "2", "\n", "center_locs", "[", "occluded_idx", "]", "+=", "offset", "/", "2", "\n", "\n", "# restrcit the range from -1 to 1", "\n", "", "", "", "center_locs", "=", "np", ".", "clip", "(", "center_locs", ",", "-", "1", ",", "1", ")", "\n", "center_locs", "[", "center_locs", "==", "-", "1", "]", "=", "-", "0.96", "\n", "center_locs", "[", "center_locs", "==", "1", "]", "=", "0.96", "\n", "\n", "", "heatmap", "=", "self", ".", "generate_heatmap_adaptive_scale", "(", "center_locs", ",", "radius_list", ")", "\n", "heatmap", "=", "torch", ".", "from_numpy", "(", "heatmap", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_heatmap_adaptive_scale": [[120, 140], ["numpy.zeros", "zip", "centermap.gaussian2D", "int", "int", "min", "min", "min", "min", "numpy.maximum", "min", "min", "float"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.gaussian2D"], ["", "def", "generate_heatmap_adaptive_scale", "(", "self", ",", "center_locs", ",", "radius_list", ",", "k", "=", "1", ")", ":", "\n", "        ", "heatmap", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "size", ",", "self", ".", "size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "center", ",", "radius", "in", "zip", "(", "center_locs", ",", "radius_list", ")", ":", "\n", "            ", "diameter", "=", "2", "*", "radius", "+", "1", "\n", "gaussian", "=", "gaussian2D", "(", "(", "diameter", ",", "diameter", ")", ",", "sigma", "=", "float", "(", "diameter", ")", "/", "6", ")", "\n", "\n", "x", ",", "y", "=", "int", "(", "(", "center", "[", "0", "]", "+", "1", ")", "/", "2", "*", "self", ".", "size", ")", ",", "int", "(", "(", "center", "[", "1", "]", "+", "1", ")", "/", "2", "*", "self", ".", "size", ")", "\n", "if", "x", "<", "0", "or", "y", "<", "0", "or", "x", ">=", "self", ".", "size", "or", "y", ">=", "self", ".", "size", ":", "\n", "                ", "continue", "\n", "", "height", ",", "width", "=", "heatmap", ".", "shape", "[", "1", ":", "]", "\n", "\n", "left", ",", "right", "=", "min", "(", "x", ",", "radius", ")", ",", "min", "(", "width", "-", "x", ",", "radius", "+", "1", ")", "\n", "top", ",", "bottom", "=", "min", "(", "y", ",", "radius", ")", ",", "min", "(", "height", "-", "y", ",", "radius", "+", "1", ")", "\n", "\n", "masked_heatmap", "=", "heatmap", "[", "0", ",", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_gaussian", "=", "gaussian", "[", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "if", "min", "(", "masked_gaussian", ".", "shape", ")", ">", "0", "and", "min", "(", "masked_heatmap", ".", "shape", ")", ">", "0", ":", "# TODO debug", "\n", "                ", "np", ".", "maximum", "(", "masked_heatmap", ",", "masked_gaussian", "*", "k", ",", "out", "=", "masked_heatmap", ")", "\n", "", "heatmap", "[", "0", ",", "y", ",", "x", "]", "=", "1", "\n", "", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap_3dheatmap_adaptive_scale_batch": [[141, 169], ["torch.zeros", "enumerate", "int", "enumerate", "len", "int", "centermap.gaussian3D", "int", "int", "int", "int", "int", "int", "int", "int", "int", "torch.max", "max", "max", "max", "min", "min", "min", "torch.cat", "float", "tuple", "heatmap[].unsqueeze", "gaussian_patch[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.gaussian3D"], ["", "def", "generate_centermap_3dheatmap_adaptive_scale_batch", "(", "self", ",", "batch_center_locs", ",", "radius", "=", "3", ",", "depth_num", "=", "None", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "        ", "if", "depth_num", "is", "None", ":", "\n", "            ", "depth_num", "=", "int", "(", "self", ".", "size", "//", "2", ")", "\n", "", "heatmap", "=", "torch", ".", "zeros", "(", "(", "len", "(", "batch_center_locs", ")", ",", "depth_num", ",", "self", ".", "size", ",", "self", ".", "size", ")", ",", "device", "=", "device", ")", "\n", "\n", "for", "bid", ",", "center_locs", "in", "enumerate", "(", "batch_center_locs", ")", ":", "\n", "            ", "for", "cid", ",", "center", "in", "enumerate", "(", "center_locs", ")", ":", "\n", "                ", "diameter", "=", "int", "(", "2", "*", "radius", "+", "1", ")", "\n", "gaussian_patch", "=", "gaussian3D", "(", "w", "=", "diameter", ",", "h", "=", "diameter", ",", "d", "=", "diameter", ",", "center", "=", "(", "diameter", "//", "2", ",", "diameter", "//", "2", ",", "diameter", "//", "2", ")", ",", "s", "=", "float", "(", "diameter", ")", "/", "6", ",", "device", "=", "device", ")", "\n", "\n", "xa", ",", "ya", ",", "za", "=", "int", "(", "max", "(", "0", ",", "center", "[", "0", "]", "-", "diameter", "//", "2", ")", ")", ",", "int", "(", "max", "(", "0", ",", "center", "[", "1", "]", "-", "diameter", "//", "2", ")", ")", ",", "int", "(", "max", "(", "0", ",", "center", "[", "2", "]", "-", "diameter", "//", "2", ")", ")", "\n", "xb", ",", "yb", ",", "zb", "=", "int", "(", "min", "(", "center", "[", "0", "]", "+", "diameter", "//", "2", ",", "self", ".", "size", "-", "1", ")", ")", ",", "int", "(", "min", "(", "center", "[", "1", "]", "+", "diameter", "//", "2", ",", "self", ".", "size", "-", "1", ")", ")", ",", "int", "(", "min", "(", "center", "[", "2", "]", "+", "diameter", "//", "2", ",", "depth_num", "-", "1", ")", ")", "\n", "\n", "gxa", "=", "xa", "-", "int", "(", "center", "[", "0", "]", "-", "diameter", "//", "2", ")", "\n", "gya", "=", "ya", "-", "int", "(", "center", "[", "1", "]", "-", "diameter", "//", "2", ")", "\n", "gza", "=", "za", "-", "int", "(", "center", "[", "2", "]", "-", "diameter", "//", "2", ")", "\n", "\n", "gxb", "=", "xb", "+", "1", "-", "xa", "+", "gxa", "\n", "gyb", "=", "yb", "+", "1", "-", "ya", "+", "gya", "\n", "gzb", "=", "zb", "+", "1", "-", "za", "+", "gza", "\n", "\n", "heatmap", "[", "bid", ",", "za", ":", "zb", "+", "1", ",", "ya", ":", "yb", "+", "1", ",", "xa", ":", "xb", "+", "1", "]", "=", "torch", ".", "max", "(", "\n", "torch", ".", "cat", "(", "tuple", "(", "[", "\n", "heatmap", "[", "bid", ",", "za", ":", "zb", "+", "1", ",", "ya", ":", "yb", "+", "1", ",", "xa", ":", "xb", "+", "1", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "gaussian_patch", "[", "gza", ":", "gzb", ",", "gya", ":", "gyb", ",", "gxa", ":", "gxb", "]", ".", "unsqueeze", "(", "0", ")", "\n", "]", ")", ")", ",", "0", ")", "[", "0", "]", "\n", "", "", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap_3dheatmap_adaptive_scale": [[170, 211], ["torch.zeros().to", "enumerate", "int", "len", "[].astype", "centermap.gaussian3D", "torch.zeros", "numpy.linalg.norm", "int", "int", "int", "int", "int", "int", "int", "int", "int", "torch.max", "max", "max", "max", "min", "min", "min", "torch.cat", "numpy.array", "centermap._calc_uv_radius_", "float", "tuple", "heatmap[].unsqueeze", "gaussian_patch[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.gaussian3D", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap._calc_uv_radius_"], ["", "def", "generate_centermap_3dheatmap_adaptive_scale", "(", "self", ",", "center_locs", ",", "depth_num", "=", "None", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "'''\n        center_locs: center locations (X,Y,Z) on 3D center map (BxDxHxW)\n        '''", "\n", "if", "depth_num", "is", "None", ":", "\n", "            ", "depth_num", "=", "int", "(", "self", ".", "size", "//", "2", ")", "\n", "", "heatmap", "=", "torch", ".", "zeros", "(", "(", "depth_num", ",", "self", ".", "size", ",", "self", ".", "size", ")", ")", ".", "to", "(", "device", ")", "\n", "if", "len", "(", "center_locs", ")", "==", "0", ":", "\n", "            ", "return", "heatmap", ",", "False", "\n", "\n", "", "adaptive_depth_uncertainty", "=", "np", ".", "array", "(", "center_locs", ")", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "float16", ")", "/", "depth_num", "\n", "depth_uncertainty", "=", "(", "(", "4", "+", "adaptive_depth_uncertainty", "*", "4", ")", ".", "astype", "(", "np", ".", "int32", ")", "//", "2", ")", "*", "2", "+", "1", "\n", "\n", "adaptive_image_scale", "=", "(", "1", "-", "adaptive_depth_uncertainty", ")", "/", "2.", "\n", "uv_radius", "=", "(", "_calc_uv_radius_", "(", "adaptive_image_scale", ",", "map_size", "=", "self", ".", "size", ")", "*", "2", "+", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "for", "cid", ",", "center", "in", "enumerate", "(", "center_locs", ")", ":", "\n", "            ", "width", ",", "height", "=", "uv_radius", "[", "cid", "]", ",", "uv_radius", "[", "cid", "]", "\n", "depth", "=", "depth_uncertainty", "[", "cid", "]", "\n", "diameter", "=", "np", ".", "linalg", ".", "norm", "(", "[", "width", "/", "2.", ",", "height", "/", "2.", ",", "depth", "/", "2.", "]", ",", "ord", "=", "2", ",", "axis", "=", "0", ")", "*", "2", "\n", "\n", "gaussian_patch", "=", "gaussian3D", "(", "w", "=", "width", ",", "h", "=", "height", ",", "d", "=", "depth", ",", "center", "=", "(", "width", "//", "2", ",", "height", "//", "2", ",", "depth", "//", "2", ")", ",", "s", "=", "float", "(", "diameter", ")", "/", "6", ",", "device", "=", "device", ")", "\n", "\n", "xa", ",", "ya", ",", "za", "=", "int", "(", "max", "(", "0", ",", "center", "[", "0", "]", "-", "width", "//", "2", ")", ")", ",", "int", "(", "max", "(", "0", ",", "center", "[", "1", "]", "-", "height", "//", "2", ")", ")", ",", "int", "(", "max", "(", "0", ",", "center", "[", "2", "]", "-", "depth", "//", "2", ")", ")", "\n", "xb", ",", "yb", ",", "zb", "=", "int", "(", "min", "(", "center", "[", "0", "]", "+", "width", "//", "2", ",", "self", ".", "size", "-", "1", ")", ")", ",", "int", "(", "min", "(", "center", "[", "1", "]", "+", "height", "//", "2", ",", "self", ".", "size", "-", "1", ")", ")", ",", "int", "(", "min", "(", "center", "[", "2", "]", "+", "depth", "//", "2", ",", "depth_num", "-", "1", ")", ")", "\n", "\n", "gxa", "=", "xa", "-", "int", "(", "center", "[", "0", "]", "-", "width", "//", "2", ")", "\n", "gya", "=", "ya", "-", "int", "(", "center", "[", "1", "]", "-", "height", "//", "2", ")", "\n", "gza", "=", "za", "-", "int", "(", "center", "[", "2", "]", "-", "depth", "//", "2", ")", "\n", "\n", "gxb", "=", "xb", "+", "1", "-", "xa", "+", "gxa", "\n", "gyb", "=", "yb", "+", "1", "-", "ya", "+", "gya", "\n", "gzb", "=", "zb", "+", "1", "-", "za", "+", "gza", "\n", "\n", "heatmap", "[", "za", ":", "zb", "+", "1", ",", "ya", ":", "yb", "+", "1", ",", "xa", ":", "xb", "+", "1", "]", "=", "torch", ".", "max", "(", "\n", "torch", ".", "cat", "(", "tuple", "(", "[", "\n", "heatmap", "[", "za", ":", "zb", "+", "1", ",", "ya", ":", "yb", "+", "1", ",", "xa", ":", "xb", "+", "1", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "gaussian_patch", "[", "gza", ":", "gzb", ",", "gya", ":", "gyb", ",", "gxa", ":", "gxb", "]", ".", "unsqueeze", "(", "0", ")", "\n", "]", ")", ")", ",", "0", ")", "[", "0", "]", "\n", "", "return", "heatmap", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap_3dheatmap_adaptive_scale_org": [[212, 246], ["torch.zeros().to", "enumerate", "int", "len", "int", "centermap.gaussian3D", "torch.zeros", "int", "int", "int", "int", "int", "int", "int", "int", "int", "torch.max", "max", "max", "max", "min", "min", "min", "torch.cat", "float", "tuple", "heatmap[].unsqueeze", "gaussian_patch[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.gaussian3D"], ["", "def", "generate_centermap_3dheatmap_adaptive_scale_org", "(", "self", ",", "center_locs", ",", "radius", "=", "3", ",", "depth_num", "=", "None", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "'''\n        center_locs: center locations (X,Y,Z) on 3D center map (BxDxHxW)\n        '''", "\n", "if", "depth_num", "is", "None", ":", "\n", "            ", "depth_num", "=", "int", "(", "self", ".", "size", "//", "2", ")", "\n", "", "heatmap", "=", "torch", ".", "zeros", "(", "(", "depth_num", ",", "self", ".", "size", ",", "self", ".", "size", ")", ")", ".", "to", "(", "device", ")", "\n", "if", "len", "(", "center_locs", ")", "==", "0", ":", "\n", "            ", "return", "heatmap", ",", "False", "\n", "\n", "", "for", "cid", ",", "center", "in", "enumerate", "(", "center_locs", ")", ":", "\n", "\n", "            ", "diameter", "=", "int", "(", "2", "*", "radius", "+", "1", ")", "\n", "\n", "gaussian_patch", "=", "gaussian3D", "(", "w", "=", "diameter", ",", "h", "=", "diameter", ",", "d", "=", "diameter", ",", "center", "=", "(", "diameter", "//", "2", ",", "diameter", "//", "2", ",", "diameter", "//", "2", ")", ",", "s", "=", "float", "(", "diameter", ")", "/", "6", ",", "device", "=", "device", ")", "\n", "\n", "xa", ",", "ya", ",", "za", "=", "int", "(", "max", "(", "0", ",", "center", "[", "0", "]", "-", "diameter", "//", "2", ")", ")", ",", "int", "(", "max", "(", "0", ",", "center", "[", "1", "]", "-", "diameter", "//", "2", ")", ")", ",", "int", "(", "max", "(", "0", ",", "center", "[", "2", "]", "-", "diameter", "//", "2", ")", ")", "\n", "xb", ",", "yb", ",", "zb", "=", "int", "(", "min", "(", "center", "[", "0", "]", "+", "diameter", "//", "2", ",", "self", ".", "size", "-", "1", ")", ")", ",", "int", "(", "min", "(", "center", "[", "1", "]", "+", "diameter", "//", "2", ",", "self", ".", "size", "-", "1", ")", ")", ",", "int", "(", "min", "(", "center", "[", "2", "]", "+", "diameter", "//", "2", ",", "depth_num", "-", "1", ")", ")", "\n", "\n", "gxa", "=", "xa", "-", "int", "(", "center", "[", "0", "]", "-", "diameter", "//", "2", ")", "\n", "gya", "=", "ya", "-", "int", "(", "center", "[", "1", "]", "-", "diameter", "//", "2", ")", "\n", "gza", "=", "za", "-", "int", "(", "center", "[", "2", "]", "-", "diameter", "//", "2", ")", "\n", "\n", "gxb", "=", "xb", "+", "1", "-", "xa", "+", "gxa", "\n", "gyb", "=", "yb", "+", "1", "-", "ya", "+", "gya", "\n", "gzb", "=", "zb", "+", "1", "-", "za", "+", "gza", "\n", "\n", "heatmap", "[", "za", ":", "zb", "+", "1", ",", "ya", ":", "yb", "+", "1", ",", "xa", ":", "xb", "+", "1", "]", "=", "torch", ".", "max", "(", "\n", "torch", ".", "cat", "(", "tuple", "(", "[", "\n", "heatmap", "[", "za", ":", "zb", "+", "1", ",", "ya", ":", "yb", "+", "1", ",", "xa", ":", "xb", "+", "1", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "gaussian_patch", "[", "gza", ":", "gzb", ",", "gya", ":", "gyb", ",", "gxa", ":", "gxb", "]", ".", "unsqueeze", "(", "0", ")", "\n", "]", ")", ")", ",", "0", ")", "[", "0", "]", "\n", "", "return", "heatmap", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.multi_channel_nms": [[248, 255], ["enumerate", "center_map_pooled.append", "torch.max", "centermap.nms", "centermap.nms", "torch.cat", "config.args", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "multi_channel_nms", "(", "self", ",", "center_maps", ")", ":", "\n", "        ", "center_map_pooled", "=", "[", "]", "\n", "for", "depth_idx", ",", "center_map", "in", "enumerate", "(", "center_maps", ")", ":", "\n", "            ", "center_map_pooled", ".", "append", "(", "nms", "(", "center_map", "[", "None", "]", ",", "pool_func", "=", "self", ".", "pool_group", "[", "args", "(", ")", ".", "kernel_sizes", "[", "depth_idx", "]", "]", ")", ")", "\n", "", "center_maps_max", "=", "torch", ".", "max", "(", "torch", ".", "cat", "(", "center_map_pooled", ",", "0", ")", ",", "0", ")", ".", "values", "\n", "center_map_nms", "=", "nms", "(", "center_maps_max", "[", "None", "]", ",", "pool_func", "=", "self", ".", "pool_group", "[", "args", "(", ")", ".", "kernel_sizes", "[", "-", "1", "]", "]", ")", "[", "0", "]", "\n", "return", "center_map_nms", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap_mask": [[256, 260], ["torch.argmax().bool", "torch.stack().transpose", "torch.argmax", "torch.stack", "torch.where"], "methods", ["None"], ["", "def", "parse_centermap_mask", "(", "self", ",", "center_map", ")", ":", "\n", "        ", "center_map_bool", "=", "torch", ".", "argmax", "(", "center_map", ",", "1", ")", ".", "bool", "(", ")", "\n", "center_idx", "=", "torch", ".", "stack", "(", "torch", ".", "where", "(", "center_map_bool", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "return", "center_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap_heatmap": [[261, 275], ["center_map_nms.view.CenterMap.view", "centermap.CenterMap.view.topk", "torch.stack", "center_map_nms.view.CenterMap.multi_channel_nms", "centermap.nms", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.multi_channel_nms", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "parse_centermap_heatmap", "(", "self", ",", "center_maps", ")", ":", "\n", "        ", "if", "center_maps", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "center_map_nms", "=", "self", ".", "multi_channel_nms", "(", "center_maps", ")", "\n", "", "else", ":", "\n", "            ", "center_map_nms", "=", "nms", "(", "center_maps", ",", "pool_func", "=", "self", ".", "pool_group", "[", "args", "(", ")", ".", "kernel_sizes", "[", "-", "1", "]", "]", ")", "[", "0", "]", "\n", "", "h", ",", "w", "=", "center_map_nms", ".", "shape", "\n", "\n", "centermap", "=", "center_map_nms", ".", "view", "(", "-", "1", ")", "\n", "confidence", ",", "index", "=", "centermap", ".", "topk", "(", "self", ".", "max_person", ")", "\n", "x", "=", "index", "%", "w", "\n", "y", "=", "(", "index", "/", "w", ")", ".", "long", "(", ")", "\n", "idx_topk", "=", "torch", ".", "stack", "(", "(", "y", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "center_preds", ",", "conf_pred", "=", "idx_topk", "[", "confidence", ">", "self", ".", "conf_thresh", "]", ",", "confidence", "[", "confidence", ">", "self", ".", "conf_thresh", "]", "\n", "return", "center_preds", ",", "conf_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap_heatmap_adaptive_scale": [[276, 287], ["center_map_nms.view", "center_map_nms.view.topk", "torch.stack", "centermap.nms", "float", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "parse_centermap_heatmap_adaptive_scale", "(", "self", ",", "center_maps", ")", ":", "\n", "        ", "center_map_nms", "=", "nms", "(", "center_maps", ",", "pool_func", "=", "self", ".", "pool_group", "[", "args", "(", ")", ".", "kernel_sizes", "[", "-", "1", "]", "]", ")", "[", "0", "]", "\n", "h", ",", "w", "=", "center_map_nms", ".", "shape", "\n", "\n", "centermap", "=", "center_map_nms", ".", "view", "(", "-", "1", ")", "\n", "confidence", ",", "index", "=", "centermap", ".", "topk", "(", "self", ".", "max_person", ")", "\n", "x", "=", "index", "%", "w", "\n", "y", "=", "(", "index", "/", "float", "(", "w", ")", ")", ".", "long", "(", ")", "\n", "idx_topk", "=", "torch", ".", "stack", "(", "(", "y", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "center_preds", ",", "conf_pred", "=", "idx_topk", "[", "confidence", ">", "self", ".", "conf_thresh", "]", ",", "confidence", "[", "confidence", ">", "self", ".", "conf_thresh", "]", "\n", "return", "center_preds", ",", "conf_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap_heatmap_adaptive_scale_batch": [[288, 313], ["centermap.nms", "torch.topk", "torch.div().float", "torch.topk", "torch.div", "gather_feature().reshape", "gather_feature().reshape", "gather_feature().reshape", "torch.stack().permute", "nms.reshape", "topk_scores.reshape", "index.long", "torch.where", "torch.div", "centermap.gather_feature", "centermap.gather_feature", "centermap.gather_feature", "torch.stack", "gather_feature().reshape.long", "gather_feature().reshape.view", "gather_feature().reshape.reshape", "gather_feature().reshape.reshape", "config.args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "parse_centermap_heatmap_adaptive_scale_batch", "(", "self", ",", "center_maps", ",", "top_n_people", "=", "None", ")", ":", "\n", "        ", "center_map_nms", "=", "nms", "(", "center_maps", ",", "pool_func", "=", "self", ".", "pool_group", "[", "args", "(", ")", ".", "kernel_sizes", "[", "-", "1", "]", "]", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "center_map_nms", ".", "shape", "\n", "K", "=", "self", ".", "max_person", "if", "top_n_people", "is", "None", "else", "top_n_people", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "center_map_nms", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", ",", "K", ")", "\n", "topk_inds", "=", "topk_inds", "%", "(", "h", "*", "w", ")", "\n", "topk_ys", "=", "torch", ".", "div", "(", "topk_inds", ".", "long", "(", ")", ",", "w", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "w", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "# get all topk in in a batch", "\n", "topk_score", ",", "index", "=", "torch", ".", "topk", "(", "topk_scores", ".", "reshape", "(", "b", ",", "-", "1", ")", ",", "K", ")", "\n", "# div by K because index is grouped by K(C x K shape)", "\n", "topk_clses", "=", "torch", ".", "div", "(", "index", ".", "long", "(", ")", ",", "K", ")", "\n", "topk_inds", "=", "gather_feature", "(", "topk_inds", ".", "view", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "topk_ys", "=", "gather_feature", "(", "topk_ys", ".", "reshape", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "topk_xs", "=", "gather_feature", "(", "topk_xs", ".", "reshape", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "\n", "if", "top_n_people", "is", "not", "None", ":", "\n", "            ", "mask", "=", "topk_score", ">", "0", "\n", "mask", "[", ":", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "mask", "=", "topk_score", ">", "self", ".", "conf_thresh", "\n", "", "batch_ids", "=", "torch", ".", "where", "(", "mask", ")", "[", "0", "]", "\n", "center_yxs", "=", "torch", ".", "stack", "(", "[", "topk_ys", "[", "mask", "]", ",", "topk_xs", "[", "mask", "]", "]", ")", ".", "permute", "(", "(", "1", ",", "0", ")", ")", "\n", "return", "batch_ids", ",", "topk_inds", "[", "mask", "]", ",", "center_yxs", ",", "topk_score", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_3dcentermap_heatmap_adaptive_scale_batch": [[314, 342], ["nms().squeeze", "torch.topk", "torch.div().float", "torch.topk", "gather_feature().reshape", "torch.div", "gather_feature().reshape", "gather_feature().reshape", "torch.stack().permute().long", "nms().squeeze.reshape", "topk_scores.reshape", "index.long", "torch.where", "centermap.nms", "torch.div", "centermap.gather_feature", "centermap.gather_feature", "centermap.gather_feature", "torch.stack().permute", "gather_feature().reshape.long", "gather_feature().reshape.view", "gather_feature().reshape.reshape", "gather_feature().reshape.reshape", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature"], ["", "def", "parse_3dcentermap_heatmap_adaptive_scale_batch", "(", "self", ",", "center_maps", ",", "top_n_people", "=", "None", ")", ":", "\n", "        ", "center_map_nms", "=", "nms", "(", "center_maps", ",", "pool_func", "=", "self", ".", "maxpool3d", ")", ".", "squeeze", "(", "1", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "center_map_nms", ".", "shape", "\n", "\n", "K", "=", "self", ".", "max_person", "if", "top_n_people", "is", "None", "else", "top_n_people", "\n", "\n", "# acquire top k value/index at each depth", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "center_map_nms", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", ",", "K", ")", "\n", "topk_inds", "=", "topk_inds", "%", "(", "h", "*", "w", ")", "\n", "topk_ys", "=", "torch", ".", "div", "(", "topk_inds", ".", "long", "(", ")", ",", "w", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "w", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "# get all topk in in a batch", "\n", "topk_score", ",", "index", "=", "torch", ".", "topk", "(", "topk_scores", ".", "reshape", "(", "b", ",", "-", "1", ")", ",", "K", ")", "\n", "topk_inds", "=", "gather_feature", "(", "topk_inds", ".", "view", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "# div by K because index is grouped by K(C x K shape)", "\n", "topk_zs", "=", "torch", ".", "div", "(", "index", ".", "long", "(", ")", ",", "K", ")", "\n", "topk_ys", "=", "gather_feature", "(", "topk_ys", ".", "reshape", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "topk_xs", "=", "gather_feature", "(", "topk_xs", ".", "reshape", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "\n", "if", "top_n_people", "is", "not", "None", ":", "\n", "            ", "mask", "=", "topk_score", ">", "0", "\n", "mask", "[", ":", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "mask", "=", "topk_score", ">", "self", ".", "conf_thresh", "\n", "", "batch_ids", "=", "torch", ".", "where", "(", "mask", ")", "[", "0", "]", "\n", "center_zyxs", "=", "torch", ".", "stack", "(", "[", "topk_zs", "[", "mask", "]", ",", "topk_ys", "[", "mask", "]", ",", "topk_xs", "[", "mask", "]", "]", ")", ".", "permute", "(", "(", "1", ",", "0", ")", ")", ".", "long", "(", ")", "\n", "\n", "return", "[", "batch_ids", ",", "center_zyxs", ",", "topk_score", "[", "mask", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.get_3Dcoord_maps": [[344, 355], ["torch.arange", "torch.cat", "z_base.reshape().repeat", "z_base.reshape", "torch.arange.reshape().repeat", "torch.arange.reshape().repeat", "torch.arange.reshape().repeat", "torch.arange.reshape", "torch.arange.reshape", "torch.arange.reshape"], "function", ["None"], ["", "", "def", "get_3Dcoord_maps", "(", "size", "=", "128", ",", "z_base", "=", "None", ")", ":", "\n", "    ", "range_arr", "=", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "z_base", "is", "None", ":", "\n", "        ", "Z_map", "=", "range_arr", ".", "reshape", "(", "1", ",", "size", ",", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "size", ",", "size", ",", "1", ")", "/", "size", "*", "2", "-", "1", "\n", "", "else", ":", "\n", "        ", "Z_map", "=", "z_base", ".", "reshape", "(", "1", ",", "size", ",", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "size", ",", "size", ",", "1", ")", "\n", "", "Y_map", "=", "range_arr", ".", "reshape", "(", "1", ",", "1", ",", "size", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "size", ",", "1", ",", "size", ",", "1", ")", "/", "size", "*", "2", "-", "1", "\n", "X_map", "=", "range_arr", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "size", ",", "1", ")", ".", "repeat", "(", "1", ",", "size", ",", "size", ",", "1", ",", "1", ")", "/", "size", "*", "2", "-", "1", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "Z_map", ",", "Y_map", ",", "X_map", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.nms": [[356, 361], ["pool_func", "torch.eq().float", "torch.eq"], "function", ["None"], ["", "def", "nms", "(", "det", ",", "pool_func", "=", "None", ")", ":", "\n", "    ", "maxm", "=", "pool_func", "(", "det", ")", "\n", "maxm", "=", "torch", ".", "eq", "(", "maxm", ",", "det", ")", ".", "float", "(", ")", "\n", "det", "=", "det", "*", "maxm", "\n", "return", "det", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap._calc_radius_": [[362, 370], ["numpy.linalg.norm", "len", "numpy.array"], "function", ["None"], ["", "def", "_calc_radius_", "(", "bboxes_hw_norm", ",", "map_size", "=", "64", ")", ":", "\n", "    ", "if", "len", "(", "bboxes_hw_norm", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "minimum_radius", "=", "map_size", "/", "32.", "\n", "scale_factor", "=", "map_size", "/", "16.", "\n", "scales", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "bboxes_hw_norm", ")", "/", "2", ",", "ord", "=", "2", ",", "axis", "=", "1", ")", "\n", "radius", "=", "(", "scales", "*", "scale_factor", "+", "minimum_radius", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap._calc_uv_radius_": [[371, 376], ["None"], "function", ["None"], ["", "def", "_calc_uv_radius_", "(", "scales", ",", "map_size", "=", "64", ")", ":", "\n", "    ", "minimum_radius", "=", "map_size", "/", "32.", "\n", "scale_factor", "=", "map_size", "/", "16.", "\n", "radius", "=", "(", "scales", "*", "scale_factor", "+", "minimum_radius", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.gather_feature": [[377, 391], ["fmap.reshape.size", "index.unsqueeze().expand.unsqueeze().expand", "fmap.reshape.gather", "fmap.reshape.view().permute().contiguous", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "fmap.reshape.reshape", "index.unsqueeze().expand.unsqueeze", "fmap.reshape.view().permute", "len", "mask.unsqueeze().expand_as.unsqueeze", "fmap.reshape.view"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.gather"], ["", "def", "gather_feature", "(", "fmap", ",", "index", ",", "mask", "=", "None", ",", "use_transform", "=", "False", ")", ":", "\n", "    ", "if", "use_transform", ":", "\n", "# change a (N, C, H, W) tenor to (N, HxW, C) shape", "\n", "        ", "batch", ",", "channel", "=", "fmap", ".", "shape", "[", ":", "2", "]", "\n", "fmap", "=", "fmap", ".", "view", "(", "batch", ",", "channel", ",", "-", "1", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "dim", "=", "fmap", ".", "size", "(", "-", "1", ")", "\n", "index", "=", "index", ".", "unsqueeze", "(", "len", "(", "index", ".", "shape", ")", ")", ".", "expand", "(", "*", "index", ".", "shape", ",", "dim", ")", "\n", "fmap", "=", "fmap", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "index", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "fmap", ")", "\n", "fmap", "=", "fmap", "[", "mask", "]", "\n", "fmap", "=", "fmap", ".", "reshape", "(", "-", "1", ",", "dim", ")", "\n", "", "return", "fmap", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.gaussian2D": [[392, 399], ["numpy.exp", "np.exp.max", "numpy.finfo"], "function", ["None"], ["", "def", "gaussian2D", "(", "shape", ",", "sigma", "=", "1", ")", ":", "\n", "    ", "m", ",", "n", "=", "[", "(", "ss", "-", "1.", ")", "/", "2.", "for", "ss", "in", "shape", "]", "\n", "y", ",", "x", "=", "np", ".", "ogrid", "[", "-", "m", ":", "m", "+", "1", ",", "-", "n", ":", "n", "+", "1", "]", "\n", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "*", "x", "+", "y", "*", "y", ")", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", "\n", "h", "[", "h", "<", "np", ".", "finfo", "(", "h", ".", "dtype", ")", ".", "eps", "*", "h", ".", "max", "(", ")", "]", "=", "0", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.gaussian3D": [[400, 420], ["torch.arange().float().to", "torch.arange().float().to", "y.unsqueeze.unsqueeze", "torch.arange().float().to", "z.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "torch.exp", "torch.arange().float", "torch.arange().float", "torch.arange().float", "z.unsqueeze().unsqueeze.unsqueeze", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "gaussian3D", "(", "d", ",", "h", ",", "w", ",", "center", ",", "s", "=", "2", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "\"\"\"\n    :param d: hmap depth\n    :param h: hmap height\n    :param w: hmap width\n    :param center: center of the Gaussian | ORDER: (x, y, z)\n    :param s: sigma of the Gaussian\n    :return: heatmap (shape torch.Size([d, h, w])) with a gaussian centered in `center`\n    \"\"\"", "\n", "x", "=", "torch", ".", "arange", "(", "0", ",", "w", ",", "1", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "torch", ".", "arange", "(", "0", ",", "h", ",", "1", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "1", ")", "\n", "z", "=", "torch", ".", "arange", "(", "0", ",", "d", ",", "1", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "z", "=", "z", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "x0", "=", "center", "[", "0", "]", "\n", "y0", "=", "center", "[", "1", "]", "\n", "z0", "=", "center", "[", "2", "]", "\n", "\n", "return", "torch", ".", "exp", "(", "-", "1", "*", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", "+", "(", "z", "-", "z0", ")", "**", "2", ")", "/", "s", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.process_center": [[421, 433], ["torch.stack().transpose", "torch.stack", "torch.argmin", "range", "torch.stack.append", "len", "center_list.append", "torch.stack", "torch.norm", "torch.where", "torch.stack().transpose.float", "center[].float"], "function", ["None"], ["", "def", "process_center", "(", "center_gt", ",", "centermap", ")", ":", "\n", "    ", "center_list", "=", "[", "]", "\n", "center_locs", "=", "torch", ".", "stack", "(", "torch", ".", "where", "(", "centermap", "[", "0", "]", ">", "0.25", ")", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "dists", "=", "[", "]", "\n", "for", "center", "in", "center_gt", ":", "\n", "        ", "dists", ".", "append", "(", "torch", ".", "norm", "(", "center_locs", ".", "float", "(", ")", "-", "center", "[", "None", "]", ".", "float", "(", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "dists", "=", "torch", ".", "stack", "(", "dists", ")", "\n", "assign_id", "=", "torch", ".", "argmin", "(", "dists", ",", "0", ")", "\n", "for", "center_id", "in", "range", "(", "len", "(", "center_gt", ")", ")", ":", "\n", "        ", "center_list", ".", "append", "(", "center_locs", "[", "assign_id", "==", "center_id", "]", ")", "\n", "\n", "", "return", "center_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.print_matrix": [[435, 441], ["print"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "print_matrix", "(", "matrix", ")", ":", "\n", "    ", "for", "k", "in", "matrix", ":", "\n", "        ", "print_item", "=", "''", "\n", "for", "i", "in", "k", ":", "\n", "            ", "print_item", "+=", "'{:.2f} '", ".", "format", "(", "i", ")", "\n", "", "print", "(", "print_item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.test_centermaps": [[443, 463], ["centermap.CenterMap", "numpy.array", "range", "torch.stack().cuda", "centermap.print_matrix", "print", "CenterMap.parse_centermap_heatmap_adaptive_scale_batch", "print", "range", "numpy.array", "numpy.array", "torch.stack().cuda.append", "CenterMap.parse_centermap", "print", "centermap.process_center", "print", "torch.from_numpy", "torch.stack", "CenterMap.generate_centermap"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.print_matrix", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap_heatmap_adaptive_scale_batch", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_centermap", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.process_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap"], ["", "", "def", "test_centermaps", "(", ")", ":", "\n", "    ", "batch_size", "=", "2", "\n", "CM", "=", "CenterMap", "(", ")", "\n", "CM", ".", "size", "=", "16", "\n", "center_locs", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "-", "0.3", ",", "-", "0.7", "]", "]", ")", "\n", "bboxes", "=", "[", "np", ".", "array", "(", "[", "0.2", ",", "0.3", "]", ")", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.4", "]", ")", "]", "\n", "centermaps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "centermaps", ".", "append", "(", "torch", ".", "from_numpy", "(", "CM", ".", "generate_centermap", "(", "center_locs", ",", "bboxes_hw_norm", "=", "bboxes", ")", ")", ")", "\n", "", "centermaps", "=", "torch", ".", "stack", "(", "centermaps", ")", ".", "cuda", "(", ")", "\n", "print_matrix", "(", "centermaps", "[", "0", ",", "0", "]", ")", "\n", "print", "(", "'__'", "*", "10", ")", "\n", "results", "=", "CM", ".", "parse_centermap_heatmap_adaptive_scale_batch", "(", "centermaps", ")", "\n", "print", "(", "results", ")", "\n", "#5CM.print_matrix(torch.nn.functional.softmax(centermap,1)[0])", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "result", "=", "CM", ".", "parse_centermap", "(", "centermaps", "[", "i", "]", ")", "\n", "print", "(", "result", ")", "\n", "center_list", "=", "process_center", "(", "result", "[", "0", "]", ",", "centermaps", "[", "i", "]", ")", "\n", "print", "(", "center_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.visualize_3d_hmap": [[464, 487], ["enumerate", "cv2.destroyAllWindows", "cv2.applyColorMap", "cv2.putText", "cv2.imshow", "cv2.waitKey", "type", "hmap.detach().cpu().numpy.cpu().numpy", "hmap.detach().cpu().numpy.detach().cpu().numpy", "hmap.detach().cpu().numpy.cpu", "hmap.detach().cpu().numpy.detach().cpu", "hmap.detach().cpu().numpy.detach"], "function", ["None"], ["", "", "def", "visualize_3d_hmap", "(", "hmap", ")", ":", "\n", "# type: (Union[np.ndarray, torch.Tensor]) -> None", "\n", "    ", "\"\"\"\n    Interactive visualization of 3D heatmaps.\n    :param hmap: 3D heatmap with values in [0,1] and shape (D, H, W)\n    \"\"\"", "\n", "import", "cv2", "\n", "\n", "if", "not", "(", "type", "(", "hmap", ")", "is", "np", ".", "ndarray", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "hmap", "=", "hmap", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "except", ":", "\n", "            ", "hmap", "=", "hmap", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "hmap", "[", "hmap", "<", "0", "]", "=", "0", "\n", "hmap", "[", "hmap", ">", "1", "]", "=", "1", "\n", "hmap", "=", "(", "hmap", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "d", ",", "x", "in", "enumerate", "(", "hmap", ")", ":", "\n", "        ", "x", "=", "cv2", ".", "applyColorMap", "(", "x", ",", "colormap", "=", "cv2", ".", "COLORMAP_JET", ")", "\n", "x", "=", "cv2", ".", "putText", "(", "x", ",", "f'{d}'", ",", "(", "10", ",", "20", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "(", "255", ",", "128", ",", "128", ")", ",", "2", ",", "cv2", ".", "LINE_AA", ")", "\n", "cv2", ".", "imshow", "(", "f'press ESC to advance in the depth dimension'", ",", "x", ")", "\n", "cv2", ".", "waitKey", "(", ")", "\n", "", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.test_centermaps_3D": [[488, 500], ["centermap.CenterMap", "numpy.array", "torch.from_numpy", "CenterMap.generate_centermap_3dheatmap_adaptive_scale", "print", "CenterMap.parse_3dcentermap_heatmap_adaptive_scale_batch", "print", "config.args", "numpy.array", "numpy.array", "centermap.visualize_3d_hmap"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.generate_centermap_3dheatmap_adaptive_scale", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.CenterMap.parse_3dcentermap_heatmap_adaptive_scale_batch", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.maps_utils.centermap.visualize_3d_hmap"], ["", "def", "test_centermaps_3D", "(", "visualize", "=", "False", ")", ":", "\n", "    ", "args", "(", ")", ".", "model_version", "=", "4", "\n", "CM", "=", "CenterMap", "(", ")", "\n", "center_locs", "=", "np", ".", "array", "(", "[", "[", "0.2", ",", "0.3", ",", "0.4", "]", ",", "[", "-", "0.3", ",", "-", "0.7", ",", "-", "0.5", "]", "]", ")", "\n", "bboxes", "=", "[", "np", ".", "array", "(", "[", "1.2", ",", "1.3", "]", ")", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.4", "]", ")", "]", "\n", "center_locs", "=", "torch", ".", "from_numpy", "(", "center_locs", ")", "\n", "centermap", "=", "CM", ".", "generate_centermap_3dheatmap_adaptive_scale", "(", "center_locs", ",", "bboxes_hw_norm", "=", "bboxes", ")", "\n", "print", "(", "centermap", ".", "shape", ")", "\n", "results", "=", "CM", ".", "parse_3dcentermap_heatmap_adaptive_scale_batch", "(", "centermap", "[", "None", "]", ")", "\n", "print", "(", "results", ")", "\n", "if", "visualize", ":", "\n", "        ", "visualize_3d_hmap", "(", "centermap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.Video_processor.__init__": [[17, 19], ["image.Image_processor.__init__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Video_processor", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.Video_processor.toframe": [[20, 29], ["isinstance", "print", "os.path.splitext", "print", "utils.demo_utils.video2frame"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.video2frame"], ["", "@", "staticmethod", "\n", "def", "toframe", "(", "video_file_path", ")", ":", "\n", "        ", "assert", "isinstance", "(", "video_file_path", ",", "str", ")", ",", "print", "(", "'We expect the input video file path is str, while recieved {}'", ".", "format", "(", "video_file_path", ")", ")", "\n", "video_basename", ",", "video_ext", "=", "os", ".", "path", ".", "splitext", "(", "video_file_path", ")", "\n", "assert", "video_ext", "in", "constants", ".", "video_exts", ",", "print", "(", "'Video format {} is not currently supported, please convert it to the frames by yourself.'", ".", "format", "(", "video_ext", ")", ")", "\n", "frame_list", "=", "video2frame", "(", "video_file_path", ",", "frame_save_dir", "=", "video_basename", "+", "'_frames'", ")", "\n", "return", "video_basename", ",", "frame_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.Video_processor.process_video": [[30, 186], ["torch.no_grad", "os.path.isdir", "print", "os.path.basename", "os.makedirs", "Time_counter", "video.Video_processor._create_single_data_loader", "Time_counter.start", "enumerate", "collect_image_list", "sorted", "os.path.exists", "norfair.Tracker", "Vedo_visualizer", "video.Video_processor.net_forward", "outputs[].cpu().numpy", "Time_counter.count", "video.Video_processor.reorganize_results", "sorted", "Time_counter.start", "results_frames.update", "os.path.join", "print", "np.savez", "len", "os.path.join", "print", "np.savez", "os.path.join", "print", "utils.demo_utils.frames2video", "os.path.join", "print", "utils.demo_utils.frames2video", "video.Video_processor.toframe", "len", "list", "list", "np.unique", "np.array", "enumerate", "video.Video_processor.reorganize_results", "torch.Tensor", "save_result_dict_tonpz", "sorted", "np.array", "Vedo_visualizer.plot_multi_meshes_batch", "video.Video_processor.visualizer.visulize_result", "save_meshes", "print", "len", "sorted", "outputs[].cpu", "os.path.splitext", "results_track.keys", "params_dict_new.keys", "np.argmax", "sorted", "enumerate", "torch.stack().cuda", "autocast", "video.Video_processor.update", "list", "outputs[].cpu().numpy", "show_items_list.append", "zip", "os.path.basename", "np.array", "norfair.Tracker.update", "video.get_tracked_ids", "list", "reorganize_idx_new.append", "img_paths_new.append", "video.Video_processor.model.module._result_parser.params_map_parser.recalc_outputs", "results_track.keys", "poses.append", "video.Video_processor.character_model", "os.path.join", "cv2.imwrite", "save_frame_list.append", "len", "norfair.Detection", "range", "results_track.keys", "utils.temporal_optimization.temporal_optimize_result", "params_dict_new[].append", "torch.stack", "outputs[].cpu", "os.path.basename", "cv2.cvtColor", "np.where", "norfair.Tracker.update", "utils.temporal_optimization.create_OneEuroFilter", "torch.from_numpy", "args", "args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.collect_image_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.net_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.count", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.reorganize_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.frames2video", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.frames2video", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.Video_processor.toframe", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.reorganize_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.save_result_dict_tonpz", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.plot_multi_meshes_batch", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visulize_result", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.save_meshes", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.get_tracked_ids", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.temporal_optimize_result", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.create_OneEuroFilter", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "process_video", "(", "self", ",", "video_file_path", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "video_file_path", ")", ":", "\n", "            ", "frame_list", "=", "collect_image_list", "(", "image_folder", "=", "video_file_path", ",", "collect_subdirs", "=", "False", ",", "img_exts", "=", "constants", ".", "img_exts", ")", "\n", "frame_list", "=", "sorted", "(", "frame_list", ")", "\n", "video_basename", "=", "video_file_path", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "video_file_path", ")", ":", "\n", "            ", "video_basename", ",", "frame_list", "=", "self", ".", "toframe", "(", "video_file_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "(", "'{} not exists!'", ".", "format", "(", "video_file_path", ")", ")", "\n", "", "print", "(", "'Processing {} frames of video {}, saving to {}'", ".", "format", "(", "len", "(", "frame_list", ")", ",", "video_basename", ",", "self", ".", "output_dir", ")", ")", "\n", "video_basename", "=", "os", ".", "path", ".", "basename", "(", "video_basename", ")", "\n", "\n", "os", ".", "makedirs", "(", "self", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "self", ".", "save_visualization_on_img", ":", "\n", "            ", "self", ".", "visualizer", ".", "result_img_dir", "=", "self", ".", "output_dir", "\n", "", "counter", "=", "Time_counter", "(", "thresh", "=", "1", ")", "\n", "\n", "internet_loader", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'internet'", ",", "train_flag", "=", "False", ",", "shuffle", "=", "False", ",", "file_list", "=", "frame_list", ")", "\n", "counter", ".", "start", "(", ")", "\n", "\n", "results_frames", "=", "{", "}", "\n", "save_frame_list", "=", "[", "]", "\n", "results_track_video", "=", "{", "}", "\n", "video_track_ids", "=", "{", "}", "\n", "subjects_motion_sequences", "=", "{", "}", "\n", "\n", "if", "self", ".", "make_tracking", ":", "\n", "#tracker = Tracker()", "\n", "            ", "tracker", "=", "Tracker", "(", "distance_function", "=", "euclidean_distance", ",", "distance_threshold", "=", "30", ")", "\n", "\n", "", "if", "self", ".", "temporal_optimization", ":", "\n", "            ", "filter_dict", "=", "{", "}", "\n", "\n", "", "if", "self", ".", "show_mesh_stand_on_image", ":", "\n", "            ", "from", "visualization", ".", "vedo_visualizer", "import", "Vedo_visualizer", "\n", "visualizer", "=", "Vedo_visualizer", "(", ")", "\n", "stand_on_imgs_frames", "=", "[", "]", "\n", "\n", "", "for", "test_iter", ",", "meta_data", "in", "enumerate", "(", "internet_loader", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "net_forward", "(", "meta_data", ",", "cfg", "=", "self", ".", "demo_cfg", ")", "\n", "reorganize_idx", "=", "outputs", "[", "'reorganize_idx'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "counter", ".", "count", "(", "self", ".", "val_batch_size", ")", "\n", "results", "=", "self", ".", "reorganize_results", "(", "outputs", ",", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", ",", "reorganize_idx", ")", "\n", "\n", "img_paths", "=", "[", "img_path", "for", "img_path", "in", "results", "]", "\n", "results_track", "=", "{", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", ":", "results", "[", "img_path", "]", "for", "img_path", "in", "img_paths", "}", "\n", "for", "frame_id", "in", "sorted", "(", "list", "(", "results_track", ".", "keys", "(", ")", ")", ")", ":", "\n", "                ", "params_dict_new", "=", "{", "'cam'", ":", "[", "]", ",", "'betas'", ":", "[", "]", ",", "'poses'", ":", "[", "]", "}", "\n", "item_names", "=", "list", "(", "params_dict_new", ".", "keys", "(", ")", ")", "\n", "reorganize_idx_uq", "=", "np", ".", "unique", "(", "reorganize_idx", ")", "\n", "to_org_inds", "=", "np", ".", "array", "(", "[", "np", ".", "where", "(", "reorganize_idx", "==", "ind", ")", "[", "0", "]", "[", "0", "]", "for", "ind", "in", "reorganize_idx_uq", "]", ")", "\n", "\n", "if", "self", ".", "show_largest_person_only", ":", "\n", "                    ", "max_id", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "[", "result", "[", "'cam'", "]", "[", "0", "]", "for", "result", "in", "results_track", "[", "frame_id", "]", "]", ")", ")", "\n", "results_track", "[", "frame_id", "]", "=", "[", "results_track", "[", "frame_id", "]", "[", "max_id", "]", "]", "\n", "video_track_ids", "[", "frame_id", "]", "=", "[", "0", "]", "\n", "", "elif", "self", ".", "make_tracking", ":", "\n", "                    ", "detections", "=", "[", "Detection", "(", "points", "=", "(", "result", "[", "'cam'", "]", "[", "[", "1", ",", "2", "]", "]", "+", "1", ")", "/", "2.", "*", "args", "(", ")", ".", "input_size", ")", "for", "result", "in", "results_track", "[", "frame_id", "]", "]", "\n", "if", "test_iter", "==", "0", ":", "\n", "                        ", "for", "_", "in", "range", "(", "8", ")", ":", "\n", "                            ", "tracked_objects", "=", "tracker", ".", "update", "(", "detections", "=", "detections", ")", "\n", "", "", "tracked_objects", "=", "tracker", ".", "update", "(", "detections", "=", "detections", ")", "\n", "tracked_ids", "=", "get_tracked_ids", "(", "detections", ",", "tracked_objects", ")", "\n", "# frame = np.ones([512,512,3])", "\n", "# norfair.draw_tracked_objects(frame, tracked_objects,id_size=5,id_thickness=2)", "\n", "# cv2.imshow('tracking results', frame[:,:,::-1])", "\n", "# cv2.waitKey(1)", "\n", "video_track_ids", "[", "frame_id", "]", "=", "tracked_ids", "\n", "\n", "", "", "if", "self", ".", "temporal_optimization", "or", "self", ".", "show_largest_person_only", ":", "\n", "                ", "reorganize_idx_new", ",", "img_paths_new", "=", "[", "]", ",", "[", "]", "\n", "for", "fid", ",", "frame_id", "in", "enumerate", "(", "sorted", "(", "list", "(", "results_track", ".", "keys", "(", ")", ")", ")", ")", ":", "\n", "                    ", "for", "sid", ",", "tid", "in", "enumerate", "(", "video_track_ids", "[", "frame_id", "]", ")", ":", "\n", "                        ", "if", "self", ".", "temporal_optimization", ":", "\n", "                            ", "if", "tid", "not", "in", "filter_dict", ":", "\n", "                                ", "filter_dict", "[", "tid", "]", "=", "create_OneEuroFilter", "(", "args", "(", ")", ".", "smooth_coeff", ")", "\n", "", "results_track", "[", "frame_id", "]", "[", "sid", "]", "=", "temporal_optimize_result", "(", "results_track", "[", "frame_id", "]", "[", "sid", "]", ",", "filter_dict", "[", "tid", "]", ")", "\n", "\n", "", "for", "item", "in", "item_names", ":", "\n", "                            ", "params_dict_new", "[", "item", "]", ".", "append", "(", "torch", ".", "from_numpy", "(", "results_track", "[", "frame_id", "]", "[", "sid", "]", "[", "item", "]", ")", ")", "\n", "", "reorganize_idx_new", ".", "append", "(", "fid", ")", "\n", "img_paths_new", ".", "append", "(", "img_paths", "[", "fid", "]", ")", "\n", "if", "tid", "not", "in", "subjects_motion_sequences", ":", "\n", "                            ", "subjects_motion_sequences", "[", "tid", "]", "=", "{", "}", "\n", "", "subjects_motion_sequences", "[", "tid", "]", "[", "frame_id", "]", "=", "results_track", "[", "frame_id", "]", "[", "sid", "]", "\n", "\n", "# update the vertices", "\n", "", "", "for", "item", "in", "item_names", ":", "\n", "                    ", "params_dict_new", "[", "item", "]", "=", "torch", ".", "stack", "(", "params_dict_new", "[", "item", "]", ")", ".", "cuda", "(", ")", "\n", "", "outputs", "[", "'meta_data'", "]", "[", "'offsets'", "]", "=", "outputs", "[", "'meta_data'", "]", "[", "'offsets'", "]", "[", "to_org_inds", "]", "[", "reorganize_idx_new", "]", "\n", "with", "autocast", "(", ")", ":", "\n", "                    ", "outputs", ".", "update", "(", "self", ".", "model", ".", "module", ".", "_result_parser", ".", "params_map_parser", ".", "recalc_outputs", "(", "params_dict_new", ",", "outputs", "[", "'meta_data'", "]", ")", ")", "\n", "\n", "", "outputs", "[", "'meta_data'", "]", "[", "'image'", "]", "=", "outputs", "[", "'meta_data'", "]", "[", "'image'", "]", "[", "to_org_inds", "]", "[", "reorganize_idx_new", "]", "\n", "results", "=", "self", ".", "reorganize_results", "(", "outputs", ",", "img_paths_new", ",", "reorganize_idx_new", ")", "\n", "outputs", "[", "'reorganize_idx'", "]", "=", "torch", ".", "Tensor", "(", "reorganize_idx_new", ")", "\n", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", "=", "img_paths_new", "\n", "\n", "", "if", "self", ".", "save_dict_results", ":", "\n", "                ", "save_result_dict_tonpz", "(", "results", ",", "self", ".", "output_dir", ")", "\n", "\n", "", "if", "self", ".", "show_mesh_stand_on_image", ":", "\n", "                ", "poses", "=", "[", "]", "\n", "for", "frame_id", "in", "sorted", "(", "list", "(", "results_track", ".", "keys", "(", ")", ")", ")", ":", "\n", "                    ", "for", "result", "in", "results_track", "[", "frame_id", "]", ":", "\n", "                        ", "poses", ".", "append", "(", "result", "[", "'poses'", "]", ")", "\n", "", "", "pose", "=", "np", ".", "array", "(", "poses", ")", "\n", "verts", "=", "self", ".", "character_model", "(", "pose", ")", "[", "'verts'", "]", "if", "self", ".", "character", "==", "'nvxia'", "else", "outputs", "[", "'verts'", "]", "\n", "rotate_frames", "=", "[", "0", "]", "if", "self", ".", "surrounding_camera", "else", "[", "]", "\n", "stand_on_imgs", "=", "visualizer", ".", "plot_multi_meshes_batch", "(", "verts", ",", "outputs", "[", "'params'", "]", "[", "'cam'", "]", ",", "outputs", "[", "'meta_data'", "]", ",", "outputs", "[", "'reorganize_idx'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "interactive_show", "=", "self", ".", "interactive_vis", ",", "rotate_frames", "=", "rotate_frames", ")", "\n", "stand_on_imgs_frames", "+=", "stand_on_imgs", "\n", "\n", "", "if", "self", ".", "save_visualization_on_img", ":", "\n", "                ", "show_items_list", "=", "[", "'org_img'", ",", "'mesh'", "]", "\n", "if", "self", ".", "save_centermap", ":", "\n", "                    ", "show_items_list", ".", "append", "(", "'centermap'", ")", "\n", "", "results_dict", ",", "img_names", "=", "self", ".", "visualizer", ".", "visulize_result", "(", "outputs", ",", "outputs", "[", "'meta_data'", "]", ",", "show_items", "=", "show_items_list", ",", "vis_cfg", "=", "{", "'settings'", ":", "[", "'put_org'", "]", "}", ",", "save2html", "=", "False", ")", "\n", "\n", "if", "'mesh_rendering_orgimgs'", "in", "results_dict", ":", "\n", "                    ", "for", "img_name", ",", "mesh_rendering_orgimg", "in", "zip", "(", "img_names", ",", "results_dict", "[", "'mesh_rendering_orgimgs'", "]", "[", "'figs'", "]", ")", ":", "\n", "                        ", "save_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "os", ".", "path", ".", "basename", "(", "img_name", ")", ")", "\n", "cv2", ".", "imwrite", "(", "save_name", ",", "cv2", ".", "cvtColor", "(", "mesh_rendering_orgimg", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "save_frame_list", ".", "append", "(", "save_name", ")", "\n", "", "", "del", "results_dict", "\n", "\n", "", "if", "self", ".", "save_mesh", ":", "\n", "                ", "save_meshes", "(", "reorganize_idx", ",", "outputs", ",", "self", ".", "output_dir", ",", "self", ".", "smpl_faces", ")", "\n", "\n", "", "if", "test_iter", "%", "8", "==", "0", ":", "\n", "                ", "print", "(", "'Processed {} / {} frames'", ".", "format", "(", "test_iter", "*", "self", ".", "val_batch_size", ",", "len", "(", "internet_loader", ".", "dataset", ")", ")", ")", "\n", "", "counter", ".", "start", "(", ")", "\n", "results_frames", ".", "update", "(", "results", ")", "\n", "\n", "", "if", "self", ".", "save_dict_results", ":", "\n", "            ", "save_dict_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "video_basename", "+", "'_results.npz'", ")", "\n", "print", "(", "'Saving parameter results to {}'", ".", "format", "(", "save_dict_path", ")", ")", "\n", "np", ".", "savez", "(", "save_dict_path", ",", "results", "=", "results_frames", ")", "\n", "\n", "", "if", "len", "(", "subjects_motion_sequences", ")", ">", "0", ":", "\n", "            ", "save_dict_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "video_basename", "+", "'_ts_results.npz'", ")", "\n", "print", "(", "'Saving parameter results to {}'", ".", "format", "(", "save_dict_path", ")", ")", "\n", "np", ".", "savez", "(", "save_dict_path", ",", "results", "=", "subjects_motion_sequences", ")", "\n", "\n", "", "if", "len", "(", "save_frame_list", ")", ">", "0", "and", "self", ".", "save_visualization_on_img", ":", "\n", "            ", "video_save_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "video_basename", "+", "'_results.mp4'", ")", "\n", "print", "(", "'Writing results to {}'", ".", "format", "(", "video_save_name", ")", ")", "\n", "frames2video", "(", "sorted", "(", "save_frame_list", ")", ",", "video_save_name", ",", "fps", "=", "self", ".", "fps_save", ")", "\n", "\n", "", "if", "self", ".", "show_mesh_stand_on_image", "and", "self", ".", "save_visualization_on_img", ":", "\n", "            ", "video_save_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "video_basename", "+", "'_soi_results.mp4'", ")", "\n", "print", "(", "'Writing results to {}'", ".", "format", "(", "video_save_name", ")", ")", "\n", "frames2video", "(", "stand_on_imgs_frames", ",", "video_save_name", ",", "fps", "=", "self", ".", "fps_save", ")", "\n", "", "return", "results_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.get_tracked_ids": [[188, 194], ["np.array", "np.array", "np.array", "np.argmin", "np.linalg.norm"], "function", ["None"], ["", "", "def", "get_tracked_ids", "(", "detections", ",", "tracked_objects", ")", ":", "\n", "    ", "tracked_ids_out", "=", "np", ".", "array", "(", "[", "obj", ".", "id", "for", "obj", "in", "tracked_objects", "]", ")", "\n", "tracked_points", "=", "np", ".", "array", "(", "[", "obj", ".", "last_detection", ".", "points", "for", "obj", "in", "tracked_objects", "]", ")", "\n", "org_points", "=", "np", ".", "array", "(", "[", "obj", ".", "points", "for", "obj", "in", "detections", "]", ")", "\n", "tracked_ids", "=", "[", "tracked_ids_out", "[", "np", ".", "argmin", "(", "np", ".", "linalg", ".", "norm", "(", "tracked_points", "-", "point", "[", "None", "]", ",", "axis", "=", "1", ")", ")", "]", "for", "point", "in", "org_points", "]", "\n", "return", "tracked_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.euclidean_distance": [[195, 197], ["np.linalg.norm"], "function", ["None"], ["", "def", "euclidean_distance", "(", "detection", ",", "tracked_object", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "norm", "(", "detection", ".", "points", "-", "tracked_object", ".", "estimate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.main": [[198, 204], ["ConfigContext", "print", "video.Video_processor", "print", "Video_processor.process_video", "parse_args"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.Video_processor.process_video", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "with", "ConfigContext", "(", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", "as", "args_set", ":", "\n", "        ", "print", "(", "'Loading the configurations from {}'", ".", "format", "(", "args_set", ".", "configs_yml", ")", ")", "\n", "processor", "=", "Video_processor", "(", "args_set", "=", "args_set", ")", "\n", "print", "(", "'Processing video: '", ",", "args_set", ".", "inputs", ")", "\n", "processor", ".", "process_video", "(", "args_set", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.__init__": [[10, 20], ["Base.__init__", "base_predictor.Predictor._build_model_", "base_predictor.Predictor._prepare_modules_", "os.path.exists", "create_nvxia_model", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._build_model_", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor._prepare_modules_"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_build_model_", "(", ")", "\n", "self", ".", "_prepare_modules_", "(", ")", "\n", "self", ".", "demo_cfg", "=", "{", "'mode'", ":", "'parsing'", ",", "'calc_loss'", ":", "False", "}", "\n", "if", "self", ".", "character", "==", "'nvxia'", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'model_data'", ",", "'characters'", ",", "'nvxia'", ")", ")", ",", "'Current released version does not support other characters, like Nvxia.'", "\n", "from", "romp", ".", "lib", ".", "models", ".", "nvxia", "import", "create_nvxia_model", "\n", "self", ".", "character_model", "=", "create_nvxia_model", "(", "self", ".", "nvxia_model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.net_forward": [[21, 33], ["get_remove_keys", "torch.arange", "justify_detection_state", "meta_data.update", "reorganize_items", "len", "base_predictor.Predictor.model", "outputs[].cpu().numpy", "torch.cuda.amp.autocast", "base_predictor.Predictor.model", "outputs[].cpu"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.get_remove_keys", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.justify_detection_state", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.train_utils.reorganize_items"], ["", "", "def", "net_forward", "(", "self", ",", "meta_data", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "ds_org", ",", "imgpath_org", "=", "get_remove_keys", "(", "meta_data", ",", "keys", "=", "[", "'data_set'", ",", "'imgpath'", "]", ")", "\n", "meta_data", "[", "'batch_ids'", "]", "=", "torch", ".", "arange", "(", "len", "(", "meta_data", "[", "'image'", "]", ")", ")", "\n", "if", "self", ".", "model_precision", "==", "'fp16'", ":", "\n", "            ", "with", "autocast", "(", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "model", "(", "meta_data", ",", "**", "cfg", ")", "\n", "", "", "else", ":", "\n", "            ", "outputs", "=", "self", ".", "model", "(", "meta_data", ",", "**", "cfg", ")", "\n", "", "outputs", "[", "'detection_flag'", "]", ",", "outputs", "[", "'reorganize_idx'", "]", "=", "justify_detection_state", "(", "outputs", "[", "'detection_flag'", "]", ",", "outputs", "[", "'reorganize_idx'", "]", ")", "\n", "meta_data", ".", "update", "(", "{", "'imgpath'", ":", "imgpath_org", ",", "'data_set'", ":", "ds_org", "}", ")", "\n", "outputs", "[", "'meta_data'", "]", "[", "'data_set'", "]", ",", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", "=", "reorganize_items", "(", "[", "ds_org", ",", "imgpath_org", "]", ",", "outputs", "[", "'reorganize_idx'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor._prepare_modules_": [[34, 37], ["base_predictor.Predictor.model.eval", "os.path.join"], "methods", ["None"], ["", "def", "_prepare_modules_", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "demo_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "project_dir", ",", "'demo'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.__initialize__": [[38, 42], ["print", "pickle.load", "open", "os.path.join", "args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "__initialize__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "save_mesh", ":", "\n", "            ", "self", ".", "smpl_faces", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "args", "(", ")", ".", "smpl_model_path", ",", "'SMPL_NEUTRAL.pkl'", ")", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "[", "'f'", "]", "\n", "", "print", "(", "'Initialization finished!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.single_image_forward": [[43, 49], ["dataset.internet.img_preprocess", "base_predictor.Predictor.net_forward", "meta_data[].cuda", "args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.img_preprocess", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.net_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "def", "single_image_forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "meta_data", "=", "img_preprocess", "(", "image", ",", "'0'", ",", "input_size", "=", "args", "(", ")", ".", "input_size", ",", "single_img_input", "=", "True", ")", "\n", "if", "'-1'", "not", "in", "self", ".", "gpu", ":", "\n", "            ", "meta_data", "[", "'image'", "]", "=", "meta_data", "[", "'image'", "]", ".", "cuda", "(", ")", "\n", "", "outputs", "=", "self", ".", "net_forward", "(", "meta_data", ",", "cfg", "=", "self", ".", "demo_cfg", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.reorganize_results": [[50, 86], ["[].detach().cpu().numpy().astype", "outputs[].detach().cpu().numpy().astype", "[].detach().cpu().numpy().astype", "[].detach().cpu().numpy().astype", "outputs[].detach().cpu().numpy().astype", "outputs[].detach().cpu().numpy().astype", "outputs[].detach().cpu().numpy().astype", "outputs[].detach().cpu().numpy().astype", "outputs[].detach().cpu().numpy().astype", "outputs[].detach().cpu().numpy().astype", "np.unique", "enumerate", "enumerate", "[].detach().cpu().numpy", "outputs[].detach().cpu().numpy", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "outputs[].detach().cpu().numpy", "outputs[].detach().cpu().numpy", "outputs[].detach().cpu().numpy", "outputs[].detach().cpu().numpy", "outputs[].detach().cpu().numpy", "outputs[].detach().cpu().numpy", "np.where", "constants.joint_mapping", "constants.joint_mapping", "range", "[].detach().cpu", "outputs[].detach().cpu", "[].detach().cpu", "[].detach().cpu", "outputs[].detach().cpu", "outputs[].detach().cpu", "outputs[].detach().cpu", "outputs[].detach().cpu", "outputs[].detach().cpu", "outputs[].detach().cpu", "len", "[].detach", "outputs[].detach", "[].detach", "[].detach", "outputs[].detach", "outputs[].detach", "outputs[].detach", "outputs[].detach", "outputs[].detach", "outputs[].detach"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping"], ["", "def", "reorganize_results", "(", "self", ",", "outputs", ",", "img_paths", ",", "reorganize_idx", ")", ":", "\n", "        ", "results", "=", "{", "}", "\n", "cam_results", "=", "outputs", "[", "'params'", "]", "[", "'cam'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "trans_results", "=", "outputs", "[", "'cam_trans'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "smpl_pose_results", "=", "outputs", "[", "'params'", "]", "[", "'poses'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "smpl_shape_results", "=", "outputs", "[", "'params'", "]", "[", "'betas'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "joints_54", "=", "outputs", "[", "'j3d'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "kp3d_smpl24_results", "=", "outputs", "[", "'joints_smpl24'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "kp3d_spin24_results", "=", "joints_54", "[", ":", ",", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_ALL_54", ",", "constants", ".", "SPIN_24", ")", "]", "\n", "kp3d_op25_results", "=", "joints_54", "[", ":", ",", "constants", ".", "joint_mapping", "(", "constants", ".", "SMPL_ALL_54", ",", "constants", ".", "OpenPose_25", ")", "]", "\n", "verts_results", "=", "outputs", "[", "'verts'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "pj2d_results", "=", "outputs", "[", "'pj2d'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "pj2d_org_results", "=", "outputs", "[", "'pj2d_org'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "center_confs", "=", "outputs", "[", "'centers_conf'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "\n", "vids_org", "=", "np", ".", "unique", "(", "reorganize_idx", ")", "\n", "for", "idx", ",", "vid", "in", "enumerate", "(", "vids_org", ")", ":", "\n", "            ", "verts_vids", "=", "np", ".", "where", "(", "reorganize_idx", "==", "vid", ")", "[", "0", "]", "\n", "img_path", "=", "img_paths", "[", "verts_vids", "[", "0", "]", "]", "\n", "results", "[", "img_path", "]", "=", "[", "{", "}", "for", "idx", "in", "range", "(", "len", "(", "verts_vids", ")", ")", "]", "\n", "for", "subject_idx", ",", "batch_idx", "in", "enumerate", "(", "verts_vids", ")", ":", "\n", "                ", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'cam'", "]", "=", "cam_results", "[", "batch_idx", "]", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'cam_trans'", "]", "=", "trans_results", "[", "batch_idx", "]", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'poses'", "]", "=", "smpl_pose_results", "[", "batch_idx", "]", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'betas'", "]", "=", "smpl_shape_results", "[", "batch_idx", "]", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'j3d_all54'", "]", "=", "joints_54", "[", "batch_idx", "]", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'j3d_smpl24'", "]", "=", "kp3d_smpl24_results", "[", "batch_idx", "]", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'j3d_spin24'", "]", "=", "kp3d_spin24_results", "[", "batch_idx", "]", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'j3d_op25'", "]", "=", "kp3d_op25_results", "[", "batch_idx", "]", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'verts'", "]", "=", "verts_results", "[", "batch_idx", "]", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'pj2d'", "]", "=", "pj2d_results", "[", "batch_idx", "]", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'pj2d_org'", "]", "=", "pj2d_org_results", "[", "batch_idx", "]", "\n", "# wrong trans, please use cam_trans instead.", "\n", "#results[img_path][subject_idx]['trans'] = convert_cam_to_3d_trans(cam_results[batch_idx])", "\n", "results", "[", "img_path", "]", "[", "subject_idx", "]", "[", "'center_conf'", "]", "=", "center_confs", "[", "batch_idx", "]", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.image.Image_processor.__init__": [[13, 16], ["base_predictor.Predictor.__init__", "image.Image_processor.__initialize__"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.__initialize__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Image_processor", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "__initialize__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.image.Image_processor.run": [[17, 66], ["torch.no_grad", "print", "os.makedirs", "Time_counter", "utils.util.collect_image_list", "image.Image_processor._create_single_data_loader", "Time_counter.start", "enumerate", "Vedo_visualizer", "image.Image_processor.net_forward", "outputs[].cpu().numpy", "Time_counter.count", "image.Image_processor.reorganize_results", "Time_counter.start", "results_all.update", "save_result_dict_tonpz", "image.Image_processor.visualizer.visulize_result", "zip", "Vedo_visualizer.plot_multi_meshes_batch", "save_meshes", "print", "outputs[].cpu", "show_items_list.append", "os.path.join", "cv2.imwrite", "outputs[].cpu().numpy", "os.path.basename", "cv2.cvtColor", "len", "outputs[].cpu"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.collect_image_list", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.base.Base._create_single_data_loader", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.net_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.count", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.reorganize_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.save_result_dict_tonpz", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.visualization.Visualizer.visulize_result", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.plot_multi_meshes_batch", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.save_meshes", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "run", "(", "self", ",", "image_folder", ",", "tracker", "=", "None", ")", ":", "\n", "        ", "print", "(", "'Processing {}, saving to {}'", ".", "format", "(", "image_folder", ",", "self", ".", "output_dir", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "visualizer", ".", "result_img_dir", "=", "self", ".", "output_dir", "\n", "counter", "=", "Time_counter", "(", "thresh", "=", "1", ")", "\n", "\n", "if", "self", ".", "show_mesh_stand_on_image", ":", "\n", "            ", "from", "visualization", ".", "vedo_visualizer", "import", "Vedo_visualizer", "\n", "visualizer", "=", "Vedo_visualizer", "(", ")", "\n", "stand_on_imgs_frames", "=", "[", "]", "\n", "\n", "", "file_list", "=", "collect_image_list", "(", "image_folder", "=", "image_folder", ",", "collect_subdirs", "=", "self", ".", "collect_subdirs", ",", "img_exts", "=", "constants", ".", "img_exts", ")", "\n", "internet_loader", "=", "self", ".", "_create_single_data_loader", "(", "dataset", "=", "'internet'", ",", "train_flag", "=", "False", ",", "file_list", "=", "file_list", ",", "shuffle", "=", "False", ")", "\n", "counter", ".", "start", "(", ")", "\n", "results_all", "=", "{", "}", "\n", "for", "test_iter", ",", "meta_data", "in", "enumerate", "(", "internet_loader", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "net_forward", "(", "meta_data", ",", "cfg", "=", "self", ".", "demo_cfg", ")", "\n", "reorganize_idx", "=", "outputs", "[", "'reorganize_idx'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "counter", ".", "count", "(", "self", ".", "val_batch_size", ")", "\n", "results", "=", "self", ".", "reorganize_results", "(", "outputs", ",", "outputs", "[", "'meta_data'", "]", "[", "'imgpath'", "]", ",", "reorganize_idx", ")", "\n", "\n", "if", "self", ".", "save_dict_results", ":", "\n", "                ", "save_result_dict_tonpz", "(", "results", ",", "self", ".", "output_dir", ")", "\n", "\n", "", "if", "self", ".", "save_visualization_on_img", ":", "\n", "                ", "show_items_list", "=", "[", "'org_img'", ",", "'mesh'", "]", "\n", "if", "self", ".", "save_centermap", ":", "\n", "                    ", "show_items_list", ".", "append", "(", "'centermap'", ")", "\n", "", "results_dict", ",", "img_names", "=", "self", ".", "visualizer", ".", "visulize_result", "(", "outputs", ",", "outputs", "[", "'meta_data'", "]", ",", "show_items", "=", "show_items_list", ",", "vis_cfg", "=", "{", "'settings'", ":", "[", "'put_org'", "]", "}", ",", "save2html", "=", "False", ")", "\n", "\n", "for", "img_name", ",", "mesh_rendering_orgimg", "in", "zip", "(", "img_names", ",", "results_dict", "[", "'mesh_rendering_orgimgs'", "]", "[", "'figs'", "]", ")", ":", "\n", "                    ", "save_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "os", ".", "path", ".", "basename", "(", "img_name", ")", ")", "\n", "cv2", ".", "imwrite", "(", "save_name", ",", "cv2", ".", "cvtColor", "(", "mesh_rendering_orgimg", ",", "cv2", ".", "COLOR_RGB2BGR", ")", ")", "\n", "\n", "", "", "if", "self", ".", "show_mesh_stand_on_image", ":", "\n", "                ", "stand_on_imgs", "=", "visualizer", ".", "plot_multi_meshes_batch", "(", "outputs", "[", "'verts'", "]", ",", "outputs", "[", "'params'", "]", "[", "'cam'", "]", ",", "outputs", "[", "'meta_data'", "]", ",", "outputs", "[", "'reorganize_idx'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "interactive_show", "=", "self", ".", "interactive_vis", ")", "\n", "stand_on_imgs_frames", "+=", "stand_on_imgs", "\n", "\n", "", "if", "self", ".", "save_mesh", ":", "\n", "                ", "save_meshes", "(", "reorganize_idx", ",", "outputs", ",", "self", ".", "output_dir", ",", "self", ".", "smpl_faces", ")", "\n", "\n", "", "if", "test_iter", "%", "8", "==", "0", ":", "\n", "                ", "print", "(", "'Processed {} / {} images'", ".", "format", "(", "test_iter", "*", "self", ".", "val_batch_size", ",", "len", "(", "internet_loader", ".", "dataset", ")", ")", ")", "\n", "", "counter", ".", "start", "(", ")", "\n", "results_all", ".", "update", "(", "results", ")", "\n", "", "return", "results_all", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.image.main": [[68, 77], ["ConfigContext", "print", "image.Image_processor", "image.Image_processor.run", "parse_args", "os.path.exists", "print", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.image.Image_processor.run", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "with", "ConfigContext", "(", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", "as", "args_set", ":", "\n", "        ", "print", "(", "'Loading the configurations from {}'", ".", "format", "(", "args_set", ".", "configs_yml", ")", ")", "\n", "processor", "=", "Image_processor", "(", "args_set", "=", "args_set", ")", "\n", "inputs", "=", "args_set", ".", "inputs", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "inputs", ")", ":", "\n", "            ", "print", "(", "\"Didn't find the target directory: {}. \\n Running the code on the demo images\"", ".", "format", "(", "inputs", ")", ")", "\n", "inputs", "=", "os", ".", "path", ".", "join", "(", "processor", ".", "demo_dir", ",", "'images'", ")", "\n", "", "processor", ".", "run", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.webcam.Webcam_processor.__init__": [[17, 24], ["base_predictor.Predictor.__init__", "os.path.exists", "create_nvxia_model", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Webcam_processor", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "character", "==", "'nvxia'", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'model_data'", ",", "'characters'", ",", "'nvxia'", ")", ")", ",", "'Current released version does not support other characters, like Nvxia.'", "\n", "from", "romp", ".", "lib", ".", "models", ".", "nvxia", "import", "create_nvxia_model", "\n", "self", ".", "character_model", "=", "create_nvxia_model", "(", "self", ".", "nvxia_model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.webcam.Webcam_processor.webcam_run_local": [[25, 141], ["OpenCVCapture", "print", "range", "Time_counter", "Open3d_visualizer", "webcam.Webcam_processor.single_image_forward", "time.time", "OpenCVCapture.read", "Time_counter.start", "Time_counter.count", "SocketClient_blender", "Tracker", "np.zeros().astype", "torch.no_grad", "webcam.Webcam_processor.single_image_forward", "outputs[].cpu().numpy", "webcam.Webcam_processor.reorganize_results", "cv2.imshow", "cv2.waitKey", "np.array", "np.array", "np.array", "np.array", "np.array", "np.array", "Results_sender", "args", "Tracker", "np.argmax", "np.array", "enumerate", "Results_sender.send_results", "args", "Tracker", "np.zeros", "outputs[].cpu", "args", "np.array", "args", "np.arange", "utils.temporal_optimization.temporal_optimize_result", "convert_cam_to_3d_trans", "SocketClient_blender.send", "args", "args", "range", "Tracker.update", "video.get_tracked_ids", "Tracker.update", "len", "utils.temporal_optimization.create_OneEuroFilter", "len", "args", "range", "len", "len", "len", "len", "poses[].tolist", "trans[].tolist", "[].numpy", "args", "Open3d_visualizer.run", "Open3d_visualizer.run_multiperson", "args", "Detection", "Tracker.update", "args", "args", "Detection", "webcam.Webcam_processor.character_model", "args"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.single_image_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.count", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.single_image_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.base_predictor.Predictor.reorganize_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.Results_sender.send_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.temporal_optimize_result", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.projection.convert_cam_to_3d_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.send", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.video.get_tracked_ids", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.create_OneEuroFilter", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.image.Image_processor.run", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.open3d_visualizer.Open3d_visualizer.run_multiperson", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.args"], ["", "", "def", "webcam_run_local", "(", "self", ",", "video_file_path", "=", "None", ")", ":", "\n", "        ", "'''\n        24.4 FPS of forward prop. on 1070Ti\n        '''", "\n", "import", "keyboard", "\n", "from", "utils", ".", "demo_utils", "import", "OpenCVCapture", ",", "Image_Reader", "\n", "capture", "=", "OpenCVCapture", "(", "video_file_path", ",", "show", "=", "False", ")", "\n", "print", "(", "'Initialization is down'", ")", "\n", "frame_id", "=", "0", "\n", "\n", "if", "self", ".", "visulize_platform", "==", "'integrated'", ":", "\n", "            ", "from", "visualization", ".", "open3d_visualizer", "import", "Open3d_visualizer", "\n", "visualizer", "=", "Open3d_visualizer", "(", "multi_mode", "=", "not", "args", "(", ")", ".", "show_largest_person_only", ")", "\n", "", "elif", "self", ".", "visulize_platform", "==", "'blender'", ":", "\n", "            ", "from", "visualization", ".", "socket_utils", "import", "SocketClient_blender", "\n", "sender", "=", "SocketClient_blender", "(", ")", "\n", "", "elif", "self", ".", "visulize_platform", "==", "'vis_server'", ":", "\n", "            ", "from", "visualization", ".", "socket_utils", "import", "Results_sender", "\n", "RS", "=", "Results_sender", "(", ")", "\n", "\n", "", "if", "self", ".", "make_tracking", ":", "\n", "            ", "if", "args", "(", ")", ".", "tracker", "==", "'norfair'", ":", "\n", "                ", "if", "args", "(", ")", ".", "tracking_target", "==", "'centers'", ":", "\n", "                    ", "tracker", "=", "Tracker", "(", "distance_function", "=", "euclidean_distance", ",", "distance_threshold", "=", "80", ")", "\n", "", "elif", "args", "(", ")", ".", "tracking_target", "==", "'keypoints'", ":", "\n", "                    ", "tracker", "=", "Tracker", "(", "distance_function", "=", "keypoints_distance", ",", "distance_threshold", "=", "60", ")", "\n", "", "", "else", ":", "\n", "                ", "tracker", "=", "Tracker", "(", ")", "\n", "\n", "", "", "if", "self", ".", "temporal_optimization", ":", "\n", "            ", "filter_dict", "=", "{", "}", "\n", "subjects_motion_sequences", "=", "{", "}", "\n", "\n", "# Warm-up", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "single_image_forward", "(", "np", ".", "zeros", "(", "(", "512", ",", "512", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "counter", "=", "Time_counter", "(", "thresh", "=", "1", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "start_time_perframe", "=", "time", ".", "time", "(", ")", "\n", "frame", "=", "capture", ".", "read", "(", ")", "\n", "if", "frame", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "frame_id", "+=", "1", "\n", "counter", ".", "start", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "single_image_forward", "(", "frame", ")", "\n", "", "counter", ".", "count", "(", ")", "\n", "#counter.fps()", "\n", "\n", "if", "outputs", "is", "not", "None", "and", "outputs", "[", "'detection_flag'", "]", ":", "\n", "                ", "reorganize_idx", "=", "outputs", "[", "'reorganize_idx'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "results", "=", "self", ".", "reorganize_results", "(", "outputs", ",", "[", "frame_id", "for", "_", "in", "range", "(", "len", "(", "reorganize_idx", ")", ")", "]", ",", "reorganize_idx", ")", "\n", "\n", "if", "args", "(", ")", ".", "show_largest_person_only", "or", "self", ".", "visulize_platform", "==", "'blender'", ":", "\n", "                    ", "max_id", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "[", "result", "[", "'cam'", "]", "[", "0", "]", "for", "result", "in", "results", "[", "frame_id", "]", "]", ")", ")", "\n", "results", "[", "frame_id", "]", "=", "[", "results", "[", "frame_id", "]", "[", "max_id", "]", "]", "\n", "tracked_ids", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "\n", "", "elif", "args", "(", ")", ".", "make_tracking", ":", "\n", "                    ", "if", "args", "(", ")", ".", "tracker", "==", "'norfair'", ":", "\n", "                        ", "if", "args", "(", ")", ".", "tracking_target", "==", "'centers'", ":", "\n", "                            ", "detections", "=", "[", "Detection", "(", "points", "=", "result", "[", "'cam'", "]", "[", "[", "2", ",", "1", "]", "]", "*", "args", "(", ")", ".", "input_size", ")", "for", "result", "in", "results", "[", "frame_id", "]", "]", "\n", "", "elif", "args", "(", ")", ".", "tracking_target", "==", "'keypoints'", ":", "\n", "                            ", "detections", "=", "[", "Detection", "(", "points", "=", "result", "[", "'pj2d_org'", "]", ")", "for", "result", "in", "results", "[", "frame_id", "]", "]", "\n", "# norfair takes at least 6 frames for initialization without generating any tracking results.", "\n", "", "if", "frame_id", "==", "1", ":", "\n", "                            ", "for", "_", "in", "range", "(", "8", ")", ":", "\n", "                                ", "tracked_objects", "=", "tracker", ".", "update", "(", "detections", "=", "detections", ")", "\n", "", "", "tracked_objects", "=", "tracker", ".", "update", "(", "detections", "=", "detections", ")", "\n", "if", "len", "(", "tracked_objects", ")", "==", "0", ":", "\n", "                            ", "continue", "\n", "", "tracked_ids", "=", "get_tracked_ids", "(", "detections", ",", "tracked_objects", ")", "\n", "#norfair.draw_tracked_objects(frame, tracked_objects,id_size=5,id_thickness=2)", "\n", "", "else", ":", "\n", "                        ", "tracked_ids", "=", "tracker", ".", "update", "(", "results", "[", "frame_id", "]", ")", "\n", "", "if", "len", "(", "tracked_ids", ")", "==", "0", "or", "len", "(", "tracked_ids", ")", ">", "len", "(", "results", "[", "frame_id", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "", "else", ":", "\n", "                    ", "tracked_ids", "=", "np", ".", "arange", "(", "len", "(", "results", "[", "frame_id", "]", ")", ")", "\n", "\n", "", "cv2", ".", "imshow", "(", "'Input'", ",", "frame", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n", "if", "self", ".", "temporal_optimization", ":", "\n", "                    ", "for", "sid", ",", "tid", "in", "enumerate", "(", "tracked_ids", ")", ":", "\n", "                        ", "if", "tid", "not", "in", "filter_dict", ":", "\n", "                            ", "filter_dict", "[", "tid", "]", "=", "create_OneEuroFilter", "(", "args", "(", ")", ".", "smooth_coeff", ")", "\n", "subjects_motion_sequences", "[", "tid", "]", "=", "{", "}", "\n", "", "results", "[", "frame_id", "]", "[", "sid", "]", "=", "temporal_optimize_result", "(", "results", "[", "frame_id", "]", "[", "sid", "]", ",", "filter_dict", "[", "tid", "]", ")", "\n", "subjects_motion_sequences", "[", "tid", "]", "[", "frame_id", "]", "=", "results", "[", "frame_id", "]", "[", "sid", "]", "\n", "\n", "", "", "cams", "=", "np", ".", "array", "(", "[", "result", "[", "'cam'", "]", "for", "result", "in", "results", "[", "frame_id", "]", "]", ")", "\n", "# to elimate the y-axis offset", "\n", "cams", "[", ":", ",", "2", "]", "-=", "0.26", "\n", "trans", "=", "np", ".", "array", "(", "[", "convert_cam_to_3d_trans", "(", "cam", ")", "for", "cam", "in", "cams", "]", ")", "\n", "poses", "=", "np", ".", "array", "(", "[", "result", "[", "'poses'", "]", "for", "result", "in", "results", "[", "frame_id", "]", "]", ")", "\n", "betas", "=", "np", ".", "array", "(", "[", "result", "[", "'betas'", "]", "for", "result", "in", "results", "[", "frame_id", "]", "]", ")", "\n", "kp3ds", "=", "np", ".", "array", "(", "[", "result", "[", "'j3d_smpl24'", "]", "for", "result", "in", "results", "[", "frame_id", "]", "]", ")", "\n", "verts", "=", "np", ".", "array", "(", "[", "result", "[", "'verts'", "]", "for", "result", "in", "results", "[", "frame_id", "]", "]", ")", "\n", "\n", "if", "self", ".", "visulize_platform", "==", "'vis_server'", ":", "\n", "                    ", "RS", ".", "send_results", "(", "poses", "=", "poses", ",", "betas", "=", "betas", ",", "trans", "=", "trans", ",", "ids", "=", "tracked_ids", ")", "\n", "", "elif", "self", ".", "visulize_platform", "==", "'blender'", ":", "\n", "                    ", "sender", ".", "send", "(", "[", "0", ",", "poses", "[", "0", "]", ".", "tolist", "(", ")", ",", "trans", "[", "0", "]", ".", "tolist", "(", ")", ",", "frame_id", "]", ")", "\n", "", "elif", "self", ".", "visulize_platform", "==", "'integrated'", ":", "\n", "                    ", "if", "self", ".", "character", "==", "'nvxia'", ":", "\n", "                        ", "verts", "=", "self", ".", "character_model", "(", "poses", ")", "[", "'verts'", "]", ".", "numpy", "(", ")", "\n", "", "if", "args", "(", ")", ".", "show_largest_person_only", ":", "\n", "                        ", "trans_largest", "=", "trans", "[", "0", "]", "if", "self", ".", "add_trans", "else", "None", "\n", "# please make sure the (x, y, z) of visualized verts are all in range (-1, 1)", "\n", "# print(verts_largest.max(0), verts_largest.min(0))", "\n", "visualizer", ".", "run", "(", "verts", "[", "0", "]", ",", "trans", "=", "trans_largest", ")", "\n", "", "else", ":", "\n", "                        ", "visualizer", ".", "run_multiperson", "(", "verts", ",", "trans", "=", "trans", ",", "tracked_ids", "=", "tracked_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.webcam.Webcam_processor.webcam_run_remote": [[142, 159], ["print", "Server_port_receiver", "Server_port_receiver.receive", "isinstance", "torch.no_grad", "webcam.Webcam_processor.single_image_forward", "[].cpu().numpy", "Server_port_receiver.send", "Server_port_receiver.send", "np.array", "[].cpu"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.single_image_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.send", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.send"], ["", "", "", "", "", "def", "webcam_run_remote", "(", "self", ")", ":", "\n", "        ", "print", "(", "'run on remote'", ")", "\n", "from", "utils", ".", "remote_server_utils", "import", "Server_port_receiver", "\n", "capture", "=", "Server_port_receiver", "(", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "frame", "=", "capture", ".", "receive", "(", ")", "\n", "if", "isinstance", "(", "frame", ",", "list", ")", ":", "\n", "                ", "continue", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outputs", "=", "self", ".", "single_image_forward", "(", "frame", ")", "\n", "", "if", "outputs", "is", "not", "None", ":", "\n", "                ", "verts", "=", "outputs", "[", "'verts'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "verts", "=", "verts", "*", "50", "+", "np", ".", "array", "(", "[", "0", ",", "0", ",", "100", "]", ")", "\n", "capture", ".", "send", "(", "verts", ")", "\n", "", "else", ":", "\n", "                ", "capture", ".", "send", "(", "[", "'failed'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.webcam.euclidean_distance": [[160, 162], ["np.linalg.norm"], "function", ["None"], ["", "", "", "", "def", "euclidean_distance", "(", "detection", ",", "tracked_object", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "norm", "(", "detection", ".", "points", "-", "tracked_object", ".", "estimate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.webcam.main": [[163, 172], ["ConfigContext", "print", "webcam.Webcam_processor", "print", "parse_args", "Webcam_processor.webcam_run_remote", "Webcam_processor.webcam_run_local"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.webcam.Webcam_processor.webcam_run_remote", "home.repos.pwc.inspect_result.Arthur151_ROMP.predict.webcam.Webcam_processor.webcam_run_local"], ["", "def", "main", "(", ")", ":", "\n", "    ", "with", "ConfigContext", "(", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", "as", "args_set", ":", "\n", "        ", "print", "(", "'Loading the configurations from {}'", ".", "format", "(", "args_set", ".", "configs_yml", ")", ")", "\n", "processor", "=", "Webcam_processor", "(", "args_set", "=", "args_set", ")", "\n", "print", "(", "'Running the code on webcam demo'", ")", "\n", "if", "args_set", ".", "run_on_remote_server", ":", "\n", "            ", "processor", ".", "webcam_run_remote", "(", ")", "\n", "", "else", ":", "\n", "            ", "processor", ".", "webcam_run_local", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.exports.blender_mocap.Connect.execute": [[23, 36], ["socket.socket", "blender_mocap.SMPL_Importer", "ctx.window_manager.modal_handler_add", "ctx.window_manager.event_timer_add"], "methods", ["None"], ["def", "execute", "(", "self", ",", "ctx", ")", ":", "\n", "        ", "global", "mocap_timer", "\n", "global", "SMPL_Importer_", "\n", "global", "s", "\n", "\n", "s", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_DGRAM", ")", "\n", "SMPL_Importer_", "=", "SMPL_Importer", "(", "bpy", ".", "context", ")", "\n", "\n", "ctx", ".", "window_manager", ".", "modal_handler_add", "(", "self", ")", "\n", "mocap_timer", "=", "ctx", ".", "window_manager", ".", "event_timer_add", "(", "\n", "1", "/", "60", ",", "window", "=", "ctx", ".", "window", ")", "\n", "\n", "return", "{", "'RUNNING_MODAL'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.exports.blender_mocap.Connect.modal": [[37, 51], ["s.sendto", "json.loads", "s.recv", "SMPL_Importer_.process_poses"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.process_poses"], ["", "def", "modal", "(", "self", ",", "ctx", ",", "evt", ")", ":", "\n", "\n", "        ", "if", "evt", ".", "type", "==", "'TIMER'", ":", "\n", "            ", "s", ".", "sendto", "(", "b'1'", ",", "(", "'127.0.0.1'", ",", "9999", ")", ")", "\n", "data", "=", "json", ".", "loads", "(", "s", ".", "recv", "(", "2048", ")", ")", "\n", "if", "data", ":", "\n", "                ", "SMPL_Importer_", ".", "process_poses", "(", "data", "[", "0", "]", ",", "data", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "return", "{", "'FINISHED'", "}", "\n", "\n", "", "", "if", "evt", ".", "type", "==", "'A'", ":", "\n", "            ", "return", "{", "'FINISHED'", "}", "\n", "\n", "", "return", "{", "'RUNNING_MODAL'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.exports.blender_mocap.SMPL_Importer.__init__": [[55, 81], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "context", ")", ":", "\n", "        ", "self", ".", "bone_name_from_index", "=", "{", "\n", "0", ":", "'Pelvis'", ",", "\n", "1", ":", "'L_Hip'", ",", "\n", "2", ":", "'R_Hip'", ",", "\n", "3", ":", "'Spine1'", ",", "\n", "4", ":", "'L_Knee'", ",", "\n", "5", ":", "'R_Knee'", ",", "\n", "6", ":", "'Spine2'", ",", "\n", "7", ":", "'L_Ankle'", ",", "\n", "8", ":", "'R_Ankle'", ",", "\n", "9", ":", "'Spine3'", ",", "\n", "10", ":", "'L_Foot'", ",", "\n", "11", ":", "'R_Foot'", ",", "\n", "12", ":", "'Neck'", ",", "\n", "13", ":", "'L_Collar'", ",", "\n", "14", ":", "'R_Collar'", ",", "\n", "15", ":", "'Head'", ",", "\n", "16", ":", "'L_Shoulder'", ",", "\n", "17", ":", "'R_Shoulder'", ",", "\n", "18", ":", "'L_Elbow'", ",", "\n", "19", ":", "'R_Elbow'", ",", "\n", "20", ":", "'L_Wrist'", ",", "\n", "21", ":", "'R_Wrist'", ",", "\n", "22", ":", "'L_Hand'", ",", "\n", "23", ":", "'R_Hand'", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.exports.blender_mocap.SMPL_Importer.Rodrigues": [[83, 91], ["numpy.linalg.norm", "numpy.cos", "numpy.asarray", "numpy.sin", "numpy.eye", "r.dot"], "methods", ["None"], ["", "def", "Rodrigues", "(", "self", ",", "rotvec", ")", ":", "\n", "        ", "theta", "=", "np", ".", "linalg", ".", "norm", "(", "rotvec", ")", "\n", "r", "=", "(", "rotvec", "/", "theta", ")", ".", "reshape", "(", "3", ",", "1", ")", "if", "theta", ">", "0.", "else", "rotvec", "\n", "cost", "=", "np", ".", "cos", "(", "theta", ")", "\n", "mat", "=", "np", ".", "asarray", "(", "[", "[", "0", ",", "-", "r", "[", "2", "]", ",", "r", "[", "1", "]", "]", ",", "\n", "[", "r", "[", "2", "]", ",", "0", ",", "-", "r", "[", "0", "]", "]", ",", "\n", "[", "-", "r", "[", "1", "]", ",", "r", "[", "0", "]", ",", "0", "]", "]", ")", "\n", "return", "(", "cost", "*", "np", ".", "eye", "(", "3", ")", "+", "(", "1", "-", "cost", ")", "*", "r", ".", "dot", "(", "r", ".", "T", ")", "+", "np", ".", "sin", "(", "theta", ")", "*", "mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.exports.blender_mocap.SMPL_Importer.process_pose": [[92, 127], ["numpy.array", "numpy.array", "enumerate", "numpy.array.reshape", "numpy.array.reshape", "blender_mocap.SMPL_Importer.Rodrigues", "mathutils.Vector", "mathutils.Matrix().to_quaternion", "mathutils.Quaternion", "mathutils.Quaternion", "mathutils.Quaternion", "mathutils.Quaternion", "mathutils.Quaternion", "math.radians", "math.radians", "math.radians", "math.radians", "math.radians", "mathutils.Matrix"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.Rodrigues"], ["", "def", "process_pose", "(", "self", ",", "pose", ",", "trans", ",", "pelvis_position", ")", ":", "\n", "        ", "pose", "=", "np", ".", "array", "(", "pose", ")", "\n", "trans", "=", "np", ".", "array", "(", "trans", ")", "\n", "if", "pose", ".", "shape", "[", "0", "]", "==", "72", ":", "\n", "            ", "rod_rots", "=", "pose", ".", "reshape", "(", "24", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "rod_rots", "=", "pose", ".", "reshape", "(", "26", ",", "3", ")", "\n", "\n", "", "mat_rots", "=", "[", "self", ".", "Rodrigues", "(", "rod_rot", ")", "for", "rod_rot", "in", "rod_rots", "]", "\n", "armature", "=", "bpy", ".", "data", ".", "objects", "[", "'Armature'", "]", "\n", "self", ".", "bones", "=", "armature", ".", "pose", ".", "bones", "\n", "self", ".", "bones", "[", "self", ".", "bone_name_from_index", "[", "0", "]", "]", ".", "location", "=", "Vector", "(", "\n", "(", "100", "*", "trans", "[", "1", "]", ",", "100", "*", "trans", "[", "2", "]", ",", "100", "*", "trans", "[", "0", "]", ")", ")", "-", "pelvis_position", "\n", "\n", "for", "index", ",", "mat_rot", "in", "enumerate", "(", "mat_rots", ",", "0", ")", ":", "\n", "            ", "if", "index", ">=", "24", ":", "\n", "                ", "continue", "\n", "\n", "", "bone", "=", "self", ".", "bones", "[", "self", ".", "bone_name_from_index", "[", "index", "]", "]", "\n", "\n", "bone_rotation", "=", "Matrix", "(", "mat_rot", ")", ".", "to_quaternion", "(", ")", "\n", "quat_x_90_cw", "=", "Quaternion", "(", "(", "1.0", ",", "0.0", ",", "0.0", ")", ",", "radians", "(", "-", "90", ")", ")", "\n", "quat_x_n135_cw", "=", "Quaternion", "(", "(", "1.0", ",", "0.0", ",", "0.0", ")", ",", "radians", "(", "-", "135", ")", ")", "\n", "quat_x_p45_cw", "=", "Quaternion", "(", "(", "1.0", ",", "0.0", ",", "0.0", ")", ",", "radians", "(", "45", ")", ")", "\n", "quat_y_90_cw", "=", "Quaternion", "(", "(", "0.0", ",", "1.0", ",", "0.0", ")", ",", "radians", "(", "-", "90", ")", ")", "\n", "quat_z_90_cw", "=", "Quaternion", "(", "(", "0.0", ",", "0.0", ",", "1.0", ")", ",", "radians", "(", "-", "90", ")", ")", "\n", "\n", "if", "index", "==", "0", ":", "\n", "# Rotate pelvis so that avatar stands upright and looks along negative Y avis", "\n", "                ", "bone", ".", "rotation_quaternion", "=", "(", "\n", "quat_x_90_cw", "@", "quat_z_90_cw", ")", "@", "bone_rotation", "\n", "", "else", ":", "\n", "                ", "bone", ".", "rotation_quaternion", "=", "bone_rotation", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.exports.blender_mocap.SMPL_Importer.process_poses": [[128, 144], ["bpy.ops.object.mode_set", "mathutils.Vector", "bpy.ops.object.mode_set", "numpy.array", "blender_mocap.SMPL_Importer.process_pose"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.process_pose"], ["", "def", "process_poses", "(", "self", ",", "tran", ",", "pose", ")", ":", "\n", "\n", "        ", "self", ".", "pose", "=", "pose", "\n", "self", ".", "tran", "=", "tran", "\n", "self", ".", "scene", "=", "bpy", ".", "data", ".", "scenes", "[", "'Scene'", "]", "\n", "\n", "ob", "=", "bpy", ".", "data", ".", "objects", "[", "'Armature'", "]", "\n", "self", ".", "armature", "=", "ob", ".", "data", "\n", "bpy", ".", "ops", ".", "object", ".", "mode_set", "(", "mode", "=", "'EDIT'", ")", "\n", "pelvis_bone", "=", "self", ".", "armature", ".", "edit_bones", "[", "self", ".", "bone_name_from_index", "[", "0", "]", "]", "\n", "pelvis_position", "=", "Vector", "(", "pelvis_bone", ".", "head", ")", "\n", "bpy", ".", "ops", ".", "object", ".", "mode_set", "(", "mode", "=", "'OBJECT'", ")", "\n", "\n", "offset", "=", "np", ".", "array", "(", "[", "self", ".", "tran", "[", "0", "]", ",", "0", ",", "self", ".", "tran", "[", "2", "]", "]", ")", "\n", "self", ".", "process_pose", "(", "pose", ",", "\n", "(", "tran", "-", "offset", ")", ",", "pelvis_position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.exports.blender_mocap.register": [[149, 159], ["bpy.utils.register_class", "wm.keyconfigs.addon.keymaps.new", "wm.keyconfigs.addon.keymaps.new.keymap_items.new", "addon_keymaps.append"], "function", ["None"], ["def", "register", "(", ")", ":", "\n", "    ", "bpy", ".", "utils", ".", "register_class", "(", "Connect", ")", "\n", "wm", "=", "bpy", ".", "context", ".", "window_manager", "\n", "kc", "=", "wm", ".", "keyconfigs", ".", "addon", "\n", "if", "kc", ":", "\n", "        ", "km", "=", "wm", ".", "keyconfigs", ".", "addon", ".", "keymaps", ".", "new", "(", "\n", "name", "=", "'3D View'", ",", "space_type", "=", "'VIEW_3D'", ")", "\n", "kmi", "=", "km", ".", "keymap_items", ".", "new", "(", "\n", "Connect", ".", "bl_idname", ",", "type", "=", "'W'", ",", "value", "=", "'PRESS'", ",", "ctrl", "=", "True", ")", "\n", "addon_keymaps", ".", "append", "(", "(", "km", ",", "kmi", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.exports.blender_mocap.unregister": [[161, 166], ["bpy.utils.unregister_class", "addon_keymaps.clear", "km.keymap_items.remove"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracking_utils.timer.Timer.clear"], ["", "", "def", "unregister", "(", ")", ":", "\n", "    ", "bpy", ".", "utils", ".", "unregister_class", "(", "Connect", ")", "\n", "for", "km", ",", "kmi", "in", "addon_keymaps", ":", "\n", "        ", "km", ".", "keymap_items", ".", "remove", "(", "kmi", ")", "\n", "", "addon_keymaps", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert_checkpoints.remove_prefix": [[6, 24], ["list", "print", "list", "print", "state_dict.keys", "state_dict.keys", "key.replace"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["def", "remove_prefix", "(", "state_dict", ",", "prefix", "=", "'module.'", ",", "remove_keys", "=", "[", "'_result_parser'", ",", "'_calc_loss'", "]", ")", ":", "\n", "    ", "keys", "=", "list", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "print", "(", "'orginal keys:'", ",", "keys", ")", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "exist_flag", "=", "True", "\n", "for", "rkey", "in", "remove_keys", ":", "\n", "            ", "if", "rkey", "in", "key", ":", "\n", "                ", "del", "state_dict", "[", "key", "]", "\n", "exist_flag", "=", "False", "\n", "", "", "if", "not", "exist_flag", ":", "\n", "            ", "continue", "\n", "", "if", "prefix", "in", "key", ":", "\n", "            ", "state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "''", ")", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "\n", "", "", "keys", "=", "list", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "print", "(", "'new keys:'", ",", "keys", ")", "\n", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.Rodrigues": [[125, 133], ["numpy.linalg.norm", "numpy.cos", "numpy.asarray", "numpy.sin", "numpy.eye", "r.dot"], "function", ["None"], ["def", "Rodrigues", "(", "rotvec", ")", ":", "\n", "    ", "theta", "=", "np", ".", "linalg", ".", "norm", "(", "rotvec", ")", "\n", "r", "=", "(", "rotvec", "/", "theta", ")", ".", "reshape", "(", "3", ",", "1", ")", "if", "theta", ">", "0.", "else", "rotvec", "\n", "cost", "=", "np", ".", "cos", "(", "theta", ")", "\n", "mat", "=", "np", ".", "asarray", "(", "[", "[", "0", ",", "-", "r", "[", "2", "]", ",", "r", "[", "1", "]", "]", ",", "\n", "[", "r", "[", "2", "]", ",", "0", ",", "-", "r", "[", "0", "]", "]", ",", "\n", "[", "-", "r", "[", "1", "]", ",", "r", "[", "0", "]", ",", "0", "]", "]", ")", "\n", "return", "(", "cost", "*", "np", ".", "eye", "(", "3", ")", "+", "(", "1", "-", "cost", ")", "*", "r", ".", "dot", "(", "r", ".", "T", ")", "+", "np", ".", "sin", "(", "theta", ")", "*", "mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.setup_scene": [[136, 152], ["bpy.ops.import_scene.fbx", "bpy.data.objects[].select_set", "bpy.ops.object.delete"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.pyrenderer.Py3DR.delete"], ["", "def", "setup_scene", "(", "model_path", ",", "fps_target", ")", ":", "\n", "    ", "scene", "=", "bpy", ".", "data", ".", "scenes", "[", "'Scene'", "]", "\n", "\n", "###########################", "\n", "# Engine independent setup", "\n", "###########################", "\n", "\n", "scene", ".", "render", ".", "fps", "=", "fps_target", "\n", "\n", "# Remove default cube", "\n", "if", "'Cube'", "in", "bpy", ".", "data", ".", "objects", ":", "\n", "        ", "bpy", ".", "data", ".", "objects", "[", "'Cube'", "]", ".", "select_set", "(", "True", ")", "\n", "bpy", ".", "ops", ".", "object", ".", "delete", "(", ")", "\n", "\n", "# Import gender specific .fbx template file", "\n", "", "bpy", ".", "ops", ".", "import_scene", ".", "fbx", "(", "filepath", "=", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.process_pose": [[155, 199], ["bones[].keyframe_insert", "enumerate", "pose.reshape", "pose.reshape", "convert2fbx.Rodrigues", "Vector", "Matrix().to_quaternion", "Quaternion", "Quaternion", "bone.keyframe_insert", "math.radians", "math.radians", "Matrix"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.Rodrigues"], ["", "def", "process_pose", "(", "current_frame", ",", "pose", ",", "trans", ",", "pelvis_position", ")", ":", "\n", "\n", "    ", "if", "pose", ".", "shape", "[", "0", "]", "==", "72", ":", "\n", "        ", "rod_rots", "=", "pose", ".", "reshape", "(", "24", ",", "3", ")", "\n", "", "else", ":", "\n", "        ", "rod_rots", "=", "pose", ".", "reshape", "(", "26", ",", "3", ")", "\n", "\n", "", "mat_rots", "=", "[", "Rodrigues", "(", "rod_rot", ")", "for", "rod_rot", "in", "rod_rots", "]", "\n", "\n", "# Set the location of the Pelvis bone to the translation parameter", "\n", "armature", "=", "bpy", ".", "data", ".", "objects", "[", "'Armature'", "]", "\n", "bones", "=", "armature", ".", "pose", ".", "bones", "\n", "\n", "# Pelvis: X-Right, Y-Up, Z-Forward (Blender -Y)", "\n", "root_location", "=", "Vector", "(", "\n", "(", "100", "*", "trans", "[", "1", "]", ",", "100", "*", "trans", "[", "2", "]", ",", "100", "*", "trans", "[", "0", "]", ")", ")", "-", "pelvis_position", "\n", "# Set absolute pelvis location relative to Pelvis bone head", "\n", "bones", "[", "bone_name_from_index", "[", "0", "]", "]", ".", "location", "=", "root_location", "\n", "\n", "# bones['Root'].location = Vector(trans)", "\n", "bones", "[", "bone_name_from_index", "[", "0", "]", "]", ".", "keyframe_insert", "(", "'location'", ",", "frame", "=", "current_frame", ")", "\n", "\n", "for", "index", ",", "mat_rot", "in", "enumerate", "(", "mat_rots", ",", "0", ")", ":", "\n", "        ", "if", "index", ">=", "24", ":", "\n", "            ", "continue", "\n", "\n", "", "bone", "=", "bones", "[", "bone_name_from_index", "[", "index", "]", "]", "\n", "\n", "bone_rotation", "=", "Matrix", "(", "mat_rot", ")", ".", "to_quaternion", "(", ")", "\n", "quat_x_90_cw", "=", "Quaternion", "(", "(", "1.0", ",", "0.0", ",", "0.0", ")", ",", "radians", "(", "-", "90", ")", ")", "\n", "#quat_x_n135_cw = Quaternion((1.0, 0.0, 0.0), radians(-135))", "\n", "#quat_x_p45_cw = Quaternion((1.0, 0.0, 0.0), radians(45))", "\n", "#quat_y_90_cw = Quaternion((0.0, 1.0, 0.0), radians(-90))", "\n", "quat_z_90_cw", "=", "Quaternion", "(", "(", "0.0", ",", "0.0", ",", "1.0", ")", ",", "radians", "(", "-", "90", ")", ")", "\n", "\n", "if", "index", "==", "0", ":", "\n", "# Rotate pelvis so that avatar stands upright and looks along negative Y avis", "\n", "            ", "bone", ".", "rotation_quaternion", "=", "(", "quat_x_90_cw", "@", "quat_z_90_cw", ")", "@", "bone_rotation", "\n", "", "else", ":", "\n", "           ", "bone", ".", "rotation_quaternion", "=", "bone_rotation", "\n", "\n", "", "bone", ".", "keyframe_insert", "(", "'rotation_quaternion'", ",", "frame", "=", "current_frame", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.process_poses": [[202, 294], ["print", "print", "print", "print", "print", "print", "convert2fbx.setup_scene", "int", "int", "bpy.ops.object.mode_set", "Vector", "bpy.ops.object.mode_set", "numpy.array", "len", "list", "numpy.array", "numpy.array", "print", "print", "sorted", "enumerate", "bone_name_from_index.items", "print", "scene.frame_set", "convert2fbx.process_pose", "numpy.load", "numpy.load", "sequence_results.keys", "print", "int", "list", "numpy.zeros", "numpy.zeros", "bone_name_from_index.items", "input", "frame_results.keys", "bone_name_from_index_character.items", "print", "sys.exit", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.setup_scene", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.process_pose", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "def", "process_poses", "(", "\n", "input_path", ",", "\n", "gender", ",", "\n", "fps_source", ",", "\n", "fps_target", ",", "\n", "subject_id", "=", "-", "1", ")", ":", "\n", "\n", "    ", "print", "(", "'Processing: '", "+", "input_path", ")", "\n", "\n", "frame_results", "=", "np", ".", "load", "(", "input_path", ",", "allow_pickle", "=", "True", ")", "[", "'results'", "]", "[", "(", ")", "]", "\n", "sequence_results", "=", "np", ".", "load", "(", "input_path", ",", "allow_pickle", "=", "True", ")", "[", "'sequence_results'", "]", "[", "(", ")", "]", "\n", "\n", "poses", ",", "trans", "=", "[", "]", ",", "[", "]", "\n", "\n", "if", "len", "(", "sequence_results", ")", ">", "0", ":", "\n", "        ", "subject_ids", "=", "list", "(", "sequence_results", ".", "keys", "(", ")", ")", "\n", "if", "subject_id", "==", "-", "1", "or", "subject_id", "not", "in", "subject_ids", ":", "\n", "            ", "print", "(", "'Get motion sequence with subject IDs:'", ",", "subject_ids", ")", "\n", "subject_id", "=", "int", "(", "input", "(", "'Please select one subject ID (int):'", ")", ")", "\n", "", "poses", "=", "np", ".", "array", "(", "sequence_results", "[", "subject_id", "]", "[", "'smpl_thetas'", "]", ")", "\n", "trans", "=", "np", ".", "array", "(", "sequence_results", "[", "subject_id", "]", "[", "'cam_trans'", "]", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Missing tracking IDs in results. Using the first pose results for animation.'", ")", "\n", "print", "(", "'To get the tracking IDs, please use temporal optimization during inference.'", ")", "\n", "frame_names", "=", "sorted", "(", "list", "(", "frame_results", ".", "keys", "(", ")", ")", ")", "\n", "poses", ",", "trans", "=", "np", ".", "zeros", "(", "(", "len", "(", "frame_names", ")", ",", "72", ")", ")", ",", "np", ".", "zeros", "(", "(", "len", "(", "frame_names", ")", ",", "3", ")", ")", "\n", "for", "inds", ",", "frame_name", "in", "enumerate", "(", "frame_names", ")", ":", "\n", "            ", "poses", "[", "inds", "]", "=", "frame_results", "[", "frame_name", "]", "[", "'smpl_thetas'", "]", "[", "0", "]", "\n", "trans", "[", "inds", "]", "=", "frame_results", "[", "frame_name", "]", "[", "'cam_trans'", "]", "[", "0", "]", "\n", "\n", "", "", "if", "gender", "==", "'female'", ":", "\n", "        ", "model_path", "=", "female_model_path", "\n", "for", "k", ",", "v", "in", "bone_name_from_index", ".", "items", "(", ")", ":", "\n", "            ", "bone_name_from_index", "[", "k", "]", "=", "'f_avg_'", "+", "v", "\n", "", "", "elif", "gender", "==", "'male'", ":", "\n", "        ", "model_path", "=", "male_model_path", "\n", "for", "k", ",", "v", "in", "bone_name_from_index", ".", "items", "(", ")", ":", "\n", "            ", "bone_name_from_index", "[", "k", "]", "=", "'m_avg_'", "+", "v", "\n", "", "", "elif", "gender", "==", "'character'", ":", "\n", "        ", "model_path", "=", "character_model_path", "\n", "for", "k", ",", "v", "in", "bone_name_from_index_character", ".", "items", "(", ")", ":", "\n", "            ", "bone_name_from_index", "[", "k", "]", "=", "'mixamorig1:'", "+", "v", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'ERROR: Unsupported gender: '", "+", "gender", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "# Limit target fps to source fps", "\n", "", "if", "fps_target", ">", "fps_source", ":", "\n", "        ", "fps_target", "=", "fps_source", "\n", "\n", "", "print", "(", "'Gender:'", ",", "gender", ")", "\n", "print", "(", "'Number of source poses: '", ",", "poses", ".", "shape", "[", "0", "]", ")", "\n", "print", "(", "'Source frames-per-second: '", ",", "fps_source", ")", "\n", "print", "(", "'Target frames-per-second: '", ",", "fps_target", ")", "\n", "print", "(", "'--------------------------------------------------'", ")", "\n", "\n", "setup_scene", "(", "model_path", ",", "fps_target", ")", "\n", "\n", "scene", "=", "bpy", ".", "data", ".", "scenes", "[", "'Scene'", "]", "\n", "sample_rate", "=", "int", "(", "fps_source", "/", "fps_target", ")", "\n", "scene", ".", "frame_end", "=", "(", "int", ")", "(", "poses", ".", "shape", "[", "0", "]", "/", "sample_rate", ")", "\n", "\n", "# Retrieve pelvis world position.", "\n", "# Unit is [cm] due to Armature scaling.", "\n", "# Need to make copy since reference will change when bone location is modified.", "\n", "armaturee", "=", "bpy", ".", "data", ".", "armatures", "[", "0", "]", "\n", "ob", "=", "bpy", ".", "data", ".", "objects", "[", "'Armature'", "]", "\n", "armature", "=", "ob", ".", "data", "\n", "\n", "bpy", ".", "ops", ".", "object", ".", "mode_set", "(", "mode", "=", "'EDIT'", ")", "\n", "# get specific bone name 'Bone'", "\n", "pelvis_bone", "=", "armature", ".", "edit_bones", "[", "bone_name_from_index", "[", "0", "]", "]", "\n", "# pelvis_bone = armature.edit_bones['f_avg_Pelvis']", "\n", "pelvis_position", "=", "Vector", "(", "pelvis_bone", ".", "head", ")", "\n", "bpy", ".", "ops", ".", "object", ".", "mode_set", "(", "mode", "=", "'OBJECT'", ")", "\n", "\n", "source_index", "=", "0", "\n", "frame", "=", "1", "\n", "\n", "offset", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "\n", "while", "source_index", "<", "poses", ".", "shape", "[", "0", "]", ":", "\n", "        ", "print", "(", "'Adding pose: '", "+", "str", "(", "source_index", ")", ")", "\n", "\n", "# Go to new frame", "\n", "scene", ".", "frame_set", "(", "frame", ")", "\n", "\n", "process_pose", "(", "frame", ",", "poses", "[", "source_index", "]", ",", "(", "trans", "[", "source_index", "]", "-", "offset", ")", ",", "pelvis_position", ")", "\n", "source_index", "+=", "sample_rate", "\n", "frame", "+=", "1", "\n", "\n", "", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.rotate_armature": [[295, 317], ["bpy.ops.object.posemode_toggle", "bpy.ops.transform.rotate", "bpy.ops.object.posemode_toggle"], "function", ["None"], ["", "def", "rotate_armature", "(", "use", ")", ":", "\n", "    ", "if", "use", "==", "True", ":", "\n", "# Switch to Pose Mode", "\n", "        ", "bpy", ".", "ops", ".", "object", ".", "posemode_toggle", "(", ")", "\n", "\n", "# Find the Armature & Bones", "\n", "ob", "=", "bpy", ".", "data", ".", "objects", "[", "'Armature'", "]", "\n", "armature", "=", "ob", ".", "data", "\n", "bones", "=", "armature", ".", "bones", "\n", "rootbone", "=", "bones", "[", "0", "]", "\n", "\n", "# Find the Root bone", "\n", "for", "bone", "in", "bones", ":", "\n", "            ", "if", "\"avg_root\"", "in", "bone", ".", "name", ":", "\n", "                ", "rootbone", "=", "bone", "\n", "\n", "", "", "rootbone", ".", "select", "=", "True", "\n", "\n", "# Rotate the Root bone by 90 euler degrees on the Y axis. Set --rotate_Y=False if the rotation is not needed.", "\n", "bpy", ".", "ops", ".", "transform", ".", "rotate", "(", "value", "=", "1.5708", ",", "orient_axis", "=", "'Y'", ",", "orient_type", "=", "'GLOBAL'", ",", "orient_matrix", "=", "(", "(", "1", ",", "0", ",", "0", ")", ",", "(", "0", ",", "1", ",", "0", ")", ",", "(", "0", ",", "0", ",", "1", ")", ")", ",", "orient_matrix_type", "=", "'GLOBAL'", ",", "constraint_axis", "=", "(", "False", ",", "True", ",", "False", ")", ",", "mirror", "=", "True", ",", "use_proportional_edit", "=", "False", ",", "proportional_edit_falloff", "=", "'SMOOTH'", ",", "proportional_size", "=", "1", ",", "use_proportional_connected", "=", "False", ",", "use_proportional_projected", "=", "False", ",", "release_confirm", "=", "True", ")", "\n", "# Revert back to Object Mode", "\n", "bpy", ".", "ops", ".", "object", ".", "posemode_toggle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.export_animated_mesh": [[320, 348], ["os.path.dirname", "convert2fbx.rotate_armature", "bpy.ops.object.select_all", "bpy.data.objects[].select_set", "bpy.data.objects[].children[].select_set", "output_path.endswith", "os.path.isdir", "os.makedirs", "print", "bpy.ops.export_scene.gltf", "output_path.endswith", "print", "bpy.ops.export_scene.fbx", "output_path.endswith", "bpy.ops.export_anim.bvh", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tools.convert2fbx.rotate_armature", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["", "", "def", "export_animated_mesh", "(", "output_path", ")", ":", "\n", "# Create output directory if needed", "\n", "    ", "output_dir", "=", "os", ".", "path", ".", "dirname", "(", "output_path", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Fix Rotation", "\n", "", "rotate_armature", "(", "args", ".", "rotate_y", ")", "\n", "\n", "# Select only skinned mesh and rig", "\n", "bpy", ".", "ops", ".", "object", ".", "select_all", "(", "action", "=", "'DESELECT'", ")", "\n", "bpy", ".", "data", ".", "objects", "[", "'Armature'", "]", ".", "select_set", "(", "True", ")", "\n", "bpy", ".", "data", ".", "objects", "[", "'Armature'", "]", ".", "children", "[", "0", "]", ".", "select_set", "(", "True", ")", "\n", "\n", "if", "output_path", ".", "endswith", "(", "'.glb'", ")", ":", "\n", "        ", "print", "(", "'Exporting to glTF binary (.glb)'", ")", "\n", "# Currently exporting without shape/pose shapes for smaller file sizes", "\n", "bpy", ".", "ops", ".", "export_scene", ".", "gltf", "(", "filepath", "=", "output_path", ",", "export_format", "=", "'GLB'", ",", "export_selected", "=", "True", ",", "export_morph", "=", "False", ")", "\n", "", "elif", "output_path", ".", "endswith", "(", "'.fbx'", ")", ":", "\n", "        ", "print", "(", "'Exporting to FBX binary (.fbx)'", ")", "\n", "bpy", ".", "ops", ".", "export_scene", ".", "fbx", "(", "filepath", "=", "output_path", ",", "use_selection", "=", "True", ",", "add_leaf_bones", "=", "False", ")", "\n", "", "elif", "output_path", ".", "endswith", "(", "'.bvh'", ")", ":", "\n", "        ", "bpy", ".", "ops", ".", "export_anim", ".", "bvh", "(", "filepath", "=", "output_path", ",", "root_transform_only", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'ERROR: Unsupported export format: '", "+", "output_path", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.pyrenderer.Py3DR.__init__": [[26, 40], ["pyrender.OffscreenRenderer", "trimesh.transformations.rotation_matrix", "numpy.radians", "numpy.tan", "numpy.radians", "max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "FOV", "=", "60", ",", "height", "=", "512", ",", "width", "=", "512", ",", "focal_length", "=", "None", ")", ":", "\n", "        ", "self", ".", "renderer", "=", "pyrender", ".", "OffscreenRenderer", "(", "height", ",", "width", ")", "\n", "if", "focal_length", "is", "None", ":", "\n", "            ", "self", ".", "focal_length", "=", "1", "/", "(", "np", ".", "tan", "(", "np", ".", "radians", "(", "FOV", "/", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "focal_length", "=", "focal_length", "/", "max", "(", "height", ",", "width", ")", "*", "2", "\n", "", "self", ".", "rot", "=", "trimesh", ".", "transformations", ".", "rotation_matrix", "(", "\n", "np", ".", "radians", "(", "180", ")", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "colors", "=", "[", "\n", "(", ".7", ",", ".7", ",", ".6", ",", "1.", ")", ",", "\n", "(", ".7", ",", ".5", ",", ".5", ",", "1.", ")", ",", "# Pink", "\n", "(", ".5", ",", ".5", ",", ".7", ",", "1.", ")", ",", "# Blue", "\n", "(", ".5", ",", ".55", ",", ".3", ",", "1.", ")", ",", "# capsule", "\n", "(", ".3", ",", ".5", ",", ".55", ",", "1.", ")", ",", "# Yellow", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.pyrenderer.Py3DR.__call__": [[42, 92], ["pyrender.Scene", "pyrender.Scene.add", "pyrender.DirectionalLight", "range", "pyrenderer.Py3DR.renderer.render", "color.astype.astype.astype", "numpy.eye", "pyrender.camera.IntrinsicsCamera", "pyrender.camera.OrthographicCamera", "len", "trimesh.Trimesh", "pyrender.Mesh.from_trimesh.apply_transform", "pyrender.MetallicRoughnessMaterial", "pyrender.Mesh.from_trimesh", "pyrender.Scene.add", "pyrenderer.add_light", "numpy.abs().max", "range", "max", "numpy.abs", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.Sim3DR.render", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.pyrenderer.add_light"], ["", "def", "__call__", "(", "self", ",", "vertices", ",", "triangles", ",", "image", ",", "mesh_colors", "=", "None", ",", "f", "=", "None", ",", "persp", "=", "True", ",", "camera_pose", "=", "None", ")", ":", "\n", "        ", "img_height", ",", "img_width", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "self", ".", "renderer", ".", "viewport_height", "=", "img_height", "\n", "self", ".", "renderer", ".", "viewport_width", "=", "img_width", "\n", "# Create a scene for each image and render all meshes", "\n", "scene", "=", "pyrender", ".", "Scene", "(", "bg_color", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "ambient_light", "=", "(", "0.3", ",", "0.3", ",", "0.3", ")", ")", "\n", "\n", "if", "camera_pose", "is", "None", ":", "\n", "            ", "camera_pose", "=", "np", ".", "eye", "(", "4", ")", "\n", "", "if", "persp", ":", "\n", "            ", "if", "f", "is", "None", ":", "\n", "                ", "f", "=", "self", ".", "focal_length", "*", "max", "(", "img_height", ",", "img_width", ")", "/", "2", "\n", "", "camera", "=", "pyrender", ".", "camera", ".", "IntrinsicsCamera", "(", "fx", "=", "f", ",", "fy", "=", "f", ",", "cx", "=", "img_width", "/", "2.", ",", "cy", "=", "img_height", "/", "2.", ")", "\n", "", "else", ":", "\n", "            ", "xmag", "=", "ymag", "=", "np", ".", "abs", "(", "vertices", "[", ":", ",", ":", ",", ":", "2", "]", ")", ".", "max", "(", ")", "*", "1.05", "\n", "camera", "=", "pyrender", ".", "camera", ".", "OrthographicCamera", "(", "xmag", ",", "ymag", ",", "znear", "=", "0.05", ",", "zfar", "=", "100.0", ",", "name", "=", "None", ")", "\n", "", "scene", ".", "add", "(", "camera", ",", "pose", "=", "camera_pose", ")", "\n", "\n", "if", "len", "(", "triangles", ".", "shape", ")", "==", "2", ":", "\n", "            ", "triangles", "=", "[", "triangles", "for", "_", "in", "range", "(", "len", "(", "vertices", ")", ")", "]", "\n", "\n", "# Create light source", "\n", "", "light", "=", "pyrender", ".", "DirectionalLight", "(", "color", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "intensity", "=", "0.5", ")", "\n", "# for every person in the scene", "\n", "for", "n", "in", "range", "(", "vertices", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "mesh", "=", "trimesh", ".", "Trimesh", "(", "vertices", "[", "n", "]", ",", "triangles", "[", "n", "]", ")", "\n", "mesh", ".", "apply_transform", "(", "self", ".", "rot", ")", "\n", "if", "mesh_colors", "is", "None", ":", "\n", "                ", "mesh_color", "=", "self", ".", "colors", "[", "n", "%", "len", "(", "self", ".", "colors", ")", "]", "\n", "", "else", ":", "\n", "                ", "mesh_color", "=", "mesh_colors", "[", "n", "%", "len", "(", "mesh_colors", ")", "]", "\n", "", "material", "=", "pyrender", ".", "MetallicRoughnessMaterial", "(", "\n", "metallicFactor", "=", "0.2", ",", "\n", "alphaMode", "=", "'OPAQUE'", ",", "\n", "baseColorFactor", "=", "mesh_color", ")", "\n", "mesh", "=", "pyrender", ".", "Mesh", ".", "from_trimesh", "(", "mesh", ",", "material", "=", "material", ")", "\n", "scene", ".", "add", "(", "mesh", ",", "'mesh'", ")", "\n", "\n", "add_light", "(", "scene", ",", "light", ")", "\n", "# Alpha channel was not working previously need to check again", "\n", "# Until this is fixed use hack with depth image to get the opacity", "\n", "", "color", ",", "rend_depth", "=", "self", ".", "renderer", ".", "render", "(", "scene", ",", "flags", "=", "pyrender", ".", "RenderFlags", ".", "RGBA", ")", "\n", "\n", "color", "=", "color", ".", "astype", "(", "np", ".", "float32", ")", "\n", "valid_mask", "=", "(", "rend_depth", ">", "0", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "output_image", "=", "(", "color", "[", ":", ",", ":", ",", ":", "3", "]", "*", "valid_mask", "+", "\n", "(", "1", "-", "valid_mask", ")", "*", "image", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "output_image", ",", "rend_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.pyrenderer.Py3DR.delete": [[93, 95], ["pyrenderer.Py3DR.renderer.delete"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.pyrenderer.Py3DR.delete"], ["", "def", "delete", "(", "self", ")", ":", "\n", "        ", "self", ".", "renderer", ".", "delete", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.pyrenderer.add_light": [[14, 23], ["numpy.eye", "numpy.array", "scene.add", "numpy.array", "scene.add", "numpy.array", "scene.add"], "function", ["None"], ["def", "add_light", "(", "scene", ",", "light", ")", ":", "\n", "# Use 3 directional lights  ", "\n", "    ", "light_pose", "=", "np", ".", "eye", "(", "4", ")", "\n", "light_pose", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "[", "0", ",", "-", "1", ",", "1", "]", ")", "\n", "scene", ".", "add", "(", "light", ",", "pose", "=", "light_pose", ")", "\n", "light_pose", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "1", "]", ")", "\n", "scene", ".", "add", "(", "light", ",", "pose", "=", "light_pose", ")", "\n", "light_pose", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "2", "]", ")", "\n", "scene", ".", "add", "(", "light", ",", "pose", "=", "light_pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.main.setup_renderer": [[11, 22], ["Sim3DR", "Py3DR", "O3DDR"], "function", ["None"], ["from", ".", "utils", "import", "img_preprocess", ",", "create_OneEuroFilter", ",", "euclidean_distance", ",", "check_filter_state", ",", "time_cost", ",", "download_model", ",", "determine_device", ",", "ResultSaver", ",", "WebcamVideoStream", ",", "convert_cam_to_3d_trans", ",", "wait_func", ",", "collect_frame_path", ",", "progress_bar", ",", "get_tracked_ids", ",", "smooth_results", ",", "convert_tensor2numpy", ",", "save_video_results", "\n", "from", "vis_human", "import", "setup_renderer", ",", "rendering_romp_bev_results", "\n", "from", ".", "post_parser", "import", "CenterMap", "\n", "\n", "def", "romp_settings", "(", "input_args", "=", "sys", ".", "argv", "[", "1", ":", "]", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'ROMP: Monocular, One-stage, Regression of Multiple 3D People'", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'image'", ",", "help", "=", "'Inferece mode, including image, video, webcam'", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--input'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Path to the input image / video'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--save_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'ROMP_results'", ")", ",", "help", "=", "'Path to save the results'", ")", "\n", "parser", ".", "add_argument", "(", "'--GPU'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'The gpu device number to run the inference on. If GPU=-1, then running in cpu mode'", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.main.rendering_romp_bev_results": [[23, 113], ["outputs[].cpu().numpy().astype", "numpy.concatenate", "numpy.ones", "torch.sort().indices.numpy", "[].cpu().numpy", "vis_utils.draw_skeleton_multiperson", "result_image.append", "vis_utils.Plotter3dPoses", "vis_utils.Plotter3dPoses.plot", "result_image.append", "enumerate", "enumerate", "outputs[].cpu().numpy", "vis_utils.mesh_color_trackID", "vis_utils.mesh_color_left2right", "numpy.array", "renderer", "result_image.append", "vis_utils.rotate_view_weak_perspective", "renderer", "result_image.append", "vis_utils.rotate_view_weak_perspective", "renderer", "result_image.append", "cam_trans.unsqueeze", "renderer", "result_image.append", "vis_utils.rotate_view_perspective", "renderer", "result_image.append", "vis_utils.rotate_view_perspective", "renderer", "result_image.append", "cam_trans.unsqueeze", "vis_utils.rendering_mesh_rotating_view", "time.strftime", "os.path.join", "cv2.VideoWriter", "cv2.VideoWriter.release", "print", "copy.deepcopy", "cv2.putText", "cv2.putText", "[].cpu", "cam_trans.unsqueeze", "verts_bird_view.cpu().numpy", "verts_side_view.cpu().numpy", "verts_tran.cpu().numpy", "verts_bird_view.cpu().numpy", "cv2.resize", "verts_side_view.cpu().numpy", "cv2.resize", "time.localtime", "os.path.expanduser", "cv2.VideoWriter_fourcc", "cv2.VideoWriter.write", "outputs[].cpu().numpy", "outputs[].cpu().numpy", "tuple", "outputs[].cpu().numpy", "tuple", "outputs[].cpu", "torch.sort", "kp.astype", "kp.astype", "range", "cam_trans[].cpu", "verts_bird_view.cpu", "verts_side_view.cpu", "verts_tran.cpu", "verts_bird_view.cpu", "verts_side_view.cpu", "int", "outputs[].cpu", "outputs[].cpu", "outputs[].cpu", "len", "round", "time.time", "cam_trans.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses.plot", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.mesh_color_trackID", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.mesh_color_left2right", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.rotate_view_weak_perspective", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.rotate_view_weak_perspective", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.rotate_view_perspective", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.rotate_view_perspective", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.rendering_mesh_rotating_view", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write"], ["parser", ".", "add_argument", "(", "'--onnx'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to use ONNX for acceleration.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--temporal_optimize'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to use OneEuro filter to smooth the results'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "help", "=", "'The confidence threshold of positive detection in 2D human body center heatmap.'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_largest'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to show the largest person only'", ")", "\n", "parser", ".", "add_argument", "(", "'-sc'", ",", "'--smooth_coeff'", ",", "type", "=", "float", ",", "default", "=", "3.", ",", "help", "=", "'The smoothness coeff of OneEuro filter, the smaller, the smoother.'", ")", "\n", "parser", ".", "add_argument", "(", "'--calc_smpl'", ",", "action", "=", "'store_false'", ",", "help", "=", "'Whether to calculate the smpl mesh from estimated SMPL parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'--render_mesh'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to render the estimated 3D mesh mesh to image'", ")", "\n", "parser", ".", "add_argument", "(", "'--renderer'", ",", "type", "=", "str", ",", "default", "=", "'sim3dr'", ",", "help", "=", "'Choose the renderer for visualizaiton: pyrender (great but slow), sim3dr (fine but fast)'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to show the rendered results'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_items'", ",", "type", "=", "str", ",", "default", "=", "'mesh'", ",", "help", "=", "'The items to visualized, including mesh,pj2d,j3d,mesh_bird_view,mesh_side_view,center_conf. splited with ,'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_video'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to save the video results'", ")", "\n", "parser", ".", "add_argument", "(", "'--frame_rate'", ",", "type", "=", "int", ",", "default", "=", "24", ",", "help", "=", "'The frame_rate of saved video results'", ")", "\n", "parser", ".", "add_argument", "(", "'--smpl_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'.romp'", ",", "'smpl_packed_info.pth'", ")", ",", "help", "=", "'The path of smpl model file'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'.romp'", ",", "'ROMP.pkl'", ")", ",", "help", "=", "'The path of ROMP checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_onnx_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'.romp'", ",", "'ROMP.onnx'", ")", ",", "help", "=", "'The path of ROMP onnx checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--root_align'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'Please set this config as True to use the ROMP checkpoints trained by yourself.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "input_args", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "GPU", "=", "-", "1", "\n", "args", ".", "temporal_optimize", "=", "False", "\n", "", "if", "args", ".", "show", ":", "\n", "        ", "args", ".", "render_mesh", "=", "True", "\n", "", "if", "args", ".", "render_mesh", "or", "args", ".", "show_largest", ":", "\n", "        ", "args", ".", "calc_smpl", "=", "True", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "smpl_path", ")", ":", "\n", "        ", "smpl_url", "=", "'https://github.com/Arthur151/ROMP/releases/download/V2.0/smpl_packed_info.pth'", "\n", "download_model", "(", "smpl_url", ",", "args", ".", "smpl_path", ",", "'SMPL'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "model_path", ")", ":", "\n", "        ", "romp_url", "=", "'https://github.com/Arthur151/ROMP/releases/download/V2.0/ROMP.pkl'", "\n", "download_model", "(", "romp_url", ",", "args", ".", "model_path", ",", "'ROMP'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "model_onnx_path", ")", "and", "args", ".", "onnx", ":", "\n", "        ", "romp_onnx_url", "=", "'https://github.com/Arthur151/ROMP/releases/download/V2.0/ROMP.onnx'", "\n", "download_model", "(", "romp_onnx_url", ",", "args", ".", "model_onnx_path", ",", "'ROMP'", ")", "\n", "", "return", "args", "\n", "\n", "", "default_settings", "=", "romp_settings", "(", "input_args", "=", "[", "]", ")", "\n", "\n", "class", "ROMP", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "romp_settings", ")", ":", "\n", "        ", "super", "(", "ROMP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "settings", "=", "romp_settings", "\n", "self", ".", "tdevice", "=", "determine_device", "(", "self", ".", "settings", ".", "GPU", ")", "\n", "self", ".", "_build_model_", "(", ")", "\n", "self", ".", "_initilization_", "(", ")", "\n", "\n", "", "def", "_build_model_", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "settings", ".", "onnx", ":", "\n", "            ", "model", "=", "ROMPv1", "(", ")", ".", "eval", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "settings", ".", "model_path", ",", "map_location", "=", "self", ".", "tdevice", ")", ")", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "tdevice", ")", "\n", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "onnxruntime", "\n", "", "except", ":", "\n", "                ", "print", "(", "'To use onnx model, we need to install the onnxruntime python package. Please install it by youself if failed!'", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "os", ".", "system", "(", "'pip install onnxruntime'", ")", "\n", "", "else", ":", "\n", "                    ", "os", ".", "system", "(", "'pip install onnxruntime-gpu'", ")", "\n", "", "import", "onnxruntime", "\n", "", "print", "(", "'creating onnx model'", ")", "\n", "self", ".", "ort_session", "=", "onnxruntime", ".", "InferenceSession", "(", "self", ".", "settings", ".", "model_onnx_path", ",", "providers", "=", "[", "'TensorrtExecutionProvider'", ",", "'CUDAExecutionProvider'", ",", "'CPUExecutionProvider'", "]", ")", "\n", "print", "(", "'created!'", ")", "\n", "\n", "", "", "def", "_initilization_", "(", "self", ")", ":", "\n", "        ", "self", ".", "centermap_parser", "=", "CenterMap", "(", "conf_thresh", "=", "self", ".", "settings", ".", "center_thresh", ")", "\n", "\n", "if", "self", ".", "settings", ".", "calc_smpl", ":", "\n", "            ", "self", ".", "smpl_parser", "=", "SMPL_parser", "(", "self", ".", "settings", ".", "smpl_path", ")", ".", "to", "(", "self", ".", "tdevice", ")", "\n", "\n", "", "if", "self", ".", "settings", ".", "temporal_optimize", ":", "\n", "            ", "self", ".", "_initialize_optimization_tools_", "(", ")", "\n", "\n", "", "if", "self", ".", "settings", ".", "render_mesh", ":", "\n", "            ", "self", ".", "visualize_items", "=", "self", ".", "settings", ".", "show_items", ".", "split", "(", "','", ")", "\n", "self", ".", "renderer", "=", "setup_renderer", "(", "name", "=", "self", ".", "settings", ".", "renderer", ")", "\n", "\n", "", "", "def", "single_image_forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "input_image", ",", "image_pad_info", "=", "img_preprocess", "(", "image", ")", "\n", "if", "self", ".", "settings", ".", "onnx", ":", "\n", "            ", "center_maps", ",", "params_maps", "=", "self", ".", "ort_session", ".", "run", "(", "None", ",", "{", "'image'", ":", "input_image", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "}", ")", "\n", "center_maps", ",", "params_maps", "=", "torch", ".", "from_numpy", "(", "center_maps", ")", ".", "to", "(", "self", ".", "tdevice", ")", ",", "torch", ".", "from_numpy", "(", "params_maps", ")", ".", "to", "(", "self", ".", "tdevice", ")", "\n", "", "else", ":", "\n", "            ", "center_maps", ",", "params_maps", "=", "self", ".", "model", "(", "input_image", ".", "to", "(", "self", ".", "tdevice", ")", ")", "\n", "", "params_maps", "[", ":", ",", "0", "]", "=", "torch", ".", "pow", "(", "1.1", ",", "params_maps", "[", ":", ",", "0", "]", ")", "\n", "parsed_results", "=", "parsing_outputs", "(", "center_maps", ",", "params_maps", ",", "self", ".", "centermap_parser", ")", "\n", "return", "parsed_results", ",", "image_pad_info", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses.__init__": [[275, 292], ["numpy.array", "numpy.float32", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "axes.append", "axes.append", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "canvas_size", "=", "(", "512", ",", "512", ")", ",", "origin", "=", "(", "0.5", ",", "0.5", ")", ",", "scale", "=", "200", ")", ":", "\n", "        ", "self", ".", "canvas_size", "=", "canvas_size", "\n", "self", ".", "origin", "=", "np", ".", "array", "(", "[", "origin", "[", "1", "]", "*", "canvas_size", "[", "1", "]", ",", "origin", "[", "0", "]", "*", "canvas_size", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "# x, y", "\n", "self", ".", "scale", "=", "np", ".", "float32", "(", "scale", ")", "\n", "self", ".", "theta", ",", "self", ".", "phi", "=", "0", ",", "np", ".", "pi", "/", "2", "#np.pi/4, -np.pi/6", "\n", "axis_length", "=", "200", "\n", "axes", "=", "[", "\n", "np", ".", "array", "(", "[", "[", "-", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", ",", "0", "]", ",", "[", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "-", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", ",", "0", "]", ",", "[", "-", "axis_length", "/", "2", ",", "axis_length", "/", "2", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "[", "-", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", ",", "0", "]", ",", "[", "-", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", ",", "axis_length", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "]", "\n", "step", "=", "20", "\n", "for", "step_id", "in", "range", "(", "axis_length", "//", "step", "+", "1", ")", ":", "# add grid", "\n", "            ", "axes", ".", "append", "(", "np", ".", "array", "(", "[", "[", "-", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", "+", "step_id", "*", "step", ",", "0", "]", ",", "\n", "[", "axis_length", "/", "2", ",", "-", "axis_length", "/", "2", "+", "step_id", "*", "step", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "axes", ".", "append", "(", "np", ".", "array", "(", "[", "[", "-", "axis_length", "/", "2", "+", "step_id", "*", "step", ",", "-", "axis_length", "/", "2", ",", "0", "]", ",", "\n", "[", "-", "axis_length", "/", "2", "+", "step_id", "*", "step", ",", "axis_length", "/", "2", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "self", ".", "axes", "=", "np", ".", "array", "(", "axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses.plot": [[293, 300], ["vis_utils.Plotter3dPoses._get_rotation", "zip", "vis_utils.Plotter3dPoses._plot_edges", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._get_rotation", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._plot_edges"], ["", "def", "plot", "(", "self", ",", "pose_3ds", ",", "bones", "=", "smpl24_connMat", ",", "colors", "=", "[", "(", "255", ",", "0", ",", "0", ")", "]", ",", "img", "=", "None", ")", ":", "\n", "        ", "img", "=", "np", ".", "ones", "(", "(", "self", ".", "canvas_size", "[", "0", "]", ",", "self", ".", "canvas_size", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "0", "if", "img", "is", "None", "else", "img", "\n", "R", "=", "self", ".", "_get_rotation", "(", "self", ".", "theta", ",", "self", ".", "phi", ")", "\n", "#self._draw_axes(img, R)", "\n", "for", "vertices", ",", "color", "in", "zip", "(", "pose_3ds", ",", "colors", ")", ":", "\n", "            ", "self", ".", "_plot_edges", "(", "img", ",", "vertices", ",", "bones", ",", "R", ",", "color", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses.encircle_plot": [[301, 314], ["zip", "numpy.array", "vis_utils.Plotter3dPoses._get_rotation", "zip", "numpy.ones", "numpy.array", "vis_utils.Plotter3dPoses._plot_edges"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._get_rotation", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._plot_edges"], ["", "def", "encircle_plot", "(", "self", ",", "pose_3ds", ",", "bones", ",", "colors", "=", "[", "(", "255", ",", "255", ",", "255", ")", "]", ",", "img", "=", "None", ")", ":", "\n", "        ", "img", "=", "np", ".", "ones", "(", "(", "self", ".", "canvas_size", "[", "0", "]", ",", "self", ".", "canvas_size", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "if", "img", "is", "None", "else", "img", "\n", "#encircle_theta, encircle_phi = [0, np.pi/4, np.pi/2, 3*np.pi/4], [np.pi/2,np.pi/2,np.pi/2,np.pi/2]", "\n", "encircle_theta", ",", "encircle_phi", "=", "[", "0", ",", "0", ",", "0", ",", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "/", "4", ",", "np", ".", "pi", "/", "2", ",", "np", ".", "pi", "/", "2", ",", "np", ".", "pi", "/", "2", "]", ",", "[", "np", ".", "pi", "/", "2", ",", "5", "*", "np", ".", "pi", "/", "7", ",", "-", "2", "*", "np", ".", "pi", "/", "7", ",", "np", ".", "pi", "/", "2", ",", "5", "*", "np", ".", "pi", "/", "7", ",", "-", "2", "*", "np", ".", "pi", "/", "7", ",", "np", ".", "pi", "/", "2", ",", "5", "*", "np", ".", "pi", "/", "7", ",", "-", "2", "*", "np", ".", "pi", "/", "7", ",", "]", "\n", "encircle_origin", "=", "np", ".", "array", "(", "[", "[", "0.165", ",", "0.165", "]", ",", "[", "0.165", ",", "0.495", "]", ",", "[", "0.165", ",", "0.825", "]", ",", "[", "0.495", ",", "0.165", "]", ",", "[", "0.495", ",", "0.495", "]", ",", "[", "0.495", ",", "0.825", "]", ",", "[", "0.825", ",", "0.165", "]", ",", "[", "0.825", ",", "0.495", "]", ",", "[", "0.825", ",", "0.825", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "*", "np", ".", "array", "(", "self", ".", "canvas_size", ")", "[", "None", "]", "\n", "for", "self", ".", "theta", ",", "self", ".", "phi", ",", "self", ".", "origin", "in", "zip", "(", "encircle_theta", ",", "encircle_phi", ",", "encircle_origin", ")", ":", "\n", "            ", "R", "=", "self", ".", "_get_rotation", "(", "self", ".", "theta", ",", "self", ".", "phi", ")", "\n", "#self._draw_axes(img, R)", "\n", "for", "vertices", ",", "color", "in", "zip", "(", "pose_3ds", ",", "colors", ")", ":", "\n", "                ", "self", ".", "_plot_edges", "(", "img", ",", "vertices", "*", "0.6", ",", "bones", ",", "R", ",", "color", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._draw_axes": [[315, 321], ["numpy.dot", "axe.astype.astype.astype", "cv2.line", "tuple", "tuple"], "methods", ["None"], ["", "def", "_draw_axes", "(", "self", ",", "img", ",", "R", ")", ":", "\n", "        ", "axes_2d", "=", "np", ".", "dot", "(", "self", ".", "axes", ",", "R", ")", "\n", "axes_2d", "=", "axes_2d", "+", "self", ".", "origin", "\n", "for", "axe", "in", "axes_2d", ":", "\n", "            ", "axe", "=", "axe", ".", "astype", "(", "int", ")", "\n", "cv2", ".", "line", "(", "img", ",", "tuple", "(", "axe", "[", "0", "]", ")", ",", "tuple", "(", "axe", "[", "1", "]", ")", ",", "(", "128", ",", "128", ",", "128", ")", ",", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._plot_edges": [[322, 331], ["numpy.dot", "enumerate", "vertices.reshape", "edge_vertices.astype.astype.astype", "cv2.line", "tuple", "tuple", "numpy.dot.reshape"], "methods", ["None"], ["", "", "def", "_plot_edges", "(", "self", ",", "img", ",", "vertices", ",", "edges", ",", "R", ",", "color", ")", ":", "\n", "        ", "vertices_2d", "=", "np", ".", "dot", "(", "vertices", ",", "R", ")", "\n", "edges_vertices", "=", "vertices_2d", ".", "reshape", "(", "(", "-", "1", ",", "2", ")", ")", "[", "edges", "]", "*", "self", ".", "scale", "+", "self", ".", "origin", "\n", "org_verts", "=", "vertices", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "[", "edges", "]", "\n", "for", "inds", ",", "edge_vertices", "in", "enumerate", "(", "edges_vertices", ")", ":", "\n", "            ", "if", "0", "in", "org_verts", "[", "inds", "]", ":", "\n", "                ", "continue", "\n", "", "edge_vertices", "=", "edge_vertices", ".", "astype", "(", "int", ")", "\n", "cv2", ".", "line", "(", "img", ",", "tuple", "(", "edge_vertices", "[", "0", "]", ")", ",", "tuple", "(", "edge_vertices", "[", "1", "]", ")", ",", "color", ",", "10", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.Plotter3dPoses._get_rotation": [[332, 339], ["numpy.array", "cos", "sin", "sin", "sin", "cos", "sin", "cos"], "methods", ["None"], ["", "", "def", "_get_rotation", "(", "self", ",", "theta", ",", "phi", ")", ":", "\n", "        ", "sin", ",", "cos", "=", "math", ".", "sin", ",", "math", ".", "cos", "\n", "return", "np", ".", "array", "(", "[", "\n", "[", "cos", "(", "theta", ")", ",", "sin", "(", "theta", ")", "*", "sin", "(", "phi", ")", "]", ",", "\n", "[", "-", "sin", "(", "theta", ")", ",", "cos", "(", "theta", ")", "*", "sin", "(", "phi", ")", "]", ",", "\n", "[", "0", ",", "-", "cos", "(", "phi", ")", "]", "\n", "]", ",", "dtype", "=", "np", ".", "float32", ")", "# transposed", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.get_rotate_x_mat": [[10, 17], ["numpy.radians", "torch.Tensor", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "get_rotate_x_mat", "(", "angle", ")", ":", "\n", "    ", "angle", "=", "np", ".", "radians", "(", "angle", ")", "\n", "rot_mat", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "angle", ")", ",", "-", "np", ".", "sin", "(", "angle", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "angle", ")", ",", "np", ".", "cos", "(", "angle", ")", "]", "]", ")", "\n", "return", "rot_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.get_rotate_y_mat": [[18, 25], ["numpy.radians", "torch.Tensor", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "get_rotate_y_mat", "(", "angle", ")", ":", "\n", "    ", "angle", "=", "np", ".", "radians", "(", "angle", ")", "\n", "rot_mat", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "np", ".", "cos", "(", "angle", ")", ",", "0", ",", "np", ".", "sin", "(", "angle", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "angle", ")", ",", "0", ",", "np", ".", "cos", "(", "angle", ")", "]", "]", ")", "\n", "return", "rot_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.rotate_view_weak_perspective": [[26, 52], ["get_rotate_x_mat().type().to", "get_rotate_y_mat().type().to", "torch.einsum", "torch.einsum", "torch.Tensor().to().type", "torch.einsum.view", "get_rotate_x_mat().type", "get_rotate_y_mat().type", "torch.Tensor().to", "torch.abs().max", "vis_utils.get_rotate_x_mat", "vis_utils.get_rotate_y_mat", "torch.Tensor", "verts_rot.view.min", "verts_rot.view.max", "torch.abs", "torch.div"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.get_rotate_x_mat", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.get_rotate_y_mat"], ["", "def", "rotate_view_weak_perspective", "(", "verts", ",", "rx", "=", "30", ",", "ry", "=", "0", ",", "img_shape", "=", "[", "512", ",", "512", "]", ",", "expand_ratio", "=", "1.2", ",", "bbox3D_center", "=", "None", ",", "scale", "=", "None", ")", ":", "\n", "    ", "device", ",", "dtype", "=", "verts", ".", "device", ",", "verts", ".", "dtype", "\n", "h", ",", "w", "=", "img_shape", "\n", "\n", "# front2birdview: rx=90, ry=0 ; front2sideview: rx=0, ry=90", "\n", "Rx_mat", "=", "get_rotate_x_mat", "(", "rx", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", ")", "\n", "Ry_mat", "=", "get_rotate_y_mat", "(", "ry", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", ")", "\n", "verts_rot", "=", "torch", ".", "einsum", "(", "'bij,kj->bik'", ",", "verts", ",", "Rx_mat", ")", "\n", "verts_rot", "=", "torch", ".", "einsum", "(", "'bij,kj->bik'", ",", "verts_rot", ",", "Ry_mat", ")", "\n", "\n", "if", "bbox3D_center", "is", "None", ":", "\n", "        ", "flatten_verts", "=", "verts_rot", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "# To move the vertices to the center of view, we get the bounding box of vertices and its center location ", "\n", "bbox3D_center", "=", "0.5", "*", "(", "flatten_verts", ".", "min", "(", "0", ")", ".", "values", "+", "flatten_verts", ".", "max", "(", "0", ")", ".", "values", ")", "[", "None", ",", "None", "]", "\n", "", "verts_aligned", "=", "verts_rot", "-", "bbox3D_center", "\n", "\n", "rendered_image_center", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "w", "/", "2", ",", "h", "/", "2", "]", "]", "]", ")", ".", "to", "(", "device", ")", ".", "type", "(", "verts_aligned", ".", "dtype", ")", "\n", "\n", "if", "scale", "is", "None", ":", "\n", "# To ensure all vertices are visible, we need to rescale the vertices", "\n", "        ", "scale", "=", "1", "/", "(", "expand_ratio", "*", "torch", ".", "abs", "(", "torch", ".", "div", "(", "verts_aligned", "[", ":", ",", ":", ",", ":", "2", "]", ",", "rendered_image_center", ")", ")", ".", "max", "(", ")", ")", "\n", "# move to the center of rendered image ", "\n", "", "verts_aligned", "*=", "scale", "\n", "verts_aligned", "[", ":", ",", ":", ",", ":", "2", "]", "+=", "rendered_image_center", "\n", "\n", "return", "verts_aligned", ",", "bbox3D_center", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.rotate_view_perspective": [[54, 79], ["get_rotate_x_mat().type().to", "get_rotate_y_mat().type().to", "torch.einsum", "torch.einsum", "torch.einsum.view", "torch.abs", "torch.abs", "torch.tensor", "get_rotate_x_mat().type", "get_rotate_y_mat().type", "verts_aligned.view().min", "verts_aligned.view().max", "dist_max[].max", "numpy.tan", "vis_utils.get_rotate_x_mat", "vis_utils.get_rotate_y_mat", "numpy.radians", "verts_rot.view.min", "verts_rot.view.max", "verts_aligned.view", "verts_aligned.view"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.get_rotate_x_mat", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.get_rotate_y_mat"], ["", "def", "rotate_view_perspective", "(", "verts", ",", "rx", "=", "30", ",", "ry", "=", "0", ",", "FOV", "=", "60", ",", "bbox3D_center", "=", "None", ",", "depth", "=", "None", ")", ":", "\n", "    ", "device", ",", "dtype", "=", "verts", ".", "device", ",", "verts", ".", "dtype", "\n", "\n", "# front2birdview: rx=90, ry=0 ; front2sideview: rx=0, ry=90", "\n", "Rx_mat", "=", "get_rotate_x_mat", "(", "rx", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", ")", "\n", "Ry_mat", "=", "get_rotate_y_mat", "(", "ry", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", ")", "\n", "verts_rot", "=", "torch", ".", "einsum", "(", "'bij,kj->bik'", ",", "verts", ",", "Rx_mat", ")", "\n", "verts_rot", "=", "torch", ".", "einsum", "(", "'bij,kj->bik'", ",", "verts_rot", ",", "Ry_mat", ")", "\n", "\n", "if", "bbox3D_center", "is", "None", ":", "\n", "        ", "flatten_verts", "=", "verts_rot", ".", "view", "(", "-", "1", ",", "3", ")", "\n", "# To move the vertices to the center of view, we get the bounding box of vertices and its center location ", "\n", "bbox3D_center", "=", "0.5", "*", "(", "flatten_verts", ".", "min", "(", "0", ")", ".", "values", "+", "flatten_verts", ".", "max", "(", "0", ")", ".", "values", ")", "[", "None", ",", "None", "]", "\n", "", "verts_aligned", "=", "verts_rot", "-", "bbox3D_center", "\n", "\n", "if", "depth", "is", "None", ":", "\n", "# To ensure all vertices are visible, we need to move them further.", "\n", "# get the least / the greatest distance between the center of 3D bbox and all vertices", "\n", "        ", "dist_min", "=", "torch", ".", "abs", "(", "verts_aligned", ".", "view", "(", "-", "1", ",", "3", ")", ".", "min", "(", "0", ")", ".", "values", ")", "\n", "dist_max", "=", "torch", ".", "abs", "(", "verts_aligned", ".", "view", "(", "-", "1", ",", "3", ")", ".", "max", "(", "0", ")", ".", "values", ")", "\n", "z", "=", "dist_max", "[", ":", "2", "]", ".", "max", "(", ")", "/", "np", ".", "tan", "(", "np", ".", "radians", "(", "FOV", "/", "2", ")", ")", "+", "dist_min", "[", "2", "]", "\n", "depth", "=", "torch", ".", "tensor", "(", "[", "[", "[", "0", ",", "0", ",", "z", "]", "]", "]", ",", "device", "=", "device", ")", "\n", "", "verts_aligned", "=", "verts_aligned", "+", "depth", "\n", "\n", "return", "verts_aligned", ",", "bbox3D_center", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.get_rendering_results": [[81, 99], ["torch.Tensor", "renderer", "rendered_result[].cpu().numpy", "depth_map[].cpu().numpy", "cv2.resize", "cv2.resize", "rendered_result[].cpu", "depth_map[].cpu", "rendered_result[].cpu().numpy", "rendered_result[].cpu"], "function", ["None"], ["", "def", "get_rendering_results", "(", "result_image", ",", "org_depth_map", ",", "verts_shifted", ",", "offsets", ",", "faces", ",", "renderer", ",", "depth_map_thresh", "=", "1", ",", "visible_weight", "=", "0.9", ")", ":", "\n", "    ", "color", "=", "torch", ".", "Tensor", "(", "[", ".9", ",", ".9", ",", ".8", "]", ")", "\n", "rendered_result", ",", "depth_map", "=", "renderer", "(", "verts_shifted", ",", "faces", ",", "colors", "=", "color", ",", "merge_meshes", "=", "True", ")", "\n", "depth_map", "=", "depth_map", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "transparent", "=", "rendered_result", "[", "0", ",", ":", ",", ":", ",", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#print(depth_map[transparent > 0.])", "\n", "valid_mask", "=", "(", "transparent", ">", "0.", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "#[:, :,np.newaxis]", "\n", "rendered_img", "=", "(", "rendered_result", "[", "0", ",", ":", ",", ":", ",", ":", "-", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "crop_start", ",", "crop_end", ",", "pad_left", ",", "pad_right", ",", "pad_input_w", ",", "pad_input_h", "=", "offsets", "\n", "pad_rendered_img", "=", "cv2", ".", "resize", "(", "rendered_img", ",", "(", "pad_input_w", ",", "pad_input_h", ")", ")", "[", ":", ",", "pad_left", ":", "-", "pad_right", "]", "\n", "#valid_mask = (cv2.resize(valid_mask, (pad_input_w, pad_input_h))[:,pad_left:-pad_right]>128)[:,:,None]", "\n", "depth_map", "=", "cv2", ".", "resize", "(", "depth_map", ",", "(", "pad_input_w", ",", "pad_input_h", ")", ")", "[", ":", ",", "pad_left", ":", "-", "pad_right", "]", "\n", "depth_map", "[", "depth_map", "<", "depth_map_thresh", "]", "=", "1000", "\n", "valid_mask", "=", "(", "depth_map", "<", "org_depth_map", "[", ":", ",", "crop_start", ":", "crop_end", "]", ")", "\n", "org_depth_map", "[", ":", ",", "crop_start", ":", "crop_end", "]", "[", "valid_mask", "]", "=", "depth_map", "[", "valid_mask", "]", "\n", "valid_mask", "=", "valid_mask", "[", ":", ",", ":", ",", "None", "]", "\n", "result_image", "[", ":", ",", "crop_start", ":", "crop_end", "]", "=", "pad_rendered_img", "*", "valid_mask", "+", "result_image", "[", ":", ",", "crop_start", ":", "crop_end", "]", "*", "valid_mask", "*", "(", "1", "-", "visible_weight", ")", "+", "(", "1", "-", "valid_mask", ")", "*", "result_image", "[", ":", ",", "crop_start", ":", "crop_end", "]", "\n", "return", "result_image", ",", "org_depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.rendering_mesh_rotating_view": [[101, 126], ["numpy.zeros().astype", "numpy.concatenate", "numpy.concatenate", "numpy.eye", "vis_utils.get_rotate_x_mat", "numpy.array", "vert_trans.clone", "zip", "numpy.ones", "numpy.sin", "numpy.sin", "numpy.tan", "vis_utils.rotate_view_perspective", "renderer", "result_imgs.append", "numpy.zeros", "vert_trans[].mean().item", "numpy.radians", "vert_trans.clone.cpu().numpy", "numpy.arange().astype", "numpy.array", "numpy.arange().astype", "vert_trans[].mean", "vert_trans.clone.cpu", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.get_rotate_x_mat", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.rotate_view_perspective"], ["", "def", "rendering_mesh_rotating_view", "(", "vert_trans", ",", "renderer", ",", "triangles", ",", "image", ",", "background", ",", "internal", "=", "5", ")", ":", "\n", "    ", "result_imgs", "=", "[", "]", "\n", "pause_num", "=", "24", "\n", "pause", "=", "np", ".", "zeros", "(", "pause_num", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "change_time", "=", "90", "//", "internal", "\n", "roates", "=", "np", ".", "ones", "(", "change_time", ")", "*", "internal", "\n", "go_up", "=", "np", ".", "sin", "(", "np", ".", "arange", "(", "change_time", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "change_time", ")", "*", "1", "\n", "go_down", "=", "np", ".", "sin", "(", "np", ".", "arange", "(", "change_time", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "change_time", "-", "1", ")", "*", "1", "\n", "azimuth_angles", "=", "np", ".", "concatenate", "(", "[", "pause", ",", "roates", ",", "roates", ",", "roates", ",", "roates", "]", ")", "\n", "elevation_angles", "=", "np", ".", "concatenate", "(", "[", "pause", ",", "go_up", ",", "go_down", ",", "go_up", ",", "go_down", "]", ")", "\n", "\n", "camera_pose", "=", "np", ".", "eye", "(", "4", ")", "\n", "elevation_start", "=", "20", "\n", "camera_pose", "[", ":", "3", ",", ":", "3", "]", "=", "get_rotate_x_mat", "(", "-", "elevation_start", ")", "\n", "cam_height", "=", "1.4", "*", "vert_trans", "[", ":", ",", ":", ",", "2", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "*", "np", ".", "tan", "(", "np", ".", "radians", "(", "elevation_start", ")", ")", "\n", "camera_pose", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "[", "0", ",", "cam_height", ",", "0", "]", ")", "# translation", "\n", "\n", "verts_rotated", "=", "vert_trans", ".", "clone", "(", ")", "\n", "bbox3D_center", ",", "move_depth", "=", "None", ",", "None", "\n", "for", "azimuth_angle", ",", "elevation_angle", "in", "zip", "(", "azimuth_angles", ",", "elevation_angles", ")", ":", "\n", "        ", "verts_rotated", ",", "bbox3D_center", ",", "move_depth", "=", "rotate_view_perspective", "(", "verts_rotated", ",", "rx", "=", "0", ",", "ry", "=", "azimuth_angle", ",", "depth", "=", "move_depth", ")", "\n", "rendered_image", ",", "rend_depth", "=", "renderer", "(", "verts_rotated", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "triangles", ",", "background", ",", "mesh_colors", "=", "np", ".", "array", "(", "[", "[", "0.9", ",", "0.9", ",", "0.8", "]", "]", ")", ",", "camera_pose", "=", "camera_pose", ")", "\n", "result_imgs", ".", "append", "(", "rendered_image", ")", "\n", "\n", "", "return", "result_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.mesh_color_left2right": [[147, 154], ["torch.sort().indices.numpy", "numpy.arange", "numpy.arange", "numpy.array", "len", "len", "torch.sort", "trans[].cpu", "len"], "function", ["None"], ["def", "mesh_color_left2right", "(", "trans", ",", "color_table", "=", "None", ")", ":", "\n", "    ", "left2right_order", "=", "torch", ".", "sort", "(", "trans", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ".", "indices", ".", "numpy", "(", ")", "\n", "color_inds", "=", "np", ".", "arange", "(", "len", "(", "trans", ")", ")", "\n", "color_inds", "[", "left2right_order", "]", "=", "np", ".", "arange", "(", "len", "(", "trans", ")", ")", "\n", "if", "color_table", "is", "None", ":", "\n", "        ", "color_table", "=", "color_table_default", "\n", "", "return", "np", ".", "array", "(", "[", "color_table", "[", "ind", "%", "len", "(", "color_table", ")", "]", "for", "ind", "in", "color_inds", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.mesh_color_trackID": [[238, 242], ["numpy.array", "len"], "function", ["None"], ["def", "mesh_color_trackID", "(", "track_ids", ",", "color_table", "=", "None", ")", ":", "\n", "    ", "if", "color_table", "is", "None", ":", "\n", "        ", "color_table", "=", "tracking_color_list", "\n", "", "return", "np", ".", "array", "(", "[", "color_table", "[", "tid", "%", "len", "(", "color_table", ")", "]", "for", "tid", "in", "track_ids", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton": [[246, 265], ["enumerate", "numpy.array().astype", "numpy.concatenate().tolist", "len", "cv2.circle", "numpy.array", "numpy.concatenate", "cv2.line", "cv2.putText", "int", "int", "int", "int", "int", "int", "str", "int", "int", "int", "int", "int", "range", "len", "len"], "function", ["None"], ["def", "draw_skeleton", "(", "image", ",", "pts", ",", "bones", "=", "smpl24_connMat", ",", "cm", "=", "None", ",", "label_kp_order", "=", "False", ",", "r", "=", "8", ")", ":", "\n", "    ", "for", "i", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "\n", "        ", "if", "len", "(", "pt", ")", ">", "1", ":", "\n", "            ", "if", "pt", "[", "0", "]", ">", "0", "and", "pt", "[", "1", "]", ">", "0", ":", "\n", "                ", "image", "=", "cv2", ".", "circle", "(", "image", ",", "(", "int", "(", "pt", "[", "0", "]", ")", ",", "int", "(", "pt", "[", "1", "]", ")", ")", ",", "r", ",", "cm", "[", "i", "%", "len", "(", "cm", ")", "]", ",", "-", "1", ")", "\n", "if", "label_kp_order", "and", "i", "in", "bones", ":", "\n", "                    ", "img", "=", "cv2", ".", "putText", "(", "image", ",", "str", "(", "i", ")", ",", "(", "int", "(", "pt", "[", "0", "]", ")", ",", "int", "(", "pt", "[", "1", "]", ")", ")", ",", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "1", ",", "(", "255", ",", "215", ",", "0", ")", ",", "1", ")", "\n", "\n", "", "", "", "", "if", "bones", "is", "not", "None", ":", "\n", "        ", "set_colors", "=", "np", ".", "array", "(", "[", "cm", "for", "i", "in", "range", "(", "len", "(", "bones", ")", ")", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "bones", "=", "np", ".", "concatenate", "(", "[", "bones", ",", "set_colors", "]", ",", "1", ")", ".", "tolist", "(", ")", "\n", "for", "line", "in", "bones", ":", "\n", "            ", "pa", "=", "pts", "[", "line", "[", "0", "]", "]", "\n", "pb", "=", "pts", "[", "line", "[", "1", "]", "]", "\n", "if", "(", "pa", ">", "0", ")", ".", "all", "(", ")", "and", "(", "pb", ">", "0", ")", ".", "all", "(", ")", ":", "\n", "                ", "xa", ",", "ya", ",", "xb", ",", "yb", "=", "int", "(", "pa", "[", "0", "]", ")", ",", "int", "(", "pa", "[", "1", "]", ")", ",", "int", "(", "pb", "[", "0", "]", ")", ",", "int", "(", "pb", "[", "1", "]", ")", "\n", "image", "=", "cv2", ".", "line", "(", "image", ",", "(", "xa", ",", "ya", ")", ",", "(", "xb", ",", "yb", ")", ",", "(", "int", "(", "line", "[", "2", "]", ")", ",", "int", "(", "line", "[", "3", "]", ")", ",", "int", "(", "line", "[", "4", "]", ")", ")", ",", "r", ")", "\n", "", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton_multiperson": [[266, 270], ["enumerate", "vis_utils.draw_skeleton"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vis_utils.draw_skeleton"], ["", "def", "draw_skeleton_multiperson", "(", "image", ",", "pts_group", ",", "colors", ")", ":", "\n", "    ", "for", "ind", ",", "pts", "in", "enumerate", "(", "pts_group", ")", ":", "\n", "        ", "image", "=", "draw_skeleton", "(", "image", ",", "pts", ",", "cm", "=", "colors", "[", "ind", "]", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.__init__": [[28, 42], ["Light", "Light", "Light", "Light", "pickle.load", "numpy.load", "numpy.array", "vedo_vis.parse_nvxia_uvmap", "open", "os.path.join", "cv2.imread", "os.path.join", "numpy.array", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.parse_nvxia_uvmap"], ["    ", "def", "__init__", "(", "self", ",", "character", "=", "'smpl'", ")", ":", "\n", "        ", "if", "character", "==", "'smpl'", ":", "\n", "            ", "self", ".", "faces", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "smpl_model_path", ",", "'SMPL_NEUTRAL.pkl'", ")", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "[", "'f'", "]", "\n", "", "elif", "character", "==", "'nvxia'", ":", "\n", "            ", "params_dict", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "nvxia_model_path", ",", "'nvxia.npz'", ")", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "faces", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "face", ")", "for", "face", "in", "params_dict", "[", "'polygons'", "]", "]", ")", "\n", "self", ".", "texture_file", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "nvxia_model_path", ",", "'Kachujin_diffuse.png'", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "self", ".", "uvs", "=", "parse_nvxia_uvmap", "(", "params_dict", "[", "'uvmap'", "]", ",", "self", ".", "faces", ")", "\n", "", "self", ".", "scene_bg_color", "=", "[", "240", ",", "255", ",", "255", "]", "\n", "self", ".", "default_camera", "=", "{", "'pos'", ":", "{", "'far'", ":", "(", "0", ",", "800", ",", "1000", ")", ",", "'close'", ":", "(", "0", ",", "200", ",", "800", ")", "}", "[", "soi_camera", "]", "}", "\n", "# Light([0,800,1000], c='white')", "\n", "self", ".", "lights", "=", "[", "Light", "(", "[", "0", ",", "800", ",", "1000", "]", ",", "intensity", "=", "0.6", ",", "c", "=", "'white'", ")", ",", "Light", "(", "[", "0", ",", "-", "800", ",", "1000", "]", ",", "intensity", "=", "0.6", ",", "c", "=", "'white'", ")", ",", "Light", "(", "[", "0", ",", "800", ",", "-", "1000", "]", ",", "intensity", "=", "0.6", ",", "c", "=", "'white'", ")", ",", "Light", "(", "[", "0", ",", "-", "800", ",", "-", "1000", "]", ",", "intensity", "=", "0.6", ",", "c", "=", "'white'", ")", "]", "\n", "vedo", ".", "settings", ".", "screeshotLargeImage", "=", "True", "\n", "vedo", ".", "settings", ".", "screeshotScale", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.plot_multi_meshes_batch": [[43, 66], ["enumerate", "numpy.unique", "numpy.array", "vedo_vis.Vedo_visualizer.plot_multi_meshes", "vedo_vis.Vedo_visualizer.close", "vertices[].detach().cpu().numpy", "cam_params[].detach().cpu().numpy", "[].cpu().numpy().astype", "vedo_vis.Vedo_visualizer.render_rotating", "vedo_vis.Vedo_visualizer.render_one_time", "zip", "numpy.where", "os.path.join", "os.path.join", "cv2.imwrite", "vertices[].detach().cpu", "cam_params[].detach().cpu", "[].cpu().numpy", "os.path.basename", "os.path.basename", "vertices[].detach", "cam_params[].detach", "[].cpu"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.plot_multi_meshes", "home.repos.pwc.inspect_result.Arthur151_ROMP.visualization.socket_utils.SocketClient_blender_old.close", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.render_rotating", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.render_one_time"], ["", "def", "plot_multi_meshes_batch", "(", "self", ",", "vertices", ",", "cam_params", ",", "meta_data", ",", "reorganize_idx", ",", "save_img", "=", "True", ",", "interactive_show", "=", "False", ",", "rotate_frames", "=", "[", "]", ")", ":", "\n", "        ", "result_save_names", "=", "[", "]", "\n", "for", "inds", ",", "img_id", "in", "enumerate", "(", "np", ".", "unique", "(", "reorganize_idx", ")", ")", ":", "\n", "            ", "single_img_verts_inds", "=", "np", ".", "array", "(", "np", ".", "where", "(", "reorganize_idx", "==", "img_id", ")", "[", "0", "]", ")", "\n", "\n", "plt", "=", "self", ".", "plot_multi_meshes", "(", "vertices", "[", "single_img_verts_inds", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "cam_params", "[", "single_img_verts_inds", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "meta_data", "[", "'image'", "]", "[", "single_img_verts_inds", "[", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "interactive_show", "=", "interactive_show", ")", "\n", "\n", "if", "img_id", "in", "rotate_frames", ":", "\n", "                ", "result_imgs", ",", "rot_angles", "=", "self", ".", "render_rotating", "(", "plt", ")", "\n", "save_names", "=", "[", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'3D_meshes-'", "+", "os", ".", "path", ".", "basename", "(", "meta_data", "[", "'imgpath'", "]", "[", "single_img_verts_inds", "[", "0", "]", "]", "+", "'_{:03d}.jpg'", ".", "format", "(", "ra", ")", ")", ")", "for", "ra", "in", "rot_angles", "]", "\n", "", "else", ":", "\n", "                ", "result_imgs", "=", "self", ".", "render_one_time", "(", "plt", ",", "self", ".", "default_camera", ")", "\n", "save_names", "=", "[", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'3D_meshes-'", "+", "os", ".", "path", ".", "basename", "(", "meta_data", "[", "'imgpath'", "]", "[", "single_img_verts_inds", "[", "0", "]", "]", "+", "'.jpg'", ")", ")", "]", "\n", "\n", "", "plt", ".", "close", "(", ")", "\n", "result_save_names", "+=", "save_names", "\n", "if", "save_img", ":", "\n", "                ", "for", "save_name", ",", "result_img", "in", "zip", "(", "save_names", ",", "result_imgs", ")", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "save_name", ",", "result_img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "", "", "return", "result_save_names", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.plot_multi_meshes": [[67, 101], ["Plotter", "Picture", "Picture.rotateX().z().x", "enumerate", "numpy.stack", "enumerate", "max", "max", "zip", "vedo_vis.convert_cam_to_stand_on_image_trans", "numpy.stack.append", "Mesh", "visulize_list.append", "Picture.rotateX().z", "mesh.c().smooth.c().smooth.c().smooth", "mesh.c().smooth.c().smooth.c", "mesh.c().smooth.c().smooth.texture().smooth", "Picture.rotateX", "mesh.c().smooth.c().smooth.c", "mesh_colors[].astype", "mesh.c().smooth.c().smooth.texture"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.convert_cam_to_stand_on_image_trans"], ["", "def", "plot_multi_meshes", "(", "self", ",", "vertices", ",", "cam_params", ",", "img", ",", "mesh_colors", "=", "None", ",", "interactive_show", "=", "False", ",", "rotate_cam", "=", "False", ")", ":", "\n", "        ", "plt", "=", "Plotter", "(", "bg", "=", "[", "240", ",", "255", ",", "255", "]", ",", "axes", "=", "0", ",", "offscreen", "=", "not", "interactive_show", ")", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "pic", "=", "Picture", "(", "img", ")", "\n", "\n", "pic", ".", "rotateX", "(", "-", "90", ")", ".", "z", "(", "h", "//", "2", ")", ".", "x", "(", "-", "w", "//", "2", ")", "\n", "verts_enlarge_scale", "=", "max", "(", "h", ",", "w", ")", "/", "5", "\n", "cam_enlarge_scale", "=", "max", "(", "h", ",", "w", ")", "/", "3", "\n", "\n", "plt", "+=", "pic", "\n", "vertices_vis", "=", "[", "]", "\n", "\n", "for", "inds", ",", "(", "vert", ",", "cam", ")", "in", "enumerate", "(", "zip", "(", "vertices", ",", "cam_params", ")", ")", ":", "\n", "            ", "trans_3d", "=", "convert_cam_to_stand_on_image_trans", "(", "cam", ",", "cam_enlarge_scale", ")", "#enlarge_scale", "\n", "vert", "[", ":", ",", "1", ":", "]", "*=", "-", "1", "\n", "vert", "=", "vert", "*", "verts_enlarge_scale", "\n", "vert", "+=", "trans_3d", "[", "None", "]", "\n", "vertices_vis", ".", "append", "(", "vert", ")", "\n", "", "vertices_vis", "=", "np", ".", "stack", "(", "vertices_vis", ",", "0", ")", "\n", "\n", "visulize_list", "=", "[", "]", "\n", "for", "inds", ",", "vert", "in", "enumerate", "(", "vertices_vis", ")", ":", "\n", "            ", "mesh", "=", "Mesh", "(", "[", "vert", ",", "self", ".", "faces", "]", ")", "\n", "if", "character", "==", "'smpl'", ":", "\n", "                ", "mesh", "=", "mesh", ".", "c", "(", "[", "255", ",", "255", ",", "255", "]", ")", ".", "smooth", "(", "niter", "=", "20", ")", "\n", "if", "mesh_colors", "is", "not", "None", ":", "\n", "                    ", "mesh", ".", "c", "(", "mesh_colors", "[", "inds", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "", "elif", "character", "==", "'nvxia'", ":", "\n", "                ", "mesh", ".", "texture", "(", "self", ".", "texture_file", ",", "tcoords", "=", "self", ".", "uvs", ")", ".", "smooth", "(", "niter", "=", "20", ")", "#.lighting('glossy')", "\n", "", "visulize_list", ".", "append", "(", "mesh", ")", "\n", "", "plt", "+=", "visulize_list", "\n", "for", "light", "in", "self", ".", "lights", ":", "\n", "            ", "plt", "+=", "light", "\n", "", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.render_rotating": [[102, 126], ["numpy.zeros().astype", "numpy.concatenate", "numpy.concatenate", "plt.camera.Elevation", "enumerate", "numpy.ones", "numpy.sin", "numpy.sin", "plt.show", "plt.topicture", "plt.topicture._data.GetDimensions", "plt.topicture._data.GetPointData().GetScalars", "vtk.util.numpy_support.vtk_to_numpy().reshape", "result_imgs.append", "numpy.arange", "numpy.zeros", "len", "numpy.arange().astype", "plt.topicture._data.GetPointData", "vtk.util.numpy_support.vtk_to_numpy", "numpy.arange().astype", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "render_rotating", "(", "self", ",", "plt", ",", "internal", "=", "5", ")", ":", "\n", "        ", "result_imgs", "=", "[", "]", "\n", "pause_num", "=", "fps_save", "\n", "pause", "=", "np", ".", "zeros", "(", "pause_num", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "change_time", "=", "90", "//", "internal", "\n", "roates", "=", "np", ".", "ones", "(", "change_time", ")", "*", "internal", "\n", "go_up", "=", "np", ".", "sin", "(", "np", ".", "arange", "(", "change_time", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "change_time", ")", "*", "1", "\n", "go_down", "=", "np", ".", "sin", "(", "np", ".", "arange", "(", "change_time", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "change_time", "-", "1", ")", "*", "1", "\n", "#top2front = np.ones(pause_num) * -((90-30)/pause_num)", "\n", "azimuth_angles", "=", "np", ".", "concatenate", "(", "[", "pause", ",", "roates", ",", "roates", ",", "roates", ",", "roates", "]", ")", "\n", "elevation_angles", "=", "np", ".", "concatenate", "(", "[", "pause", ",", "go_up", ",", "go_down", ",", "go_up", ",", "go_down", "]", ")", "\n", "#rot_angles = np.concatenate([pause, roates, pause, roates, pause, roates, pause, roates, pause])", "\n", "plt", ".", "camera", ".", "Elevation", "(", "20", ")", "\n", "for", "rid", ",", "azimuth_angle", "in", "enumerate", "(", "azimuth_angles", ")", ":", "\n", "# if rid==pause_num:", "\n", "#     plt.camera.Elevation(30)", "\n", "#     plt.camera.Azimuth(0)", "\n", "            ", "plt", ".", "show", "(", "azimuth", "=", "azimuth_angle", ",", "elevation", "=", "elevation_angles", "[", "rid", "]", ")", "\n", "result_img", "=", "plt", ".", "topicture", "(", "scale", "=", "2", ")", "\n", "rows", ",", "cols", ",", "_", "=", "result_img", ".", "_data", ".", "GetDimensions", "(", ")", "\n", "vtkimage", "=", "result_img", ".", "_data", ".", "GetPointData", "(", ")", ".", "GetScalars", "(", ")", "\n", "image_result", "=", "vtk_to_numpy", "(", "vtkimage", ")", ".", "reshape", "(", "(", "rows", ",", "cols", ",", "3", ")", ")", "\n", "result_imgs", ".", "append", "(", "image_result", "[", ":", ":", "-", "1", "]", ")", "\n", "", "return", "result_imgs", ",", "np", ".", "arange", "(", "len", "(", "azimuth_angles", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.Vedo_visualizer.render_one_time": [[127, 138], ["plt.show", "plt.topicture", "plt.topicture._data.GetDimensions", "plt.topicture._data.GetPointData().GetScalars", "vtk.util.numpy_support.vtk_to_numpy().reshape", "plt.topicture._data.GetPointData", "vtk.util.numpy_support.vtk_to_numpy"], "methods", ["None"], ["", "def", "render_one_time", "(", "self", ",", "plt", ",", "camera_pose", ")", ":", "\n", "        ", "image_result", "=", "plt", ".", "show", "(", "camera", "=", "camera_pose", ")", "#elevation=10,azimuth=0,,bg=self.bg_path ", "\n", "result_img", "=", "plt", ".", "topicture", "(", "scale", "=", "2", ")", "\n", "rows", ",", "cols", ",", "_", "=", "result_img", ".", "_data", ".", "GetDimensions", "(", ")", "\n", "vtkimage", "=", "result_img", ".", "_data", ".", "GetPointData", "(", ")", ".", "GetScalars", "(", ")", "\n", "image_result", "=", "vtk_to_numpy", "(", "vtkimage", ")", ".", "reshape", "(", "(", "rows", ",", "cols", ",", "3", ")", ")", "\n", "image_result", "=", "image_result", "[", ":", ":", "-", "1", "]", "\n", "#result_img.write(save_name)", "\n", "#screenshot(save_name) #returnNumpy=True", "\n", "\n", "return", "[", "image_result", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.convert_cam_to_stand_on_image_trans": [[9, 17], ["numpy.zeros"], "function", ["None"], ["def", "convert_cam_to_stand_on_image_trans", "(", "trans_3d", ",", "enlarge_scale", "=", "3", ")", ":", "\n", "    ", "stand_on_image_trans", "=", "np", ".", "zeros", "(", "3", ")", "\n", "# The x-axis is supposed to be adapted to the proper scale", "\n", "stand_on_image_trans", "[", "0", "]", "=", "trans_3d", "[", "0", "]", "*", "0.3", "\n", "stand_on_image_trans", "[", "1", "]", "=", "0.6", "#0.46 #0.5 - trans_3d[1] * 0.2", "\n", "stand_on_image_trans", "[", "2", "]", "=", "trans_3d", "[", "1", "]", "*", "0.4", "#- trans_3d[2]/3  0.4", "\n", "stand_on_image_trans", "*=", "enlarge_scale", "\n", "return", "stand_on_image_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.vedo_vis.parse_nvxia_uvmap": [[18, 25], ["numpy.zeros", "zip", "numpy.max"], "function", ["None"], ["", "def", "parse_nvxia_uvmap", "(", "uvs", ",", "face", ")", ":", "\n", "    ", "verts_num", "=", "np", ".", "max", "(", "face", ")", "+", "1", "\n", "uvs_verts", "=", "np", ".", "zeros", "(", "(", "verts_num", ",", "2", ")", ")", "\n", "for", "uv", ",", "f", "in", "zip", "(", "uvs", ",", "face", ")", ":", "\n", "        ", "uvs_verts", "[", "f", "]", "=", "uv", "[", ":", ",", ":", "2", "]", "\n", "#uvs_verts[:,1] = 1-uvs_verts[:,1]", "\n", "", "return", "uvs_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.Sim3DR.__init__": [[72, 80], ["renderer.convert_type", "renderer.convert_type", "renderer.convert_type", "kwargs.get", "renderer.convert_type", "renderer.convert_type", "renderer.convert_type", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.convert_type", "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.convert_type", "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.convert_type", "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.convert_type", "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.convert_type", "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.convert_type"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "intensity_ambient", "=", "convert_type", "(", "kwargs", ".", "get", "(", "\"intensity_ambient\"", ",", "0.66", ")", ")", "\n", "self", ".", "intensity_directional", "=", "convert_type", "(", "kwargs", ".", "get", "(", "\"intensity_directional\"", ",", "0.36", ")", ")", "\n", "self", ".", "intensity_specular", "=", "convert_type", "(", "kwargs", ".", "get", "(", "\"intensity_specular\"", ",", "0.1", ")", ")", "\n", "self", ".", "specular_exp", "=", "kwargs", ".", "get", "(", "\"specular_exp\"", ",", "1", ")", "\n", "self", ".", "color_directional", "=", "convert_type", "(", "kwargs", ".", "get", "(", "\"color_directional\"", ",", "(", "1", ",", "1", ",", "1", ")", ")", ")", "\n", "self", ".", "light_pos", "=", "convert_type", "(", "kwargs", ".", "get", "(", "\"light_pos\"", ",", "(", "0", ",", "0", ",", "-", "5", ")", ")", ")", "\n", "self", ".", "view_pos", "=", "convert_type", "(", "kwargs", ".", "get", "(", "\"view_pos\"", ",", "(", "0", ",", "0", ",", "5", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.Sim3DR.update_light_pos": [[81, 83], ["renderer.convert_type"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.convert_type"], ["", "def", "update_light_pos", "(", "self", ",", "light_pos", ")", ":", "\n", "        ", "self", ".", "light_pos", "=", "convert_type", "(", "light_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.Sim3DR.render": [[84, 127], ["numpy.array", "renderer.get_normal", "numpy.zeros_like", "renderer.norm_vertices", "numpy.clip", "vertices.copy", "_norm", "renderer.rasterize", "renderer.rasterize", "numpy.array", "numpy.sum", "_norm", "numpy.where", "numpy.clip", "numpy.sum", "numpy.clip", "numpy.zeros_like", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.get_normal", "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.norm_vertices", "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.rasterize", "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.rasterize", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "render", "(", "\n", "self", ",", "vertices", ",", "triangles", ",", "bg", ",", "color", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0.6", ",", "0.4", "]", "]", ")", ",", "texture", "=", "None", "\n", ")", ":", "\n", "        ", "normal", "=", "get_normal", "(", "vertices", ",", "triangles", ")", "\n", "\n", "# 2. lighting", "\n", "light", "=", "np", ".", "zeros_like", "(", "vertices", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# ambient component", "\n", "if", "self", ".", "intensity_ambient", ">", "0", ":", "\n", "            ", "light", "+=", "self", ".", "intensity_ambient", "*", "np", ".", "array", "(", "color", ")", "\n", "\n", "", "vertices_n", "=", "norm_vertices", "(", "vertices", ".", "copy", "(", ")", ")", "\n", "if", "self", ".", "intensity_directional", ">", "0", ":", "\n", "# diffuse component", "\n", "            ", "direction", "=", "_norm", "(", "self", ".", "light_pos", "-", "vertices_n", ")", "\n", "cos", "=", "np", ".", "sum", "(", "normal", "*", "direction", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "# cos = np.clip(cos, 0, 1)", "\n", "#  todo: check below", "\n", "light", "+=", "self", ".", "intensity_directional", "*", "(", "\n", "self", ".", "color_directional", "*", "np", ".", "clip", "(", "cos", ",", "0", ",", "1", ")", "\n", ")", "\n", "\n", "# specular component", "\n", "if", "self", ".", "intensity_specular", ">", "0", ":", "\n", "                ", "v2v", "=", "_norm", "(", "self", ".", "view_pos", "-", "vertices_n", ")", "\n", "reflection", "=", "2", "*", "cos", "*", "normal", "-", "direction", "\n", "spe", "=", "np", ".", "sum", "(", "(", "v2v", "*", "reflection", ")", "**", "self", ".", "specular_exp", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "spe", "=", "np", ".", "where", "(", "cos", "!=", "0", ",", "np", ".", "clip", "(", "spe", ",", "0", ",", "1", ")", ",", "np", ".", "zeros_like", "(", "spe", ")", ")", "\n", "light", "+=", "(", "\n", "self", ".", "intensity_specular", "\n", "*", "self", ".", "color_directional", "\n", "*", "np", ".", "clip", "(", "spe", ",", "0", ",", "1", ")", "\n", ")", "\n", "", "", "light", "=", "np", ".", "clip", "(", "light", ",", "0", ",", "1", ")", "\n", "\n", "# 2. rasterization, [0, 1]", "\n", "if", "texture", "is", "None", ":", "\n", "            ", "render_img", "=", "rasterize", "(", "vertices", ",", "triangles", ",", "light", ",", "bg", "=", "bg", ")", "\n", "return", "render_img", "\n", "", "else", ":", "\n", "            ", "texture", "*=", "light", "\n", "render_img", "=", "rasterize", "(", "vertices", ",", "triangles", ",", "texture", ",", "bg", "=", "bg", ")", "\n", "return", "render_img", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.Sim3DR.__call__": [[128, 136], ["numpy.array", "bg.copy", "enumerate", "len", "renderer._to_ctype", "renderer.Sim3DR.render", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer._to_ctype", "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.Sim3DR.render"], ["", "", "def", "__call__", "(", "self", ",", "verts_list", ",", "triangles", ",", "bg", ",", "mesh_colors", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0.6", ",", "0.4", "]", "]", ")", ")", ":", "\n", "        ", "rendered_results", "=", "bg", ".", "copy", "(", ")", "\n", "if", "len", "(", "triangles", ".", "shape", ")", "==", "2", ":", "\n", "            ", "triangles", "=", "[", "triangles", "for", "_", "in", "range", "(", "len", "(", "verts_list", ")", ")", "]", "\n", "", "for", "ind", ",", "verts", "in", "enumerate", "(", "verts_list", ")", ":", "\n", "            ", "verts", "=", "_to_ctype", "(", "verts", ")", "\n", "rendered_results", "=", "self", ".", "render", "(", "verts", ",", "triangles", "[", "ind", "]", ",", "rendered_results", ",", "mesh_colors", "[", "[", "ind", "%", "len", "(", "mesh_colors", ")", "]", "]", ")", "\n", "", "return", "rendered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer._to_ctype": [[10, 14], ["arr.copy"], "function", ["None"], ["def", "_to_ctype", "(", "arr", ")", ":", "\n", "    ", "if", "not", "arr", ".", "flags", ".", "c_contiguous", ":", "\n", "        ", "return", "arr", ".", "copy", "(", "order", "=", "\"C\"", ")", "\n", "", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.norm_vertices": [[18, 24], ["vertices.max", "vertices.min", "vertices.max"], "function", ["None"], ["def", "norm_vertices", "(", "vertices", ")", ":", "\n", "    ", "vertices", "-=", "vertices", ".", "min", "(", "0", ")", "[", "None", ",", ":", "]", "\n", "vertices", "/=", "vertices", ".", "max", "(", ")", "\n", "vertices", "*=", "2", "\n", "vertices", "-=", "vertices", ".", "max", "(", "0", ")", "[", "None", ",", ":", "]", "/", "2", "\n", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.convert_type": [[26, 30], ["isinstance", "isinstance", "numpy.array"], "function", ["None"], ["", "def", "convert_type", "(", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "tuple", ")", "or", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "obj", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", ",", ":", "]", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.get_normal": [[31, 37], ["numpy.zeros_like", "Sim3DR_Cython.get_normal"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.get_normal"], ["", "def", "get_normal", "(", "vertices", ",", "triangles", ")", ":", "\n", "    ", "normal", "=", "np", ".", "zeros_like", "(", "vertices", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Sim3DR_Cython", ".", "get_normal", "(", "\n", "normal", ",", "vertices", ",", "triangles", ",", "vertices", ".", "shape", "[", "0", "]", ",", "triangles", ".", "shape", "[", "0", "]", "\n", ")", "\n", "return", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.rasterize": [[38, 70], ["Sim3DR_Cython.rasterize", "numpy.zeros", "numpy.zeros", "colors.astype.astype"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.rasterize"], ["", "def", "rasterize", "(", "\n", "vertices", ",", "\n", "triangles", ",", "\n", "colors", ",", "\n", "bg", "=", "None", ",", "\n", "height", "=", "None", ",", "\n", "width", "=", "None", ",", "\n", "channel", "=", "None", ",", "\n", "reverse", "=", "False", ")", ":", "\n", "    ", "if", "bg", "is", "not", "None", ":", "\n", "        ", "height", ",", "width", ",", "channel", "=", "bg", ".", "shape", "\n", "", "else", ":", "\n", "        ", "assert", "height", "is", "not", "None", "and", "width", "is", "not", "None", "and", "channel", "is", "not", "None", "\n", "bg", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "channel", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "buffer", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "-", "1e8", "\n", "\n", "if", "colors", ".", "dtype", "!=", "np", ".", "float32", ":", "\n", "        ", "colors", "=", "colors", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "Sim3DR_Cython", ".", "rasterize", "(", "\n", "bg", ",", "\n", "vertices", ",", "\n", "triangles", ",", "\n", "colors", ",", "\n", "buffer", ",", "\n", "triangles", ".", "shape", "[", "0", "]", ",", "\n", "height", ",", "\n", "width", ",", "\n", "channel", ",", "\n", "reverse", "=", "reverse", ",", "\n", ")", "\n", "return", "bg", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.sim3drender.renderer.main": [[138, 140], ["None"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.CenterMap3D.__init__": [[20, 28], ["print", "post_parser.CenterMap3D.generate_kernels", "post_parser.CenterMap3D.prepare_parsing"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.CenterMap3D.generate_kernels", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.CenterMap3D.prepare_parsing"], ["y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", ",", "y0", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "gaussian_distribution", "=", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", "\n", "gk_group", "[", "kernel_size", "]", "=", "np", ".", "exp", "(", "gaussian_distribution", ")", "\n", "pool_group", "[", "kernel_size", "]", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", ",", "1", ",", "(", "kernel_size", "-", "1", ")", "//", "2", ")", "\n", "", "return", "gk_group", ",", "pool_group", "\n", "\n", "", "def", "parse_centermap", "(", "self", ",", "center_maps", ")", ":", "\n", "        ", "center_map_nms", "=", "nms", "(", "center_maps", ",", "pool_func", "=", "self", ".", "pool_group", "[", "5", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.CenterMap3D.prepare_parsing": [[29, 32], ["post_parser.get_3Dcoord_maps", "torch.nn.MaxPool3d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.get_3Dcoord_maps"], ["b", ",", "c", ",", "h", ",", "w", "=", "center_map_nms", ".", "shape", "\n", "K", "=", "self", ".", "max_person", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "center_map_nms", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", ",", "K", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.CenterMap3D.generate_kernels": [[33, 43], ["set", "numpy.arange", "numpy.exp", "torch.nn.MaxPool2d"], "methods", ["None"], ["topk_inds", "=", "topk_inds", "%", "(", "h", "*", "w", ")", "\n", "topk_ys", "=", "(", "topk_inds", ".", "long", "(", ")", "//", "w", ")", ".", "float", "(", ")", "\n", "topk_xs", "=", "(", "topk_inds", "%", "w", ")", ".", "int", "(", ")", ".", "float", "(", ")", "\n", "# get all topk in in a batch", "\n", "topk_score", ",", "index", "=", "torch", ".", "topk", "(", "topk_scores", ".", "reshape", "(", "b", ",", "-", "1", ")", ",", "K", ")", "\n", "# div by K because index is grouped by K(C x K shape)", "\n", "topk_clses", "=", "index", ".", "long", "(", ")", "//", "K", "\n", "topk_inds", "=", "gather_feature", "(", "topk_inds", ".", "view", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "topk_ys", "=", "gather_feature", "(", "topk_ys", ".", "reshape", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "topk_xs", "=", "gather_feature", "(", "topk_xs", ".", "reshape", "(", "b", ",", "-", "1", ",", "1", ")", ",", "index", ")", ".", "reshape", "(", "b", ",", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.CenterMap3D.parse_3dcentermap": [[44, 67], ["nms().squeeze", "torch.topk", "torch.topk", "gather_feature().reshape", "gather_feature().reshape", "gather_feature().reshape", "torch.stack().permute().long", "nms().squeeze.reshape", "topk_scores.reshape", "index.long", "torch.where", "post_parser.nms", "post_parser.gather_feature", "post_parser.gather_feature", "post_parser.gather_feature", "torch.stack().permute", "gather_feature().reshape.long", "gather_feature().reshape.view", "gather_feature().reshape.reshape", "gather_feature().reshape.reshape", "torch.stack", "topk_zs[].long", "topk_ys[].long", "topk_xs[].long"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature"], ["mask", "=", "topk_score", ">", "self", ".", "conf_thresh", "\n", "batch_ids", "=", "torch", ".", "where", "(", "mask", ")", "[", "0", "]", "\n", "center_yxs", "=", "torch", ".", "stack", "(", "[", "topk_ys", "[", "mask", "]", ",", "topk_xs", "[", "mask", "]", "]", ")", ".", "permute", "(", "(", "1", ",", "0", ")", ")", "\n", "return", "batch_ids", ",", "topk_inds", "[", "mask", "]", ",", "center_yxs", ",", "topk_score", "[", "mask", "]", "\n", "\n", "\n", "", "", "def", "nms", "(", "det", ",", "pool_func", "=", "None", ")", ":", "\n", "    ", "maxm", "=", "pool_func", "(", "det", ")", "\n", "maxm", "=", "torch", ".", "eq", "(", "maxm", ",", "det", ")", ".", "float", "(", ")", "\n", "det", "=", "det", "*", "maxm", "\n", "return", "det", "\n", "\n", "", "def", "gather_feature", "(", "fmap", ",", "index", ",", "mask", "=", "None", ")", ":", "\n", "    ", "dim", "=", "fmap", ".", "size", "(", "-", "1", ")", "\n", "index", "=", "index", ".", "unsqueeze", "(", "len", "(", "index", ".", "shape", ")", ")", ".", "expand", "(", "*", "index", ".", "shape", ",", "dim", ")", "\n", "fmap", "=", "fmap", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "index", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "fmap", ")", "\n", "fmap", "=", "fmap", "[", "mask", "]", "\n", "fmap", "=", "fmap", ".", "reshape", "(", "-", "1", ",", "dim", ")", "\n", "", "return", "fmap", "\n", "\n", "", "def", "pack_params_dict", "(", "params_pred", ")", ":", "\n", "    ", "idx_list", ",", "params_dict", "=", "[", "0", "]", ",", "{", "}", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.SMPLA_parser.__init__": [[256, 261], ["torch.nn.Module.__init__", "romp.smpl.SMPL", "romp.smpl.SMPL"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.SMPLA_parser.forward": [[262, 279], ["baby_mask.sum", "len", "post_parser.SMPLA_parser.smil_model", "post_parser.SMPLA_parser.smpl_model", "joints[].mean().unsqueeze", "torch.zeros().float", "torch.zeros().float", "adult_mask.sum", "post_parser.SMPLA_parser.smpl_model", "joints[].mean", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.get_3Dcoord_maps": [[7, 18], ["torch.arange", "torch.cat", "z_base.reshape().repeat", "z_base.reshape", "torch.arange.reshape().repeat", "torch.arange.reshape().repeat", "torch.arange.reshape().repeat", "torch.arange.reshape", "torch.arange.reshape", "torch.arange.reshape"], "function", ["None"], ["\n", "class", "CenterMap", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "conf_thresh", ")", ":", "\n", "        ", "self", ".", "size", "=", "64", "\n", "self", ".", "max_person", "=", "64", "\n", "self", ".", "sigma", "=", "1", "\n", "self", ".", "conf_thresh", "=", "conf_thresh", "\n", "self", ".", "gk_group", ",", "self", ".", "pool_group", "=", "self", ".", "generate_kernels", "(", "[", "5", "]", ")", "\n", "\n", "", "def", "generate_kernels", "(", "self", ",", "kernel_size_list", ")", ":", "\n", "        ", "gk_group", ",", "pool_group", "=", "{", "}", ",", "{", "}", "\n", "for", "kernel_size", "in", "set", "(", "kernel_size_list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection": [[68, 108], ["isinstance", "isinstance", "torch.zeros", "torch.matmul", "projected_points[].contiguous", "torch.from_numpy().float", "torch.from_numpy().float", "torch.einsum", "projected_points[].contiguous.contiguous", "torch.zeros.contiguous", "torch.from_numpy().float.unsqueeze", "points[].unsqueeze", "float", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["part_name", "=", "[", "'cam'", ",", "'global_orient'", ",", "'body_pose'", ",", "'smpl_betas'", "]", "\n", "part_idx", "=", "[", "3", ",", "6", ",", "21", "*", "6", ",", "10", "]", "\n", "for", "i", ",", "(", "idx", ",", "name", ")", "in", "enumerate", "(", "zip", "(", "part_idx", ",", "part_name", ")", ")", ":", "\n", "        ", "idx_list", ".", "append", "(", "idx_list", "[", "i", "]", "+", "idx", ")", "\n", "params_dict", "[", "name", "]", "=", "params_pred", "[", ":", ",", "idx_list", "[", "i", "]", ":", "idx_list", "[", "i", "+", "1", "]", "]", ".", "contiguous", "(", ")", "\n", "", "params_dict", "[", "'body_pose'", "]", "=", "rot6D_to_angular", "(", "params_dict", "[", "'body_pose'", "]", ")", "\n", "params_dict", "[", "'global_orient'", "]", "=", "rot6D_to_angular", "(", "params_dict", "[", "'global_orient'", "]", ")", "\n", "N", "=", "params_dict", "[", "'body_pose'", "]", ".", "shape", "[", "0", "]", "\n", "params_dict", "[", "'body_pose'", "]", "=", "torch", ".", "cat", "(", "[", "params_dict", "[", "'body_pose'", "]", ",", "torch", ".", "zeros", "(", "N", ",", "6", ")", ".", "to", "(", "params_dict", "[", "'body_pose'", "]", ".", "device", ")", "]", ",", "1", ")", "\n", "params_dict", "[", "'smpl_thetas'", "]", "=", "torch", ".", "cat", "(", "[", "params_dict", "[", "'global_orient'", "]", ",", "params_dict", "[", "'body_pose'", "]", "]", ",", "1", ")", "\n", "\n", "return", "params_dict", "\n", "\n", "", "def", "convert_proejection_from_input_to_orgimg", "(", "kps", ",", "offsets", ")", ":", "\n", "    ", "top", ",", "bottom", ",", "left", ",", "right", ",", "h", ",", "w", "=", "offsets", "\n", "img_pad_size", "=", "max", "(", "h", ",", "w", ")", "\n", "kps", "[", ":", ",", ":", ",", "0", "]", "=", "(", "kps", "[", ":", ",", ":", ",", "0", "]", "+", "1", ")", "*", "img_pad_size", "/", "2", "-", "left", "\n", "kps", "[", ":", ",", ":", ",", "1", "]", "=", "(", "kps", "[", ":", ",", ":", ",", "1", "]", "+", "1", ")", "*", "img_pad_size", "/", "2", "-", "top", "\n", "if", "kps", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "kps", "[", ":", ",", ":", ",", "2", "]", "=", "(", "kps", "[", ":", ",", ":", ",", "2", "]", "+", "1", ")", "*", "img_pad_size", "/", "2", "\n", "", "return", "kps", "\n", "\n", "", "def", "convert_cam_to_3d_trans", "(", "cams", ",", "weight", "=", "2.", ")", ":", "\n", "    ", "(", "s", ",", "tx", ",", "ty", ")", "=", "cams", "[", ":", ",", "0", "]", ",", "cams", "[", ":", ",", "1", "]", ",", "cams", "[", ":", ",", "2", "]", "\n", "depth", ",", "dx", ",", "dy", "=", "1.", "/", "s", ",", "tx", "/", "s", ",", "ty", "/", "s", "\n", "trans3d", "=", "torch", ".", "stack", "(", "[", "dx", ",", "dy", ",", "depth", "]", ",", "1", ")", "*", "weight", "\n", "return", "trans3d", "\n", "\n", "", "def", "convert_cam_to_3d_trans2", "(", "j3ds", ",", "pj3d", ")", ":", "\n", "    ", "predicts_j3ds", "=", "j3ds", "[", ":", ",", ":", "24", "]", ".", "contiguous", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predicts_pj2ds", "=", "(", "pj3d", "[", ":", ",", ":", ",", ":", "2", "]", "[", ":", ",", ":", "24", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1", ")", "*", "256", "\n", "cam_trans", "=", "estimate_translation", "(", "predicts_j3ds", ",", "predicts_pj2ds", ",", "focal_length", "=", "443.4", ",", "img_size", "=", "np", ".", "array", "(", "[", "512", ",", "512", "]", ")", ")", ".", "to", "(", "j3ds", ".", "device", ")", "\n", "return", "cam_trans", "\n", "\n", "\n", "", "def", "body_mesh_projection2image", "(", "j3d_preds", ",", "cam_preds", ",", "vertices", "=", "None", ",", "input2org_offsets", "=", "None", ")", ":", "\n", "    ", "pj3d", "=", "batch_orth_proj", "(", "j3d_preds", ",", "cam_preds", ",", "mode", "=", "'2d'", ")", "\n", "pred_cam_t", "=", "convert_cam_to_3d_trans2", "(", "j3d_preds", ",", "pj3d", ")", "\n", "projected_outputs", "=", "{", "'pj2d'", ":", "pj3d", "[", ":", ",", ":", ",", ":", "2", "]", ",", "'cam_trans'", ":", "pred_cam_t", "}", "\n", "if", "vertices", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.convert_scale_to_depth": [[111, 113], ["None"], "function", ["None"], ["", "if", "input2org_offsets", "is", "not", "None", ":", "\n", "        ", "projected_outputs", "[", "'pj2d_org'", "]", "=", "convert_proejection_from_input_to_orgimg", "(", "projected_outputs", "[", "'pj2d'", "]", ",", "input2org_offsets", ")", "\n", "projected_outputs", "[", "'verts_camed_org'", "]", "=", "convert_proejection_from_input_to_orgimg", "(", "projected_outputs", "[", "'verts_camed'", "]", ",", "input2org_offsets", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.denormalize_cam_params_to_trans": [[114, 129], ["torch.flip", "convert_scale_to_depth().unsqueeze", "torch.cat", "post_parser.convert_scale_to_depth"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.MuPoTS.flip", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.convert_scale_to_depth"], ["", "return", "projected_outputs", "\n", "\n", "", "class", "SMPL_parser", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "super", "(", "SMPL_parser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smpl_model", "=", "SMPL", "(", "model_path", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "outputs", ",", "root_align", "=", "False", ")", ":", "\n", "        ", "verts", ",", "joints", ",", "face", "=", "self", ".", "smpl_model", "(", "outputs", "[", "'smpl_betas'", "]", ",", "outputs", "[", "'smpl_thetas'", "]", ",", "root_align", "=", "root_align", ")", "\n", "outputs", ".", "update", "(", "{", "'verts'", ":", "verts", ",", "'joints'", ":", "joints", ",", "'smpl_face'", ":", "face", "}", ")", "\n", "\n", "return", "outputs", "\n", "\n", "\n", "", "", "def", "parameter_sampling", "(", "maps", ",", "batch_ids", ",", "flat_inds", ",", "use_transform", "=", "True", ")", ":", "\n", "    ", "if", "use_transform", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.convert_proejection_from_input_to_orgimg": [[130, 138], ["max"], "function", ["None"], ["        ", "batch", ",", "channel", "=", "maps", ".", "shape", "[", ":", "2", "]", "\n", "maps", "=", "maps", ".", "view", "(", "batch", ",", "channel", ",", "-", "1", ")", ".", "permute", "(", "(", "0", ",", "2", ",", "1", ")", ")", ".", "contiguous", "(", ")", "\n", "", "results", "=", "maps", "[", "batch_ids", ",", "flat_inds", "]", ".", "contiguous", "(", ")", "\n", "return", "results", "\n", "\n", "", "def", "parsing_outputs", "(", "center_maps", ",", "params_maps", ",", "centermap_parser", ")", ":", "\n", "    ", "center_preds_info", "=", "centermap_parser", ".", "parse_centermap", "(", "center_maps", ")", "\n", "batch_ids", ",", "flat_inds", ",", "cyxs", ",", "center_confs", "=", "center_preds_info", "\n", "if", "len", "(", "batch_ids", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.body_mesh_projection2image": [[140, 153], ["post_parser.denormalize_cam_params_to_trans", "post_parser.perspective_projection", "perspective_projection.float", "post_parser.perspective_projection", "torch.cat", "post_parser.convert_proejection_from_input_to_orgimg", "vertices.clone().detach", "post_parser.convert_proejection_from_input_to_orgimg", "vertices.clone"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.denormalize_cam_params_to_trans", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.perspective_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.convert_proejection_from_input_to_orgimg", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.convert_proejection_from_input_to_orgimg", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone"], ["return", "None", "\n", "\n", "", "params_pred", "=", "parameter_sampling", "(", "params_maps", ",", "batch_ids", ",", "flat_inds", ",", "use_transform", "=", "True", ")", "\n", "parsed_results", "=", "pack_params_dict", "(", "params_pred", ")", "\n", "parsed_results", "[", "'center_preds'", "]", "=", "torch", ".", "stack", "(", "[", "flat_inds", "%", "64", ",", "flat_inds", "//", "64", "]", ",", "1", ")", "*", "512", "//", "64", "\n", "parsed_results", "[", "'center_confs'", "]", "=", "parameter_sampling", "(", "center_maps", ",", "batch_ids", ",", "flat_inds", ",", "use_transform", "=", "True", ")", "\n", "return", "parsed_results", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.remove_subjects": [[154, 166], ["len", "torch.ones().bool", "[].tolist", "list", "outputs.keys", "torch.ones", "torch.where"], "function", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.suppressing_redundant_prediction_via_projection": [[167, 199], ["len", "torch.norm().mean", "torch.where", "max", "torch.where", "pj2ds.unsqueeze().repeat", "pj2ds.unsqueeze().repeat", "person_scales.unsqueeze().repeat", "person_scales.unsqueeze().repeat", "torch.triu", "len", "post_parser.remove_subjects", "torch.norm", "torch.ones_like", "torch.where", "torch.where", "pj2ds.unsqueeze", "pj2ds.unsqueeze", "person_scales.unsqueeze", "person_scales.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.remove_subjects"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.remove_outlier": [[200, 223], ["len", "torch.norm", "torch.norm.mean", "cam_trans.unsqueeze().repeat", "cam_trans.unsqueeze().repeat", "torch.where", "len", "post_parser.remove_subjects", "torch.sort", "cam_trans.unsqueeze", "cam_trans.unsqueeze", "trans_dist_mat.mean.sum"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.remove_subjects", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.nms": [[224, 229], ["pool_func", "torch.eq().float", "torch.eq"], "function", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.gather_feature": [[230, 239], ["fmap.reshape.size", "index.unsqueeze().expand.unsqueeze().expand", "fmap.reshape.gather", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "fmap.reshape.reshape", "index.unsqueeze().expand.unsqueeze", "len", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel._DataParallel.gather"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.pack_params_dict": [[240, 254], ["enumerate", "romp.utils.rot6D_to_angular", "romp.utils.rot6D_to_angular", "torch.cat", "torch.cat", "zip", "idx_list.append", "params_pred[].contiguous", "torch.zeros().to", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.rot_6D.rot6D_to_angular"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.__init__": [[89, 95], ["torch.nn.Module.__init__", "romp.utils.determine_device", "main.BEV._build_model_", "main.BEV._initilization_"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.determine_device", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._build_model_", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._initilization_"], ["print", "(", "'created!'", ")", "\n", "\n", "", "", "def", "_initilization_", "(", "self", ")", ":", "\n", "        ", "self", ".", "centermap_parser", "=", "CenterMap", "(", "conf_thresh", "=", "self", ".", "settings", ".", "center_thresh", ")", "\n", "\n", "if", "self", ".", "settings", ".", "calc_smpl", ":", "\n", "            ", "self", ".", "smpl_parser", "=", "SMPL_parser", "(", "self", ".", "settings", ".", "smpl_path", ")", ".", "to", "(", "self", ".", "tdevice", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._build_model_": [[96, 101], ["model.to.BEVv1().eval", "model.to.to.load_state_dict", "model.to.to.to", "torch.nn.DataParallel", "torch.load", "model.to.BEVv1"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.models.balanced_dataparallel.DataParallel", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], ["\n", "", "if", "self", ".", "settings", ".", "temporal_optimize", ":", "\n", "            ", "self", ".", "_initialize_optimization_tools_", "(", ")", "\n", "\n", "", "if", "self", ".", "settings", ".", "render_mesh", ":", "\n", "            ", "self", ".", "visualize_items", "=", "self", ".", "settings", ".", "show_items", ".", "split", "(", "','", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._initilization_": [[102, 113], ["main.BEV.settings.show_items.split", "post_parser.SMPLA_parser().to", "main.BEV._initialize_optimization_tools_", "vis_human.setup_renderer", "post_parser.SMPLA_parser"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.COCOeval.split", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._initialize_optimization_tools_", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.main.setup_renderer"], ["self", ".", "renderer", "=", "setup_renderer", "(", "name", "=", "self", ".", "settings", ".", "renderer", ")", "\n", "\n", "", "", "def", "single_image_forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "input_image", ",", "image_pad_info", "=", "img_preprocess", "(", "image", ")", "\n", "if", "self", ".", "settings", ".", "onnx", ":", "\n", "            ", "center_maps", ",", "params_maps", "=", "self", ".", "ort_session", ".", "run", "(", "None", ",", "{", "'image'", ":", "input_image", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "}", ")", "\n", "center_maps", ",", "params_maps", "=", "torch", ".", "from_numpy", "(", "center_maps", ")", ".", "to", "(", "self", ".", "tdevice", ")", ",", "torch", ".", "from_numpy", "(", "params_maps", ")", ".", "to", "(", "self", ".", "tdevice", ")", "\n", "", "else", ":", "\n", "            ", "center_maps", ",", "params_maps", "=", "self", ".", "model", "(", "input_image", ".", "to", "(", "self", ".", "tdevice", ")", ")", "\n", "", "params_maps", "[", ":", ",", "0", "]", "=", "torch", ".", "pow", "(", "1.1", ",", "params_maps", "[", ":", ",", "0", "]", ")", "\n", "parsed_results", "=", "parsing_outputs", "(", "center_maps", ",", "params_maps", ",", "self", ".", "centermap_parser", ")", "\n", "return", "parsed_results", ",", "image_pad_info", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV._initialize_optimization_tools_": [[114, 119], ["Tracker"], "methods", ["None"], ["\n", "", "def", "_initialize_optimization_tools_", "(", "self", ")", ":", "\n", "        ", "self", ".", "OE_filters", "=", "{", "}", "\n", "if", "not", "self", ".", "settings", ".", "show_largest", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "norfair", "import", "Tracker", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.single_image_forward": [[120, 133], ["romp.utils.img_preprocess", "main.BEV.model", "main.BEV.update", "main.BEV.update", "list", "input_image.to", "post_parser.pack_params_dict", "main.BEV.keys", "post_parser.denormalize_cam_params_to_trans"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.dataset.internet.img_preprocess", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.pack_params_dict", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.denormalize_cam_params_to_trans"], ["", "except", ":", "\n", "                ", "print", "(", "'To perform temporal optimization, installing norfair for tracking.'", ")", "\n", "os", ".", "system", "(", "'pip install norfair'", ")", "\n", "from", "norfair", "import", "Tracker", "\n", "", "self", ".", "tracker", "=", "Tracker", "(", "distance_function", "=", "euclidean_distance", ",", "distance_threshold", "=", "120", ")", "\n", "self", ".", "tracker_initialized", "=", "False", "\n", "\n", "", "", "def", "temporal_optimization", "(", "self", ",", "outputs", ",", "signal_ID", ")", ":", "\n", "        ", "check_filter_state", "(", "self", ".", "OE_filters", ",", "signal_ID", ",", "self", ".", "settings", ".", "show_largest", ",", "self", ".", "settings", ".", "smooth_coeff", ")", "\n", "if", "self", ".", "settings", ".", "show_largest", ":", "\n", "            ", "max_id", "=", "torch", ".", "argmax", "(", "outputs", "[", "'cam'", "]", "[", ":", ",", "0", "]", ")", "\n", "outputs", "[", "'smpl_thetas'", "]", ",", "outputs", "[", "'smpl_betas'", "]", ",", "outputs", "[", "'cam'", "]", "=", "smooth_results", "(", "self", ".", "OE_filters", "[", "signal_ID", "]", ",", "outputs", "[", "'smpl_thetas'", "]", "[", "max_id", "]", ",", "outputs", "[", "'smpl_betas'", "]", "[", "max_id", "]", ",", "outputs", "[", "'cam'", "]", "[", "max_id", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.forward": [[134, 154], ["romp.utils.time_cost", "torch.no_grad", "romp.utils.convert_tensor2numpy", "main.BEV.process_long_image", "main.BEV.process_normal_image", "vis_human.rendering_romp_bev_results", "cv2.imshow", "romp.utils.wait_func", "cv2.resize", "int"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.time_cost", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.convert_tensor2numpy", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.process_long_image", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.process_normal_image", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.main.rendering_romp_bev_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.wait_func"], ["", "else", ":", "\n", "            ", "pred_cams", "=", "outputs", "[", "'cam'", "]", "\n", "from", "norfair", "import", "Detection", "\n", "detections", "=", "[", "Detection", "(", "points", "=", "cam", "[", "[", "2", ",", "1", "]", "]", "*", "512", ")", "for", "cam", "in", "pred_cams", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "if", "not", "self", ".", "tracker_initialized", ":", "\n", "                ", "for", "_", "in", "range", "(", "8", ")", ":", "\n", "                    ", "tracked_objects", "=", "self", ".", "tracker", ".", "update", "(", "detections", "=", "detections", ")", "\n", "", "", "tracked_objects", "=", "self", ".", "tracker", ".", "update", "(", "detections", "=", "detections", ")", "\n", "if", "len", "(", "tracked_objects", ")", "==", "0", ":", "\n", "                ", "return", "outputs", "\n", "", "tracked_ids", "=", "get_tracked_ids", "(", "detections", ",", "tracked_objects", ")", "\n", "for", "ind", ",", "tid", "in", "enumerate", "(", "tracked_ids", ")", ":", "\n", "                ", "if", "tid", "not", "in", "self", ".", "OE_filters", "[", "signal_ID", "]", ":", "\n", "                    ", "self", ".", "OE_filters", "[", "signal_ID", "]", "[", "tid", "]", "=", "create_OneEuroFilter", "(", "self", ".", "settings", ".", "smooth_coeff", ")", "\n", "\n", "", "outputs", "[", "'smpl_thetas'", "]", "[", "ind", "]", ",", "outputs", "[", "'smpl_betas'", "]", "[", "ind", "]", ",", "outputs", "[", "'cam'", "]", "[", "ind", "]", "=", "smooth_results", "(", "self", ".", "OE_filters", "[", "signal_ID", "]", "[", "tid", "]", ",", "outputs", "[", "'smpl_thetas'", "]", "[", "ind", "]", ",", "outputs", "[", "'smpl_betas'", "]", "[", "ind", "]", ",", "outputs", "[", "'cam'", "]", "[", "ind", "]", ")", "\n", "\n", "", "outputs", "[", "'track_ids'", "]", "=", "np", ".", "array", "(", "tracked_ids", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "return", "outputs", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.process_normal_image": [[155, 179], ["main.BEV.single_image_forward", "main.BEV.temporal_optimization", "post_parser.remove_outlier.update", "main.BEV.smpl_parser", "post_parser.remove_outlier.update", "post_parser.body_mesh_projection2image", "post_parser.remove_outlier.update", "post_parser.suppressing_redundant_prediction_via_projection", "post_parser.remove_outlier", "post_parser.denormalize_cam_params_to_trans"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.single_image_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.temporal_optimization", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.body_mesh_projection2image", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.suppressing_redundant_prediction_via_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.remove_outlier", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.denormalize_cam_params_to_trans"], ["\n", "", "@", "time_cost", "(", "'ROMP'", ")", "\n", "def", "forward", "(", "self", ",", "image", ",", "signal_ID", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", ",", "image_pad_info", "=", "self", ".", "single_image_forward", "(", "image", ")", "\n", "if", "outputs", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "self", ".", "settings", ".", "temporal_optimize", ":", "\n", "            ", "outputs", "=", "self", ".", "temporal_optimization", "(", "outputs", ",", "signal_ID", ")", "\n", "", "outputs", "[", "'cam_trans'", "]", "=", "convert_cam_to_3d_trans", "(", "outputs", "[", "'cam'", "]", ")", "\n", "if", "self", ".", "settings", ".", "calc_smpl", ":", "\n", "            ", "outputs", "=", "self", ".", "smpl_parser", "(", "outputs", ",", "root_align", "=", "self", ".", "settings", ".", "root_align", ")", "\n", "outputs", ".", "update", "(", "body_mesh_projection2image", "(", "outputs", "[", "'joints'", "]", ",", "outputs", "[", "'cam'", "]", ",", "vertices", "=", "outputs", "[", "'verts'", "]", ",", "input2org_offsets", "=", "image_pad_info", ")", ")", "\n", "", "if", "self", ".", "settings", ".", "render_mesh", ":", "\n", "            ", "rendering_cfgs", "=", "{", "'mesh_color'", ":", "'identity'", ",", "'items'", ":", "self", ".", "visualize_items", ",", "'renderer'", ":", "self", ".", "settings", ".", "renderer", "}", "# 'identity'", "\n", "outputs", "=", "rendering_romp_bev_results", "(", "self", ".", "renderer", ",", "outputs", ",", "image", ",", "rendering_cfgs", ")", "\n", "", "if", "self", ".", "settings", ".", "show", ":", "\n", "            ", "cv2", ".", "imshow", "(", "'rendered'", ",", "outputs", "[", "'rendered_image'", "]", ")", "\n", "wait_func", "(", "self", ".", "settings", ".", "mode", ")", "\n", "", "return", "convert_tensor2numpy", "(", "outputs", ")", "\n", "\n", "", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "romp_settings", "(", ")", "\n", "romp", "=", "ROMP", "(", "args", ")", "\n", "if", "args", ".", "mode", "==", "'image'", ":", "\n", "        ", "saver", "=", "ResultSaver", "(", "args", ".", "mode", ",", "args", ".", "save_path", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.process_long_image": [[181, 256], ["print", "padding_image_overlap", "get_image_split_plan", "enumerate", "range", "range", "enumerate", "enumerate", "post_parser.body_mesh_projection2image", "post_parser.remove_outlier.update", "post_parser.suppressing_redundant_prediction_via_projection", "post_parser.remove_outlier", "main.BEV.single_image_forward", "main.BEV.smpl_parser", "crop_outputs.update", "outputs_list.append", "croped_images.append", "len", "post_parser.suppressing_redundant_prediction_via_projection", "post_parser.remove_outlier", "enumerate", "convert_crop_cam_params2full_image", "collect_outputs", "outputs_list.append", "post_parser.body_mesh_projection2image", "vis_human.rendering_romp_bev_results.update", "len", "exclude_boudary_subjects", "vis_human.rendering_romp_bev_results", "romp.utils.ResultSaver", "romp.utils.ResultSaver.", "exclude_boudary_subjects", "len", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.padding_image_overlap", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.get_image_split_plan", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.body_mesh_projection2image", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.suppressing_redundant_prediction_via_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.remove_outlier", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.single_image_forward", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.suppressing_redundant_prediction_via_projection", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.remove_outlier", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.convert_crop_cam_params2full_image", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.collect_outputs", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.body_mesh_projection2image", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.exclude_boudary_subjects", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_human.main.rendering_romp_bev_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.exclude_boudary_subjects"], ["outputs", "=", "romp", "(", "image", ")", "\n", "saver", "(", "outputs", ",", "args", ".", "input", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "'video'", ":", "\n", "        ", "frame_paths", ",", "video_save_path", "=", "collect_frame_path", "(", "args", ".", "input", ",", "args", ".", "save_path", ")", "\n", "saver", "=", "ResultSaver", "(", "args", ".", "mode", ",", "args", ".", "save_path", ")", "\n", "for", "frame_path", "in", "progress_bar", "(", "frame_paths", ")", ":", "\n", "            ", "image", "=", "cv2", ".", "imread", "(", "frame_path", ")", "\n", "outputs", "=", "romp", "(", "image", ")", "\n", "saver", "(", "outputs", ",", "frame_path", ")", "\n", "", "save_video_results", "(", "saver", ".", "frame_save_paths", ")", "\n", "if", "args", ".", "save_video", ":", "\n", "            ", "saver", ".", "save_video", "(", "video_save_path", ",", "frame_rate", "=", "args", ".", "frame_rate", ")", "\n", "\n", "", "", "if", "args", ".", "mode", "==", "'webcam'", ":", "\n", "        ", "cap", "=", "WebcamVideoStream", "(", "0", ")", "\n", "cap", ".", "start", "(", ")", "\n", "while", "True", ":", "\n", "            ", "frame", "=", "cap", ".", "read", "(", ")", "\n", "outputs", "=", "romp", "(", "frame", ")", "\n", "", "cap", ".", "stop", "(", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.BEV.temporal_optimization": [[257, 284], ["romp.utils.check_filter_state", "torch.argmax", "romp.utils.smooth_results", "outputs[].cpu().numpy", "outputs[].cpu().numpy", "outputs[].cpu().numpy", "numpy.concatenate", "main.BEV.tracker.update", "enumerate", "numpy.array().astype", "len", "romp.utils.smooth_results", "outputs[].cpu", "outputs[].cpu", "outputs[].cpu", "romp.utils.create_OneEuroFilter", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.check_filter_state", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.smooth_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.smooth_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.temporal_optimization.create_OneEuroFilter"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.bev_settings": [[27, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.join", "torch.cuda.is_available", "os.path.exists", "os.path.exists", "romp.utils.download_model", "os.path.exists", "os.path.exists", "romp.utils.download_model", "os.path.exists", "os.path.exists", "romp.utils.download_model", "os.join", "os.join", "os.join", "os.join", "os.expanduser", "os.expanduser", "os.expanduser", "os.expanduser", "os.expanduser"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.lib.config.parse_args", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.download_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.download_model", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.download_model"], ["parser", ".", "add_argument", "(", "'--show_largest'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to show the largest person only'", ")", "\n", "parser", ".", "add_argument", "(", "'-sc'", ",", "'--smooth_coeff'", ",", "type", "=", "float", ",", "default", "=", "3.", ",", "help", "=", "'The smoothness coeff of OneEuro filter, the smaller, the smoother.'", ")", "\n", "parser", ".", "add_argument", "(", "'--calc_smpl'", ",", "action", "=", "'store_false'", ",", "help", "=", "'Whether to calculate the smpl mesh from estimated SMPL parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'--render_mesh'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to render the estimated 3D mesh mesh to image'", ")", "\n", "parser", ".", "add_argument", "(", "'--renderer'", ",", "type", "=", "str", ",", "default", "=", "'sim3dr'", ",", "help", "=", "'Choose the renderer for visualizaiton: pyrender (great but slow), sim3dr (fine but fast)'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to show the rendered results'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_items'", ",", "type", "=", "str", ",", "default", "=", "'mesh'", ",", "help", "=", "'The items to visualized, including mesh,pj2d,j3d,mesh_bird_view,mesh_side_view,center_conf. splited with ,'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_video'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to save the video results'", ")", "\n", "parser", ".", "add_argument", "(", "'--frame_rate'", ",", "type", "=", "int", ",", "default", "=", "24", ",", "help", "=", "'The frame_rate of saved video results'", ")", "\n", "parser", ".", "add_argument", "(", "'--smpl_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'.romp'", ",", "'smpl_packed_info.pth'", ")", ",", "help", "=", "'The path of smpl model file'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'.romp'", ",", "'ROMP.pkl'", ")", ",", "help", "=", "'The path of ROMP checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_onnx_path'", ",", "type", "=", "str", ",", "default", "=", "osp", ".", "join", "(", "osp", ".", "expanduser", "(", "\"~\"", ")", ",", "'.romp'", ",", "'ROMP.onnx'", ")", ",", "help", "=", "'The path of ROMP onnx checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--root_align'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'Please set this config as True to use the ROMP checkpoints trained by yourself.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "input_args", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "args", ".", "GPU", "=", "-", "1", "\n", "args", ".", "temporal_optimize", "=", "False", "\n", "", "if", "args", ".", "show", ":", "\n", "        ", "args", ".", "render_mesh", "=", "True", "\n", "", "if", "args", ".", "render_mesh", "or", "args", ".", "show_largest", ":", "\n", "        ", "args", ".", "calc_smpl", "=", "True", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "smpl_path", ")", ":", "\n", "        ", "smpl_url", "=", "'https://github.com/Arthur151/ROMP/releases/download/V2.0/smpl_packed_info.pth'", "\n", "download_model", "(", "smpl_url", ",", "args", ".", "smpl_path", ",", "'SMPL'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "model_path", ")", ":", "\n", "        ", "romp_url", "=", "'https://github.com/Arthur151/ROMP/releases/download/V2.0/ROMP.pkl'", "\n", "download_model", "(", "romp_url", ",", "args", ".", "model_path", ",", "'ROMP'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "model_onnx_path", ")", "and", "args", ".", "onnx", ":", "\n", "        ", "romp_onnx_url", "=", "'https://github.com/Arthur151/ROMP/releases/download/V2.0/ROMP.onnx'", "\n", "download_model", "(", "romp_onnx_url", ",", "args", ".", "model_onnx_path", ",", "'ROMP'", ")", "\n", "", "return", "args", "\n", "\n", "", "default_settings", "=", "romp_settings", "(", "input_args", "=", "[", "]", ")", "\n", "\n", "class", "ROMP", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "romp_settings", ")", ":", "\n", "        ", "super", "(", "ROMP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "settings", "=", "romp_settings", "\n", "self", ".", "tdevice", "=", "determine_device", "(", "self", ".", "settings", ".", "GPU", ")", "\n", "self", ".", "_build_model_", "(", ")", "\n", "self", ".", "_initilization_", "(", ")", "\n", "\n", "", "def", "_build_model_", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "settings", ".", "onnx", ":", "\n", "            ", "model", "=", "ROMPv1", "(", ")", ".", "eval", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "settings", ".", "model_path", ",", "map_location", "=", "self", ".", "tdevice", ")", ")", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "tdevice", ")", "\n", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "onnxruntime", "\n", "", "except", ":", "\n", "                ", "print", "(", "'To use onnx model, we need to install the onnxruntime python package. Please install it by youself if failed!'", ")", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "os", ".", "system", "(", "'pip install onnxruntime'", ")", "\n", "", "else", ":", "\n", "                    ", "os", ".", "system", "(", "'pip install onnxruntime-gpu'", ")", "\n", "", "import", "onnxruntime", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.main": [[285, 314], ["main.bev_settings", "main.BEV", "romp.utils.ResultSaver", "cv2.imread", "BEV.", "romp.utils.ResultSaver.", "romp.utils.collect_frame_path", "romp.utils.ResultSaver", "romp.utils.progress_bar", "romp.utils.save_video_results", "romp.utils.WebcamVideoStream", "romp.utils.WebcamVideoStream.start", "romp.utils.WebcamVideoStream.stop", "cv2.imread", "BEV.", "romp.utils.ResultSaver.", "romp.utils.ResultSaver.save_video", "romp.utils.WebcamVideoStream.read", "BEV.", "cv2.waitKey"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.main.bev_settings", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.collect_frame_path", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.progress_bar", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.save_video_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Time_counter.start", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.WebcamVideoStream.stop", "home.repos.pwc.inspect_result.Arthur151_ROMP.romp.utils.ResultSaver.save_video", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.demo_utils.Image_Reader.read"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.padding_image_overlap": [[6, 23], ["int", "numpy.zeros", "torch.Tensor"], "function", ["None"], ["def", "padding_image_overlap", "(", "image", ",", "overlap_ratio", "=", "0.46", ")", ":", "\n", "    ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "pad_length", "=", "int", "(", "h", "*", "overlap_ratio", ")", "\n", "pad_w", "=", "w", "+", "2", "*", "pad_length", "\n", "pad_image", "=", "np", ".", "zeros", "(", "(", "h", ",", "pad_w", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "top", ",", "left", "=", "0", ",", "pad_length", "\n", "bottom", ",", "right", "=", "h", ",", "w", "+", "pad_length", "\n", "pad_image", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "=", "image", "\n", "\n", "# due to BEV takes square input, so we convert top, bottom to the state that assuming square padding", "\n", "pad_height", "=", "(", "w", "-", "h", ")", "//", "2", "\n", "top", "=", "pad_height", "\n", "bottom", "=", "w", "-", "top", "\n", "left", "=", "0", "\n", "right", "=", "w", "\n", "image_pad_info", "=", "torch", ".", "Tensor", "(", "[", "top", ",", "bottom", ",", "left", ",", "right", ",", "h", ",", "w", "]", ")", "\n", "return", "pad_image", ",", "image_pad_info", ",", "pad_length", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.get_image_split_plan": [[24, 40], ["range", "numpy.array().astype", "int", "crop_box.append", "numpy.ceil", "numpy.array"], "function", ["None"], ["", "def", "get_image_split_plan", "(", "image", ",", "overlap_ratio", "=", "0.46", ")", ":", "\n", "    ", "h", ",", "w", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "aspect_ratio", "=", "w", "/", "h", "\n", "slide_time", "=", "int", "(", "np", ".", "ceil", "(", "(", "aspect_ratio", "-", "1", ")", "/", "(", "1", "-", "overlap_ratio", ")", ")", ")", "+", "1", "\n", "\n", "crop_box", "=", "[", "]", "# left, right, top, bottom", "\n", "move_step", "=", "(", "1", "-", "overlap_ratio", ")", "*", "h", "\n", "for", "ind", "in", "range", "(", "slide_time", ")", ":", "\n", "        ", "if", "ind", "==", "(", "slide_time", "-", "1", ")", ":", "\n", "            ", "left", "=", "w", "-", "h", "\n", "", "else", ":", "\n", "            ", "left", "=", "move_step", "*", "ind", "\n", "right", "=", "left", "+", "h", "\n", "", "crop_box", ".", "append", "(", "[", "left", ",", "right", ",", "0", ",", "h", "]", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "crop_box", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.exclude_boudary_subjects": [[41, 47], ["post_parser.remove_subjects", "torch.where"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.remove_subjects"], ["", "def", "exclude_boudary_subjects", "(", "outputs", ",", "drop_boundary_ratio", ",", "ptype", "=", "'left'", ",", "torlerance", "=", "0.05", ")", ":", "\n", "    ", "if", "ptype", "==", "'left'", ":", "\n", "        ", "drop_mask", "=", "outputs", "[", "'cam'", "]", "[", ":", ",", "2", "]", ">", "(", "1", "-", "drop_boundary_ratio", "+", "torlerance", ")", "\n", "", "elif", "ptype", "==", "'right'", ":", "\n", "        ", "drop_mask", "=", "outputs", "[", "'cam'", "]", "[", ":", ",", "2", "]", "<", "(", "drop_boundary_ratio", "-", "1", "-", "torlerance", ")", "\n", "", "remove_subjects", "(", "outputs", ",", "torch", ".", "where", "(", "drop_mask", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.convert_crop_cam_params2full_image": [[48, 59], ["crop_bbox[].mean", "max"], "function", ["None"], ["", "def", "convert_crop_cam_params2full_image", "(", "cam_params", ",", "crop_bbox", ",", "image_shape", ")", ":", "\n", "    ", "h", ",", "w", "=", "image_shape", "\n", "# adjust scale, cam 3: depth, y, x", "\n", "scale_adjust", "=", "(", "crop_bbox", "[", "[", "1", ",", "3", "]", "]", "-", "crop_bbox", "[", "[", "0", ",", "2", "]", "]", ")", ".", "max", "(", ")", "/", "max", "(", "h", ",", "w", ")", "\n", "cam_params", "*=", "scale_adjust", "\n", "\n", "# adjust x", "\n", "# crop_bbox[:2] -= pad_length", "\n", "bbox_mean_x", "=", "crop_bbox", "[", ":", "2", "]", ".", "mean", "(", ")", "\n", "cam_params", "[", ":", ",", "2", "]", "+=", "bbox_mean_x", "/", "(", "w", "/", "2", ")", "-", "1", "\n", "return", "cam_params", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.split2process.collect_outputs": [[60, 75], ["list", "outputs.keys", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "collect_outputs", "(", "outputs", ",", "all_outputs", ")", ":", "\n", "    ", "keys", "=", "list", "(", "outputs", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "key", "not", "in", "all_outputs", ":", "\n", "            ", "all_outputs", "[", "key", "]", "=", "outputs", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "if", "key", "in", "[", "'smpl_face'", "]", ":", "\n", "                ", "continue", "\n", "", "if", "key", "in", "[", "'center_map'", "]", ":", "\n", "                ", "all_outputs", "[", "key", "]", "=", "torch", ".", "cat", "(", "[", "all_outputs", "[", "key", "]", ",", "outputs", "[", "key", "]", "]", ",", "3", ")", "\n", "continue", "\n", "", "if", "key", "in", "[", "'center_map_3d'", "]", ":", "\n", "                ", "all_outputs", "[", "key", "]", "=", "torch", ".", "cat", "(", "[", "all_outputs", "[", "key", "]", ",", "outputs", "[", "key", "]", "]", ",", "2", ")", "\n", "continue", "\n", "", "all_outputs", "[", "key", "]", "=", "torch", ".", "cat", "(", "[", "all_outputs", "[", "key", "]", ",", "outputs", "[", "key", "]", "]", ",", "0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BasicBlock_1D.__init__": [[27, 35], ["torch.Module.__init__", "model.conv3x3_1D", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "model.conv3x3_1D", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.conv3x3_1D", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.conv3x3_1D"], ["xx_channel", "=", "xx_channel", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "yy_channel", "=", "yy_channel", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "xx_channel", "=", "xx_channel", ".", "float", "(", ")", "/", "(", "size", "-", "1", ")", "\n", "yy_channel", "=", "yy_channel", ".", "float", "(", ")", "/", "(", "size", "-", "1", ")", "\n", "\n", "xx_channel", "=", "xx_channel", "*", "2", "-", "1", "\n", "yy_channel", "=", "yy_channel", "*", "2", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BasicBlock_1D.forward": [[36, 46], ["model.BasicBlock_1D.conv1", "model.BasicBlock_1D.bn1", "model.BasicBlock_1D.relu", "model.BasicBlock_1D.conv2", "model.BasicBlock_1D.bn2", "model.BasicBlock_1D.relu"], "methods", ["None"], ["out", "=", "torch", ".", "cat", "(", "[", "xx_channel", ",", "yy_channel", "]", ",", "dim", "=", "1", ")", "\n", "return", "out", "\n", "\n", "", "def", "BHWC_to_BCHW", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    :param x: torch tensor, B x H x W x C\n    :return:  torch tensor, B x C x H x W\n    \"\"\"", "\n", "return", "x", ".", "unsqueeze", "(", "1", ")", ".", "transpose", "(", "1", ",", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BasicBlock_3D.__init__": [[55, 63], ["torch.Module.__init__", "model.conv3x3_3D", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "model.conv3x3_3D", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.conv3x3_3D", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.conv3x3_3D"], ["    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BasicBlock_3D.forward": [[64, 76], ["model.BasicBlock_3D.conv1", "model.BasicBlock_3D.bn1", "model.BasicBlock_3D.relu", "model.BasicBlock_3D.conv2", "model.BasicBlock_3D.bn2"], "methods", ["None"], ["self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.__init__": [[105, 111], ["torch.Module.__init__", "print", "romp.model.HigherResolutionNet", "model.BEVv1._build_head", "model.BEVv1._build_parser", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._build_head", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._build_parser"], ["\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._build_parser": [[112, 114], ["post_parser.CenterMap3D"], "methods", ["None"], ["out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._build_head": [[115, 130], ["model.BEVv1._make_transformer", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "model.BEVv1.register_buffer", "model.BEVv1._make_final_layers", "model.get_3Dcoord_maps_halfz", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model.get_cam3dmap_anchor"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_transformer", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_final_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.get_3Dcoord_maps_halfz", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.get_cam3dmap_anchor"], ["out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "", "", "blocks_dict", "=", "{", "\n", "'BASIC'", ":", "BasicBlock", ",", "\n", "'BOTTLENECK'", ":", "Bottleneck", "}", "\n", "\n", "class", "HighResolutionModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_transformer": [[131, 141], ["torch.Embedding", "torch.Embedding", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["None"], ["num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_final_layers": [[142, 148], ["model.BEVv1._make_head_layers", "model.BEVv1._make_head_layers", "model.BEVv1._make_bv_center_layers", "model.BEVv1._make_3D_map_refiner"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_bv_center_layers", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_3D_map_refiner"], ["self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_head_layers": [[149, 163], ["range", "torch.Sequential", "torch.Sequential", "head_layers.append", "head_layers.append", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "romp.model.BasicBlock", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_bv_center_layers": [[164, 183], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "model.BasicBlock_1D", "model.BasicBlock_1D", "model.BasicBlock_1D"], "methods", ["None"], ["            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n", "", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1._make_3D_map_refiner": [[184, 187], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.BasicBlock_3D", "model.BasicBlock_3D"], "methods", ["None"], ["fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.fv_conditioned_bv_estimation": [[188, 198], ["model.BEVv1.bv_pre_layers", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "model.BEVv1.bv_out_layers", "model.BEVv1.size", "center_maps_fv.repeat", "center_maps_bv.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "center_maps_bv.unsqueeze"], "methods", ["None"], ["                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.coarse2fine_localization": [[199, 216], ["model.BEVv1.det_head", "model.BEVv1.fv_conditioned_bv_estimation", "model.BEVv1.center_map_refiner().squeeze", "model.BEVv1.cam_map_refiner", "cam_maps_offset.unsqueeze().transpose().contiguous", "cam_maps_offset_bv.unsqueeze().contiguous", "model.BEVv1.unsqueeze().transpose().squeeze", "model.BEVv1.center_map_refiner", "model.BEVv1.unsqueeze", "cam_maps_offset.unsqueeze().transpose", "cam_maps_offset_bv.unsqueeze", "model.BEVv1.unsqueeze().transpose", "cam_maps_offset.unsqueeze", "model.BEVv1.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.fv_conditioned_bv_estimation"], ["                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_outchannels_conv3x3", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.differentiable_person_feature_sampling": [[217, 224], ["model.BEVv1.position_embeddings"], "methods", ["None"], ["nn", ".", "ReLU", "(", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n", "", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.mesh_parameter_regression": [[225, 231], ["model.denormalize_center", "model.BEVv1.differentiable_person_feature_sampling", "model.BEVv1.transformer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.convert_cam_params_to_centermap_coords", "cams_preds.clone"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.denormalize_center", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.differentiable_person_feature_sampling", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.convert_cam_params_to_centermap_coords", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.forward": [[232, 251], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.BEVv1.backbone", "model.BEVv1.coarse2fine_localization", "model.BEVv1.centermap_parser.parse_3dcentermap", "model.BEVv1.param_head", "model.BEVv1.mesh_parameter_regression", "len", "print", "params_preds.float", "cam_czyx.float", "center_maps_fv.float", "center_maps_3d.float().squeeze", "center_maps_3d.float"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.coarse2fine_localization", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.post_parser.CenterMap3D.parse_3dcentermap", "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.BEVv1.mesh_parameter_regression", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["\n", "", "x_fuse", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n", "", "", "class", "HigherResolutionNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "HigherResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "make_baseline", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.get_3Dcoord_maps_halfz": [[9, 18], ["torch.arange", "torch.arange", "len", "z_base.reshape().repeat", "torch.cat", "torch.cat", "z_base.reshape", "torch.arange.reshape().repeat", "torch.arange.reshape().repeat", "torch.arange.reshape", "torch.arange.reshape"], "function", ["None"], ["    ", "xx_ones", "=", "torch", ".", "ones", "(", "[", "1", ",", "size", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "xx_ones", "=", "xx_ones", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "xx_range", "=", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "xx_range", "=", "xx_range", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "xx_channel", "=", "torch", ".", "matmul", "(", "xx_ones", ",", "xx_range", ")", "\n", "xx_channel", "=", "xx_channel", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "yy_ones", "=", "torch", ".", "ones", "(", "[", "1", ",", "size", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.conv3x3_1D": [[19, 23], ["torch.Conv1d"], "function", ["None"], ["yy_ones", "=", "yy_ones", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "yy_range", "=", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "yy_range", "=", "yy_range", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.conv3x3_3D": [[47, 51], ["torch.Conv3d"], "function", ["None"], ["", "BN_MOMENTUM", "=", "0.1", "\n", "\n", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.get_cam3dmap_anchor": [[77, 88], ["numpy.array", "zip", "numpy.concatenate", "np.concatenate.append", "numpy.tan", "numpy.array", "numpy.radians", "numpy.arange"], "function", ["None"], ["if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "", "", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "BN", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.convert_cam_params_to_centermap_coords": [[89, 98], ["torch.ones_like", "torch.ones_like", "cam_params[].clone", "len", "cam3dmap_anchor.to", "len", "torch.argmin().float", "torch.argmin().float", "torch.argmin", "torch.argmin", "torch.abs", "torch.abs", "cam_params[].repeat"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.CN.clone"], ["        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.denormalize_center": [[99, 103], ["torch.clamp().long", "torch.clamp().long", "torch.clamp", "torch.clamp"], "function", ["None"], ["self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.bev.model.export_model_to_onnx_static": [[252, 270], ["BEVv1().cuda", "torch.load", "torch.load", "BEVv1().cuda.load_state_dict", "cv2.resize", "[].cuda().float", "torch.onnx.export", "torch.onnx.export", "print", "cv2.imread", "cv2.cvtColor", "model.BEVv1", "[].cuda", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["self", ".", "backbone_channels", "=", "32", "\n", "\n", "", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels_cur_layer", "[", "i", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.__init__": [[39, 53], ["numpy.eye", "range", "numpy.eye"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "ndim", ",", "dt", "=", "4", ",", "1.", "\n", "\n", "# Create Kalman filter model matrices.", "\n", "self", ".", "_motion_mat", "=", "np", ".", "eye", "(", "2", "*", "ndim", ",", "2", "*", "ndim", ")", "\n", "for", "i", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "self", ".", "_motion_mat", "[", "i", ",", "ndim", "+", "i", "]", "=", "dt", "\n", "", "self", ".", "_update_mat", "=", "np", ".", "eye", "(", "ndim", ",", "2", "*", "ndim", ")", "\n", "\n", "# Motion and observation uncertainty are chosen relative to the current", "\n", "# state estimate. These weights control the amount of uncertainty in", "\n", "# the model. This is a bit hacky.", "\n", "self", ".", "_std_weight_position", "=", "1.", "/", "20", "\n", "self", ".", "_std_weight_velocity", "=", "1.", "/", "160", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.initiate": [[54, 87], ["numpy.zeros_like", "numpy.diag", "numpy.square"], "methods", ["None"], ["", "def", "initiate", "(", "self", ",", "measurement", ")", ":", "\n", "        ", "\"\"\"Create track from unassociated measurement.\n\n        Parameters\n        ----------\n        measurement : ndarray\n            Body 3D center coordinates (x, y, z, h).\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector (8 dimensional) and covariance matrix (8x8\n            dimensional) of the new track. Unobserved velocities are initialized\n            to 0 mean.\n\n        \"\"\"", "\n", "mean_pos", "=", "measurement", "\n", "mean_vel", "=", "np", ".", "zeros_like", "(", "mean_pos", ")", "\n", "mean", "=", "np", ".", "r_", "[", "mean_pos", ",", "mean_vel", "]", "\n", "# For bbox, scale is its height, here we use the inverse of depth to represent person scale", "\n", "scale", "=", "measurement", "[", "3", "]", "\n", "\n", "std", "=", "[", "\n", "2", "*", "self", ".", "_std_weight_position", "*", "scale", ",", "\n", "2", "*", "self", ".", "_std_weight_position", "*", "scale", ",", "\n", "2", "*", "self", ".", "_std_weight_position", "*", "scale", ",", "\n", "2", "*", "self", ".", "_std_weight_position", "*", "scale", ",", "\n", "10", "*", "self", ".", "_std_weight_velocity", "*", "scale", ",", "\n", "10", "*", "self", ".", "_std_weight_velocity", "*", "scale", ",", "\n", "10", "*", "self", ".", "_std_weight_velocity", "*", "scale", ",", "\n", "10", "*", "self", ".", "_std_weight_velocity", "*", "scale", "]", "\n", "covariance", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "std", ")", ")", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.predict": [[88, 125], ["numpy.diag", "numpy.dot", "numpy.square", "numpy.linalg.multi_dot"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter prediction step.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The 8 dimensional mean vector of the object state at the previous\n            time step.\n        covariance : ndarray\n            The 8x8 dimensional covariance matrix of the object state at the\n            previous time step.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector and covariance matrix of the predicted\n            state. Unobserved velocities are initialized to 0 mean.\n\n        \"\"\"", "\n", "std_pos", "=", "[", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", "]", "\n", "std_vel", "=", "[", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", "3", "]", "]", "\n", "motion_cov", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "np", ".", "r_", "[", "std_pos", ",", "std_vel", "]", ")", ")", "\n", "\n", "#mean = np.dot(self._motion_mat, mean)", "\n", "mean", "=", "np", ".", "dot", "(", "mean", ",", "self", ".", "_motion_mat", ".", "T", ")", "\n", "covariance", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "self", ".", "_motion_mat", ",", "covariance", ",", "self", ".", "_motion_mat", ".", "T", ")", ")", "+", "motion_cov", "\n", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.project": [[126, 154], ["numpy.diag", "numpy.dot", "numpy.linalg.multi_dot", "numpy.square"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Project state distribution to measurement space.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The state's mean vector (6 dimensional array).\n        covariance : ndarray\n            The state's covariance matrix (8x8 dimensional).\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the projected mean and covariance matrix of the given state\n            estimate.\n\n        \"\"\"", "\n", "std", "=", "[", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", "3", "]", "]", "\n", "innovation_cov", "=", "np", ".", "diag", "(", "np", ".", "square", "(", "std", ")", ")", "\n", "\n", "mean", "=", "np", ".", "dot", "(", "self", ".", "_update_mat", ",", "mean", ")", "\n", "covariance", "=", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "self", ".", "_update_mat", ",", "covariance", ",", "self", ".", "_update_mat", ".", "T", ")", ")", "\n", "return", "mean", ",", "covariance", "+", "innovation_cov", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.multi_predict": [[155, 193], ["range", "numpy.asarray", "numpy.dot", "numpy.dot().transpose", "numpy.square", "len", "numpy.asarray.append", "numpy.dot", "numpy.diag", "numpy.dot"], "methods", ["None"], ["", "def", "multi_predict", "(", "self", ",", "mean", ",", "covariance", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter prediction step (Vectorized version).\n        Parameters\n        ----------\n        mean : ndarray\n            The Nx6 dimensional mean matrix of the object states at the previous\n            time step.\n        covariance : ndarray\n            The Nx6x6 dimensional covariance matrics of the object states at the\n            previous time step.\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the mean vector and covariance matrix of the predicted\n            state. Unobserved velocities are initialized to 0 mean.\n        \"\"\"", "\n", "std_pos", "=", "[", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", ":", ",", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", ":", ",", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", ":", ",", "3", "]", ",", "\n", "self", ".", "_std_weight_position", "*", "mean", "[", ":", ",", "3", "]", "]", "\n", "std_vel", "=", "[", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", ":", ",", "3", "]", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", ":", ",", "3", "]", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", ":", ",", "3", "]", ",", "\n", "self", ".", "_std_weight_velocity", "*", "mean", "[", ":", ",", "3", "]", "]", "\n", "sqr", "=", "np", ".", "square", "(", "np", ".", "r_", "[", "std_pos", ",", "std_vel", "]", ")", ".", "T", "\n", "\n", "motion_cov", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "mean", ")", ")", ":", "\n", "            ", "motion_cov", ".", "append", "(", "np", ".", "diag", "(", "sqr", "[", "i", "]", ")", ")", "\n", "", "motion_cov", "=", "np", ".", "asarray", "(", "motion_cov", ")", "\n", "\n", "mean", "=", "np", ".", "dot", "(", "mean", ",", "self", ".", "_motion_mat", ".", "T", ")", "\n", "left", "=", "np", ".", "dot", "(", "self", ".", "_motion_mat", ",", "covariance", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "covariance", "=", "np", ".", "dot", "(", "left", ",", "self", ".", "_motion_mat", ".", "T", ")", "+", "motion_cov", "\n", "\n", "return", "mean", ",", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.update": [[194, 225], ["kalman_filter_3dcenter.KalmanFilter.project", "scipy.linalg.cho_factor", "scipy.linalg.cho_solve", "numpy.dot", "numpy.linalg.multi_dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.project"], ["", "def", "update", "(", "self", ",", "mean", ",", "covariance", ",", "measurement", ")", ":", "\n", "        ", "\"\"\"Run Kalman filter correction step.\n\n        Parameters\n        ----------\n        mean : ndarray\n            The predicted state's mean vector (8 dimensional).\n        covariance : ndarray\n            The state's covariance matrix (8x8 dimensional).\n        measurement : ndarray\n            The 3 dimensional measurement vector (x, y) is the 3D body center position.\n\n        Returns\n        -------\n        (ndarray, ndarray)\n            Returns the measurement-corrected state distribution.\n\n        \"\"\"", "\n", "projected_mean", ",", "projected_cov", "=", "self", ".", "project", "(", "mean", ",", "covariance", ")", "\n", "\n", "chol_factor", ",", "lower", "=", "scipy", ".", "linalg", ".", "cho_factor", "(", "\n", "projected_cov", ",", "lower", "=", "True", ",", "check_finite", "=", "False", ")", "\n", "kalman_gain", "=", "scipy", ".", "linalg", ".", "cho_solve", "(", "\n", "(", "chol_factor", ",", "lower", ")", ",", "np", ".", "dot", "(", "covariance", ",", "self", ".", "_update_mat", ".", "T", ")", ".", "T", ",", "\n", "check_finite", "=", "False", ")", ".", "T", "\n", "innovation", "=", "measurement", "-", "projected_mean", "\n", "\n", "new_mean", "=", "mean", "+", "np", ".", "dot", "(", "innovation", ",", "kalman_gain", ".", "T", ")", "\n", "new_covariance", "=", "covariance", "-", "np", ".", "linalg", ".", "multi_dot", "(", "(", "\n", "kalman_gain", ",", "projected_cov", ",", "kalman_gain", ".", "T", ")", ")", "\n", "return", "new_mean", ",", "new_covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.gating_distance": [[226, 269], ["kalman_filter_3dcenter.KalmanFilter.project", "numpy.sum", "numpy.linalg.cholesky", "scipy.linalg.solve_triangular", "numpy.sum", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.project", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["", "def", "gating_distance", "(", "self", ",", "mean", ",", "covariance", ",", "measurements", ",", "\n", "only_position", "=", "False", ",", "metric", "=", "'maha'", ")", ":", "\n", "        ", "\"\"\"Compute gating distance between state distribution and measurements.\n        A suitable distance threshold can be obtained from `chi2inv95`. If\n        `only_position` is False, the chi-square distribution has 4 degrees of\n        freedom, otherwise 2.\n        Parameters\n        ----------\n        mean : ndarray\n            Mean vector over the state distribution (8 dimensional).\n        covariance : ndarray\n            Covariance of the state distribution (8x8 dimensional).\n        measurements : ndarray\n            An Nx4 dimensional matrix of N measurements, each in\n            format (x, y, a, h) where (x, y) is the bounding box center\n            position, a the aspect ratio, and h the height.\n        only_position : Optional[bool]\n            If True, distance computation is done with respect to the bounding\n            box center position only.\n        Returns\n        -------\n        ndarray\n            Returns an array of length N, where the i-th element contains the\n            squared Mahalanobis distance between (mean, covariance) and\n            `measurements[i]`.\n        \"\"\"", "\n", "mean", ",", "covariance", "=", "self", ".", "project", "(", "mean", ",", "covariance", ")", "\n", "if", "only_position", ":", "\n", "            ", "mean", ",", "covariance", "=", "mean", "[", ":", "3", "]", ",", "covariance", "[", ":", "3", ",", ":", "3", "]", "\n", "measurements", "=", "measurements", "[", ":", ",", ":", "3", "]", "\n", "\n", "", "d", "=", "measurements", "-", "mean", "\n", "if", "metric", "==", "'gaussian'", ":", "\n", "            ", "return", "np", ".", "sum", "(", "d", "*", "d", ",", "axis", "=", "1", ")", "\n", "", "elif", "metric", "==", "'maha'", ":", "\n", "            ", "cholesky_factor", "=", "np", ".", "linalg", ".", "cholesky", "(", "covariance", ")", "\n", "z", "=", "scipy", ".", "linalg", ".", "solve_triangular", "(", "\n", "cholesky_factor", ",", "d", ".", "T", ",", "lower", "=", "True", ",", "check_finite", "=", "False", ",", "\n", "overwrite_b", "=", "True", ")", "\n", "squared_maha", "=", "np", ".", "sum", "(", "z", "*", "z", ",", "axis", "=", "0", ")", "\n", "return", "squared_maha", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid distance metric'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.merge_matches": [[10, 25], ["numpy.asarray", "numpy.asarray", "scipy.sparse.coo_matrix", "scipy.sparse.coo_matrix", "mask.nonzero", "list", "tuple", "tuple", "zip", "numpy.ones", "numpy.ones", "set", "set", "set", "set", "len", "len", "range", "range"], "function", ["None"], ["\n", "def", "merge_matches", "(", "m1", ",", "m2", ",", "shape", ")", ":", "\n", "    ", "O", ",", "P", ",", "Q", "=", "shape", "\n", "m1", "=", "np", ".", "asarray", "(", "m1", ")", "\n", "m2", "=", "np", ".", "asarray", "(", "m2", ")", "\n", "\n", "M1", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "m1", ")", ")", ",", "(", "m1", "[", ":", ",", "0", "]", ",", "m1", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "O", ",", "P", ")", ")", "\n", "M2", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "m2", ")", ")", ",", "(", "m2", "[", ":", ",", "0", "]", ",", "m2", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "P", ",", "Q", ")", ")", "\n", "\n", "mask", "=", "M1", "*", "M2", "\n", "match", "=", "mask", ".", "nonzero", "(", ")", "\n", "match", "=", "list", "(", "zip", "(", "match", "[", "0", "]", ",", "match", "[", "1", "]", ")", ")", "\n", "unmatched_O", "=", "tuple", "(", "set", "(", "range", "(", "O", ")", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "match", "]", ")", ")", "\n", "unmatched_Q", "=", "tuple", "(", "set", "(", "range", "(", "Q", ")", ")", "-", "set", "(", "[", "j", "for", "i", ",", "j", "in", "match", "]", ")", ")", "\n", "\n", "return", "match", ",", "unmatched_O", ",", "unmatched_Q", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching._indices_to_matches": [[27, 36], ["tuple", "tuple", "tuple", "set", "set", "set", "set", "zip", "range", "range"], "function", ["None"], ["\n", "", "def", "_indices_to_matches", "(", "cost_matrix", ",", "indices", ",", "thresh", ")", ":", "\n", "    ", "matched_cost", "=", "cost_matrix", "[", "tuple", "(", "zip", "(", "*", "indices", ")", ")", "]", "\n", "matched_mask", "=", "(", "matched_cost", "<=", "thresh", ")", "\n", "\n", "matches", "=", "indices", "[", "matched_mask", "]", "\n", "unmatched_a", "=", "tuple", "(", "set", "(", "range", "(", "cost_matrix", ".", "shape", "[", "0", "]", ")", ")", "-", "set", "(", "matches", "[", ":", ",", "0", "]", ")", ")", "\n", "unmatched_b", "=", "tuple", "(", "set", "(", "range", "(", "cost_matrix", ".", "shape", "[", "1", "]", ")", ")", "-", "set", "(", "matches", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "return", "matches", ",", "unmatched_a", ",", "unmatched_b", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.linear_assignment": [[38, 50], ["lap.lapjv", "enumerate", "numpy.asarray", "numpy.where", "numpy.where", "numpy.empty", "tuple", "tuple", "np.asarray.append", "range", "range"], "function", ["None"], ["\n", "", "def", "linear_assignment", "(", "cost_matrix", ",", "thresh", ")", ":", "\n", "    ", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "np", ".", "empty", "(", "(", "0", ",", "2", ")", ",", "dtype", "=", "int", ")", ",", "tuple", "(", "range", "(", "cost_matrix", ".", "shape", "[", "0", "]", ")", ")", ",", "tuple", "(", "range", "(", "cost_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "matches", ",", "unmatched_a", ",", "unmatched_b", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "cost", ",", "x", ",", "y", "=", "lap", ".", "lapjv", "(", "cost_matrix", ",", "extend_cost", "=", "True", ",", "cost_limit", "=", "thresh", ")", "\n", "for", "ix", ",", "mx", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "if", "mx", ">=", "0", ":", "\n", "            ", "matches", ".", "append", "(", "[", "ix", ",", "mx", "]", ")", "\n", "", "", "unmatched_a", "=", "np", ".", "where", "(", "x", "<", "0", ")", "[", "0", "]", "\n", "unmatched_b", "=", "np", ".", "where", "(", "y", "<", "0", ")", "[", "0", "]", "\n", "matches", "=", "np", ".", "asarray", "(", "matches", ")", "\n", "return", "matches", ",", "unmatched_a", ",", "unmatched_b", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.euc_dist": [[52, 60], ["numpy.zeros", "numpy.linalg.norm", "len", "len", "numpy.array", "numpy.array"], "function", ["None"], ["\n", "", "def", "ious", "(", "atlbrs", ",", "btlbrs", ")", ":", "\n", "    ", "\"\"\"\n    Compute cost based on IoU\n    :type atlbrs: list[tlbr] | np.ndarray\n    :type atlbrs: list[tlbr] | np.ndarray\n\n    :rtype ious np.ndarray\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.euclidean_distance": [[62, 79], ["matching.euc_dist", "isinstance", "isinstance", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.euc_dist"], ["if", "ious", ".", "size", "==", "0", ":", "\n", "        ", "return", "ious", "\n", "\n", "", "ious", "=", "bbox_ious", "(", "\n", "np", ".", "ascontiguousarray", "(", "atlbrs", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "btlbrs", ",", "dtype", "=", "np", ".", "float", ")", "\n", ")", "\n", "\n", "return", "ious", "\n", "\n", "\n", "", "def", "iou_distance", "(", "atracks", ",", "btracks", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.ious": [[80, 98], ["numpy.zeros", "cython_bbox.bbox_overlaps", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "len", "len"], "function", ["None"], ["\n", "\n", "if", "(", "len", "(", "atracks", ")", ">", "0", "and", "isinstance", "(", "atracks", "[", "0", "]", ",", "np", ".", "ndarray", ")", ")", "or", "(", "len", "(", "btracks", ")", ">", "0", "and", "isinstance", "(", "btracks", "[", "0", "]", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "atlbrs", "=", "atracks", "\n", "btlbrs", "=", "btracks", "\n", "", "else", ":", "\n", "        ", "atlbrs", "=", "[", "track", ".", "tlbr", "for", "track", "in", "atracks", "]", "\n", "btlbrs", "=", "[", "track", ".", "tlbr", "for", "track", "in", "btracks", "]", "\n", "", "_ious", "=", "ious", "(", "atlbrs", ",", "btlbrs", ")", "\n", "cost_matrix", "=", "1", "-", "_ious", "\n", "\n", "return", "cost_matrix", "\n", "\n", "", "def", "embedding_distance", "(", "tracks", ",", "detections", ",", "metric", "=", "'cosine'", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.iou_distance": [[99, 118], ["matching.ious", "isinstance", "isinstance", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.ious"], ["\n", "\n", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "len", "(", "detections", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "det_features", "=", "np", ".", "asarray", "(", "[", "track", ".", "curr_feat", "for", "track", "in", "detections", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "#for i, track in enumerate(tracks):", "\n", "#cost_matrix[i, :] = np.maximum(0.0, cdist(track.smooth_feat.reshape(1,-1), det_features, metric))", "\n", "track_features", "=", "np", ".", "asarray", "(", "[", "track", ".", "smooth_feat", "for", "track", "in", "tracks", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "cost_matrix", "=", "np", ".", "maximum", "(", "0.0", ",", "cdist", "(", "track_features", ",", "det_features", ",", "metric", ")", ")", "# Nomalized features", "\n", "return", "cost_matrix", "\n", "\n", "", "def", "center_distance", "(", "kf", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ",", "lambda_", "=", "0.98", ")", ":", "\n", "    ", "\"\"\"\n    :param tracks: list[STrack]\n    :param detections: list[BaseTrack]\n    :param metric:\n    :return: cost_matrix np.ndarray\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.v_iou_distance": [[119, 138], ["matching.ious", "isinstance", "isinstance", "track.tlwh_to_tlbr", "track.tlwh_to_tlbr", "len", "len"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.ious"], ["cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "len", "(", "detections", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "\n", "", "gating_dim", "=", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "center", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ",", "metric", "=", "'maha'", ")", "\n", "cost_matrix", "[", "row", ",", "gating_distance", ">", "gating_threshold", "]", "=", "np", ".", "inf", "\n", "cost_matrix", "[", "row", "]", "=", "lambda_", "*", "cost_matrix", "[", "row", "]", "+", "(", "1", "-", "lambda_", ")", "*", "gating_distance", "\n", "", "return", "cost_matrix", "\n", "\n", "\n", "", "def", "gate_cost_matrix", "(", "kf", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ")", ":", "\n", "    ", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "len", "(", "detections", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "gating_dim", "=", "4", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.embedding_distance": [[139, 156], ["numpy.zeros", "numpy.asarray", "numpy.asarray", "numpy.maximum", "scipy.spatial.distance.cdist", "len", "len"], "function", ["None"], ["gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "center", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ")", "\n", "#cost_matrix[row, gating_distance > gating_threshold] = np.inf", "\n", "", "return", "cost_matrix", "\n", "\n", "\n", "", "def", "fuse_motion", "(", "kf", ",", "cost_matrix", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ",", "lambda_", "=", "0.98", ")", ":", "\n", "    ", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "gating_dim", "=", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "center", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ",", "metric", "=", "'maha'", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.gate_cost_matrix": [[174, 185], ["numpy.asarray", "enumerate", "kf.gating_distance", "det.to_xyah"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.gating_distance"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.fuse_motion": [[187, 199], ["numpy.asarray", "enumerate", "kf.gating_distance", "det.to_xyah"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.gating_distance"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.fuse_iou": [[201, 213], ["matching.iou_distance", "numpy.array", "numpy.expand_dims().repeat", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.iou_distance"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.fuse_score": [[215, 224], ["numpy.array", "numpy.expand_dims().repeat", "numpy.expand_dims"], "function", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.end_frame": [[30, 33], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "end_frame", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "frame_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.next_id": [[34, 38], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "next_id", "(", ")", ":", "\n", "        ", "BaseTrack", ".", "_count", "+=", "1", "\n", "return", "BaseTrack", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.activate": [[39, 41], ["None"], "methods", ["None"], ["", "def", "activate", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.predict": [[42, 44], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.update": [[45, 47], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.mark_lost": [[48, 50], ["None"], "methods", ["None"], ["", "def", "mark_lost", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "TrackState", ".", "Lost", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.mark_removed": [[51, 53], ["None"], "methods", ["None"], ["", "def", "mark_removed", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "TrackState", ".", "Removed", "", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.Tracker.__init__": [[7, 20], ["int", "tracker.kalman_filter_3dcenter.KalmanFilter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "det_thresh", "=", "0.12", ",", "low_conf_det_thresh", "=", "0.05", ",", "track_buffer", "=", "60", ",", "match_thresh", "=", "300", ",", "frame_rate", "=", "30", ")", ":", "\n", "        ", "self", ".", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "self", ".", "lost_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "self", ".", "removed_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "\n", "self", ".", "frame_id", "=", "0", "\n", "self", ".", "match_thresh", "=", "match_thresh", "\n", "self", ".", "det_thresh", "=", "det_thresh", "\n", "self", ".", "low_conf_det_thresh", "=", "low_conf_det_thresh", "\n", "self", ".", "buffer_size", "=", "int", "(", "frame_rate", "/", "30.0", "*", "track_buffer", ")", "\n", "self", ".", "max_time_lost", "=", "self", ".", "buffer_size", "\n", "self", ".", "kalman_filter", "=", "KalmanFilter", "(", ")", "\n", "self", ".", "duplicat_dist_thresh", "=", "60", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.Tracker.update": [[21, 148], ["numpy.logical_and", "byte_tracker_3dcenter.joint_stracks", "byte_tracker_3dcenter.STrack.multi_predict", "tracker.matching.euclidean_distance", "tracker.matching.linear_assignment", "tracker.matching.euclidean_distance", "tracker.matching.linear_assignment", "tracker.matching.euclidean_distance", "tracker.matching.linear_assignment", "byte_tracker_3dcenter.joint_stracks", "byte_tracker_3dcenter.joint_stracks", "byte_tracker_3dcenter.sub_stracks", "byte_tracker_3dcenter.Tracker.lost_stracks.extend", "byte_tracker_3dcenter.sub_stracks", "byte_tracker_3dcenter.Tracker.removed_stracks.extend", "byte_tracker_3dcenter.remove_duplicate_stracks", "numpy.array", "byte_tracker_3dcenter.get_tracked_ids_byte", "len", "len", "unconfirmed[].update", "activated_starcks.append", "track.mark_removed", "removed_stracks.append", "track.activate", "activated_starcks.append", "len", "byte_tracker_3dcenter.STrack", "unconfirmed.append", "tracked_stracks.append", "track.update", "activated_starcks.append", "track.re_activate", "refind_stracks.append", "byte_tracker_3dcenter.STrack", "track.update", "activated_starcks.append", "track.re_activate", "refind_stracks.append", "track.mark_lost", "lost_stracks.append", "track.mark_removed", "removed_stracks.append", "numpy.array", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.joint_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.multi_predict", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.euclidean_distance", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.euclidean_distance", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.euclidean_distance", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.linear_assignment", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.joint_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.joint_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.sub_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.sub_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.remove_duplicate_stracks", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.get_tracked_ids_byte", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.mark_removed", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.activate", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.re_activate", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.re_activate", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.mark_lost", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.mark_removed"], ["", "def", "update", "(", "self", ",", "trans3D", ",", "scores", ")", ":", "\n", "        ", "self", ".", "frame_id", "+=", "1", "\n", "activated_starcks", "=", "[", "]", "\n", "refind_stracks", "=", "[", "]", "\n", "lost_stracks", "=", "[", "]", "\n", "removed_stracks", "=", "[", "]", "\n", "\n", "# to make the scale of trans3D match the original 2D bbox for better usage of kalman filter's hyper-parameters", "\n", "#trans3D *= self.trans2bbox_scale", "\n", "\n", "remain_inds", "=", "scores", ">", "self", ".", "det_thresh", "\n", "\n", "inds_second", "=", "np", ".", "logical_and", "(", "scores", ">", "self", ".", "low_conf_det_thresh", ",", "scores", "<", "self", ".", "det_thresh", ")", "\n", "dets_second", "=", "trans3D", "[", "inds_second", "]", "\n", "dets", "=", "trans3D", "[", "remain_inds", "]", "\n", "scores_keep", "=", "scores", "[", "remain_inds", "]", "\n", "scores_second", "=", "scores", "[", "inds_second", "]", "\n", "\n", "if", "len", "(", "dets", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections", "=", "[", "STrack", "(", "trans", ",", "s", ")", "for", "\n", "(", "trans", ",", "s", ")", "in", "zip", "(", "dets", ",", "scores_keep", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections", "=", "[", "]", "\n", "\n", "", "''' Add newly detected tracklets to tracked_stracks'''", "\n", "unconfirmed", "=", "[", "]", "\n", "tracked_stracks", "=", "[", "]", "# type: list[STrack]", "\n", "for", "track", "in", "self", ".", "tracked_stracks", ":", "\n", "            ", "if", "not", "track", ".", "is_activated", ":", "\n", "                ", "unconfirmed", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "tracked_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 2: First association, with high score detection boxes'''", "\n", "strack_pool", "=", "joint_stracks", "(", "tracked_stracks", ",", "self", ".", "lost_stracks", ")", "\n", "# Predict the current location with KF", "\n", "STrack", ".", "multi_predict", "(", "strack_pool", ")", "\n", "dists", "=", "matching", ".", "euclidean_distance", "(", "strack_pool", ",", "detections", ",", "dim", "=", "4", ")", "\n", "#dists = matching.fuse_score(dists, detections)", "\n", "matches", ",", "u_track", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "self", ".", "match_thresh", ")", "\n", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "strack_pool", "[", "itracked", "]", "\n", "det", "=", "detections", "[", "idet", "]", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate", "(", "det", ",", "self", ".", "frame_id", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "''' Step 3: Second association, with low score detection boxes'''", "\n", "# association the untrack to the low score detections", "\n", "if", "len", "(", "dets_second", ")", ">", "0", ":", "\n", "            ", "'''Detections'''", "\n", "detections_second", "=", "[", "STrack", "(", "trans", ",", "s", ")", "for", "\n", "(", "trans", ",", "s", ")", "in", "zip", "(", "dets", ",", "scores_keep", ")", "]", "\n", "", "else", ":", "\n", "            ", "detections_second", "=", "[", "]", "\n", "", "r_tracked_stracks", "=", "[", "strack_pool", "[", "i", "]", "for", "i", "in", "u_track", "if", "strack_pool", "[", "i", "]", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "dists", "=", "matching", ".", "euclidean_distance", "(", "\n", "r_tracked_stracks", ",", "detections_second", ",", "dim", "=", "4", ")", "\n", "matches", ",", "u_track", ",", "u_detection_second", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "self", ".", "match_thresh", "*", "2", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "itracked", "]", "\n", "det", "=", "detections_second", "[", "idet", "]", "\n", "if", "track", ".", "state", "==", "TrackState", ".", "Tracked", ":", "\n", "                ", "track", ".", "update", "(", "det", ",", "self", ".", "frame_id", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "else", ":", "\n", "                ", "track", ".", "re_activate", "(", "det", ",", "self", ".", "frame_id", ",", "new_id", "=", "False", ")", "\n", "refind_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "for", "it", "in", "u_track", ":", "\n", "            ", "track", "=", "r_tracked_stracks", "[", "it", "]", "\n", "if", "not", "track", ".", "state", "==", "TrackState", ".", "Lost", ":", "\n", "                ", "track", ".", "mark_lost", "(", ")", "\n", "lost_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "", "'''Deal with unconfirmed tracks, usually tracks with only one beginning frame'''", "\n", "detections", "=", "[", "detections", "[", "i", "]", "for", "i", "in", "u_detection", "]", "\n", "dists", "=", "matching", ".", "euclidean_distance", "(", "unconfirmed", ",", "detections", ")", "\n", "# dists = matching.fuse_score(dists, detections)", "\n", "matches", ",", "u_unconfirmed", ",", "u_detection", "=", "matching", ".", "linear_assignment", "(", "dists", ",", "thresh", "=", "self", ".", "match_thresh", "*", "3", ")", "\n", "for", "itracked", ",", "idet", "in", "matches", ":", "\n", "            ", "unconfirmed", "[", "itracked", "]", ".", "update", "(", "detections", "[", "idet", "]", ",", "self", ".", "frame_id", ")", "\n", "activated_starcks", ".", "append", "(", "unconfirmed", "[", "itracked", "]", ")", "\n", "", "for", "it", "in", "u_unconfirmed", ":", "\n", "            ", "track", "=", "unconfirmed", "[", "it", "]", "\n", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "", "\"\"\" Step 4: Init new stracks\"\"\"", "\n", "for", "inew", "in", "u_detection", ":", "\n", "            ", "track", "=", "detections", "[", "inew", "]", "\n", "if", "track", ".", "score", "<", "self", ".", "det_thresh", ":", "\n", "                ", "continue", "\n", "", "track", ".", "activate", "(", "self", ".", "kalman_filter", ",", "self", ".", "frame_id", ")", "\n", "activated_starcks", ".", "append", "(", "track", ")", "\n", "", "\"\"\" Step 5: Update state\"\"\"", "\n", "for", "track", "in", "self", ".", "lost_stracks", ":", "\n", "            ", "if", "self", ".", "frame_id", "-", "track", ".", "end_frame", ">", "self", ".", "max_time_lost", ":", "\n", "                ", "track", ".", "mark_removed", "(", ")", "\n", "removed_stracks", ".", "append", "(", "track", ")", "\n", "\n", "# print('Ramained match {} s'.format(t4-t3))", "\n", "\n", "", "", "self", ".", "tracked_stracks", "=", "[", "t", "for", "t", "in", "self", ".", "tracked_stracks", "if", "t", ".", "state", "==", "TrackState", ".", "Tracked", "]", "\n", "self", ".", "tracked_stracks", "=", "joint_stracks", "(", "self", ".", "tracked_stracks", ",", "activated_starcks", ")", "\n", "self", ".", "tracked_stracks", "=", "joint_stracks", "(", "self", ".", "tracked_stracks", ",", "refind_stracks", ")", "\n", "self", ".", "lost_stracks", "=", "sub_stracks", "(", "self", ".", "lost_stracks", ",", "self", ".", "tracked_stracks", ")", "\n", "self", ".", "lost_stracks", ".", "extend", "(", "lost_stracks", ")", "\n", "self", ".", "lost_stracks", "=", "sub_stracks", "(", "self", ".", "lost_stracks", ",", "self", ".", "removed_stracks", ")", "\n", "self", ".", "removed_stracks", ".", "extend", "(", "removed_stracks", ")", "\n", "self", ".", "tracked_stracks", ",", "self", ".", "lost_stracks", "=", "remove_duplicate_stracks", "(", "\n", "self", ".", "tracked_stracks", ",", "self", ".", "lost_stracks", ",", "dist_thresh", "=", "self", ".", "duplicat_dist_thresh", ")", "\n", "# get scores of lost tracks", "\n", "#output_stracks = [track for track in self.tracked_stracks if track.is_activated]", "\n", "output_results", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "[", "*", "track", ".", "trans", ",", "track", ".", "track_id", "]", ")", "for", "track", "in", "self", ".", "tracked_stracks", "if", "track", ".", "is_activated", "]", ")", "\n", "\n", "if", "len", "(", "output_results", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "", "tracked_ids", ",", "results_inds", "=", "get_tracked_ids_byte", "(", "\n", "trans3D", ",", "output_results", ")", "\n", "\n", "return", "tracked_ids", ",", "results_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.__init__": [[206, 215], ["numpy.asarray"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "trans", ",", "score", ")", ":", "\n", "# wait activate", "\n", "        ", "self", ".", "_trans", "=", "np", ".", "asarray", "(", "trans", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "kalman_filter", "=", "None", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "None", ",", "None", "\n", "self", ".", "is_activated", "=", "False", "\n", "\n", "self", ".", "score", "=", "score", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.predict": [[216, 221], ["byte_tracker_3dcenter.STrack.mean.copy", "byte_tracker_3dcenter.STrack.kalman_filter.predict"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.predict"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "mean_state", "=", "self", ".", "mean", ".", "copy", "(", ")", "\n", "if", "self", ".", "state", "!=", "TrackState", ".", "Tracked", ":", "\n", "            ", "mean_state", "[", "7", "]", "=", "0", "\n", "", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "predict", "(", "mean_state", ",", "self", ".", "covariance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.multi_predict": [[222, 237], ["len", "numpy.asarray", "numpy.asarray", "enumerate", "STrack.shared_kalman.multi_predict", "enumerate", "zip", "st.mean.copy"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.multi_predict"], ["", "@", "staticmethod", "\n", "def", "multi_predict", "(", "stracks", ")", ":", "\n", "        ", "if", "len", "(", "stracks", ")", ">", "0", ":", "\n", "            ", "multi_mean", "=", "np", ".", "asarray", "(", "[", "st", ".", "mean", ".", "copy", "(", ")", "for", "st", "in", "stracks", "]", ")", "\n", "multi_covariance", "=", "np", ".", "asarray", "(", "[", "st", ".", "covariance", "for", "st", "in", "stracks", "]", ")", "\n", "''' don't know why doing this '''", "\n", "# \u53ef\u4ee5\u8003\u8651\u88ab\u906e\u6321\u7684\u76ee\u6807\u7684\u72b6\u6001\u8ddf\u968f\u906e\u6321\u8005\u7684\u901f\u5ea6\u72b6\u6001\u3002\u5f62\u6210\u906e\u6321\u8ddf\u968f\u6a21\u5f0f\uff0c\u76f4\u5230\u88ab\u906e\u6321\u8005\u518d\u6b21\u51fa\u73b0\u3002", "\n", "for", "i", ",", "st", "in", "enumerate", "(", "stracks", ")", ":", "\n", "                ", "if", "st", ".", "state", "!=", "TrackState", ".", "Tracked", ":", "\n", "                    ", "multi_mean", "[", "i", "]", "[", "7", "]", "=", "0", "\n", "\n", "", "", "multi_mean", ",", "multi_covariance", "=", "STrack", ".", "shared_kalman", ".", "multi_predict", "(", "multi_mean", ",", "multi_covariance", ")", "\n", "for", "i", ",", "(", "mean", ",", "cov", ")", "in", "enumerate", "(", "zip", "(", "multi_mean", ",", "multi_covariance", ")", ")", ":", "\n", "                ", "stracks", "[", "i", "]", ".", "mean", "=", "mean", "\n", "stracks", "[", "i", "]", ".", "covariance", "=", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.activate": [[238, 251], ["byte_tracker_3dcenter.STrack.next_id", "byte_tracker_3dcenter.STrack.kalman_filter.initiate"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.next_id", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.kalman_filter_3dcenter.KalmanFilter.initiate"], ["", "", "", "def", "activate", "(", "self", ",", "kalman_filter", ",", "frame_id", ")", ":", "\n", "        ", "\"\"\"Start a new tracklet\"\"\"", "\n", "self", ".", "kalman_filter", "=", "kalman_filter", "\n", "self", ".", "track_id", "=", "self", ".", "next_id", "(", ")", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "initiate", "(", "self", ".", "_trans", ")", "\n", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "if", "frame_id", "==", "1", ":", "\n", "            ", "self", ".", "is_activated", "=", "True", "\n", "# self.is_activated = True", "\n", "", "self", ".", "frame_id", "=", "frame_id", "\n", "self", ".", "start_frame", "=", "frame_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.re_activate": [[252, 263], ["byte_tracker_3dcenter.STrack.kalman_filter.update", "byte_tracker_3dcenter.STrack.next_id"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update", "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.basetrack.BaseTrack.next_id"], ["", "def", "re_activate", "(", "self", ",", "new_track", ",", "frame_id", ",", "new_id", "=", "False", ")", ":", "\n", "        ", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "update", "(", "\n", "self", ".", "mean", ",", "self", ".", "covariance", ",", "new_track", ".", "trans", "\n", ")", "\n", "self", ".", "tracklet_len", "=", "0", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "self", ".", "is_activated", "=", "True", "\n", "self", ".", "frame_id", "=", "frame_id", "\n", "if", "new_id", ":", "\n", "            ", "self", ".", "track_id", "=", "self", ".", "next_id", "(", ")", "\n", "", "self", ".", "score", "=", "new_track", ".", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update": [[264, 282], ["byte_tracker_3dcenter.STrack.kalman_filter.update"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.update"], ["", "def", "update", "(", "self", ",", "new_track", ",", "frame_id", ")", ":", "\n", "        ", "\"\"\"\n        Update a matched track\n        :type new_track: STrack\n        :type frame_id: int\n        :type update_feature: bool\n        :return:\n        \"\"\"", "\n", "self", ".", "frame_id", "=", "frame_id", "\n", "self", ".", "tracklet_len", "+=", "1", "\n", "\n", "new_trans", "=", "new_track", ".", "trans", "\n", "self", ".", "mean", ",", "self", ".", "covariance", "=", "self", ".", "kalman_filter", ".", "update", "(", "\n", "self", ".", "mean", ",", "self", ".", "covariance", ",", "new_trans", ")", "\n", "self", ".", "state", "=", "TrackState", ".", "Tracked", "\n", "self", ".", "is_activated", "=", "True", "\n", "\n", "self", ".", "score", "=", "new_track", ".", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.trans": [[283, 292], ["byte_tracker_3dcenter.STrack.mean[].copy", "byte_tracker_3dcenter.STrack._trans.copy"], "methods", ["None"], ["", "@", "property", "\n", "# @jit(nopython=True)", "\n", "def", "trans", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current 3D body center position `(x,y,z)`.\n        \"\"\"", "\n", "if", "self", ".", "mean", "is", "None", ":", "\n", "            ", "return", "self", ".", "_trans", ".", "copy", "(", ")", "\n", "", "ret", "=", "self", ".", "mean", "[", ":", "4", "]", ".", "copy", "(", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.STrack.__repr__": [[293, 295], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'OT_{}_({}-{})'", ".", "format", "(", "self", ".", "track_id", ",", "self", ".", "start_frame", ",", "self", ".", "end_frame", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.get_tracked_ids_byte": [[149, 160], ["numpy.array", "numpy.array", "enumerate", "numpy.array", "numpy.argmin", "tracked_bbox_ids.append", "tracked_ids.append", "int", "numpy.linalg.norm"], "function", ["None"], ["", "", "def", "get_tracked_ids_byte", "(", "tracking_points", ",", "tracked_objects", ")", ":", "\n", "    ", "tracked_ids_out", "=", "np", ".", "array", "(", "[", "obj", "[", "4", "]", "for", "obj", "in", "tracked_objects", "]", ")", "\n", "tracked_points", "=", "np", ".", "array", "(", "[", "obj", "[", ":", "4", "]", "for", "obj", "in", "tracked_objects", "]", ")", "\n", "\n", "tracked_ids", ",", "tracked_bbox_ids", "=", "[", "]", ",", "[", "]", "\n", "for", "tid", ",", "tracked_point", "in", "enumerate", "(", "tracked_points", ")", ":", "\n", "        ", "dist", "=", "np", ".", "array", "(", "[", "np", ".", "linalg", ".", "norm", "(", "tracked_point", "-", "org_point", ")", "for", "org_point", "in", "tracking_points", "]", ")", "\n", "org_p_id", "=", "np", ".", "argmin", "(", "dist", ")", "\n", "tracked_bbox_ids", ".", "append", "(", "org_p_id", ")", "\n", "tracked_ids", ".", "append", "(", "int", "(", "tracked_ids_out", "[", "tid", "]", ")", ")", "\n", "", "return", "tracked_ids", ",", "tracked_bbox_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.joint_stracks": [[162, 174], ["res.append", "exists.get", "res.append"], "function", ["None"], ["", "def", "joint_stracks", "(", "tlista", ",", "tlistb", ")", ":", "\n", "    ", "exists", "=", "{", "}", "\n", "res", "=", "[", "]", "\n", "for", "t", "in", "tlista", ":", "\n", "        ", "exists", "[", "t", ".", "track_id", "]", "=", "1", "\n", "res", ".", "append", "(", "t", ")", "\n", "", "for", "t", "in", "tlistb", ":", "\n", "        ", "tid", "=", "t", ".", "track_id", "\n", "if", "not", "exists", ".", "get", "(", "tid", ",", "0", ")", ":", "\n", "            ", "exists", "[", "tid", "]", "=", "1", "\n", "res", ".", "append", "(", "t", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.sub_stracks": [[176, 185], ["list", "stracks.get", "stracks.values"], "function", ["None"], ["", "def", "sub_stracks", "(", "tlista", ",", "tlistb", ")", ":", "\n", "    ", "stracks", "=", "{", "}", "\n", "for", "t", "in", "tlista", ":", "\n", "        ", "stracks", "[", "t", ".", "track_id", "]", "=", "t", "\n", "", "for", "t", "in", "tlistb", ":", "\n", "        ", "tid", "=", "t", ".", "track_id", "\n", "if", "stracks", ".", "get", "(", "tid", ",", "0", ")", ":", "\n", "            ", "del", "stracks", "[", "tid", "]", "\n", "", "", "return", "list", "(", "stracks", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.byte_tracker_3dcenter.remove_duplicate_stracks": [[187, 202], ["tracker.matching.euclidean_distance", "numpy.where", "zip", "list", "list", "dupb.append", "dupa.append", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.tracker.matching.euclidean_distance"], ["", "def", "remove_duplicate_stracks", "(", "stracksa", ",", "stracksb", ",", "dist_thresh", "=", "0.15", ")", ":", "\n", "# only use the 2D projected points for suppression.", "\n", "    ", "pdist", "=", "matching", ".", "euclidean_distance", "(", "stracksa", ",", "stracksb", ",", "dim", "=", "2", ")", "\n", "pairs", "=", "np", ".", "where", "(", "pdist", "<", "dist_thresh", ")", "\n", "dupa", ",", "dupb", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "p", ",", "q", "in", "zip", "(", "*", "pairs", ")", ":", "\n", "        ", "timep", "=", "stracksa", "[", "p", "]", ".", "frame_id", "-", "stracksa", "[", "p", "]", ".", "start_frame", "\n", "timeq", "=", "stracksb", "[", "q", "]", ".", "frame_id", "-", "stracksb", "[", "q", "]", ".", "start_frame", "\n", "if", "timep", ">", "timeq", ":", "\n", "            ", "dupb", ".", "append", "(", "q", ")", "\n", "", "else", ":", "\n", "            ", "dupa", ".", "append", "(", "p", ")", "\n", "", "", "resa", "=", "[", "t", "for", "i", ",", "t", "in", "enumerate", "(", "stracksa", ")", "if", "not", "i", "in", "dupa", "]", "\n", "resb", "=", "[", "t", "for", "i", ",", "t", "in", "enumerate", "(", "stracksb", ")", "if", "not", "i", "in", "dupb", "]", "\n", "return", "resa", ",", "resb", "\n", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.matching.l2_error": [[4, 6], ["numpy.linalg.norm"], "function", ["None"], ["import", "lap", "\n", "from", "scipy", ".", "spatial", ".", "distance", "import", "cdist", "\n", "import", "sys", ",", "os", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.matching.get_bbx_overlap": [[7, 50], ["numpy.min", "numpy.min", "numpy.max", "numpy.max", "max", "max", "min", "min", "max", "max", "float"], "function", ["None"], ["import", "time", "\n", "#from cython_bbox import bbox_overlaps as bbox_ious", "\n", "from", "tracking", ".", "tracking_utils", "import", "kalman_filter", "\n", "\n", "def", "merge_matches", "(", "m1", ",", "m2", ",", "shape", ")", ":", "\n", "    ", "O", ",", "P", ",", "Q", "=", "shape", "\n", "m1", "=", "np", ".", "asarray", "(", "m1", ")", "\n", "m2", "=", "np", ".", "asarray", "(", "m2", ")", "\n", "\n", "M1", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "m1", ")", ")", ",", "(", "m1", "[", ":", ",", "0", "]", ",", "m1", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "O", ",", "P", ")", ")", "\n", "M2", "=", "scipy", ".", "sparse", ".", "coo_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "m2", ")", ")", ",", "(", "m2", "[", ":", ",", "0", "]", ",", "m2", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "P", ",", "Q", ")", ")", "\n", "\n", "mask", "=", "M1", "*", "M2", "\n", "match", "=", "mask", ".", "nonzero", "(", ")", "\n", "match", "=", "list", "(", "zip", "(", "match", "[", "0", "]", ",", "match", "[", "1", "]", ")", ")", "\n", "unmatched_O", "=", "tuple", "(", "set", "(", "range", "(", "O", ")", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "match", "]", ")", ")", "\n", "unmatched_Q", "=", "tuple", "(", "set", "(", "range", "(", "Q", ")", ")", "-", "set", "(", "[", "j", "for", "i", ",", "j", "in", "match", "]", ")", ")", "\n", "\n", "return", "match", ",", "unmatched_O", ",", "unmatched_Q", "\n", "\n", "\n", "", "def", "_indices_to_matches", "(", "cost_matrix", ",", "indices", ",", "thresh", ")", ":", "\n", "    ", "matched_cost", "=", "cost_matrix", "[", "tuple", "(", "zip", "(", "*", "indices", ")", ")", "]", "\n", "matched_mask", "=", "(", "matched_cost", "<=", "thresh", ")", "\n", "\n", "matches", "=", "indices", "[", "matched_mask", "]", "\n", "unmatched_a", "=", "tuple", "(", "set", "(", "range", "(", "cost_matrix", ".", "shape", "[", "0", "]", ")", ")", "-", "set", "(", "matches", "[", ":", ",", "0", "]", ")", ")", "\n", "unmatched_b", "=", "tuple", "(", "set", "(", "range", "(", "cost_matrix", ".", "shape", "[", "1", "]", ")", ")", "-", "set", "(", "matches", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "return", "matches", ",", "unmatched_a", ",", "unmatched_b", "\n", "\n", "\n", "", "def", "linear_assignment", "(", "cost_matrix", ",", "thresh", ")", ":", "\n", "    ", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "np", ".", "empty", "(", "(", "0", ",", "2", ")", ",", "dtype", "=", "int", ")", ",", "tuple", "(", "range", "(", "cost_matrix", ".", "shape", "[", "0", "]", ")", ")", ",", "tuple", "(", "range", "(", "cost_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "matches", ",", "unmatched_a", ",", "unmatched_b", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "cost", ",", "x", ",", "y", "=", "lap", ".", "lapjv", "(", "cost_matrix", ",", "extend_cost", "=", "True", ",", "cost_limit", "=", "thresh", ")", "\n", "for", "ix", ",", "mx", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "if", "mx", ">=", "0", ":", "\n", "            ", "matches", ".", "append", "(", "[", "ix", ",", "mx", "]", ")", "\n", "", "", "unmatched_a", "=", "np", ".", "where", "(", "x", "<", "0", ")", "[", "0", "]", "\n", "unmatched_b", "=", "np", ".", "where", "(", "y", "<", "0", ")", "[", "0", "]", "\n", "matches", "=", "np", ".", "asarray", "(", "matches", ")", "\n", "return", "matches", ",", "unmatched_a", ",", "unmatched_b", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.matching.match_2d_greedy": [[51, 172], ["numpy.arange", "numpy.arange", "list", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "np.zeros.sort", "np.zeros.sort", "numpy.arange", "numpy.setdiff1d", "numpy.arange", "numpy.setdiff1d", "len", "len", "itertools.product", "print", "matching.l2_error", "np.array.append", "np.zeros.append", "np.zeros.append", "len", "falsePositives.append", "len", "vmask.sum", "len", "len", "numpy.sum", "len", "len", "numpy.argmin", "matching.get_bbx_overlap", "misses.append", "str", "numpy.sum", "sum", "len", "print", "excludedGtBecauseInvalid.append", "np.array.append", "misses.append", "excludedGtBecauseInvalid.append", "str", "np.array.append"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.matching.l2_error", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.matching.get_bbx_overlap", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], ["\n", "\n", "", "def", "ious", "(", "atlbrs", ",", "btlbrs", ")", ":", "\n", "    ", "\"\"\"\n    Compute cost based on IoU\n    :type atlbrs: list[tlbr] | np.ndarray\n    :type atlbrs: list[tlbr] | np.ndarray\n\n    :rtype ious np.ndarray\n    \"\"\"", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "len", "(", "atlbrs", ")", ",", "len", "(", "btlbrs", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "ious", ".", "size", "==", "0", ":", "\n", "        ", "return", "ious", "\n", "\n", "", "ious", "=", "bbox_ious", "(", "\n", "np", ".", "ascontiguousarray", "(", "atlbrs", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "btlbrs", ",", "dtype", "=", "np", ".", "float", ")", "\n", ")", "\n", "\n", "return", "ious", "\n", "\n", "\n", "", "def", "iou_distance", "(", "atracks", ",", "btracks", ")", ":", "\n", "    ", "\"\"\"\n    Compute cost based on IoU\n    :type atracks: list[STrack]\n    :type btracks: list[STrack]\n\n    :rtype cost_matrix np.ndarray\n    \"\"\"", "\n", "\n", "if", "(", "len", "(", "atracks", ")", ">", "0", "and", "isinstance", "(", "atracks", "[", "0", "]", ",", "np", ".", "ndarray", ")", ")", "or", "(", "len", "(", "btracks", ")", ">", "0", "and", "isinstance", "(", "btracks", "[", "0", "]", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "atlbrs", "=", "atracks", "\n", "btlbrs", "=", "btracks", "\n", "", "else", ":", "\n", "        ", "atlbrs", "=", "[", "track", ".", "tlbr", "for", "track", "in", "atracks", "]", "\n", "btlbrs", "=", "[", "track", ".", "tlbr", "for", "track", "in", "btracks", "]", "\n", "", "_ious", "=", "ious", "(", "atlbrs", ",", "btlbrs", ")", "\n", "cost_matrix", "=", "1", "-", "_ious", "\n", "\n", "return", "cost_matrix", "\n", "\n", "", "def", "embedding_distance", "(", "tracks", ",", "detections", ",", "metric", "=", "'cosine'", ")", ":", "\n", "    ", "\"\"\"\n    :param tracks: list[STrack]\n    :param detections: list[BaseTrack]\n    :param metric:\n    :return: cost_matrix np.ndarray\n    \"\"\"", "\n", "\n", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "len", "(", "detections", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "det_features", "=", "np", ".", "asarray", "(", "[", "track", ".", "curr_feat", "for", "track", "in", "detections", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "#for i, track in enumerate(tracks):", "\n", "#cost_matrix[i, :] = np.maximum(0.0, cdist(track.smooth_feat.reshape(1,-1), det_features, metric))", "\n", "track_features", "=", "np", ".", "asarray", "(", "[", "track", ".", "smooth_feat", "for", "track", "in", "tracks", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "cost_matrix", "=", "np", ".", "maximum", "(", "0.0", ",", "cdist", "(", "track_features", ",", "det_features", ",", "metric", ")", ")", "# Nomalized features", "\n", "return", "cost_matrix", "\n", "\n", "", "def", "center_distance", "(", "kf", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ",", "lambda_", "=", "0.98", ")", ":", "\n", "    ", "\"\"\"\n    :param tracks: list[STrack]\n    :param detections: list[BaseTrack]\n    :param metric:\n    :return: cost_matrix np.ndarray\n    \"\"\"", "\n", "\n", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "len", "(", "detections", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "\n", "", "gating_dim", "=", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "center", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ",", "metric", "=", "'maha'", ")", "\n", "cost_matrix", "[", "row", ",", "gating_distance", ">", "gating_threshold", "]", "=", "np", ".", "inf", "\n", "cost_matrix", "[", "row", "]", "=", "lambda_", "*", "cost_matrix", "[", "row", "]", "+", "(", "1", "-", "lambda_", ")", "*", "gating_distance", "\n", "", "return", "cost_matrix", "\n", "\n", "\n", "", "def", "gate_cost_matrix", "(", "kf", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ")", ":", "\n", "    ", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "tracks", ")", ",", "len", "(", "detections", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "gating_dim", "=", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "center", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ")", "\n", "#cost_matrix[row, gating_distance > gating_threshold] = np.inf", "\n", "", "return", "cost_matrix", "\n", "\n", "\n", "", "def", "fuse_motion", "(", "kf", ",", "cost_matrix", ",", "tracks", ",", "detections", ",", "only_position", "=", "False", ",", "lambda_", "=", "0.98", ")", ":", "\n", "    ", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "", "gating_dim", "=", "4", "\n", "gating_threshold", "=", "kalman_filter", ".", "chi2inv95", "[", "gating_dim", "]", "\n", "measurements", "=", "np", ".", "asarray", "(", "[", "det", ".", "center", "for", "det", "in", "detections", "]", ")", "\n", "for", "row", ",", "track", "in", "enumerate", "(", "tracks", ")", ":", "\n", "        ", "gating_distance", "=", "kf", ".", "gating_distance", "(", "\n", "track", ".", "mean", ",", "track", ".", "covariance", ",", "measurements", ",", "only_position", ",", "metric", "=", "'maha'", ")", "\n", "cost_matrix", "[", "row", ",", "gating_distance", ">", "gating_threshold", "]", "=", "np", ".", "inf", "\n", "cost_matrix", "[", "row", "]", "=", "lambda_", "*", "cost_matrix", "[", "row", "]", "+", "(", "1", "-", "lambda_", ")", "*", "gating_distance", "\n", "", "return", "cost_matrix", "\n", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__": [[131, 143], ["object.__init__", "evaluation.RH_Evaluation.load_gt", "evaluation.RH_Evaluation.collect_results", "results_path.replace", "evaluation.joint_mapping", "evaluation.joint_mapping", "evaluation.RH_Evaluation.match_kp2ds", "print", "evaluation.RH_Evaluation.calc_error"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.__init__", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.load_gt", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.collect_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.match_kp2ds", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.calc_error"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.collect_results": [[144, 147], ["print", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.no_predictions": [[148, 152], ["evaluation.RH_Evaluation.pr[].append", "evaluation.RH_Evaluation.pr[].append", "evaluation.RH_Evaluation.pr[].append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.load_gt": [[153, 158], ["print", "os.join", "os.join", "print", "numpy.load", "len"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.load"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.miss_mat": [[159, 161], ["numpy.stack().astype", "numpy.stack", "numpy.ones", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.match_kp2ds": [[162, 225], ["evaluation.RH_Evaluation.annots.keys", "evaluation.compute_prf1", "print", "enumerate", "numpy.array", "isinstance", "print", "print", "matching.match_2d_greedy", "evaluation.RH_Evaluation.pr[].append", "evaluation.RH_Evaluation.pr[].append", "evaluation.RH_Evaluation.pr[].append", "sum", "sum", "sum", "numpy.array", "evaluation.RH_Evaluation.no_predictions", "numpy.array", "numpy.array", "isinstance", "valid_kps.sum", "len", "len", "len", "numpy.array", "len", "numpy.array", "len", "len", "len", "len", "numpy.array().reshape", "numpy.array.append", "gt_inds.append", "len", "numpy.array", "len", "len", "os.path.basename().replace", "os.path.basename().replace", "os.path.basename().replace", "os.path.basename().replace", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.compute_prf1", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.matching.match_2d_greedy", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.no_predictions", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.RH_Evaluation.calc_error": [[226, 267], ["evaluation.RH_Evaluation.match_results.items", "evaluation.RH_Evaluation.missed_ids.items", "torch.from_numpy", "torch.cat().mean", "print_results.append", "evaluation.get_results", "get_results.items", "evaluation.write2txt", "torch.from_numpy", "torch.from_numpy", "isinstance", "torch.zeros", "evaluation._calc_matched_PCKh_", "evaluation.RH_Evaluation.mPCKh.append", "torch.ones().bool", "evaluation._calc_relative_depth_error_weak_", "torch.from_numpy.append", "numpy.concatenate", "print_results.append", "print", "len", "numpy.array", "numpy.array", "torch.from_numpy", "isinstance", "len", "torch.from_numpy().float", "torch.from_numpy().float", "torch.ones().bool", "numpy.array", "torch.cat", "numpy.array", "torch.from_numpy", "torch.ones", "torch.ones().bool.cpu", "torch.from_numpy", "torch.from_numpy", "torch.ones", "len", "float", "len", "item.item"], "methods", ["home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.get_results", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.write2txt", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation._calc_matched_PCKh_", "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation._calc_relative_depth_error_weak_", "home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print"], []], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.joint_mapping": [[30, 36], ["numpy.array", "numpy.ones", "len"], "function", ["None"], ["", "def", "eval_frame", "(", "self", ",", "frame_id", ",", "trk_tlwhs", ",", "trk_ids", ",", "rtn_events", "=", "False", ")", ":", "\n", "# results", "\n", "        ", "trk_tlwhs", "=", "np", ".", "copy", "(", "trk_tlwhs", ")", "\n", "trk_ids", "=", "np", ".", "copy", "(", "trk_ids", ")", "\n", "\n", "# gts", "\n", "gt_objs", "=", "self", ".", "gt_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation._calc_relative_depth_error_weak_": [[37, 70], ["depth_ids.to.to", "torch.unique", "sample_inds.sum", "torch.triu().bool", "error_dict[].append", "error_dict[].append", "error_dict[].append", "error_dict[].append", "error_dict[].append", "error_dict[].append", "torch.triu", "pred_depths_sample.unsqueeze().repeat", "pred_depths_sample.unsqueeze().repeat", "depth_ids[].unsqueeze().repeat", "depth_ids[].unsqueeze().repeat", "torch.cat", "torch.ones", "pred_depths_sample.unsqueeze", "pred_depths_sample.unsqueeze", "depth_ids[].unsqueeze", "depth_ids[].unsqueeze", "age_sample.unsqueeze().repeat().unsqueeze", "age_sample.unsqueeze().repeat().unsqueeze", "age_sample.unsqueeze().repeat", "age_sample.unsqueeze().repeat", "age_sample.unsqueeze", "age_sample.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["gt_tlwhs", ",", "gt_ids", "=", "unzip_objs", "(", "gt_objs", ")", "[", ":", "2", "]", "\n", "\n", "# ignore boxes", "\n", "ignore_objs", "=", "self", ".", "gt_ignore_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "ignore_tlwhs", "=", "unzip_objs", "(", "ignore_objs", ")", "[", "0", "]", "\n", "\n", "# remove ignored results", "\n", "keep", "=", "np", ".", "ones", "(", "len", "(", "trk_tlwhs", ")", ",", "dtype", "=", "bool", ")", "\n", "iou_distance", "=", "mm", ".", "distances", ".", "iou_matrix", "(", "ignore_tlwhs", ",", "trk_tlwhs", ",", "max_iou", "=", "0.5", ")", "\n", "if", "len", "(", "iou_distance", ")", ">", "0", ":", "\n", "            ", "match_is", ",", "match_js", "=", "mm", ".", "lap", ".", "linear_sum_assignment", "(", "iou_distance", ")", "\n", "match_is", ",", "match_js", "=", "map", "(", "lambda", "a", ":", "np", ".", "asarray", "(", "a", ",", "dtype", "=", "int", ")", ",", "[", "match_is", ",", "match_js", "]", ")", "\n", "match_ious", "=", "iou_distance", "[", "match_is", ",", "match_js", "]", "\n", "\n", "match_js", "=", "np", ".", "asarray", "(", "match_js", ",", "dtype", "=", "int", ")", "\n", "match_js", "=", "match_js", "[", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "match_ious", ")", ")", "]", "\n", "keep", "[", "match_js", "]", "=", "False", "\n", "trk_tlwhs", "=", "trk_tlwhs", "[", "keep", "]", "\n", "trk_ids", "=", "trk_ids", "[", "keep", "]", "\n", "#match_is, match_js = mm.lap.linear_sum_assignment(iou_distance)", "\n", "#match_is, match_js = map(lambda a: np.asarray(a, dtype=int), [match_is, match_js])", "\n", "#match_ious = iou_distance[match_is, match_js]", "\n", "\n", "#match_js = np.asarray(match_js, dtype=int)", "\n", "#match_js = match_js[np.logical_not(np.isnan(match_ious))]", "\n", "#keep[match_js] = False", "\n", "#trk_tlwhs = trk_tlwhs[keep]", "\n", "#trk_ids = trk_ids[keep]", "\n", "\n", "# get distance matrix", "\n", "", "iou_distance", "=", "mm", ".", "distances", ".", "iou_matrix", "(", "gt_tlwhs", ",", "trk_tlwhs", ",", "max_iou", "=", "0.5", ")", "\n", "\n", "# acc", "\n", "self", ".", "acc", ".", "update", "(", "gt_ids", ",", "trk_ids", ",", "iou_distance", ")", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation._calc_matched_PCKh_": [[71, 89], ["torch.ones().float().cuda", "kp2d_mask.sum", "torch.norm", "enumerate", "zip", "torch.sqrt", "torch.ones().float", "v.sum", "correct_kp_mask.sum", "len", "torch.ones", "len", "real_valid[].max", "real_valid[].min", "real_valid[].max", "real_valid[].min"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["\n", "if", "rtn_events", "and", "iou_distance", ".", "size", ">", "0", "and", "hasattr", "(", "self", ".", "acc", ",", "'last_mot_events'", ")", ":", "\n", "            ", "events", "=", "self", ".", "acc", ".", "last_mot_events", "# only supported by https://github.com/longcw/py-motmetrics", "\n", "", "else", ":", "\n", "            ", "events", "=", "None", "\n", "", "return", "events", "\n", "\n", "", "def", "eval_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "reset_accumulator", "(", ")", "\n", "\n", "result_frame_dict", "=", "read_results", "(", "filename", ",", "self", ".", "data_type", ",", "is_gt", "=", "False", ")", "\n", "#frames = sorted(list(set(self.gt_frame_dict.keys()) | set(result_frame_dict.keys())))", "\n", "frames", "=", "sorted", "(", "list", "(", "set", "(", "result_frame_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "frame_id", "in", "frames", ":", "\n", "            ", "trk_objs", "=", "result_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "trk_tlwhs", ",", "trk_ids", "=", "unzip_objs", "(", "trk_objs", ")", "[", ":", "2", "]", "\n", "self", ".", "eval_frame", "(", "frame_id", ",", "trk_tlwhs", ",", "trk_ids", ",", "rtn_events", "=", "False", ")", "\n", "\n", "", "return", "self", ".", "acc", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.compute_prf1": [[90, 100], ["round", "round", "round"], "function", ["None"], ["\n", "", "@", "staticmethod", "\n", "def", "get_summary", "(", "accs", ",", "names", ",", "metrics", "=", "(", "'mota'", ",", "'num_switches'", ",", "'idp'", ",", "'idr'", ",", "'idf1'", ",", "'precision'", ",", "'recall'", ")", ")", ":", "\n", "        ", "names", "=", "copy", ".", "deepcopy", "(", "names", ")", "\n", "if", "metrics", "is", "None", ":", "\n", "            ", "metrics", "=", "mm", ".", "metrics", ".", "motchallenge_metrics", "\n", "", "metrics", "=", "copy", ".", "deepcopy", "(", "metrics", ")", "\n", "\n", "mh", "=", "mm", ".", "metrics", ".", "create", "(", ")", "\n", "summary", "=", "mh", ".", "compute_many", "(", "\n", "accs", ",", "\n"]], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.get_results": [[101, 124], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.array", "print", "torch.cat", "enumerate", "torch.cat.sum", "np.array.sum", "len", "len", "len", "torch.abs", "age_mask.sum", "len", "dr_corrects[].sum", "dr_corrects[].sum().item", "dr_corrects[].sum().item", "dr_corrects[].sum().item", "age_mask.sum", "dr_corrects[].sum", "dr_corrects[].sum", "dr_corrects[].sum"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.vis_platform.vis_utils_o3d13.BaseConfig.print", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum", "home.repos.pwc.inspect_result.Arthur151_ROMP.utils.util.AverageMeter_Dict.sum"], ["metrics", "=", "metrics", ",", "\n", "names", "=", "names", ",", "\n", "generate_overall", "=", "True", "\n", ")", "\n", "\n", "return", "summary", "\n", "\n", "", "@", "staticmethod", "\n", "def", "save_summary", "(", "summary", ",", "filename", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "writer", "=", "pd", ".", "ExcelWriter", "(", "filename", ")", "\n", "summary", ".", "to_excel", "(", "writer", ")", "\n", "writer", ".", "save", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Arthur151_ROMP.RH_evaluation.evaluation.write2txt": [[125, 129], ["open", "f.write"], "function", ["home.repos.pwc.inspect_result.Arthur151_ROMP.crowdposetools.cocoeval.NullWriter.write"], []]}