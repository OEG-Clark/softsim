{"home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.GLU.__init__": [[9, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.GLU.forward": [[11, 16], ["x.size", "int", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nc", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "nc", "%", "2", "==", "0", ",", "'channels dont divide 2!'", "\n", "nc", "=", "int", "(", "nc", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", "nc", "]", "*", "torch", ".", "sigmoid", "(", "x", "[", ":", ",", "nc", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.ResBlock.__init__": [[34, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "base_layer.GLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_num", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "channel_num", ",", "channel_num", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_num", "*", "2", ")", ",", "\n", "GLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel_num", ",", "channel_num", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.ResBlock.forward": [[42, 44], ["base_layer.ResBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock": [[18, 24], ["torch.Sequential", "torch.Upsample", "torch.Conv2d", "torch.BatchNorm2d", "base_layer.GLU"], "function", ["None"], ["", "", "def", "upBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.sameBlock": [[26, 31], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "base_layer.GLU"], "function", ["None"], ["", "def", "sameBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.multi_ResBlock": [[46, 51], ["range", "torch.Sequential", "layers.append", "base_layer.ResBlock"], "function", ["None"], ["", "", "def", "multi_ResBlock", "(", "num_residual", ",", "ngf", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_residual", ")", ":", "\n", "        ", "layers", ".", "append", "(", "ResBlock", "(", "ngf", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.encode_img": [[53, 74], ["torch.Sequential", "torch.Conv2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "encode_img", "(", "ndf", "=", "64", ",", "in_c", "=", "3", ")", ":", "\n", "    ", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_c", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "layers", "\n", "", ""]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.evals.get_stat": [[11, 17], ["numpy.zeros", "range", "len", "int"], "function", ["None"], ["def", "get_stat", "(", "gen_label", ",", "num_gt_lab", ",", "gt_lab", ")", ":", "\n", "    ", "c_stat", "=", "np", ".", "zeros", "(", "[", "num_gt_lab", ",", "num_gt_lab", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_lab", ")", ")", ":", "\n", "        ", "gt_idx", "=", "int", "(", "gt_lab", "[", "i", "]", ")", "\n", "c_stat", "[", "gt_idx", "]", "[", "gen_label", "[", "i", "]", "]", "+=", "1", "\n", "", "return", "c_stat", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.evals.get_match": [[18, 21], ["scipy.optimize.linear_sum_assignment", "stat.max"], "function", ["None"], ["", "def", "get_match", "(", "stat", ")", ":", "\n", "    ", "_", ",", "col_ind", "=", "linear_sum_assignment", "(", "stat", ".", "max", "(", ")", "-", "stat", ")", "\n", "return", "col_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.evals.get_acc": [[22, 27], ["range", "numpy.sum"], "function", ["None"], ["", "def", "get_acc", "(", "stat", ",", "col_ind", ",", "over", ")", ":", "\n", "    ", "tot", "=", "0", "\n", "for", "i", "in", "range", "(", "stat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tot", "+=", "stat", "[", "i", "]", "[", "col_ind", "[", "i", "]", "]", "\n", "", "return", "tot", "/", "(", "np", ".", "sum", "(", "stat", ")", "/", "over", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.evals.get_nmi": [[28, 40], ["numpy.sum", "numpy.sum", "sum", "sum", "range", "numpy.sum", "range", "max", "numpy.log2", "range", "numpy.log2", "range", "numpy.log2"], "function", ["None"], ["", "def", "get_nmi", "(", "stat", ")", ":", "\n", "    ", "n", ",", "m", "=", "stat", ".", "shape", "\n", "pij", "=", "stat", "/", "np", ".", "sum", "(", "stat", ")", "\n", "pi", "=", "np", ".", "sum", "(", "pij", ",", "1", ")", "\n", "pj", "=", "np", ".", "sum", "(", "pij", ",", "0", ")", "\n", "enti", "=", "sum", "(", "[", "-", "pi", "[", "i", "]", "*", "np", ".", "log2", "(", "pi", "[", "i", "]", "+", "1e-6", ")", "for", "i", "in", "range", "(", "n", ")", "]", ")", "\n", "entj", "=", "sum", "(", "[", "-", "pj", "[", "i", "]", "*", "np", ".", "log2", "(", "pj", "[", "i", "]", "+", "1e-6", ")", "for", "i", "in", "range", "(", "m", ")", "]", ")", "\n", "mi", "=", "0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "            ", "mi", "+=", "pij", "[", "i", "]", "[", "j", "]", "*", "(", "np", ".", "log2", "(", "pij", "[", "i", "]", "[", "j", "]", "/", "(", "pi", "[", "i", "]", "*", "pj", "[", "j", "]", "+", "1e-6", ")", "+", "1e-6", ")", ")", "\n", "", "", "return", "mi", "/", "max", "(", "enti", ",", "entj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.evals.calculate_frechet_distance": [[44, 66], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", "\n", "", ""]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.InceptionV3.__init__": [[32, 128], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "_inception_v3.InceptionV3.blocks.append", "_inception_v3.InceptionV3.parameters", "inception.fid_inception_v3", "inception._inception_v3", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "_inception_v3.InceptionV3.blocks.append", "_inception_v3.InceptionV3.blocks.append", "_inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.fid_inception_v3", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception._inception_v3"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "(", "DEFAULT_BLOCK_INDEX", ",", ")", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ",", "\n", "use_fid_inception", "=", "True", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradients. Possibly useful\n            for finetuning the network\n        use_fid_inception : bool\n            If true, uses the pretrained Inception model used in Tensorflow's\n            FID implementation. If false, uses the pretrained Inception model\n            available in torchvision. The FID Inception model has different\n            weights and a slightly different structure from torchvision's\n            Inception model. If you want to compute FID scores, you are\n            strongly advised to set this parameter to true to get comparable\n            results.\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "use_fid_inception", ":", "\n", "            ", "inception", "=", "fid_inception_v3", "(", ")", "\n", "", "else", ":", "\n", "            ", "inception", "=", "_inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.InceptionV3.forward": [[129, 162], ["enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.FIDInceptionA.__init__": [[208, 210], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "FIDInceptionA", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "pool_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.FIDInceptionA.forward": [[211, 229], ["inception.FIDInceptionA.branch1x1", "inception.FIDInceptionA.branch5x5_1", "inception.FIDInceptionA.branch5x5_2", "inception.FIDInceptionA.branch3x3dbl_1", "inception.FIDInceptionA.branch3x3dbl_2", "inception.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.FIDInceptionC.__init__": [[233, 235], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "FIDInceptionC", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "channels_7x7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.FIDInceptionC.forward": [[236, 257], ["inception.FIDInceptionC.branch1x1", "inception.FIDInceptionC.branch7x7_1", "inception.FIDInceptionC.branch7x7_2", "inception.FIDInceptionC.branch7x7_3", "inception.FIDInceptionC.branch7x7dbl_1", "inception.FIDInceptionC.branch7x7dbl_2", "inception.FIDInceptionC.branch7x7dbl_3", "inception.FIDInceptionC.branch7x7dbl_4", "inception.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.FIDInceptionE_1.__init__": [[261, 263], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_1", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.FIDInceptionE_1.forward": [[264, 290], ["inception.FIDInceptionE_1.branch1x1", "inception.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3dbl_1", "inception.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3_2a", "inception.FIDInceptionE_1.branch3x3_2b", "inception.FIDInceptionE_1.branch3x3dbl_3a", "inception.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.FIDInceptionE_2.__init__": [[294, 296], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_2", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.FIDInceptionE_2.forward": [[297, 324], ["inception.FIDInceptionE_2.branch1x1", "inception.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3dbl_1", "inception.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3_2a", "inception.FIDInceptionE_2.branch3x3_2b", "inception.FIDInceptionE_2.branch3x3dbl_3a", "inception.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: The FID Inception model uses max pooling instead of average", "\n", "# pooling. This is likely an error in this specific Inception", "\n", "# implementation, as other Inception models use average pooling here", "\n", "# (which matches the description in the paper).", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception._inception_v3": [[164, 179], ["torchvision.models.inception_v3", "tuple", "map", "torchvision.__version__.split"], "function", ["None"], ["", "", "def", "_inception_v3", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wraps `torchvision.models.inception_v3`\n    Skips default weight inititialization if supported by torchvision version.\n    See https://github.com/mseitzer/pytorch-fid/issues/28.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "version", "=", "tuple", "(", "map", "(", "int", ",", "torchvision", ".", "__version__", ".", "split", "(", "'.'", ")", "[", ":", "2", "]", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "# Just a caution against weird version strings", "\n", "        ", "version", "=", "(", "0", ",", ")", "\n", "\n", "", "if", "version", ">=", "(", "0", ",", "6", ")", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "\n", "", "return", "torchvision", ".", "models", ".", "inception_v3", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception.fid_inception_v3": [[181, 204], ["inception._inception_v3", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionE_1", "inception.FIDInceptionE_2", "load_state_dict_from_url", "_inception_v3.load_state_dict"], "function", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.inception._inception_v3"], ["", "def", "fid_inception_v3", "(", ")", ":", "\n", "    ", "\"\"\"Build pretrained Inception model for FID computation\n    The Inception model for FID computation uses a different set of weights\n    and has a slightly different structure than torchvision's Inception.\n    This method first constructs torchvision's Inception and then patches the\n    necessary parts that are different in the FID Inception model.\n    \"\"\"", "\n", "inception", "=", "_inception_v3", "(", "num_classes", "=", "1008", ",", "\n", "aux_logits", "=", "False", ",", "\n", "pretrained", "=", "False", ")", "\n", "inception", ".", "Mixed_5b", "=", "FIDInceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "inception", ".", "Mixed_5c", "=", "FIDInceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_5d", "=", "FIDInceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_6b", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "inception", ".", "Mixed_6c", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6d", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6e", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "inception", ".", "Mixed_7b", "=", "FIDInceptionE_1", "(", "1280", ")", "\n", "inception", ".", "Mixed_7c", "=", "FIDInceptionE_2", "(", "2048", ")", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "FID_WEIGHTS_URL", ",", "progress", "=", "True", ")", "\n", "inception", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "inception", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.__init__": [[20, 74], ["torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "datasets.Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "datasets.Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "utils.load_network", "utils.define_optimizers", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "print", "inception.InceptionV3().cuda", "train.Trainer.inception.eval", "numpy.empty", "numpy.mean", "numpy.cov", "os.makedirs", "print", "train.Trainer.resume", "data[].cuda", "adaptive_avg_pool2d.squeeze().squeeze().cpu().numpy", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "inception.InceptionV3", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "adaptive_avg_pool2d", "train.Trainer.inception", "adaptive_avg_pool2d.size", "adaptive_avg_pool2d.size", "adaptive_avg_pool2d.squeeze().squeeze().cpu", "adaptive_avg_pool2d.squeeze().squeeze", "adaptive_avg_pool2d.squeeze"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.load_network", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.define_optimizers", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.resume"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "## define hyperparameters", "\n", "        ", "self", ".", "bs", "=", "cfg", ".", "BATCH_SIZE", "\n", "self", ".", "num_gt_cls", "=", "cfg", ".", "NUM_GT_CLASSES", "\n", "self", ".", "over", "=", "cfg", ".", "OVER", "\n", "self", ".", "num_cls", "=", "self", ".", "num_gt_cls", "*", "self", ".", "over", "\n", "self", ".", "temp", "=", "cfg", ".", "TEMP", "\n", "if", "cfg", ".", "PERT", "==", "'w'", ":", "\n", "            ", "self", ".", "min_s", ",", "self", ".", "max_s", "=", "0.9", ",", "1.1", "\n", "self", ".", "min_r", ",", "self", ".", "max_r", "=", "-", "2", ",", "2", "\n", "self", ".", "min_t", ",", "self", ".", "max_t", "=", "-", "0.08", ",", "0.08", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_s", ",", "self", ".", "max_s", "=", "0.8", ",", "1.5", "\n", "self", ".", "min_r", ",", "self", ".", "max_r", "=", "-", "15", ",", "15", "\n", "self", ".", "min_t", ",", "self", ".", "max_t", "=", "-", "0.15", ",", "0.15", "\n", "", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "cfg", ".", "SAVE_DIR", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "log_dir", "=", "cfg", ".", "SAVE_DIR", ")", "\n", "\n", "## define dataloader", "\n", "self", ".", "dataset", "=", "Dataset", "(", "cfg", ".", "DATA_DIR", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "dataset", ",", "batch_size", "=", "self", ".", "bs", ",", "drop_last", "=", "True", ",", "num_workers", "=", "8", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "self", ".", "test_dataset", "=", "Dataset", "(", "cfg", ".", "DATA_DIR", ",", "'test'", ")", "\n", "self", ".", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "test_dataset", ",", "batch_size", "=", "self", ".", "bs", ",", "drop_last", "=", "False", ",", "num_workers", "=", "8", ",", "shuffle", "=", "False", ")", "\n", "\n", "## define models to train", "\n", "print", "(", "'Generate model.'", ")", "\n", "self", ".", "netG", ",", "self", ".", "netD", "=", "load_network", "(", "self", ".", "num_cls", ")", "\n", "self", ".", "optimizerG", ",", "self", ".", "optimizerD", "=", "define_optimizers", "(", "self", ".", "netG", ",", "self", ".", "netD", ")", "\n", "self", ".", "CE", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "eye", "=", "torch", ".", "eye", "(", "self", ".", "num_cls", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "cfg", ".", "MODEL_PATH", "!=", "''", ":", "\n", "            ", "print", "(", "'Load pre-trained model.'", ")", "\n", "self", ".", "resume", "(", "cfg", ".", "MODEL_PATH", ")", "\n", "\n", "", "print", "(", "'Get the statistic of training images for computing fid score.'", ")", "\n", "self", ".", "inception", "=", "InceptionV3", "(", "[", "3", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "inception", ".", "eval", "(", ")", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "len", "(", "self", ".", "dataset", ")", ",", "2048", ")", ")", "\n", "start_idx", "=", "0", "\n", "for", "data", "in", "self", ".", "dataloader", ":", "\n", "            ", "batch", "=", "data", "[", "0", "]", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "self", ".", "inception", "(", "batch", ")", "[", "0", "]", "\n", "", "if", "pred", ".", "size", "(", "2", ")", "!=", "1", "or", "pred", ".", "size", "(", "3", ")", "!=", "1", ":", "\n", "                ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "", "pred", "=", "pred", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_arr", "[", "start_idx", ":", "start_idx", "+", "pred", ".", "shape", "[", "0", "]", "]", "=", "pred", "\n", "start_idx", "=", "start_idx", "+", "pred", ".", "shape", "[", "0", "]", "\n", "", "self", ".", "mu", "=", "np", ".", "mean", "(", "pred_arr", ",", "axis", "=", "0", ")", "\n", "self", ".", "sig", "=", "np", ".", "cov", "(", "pred_arr", ",", "rowvar", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.save": [[76, 79], ["torch.save", "torch.save", "torch.save", "torch.save", "train.Trainer.netG.state_dict", "train.Trainer.netD.state_dict"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.save", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.save", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.save", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.save"], ["", "def", "save", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "state", "=", "{", "'netG'", ":", "self", ".", "netG", ".", "state_dict", "(", ")", ",", "'netD'", ":", "self", ".", "netD", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "state", ",", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.resume": [[81, 85], ["torch.load", "torch.load", "torch.load", "torch.load", "train.Trainer.netG.load_state_dict", "train.Trainer.netD.load_state_dict"], "methods", ["None"], ["", "def", "resume", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "state", "[", "'netG'", "]", ")", "\n", "self", ".", "netD", ".", "load_state_dict", "(", "state", "[", "'netD'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.prepare_code": [[87, 96], ["torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "random.shuffle", "enumerate", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "prepare_code", "(", "self", ")", ":", "\n", "        ", "rand_z", "=", "torch", ".", "FloatTensor", "(", "self", ".", "bs", ",", "cfg", ".", "GAN", ".", "Z_DIM", ")", ".", "normal_", "(", "0", ",", "1", ")", ".", "cuda", "(", ")", "\n", "rand_cz", "=", "torch", ".", "FloatTensor", "(", "self", ".", "bs", ",", "cfg", ".", "GAN", ".", "CZ_DIM", ")", ".", "normal_", "(", "0", ",", "1", ")", ".", "cuda", "(", ")", "\n", "rand_c", "=", "torch", ".", "zeros", "(", "self", ".", "bs", ",", "self", ".", "num_cls", ")", ".", "cuda", "(", ")", "\n", "rand_idx", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "num_cls", ")", "]", "\n", "random", ".", "shuffle", "(", "rand_idx", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "rand_idx", "[", ":", "self", ".", "bs", "]", ")", ":", "\n", "            ", "rand_c", "[", "i", ",", "idx", "]", "=", "1", "\n", "", "return", "rand_z", ",", "rand_cz", ",", "rand_c", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.prepare_data": [[98, 103], ["real_img.cuda.cuda.cuda", "aug_img.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "real_img", ",", "aug_img", "=", "data", "\n", "real_img", "=", "real_img", ".", "cuda", "(", ")", "\n", "aug_img", "=", "aug_img", ".", "cuda", "(", ")", "\n", "return", "real_img", ",", "aug_img", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.random_grid": [[105, 116], ["torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.functional.affine_grid().cuda", "torch.nn.functional.affine_grid().cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "utils.to_rad", "utils.to_rad", "utils.to_rad", "utils.to_rad"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.to_rad", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.to_rad", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.to_rad", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.to_rad"], ["", "def", "random_grid", "(", "self", ",", "size", ")", ":", "\n", "        ", "rand_s", "=", "torch", ".", "FloatTensor", "(", "self", ".", "bs", ",", "1", ")", ".", "uniform_", "(", "self", ".", "min_s", ",", "self", ".", "max_s", ")", "\n", "rand_r", "=", "torch", ".", "FloatTensor", "(", "self", ".", "bs", ",", "1", ")", ".", "uniform_", "(", "self", ".", "min_r", ",", "self", ".", "max_r", ")", "\n", "rand_tx", "=", "torch", ".", "FloatTensor", "(", "self", ".", "bs", ",", "1", ")", ".", "uniform_", "(", "self", ".", "min_t", ",", "self", ".", "max_t", ")", "\n", "rand_ty", "=", "torch", ".", "FloatTensor", "(", "self", ".", "bs", ",", "1", ")", ".", "uniform_", "(", "self", ".", "min_t", ",", "self", ".", "max_t", ")", "\n", "theta", "=", "[", "[", "[", "rand_s", "[", "i", "]", "*", "torch", ".", "cos", "(", "to_rad", "(", "rand_r", "[", "i", "]", ")", ")", ",", "-", "rand_s", "[", "i", "]", "*", "torch", ".", "sin", "(", "to_rad", "(", "rand_r", "[", "i", "]", ")", ")", ",", "rand_tx", "[", "i", "]", "]", ",", "\n", "[", "rand_s", "[", "i", "]", "*", "torch", ".", "sin", "(", "to_rad", "(", "rand_r", "[", "i", "]", ")", ")", ",", "rand_s", "[", "i", "]", "*", "torch", ".", "cos", "(", "to_rad", "(", "rand_r", "[", "i", "]", ")", ")", ",", "rand_ty", "[", "i", "]", "]", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "bs", ")", "]", "\n", "theta", "=", "torch", ".", "tensor", "(", "theta", ")", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "size", ",", "align_corners", "=", "True", ")", ".", "cuda", "(", ")", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.train_D": [[118, 185], ["train.Trainer.optimizerD.zero_grad", "train.Trainer.netD", "train.Trainer.netD", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train.Trainer.CE", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda.cuda", "torch.zeros().cuda.cuda", "train.Trainer.netD", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "labels[].view", "similarity_matrix[].view", "similarity_matrix[].view", "similarity_matrix[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "train.Trainer.CE", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "D_loss.backward", "train.Trainer.optimizerD.step", "train.Trainer.fake_img.detach", "train.Trainer.CE", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "train.Trainer.fg_mask.detach", "train.Trainer.fake_img.detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "real_adv_loss.item", "fake_adv_loss.item", "info_loss.item", "train.Trainer.item", "train.Trainer.item", "entropy_reg_1.item", "entropy_reg_2.item", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "range", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "range", "range", "torch.zeros().cuda.unsqueeze", "torch.zeros().cuda.unsqueeze", "torch.zeros().cuda.unsqueeze", "torch.zeros().cuda.unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "range", "torch.zeros().cuda.bool", "torch.zeros().cuda.bool", "torch.nn.functional.softmax.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.zeros().cuda.bool", "torch.zeros().cuda.bool", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.nn.functional.softmax.mean", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "train_D", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizerD", ".", "zero_grad", "(", ")", "\n", "\n", "## forward pass", "\n", "real_info", ",", "real_adv", ",", "_", "=", "self", ".", "netD", "(", "self", ".", "real_img", ",", "self", ".", "eye", ")", "\n", "fake_info", ",", "fake_adv", ",", "class_emb", ",", "fg_fake_info", "=", "self", ".", "netD", "(", "self", ".", "fake_img", ".", "detach", "(", ")", ",", "self", ".", "eye", ",", "self", ".", "fg_mask", ".", "detach", "(", ")", "*", "self", ".", "fake_img", ".", "detach", "(", ")", ")", "\n", "\n", "## adversarial loss", "\n", "real_adv_loss", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "(", "1.0", "-", "real_adv", ")", ".", "mean", "(", ")", "\n", "fake_adv_loss", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "(", "1.0", "+", "fake_adv", ")", ".", "mean", "(", ")", "\n", "\n", "## info loss & augmented info loss", "\n", "f", "=", "F", ".", "normalize", "(", "fake_info", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "ff", "=", "F", ".", "normalize", "(", "fg_fake_info", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "c", "=", "F", ".", "normalize", "(", "class_emb", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "class_dist", "=", "torch", ".", "cat", "(", "[", "torch", ".", "matmul", "(", "f", ",", "c", "[", "i", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "/", "self", ".", "temp", "for", "i", "in", "range", "(", "self", ".", "num_cls", ")", "]", ",", "1", ")", "\n", "info_loss", "=", "5", "*", "self", ".", "CE", "(", "class_dist", ",", "torch", ".", "argmax", "(", "self", ".", "rand_c", ",", "1", ")", ")", "\n", "class_dist_aug", "=", "torch", ".", "cat", "(", "[", "torch", ".", "matmul", "(", "ff", ",", "c", "[", "i", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "/", "self", ".", "temp", "for", "i", "in", "range", "(", "self", ".", "num_cls", ")", "]", ",", "1", ")", "\n", "info_loss_aug", "=", "self", ".", "CE", "(", "class_dist_aug", ",", "torch", ".", "argmax", "(", "self", ".", "rand_c", ",", "1", ")", ")", "\n", "\n", "## real image contrastive loss", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "self", ".", "bs", ")", "for", "i", "in", "range", "(", "2", ")", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "(", "labels", ".", "unsqueeze", "(", "0", ")", "==", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "real_aug_feat", ",", "_", ",", "_", "=", "self", ".", "netD", "(", "self", ".", "aug_img", ",", "self", ".", "eye", ")", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "real_info", ",", "real_aug_feat", "]", ",", "0", ")", "\n", "feat", "=", "F", ".", "normalize", "(", "feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "similarity_matrix", "=", "torch", ".", "matmul", "(", "feat", ",", "feat", ".", "T", ")", "\n", "\n", "mask", "=", "torch", ".", "eye", "(", "feat", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", "[", "~", "mask", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "similarity_matrix", "=", "similarity_matrix", "[", "~", "mask", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "positives", "=", "similarity_matrix", "[", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "negatives", "=", "similarity_matrix", "[", "~", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "positives", ",", "negatives", "]", ",", "dim", "=", "1", ")", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "logits", "=", "logits", "/", "self", ".", "temp", "\n", "\n", "contrastive_loss", "=", "self", ".", "CE", "(", "logits", ",", "labels", ")", "\n", "\n", "## entropy regularizations", "\n", "rr", "=", "F", ".", "normalize", "(", "real_info", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "class_dist_real", "=", "torch", ".", "cat", "(", "[", "torch", ".", "matmul", "(", "rr", ",", "c", "[", "i", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "/", "self", ".", "temp", "for", "i", "in", "range", "(", "self", ".", "num_cls", ")", "]", ",", "1", ")", "\n", "class_dist_real", "=", "F", ".", "softmax", "(", "class_dist_real", ",", "1", ")", "\n", "entropy_reg_1", "=", "-", "0.1", "*", "(", "class_dist_real", "*", "torch", ".", "log", "(", "class_dist_real", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "entropy_reg_2", "=", "0.1", "*", "(", "class_dist_real", ".", "mean", "(", "0", ")", "*", "torch", ".", "log", "(", "class_dist_real", ".", "mean", "(", "0", ")", ")", ")", ".", "sum", "(", ")", "\n", "\n", "## backward pass", "\n", "D_loss", "=", "real_adv_loss", "+", "fake_adv_loss", "+", "info_loss", "+", "info_loss_aug", "+", "contrastive_loss", "+", "entropy_reg_1", "+", "entropy_reg_2", "\n", "D_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizerD", ".", "step", "(", ")", "\n", "\n", "## log training losses", "\n", "if", "self", ".", "steps", "%", "500", "==", "0", ":", "\n", "            ", "self", ".", "summary_writer", ".", "add_scalar", "(", "'D/real_loss'", ",", "real_adv_loss", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'D/fake_loss'", ",", "fake_adv_loss", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'D/info_loss'", ",", "info_loss", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'D/info_loss_aug'", ",", "info_loss_aug", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'D/contrastive_loss'", ",", "contrastive_loss", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'D/entropy_reg_1'", ",", "entropy_reg_1", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'D/entropy_reg_2'", ",", "entropy_reg_2", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.train_G": [[187, 223], ["train.Trainer.optimizerG.zero_grad", "train.Trainer.netD", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train.Trainer.CE", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "G_loss.backward", "train.Trainer.optimizerG.step", "fake_adv.mean", "train.Trainer.CE", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "train.Trainer.fg_mask.view", "utils.binary_entropy().mean", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "adv_loss.item", "info_loss.item", "train.Trainer.item", "mask_reg_loss.item", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "range", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "range", "utils.binary_entropy", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.binary_entropy"], ["", "", "def", "train_G", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizerG", ".", "zero_grad", "(", ")", "\n", "\n", "## forward pass", "\n", "fake_info", ",", "fake_adv", ",", "class_emb", ",", "fg_fake_info", "=", "self", ".", "netD", "(", "self", ".", "fake_img", ",", "self", ".", "eye", ",", "self", ".", "fg_mask", "*", "self", ".", "fake_img", ")", "\n", "\n", "## adversarial loss", "\n", "adv_loss", "=", "-", "fake_adv", ".", "mean", "(", ")", "\n", "\n", "## info loss & augmented info loss", "\n", "f", "=", "F", ".", "normalize", "(", "fake_info", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "ff", "=", "F", ".", "normalize", "(", "fg_fake_info", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "c", "=", "F", ".", "normalize", "(", "class_emb", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "class_dist", "=", "torch", ".", "cat", "(", "[", "torch", ".", "matmul", "(", "f", ",", "c", "[", "i", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "/", "self", ".", "temp", "for", "i", "in", "range", "(", "self", ".", "num_cls", ")", "]", ",", "1", ")", "\n", "info_loss", "=", "5", "*", "self", ".", "CE", "(", "class_dist", ",", "torch", ".", "argmax", "(", "self", ".", "rand_c", ",", "1", ")", ")", "\n", "class_dist_aug", "=", "torch", ".", "cat", "(", "[", "torch", ".", "matmul", "(", "ff", ",", "c", "[", "i", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "/", "self", ".", "temp", "for", "i", "in", "range", "(", "self", ".", "num_cls", ")", "]", ",", "1", ")", "\n", "info_loss_aug", "=", "self", ".", "CE", "(", "class_dist_aug", ",", "torch", ".", "argmax", "(", "self", ".", "rand_c", ",", "1", ")", ")", "\n", "\n", "## mask regularizations", "\n", "mean_map", "=", "torch", ".", "mean", "(", "self", ".", "fg_mask", ".", "view", "(", "self", ".", "bs", ",", "-", "1", ")", ",", "1", ")", "\n", "mask_reg_loss", "=", "torch", ".", "max", "(", "torch", ".", "zeros_like", "(", "mean_map", ")", ",", "0.1", "-", "mean_map", ")", ".", "mean", "(", ")", "+", "torch", ".", "max", "(", "torch", ".", "zeros_like", "(", "mean_map", ")", ",", "mean_map", "-", "0.9", ")", ".", "mean", "(", ")", "+", "binary_entropy", "(", "self", ".", "fg_mask", ")", ".", "mean", "(", ")", "\n", "\n", "## backward pass", "\n", "G_loss", "=", "adv_loss", "+", "info_loss", "+", "info_loss_aug", "+", "mask_reg_loss", "\n", "G_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizerG", ".", "step", "(", ")", "\n", "\n", "## log training losses", "\n", "if", "self", ".", "steps", "%", "500", "==", "0", ":", "\n", "            ", "self", ".", "summary_writer", ".", "add_scalar", "(", "'G/adv_loss'", ",", "adv_loss", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'G/info_loss'", ",", "info_loss", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'G/info_loss_aug'", ",", "info_loss_aug", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'G/mask_reg_loss'", ",", "mask_reg_loss", ".", "item", "(", ")", ",", "self", ".", "steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.train": [[225, 332], ["print", "range", "print", "train.Trainer.prepare_data", "train.Trainer.prepare_code", "train.Trainer.netG", "train.Trainer.train_D", "train.Trainer.prepare_code", "train.Trainer.netG", "train.Trainer.train_G", "train.Trainer.netG.eval", "train.Trainer.netD.eval", "evals.get_stat", "range", "evals.get_match", "evals.get_acc", "evals.get_nmi", "numpy.empty", "range", "numpy.mean", "numpy.cov", "evals.calculate_frechet_distance", "print", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "train.Trainer.summary_writer.add_scalar", "train.Trainer.netG.train", "train.Trainer.netD.train", "train.Trainer.random_grid", "train.Trainer.random_grid", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.Trainer.prepare_code", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train.Trainer.netG", "utils.postprocess", "utils.postprocess", "utils.postprocess", "utils.postprocess", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.make_grid", "train.Trainer.summary_writer.add_image", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.Trainer.prepare_code", "adaptive_avg_pool2d.squeeze().squeeze().cpu().numpy", "train.Trainer.save", "train.Trainer.save", "train.Trainer.real_img.size", "train.Trainer.real_img.size", "train.Trainer.fg_mask.repeat", "img.cuda", "train.Trainer.netD", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "list", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.Trainer.netG", "print", "adaptive_avg_pool2d", "str", "os.path.join", "os.path.join", "rand_z[].repeat", "rand_cz[].repeat", "rand_c[].repeat", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "torch.argmax().cpu().numpy", "lab.cpu().numpy", "train.Trainer.inception", "adaptive_avg_pool2d.size", "adaptive_avg_pool2d.size", "adaptive_avg_pool2d.squeeze().squeeze().cpu", "len", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "torch.matmul().unsqueeze", "range", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "lab.cpu", "adaptive_avg_pool2d.squeeze().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "adaptive_avg_pool2d.squeeze"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.prepare_data", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.prepare_code", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.train_D", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.prepare_code", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.train_G", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.evals.get_stat", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.evals.get_match", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.evals.get_acc", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.evals.get_nmi", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.evals.calculate_frechet_distance", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.train", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.train", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.random_grid", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.random_grid", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.prepare_code", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.postprocess", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.postprocess", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.postprocess", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.postprocess", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.prepare_code", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.save", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.train.Trainer.save"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "steps", "=", "0", "\n", "self", ".", "max_acc", "=", "0", "\n", "self", ".", "max_nmi", "=", "0", "\n", "self", ".", "min_fid", "=", "999", "\n", "\n", "print", "(", "\"Start training.\"", ")", "\n", "for", "epoch", "in", "range", "(", "cfg", ".", "MAX_EPOCH", ")", ":", "\n", "\n", "            ", "for", "data", "in", "self", ".", "dataloader", ":", "\n", "\n", "## update D", "\n", "                ", "self", ".", "real_img", ",", "self", ".", "aug_img", "=", "self", ".", "prepare_data", "(", "data", ")", "\n", "rand_z", ",", "rand_cz", ",", "self", ".", "rand_c", "=", "self", ".", "prepare_code", "(", ")", "\n", "_", ",", "self", ".", "fg_mask", ",", "self", ".", "fg_img", ",", "self", ".", "fake_img", "=", "self", ".", "netG", "(", "rand_z", ",", "rand_cz", ",", "self", ".", "rand_c", ",", "self", ".", "random_grid", "(", "self", ".", "real_img", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "train_D", "(", ")", "\n", "\n", "## update G", "\n", "rand_z", ",", "rand_cz", ",", "self", ".", "rand_c", "=", "self", ".", "prepare_code", "(", ")", "\n", "_", ",", "self", ".", "fg_mask", ",", "self", ".", "fg_img", ",", "self", ".", "fake_img", "=", "self", ".", "netG", "(", "rand_z", ",", "rand_cz", ",", "self", ".", "rand_c", ",", "self", ".", "random_grid", "(", "self", ".", "real_img", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "train_G", "(", ")", "\n", "\n", "self", ".", "steps", "+=", "1", "\n", "\n", "## evaluate every x epochs", "\n", "", "if", "epoch", "%", "cfg", ".", "EVAL_INTERVAL", "==", "0", ":", "\n", "## switch to eval mode", "\n", "                ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "self", ".", "netD", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "rand_z", ",", "rand_cz", ",", "rand_c", "=", "self", ".", "prepare_code", "(", ")", "\n", "rand_z", "=", "torch", ".", "cat", "(", "[", "rand_z", "[", ":", "1", "]", ".", "repeat", "(", "4", ",", "1", ")", ",", "rand_z", "[", "1", ":", "5", "]", "]", ",", "0", ")", "\n", "rand_cz", "=", "torch", ".", "cat", "(", "[", "rand_cz", "[", ":", "1", "]", ".", "repeat", "(", "4", ",", "1", ")", ",", "rand_cz", "[", "1", ":", "5", "]", "]", ",", "0", ")", "\n", "rand_c", "=", "torch", ".", "cat", "(", "[", "rand_c", "[", ":", "4", "]", ",", "rand_c", "[", "4", ":", "5", "]", ".", "repeat", "(", "4", ",", "1", ")", "]", ",", "0", ")", "\n", "\n", "self", ".", "bg_img", ",", "self", ".", "fg_mask", ",", "self", ".", "fg_img", ",", "self", ".", "fake_img", "=", "self", ".", "netG", "(", "rand_z", ",", "rand_cz", ",", "rand_c", ")", "\n", "self", ".", "bg_img", "=", "postprocess", "(", "self", ".", "bg_img", ")", "\n", "self", ".", "fg_mask", "=", "postprocess", "(", "self", ".", "fg_mask", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fg_img", "=", "postprocess", "(", "self", ".", "fg_img", ")", "\n", "self", ".", "fake_img", "=", "postprocess", "(", "self", ".", "fake_img", ")", "\n", "\n", "vis", "=", "torch", ".", "cat", "(", "[", "self", ".", "bg_img", ",", "self", ".", "fg_mask", ",", "self", ".", "fg_img", ",", "self", ".", "fake_img", "]", ")", "\n", "vis", "=", "vutils", ".", "make_grid", "(", "vis", ",", "nrow", "=", "8", ",", "padding", "=", "10", ",", "pad_value", "=", "1", ")", "\n", "self", ".", "summary_writer", ".", "add_image", "(", "'Image_sample'", ",", "vis", ",", "self", ".", "steps", ")", "\n", "\n", "## get acc and nmi scores on predictions", "\n", "", "pred_c", "=", "[", "]", "\n", "real_c", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "img", ",", "lab", "in", "self", ".", "test_dataloader", ":", "\n", "                        ", "real_img", "=", "img", ".", "cuda", "(", ")", "\n", "feat", ",", "_", ",", "class_emb", "=", "self", ".", "netD", "(", "real_img", ",", "self", ".", "eye", ")", "\n", "f", "=", "F", ".", "normalize", "(", "feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "c", "=", "F", ".", "normalize", "(", "class_emb", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "class_dist", "=", "torch", ".", "cat", "(", "[", "torch", ".", "matmul", "(", "f", ",", "c", "[", "i", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "/", "self", ".", "temp", "for", "i", "in", "range", "(", "self", ".", "num_cls", ")", "]", ",", "1", ")", "\n", "pred_c", "+=", "list", "(", "torch", ".", "argmax", "(", "class_dist", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "real_c", "+=", "list", "(", "lab", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "c_table", "=", "get_stat", "(", "pred_c", ",", "self", ".", "num_cls", ",", "real_c", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "over", ")", ":", "\n", "                    ", "c_table", "[", "self", ".", "num_cls", "//", "self", ".", "over", "*", "i", ":", "self", ".", "num_cls", "//", "self", ".", "over", "*", "(", "i", "+", "1", ")", ",", ":", "]", "=", "c_table", "[", ":", "self", ".", "num_cls", "//", "self", ".", "over", ",", ":", "]", "\n", "", "idx_map", "=", "get_match", "(", "c_table", ")", "\n", "cur_acc", "=", "get_acc", "(", "c_table", ",", "idx_map", ",", "self", ".", "over", ")", "\n", "cur_nmi", "=", "get_nmi", "(", "c_table", "[", ":", "self", ".", "num_gt_cls", ",", ":", "]", ")", "\n", "\n", "## get fid score on randomly generated samples", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "(", "len", "(", "self", ".", "dataset", ")", "//", "self", ".", "bs", ")", "*", "self", ".", "bs", ",", "2048", ")", ")", "\n", "start_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", "//", "self", ".", "bs", ")", ":", "\n", "                    ", "rand_z", ",", "rand_cz", ",", "rand_c", "=", "self", ".", "prepare_code", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "_", ",", "_", ",", "_", ",", "fake_img", "=", "self", ".", "netG", "(", "rand_z", ",", "rand_cz", ",", "rand_c", ")", "\n", "pred", "=", "self", ".", "inception", "(", "fake_img", ")", "[", "0", "]", "\n", "", "if", "pred", ".", "size", "(", "2", ")", "!=", "1", "or", "pred", ".", "size", "(", "3", ")", "!=", "1", ":", "\n", "                        ", "print", "(", "'size mismatch error occurred during the fid score computation!'", ")", "\n", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "", "pred", "=", "pred", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_arr", "[", "start_idx", ":", "start_idx", "+", "pred", ".", "shape", "[", "0", "]", "]", "=", "pred", "\n", "start_idx", "=", "start_idx", "+", "pred", ".", "shape", "[", "0", "]", "\n", "", "cur_mu", "=", "np", ".", "mean", "(", "pred_arr", ",", "axis", "=", "0", ")", "\n", "cur_sig", "=", "np", ".", "cov", "(", "pred_arr", ",", "rowvar", "=", "False", ")", "\n", "cur_fid", "=", "calculate_frechet_distance", "(", "self", ".", "mu", ",", "self", ".", "sig", ",", "cur_mu", ",", "cur_sig", ")", "\n", "\n", "print", "(", "str", "(", "epoch", ")", "+", "\"th epoch finished\"", ",", "\"\\t fid : \"", ",", "\"{:.3f}\"", ".", "format", "(", "cur_fid", ")", ",", "\"\\t acc : \"", ",", "\"{:.3f}\"", ".", "format", "(", "cur_acc", ")", ",", "\"\\t nmi : \"", ",", "\"{:.3f}\"", ".", "format", "(", "cur_nmi", ")", ")", "\n", "\n", "## log of evaluation scores", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'test/ACC'", ",", "cur_acc", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'test/NMI'", ",", "cur_nmi", ",", "self", ".", "steps", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "'test/FID'", ",", "cur_fid", ",", "self", ".", "steps", ")", "\n", "\n", "## save optimal versions of model in terms of fid and acc scores", "\n", "if", "cur_fid", "<", "self", ".", "min_fid", ":", "\n", "                    ", "self", ".", "min_fid", "=", "cur_fid", "\n", "self", ".", "save", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "SAVE_DIR", ",", "'best_fid.pt'", ")", ")", "\n", "", "if", "cur_acc", ">", "self", ".", "max_acc", ":", "\n", "                    ", "self", ".", "max_acc", "=", "cur_acc", "\n", "self", ".", "save", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "SAVE_DIR", ",", "'best_acc.pt'", ")", ")", "\n", "\n", "## switch to training mode", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "self", ".", "netD", ".", "train", "(", ")", "\n", "\n", "", "", "print", "(", "\"Training completed.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.model.bg_generator.__init__": [[10, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "base_layer.GLU", "base_layer.upBlock", "base_layer.upBlock", "base_layer.upBlock", "base_layer.upBlock", "base_layer.upBlock", "base_layer.multi_ResBlock", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.multi_ResBlock"], ["    ", "def", "__init__", "(", "self", ",", "ngf", "=", "512", ")", ":", "\n", "        ", "super", "(", "bg_generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "self", ".", "ngf", "=", "ngf", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "ngf", "*", "4", "*", "4", "*", "2", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "4", "*", "4", "*", "2", ")", ",", "GLU", "(", ")", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", ",", "\n", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", ",", "\n", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", ",", "\n", "upBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "32", ")", ",", "\n", "upBlock", "(", "ngf", "//", "32", ",", "ngf", "//", "32", ")", ",", "\n", "multi_ResBlock", "(", "3", ",", "ngf", "//", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", "//", "32", ",", "3", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.model.bg_generator.forward": [[24, 28], ["model.bg_generator.fc().view", "model.bg_generator.layers", "model.bg_generator.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "out", "=", "self", ".", "fc", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "ngf", ",", "4", ",", "4", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.model.fg_generator.__init__": [[31, 51], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "base_layer.GLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "base_layer.GLU", "base_layer.upBlock", "base_layer.upBlock", "base_layer.upBlock", "base_layer.upBlock", "base_layer.upBlock", "base_layer.multi_ResBlock", "base_layer.sameBlock", "torch.Conv2d", "torch.Conv2d", "base_layer.sameBlock", "base_layer.multi_ResBlock", "base_layer.sameBlock", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.upBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.multi_ResBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.sameBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.sameBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.multi_ResBlock", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.sameBlock"], ["    ", "def", "__init__", "(", "self", ",", "c_dim", ",", "ngf", "=", "512", ")", ":", "\n", "        ", "super", "(", "fg_generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "cfg", ".", "GAN", ".", "Z_DIM", "\n", "self", ".", "cz_dim", "=", "cfg", ".", "GAN", ".", "CZ_DIM", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "ngf", "=", "ngf", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "ngf", "*", "4", "*", "4", "*", "2", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "4", "*", "4", "*", "2", ")", ",", "GLU", "(", ")", ")", "\n", "self", ".", "emb_c", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "c_dim", ",", "self", ".", "cz_dim", "*", "2", "*", "2", ")", ",", "nn", ".", "BatchNorm1d", "(", "self", ".", "cz_dim", "*", "2", "*", "2", ")", ",", "GLU", "(", ")", ")", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "upBlock", "(", "ngf", "+", "self", ".", "cz_dim", ",", "ngf", "//", "2", ")", ",", "\n", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", ",", "\n", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", ",", "\n", "upBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "32", ")", ",", "\n", "upBlock", "(", "ngf", "//", "32", ",", "ngf", "//", "32", ")", ",", "\n", "multi_ResBlock", "(", "3", ",", "ngf", "//", "32", ")", ")", "\n", "self", ".", "to_mask", "=", "nn", ".", "Sequential", "(", "sameBlock", "(", "ngf", "//", "32", ",", "ngf", "//", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", "//", "32", ",", "1", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "to_img", "=", "nn", ".", "Sequential", "(", "sameBlock", "(", "self", ".", "c_dim", "+", "ngf", "//", "32", ",", "ngf", "//", "32", ")", ",", "\n", "multi_ResBlock", "(", "2", ",", "ngf", "//", "32", ")", ",", "\n", "sameBlock", "(", "ngf", "//", "32", ",", "ngf", "//", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", "//", "32", ",", "3", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.model.fg_generator.forward": [[52, 70], ["model.fg_generator.emb_c", "cz_.view().repeat.view().repeat.view().repeat", "model.fg_generator.fc().view", "model.fg_generator.base", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "c.view().repeat.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.fg_generator.to_img", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.fg_generator.to_mask", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "c_std.exp", "cz_.view().repeat.view().repeat.view", "model.fg_generator.fc", "c.view().repeat.view().repeat.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "c", ",", "cz", ")", ":", "\n", "## get c' from c", "\n", "        ", "c_", "=", "self", ".", "emb_c", "(", "c", ")", "\n", "c_mu", "=", "c_", "[", ":", ",", ":", "self", ".", "cz_dim", "]", "\n", "c_std", "=", "c_", "[", ":", ",", "self", ".", "cz_dim", ":", "]", "\n", "cz_", "=", "c_mu", "+", "c_std", ".", "exp", "(", ")", "*", "cz", "\n", "cz_", "=", "cz_", ".", "view", "(", "-", "1", ",", "self", ".", "cz_dim", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "## get base_feat", "\n", "out", "=", "self", ".", "fc", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "ngf", ",", "4", ",", "4", ")", "\n", "out", "=", "self", ".", "base", "(", "torch", ".", "cat", "(", "(", "out", ",", "cz_", ")", ",", "1", ")", ")", "\n", "## get fg_mask", "\n", "out_mask", "=", "torch", ".", "sigmoid", "(", "self", ".", "to_mask", "(", "out", ")", ")", "\n", "## get fg_image", "\n", "h", ",", "w", "=", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", "\n", "c", "=", "c", ".", "view", "(", "-", "1", ",", "self", ".", "c_dim", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "h", ",", "w", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "c", ")", ",", "1", ")", "\n", "out_img", "=", "self", ".", "to_img", "(", "out", ")", "\n", "return", "out_mask", ",", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.model.Generator.__init__": [[73, 77], ["torch.Module.__init__", "model.bg_generator", "model.fg_generator"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_dim", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bg_gen", "=", "bg_generator", "(", ")", "\n", "self", ".", "fg_gen", "=", "fg_generator", "(", "c_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.model.Generator.forward": [[78, 86], ["model.Generator.bg_gen", "model.Generator.fg_gen", "F.grid_sample", "F.grid_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "cz", ",", "c", ",", "grid", "=", "None", ")", ":", "\n", "        ", "bg_img", "=", "self", ".", "bg_gen", "(", "z", ")", "# get background image", "\n", "fg_mask", ",", "fg_img", "=", "self", ".", "fg_gen", "(", "z", ",", "c", ",", "cz", ")", "# get foreground image", "\n", "if", "grid", "!=", "None", ":", "\n", "            ", "fg_mask", "=", "F", ".", "grid_sample", "(", "fg_mask", ",", "grid", ",", "align_corners", "=", "True", ")", "\n", "fg_img", "=", "F", ".", "grid_sample", "(", "fg_img", ",", "grid", ",", "align_corners", "=", "True", ")", "\n", "", "final_img", "=", "bg_img", "*", "(", "1", "-", "fg_mask", ")", "+", "fg_img", "*", "fg_mask", "\n", "return", "bg_img", ",", "fg_mask", ",", "fg_img", ",", "final_img", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.model.Discriminator.__init__": [[89, 100], ["torch.Module.__init__", "base_layer.encode_img", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__", "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.base_layer.encode_img"], ["    ", "def", "__init__", "(", "self", ",", "c_dim", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ndf", "=", "ndf", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "base", "=", "encode_img", "(", ")", "\n", "self", ".", "info_head", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ")", "\n", "self", ".", "rf_head", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ")", "\n", "self", ".", "centroids", "=", "nn", ".", "Linear", "(", "self", ".", "c_dim", ",", "ndf", "*", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.model.Discriminator.forward": [[101, 112], ["model.Discriminator.base", "model.Discriminator.info_head().view", "model.Discriminator.rf_head().view", "model.Discriminator.centroids", "model.Discriminator.base", "model.Discriminator.info_head().view", "model.Discriminator.info_head", "model.Discriminator.rf_head", "model.Discriminator.info_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "eye", ",", "masked_x", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "base", "(", "x", ")", "\n", "info", "=", "self", ".", "info_head", "(", "out", ")", ".", "view", "(", "-", "1", ",", "self", ".", "ndf", "*", "8", ")", "\n", "rf", "=", "self", ".", "rf_head", "(", "out", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "class_emb", "=", "self", ".", "centroids", "(", "eye", ")", "\n", "if", "masked_x", "!=", "None", ":", "\n", "            ", "fg_out", "=", "self", ".", "base", "(", "masked_x", ")", "\n", "fg_info", "=", "self", ".", "info_head", "(", "fg_out", ")", ".", "view", "(", "-", "1", ",", "self", ".", "ndf", "*", "8", ")", "\n", "return", "info", ",", "rf", ",", "class_emb", ",", "fg_info", "\n", "", "else", ":", "\n", "            ", "return", "info", ",", "rf", ",", "class_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.weights_init": [[12, 23], ["classname.find", "torch.init.orthogonal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "torch.init.orthogonal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.define_optimizers": [[24, 28], ["torch.Adam", "torch.Adam", "netG.parameters", "netD.parameters"], "function", ["None"], ["", "", "", "def", "define_optimizers", "(", "netG", ",", "netD", ")", ":", "\n", "    ", "optimizerG", "=", "optim", ".", "Adam", "(", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizerD", "=", "optim", ".", "Adam", "(", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "return", "optimizerG", ",", "optimizerD", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.load_network": [[29, 41], ["model.Generator", "netG.cuda.apply", "torch.DataParallel", "netG.cuda.cuda", "model.Discriminator", "netD.cuda.apply", "torch.DataParallel", "netD.cuda.cuda"], "function", ["None"], ["", "def", "load_network", "(", "c_dim", ")", ":", "\n", "# G", "\n", "    ", "netG", "=", "Generator", "(", "c_dim", ")", "\n", "netG", ".", "apply", "(", "weights_init", ")", "\n", "netG", "=", "nn", ".", "DataParallel", "(", "netG", ")", "\n", "netG", "=", "netG", ".", "cuda", "(", ")", "\n", "# D", "\n", "netD", "=", "Discriminator", "(", "c_dim", ")", "\n", "netD", ".", "apply", "(", "weights_init", ")", "\n", "netD", "=", "nn", ".", "DataParallel", "(", "netD", ")", "\n", "netD", "=", "netD", ".", "cuda", "(", ")", "\n", "return", "netG", ",", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.binary_entropy": [[44, 46], ["torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2"], "function", ["None"], ["", "def", "binary_entropy", "(", "p", ")", ":", "\n", "    ", "return", "-", "p", "*", "torch", ".", "log2", "(", "p", "+", "1e-6", ")", "-", "(", "1", "-", "p", ")", "*", "torch", ".", "log2", "(", "1", "-", "p", "+", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.postprocess": [[49, 51], ["x.add().div().clamp", "x.add().div", "x.add"], "function", ["None"], ["", "def", "postprocess", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "add", "(", "1", ")", ".", "div", "(", "2", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.utils.to_rad": [[52, 54], ["None"], "function", ["None"], ["", "def", "to_rad", "(", "deg", ")", ":", "\n", "    ", "return", "deg", "/", "180", "*", "math", ".", "pi", "\n", "", ""]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__init__": [[10, 32], ["torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "datasets.Dataset.load_filenames", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ColorJitter"], "methods", ["home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.load_filenames"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "mode", "=", "'train'", ")", ":", "\n", "\n", "        ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "128", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "128", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "self", ".", "transform_aug", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomResizedCrop", "(", "128", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "0.2", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "self", ".", "norm", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "img_paths", ",", "self", ".", "labels", "=", "self", ".", "load_filenames", "(", "data_dir", ",", "mode", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "iterator", "=", "self", ".", "prepare_training_pairs", "\n", "", "else", ":", "\n", "            ", "self", ".", "iterator", "=", "self", ".", "prepare_test_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.load_filenames": [[33, 43], ["os.path.join", "int", "open", "f.readlines", "open", "f.readlines", "os.path.join", "os.path.join", "_.split", "_.split"], "methods", ["None"], ["", "", "def", "load_filenames", "(", "self", ",", "data_dir", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'trainset.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "data", "=", "f", ".", "readlines", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'testset.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "data", "=", "f", ".", "readlines", "(", ")", "\n", "", "", "img_paths", "=", "[", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'images'", ",", "_", ".", "split", "(", ")", "[", "0", "]", ")", "for", "_", "in", "data", "]", "\n", "labels", "=", "[", "int", "(", "_", ".", "split", "(", ")", "[", "-", "1", "]", ")", "for", "_", "in", "data", "]", "\n", "return", "img_paths", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.prepare_training_pairs": [[44, 49], ["PIL.Image.open().convert", "datasets.Dataset.transform", "datasets.Dataset.transform_aug", "PIL.Image.open"], "methods", ["None"], ["", "def", "prepare_training_pairs", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "img_paths", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img_", "=", "self", ".", "transform", "(", "img", ")", "\n", "img_aug_", "=", "self", ".", "transform_aug", "(", "img", ")", "\n", "return", "img_", ",", "img_aug_", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.prepare_test_pairs": [[50, 56], ["PIL.Image.open().convert", "datasets.Dataset.norm", "torchvision.Resize", "torchvision.CenterCrop", "PIL.Image.open"], "methods", ["None"], ["", "def", "prepare_test_pairs", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "img_paths", "[", "index", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "transforms", ".", "Resize", "(", "128", ")", "(", "img", ")", "\n", "img", "=", "transforms", ".", "CenterCrop", "(", "128", ")", "(", "img", ")", "\n", "img", "=", "self", ".", "norm", "(", "img", ")", "\n", "return", "img", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__getitem__": [[57, 59], ["datasets.Dataset.iterator"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "iterator", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.naver-ai_c3-gan.None.datasets.Dataset.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_paths", ")", "\n", "", "", ""]]}