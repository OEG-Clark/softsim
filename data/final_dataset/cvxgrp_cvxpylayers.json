{"home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_example": [[26, 45], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Minimize", "cvxpy.Problem", "cvxpy.Problem.is_dpp", "cvxpylayers.torch.CvxpyLayer", "torch.randn", "torch.randn", "cvxpylayers.torch.CvxpyLayer.", "solution.sum().backward", "cvxpy.pnorm", "solution.sum"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["    ", "def", "test_example", "(", "self", ")", ":", "\n", "        ", "n", ",", "m", "=", "2", ",", "3", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "constraints", "=", "[", "x", ">=", "0", "]", "\n", "objective", "=", "cp", ".", "Minimize", "(", "0.5", "*", "cp", ".", "pnorm", "(", "A", "@", "x", "-", "b", ",", "p", "=", "1", ")", ")", "\n", "problem", "=", "cp", ".", "Problem", "(", "objective", ",", "constraints", ")", "\n", "assert", "problem", ".", "is_dpp", "(", ")", "\n", "\n", "cvxpylayer", "=", "CvxpyLayer", "(", "problem", ",", "parameters", "=", "[", "A", ",", "b", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "A_tch", "=", "torch", ".", "randn", "(", "m", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "b_tch", "=", "torch", ".", "randn", "(", "m", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# solve the problem", "\n", "solution", ",", "=", "cvxpylayer", "(", "A_tch", ",", "b_tch", ")", "\n", "\n", "# compute the gradient of the sum of the solution with respect to A, b", "\n", "solution", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_simple_batch_socp": [[46, 71], ["test_cvxpylayer.set_seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.autograd.gradcheck", "cvxpy.Minimize", "cvxpy.sum_squares", "cvxpy.norm"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "test_simple_batch_socp", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n", "=", "5", "\n", "m", "=", "1", "\n", "batch_size", "=", "4", "\n", "\n", "P_sqrt", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "n", ")", ",", "name", "=", "'P_sqrt'", ")", "\n", "q", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "1", ")", ",", "name", "=", "'q'", ")", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ",", "name", "=", "'A'", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "1", ")", ",", "name", "=", "'b'", ")", "\n", "\n", "x", "=", "cp", ".", "Variable", "(", "(", "n", ",", "1", ")", ",", "name", "=", "'x'", ")", "\n", "\n", "objective", "=", "0.5", "*", "cp", ".", "sum_squares", "(", "P_sqrt", "@", "x", ")", "+", "q", ".", "T", "@", "x", "\n", "constraints", "=", "[", "A", "@", "x", "==", "b", ",", "cp", ".", "norm", "(", "x", ")", "<=", "1", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ",", "constraints", ")", "\n", "\n", "prob_tch", "=", "CvxpyLayer", "(", "prob", ",", "[", "P_sqrt", ",", "q", ",", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "P_sqrt_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "n", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "q_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "n", ",", "1", ",", "requires_grad", "=", "True", ")", "\n", "A_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "m", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "b_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "m", ",", "1", ",", "requires_grad", "=", "True", ")", "\n", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "prob_tch", ",", "(", "P_sqrt_tch", ",", "q_tch", ",", "A_tch", ",", "b_tch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_least_squares": [[72, 109], ["test_cvxpylayer.set_seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "test_cvxpylayer.TestCvxpyLayer.test_least_squares.lstsq"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "test_least_squares", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "m", ",", "n", "=", "100", ",", "20", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b", ")", "+", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ")", "\n", "prob_th", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_th", "=", "torch", ".", "randn", "(", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "x", "=", "prob_th", "(", "A_th", ",", "b_th", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-10", "}", ")", "[", "0", "]", "\n", "\n", "def", "lstsq", "(", "\n", "A", ",", "\n", "b", ")", ":", "return", "torch", ".", "solve", "(", "\n", "(", "A_th", ".", "t", "(", ")", "@", "b_th", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "A_th", ".", "t", "(", ")", "@", "A_th", "+", "\n", "torch", ".", "eye", "(", "n", ")", ".", "double", "(", ")", ")", "[", "0", "]", "\n", "x_lstsq", "=", "lstsq", "(", "A_th", ",", "b_th", ")", "\n", "\n", "grad_A_cvxpy", ",", "grad_b_cvxpy", "=", "grad", "(", "x", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th", "]", ")", "\n", "grad_A_lstsq", ",", "grad_b_lstsq", "=", "grad", "(", "x_lstsq", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th", "]", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_A_cvxpy", "-", "\n", "grad_A_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_b_cvxpy", "-", "\n", "grad_b_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_logistic_regression": [[110, 145], ["test_cvxpylayer.set_seed", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.round", "numpy.round", "torch.from_numpy", "torch.from_numpy.requires_grad_", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.sum", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.autograd.gradcheck", "test_cvxpylayer.sigmoid", "torch.ones", "cvxpy.Minimize", "cvxpylayers.torch.CvxpyLayer.", "cvxpy.multiply", "cvxpy.log_sum_exp", "numpy.random.randn", "numpy.random.randn", "cvxpy.sum_squares", "cvxpy.hstack", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.sigmoid"], ["", "def", "test_logistic_regression", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "N", ",", "n", "=", "10", ",", "2", "\n", "X_np", "=", "np", ".", "random", ".", "randn", "(", "N", ",", "n", ")", "\n", "a_true", "=", "np", ".", "random", ".", "randn", "(", "n", ",", "1", ")", "\n", "y_np", "=", "np", ".", "round", "(", "sigmoid", "(", "X_np", "@", "a_true", "+", "np", ".", "random", ".", "randn", "(", "N", ",", "1", ")", "*", "0.5", ")", ")", "\n", "\n", "X_tch", "=", "torch", ".", "from_numpy", "(", "X_np", ")", "\n", "X_tch", ".", "requires_grad_", "(", "True", ")", "\n", "lam_tch", "=", "0.1", "*", "torch", ".", "ones", "(", "1", ",", "requires_grad", "=", "True", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "\n", "a", "=", "cp", ".", "Variable", "(", "(", "n", ",", "1", ")", ")", "\n", "X", "=", "cp", ".", "Parameter", "(", "(", "N", ",", "n", ")", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "y", "=", "y_np", "\n", "\n", "log_likelihood", "=", "cp", ".", "sum", "(", "\n", "cp", ".", "multiply", "(", "y", ",", "X", "@", "a", ")", "-", "\n", "cp", ".", "log_sum_exp", "(", "cp", ".", "hstack", "(", "[", "np", ".", "zeros", "(", "(", "N", ",", "1", ")", ")", ",", "X", "@", "a", "]", ")", ".", "T", ",", "axis", "=", "0", ",", "\n", "keepdims", "=", "True", ")", ".", "T", "\n", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "\n", "cp", ".", "Minimize", "(", "-", "log_likelihood", "+", "lam", "*", "cp", ".", "sum_squares", "(", "a", ")", ")", ")", "\n", "\n", "fit_logreg", "=", "CvxpyLayer", "(", "prob", ",", "[", "X", ",", "lam", "]", ",", "[", "a", "]", ")", "\n", "\n", "def", "layer_eps", "(", "*", "x", ")", ":", "\n", "            ", "return", "fit_logreg", "(", "*", "x", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-12", "}", ")", "\n", "\n", "", "torch", ".", "autograd", ".", "gradcheck", "(", "layer_eps", ",", "\n", "(", "X_tch", ",", "\n", "lam_tch", ")", ",", "\n", "eps", "=", "1e-4", ",", "\n", "atol", "=", "1e-3", ",", "\n", "rtol", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_entropy_maximization": [[146, 180], ["test_cvxpylayer.set_seed", "numpy.random.rand", "numpy.random.rand", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn.dot", "numpy.random.randn", "numpy.random.randn", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Maximize", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "map", "torch.autograd.gradcheck", "numpy.random.randn.dot", "numpy.random.rand", "numpy.random.rand", "cvxpy.sum", "torch.from_numpy().requires_grad_", "cvxpylayers.torch.CvxpyLayer.", "cvxpy.entr", "cvxpy.sum_squares", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "test_entropy_maximization", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n", ",", "m", ",", "p", "=", "5", ",", "3", ",", "2", "\n", "\n", "tmp", "=", "np", ".", "random", ".", "rand", "(", "n", ")", "\n", "A_np", "=", "np", ".", "random", ".", "randn", "(", "m", ",", "n", ")", "\n", "b_np", "=", "A_np", ".", "dot", "(", "tmp", ")", "\n", "F_np", "=", "np", ".", "random", ".", "randn", "(", "p", ",", "n", ")", "\n", "g_np", "=", "F_np", ".", "dot", "(", "tmp", ")", "+", "np", ".", "random", ".", "rand", "(", "p", ")", "\n", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "F", "=", "cp", ".", "Parameter", "(", "(", "p", ",", "n", ")", ")", "\n", "g", "=", "cp", ".", "Parameter", "(", "p", ")", "\n", "obj", "=", "cp", ".", "Maximize", "(", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "x", ")", ")", "-", ".01", "*", "cp", ".", "sum_squares", "(", "x", ")", ")", "\n", "constraints", "=", "[", "A", "*", "x", "==", "b", ",", "\n", "F", "*", "x", "<=", "g", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "constraints", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", ",", "F", ",", "g", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_tch", ",", "b_tch", ",", "F_tch", ",", "g_tch", "=", "map", "(", "\n", "lambda", "x", ":", "torch", ".", "from_numpy", "(", "x", ")", ".", "requires_grad_", "(", "True", ")", ",", "[", "\n", "A_np", ",", "b_np", ",", "F_np", ",", "g_np", "]", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "\n", "lambda", "*", "x", ":", "layer", "(", "*", "x", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-12", ",", "\n", "\"max_iters\"", ":", "10000", "}", ")", ",", "\n", "(", "A_tch", ",", "\n", "b_tch", ",", "\n", "F_tch", ",", "\n", "g_tch", ")", ",", "\n", "eps", "=", "1e-4", ",", "\n", "atol", "=", "1e-3", ",", "\n", "rtol", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_lml": [[181, 194], ["test_cvxpylayer.set_seed", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.DoubleTensor", "torch.DoubleTensor.requires_grad_", "torch.autograd.gradcheck", "cvxpy.sum", "cvxpy.Minimize", "cvxpy.sum", "cvxpy.entr", "cvxpy.sum", "cvxpy.entr"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "test_lml", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "1", ")", "\n", "k", "=", "2", "\n", "x", "=", "cp", ".", "Parameter", "(", "4", ")", "\n", "y", "=", "cp", ".", "Variable", "(", "4", ")", "\n", "obj", "=", "-", "x", "*", "y", "-", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "y", ")", ")", "-", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "1.", "-", "y", ")", ")", "\n", "cons", "=", "[", "cp", ".", "sum", "(", "y", ")", "==", "k", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ",", "cons", ")", "\n", "lml", "=", "CvxpyLayer", "(", "prob", ",", "[", "x", "]", ",", "[", "y", "]", ")", "\n", "\n", "x_th", "=", "torch", ".", "DoubleTensor", "(", "[", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", "]", ")", "\n", "x_th", ".", "requires_grad_", "(", "True", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lml", ",", "x_th", ",", "eps", "=", "1e-5", ",", "atol", "=", "1e-4", ",", "rtol", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_sdp": [[195, 224], ["test_cvxpylayer.set_seed", "cvxpy.Parameter", "torch.randn().double", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.autograd.gradcheck", "cvxpy.Parameter", "cvxpy.Parameter", "torch.randn().double", "torch.randn().double", "cvxpy.Minimize", "range", "range", "torch.randn", "range", "range", "cvxpy.trace", "range", "cvxpylayers.torch.CvxpyLayer.", "torch.randn", "torch.randn", "cvxpy.trace", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "test_sdp", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "2", ")", "\n", "\n", "n", "=", "3", "\n", "p", "=", "3", "\n", "C", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "n", ")", ")", "\n", "A", "=", "[", "cp", ".", "Parameter", "(", "(", "n", ",", "n", ")", ")", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "b", "=", "[", "cp", ".", "Parameter", "(", "(", "1", ",", "1", ")", ")", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "\n", "C_tch", "=", "torch", ".", "randn", "(", "n", ",", "n", ",", "requires_grad", "=", "True", ")", ".", "double", "(", ")", "\n", "A_tch", "=", "[", "torch", ".", "randn", "(", "n", ",", "n", ",", "requires_grad", "=", "True", ")", ".", "double", "(", ")", "\n", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "b_tch", "=", "[", "torch", ".", "randn", "(", "1", ",", "1", ",", "requires_grad", "=", "True", ")", ".", "double", "(", ")", "\n", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "\n", "X", "=", "cp", ".", "Variable", "(", "(", "n", ",", "n", ")", ",", "symmetric", "=", "True", ")", "\n", "constraints", "=", "[", "X", ">>", "0", "]", "\n", "constraints", "+=", "[", "\n", "cp", ".", "trace", "(", "A", "[", "i", "]", "@", "X", ")", "==", "b", "[", "i", "]", "for", "i", "in", "range", "(", "p", ")", "\n", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "trace", "(", "C", "@", "X", ")", "+", "cp", ".", "sum_squares", "(", "X", ")", ")", ",", "\n", "constraints", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "C", "]", "+", "A", "+", "b", ",", "[", "X", "]", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "*", "x", ":", "layer", "(", "*", "x", ",", "\n", "solver_args", "=", "{", "'eps'", ":", "1e-12", "}", ")", ",", "\n", "[", "C_tch", "]", "+", "A_tch", "+", "b_tch", ",", "\n", "eps", "=", "1e-6", ",", "\n", "atol", "=", "1e-3", ",", "\n", "rtol", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_not_enough_parameters": [[225, 233], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Problem", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.torch.CvxpyLayer", "cvxpy.norm", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "test_not_enough_parameters", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "lam2", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "objective", "=", "lam", "*", "cp", ".", "norm", "(", "x", ",", "1", ")", "+", "lam2", "*", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "lam", "]", ",", "[", "x", "]", ")", "# noqa: F841", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_not_enough_parameters_at_call_time": [[234, 245], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaisesRegex", "cvxpylayers.torch.CvxpyLayer.", "cvxpy.norm", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "", "def", "test_not_enough_parameters_at_call_time", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "lam2", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "objective", "=", "lam", "*", "cp", ".", "norm", "(", "x", ",", "1", ")", "+", "lam2", "*", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "lam", ",", "lam2", "]", ",", "[", "x", "]", ")", "# noqa: F841", "\n", "with", "self", ".", "assertRaisesRegex", "(", "\n", "ValueError", ",", "\n", "'A tensor must be provided for each CVXPY parameter.*'", ")", ":", "\n", "            ", "layer", "(", "lam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_too_many_variables": [[246, 254], ["cvxpy.Variable", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpy.norm", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.torch.CvxpyLayer"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "", "def", "test_too_many_variables", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "y", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "objective", "=", "lam", "*", "cp", ".", "norm", "(", "x", ",", "1", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "lam", "]", ",", "[", "x", ",", "y", "]", ")", "# noqa: F841", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_infeasible": [[255, 263], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.ones", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.torch.CvxpyLayer."], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "", "def", "test_infeasible", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "param", "=", "cp", ".", "Parameter", "(", "1", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "param", ")", ",", "[", "x", ">=", "1", ",", "x", "<=", "-", "1", "]", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "param", "]", ",", "[", "x", "]", ")", "\n", "param_tch", "=", "torch", ".", "ones", "(", "1", ")", "\n", "with", "self", ".", "assertRaises", "(", "diffcp", ".", "SolverError", ")", ":", "\n", "            ", "layer", "(", "param_tch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_unbounded": [[264, 272], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.ones", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.torch.CvxpyLayer."], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "", "def", "test_unbounded", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "param", "=", "cp", ".", "Parameter", "(", "1", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "x", ")", ",", "[", "x", "<=", "param", "]", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "param", "]", ",", "[", "x", "]", ")", "\n", "param_tch", "=", "torch", ".", "ones", "(", "1", ")", "\n", "with", "self", ".", "assertRaises", "(", "diffcp", ".", "SolverError", ")", ":", "\n", "            ", "layer", "(", "param_tch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_incorrect_parameter_shape": [[273, 307], ["test_cvxpylayer.set_seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "torch.randn().double().requires_grad_", "cvxpy.sum_squares", "cvxpy.sum_squares", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.torch.CvxpyLayer.", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.torch.CvxpyLayer.", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.torch.CvxpyLayer.", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.torch.CvxpyLayer.", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn().double", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "", "def", "test_incorrect_parameter_shape", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "m", ",", "n", "=", "100", ",", "20", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b", ")", "+", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ")", "\n", "prob_th", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_th", "=", "torch", ".", "randn", "(", "32", ",", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "20", ",", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n", "", "A_th", "=", "torch", ".", "randn", "(", "32", ",", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "32", ",", "2", "*", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n", "", "A_th", "=", "torch", ".", "randn", "(", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "2", "*", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n", "", "A_th", "=", "torch", ".", "randn", "(", "32", ",", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "32", ",", "32", ",", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_broadcasting": [[308, 347], ["test_cvxpylayer.set_seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.randn().double().requires_grad_", "torch.randn().double().unsqueeze().repeat().requires_grad_", "test_cvxpylayer.TestCvxpyLayer.test_least_squares.lstsq"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "", "def", "test_broadcasting", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n_batch", ",", "m", ",", "n", "=", "2", ",", "100", ",", "20", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b", ")", "+", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ")", "\n", "prob_th", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_th", "=", "torch", ".", "randn", "(", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "m", ")", ".", "double", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "n_batch", ",", "1", ")", ".", "requires_grad_", "(", ")", "\n", "b_th_0", "=", "b_th", "[", "0", "]", "\n", "\n", "x", "=", "prob_th", "(", "A_th", ",", "b_th", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-10", "}", ")", "[", "0", "]", "\n", "\n", "def", "lstsq", "(", "\n", "A", ",", "\n", "b", ")", ":", "return", "torch", ".", "solve", "(", "\n", "(", "A", ".", "t", "(", ")", "@", "b", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "A", ".", "t", "(", ")", "@", "A", "+", "\n", "torch", ".", "eye", "(", "n", ")", ".", "double", "(", ")", ")", "[", "0", "]", "\n", "x_lstsq", "=", "lstsq", "(", "A_th", ",", "b_th_0", ")", "\n", "\n", "grad_A_cvxpy", ",", "grad_b_cvxpy", "=", "grad", "(", "x", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th", "]", ")", "\n", "grad_A_lstsq", ",", "grad_b_lstsq", "=", "grad", "(", "x_lstsq", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th_0", "]", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_A_cvxpy", "/", "n_batch", "-", "\n", "grad_A_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_b_cvxpy", "[", "0", "]", "-", "\n", "grad_b_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_shared_parameter": [[348, 371], ["test_cvxpylayer.set_seed", "cvxpy.Parameter", "cvxpy.Variable", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.randn", "torch.autograd.gradcheck", "cvxpy.Minimize", "cvxpy.Minimize", "cvxpy.sum_squares", "cvxpy.sum_squares", "torch.cat", "cvxpylayers.torch.CvxpyLayer.", "cvxpylayers.torch.CvxpyLayer."], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "test_shared_parameter", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "m", ",", "n", "=", "10", ",", "5", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "b1", "=", "np", ".", "random", ".", "randn", "(", "m", ")", "\n", "b2", "=", "np", ".", "random", ".", "randn", "(", "m", ")", "\n", "prob1", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b1", ")", ")", ")", "\n", "layer1", "=", "CvxpyLayer", "(", "prob1", ",", "parameters", "=", "[", "A", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "prob2", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b2", ")", ")", ")", "\n", "layer2", "=", "CvxpyLayer", "(", "prob2", ",", "parameters", "=", "[", "A", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "\n", "A_tch", "=", "torch", ".", "randn", "(", "m", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "solver_args", "=", "{", "\n", "\"eps\"", ":", "1e-10", ",", "\n", "\"acceleration_lookback\"", ":", "0", ",", "\n", "\"max_iters\"", ":", "10000", "\n", "}", "\n", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "A", ":", "torch", ".", "cat", "(", "\n", "[", "layer1", "(", "A", ",", "solver_args", "=", "solver_args", ")", "[", "0", "]", ",", "\n", "layer2", "(", "A", ",", "solver_args", "=", "solver_args", ")", "[", "0", "]", "]", ")", ",", "(", "A_tch", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_equality": [[372, 385], ["test_cvxpylayer.set_seed", "numpy.eye", "numpy.eye", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpylayers.torch.CvxpyLayer", "torch.randn", "torch.autograd.gradcheck", "cvxpy.Minimize", "cvxpy.sum_squares", "[].sum", "cvxpylayers.torch.CvxpyLayer."], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "test_equality", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n", "=", "10", "\n", "A", "=", "np", ".", "eye", "(", "n", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "n", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "sum_squares", "(", "x", ")", ")", ",", "[", "A", "@", "x", "==", "b", "]", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "parameters", "=", "[", "b", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "b_tch", "=", "torch", ".", "randn", "(", "n", ",", "requires_grad", "=", "True", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "b", ":", "layer", "(", "\n", "b", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-10", ",", "\n", "\"acceleration_lookback\"", ":", "0", "}", ")", "[", "0", "]", ".", "sum", "(", ")", ",", "\n", "(", "b_tch", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.TestCvxpyLayer.test_basic_gp": [[386, 418], ["test_cvxpylayer.set_seed", "cvxpy.Variable", "cvxpy.Variable", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Problem", "cvxpy.Problem.solve", "cvxpylayers.torch.CvxpyLayer", "torch.tensor", "torch.tensor", "torch.tensor", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "torch.autograd.gradcheck", "cvxpy.Minimize", "torch.no_grad", "cvxpylayers.torch.CvxpyLayer.", "x_tch.detach().numpy", "y_tch.detach().numpy", "z_tch.detach().numpy", "[].sum", "x_tch.detach", "y_tch.detach", "z_tch.detach", "cvxpylayers.torch.CvxpyLayer."], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "test_basic_gp", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "\n", "x", "=", "cp", ".", "Variable", "(", "pos", "=", "True", ")", "\n", "y", "=", "cp", ".", "Variable", "(", "pos", "=", "True", ")", "\n", "z", "=", "cp", ".", "Variable", "(", "pos", "=", "True", ")", "\n", "\n", "a", "=", "cp", ".", "Parameter", "(", "pos", "=", "True", ",", "value", "=", "2.0", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "pos", "=", "True", ",", "value", "=", "1.0", ")", "\n", "c", "=", "cp", ".", "Parameter", "(", "value", "=", "0.5", ")", "\n", "\n", "objective_fn", "=", "1", "/", "(", "x", "*", "y", "*", "z", ")", "\n", "constraints", "=", "[", "a", "*", "(", "x", "*", "y", "+", "x", "*", "z", "+", "y", "*", "z", ")", "<=", "b", ",", "x", ">=", "y", "**", "c", "]", "\n", "problem", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective_fn", ")", ",", "constraints", ")", "\n", "problem", ".", "solve", "(", "cp", ".", "SCS", ",", "gp", "=", "True", ",", "eps", "=", "1e-12", ")", "\n", "\n", "layer", "=", "CvxpyLayer", "(", "\n", "problem", ",", "parameters", "=", "[", "a", ",", "b", ",", "c", "]", ",", "variables", "=", "[", "x", ",", "y", ",", "z", "]", ",", "gp", "=", "True", ")", "\n", "a_tch", "=", "torch", ".", "tensor", "(", "2.0", ",", "requires_grad", "=", "True", ")", "\n", "b_tch", "=", "torch", ".", "tensor", "(", "1.0", ",", "requires_grad", "=", "True", ")", "\n", "c_tch", "=", "torch", ".", "tensor", "(", "0.5", ",", "requires_grad", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x_tch", ",", "y_tch", ",", "z_tch", "=", "layer", "(", "a_tch", ",", "b_tch", ",", "c_tch", ")", "\n", "\n", "", "self", ".", "assertAlmostEqual", "(", "x", ".", "value", ",", "x_tch", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "y", ".", "value", ",", "y_tch", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "z", ".", "value", ",", "z_tch", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "a", ",", "b", ",", "c", ":", "layer", "(", "\n", "a", ",", "b", ",", "c", ",", "solver_args", "=", "{", "\n", "\"eps\"", ":", "1e-12", ",", "\"acceleration_lookback\"", ":", "0", "}", ")", "[", "0", "]", ".", "sum", "(", ")", ",", "\n", "(", "a_tch", ",", "b_tch", ",", "c_tch", ")", ",", "atol", "=", "1e-3", ",", "rtol", "=", "1e-3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed": [[15, 18], ["numpy.seed", "torch.manual_seed"], "function", ["None"], ["def", "set_seed", "(", "x", ")", ":", "\n", "    ", "npr", ".", "seed", "(", "x", ")", "\n", "torch", ".", "manual_seed", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.sigmoid": [[20, 22], ["numpy.exp"], "function", ["None"], ["", "def", "sigmoid", "(", "z", ")", ":", "\n", "    ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer.CvxpyLayer.__init__": [[57, 118], ["super().__init__", "cvxpy.reductions.solvers.conic_solvers.scs_conif.dims_to_solver_dict", "ValueError", "set().issubset", "ValueError", "ValueError", "ValueError", "problem.get_problem_data", "solving_chain.get", "problem.get_problem_data", "problem.is_dgp", "ValueError", "problem.is_dcp", "ValueError", "set", "set", "set", "isinstance", "isinstance", "isinstance", "isinstance", "problem.parameters", "set", "problem.variables", "ValueError"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer.__init__"], ["def", "__init__", "(", "self", ",", "problem", ",", "parameters", ",", "variables", ",", "gp", "=", "False", ")", ":", "\n", "        ", "\"\"\"Construct a CvxpyLayer\n\n        Args:\n          problem: The CVXPY problem; must be DPP.\n          parameters: A list of CVXPY Parameters in the problem; the order\n                      of the Parameters determines the order in which parameter\n                      values must be supplied in the forward pass. Must include\n                      every parameter involved in problem.\n          variables: A list of CVXPY Variables in the problem; the order of the\n                     Variables determines the order of the optimal variable\n                     values returned from the forward pass.\n          gp: Whether to parse the problem using DGP (True or False).\n        \"\"\"", "\n", "super", "(", "CvxpyLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gp", "=", "gp", "\n", "if", "self", ".", "gp", ":", "\n", "            ", "if", "not", "problem", ".", "is_dgp", "(", "dpp", "=", "True", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Problem must be DPP.'", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "problem", ".", "is_dcp", "(", "dpp", "=", "True", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Problem must be DPP.'", ")", "\n", "\n", "", "", "if", "not", "set", "(", "problem", ".", "parameters", "(", ")", ")", "==", "set", "(", "parameters", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The layer's parameters must exactly match \"", "\n", "\"problem.parameters\"", ")", "\n", "", "if", "not", "set", "(", "variables", ")", ".", "issubset", "(", "set", "(", "problem", ".", "variables", "(", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Argument variables must be a subset of \"", "\n", "\"problem.variables\"", ")", "\n", "", "if", "not", "isinstance", "(", "parameters", ",", "list", ")", "and", "not", "isinstance", "(", "parameters", ",", "tuple", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The layer's parameters must be provided as \"", "\n", "\"a list or tuple\"", ")", "\n", "", "if", "not", "isinstance", "(", "variables", ",", "list", ")", "and", "not", "isinstance", "(", "variables", ",", "tuple", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The layer's variables must be provided as \"", "\n", "\"a list or tuple\"", ")", "\n", "\n", "", "self", ".", "param_order", "=", "parameters", "\n", "self", ".", "variables", "=", "variables", "\n", "self", ".", "var_dict", "=", "{", "v", ".", "id", "for", "v", "in", "self", ".", "variables", "}", "\n", "\n", "# Construct compiler", "\n", "self", ".", "dgp2dcp", "=", "None", "\n", "\n", "if", "self", ".", "gp", ":", "\n", "            ", "for", "param", "in", "parameters", ":", "\n", "                ", "if", "param", ".", "value", "is", "None", ":", "\n", "                    ", "raise", "ValueError", "(", "\"An initial value for each parameter is \"", "\n", "\"required when gp=True.\"", ")", "\n", "", "", "data", ",", "solving_chain", ",", "_", "=", "problem", ".", "get_problem_data", "(", "\n", "solver", "=", "cp", ".", "SCS", ",", "gp", "=", "True", ")", "\n", "self", ".", "compiler", "=", "data", "[", "cp", ".", "settings", ".", "PARAM_PROB", "]", "\n", "self", ".", "dgp2dcp", "=", "solving_chain", ".", "get", "(", "cp", ".", "reductions", ".", "Dgp2Dcp", ")", "\n", "self", ".", "param_ids", "=", "[", "p", ".", "id", "for", "p", "in", "self", ".", "compiler", ".", "parameters", "]", "\n", "", "else", ":", "\n", "            ", "data", ",", "_", ",", "_", "=", "problem", ".", "get_problem_data", "(", "solver", "=", "cp", ".", "SCS", ")", "\n", "self", ".", "compiler", "=", "data", "[", "cp", ".", "settings", ".", "PARAM_PROB", "]", "\n", "self", ".", "param_ids", "=", "[", "p", ".", "id", "for", "p", "in", "self", ".", "param_order", "]", "\n", "", "self", ".", "cone_dims", "=", "dims_to_solver_dict", "(", "data", "[", "\"dims\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer.CvxpyLayer.forward": [[119, 155], ["cvxpylayer._CvxpyLayerFn", "_CvxpyLayerFn.", "len", "len", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer._CvxpyLayerFn"], ["", "def", "forward", "(", "self", ",", "*", "params", ",", "solver_args", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Solve problem (or a batch of problems) corresponding to `params`\n\n        Args:\n          params: a sequence of torch Tensors; the n-th Tensor specifies\n                  the value for the n-th CVXPY Parameter. These Tensors\n                  can be batched: if a Tensor has 3 dimensions, then its\n                  first dimension is interpreted as the batch size. These\n                  Tensors must all have the same dtype and device.\n          solver_args: a dict of optional arguments, to send to `diffcp`. Keys\n                       should be the names of keyword arguments.\n\n        Returns:\n          a list of optimal variable values, one for each CVXPY Variable\n          supplied to the constructor.\n        \"\"\"", "\n", "if", "len", "(", "params", ")", "!=", "len", "(", "self", ".", "param_ids", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'A tensor must be provided for each CVXPY '", "\n", "'parameter; received %d tensors, expected %d'", "%", "(", "\n", "len", "(", "params", ")", ",", "len", "(", "self", ".", "param_ids", ")", ")", ")", "\n", "", "info", "=", "{", "}", "\n", "f", "=", "_CvxpyLayerFn", "(", "\n", "param_order", "=", "self", ".", "param_order", ",", "\n", "param_ids", "=", "self", ".", "param_ids", ",", "\n", "variables", "=", "self", ".", "variables", ",", "\n", "var_dict", "=", "self", ".", "var_dict", ",", "\n", "compiler", "=", "self", ".", "compiler", ",", "\n", "cone_dims", "=", "self", ".", "cone_dims", ",", "\n", "gp", "=", "self", ".", "gp", ",", "\n", "dgp2dcp", "=", "self", ".", "dgp2dcp", ",", "\n", "solver_args", "=", "solver_args", ",", "\n", "info", "=", "info", ",", "\n", ")", "\n", "sol", "=", "f", "(", "*", "params", ")", "\n", "self", ".", "info", "=", "info", "\n", "return", "sol", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer.to_numpy": [[157, 160], ["x.cpu().detach().double().numpy", "x.cpu().detach().double", "x.cpu().detach", "x.cpu"], "function", ["None"], ["", "", "def", "to_numpy", "(", "x", ")", ":", "\n", "# convert torch tensor to numpy array", "\n", "    ", "return", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "double", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer.to_torch": [[162, 165], ["torch.from_numpy().type().to", "torch.from_numpy().type", "torch.from_numpy"], "function", ["None"], ["", "def", "to_torch", "(", "x", ",", "dtype", ",", "device", ")", ":", "\n", "# convert numpy array to torch tensor", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer._CvxpyLayerFn": [[167, 375], ["enumerate", "numpy.array", "numpy.any", "time.time", "range", "time.time", "range", "tuple", "range", "ctx.DT_batch", "time.time", "range", "tuple", "zip", "ctx.batch_sizes.append", "numpy.any", "zip", "compiler.apply_parameters", "As.append", "bs.append", "cs.append", "cone_dicts.append", "ctx.shapes.append", "time.time", "diffcp.solve_and_derivative_batch", "time.time", "compiler.split_solution", "enumerate", "torch.cat", "cvxpylayer.to_numpy", "zip", "dxs.append", "dys.append", "dss.append", "compiler.apply_param_jac", "enumerate", "torch.cat", "zip", "time.time", "enumerate", "ValueError", "ValueError", "p.ndimension", "numpy.all", "ValueError", "ValueError", "cvxpylayer.to_numpy", "cvxpylayer.to_numpy", "dict", "print", "range", "sol[].append", "s.squeeze", "torch.exp", "numpy.expand_dims", "compiler.split_adjoint", "numpy.zeros", "numpy.zeros", "range", "grad.append", "g.squeeze", "p.ndimension", "p.size", "ValueError", "torch.log", "zip", "zip", "len", "to_torch().unsqueeze", "zip", "len", "to_torch().unsqueeze", "zip", "grad[].sum", "ValueError", "str", "str", "str", "str", "p.ndimension", "cvxpylayer.to_torch", "cvxpylayer.to_torch"], "function", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer.to_numpy", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer.to_numpy", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer.to_numpy", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer.to_torch", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.cvxpylayer.to_torch"], ["", "def", "_CvxpyLayerFn", "(", "\n", "param_order", ",", "\n", "param_ids", ",", "\n", "variables", ",", "\n", "var_dict", ",", "\n", "compiler", ",", "\n", "cone_dims", ",", "\n", "gp", ",", "\n", "dgp2dcp", ",", "\n", "solver_args", ",", "\n", "info", ")", ":", "\n", "    ", "class", "_CvxpyLayerFnFn", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "params", ")", ":", "\n", "# infer dtype, device, and whether or not params are batched", "\n", "            ", "ctx", ".", "dtype", "=", "params", "[", "0", "]", ".", "dtype", "\n", "ctx", ".", "device", "=", "params", "[", "0", "]", ".", "device", "\n", "\n", "ctx", ".", "batch_sizes", "=", "[", "]", "\n", "for", "i", ",", "(", "p", ",", "q", ")", "in", "enumerate", "(", "zip", "(", "params", ",", "param_order", ")", ")", ":", "\n", "# check dtype, device of params", "\n", "                ", "if", "p", ".", "dtype", "!=", "ctx", ".", "dtype", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Two or more parameters have different dtypes. \"", "\n", "\"Expected parameter %d to have dtype %s but \"", "\n", "\"got dtype %s.\"", "%", "\n", "(", "i", ",", "str", "(", "ctx", ".", "dtype", ")", ",", "str", "(", "p", ".", "dtype", ")", ")", "\n", ")", "\n", "", "if", "p", ".", "device", "!=", "ctx", ".", "device", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Two or more parameters are on different devices. \"", "\n", "\"Expected parameter %d to be on device %s \"", "\n", "\"but got device %s.\"", "%", "\n", "(", "i", ",", "str", "(", "ctx", ".", "device", ")", ",", "str", "(", "p", ".", "device", ")", ")", "\n", ")", "\n", "\n", "# check and extract the batch size for the parameter", "\n", "# 0 means there is no batch dimension for this parameter", "\n", "# and we assume the batch dimension is non-zero", "\n", "", "if", "p", ".", "ndimension", "(", ")", "==", "q", ".", "ndim", ":", "\n", "                    ", "batch_size", "=", "0", "\n", "", "elif", "p", ".", "ndimension", "(", ")", "==", "q", ".", "ndim", "+", "1", ":", "\n", "                    ", "batch_size", "=", "p", ".", "size", "(", "0", ")", "\n", "if", "batch_size", "==", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "\"The batch dimension for parameter {} is zero \"", "\n", "\"but should be non-zero.\"", ".", "format", "(", "i", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Invalid parameter size passed in. Expected \"", "\n", "\"parameter {} to have have {} or {} dimensions \"", "\n", "\"but got {} dimensions\"", ".", "format", "(", "\n", "i", ",", "q", ".", "ndim", ",", "q", ".", "ndim", "+", "1", ",", "p", ".", "ndimension", "(", ")", ")", ")", "\n", "\n", "", "ctx", ".", "batch_sizes", ".", "append", "(", "batch_size", ")", "\n", "\n", "# validate the parameter shape", "\n", "p_shape", "=", "p", ".", "shape", "if", "batch_size", "==", "0", "else", "p", ".", "shape", "[", "1", ":", "]", "\n", "if", "not", "np", ".", "all", "(", "p_shape", "==", "param_order", "[", "i", "]", ".", "shape", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Inconsistent parameter shapes passed in. \"", "\n", "\"Expected parameter {} to have non-batched shape of \"", "\n", "\"{} but got {}.\"", ".", "format", "(", "\n", "i", ",", "\n", "q", ".", "shape", ",", "\n", "p", ".", "shape", ")", ")", "\n", "\n", "", "", "ctx", ".", "batch_sizes", "=", "np", ".", "array", "(", "ctx", ".", "batch_sizes", ")", "\n", "ctx", ".", "batch", "=", "np", ".", "any", "(", "ctx", ".", "batch_sizes", ">", "0", ")", "\n", "\n", "if", "ctx", ".", "batch", ":", "\n", "                ", "nonzero_batch_sizes", "=", "ctx", ".", "batch_sizes", "[", "ctx", ".", "batch_sizes", ">", "0", "]", "\n", "ctx", ".", "batch_size", "=", "nonzero_batch_sizes", "[", "0", "]", "\n", "if", "np", ".", "any", "(", "nonzero_batch_sizes", "!=", "ctx", ".", "batch_size", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Inconsistent batch sizes passed in. Expected \"", "\n", "\"parameters to have no batch size or all the same \"", "\n", "\"batch size but got sizes: {}.\"", ".", "format", "(", "\n", "ctx", ".", "batch_sizes", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "batch_size", "=", "1", "\n", "\n", "", "if", "gp", ":", "\n", "                ", "ctx", ".", "params", "=", "params", "\n", "ctx", ".", "old_params_to_new_params", "=", "(", "\n", "dgp2dcp", ".", "canon_methods", ".", "_parameters", "\n", ")", "\n", "param_map", "=", "{", "}", "\n", "# construct a list of params for the DCP problem", "\n", "for", "param", ",", "value", "in", "zip", "(", "param_order", ",", "params", ")", ":", "\n", "                    ", "if", "param", "in", "ctx", ".", "old_params_to_new_params", ":", "\n", "                        ", "new_id", "=", "ctx", ".", "old_params_to_new_params", "[", "param", "]", ".", "id", "\n", "param_map", "[", "new_id", "]", "=", "torch", ".", "log", "(", "value", ")", "\n", "", "else", ":", "\n", "                        ", "new_id", "=", "param", ".", "id", "\n", "param_map", "[", "new_id", "]", "=", "value", "\n", "", "", "params_numpy", "=", "[", "to_numpy", "(", "param_map", "[", "pid", "]", ")", "for", "pid", "in", "param_ids", "]", "\n", "", "else", ":", "\n", "                ", "params_numpy", "=", "[", "to_numpy", "(", "p", ")", "for", "p", "in", "params", "]", "\n", "\n", "# canonicalize problem", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "As", ",", "bs", ",", "cs", ",", "cone_dicts", ",", "ctx", ".", "shapes", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "ctx", ".", "batch_size", ")", ":", "\n", "                ", "params_numpy_i", "=", "[", "\n", "p", "if", "sz", "==", "0", "else", "p", "[", "i", "]", "\n", "for", "p", ",", "sz", "in", "zip", "(", "params_numpy", ",", "ctx", ".", "batch_sizes", ")", "]", "\n", "c", ",", "_", ",", "neg_A", ",", "b", "=", "compiler", ".", "apply_parameters", "(", "\n", "dict", "(", "zip", "(", "param_ids", ",", "params_numpy_i", ")", ")", ",", "\n", "keep_zeros", "=", "True", ")", "\n", "A", "=", "-", "neg_A", "# cvxpy canonicalizes -A", "\n", "As", ".", "append", "(", "A", ")", "\n", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "c", ")", "\n", "cone_dicts", ".", "append", "(", "cone_dims", ")", "\n", "ctx", ".", "shapes", ".", "append", "(", "A", ".", "shape", ")", "\n", "", "info", "[", "'canon_time'", "]", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "# compute solution and derivative function", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "                ", "xs", ",", "_", ",", "_", ",", "_", ",", "ctx", ".", "DT_batch", "=", "diffcp", ".", "solve_and_derivative_batch", "(", "\n", "As", ",", "bs", ",", "cs", ",", "cone_dicts", ",", "**", "solver_args", ")", "\n", "", "except", "diffcp", ".", "SolverError", "as", "e", ":", "\n", "                ", "print", "(", "\n", "\"Please consider re-formulating your problem so that \"", "\n", "\"it is always solvable or increasing the number of \"", "\n", "\"solver iterations.\"", ")", "\n", "raise", "e", "\n", "", "info", "[", "'solve_time'", "]", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "# extract solutions and append along batch dimension", "\n", "sol", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "variables", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "ctx", ".", "batch_size", ")", ":", "\n", "                ", "sltn_dict", "=", "compiler", ".", "split_solution", "(", "\n", "xs", "[", "i", "]", ",", "active_vars", "=", "var_dict", ")", "\n", "for", "j", ",", "v", "in", "enumerate", "(", "variables", ")", ":", "\n", "                    ", "sol", "[", "j", "]", ".", "append", "(", "to_torch", "(", "\n", "sltn_dict", "[", "v", ".", "id", "]", ",", "ctx", ".", "dtype", ",", "ctx", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "", "sol", "=", "[", "torch", ".", "cat", "(", "s", ",", "0", ")", "for", "s", "in", "sol", "]", "\n", "\n", "if", "not", "ctx", ".", "batch", ":", "\n", "                ", "sol", "=", "[", "s", ".", "squeeze", "(", "0", ")", "for", "s", "in", "sol", "]", "\n", "\n", "", "if", "gp", ":", "\n", "                ", "sol", "=", "[", "torch", ".", "exp", "(", "s", ")", "for", "s", "in", "sol", "]", "\n", "ctx", ".", "sol", "=", "sol", "\n", "\n", "", "return", "tuple", "(", "sol", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "dvars", ")", ":", "\n", "            ", "if", "gp", ":", "\n", "# derivative of exponential recovery transformation", "\n", "                ", "dvars", "=", "[", "dvar", "*", "s", "for", "dvar", ",", "s", "in", "zip", "(", "dvars", ",", "ctx", ".", "sol", ")", "]", "\n", "\n", "", "dvars_numpy", "=", "[", "to_numpy", "(", "dvar", ")", "for", "dvar", "in", "dvars", "]", "\n", "\n", "if", "not", "ctx", ".", "batch", ":", "\n", "                ", "dvars_numpy", "=", "[", "np", ".", "expand_dims", "(", "dvar", ",", "0", ")", "for", "dvar", "in", "dvars_numpy", "]", "\n", "\n", "# differentiate from cvxpy variables to cone problem data", "\n", "", "dxs", ",", "dys", ",", "dss", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "ctx", ".", "batch_size", ")", ":", "\n", "                ", "del_vars", "=", "{", "}", "\n", "for", "v", ",", "dv", "in", "zip", "(", "variables", ",", "[", "dv", "[", "i", "]", "for", "dv", "in", "dvars_numpy", "]", ")", ":", "\n", "                    ", "del_vars", "[", "v", ".", "id", "]", "=", "dv", "\n", "", "dxs", ".", "append", "(", "compiler", ".", "split_adjoint", "(", "del_vars", ")", ")", "\n", "dys", ".", "append", "(", "np", ".", "zeros", "(", "ctx", ".", "shapes", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "dss", ".", "append", "(", "np", ".", "zeros", "(", "ctx", ".", "shapes", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "dAs", ",", "dbs", ",", "dcs", "=", "ctx", ".", "DT_batch", "(", "dxs", ",", "dys", ",", "dss", ")", "\n", "\n", "# differentiate from cone problem data to cvxpy parameters", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "grad", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "param_ids", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "ctx", ".", "batch_size", ")", ":", "\n", "                ", "del_param_dict", "=", "compiler", ".", "apply_param_jac", "(", "\n", "dcs", "[", "i", "]", ",", "-", "dAs", "[", "i", "]", ",", "dbs", "[", "i", "]", ")", "\n", "for", "j", ",", "pid", "in", "enumerate", "(", "param_ids", ")", ":", "\n", "                    ", "grad", "[", "j", "]", "+=", "[", "to_torch", "(", "del_param_dict", "[", "pid", "]", ",", "\n", "ctx", ".", "dtype", ",", "ctx", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "]", "\n", "", "", "grad", "=", "[", "torch", ".", "cat", "(", "g", ",", "0", ")", "for", "g", "in", "grad", "]", "\n", "\n", "if", "gp", ":", "\n", "# differentiate through the log transformation of params", "\n", "                ", "dcp_grad", "=", "grad", "\n", "grad", "=", "[", "]", "\n", "dparams", "=", "{", "pid", ":", "g", "for", "pid", ",", "g", "in", "zip", "(", "param_ids", ",", "dcp_grad", ")", "}", "\n", "for", "param", ",", "value", "in", "zip", "(", "param_order", ",", "ctx", ".", "params", ")", ":", "\n", "                    ", "g", "=", "0.0", "if", "param", ".", "id", "not", "in", "dparams", "else", "dparams", "[", "param", ".", "id", "]", "\n", "if", "param", "in", "ctx", ".", "old_params_to_new_params", ":", "\n", "                        ", "dcp_param_id", "=", "ctx", ".", "old_params_to_new_params", "[", "param", "]", ".", "id", "\n", "# new_param.value == log(param), apply chain rule", "\n", "g", "+=", "(", "1.0", "/", "value", ")", "*", "dparams", "[", "dcp_param_id", "]", "\n", "", "grad", ".", "append", "(", "g", ")", "\n", "", "", "info", "[", "'dcanon_time'", "]", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "if", "not", "ctx", ".", "batch", ":", "\n", "                ", "grad", "=", "[", "g", ".", "squeeze", "(", "0", ")", "for", "g", "in", "grad", "]", "\n", "", "else", ":", "\n", "                ", "for", "i", ",", "sz", "in", "enumerate", "(", "ctx", ".", "batch_sizes", ")", ":", "\n", "                    ", "if", "sz", "==", "0", ":", "\n", "                        ", "grad", "[", "i", "]", "=", "grad", "[", "i", "]", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "", "", "", "return", "tuple", "(", "grad", ")", "\n", "\n", "", "", "return", "_CvxpyLayerFnFn", ".", "apply", "\n", "", ""]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.latexify.latexify": [[8, 56], ["matplotlib.rcParams.update", "print", "math.sqrt"], "function", ["None"], ["def", "latexify", "(", "fig_width", "=", "None", ",", "fig_height", "=", "None", ",", "columns", "=", "1", ")", ":", "\n", "    ", "\"\"\"Set up matplotlib's RC params for LaTeX plotting.\n    Call this before plotting a figure.\n    Parameters\n    ----------\n    fig_width : float, optional, inches\n    fig_height : float,  optional, inches\n    columns : {1, 2}\n    \"\"\"", "\n", "\n", "# code adapted from http://www.scipy.org/Cookbook/Matplotlib/LaTeX_Examples", "\n", "\n", "# Width and max height in inches for IEEE journals taken from", "\n", "# computer.org/cms/Computer.org/Journal%20templates/transactions_art_guide.pdf", "\n", "\n", "assert", "(", "columns", "in", "[", "1", ",", "2", "]", ")", "\n", "\n", "if", "fig_width", "is", "None", ":", "\n", "        ", "fig_width", "=", "3.39", "if", "columns", "==", "1", "else", "6.9", "# width in inches", "\n", "\n", "", "if", "fig_height", "is", "None", ":", "\n", "        ", "golden_mean", "=", "(", "sqrt", "(", "5", ")", "-", "1.0", ")", "/", "2.0", "# Aesthetic ratio", "\n", "fig_height", "=", "fig_width", "*", "golden_mean", "# height in inches", "\n", "\n", "", "MAX_HEIGHT_INCHES", "=", "8.0", "\n", "if", "fig_height", ">", "MAX_HEIGHT_INCHES", ":", "\n", "        ", "print", "(", "\"WARNING: fig_height too large:\"", "+", "fig_height", "+", "\n", "\"so will reduce to\"", "+", "MAX_HEIGHT_INCHES", "+", "\"inches.\"", ")", "\n", "fig_height", "=", "MAX_HEIGHT_INCHES", "\n", "\n", "# NB (bart): default font-size in latex is 11. This should exactly match ", "\n", "# the font size in the text if the figwidth is set appropriately.", "\n", "# Note that this does not hold if you put two figures next to each other using", "\n", "# minipage. You need to use subplots.", "\n", "", "params", "=", "{", "'backend'", ":", "'ps'", ",", "\n", "'text.latex.preamble'", ":", "[", "'\\\\usepackage{gensymb}'", "]", ",", "\n", "'axes.labelsize'", ":", "8", ",", "# fontsize for x and y labels (was 12 and before 10)", "\n", "'axes.titlesize'", ":", "8", ",", "\n", "'font.size'", ":", "8", ",", "# was 12 and before 10", "\n", "'legend.fontsize'", ":", "8", ",", "# was 12 and before 10", "\n", "'xtick.labelsize'", ":", "8", ",", "\n", "'ytick.labelsize'", ":", "8", ",", "\n", "'text.usetex'", ":", "True", ",", "\n", "'figure.figsize'", ":", "[", "fig_width", ",", "fig_height", "]", ",", "\n", "'font.family'", ":", "'serif'", "\n", "}", "\n", "\n", "matplotlib", ".", "rcParams", ".", "update", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.latexify.format_axes": [[58, 74], ["ax.xaxis.set_ticks_position", "ax.yaxis.set_ticks_position", "ax.spines[].set_visible", "ax.spines[].set_color", "ax.spines[].set_linewidth", "axis.set_tick_params"], "function", ["None"], ["", "def", "format_axes", "(", "ax", ")", ":", "\n", "\n", "    ", "for", "spine", "in", "[", "'top'", ",", "'right'", "]", ":", "\n", "        ", "ax", ".", "spines", "[", "spine", "]", ".", "set_visible", "(", "False", ")", "\n", "\n", "", "for", "spine", "in", "[", "'left'", ",", "'bottom'", "]", ":", "\n", "        ", "ax", ".", "spines", "[", "spine", "]", ".", "set_color", "(", "SPINE_COLOR", ")", "\n", "ax", ".", "spines", "[", "spine", "]", ".", "set_linewidth", "(", "0.5", ")", "\n", "\n", "", "ax", ".", "xaxis", ".", "set_ticks_position", "(", "'bottom'", ")", "\n", "ax", ".", "yaxis", ".", "set_ticks_position", "(", "'left'", ")", "\n", "\n", "for", "axis", "in", "[", "ax", ".", "xaxis", ",", "ax", ".", "yaxis", "]", ":", "\n", "        ", "axis", ".", "set_tick_params", "(", "direction", "=", "'out'", ",", "color", "=", "SPINE_COLOR", ")", "\n", "\n", "", "return", "ax", "\n", "", ""]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.algorithms.fit": [[9, 47], ["torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "opt.", "range", "train_losses.append", "torch.no_grad", "val_losses.append", "print", "opt.zero_grad", "loss", "loss.backward", "opt.step", "train_losses[].append", "loss().item", "loss.item", "print", "callback", "loss", "len", "numpy.mean"], "function", ["None"], ["def", "fit", "(", "loss", ",", "params", ",", "X", ",", "Y", ",", "Xval", ",", "Yval", ",", "opt", ",", "opt_kwargs", "=", "{", "\"lr\"", ":", "1e-3", "}", ",", "batch_size", "=", "128", ",", "epochs", "=", "100", ",", "verbose", "=", "False", ",", "callback", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    Arguments:\n        loss: given x and y in batched form, evaluates loss.\n        params: list of parameters to optimize.\n        X: input data, torch tensor.\n        Y: output data, torch tensor.\n        Xval: input validation data, torch tensor.\n        Yval: output validation data, torch tensor.\n    \"\"\"", "\n", "\n", "train_dset", "=", "TensorDataset", "(", "X", ",", "Y", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_dset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "opt", "=", "opt", "(", "params", ",", "**", "opt_kwargs", ")", "\n", "\n", "train_losses", "=", "[", "]", "\n", "val_losses", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "val_losses", ".", "append", "(", "loss", "(", "Xval", ",", "Yval", ")", ".", "item", "(", ")", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "\"%03d | %3.5f\"", "%", "(", "epoch", "+", "1", ",", "val_losses", "[", "-", "1", "]", ")", ")", "\n", "", "batch", "=", "1", "\n", "train_losses", ".", "append", "(", "[", "]", ")", "\n", "for", "Xbatch", ",", "Ybatch", "in", "train_loader", ":", "\n", "            ", "opt", ".", "zero_grad", "(", ")", "\n", "l", "=", "loss", "(", "Xbatch", ",", "Ybatch", ")", "\n", "l", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "train_losses", "[", "-", "1", "]", ".", "append", "(", "l", ".", "item", "(", ")", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"batch %03d / %03d | %3.5f\"", "%", "\n", "(", "batch", ",", "len", "(", "train_loader", ")", ",", "np", ".", "mean", "(", "train_losses", "[", "-", "1", "]", ")", ")", ")", "\n", "", "batch", "+=", "1", "\n", "if", "callback", "is", "not", "None", ":", "\n", "                ", "callback", "(", ")", "\n", "", "", "", "return", "val_losses", ",", "train_losses", "\n", "", ""]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_docstring_example": [[43, 73], ["numpy.random.seed", "tensorflow.random.set_seed", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Minimize", "cvxpy.Problem", "cvxpy.Problem.is_dpp", "cvxpylayers.tensorflow.CvxpyLayer", "tensorflow.Variable", "tensorflow.Variable", "tape.gradient", "test_cvxpylayer.numerical_grad", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.GradientTape", "cvxpylayers.tensorflow.CvxpyLayer.", "tensorflow.math.reduce_sum", "cvxpy.Problem.solve", "numpy.sum", "cvxpy.pnorm"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.numerical_grad"], ["# compute the gradient of the sum of the solution with respect to A, b", "\n", "solution", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "\n", "", "def", "test_simple_batch_socp", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n", "=", "5", "\n", "m", "=", "1", "\n", "batch_size", "=", "4", "\n", "\n", "P_sqrt", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "n", ")", ",", "name", "=", "'P_sqrt'", ")", "\n", "q", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "1", ")", ",", "name", "=", "'q'", ")", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ",", "name", "=", "'A'", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "1", ")", ",", "name", "=", "'b'", ")", "\n", "\n", "x", "=", "cp", ".", "Variable", "(", "(", "n", ",", "1", ")", ",", "name", "=", "'x'", ")", "\n", "\n", "objective", "=", "0.5", "*", "cp", ".", "sum_squares", "(", "P_sqrt", "@", "x", ")", "+", "q", ".", "T", "@", "x", "\n", "constraints", "=", "[", "A", "@", "x", "==", "b", ",", "cp", ".", "norm", "(", "x", ")", "<=", "1", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ",", "constraints", ")", "\n", "\n", "prob_tch", "=", "CvxpyLayer", "(", "prob", ",", "[", "P_sqrt", ",", "q", ",", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "P_sqrt_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "n", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "q_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "n", ",", "1", ",", "requires_grad", "=", "True", ")", "\n", "A_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "m", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "b_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "m", ",", "1", ",", "requires_grad", "=", "True", ")", "\n", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "prob_tch", ",", "(", "P_sqrt_tch", ",", "q_tch", ",", "A_tch", ",", "b_tch", ")", ")", "\n", "\n", "", "def", "test_least_squares", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_simple_qp": [[74, 116], ["numpy.random.seed", "tensorflow.random.set_seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "cvxpylayers.tensorflow.CvxpyLayer", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.squeeze", "tape.gradient", "tensorflow.random.normal.numpy", "tensorflow.squeeze.numpy", "cvxpy.Problem.solve", "test_cvxpylayer.TestCvxpyLayer.assertEqual", "numpy.testing.assert_almost_equal", "test_cvxpylayer.numerical_grad", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "tensorflow.GradientTape", "tape.watch", "tape.watch", "cvxpylayers.tensorflow.CvxpyLayer.", "cvxpy.Variable.name", "len", "len", "cvxpy.Problem.solve", "numpy.sum", "cvxpy.sum_squares", "tensorflow.matmul", "cvxpylayers.tensorflow.CvxpyLayer.values", "cvxpy.Problem.variables", "list", "cvxpylayers.tensorflow.CvxpyLayer.values"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.numerical_grad"], ["m", ",", "n", "=", "100", ",", "20", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b", ")", "+", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ")", "\n", "prob_th", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_th", "=", "torch", ".", "randn", "(", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "x", "=", "prob_th", "(", "A_th", ",", "b_th", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-10", "}", ")", "[", "0", "]", "\n", "\n", "def", "lstsq", "(", "\n", "A", ",", "\n", "b", ")", ":", "return", "torch", ".", "solve", "(", "\n", "(", "A_th", ".", "t", "(", ")", "@", "b_th", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "A_th", ".", "t", "(", ")", "@", "A_th", "+", "\n", "torch", ".", "eye", "(", "n", ")", ".", "double", "(", ")", ")", "[", "0", "]", "\n", "x_lstsq", "=", "lstsq", "(", "A_th", ",", "b_th", ")", "\n", "\n", "grad_A_cvxpy", ",", "grad_b_cvxpy", "=", "grad", "(", "x", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th", "]", ")", "\n", "grad_A_lstsq", ",", "grad_b_lstsq", "=", "grad", "(", "x_lstsq", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th", "]", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_A_cvxpy", "-", "\n", "grad_A_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_b_cvxpy", "-", "\n", "grad_b_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "\n", "", "def", "test_logistic_regression", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "N", ",", "n", "=", "10", ",", "2", "\n", "X_np", "=", "np", ".", "random", ".", "randn", "(", "N", ",", "n", ")", "\n", "a_true", "=", "np", ".", "random", ".", "randn", "(", "n", ",", "1", ")", "\n", "y_np", "=", "np", ".", "round", "(", "sigmoid", "(", "X_np", "@", "a_true", "+", "np", ".", "random", ".", "randn", "(", "N", ",", "1", ")", "*", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_simple_qp_with_solver_args": [[117, 159], ["numpy.random.seed", "tensorflow.random.set_seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "cvxpylayers.tensorflow.CvxpyLayer", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.squeeze", "tape.gradient", "tensorflow.random.normal.numpy", "tensorflow.squeeze.numpy", "cvxpy.Problem.solve", "test_cvxpylayer.TestCvxpyLayer.assertEqual", "numpy.testing.assert_almost_equal", "test_cvxpylayer.numerical_grad", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "tensorflow.GradientTape", "tape.watch", "tape.watch", "cvxpylayers.tensorflow.CvxpyLayer.", "cvxpy.Variable.name", "len", "len", "cvxpy.Problem.solve", "numpy.sum", "cvxpy.sum_squares", "tensorflow.matmul", "cvxpylayers.tensorflow.CvxpyLayer.values", "cvxpy.Problem.variables", "list", "cvxpylayers.tensorflow.CvxpyLayer.values"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.numerical_grad"], ["X_tch", "=", "torch", ".", "from_numpy", "(", "X_np", ")", "\n", "X_tch", ".", "requires_grad_", "(", "True", ")", "\n", "lam_tch", "=", "0.1", "*", "torch", ".", "ones", "(", "1", ",", "requires_grad", "=", "True", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "\n", "a", "=", "cp", ".", "Variable", "(", "(", "n", ",", "1", ")", ")", "\n", "X", "=", "cp", ".", "Parameter", "(", "(", "N", ",", "n", ")", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "y", "=", "y_np", "\n", "\n", "log_likelihood", "=", "cp", ".", "sum", "(", "\n", "cp", ".", "multiply", "(", "y", ",", "X", "@", "a", ")", "-", "\n", "cp", ".", "log_sum_exp", "(", "cp", ".", "hstack", "(", "[", "np", ".", "zeros", "(", "(", "N", ",", "1", ")", ")", ",", "X", "@", "a", "]", ")", ".", "T", ",", "axis", "=", "0", ",", "\n", "keepdims", "=", "True", ")", ".", "T", "\n", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "\n", "cp", ".", "Minimize", "(", "-", "log_likelihood", "+", "lam", "*", "cp", ".", "sum_squares", "(", "a", ")", ")", ")", "\n", "\n", "fit_logreg", "=", "CvxpyLayer", "(", "prob", ",", "[", "X", ",", "lam", "]", ",", "[", "a", "]", ")", "\n", "\n", "def", "layer_eps", "(", "*", "x", ")", ":", "\n", "            ", "return", "fit_logreg", "(", "*", "x", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-12", "}", ")", "\n", "\n", "", "torch", ".", "autograd", ".", "gradcheck", "(", "layer_eps", ",", "\n", "(", "X_tch", ",", "\n", "lam_tch", ")", ",", "\n", "eps", "=", "1e-4", ",", "\n", "atol", "=", "1e-3", ",", "\n", "rtol", "=", "1e-3", ")", "\n", "\n", "", "def", "test_entropy_maximization", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n", ",", "m", ",", "p", "=", "5", ",", "3", ",", "2", "\n", "\n", "tmp", "=", "np", ".", "random", ".", "rand", "(", "n", ")", "\n", "A_np", "=", "np", ".", "random", ".", "randn", "(", "m", ",", "n", ")", "\n", "b_np", "=", "A_np", ".", "dot", "(", "tmp", ")", "\n", "F_np", "=", "np", ".", "random", ".", "randn", "(", "p", ",", "n", ")", "\n", "g_np", "=", "F_np", ".", "dot", "(", "tmp", ")", "+", "np", ".", "random", ".", "rand", "(", "p", ")", "\n", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "F", "=", "cp", ".", "Parameter", "(", "(", "p", ",", "n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_simple_qp_batched": [[160, 207], ["numpy.random.seed", "tensorflow.random.set_seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "cvxpylayers.tensorflow.CvxpyLayer", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.random.normal", "tensorflow.squeeze", "tape.gradient", "zip", "tensorflow.GradientTape", "tape.watch", "tape.watch", "cvxpylayers.tensorflow.CvxpyLayer.", "cvxpy.Variable.name", "tensorflow.squeeze().numpy", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze().numpy", "tensorflow.squeeze().numpy", "tensorflow.random.normal.numpy", "tensorflow.squeeze.numpy", "cvxpy.Problem.solve", "numpy.testing.assert_almost_equal", "test_cvxpylayer.numerical_grad", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "cvxpy.sum_squares", "tensorflow.tensordot", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.split", "cvxpy.Problem.solve", "numpy.sum", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.numerical_grad"], ["g", "=", "cp", ".", "Parameter", "(", "p", ")", "\n", "obj", "=", "cp", ".", "Maximize", "(", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "x", ")", ")", "-", ".01", "*", "cp", ".", "sum_squares", "(", "x", ")", ")", "\n", "constraints", "=", "[", "A", "*", "x", "==", "b", ",", "\n", "F", "*", "x", "<=", "g", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "constraints", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", ",", "F", ",", "g", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_tch", ",", "b_tch", ",", "F_tch", ",", "g_tch", "=", "map", "(", "\n", "lambda", "x", ":", "torch", ".", "from_numpy", "(", "x", ")", ".", "requires_grad_", "(", "True", ")", ",", "[", "\n", "A_np", ",", "b_np", ",", "F_np", ",", "g_np", "]", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "\n", "lambda", "*", "x", ":", "layer", "(", "*", "x", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-12", ",", "\n", "\"max_iters\"", ":", "10000", "}", ")", ",", "\n", "(", "A_tch", ",", "\n", "b_tch", ",", "\n", "F_tch", ",", "\n", "g_tch", ")", ",", "\n", "eps", "=", "1e-4", ",", "\n", "atol", "=", "1e-3", ",", "\n", "rtol", "=", "1e-3", ")", "\n", "\n", "", "def", "test_lml", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "1", ")", "\n", "k", "=", "2", "\n", "x", "=", "cp", ".", "Parameter", "(", "4", ")", "\n", "y", "=", "cp", ".", "Variable", "(", "4", ")", "\n", "obj", "=", "-", "x", "*", "y", "-", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "y", ")", ")", "-", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "1.", "-", "y", ")", ")", "\n", "cons", "=", "[", "cp", ".", "sum", "(", "y", ")", "==", "k", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ",", "cons", ")", "\n", "lml", "=", "CvxpyLayer", "(", "prob", ",", "[", "x", "]", ",", "[", "y", "]", ")", "\n", "\n", "x_th", "=", "torch", ".", "DoubleTensor", "(", "[", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", "]", ")", "\n", "x_th", ".", "requires_grad_", "(", "True", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lml", ",", "x_th", ",", "eps", "=", "1e-5", ",", "atol", "=", "1e-4", ",", "rtol", "=", "1e-4", ")", "\n", "\n", "", "def", "test_sdp", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "2", ")", "\n", "\n", "n", "=", "3", "\n", "p", "=", "3", "\n", "C", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "n", ")", ")", "\n", "A", "=", "[", "cp", ".", "Parameter", "(", "(", "n", ",", "n", ")", ")", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "b", "=", "[", "cp", ".", "Parameter", "(", "(", "1", ",", "1", ")", ")", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "\n", "C_tch", "=", "torch", ".", "randn", "(", "n", ",", "n", ",", "requires_grad", "=", "True", ")", ".", "double", "(", ")", "\n", "A_tch", "=", "[", "torch", ".", "randn", "(", "n", ",", "n", ",", "requires_grad", "=", "True", ")", ".", "double", "(", ")", "\n", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "b_tch", "=", "[", "torch", ".", "randn", "(", "1", ",", "1", ",", "requires_grad", "=", "True", ")", ".", "double", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_logistic_regression": [[208, 249], ["numpy.random.seed", "numpy.random.randn", "numpy.random.randn", "numpy.round", "tensorflow.Variable", "tensorflow.Variable", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.sum", "cvxpy.Problem", "cvxpylayers.tensorflow.CvxpyLayer", "tape.gradient", "test_cvxpylayer.numerical_grad", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "test_cvxpylayer.TestCvxpyLayer.test_logistic_regression.sigmoid"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.numerical_grad", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.sigmoid"], ["for", "_", "in", "range", "(", "p", ")", "]", "\n", "\n", "X", "=", "cp", ".", "Variable", "(", "(", "n", ",", "n", ")", ",", "symmetric", "=", "True", ")", "\n", "constraints", "=", "[", "X", ">>", "0", "]", "\n", "constraints", "+=", "[", "\n", "cp", ".", "trace", "(", "A", "[", "i", "]", "@", "X", ")", "==", "b", "[", "i", "]", "for", "i", "in", "range", "(", "p", ")", "\n", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "trace", "(", "C", "@", "X", ")", "+", "cp", ".", "sum_squares", "(", "X", ")", ")", ",", "\n", "constraints", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "C", "]", "+", "A", "+", "b", ",", "[", "X", "]", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "*", "x", ":", "layer", "(", "*", "x", ",", "\n", "solver_args", "=", "{", "'eps'", ":", "1e-12", "}", ")", ",", "\n", "[", "C_tch", "]", "+", "A_tch", "+", "b_tch", ",", "\n", "eps", "=", "1e-6", ",", "\n", "atol", "=", "1e-3", ",", "\n", "rtol", "=", "1e-3", ")", "\n", "\n", "", "def", "test_not_enough_parameters", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "lam2", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "objective", "=", "lam", "*", "cp", ".", "norm", "(", "x", ",", "1", ")", "+", "lam2", "*", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "lam", "]", ",", "[", "x", "]", ")", "# noqa: F841", "\n", "\n", "", "", "def", "test_not_enough_parameters_at_call_time", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "lam2", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "objective", "=", "lam", "*", "cp", ".", "norm", "(", "x", ",", "1", ")", "+", "lam2", "*", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "lam", ",", "lam2", "]", ",", "[", "x", "]", ")", "# noqa: F841", "\n", "with", "self", ".", "assertRaisesRegex", "(", "\n", "ValueError", ",", "\n", "'A tensor must be provided for each CVXPY parameter.*'", ")", ":", "\n", "            ", "layer", "(", "lam", ")", "\n", "\n", "", "", "def", "test_too_many_variables", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "y", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_not_enough_parameters": [[250, 258], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Problem", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaisesRegex", "cvxpylayers.tensorflow.CvxpyLayer", "cvxpy.norm", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["objective", "=", "lam", "*", "cp", ".", "norm", "(", "x", ",", "1", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "lam", "]", ",", "[", "x", ",", "y", "]", ")", "# noqa: F841", "\n", "\n", "", "", "def", "test_infeasible", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "param", "=", "cp", ".", "Parameter", "(", "1", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "param", ")", ",", "[", "x", ">=", "1", ",", "x", "<=", "-", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_not_enough_parameters_at_call_time": [[259, 270], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Problem", "cvxpylayers.tensorflow.CvxpyLayer", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaisesRegex", "cvxpylayers.tensorflow.CvxpyLayer.", "cvxpy.norm", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "param", "]", ",", "[", "x", "]", ")", "\n", "param_tch", "=", "torch", ".", "ones", "(", "1", ")", "\n", "with", "self", ".", "assertRaises", "(", "diffcp", ".", "SolverError", ")", ":", "\n", "            ", "layer", "(", "param_tch", ")", "\n", "\n", "", "", "def", "test_unbounded", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "param", "=", "cp", ".", "Parameter", "(", "1", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "x", ")", ",", "[", "x", "<=", "param", "]", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "param", "]", ",", "[", "x", "]", ")", "\n", "param_tch", "=", "torch", ".", "ones", "(", "1", ")", "\n", "with", "self", ".", "assertRaises", "(", "diffcp", ".", "SolverError", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_non_dpp": [[271, 279], ["cvxpy.Variable", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpy.norm", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaisesRegex", "cvxpylayers.tensorflow.CvxpyLayer"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["            ", "layer", "(", "param_tch", ")", "\n", "\n", "", "", "def", "test_incorrect_parameter_shape", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "m", ",", "n", "=", "100", ",", "20", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_too_many_variables": [[280, 288], ["cvxpy.Variable", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpy.norm", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaisesRegex", "cvxpylayers.tensorflow.CvxpyLayer"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["obj", "=", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b", ")", "+", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ")", "\n", "prob_th", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_th", "=", "torch", ".", "randn", "(", "32", ",", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "20", ",", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_infeasible": [[289, 297], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpylayers.tensorflow.CvxpyLayer", "tensorflow.ones", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.tensorflow.CvxpyLayer."], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["\n", "", "A_th", "=", "torch", ".", "randn", "(", "32", ",", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "32", ",", "2", "*", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n", "", "A_th", "=", "torch", ".", "randn", "(", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "2", "*", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_lml": [[298, 320], ["tensorflow.random.set_seed", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.tensorflow.CvxpyLayer", "tensorflow.Variable", "tape.gradient", "test_cvxpylayer.numerical_grad", "numpy.testing.assert_almost_equal", "cvxpy.sum", "cvxpy.Minimize", "tensorflow.GradientTape", "cvxpy.Problem.solve", "cvxpy.sum", "cvxpy.entr", "cvxpy.sum", "cvxpylayers.tensorflow.CvxpyLayer.", "tensorflow.math.log", "numpy.log", "cvxpy.entr"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.numerical_grad"], ["\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n", "", "A_th", "=", "torch", ".", "randn", "(", "32", ",", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "32", ",", "32", ",", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n", "", "", "def", "test_broadcasting", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n_batch", ",", "m", ",", "n", "=", "2", ",", "100", ",", "20", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b", ")", "+", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ")", "\n", "prob_th", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_th", "=", "torch", ".", "randn", "(", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "m", ")", ".", "double", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "n_batch", ",", "1", ")"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_sdp": [[321, 359], ["tensorflow.random.set_seed", "cvxpy.Parameter", "tensorflow.Variable", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.tensorflow.CvxpyLayer", "tape.gradient", "test_cvxpylayer.numerical_grad", "zip", "cvxpy.Parameter", "cvxpy.Parameter", "tensorflow.random.normal", "tensorflow.Variable", "tensorflow.Variable", "cvxpy.Minimize", "tensorflow.GradientTape", "tensorflow.math.reduce_sum", "cvxpy.Problem.solve", "numpy.sum", "numpy.testing.assert_allclose", "range", "range", "tensorflow.random.normal", "range", "tensorflow.random.normal", "range", "cvxpy.trace", "range", "cvxpylayers.tensorflow.CvxpyLayer.", "cvxpy.sum_squares", "cvxpy.trace", "cvxpy.log_det"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.numerical_grad"], [".", "requires_grad_", "(", ")", "\n", "b_th_0", "=", "b_th", "[", "0", "]", "\n", "\n", "x", "=", "prob_th", "(", "A_th", ",", "b_th", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-10", "}", ")", "[", "0", "]", "\n", "\n", "def", "lstsq", "(", "\n", "A", ",", "\n", "b", ")", ":", "return", "torch", ".", "solve", "(", "\n", "(", "A", ".", "t", "(", ")", "@", "b", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "A", ".", "t", "(", ")", "@", "A", "+", "\n", "torch", ".", "eye", "(", "n", ")", ".", "double", "(", ")", ")", "[", "0", "]", "\n", "x_lstsq", "=", "lstsq", "(", "A_th", ",", "b_th_0", ")", "\n", "\n", "grad_A_cvxpy", ",", "grad_b_cvxpy", "=", "grad", "(", "x", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th", "]", ")", "\n", "grad_A_lstsq", ",", "grad_b_lstsq", "=", "grad", "(", "x_lstsq", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th_0", "]", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_A_cvxpy", "/", "n_batch", "-", "\n", "grad_A_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_b_cvxpy", "[", "0", "]", "-", "\n", "grad_b_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "\n", "", "def", "test_shared_parameter", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "m", ",", "n", "=", "10", ",", "5", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "b1", "=", "np", ".", "random", ".", "randn", "(", "m", ")", "\n", "b2", "=", "np", ".", "random", ".", "randn", "(", "m", ")", "\n", "prob1", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b1", ")", ")", ")", "\n", "layer1", "=", "CvxpyLayer", "(", "prob1", ",", "parameters", "=", "[", "A", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "prob2", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b2", ")", ")", ")", "\n", "layer2", "=", "CvxpyLayer", "(", "prob2", ",", "parameters", "=", "[", "A", "]", ",", "variables", "=", "[", "x", "]", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_basic_gp": [[360, 393], ["tensorflow.random.set_seed", "cvxpy.Variable", "cvxpy.Variable", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Problem", "cvxpy.Problem.solve", "cvxpylayers.tensorflow.CvxpyLayer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tape.gradient", "test_cvxpylayer.numerical_grad", "zip", "cvxpy.Minimize", "tensorflow.GradientTape", "cvxpylayers.tensorflow.CvxpyLayer.", "cvxpy.Problem.solve", "numpy.testing.assert_allclose"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.numerical_grad"], ["\n", "A_tch", "=", "torch", ".", "randn", "(", "m", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "solver_args", "=", "{", "\n", "\"eps\"", ":", "1e-10", ",", "\n", "\"acceleration_lookback\"", ":", "0", ",", "\n", "\"max_iters\"", ":", "10000", "\n", "}", "\n", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "A", ":", "torch", ".", "cat", "(", "\n", "[", "layer1", "(", "A", ",", "solver_args", "=", "solver_args", ")", "[", "0", "]", ",", "\n", "layer2", "(", "A", ",", "solver_args", "=", "solver_args", ")", "[", "0", "]", "]", ")", ",", "(", "A_tch", ",", ")", ")", "\n", "\n", "", "def", "test_equality", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n", "=", "10", "\n", "A", "=", "np", ".", "eye", "(", "n", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "n", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "sum_squares", "(", "x", ")", ")", ",", "[", "A", "@", "x", "==", "b", "]", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "parameters", "=", "[", "b", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "b_tch", "=", "torch", ".", "randn", "(", "n", ",", "requires_grad", "=", "True", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "b", ":", "layer", "(", "\n", "b", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-10", ",", "\n", "\"acceleration_lookback\"", ":", "0", "}", ")", "[", "0", "]", ".", "sum", "(", ")", ",", "\n", "(", "b_tch", ",", ")", ")", "\n", "\n", "", "def", "test_basic_gp", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "\n", "x", "=", "cp", ".", "Variable", "(", "pos", "=", "True", ")", "\n", "y", "=", "cp", ".", "Variable", "(", "pos", "=", "True", ")", "\n", "z", "=", "cp", ".", "Variable", "(", "pos", "=", "True", ")", "\n", "\n", "a", "=", "cp", ".", "Parameter", "(", "pos", "=", "True", ",", "value", "=", "2.0", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.TestCvxpyLayer.test_broadcasting": [[394, 426], ["tensorflow.random.set_seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.tensorflow.CvxpyLayer", "tensorflow.Variable", "tensorflow.random.normal", "tensorflow.Variable", "tensorflow.Variable", "tape.gradient", "tape.gradient", "tensorflow.cast", "tensorflow.cast", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "cvxpy.sum_squares", "cvxpy.sum_squares", "cvxpy.Minimize", "tensorflow.random.normal", "tensorflow.stack", "tensorflow.GradientTape", "tensorflow.GradientTape", "tensorflow.linalg.lstsq", "tensorflow.linalg.norm().numpy", "tensorflow.linalg.norm().numpy", "cvxpylayers.tensorflow.CvxpyLayer.", "tensorflow.expand_dims", "tensorflow.linalg.norm", "tensorflow.linalg.norm", "range"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.torch.test_cvxpylayer.set_seed", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["b", "=", "cp", ".", "Parameter", "(", "pos", "=", "True", ",", "value", "=", "1.0", ")", "\n", "c", "=", "cp", ".", "Parameter", "(", "value", "=", "0.5", ")", "\n", "\n", "objective_fn", "=", "1", "/", "(", "x", "*", "y", "*", "z", ")", "\n", "constraints", "=", "[", "a", "*", "(", "x", "*", "y", "+", "x", "*", "z", "+", "y", "*", "z", ")", "<=", "b", ",", "x", ">=", "y", "**", "c", "]", "\n", "problem", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective_fn", ")", ",", "constraints", ")", "\n", "problem", ".", "solve", "(", "cp", ".", "SCS", ",", "gp", "=", "True", ",", "eps", "=", "1e-12", ")", "\n", "\n", "layer", "=", "CvxpyLayer", "(", "\n", "problem", ",", "parameters", "=", "[", "a", ",", "b", ",", "c", "]", ",", "variables", "=", "[", "x", ",", "y", ",", "z", "]", ",", "gp", "=", "True", ")", "\n", "a_tch", "=", "torch", ".", "tensor", "(", "2.0", ",", "requires_grad", "=", "True", ")", "\n", "b_tch", "=", "torch", ".", "tensor", "(", "1.0", ",", "requires_grad", "=", "True", ")", "\n", "c_tch", "=", "torch", ".", "tensor", "(", "0.5", ",", "requires_grad", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x_tch", ",", "y_tch", ",", "z_tch", "=", "layer", "(", "a_tch", ",", "b_tch", ",", "c_tch", ")", "\n", "\n", "", "self", ".", "assertAlmostEqual", "(", "x", ".", "value", ",", "x_tch", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "y", ".", "value", ",", "y_tch", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "z", ".", "value", ",", "z_tch", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "a", ",", "b", ",", "c", ":", "layer", "(", "\n", "a", ",", "b", ",", "c", ",", "solver_args", "=", "{", "\n", "\"eps\"", ":", "1e-12", ",", "\"acceleration_lookback\"", ":", "0", "}", ")", "[", "0", "]", ".", "sum", "(", ")", ",", "\n", "(", "a_tch", ",", "b_tch", ",", "c_tch", ")", ",", "atol", "=", "1e-3", ",", "rtol", "=", "1e-3", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "unittest", ".", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.test_cvxpylayer.numerical_grad": [[11, 39], ["int", "numpy.zeros", "zip", "numpy.zeros", "range", "sum", "value.numpy().flatten", "values[].reshape", "f", "f", "numgrads.append", "numgrad[].reshape", "numpy.prod", "value.numpy"], "function", ["None"], ["\n", "torch", ".", "set_default_dtype", "(", "torch", ".", "double", ")", "\n", "\n", "\n", "def", "set_seed", "(", "x", ")", ":", "\n", "    ", "npr", ".", "seed", "(", "x", ")", "\n", "torch", ".", "manual_seed", "(", "x", ")", "\n", "\n", "\n", "", "def", "sigmoid", "(", "z", ")", ":", "\n", "    ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "z", ")", ")", "\n", "\n", "\n", "", "class", "TestCvxpyLayer", "(", "unittest", ".", "TestCase", ")", ":", "\n", "\n", "    ", "def", "test_example", "(", "self", ")", ":", "\n", "        ", "n", ",", "m", "=", "2", ",", "3", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "constraints", "=", "[", "x", ">=", "0", "]", "\n", "objective", "=", "cp", ".", "Minimize", "(", "0.5", "*", "cp", ".", "pnorm", "(", "A", "@", "x", "-", "b", ",", "p", "=", "1", ")", ")", "\n", "problem", "=", "cp", ".", "Problem", "(", "objective", ",", "constraints", ")", "\n", "assert", "problem", ".", "is_dpp", "(", ")", "\n", "\n", "cvxpylayer", "=", "CvxpyLayer", "(", "problem", ",", "parameters", "=", "[", "A", ",", "b", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "A_tch", "=", "torch", ".", "randn", "(", "m", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "b_tch", "=", "torch", ".", "randn", "(", "m", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer.__init__": [[58, 104], ["cvxpy.reductions.solvers.conic_solvers.scs_conif.dims_to_solver_dict", "set", "set", "ValueError", "set().issubset", "ValueError", "problem.get_problem_data", "solving_chain.get", "problem.get_problem_data", "problem.is_dgp", "ValueError", "problem.is_dcp", "ValueError", "problem.parameters", "set", "set", "problem.variables", "ValueError"], "methods", ["None"], ["        ", "\"\"\"Construct a CvxpyLayer\n\n        Args:\n          problem: The CVXPY problem; must be DPP.\n          parameters: A list of CVXPY Parameters in the problem; the order\n                      of the Parameters determines the order in which parameter\n                      values must be supplied in the forward pass. Must include\n                      every parameter involved in problem.\n          variables: A list of CVXPY Variables in the problem; the order of the\n                     Variables determines the order of the optimal variable\n                     values returned from the forward pass.\n          gp: Whether to parse the problem using DGP (True or False).\n        \"\"\"", "\n", "super", "(", "CvxpyLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gp", "=", "gp", "\n", "if", "self", ".", "gp", ":", "\n", "            ", "if", "not", "problem", ".", "is_dgp", "(", "dpp", "=", "True", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Problem must be DPP.'", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "problem", ".", "is_dcp", "(", "dpp", "=", "True", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Problem must be DPP.'", ")", "\n", "\n", "", "", "if", "not", "set", "(", "problem", ".", "parameters", "(", ")", ")", "==", "set", "(", "parameters", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The layer's parameters must exactly match \"", "\n", "\"problem.parameters\"", ")", "\n", "", "if", "not", "set", "(", "variables", ")", ".", "issubset", "(", "set", "(", "problem", ".", "variables", "(", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Argument variables must be a subset of \"", "\n", "\"problem.variables\"", ")", "\n", "", "if", "not", "isinstance", "(", "parameters", ",", "list", ")", "and", "not", "isinstance", "(", "parameters", ",", "tuple", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The layer's parameters must be provided as \"", "\n", "\"a list or tuple\"", ")", "\n", "", "if", "not", "isinstance", "(", "variables", ",", "list", ")", "and", "not", "isinstance", "(", "variables", ",", "tuple", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The layer's variables must be provided as \"", "\n", "\"a list or tuple\"", ")", "\n", "\n", "", "self", ".", "param_order", "=", "parameters", "\n", "self", ".", "variables", "=", "variables", "\n", "self", ".", "var_dict", "=", "{", "v", ".", "id", "for", "v", "in", "self", ".", "variables", "}", "\n", "\n", "# Construct compiler", "\n", "self", ".", "dgp2dcp", "=", "None", "\n", "\n", "if", "self", ".", "gp", ":", "\n", "            ", "for", "param", "in", "parameters", ":", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer.__call__": [[105, 127], ["tf.custom_gradient", "tf.custom_gradient.", "len", "len", "ValueError", "cvxpylayer.CvxpyLayer._compute", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer._compute"], ["                ", "if", "param", ".", "value", "is", "None", ":", "\n", "                    ", "raise", "ValueError", "(", "\"An initial value for each parameter is \"", "\n", "\"required when gp=True.\"", ")", "\n", "", "", "data", ",", "solving_chain", ",", "_", "=", "problem", ".", "get_problem_data", "(", "\n", "solver", "=", "cp", ".", "SCS", ",", "gp", "=", "True", ")", "\n", "self", ".", "compiler", "=", "data", "[", "cp", ".", "settings", ".", "PARAM_PROB", "]", "\n", "self", ".", "dgp2dcp", "=", "solving_chain", ".", "get", "(", "cp", ".", "reductions", ".", "Dgp2Dcp", ")", "\n", "self", ".", "param_ids", "=", "[", "p", ".", "id", "for", "p", "in", "self", ".", "compiler", ".", "parameters", "]", "\n", "", "else", ":", "\n", "            ", "data", ",", "_", ",", "_", "=", "problem", ".", "get_problem_data", "(", "solver", "=", "cp", ".", "SCS", ")", "\n", "self", ".", "compiler", "=", "data", "[", "cp", ".", "settings", ".", "PARAM_PROB", "]", "\n", "self", ".", "param_ids", "=", "[", "p", ".", "id", "for", "p", "in", "self", ".", "param_order", "]", "\n", "", "self", ".", "cone_dims", "=", "dims_to_solver_dict", "(", "data", "[", "\"dims\"", "]", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "params", ",", "solver_args", "=", "{", "}", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer._dx_from_dsoln": [[128, 134], ["list", "zip", "cvxpylayer.CvxpyLayer.asa_maps.split_adjoint", "map", "x.numpy"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer._problem_data_from_params": [[135, 140], ["cvxpylayer.CvxpyLayer.asa_maps.apply_parameters", "dict", "zip"], "methods", ["None"], ["if", "len", "(", "params", ")", "!=", "len", "(", "self", ".", "param_ids", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'A tensor must be provided for each CVXPY '", "\n", "'parameter; received %d tensors, expected %d'", "%", "(", "\n", "len", "(", "params", ")", ",", "len", "(", "self", ".", "param_ids", ")", ")", ")", "\n", "", "info", "=", "{", "}", "\n", "f", "=", "_CvxpyLayerFn", "(", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer._restrict_DT_to_dx": [[141, 147], ["numpy.zeros", "DT", "numpy.zeros", "range"], "methods", ["None"], ["param_order", "=", "self", ".", "param_order", ",", "\n", "param_ids", "=", "self", ".", "param_ids", ",", "\n", "variables", "=", "self", ".", "variables", ",", "\n", "var_dict", "=", "self", ".", "var_dict", ",", "\n", "compiler", "=", "self", ".", "compiler", ",", "\n", "cone_dims", "=", "self", ".", "cone_dims", ",", "\n", "gp", "=", "self", ".", "gp", ",", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer._split_solution": [[148, 151], ["cvxpylayer.CvxpyLayer.asa_maps.split_solution", "tuple", "tf.constant"], "methods", ["None"], ["dgp2dcp", "=", "self", ".", "dgp2dcp", ",", "\n", "solver_args", "=", "solver_args", ",", "\n", "info", "=", "info", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer._compute": [[152, 300], ["enumerate", "numpy.array", "numpy.any", "range", "cvxpylayer.CvxpyLayer._restrict_DT_to_dx", "p.numpy", "zip", "numpy.array.append", "int", "numpy.any", "zip", "cvxpylayer.CvxpyLayer._problem_data_from_params", "As.append", "bs.append", "cs.append", "diffcp.solve_and_derivative_batch", "cvxpylayer.CvxpyLayer._split_solution", "tf.stack", "cvxpylayer.CvxpyLayer.", "tuple", "numpy.all", "ValueError", "ValueError", "print", "range", "tf.squeeze", "tf.exp", "tf.split", "zip", "cvxpylayer.CvxpyLayer._dx_from_dsoln", "cvxpylayer.CvxpyLayer.asa_maps.apply_param_jac", "tuple.append", "tuple", "enumerate", "zip", "ValueError", "numpy.log", "zip", "len", "tf.expand_dims", "range", "dsoln_list.append", "zip", "tf.constant", "tuple.append", "ValueError", "zip", "tf.squeeze", "tf.squeeze", "tf.reduce_sum", "zip"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer._restrict_DT_to_dx", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer._problem_data_from_params", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer._split_solution", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.tensorflow.cvxpylayer.CvxpyLayer._dx_from_dsoln"], ["sol", "=", "f", "(", "*", "params", ")", "\n", "self", ".", "info", "=", "info", "\n", "return", "sol", "\n", "\n", "\n", "", "", "def", "to_numpy", "(", "x", ")", ":", "\n", "# convert torch tensor to numpy array", "\n", "    ", "return", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "double", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "", "def", "to_torch", "(", "x", ",", "dtype", ",", "device", ")", ":", "\n", "# convert numpy array to torch tensor", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "def", "_CvxpyLayerFn", "(", "\n", "param_order", ",", "\n", "param_ids", ",", "\n", "variables", ",", "\n", "var_dict", ",", "\n", "compiler", ",", "\n", "cone_dims", ",", "\n", "gp", ",", "\n", "dgp2dcp", ",", "\n", "solver_args", ",", "\n", "info", ")", ":", "\n", "    ", "class", "_CvxpyLayerFnFn", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "params", ")", ":", "\n", "# infer dtype, device, and whether or not params are batched", "\n", "            ", "ctx", ".", "dtype", "=", "params", "[", "0", "]", ".", "dtype", "\n", "ctx", ".", "device", "=", "params", "[", "0", "]", ".", "device", "\n", "\n", "ctx", ".", "batch_sizes", "=", "[", "]", "\n", "for", "i", ",", "(", "p", ",", "q", ")", "in", "enumerate", "(", "zip", "(", "params", ",", "param_order", ")", ")", ":", "\n", "# check dtype, device of params", "\n", "                ", "if", "p", ".", "dtype", "!=", "ctx", ".", "dtype", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Two or more parameters have different dtypes. \"", "\n", "\"Expected parameter %d to have dtype %s but \"", "\n", "\"got dtype %s.\"", "%", "\n", "(", "i", ",", "str", "(", "ctx", ".", "dtype", ")", ",", "str", "(", "p", ".", "dtype", ")", ")", "\n", ")", "\n", "", "if", "p", ".", "device", "!=", "ctx", ".", "device", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Two or more parameters are on different devices. \"", "\n", "\"Expected parameter %d to be on device %s \"", "\n", "\"but got device %s.\"", "%", "\n", "(", "i", ",", "str", "(", "ctx", ".", "device", ")", ",", "str", "(", "p", ".", "device", ")", ")", "\n", ")", "\n", "\n", "# check and extract the batch size for the parameter", "\n", "# 0 means there is no batch dimension for this parameter", "\n", "# and we assume the batch dimension is non-zero", "\n", "", "if", "p", ".", "ndimension", "(", ")", "==", "q", ".", "ndim", ":", "\n", "                    ", "batch_size", "=", "0", "\n", "", "elif", "p", ".", "ndimension", "(", ")", "==", "q", ".", "ndim", "+", "1", ":", "\n", "                    ", "batch_size", "=", "p", ".", "size", "(", "0", ")", "\n", "if", "batch_size", "==", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "\"The batch dimension for parameter {} is zero \"", "\n", "\"but should be non-zero.\"", ".", "format", "(", "i", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Invalid parameter size passed in. Expected \"", "\n", "\"parameter {} to have have {} or {} dimensions \"", "\n", "\"but got {} dimensions\"", ".", "format", "(", "\n", "i", ",", "q", ".", "ndim", ",", "q", ".", "ndim", "+", "1", ",", "p", ".", "ndimension", "(", ")", ")", ")", "\n", "\n", "", "ctx", ".", "batch_sizes", ".", "append", "(", "batch_size", ")", "\n", "\n", "# validate the parameter shape", "\n", "p_shape", "=", "p", ".", "shape", "if", "batch_size", "==", "0", "else", "p", ".", "shape", "[", "1", ":", "]", "\n", "if", "not", "np", ".", "all", "(", "p_shape", "==", "param_order", "[", "i", "]", ".", "shape", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Inconsistent parameter shapes passed in. \"", "\n", "\"Expected parameter {} to have non-batched shape of \"", "\n", "\"{} but got {}.\"", ".", "format", "(", "\n", "i", ",", "\n", "q", ".", "shape", ",", "\n", "p", ".", "shape", ")", ")", "\n", "\n", "", "", "ctx", ".", "batch_sizes", "=", "np", ".", "array", "(", "ctx", ".", "batch_sizes", ")", "\n", "ctx", ".", "batch", "=", "np", ".", "any", "(", "ctx", ".", "batch_sizes", ">", "0", ")", "\n", "\n", "if", "ctx", ".", "batch", ":", "\n", "                ", "nonzero_batch_sizes", "=", "ctx", ".", "batch_sizes", "[", "ctx", ".", "batch_sizes", ">", "0", "]", "\n", "ctx", ".", "batch_size", "=", "nonzero_batch_sizes", "[", "0", "]", "\n", "if", "np", ".", "any", "(", "nonzero_batch_sizes", "!=", "ctx", ".", "batch_size", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Inconsistent batch sizes passed in. Expected \"", "\n", "\"parameters to have no batch size or all the same \"", "\n", "\"batch size but got sizes: {}.\"", ".", "format", "(", "\n", "ctx", ".", "batch_sizes", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "batch_size", "=", "1", "\n", "\n", "", "if", "gp", ":", "\n", "                ", "ctx", ".", "params", "=", "params", "\n", "ctx", ".", "old_params_to_new_params", "=", "(", "\n", "dgp2dcp", ".", "canon_methods", ".", "_parameters", "\n", ")", "\n", "param_map", "=", "{", "}", "\n", "# construct a list of params for the DCP problem", "\n", "for", "param", ",", "value", "in", "zip", "(", "param_order", ",", "params", ")", ":", "\n", "                    ", "if", "param", "in", "ctx", ".", "old_params_to_new_params", ":", "\n", "                        ", "new_id", "=", "ctx", ".", "old_params_to_new_params", "[", "param", "]", ".", "id", "\n", "param_map", "[", "new_id", "]", "=", "torch", ".", "log", "(", "value", ")", "\n", "", "else", ":", "\n", "                        ", "new_id", "=", "param", ".", "id", "\n", "param_map", "[", "new_id", "]", "=", "value", "\n", "", "", "params_numpy", "=", "[", "to_numpy", "(", "param_map", "[", "pid", "]", ")", "for", "pid", "in", "param_ids", "]", "\n", "", "else", ":", "\n", "                ", "params_numpy", "=", "[", "to_numpy", "(", "p", ")", "for", "p", "in", "params", "]", "\n", "\n", "# canonicalize problem", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "As", ",", "bs", ",", "cs", ",", "cone_dicts", ",", "ctx", ".", "shapes", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "ctx", ".", "batch_size", ")", ":", "\n", "                ", "params_numpy_i", "=", "[", "\n", "p", "if", "sz", "==", "0", "else", "p", "[", "i", "]", "\n", "for", "p", ",", "sz", "in", "zip", "(", "params_numpy", ",", "ctx", ".", "batch_sizes", ")", "]", "\n", "c", ",", "_", ",", "neg_A", ",", "b", "=", "compiler", ".", "apply_parameters", "(", "\n", "dict", "(", "zip", "(", "param_ids", ",", "params_numpy_i", ")", ")", ",", "\n", "keep_zeros", "=", "True", ")", "\n", "A", "=", "-", "neg_A", "# cvxpy canonicalizes -A", "\n", "As", ".", "append", "(", "A", ")", "\n", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "c", ")", "\n", "cone_dicts", ".", "append", "(", "cone_dims", ")", "\n", "ctx", ".", "shapes", ".", "append", "(", "A", ".", "shape", ")", "\n", "", "info", "[", "'canon_time'", "]", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "# compute solution and derivative function", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "                ", "xs", ",", "_", ",", "_", ",", "_", ",", "ctx", ".", "DT_batch", "=", "diffcp", ".", "solve_and_derivative_batch", "(", "\n", "As", ",", "bs", ",", "cs", ",", "cone_dicts", ",", "**", "solver_args", ")", "\n", "", "except", "diffcp", ".", "SolverError", "as", "e", ":", "\n", "                ", "print", "(", "\n", "\"Please consider re-formulating your problem so that \"", "\n", "\"it is always solvable or increasing the number of \"", "\n", "\"solver iterations.\"", ")", "\n", "raise", "e", "\n", "", "info", "[", "'solve_time'", "]", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "# extract solutions and append along batch dimension", "\n", "sol", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "variables", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "ctx", ".", "batch_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_example": [[21, 49], ["jax.random.PRNGKey", "jax.random.PRNGKey", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Minimize", "cvxpy.Problem", "cvxpy.Problem.is_dpp", "cvxpylayers.jax.CvxpyLayer", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "cvxpylayers.jax.CvxpyLayer.", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad.", "jax.grad.", "cvxpylayers.jax.CvxpyLayer.", "solution.sum", "cvxpy.pnorm"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["    ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "z", ")", ")", "\n", "\n", "\n", "", "class", "TestCvxpyLayer", "(", "unittest", ".", "TestCase", ")", ":", "\n", "\n", "    ", "def", "test_example", "(", "self", ")", ":", "\n", "        ", "n", ",", "m", "=", "2", ",", "3", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "constraints", "=", "[", "x", ">=", "0", "]", "\n", "objective", "=", "cp", ".", "Minimize", "(", "0.5", "*", "cp", ".", "pnorm", "(", "A", "@", "x", "-", "b", ",", "p", "=", "1", ")", ")", "\n", "problem", "=", "cp", ".", "Problem", "(", "objective", ",", "constraints", ")", "\n", "assert", "problem", ".", "is_dpp", "(", ")", "\n", "\n", "cvxpylayer", "=", "CvxpyLayer", "(", "problem", ",", "parameters", "=", "[", "A", ",", "b", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "A_tch", "=", "torch", ".", "randn", "(", "m", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "b_tch", "=", "torch", ".", "randn", "(", "m", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# solve the problem", "\n", "solution", ",", "=", "cvxpylayer", "(", "A_tch", ",", "b_tch", ")", "\n", "\n", "# compute the gradient of the sum of the solution with respect to A, b", "\n", "solution", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "\n", "", "def", "test_simple_batch_socp", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n", "=", "5", "\n", "m", "=", "1", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_simple_batch_socp": [[50, 81], ["jax.random.PRNGKey", "jax.random.PRNGKey", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.test_util.check_grads", "jax.test_util.check_grads", "cvxpy.Minimize", "cvxpylayers.jax.CvxpyLayer.", "sum", "cvxpy.sum_squares", "cvxpy.norm"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["batch_size", "=", "4", "\n", "\n", "P_sqrt", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "n", ")", ",", "name", "=", "'P_sqrt'", ")", "\n", "q", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "1", ")", ",", "name", "=", "'q'", ")", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ",", "name", "=", "'A'", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "1", ")", ",", "name", "=", "'b'", ")", "\n", "\n", "x", "=", "cp", ".", "Variable", "(", "(", "n", ",", "1", ")", ",", "name", "=", "'x'", ")", "\n", "\n", "objective", "=", "0.5", "*", "cp", ".", "sum_squares", "(", "P_sqrt", "@", "x", ")", "+", "q", ".", "T", "@", "x", "\n", "constraints", "=", "[", "A", "@", "x", "==", "b", ",", "cp", ".", "norm", "(", "x", ")", "<=", "1", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ",", "constraints", ")", "\n", "\n", "prob_tch", "=", "CvxpyLayer", "(", "prob", ",", "[", "P_sqrt", ",", "q", ",", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "P_sqrt_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "n", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "q_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "n", ",", "1", ",", "requires_grad", "=", "True", ")", "\n", "A_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "m", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "b_tch", "=", "torch", ".", "randn", "(", "batch_size", ",", "m", ",", "1", ",", "requires_grad", "=", "True", ")", "\n", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "prob_tch", ",", "(", "P_sqrt_tch", ",", "q_tch", ",", "A_tch", ",", "b_tch", ")", ")", "\n", "\n", "", "def", "test_least_squares", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "m", ",", "n", "=", "100", ",", "20", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b", ")", "+", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ")", "\n", "prob_th", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_least_squares": [[82, 121], ["jax.random.PRNGKey", "jax.random.PRNGKey", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad.", "jax.grad.", "jax.grad.", "jax.grad.", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "cvxpy.sum_squares", "cvxpy.sum_squares", "cvxpy.Minimize", "sum", "jax.linalg.solve", "jax.linalg.solve", "sum", "jax.linalg.norm().item", "jax.linalg.norm().item", "jax.linalg.norm().item", "jax.linalg.norm().item", "cvxpylayers.jax.CvxpyLayer.", "jax.eye", "jax.eye", "jax.linalg.norm", "jax.linalg.norm", "jax.linalg.norm", "jax.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["\n", "A_th", "=", "torch", ".", "randn", "(", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "x", "=", "prob_th", "(", "A_th", ",", "b_th", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-10", "}", ")", "[", "0", "]", "\n", "\n", "def", "lstsq", "(", "\n", "A", ",", "\n", "b", ")", ":", "return", "torch", ".", "solve", "(", "\n", "(", "A_th", ".", "t", "(", ")", "@", "b_th", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "A_th", ".", "t", "(", ")", "@", "A_th", "+", "\n", "torch", ".", "eye", "(", "n", ")", ".", "double", "(", ")", ")", "[", "0", "]", "\n", "x_lstsq", "=", "lstsq", "(", "A_th", ",", "b_th", ")", "\n", "\n", "grad_A_cvxpy", ",", "grad_b_cvxpy", "=", "grad", "(", "x", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th", "]", ")", "\n", "grad_A_lstsq", ",", "grad_b_lstsq", "=", "grad", "(", "x_lstsq", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th", "]", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_A_cvxpy", "-", "\n", "grad_A_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_b_cvxpy", "-", "\n", "grad_b_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "\n", "", "def", "test_logistic_regression", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "N", ",", "n", "=", "10", ",", "2", "\n", "X_np", "=", "np", ".", "random", ".", "randn", "(", "N", ",", "n", ")", "\n", "a_true", "=", "np", ".", "random", ".", "randn", "(", "n", ",", "1", ")", "\n", "y_np", "=", "np", ".", "round", "(", "sigmoid", "(", "X_np", "@", "a_true", "+", "np", ".", "random", ".", "randn", "(", "N", ",", "1", ")", "*", "0.5", ")", ")", "\n", "\n", "X_tch", "=", "torch", ".", "from_numpy", "(", "X_np", ")", "\n", "X_tch", ".", "requires_grad_", "(", "True", ")", "\n", "lam_tch", "=", "0.1", "*", "torch", ".", "ones", "(", "1", ",", "requires_grad", "=", "True", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "\n", "a", "=", "cp", ".", "Variable", "(", "(", "n", ",", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_logistic_regression": [[122, 153], ["jax.random.PRNGKey", "jax.random.PRNGKey", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.round", "jax.round", "jax.array", "jax.array", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.sum", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.test_util.check_grads", "jax.test_util.check_grads", "test_cvxpylayer.sigmoid", "jax.ones", "jax.ones", "cvxpy.Minimize", "cvxpy.multiply", "cvxpy.log_sum_exp", "jax.random.normal", "jax.random.normal", "cvxpy.sum_squares", "cvxpy.hstack", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.sigmoid"], ["X", "=", "cp", ".", "Parameter", "(", "(", "N", ",", "n", ")", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "y", "=", "y_np", "\n", "\n", "log_likelihood", "=", "cp", ".", "sum", "(", "\n", "cp", ".", "multiply", "(", "y", ",", "X", "@", "a", ")", "-", "\n", "cp", ".", "log_sum_exp", "(", "cp", ".", "hstack", "(", "[", "np", ".", "zeros", "(", "(", "N", ",", "1", ")", ")", ",", "X", "@", "a", "]", ")", ".", "T", ",", "axis", "=", "0", ",", "\n", "keepdims", "=", "True", ")", ".", "T", "\n", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "\n", "cp", ".", "Minimize", "(", "-", "log_likelihood", "+", "lam", "*", "cp", ".", "sum_squares", "(", "a", ")", ")", ")", "\n", "\n", "fit_logreg", "=", "CvxpyLayer", "(", "prob", ",", "[", "X", ",", "lam", "]", ",", "[", "a", "]", ")", "\n", "\n", "def", "layer_eps", "(", "*", "x", ")", ":", "\n", "            ", "return", "fit_logreg", "(", "*", "x", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-12", "}", ")", "\n", "\n", "", "torch", ".", "autograd", ".", "gradcheck", "(", "layer_eps", ",", "\n", "(", "X_tch", ",", "\n", "lam_tch", ")", ",", "\n", "eps", "=", "1e-4", ",", "\n", "atol", "=", "1e-3", ",", "\n", "rtol", "=", "1e-3", ")", "\n", "\n", "", "def", "test_entropy_maximization", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n", ",", "m", ",", "p", "=", "5", ",", "3", ",", "2", "\n", "\n", "tmp", "=", "np", ".", "random", ".", "rand", "(", "n", ")", "\n", "A_np", "=", "np", ".", "random", ".", "randn", "(", "m", ",", "n", ")", "\n", "b_np", "=", "A_np", ".", "dot", "(", "tmp", ")", "\n", "F_np", "=", "np", ".", "random", ".", "randn", "(", "p", ",", "n", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_entropy_maximization": [[154, 182], ["jax.random.PRNGKey", "jax.random.PRNGKey", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal.dot", "jax.random.normal", "jax.random.normal", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Maximize", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "map", "jax.test_util.check_grads", "jax.test_util.check_grads", "jax.random.normal.dot", "jax.random.normal", "jax.random.normal", "cvxpy.sum", "jax.array", "jax.array", "cvxpy.entr", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["g_np", "=", "F_np", ".", "dot", "(", "tmp", ")", "+", "np", ".", "random", ".", "rand", "(", "p", ")", "\n", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "F", "=", "cp", ".", "Parameter", "(", "(", "p", ",", "n", ")", ")", "\n", "g", "=", "cp", ".", "Parameter", "(", "p", ")", "\n", "obj", "=", "cp", ".", "Maximize", "(", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "x", ")", ")", "-", ".01", "*", "cp", ".", "sum_squares", "(", "x", ")", ")", "\n", "constraints", "=", "[", "A", "*", "x", "==", "b", ",", "\n", "F", "*", "x", "<=", "g", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "constraints", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", ",", "F", ",", "g", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_tch", ",", "b_tch", ",", "F_tch", ",", "g_tch", "=", "map", "(", "\n", "lambda", "x", ":", "torch", ".", "from_numpy", "(", "x", ")", ".", "requires_grad_", "(", "True", ")", ",", "[", "\n", "A_np", ",", "b_np", ",", "F_np", ",", "g_np", "]", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "\n", "lambda", "*", "x", ":", "layer", "(", "*", "x", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-12", ",", "\n", "\"max_iters\"", ":", "10000", "}", ")", ",", "\n", "(", "A_tch", ",", "\n", "b_tch", ",", "\n", "F_tch", ",", "\n", "g_tch", ")", ",", "\n", "eps", "=", "1e-4", ",", "\n", "atol", "=", "1e-3", ",", "\n", "rtol", "=", "1e-3", ")", "\n", "\n", "", "def", "test_lml", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_lml": [[183, 194], ["cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.array", "jax.array", "jax.test_util.check_grads", "jax.test_util.check_grads", "cvxpy.sum", "cvxpy.Minimize", "cvxpy.sum", "cvxpy.entr", "cvxpy.sum", "cvxpy.entr"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["k", "=", "2", "\n", "x", "=", "cp", ".", "Parameter", "(", "4", ")", "\n", "y", "=", "cp", ".", "Variable", "(", "4", ")", "\n", "obj", "=", "-", "x", "*", "y", "-", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "y", ")", ")", "-", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "1.", "-", "y", ")", ")", "\n", "cons", "=", "[", "cp", ".", "sum", "(", "y", ")", "==", "k", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ",", "cons", ")", "\n", "lml", "=", "CvxpyLayer", "(", "prob", ",", "[", "x", "]", ",", "[", "y", "]", ")", "\n", "\n", "x_th", "=", "torch", ".", "DoubleTensor", "(", "[", "1.", ",", "-", "1.", ",", "-", "1.", ",", "-", "1.", "]", ")", "\n", "x_th", ".", "requires_grad_", "(", "True", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lml", ",", "x_th", ",", "eps", "=", "1e-5", ",", "atol", "=", "1e-4", ",", "rtol", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_sdp": [[195, 223], ["jax.random.PRNGKey", "jax.random.PRNGKey", "cvxpy.Parameter", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "range", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.test_util.check_grads", "jax.test_util.check_grads", "cvxpy.Parameter", "cvxpy.Parameter", "jax.random.split", "jax.random.split", "A_jax.append", "b_jax.append", "cvxpy.Minimize", "range", "range", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "cvxpy.trace", "range", "cvxpy.trace", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "test_sdp", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "2", ")", "\n", "\n", "n", "=", "3", "\n", "p", "=", "3", "\n", "C", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "n", ")", ")", "\n", "A", "=", "[", "cp", ".", "Parameter", "(", "(", "n", ",", "n", ")", ")", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "b", "=", "[", "cp", ".", "Parameter", "(", "(", "1", ",", "1", ")", ")", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "\n", "C_tch", "=", "torch", ".", "randn", "(", "n", ",", "n", ",", "requires_grad", "=", "True", ")", ".", "double", "(", ")", "\n", "A_tch", "=", "[", "torch", ".", "randn", "(", "n", ",", "n", ",", "requires_grad", "=", "True", ")", ".", "double", "(", ")", "\n", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "b_tch", "=", "[", "torch", ".", "randn", "(", "1", ",", "1", ",", "requires_grad", "=", "True", ")", ".", "double", "(", ")", "\n", "for", "_", "in", "range", "(", "p", ")", "]", "\n", "\n", "X", "=", "cp", ".", "Variable", "(", "(", "n", ",", "n", ")", ",", "symmetric", "=", "True", ")", "\n", "constraints", "=", "[", "X", ">>", "0", "]", "\n", "constraints", "+=", "[", "\n", "cp", ".", "trace", "(", "A", "[", "i", "]", "@", "X", ")", "==", "b", "[", "i", "]", "for", "i", "in", "range", "(", "p", ")", "\n", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "trace", "(", "C", "@", "X", ")", "+", "cp", ".", "sum_squares", "(", "X", ")", ")", ",", "\n", "constraints", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "C", "]", "+", "A", "+", "b", ",", "[", "X", "]", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "*", "x", ":", "layer", "(", "*", "x", ",", "\n", "solver_args", "=", "{", "'eps'", ":", "1e-12", "}", ")", ",", "\n", "[", "C_tch", "]", "+", "A_tch", "+", "b_tch", ",", "\n", "eps", "=", "1e-6", ",", "\n", "atol", "=", "1e-3", ",", "\n", "rtol", "=", "1e-3", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_not_enough_parameters": [[224, 232], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Problem", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.jax.CvxpyLayer", "cvxpy.norm", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["\n", "", "def", "test_not_enough_parameters", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "lam2", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "objective", "=", "lam", "*", "cp", ".", "norm", "(", "x", ",", "1", ")", "+", "lam2", "*", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "lam", "]", ",", "[", "x", "]", ")", "# noqa: F841", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_not_enough_parameters_at_call_time": [[233, 245], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaisesRegex", "jax.ones", "jax.ones", "cvxpylayers.jax.CvxpyLayer.", "cvxpy.norm", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["\n", "", "", "def", "test_not_enough_parameters_at_call_time", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "lam2", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "objective", "=", "lam", "*", "cp", ".", "norm", "(", "x", ",", "1", ")", "+", "lam2", "*", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "lam", ",", "lam2", "]", ",", "[", "x", "]", ")", "# noqa: F841", "\n", "with", "self", ".", "assertRaisesRegex", "(", "\n", "ValueError", ",", "\n", "'A tensor must be provided for each CVXPY parameter.*'", ")", ":", "\n", "            ", "layer", "(", "lam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_too_many_variables": [[246, 254], ["cvxpy.Variable", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpy.norm", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.jax.CvxpyLayer"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "", "def", "test_too_many_variables", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "y", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "lam", "=", "cp", ".", "Parameter", "(", "1", ",", "nonneg", "=", "True", ")", "\n", "objective", "=", "lam", "*", "cp", ".", "norm", "(", "x", ",", "1", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective", ")", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "lam", "]", ",", "[", "x", ",", "y", "]", ")", "# noqa: F841", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_infeasible": [[255, 263], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.ones", "jax.ones", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.jax.CvxpyLayer."], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "", "def", "test_infeasible", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "param", "=", "cp", ".", "Parameter", "(", "1", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "param", ")", ",", "[", "x", ">=", "1", ",", "x", "<=", "-", "1", "]", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "param", "]", ",", "[", "x", "]", ")", "\n", "param_tch", "=", "torch", ".", "ones", "(", "1", ")", "\n", "with", "self", ".", "assertRaises", "(", "diffcp", ".", "SolverError", ")", ":", "\n", "            ", "layer", "(", "param_tch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_unbounded": [[264, 272], ["cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.ones", "jax.ones", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.jax.CvxpyLayer."], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "", "def", "test_unbounded", "(", "self", ")", ":", "\n", "        ", "x", "=", "cp", ".", "Variable", "(", "1", ")", "\n", "param", "=", "cp", ".", "Parameter", "(", "1", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "x", ")", ",", "[", "x", "<=", "param", "]", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "[", "param", "]", ",", "[", "x", "]", ")", "\n", "param_tch", "=", "torch", ".", "ones", "(", "1", ")", "\n", "with", "self", ".", "assertRaises", "(", "diffcp", ".", "SolverError", ")", ":", "\n", "            ", "layer", "(", "param_tch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_incorrect_parameter_shape": [[273, 311], ["jax.random.PRNGKey", "jax.random.PRNGKey", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "cvxpy.sum_squares", "cvxpy.sum_squares", "cvxpy.Minimize", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.jax.CvxpyLayer.", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.jax.CvxpyLayer.", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.jax.CvxpyLayer.", "test_cvxpylayer.TestCvxpyLayer.assertRaises", "cvxpylayers.jax.CvxpyLayer."], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "", "def", "test_incorrect_parameter_shape", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "m", ",", "n", "=", "100", ",", "20", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b", ")", "+", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ")", "\n", "prob_th", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_th", "=", "torch", ".", "randn", "(", "32", ",", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "20", ",", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n", "", "A_th", "=", "torch", ".", "randn", "(", "32", ",", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "32", ",", "2", "*", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n", "", "A_th", "=", "torch", ".", "randn", "(", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "2", "*", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n", "", "A_th", "=", "torch", ".", "randn", "(", "32", ",", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "32", ",", "32", ",", "m", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "prob_th", "(", "A_th", ",", "b_th", ")", "\n", "\n", "", "", "def", "test_broadcasting", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n_batch", ",", "m", ",", "n", "=", "2", ",", "100", ",", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_broadcasting": [[312, 352], ["jax.random.PRNGKey", "jax.random.PRNGKey", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.stack", "jax.stack", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad", "jax.grad.", "jax.grad.", "jax.grad.", "jax.grad.", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "cvxpy.sum_squares", "cvxpy.sum_squares", "cvxpy.Minimize", "jax.sum", "jax.sum", "jax.linalg.solve", "jax.linalg.solve", "sum", "jax.linalg.norm().item", "jax.linalg.norm().item", "jax.linalg.norm().item", "jax.linalg.norm().item", "cvxpylayers.jax.CvxpyLayer.", "jax.eye", "jax.eye", "jax.linalg.norm", "jax.linalg.norm", "jax.linalg.norm", "jax.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "m", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b", ")", "+", "cp", ".", "sum_squares", "(", "x", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ")", "\n", "prob_th", "=", "CvxpyLayer", "(", "prob", ",", "[", "A", ",", "b", "]", ",", "[", "x", "]", ")", "\n", "\n", "A_th", "=", "torch", ".", "randn", "(", "m", ",", "n", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "b_th", "=", "torch", ".", "randn", "(", "m", ")", ".", "double", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "n_batch", ",", "1", ")", ".", "requires_grad_", "(", ")", "\n", "b_th_0", "=", "b_th", "[", "0", "]", "\n", "\n", "x", "=", "prob_th", "(", "A_th", ",", "b_th", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-10", "}", ")", "[", "0", "]", "\n", "\n", "def", "lstsq", "(", "\n", "A", ",", "\n", "b", ")", ":", "return", "torch", ".", "solve", "(", "\n", "(", "A", ".", "t", "(", ")", "@", "b", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "A", ".", "t", "(", ")", "@", "A", "+", "\n", "torch", ".", "eye", "(", "n", ")", ".", "double", "(", ")", ")", "[", "0", "]", "\n", "x_lstsq", "=", "lstsq", "(", "A_th", ",", "b_th_0", ")", "\n", "\n", "grad_A_cvxpy", ",", "grad_b_cvxpy", "=", "grad", "(", "x", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th", "]", ")", "\n", "grad_A_lstsq", ",", "grad_b_lstsq", "=", "grad", "(", "x_lstsq", ".", "sum", "(", ")", ",", "[", "A_th", ",", "b_th_0", "]", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_A_cvxpy", "/", "n_batch", "-", "\n", "grad_A_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "torch", ".", "norm", "(", "\n", "grad_b_cvxpy", "[", "0", "]", "-", "\n", "grad_b_lstsq", ")", ".", "item", "(", ")", ",", "\n", "0.0", ")", "\n", "\n", "", "def", "test_shared_parameter", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "m", ",", "n", "=", "10", ",", "5", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_shared_parameter": [[353, 381], ["jax.random.PRNGKey", "jax.random.PRNGKey", "cvxpy.Parameter", "cvxpy.Variable", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.random.normal", "jax.random.normal", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.test_util.check_grads", "jax.test_util.check_grads", "cvxpy.Minimize", "cvxpy.Minimize", "cvxpylayers.jax.CvxpyLayer.", "cvxpylayers.jax.CvxpyLayer.", "jax.concatenate", "jax.concatenate", "cvxpy.sum_squares", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "b1", "=", "np", ".", "random", ".", "randn", "(", "m", ")", "\n", "b2", "=", "np", ".", "random", ".", "randn", "(", "m", ")", "\n", "prob1", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b1", ")", ")", ")", "\n", "layer1", "=", "CvxpyLayer", "(", "prob1", ",", "parameters", "=", "[", "A", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "prob2", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "sum_squares", "(", "A", "@", "x", "-", "b2", ")", ")", ")", "\n", "layer2", "=", "CvxpyLayer", "(", "prob2", ",", "parameters", "=", "[", "A", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "\n", "A_tch", "=", "torch", ".", "randn", "(", "m", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "solver_args", "=", "{", "\n", "\"eps\"", ":", "1e-10", ",", "\n", "\"acceleration_lookback\"", ":", "0", ",", "\n", "\"max_iters\"", ":", "10000", "\n", "}", "\n", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "A", ":", "torch", ".", "cat", "(", "\n", "[", "layer1", "(", "A", ",", "solver_args", "=", "solver_args", ")", "[", "0", "]", ",", "\n", "layer2", "(", "A", ",", "solver_args", "=", "solver_args", ")", "[", "0", "]", "]", ")", ",", "(", "A_tch", ",", ")", ")", "\n", "\n", "", "def", "test_equality", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "n", "=", "10", "\n", "A", "=", "np", ".", "eye", "(", "n", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "n", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "cp", ".", "sum_squares", "(", "x", ")", ")", ",", "[", "A", "@", "x", "==", "b", "]", ")", "\n", "layer", "=", "CvxpyLayer", "(", "prob", ",", "parameters", "=", "[", "b", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "b_tch", "=", "torch", ".", "randn", "(", "n", ",", "requires_grad", "=", "True", ")", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "b", ":", "layer", "(", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_equality": [[382, 395], ["jax.random.PRNGKey", "jax.random.PRNGKey", "numpy.eye", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Problem", "cvxpylayers.jax.CvxpyLayer", "jax.random.split", "jax.random.split", "jax.random.normal", "jax.random.normal", "jax.test_util.check_grads", "jax.test_util.check_grads", "cvxpy.Minimize", "cvxpy.sum_squares"], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["b", ",", "solver_args", "=", "{", "\"eps\"", ":", "1e-10", ",", "\n", "\"acceleration_lookback\"", ":", "0", "}", ")", "[", "0", "]", ".", "sum", "(", ")", ",", "\n", "(", "b_tch", ",", ")", ")", "\n", "\n", "", "def", "test_basic_gp", "(", "self", ")", ":", "\n", "        ", "set_seed", "(", "243", ")", "\n", "\n", "x", "=", "cp", ".", "Variable", "(", "pos", "=", "True", ")", "\n", "y", "=", "cp", ".", "Variable", "(", "pos", "=", "True", ")", "\n", "z", "=", "cp", ".", "Variable", "(", "pos", "=", "True", ")", "\n", "\n", "a", "=", "cp", ".", "Parameter", "(", "pos", "=", "True", ",", "value", "=", "2.0", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "pos", "=", "True", ",", "value", "=", "1.0", ")", "\n", "c", "=", "cp", ".", "Parameter", "(", "value", "=", "0.5", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.TestCvxpyLayer.test_basic_gp": [[396, 427], ["cvxpy.Variable", "cvxpy.Variable", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Problem", "cvxpy.Problem.solve", "cvxpylayers.jax.CvxpyLayer", "jax.array", "jax.array", "jax.array", "jax.array", "jax.array", "jax.array", "cvxpylayers.jax.CvxpyLayer.", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "test_cvxpylayer.TestCvxpyLayer.assertAlmostEqual", "jax.test_util.check_grads", "jax.test_util.check_grads", "cvxpy.Minimize", "jax.sum", "jax.sum", "cvxpylayers.jax.CvxpyLayer."], "methods", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["\n", "objective_fn", "=", "1", "/", "(", "x", "*", "y", "*", "z", ")", "\n", "constraints", "=", "[", "a", "*", "(", "x", "*", "y", "+", "x", "*", "z", "+", "y", "*", "z", ")", "<=", "b", ",", "x", ">=", "y", "**", "c", "]", "\n", "problem", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective_fn", ")", ",", "constraints", ")", "\n", "problem", ".", "solve", "(", "cp", ".", "SCS", ",", "gp", "=", "True", ",", "eps", "=", "1e-12", ")", "\n", "\n", "layer", "=", "CvxpyLayer", "(", "\n", "problem", ",", "parameters", "=", "[", "a", ",", "b", ",", "c", "]", ",", "variables", "=", "[", "x", ",", "y", ",", "z", "]", ",", "gp", "=", "True", ")", "\n", "a_tch", "=", "torch", ".", "tensor", "(", "2.0", ",", "requires_grad", "=", "True", ")", "\n", "b_tch", "=", "torch", ".", "tensor", "(", "1.0", ",", "requires_grad", "=", "True", ")", "\n", "c_tch", "=", "torch", ".", "tensor", "(", "0.5", ",", "requires_grad", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x_tch", ",", "y_tch", ",", "z_tch", "=", "layer", "(", "a_tch", ",", "b_tch", ",", "c_tch", ")", "\n", "\n", "", "self", ".", "assertAlmostEqual", "(", "x", ".", "value", ",", "x_tch", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "y", ".", "value", ",", "y_tch", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "z", ".", "value", ",", "z_tch", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "places", "=", "5", ")", "\n", "\n", "torch", ".", "autograd", ".", "gradcheck", "(", "lambda", "a", ",", "b", ",", "c", ":", "layer", "(", "\n", "a", ",", "b", ",", "c", ",", "solver_args", "=", "{", "\n", "\"eps\"", ":", "1e-12", ",", "\"acceleration_lookback\"", ":", "0", "}", ")", "[", "0", "]", ".", "sum", "(", ")", ",", "\n", "(", "a_tch", ",", "b_tch", ",", "c_tch", ")", ",", "atol", "=", "1e-3", ",", "rtol", "=", "1e-3", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "unittest", ".", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.test_cvxpylayer.sigmoid": [[15, 17], ["numpy.exp"], "function", ["None"], ["def", "set_seed", "(", "x", ")", ":", "\n", "    ", "npr", ".", "seed", "(", "x", ")", "\n", "torch", ".", "manual_seed", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer": [[18, 259], ["cvxpy.reductions.solvers.conic_solvers.scs_conif.dims_to_solver_dict", "jax.core.Primitive", "functools.partial", "core.Primitive.def_impl", "CvxpyLayerFn.defvjp", "ValueError", "set().issubset", "ValueError", "ValueError", "ValueError", "problem.get_problem_data", "solving_chain.get", "problem.get_problem_data", "core.Primitive.bind", "cvxpylayer.batch_info", "time.time", "range", "time.time", "time.time", "range", "tuple", "cvxpylayer.CvxpyLayer.CvxpyLayerFn"], "function", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.batch_info"], ["\"version %s.\"", "%", "torch", ".", "__version__", ")", "\n", "\n", "\n", "", "class", "CvxpyLayer", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"A differentiable convex optimization layer\n\n    A CvxpyLayer solves a parametrized convex optimization problem given by a\n    CVXPY problem. It solves the problem in its forward pass, and it computes\n    the derivative of problem's solution map with respect to the parameters in\n    its backward pass. The CVPXY problem must be a disciplined parametrized\n    program.\n\n    Example usage:\n        ```\n        import cvxpy as cp\n        import torch\n        from cvxpylayers.torch import CvxpyLayer\n\n        n, m = 2, 3\n        x = cp.Variable(n)\n        A = cp.Parameter((m, n))\n        b = cp.Parameter(m)\n        constraints = [x >= 0]\n        objective = cp.Minimize(0.5 * cp.pnorm(A @ x - b, p=1))\n        problem = cp.Problem(objective, constraints)\n        assert problem.is_dpp()\n\n        cvxpylayer = CvxpyLayer(problem, parameters=[A, b], variables=[x])\n        A_tch = torch.randn(m, n, requires_grad=True)\n        b_tch = torch.randn(m, requires_grad=True)\n\n        # solve the problem\n        solution, = cvxpylayer(A_tch, b_tch)\n\n        # compute the gradient of the sum of the solution with respect to A, b\n        solution.sum().backward()\n        ```\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "problem", ",", "parameters", ",", "variables", ",", "gp", "=", "False", ")", ":", "\n", "        ", "\"\"\"Construct a CvxpyLayer\n\n        Args:\n          problem: The CVXPY problem; must be DPP.\n          parameters: A list of CVXPY Parameters in the problem; the order\n                      of the Parameters determines the order in which parameter\n                      values must be supplied in the forward pass. Must include\n                      every parameter involved in problem.\n          variables: A list of CVXPY Variables in the problem; the order of the\n                     Variables determines the order of the optimal variable\n                     values returned from the forward pass.\n          gp: Whether to parse the problem using DGP (True or False).\n        \"\"\"", "\n", "super", "(", "CvxpyLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gp", "=", "gp", "\n", "if", "self", ".", "gp", ":", "\n", "            ", "if", "not", "problem", ".", "is_dgp", "(", "dpp", "=", "True", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Problem must be DPP.'", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "problem", ".", "is_dcp", "(", "dpp", "=", "True", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Problem must be DPP.'", ")", "\n", "\n", "", "", "if", "not", "set", "(", "problem", ".", "parameters", "(", ")", ")", "==", "set", "(", "parameters", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The layer's parameters must exactly match \"", "\n", "\"problem.parameters\"", ")", "\n", "", "if", "not", "set", "(", "variables", ")", ".", "issubset", "(", "set", "(", "problem", ".", "variables", "(", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Argument variables must be a subset of \"", "\n", "\"problem.variables\"", ")", "\n", "", "if", "not", "isinstance", "(", "parameters", ",", "list", ")", "and", "not", "isinstance", "(", "parameters", ",", "tuple", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The layer's parameters must be provided as \"", "\n", "\"a list or tuple\"", ")", "\n", "", "if", "not", "isinstance", "(", "variables", ",", "list", ")", "and", "not", "isinstance", "(", "variables", ",", "tuple", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The layer's variables must be provided as \"", "\n", "\"a list or tuple\"", ")", "\n", "\n", "", "self", ".", "param_order", "=", "parameters", "\n", "self", ".", "variables", "=", "variables", "\n", "self", ".", "var_dict", "=", "{", "v", ".", "id", "for", "v", "in", "self", ".", "variables", "}", "\n", "\n", "# Construct compiler", "\n", "self", ".", "dgp2dcp", "=", "None", "\n", "\n", "if", "self", ".", "gp", ":", "\n", "            ", "for", "param", "in", "parameters", ":", "\n", "                ", "if", "param", ".", "value", "is", "None", ":", "\n", "                    ", "raise", "ValueError", "(", "\"An initial value for each parameter is \"", "\n", "\"required when gp=True.\"", ")", "\n", "", "", "data", ",", "solving_chain", ",", "_", "=", "problem", ".", "get_problem_data", "(", "\n", "solver", "=", "cp", ".", "SCS", ",", "gp", "=", "True", ")", "\n", "self", ".", "compiler", "=", "data", "[", "cp", ".", "settings", ".", "PARAM_PROB", "]", "\n", "self", ".", "dgp2dcp", "=", "solving_chain", ".", "get", "(", "cp", ".", "reductions", ".", "Dgp2Dcp", ")", "\n", "self", ".", "param_ids", "=", "[", "p", ".", "id", "for", "p", "in", "self", ".", "compiler", ".", "parameters", "]", "\n", "", "else", ":", "\n", "            ", "data", ",", "_", ",", "_", "=", "problem", ".", "get_problem_data", "(", "solver", "=", "cp", ".", "SCS", ")", "\n", "self", ".", "compiler", "=", "data", "[", "cp", ".", "settings", ".", "PARAM_PROB", "]", "\n", "self", ".", "param_ids", "=", "[", "p", ".", "id", "for", "p", "in", "self", ".", "param_order", "]", "\n", "", "self", ".", "cone_dims", "=", "dims_to_solver_dict", "(", "data", "[", "\"dims\"", "]", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "params", ",", "solver_args", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Solve problem (or a batch of problems) corresponding to `params`\n\n        Args:\n          params: a sequence of torch Tensors; the n-th Tensor specifies\n                  the value for the n-th CVXPY Parameter. These Tensors\n                  can be batched: if a Tensor has 3 dimensions, then its\n                  first dimension is interpreted as the batch size. These\n                  Tensors must all have the same dtype and device.\n          solver_args: a dict of optional arguments, to send to `diffcp`. Keys\n                       should be the names of keyword arguments.\n\n        Returns:\n          a list of optimal variable values, one for each CVXPY Variable\n          supplied to the constructor.\n        \"\"\"", "\n", "if", "len", "(", "params", ")", "!=", "len", "(", "self", ".", "param_ids", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'A tensor must be provided for each CVXPY '", "\n", "'parameter; received %d tensors, expected %d'", "%", "(", "\n", "len", "(", "params", ")", ",", "len", "(", "self", ".", "param_ids", ")", ")", ")", "\n", "", "info", "=", "{", "}", "\n", "f", "=", "_CvxpyLayerFn", "(", "\n", "param_order", "=", "self", ".", "param_order", ",", "\n", "param_ids", "=", "self", ".", "param_ids", ",", "\n", "variables", "=", "self", ".", "variables", ",", "\n", "var_dict", "=", "self", ".", "var_dict", ",", "\n", "compiler", "=", "self", ".", "compiler", ",", "\n", "cone_dims", "=", "self", ".", "cone_dims", ",", "\n", "gp", "=", "self", ".", "gp", ",", "\n", "dgp2dcp", "=", "self", ".", "dgp2dcp", ",", "\n", "solver_args", "=", "solver_args", ",", "\n", "info", "=", "info", ",", "\n", ")", "\n", "sol", "=", "f", "(", "*", "params", ")", "\n", "self", ".", "info", "=", "info", "\n", "return", "sol", "\n", "\n", "\n", "", "", "def", "to_numpy", "(", "x", ")", ":", "\n", "# convert torch tensor to numpy array", "\n", "    ", "return", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "double", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "", "def", "to_torch", "(", "x", ",", "dtype", ",", "device", ")", ":", "\n", "# convert numpy array to torch tensor", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "x", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "def", "_CvxpyLayerFn", "(", "\n", "param_order", ",", "\n", "param_ids", ",", "\n", "variables", ",", "\n", "var_dict", ",", "\n", "compiler", ",", "\n", "cone_dims", ",", "\n", "gp", ",", "\n", "dgp2dcp", ",", "\n", "solver_args", ",", "\n", "info", ")", ":", "\n", "    ", "class", "_CvxpyLayerFnFn", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "*", "params", ")", ":", "\n", "# infer dtype, device, and whether or not params are batched", "\n", "            ", "ctx", ".", "dtype", "=", "params", "[", "0", "]", ".", "dtype", "\n", "ctx", ".", "device", "=", "params", "[", "0", "]", ".", "device", "\n", "\n", "ctx", ".", "batch_sizes", "=", "[", "]", "\n", "for", "i", ",", "(", "p", ",", "q", ")", "in", "enumerate", "(", "zip", "(", "params", ",", "param_order", ")", ")", ":", "\n", "# check dtype, device of params", "\n", "                ", "if", "p", ".", "dtype", "!=", "ctx", ".", "dtype", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Two or more parameters have different dtypes. \"", "\n", "\"Expected parameter %d to have dtype %s but \"", "\n", "\"got dtype %s.\"", "%", "\n", "(", "i", ",", "str", "(", "ctx", ".", "dtype", ")", ",", "str", "(", "p", ".", "dtype", ")", ")", "\n", ")", "\n", "", "if", "p", ".", "device", "!=", "ctx", ".", "device", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Two or more parameters are on different devices. \"", "\n", "\"Expected parameter %d to be on device %s \"", "\n", "\"but got device %s.\"", "%", "\n", "(", "i", ",", "str", "(", "ctx", ".", "device", ")", ",", "str", "(", "p", ".", "device", ")", ")", "\n", ")", "\n", "\n", "# check and extract the batch size for the parameter", "\n", "# 0 means there is no batch dimension for this parameter", "\n", "# and we assume the batch dimension is non-zero", "\n", "", "if", "p", ".", "ndimension", "(", ")", "==", "q", ".", "ndim", ":", "\n", "                    ", "batch_size", "=", "0", "\n", "", "elif", "p", ".", "ndimension", "(", ")", "==", "q", ".", "ndim", "+", "1", ":", "\n", "                    ", "batch_size", "=", "p", ".", "size", "(", "0", ")", "\n", "if", "batch_size", "==", "0", ":", "\n", "                        ", "raise", "ValueError", "(", "\n", "\"The batch dimension for parameter {} is zero \"", "\n", "\"but should be non-zero.\"", ".", "format", "(", "i", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Invalid parameter size passed in. Expected \"", "\n", "\"parameter {} to have have {} or {} dimensions \"", "\n", "\"but got {} dimensions\"", ".", "format", "(", "\n", "i", ",", "q", ".", "ndim", ",", "q", ".", "ndim", "+", "1", ",", "p", ".", "ndimension", "(", ")", ")", ")", "\n", "\n", "", "ctx", ".", "batch_sizes", ".", "append", "(", "batch_size", ")", "\n", "\n", "# validate the parameter shape", "\n", "p_shape", "=", "p", ".", "shape", "if", "batch_size", "==", "0", "else", "p", ".", "shape", "[", "1", ":", "]", "\n", "if", "not", "np", ".", "all", "(", "p_shape", "==", "param_order", "[", "i", "]", ".", "shape", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Inconsistent parameter shapes passed in. \"", "\n", "\"Expected parameter {} to have non-batched shape of \"", "\n", "\"{} but got {}.\"", ".", "format", "(", "\n", "i", ",", "\n", "q", ".", "shape", ",", "\n", "p", ".", "shape", ")", ")", "\n", "\n", "", "", "ctx", ".", "batch_sizes", "=", "np", ".", "array", "(", "ctx", ".", "batch_sizes", ")", "\n", "ctx", ".", "batch", "=", "np", ".", "any", "(", "ctx", ".", "batch_sizes", ">", "0", ")", "\n", "\n", "if", "ctx", ".", "batch", ":", "\n", "                ", "nonzero_batch_sizes", "=", "ctx", ".", "batch_sizes", "[", "ctx", ".", "batch_sizes", ">", "0", "]", "\n", "ctx", ".", "batch_size", "=", "nonzero_batch_sizes", "[", "0", "]", "\n", "if", "np", ".", "any", "(", "nonzero_batch_sizes", "!=", "ctx", ".", "batch_size", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Inconsistent batch sizes passed in. Expected \"", "\n", "\"parameters to have no batch size or all the same \"", "\n", "\"batch size but got sizes: {}.\"", ".", "format", "(", "\n", "ctx", ".", "batch_sizes", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "ctx", ".", "batch_size", "=", "1", "\n", "\n", "", "if", "gp", ":", "\n", "                ", "ctx", ".", "params", "=", "params", "\n", "ctx", ".", "old_params_to_new_params", "=", "(", "\n", "dgp2dcp", ".", "canon_methods", ".", "_parameters", "\n", ")", "\n", "param_map", "=", "{", "}", "\n", "# construct a list of params for the DCP problem", "\n", "for", "param", ",", "value", "in", "zip", "(", "param_order", ",", "params", ")", ":", "\n", "                    ", "if", "param", "in", "ctx", ".", "old_params_to_new_params", ":", "\n", "                        ", "new_id", "=", "ctx", ".", "old_params_to_new_params", "[", "param", "]", ".", "id", "\n", "param_map", "[", "new_id", "]", "=", "torch", ".", "log", "(", "value", ")", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.batch_info": [[261, 323], ["enumerate", "numpy.array", "numpy.any", "zip", "np.array.append", "numpy.any", "ValueError", "numpy.all", "ValueError", "ValueError", "ValueError", "ValueError", "str", "str"], "function", ["None"], ["                        ", "new_id", "=", "param", ".", "id", "\n", "param_map", "[", "new_id", "]", "=", "value", "\n", "", "", "params_numpy", "=", "[", "to_numpy", "(", "param_map", "[", "pid", "]", ")", "for", "pid", "in", "param_ids", "]", "\n", "", "else", ":", "\n", "                ", "params_numpy", "=", "[", "to_numpy", "(", "p", ")", "for", "p", "in", "params", "]", "\n", "\n", "# canonicalize problem", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "As", ",", "bs", ",", "cs", ",", "cone_dicts", ",", "ctx", ".", "shapes", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "ctx", ".", "batch_size", ")", ":", "\n", "                ", "params_numpy_i", "=", "[", "\n", "p", "if", "sz", "==", "0", "else", "p", "[", "i", "]", "\n", "for", "p", ",", "sz", "in", "zip", "(", "params_numpy", ",", "ctx", ".", "batch_sizes", ")", "]", "\n", "c", ",", "_", ",", "neg_A", ",", "b", "=", "compiler", ".", "apply_parameters", "(", "\n", "dict", "(", "zip", "(", "param_ids", ",", "params_numpy_i", ")", ")", ",", "\n", "keep_zeros", "=", "True", ")", "\n", "A", "=", "-", "neg_A", "# cvxpy canonicalizes -A", "\n", "As", ".", "append", "(", "A", ")", "\n", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "c", ")", "\n", "cone_dicts", ".", "append", "(", "cone_dims", ")", "\n", "ctx", ".", "shapes", ".", "append", "(", "A", ".", "shape", ")", "\n", "", "info", "[", "'canon_time'", "]", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "# compute solution and derivative function", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "                ", "xs", ",", "_", ",", "_", ",", "_", ",", "ctx", ".", "DT_batch", "=", "diffcp", ".", "solve_and_derivative_batch", "(", "\n", "As", ",", "bs", ",", "cs", ",", "cone_dicts", ",", "**", "solver_args", ")", "\n", "", "except", "diffcp", ".", "SolverError", "as", "e", ":", "\n", "                ", "print", "(", "\n", "\"Please consider re-formulating your problem so that \"", "\n", "\"it is always solvable or increasing the number of \"", "\n", "\"solver iterations.\"", ")", "\n", "raise", "e", "\n", "", "info", "[", "'solve_time'", "]", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "# extract solutions and append along batch dimension", "\n", "sol", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "variables", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "ctx", ".", "batch_size", ")", ":", "\n", "                ", "sltn_dict", "=", "compiler", ".", "split_solution", "(", "\n", "xs", "[", "i", "]", ",", "active_vars", "=", "var_dict", ")", "\n", "for", "j", ",", "v", "in", "enumerate", "(", "variables", ")", ":", "\n", "                    ", "sol", "[", "j", "]", ".", "append", "(", "to_torch", "(", "\n", "sltn_dict", "[", "v", ".", "id", "]", ",", "ctx", ".", "dtype", ",", "ctx", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "", "sol", "=", "[", "torch", ".", "cat", "(", "s", ",", "0", ")", "for", "s", "in", "sol", "]", "\n", "\n", "if", "not", "ctx", ".", "batch", ":", "\n", "                ", "sol", "=", "[", "s", ".", "squeeze", "(", "0", ")", "for", "s", "in", "sol", "]", "\n", "\n", "", "if", "gp", ":", "\n", "                ", "sol", "=", "[", "torch", ".", "exp", "(", "s", ")", "for", "s", "in", "sol", "]", "\n", "ctx", ".", "sol", "=", "sol", "\n", "\n", "", "return", "tuple", "(", "sol", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "dvars", ")", ":", "\n", "            ", "if", "gp", ":", "\n", "# derivative of exponential recovery transformation", "\n", "                ", "dvars", "=", "[", "dvar", "*", "s", "for", "dvar", ",", "s", "in", "zip", "(", "dvars", ",", "ctx", ".", "sol", ")", "]", "\n", "\n", "", "dvars_numpy", "=", "[", "to_numpy", "(", "dvar", ")", "for", "dvar", "in", "dvars", "]", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.prof.main": [[28, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "numpy.seed", "prof.prof"], "function", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.prof.prof"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--nTrials'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "npr", ".", "seed", "(", "0", ")", "\n", "prof", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.prof.prof": [[36, 60], ["itertools.product", "itertools.product", "pandas.DataFrame", "pd.DataFrame.to_csv", "print", "range", "print", "range", "print", "prof.prof_dense_qp", "print", "print", "prof.prof_sparse_qp", "print"], "function", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.prof.prof_dense_qp", "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.prof.prof_sparse_qp"], ["", "def", "prof", "(", "args", ")", ":", "\n", "    ", "trials", "=", "[", "]", "\n", "for", "nz", ",", "nbatch", ",", "cuda", "in", "itertools", ".", "product", "(", "\n", "[", "128", "]", ",", "[", "128", "]", ",", "[", "True", ",", "False", "]", ")", ":", "\n", "        ", "print", "(", "'--- {} vars/cons, batch size: {}, cuda: {} ---'", ".", "format", "(", "\n", "nz", ",", "nbatch", ",", "cuda", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "nTrials", ")", ":", "\n", "            ", "print", "(", "'  + Trial {}'", ".", "format", "(", "i", ")", ")", "\n", "t", "=", "prof_dense_qp", "(", "i", ",", "nz", ",", "nbatch", ",", "'dense'", ",", "cuda", ")", "\n", "trials", "+=", "t", "\n", "print", "(", "t", ")", "\n", "\n", "", "", "for", "nz", ",", "nbatch", ",", "cuda", "in", "itertools", ".", "product", "(", "\n", "[", "1024", "]", ",", "[", "32", "]", ",", "[", "False", "]", ")", ":", "\n", "        ", "print", "(", "'--- {} vars/cons, batch size: {}, cuda: {} ---'", ".", "format", "(", "\n", "nz", ",", "nbatch", ",", "cuda", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "nTrials", ")", ":", "\n", "            ", "print", "(", "'  + Trial {}'", ".", "format", "(", "i", ")", ")", "\n", "t", "=", "prof_sparse_qp", "(", "i", ",", "nz", ",", "nbatch", ",", "None", ",", "cuda", ")", "\n", "trials", "+=", "t", "\n", "print", "(", "t", ")", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "trials", ")", "\n", "df", ".", "to_csv", "(", "'results.csv'", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.prof.prof_sparse_qp": [[62, 186], ["numpy.seed", "A.nonzero", "G.nonzero", "scipy.sparse.eye", "numpy.randn", "numpy.randn", "numpy.array", "numpy.array", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "torch.cuda.synchronize", "trials.append", "x.sum", "time.time", "z.sum.backward", "trials.append", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "cvxpylayers.torch.cvxpylayer.CvxpyLayer", "time.time", "cvxpylayers.torch.cvxpylayer.CvxpyLayer.", "trials.append", "z.sum", "time.time", "z.sum.backward", "trials.append", "scipy.sparse.random", "scipy.sparse.eye", "scipy.sparse.random", "scipy.sparse.eye", "torch.from_numpy().double().requires_grad_", "prof.prof_sparse_qp.convert"], "function", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "prof_sparse_qp", "(", "trial", ",", "nz", ",", "nbatch", ",", "cons", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "trials", "=", "[", "]", "\n", "\n", "npr", ".", "seed", "(", "trial", ")", "\n", "\n", "A", "=", "sparse", ".", "random", "(", "nz", ",", "nz", ",", "density", "=", ".01", ")", "+", "sparse", ".", "eye", "(", "nz", ")", "\n", "A_rows", ",", "A_cols", "=", "A", ".", "nonzero", "(", ")", "\n", "\n", "G", "=", "sparse", ".", "random", "(", "nz", ",", "nz", ",", "density", "=", ".01", ")", "+", "sparse", ".", "eye", "(", "nz", ")", "\n", "G_rows", ",", "G_cols", "=", "G", ".", "nonzero", "(", ")", "\n", "Q", "=", "sparse", ".", "eye", "(", "nz", ")", "\n", "\n", "xs", "=", "npr", ".", "randn", "(", "nbatch", ",", "nz", ")", "\n", "p", "=", "npr", ".", "randn", "(", "nbatch", ",", "nz", ")", "\n", "b", "=", "np", ".", "array", "(", "[", "A", "@", "xs", "[", "i", "]", "for", "i", "in", "range", "(", "nbatch", ")", "]", ")", "\n", "h", "=", "np", ".", "array", "(", "[", "G", "@", "xs", "[", "i", "]", "for", "i", "in", "range", "(", "nbatch", ")", "]", ")", "\n", "\n", "def", "convert", "(", "A", ")", ":", "\n", "        ", "A", "=", "[", "A", ".", "todense", "(", ")", "for", "_", "in", "range", "(", "nbatch", ")", "]", "\n", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "A", ")", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "", "Q_tch", ",", "A_tch", ",", "G_tch", "=", "[", "convert", "(", "mat", ")", "for", "mat", "in", "[", "Q", ",", "A", ",", "G", "]", "]", "\n", "\n", "p_tch", ",", "b_tch", ",", "h_tch", "=", "[", "\n", "torch", ".", "from_numpy", "(", "x", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "for", "x", "in", "[", "p", ",", "b", ",", "h", "]", "\n", "]", "\n", "\n", "if", "cuda", ":", "\n", "        ", "p_tch", ",", "Q_tch", ",", "G_tch", ",", "h_tch", ",", "A_tch", ",", "b_tch", "=", "[", "\n", "x", ".", "cuda", "(", ")", "for", "x", "in", "[", "p_tch", ",", "Q_tch", ",", "G_tch", ",", "h_tch", ",", "A_tch", ",", "b_tch", "]", "]", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "x", "=", "QPFunction", "(", "verbose", "=", "False", ",", "eps", "=", "1e-8", ",", "notImprovedLim", "=", "5", ",", "\n", "maxIter", "=", "1000", ")", "(", "Q_tch", ",", "p_tch", ",", "G_tch", ",", "h_tch", ",", "A_tch", ",", "b_tch", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "trials", ".", "append", "(", "{", "\n", "'trial'", ":", "trial", ",", "\n", "'nz'", ":", "nz", ",", "\n", "'nbatch'", ":", "nbatch", ",", "\n", "'cuda'", ":", "cuda", ",", "\n", "'mode'", ":", "'qpth'", ",", "\n", "'direction'", ":", "'forward'", ",", "\n", "'time'", ":", "t", ",", "\n", "'qp'", ":", "'sparse'", "\n", "}", ")", "\n", "\n", "y", "=", "x", ".", "sum", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y", ".", "backward", "(", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "trials", ".", "append", "(", "{", "\n", "'trial'", ":", "trial", ",", "\n", "'nz'", ":", "nz", ",", "\n", "'nbatch'", ":", "nbatch", ",", "\n", "'cuda'", ":", "cuda", ",", "\n", "'mode'", ":", "'qpth'", ",", "\n", "'direction'", ":", "'backward'", ",", "\n", "'time'", ":", "t", ",", "\n", "'qp'", ":", "'sparse'", "\n", "}", ")", "\n", "\n", "_p", "=", "cp", ".", "Parameter", "(", "(", "nz", ",", "1", ")", ")", "\n", "_b", "=", "cp", ".", "Parameter", "(", "(", "nz", ",", "1", ")", ")", "\n", "_h", "=", "cp", ".", "Parameter", "(", "(", "nz", ",", "1", ")", ")", "\n", "\n", "_z", "=", "cp", ".", "Variable", "(", "(", "nz", ",", "1", ")", ")", "\n", "\n", "obj", "=", "cp", ".", "Minimize", "(", "0.5", "*", "cp", ".", "sum_squares", "(", "_z", ")", "+", "_p", ".", "T", "@", "_z", ")", "\n", "cons", "=", "[", "G", "@", "_z", "<=", "_h", ",", "\n", "A", "@", "_z", "==", "_b", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "cons", ")", "\n", "\n", "p_tch", ",", "b_tch", ",", "h_tch", "=", "[", "torch", ".", "from_numpy", "(", "x", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "requires_grad_", "(", ")", "\n", "for", "x", "in", "[", "p", ",", "b", ",", "h", "]", "]", "\n", "\n", "solver_args", "=", "{", "\n", "'mode'", ":", "'lsqr'", ",", "\n", "'verbose'", ":", "False", ",", "\n", "'max_iters'", ":", "1000", ",", "\n", "'eps'", ":", "1e-6", ",", "\n", "'use_indirect'", ":", "False", ",", "\n", "'gpu'", ":", "False", ",", "\n", "'n_jobs_forward'", ":", "-", "1", ",", "\n", "'n_jobs_backward'", ":", "-", "1", "\n", "}", "\n", "solve", "=", "CvxpyLayer", "(", "prob", ",", "[", "_p", ",", "_b", ",", "_h", "]", ",", "[", "_z", "]", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "z", ",", "=", "solve", "(", "p_tch", ",", "b_tch", ",", "h_tch", ",", "solver_args", "=", "solver_args", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "trials", ".", "append", "(", "{", "\n", "'trial'", ":", "trial", ",", "\n", "'nz'", ":", "nz", ",", "\n", "'nbatch'", ":", "nbatch", ",", "\n", "'cuda'", ":", "cuda", ",", "\n", "'mode'", ":", "'cvxpylayers'", ",", "\n", "'direction'", ":", "'forward'", ",", "\n", "'time'", ":", "t", ",", "\n", "'qp'", ":", "'sparse'", ",", "\n", "'canon_time'", ":", "solve", ".", "info", ".", "get", "(", "\"canon_time\"", ")", "\n", "}", ")", "\n", "\n", "y", "=", "z", ".", "sum", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y", ".", "backward", "(", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "trials", ".", "append", "(", "{", "\n", "'trial'", ":", "trial", ",", "\n", "'nz'", ":", "nz", ",", "\n", "'nbatch'", ":", "nbatch", ",", "\n", "'cuda'", ":", "cuda", ",", "\n", "'mode'", ":", "'cvxpylayers'", ",", "\n", "'direction'", ":", "'backward'", ",", "\n", "'time'", ":", "t", ",", "\n", "'qp'", ":", "'sparse'", ",", "\n", "'dcanon_time'", ":", "solve", ".", "info", ".", "get", "(", "\"dcanon_time\"", ")", "\n", "}", ")", "\n", "return", "trials", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.prof.prof_dense_qp": [[188, 315], ["numpy.seed", "numpy.rand", "numpy.randn", "torch.Tensor", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "torch.cuda.synchronize", "trials.append", "x.sum", "time.time", "z.sum.backward", "trials.append", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "numpy.array", "cvxpylayers.torch.cvxpylayer.CvxpyLayer", "time.time", "cvxpylayers.torch.cvxpylayer.CvxpyLayer.", "trials.append", "z.sum", "time.time", "z.sum.backward", "trials.append", "numpy.matmul", "numpy.randn", "numpy.randn", "numpy.rand", "torch.from_numpy().double().requires_grad_", "qpth.qp.QPFunction", "time.time", "time.time", "torch.from_numpy().double().requires_grad_", "p_tch.unsqueeze", "h_tch.unsqueeze", "time.time", "time.time", "npr.rand.transpose", "numpy.eye", "numpy.matmul().squeeze", "numpy.concatenate", "numpy.stack", "numpy.ones", "x.cuda", "scipy.linalg.sqrtm", "cvxpylayers.torch.cvxpylayer.CvxpyLayer.info.get", "cvxpylayers.torch.cvxpylayer.CvxpyLayer.info.get", "torch.from_numpy().double", "cvxpy.sum_squares", "torch.from_numpy().double", "numpy.matmul", "numpy.eye", "numpy.expand_dims", "numpy.eye", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "prof_dense_qp", "(", "trial", ",", "nz", ",", "nbatch", ",", "cons", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "trials", "=", "[", "]", "\n", "\n", "npr", ".", "seed", "(", "trial", ")", "\n", "\n", "L", "=", "npr", ".", "rand", "(", "nbatch", ",", "nz", ",", "nz", ")", "\n", "Q", "=", "np", ".", "matmul", "(", "L", ",", "L", ".", "transpose", "(", "(", "0", ",", "2", ",", "1", ")", ")", ")", "+", "1e-3", "*", "np", ".", "eye", "(", "nz", ",", "nz", ")", "\n", "p", "=", "npr", ".", "randn", "(", "nbatch", ",", "nz", ")", "\n", "\n", "if", "cons", "==", "'dense'", ":", "\n", "        ", "nineq", "=", "nz", "\n", "G", "=", "npr", ".", "randn", "(", "nbatch", ",", "nineq", ",", "nz", ")", "\n", "z0", "=", "npr", ".", "randn", "(", "nbatch", ",", "nz", ")", "\n", "s0", "=", "npr", ".", "rand", "(", "nbatch", ",", "nineq", ")", "\n", "h", "=", "np", ".", "matmul", "(", "G", ",", "np", ".", "expand_dims", "(", "z0", ",", "axis", "=", "(", "2", ")", ")", ")", ".", "squeeze", "(", "2", ")", "+", "s0", "\n", "", "elif", "cons", "==", "'box'", ":", "\n", "        ", "nineq", "=", "2", "*", "nz", "\n", "G", "=", "np", ".", "concatenate", "(", "(", "-", "np", ".", "eye", "(", "nz", ")", ",", "np", ".", "eye", "(", "nz", ")", ")", ")", "\n", "G", "=", "np", ".", "stack", "(", "[", "G", "]", "*", "nbatch", ")", "\n", "h", "=", "np", ".", "ones", "(", "(", "nbatch", ",", "2", "*", "nz", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "p_tch", ",", "Q_tch", ",", "G_tch", ",", "h_tch", "=", "[", "\n", "torch", ".", "from_numpy", "(", "x", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "for", "x", "in", "[", "p", ",", "Q", ",", "G", ",", "h", "]", "\n", "]", "\n", "if", "cuda", ":", "\n", "        ", "p_tch", ",", "Q_tch", ",", "G_tch", ",", "h_tch", "=", "[", "x", ".", "cuda", "(", ")", "\n", "for", "x", "in", "[", "p_tch", ",", "Q_tch", ",", "G_tch", ",", "h_tch", "]", "]", "\n", "\n", "", "e", "=", "torch", ".", "Tensor", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "x", "=", "QPFunction", "(", "verbose", "=", "False", ",", "eps", "=", "1e-8", ",", "notImprovedLim", "=", "5", ",", "\n", "maxIter", "=", "1000", ")", "(", "Q_tch", ",", "p_tch", ",", "G_tch", ",", "h_tch", ",", "e", ",", "e", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "trials", ".", "append", "(", "{", "\n", "'trial'", ":", "trial", ",", "\n", "'nz'", ":", "nz", ",", "\n", "'nbatch'", ":", "nbatch", ",", "\n", "'cuda'", ":", "cuda", ",", "\n", "'mode'", ":", "'qpth'", ",", "\n", "'direction'", ":", "'forward'", ",", "\n", "'time'", ":", "t", ",", "\n", "'qp'", ":", "'dense'", "\n", "}", ")", "\n", "\n", "y", "=", "x", ".", "sum", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y", ".", "backward", "(", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "trials", ".", "append", "(", "{", "\n", "'trial'", ":", "trial", ",", "\n", "'nz'", ":", "nz", ",", "\n", "'nbatch'", ":", "nbatch", ",", "\n", "'cuda'", ":", "cuda", ",", "\n", "'mode'", ":", "'qpth'", ",", "\n", "'direction'", ":", "'backward'", ",", "\n", "'time'", ":", "t", ",", "\n", "'qp'", ":", "'dense'", "\n", "}", ")", "\n", "\n", "_Q_sqrt", "=", "cp", ".", "Parameter", "(", "(", "nz", ",", "nz", ")", ")", "\n", "_p", "=", "cp", ".", "Parameter", "(", "(", "nz", ",", "1", ")", ")", "\n", "_G", "=", "cp", ".", "Parameter", "(", "(", "nineq", ",", "nz", ")", ")", "\n", "_h", "=", "cp", ".", "Parameter", "(", "(", "nineq", ",", "1", ")", ")", "\n", "_z", "=", "cp", ".", "Variable", "(", "(", "nz", ",", "1", ")", ")", "\n", "obj", "=", "cp", ".", "Minimize", "(", "0.5", "*", "cp", ".", "sum_squares", "(", "_Q_sqrt", "@", "_z", ")", "+", "_p", ".", "T", "@", "_z", ")", "\n", "cons", "=", "[", "_G", "@", "_z", "<=", "_h", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "cons", ")", "\n", "\n", "Q_sqrt", "=", "np", ".", "array", "(", "[", "sqrtm", "(", "q", ")", "for", "q", "in", "Q", "]", ")", "\n", "Q_sqrt_tch", ",", "p_tch", ",", "G_tch", ",", "h_tch", "=", "[", "\n", "torch", ".", "from_numpy", "(", "x", ")", ".", "double", "(", ")", ".", "requires_grad_", "(", ")", "\n", "for", "x", "in", "[", "Q_sqrt", ",", "p", ",", "G", ",", "h", "]", "]", "\n", "\n", "solver_args", "=", "{", "\n", "'mode'", ":", "'dense'", ",", "\n", "'verbose'", ":", "False", ",", "\n", "'max_iters'", ":", "1000", ",", "\n", "'eps'", ":", "1e-6", ",", "\n", "'use_indirect'", ":", "False", ",", "\n", "'gpu'", ":", "False", ",", "\n", "'n_jobs_forward'", ":", "12", ",", "\n", "'n_jobs_backward'", ":", "12", "\n", "}", "\n", "solve", "=", "CvxpyLayer", "(", "prob", ",", "[", "_Q_sqrt", ",", "_p", ",", "_G", ",", "_h", "]", ",", "[", "_z", "]", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "z", ",", "=", "solve", "(", "\n", "Q_sqrt_tch", ",", "p_tch", ".", "unsqueeze", "(", "-", "1", ")", ",", "G_tch", ",", "h_tch", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "solver_args", "=", "solver_args", "\n", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "trials", ".", "append", "(", "{", "\n", "'trial'", ":", "trial", ",", "\n", "'nz'", ":", "nz", ",", "\n", "'nbatch'", ":", "nbatch", ",", "\n", "'cuda'", ":", "cuda", ",", "\n", "'mode'", ":", "f'cvxpylayers'", ",", "\n", "'direction'", ":", "'forward'", ",", "\n", "'time'", ":", "t", ",", "\n", "'qp'", ":", "'dense'", ",", "\n", "'canon_time'", ":", "solve", ".", "info", ".", "get", "(", "\"canon_time\"", ")", "\n", "}", ")", "\n", "\n", "y", "=", "z", ".", "sum", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "y", ".", "backward", "(", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "trials", ".", "append", "(", "{", "\n", "'trial'", ":", "trial", ",", "\n", "'nz'", ":", "nz", ",", "\n", "'nbatch'", ":", "nbatch", ",", "\n", "'cuda'", ":", "cuda", ",", "\n", "'mode'", ":", "f'cvxpylayers'", ",", "\n", "'direction'", ":", "'backward'", ",", "\n", "'time'", ":", "t", ",", "\n", "'qp'", ":", "'dense'", ",", "\n", "'dcanon_time'", ":", "solve", ".", "info", ".", "get", "(", "\"dcanon_time\"", ")", "\n", "}", ")", "\n", "\n", "return", "trials", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.simple_qp": [[11, 48], ["print", "numpy.seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "cp.Problem.get_problem_data", "print", "numpy.randn", "numpy.randn", "numpy.randn", "cp.Problem.solve", "numpy.randn", "scipy.csc_matrix", "param_prob.apply_param_jac", "print", "param_prob.split_solution", "print", "print", "print", "cp.Parameter.value.dot", "numpy.randn", "numpy.reshape", "numpy.randn", "param_prob.split_adjoint", "cvxpy.sum_squares"], "function", ["None"], ["def", "simple_qp", "(", ")", ":", "\n", "# print(f'--- {sys._getframe().f_code.co_name} ---')", "\n", "    ", "print", "(", "'simple qp'", ")", "\n", "npr", ".", "seed", "(", "0", ")", "\n", "nx", ",", "ncon", "=", "2", ",", "3", "\n", "\n", "G", "=", "cp", ".", "Parameter", "(", "(", "ncon", ",", "nx", ")", ")", "\n", "h", "=", "cp", ".", "Parameter", "(", "ncon", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "nx", ")", "\n", "obj", "=", "cp", ".", "Minimize", "(", "0.5", "*", "cp", ".", "sum_squares", "(", "x", "-", "1", ")", ")", "\n", "cons", "=", "[", "G", "*", "x", "<=", "h", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "cons", ")", "\n", "\n", "data", ",", "chain", ",", "inv_data", "=", "prob", ".", "get_problem_data", "(", "solver", "=", "cp", ".", "SCS", ")", "\n", "param_prob", "=", "data", "[", "cp", ".", "settings", ".", "PARAM_PROB", "]", "\n", "print", "(", "param_prob", ".", "A", ".", "A", ")", "\n", "\n", "x0", "=", "npr", ".", "randn", "(", "nx", ")", "\n", "s0", "=", "npr", ".", "randn", "(", "ncon", ")", "\n", "G", ".", "value", "=", "npr", ".", "randn", "(", "ncon", ",", "nx", ")", "\n", "h", ".", "value", "=", "G", ".", "value", ".", "dot", "(", "x0", ")", "+", "s0", "\n", "\n", "prob", ".", "solve", "(", "solver", "=", "cp", ".", "SCS", ")", "\n", "\n", "delC", "=", "npr", ".", "randn", "(", "param_prob", ".", "c", ".", "shape", "[", "0", "]", ")", "[", ":", "-", "1", "]", "\n", "delA", "=", "npr", ".", "randn", "(", "param_prob", ".", "A", ".", "shape", "[", "0", "]", ")", "\n", "num_con", "=", "delA", ".", "size", "//", "(", "param_prob", ".", "x", ".", "size", "+", "1", ")", "\n", "delb", "=", "delA", "[", "-", "num_con", ":", "]", "\n", "delA", "=", "delA", "[", ":", "-", "num_con", "]", "\n", "delA", "=", "sp", ".", "csc_matrix", "(", "np", ".", "reshape", "(", "delA", ",", "(", "num_con", ",", "param_prob", ".", "x", ".", "size", ")", ")", ")", "\n", "del_param_dict", "=", "param_prob", ".", "apply_param_jac", "(", "delC", ",", "delA", ",", "delb", ")", "\n", "print", "(", "del_param_dict", ")", "\n", "var_map", "=", "param_prob", ".", "split_solution", "(", "npr", ".", "randn", "(", "param_prob", ".", "x", ".", "size", ")", ")", "\n", "print", "(", "var_map", ")", "\n", "print", "(", "param_prob", ".", "split_adjoint", "(", "var_map", ")", ")", "\n", "\n", "print", "(", "x", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.full_qp": [[50, 83], ["print", "numpy.seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "numpy.randn", "numpy.randn", "numpy.randn", "numpy.randn", "cp.Parameter.value.dot", "numpy.randn", "numpy.randn", "cp.Problem.solve", "print", "cp.Parameter.value.dot", "cvxpy.sum_squares"], "function", ["None"], ["", "def", "full_qp", "(", ")", ":", "\n", "# print(f'--- {sys._getframe().f_code.co_name} ---')", "\n", "    ", "print", "(", "'full qp'", ")", "\n", "npr", ".", "seed", "(", "0", ")", "\n", "nx", ",", "ncon_eq", ",", "ncon_ineq", "=", "5", ",", "2", ",", "3", "\n", "\n", "Q", "=", "cp", ".", "Parameter", "(", "(", "nx", ",", "nx", ")", ")", "\n", "p", "=", "cp", ".", "Parameter", "(", "(", "nx", ",", "1", ")", ")", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "ncon_eq", ",", "nx", ")", ")", "\n", "b", "=", "cp", ".", "Parameter", "(", "ncon_eq", ")", "\n", "G", "=", "cp", ".", "Parameter", "(", "(", "ncon_ineq", ",", "nx", ")", ")", "\n", "h", "=", "cp", ".", "Parameter", "(", "ncon_ineq", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "nx", ")", "\n", "# obj = cp.Minimize(0.5*cp.quad_form(x, Q) + p.T * x)", "\n", "obj", "=", "cp", ".", "Minimize", "(", "0.5", "*", "cp", ".", "sum_squares", "(", "Q", "@", "x", ")", "+", "p", ".", "T", "*", "x", ")", "\n", "cons", "=", "[", "A", "*", "x", "==", "b", ",", "G", "*", "x", "<=", "h", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "cons", ")", "\n", "\n", "x0", "=", "npr", ".", "randn", "(", "nx", ")", "\n", "s0", "=", "npr", ".", "randn", "(", "ncon_ineq", ")", "\n", "\n", "G", ".", "value", "=", "npr", ".", "randn", "(", "ncon_ineq", ",", "nx", ")", "\n", "h", ".", "value", "=", "G", ".", "value", ".", "dot", "(", "x0", ")", "+", "s0", "\n", "\n", "A", ".", "value", "=", "npr", ".", "randn", "(", "ncon_eq", ",", "nx", ")", "\n", "b", ".", "value", "=", "A", ".", "value", ".", "dot", "(", "x0", ")", "\n", "\n", "L", "=", "npr", ".", "randn", "(", "nx", ",", "nx", ")", "\n", "Q", ".", "value", "=", "L", ".", "T", "# L.dot(L.T)", "\n", "p", ".", "value", "=", "npr", ".", "randn", "(", "nx", ",", "1", ")", "\n", "\n", "prob", ".", "solve", "(", "solver", "=", "cp", ".", "SCS", ")", "\n", "print", "(", "x", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.ball_con": [[85, 109], ["print", "numpy.seed", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "numpy.randn", "numpy.randn", "numpy.randn", "cp.Problem.solve", "print", "cvxpy.sum_squares", "cvxpy.sum_squares"], "function", ["None"], ["", "def", "ball_con", "(", ")", ":", "\n", "# print(f'--- {sys._getframe().f_code.co_name} ---')", "\n", "    ", "print", "(", "'ball con'", ")", "\n", "npr", ".", "seed", "(", "0", ")", "\n", "\n", "n", "=", "2", "\n", "\n", "A", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "n", ")", ")", "\n", "z", "=", "cp", ".", "Parameter", "(", "n", ")", "\n", "p", "=", "cp", ".", "Parameter", "(", "n", ")", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "t", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "Minimize", "(", "0.5", "*", "cp", ".", "sum_squares", "(", "x", "-", "p", ")", ")", "\n", "# TODO automate introduction of variables.", "\n", "cons", "=", "[", "0.5", "*", "cp", ".", "sum_squares", "(", "A", "*", "t", ")", "<=", "1", ",", "t", "==", "(", "x", "-", "z", ")", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "cons", ")", "\n", "\n", "L", "=", "npr", ".", "randn", "(", "n", ",", "n", ")", "\n", "A", ".", "value", "=", "L", ".", "T", "\n", "z", ".", "value", "=", "npr", ".", "randn", "(", "n", ")", "\n", "p", ".", "value", "=", "npr", ".", "randn", "(", "n", ")", "\n", "\n", "prob", ".", "solve", "(", "solver", "=", "cp", ".", "SCS", ")", "\n", "print", "(", "x", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.relu": [[111, 127], ["print", "numpy.seed", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "numpy.randn", "cp.Problem.solve", "print", "cvxpy.sum_squares"], "function", ["None"], ["", "def", "relu", "(", ")", ":", "\n", "# print(f'--- {sys._getframe().f_code.co_name} ---')", "\n", "    ", "print", "(", "'relu'", ")", "\n", "npr", ".", "seed", "(", "0", ")", "\n", "\n", "n", "=", "4", "\n", "_x", "=", "cp", ".", "Parameter", "(", "n", ")", "\n", "_y", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "Minimize", "(", "cp", ".", "sum_squares", "(", "_y", "-", "_x", ")", ")", "\n", "cons", "=", "[", "_y", ">=", "0", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "cons", ")", "\n", "\n", "_x", ".", "value", "=", "npr", ".", "randn", "(", "n", ")", "\n", "\n", "prob", ".", "solve", "(", "solver", "=", "cp", ".", "SCS", ")", "\n", "print", "(", "_y", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.sigmoid": [[129, 144], ["print", "numpy.seed", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "numpy.randn", "cp.Problem.solve", "print", "cvxpy.sum", "cvxpy.entr", "cvxpy.entr"], "function", ["None"], ["", "def", "sigmoid", "(", ")", ":", "\n", "# print(f'--- {sys._getframe().f_code.co_name} ---')", "\n", "    ", "print", "(", "'sigmoid'", ")", "\n", "npr", ".", "seed", "(", "0", ")", "\n", "\n", "n", "=", "4", "\n", "_x", "=", "cp", ".", "Parameter", "(", "(", "n", ",", "1", ")", ")", "\n", "_y", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "obj", "=", "cp", ".", "Minimize", "(", "-", "_x", ".", "T", "*", "_y", "-", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "_y", ")", "+", "cp", ".", "entr", "(", "1.", "-", "_y", ")", ")", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ")", "\n", "\n", "_x", ".", "value", "=", "npr", ".", "randn", "(", "n", ",", "1", ")", "\n", "\n", "prob", ".", "solve", "(", "solver", "=", "cp", ".", "SCS", ")", "\n", "print", "(", "_y", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.softmax": [[146, 162], ["print", "numpy.seed", "cvxpy.Parameter", "cvxpy.Variable", "cvxpy.Minimize", "cvxpy.Problem", "numpy.randn", "cp.Problem.solve", "print", "cvxpy.sum", "sum", "cvxpy.entr"], "function", ["None"], ["", "def", "softmax", "(", ")", ":", "\n", "# print(f'--- {sys._getframe().f_code.co_name} ---')", "\n", "    ", "print", "(", "'softmax'", ")", "\n", "npr", ".", "seed", "(", "0", ")", "\n", "\n", "d", "=", "4", "\n", "_x", "=", "cp", ".", "Parameter", "(", "(", "d", ",", "1", ")", ")", "\n", "_y", "=", "cp", ".", "Variable", "(", "d", ")", "\n", "obj", "=", "cp", ".", "Minimize", "(", "-", "_x", ".", "T", "*", "_y", "-", "cp", ".", "sum", "(", "cp", ".", "entr", "(", "_y", ")", ")", ")", "\n", "cons", "=", "[", "sum", "(", "_y", ")", "==", "1.", "]", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "cons", ")", "\n", "\n", "_x", ".", "value", "=", "npr", ".", "randn", "(", "d", ",", "1", ")", "\n", "\n", "prob", ".", "solve", "(", "solver", "=", "cp", ".", "SCS", ")", "\n", "print", "(", "_y", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.sdp": [[164, 179], ["print", "numpy.seed", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Minimize", "cvxpy.Problem", "numpy.abs", "print", "cp.Problem.solve", "print", "cvxpy.trace", "numpy.randn", "cp.Parameter.value.sum"], "function", ["None"], ["", "def", "sdp", "(", ")", ":", "\n", "    ", "print", "(", "'sdp'", ")", "\n", "npr", ".", "seed", "(", "0", ")", "\n", "\n", "d", "=", "2", "\n", "X", "=", "cp", ".", "Variable", "(", "(", "d", ",", "d", ")", ",", "PSD", "=", "True", ")", "\n", "Y", "=", "cp", ".", "Parameter", "(", "(", "d", ",", "d", ")", ")", "\n", "obj", "=", "cp", ".", "Minimize", "(", "cp", ".", "trace", "(", "Y", "*", "X", ")", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "obj", ",", "[", "X", ">=", "1", "]", ")", "\n", "\n", "Y", ".", "value", "=", "np", ".", "abs", "(", "npr", ".", "randn", "(", "d", ",", "d", ")", ")", "\n", "print", "(", "Y", ".", "value", ".", "sum", "(", ")", ")", "\n", "\n", "prob", ".", "solve", "(", "solver", "=", "cp", ".", "SCS", ",", "verbose", "=", "True", ")", "\n", "print", "(", "X", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.examples.cvxpy_examples.running_example": [[181, 204], ["print", "cvxpy.Variable", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Parameter", "cvxpy.Problem", "cp.Problem.is_dcp", "cp.Problem.is_dpp", "print", "torch.randn", "torch.randn", "torch.rand", "cvxpylayers.torch.cvxpylayer.CvxpyLayer", "cvxpylayers.torch.cvxpylayer.CvxpyLayer.", "x_star.sum().backward", "print", "print", "cvxpy.norm", "cvxpy.Minimize", "cp.Problem.is_dpp", "cvxpy.norm", "x_star.sum"], "function", ["home.repos.pwc.inspect_result.cvxgrp_cvxpylayers.jax.cvxpylayer.CvxpyLayer"], ["", "def", "running_example", "(", ")", ":", "\n", "    ", "print", "(", "\"running example\"", ")", "\n", "m", "=", "20", "\n", "n", "=", "10", "\n", "x", "=", "cp", ".", "Variable", "(", "(", "n", ",", "1", ")", ")", "\n", "F", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "n", ")", ")", "\n", "g", "=", "cp", ".", "Parameter", "(", "(", "m", ",", "1", ")", ")", "\n", "lambd", "=", "cp", ".", "Parameter", "(", "(", "1", ",", "1", ")", ",", "nonneg", "=", "True", ")", "\n", "objective_fn", "=", "cp", ".", "norm", "(", "F", "@", "x", "-", "g", ")", "+", "lambd", "*", "cp", ".", "norm", "(", "x", ")", "\n", "constraints", "=", "[", "x", ">=", "0", "]", "\n", "problem", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "objective_fn", ")", ",", "constraints", ")", "\n", "assert", "problem", ".", "is_dcp", "(", ")", "\n", "assert", "problem", ".", "is_dpp", "(", ")", "\n", "print", "(", "\"is_dpp: \"", ",", "problem", ".", "is_dpp", "(", ")", ")", "\n", "\n", "F_t", "=", "torch", ".", "randn", "(", "m", ",", "n", ",", "requires_grad", "=", "True", ")", "\n", "g_t", "=", "torch", ".", "randn", "(", "m", ",", "1", ",", "requires_grad", "=", "True", ")", "\n", "lambd_t", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "requires_grad", "=", "True", ")", "\n", "layer", "=", "CvxpyLayer", "(", "problem", ",", "parameters", "=", "[", "F", ",", "g", ",", "lambd", "]", ",", "variables", "=", "[", "x", "]", ")", "\n", "x_star", ",", "=", "layer", "(", "F_t", ",", "g_t", ",", "lambd_t", ")", "\n", "x_star", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "print", "(", "\"F_t grad: \"", ",", "F_t", ".", "grad", ")", "\n", "print", "(", "\"g_t grad: \"", ",", "g_t", ".", "grad", ")", "\n", "\n"]]}