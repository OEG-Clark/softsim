{"home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.__init__": [[13, 76], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ValueError", "ValueError", "ValueError", "model.KGEModel.embedding_range.item", "model.KGEModel.embedding_range.item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model.KGEModel.embedding_range.item", "model.KGEModel.embedding_range.item", "model.KGEModel.embedding_range.item", "model.KGEModel.embedding_range.item", "model.KGEModel.embedding_range.item", "model.KGEModel.embedding_range.item", "model.KGEModel.gamma.item", "model.KGEModel.embedding_range.item"], "methods", ["home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.BidirectionalOneShotIterator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ",", "nentity", ",", "nrelation", ",", "hidden_dim", ",", "gamma", ",", "\n", "double_entity_embedding", "=", "False", ",", "double_relation_embedding", "=", "False", ")", ":", "\n", "        ", "super", "(", "KGEModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "nentity", "=", "nentity", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "epsilon", "=", "2.0", "\n", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "gamma", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "\n", "self", ".", "embedding_range", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "(", "self", ".", "gamma", ".", "item", "(", ")", "+", "self", ".", "epsilon", ")", "/", "hidden_dim", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "\n", "self", ".", "entity_dim", "=", "hidden_dim", "*", "2", "if", "double_entity_embedding", "else", "hidden_dim", "\n", "self", ".", "relation_dim", "=", "hidden_dim", "*", "2", "if", "double_relation_embedding", "else", "hidden_dim", "\n", "\n", "self", ".", "entity_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "nentity", ",", "self", ".", "entity_dim", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "entity_embedding", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "self", ".", "relation_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "nrelation", ",", "self", ".", "relation_dim", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "relation_embedding", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "if", "model_name", "==", "'TransD'", ":", "\n", "            ", "self", ".", "proj_entity_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "nentity", ",", "self", ".", "entity_dim", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "proj_entity_embedding", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "self", ".", "proj_relation_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "nrelation", ",", "self", ".", "relation_dim", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "proj_relation_embedding", ",", "\n", "a", "=", "-", "self", ".", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "self", ".", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "", "if", "model_name", "==", "'pRotatE'", ":", "\n", "            ", "self", ".", "modulus", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "[", "0.5", "*", "self", ".", "embedding_range", ".", "item", "(", ")", "]", "]", ")", ")", "\n", "\n", "# Do not forget to modify this line when you add a new model in the \"forward\" function", "\n", "", "if", "model_name", "not", "in", "[", "'TransE'", ",", "'DistMult'", ",", "'ComplEx'", ",", "'RotatE'", ",", "'pRotatE'", ",", "'TransD'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'model %s not supported'", "%", "model_name", ")", "\n", "\n", "", "if", "model_name", "==", "'RotatE'", "and", "(", "not", "double_entity_embedding", "or", "double_relation_embedding", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'RotatE should use --double_entity_embedding'", ")", "\n", "\n", "", "if", "model_name", "==", "'ComplEx'", "and", "(", "not", "double_entity_embedding", "or", "not", "double_relation_embedding", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'ComplEx should use --double_entity_embedding and --double_relation_embedding'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.forward": [[77, 240], ["torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "ValueError", "sample.size", "hasattr", "hasattr", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "head_part.size", "head_part.size", "hasattr", "hasattr", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "ValueError", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "tail_part.size", "tail_part.size", "hasattr", "hasattr", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "head_part.view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "head_part.view", "tail_part.view", "tail_part.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "sample", ",", "mode", "=", "'single'", ")", ":", "\n", "        ", "'''\n        Forward function that calculate the score of a batch of triples.\n        In the 'single' mode, sample is a batch of triple.\n        In the 'head-batch' or 'tail-batch' mode, sample consists two part.\n        The first part is usually the positive sample.\n        And the second part is the entities in the negative samples.\n        Because negative samples and positive samples usually share two elements \n        in their triple ((head, relation) or (relation, tail)).\n        '''", "\n", "\n", "if", "mode", "==", "'single'", ":", "\n", "            ", "batch_size", ",", "negative_sample_size", "=", "sample", ".", "size", "(", "0", ")", ",", "1", "\n", "\n", "head", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "0", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "relation", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "2", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'proj_entity_embedding'", ")", "and", "hasattr", "(", "self", ",", "'proj_relation_embedding'", ")", ":", "\n", "                ", "head_t", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "proj_entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "0", "]", "\n", ")", ".", "view", "(", "batch_size", ",", "negative_sample_size", ",", "-", "1", ")", "\n", "\n", "relation_t", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "proj_relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail_t", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "proj_entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "2", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "head_t", "=", "None", "\n", "relation_t", "=", "None", "\n", "tail_t", "=", "None", "\n", "\n", "", "", "elif", "mode", "==", "'head-batch'", ":", "\n", "            ", "tail_part", ",", "head_part", "=", "sample", "\n", "batch_size", ",", "negative_sample_size", "=", "head_part", ".", "size", "(", "0", ")", ",", "head_part", ".", "size", "(", "1", ")", "\n", "\n", "head", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "negative_sample_size", ",", "-", "1", ")", "\n", "\n", "relation", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", "[", ":", ",", "2", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'proj_entity_embedding'", ")", "and", "hasattr", "(", "self", ",", "'proj_relation_embedding'", ")", ":", "\n", "                ", "head_t", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "proj_entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "negative_sample_size", ",", "-", "1", ")", "\n", "\n", "relation_t", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "proj_relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail_t", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "proj_entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", "[", ":", ",", "2", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "head_t", "=", "None", "\n", "relation_t", "=", "None", "\n", "tail_t", "=", "None", "\n", "\n", "", "", "elif", "mode", "==", "'tail-batch'", ":", "\n", "            ", "head_part", ",", "tail_part", "=", "sample", "\n", "batch_size", ",", "negative_sample_size", "=", "tail_part", ".", "size", "(", "0", ")", ",", "tail_part", ".", "size", "(", "1", ")", "\n", "\n", "head", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", "[", ":", ",", "0", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "relation", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "negative_sample_size", ",", "-", "1", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'proj_entity_embedding'", ")", "and", "hasattr", "(", "self", ",", "'proj_relation_embedding'", ")", ":", "\n", "                ", "head_t", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "proj_entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", "[", ":", ",", "0", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "relation_t", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "proj_relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail_t", "=", "torch", ".", "index_select", "(", "\n", "self", ".", "proj_entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "negative_sample_size", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "head_t", "=", "None", "\n", "relation_t", "=", "None", "\n", "tail_t", "=", "None", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'mode %s not supported'", "%", "mode", ")", "\n", "\n", "", "model_func", "=", "{", "\n", "'TransE'", ":", "self", ".", "TransE", ",", "\n", "'TransD'", ":", "self", ".", "TransD", ",", "\n", "'DistMult'", ":", "self", ".", "DistMult", ",", "\n", "'ComplEx'", ":", "self", ".", "ComplEx", ",", "\n", "'RotatE'", ":", "self", ".", "RotatE", ",", "\n", "'pRotatE'", ":", "self", ".", "pRotatE", "\n", "}", "\n", "\n", "if", "self", ".", "model_name", "in", "model_func", ":", "\n", "            ", "score", "=", "model_func", "[", "self", ".", "model_name", "]", "(", "head", ",", "relation", ",", "tail", ",", "head_t", ",", "tail_t", ",", "relation_t", ",", "mode", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'model %s not supported'", "%", "self", ".", "model_name", ")", "\n", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.TransE": [[241, 249], ["model.KGEModel.gamma.item", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "TransE", "(", "self", ",", "head", ",", "relation", ",", "tail", ",", "head_t", ",", "tail_t", ",", "relation_t", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'head-batch'", ":", "\n", "            ", "score", "=", "head", "+", "(", "relation", "-", "tail", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "(", "head", "+", "relation", ")", "-", "tail", "\n", "\n", "", "score", "=", "self", ".", "gamma", ".", "item", "(", ")", "-", "torch", ".", "norm", "(", "score", ",", "p", "=", "1", ",", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel._transfer": [[250, 252], ["torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "_transfer", "(", "self", ",", "e", ",", "e_t", ",", "r_t", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "e", "+", "(", "e", "*", "e_t", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "*", "r_t", ",", "2", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.TransD": [[253, 264], ["model.KGEModel._transfer", "model.KGEModel._transfer", "model.KGEModel.gamma.item", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel._transfer", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel._transfer"], ["", "def", "TransD", "(", "self", ",", "head", ",", "relation", ",", "tail", ",", "head_t", ",", "tail_t", ",", "relation_t", ",", "mode", ")", ":", "\n", "        ", "head_proj", "=", "self", ".", "_transfer", "(", "head", ",", "head_t", ",", "relation_t", ")", "\n", "tail_proj", "=", "self", ".", "_transfer", "(", "tail", ",", "tail_t", ",", "relation_t", ")", "\n", "\n", "if", "mode", "==", "'head-batch'", ":", "\n", "            ", "score", "=", "head_proj", "+", "(", "relation", "-", "tail_proj", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "(", "head_proj", "+", "relation", ")", "-", "tail_proj", "\n", "\n", "", "score", "=", "self", ".", "gamma", ".", "item", "(", ")", "-", "torch", ".", "norm", "(", "score", ",", "p", "=", "1", ",", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.DistMult": [[265, 273], ["score.sum.sum.sum"], "methods", ["None"], ["", "def", "DistMult", "(", "self", ",", "head", ",", "relation", ",", "tail", ",", "head_t", ",", "tail_t", ",", "relation_t", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'head-batch'", ":", "\n", "            ", "score", "=", "head", "*", "(", "relation", "*", "tail", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "(", "head", "*", "relation", ")", "*", "tail", "\n", "\n", "", "score", "=", "score", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.ComplEx": [[274, 290], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "score.sum.sum.sum"], "methods", ["None"], ["", "def", "ComplEx", "(", "self", ",", "head", ",", "relation", ",", "tail", ",", "head_t", ",", "tail_t", ",", "relation_t", ",", "mode", ")", ":", "\n", "        ", "re_head", ",", "im_head", "=", "torch", ".", "chunk", "(", "head", ",", "2", ",", "dim", "=", "2", ")", "\n", "re_relation", ",", "im_relation", "=", "torch", ".", "chunk", "(", "relation", ",", "2", ",", "dim", "=", "2", ")", "\n", "re_tail", ",", "im_tail", "=", "torch", ".", "chunk", "(", "tail", ",", "2", ",", "dim", "=", "2", ")", "\n", "\n", "if", "mode", "==", "'head-batch'", ":", "\n", "            ", "re_score", "=", "re_relation", "*", "re_tail", "+", "im_relation", "*", "im_tail", "\n", "im_score", "=", "re_relation", "*", "im_tail", "-", "im_relation", "*", "re_tail", "\n", "score", "=", "re_head", "*", "re_score", "+", "im_head", "*", "im_score", "\n", "", "else", ":", "\n", "            ", "re_score", "=", "re_head", "*", "re_relation", "-", "im_head", "*", "im_relation", "\n", "im_score", "=", "re_head", "*", "im_relation", "+", "im_head", "*", "re_relation", "\n", "score", "=", "re_score", "*", "re_tail", "+", "im_score", "*", "im_tail", "\n", "\n", "", "score", "=", "score", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.RotatE": [[291, 320], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "score.norm.norm.norm", "model.KGEModel.gamma.item", "score.norm.norm.sum", "model.KGEModel.embedding_range.item"], "methods", ["None"], ["", "def", "RotatE", "(", "self", ",", "head", ",", "relation", ",", "tail", ",", "head_t", ",", "tail_t", ",", "relation_t", ",", "mode", ")", ":", "\n", "        ", "pi", "=", "3.14159265358979323846", "\n", "\n", "re_head", ",", "im_head", "=", "torch", ".", "chunk", "(", "head", ",", "2", ",", "dim", "=", "2", ")", "\n", "re_tail", ",", "im_tail", "=", "torch", ".", "chunk", "(", "tail", ",", "2", ",", "dim", "=", "2", ")", "\n", "\n", "# Make phases of relations uniformly distributed in [-pi, pi]", "\n", "\n", "phase_relation", "=", "relation", "/", "(", "self", ".", "embedding_range", ".", "item", "(", ")", "/", "pi", ")", "\n", "\n", "re_relation", "=", "torch", ".", "cos", "(", "phase_relation", ")", "\n", "im_relation", "=", "torch", ".", "sin", "(", "phase_relation", ")", "\n", "\n", "if", "mode", "==", "'head-batch'", ":", "\n", "            ", "re_score", "=", "re_relation", "*", "re_tail", "+", "im_relation", "*", "im_tail", "\n", "im_score", "=", "re_relation", "*", "im_tail", "-", "im_relation", "*", "re_tail", "\n", "re_score", "=", "re_score", "-", "re_head", "\n", "im_score", "=", "im_score", "-", "im_head", "\n", "", "else", ":", "\n", "            ", "re_score", "=", "re_head", "*", "re_relation", "-", "im_head", "*", "im_relation", "\n", "im_score", "=", "re_head", "*", "im_relation", "+", "im_head", "*", "re_relation", "\n", "re_score", "=", "re_score", "-", "re_tail", "\n", "im_score", "=", "im_score", "-", "im_tail", "\n", "\n", "", "score", "=", "torch", ".", "stack", "(", "[", "re_score", ",", "im_score", "]", ",", "dim", "=", "0", ")", "\n", "score", "=", "score", ".", "norm", "(", "dim", "=", "0", ")", "\n", "\n", "score", "=", "self", ".", "gamma", ".", "item", "(", ")", "-", "score", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.pRotatE": [[321, 340], ["torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "model.KGEModel.gamma.item", "model.KGEModel.embedding_range.item", "model.KGEModel.embedding_range.item", "model.KGEModel.embedding_range.item", "torch.abs.sum", "torch.abs.sum", "torch.abs.sum"], "methods", ["None"], ["", "def", "pRotatE", "(", "self", ",", "head", ",", "relation", ",", "tail", ",", "head_t", ",", "tail_t", ",", "relation_t", ",", "mode", ")", ":", "\n", "        ", "pi", "=", "3.14159262358979323846", "\n", "\n", "# Make phases of entities and relations uniformly distributed in [-pi, pi]", "\n", "\n", "phase_head", "=", "head", "/", "(", "self", ".", "embedding_range", ".", "item", "(", ")", "/", "pi", ")", "\n", "phase_relation", "=", "relation", "/", "(", "self", ".", "embedding_range", ".", "item", "(", ")", "/", "pi", ")", "\n", "phase_tail", "=", "tail", "/", "(", "self", ".", "embedding_range", ".", "item", "(", ")", "/", "pi", ")", "\n", "\n", "if", "mode", "==", "'head-batch'", ":", "\n", "            ", "score", "=", "phase_head", "+", "(", "phase_relation", "-", "phase_tail", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "(", "phase_head", "+", "phase_relation", ")", "-", "phase_tail", "\n", "\n", "", "score", "=", "torch", ".", "sin", "(", "score", ")", "\n", "score", "=", "torch", ".", "abs", "(", "score", ")", "\n", "\n", "score", "=", "self", ".", "gamma", ".", "item", "(", ")", "-", "score", ".", "sum", "(", "dim", "=", "2", ")", "*", "self", ".", "modulus", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.train_step": [[341, 403], ["model.train", "optimizer.zero_grad", "next", "model", "model", "torch.logsigmoid().squeeze", "torch.logsigmoid().squeeze", "torch.logsigmoid().squeeze", "loss.backward", "optimizer.step", "positive_sample.cuda.cuda.cuda", "negative_sample.cuda.cuda.cuda", "subsampling_weight.cuda.cuda.cuda", "torch.logsigmoid().mean", "torch.logsigmoid().mean", "torch.logsigmoid().mean", "positive_sample_loss.item", "negative_sample_loss.item", "loss.item", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid().squeeze.mean", "torch.logsigmoid().mean.mean", "subsampling_weight.cuda.cuda.sum", "subsampling_weight.cuda.cuda.sum", "regularization.item", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "model.entity_embedding.norm", "model.relation_embedding.norm().norm", "torch.softmax", "torch.softmax", "torch.softmax", "model.relation_embedding.norm"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "train_step", "(", "model", ",", "optimizer", ",", "train_iterator", ",", "args", ")", ":", "\n", "        ", "'''\n        A single train step. Apply back-propation and return the loss\n        '''", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "positive_sample", ",", "negative_sample", ",", "subsampling_weight", ",", "mode", "=", "next", "(", "train_iterator", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "            ", "positive_sample", "=", "positive_sample", ".", "cuda", "(", ")", "\n", "negative_sample", "=", "negative_sample", ".", "cuda", "(", ")", "\n", "subsampling_weight", "=", "subsampling_weight", ".", "cuda", "(", ")", "\n", "\n", "", "negative_score", "=", "model", "(", "(", "positive_sample", ",", "negative_sample", ")", ",", "mode", "=", "mode", ")", "\n", "\n", "if", "args", ".", "negative_adversarial_sampling", ":", "\n", "# In self-adversarial sampling, we do not apply back-propagation on the sampling weight", "\n", "            ", "negative_score", "=", "(", "F", ".", "softmax", "(", "negative_score", "*", "args", ".", "adversarial_temperature", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "*", "F", ".", "logsigmoid", "(", "-", "negative_score", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "negative_score", "=", "F", ".", "logsigmoid", "(", "-", "negative_score", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "positive_score", "=", "model", "(", "positive_sample", ")", "\n", "\n", "positive_score", "=", "F", ".", "logsigmoid", "(", "positive_score", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "if", "args", ".", "uni_weight", ":", "\n", "            ", "positive_sample_loss", "=", "-", "positive_score", ".", "mean", "(", ")", "\n", "negative_sample_loss", "=", "-", "negative_score", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "positive_sample_loss", "=", "-", "(", "subsampling_weight", "*", "positive_score", ")", ".", "sum", "(", ")", "/", "subsampling_weight", ".", "sum", "(", ")", "\n", "negative_sample_loss", "=", "-", "(", "subsampling_weight", "*", "negative_score", ")", ".", "sum", "(", ")", "/", "subsampling_weight", ".", "sum", "(", ")", "\n", "\n", "", "loss", "=", "(", "positive_sample_loss", "+", "negative_sample_loss", ")", "/", "2", "\n", "\n", "if", "args", ".", "regularization", "!=", "0.0", ":", "\n", "# Use L3 regularization for ComplEx and DistMult", "\n", "            ", "regularization", "=", "args", ".", "regularization", "*", "(", "\n", "model", ".", "entity_embedding", ".", "norm", "(", "p", "=", "3", ")", "**", "3", "+", "\n", "model", ".", "relation_embedding", ".", "norm", "(", "p", "=", "3", ")", ".", "norm", "(", "p", "=", "3", ")", "**", "3", "\n", ")", "\n", "loss", "=", "loss", "+", "regularization", "\n", "regularization_log", "=", "{", "'regularization'", ":", "regularization", ".", "item", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "regularization_log", "=", "{", "}", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "log", "=", "{", "\n", "**", "regularization_log", ",", "\n", "'positive_sample_loss'", ":", "positive_sample_loss", ".", "item", "(", ")", ",", "\n", "'negative_sample_loss'", ":", "negative_sample_loss", ".", "item", "(", ")", ",", "\n", "'loss'", ":", "loss", ".", "item", "(", ")", "\n", "}", "\n", "\n", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.test_step": [[404, 495], ["model.eval", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "sum", "logs[].keys", "dataloader.TestDataset", "dataloader.TestDataset", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "max", "len", "sum", "len", "positive_sample.cuda.cuda.size", "model", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "range", "positive_sample.cuda.cuda.cuda", "negative_sample.cuda.cuda.cuda", "filter_bias.cuda.cuda.cuda", "logs.append", "logging.info", "ValueError", "ranking.size", "ranking.item", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "test_step", "(", "model", ",", "test_triples", ",", "all_true_triples", ",", "args", ")", ":", "\n", "        ", "'''\n        Evaluate the model on test or valid datasets\n        '''", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# Otherwise use standard (filtered) MRR, MR, HITS@1, HITS@3, and HITS@10 metrics", "\n", "# Prepare dataloader for evaluation", "\n", "test_dataloader_head", "=", "DataLoader", "(", "\n", "TestDataset", "(", "\n", "test_triples", ",", "\n", "all_true_triples", ",", "\n", "args", ".", "nentity", ",", "\n", "args", ".", "nrelation", ",", "\n", "'head-batch'", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "max", "(", "1", ",", "args", ".", "cpu_num", "//", "2", ")", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "test_dataloader_tail", "=", "DataLoader", "(", "\n", "TestDataset", "(", "\n", "test_triples", ",", "\n", "all_true_triples", ",", "\n", "args", ".", "nentity", ",", "\n", "args", ".", "nrelation", ",", "\n", "'tail-batch'", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "max", "(", "1", ",", "args", ".", "cpu_num", "//", "2", ")", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "test_dataset_list", "=", "[", "test_dataloader_head", ",", "test_dataloader_tail", "]", "\n", "\n", "logs", "=", "[", "]", "\n", "\n", "step", "=", "0", "\n", "total_steps", "=", "sum", "(", "[", "len", "(", "dataset", ")", "for", "dataset", "in", "test_dataset_list", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "test_dataset", "in", "test_dataset_list", ":", "\n", "                ", "for", "positive_sample", ",", "negative_sample", ",", "filter_bias", ",", "mode", "in", "test_dataset", ":", "\n", "                    ", "if", "args", ".", "cuda", ":", "\n", "                        ", "positive_sample", "=", "positive_sample", ".", "cuda", "(", ")", "\n", "negative_sample", "=", "negative_sample", ".", "cuda", "(", ")", "\n", "filter_bias", "=", "filter_bias", ".", "cuda", "(", ")", "\n", "\n", "", "batch_size", "=", "positive_sample", ".", "size", "(", "0", ")", "\n", "\n", "score", "=", "model", "(", "(", "positive_sample", ",", "negative_sample", ")", ",", "mode", ")", "\n", "score", "+=", "filter_bias", "\n", "\n", "# Explicitly sort all the entities to ensure that there is no test exposure bias", "\n", "argsort", "=", "torch", ".", "argsort", "(", "score", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "\n", "if", "mode", "==", "'head-batch'", ":", "\n", "                        ", "positive_arg", "=", "positive_sample", "[", ":", ",", "0", "]", "\n", "", "elif", "mode", "==", "'tail-batch'", ":", "\n", "                        ", "positive_arg", "=", "positive_sample", "[", ":", ",", "2", "]", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'mode %s not supported'", "%", "mode", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# Notice that argsort is not ranking", "\n", "                        ", "ranking", "=", "(", "argsort", "[", "i", ",", ":", "]", "==", "positive_arg", "[", "i", "]", ")", ".", "nonzero", "(", ")", "\n", "assert", "ranking", ".", "size", "(", "0", ")", "==", "1", "\n", "\n", "# ranking + 1 is the true ranking used in evaluation metrics", "\n", "ranking", "=", "1", "+", "ranking", ".", "item", "(", ")", "\n", "logs", ".", "append", "(", "{", "\n", "'MRR'", ":", "1.0", "/", "ranking", ",", "\n", "'MR'", ":", "float", "(", "ranking", ")", ",", "\n", "'HITS@1'", ":", "1.0", "if", "ranking", "<=", "1", "else", "0.0", ",", "\n", "'HITS@3'", ":", "1.0", "if", "ranking", "<=", "3", "else", "0.0", ",", "\n", "'HITS@10'", ":", "1.0", "if", "ranking", "<=", "10", "else", "0.0", ",", "\n", "}", ")", "\n", "\n", "", "if", "step", "%", "args", ".", "test_log_steps", "==", "0", ":", "\n", "                        ", "logging", ".", "info", "(", "'Evaluating the model... (%d/%d)'", "%", "(", "step", ",", "total_steps", ")", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "", "", "", "metrics", "=", "{", "}", "\n", "for", "metric", "in", "logs", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "            ", "metrics", "[", "metric", "]", "=", "sum", "(", "[", "log", "[", "metric", "]", "for", "log", "in", "logs", "]", ")", "/", "len", "(", "logs", ")", "\n", "\n", "", "return", "metrics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.parse_args": [[16, 63], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.parse_args"], ["def", "parse_args", "(", "args", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Training and Testing Knowledge Graph Embedding Models'", ",", "\n", "usage", "=", "'train.py [<args>] [-h | --help]'", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use GPU'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--do_train'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--do_valid'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--do_test'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Evaluate on training data'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'TransE'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-de'", ",", "'--double_entity_embedding'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-dr'", ",", "'--double_relation_embedding'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-n'", ",", "'--negative_sample_size'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--hidden_dim'", ",", "default", "=", "500", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-g'", ",", "'--gamma'", ",", "default", "=", "12.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-adv'", ",", "'--negative_adversarial_sampling'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-a'", ",", "'--adversarial_temperature'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-khop'", ",", "'--negative_k_hop_sampling'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-nrw'", ",", "'--negative_n_random_walks'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch_size'", ",", "default", "=", "1024", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--regularization'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'valid/test batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--uni_weight'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Otherwise use subsampling weighting like in word2vec'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "'--learning_rate'", ",", "default", "=", "0.0001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'-cpu'", ",", "'--cpu_num'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'-init'", ",", "'--init_checkpoint'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-save'", ",", "'--save_path'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--max_steps'", ",", "default", "=", "100000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_up_steps'", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_checkpoint_steps'", ",", "default", "=", "10000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_steps'", ",", "default", "=", "10000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--log_steps'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'train log every xx steps'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_log_steps'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "help", "=", "'valid/test log every xx steps'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--nentity'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'DO NOT MANUALLY SET'", ")", "\n", "parser", ".", "add_argument", "(", "'--nrelation'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'DO NOT MANUALLY SET'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.override_config": [[65, 80], ["open", "json.load", "os.path.join"], "function", ["None"], ["", "def", "override_config", "(", "args", ")", ":", "\n", "    ", "'''\n    Override model and data configuration\n    '''", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "init_checkpoint", ",", "'config.json'", ")", ",", "'r'", ")", "as", "fjson", ":", "\n", "        ", "argparse_dict", "=", "json", ".", "load", "(", "fjson", ")", "\n", "\n", "", "if", "args", ".", "data_path", "is", "None", ":", "\n", "        ", "args", ".", "data_path", "=", "argparse_dict", "[", "'data_path'", "]", "\n", "", "args", ".", "model", "=", "argparse_dict", "[", "'model'", "]", "\n", "args", ".", "double_entity_embedding", "=", "argparse_dict", "[", "'double_entity_embedding'", "]", "\n", "args", ".", "double_relation_embedding", "=", "argparse_dict", "[", "'double_relation_embedding'", "]", "\n", "args", ".", "hidden_dim", "=", "argparse_dict", "[", "'hidden_dim'", "]", "\n", "args", ".", "test_batch_size", "=", "argparse_dict", "[", "'test_batch_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.save_model": [[82, 109], ["vars", "torch.save", "model.entity_embedding.detach().cpu().numpy", "numpy.save", "model.relation_embedding.detach().cpu().numpy", "numpy.save", "open", "json.dump", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "model.state_dict", "optimizer.state_dict", "model.entity_embedding.detach().cpu", "model.relation_embedding.detach().cpu", "model.entity_embedding.detach", "model.relation_embedding.detach"], "function", ["None"], ["", "def", "save_model", "(", "model", ",", "optimizer", ",", "save_variable_list", ",", "args", ")", ":", "\n", "    ", "'''\n    Save the parameters of the model and the optimizer,\n    as well as some other variables such as step and learning_rate\n    '''", "\n", "\n", "argparse_dict", "=", "vars", "(", "args", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'config.json'", ")", ",", "'w'", ")", "as", "fjson", ":", "\n", "        ", "json", ".", "dump", "(", "argparse_dict", ",", "fjson", ")", "\n", "\n", "", "torch", ".", "save", "(", "{", "\n", "**", "save_variable_list", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'checkpoint'", ")", "\n", ")", "\n", "\n", "entity_embedding", "=", "model", ".", "entity_embedding", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'entity_embedding'", ")", ",", "\n", "entity_embedding", "\n", ")", "\n", "\n", "relation_embedding", "=", "model", ".", "relation_embedding", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "'relation_embedding'", ")", ",", "\n", "relation_embedding", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.read_triple": [[112, 122], ["open", "line.strip().split", "triples.append", "line.strip"], "function", ["None"], ["", "def", "read_triple", "(", "file_path", ",", "entity2id", ",", "relation2id", ")", ":", "\n", "    ", "'''\n    Read triples and map them into ids.\n    '''", "\n", "triples", "=", "[", "]", "\n", "with", "open", "(", "file_path", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "h", ",", "r", ",", "t", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "triples", ".", "append", "(", "(", "entity2id", "[", "h", "]", ",", "relation2id", "[", "r", "]", ",", "entity2id", "[", "t", "]", ")", ")", "\n", "", "", "return", "triples", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.set_logger": [[124, 146], ["logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "os.path.join", "os.path.join", "logging.getLogger"], "function", ["None"], ["", "def", "set_logger", "(", "args", ")", ":", "\n", "    ", "'''\n    Write logs to checkpoint and console\n    '''", "\n", "\n", "if", "args", ".", "do_train", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", "or", "args", ".", "init_checkpoint", ",", "'train.log'", ")", "\n", "", "else", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", "or", "args", ".", "init_checkpoint", ",", "'test.log'", ")", "\n", "\n", "", "logging", ".", "basicConfig", "(", "\n", "format", "=", "'%(asctime)s %(levelname)-8s %(message)s'", ",", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ",", "\n", "filename", "=", "log_file", ",", "\n", "filemode", "=", "'w'", "\n", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(levelname)-8s %(message)s'", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.log_metrics": [[148, 154], ["logging.info"], "function", ["None"], ["", "def", "log_metrics", "(", "mode", ",", "step", ",", "metrics", ")", ":", "\n", "    ", "'''\n    Print the evaluation logs\n    '''", "\n", "for", "metric", "in", "metrics", ":", "\n", "        ", "logging", ".", "info", "(", "'%s %s at step %d: %f'", "%", "(", "mode", ",", "metric", ",", "step", ",", "metrics", "[", "metric", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.main": [[156, 361], ["run.set_logger", "len", "len", "logging.info", "logging.info", "logging.info", "logging.info", "run.read_triple", "logging.info", "run.read_triple", "logging.info", "run.read_triple", "logging.info", "model.KGEModel", "logging.info", "kge_model.cuda.named_parameters", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "ValueError", "run.override_config", "ValueError", "os.makedirs", "open", "dict", "open", "dict", "os.path.join", "os.path.join", "os.path.join", "logging.info", "kge_model.cuda.cuda", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataloader.BidirectionalOneShotIterator", "torch.optim.Adam", "logging.info", "torch.load", "kge_model.cuda.load_state_dict", "logging.info", "logging.info", "logging.info", "range", "run.save_model", "logging.info", "kge_model.cuda.test_step", "run.log_metrics", "logging.info", "kge_model.cuda.test_step", "run.log_metrics", "logging.info", "kge_model.cuda.test_step", "run.log_metrics", "ValueError", "os.path.exists", "os.path.join", "line.strip().split", "int", "os.path.join", "line.strip().split", "int", "len", "len", "len", "dataloader.TrainDataset", "dataloader.TrainDataset", "filter", "os.path.join", "torch.optim.Adam.load_state_dict", "str", "kge_model.cuda.train_step", "training_logs.append", "max", "max", "kge_model.cuda.parameters", "logging.info", "torch.optim.Adam", "run.save_model", "training_logs[].keys", "run.log_metrics", "logging.info", "kge_model.cuda.test_step", "run.log_metrics", "line.strip", "line.strip", "str", "str", "filter", "param.size", "kge_model.cuda.parameters", "sum", "len"], "function", ["home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.set_logger", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.read_triple", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.read_triple", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.read_triple", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.override_config", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.save_model", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.test_step", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.log_metrics", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.test_step", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.log_metrics", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.test_step", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.log_metrics", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.train_step", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.save_model", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.log_metrics", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.model.KGEModel.test_step", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.run.log_metrics"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "(", "not", "args", ".", "do_train", ")", "and", "(", "not", "args", ".", "do_valid", ")", "and", "(", "not", "args", ".", "do_test", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'one of train/val/test mode must be choosed.'", ")", "\n", "\n", "", "if", "args", ".", "init_checkpoint", ":", "\n", "        ", "override_config", "(", "args", ")", "\n", "", "elif", "args", ".", "data_path", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'one of init_checkpoint/data_path must be choosed.'", ")", "\n", "\n", "", "if", "args", ".", "do_train", "and", "args", ".", "save_path", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Where do you want to save your trained model?'", ")", "\n", "\n", "", "if", "args", ".", "save_path", "and", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_path", ")", "\n", "\n", "# Write logs to checkpoint and console", "\n", "", "set_logger", "(", "args", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'entities.dict'", ")", ")", "as", "fin", ":", "\n", "        ", "entity2id", "=", "dict", "(", ")", "\n", "for", "line", "in", "fin", ":", "\n", "            ", "eid", ",", "entity", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "entity2id", "[", "entity", "]", "=", "int", "(", "eid", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'relations.dict'", ")", ")", "as", "fin", ":", "\n", "        ", "relation2id", "=", "dict", "(", ")", "\n", "for", "line", "in", "fin", ":", "\n", "            ", "rid", ",", "relation", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "relation2id", "[", "relation", "]", "=", "int", "(", "rid", ")", "\n", "\n", "", "", "nentity", "=", "len", "(", "entity2id", ")", "\n", "nrelation", "=", "len", "(", "relation2id", ")", "\n", "\n", "args", ".", "nentity", "=", "nentity", "\n", "args", ".", "nrelation", "=", "nrelation", "\n", "\n", "logging", ".", "info", "(", "'Model: %s'", "%", "args", ".", "model", ")", "\n", "logging", ".", "info", "(", "'Data Path: %s'", "%", "args", ".", "data_path", ")", "\n", "logging", ".", "info", "(", "'#entity: %d'", "%", "nentity", ")", "\n", "logging", ".", "info", "(", "'#relation: %d'", "%", "nrelation", ")", "\n", "\n", "train_triples", "=", "read_triple", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train.txt'", ")", ",", "entity2id", ",", "relation2id", ")", "\n", "logging", ".", "info", "(", "'#train: %d'", "%", "len", "(", "train_triples", ")", ")", "\n", "valid_triples", "=", "read_triple", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'valid.txt'", ")", ",", "entity2id", ",", "relation2id", ")", "\n", "logging", ".", "info", "(", "'#valid: %d'", "%", "len", "(", "valid_triples", ")", ")", "\n", "test_triples", "=", "read_triple", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'test.txt'", ")", ",", "entity2id", ",", "relation2id", ")", "\n", "logging", ".", "info", "(", "'#test: %d'", "%", "len", "(", "test_triples", ")", ")", "\n", "\n", "# All true triples", "\n", "all_true_triples", "=", "train_triples", "+", "valid_triples", "+", "test_triples", "\n", "\n", "kge_model", "=", "KGEModel", "(", "\n", "model_name", "=", "args", ".", "model", ",", "\n", "nentity", "=", "nentity", ",", "\n", "nrelation", "=", "nrelation", ",", "\n", "hidden_dim", "=", "args", ".", "hidden_dim", ",", "\n", "gamma", "=", "args", ".", "gamma", ",", "\n", "double_entity_embedding", "=", "args", ".", "double_entity_embedding", ",", "\n", "double_relation_embedding", "=", "args", ".", "double_relation_embedding", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "'Model Parameter Configuration:'", ")", "\n", "for", "name", ",", "param", "in", "kge_model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Parameter %s: %s, require_grad = %s'", "%", "(", "name", ",", "str", "(", "param", ".", "size", "(", ")", ")", ",", "str", "(", "param", ".", "requires_grad", ")", ")", ")", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "kge_model", "=", "kge_model", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "do_train", ":", "\n", "# Set training dataloader iterator", "\n", "        ", "train_dataloader_head", "=", "DataLoader", "(", "\n", "TrainDataset", "(", "train_triples", ",", "\n", "nentity", ",", "\n", "nrelation", ",", "\n", "args", ".", "negative_sample_size", ",", "\n", "'head-batch'", ",", "\n", "args", ".", "negative_k_hop_sampling", ",", "\n", "args", ".", "negative_n_random_walks", ",", "\n", "dsn", "=", "args", ".", "data_path", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "max", "(", "1", ",", "args", ".", "cpu_num", "//", "2", ")", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "train_dataloader_tail", "=", "DataLoader", "(", "\n", "TrainDataset", "(", "train_triples", ",", "\n", "nentity", ",", "\n", "nrelation", ",", "\n", "args", ".", "negative_sample_size", ",", "\n", "'tail-batch'", ",", "\n", "args", ".", "negative_k_hop_sampling", ",", "\n", "args", ".", "negative_n_random_walks", ",", "\n", "dsn", "=", "args", ".", "data_path", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "max", "(", "1", ",", "args", ".", "cpu_num", "//", "2", ")", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "train_iterator", "=", "BidirectionalOneShotIterator", "(", "train_dataloader_head", ",", "train_dataloader_tail", ")", "\n", "\n", "# Set training configuration", "\n", "current_learning_rate", "=", "args", ".", "learning_rate", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "kge_model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "current_learning_rate", "\n", ")", "\n", "if", "args", ".", "warm_up_steps", ":", "\n", "            ", "warm_up_steps", "=", "args", ".", "warm_up_steps", "\n", "", "else", ":", "\n", "            ", "warm_up_steps", "=", "args", ".", "max_steps", "//", "2", "\n", "\n", "", "", "if", "args", ".", "init_checkpoint", ":", "\n", "# Restore model from checkpoint directory", "\n", "        ", "logging", ".", "info", "(", "'Loading checkpoint %s...'", "%", "args", ".", "init_checkpoint", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "init_checkpoint", ",", "'checkpoint'", ")", ")", "\n", "init_step", "=", "checkpoint", "[", "'step'", "]", "\n", "kge_model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "if", "args", ".", "do_train", ":", "\n", "            ", "current_learning_rate", "=", "checkpoint", "[", "'current_learning_rate'", "]", "\n", "warm_up_steps", "=", "checkpoint", "[", "'warm_up_steps'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "'Ramdomly Initializing %s Model...'", "%", "args", ".", "model", ")", "\n", "init_step", "=", "0", "\n", "\n", "", "step", "=", "init_step", "\n", "\n", "logging", ".", "info", "(", "'Start Training...'", ")", "\n", "logging", ".", "info", "(", "'init_step = %d'", "%", "init_step", ")", "\n", "logging", ".", "info", "(", "'batch_size = %d'", "%", "args", ".", "batch_size", ")", "\n", "logging", ".", "info", "(", "'negative_adversarial_sampling = %d'", "%", "args", ".", "negative_adversarial_sampling", ")", "\n", "logging", ".", "info", "(", "'negative_k_hop_sampling = %d'", "%", "args", ".", "negative_k_hop_sampling", ")", "\n", "logging", ".", "info", "(", "'negative_n_random_walks = %d'", "%", "args", ".", "negative_n_random_walks", ")", "\n", "logging", ".", "info", "(", "'hidden_dim = %d'", "%", "args", ".", "hidden_dim", ")", "\n", "logging", ".", "info", "(", "'gamma = %f'", "%", "args", ".", "gamma", ")", "\n", "logging", ".", "info", "(", "'negative_adversarial_sampling = %s'", "%", "str", "(", "args", ".", "negative_adversarial_sampling", ")", ")", "\n", "if", "args", ".", "negative_adversarial_sampling", ":", "\n", "        ", "logging", ".", "info", "(", "'adversarial_temperature = %f'", "%", "args", ".", "adversarial_temperature", ")", "\n", "\n", "# Set valid dataloader as it would be evaluated during training", "\n", "\n", "", "if", "args", ".", "do_train", ":", "\n", "        ", "logging", ".", "info", "(", "'learning_rate = %d'", "%", "current_learning_rate", ")", "\n", "\n", "training_logs", "=", "[", "]", "\n", "\n", "# Training Loop", "\n", "for", "step", "in", "range", "(", "init_step", ",", "args", ".", "max_steps", ")", ":", "\n", "\n", "            ", "log", "=", "kge_model", ".", "train_step", "(", "kge_model", ",", "optimizer", ",", "train_iterator", ",", "args", ")", "\n", "\n", "training_logs", ".", "append", "(", "log", ")", "\n", "\n", "if", "step", ">=", "warm_up_steps", ":", "\n", "                ", "current_learning_rate", "=", "current_learning_rate", "/", "10", "\n", "logging", ".", "info", "(", "'Change learning_rate to %f at step %d'", "%", "(", "current_learning_rate", ",", "step", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "kge_model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "current_learning_rate", "\n", ")", "\n", "warm_up_steps", "=", "warm_up_steps", "*", "3", "\n", "\n", "", "if", "step", "%", "args", ".", "save_checkpoint_steps", "==", "0", ":", "\n", "                ", "save_variable_list", "=", "{", "\n", "'step'", ":", "step", ",", "\n", "'current_learning_rate'", ":", "current_learning_rate", ",", "\n", "'warm_up_steps'", ":", "warm_up_steps", "\n", "}", "\n", "save_model", "(", "kge_model", ",", "optimizer", ",", "save_variable_list", ",", "args", ")", "\n", "\n", "", "if", "step", "%", "args", ".", "log_steps", "==", "0", ":", "\n", "                ", "metrics", "=", "{", "}", "\n", "for", "metric", "in", "training_logs", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "metrics", "[", "metric", "]", "=", "sum", "(", "[", "log", "[", "metric", "]", "for", "log", "in", "training_logs", "]", ")", "/", "len", "(", "training_logs", ")", "\n", "", "log_metrics", "(", "'Training average'", ",", "step", ",", "metrics", ")", "\n", "training_logs", "=", "[", "]", "\n", "\n", "", "if", "args", ".", "do_valid", "and", "step", "%", "args", ".", "valid_steps", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'Evaluating on Valid Dataset...'", ")", "\n", "metrics", "=", "kge_model", ".", "test_step", "(", "kge_model", ",", "valid_triples", ",", "all_true_triples", ",", "args", ")", "\n", "log_metrics", "(", "'Valid'", ",", "step", ",", "metrics", ")", "\n", "\n", "", "", "save_variable_list", "=", "{", "\n", "'step'", ":", "step", ",", "\n", "'current_learning_rate'", ":", "current_learning_rate", ",", "\n", "'warm_up_steps'", ":", "warm_up_steps", "\n", "}", "\n", "save_model", "(", "kge_model", ",", "optimizer", ",", "save_variable_list", ",", "args", ")", "\n", "\n", "", "if", "args", ".", "do_valid", ":", "\n", "        ", "logging", ".", "info", "(", "'Evaluating on Valid Dataset...'", ")", "\n", "metrics", "=", "kge_model", ".", "test_step", "(", "kge_model", ",", "valid_triples", ",", "all_true_triples", ",", "args", ")", "\n", "log_metrics", "(", "'Valid'", ",", "step", ",", "metrics", ")", "\n", "\n", "", "if", "args", ".", "do_test", ":", "\n", "        ", "logging", ".", "info", "(", "'Evaluating on Test Dataset...'", ")", "\n", "metrics", "=", "kge_model", ".", "test_step", "(", "kge_model", ",", "test_triples", ",", "all_true_triples", ",", "args", ")", "\n", "log_metrics", "(", "'Test'", ",", "step", ",", "metrics", ")", "\n", "\n", "", "if", "args", ".", "evaluate_train", ":", "\n", "        ", "logging", ".", "info", "(", "'Evaluating on Training Dataset...'", ")", "\n", "metrics", "=", "kge_model", ".", "test_step", "(", "kge_model", ",", "train_triples", ",", "all_true_triples", ",", "args", ")", "\n", "log_metrics", "(", "'Test'", ",", "step", ",", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset._get_adj_mat": [[24, 32], ["scipy.sparse.dok_matrix", "a_mat.tocsr.tocsr.tocsr"], "methods", ["None"], ["    ", "def", "_get_adj_mat", "(", "self", ")", ":", "\n", "        ", "a_mat", "=", "sparse", ".", "dok_matrix", "(", "(", "self", ".", "nentity", ",", "self", ".", "nentity", ")", ")", "\n", "for", "(", "h", ",", "_", ",", "t", ")", "in", "self", ".", "triples", ":", "\n", "            ", "a_mat", "[", "t", ",", "h", "]", "=", "1", "\n", "a_mat", "[", "h", ",", "t", "]", "=", "1", "\n", "\n", "", "a_mat", "=", "a_mat", ".", "tocsr", "(", ")", "\n", "return", "a_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.build_k_hop": [[33, 52], ["os.path.exists", "dataloader.TrainDataset._get_adj_mat", "scipy.sparse.save_npz", "logging.info", "scipy.sparse.load_npz"], "methods", ["home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset._get_adj_mat"], ["", "@", "time_it", "\n", "def", "build_k_hop", "(", "self", ",", "k_hop", ",", "dataset_name", ")", ":", "\n", "        ", "if", "k_hop", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "save_path", "=", "f'cached_matrices/matrix_{dataset_name}_k{k_hop}_nrw0.npz'", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "logging", ".", "info", "(", "f'Using cached matrix: {save_path}'", ")", "\n", "k_mat", "=", "sparse", ".", "load_npz", "(", "save_path", ")", "\n", "return", "k_mat", "\n", "\n", "", "_a_mat", "=", "self", ".", "_get_adj_mat", "(", ")", "\n", "_k_mat", "=", "_a_mat", "**", "(", "k_hop", "-", "1", ")", "\n", "k_mat", "=", "_k_mat", "*", "_a_mat", "+", "_k_mat", "\n", "\n", "sparse", ".", "save_npz", "(", "save_path", ",", "k_mat", ")", "\n", "\n", "return", "k_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.build_k_rw": [[53, 94], ["os.path.exists", "dataloader.TrainDataset._get_adj_mat", "scipy.sparse.dok_matrix", "range", "logging.info", "scipy.sparse.load_npz.tocsr", "scipy.sparse.save_npz", "logging.info", "scipy.sparse.load_npz", "len", "numpy.random.randint", "range", "range", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset._get_adj_mat"], ["", "@", "time_it", "\n", "def", "build_k_rw", "(", "self", ",", "n_rw", ",", "k_hop", ",", "dataset_name", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            k_mat: sparse |V| * |V| adjacency matrix\n        \"\"\"", "\n", "if", "n_rw", "==", "0", "or", "k_hop", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "save_path", "=", "f'cached_matrices/matrix_{dataset_name}_k{k_hop}_nrw{n_rw}.npz'", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "logging", ".", "info", "(", "f'Using cached matrix: {save_path}'", ")", "\n", "k_mat", "=", "sparse", ".", "load_npz", "(", "save_path", ")", "\n", "return", "k_mat", "\n", "\n", "", "a_mat", "=", "self", ".", "_get_adj_mat", "(", ")", "\n", "k_mat", "=", "sparse", ".", "dok_matrix", "(", "(", "self", ".", "nentity", ",", "self", ".", "nentity", ")", ")", "\n", "\n", "randomly_sampled", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "nentity", ")", ":", "\n", "            ", "neighbors", "=", "a_mat", "[", "i", "]", "\n", "if", "len", "(", "neighbors", ".", "indices", ")", "==", "0", ":", "\n", "                ", "randomly_sampled", "+=", "1", "\n", "walker", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "nentity", ",", "size", "=", "n_rw", ")", "\n", "k_mat", "[", "i", ",", "walker", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "for", "_", "in", "range", "(", "0", ",", "n_rw", ")", ":", "\n", "                    ", "walker", "=", "i", "\n", "for", "_", "in", "range", "(", "0", ",", "k_hop", ")", ":", "\n", "                        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "neighbors", ".", "indices", ")", ")", "\n", "walker", "=", "neighbors", ".", "indices", "[", "idx", "]", "\n", "neighbors", "=", "a_mat", "[", "walker", "]", "\n", "", "k_mat", "[", "i", ",", "walker", "]", "+=", "1", "\n", "", "", "", "logging", ".", "info", "(", "f'randomly_sampled: {randomly_sampled}'", ")", "\n", "k_mat", "=", "k_mat", ".", "tocsr", "(", ")", "\n", "\n", "sparse", ".", "save_npz", "(", "save_path", ",", "k_mat", ")", "\n", "\n", "return", "k_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.__init__": [[95, 111], ["len", "set", "dataloader.TrainDataset.count_frequency", "dataloader.TrainDataset.get_true_head_and_tail", "dsn.split", "dataloader.TrainDataset.build_k_hop", "dataloader.TrainDataset.build_k_rw"], "methods", ["home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.count_frequency", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.get_true_head_and_tail", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.build_k_hop", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.build_k_rw"], ["", "def", "__init__", "(", "self", ",", "triples", ",", "nentity", ",", "nrelation", ",", "negative_sample_size", ",", "mode", ",", "k_hop", ",", "n_rw", ",", "dsn", ")", ":", "\n", "        ", "self", ".", "len", "=", "len", "(", "triples", ")", "\n", "self", ".", "triples", "=", "triples", "\n", "self", ".", "triple_set", "=", "set", "(", "triples", ")", "\n", "self", ".", "nentity", "=", "nentity", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "self", ".", "negative_sample_size", "=", "negative_sample_size", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "count", "=", "self", ".", "count_frequency", "(", "triples", ")", "\n", "self", ".", "true_head", ",", "self", ".", "true_tail", "=", "self", ".", "get_true_head_and_tail", "(", "self", ".", "triples", ")", "\n", "self", ".", "dsn", "=", "dsn", ".", "split", "(", "'/'", ")", "[", "1", "]", "# dataset name", "\n", "\n", "if", "n_rw", "==", "0", ":", "\n", "            ", "self", ".", "k_neighbors", "=", "self", ".", "build_k_hop", "(", "k_hop", ",", "dataset_name", "=", "self", ".", "dsn", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "k_neighbors", "=", "self", ".", "build_k_rw", "(", "n_rw", "=", "n_rw", ",", "k_hop", "=", "k_hop", ",", "dataset_name", "=", "self", ".", "dsn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.__len__": [[112, 114], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.__getitem__": [[115, 168], ["torch.sqrt", "torch.from_numpy", "torch.LongTensor", "negative_sample_list.append", "numpy.concatenate", "torch.Tensor", "khop[].astype", "numpy.random.randint", "numpy.in1d", "numpy.in1d", "ValueError", "ValueError", "numpy.random.randint", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "positive_sample", "=", "self", ".", "triples", "[", "idx", "]", "\n", "\n", "head", ",", "relation", ",", "tail", "=", "positive_sample", "\n", "\n", "subsampling_weight", "=", "self", ".", "count", "[", "(", "head", ",", "relation", ")", "]", "+", "self", ".", "count", "[", "(", "tail", ",", "-", "relation", "-", "1", ")", "]", "\n", "subsampling_weight", "=", "torch", ".", "sqrt", "(", "1", "/", "torch", ".", "Tensor", "(", "[", "subsampling_weight", "]", ")", ")", "\n", "\n", "negative_sample_list", "=", "[", "]", "\n", "negative_sample_size", "=", "0", "\n", "\n", "k_hop_flag", "=", "True", "\n", "while", "negative_sample_size", "<", "self", ".", "negative_sample_size", ":", "\n", "            ", "if", "self", ".", "k_neighbors", "is", "not", "None", "and", "k_hop_flag", ":", "\n", "                ", "if", "self", ".", "mode", "==", "'head-batch'", ":", "\n", "                    ", "khop", "=", "self", ".", "k_neighbors", "[", "tail", "]", ".", "indices", "\n", "", "elif", "self", ".", "mode", "==", "'tail-batch'", ":", "\n", "                    ", "khop", "=", "self", ".", "k_neighbors", "[", "head", "]", ".", "indices", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'Training batch mode %s not supported'", "%", "self", ".", "mode", ")", "\n", "", "negative_sample", "=", "khop", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "khop", ")", ",", "size", "=", "self", ".", "negative_sample_size", "*", "2", ")", "]", ".", "astype", "(", "\n", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "                ", "negative_sample", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "nentity", ",", "size", "=", "self", ".", "negative_sample_size", "*", "2", ")", "\n", "", "if", "self", ".", "mode", "==", "'head-batch'", ":", "\n", "                ", "mask", "=", "np", ".", "in1d", "(", "\n", "negative_sample", ",", "\n", "self", ".", "true_head", "[", "(", "relation", ",", "tail", ")", "]", ",", "\n", "assume_unique", "=", "True", ",", "\n", "invert", "=", "True", "\n", ")", "\n", "", "elif", "self", ".", "mode", "==", "'tail-batch'", ":", "\n", "                ", "mask", "=", "np", ".", "in1d", "(", "\n", "negative_sample", ",", "\n", "self", ".", "true_tail", "[", "(", "head", ",", "relation", ")", "]", ",", "\n", "assume_unique", "=", "True", ",", "\n", "invert", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Training batch mode %s not supported'", "%", "self", ".", "mode", ")", "\n", "", "negative_sample", "=", "negative_sample", "[", "mask", "]", "\n", "negative_sample_list", ".", "append", "(", "negative_sample", ")", "\n", "if", "negative_sample", ".", "size", "==", "0", ":", "\n", "                ", "k_hop_flag", "=", "False", "\n", "", "negative_sample_size", "+=", "negative_sample", ".", "size", "\n", "\n", "", "negative_sample", "=", "np", ".", "concatenate", "(", "negative_sample_list", ")", "[", ":", "self", ".", "negative_sample_size", "]", "\n", "\n", "negative_sample", "=", "torch", ".", "from_numpy", "(", "negative_sample", ")", "\n", "\n", "positive_sample", "=", "torch", ".", "LongTensor", "(", "positive_sample", ")", "\n", "\n", "return", "positive_sample", ",", "negative_sample", ",", "subsampling_weight", ",", "self", ".", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.collate_fn": [[169, 176], ["torch.stack", "torch.stack", "torch.cat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "positive_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "0", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "negative_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "1", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "subsample_weight", "=", "torch", ".", "cat", "(", "[", "_", "[", "2", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "mode", "=", "data", "[", "0", "]", "[", "3", "]", "\n", "return", "positive_sample", ",", "negative_sample", ",", "subsample_weight", ",", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.count_frequency": [[177, 195], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "count_frequency", "(", "triples", ",", "start", "=", "4", ")", ":", "\n", "        ", "'''\n        Get frequency of a partial triple like (head, relation) or (relation, tail)\n        The frequency will be used for subsampling like word2vec\n        '''", "\n", "count", "=", "{", "}", "\n", "for", "head", ",", "relation", ",", "tail", "in", "triples", ":", "\n", "            ", "if", "(", "head", ",", "relation", ")", "not", "in", "count", ":", "\n", "                ", "count", "[", "(", "head", ",", "relation", ")", "]", "=", "start", "\n", "", "else", ":", "\n", "                ", "count", "[", "(", "head", ",", "relation", ")", "]", "+=", "1", "\n", "\n", "", "if", "(", "tail", ",", "-", "relation", "-", "1", ")", "not", "in", "count", ":", "\n", "                ", "count", "[", "(", "tail", ",", "-", "relation", "-", "1", ")", "]", "=", "start", "\n", "", "else", ":", "\n", "                ", "count", "[", "(", "tail", ",", "-", "relation", "-", "1", ")", "]", "+=", "1", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TrainDataset.get_true_head_and_tail": [[196, 220], ["true_tail[].append", "true_head[].append", "numpy.array", "numpy.array", "list", "list", "set", "set"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_true_head_and_tail", "(", "triples", ")", ":", "\n", "        ", "'''\n        Build a dictionary of true triples that will\n        be used to filter these true triples for negative sampling\n        '''", "\n", "\n", "true_head", "=", "{", "}", "\n", "true_tail", "=", "{", "}", "\n", "\n", "for", "head", ",", "relation", ",", "tail", "in", "triples", ":", "\n", "            ", "if", "(", "head", ",", "relation", ")", "not", "in", "true_tail", ":", "\n", "                ", "true_tail", "[", "(", "head", ",", "relation", ")", "]", "=", "[", "]", "\n", "", "true_tail", "[", "(", "head", ",", "relation", ")", "]", ".", "append", "(", "tail", ")", "\n", "if", "(", "relation", ",", "tail", ")", "not", "in", "true_head", ":", "\n", "                ", "true_head", "[", "(", "relation", ",", "tail", ")", "]", "=", "[", "]", "\n", "", "true_head", "[", "(", "relation", ",", "tail", ")", "]", ".", "append", "(", "head", ")", "\n", "\n", "", "for", "relation", ",", "tail", "in", "true_head", ":", "\n", "            ", "true_head", "[", "(", "relation", ",", "tail", ")", "]", "=", "np", ".", "array", "(", "list", "(", "set", "(", "true_head", "[", "(", "relation", ",", "tail", ")", "]", ")", ")", ")", "\n", "", "for", "head", ",", "relation", "in", "true_tail", ":", "\n", "            ", "true_tail", "[", "(", "head", ",", "relation", ")", "]", "=", "np", ".", "array", "(", "list", "(", "set", "(", "true_tail", "[", "(", "head", ",", "relation", ")", "]", ")", ")", ")", "\n", "\n", "", "return", "true_head", ",", "true_tail", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TestDataset.__init__": [[223, 230], ["len", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "triples", ",", "all_true_triples", ",", "nentity", ",", "nrelation", ",", "mode", ")", ":", "\n", "        ", "self", ".", "len", "=", "len", "(", "triples", ")", "\n", "self", ".", "triple_set", "=", "set", "(", "all_true_triples", ")", "\n", "self", ".", "triples", "=", "triples", "\n", "self", ".", "nentity", "=", "nentity", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TestDataset.__len__": [[231, 233], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TestDataset.__getitem__": [[234, 255], ["torch.LongTensor", "tmp[].float", "torch.LongTensor", "ValueError", "range", "range"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "head", ",", "relation", ",", "tail", "=", "self", ".", "triples", "[", "idx", "]", "\n", "\n", "if", "self", ".", "mode", "==", "'head-batch'", ":", "\n", "            ", "tmp", "=", "[", "(", "0", ",", "rand_head", ")", "if", "(", "rand_head", ",", "relation", ",", "tail", ")", "not", "in", "self", ".", "triple_set", "\n", "else", "(", "-", "1", ",", "head", ")", "for", "rand_head", "in", "range", "(", "self", ".", "nentity", ")", "]", "\n", "tmp", "[", "head", "]", "=", "(", "0", ",", "head", ")", "\n", "", "elif", "self", ".", "mode", "==", "'tail-batch'", ":", "\n", "            ", "tmp", "=", "[", "(", "0", ",", "rand_tail", ")", "if", "(", "head", ",", "relation", ",", "rand_tail", ")", "not", "in", "self", ".", "triple_set", "\n", "else", "(", "-", "1", ",", "tail", ")", "for", "rand_tail", "in", "range", "(", "self", ".", "nentity", ")", "]", "\n", "tmp", "[", "tail", "]", "=", "(", "0", ",", "tail", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'negative batch mode %s not supported'", "%", "self", ".", "mode", ")", "\n", "\n", "", "tmp", "=", "torch", ".", "LongTensor", "(", "tmp", ")", "\n", "filter_bias", "=", "tmp", "[", ":", ",", "0", "]", ".", "float", "(", ")", "\n", "negative_sample", "=", "tmp", "[", ":", ",", "1", "]", "\n", "\n", "positive_sample", "=", "torch", ".", "LongTensor", "(", "(", "head", ",", "relation", ",", "tail", ")", ")", "\n", "\n", "return", "positive_sample", ",", "negative_sample", ",", "filter_bias", ",", "self", ".", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.TestDataset.collate_fn": [[256, 263], ["torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "positive_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "0", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "negative_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "1", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "filter_bias", "=", "torch", ".", "stack", "(", "[", "_", "[", "2", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "mode", "=", "data", "[", "0", "]", "[", "3", "]", "\n", "return", "positive_sample", ",", "negative_sample", ",", "filter_bias", ",", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.BidirectionalOneShotIterator.__init__": [[266, 270], ["dataloader.BidirectionalOneShotIterator.one_shot_iterator", "dataloader.BidirectionalOneShotIterator.one_shot_iterator"], "methods", ["home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.BidirectionalOneShotIterator.one_shot_iterator", "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.BidirectionalOneShotIterator.one_shot_iterator"], ["    ", "def", "__init__", "(", "self", ",", "dataloader_head", ",", "dataloader_tail", ")", ":", "\n", "        ", "self", ".", "iterator_head", "=", "self", ".", "one_shot_iterator", "(", "dataloader_head", ")", "\n", "self", ".", "iterator_tail", "=", "self", ".", "one_shot_iterator", "(", "dataloader_tail", ")", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.BidirectionalOneShotIterator.__next__": [[271, 278], ["next", "next"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "step", "+=", "1", "\n", "if", "self", ".", "step", "%", "2", "==", "0", ":", "\n", "            ", "data", "=", "next", "(", "self", ".", "iterator_head", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "next", "(", "self", ".", "iterator_tail", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.BidirectionalOneShotIterator.one_shot_iterator": [[279, 287], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "one_shot_iterator", "(", "dataloader", ")", ":", "\n", "        ", "'''\n        Transform a PyTorch Dataloader into python iterator\n        '''", "\n", "while", "True", ":", "\n", "            ", "for", "data", "in", "dataloader", ":", "\n", "                ", "yield", "data", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kahrabian_SANS.codes.dataloader.time_it": [[11, 20], ["time.time", "fn", "time.time", "logging.info"], "function", ["None"], ["def", "time_it", "(", "fn", ")", ":", "\n", "    ", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "f'Time: {end - start}'", ")", "\n", "return", "ret", "\n", "\n", "", "return", "wrapper", "\n", "\n"]]}